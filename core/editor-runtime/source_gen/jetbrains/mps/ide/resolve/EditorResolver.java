package jetbrains.mps.ide.resolve;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cellMenu.NodeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.NullSubstituteInfo;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import jetbrains.mps.smodel.action.DefaultReferentNodeSubstituteAction;
import jetbrains.mps.smodel.SModel;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import java.util.Iterator;
import jetbrains.mps.util.IterableUtil;

public class EditorResolver {
  public EditorResolver() {
  }

  public static List<INodeSubstituteAction> createResolveActions(SReference reference, IOperationContext operationContext, EditorContext editorContext) {
    String resolveInfo = reference.getResolveInfo();
    String role = reference.getRole();
    final SNode sourceNode = reference.getSourceNode();
    SNode sourceConcept = sourceNode.getConceptDeclarationNode();
    SNode refLinkDeclaration = SModelSearchUtil.findLinkDeclaration(sourceConcept, role);
    SNode sourceParent = sourceNode.getParent();
    if (sourceParent == null) {
      sourceParent = sourceNode;
    }
    SNode childLinkDeclaration = SModelSearchUtil.findLinkDeclaration(sourceParent.getConceptDeclarationNode(), sourceNode.getRole_());
    EditorCell editorCell = editorContext.createNodeCell(sourceParent);
    EditorCell inspectedCell = editorContext.createInspectedCell(sourceNode, null);
    EditorCell refCell = searchForRefCell(editorCell, sourceNode, refLinkDeclaration, childLinkDeclaration);
    if (refCell == null) {
      refCell = searchForRefCell(inspectedCell, sourceNode, refLinkDeclaration, childLinkDeclaration);
    }
    if (refCell == null) {
      refCell = editorCell;
    }
    NodeSubstituteInfo substituteInfo = refCell.getSubstituteInfo();
    if (substituteInfo == null) {
      substituteInfo = new NullSubstituteInfo();
    }
    List<INodeSubstituteAction> actions = substituteInfo.getMatchingActions(resolveInfo, false);
    List<INodeSubstituteAction> matchingActions = new ArrayList<INodeSubstituteAction>();
    for (INodeSubstituteAction action : actions) {
      if (action.canSubstituteStrictly(resolveInfo)) {
        matchingActions.add(action);
      }
    }
    if (matchingActions.isEmpty()) {
      for (INodeSubstituteAction action : actions) {
        if (action.canSubstitute(resolveInfo)) {
          matchingActions.add(action);
        }
      }
    }
    Collections.sort(matchingActions, new Comparator<INodeSubstituteAction>() {
      public int compare(INodeSubstituteAction o1, INodeSubstituteAction o2) {
        if (!((o2 instanceof DefaultReferentNodeSubstituteAction))) {
          return 1;
        }
        if (!((o1 instanceof DefaultReferentNodeSubstituteAction))) {
          return -1;
        }
        DefaultReferentNodeSubstituteAction action1 = (DefaultReferentNodeSubstituteAction) o1;
        DefaultReferentNodeSubstituteAction action2 = (DefaultReferentNodeSubstituteAction) o2;
        SModel model1 = null;
        SModel model2 = null;
        if (action1.getOutputConcept() != null) {
          model1 = ((SNode) action1.getOutputConcept()).getModel();
        }
        if (action2.getOutputConcept() != null) {
          model2 = ((SNode) action2.getOutputConcept()).getModel();
        }
        if (model1 == sourceNode.getModel()) {
          return 1;
        }
        if (model2 == sourceNode.getModel()) {
          return -1;
        }
        return 0;
      }
    });
    return matchingActions;
  }

  private static EditorCell searchForRefCell(EditorCell editorCell, SNode sourceNode, SNode refLinkDeclaration, SNode childLinkDeclaration) {
    Set<EditorCell> frontier = new HashSet<EditorCell>();
    Set<EditorCell> newFrontier = new HashSet<EditorCell>();
    EditorCell foundCell = null;
    frontier.add(editorCell);
    while (!(frontier.isEmpty())) {
      for (EditorCell cell : frontier) {
        if (cell.getSNode() == sourceNode) {
          SNode userObject = cell.getLinkDeclaration();
          if (userObject == refLinkDeclaration) {
            return cell;
          }
          if (childLinkDeclaration != null && userObject == childLinkDeclaration) {
            if (foundCell == null) {
              foundCell = cell;
            }
          }
        }
        if (cell instanceof EditorCell_Collection) {
          Iterator<EditorCell> cells = ((EditorCell_Collection) cell).cells();
          newFrontier.addAll(IterableUtil.asCollection(IterableUtil.asIterable(cells)));
        }
      }
      frontier = newFrontier;
      newFrontier = new HashSet<EditorCell>();
    }
    return foundCell;
  }
}
