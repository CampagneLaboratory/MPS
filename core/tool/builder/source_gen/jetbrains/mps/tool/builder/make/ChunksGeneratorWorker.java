package jetbrains.mps.tool.builder.make;

/*Generated by MPS */

import jetbrains.mps.tool.common.Script;
import jetbrains.mps.tool.builder.MpsWorker;
import jetbrains.mps.tool.environment.EnvironmentConfig;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.tool.environment.Environment;
import org.apache.log4j.Logger;
import jetbrains.mps.project.Project;
import java.util.List;
import java.util.LinkedHashSet;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.Collections;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.tool.environment.MpsEnvironment;
import jetbrains.mps.library.contributor.LibraryContributor;
import jetbrains.mps.tool.common.util.UrlClassLoader;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.tool.builder.util.SetLibraryContributor;
import jetbrains.mps.tool.common.ScriptProperties;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.tool.builder.util.PathManager;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.net.URL;
import java.net.MalformedURLException;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.library.LibraryInitializer;

public class ChunksGeneratorWorker extends GeneratorWorker {
  public ChunksGeneratorWorker(Script whatToDo) {
    super(whatToDo);
  }

  public ChunksGeneratorWorker(Script whatToDo, MpsWorker.AntLogger logger) {
    super(whatToDo, logger);
  }

  @Override
  public void work() {
    EnvironmentConfig config = EnvironmentConfig.emptyEnvironment();

    for (String jar : ListSequence.fromList(myWhatToDo.getLibraryJars())) {
      config = config.addLib(jar, new File(jar));
    }
    for (IMapping<String, String> macro : MapSequence.fromMap(myWhatToDo.getMacro())) {
      config = config.addMacro(macro.key(), new File(macro.value()));
    }


    Environment environment = new ChunksGeneratorWorker.MyEnvironment(config);
    // todo: repeat in simple MpsWorker 
    Logger.getRootLogger().setLevel(myWhatToDo.getLogLevel());

    setupEnvironment();
    setGenerationProperties();
    boolean doneSomething = false;

    Project project = createDummyProject();

    for (IMapping<List<String>, Boolean> chunk : MapSequence.fromMap(myWhatToDo.getChunks())) {
      List<String> modulePaths = chunk.key();
      LinkedHashSet<SModule> modules = new LinkedHashSet<SModule>();
      for (String modulePath : ListSequence.fromList(modulePaths)) {
        processModuleFile(new File(modulePath), modules);
      }
      Boolean bootstrap = chunk.value();
      if (bootstrap) {
        warning("Found bootstrap chunk " + chunk.key() + ". Generation may be impossible.");
      }
      MpsWorker.ObjectsToProcess go = new MpsWorker.ObjectsToProcess(Collections.EMPTY_SET, modules, Collections.EMPTY_SET);
      if (go.hasAnythingToGenerate()) {
        generate(project, go);
        doneSomething = true;

        ModelAccess.instance().runWriteAction(new Runnable() {
          public void run() {
            ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
          }
        });
      }
    }

    if (!(doneSomething)) {
      error("Could not find anything to generate.");
    }

    environment.disposeEnvironment();
    dispose();
    showStatistic();
  }

  public static void main(String[] args) {
    MpsWorker mpsWorker = new ChunksGeneratorWorker(Script.fromDumpInFile(new File(args[0])), new MpsWorker.SystemOutLogger());
    mpsWorker.workFromMain();
  }

  private class MyEnvironment extends MpsEnvironment {
    public MyEnvironment(EnvironmentConfig config) {
      super(config);
    }

    @Override
    protected Iterable<LibraryContributor> createLibContributors(EnvironmentConfig config) {
      // todo: !next line was removed  <node> 
      UrlClassLoader classloader = createClassloader();
      Set<LibraryContributor.LibDescriptor> libraryPaths = new HashSet<LibraryContributor.LibDescriptor>();
      for (String libName : MapSequence.fromMap(config.libs()).keySet()) {
        libraryPaths.add(new LibraryContributor.LibDescriptor(MapSequence.fromMap(config.libs()).get(libName).getAbsolutePath(), classloader));

      }
      return Sequence.<LibraryContributor>singleton(new SetLibraryContributor(libraryPaths));
    }

    private UrlClassLoader createClassloader() {
      String pluginsPath = myWhatToDo.getProperty(ScriptProperties.PLUGIN_PATHS);
      Set<File> pluginsClasspath = SetSequence.fromSet(new LinkedHashSet<File>());
      if (pluginsPath != null) {
        for (String plugin : pluginsPath.split(File.pathSeparator)) {
          File lib = new File(plugin + File.separator + "lib");
          if (lib.exists() && lib.isDirectory()) {
            SetSequence.fromSet(pluginsClasspath).addSequence(Sequence.fromIterable(Sequence.fromArray(lib.listFiles(PathManager.JARS))));
          }
        }
      }
      if ((pluginsPath == null || pluginsPath.length() == 0)) {
        return null;
      }
      return new UrlClassLoader(SetSequence.fromSet(pluginsClasspath).select(new ISelector<File, URL>() {
        public URL select(File it) {
          try {
            return it.toURI().toURL();
          } catch (MalformedURLException e) {
            return null;
          }
        }
      }).where(new IWhereFilter<URL>() {
        public boolean accept(URL it) {
          return it != null;
        }
      }).toGenericArray(URL.class), LibraryInitializer.class.getClassLoader());
    }
  }
}
