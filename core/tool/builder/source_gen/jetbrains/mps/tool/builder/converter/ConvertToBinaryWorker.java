package jetbrains.mps.tool.builder.converter;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.MPSCore;
import java.io.IOException;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.smodel.DefaultSModel;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import jetbrains.mps.extapi.persistence.FileDataSource;
import jetbrains.mps.persistence.binary.BinaryPersistence;
import jetbrains.mps.smodel.persistence.def.ModelReadException;

public class ConvertToBinaryWorker {
  public ConvertToBinaryWorker() {
  }

  public void convert(Map<String, String> map) {
    MPSCore.getInstance().setMergeDriverMode(true);
    System.setProperty("mps.playRefactorings", "false");
    try {
      for (Map.Entry<String, String> entry : map.entrySet()) {
        convertModelToBinary(entry.getKey(), entry.getValue());
      }
    } catch (IOException ex) {
      throw new RuntimeException(ex);
    }
  }

  private void convertModelToBinary(String sourceFile, String destFile) throws IOException {
    IFile source = FileSystem.getInstance().getFileByPath(sourceFile);
    try {
      DefaultSModel model = ModelPersistence.readModel(new FileDataSource(source), false);
      if (model.getSModelHeader().getPersistenceVersion() < ModelPersistence.LAST_VERSION) {
        throw new IOException("cannot convert " + sourceFile + ": model persistence is too old, please upgrade");
      }
      boolean success = BinaryPersistence.writeModel(model, new FileDataSource(FileSystem.getInstance().getFileByPath(destFile)));
      if (!(success)) {
        throw new IOException("cannot save " + destFile);
      }
    } catch (ModelReadException e) {
      throw new IOException(e.getMessageEx(), e);
    }
  }
}
