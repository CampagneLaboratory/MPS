package jetbrains.mps.tool.builder.make;

/*Generated by MPS */

import jetbrains.mps.tool.builder.MpsWorker;
import jetbrains.mps.tool.common.Script;
import org.apache.log4j.Logger;
import jetbrains.mps.tool.environment.EnvironmentConfig;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.tool.environment.Environment;
import jetbrains.mps.tool.environment.MpsEnvironment;
import jetbrains.mps.project.Project;
import java.util.Set;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.LinkedHashSet;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.tool.common.MpsRunnerProperties;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.classloading.ClassLoaderManager;
import java.lang.reflect.Method;
import java.lang.reflect.InvocationTargetException;

public class MpsRunnerWorker extends MpsWorker {
  public MpsRunnerWorker(Script whatToDo) {
    super(whatToDo);
  }
  public MpsRunnerWorker(Script whatToDo, MpsWorker.AntLogger logger) {
    super(whatToDo, logger);
  }

  @Override
  public void work() {
    Logger.getRootLogger().setLevel(myWhatToDo.getLogLevel());

    EnvironmentConfig config = EnvironmentConfig.emptyEnvironment();

    for (String jar : myWhatToDo.getLibraryJars()) {
      File jarFile = new File(jar);
      if (!(jarFile.exists())) {
        warning("Library " + jar + " does not exist.");
      }
      config = config.addLib(jar);
    }
    for (IMapping<String, String> macro : MapSequence.fromMap(myWhatToDo.getMacro())) {
      config = config.addMacro(macro.key(), new File(macro.value()));
    }

    Environment environment = new MpsEnvironment(config);
    setupEnvironment();

    Project project = createDummyProject();

    final Set<SModule> modules = new LinkedHashSet<SModule>();
    for (final File module : SetSequence.fromSet(myWhatToDo.getModules())) {
      project.getModelAccess().runWriteAction(new Runnable() {
        public void run() {
          processModuleFile(module, modules);
        }
      });
    }

    MpsRunnerProperties properties = new MpsRunnerProperties(myWhatToDo);
    String className = properties.getStartClass();
    String methodName = properties.getStartMethod();
    boolean isClassFound = runClass(className, methodName, project);
    if (!(isClassFound)) {
      error("cannot find class " + className + " to run.");
    }

    dispose();
  }

  private static boolean runClass(String className, String methodName, Project project) {
    final Wrappers._T<Iterable<SModule>> modules = new Wrappers._T<Iterable<SModule>>(null);
    project.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        modules.value = GlobalScope.getInstance().getModules();
      }
    });

    String modelName = NameUtil.namespaceFromLongName(className);

    for (SModule module : modules.value) {
      for (SModel model : module.getModels()) {
        if (model.getModelName().equals(modelName)) {
          Class cls = null;
          try {
            cls = ClassLoaderManager.getInstance().getClassLoader(module).loadClass(className);
          } catch (ClassNotFoundException e) {
          }
          if (cls == null) {
            continue;
          }
          try {
            // invoke public static method 
            Method method = cls.getMethod(methodName);
            method.invoke(null);
          } catch (NoSuchMethodException e) {
            e.printStackTrace();
          } catch (InvocationTargetException e) {
            e.printStackTrace();
          } catch (IllegalAccessException e) {
            e.printStackTrace();
          }
          return true;
        }
      }
    }
    return false;
  }


  public static void main(String[] args) {
    MpsRunnerWorker runner = new MpsRunnerWorker(Script.fromDumpInFile(new File(args[0])), new MpsWorker.SystemOutLogger());
    runner.workFromMain();
  }

  protected void executeTask(Project project, MpsWorker.ObjectsToProcess go) {
  }
  protected void showStatistic() {
  }
}
