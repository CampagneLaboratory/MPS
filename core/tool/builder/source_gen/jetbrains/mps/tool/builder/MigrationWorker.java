package jetbrains.mps.tool.builder;

/*Generated by MPS */

import jetbrains.mps.tool.common.Script;
import jetbrains.mps.tool.environment.Environment;
import jetbrains.mps.tool.environment.EnvironmentConfig;
import jetbrains.mps.tool.environment.IdeaEnvironment;
import org.apache.log4j.Logger;
import java.util.Map;
import java.io.File;
import java.util.List;
import jetbrains.mps.project.Project;
import com.intellij.ide.plugins.PluginManager;
import com.intellij.openapi.extensions.PluginId;
import java.lang.reflect.Method;

public class MigrationWorker extends MpsWorker {
  private static final String MIGRATION_PLUGIN = "jetbrains.mps.ide.migration.assistant";
  private static final String TASK_EXEC_CLASS = "jetbrains.mps.ide.migration.AntTaskExecutionUtil";

  public MigrationWorker(Script whatToDo) {
    super(whatToDo);
  }
  public MigrationWorker(Script whatToDo, MpsWorker.AntLogger logger) {
    super(whatToDo, logger);
  }


  @Override
  protected Environment createEnvironment() {
    EnvironmentConfig cfg = MpsWorker.createEnvConfig(myWhatToDo);
    cfg.addPlugin("jetbrains.mps.ide.make");
    cfg.addPlugin(MIGRATION_PLUGIN);
    Environment env = IdeaEnvironment.getOrCreate(cfg);
    Logger.getRootLogger().setLevel(myWhatToDo.getLogLevel());
    return env;
  }

  @Override
  public void work() {
    setupEnvironment();

    Map<File, List<String>> mpsProjects = myWhatToDo.getMPSProjectFiles();
    for (File file : mpsProjects.keySet()) {
      Project p = myEnvironment.openProject(file);
      info("Loaded project " + p);
      myEnvironment.flushAllEvents();
      try {
        Class<?> euClass = PluginManager.getPlugin(PluginId.getId(MIGRATION_PLUGIN)).getPluginClassLoader().loadClass(TASK_EXEC_CLASS);
        Method method = euClass.getMethod("migrate", Project.class);
        Object result = method.invoke(p);
        if (!(((Boolean) result))) {
          info("Nothing to migrate");
        }
      } catch (Exception e) {
        error(e.getMessage());
      }
      myEnvironment.flushAllEvents();
      myEnvironment.closeProject(p);
    }

    dispose();
  }

  protected void executeTask(Project project, MpsWorker.ObjectsToProcess go) {
  }

  protected void showStatistic() {
  }
}
