package jetbrains.mps.tool.builder;

/*Generated by MPS */

import jetbrains.mps.tool.common.Script;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.migration.MigrationManager;
import jetbrains.mps.tool.environment.Environment;
import jetbrains.mps.tool.environment.IdeaEnvironment;
import org.apache.log4j.Logger;
import java.util.Map;
import java.io.File;
import java.util.List;

public class MigrationWorker extends MpsWorker {
  public MigrationWorker(Script whatToDo) {
    super(whatToDo);
  }
  public MigrationWorker(Script whatToDo, MpsWorker.AntLogger logger) {
    super(whatToDo, logger);
  }

  protected void migrate(Project project, MigrationManager m) {
    // todo 
  }

  @Override
  protected Environment createEnvironment() {
    Environment env = IdeaEnvironment.getOrCreate(MpsWorker.createEnvConfig(myWhatToDo));
    Logger.getRootLogger().setLevel(myWhatToDo.getLogLevel());
    return env;
  }

  @Override
  public void work() {
    setupEnvironment();

    Map<File, List<String>> mpsProjects = myWhatToDo.getMPSProjectFiles();
    for (File file : mpsProjects.keySet()) {
      Project p = myEnvironment.openProject(file);
      info("Loaded project " + p);
      MigrationManager m = p.getComponent(MigrationManager.class);
      if (!(m.isMigrationRequired())) {
        MigrationWorker.this.info("Nothing to migrate");
      } else {
        myEnvironment.flushAllEvents();
        migrate(p, m);
        myEnvironment.flushAllEvents();
      }
      myEnvironment.closeProject(p);
    }

    dispose();
  }

  protected void executeTask(Project project, MpsWorker.ObjectsToProcess go) {
  }

  protected void showStatistic() {
  }
}
