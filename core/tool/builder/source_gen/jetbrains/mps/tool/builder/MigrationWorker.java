package jetbrains.mps.tool.builder;

/*Generated by MPS */

import jetbrains.mps.tool.common.Script;
import jetbrains.mps.project.Project;
import java.util.Map;
import java.io.File;
import java.util.List;
import jetbrains.mps.core.tool.environment.util.FileMPSProject;
import jetbrains.mps.migration.component.util.MigrationComponent;

public class MigrationWorker extends MpsWorker {
  public MigrationWorker(Script whatToDo) {
    super(whatToDo);
  }
  public MigrationWorker(Script whatToDo, MpsWorker.AntLogger logger) {
    super(whatToDo, logger);
  }

  protected void executeTask(Project project, MpsWorker.ObjectsToProcess go) {
  }

  protected void showStatistic() {
  }

  protected void migrate(Project project) {

  }

  @Override
  public void work() {
    setupEnvironment();

    Map<File, List<String>> mpsProjects = myWhatToDo.getMPSProjectFiles();
    for (File file : mpsProjects.keySet()) {
      FileMPSProject p = new FileMPSProject(file);
      p.init(new FileMPSProject.ProjectDescriptor(file));
      p.projectOpened();
      info("Loaded project " + p);
      if (!(p.getComponent(MigrationComponent.class).isMigrationRequired())) {
        MigrationWorker.this.info("Nothing to migrate");
      } else {
        myEnvironment.flushAllEvents();
        migrate(p);
        myEnvironment.flushAllEvents();
      }
      p.projectClosed();
    }

    dispose();
  }
}
