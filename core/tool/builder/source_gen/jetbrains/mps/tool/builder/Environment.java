package jetbrains.mps.tool.builder;

/*Generated by MPS */

import java.util.Map;
import java.io.File;
import org.apache.log4j.Level;
import jetbrains.mps.tool.builder.util.SetLibraryContributor;
import jetbrains.mps.project.PathMacrosProvider;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.SimpleLayout;
import org.apache.log4j.Logger;
import jetbrains.mps.tool.builder.util.MpsPlatform;
import jetbrains.mps.MPSCore;
import jetbrains.mps.generator.GenerationSettingsProvider;
import jetbrains.mps.generator.DefaultModifiableGenerationSettings;
import jetbrains.mps.tool.environment.EnvironmentUtils;
import jetbrains.mps.project.PathMacros;
import jetbrains.mps.library.LibraryInitializer;
import jetbrains.mps.project.Project;
import java.util.Set;
import jetbrains.mps.library.contributor.LibraryContributor;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.tool.builder.util.PathManager;
import jetbrains.mps.smodel.ModelAccess;

public class Environment {
  private Map<String, String> myMacro;
  private boolean myLoadBootstrapLibraries;
  protected Map<String, File> myLibraries;
  protected Level myLogLevel;
  protected SetLibraryContributor myLibraryContibutor;
  private PathMacrosProvider myMacroProvider;

  public Environment() {
  }

  public void init(Map<String, String> macro, boolean isLoadBootstarpLibraries, Map<String, File> libraries, Level logLevel) {
    myMacro = macro;
    myLoadBootstrapLibraries = isLoadBootstarpLibraries;
    myLibraries = libraries;
    myLogLevel = logLevel;
  }

  public void setup() {
    BasicConfigurator.configure(new ConsoleAppender(new SimpleLayout()));
    Logger.getRootLogger().setLevel(myLogLevel);
    MpsPlatform.init();
    MPSCore.getInstance().setTestMode();
    GenerationSettingsProvider.getInstance().setGenerationSettings(new DefaultModifiableGenerationSettings());
    try {
      configureMPS(false);
    } catch (Exception ex) {
      throw new RuntimeException(ex);
    }

    assert myMacroProvider == null;
    myMacroProvider = EnvironmentUtils.createMapMacrosProvider(myMacro);
    PathMacros.getInstance().addMacrosProvider(myMacroProvider);

    loadLibraries();
  }

  public void dispose() {
    if (myMacroProvider != null) {
      PathMacros.getInstance().removeMacrosProvider(myMacroProvider);
      this.myMacroProvider = null;
    }
    if (myLibraryContibutor != null) {
      LibraryInitializer.getInstance().removeContributor(myLibraryContibutor);
      this.myLibraryContibutor = null;
    }
    MpsPlatform.dispose();
  }

  public Project createDummyProject() {
    return EnvironmentUtils.createDummyFileProject();
  }

  public Project loadProject(File projectFile) {
    FileMPSProject project = new FileMPSProject(projectFile);
    project.init(new FileMPSProject.ProjectDescriptor(projectFile));
    return project;
  }

  protected void loadLibraries() {
    if (myLibraryContibutor == null) {
      Set<LibraryContributor.LibDescriptor> libraryPaths = new HashSet<LibraryContributor.LibDescriptor>();
      if (myLoadBootstrapLibraries) {
        for (String bpath : CollectionSequence.fromCollection(PathManager.getBootstrapPaths())) {
          libraryPaths.add(new LibraryContributor.LibDescriptor(bpath, null));
        }
        libraryPaths.add(new LibraryContributor.LibDescriptor(PathManager.getLanguagesPath(), null));
        libraryPaths.addAll(PathManager.getExtensionsPaths());
      }
      for (String libName : myLibraries.keySet()) {
        libraryPaths.add(new LibraryContributor.LibDescriptor(myLibraries.get(libName).getAbsolutePath(), null));
      }
      this.myLibraryContibutor = new SetLibraryContributor(libraryPaths);
      LibraryInitializer.getInstance().addContributor(myLibraryContibutor);
    }
    ModelAccess.instance().runWriteAction(new Runnable() {
      @Override
      public void run() {
        LibraryInitializer.getInstance().update();
      }
    });
  }

  protected void configureMPS(boolean loadIdeaPlugins) {
    EnvironmentUtils.setSystemProperties(loadIdeaPlugins);
    EnvironmentUtils.setPluginPath();
  }
}
