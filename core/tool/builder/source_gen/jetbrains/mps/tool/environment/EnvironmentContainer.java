package jetbrains.mps.tool.environment;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.ide.platform.environment.IdeaEnvironment;

public final class EnvironmentContainer {
  private static Environment ourCurrent;

  private EnvironmentContainer() {
  }

  /*package*/ static void setCurrent(@NotNull Environment env) {
    if (EnvironmentContainer.ourCurrent != null) {
      throw new IllegalStateException("Another environment is active: " + EnvironmentContainer.ourCurrent);
    }
    EnvironmentContainer.ourCurrent = env;
  }

  public static void dispose() {
    if (ourCurrent == null) {
      throw new IllegalStateException("No active environment currently");
    }
    EnvironmentContainer.ourCurrent.dispose();
    EnvironmentContainer.ourCurrent = null;
  }

  @Nullable
  public static Environment get() {
    return ourCurrent;
  }
  /**
   * lazy environment construction: constructs a new environment if there is no constructed one available
   * 
   * @return initialized Environment
   */
  @NotNull
  public static Environment getOrCreate(@NotNull EnvironmentConfig config) {
    if (ourCurrent == null) {
      Environment env = (config.doesLoadIdea() ? new IdeaEnvironment(config) : new MpsEnvironment(config));
      env.init();
    } else {
      // todo fix 
      if (config.doesLoadIdea() && !(ourCurrent instanceof IdeaEnvironment)) {
        throw new IllegalStateException("Still no support for interchanging lightweight and heavyweight environments");
      }
    }

    return EnvironmentContainer.ourCurrent;
  }
}
