package jetbrains.mps.tool.environment;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.Map;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Collections;
import jetbrains.mps.tool.builder.util.PathManager;

/**
 * todo: make class immutable
 */
public class EnvironmentConfig {
  public static final String BOOTSTRAP_LIBRARIES_LIB_NAME = "bootstrap";

  private final Set<String> plugins = SetSequence.fromSet(new HashSet<String>());
  private final Map<String, File> macros = MapSequence.fromMap(new HashMap<String, File>());
  private final Map<String, File> libs = MapSequence.fromMap(new HashMap<String, File>());


  private EnvironmentConfig() {
  }



  public Set<String> plugins() {
    return SetSequence.fromSet(plugins).asUnmodifiable();
  }

  public Map<String, File> macros() {
    return Collections.unmodifiableMap(macros);
  }

  public Map<String, File> libs() {
    return Collections.unmodifiableMap(libs);
  }



  public EnvironmentConfig addPlugin(String plugin) {
    SetSequence.fromSet(plugins).addElement(plugin);
    return this;
  }

  public EnvironmentConfig addMacro(String macroName, File macroValue) {
    MapSequence.fromMap(macros).put(macroName, macroValue);
    return this;
  }

  public EnvironmentConfig addLib(String libName, File libPath) {
    MapSequence.fromMap(libs).put(libName, libPath);
    return this;
  }



  public Environment build(boolean withIdeaInstance) {
    return null;
  }



  public EnvironmentConfig withDefaultSamples() {
    return addMacro("samples_home", new File(System.getProperty("user.dir"), "samples"));
  }

  public EnvironmentConfig withDefaultPlugins() {
    return addPlugin("jetbrains.mps.vcs").addPlugin("jetbrains.mps.ide.editor").addPlugin("jetbrains.mps.ide.make");
    // todo: add Git4Idea as default plugin? 
  }

  public EnvironmentConfig withBootstrapLibraries() {
    for (String bpath : PathManager.getBootstrapPaths()) {
      addLib(BOOTSTRAP_LIBRARIES_LIB_NAME, new File(bpath));
    }
    return addLib(BOOTSTRAP_LIBRARIES_LIB_NAME, new File(PathManager.getLanguagesPath()));
  }



  public static EnvironmentConfig defaultEnvironment() {
    // todo: default plugins, default etc 
    return new EnvironmentConfig().withDefaultSamples().withDefaultPlugins().withBootstrapLibraries();
  }

  public static EnvironmentConfig emptyEnvironment() {
    return new EnvironmentConfig();
  }
}
