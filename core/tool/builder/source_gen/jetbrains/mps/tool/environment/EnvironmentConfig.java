package jetbrains.mps.tool.environment;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import java.util.Map;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import java.util.Collections;
import jetbrains.mps.tool.builder.util.PathManager;
import jetbrains.mps.tool.common.util.FileUtil;

public class EnvironmentConfig {
  private final Set<String> myPlugins = SetSequence.fromSet(new LinkedHashSet<String>());
  private final Map<String, File> myMacros = MapSequence.fromMap(new LinkedHashMap<String, File>(16, (float) 0.75, false));
  private final Set<File> myLibs = SetSequence.fromSet(new LinkedHashSet<File>());

  private EnvironmentConfig() {
  }

  public Set<String> getPlugins() {
    return SetSequence.fromSet(myPlugins).asUnmodifiable();
  }

  public Map<String, File> getMacros() {
    return Collections.unmodifiableMap(myMacros);
  }

  public Set<File> getLibs() {
    return SetSequence.fromSet(myLibs).asUnmodifiable();
  }

  public EnvironmentConfig addPlugin(String plugin) {
    SetSequence.fromSet(myPlugins).addElement(plugin);
    return this;
  }

  public EnvironmentConfig addMacro(String macroName, File macroValue) {
    MapSequence.fromMap(myMacros).put(macroName, macroValue);
    return this;
  }

  public EnvironmentConfig addLib(File libPath) {
    SetSequence.fromSet(myLibs).addElement(libPath);
    return this;
  }

  public EnvironmentConfig withDefaultSamples() {
    return addMacro("samples_home", new File(System.getProperty("user.dir"), "samples"));
  }

  public EnvironmentConfig withDefaultPlugins() {
    return addPlugin("jetbrains.mps.ide.make").addPlugin("jetbrains.mps.vcs");
  }

  public EnvironmentConfig withBootstrapLibraries() {
    for (String path : PathManager.getBootstrapPaths()) {
      addLib(new File(path));
    }
    addLib(new File(PathManager.getLanguagesPath()));
    return this;
  }

  public EnvironmentConfig withWorkbenchPath() {
    File workbenchPath = FileUtil.findFirstThatExist(PathManager.getHomePath() + File.separator + "workbench");
    if (workbenchPath != null) {
      addLib(workbenchPath);
    }
    return this;
  }

  public static EnvironmentConfig defaultEnvironment() {
    return new EnvironmentConfig().withDefaultSamples().withDefaultPlugins().withBootstrapLibraries().withWorkbenchPath();
  }

  public static EnvironmentConfig emptyEnvironment() {
    return new EnvironmentConfig();
  }
}
