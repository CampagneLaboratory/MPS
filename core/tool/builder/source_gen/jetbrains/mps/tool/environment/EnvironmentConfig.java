package jetbrains.mps.tool.environment;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import java.util.Collections;
import jetbrains.mps.tool.builder.util.PathManager;

public class EnvironmentConfig {
  private final List<String> myPlugins = ListSequence.fromList(new ArrayList<String>());
  private final Map<String, File> myMacros = MapSequence.fromMap(new LinkedHashMap<String, File>(16, (float) 0.75, false));
  private final List<File> myLibs = ListSequence.fromList(new ArrayList<File>());

  private EnvironmentConfig() {
  }

  public List<String> getPlugins() {
    return ListSequence.fromList(myPlugins).asUnmodifiable();
  }

  public Map<String, File> getMacros() {
    return Collections.unmodifiableMap(myMacros);
  }

  public List<File> getLibs() {
    return ListSequence.fromList(myLibs).asUnmodifiable();
  }

  public EnvironmentConfig addPlugin(String plugin) {
    ListSequence.fromList(myPlugins).addElement(plugin);
    return this;
  }

  public EnvironmentConfig addMacro(String macroName, File macroValue) {
    MapSequence.fromMap(myMacros).put(macroName, macroValue);
    return this;
  }

  public EnvironmentConfig addLib(File libPath) {
    ListSequence.fromList(myLibs).addElement(libPath);
    return this;
  }

  public EnvironmentConfig withDefaultSamples() {
    return addMacro("samples_home", new File(System.getProperty("user.dir"), "samples"));
  }

  public EnvironmentConfig withDefaultPlugins() {
    return addPlugin("jetbrains.mps.ide.make").addPlugin("jetbrains.mps.vcs");
  }

  public EnvironmentConfig withBootstrapLibraries() {
    for (String path : PathManager.getBootstrapPaths()) {
      addLib(new File(path));
    }
    return addLib(new File(PathManager.getLanguagesPath()));
  }

  public static EnvironmentConfig defaultEnvironment() {
    return new EnvironmentConfig().withDefaultSamples().withDefaultPlugins().withBootstrapLibraries();
  }

  public static EnvironmentConfig emptyEnvironment() {
    return new EnvironmentConfig();
  }
}
