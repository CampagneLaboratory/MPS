package jetbrains.mps.tool.environment;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import java.io.File;
import jetbrains.mps.util.EqualUtil;
import java.io.IOException;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ProjectContainer {
  private Set<Project> myProjects;

  public ProjectContainer() {
    myProjects = SetSequence.fromSet(new HashSet<Project>());
  }

  public void dispose() {
    clear();
  }

  private void clear() {
    try {
      for (final Project project : myProjects) {
        assert project != null && !(project.isDisposed()) : "Project has been already disposed";
        project.dispose();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    SetSequence.fromSet(myProjects).clear();
  }

  public Set<Project> getProjects() {
    return myProjects;
  }

  @Nullable
  public Project getProject(@NotNull File projectFile) {
    assert myProjects != null;
    for (Project project : SetSequence.fromSet(myProjects)) {
      if (ProjectContainer.projectHasPath(project, projectFile)) {
        return project;
      }
    }
    throw new IllegalArgumentException("Could not find the project");
  }

  public void addProject(@NotNull Project project) {
    assert !(SetSequence.fromSet(myProjects).contains(project));
    SetSequence.fromSet(this.myProjects).addElement(project);
  }

  public void disposeProject(@NotNull Project project) {
    assert SetSequence.fromSet(myProjects).contains(project);
    SetSequence.fromSet(myProjects).removeElement(project);
    project.dispose();
  }

  public void size() {
    SetSequence.fromSet(myProjects).count();
  }

  private static boolean projectHasPath(Project project, @NotNull File path) {
    @NotNull File projectFile = project.getProjectFile();
    try {
      String myProjectPath = projectFile.getCanonicalPath();
      return EqualUtil.equals(myProjectPath, path);
    } catch (IOException e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Cannot access the project file in container", e);
      }
    }
    return false;
  }
  protected static Logger LOG = LogManager.getLogger(ProjectContainer.class);
}
