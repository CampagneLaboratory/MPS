package jetbrains.mps.tool.environment;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import javax.swing.SwingUtilities;
import java.io.File;
import jetbrains.mps.tool.common.util.ProjectUtil;
import org.jetbrains.annotations.NotNull;

public class ProjectContainer {
  private Set<Project> myProjects;


  public ProjectContainer() {
    myProjects = SetSequence.fromSet(new HashSet<Project>());
  }



  public void dispose() {
    clear();
  }



  private void clear() {
    try {
      for (final Project project : myProjects) {
        assert project != null && !(project.isDisposed()) : "Project was already disposed";
        SwingUtilities.invokeAndWait(new Runnable() {
          public void run() {
            project.dispose();
          }
        });
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    SetSequence.fromSet(myProjects).clear();
  }



  public Set<Project> getProjects() {
    return myProjects;
  }



  public Project getProject(File anotherProjectFile) {
    assert containsProject(anotherProjectFile);
    for (Project project : SetSequence.fromSet(myProjects)) {
      if (ProjectUtil.projectHasPath(project, anotherProjectFile)) {
        return project;
      }
    }
    assert false : "Could not find the project";
    return null;
  }



  public void addProject(@NotNull Project project) {
    assert !(SetSequence.fromSet(myProjects).contains(project));
    SetSequence.fromSet(this.myProjects).addElement(project);
  }



  public void disposeProject(@NotNull Project project) {
    assert SetSequence.fromSet(myProjects).contains(project);
    SetSequence.fromSet(myProjects).removeElement(project);
    project.dispose();
  }



  public void size() {
    SetSequence.fromSet(myProjects).count();
  }



  public boolean containsProject(File anotherProjectFile) {
    assert myProjects != null;
    for (Project project : SetSequence.fromSet(myProjects)) {
      if (ProjectUtil.projectHasPath(project, anotherProjectFile)) {
        return true;
      }
    }
    return false;
  }


}
