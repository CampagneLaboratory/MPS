package jetbrains.mps.tool.environment;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.IterableUtils;
import java.io.File;
import jetbrains.mps.tool.builder.util.PathManager;
import jetbrains.mps.tool.builder.FileMPSProject;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.tool.builder.util.MapPathMacrosProvider;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.tool.common.util.CanonicalPath;
import jetbrains.mps.tool.builder.util.SetLibraryContributor;
import java.util.Set;
import jetbrains.mps.library.contributor.LibraryContributor;
import java.util.HashSet;

public class EnvironmentUtils {
  private EnvironmentUtils() {
  }

  public static void setSystemProperties(boolean loadIdeaPlugins) {
    String mpsInternal = System.getProperty("mps.internal");
    System.setProperty("idea.is.internal", (mpsInternal == null ? "false" : mpsInternal));
    System.setProperty("idea.no.jre.check", "true");
    if (!(loadIdeaPlugins)) {
      System.setProperty("idea.load.plugins", "false");
    }
    System.setProperty("idea.platform.prefix", "Idea");
  }

  public static void setIdeaPluginsToLoad(EnvironmentConfig config) {
    if (isEmptyString(System.getProperty("plugin.path"))) {
      setPluginPath();
      // Value of this property is comma-separated list of plugin IDs intended to load by platform 
      if (System.getProperty("idea.load.plugins") == null || System.getProperty("idea.load.plugins").equals("false")) {
        System.setProperty("idea.load.plugins.id", IterableUtils.join(config.plugins(), ","));
      }
    }
  }

  public static void setPluginPath() {
    StringBuilder pluginPath = new StringBuilder();
    File pluginDir = new File(PathManager.getPreinstalledPluginsPath());
    if (pluginDir.exists()) {
      for (File pluginFolder : pluginDir.listFiles()) {
        if (pluginPath.length() > 0) {
          pluginPath.append(File.pathSeparator);
        }
        pluginPath.append(pluginFolder.getPath());
      }
      System.setProperty("plugin.path", pluginPath.toString());
    }
  }

  public static FileMPSProject createDummyFileProject() {
    File projectFile = FileUtil.createTmpFile();
    FileMPSProject project = new FileMPSProject(projectFile);
    project.init(new FileMPSProject.ProjectDescriptor(null));
    projectFile.deleteOnExit();
    return project;
  }

  public static MapPathMacrosProvider createMapMacrosProvider(Map<String, String> macros) {
    Map<String, String> realMacros = new HashMap<String, String>();
    for (String macroName : MapSequence.fromMap(macros).keySet()) {
      String macroValue = MapSequence.fromMap(macros).get(macroName);
      CanonicalPath path = new CanonicalPath(macroValue);
      if (path.isValidDirectory()) {
        realMacros.put(macroName, path.getValue());
      }
    }
    return new MapPathMacrosProvider(realMacros);
  }

  public static SetLibraryContributor createLibContributor(boolean loadBootstrapLibs, Map<String, File> libs) {
    Set<LibraryContributor.LibDescriptor> libraryPaths = new HashSet<LibraryContributor.LibDescriptor>();
    if (loadBootstrapLibs) {
      for (String bpath : PathManager.getBootstrapPaths()) {
        libraryPaths.add(new LibraryContributor.LibDescriptor(bpath, null));
      }
      libraryPaths.add(new LibraryContributor.LibDescriptor(PathManager.getLanguagesPath(), null));
    }
    for (String libName : libs.keySet()) {
      libraryPaths.add(new LibraryContributor.LibDescriptor(libs.get(libName).getAbsolutePath(), null));
    }
    libraryPaths.addAll(PathManager.getExtensionsPaths());
    return new SetLibraryContributor(libraryPaths);
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
