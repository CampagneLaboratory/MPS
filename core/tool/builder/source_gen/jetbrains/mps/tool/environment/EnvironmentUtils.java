package jetbrains.mps.tool.environment;

/*Generated by MPS */

import java.io.File;
import jetbrains.mps.tool.builder.util.PathManager;
import jetbrains.mps.tool.builder.FileMPSProject;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.tool.builder.util.MapPathMacrosProvider;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.tool.common.util.PathUtil;
import jetbrains.mps.tool.builder.util.SetLibraryContributor;
import java.util.Set;
import jetbrains.mps.library.contributor.LibraryContributor;
import java.util.HashSet;

public class EnvironmentUtils {
  public static void setSystemProperties(boolean loadIdeaPlugins) {
    String mpsInternal = System.getProperty("mps.internal");
    System.setProperty("idea.is.internal", (mpsInternal == null ? "false" : mpsInternal));
    System.setProperty("idea.no.jre.check", "true");
    if (!(loadIdeaPlugins)) {
      System.setProperty("idea.load.plugins", "false");
    }
    System.setProperty("idea.platform.prefix", "Idea");
  }



  public static void setPluginPath() {
    StringBuffer pluginPath = new StringBuffer();
    File pluginDir = new File(PathManager.getPreinstalledPluginsPath());
    if (pluginDir.exists()) {
      for (File pluginFolder : pluginDir.listFiles()) {
        if (pluginPath.length() > 0) {
          pluginPath.append(File.pathSeparator);
        }
        pluginPath.append(pluginFolder.getPath());
      }
      System.setProperty("plugin.path", pluginPath.toString());
    }
  }



  public static FileMPSProject createDummyFileProject() {
    File projectFile = FileUtil.createTmpFile();
    FileMPSProject project = new FileMPSProject(projectFile);
    project.init(new FileMPSProject.ProjectDescriptor(null));
    projectFile.deleteOnExit();
    return project;
  }



  public static MapPathMacrosProvider createMapMacrosProvider(Map<String, String> macros) {
    Map<String, String> realMacros = new HashMap<String, String>();
    for (String macroName : MapSequence.fromMap(macros).keySet()) {
      String canonicalPath = PathUtil.getCanonicalPath(MapSequence.fromMap(macros).get(macroName));
      File file = new File(canonicalPath);
      if (file.exists() && file.isDirectory()) {
        realMacros.put(macroName, canonicalPath);
      }
    }
    return new MapPathMacrosProvider(realMacros);
  }



  public static SetLibraryContributor createLibContributor(boolean loadBootstrapLibs, Map<String, File> libs) {
    Set<LibraryContributor.LibDescriptor> libraryPaths = new HashSet<LibraryContributor.LibDescriptor>();
    if (loadBootstrapLibs) {
      for (String bpath : PathManager.getBootstrapPaths()) {
        libraryPaths.add(new LibraryContributor.LibDescriptor(bpath, null));
      }
      libraryPaths.add(new LibraryContributor.LibDescriptor(PathManager.getLanguagesPath(), null));
    }
    libraryPaths.addAll(PathManager.getExtensionsPaths());
    for (String libName : libs.keySet()) {
      libraryPaths.add(new LibraryContributor.LibDescriptor(libs.get(libName).getAbsolutePath(), null));
    }
    return new SetLibraryContributor(libraryPaths);
  }
}
