package jetbrains.mps.tool.environment;

/*Generated by MPS */

import jetbrains.mps.tool.builder.util.MpsPlatform;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.GenerationSettingsProvider;
import jetbrains.mps.generator.DefaultModifiableGenerationSettings;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.project.Project;
import java.io.File;
import jetbrains.mps.tool.builder.FileMPSProject;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.make.MPSCompilationResult;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MpsEnvironment extends EnvironmentBase {
  private final ProjectContainer myContainer = new ProjectContainer();
  private MpsPlatform myPlatformLoader;

  public MpsEnvironment(@NotNull EnvironmentConfig config) {
    super(config);
    if (config.doesLoadIdea()) {
      throw new IllegalArgumentException("Lightweight MpsEnvironment does not load idea platform");
    }
  }

  @Override
  public void init() {
    if (LOG.isInfoEnabled()) {
      LOG.info("Creating MPS environment");
    }
    myPlatformLoader = new MpsPlatform();
    myPlatformLoader.init();

    GenerationSettingsProvider.getInstance().setGenerationSettings(new DefaultModifiableGenerationSettings());
    EnvironmentBase.setSystemProperties(false);
    EnvironmentBase.setPluginPath();

    super.init(myPlatformLoader.getMPSCore().getLibraryInitializer());
  }


  @Override
  public boolean hasIdeaInstance() {
    return false;
  }

  @Nullable
  @Override
  public Project getOpenedProject(File projectFile) {
    return myContainer.getProject(projectFile);
  }

  @Override
  @NotNull
  public Project openProject(@NotNull File projectFile) {
    Project lastUsedProject = getOpenedProject(projectFile);
    if (lastUsedProject != null) {
      if (LOG.isInfoEnabled()) {
        LOG.info("Using the last created project");
      }
      return lastUsedProject;
    } else {
      if (LOG.isInfoEnabled()) {
        LOG.info("Opening a new project");
      }
      FileMPSProject project = new FileMPSProject(projectFile);
      project.init(new FileMPSProject.ProjectDescriptor(projectFile));
      myContainer.addProject(project);
      return project;
    }
  }

  @NotNull
  public Project createEmptyProject() {
    File projectFile = FileUtil.createTmpFile();
    FileMPSProject project = new FileMPSProject(projectFile);
    project.init(new FileMPSProject.ProjectDescriptor(null));
    projectFile.deleteOnExit();
    openProject(projectFile);
    return project;
  }

  @Override
  public void closeProject(@NotNull Project project) {
    myContainer.disposeProject(project);
  }

  @Override
  public void dispose() {
    super.dispose();

    flushAllEvents();

    for (Project project : SetSequence.fromSet(myContainer.getProjects())) {
      closeProject(project);
    }

    myPlatformLoader.dispose();
    myPlatformLoader = null;
  }

  @Override
  public void flushAllEvents() {
    // do nothing 
  }

  @Nullable
  protected ClassLoader rootCLForLibs() {
    return null;
  }

  @NotNull
  @Override
  public MPSCompilationResult make() {
    return null;
  }
  protected static Logger LOG = LogManager.getLogger(MpsEnvironment.class);
}
