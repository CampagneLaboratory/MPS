package jetbrains.mps.tool.environment;

/*Generated by MPS */

import jetbrains.mps.project.PathMacrosProvider;
import jetbrains.mps.library.contributor.LibraryContributor;
import jetbrains.mps.tool.builder.util.MpsPlatform;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.SimpleLayout;
import org.apache.log4j.Logger;
import org.apache.log4j.Level;
import jetbrains.mps.RuntimeFlags;
import jetbrains.mps.generator.GenerationSettingsProvider;
import jetbrains.mps.generator.DefaultModifiableGenerationSettings;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.tool.builder.util.MapPathMacrosProvider;
import jetbrains.mps.project.PathMacros;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.library.LibraryInitializer;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.io.File;
import jetbrains.mps.project.Project;
import jetbrains.mps.tool.builder.FileMPSProject;
import org.apache.log4j.LogManager;

public class MpsEnvironment implements Environment {
  private final ProjectContainer myContainer = new ProjectContainer();
  private final PathMacrosProvider myMacrosProvider;
  private final Iterable<LibraryContributor> myLibContributors;
  private MpsPlatform myPlatformLoader;

  public MpsEnvironment(EnvironmentConfig config) {
    if (LOG.isInfoEnabled()) {
      LOG.info("Creating MPS environment");
    }
    ActiveEnvironment.activateEnvironment(this);

    // todo: plugins, libs 

    BasicConfigurator.configure(new ConsoleAppender(new SimpleLayout()));
    Logger.getRootLogger().setLevel(Level.INFO);

    myPlatformLoader = new MpsPlatform();
    myPlatformLoader.init();
    // todo: =( 
    RuntimeFlags.setTestMode(true);
    GenerationSettingsProvider.getInstance().setGenerationSettings(new DefaultModifiableGenerationSettings());

    try {
      EnvironmentUtils.setSystemProperties(false);
      EnvironmentUtils.setPluginPath();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }

    myLibContributors = initLibs(config);
    myMacrosProvider = initMacros(config);
  }

  private PathMacrosProvider initMacros(EnvironmentConfig config) {
    Map<String, String> macros = MapSequence.fromMap(new HashMap<String, String>());
    for (String name : MapSequence.fromMap(config.macros()).keySet()) {
      MapSequence.fromMap(macros).put(name, MapSequence.fromMap(config.macros()).get(name).getAbsolutePath());
    }
    MapPathMacrosProvider macrosProvider = EnvironmentUtils.createMapMacrosProvider(macros);
    PathMacros.getInstance().addMacrosProvider(macrosProvider);
    return macrosProvider;
  }

  private Set<LibraryContributor> initLibs(EnvironmentConfig config) {
    final Set<LibraryContributor> libContribs = SetSequence.fromSetWithValues(new HashSet<LibraryContributor>(), createLibContributors(config));
    for (LibraryContributor libContrib : SetSequence.fromSet(libContribs)) {
      LibraryInitializer.getInstance().addContributor(libContrib);
    }
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        LibraryInitializer.getInstance().update();
      }
    });
    return libContribs;
  }

  @Override
  public boolean hasIdeaInstance() {
    return false;
  }

  protected Iterable<LibraryContributor> createLibContributors(EnvironmentConfig config) {
    return Sequence.<LibraryContributor>singleton(EnvironmentUtils.createLibContributor(false, config.libs()));
  }

  @Override
  public boolean isProjectOpened(File projectFile) {
    return myContainer.containsProject(projectFile);
  }

  @Override
  public Project openProject(File projectFile) {
    if (isProjectOpened(projectFile)) {
      if (LOG.isInfoEnabled()) {
        LOG.info("Using the last created project");
      }
      Project lastUsedProject = myContainer.getProject(projectFile);
      return lastUsedProject;
    } else {
      if (LOG.isInfoEnabled()) {
        LOG.info("Opening a new project");
      }
      FileMPSProject project = new FileMPSProject(projectFile);
      project.init(new FileMPSProject.ProjectDescriptor(projectFile));
      myContainer.addProject(project);
      return project;
    }
  }

  @Override
  public Project createDummyProject() {
    Project project = EnvironmentUtils.createDummyFileProject();
    myContainer.addProject(project);
    return project;
  }

  @Override
  public void disposeProject(File projectFile) {
    Project project = myContainer.getProject(projectFile);
    myContainer.disposeProject(project);
  }

  @Override
  public void dispose() {
    ModelAccess.instance().flushEventQueue();

    for (Project project : SetSequence.fromSet(myContainer.getProjects())) {
      disposeProject(project.getProjectFile());
    }

    PathMacros.getInstance().removeMacrosProvider(myMacrosProvider);
    for (LibraryContributor libContributor : Sequence.fromIterable(myLibContributors)) {
      LibraryInitializer.getInstance().removeContributor(libContributor);
    }

    myPlatformLoader.dispose();
    myPlatformLoader = null;

    ActiveEnvironment.deactivateEnvironment(this);
  }
  protected static Logger LOG = LogManager.getLogger(MpsEnvironment.class);
}
