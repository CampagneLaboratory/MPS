package jetbrains.mps.tool.environment;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.Map;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;

public class EnvironmentBuilder {
  private final Set<String> plugins = SetSequence.fromSet(new HashSet<String>());
  private final Map<String, File> macroses = MapSequence.fromMap(new HashMap<String, File>());
  private final Map<String, File> libs = MapSequence.fromMap(new HashMap<String, File>());


  public EnvironmentBuilder addPlugin(String plugin) {
    SetSequence.fromSet(plugins).addElement(plugin);
    return this;
  }

  public EnvironmentBuilder addMacro(String macroName, File macroValue) {
    MapSequence.fromMap(macroses).put(macroName, macroValue);
    return this;
  }

  public EnvironmentBuilder addLib(String libName, File libPath) {
    MapSequence.fromMap(libs).put(libName, libPath);
    return this;
  }



  public Environment build(boolean withIdeaInstance) {
    return (withIdeaInstance ?
      new IdeaEnvironment(plugins, macroses, libs) :
      new MpsEnvironment(plugins, macroses, libs)
    );
  }





  public EnvironmentBuilder withDefaults() {
    // todo 
    return this;
  }

  public static EnvironmentBuilder defaultEnvironment() {
    return new EnvironmentBuilder().withDefaults();
  }
}
