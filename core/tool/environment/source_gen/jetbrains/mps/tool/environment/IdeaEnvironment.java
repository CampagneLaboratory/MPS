package jetbrains.mps.tool.environment;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.Map;
import java.io.File;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.apache.log4j.Level;
import jetbrains.mps.ide.IdeMain;
import jetbrains.mps.TestMain;
import jetbrains.mps.testbench.Testbench;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.project.ex.ProjectManagerEx;
import com.intellij.openapi.project.ProjectManager;
import jetbrains.mps.project.StandaloneMPSProject;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.project.structure.project.ProjectDescriptor;
import jetbrains.mps.ide.ThreadUtils;
import com.intellij.ide.IdeEventQueue;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.tool.common.util.PathUtil;
import com.intellij.openapi.application.PathMacros;

public class IdeaEnvironment implements Environment {
  private final Set<Project> openedProjects = SetSequence.fromSet(new HashSet<Project>());


  public IdeaEnvironment(Set<String> plugins, Map<String, File> macroses, Map<String, File> libs) {
    // todo: if creationg of environment fails? is it publication before we need it? 
    ActiveEnvironment.activateEnvironment(this);

    // todo: use plugins and libs 

    // part from ProjectTest 
    BasicConfigurator.configure();
    Logger.getRootLogger().setLevel(Level.ERROR);
    IdeMain.setTestMode(IdeMain.TestMode.CORE_TEST);

    // todo: inline 
    TestMain.configureMPS();
    Testbench.initLibs();

    // todo: is it right place? 
    for (String macro : SetSequence.fromSet(MapSequence.fromMap(macroses).keySet())) {
      setMacro(macro, MapSequence.fromMap(macroses).get(macro));
    }
  }



  public Project openProject(File projectFile) {
    // part from ProjectTest 
    // todo: inline 
    Project project = TestMain.loadProject(projectFile);
    return SetSequence.fromSet(openedProjects).addElement(project);
  }

  public Project createDummyProject() {
    ProjectManagerEx.getInstanceEx();
    // from CheckProjectStructureHelper 
    com.intellij.openapi.project.Project ideaProject = ProjectManager.getInstance().getDefaultProject();
    StandaloneMPSProject project = new StandaloneMPSProject(ideaProject);
    File projectFile = FileUtil.createTmpFile();
    project.setProjectFile(projectFile);
    projectFile.deleteOnExit();
    project.init(new ProjectDescriptor());
    project.projectOpened();

    SetSequence.fromSet(openedProjects).addElement(project);
    return project;
  }

  public void disposeProject(final Project project) {
    ((StandaloneMPSProject) project).projectClosed();

    // part from ProjectTest 
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        project.dispose();
        IdeEventQueue.getInstance().flushQueue();
        System.gc();
      }
    });
    // comment from ProjectTest: magic 
    ModelAccess.instance().flushEventQueue();
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        IdeEventQueue.getInstance().flushQueue();
      }
    });

    SetSequence.fromSet(openedProjects).removeElement(project);
  }

  public void disposeEnvironment() {
    for (Project project : SetSequence.fromSetWithValues(new HashSet<Project>(), openedProjects)) {
      disposeProject(project);
    }

    // part from ProjectTest 
    TestMain.disposeMPS();

    ActiveEnvironment.deactivateEnvironment(this);
  }



  private void setMacro(String macroName, File file) {
    // todo: move canonicalization logic to EnvironmentBuilder on addMacro, or in utils? 
    String canonicalPath = PathUtil.getCanonicalPath(file.getPath());
    File canonicalFile = new File(canonicalPath);
    if (canonicalFile.exists() && canonicalFile.isDirectory()) {
      PathMacros.getInstance().setMacro(macroName, canonicalPath);
    }
  }
}
