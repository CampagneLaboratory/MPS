package jetbrains.mps.tool.environment;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import java.util.Set;
import jetbrains.mps.library.contributor.LibDescriptor;
import java.util.LinkedHashSet;
import java.io.File;
import jetbrains.mps.core.tool.environment.classloading.UrlClassLoader;
import jetbrains.mps.core.tool.environment.util.PathManager;
import java.util.Collections;
import java.util.List;
import java.net.URL;
import java.util.ArrayList;
import java.net.MalformedURLException;
import jetbrains.mps.library.LibraryInitializer;
import jetbrains.mps.library.contributor.LibraryContributor;
import jetbrains.mps.core.tool.environment.util.SetLibraryContributor;
import java.util.Map;
import java.util.LinkedHashMap;

/*package*/ class LibraryContributorHelper {
  private static final String MODULES_PREFIX = "!/modules";
  private final EnvironmentConfig myConfig;
  private final ClassLoader myRootClassLoader;

  public LibraryContributorHelper(@NotNull EnvironmentConfig config, @Nullable ClassLoader rootCLForLibraries) {
    myConfig = config;
    myRootClassLoader = rootCLForLibraries;
  }

  private Set<LibDescriptor> getPluginLibDescriptors() {
    Set<LibDescriptor> paths = new LinkedHashSet<LibDescriptor>();
    for (String plugin : myConfig.getPlugins()) {
      File libFolder = new File(plugin + File.separator + "lib");
      UrlClassLoader pluginCL = null;
      if (libFolder.exists() && libFolder.isDirectory()) {
        pluginCL = createPluginClassLoader(libFolder);
        for (File jar : libFolder.listFiles(PathManager.JARS)) {
          paths.add(new LibDescriptor(jar.getAbsolutePath() + MODULES_PREFIX, pluginCL));
        }
      }
      File languagesFolder = new File(plugin + File.separator + "languages");
      if (languagesFolder.exists() && languagesFolder.isDirectory()) {
        paths.add(new LibDescriptor(languagesFolder.getAbsolutePath(), pluginCL));
      }
    }
    return Collections.unmodifiableSet(paths);
  }

  private static UrlClassLoader createPluginClassLoader(File lib) {
    List<URL> urls = new ArrayList<URL>();
    File[] files = lib.listFiles(PathManager.JARS);
    if (files == null) {
      return null;
    }
    for (File libjar : files) {
      try {
        urls.add(libjar.toURI().toURL());
      } catch (MalformedURLException ignored) {
      }
    }
    return new UrlClassLoader(urls, LibraryInitializer.class.getClassLoader());
  }

  public LibraryContributor createLibContributorForPlugins() {
    return SetLibraryContributor.fromSet(getPluginLibDescriptors());
  }

  public LibraryContributor createLibContributorForLibs() {
    ClassLoader defaultCL = myRootClassLoader;
    Map<String, ClassLoader> libToCLMap = new LinkedHashMap<String, ClassLoader>();
    for (String lib : myConfig.getLibs()) {
      libToCLMap.put(lib, defaultCL);
    }

    return SetLibraryContributor.fromMap(libToCLMap);
  }

}
