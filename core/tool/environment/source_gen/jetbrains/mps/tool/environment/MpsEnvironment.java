package jetbrains.mps.tool.environment;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.Map;
import java.io.File;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.apache.log4j.Level;
import jetbrains.mps.ide.IdeMain;
import jetbrains.mps.TestMain;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.testbench.Testbench;
import com.intellij.openapi.project.ProjectManager;
import jetbrains.mps.project.StandaloneMPSProject;
import jetbrains.mps.project.structure.project.ProjectDescriptor;
import jetbrains.mps.ide.ThreadUtils;
import com.intellij.ide.IdeEventQueue;

public class MpsEnvironment implements Environment {
  private final Set<Project> openedProjects = SetSequence.fromSet(new HashSet<Project>());


  public MpsEnvironment(Set<String> plugins, Map<String, File> macros, Map<String, File> libs) {
    // todo: plugins, libs 

    // from CheckProjectStructureHelper 
    BasicConfigurator.configure();
    Logger.getRootLogger().setLevel(Level.INFO);
    IdeMain.setTestMode(IdeMain.TestMode.CORE_TEST);
    TestMain.configureMPS(new String[0]);
    for (String macro : MapSequence.fromMap(macros).keySet()) {
      Testbench.setMacro(macro, MapSequence.fromMap(macros).get(macro).getPath());
    }
    Testbench.initLibs();
    // we do not make anything here 
    // we have a special test (Making) that does make 
    // and more importantly checks that make is ok and fails if not 
    // that should be enough 
  }



  public Project openProject(File projectFile) {
    // todo: StandaloneMPSProject or FileMPSProject? 

    // from CheckProjectStructureHelper 
    com.intellij.openapi.project.Project ideaProject = ProjectManager.getInstance().getDefaultProject();
    StandaloneMPSProject project = new StandaloneMPSProject(ideaProject);
    project.setProjectFile(projectFile);
    project.init(new ProjectDescriptor());

    SetSequence.fromSet(openedProjects).addElement(project);
    return project;
  }

  public Project createDummyProject() {
    throw new UnsupportedOperationException();
  }

  public void disposeProject(final Project project) {
    // from CheckProjectStructureHelper 
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        ((StandaloneMPSProject) project).dispose(false);
        IdeEventQueue.getInstance().flushQueue();
        System.gc();
      }
    });
  }

  public void disposeEnvironment() {
    for (Project project : SetSequence.fromSetWithValues(new HashSet<Project>(), openedProjects)) {
      disposeProject(project);
    }

    // from CheckProjectStructureHelper 
    TestMain.disposeMPS();
  }
}
