/*
 * Copyright 2003-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.build.ant;

/*Generated by MPS */

import java.util.Collection;
import java.io.File;
import org.apache.tools.ant.Project;
import java.util.List;
import java.util.ArrayList;
import org.apache.tools.ant.BuildException;
import org.jetbrains.annotations.NotNull;
import java.net.URL;

public class MPSClasspathUtil {
  private static final String FILE = "file";
  private static final String JAR = "jar";
  private static final String JAR_DELIMITER = "!";
  private static final String PROTOCOL_DELIMITER = ":";

  private static final String[] CLASSPATH = new String[]{"trove4j.jar", "mps-collections.jar", "mps-closures.jar", "mps-tuples.jar", "mps-openapi.jar", "mps-core.jar", "mps-tool.jar"};


  public static Collection<File> buildClasspath(Project antProject, File mpsHomeArg) {
    List<File> homeFolders = new ArrayList<File>();
    if (mpsHomeArg == null || !(mpsHomeArg.isDirectory())) {
      homeFolders.add(getAntJARRelativeHome());
      File mps_home = resolveMPSHome(antProject, false);
      if (mps_home != null) {
        File lib = new File(mps_home, "lib");
        if (lib.isDirectory()) {
          homeFolders.add(lib);
        }
      }

    } else {
      homeFolders.add(mpsHomeArg);
    }
    List<File> result = new ArrayList<File>();
    for (String name : CLASSPATH) {
      File file = null;
      for (File home : homeFolders) {
        File f = new File(home, name);
        if (f.isFile()) {
          file = f;
          break;
        }
      }
      if (file == null) {
        throw new BuildException("cannot find `" + name + "' in " + homeFolders.toString());
      } else {
        result.add(file);
      }
    }
    return result;
  }

  public static File resolveMPSHome(Project antProject, boolean failOtherwise) {
    String mpsHomePath = antProject.getProperty("mps.home");
    if ((mpsHomePath == null || mpsHomePath.length() == 0)) {
      mpsHomePath = antProject.getProperty("mps_home");
    }
    if (mpsHomePath == null || !(antProject.resolveFile(mpsHomePath).exists())) {
      if (failOtherwise) {
        throw new BuildException("Path to mps home expected. Specify mps.home property or mpsHome attribute.");
      } else {
        return null;
      }
    }
    return antProject.resolveFile(mpsHomePath);
  }

  private static File getAntJARRelativeHome() {
    String containingJar = getAntMPSJar();
    if (!(containingJar.toLowerCase().endsWith(".jar"))) {
      throw new BuildException("cannot detect jar location: got `" + containingJar + "'");
    }
    File current = new File(containingJar);
    for (int i = 0; i < 3; i++) {
      current = current.getParentFile();
      if (current == null) {
        throw new BuildException("cannot detect jar location, no parent: got `" + containingJar + "'");
      }
      if (new File(current, "mps-core.jar").isFile()) {
        return current;
      }
    }
    throw new BuildException("cannot detect jar location, no mps-core.jar `" + containingJar + "'");
  }

  @NotNull
  private static String getAntMPSJar() {
    Class aClass = MPSClasspathUtil.class;
    return getResourceRoot(aClass, "/" + aClass.getName().replace('.', '/') + ".class");
  }

  /**
   * Attempts to detect classpath entry which contains given resource
   */
  @NotNull
  private static String getResourceRoot(Class context, String path) {
    URL url = context.getResource(path);
    if (url == null) {
      url = ClassLoader.getSystemResource(path.substring(1));
    }
    if (url == null) {
      throw new BuildException("cannot detect jar location; no resource `" + path + "'");
    }
    return extractRoot(url, path);
  }

  /**
   * Attempts to extract classpath entry part from passed URL.
   */
  @NotNull
  private static String extractRoot(@NotNull URL resourceURL, String resourcePath) {
    if (!(resourcePath.startsWith("/") || resourcePath.startsWith("\\"))) {
      throw new BuildException("cannot detect jar location: precondition failed for" + resourcePath);
    }
    String protocol = resourceURL.getProtocol();
    String resultPath = null;

    if (MPSClasspathUtil.FILE.equals(protocol)) {
      String path = resourceURL.getFile();
      String testPath = path.replace('\\', '/').toLowerCase();
      String testResourcePath = resourcePath.replace('\\', '/').toLowerCase();
      if (testPath.endsWith(testResourcePath)) {
        resultPath = path.substring(0, path.length() - resourcePath.length());
      }
    } else
    if (MPSClasspathUtil.JAR.equals(protocol)) {
      String fullPath = resourceURL.getFile();
      int delimiter = fullPath.indexOf(MPSClasspathUtil.JAR_DELIMITER);
      if (delimiter >= 0) {
        String archivePath = fullPath.substring(0, delimiter);
        if (archivePath.startsWith(MPSClasspathUtil.FILE + MPSClasspathUtil.PROTOCOL_DELIMITER)) {
          resultPath = archivePath.substring(MPSClasspathUtil.FILE.length() + MPSClasspathUtil.PROTOCOL_DELIMITER.length());
        }
      }
    }
    if (resultPath == null) {
      throw new BuildException("cannot detect jar location: url=`" + resourceURL.toString() + "'");
    }

    if (resultPath.endsWith(File.separator)) {
      resultPath = resultPath.substring(0, resultPath.length() - 1);
    }

    return replace(resultPath, "%20", " ");
  }

  @NotNull
  private static String replace(@NotNull String text, @NotNull String from, @NotNull String to) {
    final StringBuilder result = new StringBuilder(text.length());
    final int len = from.length();
    for (int i = 0; i < text.length(); i++) {
      if (text.regionMatches(i, from, 0, len)) {
        result.append(to);
        i += len - 1;
        continue;
      }
      result.append(text.charAt(i));
    }
    return result.toString();
  }
}
