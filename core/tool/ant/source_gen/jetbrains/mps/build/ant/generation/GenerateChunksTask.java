package jetbrains.mps.build.ant.generation;

/*Generated by MPS */

import jetbrains.mps.build.ant.MpsLoadTask;
import jetbrains.mps.tool.common.ScriptProperties;
import jetbrains.mps.build.ant.LibraryDataType;
import java.io.File;
import java.util.Set;
import java.util.LinkedHashSet;
import org.apache.tools.ant.BuildException;

public class GenerateChunksTask extends MpsLoadTask {
  {
    myWhatToDo.putProperty(ScriptProperties.STRICT_MODE, Boolean.toString(true));
    myWhatToDo.putProperty(ScriptProperties.PARALLEL_MODE, Boolean.toString(false));
  }

  public GenerateChunksTask() {
  }

  protected String getWorkerClass() {
    return "jetbrains.mps.tool.builder.make.ChunksGeneratorWorker";
  }

  public void addConfiguredChunk(Chunk chunk) {
    myWhatToDo.addChunk(chunk.getModules(), chunk.getBootstrap());
  }

  public void addConfiguredLibrary(LibraryDataType jar) {
    File file = jar.getFile();
    if (file != null) {
      myWhatToDo.addLibraryJar(file.getAbsolutePath());
    }
  }

  public void setStrictMode(boolean strictMode) {
    myWhatToDo.putProperty(ScriptProperties.STRICT_MODE, Boolean.toString(strictMode));
  }

  protected boolean getStrictMode() {
    return Boolean.parseBoolean(myWhatToDo.getProperty(ScriptProperties.STRICT_MODE));
  }

  public void setParallelMode(boolean parallelMode) {
    myWhatToDo.putProperty(ScriptProperties.PARALLEL_MODE, Boolean.toString(parallelMode));
  }

  protected boolean getParallelMode() {
    return Boolean.parseBoolean(myWhatToDo.getProperty(ScriptProperties.PARALLEL_MODE));
  }

  @Override
  protected void checkMpsHome() {
    // do not check: there is no mps_home for us  
  }

  @Override
  protected Set<File> calculateClassPath() {
    Set<File> classPath = new LinkedHashSet<File>();
    String mpsHome = getProject().getProperty("artifacts.mps");
    String pluginHome = getProject().getProperty("artifacts.mpsPlugin");
    String ideaHome = getProject().getProperty("artifacts.IDEA");
    String mpsCoreHome = getProject().getProperty("artifacts.mpsBootstrapCore");
    String mpsWorkbenchHome = getProject().getProperty("artifacts.mpsWorkbench");

    if ((mpsHome != null && mpsHome.length() > 0)) {
      // buildMPS 
      gatherAllClassesAndJarsUnder(new File(mpsHome, "lib"), classPath);
    } else if ((pluginHome != null && pluginHome.length() > 0) && (ideaHome != null && ideaHome.length() > 0)) {
      // buildPlugin + IDEA 
      gatherAllClassesAndJarsUnder(new File(ideaHome, "lib"), classPath);
      gatherAllClassesAndJarsUnder(new File(pluginHome, "mps-core/lib"), classPath);
    } else if ((mpsCoreHome != null && mpsCoreHome.length() > 0) && (ideaHome != null && ideaHome.length() > 0)) {
      // buildCore + IDEA 
      gatherAllClassesAndJarsUnder(new File(mpsCoreHome, "lib"), classPath);
      gatherAllClassesAndJarsUnder(new File(ideaHome, "lib"), classPath);
      if ((mpsWorkbenchHome != null && mpsWorkbenchHome.length() > 0)) {
        gatherAllClassesAndJarsUnder(new File(mpsWorkbenchHome, "lib"), classPath);
      }
    } else {
      throw new BuildException("Dependency on MPS build scripts is required to generate MPS modules.");
    }

    return classPath;
  }


}
