package jetbrains.mps.smodel.persistence.def.v8;

/*Generated by MPS */

import jetbrains.mps.util.xml.XMLSAXHandler;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import java.util.Stack;
import org.xml.sax.Locator;
import jetbrains.mps.smodel.SModelHeader;
import jetbrains.mps.smodel.DefaultSModel;
import jetbrains.mps.smodel.persistence.def.v7.ReadHelper;
import jetbrains.mps.refactoring.ModelLinkMap;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.refactoring.StructureModificationProcessor;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;
import jetbrains.mps.smodel.InterfaceSNode;
import org.jetbrains.mps.openapi.model.SNodeId;
import jetbrains.mps.util.Pair;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.apache.log4j.Priority;
import jetbrains.mps.smodel.StaticReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ModelReader8Handler extends XMLSAXHandler<ModelLoadResult> {
  private static String[] EMPTY_ARRAY = new String[0];
  private ModelReader8Handler.ModelElementHandler modelhandler = new ModelReader8Handler.ModelElementHandler();
  private ModelReader8Handler.PersistenceElementHandler persistencehandler = new ModelReader8Handler.PersistenceElementHandler();
  private ModelReader8Handler.Module_referenceElementHandler module_referencehandler = new ModelReader8Handler.Module_referenceElementHandler();
  private ModelReader8Handler.ImportElementHandler importhandler = new ModelReader8Handler.ImportElementHandler();
  private ModelReader8Handler.NodeElementHandler nodehandler = new ModelReader8Handler.NodeElementHandler();
  private ModelReader8Handler.IgnoredNodeElementHandler ignoredNodehandler = new ModelReader8Handler.IgnoredNodeElementHandler();
  private ModelReader8Handler.PropertyElementHandler propertyhandler = new ModelReader8Handler.PropertyElementHandler();
  private ModelReader8Handler.IgnoredPropertyElementHandler ignoredPropertyhandler = new ModelReader8Handler.IgnoredPropertyElementHandler();
  private ModelReader8Handler.LinkElementHandler linkhandler = new ModelReader8Handler.LinkElementHandler();
  private ModelReader8Handler.IgnoredLinkElementHandler ignoredLinkhandler = new ModelReader8Handler.IgnoredLinkElementHandler();
  private Stack<ModelReader8Handler.ElementHandler> myHandlersStack = new Stack<ModelReader8Handler.ElementHandler>();
  private Stack<ModelReader8Handler.ChildHandler> myChildHandlersStack = new Stack<ModelReader8Handler.ChildHandler>();
  private Stack<Object> myValues = new Stack<Object>();
  private Locator myLocator;
  private ModelLoadResult myResult;
  private boolean fieldinterfaceOnly;
  private boolean fieldstripImplementation;
  private SModelHeader fieldheader;
  private DefaultSModel fieldmodel;
  private ReadHelper fieldhelper;
  private ModelLinkMap fieldlinkMap;
  private Boolean fieldhasRefactorings;
  private boolean fieldhasSkippedNodes;

  public ModelReader8Handler(boolean interfaceOnly, boolean stripImplementation, SModelHeader header) {
    fieldinterfaceOnly = interfaceOnly;
    fieldstripImplementation = stripImplementation;
    fieldheader = header;
  }

  public ModelLoadResult getResult() {
    return myResult;
  }

  @Override
  public void setDocumentLocator(Locator locator) {
    myLocator = locator;
  }

  @Override
  public void characters(char[] array, int start, int len) throws SAXException {
    ModelReader8Handler.ElementHandler current = (myHandlersStack.empty() ?
      (ModelReader8Handler.ElementHandler) null :
      myHandlersStack.peek()
    );
    if (current != null) {
      current.handleText(myValues.peek(), new String(array, start, len));
    }
  }

  @Override
  public void endElement(String uri, String localName, String qName) throws SAXException {
    ModelReader8Handler.ElementHandler current = myHandlersStack.pop();
    Object childValue = myValues.pop();
    current.validate(childValue);
    if (myChildHandlersStack.empty()) {
      myResult = (ModelLoadResult) childValue;
    } else {
      ModelReader8Handler.ChildHandler ch = myChildHandlersStack.pop();
      if (ch != null) {
        ch.apply(myValues.peek(), childValue);
      }
    }
  }

  @Override
  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    ModelReader8Handler.ElementHandler current = (myHandlersStack.empty() ?
      (ModelReader8Handler.ElementHandler) null :
      myHandlersStack.peek()
    );
    if (current == null) {
      // root 
      current = modelhandler;
    } else {
      current = current.createChild(myValues.peek(), qName, attributes);
    }

    // check required 
    for (String attr : current.requiredAttributes()) {
      if (attributes.getValue(attr) == null) {
        throw new SAXParseException("attribute " + attr + " is absent", null);
      }
    }

    Object result = current.createObject(attributes);
    if (myHandlersStack.empty()) {
      myResult = (ModelLoadResult) result;
    }

    // handle attributes 
    for (int i = 0; i < attributes.getLength(); i++) {
      String name = attributes.getQName(i);
      String value = attributes.getValue(i);
      current.handleAttribute(result, name, value);
    }
    myHandlersStack.push(current);
    myValues.push(result);
  }

  private static interface ChildHandler {
    public void apply(Object resultObject, Object value) throws SAXException;
  }

  private class ElementHandler {
    private ElementHandler() {
    }

    protected Object createObject(Attributes attrs) throws SAXException {
      return null;
    }

    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
    }

    protected ModelReader8Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      throw new SAXParseException("unknown tag: " + tagName, null);
    }

    protected void handleText(Object resultObject, String value) throws SAXException {
      if (value.trim().length() == 0) {
        return;
      }
      throw new SAXParseException("text is not accepted: '" + value + "'", null);
    }

    protected String[] requiredAttributes() {
      return ModelReader8Handler.EMPTY_ARRAY;
    }

    protected void validate(Object resultObject) throws SAXException {
    }
  }

  public class ModelElementHandler extends ModelReader8Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"modelUID"};

    public ModelElementHandler() {
    }

    @Override
    protected ModelLoadResult createObject(Attributes attrs) throws SAXException {
      fieldmodel = new DefaultSModel(PersistenceFacade.getInstance().createModelReference(attrs.getValue("modelUID")));
      fieldhasSkippedNodes = false;
      fieldmodel.setPersistenceVersion(8);
      fieldmodel.getSModelHeader().updateDefaults(fieldheader);
      fieldhelper = new ReadHelper(fieldmodel.getReference());
      fieldlinkMap = new ModelLinkMap(fieldmodel.getModelDescriptor());
      return new ModelLoadResult(fieldmodel, ModelLoadingState.NOT_LOADED);
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      ModelLoadResult result = (ModelLoadResult) resultObject;
      if ("modelUID".equals(name)) {
        return;
      }
      if ("content".equals(name)) {
        if ("header".equals(value)) {
          result.setContentKind(ModelLoadResult.ContentKind.MODEL_HEADER);
        } else if ("root".equals(value)) {
          result.setContentKind(ModelLoadResult.ContentKind.MODEL_ROOT);
        } else {
          throw new SAXException("unknown content attribute value: " + value);
        }
        return;
      }
      if ("version".equals(name)) {
        int version;
        try {
          version = (value == null ?
            -1 :
            Integer.parseInt(value)
          );
        } catch (NumberFormatException e) {
          version = -1;
        }
        fieldmodel.getSModelHeader().setVersion(version);
        return;
      }
      if ("doNotGenerate".equals(name)) {
        fieldmodel.getSModelHeader().setDoNotGenerate(Boolean.parseBoolean(value));
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }

    @Override
    protected ModelReader8Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("persistence".equals(tagName)) {
        myChildHandlersStack.push(null);
        return persistencehandler;
      }
      if ("language".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364079(resultObject, value);
          }
        });
        return module_referencehandler;
      }
      if ("language-engaged-on-generation".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364090(resultObject, value);
          }
        });
        return module_referencehandler;
      }
      if ("devkit".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364101(resultObject, value);
          }
        });
        return module_referencehandler;
      }
      if ("import".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364112(resultObject, value);
          }
        });
        return importhandler;
      }
      if ("root".equals(tagName) && checkroot_1768088633166530069(resultObject, attrs)) {
        myChildHandlersStack.push(new ModelReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_1361478912184551722(resultObject, value);
          }
        });
        return nodehandler;
      }
      if ("root".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_1768088633166523070(resultObject, value);
          }
        });
        return ignoredNodehandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }

    private boolean checkroot_1768088633166530069(Object resultObject, Attributes attrs) {
      return !(fieldstripImplementation && fieldhelper.isImplementationNode(attrs.getValue("nodeInfo")));
    }

    private void handleChild_286176397450364079(Object resultObject, Object value) throws SAXException {
      SModuleReference child = (SModuleReference) value;
      fieldmodel.addLanguage(child);
    }

    private void handleChild_286176397450364090(Object resultObject, Object value) throws SAXException {
      SModuleReference child = (SModuleReference) value;
      fieldmodel.addEngagedOnGenerationLanguage(child);
    }

    private void handleChild_286176397450364101(Object resultObject, Object value) throws SAXException {
      SModuleReference child = (SModuleReference) value;
      fieldmodel.addDevKit(child);
    }

    private void handleChild_286176397450364112(Object resultObject, Object value) throws SAXException {
      String[] child = (String[]) value;
      fieldhelper.addImportToModel(fieldmodel, child[0], child[1], (child[2] != null ?
        Integer.parseInt(child[2]) :
        -1
      ), child[3] != null);
    }

    private void handleChild_1361478912184551722(Object resultObject, Object value) throws SAXException {
      SNode child = (SNode) value;
      if (child != null) {
        fieldmodel.addRootNode(child);
      }
    }

    private void handleChild_1768088633166523070(Object resultObject, Object value) throws SAXException {
      Tuples._3<String, String, String> child = (Tuples._3<String, String, String>) value;
      if (fieldhelper.isImplementationWithStubNode(child._1())) {
        String stubConcept = fieldhelper.getStubConceptQualifiedName(child._2());
        if (stubConcept != null) {
          fieldmodel.addRootNode(new jetbrains.mps.smodel.SNode(stubConcept));
        }
      }
      fieldhasSkippedNodes = true;
    }

    @Override
    protected void validate(Object resultObject) throws SAXException {
      if (!(validateInternal((ModelLoadResult) resultObject))) {
        throw new SAXParseException("missing tags", null);
      }
    }

    private boolean validateInternal(ModelLoadResult result) throws SAXException {
      new StructureModificationProcessor(fieldlinkMap, fieldmodel).updateModelOnLoad();
      fieldlinkMap.fillModelEnvironmentInfo();
      result.setState((fieldhasSkippedNodes ?
        ((fieldinterfaceOnly ?
          ModelLoadingState.INTERFACE_LOADED :
          ModelLoadingState.NO_IMPLEMENTATION
        )) :
        ModelLoadingState.FULLY_LOADED
      ));
      return true;
    }
  }

  public class PersistenceElementHandler extends ModelReader8Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"version"};

    public PersistenceElementHandler() {
    }

    @Override
    protected Integer createObject(Attributes attrs) throws SAXException {
      return Integer.parseInt(attrs.getValue("version"));
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Integer result = (Integer) resultObject;
      if ("version".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class Module_referenceElementHandler extends ModelReader8Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"namespace"};

    public Module_referenceElementHandler() {
    }

    @Override
    protected SModuleReference createObject(Attributes attrs) throws SAXException {
      return ModuleReference.fromString(attrs.getValue("namespace"));
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      SModuleReference result = (SModuleReference) resultObject;
      if ("namespace".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class ImportElementHandler extends ModelReader8Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"index", "modelUID"};

    public ImportElementHandler() {
    }

    @Override
    protected String[] createObject(Attributes attrs) throws SAXException {
      return new String[]{attrs.getValue("index"), attrs.getValue("modelUID"), attrs.getValue("version"), null};
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String[] result = (String[]) resultObject;
      if ("index".equals(name)) {
        return;
      }
      if ("version".equals(name)) {
        return;
      }
      if ("modelUID".equals(name)) {
        return;
      }
      if ("implicit".equals(name)) {
        result[3] = value;
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class NodeElementHandler extends ModelReader8Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"type", "nodeInfo"};

    public NodeElementHandler() {
    }

    @Override
    protected SNode createObject(Attributes attrs) throws SAXException {
      Tuples._3<ConceptKind, StaticScope, Boolean> parsed = fieldhelper.readNodeInfo(attrs.getValue("nodeInfo"));
      if (parsed == null) {
        throw new SAXParseException("bad typeInfo attribute", null);
      }
      boolean interfaceNode = false;
      if (fieldinterfaceOnly) {
        if (fieldhasRefactorings == null) {
          fieldhasRefactorings = StructureModificationProcessor.hasRefactoringsToPlay(fieldmodel);
        }
        if (!(fieldhasRefactorings)) {
          interfaceNode = (parsed._0() == ConceptKind.INTERFACE || attrs.getValue("role") == null);
        }
      }
      jetbrains.mps.smodel.SNode result = (interfaceNode ?
        new InterfaceSNode(fieldhelper.readType(attrs.getValue("type"))) :
        new jetbrains.mps.smodel.SNode(fieldhelper.readType(attrs.getValue("type")))
      );
      fieldlinkMap.addNodeMetainfo(parsed._0(), parsed._1(), (boolean) parsed._2(), result);
      return result;
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      SNode result = (SNode) resultObject;
      if ("type".equals(name)) {
        return;
      }
      if ("typeId".equals(name)) {
        fieldlinkMap.addTypeLocation(fieldhelper.readLinkId(value), result);
        return;
      }
      if ("nodeInfo".equals(name)) {
        return;
      }
      if ("role".equals(name)) {
        result.putUserObject("role", fieldhelper.readRole(value));
        return;
      }
      if ("roleId".equals(name)) {
        fieldlinkMap.addRoleLocation(fieldhelper.readLinkId(value), result);
        return;
      }
      if ("id".equals(name)) {
        SNodeId id = jetbrains.mps.smodel.SNodeId.fromString(value);
        if (id == null) {
          throw new SAXParseException("bad node ID", null);
        }
        ((jetbrains.mps.smodel.SNode) result).setId(id);
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }

    @Override
    protected ModelReader8Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("property".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364265(resultObject, value);
          }
        });
        return propertyhandler;
      }
      if ("link".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364288(resultObject, value);
          }
        });
        return linkhandler;
      }
      if ("node".equals(tagName) && checknode_1910945748547288250(resultObject, attrs)) {
        myChildHandlersStack.push(new ModelReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_286176397450364333(resultObject, value);
          }
        });
        return nodehandler;
      }
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_1910945748545948896(resultObject, value);
          }
        });
        return ignoredNodehandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }

    private boolean checknode_1910945748547288250(Object resultObject, Attributes attrs) {
      SNode result = (SNode) resultObject;
      if (fieldstripImplementation && fieldhelper.isImplementationNode(attrs.getValue("nodeInfo"))) {
        return false;
      }
      return !(result instanceof InterfaceSNode) || fieldhelper.isInterfaceNode(attrs.getValue("nodeInfo"));
    }

    private void handleChild_286176397450364265(Object resultObject, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      String[] child = (String[]) value;
      if (child[1] != null) {
        result.setProperty(fieldhelper.readName(child[0]), child[1]);
        fieldlinkMap.addNameLocation(fieldhelper.readLinkId(child[2]), result, child[0]);
      }
    }

    private void handleChild_286176397450364288(Object resultObject, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      String[] child = (String[]) value;
      Pair<Boolean, SNodeReference> pptr = fieldhelper.readLink_internal(child[1]);
      SNodeReference ptr = pptr.o2;
      if (ptr == null || ptr.getModelReference() == null) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("couldn't create reference '" + child[0] + "' from " + child[1]);
        }
        return;
      }
      StaticReference ref = new StaticReference(fieldhelper.readRole(child[0]), result, ptr.getModelReference(), ((SNodePointer) ptr).getNodeId(), child[2]);
      fieldlinkMap.addTargetLocation(ptr, ref);
      result.setReference(ref.getRole(), ref);
      fieldlinkMap.addRoleLocation(fieldhelper.readLinkId(child[3]), ref);
    }

    private void handleChild_286176397450364333(Object resultObject, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      SNode child = (SNode) value;
      if (child != null) {
        result.addChild(((String) child.getUserObject("role")), child);
        child.putUserObject("role", null);
      }
    }

    private void handleChild_1910945748545948896(Object resultObject, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      Tuples._3<String, String, String> child = (Tuples._3<String, String, String>) value;
      fieldhasSkippedNodes = true;
      if (fieldhelper.isImplementationWithStubNode(child._1())) {
        String stubConcept = fieldhelper.getStubConceptQualifiedName(child._2());
        if (stubConcept != null) {
          jetbrains.mps.smodel.SNode childNode = new jetbrains.mps.smodel.SNode(stubConcept);
          result.addChild(child._0(), childNode);
          return;
        }
      }
      if (result instanceof InterfaceSNode) {
        ((InterfaceSNode) result).skipRole(child._0());
      }
    }
  }

  public class IgnoredNodeElementHandler extends ModelReader8Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};

    public IgnoredNodeElementHandler() {
    }

    @Override
    protected Tuples._3<String, String, String> createObject(Attributes attrs) throws SAXException {
      return MultiTuple.<String,String,String>from(attrs.getValue("role"), attrs.getValue("nodeInfo"), attrs.getValue("type"));
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Tuples._3<String, String, String> result = (Tuples._3<String, String, String>) resultObject;
      if ("type".equals(name)) {
        return;
      }
      if ("typeId".equals(name)) {
        return;
      }
      if ("nodeInfo".equals(name)) {
        return;
      }
      if ("role".equals(name)) {
        return;
      }
      if ("roleId".equals(name)) {
        return;
      }
      if ("id".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }

    @Override
    protected ModelReader8Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("property".equals(tagName)) {
        myChildHandlersStack.push(null);
        return ignoredPropertyhandler;
      }
      if ("link".equals(tagName)) {
        myChildHandlersStack.push(null);
        return ignoredLinkhandler;
      }
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(null);
        return ignoredNodehandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
  }

  public class PropertyElementHandler extends ModelReader8Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"name"};

    public PropertyElementHandler() {
    }

    @Override
    protected String[] createObject(Attributes attrs) throws SAXException {
      return new String[]{attrs.getValue("name"), null, null};
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String[] result = (String[]) resultObject;
      if ("name".equals(name)) {
        return;
      }
      if ("nameId".equals(name)) {
        result[2] = value;
        return;
      }
      if ("value".equals(name)) {
        result[1] = value;
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class IgnoredPropertyElementHandler extends ModelReader8Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};

    public IgnoredPropertyElementHandler() {
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      if ("name".equals(name)) {
        return;
      }
      if ("nameId".equals(name)) {
        return;
      }
      if ("value".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class LinkElementHandler extends ModelReader8Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"role", "targetNodeId"};

    public LinkElementHandler() {
    }

    @Override
    protected String[] createObject(Attributes attrs) throws SAXException {
      return new String[]{attrs.getValue("role"), attrs.getValue("targetNodeId"), null, null};
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String[] result = (String[]) resultObject;
      if ("role".equals(name)) {
        return;
      }
      if ("roleId".equals(name)) {
        result[3] = value;
        return;
      }
      if ("targetNodeId".equals(name)) {
        return;
      }
      if ("resolveInfo".equals(name)) {
        result[2] = value;
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class IgnoredLinkElementHandler extends ModelReader8Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};

    public IgnoredLinkElementHandler() {
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      if ("role".equals(name)) {
        return;
      }
      if ("roleId".equals(name)) {
        return;
      }
      if ("targetNodeId".equals(name)) {
        return;
      }
      if ("resolveInfo".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  protected static Logger LOG = LogManager.getLogger(ModelReader8Handler.class);
}
