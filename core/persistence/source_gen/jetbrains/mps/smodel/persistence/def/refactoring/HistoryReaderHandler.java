package jetbrains.mps.smodel.persistence.def.refactoring;

/*Generated by MPS */

import jetbrains.mps.util.xml.XMLSAXHandler;
import jetbrains.mps.refactoring.StructureModificationLog;
import java.util.Stack;
import org.xml.sax.Locator;
import jetbrains.mps.smodel.persistence.def.v7.ReadHelper;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;
import jetbrains.mps.refactoring.StructureModification;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;

public class HistoryReaderHandler extends XMLSAXHandler<StructureModificationLog> {
  private HistoryReaderHandler.HistoryElementHandler historyHandler = new HistoryReaderHandler.HistoryElementHandler();
  private HistoryReaderHandler.ElementElementHandler elementHandler = new HistoryReaderHandler.ElementElementHandler();
  private HistoryReaderHandler.DependenciesElementHandler dependenciesHandler = new HistoryReaderHandler.DependenciesElementHandler();
  private HistoryReaderHandler.ModelElementHandler modelHandler = new HistoryReaderHandler.ModelElementHandler();
  private HistoryReaderHandler.MoveNodeElementHandler MoveNodeHandler = new HistoryReaderHandler.MoveNodeElementHandler();
  private HistoryReaderHandler.RenameNodeElementHandler RenameNodeHandler = new HistoryReaderHandler.RenameNodeElementHandler();
  private HistoryReaderHandler.RenameModelElementHandler RenameModelHandler = new HistoryReaderHandler.RenameModelElementHandler();
  private Stack<HistoryReaderHandler.ElementHandler> myHandlersStack = new Stack<HistoryReaderHandler.ElementHandler>();
  private Stack<HistoryReaderHandler.ChildHandler> myChildHandlersStack = new Stack<HistoryReaderHandler.ChildHandler>();
  private Stack<Object> myValues = new Stack<Object>();
  private Locator myLocator;
  private StructureModificationLog myResult;
  private ReadHelper my_helperField;
  public HistoryReaderHandler() {
  }
  public StructureModificationLog getResult() {
    return myResult;
  }
  @Override
  public void setDocumentLocator(Locator locator) {
    myLocator = locator;
  }
  @Override
  public void characters(char[] array, int start, int len) throws SAXException {
    HistoryReaderHandler.ElementHandler current = (myHandlersStack.empty() ? (HistoryReaderHandler.ElementHandler) null : myHandlersStack.peek());
    if (current != null) {
      current.handleText(myValues.peek(), new String(array, start, len));
    }
  }
  @Override
  public void endElement(String uri, String localName, String qName) throws SAXException {
    HistoryReaderHandler.ElementHandler current = myHandlersStack.pop();
    Object childValue = myValues.pop();
    current.validate(childValue);
    if (myChildHandlersStack.empty()) {
      myResult = (StructureModificationLog) childValue;
    } else {
      HistoryReaderHandler.ChildHandler ch = myChildHandlersStack.pop();
      if (ch != null) {
        ch.apply(myValues.peek(), childValue);
      }
    }
  }
  @Override
  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    HistoryReaderHandler.ElementHandler current = (myHandlersStack.empty() ? (HistoryReaderHandler.ElementHandler) null : myHandlersStack.peek());
    if (current == null) {
      // root 
      current = historyHandler;
    } else {
      current = current.createChild(myValues.peek(), qName, attributes);
    }

    // check required 
    for (String attr : current.requiredAttributes()) {
      if (attributes.getValue(attr) == null) {
        throw new SAXParseException("attribute " + attr + " is absent", null);
      }
    }

    Object result = current.createObject(attributes);
    if (myHandlersStack.empty()) {
      myResult = (StructureModificationLog) result;
    }

    // handle attributes 
    for (int i = 0; i < attributes.getLength(); i++) {
      String name = attributes.getQName(i);
      String value = attributes.getValue(i);
      current.handleAttribute(result, name, value);
    }
    myHandlersStack.push(current);
    myValues.push(result);
  }
  private static interface ChildHandler {
    public void apply(Object resultObject, Object value) throws SAXException;
  }
  private class ElementHandler {
    private String[] requiredAttributes = new String[0];

    private ElementHandler() {
    }
    protected Object createObject(Attributes attrs) throws SAXException {
      return null;
    }
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
    }
    protected HistoryReaderHandler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      throw new SAXParseException("unknown tag: " + tagName, null);
    }
    protected void handleText(Object resultObject, String value) throws SAXException {
      if (value.trim().length() == 0) {
        return;
      }
      throw new SAXParseException("text is not accepted: '" + value + "'", null);
    }
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    protected void setRequiredAttributes(String... required) {
      requiredAttributes = required;
    }
    protected void validate(Object resultObject) throws SAXException {
    }
  }
  public class HistoryElementHandler extends HistoryReaderHandler.ElementHandler {
    public HistoryElementHandler() {
    }
    @Override
    protected StructureModificationLog createObject(Attributes attrs) throws SAXException {
      return new StructureModificationLog();
    }
    @Override
    protected HistoryReaderHandler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("StructureModification".equals(tagName)) {
        myChildHandlersStack.push(new HistoryReaderHandler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_4224832660979881723(resultObject, value);
          }
        });
        return elementHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_4224832660979881723(Object resultObject, Object value) throws SAXException {
      StructureModificationLog result = (StructureModificationLog) resultObject;
      StructureModification child = (StructureModification) value;
      ListSequence.fromList(result.getHistory()).addElement(child);
    }
  }
  public class ElementElementHandler extends HistoryReaderHandler.ElementHandler {
    public ElementElementHandler() {
    }
    @Override
    protected StructureModification createObject(Attributes attrs) throws SAXException {
      my_helperField = new ReadHelper(null);
      return new StructureModification();
    }
    @Override
    protected HistoryReaderHandler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("dependencies".equals(tagName)) {
        myChildHandlersStack.push(new HistoryReaderHandler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_4224832660979881734(resultObject, value);
          }
        });
        return dependenciesHandler;
      }
      if ("move".equals(tagName)) {
        myChildHandlersStack.push(new HistoryReaderHandler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_4224832660979881742(resultObject, value);
          }
        });
        return MoveNodeHandler;
      }
      if ("rename".equals(tagName)) {
        myChildHandlersStack.push(new HistoryReaderHandler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_4224832660979881752(resultObject, value);
          }
        });
        return RenameNodeHandler;
      }
      if ("RenameModel".equals(tagName)) {
        myChildHandlersStack.push(new HistoryReaderHandler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_4224832660979881762(resultObject, value);
          }
        });
        return RenameModelHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_4224832660979881734(Object resultObject, Object value) throws SAXException {
      StructureModification result = (StructureModification) resultObject;
      Map<SModelReference, Integer> child = (Map<SModelReference, Integer>) value;
      result.setDependencies(child);
    }
    private void handleChild_4224832660979881742(Object resultObject, Object value) throws SAXException {
      StructureModification result = (StructureModification) resultObject;
      StructureModification.MoveNode child = (StructureModification.MoveNode) value;
      ListSequence.fromList(result.getData()).addElement(child);
    }
    private void handleChild_4224832660979881752(Object resultObject, Object value) throws SAXException {
      StructureModification result = (StructureModification) resultObject;
      StructureModification.RenameNode child = (StructureModification.RenameNode) value;
      ListSequence.fromList(result.getData()).addElement(child);
    }
    private void handleChild_4224832660979881762(Object resultObject, Object value) throws SAXException {
      StructureModification result = (StructureModification) resultObject;
      StructureModification.RenameModel child = (StructureModification.RenameModel) value;
      ListSequence.fromList(result.getData()).addElement(child);
    }
  }
  public class DependenciesElementHandler extends HistoryReaderHandler.ElementHandler {
    public DependenciesElementHandler() {
    }
    @Override
    protected Map<SModelReference, Integer> createObject(Attributes attrs) throws SAXException {
      return MapSequence.fromMap(new HashMap<SModelReference, Integer>());
    }
    @Override
    protected HistoryReaderHandler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("model".equals(tagName)) {
        myChildHandlersStack.push(new HistoryReaderHandler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_4224832660979881785(resultObject, value);
          }
        });
        return modelHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_4224832660979881785(Object resultObject, Object value) throws SAXException {
      Map<SModelReference, Integer> result = (Map<SModelReference, Integer>) resultObject;
      String[] child = (String[]) value;
      SModelReference modelRef = PersistenceFacade.getInstance().createModelReference(child[1]);
      MapSequence.fromMap(result).put(modelRef, Integer.parseInt(child[2]));
      my_helperField.addModelRef(child[0], modelRef);
    }
  }
  public class ModelElementHandler extends HistoryReaderHandler.ElementHandler {
    public ModelElementHandler() {
      setRequiredAttributes("index", "modelUID", "version");
    }
    @Override
    protected String[] createObject(Attributes attrs) throws SAXException {
      return new String[]{attrs.getValue("index"), attrs.getValue("modelUID"), attrs.getValue("version")};
    }
  }
  public class MoveNodeElementHandler extends HistoryReaderHandler.ElementHandler {
    public MoveNodeElementHandler() {
      setRequiredAttributes("id", "to");
    }
    @Override
    protected StructureModification.MoveNode createObject(Attributes attrs) throws SAXException {
      return new StructureModification.MoveNode(my_helperField.readLinkId(attrs.getValue("id")), my_helperField.readLinkId(attrs.getValue("to")));
    }
  }
  public class RenameNodeElementHandler extends HistoryReaderHandler.ElementHandler {
    public RenameNodeElementHandler() {
      setRequiredAttributes("id", "type", "to");
    }
    @Override
    protected StructureModification.RenameNode createObject(Attributes attrs) throws SAXException {
      return new StructureModification.RenameNode(my_helperField.readLinkId(attrs.getValue("id")), StructureModification.RenameNode.RenameType.valueOf(attrs.getValue("type")), attrs.getValue("to"), null);
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      StructureModification.RenameNode result = (StructureModification.RenameNode) resultObject;
      if ("from".equals(name)) {
        result.oldValue = value;
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class RenameModelElementHandler extends HistoryReaderHandler.ElementHandler {
    public RenameModelElementHandler() {
      setRequiredAttributes("oldModel", "newModel");
    }
    @Override
    protected StructureModification.RenameModel createObject(Attributes attrs) throws SAXException {
      return new StructureModification.RenameModel(PersistenceFacade.getInstance().createModelReference(attrs.getValue("oldModel")), PersistenceFacade.getInstance().createModelReference(attrs.getValue("newModel")));
    }
  }
}
