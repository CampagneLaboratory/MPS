package jetbrains.mps.smodel.persistence.def.v7;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModelReference;
import java.util.Map;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.persistence.RoleIdsComponent;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.StaticReference;
import jetbrains.mps.MPSCore;
import jetbrains.mps.logging.Logger;

public class WriteHelper {
  public static final char MODEL_SEPARATOR_CHAR = '.';
  public static final char VERSION_SEPARATOR_CHAR = ':';
  public static final String DYNAMIC_REFERENCE_ID = "^";
  private static final int HASH_BASE = 10 + 26;
  private static final int HASH_SIZE = HASH_BASE * HASH_BASE * HASH_BASE * HASH_BASE;
  private SModelReference myModelRef;
  private Map<SModelReference, String> myModelIndex;
  private Set<Integer> myUsedIndexes;

  public WriteHelper(SModelReference modelRef) {
    myModelIndex = MapSequence.fromMap(new HashMap<SModelReference, String>());
    myUsedIndexes = SetSequence.fromSet(new HashSet<Integer>());
    myModelRef = modelRef;
  }

  public void addModelReference(@NotNull SModelReference model) {
    if (MapSequence.fromMap(myModelIndex).containsKey(model)) {
      return;
    }
    int hash = (model.hashCode() % HASH_SIZE + HASH_SIZE) % HASH_SIZE;
    while (SetSequence.fromSet(myUsedIndexes).contains(hash)) {
      hash = (hash + 1) % HASH_SIZE;
    }
    SetSequence.fromSet(myUsedIndexes).addElement(hash);
    MapSequence.fromMap(myModelIndex).put(model, Integer.toString(hash, HASH_BASE));
  }

  public String getImportIndex(@NotNull SModelReference model) {
    return MapSequence.fromMap(myModelIndex).get(model);
  }

  @NotNull
  private String genReferenceString(@NotNull SModelReference ref, @NotNull String text) {
    if (ref.equals(myModelRef)) {
      return encode(text);
    }
    String index = MapSequence.fromMap(myModelIndex).get(ref);
    if (index == null) {
      LOG.error("model " + ref + " not found in index");
      return encode(text);
    }
    return new StringBuilder().append(index).append(MODEL_SEPARATOR_CHAR).append(encode(text)).toString();
  }

  @NotNull
  private String genConceptReferenceString(@Nullable SNode concept, @NotNull String fqName) {
    // return fqName prefixed with "." if we can't find model or name of concept 
    String name = SPropertyOperations.getString(concept, "name");
    if (name == null) {
      return MODEL_SEPARATOR_CHAR + fqName;
    }
    String index = MapSequence.fromMap(myModelIndex).get(SNodeOperations.getModel(concept).getSModelReference());
    if (index == null) {
      return MODEL_SEPARATOR_CHAR + fqName;
    }
    return new StringBuilder().append(index).append(MODEL_SEPARATOR_CHAR).append(name).toString();
  }

  @Nullable
  public String genReferenceId(@Nullable SNodeReference pointer) {
    return (pointer == null ?
      null :
      genReferenceString(pointer.getModelReference(), ((SNodePointer) pointer).getNodeId().toString())
    );
  }

  @Nullable
  private String genReferenceId(@Nullable SNode node) {
    return ((node == null) ?
      null :
      genReferenceId(node.getReference())
    );
  }

  public String genType(@NotNull SNode node) {
    if (RoleIdsComponent.isEnabled()) {
      // return fqName prefixed with "." if we can't find model or name of concept 
      String fqName = node.getConcept().getConceptId();
      String index = MapSequence.fromMap(myModelIndex).get(RoleIdsComponent.getConceptPointer(node).getModelReference());
      if (index == null) {
        return MODEL_SEPARATOR_CHAR + fqName;
      }
      return index + MODEL_SEPARATOR_CHAR + node.getConcept().getName();
    }
    return genConceptReferenceString(SNodeOperations.getConceptDeclaration(node), node.getConcept().getConceptId());
  }

  @Nullable
  public String genTypeId(@NotNull SNode node) {
    if (RoleIdsComponent.isEnabled()) {
      return genReferenceId(RoleIdsComponent.getConceptPointer(node));
    }
    return genReferenceId(SNodeOperations.getConceptDeclaration(node));
  }

  public String genRole(@NotNull SNode node) {
    return node.getRoleInParent();
  }

  public String genRole(@NotNull SReference ref) {
    return SLinkOperations.getRole(ref);
  }

  @Nullable
  public String genRoleId(@NotNull SNode node) {
    if (SNodeOperations.getParent(node) == null) {
      return null;
    }
    if (RoleIdsComponent.isEnabled()) {
      return genReferenceId(RoleIdsComponent.getNodeRolePointer(node));
    }
    return genReferenceId(SNodeOperations.getContainingLinkDeclaration(node));
  }

  @Nullable
  public String genRoleId(@NotNull SReference ref) {
    if (RoleIdsComponent.isEnabled()) {
      return genReferenceId(RoleIdsComponent.getReferenceRolePointer(ref));
    }
    return genReferenceId(SLinkOperations.findLinkDeclaration(ref));
  }

  public String genName(@NotNull SNode node, @NotNull String prop) {
    return prop;
  }

  @Nullable
  public String genNameId(@NotNull SNode node, @NotNull String prop) {
    if (RoleIdsComponent.isEnabled()) {
      return genReferenceId(RoleIdsComponent.getPropertyNamePointer(node, prop));
    }
    return genReferenceId(((jetbrains.mps.smodel.SNode) node).getPropertyDeclaration(prop));
  }

  public String genTarget(@NotNull SReference ref) {
    String target = (ref instanceof StaticReference ?
      String.valueOf(ref.getTargetNodeId()) :
      DYNAMIC_REFERENCE_ID
    );
    SModelReference targetModel = ref.getTargetSModelReference();
    return (targetModel == null ?
      target :
      genReferenceString(targetModel, target)
    );
  }

  public String genResolveInfo(@NotNull SReference ref) {
    if (!(MPSCore.getInstance().isMergeDriverMode())) {
      SNode target = (ref instanceof StaticReference ?
        ref.getTargetNode() :
        null
      );
      if ((target != null)) {
        String resolveInfo = jetbrains.mps.util.SNodeOperations.getResolveInfo(target);
        if (resolveInfo != null) {
          return resolveInfo;
        }
      }
    }
    return ((jetbrains.mps.smodel.SReference) ref).getResolveInfo();
  }

  public static String encode(String s) {
    return s.replace("%", "%p").replace(":", "%c").replace(".", "%d");
  }

  public static String decode(String s) {
    return s.replace("%d", ".").replace("%c", ":").replace("%p", "%");
  }

  private static Logger LOG = Logger.getLogger(WriteHelper.class);
}
