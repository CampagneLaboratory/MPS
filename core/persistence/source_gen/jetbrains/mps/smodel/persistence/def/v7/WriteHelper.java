package jetbrains.mps.smodel.persistence.def.v7;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModelReference;
import java.util.Map;
import java.util.Set;
import jetbrains.mps.persistence.ModelEnvironmentInfo;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.persistence.PersistenceRegistry;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Level;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.StaticReference;
import jetbrains.mps.RuntimeFlags;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class WriteHelper {
  public static final char MODEL_SEPARATOR_CHAR = '.';
  public static final String DYNAMIC_REFERENCE_ID = "^";
  private static final int HASH_BASE = 10 + 26;
  private static final int HASH_SIZE = HASH_BASE * HASH_BASE * HASH_BASE * HASH_BASE;
  private SModelReference myModelRef;
  private Map<SModelReference, String> myModelIndex;
  private Set<Integer> myUsedIndexes;
  private ModelEnvironmentInfo myEnv;
  public WriteHelper(SModelReference modelRef) {
    myModelIndex = MapSequence.fromMap(new HashMap<SModelReference, String>());
    myUsedIndexes = SetSequence.fromSet(new HashSet<Integer>());
    myModelRef = modelRef;
    myEnv = PersistenceRegistry.getInstance().getModelEnvironmentInfo();
  }
  public void addModelReference(@NotNull SModelReference model) {
    if (MapSequence.fromMap(myModelIndex).containsKey(model)) {
      return;
    }
    int hash = (model.getModelId().hashCode() % HASH_SIZE + HASH_SIZE) % HASH_SIZE;
    while (SetSequence.fromSet(myUsedIndexes).contains(hash)) {
      hash = (hash + 1) % HASH_SIZE;
    }
    SetSequence.fromSet(myUsedIndexes).addElement(hash);
    MapSequence.fromMap(myModelIndex).put(model, Integer.toString(hash, HASH_BASE));
  }
  public String getImportIndex(@NotNull SModelReference model) {
    return MapSequence.fromMap(myModelIndex).get(model);
  }
  @NotNull
  private String genReferenceString(@NotNull SModelReference ref, @NotNull String text) {
    if (ref.equals(myModelRef)) {
      return encode(text);
    }
    String index = getImportIndex(ref);
    if (index == null) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("model " + ref + " not found in index");
      }
      return encode(text);
    }
    return index + MODEL_SEPARATOR_CHAR + encode(text);
  }
  @Nullable
  public String genReferenceId(@Nullable SNodeReference pointer) {
    return (pointer == null ? null : genReferenceString(pointer.getModelReference(), pointer.getNodeId().toString()));
  }
  public String genType(@NotNull SNode node) {
    // return fqName prefixed with "." if we can't find model or name of concept 
    String fqName = node.getConcept().getQualifiedName();
    SNodeReference conceptPointer = myEnv.getConceptId(node);
    if (conceptPointer == null) {
      return MODEL_SEPARATOR_CHAR + fqName;
    }
    String index = getImportIndex(conceptPointer.getModelReference());
    if (index == null) {
      return MODEL_SEPARATOR_CHAR + fqName;
    }
    return index + MODEL_SEPARATOR_CHAR + node.getConcept().getName();
  }
  @Nullable
  public String genTypeId(@NotNull SNode node) {
    return genReferenceId(myEnv.getConceptId(node));
  }
  public String genNodeInfo(@NotNull SNode node) {
    ConceptKind conceptKind = myEnv.getConceptKind(node);
    StaticScope conceptScope = myEnv.getConceptScope(node);
    boolean unordered = myEnv.isInUnorderedRole(node);
    char[] res = (unordered ? new char[]{'n', 'g', 'u'} : new char[]{'n', 'g'});
    if (conceptKind == ConceptKind.INTERFACE) {
      res[0] = 'i';
    } else if (conceptKind == ConceptKind.IMPLEMENTATION) {
      res[0] = 'l';
    } else if (conceptKind == ConceptKind.IMPLEMENTATION_WITH_STUB) {
      res[0] = 's';
    }
    if (conceptScope == StaticScope.ROOT) {
      res[1] = 'r';
    } else if (conceptScope == StaticScope.NONE) {
      res[1] = 'n';
    }
    return new String(res);
  }
  public String genRole(@NotNull SNode node) {
    return node.getRoleInParent();
  }
  public String genRole(@NotNull SReference ref) {
    return SLinkOperations.getRole(ref);
  }
  @Nullable
  public String genRoleId(@NotNull SNode node) {
    if (SNodeOperations.getParent(node) == null) {
      return null;
    }
    return genReferenceId(myEnv.getNodeRoleId(node));
  }
  @Nullable
  public String genRoleId(@NotNull SReference ref) {
    return genReferenceId(myEnv.getReferenceRoleId(ref));
  }
  public String genName(@NotNull SNode node, @NotNull String prop) {
    return prop;
  }
  @Nullable
  public String genNameId(@NotNull SNode node, @NotNull String prop) {
    return genReferenceId(myEnv.getPropertyId(node, prop));
  }
  public String genTarget(@NotNull SReference ref) {
    String target = (ref instanceof StaticReference ? String.valueOf(ref.getTargetNodeId()) : DYNAMIC_REFERENCE_ID);
    SModelReference targetModel = ref.getTargetSModelReference();
    return (targetModel == null ? target : genReferenceString(targetModel, target));
  }
  public String genResolveInfo(@NotNull SReference ref) {
    if (!(RuntimeFlags.isMergeDriverMode())) {
      SNode target = (ref instanceof StaticReference ? ref.getTargetNode() : null);
      if ((target != null)) {
        String resolveInfo = jetbrains.mps.util.SNodeOperations.getResolveInfo(target);
        if (resolveInfo != null) {
          return resolveInfo;
        }
      }
    }
    return ((jetbrains.mps.smodel.SReference) ref).getResolveInfo();
  }
  public static String encode(String s) {
    return s.replace("%", "%p").replace(":", "%c").replace(".", "%d");
  }
  public static String decode(String s) {
    return s.replace("%d", ".").replace("%c", ":").replace("%p", "%");
  }
  protected static Logger LOG = LogManager.getLogger(WriteHelper.class);
}
