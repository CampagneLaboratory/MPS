package jetbrains.mps.smodel.persistence.def.v9;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SContainmentLink111;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.model.SModelReference;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SLanguageId;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.SModel;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.util.Pair;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.persistence.def.v7.WriteHelper;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.mps.openapi.language.SConceptId;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import org.apache.log4j.Level;
import java.util.UUID;

import org.jetbrains.mps.openapi.language.SReferenceLinkId;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ReadHelper9 {
  private SModelReference myModelRef;
  private Map<String, SModelReference> myModelByIx;
  private Map<String, SLanguageId> myLanguageByIx;

  public ReadHelper9(SModelReference modelRef) {
    myModelByIx = MapSequence.fromMap(new HashMap<String, SModelReference>());
    myLanguageByIx = MapSequence.fromMap(new HashMap<String, SLanguageId>());
    myModelRef = modelRef;
  }

  public void addImportToModel(SModel model, String index, SModelReference ref, boolean implicit) {
    SModel.ImportElement elem = new SModel.ImportElement(ref);
    if (implicit) {
      model.addAdditionalModelVersion(elem);
    } else {
      model.addModelImport(elem);
    }
    MapSequence.fromMap(myModelByIx).put(index, ref);
  }

  public void addUsedLanguage(SModel model, String index, SLanguageId ref, int version) {
    model.addLanguage(ref, version);
    registerLanguage(index, ref);
  }
  public void addImplicitlyUsedLanguage(SModel model, String index, SLanguageId ref, int version) {
    model.addImplicitlyUsedLanguage(ref, version);
    registerLanguage(index, ref);
  }
  public void registerLanguage(String index, SLanguageId ref) {
    MapSequence.fromMap(myLanguageByIx).put(index, ref);
  }

  public SModelReference getSModelReference(@NotNull String ix) {
    return ((ix == null || ix.length() == 0) ? myModelRef : MapSequence.fromMap(myModelByIx).get(ix));
  }

  @NotNull
  public Pair<Boolean, SNodePointer> readLink(String src) {
    // returns <true, xxx> - if src is Dynamic Reference 
    // [modelID.]nodeID | [modelID.]^ 
    Pair<Boolean, SNodePointer> result = new Pair<Boolean, SNodePointer>(false, null);
    if (src == null) {
      return result;
    }
    int dotIndex = src.indexOf(WriteHelper.MODEL_SEPARATOR_CHAR);
    String text = WriteHelper.decode(src.substring(dotIndex + 1, src.length()));
    result.o1 = WriteHelper.DYNAMIC_REFERENCE_ID.equals(text);
    SModelReference modelRef = getSModelReference((dotIndex < 0 ? "" : src.substring(0, dotIndex)));
    SNodeId nodeId = (result.o1 ? null : jetbrains.mps.smodel.SNodeId.fromString(text));
    result.o2 = new SNodePointer(modelRef, nodeId);
    return result;
  }

  public boolean isInterfaceNode(String nodeInfo) {
    return nodeInfo.startsWith("i");
  }

  public boolean isImplementationNode(String nodeInfo) {
    return nodeInfo != null && (nodeInfo.startsWith("l") || nodeInfo.startsWith("s"));
  }

  public boolean isImplementationWithStubNode(String nodeInfo) {
    return nodeInfo != null && nodeInfo.startsWith("s");
  }

  public SConceptId getStubConcept(SConceptId type) {
    // todo 
    return null;
  }

  public Tuples._3<ConceptKind, StaticScope, Boolean> readNodeInfo(String s) {
    ConceptKind kind;
    StaticScope scope;
    if (s.length() != 3 && s.length() != 2) {
      return null;
    }
    switch (s.charAt(0)) {
      case 'n':
        kind = ConceptKind.NORMAL;
        break;
      case 'i':
        kind = ConceptKind.INTERFACE;
        break;
      case 'l':
        kind = ConceptKind.IMPLEMENTATION;
        break;
      case 's':
        kind = ConceptKind.IMPLEMENTATION_WITH_STUB;
        break;
      default:
        return null;
    }
    switch (s.charAt(1)) {
      case 'g':
        scope = StaticScope.GLOBAL;
        break;
      case 'r':
        scope = StaticScope.ROOT;
        break;
      case 'n':
        scope = StaticScope.NONE;
        break;
      default:
        return null;
    }
    boolean unordered = false;
    if (s.length() == 3) {
      if (s.charAt(2) == 'u') {
        unordered = true;
      } else {
        return null;
      }
    }
    return MultiTuple.<ConceptKind,StaticScope,Boolean>from(kind, scope, unordered);
  }

  public SConceptId readConceptId(String s) {
    int ix = s.indexOf(WriteHelper.MODEL_SEPARATOR_CHAR);
    if (ix <= 0) {
      // no model ID - fqName is here 
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Broken reference to type=" + s + " in model " + myModelRef);
      }
      return new SConceptId(new SLanguageId(new UUID(0, 0)), 0);
    }
    SLanguageId langId = MapSequence.fromMap(myLanguageByIx).get(s.substring(0, ix));
    if (langId == null) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("couldn't create node '" + s.substring(ix + 1) + "' : import for index [" + s.substring(0, ix) + "] not found");
      }
      return new SConceptId(new SLanguageId(new UUID(0, 0)), 0);
    } else {
      return new SConceptId(langId, Long.parseLong(s.substring(ix + 1)));
    }
  }

  public SContainmentLink111 readNodeRole(String s) {
    int ix = s.lastIndexOf(WriteHelper.MODEL_SEPARATOR_CHAR);
    SConceptId concept = readConceptId(s.substring(0, ix));
    return new SContainmentLink111(concept, Long.parseLong(s.substring(ix + 1)));
  }

  public SReferenceLinkId readRefRole(String s) {
    int ix = s.lastIndexOf(WriteHelper.MODEL_SEPARATOR_CHAR);
    SConceptId concept = readConceptId(s.substring(0, ix));
    return new SReferenceLinkId(concept, Long.parseLong(s.substring(ix + 1)));
  }

  public SProperty readPropId(String s) {
    int ix = s.lastIndexOf(WriteHelper.MODEL_SEPARATOR_CHAR);
    SConceptId concept = readConceptId(s.substring(0, ix));
    return new SProperty(concept, Long.parseLong(s.substring(ix + 1)));
  }
  protected static Logger LOG = LogManager.getLogger(ReadHelper9.class);
}
