package jetbrains.mps.smodel.persistence.def.v5;

/*Generated by MPS */

import jetbrains.mps.util.xml.XMLSAXHandler;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import java.util.Stack;
import org.xml.sax.Locator;
import jetbrains.mps.smodel.SModelHeader;
import jetbrains.mps.smodel.SModelVersionsInfo;
import java.util.ArrayList;
import jetbrains.mps.smodel.persistence.def.IReferencePersister;
import jetbrains.mps.smodel.persistence.def.SAXVisibleModelElements;
import jetbrains.mps.smodel.DefaultSModel;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.persistence.def.v4.VersionUtil;
import jetbrains.mps.util.InternUtil;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.smodel.persistence.def.v4.ReferencePersister4;

public class ModelReader5Handler extends XMLSAXHandler<ModelLoadResult> {
  private static String[] EMPTY_ARRAY = new String[0];
  private ModelReader5Handler.ModelElementHandler modelhandler = new ModelReader5Handler.ModelElementHandler();
  private ModelReader5Handler.PersistenceElementHandler persistencehandler = new ModelReader5Handler.PersistenceElementHandler();
  private ModelReader5Handler.MaxImportIndexElementHandler maxImportIndexhandler = new ModelReader5Handler.MaxImportIndexElementHandler();
  private ModelReader5Handler.LanguageAspectElementHandler languageAspecthandler = new ModelReader5Handler.LanguageAspectElementHandler();
  private ModelReader5Handler.Tag_with_namespaceElementHandler tag_with_namespacehandler = new ModelReader5Handler.Tag_with_namespaceElementHandler();
  private ModelReader5Handler.ImportElementHandler importhandler = new ModelReader5Handler.ImportElementHandler();
  private ModelReader5Handler.NodeElementHandler nodehandler = new ModelReader5Handler.NodeElementHandler();
  private ModelReader5Handler.PropertyElementHandler propertyhandler = new ModelReader5Handler.PropertyElementHandler();
  private ModelReader5Handler.LinkElementHandler linkhandler = new ModelReader5Handler.LinkElementHandler();
  private ModelReader5Handler.VisibleElementHandler visiblehandler = new ModelReader5Handler.VisibleElementHandler();
  private Stack<ModelReader5Handler.ElementHandler> myHandlersStack = new Stack<ModelReader5Handler.ElementHandler>();
  private Stack<ModelReader5Handler.ChildHandler> myChildHandlersStack = new Stack<ModelReader5Handler.ChildHandler>();
  private Stack<Object> myValues = new Stack<Object>();
  private Locator myLocator;
  private ModelLoadResult myResult;
  private SModelHeader fieldheader;
  private SModelVersionsInfo fieldversionsInfo;
  private ArrayList<IReferencePersister> fieldreferenceDescriptors;
  private SAXVisibleModelElements fieldvisibleModelElements;
  private DefaultSModel fieldmodel;

  public ModelReader5Handler(SModelHeader header) {
    fieldheader = header;
  }

  public ModelLoadResult getResult() {
    return myResult;
  }

  @Override
  public void setDocumentLocator(Locator locator) {
    myLocator = locator;
  }

  @Override
  public void characters(char[] array, int start, int len) throws SAXException {
    ModelReader5Handler.ElementHandler current = (myHandlersStack.empty() ?
      (ModelReader5Handler.ElementHandler) null :
      myHandlersStack.peek()
    );
    if (current != null) {
      current.handleText(myValues.peek(), new String(array, start, len));
    }
  }

  @Override
  public void endElement(String uri, String localName, String qName) throws SAXException {
    ModelReader5Handler.ElementHandler current = myHandlersStack.pop();
    Object childValue = myValues.pop();
    current.validate(childValue);
    if (myChildHandlersStack.empty()) {
      myResult = (ModelLoadResult) childValue;
    } else {
      ModelReader5Handler.ChildHandler ch = myChildHandlersStack.pop();
      if (ch != null) {
        ch.apply(myValues.peek(), childValue);
      }
    }
  }

  @Override
  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    ModelReader5Handler.ElementHandler current = (myHandlersStack.empty() ?
      (ModelReader5Handler.ElementHandler) null :
      myHandlersStack.peek()
    );
    if (current == null) {
      // root 
      current = modelhandler;
    } else {
      current = current.createChild(myValues.peek(), qName, attributes);
    }

    // check required 
    for (String attr : current.requiredAttributes()) {
      if (attributes.getValue(attr) == null) {
        throw new SAXParseException("attribute " + attr + " is absent", null);
      }
    }

    Object result = current.createObject(attributes);
    if (myHandlersStack.empty()) {
      myResult = (ModelLoadResult) result;
    }

    // handle attributes 
    for (int i = 0; i < attributes.getLength(); i++) {
      String name = attributes.getQName(i);
      String value = attributes.getValue(i);
      current.handleAttribute(result, name, value);
    }
    myHandlersStack.push(current);
    myValues.push(result);
  }

  private static interface ChildHandler {
    public void apply(Object resultObject, Object value) throws SAXException;
  }

  private class ElementHandler {
    private ElementHandler() {
    }

    protected Object createObject(Attributes attrs) throws SAXException {
      return null;
    }

    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
    }

    protected ModelReader5Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      throw new SAXParseException("unknown tag: " + tagName, null);
    }

    protected void handleText(Object resultObject, String value) throws SAXException {
      if (value.trim().length() == 0) {
        return;
      }
      throw new SAXParseException("text is not accepted: '" + value + "'", null);
    }

    protected String[] requiredAttributes() {
      return ModelReader5Handler.EMPTY_ARRAY;
    }

    protected void validate(Object resultObject) throws SAXException {
    }
  }

  public class ModelElementHandler extends ModelReader5Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"modelUID"};

    public ModelElementHandler() {
    }

    @Override
    protected ModelLoadResult createObject(Attributes attrs) throws SAXException {
      fieldversionsInfo = new SModelVersionsInfo();
      fieldreferenceDescriptors = new ArrayList<IReferencePersister>();
      fieldvisibleModelElements = new SAXVisibleModelElements();
      fieldmodel = new DefaultSModel(PersistenceFacade.getInstance().createModelReference(attrs.getValue("modelUID")));
      fieldmodel.setPersistenceVersion(5);
      fieldmodel.getSModelHeader().updateDefaults(fieldheader);
      return new ModelLoadResult(fieldmodel, ModelLoadingState.FULLY_LOADED);
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      ModelLoadResult result = (ModelLoadResult) resultObject;
      if ("modelUID".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }

    @Override
    protected ModelReader5Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("persistence".equals(tagName)) {
        myChildHandlersStack.push(null);
        return persistencehandler;
      }
      if ("languageAspect".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader5Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_2286463592495498109(resultObject, value);
          }
        });
        return languageAspecthandler;
      }
      if ("language".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader5Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_2286463592495498227(resultObject, value);
          }
        });
        return tag_with_namespacehandler;
      }
      if ("language-engaged-on-generation".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader5Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_2286463592495498259(resultObject, value);
          }
        });
        return tag_with_namespacehandler;
      }
      if ("devkit".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader5Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_2286463592495498276(resultObject, value);
          }
        });
        return tag_with_namespacehandler;
      }
      if ("import".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader5Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_2286463592495498335(resultObject, value);
          }
        });
        return importhandler;
      }
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader5Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_2286463592495515690(resultObject, value);
          }
        });
        return nodehandler;
      }
      if ("visible".equals(tagName)) {
        myChildHandlersStack.push(null);
        return visiblehandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }

    private void handleChild_2286463592495498109(Object resultObject, Object value) throws SAXException {
      String[] child = (String[]) value;
      int version = Integer.parseInt(child[1]);
      (fieldmodel).addAdditionalModelVersion(PersistenceFacade.getInstance().createModelReference(child[0]), version);
    }

    private void handleChild_2286463592495498227(Object resultObject, Object value) throws SAXException {
      String child = (String) value;
      (fieldmodel).addLanguage(ModuleReference.fromString(child));
    }

    private void handleChild_2286463592495498259(Object resultObject, Object value) throws SAXException {
      String child = (String) value;
      (fieldmodel).addEngagedOnGenerationLanguage(ModuleReference.fromString(child));
    }

    private void handleChild_2286463592495498276(Object resultObject, Object value) throws SAXException {
      String child = (String) value;
      (fieldmodel).addDevKit(ModuleReference.fromString(child));
    }

    private void handleChild_2286463592495498335(Object resultObject, Object value) throws SAXException {
      SModel.ImportElement child = (SModel.ImportElement) value;
      (fieldmodel).addModelImport(child);
    }

    private void handleChild_2286463592495515690(Object resultObject, Object value) throws SAXException {
      SNode child = (SNode) value;
      if (child != null) {
        fieldmodel.addRootNode(child);
      }
    }

    @Override
    protected void validate(Object resultObject) throws SAXException {
      if (!(validateInternal((ModelLoadResult) resultObject))) {
        throw new SAXParseException("missing tags", null);
      }
    }

    private boolean validateInternal(ModelLoadResult result) throws SAXException {
      for (IReferencePersister referencePersister : fieldreferenceDescriptors) {
        referencePersister.createReferenceInModel(fieldmodel, fieldvisibleModelElements);
      }
      return true;
    }
  }

  public class PersistenceElementHandler extends ModelReader5Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"version"};

    public PersistenceElementHandler() {
    }

    @Override
    protected Integer createObject(Attributes attrs) throws SAXException {
      return Integer.parseInt(attrs.getValue("version"));
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Integer result = (Integer) resultObject;
      if ("version".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class MaxImportIndexElementHandler extends ModelReader5Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"value"};

    public MaxImportIndexElementHandler() {
    }

    @Override
    protected Integer createObject(Attributes attrs) throws SAXException {
      return Integer.parseInt(attrs.getValue("value"));
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Integer result = (Integer) resultObject;
      if ("value".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class LanguageAspectElementHandler extends ModelReader5Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"modelUID", "version"};

    public LanguageAspectElementHandler() {
    }

    @Override
    protected String[] createObject(Attributes attrs) throws SAXException {
      return new String[]{attrs.getValue("modelUID"), attrs.getValue("version")};
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String[] result = (String[]) resultObject;
      if ("modelUID".equals(name)) {
        return;
      }
      if ("version".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class Tag_with_namespaceElementHandler extends ModelReader5Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"namespace"};

    public Tag_with_namespaceElementHandler() {
    }

    @Override
    protected String createObject(Attributes attrs) throws SAXException {
      return attrs.getValue("namespace");
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String result = (String) resultObject;
      if ("namespace".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class ImportElementHandler extends ModelReader5Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"index", "version", "modelUID"};

    public ImportElementHandler() {
    }

    @Override
    protected SModel.ImportElement createObject(Attributes attrs) throws SAXException {
      int indexValue = Integer.parseInt(attrs.getValue("index"));
      int versionValue = Integer.parseInt(attrs.getValue("version"));
      return new SModel.ImportElement(PersistenceFacade.getInstance().createModelReference(attrs.getValue("modelUID")), indexValue, versionValue);
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      SModel.ImportElement result = (SModel.ImportElement) resultObject;
      if ("index".equals(name)) {
        return;
      }
      if ("version".equals(name)) {
        return;
      }
      if ("modelUID".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class NodeElementHandler extends ModelReader5Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"type"};

    public NodeElementHandler() {
    }

    @Override
    protected SNode createObject(Attributes attrs) throws SAXException {
      String rawFqName = attrs.getValue("type");
      String conceptFQName = VersionUtil.getConceptFQName(rawFqName);
      SNode node = new jetbrains.mps.smodel.SNode(InternUtil.intern(conceptFQName));
      VersionUtil.fetchConceptVersion(rawFqName, node, fieldversionsInfo);
      return node;
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      SNode result = (SNode) resultObject;
      if ("type".equals(name)) {
        return;
      }
      if ("role".equals(name)) {
        result.putUserObject("role", VersionUtil.getRole(value));
        VersionUtil.fetchChildNodeRoleVersion(value, result, fieldversionsInfo);
        return;
      }
      if ("id".equals(name)) {
        SNodeId id = jetbrains.mps.smodel.SNodeId.fromString(value);
        if (id == null) {
          throw new SAXParseException("bad node ID", null);
        }
        ((jetbrains.mps.smodel.SNode) result).setId(id);
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }

    @Override
    protected ModelReader5Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("property".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader5Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7707758858786147473(resultObject, value);
          }
        });
        return propertyhandler;
      }
      if ("link".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader5Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_355506112072964454(resultObject, value);
          }
        });
        return linkhandler;
      }
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader5Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7707758858785937650(resultObject, value);
          }
        });
        return nodehandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }

    private void handleChild_7707758858786147473(Object resultObject, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      String[] child = (String[]) value;
      if (child[1] != null) {
        SNodeAccessUtil.setProperty(result, VersionUtil.getPropertyName(child[0], result, fieldversionsInfo), child[1]);
      }
    }

    private void handleChild_355506112072964454(Object resultObject, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      String[] child = (String[]) value;
      ReferencePersister4 rp = new ReferencePersister4();
      rp.fillFields(child[0], child[1], child[2], result, false, fieldversionsInfo);
      fieldreferenceDescriptors.add(rp);
    }

    private void handleChild_7707758858785937650(Object resultObject, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      SNode child = (SNode) value;
      result.addChild(((String) child.getUserObject("role")), child);
      child.putUserObject("role", null);
    }
  }

  public class PropertyElementHandler extends ModelReader5Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"name"};

    public PropertyElementHandler() {
    }

    @Override
    protected String[] createObject(Attributes attrs) throws SAXException {
      return new String[]{attrs.getValue("name"), null};
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String[] result = (String[]) resultObject;
      if ("name".equals(name)) {
        return;
      }
      if ("value".equals(name)) {
        result[1] = value;
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class LinkElementHandler extends ModelReader5Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};

    public LinkElementHandler() {
    }

    @Override
    protected String[] createObject(Attributes attrs) throws SAXException {
      return new String[]{null, null, null};
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String[] result = (String[]) resultObject;
      if ("role".equals(name)) {
        result[0] = value;
        return;
      }
      if ("resolveInfo".equals(name)) {
        result[1] = value;
        return;
      }
      if ("targetNodeId".equals(name)) {
        result[2] = value;
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class VisibleElementHandler extends ModelReader5Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"index", "modelUID"};

    public VisibleElementHandler() {
    }

    @Override
    protected Object createObject(Attributes attrs) throws SAXException {
      fieldvisibleModelElements.addVisible(Integer.parseInt(attrs.getValue("index")), attrs.getValue("modelUID"));
      return null;
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Object result = (Object) resultObject;
      if ("index".equals(name)) {
        return;
      }
      if ("modelUID".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
}
