package jetbrains.mps.smodel.persistence.def.v9;

/*Generated by MPS */

import jetbrains.mps.util.xml.XMLSAXHandler;
import java.util.List;
import jetbrains.mps.smodel.persistence.lines.LineContent;
import java.util.Stack;
import org.xml.sax.Locator;
import jetbrains.mps.smodel.persistence.def.v5.LineContentAccumulator;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.DebugRegistry;

public class AnnotationInfoReader9Handler extends XMLSAXHandler<List<LineContent>> {
  private AnnotationInfoReader9Handler.ModelElementHandler modelHandler = new AnnotationInfoReader9Handler.ModelElementHandler();
  private AnnotationInfoReader9Handler.LanguagesElementHandler languagesHandler = new AnnotationInfoReader9Handler.LanguagesElementHandler();
  private AnnotationInfoReader9Handler.Used_languageElementHandler used_languageHandler = new AnnotationInfoReader9Handler.Used_languageElementHandler();
  private AnnotationInfoReader9Handler.ContentsElementHandler contentsHandler = new AnnotationInfoReader9Handler.ContentsElementHandler();
  private AnnotationInfoReader9Handler.NodeElementHandler nodeHandler = new AnnotationInfoReader9Handler.NodeElementHandler();
  private AnnotationInfoReader9Handler.PropertyElementHandler propertyHandler = new AnnotationInfoReader9Handler.PropertyElementHandler();
  private AnnotationInfoReader9Handler.ReferenceElementHandler referenceHandler = new AnnotationInfoReader9Handler.ReferenceElementHandler();
  private AnnotationInfoReader9Handler.DefaultElementHandler defaultHandler = new AnnotationInfoReader9Handler.DefaultElementHandler();
  private Stack<AnnotationInfoReader9Handler.ElementHandler> myHandlersStack = new Stack<AnnotationInfoReader9Handler.ElementHandler>();
  private Stack<AnnotationInfoReader9Handler.ChildHandler> myChildHandlersStack = new Stack<AnnotationInfoReader9Handler.ChildHandler>();
  private Stack<Object> myValues = new Stack<Object>();
  private Locator myLocator;
  private List<LineContent> myResult;
  private LineContentAccumulator my_accumulatorField;
  private ReadHelper9 my_helperField;
  public AnnotationInfoReader9Handler() {
  }
  public List<LineContent> getResult() {
    return myResult;
  }
  @Override
  public void setDocumentLocator(Locator locator) {
    myLocator = locator;
  }
  @Override
  public void characters(char[] array, int start, int len) throws SAXException {
    globalHandleText(myValues.firstElement(), new String(array, start, len));
    AnnotationInfoReader9Handler.ElementHandler current = (myHandlersStack.empty() ? (AnnotationInfoReader9Handler.ElementHandler) null : myHandlersStack.peek());
    if (current != null) {
      current.handleText(myValues.peek(), new String(array, start, len));
    }
  }
  @Override
  public void endElement(String uri, String localName, String qName) throws SAXException {
    AnnotationInfoReader9Handler.ElementHandler current = myHandlersStack.pop();
    Object childValue = myValues.pop();
    current.validate(childValue);
    if (myChildHandlersStack.empty()) {
      myResult = (List<LineContent>) childValue;
    } else {
      AnnotationInfoReader9Handler.ChildHandler ch = myChildHandlersStack.pop();
      if (ch != null) {
        ch.apply(myValues.peek(), childValue);
      }
    }
  }
  @Override
  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    AnnotationInfoReader9Handler.ElementHandler current = (myHandlersStack.empty() ? (AnnotationInfoReader9Handler.ElementHandler) null : myHandlersStack.peek());
    if (current == null) {
      // root 
      current = modelHandler;
    } else {
      current = current.createChild(myValues.peek(), qName, attributes);
    }

    // check required 
    for (String attr : current.requiredAttributes()) {
      if (attributes.getValue(attr) == null) {
        throw new SAXParseException("attribute " + attr + " is absent", null);
      }
    }

    Object result = current.createObject(attributes);
    if (myHandlersStack.empty()) {
      myResult = (List<LineContent>) result;
    }

    // handle attributes 
    for (int i = 0; i < attributes.getLength(); i++) {
      String name = attributes.getQName(i);
      String value = attributes.getValue(i);
      current.handleAttribute(result, name, value);
    }
    myHandlersStack.push(current);
    myValues.push(result);
  }
  public void globalHandleText(Object resultObject, String value) {
    List<LineContent> result = (List<LineContent>) resultObject;
    my_accumulatorField.processText(value, myLocator);
  }
  private static interface ChildHandler {
    public void apply(Object resultObject, Object value) throws SAXException;
  }
  private class ElementHandler {
    private String[] requiredAttributes = new String[0];

    private ElementHandler() {
    }
    protected Object createObject(Attributes attrs) throws SAXException {
      return null;
    }
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
    }
    protected AnnotationInfoReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      throw new SAXParseException("unknown tag: " + tagName, null);
    }
    protected void handleText(Object resultObject, String value) throws SAXException {
      if (value.trim().length() == 0) {
        return;
      }
      throw new SAXParseException("text is not accepted: '" + value + "'", null);
    }
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    protected void setRequiredAttributes(String... required) {
      requiredAttributes = required;
    }
    protected void validate(Object resultObject) throws SAXException {
    }
  }
  public class ModelElementHandler extends AnnotationInfoReader9Handler.ElementHandler {
    public ModelElementHandler() {
      setRequiredAttributes("ref");
    }
    @Override
    protected List<LineContent> createObject(Attributes attrs) throws SAXException {
      my_accumulatorField = new LineContentAccumulator();
      SModelReference ref = PersistenceFacade.getInstance().createModelReference(attrs.getValue("ref"));
      my_helperField = new ReadHelper9(ref);
      return my_accumulatorField.getLineToContentMap();
    }
    @Override
    protected AnnotationInfoReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("contents".equals(tagName)) {
        myChildHandlersStack.push(null);
        return contentsHandler;
      }
      if ("languages".equals(tagName)) {
        myChildHandlersStack.push(null);
        return languagesHandler;
      }
      myChildHandlersStack.push(null);
      return defaultHandler;
    }
  }
  public class LanguagesElementHandler extends AnnotationInfoReader9Handler.ElementHandler {
    public LanguagesElementHandler() {
    }
    @Override
    protected AnnotationInfoReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("use".equals(tagName)) {
        myChildHandlersStack.push(new AnnotationInfoReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_8634114485976612315(resultObject, value);
          }
        });
        return used_languageHandler;
      }
      myChildHandlersStack.push(null);
      return defaultHandler;
    }
    private void handleChild_8634114485976612315(Object resultObject, Object value) throws SAXException {
      Tuples._2<SLanguageId, String> child = (Tuples._2<SLanguageId, String>) value;
      my_helperField.registerLanguage(child._1(), child._0());
    }
  }
  public class Used_languageElementHandler extends AnnotationInfoReader9Handler.ElementHandler {
    public Used_languageElementHandler() {
      setRequiredAttributes("id", "index");
    }
    @Override
    protected Tuples._2<SLanguageId, String> createObject(Attributes attrs) throws SAXException {
      return MultiTuple.<SLanguageId,String>from(SLanguageId.deserialize(attrs.getValue("id")), attrs.getValue("index"));
    }
  }
  public class ContentsElementHandler extends AnnotationInfoReader9Handler.ElementHandler {
    public ContentsElementHandler() {
    }
    @Override
    protected AnnotationInfoReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(new AnnotationInfoReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708891016(resultObject, value);
          }
        });
        return nodeHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_7167172773708891016(Object resultObject, Object value) throws SAXException {
      Void child = (Void) value;
      my_accumulatorField.popNode(myLocator);
    }
  }
  public class NodeElementHandler extends AnnotationInfoReader9Handler.ElementHandler {
    public NodeElementHandler() {
      setRequiredAttributes("id");
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Void result = (Void) resultObject;
      if ("id".equals(name)) {
        my_accumulatorField.pushNode(SNodeId.fromString(value), myLocator);
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
    @Override
    protected AnnotationInfoReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("property".equals(tagName)) {
        myChildHandlersStack.push(new AnnotationInfoReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708891038(resultObject, value);
          }
        });
        return propertyHandler;
      }
      if ("reference".equals(tagName)) {
        myChildHandlersStack.push(new AnnotationInfoReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708891052(resultObject, value);
          }
        });
        return referenceHandler;
      }
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(new AnnotationInfoReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708891066(resultObject, value);
          }
        });
        return nodeHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_7167172773708891038(Object resultObject, Object value) throws SAXException {
      String child = (String) value;
      if (child != null) {
        my_accumulatorField.saveProperty(child, myLocator);
      }
    }
    private void handleChild_7167172773708891052(Object resultObject, Object value) throws SAXException {
      String child = (String) value;
      if (child != null) {
        my_accumulatorField.saveReference(child, myLocator);
      }
    }
    private void handleChild_7167172773708891066(Object resultObject, Object value) throws SAXException {
      Void child = (Void) value;
      my_accumulatorField.popNode(myLocator);
    }
  }
  public class PropertyElementHandler extends AnnotationInfoReader9Handler.ElementHandler {
    public PropertyElementHandler() {
      setRequiredAttributes("role");
    }
    @Override
    protected String createObject(Attributes attrs) throws SAXException {
      return DebugRegistry.getInstance().getPropertyName(my_helperField.readPropId(attrs.getValue("role")));
    }
  }
  public class ReferenceElementHandler extends AnnotationInfoReader9Handler.ElementHandler {
    public ReferenceElementHandler() {
      setRequiredAttributes("role");
    }
    @Override
    protected String createObject(Attributes attrs) throws SAXException {
      DebugRegistry.getInstance().getRefName(my_helperField.readRefRole(attrs.getValue("role")));
      return attrs.getValue("role");
    }
  }
  public class DefaultElementHandler extends AnnotationInfoReader9Handler.ElementHandler {
    @Override
    protected AnnotationInfoReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      return this;
    }
    @Override
    protected void handleText(Object resultObject, String value) throws SAXException {
    }
  }
}
