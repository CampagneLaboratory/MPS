package jetbrains.mps.smodel.persistence.def.v9.migrations;

/*Generated by MPS */

import jetbrains.mps.migration.global.BaseProjectMigration;
import jetbrains.mps.project.Project;
import jetbrains.mps.smodel.SModelReference;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.List;
import org.jetbrains.mps.openapi.model.EditableSModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ModelRefMigration extends BaseProjectMigration {
  private static final String ID = "jetbrains.mps.modelRef";

  public ModelRefMigration() {
    super(ID);
  }
  @Override
  public String getDescription() {
    return "Add module to every model reference";
  }
  @Override
  public boolean doShouldBeExecuted(Project p) {
    return true;
  }
  public boolean doExecute(Project project) {
    saveAll(project);
    SModelReference.replaceModuleReferences = true;
    saveAll(project);
    SModelReference.replaceModuleReferences = false;
    return true;
  }
  private void saveAll(Project p) {
    Iterable<? extends SModule> modules = p.getModulesWithGenerators();
    List<EditableSModel> allModels = Sequence.fromIterable(modules).translate(new ITranslator2<SModule, SModel>() {
      public Iterable<SModel> translate(SModule it) {
        return it.getModels();
      }
    }).ofType(EditableSModel.class).where(new IWhereFilter<EditableSModel>() {
      public boolean accept(EditableSModel it) {
        return SModelStereotype.isUserModel(it);
      }
    }).toListSequence();

    for (Language language : Sequence.fromIterable(modules).ofType(Language.class)) {
      for (Generator generator : CollectionSequence.fromCollection(language.getGenerators())) {
        generator.updateModuleReferences();
      }
      language.updateSModelReferences();
      language.save();
    }

    for (EditableSModel model : ListSequence.fromList(allModels)) {
      if (model.isReadOnly()) {
        continue;
      }
      try {
        // ensure model is loaded 
        model.load();
        //  and force to save model 
        model.setChanged(true);
        if (model.isChanged()) {
          model.save();
        }
      } catch (Exception ex) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Error re-saving model " + model.getModelName(), ex);
        }
      }
    }
  }
  protected static Logger LOG = LogManager.getLogger(ModelRefMigration.class);
}
