package jetbrains.mps.smodel.persistence.def.v9;

/*Generated by MPS */

import jetbrains.mps.util.xml.XMLSAXHandler;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import java.util.Stack;

import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.xml.sax.Locator;
import jetbrains.mps.smodel.SModelHeader;
import jetbrains.mps.smodel.DefaultSModel;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;
import jetbrains.mps.smodel.InterfaceSNode;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.StaticReference;
import jetbrains.mps.util.Pair;

public class ModelReader9Handler extends XMLSAXHandler<ModelLoadResult> {
  private static String[] EMPTY_ARRAY = new String[0];
  private ModelReader9Handler.ModelElementHandler modelhandler = new ModelReader9Handler.ModelElementHandler();
  private ModelReader9Handler.PersistenceElementHandler persistencehandler = new ModelReader9Handler.PersistenceElementHandler();
  private ModelReader9Handler.DebugInfoElementHandler debugInfohandler = new ModelReader9Handler.DebugInfoElementHandler();
  private ModelReader9Handler.Debug_languageElementHandler debug_languagehandler = new ModelReader9Handler.Debug_languageElementHandler();
  private ModelReader9Handler.Debug_modelElementHandler debug_modelhandler = new ModelReader9Handler.Debug_modelElementHandler();
  private ModelReader9Handler.Debug_conceptElementHandler debug_concepthandler = new ModelReader9Handler.Debug_conceptElementHandler();
  private ModelReader9Handler.Debug_propertyElementHandler debug_propertyhandler = new ModelReader9Handler.Debug_propertyElementHandler();
  private ModelReader9Handler.Debug_ref_roleElementHandler debug_ref_rolehandler = new ModelReader9Handler.Debug_ref_roleElementHandler();
  private ModelReader9Handler.Debug_child_roleElementHandler debug_child_rolehandler = new ModelReader9Handler.Debug_child_roleElementHandler();
  private ModelReader9Handler.LanguagesElementHandler languageshandler = new ModelReader9Handler.LanguagesElementHandler();
  private ModelReader9Handler.Used_languageElementHandler used_languagehandler = new ModelReader9Handler.Used_languageElementHandler();
  private ModelReader9Handler.Module_referenceElementHandler module_referencehandler = new ModelReader9Handler.Module_referenceElementHandler();
  private ModelReader9Handler.ImportsElementHandler importshandler = new ModelReader9Handler.ImportsElementHandler();
  private ModelReader9Handler.Model_importElementHandler model_importhandler = new ModelReader9Handler.Model_importElementHandler();
  private ModelReader9Handler.ContentsElementHandler contentshandler = new ModelReader9Handler.ContentsElementHandler();
  private ModelReader9Handler.NodeElementHandler nodehandler = new ModelReader9Handler.NodeElementHandler();
  private ModelReader9Handler.PropertyElementHandler propertyhandler = new ModelReader9Handler.PropertyElementHandler();
  private ModelReader9Handler.ReferenceElementHandler referencehandler = new ModelReader9Handler.ReferenceElementHandler();
  private ModelReader9Handler.IgnoredNodeElementHandler ignoredNodehandler = new ModelReader9Handler.IgnoredNodeElementHandler();
  private ModelReader9Handler.IgnoredPropertyElementHandler ignoredPropertyhandler = new ModelReader9Handler.IgnoredPropertyElementHandler();
  private ModelReader9Handler.IgnoredReferenceElementHandler ignoredReferencehandler = new ModelReader9Handler.IgnoredReferenceElementHandler();
  private Stack<ModelReader9Handler.ElementHandler> myHandlersStack = new Stack<ModelReader9Handler.ElementHandler>();
  private Stack<ModelReader9Handler.ChildHandler> myChildHandlersStack = new Stack<ModelReader9Handler.ChildHandler>();
  private Stack<Object> myValues = new Stack<Object>();
  private Locator myLocator;
  private ModelLoadResult myResult;
  private boolean fieldinterfaceOnly;
  private boolean fieldstripImplementation;
  private SModelHeader fieldheader;
  private DefaultSModel fieldmodel;
  private ReadHelper9 fieldhelper;
  public ModelReader9Handler(boolean interfaceOnly, boolean stripImplementation, SModelHeader header) {
    fieldinterfaceOnly = interfaceOnly;
    fieldstripImplementation = stripImplementation;
    fieldheader = header;
  }
  public ModelLoadResult getResult() {
    return myResult;
  }
  @Override
  public void setDocumentLocator(Locator locator) {
    myLocator = locator;
  }
  @Override
  public void characters(char[] array, int start, int len) throws SAXException {
    ModelReader9Handler.ElementHandler current = (myHandlersStack.empty() ? (ModelReader9Handler.ElementHandler) null : myHandlersStack.peek());
    if (current != null) {
      current.handleText(myValues.peek(), new String(array, start, len));
    }
  }
  @Override
  public void endElement(String uri, String localName, String qName) throws SAXException {
    ModelReader9Handler.ElementHandler current = myHandlersStack.pop();
    Object childValue = myValues.pop();
    current.validate(childValue);
    if (myChildHandlersStack.empty()) {
      myResult = (ModelLoadResult) childValue;
    } else {
      ModelReader9Handler.ChildHandler ch = myChildHandlersStack.pop();
      if (ch != null) {
        ch.apply(myValues.peek(), childValue);
      }
    }
  }
  @Override
  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    ModelReader9Handler.ElementHandler current = (myHandlersStack.empty() ? (ModelReader9Handler.ElementHandler) null : myHandlersStack.peek());
    if (current == null) {
      // root 
      current = modelhandler;
    } else {
      current = current.createChild(myValues.peek(), qName, attributes);
    }

    // check required 
    for (String attr : current.requiredAttributes()) {
      if (attributes.getValue(attr) == null) {
        throw new SAXParseException("attribute " + attr + " is absent", null);
      }
    }

    Object result = current.createObject(attributes);
    if (myHandlersStack.empty()) {
      myResult = (ModelLoadResult) result;
    }

    // handle attributes 
    for (int i = 0; i < attributes.getLength(); i++) {
      String name = attributes.getQName(i);
      String value = attributes.getValue(i);
      current.handleAttribute(result, name, value);
    }
    myHandlersStack.push(current);
    myValues.push(result);
  }
  private static interface ChildHandler {
    public void apply(Object resultObject, Object value) throws SAXException;
  }
  private class ElementHandler {
    private ElementHandler() {
    }
    protected Object createObject(Attributes attrs) throws SAXException {
      return null;
    }
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
    }
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      throw new SAXParseException("unknown tag: " + tagName, null);
    }
    protected void handleText(Object resultObject, String value) throws SAXException {
      if (value.trim().length() == 0) {
        return;
      }
      throw new SAXParseException("text is not accepted: '" + value + "'", null);
    }
    protected String[] requiredAttributes() {
      return ModelReader9Handler.EMPTY_ARRAY;
    }
    protected void validate(Object resultObject) throws SAXException {
    }
  }
  public class ModelElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"ref"};
    public ModelElementHandler() {
    }
    @Override
    protected ModelLoadResult createObject(Attributes attrs) throws SAXException {
      SModelReference ref = PersistenceFacade.getInstance().createModelReference(attrs.getValue("ref"));
      fieldmodel = new DefaultSModel(ref);
      fieldmodel.setPersistenceVersion(9);
      fieldhelper = new ReadHelper9(fieldmodel.getReference());
      ModelLoadResult result = new ModelLoadResult(fieldmodel, ModelLoadingState.NOT_LOADED);
      result.setState((fieldinterfaceOnly ? ModelLoadingState.INTERFACE_LOADED : ModelLoadingState.NO_IMPLEMENTATION));
      return result;
    }
    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      ModelLoadResult result = (ModelLoadResult) resultObject;
      if ("ref".equals(name)) {
        return;
      }
      if ("doNotGenerate".equals(name)) {
        fieldmodel.getSModelHeader().setDoNotGenerate(Boolean.parseBoolean(value));
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("persistence".equals(tagName)) {
        myChildHandlersStack.push(null);
        return persistencehandler;
      }
      if ("debugInfo".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debugInfohandler;
      }
      if ("languages".equals(tagName)) {
        myChildHandlersStack.push(null);
        return languageshandler;
      }
      if ("imports".equals(tagName)) {
        myChildHandlersStack.push(null);
        return importshandler;
      }
      if ("contents".equals(tagName)) {
        myChildHandlersStack.push(null);
        return contentshandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
  }
  public class PersistenceElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};
    public PersistenceElementHandler() {
    }
  }
  public class DebugInfoElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};
    public DebugInfoElementHandler() {
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("lang".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debug_languagehandler;
      }
      if ("model".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debug_modelhandler;
      }
      if ("concept".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debug_concepthandler;
      }
      if ("property".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debug_propertyhandler;
      }
      if ("refRole".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debug_ref_rolehandler;
      }
      if ("childRole".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debug_child_rolehandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
  }
  public class Debug_languageElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"id", "name"};
    public Debug_languageElementHandler() {
    }
    @Override
    protected Object createObject(Attributes attrs) throws SAXException {
      MPSModuleRepository.getInstance().getDebugRegistry().addLanguageName(SLanguage.deserialize(attrs.getValue("id")), attrs.getValue("name"));
      return null;
    }
    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Object result = (Object) resultObject;
      if ("id".equals(name)) {
        return;
      }
      if ("name".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class Debug_modelElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"ref", "name"};
    public Debug_modelElementHandler() {
    }
    @Override
    protected Object createObject(Attributes attrs) throws SAXException {
      MPSModuleRepository.getInstance().getDebugRegistry().addModelName(jetbrains.mps.smodel.SModelReference.parseReference(attrs.getValue("ref")), attrs.getValue("name"));
      return null;
    }
    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Object result = (Object) resultObject;
      if ("ref".equals(name)) {
        return;
      }
      if ("name".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class Debug_conceptElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"id", "name"};
    public Debug_conceptElementHandler() {
    }
    @Override
    protected Object createObject(Attributes attrs) throws SAXException {
      MPSModuleRepository.getInstance().getDebugRegistry().addConceptName(SConcept.deserialize(attrs.getValue("id")), attrs.getValue("name"));
      return null;
    }
    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Object result = (Object) resultObject;
      if ("id".equals(name)) {
        return;
      }
      if ("name".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class Debug_propertyElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"id", "name"};
    public Debug_propertyElementHandler() {
    }
    @Override
    protected Object createObject(Attributes attrs) throws SAXException {
      MPSModuleRepository.getInstance().getDebugRegistry().addPropertyName(SProperty.deserialize(attrs.getValue("id")), attrs.getValue("name"));
      return null;
    }
    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Object result = (Object) resultObject;
      if ("id".equals(name)) {
        return;
      }
      if ("name".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class Debug_ref_roleElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"id", "name"};
    public Debug_ref_roleElementHandler() {
    }
    @Override
    protected Object createObject(Attributes attrs) throws SAXException {
      MPSModuleRepository.getInstance().getDebugRegistry().addLinkName(SReferenceLink.deserialize(attrs.getValue("id")), attrs.getValue("name"));
      return null;
    }
    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Object result = (Object) resultObject;
      if ("id".equals(name)) {
        return;
      }
      if ("name".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class Debug_child_roleElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"id", "name"};
    public Debug_child_roleElementHandler() {
    }
    @Override
    protected Object createObject(Attributes attrs) throws SAXException {
      MPSModuleRepository.getInstance().getDebugRegistry().addLinkName(SContainmentLink.deserialize(attrs.getValue("id")), attrs.getValue("name"));
      return null;
    }
    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Object result = (Object) resultObject;
      if ("id".equals(name)) {
        return;
      }
      if ("name".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class LanguagesElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};
    public LanguagesElementHandler() {
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("use".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890285(resultObject, value);
          }
        });
        return used_languagehandler;
      }
      if ("generationPart".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890293(resultObject, value);
          }
        });
        return module_referencehandler;
      }
      if ("devkit".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890301(resultObject, value);
          }
        });
        return module_referencehandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_7167172773708890285(Object resultObject, Object value) throws SAXException {
      Tuples._4<SLanguage, String, Integer, Boolean> child = (Tuples._4<SLanguage, String, Integer, Boolean>) value;
      if ((boolean) child._3()) {
        fieldhelper.addImplicitlyUsedLanguage(fieldmodel, child._1(), child._0(), (int) child._2());
      } else {
        fieldhelper.addUsedLanguage(fieldmodel, child._1(), child._0(), (int) child._2());
      }
    }
    private void handleChild_7167172773708890293(Object resultObject, Object value) throws SAXException {
      SModuleReference child = (SModuleReference) value;
      fieldmodel.addEngagedOnGenerationLanguage(child);
    }
    private void handleChild_7167172773708890301(Object resultObject, Object value) throws SAXException {
      SModuleReference child = (SModuleReference) value;
      fieldmodel.addDevKit(child);
    }
  }
  public class Used_languageElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"id", "index", "version"};
    public Used_languageElementHandler() {
    }
    @Override
    protected Tuples._4<SLanguage, String, Integer, Boolean> createObject(Attributes attrs) throws SAXException {
      return MultiTuple.<SLanguage,String,Integer,Boolean>from(SLanguage.deserialize(attrs.getValue("id")), attrs.getValue("index"), Integer.parseInt(attrs.getValue("version")), Boolean.parseBoolean(attrs.getValue("implicit")));
    }
    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Tuples._4<SLanguage, String, Integer, Boolean> result = (Tuples._4<SLanguage, String, Integer, Boolean>) resultObject;
      if ("id".equals(name)) {
        return;
      }
      if ("index".equals(name)) {
        return;
      }
      if ("version".equals(name)) {
        return;
      }
      if ("implicit".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class Module_referenceElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"ref"};
    public Module_referenceElementHandler() {
    }
    @Override
    protected SModuleReference createObject(Attributes attrs) throws SAXException {
      return PersistenceFacade.getInstance().createModuleReference(attrs.getValue("ref"));
    }
    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      SModuleReference result = (SModuleReference) resultObject;
      if ("ref".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class ImportsElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};
    public ImportsElementHandler() {
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("import".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890309(resultObject, value);
          }
        });
        return model_importhandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_7167172773708890309(Object resultObject, Object value) throws SAXException {
      Tuples._3<String, SModelReference, Boolean> child = (Tuples._3<String, SModelReference, Boolean>) value;
      fieldhelper.addImportToModel(fieldmodel, child._0(), child._1(), (boolean) child._2());
    }
  }
  public class Model_importElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"index", "ref"};
    public Model_importElementHandler() {
    }
    @Override
    protected Tuples._3<String, SModelReference, Boolean> createObject(Attributes attrs) throws SAXException {
      return MultiTuple.<String,SModelReference,Boolean>from(attrs.getValue("index"), PersistenceFacade.getInstance().createModelReference(attrs.getValue("ref")), attrs.getValue("implicit") != null);
    }
    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Tuples._3<String, SModelReference, Boolean> result = (Tuples._3<String, SModelReference, Boolean>) resultObject;
      if ("index".equals(name)) {
        return;
      }
      if ("ref".equals(name)) {
        return;
      }
      if ("implicit".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class ContentsElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};
    public ContentsElementHandler() {
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("node".equals(tagName) && checknode_7167172773708890351(resultObject, attrs)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890339(resultObject, value);
          }
        });
        return nodehandler;
      }
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890362(resultObject, value);
          }
        });
        return ignoredNodehandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private boolean checknode_7167172773708890351(Object resultObject, Attributes attrs) {
      return !(fieldstripImplementation && fieldhelper.isImplementationNode(attrs.getValue("info")));
    }
    private void handleChild_7167172773708890339(Object resultObject, Object value) throws SAXException {
      Tuples._2<SNode, SContainmentLink> child = (Tuples._2<SNode, SContainmentLink>) value;
      fieldmodel.addRootNode(child._0());
    }
    private void handleChild_7167172773708890362(Object resultObject, Object value) throws SAXException {
      Tuples._3<SContainmentLink, SConcept, String> child = (Tuples._3<SContainmentLink, SConcept, String>) value;
      if (fieldhelper.isImplementationWithStubNode(child._2())) {
        SConcept stubConcept = fieldhelper.getStubConcept(child._1());
        if (stubConcept != null) {
          fieldmodel.addRootNode(new jetbrains.mps.smodel.SNode(stubConcept));
        }
      }
    }
  }
  public class NodeElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"concept", "info"};
    public NodeElementHandler() {
    }
    @Override
    protected Tuples._2<SNode, SContainmentLink> createObject(Attributes attrs) throws SAXException {
      Tuples._3<ConceptKind, StaticScope, Boolean> parsed = fieldhelper.readNodeInfo(attrs.getValue("info"));
      if (parsed == null) {
        throw new SAXParseException("bad typeInfo attribute", null);
      }
      boolean interfaceNode = false;
      if (fieldinterfaceOnly) {
        interfaceNode = (parsed._0() == ConceptKind.INTERFACE || attrs.getValue("role") == null);
      }
      SConcept conceptId = fieldhelper.readConceptId(attrs.getValue("concept"));
      jetbrains.mps.smodel.SNode result = (interfaceNode ? new InterfaceSNode(conceptId) : new jetbrains.mps.smodel.SNode(conceptId));
      result.setId(SNodeId.fromString(attrs.getValue("id")));
      // can be root 
      return MultiTuple.<SNode,SContainmentLink>from(((SNode) result), (attrs.getValue("role") == null ? null : fieldhelper.readNodeRole(attrs.getValue("role"))));
    }
    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Tuples._2<SNode, SContainmentLink> result = (Tuples._2<SNode, SContainmentLink>) resultObject;
      if ("concept".equals(name)) {
        return;
      }
      if ("id".equals(name)) {
        return;
      }
      if ("role".equals(name)) {
        return;
      }
      if ("info".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("property".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890516(resultObject, value);
          }
        });
        return propertyhandler;
      }
      if ("reference".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890553(resultObject, value);
          }
        });
        return referencehandler;
      }
      if ("node".equals(tagName) && checknode_7167172773708890671(resultObject, attrs)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890646(resultObject, value);
          }
        });
        return nodehandler;
      }
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890694(resultObject, value);
          }
        });
        return ignoredNodehandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private boolean checknode_7167172773708890671(Object resultObject, Attributes attrs) {
      Tuples._2<SNode, SContainmentLink> result = (Tuples._2<SNode, SContainmentLink>) resultObject;
      if (fieldstripImplementation && fieldhelper.isImplementationNode(attrs.getValue("info"))) {
        return false;
      }
      return !(result._0() instanceof InterfaceSNode) || fieldhelper.isInterfaceNode(attrs.getValue("info"));
    }
    private void handleChild_7167172773708890516(Object resultObject, Object value) throws SAXException {
      Tuples._2<SNode, SContainmentLink> result = (Tuples._2<SNode, SContainmentLink>) resultObject;
      Tuples._2<SProperty, String> child = (Tuples._2<SProperty, String>) value;
      result._0().setProperty(child._0(), child._1());
    }
    private void handleChild_7167172773708890553(Object resultObject, Object value) throws SAXException {
      Tuples._2<SNode, SContainmentLink> result = (Tuples._2<SNode, SContainmentLink>) resultObject;
      Tuples._4<SReferenceLink, SNodePointer, Boolean, String> child = (Tuples._4<SReferenceLink, SNodePointer, Boolean, String>) value;
      SNodePointer target = child._1();
      StaticReference ref = new StaticReference(child._0(), result._0(), target.getModelReference(), target.getNodeId(), child._3());
      result._0().setReference(child._0(), ref);
    }
    private void handleChild_7167172773708890646(Object resultObject, Object value) throws SAXException {
      Tuples._2<SNode, SContainmentLink> result = (Tuples._2<SNode, SContainmentLink>) resultObject;
      Tuples._2<SNode, SContainmentLink> child = (Tuples._2<SNode, SContainmentLink>) value;
      if (child != null) {
        result._0().addChild(child._1(), child._0());
      }
    }
    private void handleChild_7167172773708890694(Object resultObject, Object value) throws SAXException {
      Tuples._2<SNode, SContainmentLink> result = (Tuples._2<SNode, SContainmentLink>) resultObject;
      Tuples._3<SContainmentLink, SConcept, String> child = (Tuples._3<SContainmentLink, SConcept, String>) value;
      if (fieldstripImplementation && fieldhelper.isImplementationWithStubNode(child._2())) {
        SConcept stubConcept = fieldhelper.getStubConcept(child._1());
        if (stubConcept != null) {
          jetbrains.mps.smodel.SNode childNode = new jetbrains.mps.smodel.SNode(stubConcept);
          result._0().addChild(child._0(), childNode);
          return;
        }
      }
      if (result._0() instanceof InterfaceSNode) {
        ((InterfaceSNode) result._0()).skipRole(child._0());
      }
    }
  }
  public class PropertyElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"role"};
    public PropertyElementHandler() {
    }
    @Override
    protected Tuples._2<SProperty, String> createObject(Attributes attrs) throws SAXException {
      return MultiTuple.<SProperty,String>from(fieldhelper.readPropId(attrs.getValue("role")), attrs.getValue("value"));
    }
    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Tuples._2<SProperty, String> result = (Tuples._2<SProperty, String>) resultObject;
      if ("role".equals(name)) {
        return;
      }
      if ("value".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class ReferenceElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"role", "target"};
    public ReferenceElementHandler() {
    }
    @Override
    protected Tuples._4<SReferenceLink, SNodePointer, Boolean, String> createObject(Attributes attrs) throws SAXException {
      Pair<Boolean, SNodePointer> linkInfo = fieldhelper.readLink(attrs.getValue("target"));
      return MultiTuple.<SReferenceLink,SNodePointer,Boolean,String>from(fieldhelper.readRefRole(attrs.getValue("role")), linkInfo.o2, linkInfo.o1, attrs.getValue("resolveInfo"));
    }
    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Tuples._4<SReferenceLink, SNodePointer, Boolean, String> result = (Tuples._4<SReferenceLink, SNodePointer, Boolean, String>) resultObject;
      if ("role".equals(name)) {
        return;
      }
      if ("target".equals(name)) {
        return;
      }
      if ("resolveInfo".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class IgnoredNodeElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};
    public IgnoredNodeElementHandler() {
    }
    @Override
    protected Tuples._3<SContainmentLink, SConcept, String> createObject(Attributes attrs) throws SAXException {
      return MultiTuple.<SContainmentLink,SConcept,String>from(fieldhelper.readNodeRole(attrs.getValue("role")), fieldhelper.readConceptId(attrs.getValue("concept")), attrs.getValue("info"));
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Tuples._3<SContainmentLink, SConcept, String> result = (Tuples._3<SContainmentLink, SConcept, String>) resultObject;
      if ("concept".equals(name)) {
        return;
      }
      if ("info".equals(name)) {
        return;
      }
      if ("role".equals(name)) {
        return;
      }
      if ("id".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("property".equals(tagName)) {
        myChildHandlersStack.push(null);
        return ignoredPropertyhandler;
      }
      if ("reference".equals(tagName)) {
        myChildHandlersStack.push(null);
        return ignoredReferencehandler;
      }
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(null);
        return ignoredNodehandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
  }
  public class IgnoredPropertyElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};
    public IgnoredPropertyElementHandler() {
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      if ("id".equals(name)) {
        return;
      }
      if ("value".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
  public class IgnoredReferenceElementHandler extends ModelReader9Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};
    public IgnoredReferenceElementHandler() {
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      if ("id".equals(name)) {
        return;
      }
      if ("targetId".equals(name)) {
        return;
      }
      if ("resolveInfo".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
}
