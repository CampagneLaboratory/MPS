package jetbrains.mps.smodel.persistence.def.v9;

/*Generated by MPS */

import jetbrains.mps.util.xml.XMLSAXHandler;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import java.util.Stack;
import org.xml.sax.Locator;
import jetbrains.mps.smodel.SModelHeader;
import jetbrains.mps.smodel.DefaultSModel;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.smodel.DebugRegistry;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.adapter.ids.SPropertyId;
import jetbrains.mps.smodel.adapter.ids.SReferenceLinkId;
import jetbrains.mps.smodel.adapter.ids.SContainmentLinkId;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.InterfaceSNode;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.StaticReference;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.util.Pair;

public class ModelReader9Handler extends XMLSAXHandler<ModelLoadResult> {
  private ModelReader9Handler.ModelElementHandler modelHandler = new ModelReader9Handler.ModelElementHandler();
  private ModelReader9Handler.PersistenceElementHandler persistenceHandler = new ModelReader9Handler.PersistenceElementHandler();
  private ModelReader9Handler.DebugInfoElementHandler debugInfoHandler = new ModelReader9Handler.DebugInfoElementHandler();
  private ModelReader9Handler.Debug_languageElementHandler debug_languageHandler = new ModelReader9Handler.Debug_languageElementHandler();
  private ModelReader9Handler.Debug_modelElementHandler debug_modelHandler = new ModelReader9Handler.Debug_modelElementHandler();
  private ModelReader9Handler.Debug_conceptElementHandler debug_conceptHandler = new ModelReader9Handler.Debug_conceptElementHandler();
  private ModelReader9Handler.Debug_propertyElementHandler debug_propertyHandler = new ModelReader9Handler.Debug_propertyElementHandler();
  private ModelReader9Handler.Debug_ref_roleElementHandler debug_ref_roleHandler = new ModelReader9Handler.Debug_ref_roleElementHandler();
  private ModelReader9Handler.Debug_child_roleElementHandler debug_child_roleHandler = new ModelReader9Handler.Debug_child_roleElementHandler();
  private ModelReader9Handler.LanguagesElementHandler languagesHandler = new ModelReader9Handler.LanguagesElementHandler();
  private ModelReader9Handler.Used_languageElementHandler used_languageHandler = new ModelReader9Handler.Used_languageElementHandler();
  private ModelReader9Handler.Module_referenceElementHandler module_referenceHandler = new ModelReader9Handler.Module_referenceElementHandler();
  private ModelReader9Handler.ImportsElementHandler importsHandler = new ModelReader9Handler.ImportsElementHandler();
  private ModelReader9Handler.Model_importElementHandler model_importHandler = new ModelReader9Handler.Model_importElementHandler();
  private ModelReader9Handler.ContentsElementHandler contentsHandler = new ModelReader9Handler.ContentsElementHandler();
  private ModelReader9Handler.NodeElementHandler nodeHandler = new ModelReader9Handler.NodeElementHandler();
  private ModelReader9Handler.PropertyElementHandler propertyHandler = new ModelReader9Handler.PropertyElementHandler();
  private ModelReader9Handler.ReferenceElementHandler referenceHandler = new ModelReader9Handler.ReferenceElementHandler();
  private ModelReader9Handler.IgnoredNodeElementHandler ignoredNodeHandler = new ModelReader9Handler.IgnoredNodeElementHandler();
  private ModelReader9Handler.IgnoredPropertyElementHandler ignoredPropertyHandler = new ModelReader9Handler.IgnoredPropertyElementHandler();
  private ModelReader9Handler.IgnoredReferenceElementHandler ignoredReferenceHandler = new ModelReader9Handler.IgnoredReferenceElementHandler();
  private Stack<ModelReader9Handler.ElementHandler> myHandlersStack = new Stack<ModelReader9Handler.ElementHandler>();
  private Stack<ModelReader9Handler.ChildHandler> myChildHandlersStack = new Stack<ModelReader9Handler.ChildHandler>();
  private Stack<Object> myValues = new Stack<Object>();
  private Locator myLocator;
  private ModelLoadResult myResult;
  private boolean my_interfaceOnlyParam;
  private boolean my_stripImplementationParam;
  private SModelHeader my_headerParam;
  private DefaultSModel my_modelField;
  private ReadHelper9 my_helperField;
  public ModelReader9Handler(boolean interfaceOnly, boolean stripImplementation, SModelHeader header) {
    my_interfaceOnlyParam = interfaceOnly;
    my_stripImplementationParam = stripImplementation;
    my_headerParam = header;
  }
  public ModelLoadResult getResult() {
    return myResult;
  }
  @Override
  public void setDocumentLocator(Locator locator) {
    myLocator = locator;
  }
  @Override
  public void characters(char[] array, int start, int len) throws SAXException {
    ModelReader9Handler.ElementHandler current = (myHandlersStack.empty() ? (ModelReader9Handler.ElementHandler) null : myHandlersStack.peek());
    if (current != null) {
      current.handleText(myValues.peek(), new String(array, start, len));
    }
  }
  @Override
  public void endElement(String uri, String localName, String qName) throws SAXException {
    ModelReader9Handler.ElementHandler current = myHandlersStack.pop();
    Object childValue = myValues.pop();
    current.validate(childValue);
    if (myChildHandlersStack.empty()) {
      myResult = (ModelLoadResult) childValue;
    } else {
      ModelReader9Handler.ChildHandler ch = myChildHandlersStack.pop();
      if (ch != null) {
        ch.apply(myValues.peek(), childValue);
      }
    }
  }
  @Override
  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    ModelReader9Handler.ElementHandler current = (myHandlersStack.empty() ? (ModelReader9Handler.ElementHandler) null : myHandlersStack.peek());
    if (current == null) {
      // root 
      current = modelHandler;
    } else {
      current = current.createChild(myValues.peek(), qName, attributes);
    }

    // check required 
    for (String attr : current.requiredAttributes()) {
      if (attributes.getValue(attr) == null) {
        throw new SAXParseException("attribute " + attr + " is absent", null);
      }
    }

    Object result = current.createObject(attributes);
    if (myHandlersStack.empty()) {
      myResult = (ModelLoadResult) result;
    }

    // handle attributes 
    for (int i = 0; i < attributes.getLength(); i++) {
      String name = attributes.getQName(i);
      String value = attributes.getValue(i);
      current.handleAttribute(result, name, value);
    }
    myHandlersStack.push(current);
    myValues.push(result);
  }
  private static interface ChildHandler {
    public void apply(Object resultObject, Object value) throws SAXException;
  }
  private class ElementHandler {
    private String[] requiredAttributes = new String[0];

    private ElementHandler() {
    }
    protected Object createObject(Attributes attrs) throws SAXException {
      return null;
    }
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
    }
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      throw new SAXParseException("unknown tag: " + tagName, null);
    }
    protected void handleText(Object resultObject, String value) throws SAXException {
      if (value.trim().length() == 0) {
        return;
      }
      throw new SAXParseException("text is not accepted: '" + value + "'", null);
    }
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    protected void setRequiredAttributes(String... required) {
      requiredAttributes = required;
    }
    protected void validate(Object resultObject) throws SAXException {
    }
  }
  public class ModelElementHandler extends ModelReader9Handler.ElementHandler {
    public ModelElementHandler() {
      setRequiredAttributes("ref");
    }
    @Override
    protected ModelLoadResult createObject(Attributes attrs) throws SAXException {
      SModelReference ref = PersistenceFacade.getInstance().createModelReference(attrs.getValue("ref"));
      my_modelField = new DefaultSModel(ref, my_headerParam);
      my_modelField.getSModelHeader().setPersistenceVersion(9);
      my_helperField = new ReadHelper9(my_modelField.getReference());
      ModelLoadResult result = new ModelLoadResult(my_modelField, ModelLoadingState.NOT_LOADED);
      result.setState((my_interfaceOnlyParam ? ModelLoadingState.INTERFACE_LOADED : ((my_stripImplementationParam ? ModelLoadingState.NO_IMPLEMENTATION : ModelLoadingState.FULLY_LOADED))));
      return result;
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      ModelLoadResult result = (ModelLoadResult) resultObject;
      if ("doNotGenerate".equals(name)) {
        my_modelField.getSModelHeader().setDoNotGenerate(Boolean.parseBoolean(value));
        return;
      }
      if ("content".equals(name)) {
        if ("header".equals(value)) {
          result.setContentKind(ModelLoadResult.ContentKind.MODEL_HEADER);
        } else if ("root".equals(value)) {
          result.setContentKind(ModelLoadResult.ContentKind.MODEL_ROOT);
        } else {
          throw new SAXException("unknown content attribute value: " + value);
        }
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("persistence".equals(tagName)) {
        myChildHandlersStack.push(null);
        return persistenceHandler;
      }
      if ("debugInfo".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debugInfoHandler;
      }
      if ("languages".equals(tagName)) {
        myChildHandlersStack.push(null);
        return languagesHandler;
      }
      if ("imports".equals(tagName)) {
        myChildHandlersStack.push(null);
        return importsHandler;
      }
      if ("contents".equals(tagName)) {
        myChildHandlersStack.push(null);
        return contentsHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
  }
  public class PersistenceElementHandler extends ModelReader9Handler.ElementHandler {
    public PersistenceElementHandler() {
    }
  }
  public class DebugInfoElementHandler extends ModelReader9Handler.ElementHandler {
    public DebugInfoElementHandler() {
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("lang".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debug_languageHandler;
      }
      if ("model".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debug_modelHandler;
      }
      if ("concept".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debug_conceptHandler;
      }
      if ("property".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debug_propertyHandler;
      }
      if ("refRole".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debug_ref_roleHandler;
      }
      if ("childRole".equals(tagName)) {
        myChildHandlersStack.push(null);
        return debug_child_roleHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
  }
  public class Debug_languageElementHandler extends ModelReader9Handler.ElementHandler {
    public Debug_languageElementHandler() {
      setRequiredAttributes("id", "name");
    }
    @Override
    protected Object createObject(Attributes attrs) throws SAXException {
      DebugRegistry.getInstance().addLanguageName(SLanguageId.deserialize(attrs.getValue("id")), attrs.getValue("name"));
      return null;
    }
  }
  public class Debug_modelElementHandler extends ModelReader9Handler.ElementHandler {
    public Debug_modelElementHandler() {
      setRequiredAttributes("ref", "name");
    }
    @Override
    protected Object createObject(Attributes attrs) throws SAXException {
      DebugRegistry.getInstance().addModelName(jetbrains.mps.smodel.SModelReference.parseReference(attrs.getValue("ref")), attrs.getValue("name"));
      return null;
    }
  }
  public class Debug_conceptElementHandler extends ModelReader9Handler.ElementHandler {
    public Debug_conceptElementHandler() {
      setRequiredAttributes("id", "name");
    }
    @Override
    protected Object createObject(Attributes attrs) throws SAXException {
      DebugRegistry.getInstance().addConceptName(SConceptId.deserialize(attrs.getValue("id")), attrs.getValue("name"));
      return null;
    }
  }
  public class Debug_propertyElementHandler extends ModelReader9Handler.ElementHandler {
    public Debug_propertyElementHandler() {
      setRequiredAttributes("id", "name");
    }
    @Override
    protected Object createObject(Attributes attrs) throws SAXException {
      DebugRegistry.getInstance().addPropertyName(SPropertyId.deserialize(attrs.getValue("id")), attrs.getValue("name"));
      return null;
    }
  }
  public class Debug_ref_roleElementHandler extends ModelReader9Handler.ElementHandler {
    public Debug_ref_roleElementHandler() {
      setRequiredAttributes("id", "name");
    }
    @Override
    protected Object createObject(Attributes attrs) throws SAXException {
      DebugRegistry.getInstance().addRefName(SReferenceLinkId.deserialize(attrs.getValue("id")), attrs.getValue("name"));
      return null;
    }
  }
  public class Debug_child_roleElementHandler extends ModelReader9Handler.ElementHandler {
    public Debug_child_roleElementHandler() {
      setRequiredAttributes("id", "name");
    }
    @Override
    protected Object createObject(Attributes attrs) throws SAXException {
      DebugRegistry.getInstance().addLinkName(SContainmentLinkId.deserialize(attrs.getValue("id")), attrs.getValue("name"));
      return null;
    }
  }
  public class LanguagesElementHandler extends ModelReader9Handler.ElementHandler {
    public LanguagesElementHandler() {
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("use".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890285(resultObject, value);
          }
        });
        return used_languageHandler;
      }
      if ("generationPart".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890293(resultObject, value);
          }
        });
        return module_referenceHandler;
      }
      if ("devkit".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890301(resultObject, value);
          }
        });
        return module_referenceHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_7167172773708890285(Object resultObject, Object value) throws SAXException {
      Tuples._4<SLanguageId, String, Integer, Boolean> child = (Tuples._4<SLanguageId, String, Integer, Boolean>) value;
      if ((boolean) child._3()) {
        my_helperField.addImplicitlyUsedLanguage(my_modelField, child._1(), child._0(), (int) child._2());
      } else {
        my_helperField.addUsedLanguage(my_modelField, child._1(), child._0(), (int) child._2());
      }
    }
    private void handleChild_7167172773708890293(Object resultObject, Object value) throws SAXException {
      SModuleReference child = (SModuleReference) value;
      my_modelField.addEngagedOnGenerationLanguage(child);
    }
    private void handleChild_7167172773708890301(Object resultObject, Object value) throws SAXException {
      SModuleReference child = (SModuleReference) value;
      my_modelField.addDevKit(child);
    }
  }
  public class Used_languageElementHandler extends ModelReader9Handler.ElementHandler {
    public Used_languageElementHandler() {
      setRequiredAttributes("id", "index", "version");
    }
    @Override
    protected Tuples._4<SLanguageId, String, Integer, Boolean> createObject(Attributes attrs) throws SAXException {
      return MultiTuple.<SLanguageId,String,Integer,Boolean>from(SLanguageId.deserialize(attrs.getValue("id")), attrs.getValue("index"), Integer.parseInt(attrs.getValue("version")), Boolean.parseBoolean(attrs.getValue("implicit")));
    }
  }
  public class Module_referenceElementHandler extends ModelReader9Handler.ElementHandler {
    public Module_referenceElementHandler() {
      setRequiredAttributes("ref");
    }
    @Override
    protected SModuleReference createObject(Attributes attrs) throws SAXException {
      return PersistenceFacade.getInstance().createModuleReference(attrs.getValue("ref"));
    }
  }
  public class ImportsElementHandler extends ModelReader9Handler.ElementHandler {
    public ImportsElementHandler() {
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("import".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890309(resultObject, value);
          }
        });
        return model_importHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_7167172773708890309(Object resultObject, Object value) throws SAXException {
      Tuples._3<String, SModelReference, Boolean> child = (Tuples._3<String, SModelReference, Boolean>) value;
      my_helperField.addImportToModel(my_modelField, child._0(), child._1(), (boolean) child._2());
    }
  }
  public class Model_importElementHandler extends ModelReader9Handler.ElementHandler {
    public Model_importElementHandler() {
      setRequiredAttributes("index", "ref");
    }
    @Override
    protected Tuples._3<String, SModelReference, Boolean> createObject(Attributes attrs) throws SAXException {
      return MultiTuple.<String,SModelReference,Boolean>from(attrs.getValue("index"), PersistenceFacade.getInstance().createModelReference(attrs.getValue("ref")), attrs.getValue("implicit") != null);
    }
  }
  public class ContentsElementHandler extends ModelReader9Handler.ElementHandler {
    public ContentsElementHandler() {
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("node".equals(tagName) && checknode_7167172773708890351(resultObject, attrs)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890339(resultObject, value);
          }
        });
        return nodeHandler;
      }
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890362(resultObject, value);
          }
        });
        return ignoredNodeHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private boolean checknode_7167172773708890351(Object resultObject, Attributes attrs) {
      return !((my_stripImplementationParam && my_helperField.isImplementationNode(attrs.getValue("info"))));
    }
    private void handleChild_7167172773708890339(Object resultObject, Object value) throws SAXException {
      Tuples._2<SNode, SContainmentLinkId> child = (Tuples._2<SNode, SContainmentLinkId>) value;
      my_modelField.addRootNode(child._0());
    }
    private void handleChild_7167172773708890362(Object resultObject, Object value) throws SAXException {
      Tuples._3<SContainmentLinkId, SConceptId, String> child = (Tuples._3<SContainmentLinkId, SConceptId, String>) value;
      if (my_helperField.isImplementationWithStubNode(child._2())) {
        SConcept stubConcept = my_helperField.getStubConcept(child._1());
        if (stubConcept != null) {
          my_modelField.addRootNode(new jetbrains.mps.smodel.SNode(stubConcept));
        }
      }
    }
  }
  public class NodeElementHandler extends ModelReader9Handler.ElementHandler {
    public NodeElementHandler() {
      setRequiredAttributes("concept", "info");
    }
    @Override
    protected Tuples._2<SNode, SContainmentLinkId> createObject(Attributes attrs) throws SAXException {
      Tuples._3<ConceptKind, StaticScope, Boolean> parsed = my_helperField.readNodeInfo(attrs.getValue("info"));
      if (parsed == null) {
        throw new SAXParseException("bad typeInfo attribute", null);
      }
      boolean interfaceNode = false;
      if (my_interfaceOnlyParam) {
        interfaceNode = (parsed._0() == ConceptKind.INTERFACE || attrs.getValue("role") == null);
      }
      SConceptId conceptId = my_helperField.readConceptId(attrs.getValue("concept"));
      String name = DebugRegistry.getInstance().getConceptName(conceptId);
      SConcept concept = MetaAdapterFactory.getConcept(conceptId, name);
      jetbrains.mps.smodel.SNode result = (interfaceNode ? new InterfaceSNode(concept) : new jetbrains.mps.smodel.SNode(concept));
      result.setId(SNodeId.fromString(attrs.getValue("id")));
      // can be root 
      return MultiTuple.<SNode,SContainmentLinkId>from(((SNode) result), my_helperField.readNodeRole(attrs.getValue("role")));
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("property".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890516(resultObject, value);
          }
        });
        return propertyHandler;
      }
      if ("reference".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890553(resultObject, value);
          }
        });
        return referenceHandler;
      }
      if ("node".equals(tagName) && checknode_7167172773708890671(resultObject, attrs)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890646(resultObject, value);
          }
        });
        return nodeHandler;
      }
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(new ModelReader9Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_7167172773708890694(resultObject, value);
          }
        });
        return ignoredNodeHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private boolean checknode_7167172773708890671(Object resultObject, Attributes attrs) {
      Tuples._2<SNode, SContainmentLinkId> result = (Tuples._2<SNode, SContainmentLinkId>) resultObject;
      if (my_stripImplementationParam && my_helperField.isImplementationNode(attrs.getValue("info"))) {
        return false;
      }
      return !(result._0() instanceof InterfaceSNode) || my_helperField.isInterfaceNode(attrs.getValue("info"));
    }
    private void handleChild_7167172773708890516(Object resultObject, Object value) throws SAXException {
      Tuples._2<SNode, SContainmentLinkId> result = (Tuples._2<SNode, SContainmentLinkId>) resultObject;
      Tuples._2<SPropertyId, String> child = (Tuples._2<SPropertyId, String>) value;
      String name = DebugRegistry.getInstance().getPropertyName(child._0());
      result._0().setProperty(MetaAdapterFactory.getProperty(child._0(), name), child._1());
    }
    private void handleChild_7167172773708890553(Object resultObject, Object value) throws SAXException {
      Tuples._2<SNode, SContainmentLinkId> result = (Tuples._2<SNode, SContainmentLinkId>) resultObject;
      Tuples._4<SReferenceLinkId, SNodePointer, Boolean, String> child = (Tuples._4<SReferenceLinkId, SNodePointer, Boolean, String>) value;
      SNodePointer target = child._1();
      String name = DebugRegistry.getInstance().getRefName(child._0());
      SReferenceLink link = MetaAdapterFactory.getReferenceLink(child._0(), name);
      StaticReference ref = new StaticReference(link, result._0(), target.getModelReference(), target.getNodeId(), child._3());
      result._0().setReference(link, ref);
    }
    private void handleChild_7167172773708890646(Object resultObject, Object value) throws SAXException {
      Tuples._2<SNode, SContainmentLinkId> result = (Tuples._2<SNode, SContainmentLinkId>) resultObject;
      Tuples._2<SNode, SContainmentLinkId> child = (Tuples._2<SNode, SContainmentLinkId>) value;
      if (child != null) {
        String name = DebugRegistry.getInstance().getLinkName(child._1());
        result._0().addChild(MetaAdapterFactory.getContainmentLink(child._1(), name), child._0());
      }
    }
    private void handleChild_7167172773708890694(Object resultObject, Object value) throws SAXException {
      Tuples._2<SNode, SContainmentLinkId> result = (Tuples._2<SNode, SContainmentLinkId>) resultObject;
      Tuples._3<SContainmentLinkId, SConceptId, String> child = (Tuples._3<SContainmentLinkId, SConceptId, String>) value;
      String name = DebugRegistry.getInstance().getLinkName(child._0());
      SContainmentLink link = MetaAdapterFactory.getContainmentLink(child._0(), name);
      if (my_stripImplementationParam && my_helperField.isImplementationWithStubNode(child._2())) {
        SConcept stubConcept = my_helperField.getStubConcept(child._1());
        if (stubConcept != null) {
          jetbrains.mps.smodel.SNode childNode = new jetbrains.mps.smodel.SNode(stubConcept);
          result._0().addChild(link, childNode);
          return;
        }
      }
      if (result._0() instanceof InterfaceSNode) {
        ((InterfaceSNode) result._0()).skipRole(link);
      }
    }
  }
  public class PropertyElementHandler extends ModelReader9Handler.ElementHandler {
    public PropertyElementHandler() {
      setRequiredAttributes("role");
    }
    @Override
    protected Tuples._2<SPropertyId, String> createObject(Attributes attrs) throws SAXException {
      return MultiTuple.<SPropertyId,String>from(my_helperField.readPropId(attrs.getValue("role")), attrs.getValue("value"));
    }
  }
  public class ReferenceElementHandler extends ModelReader9Handler.ElementHandler {
    public ReferenceElementHandler() {
      setRequiredAttributes("role", "target");
    }
    @Override
    protected Tuples._4<SReferenceLinkId, SNodePointer, Boolean, String> createObject(Attributes attrs) throws SAXException {
      Pair<Boolean, SNodePointer> linkInfo = my_helperField.readLink(attrs.getValue("target"));
      return MultiTuple.<SReferenceLinkId,SNodePointer,Boolean,String>from(my_helperField.readRefRole(attrs.getValue("role")), linkInfo.o2, linkInfo.o1, attrs.getValue("resolveInfo"));
    }
  }
  public class IgnoredNodeElementHandler extends ModelReader9Handler.ElementHandler {
    public IgnoredNodeElementHandler() {
    }
    @Override
    protected Tuples._3<SContainmentLinkId, SConceptId, String> createObject(Attributes attrs) throws SAXException {
      return MultiTuple.<SContainmentLinkId,SConceptId,String>from(my_helperField.readNodeRole(attrs.getValue("role")), my_helperField.readConceptId(attrs.getValue("concept")), attrs.getValue("info"));
    }
    @Override
    protected ModelReader9Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("property".equals(tagName)) {
        myChildHandlersStack.push(null);
        return ignoredPropertyHandler;
      }
      if ("reference".equals(tagName)) {
        myChildHandlersStack.push(null);
        return ignoredReferenceHandler;
      }
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(null);
        return ignoredNodeHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
  }
  public class IgnoredPropertyElementHandler extends ModelReader9Handler.ElementHandler {
    public IgnoredPropertyElementHandler() {
    }
  }
  public class IgnoredReferenceElementHandler extends ModelReader9Handler.ElementHandler {
    public IgnoredReferenceElementHandler() {
    }
  }
}
