package jetbrains.mps.persistence.xml;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jdom.Document;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jdom.Element;
import org.jdom.Attribute;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import org.jdom.Content;
import org.jdom.Text;
import org.jdom.Comment;
import org.jdom.ProcessingInstruction;
import org.jdom.CDATA;
import org.jdom.EntityRef;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class XmlConverter {


  public static SNode convertDocument(String name, Document document) {
    SNode file = SConceptOperations.createNewNode("jetbrains.mps.core.xml.structure.XmlFile", null);
    SPropertyOperations.set(file, "name", name);
    SLinkOperations.setNewChild(file, "document", "jetbrains.mps.core.xml.structure.XmlDocument");
    SLinkOperations.setTarget(SLinkOperations.getTarget(file, "document", true), "rootElement", convertElement(document.getRootElement()), true);
    return file;
  }



  private static SNode convertElement(Element elem) {
    SNode result = SConceptOperations.createNewNode("jetbrains.mps.core.xml.structure.XmlElement", null);
    SPropertyOperations.set(result, "tagName", elem.getName());
    for (Attribute a : ListSequence.fromList((List<Attribute>) elem.getAttributes())) {
      ListSequence.fromList(SLinkOperations.getTargets(result, "attributes", true)).addElement(convertAttribute(a));
    }
    for (Content c : ListSequence.fromList((List<Content>) elem.getContent())) {
      SNode content = convertContent(c);
      if (content != null) {
        ListSequence.fromList(SLinkOperations.getTargets(result, "content", true)).addElement(content);
      }
    }
    SPropertyOperations.set(result, "shortEmptyNotation", "" + (elem.getContentSize() == 0));
    return result;
  }

  private static SNode convertContent(Content c) {
    if (c instanceof Element) {
      return convertElement((Element) c);
    } else if (c instanceof Text) {
      return createXmlText_h7fa2c_a0a0a0e(((Text) c).getText());
    } else if (c instanceof Comment) {
      // TODO 
    } else if (c instanceof ProcessingInstruction) {
      // TODO 
    } else if (c instanceof CDATA) {
      // TODO 
    } else if (c instanceof EntityRef) {
      // TODO 
    }
    return null;
  }

  private static SNode convertAttribute(Attribute elem) {
    SNode result = SConceptOperations.createNewNode("jetbrains.mps.core.xml.structure.XmlAttribute", null);
    SPropertyOperations.set(result, "attrName", elem.getName());
    // TODO parse/split etc. 
    ListSequence.fromList(SLinkOperations.getTargets(result, "value", true)).addElement(createXmlTextValue_h7fa2c_a0a3a5(elem.getValue()));
    return result;
  }

  private static SNode createXmlText_h7fa2c_a0a0a0e(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.xml.structure.XmlText", null, GlobalScope.getInstance(), false);
    n1.setProperty("value", (String) p0);
    return n1;
  }

  private static SNode createXmlTextValue_h7fa2c_a0a3a5(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.xml.structure.XmlTextValue", null, GlobalScope.getInstance(), false);
    n1.setProperty("text", (String) p0);
    return n1;
  }
}
