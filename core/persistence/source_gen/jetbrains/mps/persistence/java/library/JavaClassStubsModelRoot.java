package jetbrains.mps.persistence.java.library;

/*Generated by MPS */

import jetbrains.mps.extapi.persistence.FileBasedModelRoot;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SModelId;
import org.jetbrains.mps.openapi.persistence.Memento;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.smodel.LanguageID;
import jetbrains.mps.reloading.ClassPathFactory;
import java.io.IOException;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.extapi.persistence.FolderSetDataSource;

public class JavaClassStubsModelRoot extends FileBasedModelRoot {
  public JavaClassStubsModelRoot() {
    super();
  }

  @Override
  public String getType() {
    return JavaClassStubConstants.STUB_TYPE;
  }

  @Override
  public SModel getModel(SModelId id) {
    // todo implement 
    return null;
  }

  @Override
  public void load(Memento memento) {
    super.load(memento);
    if (memento.get("path") == null) {
      return;
    }
    String path = FileUtil.stripLastSlashes(memento.get("path"));
    IFile file = FileSystem.getInstance().getFileByPath(path);
    if (file != null && file.getParent() != null) {
      path = file.getParent().getPath();
    }
    setContentRoot(path);
    List<String> files = filesForKind.get(SOURCE_ROOTS);
    files.add(memento.get("path"));
  }

  @Override
  public Iterable<SModel> loadModels() {
    List<SModel> result = ListSequence.fromList(new ArrayList<SModel>());
    final Collection<String> files = getFiles(FileBasedModelRoot.SOURCE_ROOTS);
    final Collection<String> excludedFiles = getFiles(FileBasedModelRoot.EXCLUDED);
    for (String file : files) {
      // Find all jar (zip) files recursively 
      Set<IFile> jarFiles = new HashSet<IFile>();
      collectJarFiles(FileSystem.getInstance().getFileByPath(file), jarFiles);
      for (IFile jarFile : jarFiles) {
        findAndAddModels(jarFile.getPath(), result, excludedFiles);
      }

      /*
        // Find all class files recursively 
        Set<IFile> classFiles = new HashSet<IFile>();
        collectClassFiles(FileSystem.getInstance().getFileByPath(file), classFiles);
        for (IFile classFile : classFiles) {
          findAndAddModels(classFile.getPath(), result, excludedFiles);
        }
      */

      // TODO: use commended code above Need to implement IClassPathItem for *.class files, that can get package from such files to create model ref Add it to ClassPathFactory      PS this code only works if variable file contains FQ named package dir structure 
      findAndAddModels(file, result, excludedFiles);
    }
    return result;
  }

  private void collectJarFiles(final IFile file, final Set<IFile> files) {
    if (file.getPath().endsWith(".jar") || file.getPath().endsWith(".zip")) {
      files.add(file);
      return;
    }
    if (!(file.isDirectory())) {
      return;
    }
    for (IFile child : file.getChildren()) {
      collectJarFiles(child, files);
    }
  }

  private void collectClassFiles(final IFile file, final Set<IFile> files) {
    if (file.getPath().endsWith(".class")) {
      files.add(file);
      return;
    }
    if (!(file.isDirectory())) {
      return;
    }
    for (IFile child : file.getChildren()) {
      collectClassFiles(child, files);
    }
  }

  private void findAndAddModels(String file, final List<SModel> result, final Collection<String> excludedFiles) {
    if (excludedFiles.contains(file)) {
      return;
    }
    IClassPathItem cp = create(file);
    getModelDescriptors(result, file, cp, "", LanguageID.JAVA, getModule());
  }

  @Override
  public boolean canCreateModels() {
    return false;
  }

  @Override
  public boolean canCreateModel(String string) {
    return false;
  }

  @Override
  public SModel createModel(String string) {
    return null;
  }

  private IClassPathItem create(String path) {
    try {
      return ClassPathFactory.getInstance().createFromPathFS(path, "JavaStubs");
    } catch (IOException e) {
      e.printStackTrace();
      // To change body of catch statement use File | Settings | File Templates. 
    }
    return null;
  }

  public void getModelDescriptors(final List<SModel> result, String startPath, IClassPathItem cp, String prefix, String languageId, SModule module) {
    for (String subpackage : cp.getSubpackages(prefix)) {
      if (cp.getRootClasses(subpackage).iterator().hasNext()) {
        final SModelReference modelReference = StubHelper.uidForPackageInStubs(subpackage, languageId, module.getModuleReference());
        JavaClassStubModelDescriptor smd;
        if (SModelRepository.getInstance().getModelDescriptor(modelReference) != null) {
          SModel descriptor = SModelRepository.getInstance().getModelDescriptor(modelReference);
          assert descriptor instanceof JavaClassStubModelDescriptor;
          smd = (JavaClassStubModelDescriptor) descriptor;
          ListSequence.fromList(result).addElement(descriptor);
        } else if (ListSequence.fromList(result).any(new IWhereFilter<SModel>() {
          public boolean accept(SModel it) {
            return it.getReference().equals(modelReference);
          }
        })) {
          SModel descriptor = ListSequence.fromList(result).findFirst(new IWhereFilter<SModel>() {
            public boolean accept(SModel it) {
              return it.getReference().equals(modelReference);
            }
          });
          assert descriptor instanceof JavaClassStubModelDescriptor;
          smd = (JavaClassStubModelDescriptor) descriptor;
        } else {
          smd = new JavaClassStubModelDescriptor(modelReference, new FolderSetDataSource(), this);
          smd.setModelRoot(this);
          ListSequence.fromList(result).addElement(smd);
        }
        smd.getSource().addPath(child(startPath, subpackage), this);
      }
      getModelDescriptors(result, startPath, cp, subpackage, languageId, module);
    }
  }

  private String child(String startPath, String prefix) {
    IFile file = FileSystem.getInstance().getFileByPath((startPath.endsWith(".jar") ? startPath + "!/" : startPath));
    for (String child : prefix.split("\\.")) {
      file = file.getDescendant(child);
    }
    return file.getPath();
  }
}
