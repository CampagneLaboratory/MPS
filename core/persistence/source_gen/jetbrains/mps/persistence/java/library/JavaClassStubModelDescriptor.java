package jetbrains.mps.persistence.java.library;

/*Generated by MPS */

import jetbrains.mps.extapi.model.ReloadableSModelBase;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.SModel;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.extapi.persistence.FolderSetDataSource;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.nodeidmap.ForeignNodeIdMap;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.baseLanguage.javastub.ASMModelLoader;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.adapter.ids.MetaIdByDeclaration;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelRepository;

public class JavaClassStubModelDescriptor extends ReloadableSModelBase {
  private static final Logger LOG = LogManager.getLogger(JavaClassStubModelDescriptor.class);

  private SModel myModel;
  private ModelRoot myModelRoot;
  public JavaClassStubModelDescriptor(SModelReference modelReference, FolderSetDataSource source, ModelRoot root) {
    super(modelReference, source);
    myModelRoot = root;
  }
  @Override
  protected SModel getCurrentModelInternal() {
    return myModel;
  }
  @NotNull
  @Override
  public FolderSetDataSource getSource() {
    return (FolderSetDataSource) super.getSource();
  }
  @Override
  public SModel getSModelInternal() {
    if (myModel == null) {
      synchronized (this) {
        if (myModel != null) {
          return myModel;
        }
        myModel = createModel();
        myModel.setModelDescriptor(this);
      }
      fireModelStateChanged(ModelLoadingState.FULLY_LOADED);
    }
    return myModel;
  }
  @Override
  public boolean isLoaded() {
    return myModel != null;
  }
  @Override
  public void unload() {
    ModelAccess.assertLegalWrite();

    SModel oldModel = myModel;
    if (oldModel != null) {
      oldModel.setModelDescriptor(null);
      myModel = null;
      fireModelStateChanged(ModelLoadingState.NOT_LOADED);
    }
  }
  private SModel createModel() {
    SModel model = new SModel(getReference(), new ForeignNodeIdMap());
    for (SLanguage l : getLanguagesToImport()) {
      model.addLanguage(l, -1);
    }
    new ASMModelLoader(myModelRoot.getModule(), getSource().getPaths(), model, false).updateModel();
    return model;
  }
  private Set<SLanguage> getLanguagesToImport() {
    Set<SLanguage> rv = SetSequence.fromSet(new HashSet<SLanguage>());
    SetSequence.fromSet(rv).addElement(MetaIdByDeclaration.ref2Id(PersistenceFacade.getInstance().createModuleReference("f3061a53-9226-4cc5-a443-f952ceaf5816(jetbrains.mps.baseLanguage)")));
    return rv;
  }
  @Override
  public void reloadFromDiskSafe() {
    ModelAccess.assertLegalWrite();
    if (getSource().getPaths().isEmpty()) {
      SModelRepository.getInstance().deleteModel(this);
      return;
    }
    reload();
    updateTimestamp();
    LOG.assertLog(!(needsReloading()), "Assertion failed.");
  }
  private void reload() {
    if (myModel == null) {
      return;
    }
    final SModel oldModel = myModel;
    myModel = createModel();
    replaceModelAndFireEvent(oldModel, myModel);
  }
}
