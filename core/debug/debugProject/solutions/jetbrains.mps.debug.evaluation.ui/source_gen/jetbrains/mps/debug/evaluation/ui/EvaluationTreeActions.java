/*
 * Copyright 2003-2010 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.debug.evaluation.ui;

/*Generated by MPS */

import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.debug.evaluation.model.AbstractEvaluationModel;
import jetbrains.mps.debug.evaluation.EvaluationProvider;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.workbench.dialogs.project.components.parts.actions.icons.Icons;
import jetbrains.mps.debug.api.evaluation.IEvaluationProvider;
import jetbrains.mps.ide.actions.DebugActionsUtil;

public class EvaluationTreeActions {
  public EvaluationTreeActions() {
  }

  public static class EditWatchAction extends AnAction {
    public EditWatchAction() {
      super("Edit Watch");
    }

    public void actionPerformed(AnActionEvent event) {
      AbstractEvaluationModel model = EvaluationUi.EVALUATION_MODEL.getData(event.getDataContext());
      // todo remove cast 
      ((EvaluationProvider) model.getDebugSession().getEvaluationProvider()).showEditWatchDialog(MPSDataKeys.OPERATION_CONTEXT.getData(event.getDataContext()), model);
    }

    @Override
    public void update(AnActionEvent event) {
      super.update(event);
      event.getPresentation().setVisible(EvaluationUi.EVALUATION_MODEL.getData(event.getDataContext()) != null);
    }
  }

  public static class AddWatchAction extends AnAction {
    public AddWatchAction() {
      super("New Watch...", "New Watch...", Icons.ADD);
    }

    public void actionPerformed(AnActionEvent event) {
      IEvaluationProvider evaluationProvider = DebugActionsUtil.getEvaluationProvider(event);
      if (evaluationProvider != null) {
        ((EvaluationProvider) evaluationProvider).createWatch();
      }
    }

    @Override
    public void update(AnActionEvent event) {
      event.getPresentation().setEnabled(DebugActionsUtil.getDebugSession(event) != null);
    }
  }

  public static class RemoveWatchAction extends AnAction {
    public RemoveWatchAction() {
      super("Remove Watch", "Remove Watch", Icons.REMOVE);
    }

    public void actionPerformed(AnActionEvent event) {
      AbstractEvaluationModel model = EvaluationUi.EVALUATION_MODEL.getData(event.getDataContext());
      IEvaluationProvider evaluationProvider = DebugActionsUtil.getEvaluationProvider(event);
      if (evaluationProvider != null) {
        ((EvaluationProvider) evaluationProvider).removeWatch(model);
      }
    }

    @Override
    public void update(AnActionEvent event) {
      event.getPresentation().setEnabled(EvaluationUi.EVALUATION_MODEL.getData(event.getDataContext()) != null);
    }
  }
}
