package jetbrains.mps.debug.evaluation.model;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import jetbrains.mps.debug.runtime.JavaUiState;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class SimpleContext extends EvaluationContext {
  private final Map<String, SNode> myVariables = MapSequence.fromMap(new LinkedHashMap<String, SNode>(16, (float) 0.75, false));
  private final SNode myThisClassifierType;
  private final SNode myStaticContextType;

  public SimpleContext(JavaUiState uiState, @NotNull Map<String, SNode> variables, @Nullable SNode thisClassfifierType, @Nullable SNode staticContextType) {
    super(uiState);
    MapSequence.fromMap(myVariables).putAll(variables);
    myThisClassifierType = thisClassfifierType;
    myStaticContextType = staticContextType;
  }

  @Nullable
  public SNode getThisClassifierType(_FunctionTypes._return_P1_E0<? extends SNode, ? super String> createClassifierType) {
    return myThisClassifierType;
  }

  @Nullable
  public SNode getStaticContextType(_FunctionTypes._return_P1_E0<? extends SNode, ? super String> createClassifierType) {
    return myStaticContextType;
  }

  @NotNull
  public Map<String, SNode> getVariables(_FunctionTypes._return_P1_E0<? extends SNode, ? super String> createClassifierType) {
    return myVariables;
  }

  @Nullable
  public SNode getLocationNode() {
    return null;
  }

  public static SimpleContext fromEvaluationContext(EvaluationContext context, _FunctionTypes._return_P1_E0<? extends SNode, ? super String> createClassifierType) {
    return new SimpleContext(context.getUiState(), context.getVariables(createClassifierType), context.getThisClassifierType(createClassifierType), context.getStaticContextType(createClassifierType));
  }
}
