package jetbrains.mps.debug.evaluation.ui;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTree;
import com.sun.jdi.ThreadReference;
import java.util.Map;
import jetbrains.mps.debug.evaluation.model.AbstractEvaluationModel;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.debug.evaluation.proxies.IValueProxy;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.ide.ui.TextTreeNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.debug.api.integration.ui.WatchableNode;
import jetbrains.mps.debug.runtime.java.programState.watchables.CalculatedWatchable;
import org.jetbrains.annotations.Nullable;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.awt.Color;
import jetbrains.mps.ide.messages.Icons;
import com.intellij.openapi.actionSystem.ActionGroup;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.datatransfer.CopyPasteUtil;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import java.io.StringWriter;
import java.io.PrintWriter;

/*package*/ class EvaluationTree extends MPSTree {
  private String myClassFqName;
  private ThreadReference myThreadReference;
  private Map<AbstractEvaluationModel, EvaluationTree.EvaluationState> myStates = MapSequence.fromMap(new HashMap<AbstractEvaluationModel, EvaluationTree.EvaluationState>());

  public EvaluationTree() {
    super();
    setRootVisible(false);
    setShowsRootHandles(true);
    rebuildNow();
  }

  public void updateLocation(String classFqName, ThreadReference threadReference) {
    myClassFqName = classFqName;
    myThreadReference = threadReference;
  }

  /*package*/ void addModel(AbstractEvaluationModel model) {
    MapSequence.fromMap(myStates).put(model, new EvaluationTree.InitializedState());
  }

  /*package*/ void setResultProxy(IValueProxy valueProxy, AbstractEvaluationModel model) {
    MapSequence.fromMap(myStates).put(model, new EvaluationTree.ResultState(valueProxy, myClassFqName, myThreadReference));
  }

  /*package*/ void setError(@NotNull String text, AbstractEvaluationModel model) {
    MapSequence.fromMap(myStates).put(model, new EvaluationTree.FailureState(text));
  }

  /*package*/ void setError(@NotNull Throwable error, AbstractEvaluationModel model) {
    MapSequence.fromMap(myStates).put(model, new EvaluationTree.FailureState(error));
  }

  /*package*/ void setEvaluating(AbstractEvaluationModel model) {
    MapSequence.fromMap(myStates).put(model, new EvaluationTree.EvaluationInProgressState());
  }

  @Override
  protected MPSTreeNode rebuild() {
    MPSTreeNode rootTreeNode = new TextTreeNode("Evaluation Result");
    for (EvaluationTree.EvaluationState state : Sequence.fromIterable(MapSequence.fromMap(myStates).values())) {
      state.rebuild(rootTreeNode);
    }
    return rootTreeNode;
  }

  private static abstract class EvaluationState {
    public EvaluationState() {
    }

    public abstract void rebuild(MPSTreeNode rootTreeNode);
  }

  private static class InitializedState extends EvaluationTree.EvaluationState {
    public InitializedState() {
    }

    public void rebuild(MPSTreeNode rootTreeNode) {
      // doing nothing 
    }
  }

  private static class EvaluationInProgressState extends EvaluationTree.EvaluationState {
    public EvaluationInProgressState() {
    }

    public void rebuild(MPSTreeNode rootTreeNode) {
      rootTreeNode.add(new EvaluationTree.EvaluatingTreeNode());
    }
  }

  private static class ResultState extends EvaluationTree.EvaluationState {
    @NotNull
    private final IValueProxy myValueProxy;
    @NotNull
    private final String myClassFqName;
    private final ThreadReference myThreadReference;

    public ResultState(IValueProxy proxy, String classFqName, ThreadReference threadReference) {
      myValueProxy = proxy;
      myClassFqName = classFqName;
      myThreadReference = threadReference;
    }

    public void rebuild(MPSTreeNode rootTreeNode) {
      rootTreeNode.add(new WatchableNode(new CalculatedWatchable(this.myValueProxy.getJDIValue(), myClassFqName, myThreadReference)));
    }
  }

  private static class FailureState extends EvaluationTree.EvaluationState {
    @Nullable
    private String myErrorText;
    private Throwable myError;

    public FailureState(String errorText) {
      myErrorText = errorText;
    }

    private FailureState(Throwable error) {
      myError = error;
    }

    public void rebuild(MPSTreeNode rootTreeNode) {
      if (myError != null) {
        rootTreeNode.add(new EvaluationTree.ErrorTreeNode(myError));
      } else {
        rootTreeNode.add(new EvaluationTree.ErrorTreeNode(myErrorText));
      }
    }
  }

  private static class ErrorTreeNode extends TextTreeNode {
    private final List<String> myExtendedMessage = ListSequence.fromList(new ArrayList<String>());

    public ErrorTreeNode(@NotNull String text, String... extendedMessage) {
      super(text);

      if (extendedMessage != null && extendedMessage.length > 0) {
        for (int i = 0; i < extendedMessage.length; i++) {
          ListSequence.fromList(myExtendedMessage).addElement(extendedMessage[i]);
        }
      }

      doInit();
    }

    public ErrorTreeNode(Throwable t) {
      this((t.getMessage() == null ?
        t.toString() :
        t.getMessage()
      ), getStackTrace(t));
    }

    @Override
    public boolean isLeaf() {
      return ListSequence.fromList(myExtendedMessage).count() == 0;
    }

    @Override
    protected void updatePresentation() {
      super.updatePresentation();

      setColor(Color.RED);
      setIcon(Icons.ERROR_ICON);
    }

    @Override
    protected void doInit() {
      for (String messagePart : ListSequence.fromList(myExtendedMessage)) {
        TextTreeNode node = new TextTreeNode(messagePart) {
          @Override
          public boolean isLeaf() {
            return true;
          }
        };
        add(node);
        node.setIcon(Icons.ERROR_ICON);
      }
    }

    @Override
    public ActionGroup getActionGroup() {
      DefaultActionGroup defaultActionGroup = new DefaultActionGroup();
      defaultActionGroup.add(new AnAction("Copy Stacktrace To Clipboard") {
        public void actionPerformed(AnActionEvent event) {
          CopyPasteUtil.copyTextToClipboard(getText() + ListSequence.fromList(myExtendedMessage).foldLeft("", new ILeftCombinator<String, String>() {
            public String combine(String s, String it) {
              return s + "\n" + it;
            }
          }));
        }
      });
      return defaultActionGroup;
    }

    private static String[] getStackTrace(Throwable t) {
      StringWriter writer = new StringWriter();
      t.printStackTrace(new PrintWriter(writer));
      return writer.toString().split("\n");
    }
  }

  private static class EvaluatingTreeNode extends TextTreeNode {
    public EvaluatingTreeNode() {
      super("evaluating...");
    }

    @Override
    public boolean isLeaf() {
      return true;
    }

    @Override
    protected void updatePresentation() {
      super.updatePresentation();
      setColor(Color.GRAY);
      setIcon(Icons.INFORMATION_ICON);
    }
  }
}
