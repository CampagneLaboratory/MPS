package jetbrains.mps.debug.runtime.java.programState.watchables;

/*Generated by MPS */

import com.sun.jdi.Method;
import com.sun.jdi.ThreadReference;
import jetbrains.mps.debug.api.programState.WatchablesCategory;
import jetbrains.mps.debug.runtime.java.programState.JavaWatchablesCategory;
import jetbrains.mps.debug.api.programState.IValue;
import javax.swing.Icon;
import jetbrains.mps.debug.integration.ui.icons.Icons;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.debug.api.programState.IWatchable;
import java.util.Collections;

public class JavaMethodWatchable extends JavaWatchable {
  private final Method myMethod;
  private final boolean myIsEnter;

  public JavaMethodWatchable(Method method, boolean enter, String classFQName, ThreadReference threadReference) {
    super(classFQName, threadReference);
    myMethod = method;
    myIsEnter = enter;
  }

  @Override
  public String getName() {
    return ((myIsEnter ?
      "entered method" :
      "exited method"
    ));
  }

  @Override
  public WatchablesCategory getCategory() {
    return JavaWatchablesCategory.METHOD;
  }

  @Override
  public IValue getValue() {
    return new JavaMethodWatchable.JavaMethodValue();
  }

  @Override
  public Icon getPresentationIcon() {
    return Icons.METHOD_BREAKPOINT;
  }

  @Override
  public SNode getNode() {
    //  todo from location??? 
    return null;
  }

  private class JavaMethodValue implements IValue {
    private JavaMethodValue() {
    }

    @Override
    public String getValuePresentation() {
      return myMethod.declaringType().name() + "." + myMethod.name();
    }

    @Override
    public Icon getPresentationIcon() {
      return Icons.METHOD_BREAKPOINT;
    }

    @Override
    public boolean isStructure() {
      return false;
    }

    @Override
    public List<IWatchable> getSubvalues() {
      return Collections.emptyList();
    }
  }
}
