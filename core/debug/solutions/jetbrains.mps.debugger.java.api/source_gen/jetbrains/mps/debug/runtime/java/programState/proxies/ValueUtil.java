package jetbrains.mps.debug.runtime.java.programState.proxies;

/*Generated by MPS */

import com.sun.jdi.Value;
import com.sun.jdi.ThreadReference;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.util.annotation.ToRemove;

public abstract class ValueUtil {
  protected static ValueUtil INSTANCE;
  protected static final Object LOCK = new Object();

  public ValueUtil() {
  }

  public abstract JavaValue fromJDIRaw(Value value, String classFQname, ThreadReference threadReference);

  public abstract JavaValue fromJDI(Value value, @NotNull String classFQname, ThreadReference threadReference);

  public abstract JavaValue fromJDI(@Nullable Value value, ThreadReference threadReference);

  public abstract void init();

  public abstract void dispose();

  public static ValueUtil getInstance() {
    synchronized (LOCK) {
      return INSTANCE;
    }
  }

  @Deprecated
  @ToRemove(version = 2.1)
  public static JavaValue fromJDIValueRaw(Value value, String classFQname, ThreadReference threadReference) {
    return ValueUtil.getInstance().fromJDIRaw(value, classFQname, threadReference);
  }

  @Deprecated
  @ToRemove(version = 2.1)
  public static JavaValue fromJDIValue(@Nullable Value value, ThreadReference threadReference) {
    return ValueUtil.getInstance().fromJDI(value, threadReference);
  }

  @Deprecated
  @ToRemove(version = 2.1)
  public static JavaValue fromJDIValue(Value value, @NotNull String classFQname, ThreadReference threadReference) {
    return ValueUtil.getInstance().fromJDI(value, classFQname, threadReference);
  }
}
