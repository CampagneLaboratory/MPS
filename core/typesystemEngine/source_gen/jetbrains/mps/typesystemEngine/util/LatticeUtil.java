package jetbrains.mps.typesystemEngine.util;

/*Generated by MPS */

import jetbrains.mps.typesystem.inference.IWrapper;
import jetbrains.mps.typesystem.inference.NodeWrapper;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import java.util.Set;
import java.util.Iterator;
import java.util.HashSet;
import java.util.List;

public class LatticeUtil {
  public LatticeUtil() {
  }

  public static void processMeetsAndJoins(IWrapper type) {
    if (type instanceof NodeWrapper) {
      SNode node = type.getNode();
      if (node == null) {
        return;
      }
      processMeetsAndJoins(node);
    }
  }

  private static void processMeetsAndJoins(SNode node) {
    {
      SNode joinType = node;
      if (SNodeOperations.isInstanceOf(joinType, "jetbrains.mps.lang.typesystem.structure.JoinType")) {
        for (SNode child : SLinkOperations.getTargets(joinType, "argument", true)) {
          processMeetsAndJoins(child);
          {
            SNode childJoinType = child;
            if (SNodeOperations.isInstanceOf(childJoinType, "jetbrains.mps.lang.typesystem.structure.JoinType")) {
              for (SNode grandChild : SLinkOperations.getTargets(childJoinType, "argument", true)) {
                SNodeOperations.detachNode(grandChild);
                ListSequence.fromList(SLinkOperations.getTargets(joinType, "argument", true)).addElement(grandChild);
              }
              SNodeOperations.deleteNode(child);
            }
          }
        }
      }
    }
    {
      SNode meetType = node;
      if (SNodeOperations.isInstanceOf(meetType, "jetbrains.mps.lang.typesystem.structure.MeetType")) {
        for (SNode child : SLinkOperations.getTargets(meetType, "argument", true)) {
          processMeetsAndJoins(child);
          {
            SNode childMeetType = child;
            if (SNodeOperations.isInstanceOf(childMeetType, "jetbrains.mps.lang.typesystem.structure.MeetType")) {
              for (SNode grandChild : SLinkOperations.getTargets(childMeetType, "argument", true)) {
                SNodeOperations.detachNode(grandChild);
                ListSequence.fromList(SLinkOperations.getTargets(meetType, "argument", true)).addElement(grandChild);
              }
              SNodeOperations.deleteNode(child);
            }
          }
        }
      }
    }
  }

  public static IWrapper join(IWrapper wrapper1, IWrapper wrapper2) {
    SNode joinType = SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.JoinType", null);
    if (SNodeOperations.isInstanceOf(((SNode) wrapper1.getNode()), "jetbrains.mps.lang.typesystem.structure.JoinType")) {
      SNode joinWrapper1 = (SNode) wrapper1.getNode();
      for (SNode bc : SLinkOperations.getTargets(joinWrapper1, "argument", true)) {
        ListSequence.fromList(SLinkOperations.getTargets(joinType, "argument", true)).addElement(HUtil.copyIfNecessary(bc));
      }
      if (SNodeOperations.isInstanceOf(((SNode) wrapper2.getNode()), "jetbrains.mps.lang.typesystem.structure.JoinType")) {
        SNode joinWrapper2 = (SNode) wrapper2.getNode();
        for (SNode bc : SLinkOperations.getTargets(joinWrapper2, "argument", true)) {
          ListSequence.fromList(SLinkOperations.getTargets(joinType, "argument", true)).addElement(HUtil.copyIfNecessary(bc));
        }
      } else {
        ListSequence.fromList(SLinkOperations.getTargets(joinType, "argument", true)).addElement(HUtil.copyIfNecessary(wrapper2.getNode()));
      }
    } else
    if (SNodeOperations.isInstanceOf(((SNode) wrapper2.getNode()), "jetbrains.mps.lang.typesystem.structure.JoinType")) {
      SNode joinWrapper2 = (SNode) wrapper2.getNode();
      ListSequence.fromList(SLinkOperations.getTargets(joinType, "argument", true)).addElement(HUtil.copyIfNecessary(wrapper1.getNode()));
      for (SNode bc : SLinkOperations.getTargets(joinWrapper2, "argument", true)) {
        ListSequence.fromList(SLinkOperations.getTargets(joinType, "argument", true)).addElement(HUtil.copyIfNecessary(bc));
      }
    } else {
      ListSequence.fromList(SLinkOperations.getTargets(joinType, "argument", true)).addElement(HUtil.copyIfNecessary(wrapper1.getNode()));
      ListSequence.fromList(SLinkOperations.getTargets(joinType, "argument", true)).addElement(HUtil.copyIfNecessary(wrapper2.getNode()));
    }
    return NodeWrapper.createWrapperFromNode(joinType, null);
  }

  public static IWrapper meet(IWrapper wrapper1, IWrapper wrapper2) {
    SNode meetType = SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.MeetType", null);
    if (SNodeOperations.isInstanceOf(((SNode) wrapper1.getNode()), "jetbrains.mps.lang.typesystem.structure.MeetType")) {
      SNode meetWrapper1 = (SNode) wrapper1.getNode();
      for (SNode bc : SLinkOperations.getTargets(meetWrapper1, "argument", true)) {
        ListSequence.fromList(SLinkOperations.getTargets(meetType, "argument", true)).addElement(HUtil.copyIfNecessary(bc));
      }
      if (SNodeOperations.isInstanceOf(((SNode) wrapper2.getNode()), "jetbrains.mps.lang.typesystem.structure.MeetType")) {
        SNode meetWrapper2 = (SNode) wrapper2.getNode();
        for (SNode bc : SLinkOperations.getTargets(meetWrapper2, "argument", true)) {
          ListSequence.fromList(SLinkOperations.getTargets(meetType, "argument", true)).addElement(HUtil.copyIfNecessary(bc));
        }
      } else {
        ListSequence.fromList(SLinkOperations.getTargets(meetType, "argument", true)).addElement(HUtil.copyIfNecessary(wrapper2.getNode()));
      }
    } else
    if (SNodeOperations.isInstanceOf(((SNode) wrapper2.getNode()), "jetbrains.mps.lang.typesystem.structure.MeetType")) {
      SNode meetWrapper2 = (SNode) wrapper2.getNode();
      ListSequence.fromList(SLinkOperations.getTargets(meetType, "argument", true)).addElement(HUtil.copyIfNecessary(wrapper1.getNode()));
      for (SNode bc : SLinkOperations.getTargets(meetWrapper2, "argument", true)) {
        ListSequence.fromList(SLinkOperations.getTargets(meetType, "argument", true)).addElement(HUtil.copyIfNecessary(bc));
      }
    } else {
      ListSequence.fromList(SLinkOperations.getTargets(meetType, "argument", true)).addElement(HUtil.copyIfNecessary(wrapper1.getNode()));
      ListSequence.fromList(SLinkOperations.getTargets(meetType, "argument", true)).addElement(HUtil.copyIfNecessary(wrapper2.getNode()));
    }
    return NodeWrapper.createWrapperFromNode(meetType, null);
  }

  public static IWrapper join(Set<IWrapper> wrappers) {
    if (wrappers.isEmpty()) {
      return null;
    }
    if (wrappers.size() == 1) {
      return wrappers.iterator().next();
    }
    Iterator<IWrapper> iterator = wrappers.iterator();
    IWrapper wrapper1 = iterator.next();
    IWrapper wrapper2 = iterator.next();
    Set<IWrapper> result = new HashSet<IWrapper>(wrappers);
    result.remove(wrapper1);
    result.remove(wrapper2);
    result.add(join(wrapper1, wrapper2));
    return join(result);
  }

  public static IWrapper meet(Set<IWrapper> wrappers) {
    if (wrappers.isEmpty()) {
      return null;
    }
    if (wrappers.size() == 1) {
      return wrappers.iterator().next();
    }
    Iterator<IWrapper> iterator = wrappers.iterator();
    IWrapper wrapper1 = iterator.next();
    IWrapper wrapper2 = iterator.next();
    Set<IWrapper> result = new HashSet<IWrapper>(wrappers);
    result.remove(wrapper1);
    result.remove(wrapper2);
    result.add(meet(wrapper1, wrapper2));
    return meet(result);
  }

  public static boolean isMeet(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.typesystem.structure.MeetType");
  }

  public static boolean isJoin(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.typesystem.structure.JoinType");
  }

  public static List<SNode> getMeetArguments(SNode meet) {
    return SLinkOperations.getTargets(SNodeOperations.as(meet, "jetbrains.mps.lang.typesystem.structure.MeetType"), "argument", true);
  }

  public static List<SNode> getJoinArguments(SNode join) {
    return SLinkOperations.getTargets(SNodeOperations.as(join, "jetbrains.mps.lang.typesystem.structure.JoinType"), "argument", true);
  }
}
