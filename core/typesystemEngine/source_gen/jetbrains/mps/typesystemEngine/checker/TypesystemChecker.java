package jetbrains.mps.typesystemEngine.checker;

/*Generated by MPS */

import jetbrains.mps.typesystem.inference.DefaultTypecheckingContextOwner;
import jetbrains.mps.checkers.INodeChecker;
import java.util.Set;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import java.util.HashSet;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import jetbrains.mps.typesystem.inference.ITypecheckingAction;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.util.Pair;
import java.util.List;

public class TypesystemChecker extends DefaultTypecheckingContextOwner implements INodeChecker {
  public TypesystemChecker() {
  }

  public String getCategory() {
    return "type system";
  }

  public Set<IErrorReporter> getErrors(SNode rootNode, IOperationContext context) {
    final Set<IErrorReporter> result = new HashSet<IErrorReporter>();
    TypeContextManager.getInstance().runTypeCheckingAction(this, rootNode, new ITypecheckingAction() {
      public void run(TypeCheckingContext typeCheckingContext) {
        Set<Pair<SNode, List<IErrorReporter>>> nodeWithErrors = typeCheckingContext.checkRootAndGetErrors(true);
        for (Pair<SNode, List<IErrorReporter>> pair : nodeWithErrors) {
          result.addAll(pair.o2);
        }
      }
    });
    return result;
  }
}
