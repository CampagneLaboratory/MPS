package jetbrains.mps.persistence.java.library;

/*Generated by MPS */

import jetbrains.mps.extapi.model.ReloadableSModelBase;
import jetbrains.mps.smodel.SModel;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.extapi.persistence.FolderSetDataSource;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.baseLanguage.javastub.ASMModelLoader;
import jetbrains.mps.smodel.nodeidmap.ForeignNodeIdMap;
import java.util.Collection;
import jetbrains.mps.smodel.loading.PartialModelUpdateFacility;
import org.jetbrains.mps.openapi.language.SLanguage;
import java.util.Set;
import java.util.Collections;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.smodel.SModelRepository;

public class JavaClassStubModelDescriptor extends ReloadableSModelBase {
  private SModel myModel;
  private boolean mySkipPrivate;
  public JavaClassStubModelDescriptor(SModelReference modelReference, FolderSetDataSource source) {
    super(modelReference, source);
  }
  /*package*/ void setSkipPrivate(boolean skipPrivateMembers) {
    mySkipPrivate = skipPrivateMembers;
  }
  @Override
  protected SModel getCurrentModelInternal() {
    return myModel;
  }
  @NotNull
  @Override
  public FolderSetDataSource getSource() {
    return (FolderSetDataSource) super.getSource();
  }
  @Override
  public SModel getSModelInternal() {
    if (myModel == null) {
      synchronized (this) {
        if (myModel != null) {
          return myModel;
        }
        myModel = createModel();
        myModel.setModelDescriptor(this);
      }
      fireModelStateChanged(ModelLoadingState.INTERFACE_LOADED);
    }
    return myModel;
  }

  @Override
  public boolean isLoaded() {
    return getLoadingState() == ModelLoadingState.FULLY_LOADED;
  }

  private volatile boolean myIsLoadInProgress;

  @Override
  public void load() {
    SModel mi = getSModelInternal();
    if (mi.isUpdateMode()) {
      return;
    }
    if (myIsLoadInProgress) {
      return;
    }
    if (getLoadingState() == ModelLoadingState.INTERFACE_LOADED) {
      myIsLoadInProgress = true;
      ASMModelLoader loader = new ASMModelLoader(getModule(), getSource().getPaths());
      loader.skipPrivateMembers(mySkipPrivate);
      SModel completeModelData = new SModel(getReference(), new ForeignNodeIdMap());
      Collection<SModelReference> imports = loader.completeModel(this, completeModelData);
      mi.setUpdateMode(true);
      completeModelData.setUpdateMode(true);
      new PartialModelUpdateFacility(mi, completeModelData, this).update();
      for (SModelReference mr : imports) {
        mi.addModelImport(new SModel.ImportElement(mr));
      }
      completeModelData.setUpdateMode(false);
      mi.setUpdateMode(false);
      myIsLoadInProgress = false;
      fireModelStateChanged(ModelLoadingState.FULLY_LOADED);
    }

  }

  @Override
  public void unload() {
    assertCanChange();

    SModel oldModel = myModel;
    if (oldModel != null) {
      oldModel.setModelDescriptor(null);
      myModel = null;
      fireModelStateChanged(ModelLoadingState.NOT_LOADED);
    }
  }
  private SModel createModel() {
    SModel model = new SModel(getReference(), new ForeignNodeIdMap());
    for (SLanguage l : getLanguagesToImport()) {
      model.addLanguage(l);
    }
    ASMModelLoader loader = new ASMModelLoader(getModule(), getSource().getPaths());
    loader.skipPrivateMembers(mySkipPrivate);
    loader.populateRoots(model);
    return model;
  }
  private Set<SLanguage> getLanguagesToImport() {
    return Collections.singleton(MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L), "jetbrains.mps.baseLanguage"));
  }

  @Override
  public Collection<SLanguage> importedLanguageIds() {
    return getLanguagesToImport();
  }

  @Override
  public List<SModuleReference> importedDevkits() {
    return Collections.emptyList();
  }

  @Override
  public void reloadFromDiskSafe() {
    assertCanChange();
    if (getSource().getPaths().isEmpty()) {
      SModelRepository.getInstance().deleteModel(this);
      return;
    }
    reload();
    updateTimestamp();
  }
  private void reload() {
    if (myModel == null) {
      return;
    }
    final SModel oldModel = myModel;
    myModel = createModel();
    replaceModelAndFireEvent(oldModel, myModel);
    fireModelStateChanged(ModelLoadingState.INTERFACE_LOADED);
  }
}
