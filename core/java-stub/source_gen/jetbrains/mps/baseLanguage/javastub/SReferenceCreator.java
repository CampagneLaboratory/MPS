package jetbrains.mps.baseLanguage.javastub;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import java.util.Collection;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.SModelLegacy;
import jetbrains.mps.smodel.DynamicReference;

public class SReferenceCreator implements SReferenceHandler {
  private final StubModelsResolver myModuleDeps;
  private final SModel myModel;
  private final String myModelLongName;
  private final SModelReference myModelReference;
  public SReferenceCreator(SModule module, SModel model) {
    myModuleDeps = new StubModelsResolver(module);
    myModel = model;
    myModelReference = model.getReference();
    myModelLongName = NameUtil.getModelLongName(myModelReference.getModelName());
  }
  @Override
  public SReference createSReference(SNode source, String pack, SNodeId targetNodeId, SReferenceLink role, String resolveInfo, String rootPresentation) {
    if (pack.equals(myModelLongName)) {
      SNode nodeInSameModel = myModel.getNode(targetNodeId);
      if (nodeInSameModel != null) {
        return jetbrains.mps.smodel.SReference.create(role, source, myModelReference, targetNodeId, resolveInfo);
      }
    }

    Collection<SModelReference> possibleModels = myModuleDeps.resolveModel(SModelStereotype.withStereotype(pack, SModelStereotype.JAVA_STUB));

    if (possibleModels.isEmpty()) {
      return jetbrains.mps.smodel.SReference.create(role, source, null, targetNodeId, resolveInfo);
    }

    for (SModelReference mr : possibleModels) {
      if (myModelReference.equals(mr)) {
        continue;
      }
      new SModelLegacy(myModel).addModelImport(mr, false);
    }

    if (possibleModels.size() > 1) {
      return DynamicReference.createDynamicReference(role, source, pack, resolveInfo);
    }

    // only one possible model 
    SModelReference targetModel = possibleModels.iterator().next();

    return jetbrains.mps.smodel.SReference.create(role, source, targetModel, targetNodeId, resolveInfo);
  }
}
