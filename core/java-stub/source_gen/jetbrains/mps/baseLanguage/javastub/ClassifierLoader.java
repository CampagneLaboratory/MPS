package jetbrains.mps.baseLanguage.javastub;

/*Generated by MPS */

import jetbrains.mps.java.stub.ReferenceFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.vfs.IFile;
import org.jetbrains.org.objectweb.asm.ClassReader;
import org.jetbrains.org.objectweb.asm.Opcodes;
import jetbrains.mps.stubs.javastub.classpath.ClassifierKind;
import org.jetbrains.mps.openapi.model.SNodeId;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.LazySNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.javastub.asm.ASMClass;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.ArrayList;
import org.jetbrains.org.objectweb.asm.tree.InnerClassNode;
import java.io.InputStream;
import jetbrains.mps.util.ReadUtil;
import java.io.IOException;

public class ClassifierLoader {
  private final ReferenceFactory myReferenceFactory;
  private final boolean mySkipPrivate;
  private final boolean myOnlyPublic;

  public ClassifierLoader(ReferenceFactory refFactory, boolean onlyPublic, boolean skipPrivate) {
    myReferenceFactory = refFactory;
    mySkipPrivate = skipPrivate;
    myOnlyPublic = onlyPublic;
  }

  public SNode createClassifier(IFile file) {
    byte[] code = readClass(file);
    if (code == null) {
      return null;
    }
    ClassReader classReader = new ClassReader(code);
    if (myOnlyPublic && (classReader.getAccess() & Opcodes.ACC_PUBLIC) == 0) {
      return null;
    }
    final String className = getClassName(file);
    return doCreateClassifier(classReader, className);
  }

  public void updateClassifier(SNode classifier, IFile file) {
    byte[] code = readClass(file);
    ClassReader classReader = new ClassReader(code);
    doUpdateClassifier(classifier, classReader, file);
  }

  private SNode doCreateClassifier(ClassReader classReader, String className) {
    final ClassifierKind kind = ClassifierKind.getClassifierKind(classReader);
    final SNodeId nodeId = ASMNodeId.createId(className);
    final String shortName = NameUtil.shortNameFromLongName(className.replace('$', '.'));
    SNode lazyRoot;
    switch (kind) {
      case CLASS:
        lazyRoot = new LazySNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), nodeId);
        break;
      case INTERFACE:
        lazyRoot = new LazySNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101edd46144L, "jetbrains.mps.baseLanguage.structure.Interface"), nodeId);
        break;
      case ENUM:
        lazyRoot = new LazySNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L, "jetbrains.mps.baseLanguage.structure.EnumClass"), nodeId);
        break;
      case ANNOTATIONS:
        lazyRoot = new LazySNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a69dc80cL, "jetbrains.mps.baseLanguage.structure.Annotation"), nodeId);
        break;
      default:
        return null;

    }
    SNode rv = SNodeOperations.as(lazyRoot, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    SPropertyOperations.set(rv, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), shortName);
    return rv;
  }

  private void doUpdateClassifier(SNode classifier, ClassReader classReader, IFile file) {
    ASMClass ac = new ASMClass(classReader);
    new ClassifierUpdater(ac, mySkipPrivate, myReferenceFactory).update(classifier);
    if (!(ac.getInnerClasses().isEmpty())) {
      List<SNode> innerClassifiers = updateInnerClassifiers(file, ac);
      ListSequence.fromList(SLinkOperations.getChildren(classifier, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).addSequence(ListSequence.fromList(innerClassifiers));
    }
  }

  private SNode getClassifier(IFile file) {
    byte[] code = readClass(file);
    if (code == null) {
      return null;
    }
    ClassReader classReader = new ClassReader(code);
    if (myOnlyPublic && (classReader.getAccess() & Opcodes.ACC_PUBLIC) == 0) {
      return null;
    }
    SNode res = doCreateClassifier(classReader, getClassName(file));
    doUpdateClassifier(res, classReader, file);
    return res;
  }

  private List<SNode> updateInnerClassifiers(IFile file, ASMClass ac) {
    List<SNode> rv = ListSequence.fromList(new ArrayList<SNode>());
    String outerName = ac.getName();
    IFile parent = file.getParent();
    for (InnerClassNode cn : ac.getInnerClasses()) {
      String name = cn.name;
      if (name == null) {
        // I doubt this could ever happen 
        continue;
      }
      if (cn.innerName == null) {
        // JVM spec, 4.7.6, inner_name_index - anonymous classes have no inner name 
        continue;
      }
      if ((cn.access & Opcodes.ACC_SYNTHETIC) != 0) {
        continue;
      }

      boolean isPrivate = (cn.access & Opcodes.ACC_PRIVATE) != 0;
      if (isPrivate && mySkipPrivate) {
        continue;
      }

      if (!(outerName.equals(cn.outerName))) {
        continue;
      }

      int index = name.lastIndexOf('/');
      if (index != -1) {
        name = name.substring(index + 1);
      }

      boolean isStatic = (cn.access & Opcodes.ACC_STATIC) != 0;

      SNode inner = getClassifier(parent.getDescendant(name + ".class"));
      SPropertyOperations.set(inner, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x73c6d8a8c021f99L, "nonStatic"), "" + (!(isStatic)));
      ListSequence.fromList(rv).addElement(inner);
    }
    return rv;
  }

  public byte[] readClass(IFile file) {
    try {
      byte[] result = null;
      InputStream inp = null;
      try {
        inp = file.openInputStream();
        result = ReadUtil.read(inp);
      } finally {
        if (inp != null) {
          inp.close();
        }
      }
      return result;
    } catch (IOException e) {
      return null;
    }
  }

  public static String getClassName(IFile file) {
    String name = file.getName();
    return name.substring(0, name.indexOf("."));
  }
}
