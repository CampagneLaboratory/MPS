package jetbrains.mps.ide.findusages.model;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.IExternalizeable;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.ide.findusages.model.holders.IHolder;
import jetbrains.mps.ide.findusages.model.holders.VoidHolder;
import org.jdom.Element;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.findusages.CantLoadSomethingException;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.ide.findusages.model.holders.ModelHolder;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.findusages.model.holders.NodeHolder;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.ide.findusages.model.holders.ModuleHolder;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.findusages.CantSaveSomethingException;
import jetbrains.mps.ide.findusages.model.scopes.FindUsagesScope;

public class SearchQuery implements IExternalizeable {
  private static final String HOLDER = "holder";
  private static final String HOLDER_CLASS = "holder_class";
  private SearchScope myScope;
  private IHolder myObjectHolder = new VoidHolder();
  public SearchQuery(Element element, Project project) throws CantLoadSomethingException {
    read(element, project);
  }
  public SearchQuery(IHolder objectHolder, SearchScope scope) {
    myScope = scope;
    myObjectHolder = objectHolder;
  }
  public SearchQuery(SModelReference modelReference, SearchScope scope) {
    this(new ModelHolder(modelReference), scope);
  }
  public SearchQuery(SNode node, SearchScope scope) {
    this(new NodeHolder(node), scope);
  }
  public SearchQuery(SModule module, SearchScope scope) {
    this(new ModuleHolder(module), scope);
  }
  public SearchQuery(SearchScope scope) {
    this(new VoidHolder(), scope);
  }
  public SearchScope getScope() {
    return myScope;
  }
  public IHolder getObjectHolder() {
    return myObjectHolder;
  }
  @NotNull
  public String getCaption() {
    return myObjectHolder.getCaption();
  }
  @Override
  public void write(Element element, Project project) throws CantSaveSomethingException {
    if (myScope instanceof FindUsagesScope) {
      FindUsagesScope.save((FindUsagesScope) myScope, element, project);
    } else {
      throw new CantSaveSomethingException("unsupported scope " + myScope.getClass() + "; should be descendant of FindUsagesScope class");
    }
    Element holderXML = new Element(HOLDER);
    holderXML.setAttribute(HOLDER_CLASS, myObjectHolder.getClass().getName());
    myObjectHolder.write(holderXML, project);
    element.addContent(holderXML);
  }
  @Override
  public void read(Element element, Project project) throws CantLoadSomethingException {
    myScope = FindUsagesScope.load(element, project);
    Element holderXML = element.getChild(HOLDER);
    String holderClass = holderXML.getAttributeValue(HOLDER_CLASS);
    try {
      myObjectHolder = (IHolder) Class.forName(holderClass).getConstructor(Element.class, Project.class).newInstance(holderXML, project);
    } catch (Exception e) {
      throw new CantLoadSomethingException(e);
    }
  }
}
