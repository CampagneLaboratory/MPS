package jetbrains.mps.ide.findusages.findalgorithm.finders;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.findusages.FindersManager;
import org.jetbrains.mps.openapi.module.SearchScope;
import java.util.List;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.ide.findusages.model.holders.IHolder;
import jetbrains.mps.ide.findusages.model.holders.NodeHolder;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.ide.findusages.model.SearchResult;

public abstract class GeneratedFinder implements IInterfacedFinder {
  private static final Logger LOG = LogManager.getLogger(GeneratedFinder.class);

  public GeneratedFinder() {
  }

  @Override
  public boolean isApplicable(SNode node) {
    return true;
  }

  @Override
  public boolean isVisible(SNode node) {
    return true;
  }

  @Override
  public boolean isUsedByDefault(SNode node) {
    return false;
  }

  @Override
  public String getLongDescription() {
    return "";
  }

  @Override
  public SNode getNodeToNavigate() {
    final SNode[] finderNode = new SNode[]{null};
    ModelAccess.instance().runReadAction(new Runnable() {
      @Override
      public void run() {
        finderNode[0] = FindersManager.getInstance().getNodeByFinder(GeneratedFinder.this);
      }
    });
    return finderNode[0];
  }

  @Override
  public boolean canNavigate() {
    return true;
  }

  protected abstract void doFind(SNode node, SearchScope scope, List<SNode> _results, ProgressMonitor monitor);

  public void getSearchedNodes(SNode node, SearchScope scope, List<SNode> _results) {
    _results.add(node);
  }

  public String getNodeCategory(SNode node) {
    return "Uncategorized";
  }

  @Override
  public SearchResults<SNode> find(SearchQuery query, ProgressMonitor monitor) {
    SearchResults<SNode> results = new SearchResults<SNode>();
    IHolder holder = query.getObjectHolder();
    assert holder instanceof NodeHolder;
    SNode node = ((NodeHolder) holder).getObject();
    SConcept c = SConceptRepository.getInstance().getInstanceConcept(getConcept());
    if (node.getConcept().isSubConceptOf(c) && isApplicable(node)) {
      List<SNode> resSN = ListSequence.fromList(new ArrayList<SNode>());
      getSearchedNodes(node, query.getScope(), resSN);
      for (SNode resnode : resSN) {
        results.getSearchedNodes().add(resnode);
      }
      List<SNode> res = new ArrayList<SNode>();
      doFind(node, query.getScope(), res, monitor);
      for (SNode resnode : res) {
        results.getSearchResults().add(new SearchResult<SNode>(resnode, getNodeCategory(resnode)));
      }
    } else {
      LOG.debug("Trying to use finder that is not applicable to the concept. Returning empty results.[finder: \"" + getDescription() + "\"; " + "concept: " + node.getConcept().getQualifiedName());
    }
    return results;
  }
}
