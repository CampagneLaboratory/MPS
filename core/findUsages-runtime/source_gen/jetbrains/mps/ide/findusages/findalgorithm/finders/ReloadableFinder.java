package jetbrains.mps.ide.findusages.findalgorithm.finders;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.lang.ref.WeakReference;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.progress.ProgressMonitor;

public class ReloadableFinder implements IInterfacedFinder {
  private static final Logger LOG = LogManager.getLogger(ReloadableFinder.class);
  private ModuleClassReference<GeneratedFinder> myModuleClassRef;
  private WeakReference<GeneratedFinder> myFinder = new WeakReference<GeneratedFinder>(null);

  public ReloadableFinder(SModuleReference moduleRef, String finderClass) {
    myModuleClassRef = new ModuleClassReference(moduleRef, finderClass);
  }

  public ReloadableFinder(SModuleReference moduleReference, GeneratedFinder finder) {
    this(moduleReference, finder.getClass().getName());
    myFinder = new WeakReference<GeneratedFinder>(finder);
  }

  public GeneratedFinder getFinder() {
    if (myFinder.get() == null) {
      Class<GeneratedFinder> finderClass = myModuleClassRef.loadClass();
      GeneratedFinder finder = null;
      try {
        finder = finderClass.newInstance();
      } catch (Throwable t) {
        LOG.error(t);
        return null;
      }
      myFinder = new WeakReference<GeneratedFinder>(finder);
    }
    return myFinder.get();
  }

  @Override
  public String getConcept() {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return "";
    }
    return finder.getConcept();
  }

  @Override
  public boolean isApplicable(SNode node) {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return false;
    }
    return finder.isApplicable(node);
  }

  @Override
  public boolean isVisible(SNode node) {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return false;
    }
    return finder.isVisible(node);
  }

  @Override
  public boolean isUsedByDefault(SNode node) {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return false;
    }
    return finder.isUsedByDefault(node);
  }

  @Override
  public String getDescription() {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return "";
    }
    return finder.getDescription();
  }

  @Override
  public String getLongDescription() {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return "";
    }
    return finder.getLongDescription();
  }

  @Override
  public boolean canNavigate() {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return false;
    }
    return finder.canNavigate();
  }

  @Override
  public SNode getNodeToNavigate() {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return null;
    }
    return finder.getNodeToNavigate();
  }

  @Override
  public SearchResults<SNode> find(SearchQuery query, ProgressMonitor monitor) {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return new SearchResults();
    }
    return finder.find(query, monitor);
  }
}
