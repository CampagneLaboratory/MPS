package jetbrains.mps.workflow.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.workflow.behavior.FacetDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNodePointer;

public class TargetDeclaration_overrides_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {
  public TargetDeclaration_overrides_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.workflow.structure.TargetDeclaration", "overrides", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.workflow.structure.TargetDeclaration", "overrides");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    return Sequence.fromIterable(FacetDeclaration_Behavior.call_allExtends_7854369758457864780(SNodeOperations.as(_context.getEnclosingNode(), "jetbrains.mps.workflow.structure.FacetDeclaration"))).skip(1).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode fd) {
        return SLinkOperations.getTargets(fd, "targetDeclaration", true);
      }
    });
  }

  public SNodePointer getSearchScopeValidatorNodePointer() {
    return new SNodePointer("r:6df86908-c97f-4644-97f0-5eff375e8e15(jetbrains.mps.workflow.constraints)", "7854369758457971300");
  }
}
