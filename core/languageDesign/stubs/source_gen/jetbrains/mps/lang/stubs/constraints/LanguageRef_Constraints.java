package jetbrains.mps.lang.stubs.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ConstraintsDataHolder;
import java.util.Map;
import jetbrains.mps.smodel.constraints.INodePropertyGetter;
import java.util.HashMap;
import jetbrains.mps.smodel.constraints.BaseNodePropertyGetter;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;

public class LanguageRef_Constraints extends ConstraintsDataHolder {
  public LanguageRef_Constraints() {
  }

  public String getConceptFqName() {
    return "jetbrains.mps.lang.stubs.structure.LanguageRef";
  }

  public Map<String, INodePropertyGetter> getNodePropertyGetters() {
    HashMap<String, INodePropertyGetter> result = new HashMap<String, INodePropertyGetter>();
    result.put("languageFqName", new BaseNodePropertyGetter() {
      public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
        if (StringUtils.isEmpty(SPropertyOperations.getString(node, "languageId"))) {
          return null;
        }

        ModuleId moduleId = ModuleId.fromString(SPropertyOperations.getString(node, "languageId"));
        if (moduleId == null) {
          return null;
        }

        IModule module = MPSModuleRepository.getInstance().getModuleById(moduleId);
        if (module == null) {
          return moduleId.toString();
        }

        return module.getModuleFqName();
      }
    });
    return result;
  }
}
