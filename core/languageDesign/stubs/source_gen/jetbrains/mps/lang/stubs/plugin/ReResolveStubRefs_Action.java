package jetbrains.mps.lang.stubs.plugin;

/*Generated by MPS */

import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.*;
import jetbrains.mps.smodel.SModel.ImportElement;
import jetbrains.mps.smodel.SModelId.ForeignSModelId;
import jetbrains.mps.smodel.SModelId.RegularSModelId;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.workbench.MPSDataKeys;
import org.jetbrains.annotations.NotNull;

import javax.swing.Icon;
import javax.swing.JOptionPane;
import java.awt.Frame;
import java.util.*;

public class ReResolveStubRefs_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(ReResolveStubRefs_Action.class);

  public ReResolveStubRefs_Action() {
    super("Re-resolve Stub Refs (2)", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ReResolveStubRefs", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      int i = 0;
      for (SModelDescriptor d : SModelRepository.getInstance().getModelDescriptors()) {
        if (!(d instanceof EditableSModelDescriptor)) {
          continue;
        }
        if (!(SModelStereotype.isUserModel(d))) {
          continue;
        }

        if (d == null) {
          continue;
        }
        IModule module = d.getModule();
        if (module == null) {
          continue;
        }

        Set<SModelReference> toRemove = new HashSet<SModelReference>();
        for (SNode node : d.getSModel().nodes()) {
          for (SReference ref : node.getReferences()) {
            SModelId modelId = ref.getTargetSModelReference().getSModelId();
            SNodeId nodeId = ref.getTargetNodeId();

            if (modelId instanceof SModelId.RegularSModelId) {
              continue;
            }
            if (ref.getTargetNode() != null) {
              continue;
            }

            for (SModelDescriptor md : module.getScope().getModelDescriptors()) {
              SModelReference mr = md.getSModelReference();
              SModelId tryModelId = mr.getSModelId();
              if (tryModelId instanceof SModelId.RegularSModelId) {
                continue;
              }

              if (!(ReResolveStubRefs_Action.this.matches(((SModelId.ForeignSModelId) modelId).getId(), ((SModelId.ForeignSModelId) tryModelId).getId(), _params))) {
                continue;
              }

              if (md.getSModel().getNodeById(nodeId) == null) {
                continue;
              }

              toRemove.add(ref.getTargetSModelReference());

              d.getSModel().addModelImport(mr, false);
              ref.setTargetSModelReference(mr);

              i++;
              break;
            }
          }
        }

/*
        for (ImportElement ie:d.getSModel().importedModels()){
          SModelId id = ie.getModelReference().getSModelId();
          if (!(id instanceof ForeignSModelId)) continue;
          String s = ((ForeignSModelId) id).getId();
          if (s.indexOf("#")!=s.lastIndexOf("#")) continue;

          toRemove.add(ie.getModelReference());
        }
*/

        for (SModelReference ref : toRemove) {
          d.getSModel().deleteModelImport(ref);
        }
      }
      JOptionPane.showMessageDialog(((Frame) MapSequence.fromMap(_params).get("frame")), i + " problems fixed");
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ReResolveStubRefs", t);
    }
  }

  /*package*/ boolean matches(String id1, String id2, final Map<String, Object> _params) {
    String id1Ste = id1.substring(0, id1.indexOf("#"));
    String id2Ste = id2.substring(0, id1.indexOf("#"));

    if (!(id1Ste.equals(id2Ste))) {
      return false;
    }

    String id1M = id1.substring(id1.lastIndexOf("#") + 1, id1.length());
    String id2M = id2.substring(id2.lastIndexOf("#") + 1, id2.length());

    if (!(id1M.equals(id2M))) {
      return false;
    }

    return true;
  }
}
