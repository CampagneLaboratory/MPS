package jetbrains.mps.lang.stubs.plugin;

/*Generated by MPS */

import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.smodel.*;
import jetbrains.mps.smodel.SModelId.ForeignSModelId;
import jetbrains.mps.workbench.MPSDataKeys;
import org.jetbrains.annotations.NotNull;

import javax.swing.Icon;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class UpdateModuleStubDeps_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(UpdateModuleStubDeps_Action.class);

  public UpdateModuleStubDeps_Action() {
    super("Upgrade Module Stub Deps (1)", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "UpdateModuleStubDeps", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      ModelAccess.instance().runWriteAction(new Runnable() {
        @Override
        public void run() {
          for (Language l : MPSModuleRepository.getInstance().getAllLanguages()) {
            Set<SModelReference> toRemove = new HashSet<SModelReference>();
            Set<SModelReference> toAdd = new HashSet<SModelReference>();

            List<SModelReference> acc = l.getModuleDescriptor().getAccessoryModels();

            for (SModelReference ref : acc) {
              if (!(ref.getSModelId() instanceof ForeignSModelId)) continue;

              toRemove.add(ref);

              for (SModelDescriptor md: l.getScope().getModelDescriptors()){
                if (md.getLongName().equals(ref.getLongName())){
                  toAdd.add(md.getSModelReference());
                }
              }
            }

            acc.removeAll(toRemove);
            acc.addAll(toAdd);

            l.save();
          }

        }
      });
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "UpdateModuleStubDeps", t);
    }
  }
}
