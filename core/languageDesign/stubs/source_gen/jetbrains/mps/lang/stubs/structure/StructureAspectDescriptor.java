package jetbrains.mps.lang.stubs.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.ConceptRegistry;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    int hash = conceptFqName.hashCode();
    if (hash == 1797502757) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.StubsCreatorDeclaration", "jetbrains.mps.lang.stubs.structure.AbstractModelCreator");
    }
    if (hash == 609152443) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.UpdateModelBlock", "jetbrains.mps.baseLanguage.structure.ConceptFunction");
    }
    if (hash == -1845154588) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.ModelDescriptorsBlock", "jetbrains.mps.baseLanguage.structure.ConceptFunction");
    }
    if (hash == -1706380243) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.LanguageRef", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -1559100163) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.ModelCreationSettings", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -1427075749) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.RootNodeDescriptorsBlock", "jetbrains.mps.baseLanguage.structure.ConceptFunction");
    }
    if (hash == -465229033) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.StubLocation_ConceptFunctionParameter", "jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter");
    }
    if (hash == -266998195) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.Model_ConceptFunctionParameter", "jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter");
    }
    if (hash == 1447561199) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.StubsCreatorType", "jetbrains.mps.lang.stubs.structure.BaseCreatorType");
    }
    if (hash == 948100147) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.AbstractModelCreator", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifier", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier");
    }
    if (hash == -979605080) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.ModelManagerDeclaration", "jetbrains.mps.lang.stubs.structure.AbstractModelCreator");
    }
    if (hash == -612237561) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.BaseCreatorType", "jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType");
    }
    if (hash == -281292084) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.ModelManagerType", "jetbrains.mps.lang.stubs.structure.BaseCreatorType");
    }
    if (hash == 124304362) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.LibraryStubDescriptor", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == 392713412) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.GetRootsBlock", "jetbrains.mps.baseLanguage.structure.ConceptFunction");
    }
    if (hash == 1087011552) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.Stereotype", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    if (hash == -1382459549) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.InitModuleBlock", "jetbrains.mps.baseLanguage.structure.ConceptFunction");
    }
    if (hash == 200906209) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.Solution_ConceptFunctionParameter", "jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter");
    }
    if (hash == -1458886093) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.stubs.structure.StubSource_ConcteptFunctionParameter", "jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter");
    }
    return null;
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private ImmutableSet<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String... parents) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, parents);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static ImmutableSet<String> getAncestors(String conceptFqName, String... parents) {
      List<String> result = new ArrayList();

      result.add(conceptFqName);
      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : parents) {
        result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
      }
      return ImmutableSet.copyOf(result);
    }
  }
}
