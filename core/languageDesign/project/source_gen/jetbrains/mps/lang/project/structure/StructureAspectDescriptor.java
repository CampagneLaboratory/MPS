package jetbrains.mps.lang.project.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.ConceptRegistry;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    int hash = conceptFqName.hashCode();
    if (hash == 312108934) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.Module", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == -1720355342) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.Language", "jetbrains.mps.lang.project.structure.Module");
    }
    if (hash == 1385181203) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.Solution", "jetbrains.mps.lang.project.structure.Module");
    }
    if (hash == 1272187769) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.Generator", "jetbrains.mps.lang.project.structure.Module");
    }
    if (hash == 1880615228) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.ModelReference", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -2097420431) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.ModuleDependency", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == 45707163) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.DevKit", "jetbrains.mps.lang.project.structure.Module");
    }
    if (hash == 1519260628) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.MappingPriorityRule", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -437776795) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.ModuleReference", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -1074545398) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.StubEntry", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -1025465263) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.ModelRoot", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -182471140) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.ModelRootManager", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -411166258) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.MappingConfigRefBase", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == 1661022151) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.MappingConfigRefAllGlobal", "jetbrains.mps.lang.project.structure.MappingConfigRefBase");
    }
    if (hash == 889560775) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.MappingConfigRefAllLocal", "jetbrains.mps.lang.project.structure.MappingConfigRefBase");
    }
    if (hash == 2064963013) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.MappingConfigRefSet", "jetbrains.mps.lang.project.structure.MappingConfigRefBase");
    }
    if (hash == -2109693066) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.MappingConfigNormalRef", "jetbrains.mps.lang.project.structure.MappingConfigRefBase");
    }
    if (hash == -1069959278) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.MappingConfigExternalRef", "jetbrains.mps.lang.project.structure.MappingConfigRefBase");
    }
    if (hash == -2099957279) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.StubSolution", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -634167558) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.project.structure.SourcePath", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    return null;
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private ImmutableSet<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String... parents) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, parents);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static ImmutableSet<String> getAncestors(String conceptFqName, String... parents) {
      List<String> result = new ArrayList();

      result.add(conceptFqName);
      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : parents) {
        result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
      }
      return ImmutableSet.copyOf(result);
    }
  }
}
