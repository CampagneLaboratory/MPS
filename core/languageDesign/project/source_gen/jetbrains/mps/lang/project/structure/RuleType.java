package jetbrains.mps.lang.project.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;

public enum RuleType {
  strictly_before("<", "strictly_before"),
  strictly_together("=", "strictly_together"),
  before_or_together("<=", "before_or_together");

  private String myName;
  private String myValue;

  RuleType(String name, String value) {
    this.myName = name;
    this.myValue = value;
  }

  public String getName() {
    return this.myName;
  }

  public String getValueAsString() {
    return this.myValue;
  }

  public String getValue() {
    return this.myValue;
  }

  public static List<RuleType> getConstants() {
    List<RuleType> list = ListSequence.fromList(new LinkedList<RuleType>());
    ListSequence.fromList(list).addElement(RuleType.strictly_before);
    ListSequence.fromList(list).addElement(RuleType.strictly_together);
    ListSequence.fromList(list).addElement(RuleType.before_or_together);
    return list;
  }

  public static RuleType getDefault() {
    return RuleType.strictly_before;
  }

  public static RuleType parseValue(String value) {
    if (value == null) {
      return RuleType.getDefault();
    }
    if (value.equals(RuleType.strictly_before.getValueAsString())) {
      return RuleType.strictly_before;
    }
    if (value.equals(RuleType.strictly_together.getValueAsString())) {
      return RuleType.strictly_together;
    }
    if (value.equals(RuleType.before_or_together.getValueAsString())) {
      return RuleType.before_or_together;
    }
    return RuleType.getDefault();
  }
}
