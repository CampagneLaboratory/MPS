package jetbrains.mps.lang.behavior.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cells.EditorCell_Indent;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.style.Padding;
import jetbrains.mps.nodeEditor.style.EnumMeasure;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.lang.sharedConcepts.editor.SharedStyles_StyleSheet;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.nodeEditor.MPSColors;

public class ConceptBehavior_Editor extends DefaultNodeEditor {

  /* package */AbstractCellListHandler myListHandler_1225194241770;
  /* package */AbstractCellListHandler myListHandler_1225194241785;
  /* package */AbstractCellListHandler myListHandler_1225194241813;
  /* package */AbstractCellListHandler myListHandler_1225194241816;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection1225194241669(context, node);
  }

  public EditorCell createCollection1225194241669(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_12251942416691225194241669(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createCollection1225194241670(context, node));
    editorCell.addEditorCell(this.createCollection1225194241677(context, node));
    editorCell.addEditorCell(this.createConstant1225194241819(context, node, "}"));
    return editorCell;
  }

  public EditorCell createCollection1225194241670(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12251942416701225194241670(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1225194241671(context, node, "concept behavior"));
    editorCell.addEditorCell(this.createRefCell1225194241672(context, node));
    editorCell.addEditorCell(this.createConstant1225194241675(context, node, "{"));
    return editorCell;
  }

  public EditorCell createCollection1225194241677(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12251942416771225194241677(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createIndentCell1330_0(context, node));
    editorCell.addEditorCell(this.createCollection1225194241679(context, node));
    return editorCell;
  }

  public EditorCell createCollection1225194241679(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_12251942416791225194241679(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1225194241680(context, node, ""));
    if (renderingCondition1330_0(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection1225194241682(context, node));
    }
    if (renderingCondition1330_3(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection1225194241700(context, node));
    }
    if (renderingCondition1330_6(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection1225194241733(context, node));
    }
    editorCell.addEditorCell(this.createRefNode1225194241766(context, node));
    editorCell.addEditorCell(this.createConstant1225194241767(context, node, ""));
    if (renderingCondition1330_7(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection1225194241769(context, node));
    }
    if (renderingCondition1330_8(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection1225194241784(context, node));
    }
    if (renderingCondition1330_9(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection1225194241799(context, node));
    }
    editorCell.addEditorCell(this.createRefNodeList1225194241813(context, node));
    editorCell.addEditorCell(this.createRefNodeList1225194241816(context, node));
    return editorCell;
  }

  public EditorCell createCollection1225194241682(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_12251942416821225194241682(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createCollection1225194241683(context, node));
    editorCell.addEditorCell(this.createConstant1225194241689(context, node, ""));
    return editorCell;
  }

  public EditorCell createCollection1225194241683(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12251942416831225194241683(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1225194241684(context, node, "default concrete concept:"));
    editorCell.addEditorCell(this.createRefCell1225194241685(context, node));
    return editorCell;
  }

  public EditorCell createCollection1225194241700(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_12251942417001225194241700(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createCollection1225194241701(context, node));
    if (renderingCondition1330_2(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createRefNode1225194241713(context, node));
    }
    editorCell.addEditorCell(this.createConstant1225194241722(context, node, ""));
    return editorCell;
  }

  public EditorCell createCollection1225194241701(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12251942417011225194241701(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1225194241702(context, node, "can be child"));
    if (renderingCondition1330_1(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createRefNode1225194241703(context, node));
    }
    return editorCell;
  }

  public EditorCell createCollection1225194241733(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_12251942417331225194241733(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createCollection1225194241734(context, node));
    if (renderingCondition1330_5(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createRefNode1225194241746(context, node));
    }
    editorCell.addEditorCell(this.createConstant1225194241755(context, node, ""));
    return editorCell;
  }

  public EditorCell createCollection1225194241734(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12251942417341225194241734(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1225194241735(context, node, "can be parent"));
    if (renderingCondition1330_4(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createRefNode1225194241736(context, node));
    }
    return editorCell;
  }

  public EditorCell createCollection1225194241769(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_12251942417691225194241769(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createRefNodeList1225194241770(context, node));
    editorCell.addEditorCell(this.createConstant1225194241773(context, node, ""));
    return editorCell;
  }

  public EditorCell createCollection1225194241784(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_12251942417841225194241784(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createRefNodeList1225194241785(context, node));
    editorCell.addEditorCell(this.createConstant1225194241788(context, node, ""));
    return editorCell;
  }

  public EditorCell createCollection1225194241799(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_12251942417991225194241799(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1225194241800(context, node, "default scope"));
    editorCell.addEditorCell(this.createRefNode1225194241801(context, node));
    editorCell.addEditorCell(this.createConstant1225194241802(context, node, ""));
    return editorCell;
  }

  public EditorCell createConstant1225194241671(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942416711225194241671(editorCell, node, context);
    setupLabel_Constant_1225194241671_1225194241671(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241675(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942416751225194241675(editorCell, node, context);
    setupLabel_Constant_1225194241675_1225194241675(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241680(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942416801225194241680(editorCell, node, context);
    setupLabel_Constant_1225194241680_1225194241680(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241684(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942416841225194241684(editorCell, node, context);
    setupLabel_Constant_1225194241684_1225194241684(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241689(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942416891225194241689(editorCell, node, context);
    setupLabel_Constant_1225194241689_1225194241689(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241702(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942417021225194241702(editorCell, node, context);
    setupLabel_Constant_1225194241702_1225194241702(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241722(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942417221225194241722(editorCell, node, context);
    setupLabel_Constant_1225194241722_1225194241722(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241735(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942417351225194241735(editorCell, node, context);
    setupLabel_Constant_1225194241735_1225194241735(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241755(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942417551225194241755(editorCell, node, context);
    setupLabel_Constant_1225194241755_1225194241755(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241767(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942417671225194241767(editorCell, node, context);
    setupLabel_Constant_1225194241767_1225194241767(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241773(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942417731225194241773(editorCell, node, context);
    setupLabel_Constant_1225194241773_1225194241773(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241788(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942417881225194241788(editorCell, node, context);
    setupLabel_Constant_1225194241788_1225194241788(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241800(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942418001225194241800(editorCell, node, context);
    setupLabel_Constant_1225194241800_1225194241800(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241802(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942418021225194241802(editorCell, node, context);
    setupLabel_Constant_1225194241802_1225194241802(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1225194241819(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12251942418191225194241819(editorCell, node, context);
    setupLabel_Constant_1225194241819_1225194241819(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createRefNodeList1225194241770(EditorContext context, SNode node) {
    if (this.myListHandler_1225194241770 == null) {
      this.myListHandler_1225194241770 = new ConceptBehavior_Editor.propertiesListHandler_1330_0(node, "properties", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1225194241770.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_properties1225194241770(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.setRole(this.myListHandler_1225194241770.getElementRole());
    return editorCell;
  }

  public EditorCell createRefNodeList1225194241785(EditorContext context, SNode node) {
    if (this.myListHandler_1225194241785 == null) {
      this.myListHandler_1225194241785 = new ConceptBehavior_Editor.referencesListHandler_1330_0(node, "references", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1225194241785.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_references1225194241785(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.setRole(this.myListHandler_1225194241785.getElementRole());
    return editorCell;
  }

  public EditorCell createRefNodeList1225194241813(EditorContext context, SNode node) {
    if (this.myListHandler_1225194241813 == null) {
      this.myListHandler_1225194241813 = new ConceptBehavior_Editor.methodListHandler_1330_0(node, "method", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1225194241813.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_method1225194241813(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.setRole(this.myListHandler_1225194241813.getElementRole());
    return editorCell;
  }

  public EditorCell createRefNodeList1225194241816(EditorContext context, SNode node) {
    if (this.myListHandler_1225194241816 == null) {
      this.myListHandler_1225194241816 = new ConceptBehavior_Editor.staticMethodListHandler_1330_0(node, "staticMethod", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1225194241816.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_staticMethod1225194241816(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.setRole(this.myListHandler_1225194241816.getElementRole());
    return editorCell;
  }

  public EditorCell createIndentCell1330_0(EditorContext context, SNode node) {
    EditorCell_Indent result = new EditorCell_Indent(context, node);
    return result;
  }

  public EditorCell createRefCell1225194241672_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(new ConceptBehavior_Editor._Inline1330_0());
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refCell_concept1225194241672(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refCell_concept_1225194241672((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefCell1225194241672(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, context);
    provider.setRole("concept");
    provider.setNoTargetText("<no concept>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefCell1225194241672_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefCell1225194241685_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(new ConceptBehavior_Editor._Inline1330_1());
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refCell_defaultConcreteConcept1225194241685(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refCell_defaultConcreteConcept_1225194241685((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefCell1225194241685(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, context);
    provider.setRole("defaultConcreteConcept");
    provider.setNoTargetText("<no defaultConcreteConcept>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefCell1225194241685_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefNode1225194241703_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_canBeAChild1225194241703(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_canBeAChild_1225194241703((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1225194241703(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("canBeAChild");
    provider.setNoTargetText("<none>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1225194241703_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefNode1225194241713_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_canBeAChild1225194241713(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_canBeAChild_1225194241713((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1225194241713(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("canBeAChild");
    provider.setNoTargetText("<none>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1225194241713_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefNode1225194241736_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_canBeAParent1225194241736(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_canBeAParent_1225194241736((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1225194241736(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("canBeAParent");
    provider.setNoTargetText("<none>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1225194241736_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefNode1225194241746_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_canBeAParent1225194241746(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_canBeAParent_1225194241746((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1225194241746(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("canBeAParent");
    provider.setNoTargetText("<none>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1225194241746_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefNode1225194241766_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_constructor1225194241766(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_constructor_1225194241766((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1225194241766(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("constructor");
    provider.setNoTargetText("<no constructor>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1225194241766_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefNode1225194241801_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_defaultScope1225194241801(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_defaultScope_1225194241801((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1225194241801(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("defaultScope");
    provider.setNoTargetText("<no default scope>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1225194241801_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }


  private static void setupBasic_Collection_12251942416691225194241669(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1225194241669");
  }

  private static void setupBasic_Collection_12251942416701225194241670(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1225194241670");
  }

  private static void setupBasic_Constant_12251942416711225194241671(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241671");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
  }

  private static void setupBasic_refCell_concept1225194241672(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refCell_concept");
  }

  private static void setupBasic_Constant_12251942416751225194241675(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241675");
    BaseLanguageStyle_StyleSheet.getLeftBrace(editorCell).apply(editorCell);
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.PADDING_LEFT, new Padding(0.0, EnumMeasure.spaces));
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12251942416771225194241677(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1225194241677");
  }

  private static void setupBasic_Indent_12251942416781225194241678(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Indent_1225194241678");
  }

  private static void setupBasic_Collection_12251942416791225194241679(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1225194241679");
  }

  private static void setupBasic_Constant_12251942416801225194241680(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241680");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12251942416821225194241682(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1225194241682");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12251942416831225194241683(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1225194241683");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_12251942416841225194241684(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241684");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
  }

  private static void setupBasic_refCell_defaultConcreteConcept1225194241685(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refCell_defaultConcreteConcept");
  }

  private static void setupBasic_Constant_12251942416891225194241689(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241689");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12251942417001225194241700(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1225194241700");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12251942417011225194241701(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1225194241701");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_12251942417021225194241702(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241702");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
  }

  private static void setupBasic_refNode_canBeAChild1225194241703(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_refNode_canBeAChild1225194241713(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_12251942417221225194241722(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241722");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12251942417331225194241733(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1225194241733");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12251942417341225194241734(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1225194241734");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_12251942417351225194241735(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241735");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
  }

  private static void setupBasic_refNode_canBeAParent1225194241736(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_refNode_canBeAParent1225194241746(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_12251942417551225194241755(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241755");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_refNode_constructor1225194241766(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_12251942417671225194241767(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241767");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12251942417691225194241769(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1225194241769");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_refNodeList_properties1225194241770(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_properties");
  }

  private static void setupBasic_Constant_12251942417731225194241773(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241773");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12251942417841225194241784(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1225194241784");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_refNodeList_references1225194241785(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_references");
  }

  private static void setupBasic_Constant_12251942417881225194241788(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241788");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12251942417991225194241799(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1225194241799");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_12251942418001225194241800(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241800");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
  }

  private static void setupBasic_refNode_defaultScope1225194241801(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_12251942418021225194241802(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241802");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_refNodeList_method1225194241813(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_method");
  }

  private static void setupBasic_refNodeList_staticMethod1225194241816(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_staticMethod");
  }

  private static void setupBasic_Constant_12251942418191225194241819(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1225194241819");
    BaseLanguageStyle_StyleSheet.getRightParen(editorCell).apply(editorCell);
  }

  private static void setupLabel_Constant_1225194241671_1225194241671(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refCell_concept_1225194241672(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241675_1225194241675(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241680_1225194241680(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241684_1225194241684(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refCell_defaultConcreteConcept_1225194241685(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241689_1225194241689(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241702_1225194241702(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNode_canBeAChild_1225194241703(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNode_canBeAChild_1225194241713(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241722_1225194241722(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241735_1225194241735(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNode_canBeAParent_1225194241736(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNode_canBeAParent_1225194241746(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241755_1225194241755(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNode_constructor_1225194241766(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241767_1225194241767(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_properties_1225194241770(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241773_1225194241773(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_references_1225194241785(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241788_1225194241788(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241800_1225194241800(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNode_defaultScope_1225194241801(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241802_1225194241802(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_method_1225194241813(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_staticMethod_1225194241816(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1225194241819_1225194241819(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static boolean renderingCondition1330_0(SNode node, EditorContext editorContext, IScope scope) {
    return (SLinkOperations.getTarget(node, "defaultConcreteConcept", false) != null);
  }

  public static boolean renderingCondition1330_1(SNode node, EditorContext editorContext, IScope scope) {
    return SLinkOperations.getTarget(node, "canBeAChild", true) == null;
  }

  public static boolean renderingCondition1330_2(SNode node, EditorContext editorContext, IScope scope) {
    return SLinkOperations.getTarget(node, "canBeAChild", true) != null;
  }

  public static boolean renderingCondition1330_3(SNode node, EditorContext editorContext, IScope scope) {
    return (SLinkOperations.getTarget(node, "canBeAChild", true) != null);
  }

  public static boolean renderingCondition1330_4(SNode node, EditorContext editorContext, IScope scope) {
    return SLinkOperations.getTarget(node, "canBeAParent", true) == null;
  }

  public static boolean renderingCondition1330_5(SNode node, EditorContext editorContext, IScope scope) {
    return SLinkOperations.getTarget(node, "canBeAParent", true) != null;
  }

  public static boolean renderingCondition1330_6(SNode node, EditorContext editorContext, IScope scope) {
    return (SLinkOperations.getTarget(node, "canBeAParent", true) != null);
  }

  public static boolean renderingCondition1330_7(SNode node, EditorContext editorContext, IScope scope) {
    return ListSequence.fromList(SLinkOperations.getTargets(node, "properties", true)).isNotEmpty();
  }

  public static boolean renderingCondition1330_8(SNode node, EditorContext editorContext, IScope scope) {
    return ListSequence.fromList(SLinkOperations.getTargets(node, "references", true)).isNotEmpty();
  }

  public static boolean renderingCondition1330_9(SNode node, EditorContext editorContext, IScope scope) {
    return (SLinkOperations.getTarget(node, "defaultScope", true) != null);
  }

  public static class _Inline1330_0 extends AbstractCellProvider {

    public _Inline1330_0() {
      super();
    }

    public EditorCell createEditorCell(EditorContext context) {
      return this.createEditorCell(context, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext context, SNode node) {
      return this.createProperty1225194241674(context, node);
    }

    public EditorCell createProperty1225194241674_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
      CellProviderWithRole provider = aProvider;
      provider.setAuxiliaryCellProvider(null);
      EditorCell editorCell = provider.createEditorCell(context);
      setupBasic_property_name1225194241674(editorCell, node, context);
      if (editorCell instanceof EditorCell_Label) {
        setupLabel_property_name_1225194241674((EditorCell_Label)editorCell, node, context);
      }
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      return editorCell;
    }

    public EditorCell createProperty1225194241674(EditorContext context, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, context);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      provider.setAllowsEmptyTarget(false);
      EditorCell cellWithRole = this.createProperty1225194241674_internal(context, node, provider);
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = context.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
      } else
      return cellWithRole;
    }


    private static void setupBasic_property_name1225194241674(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("property_name");
      SharedStyles_StyleSheet.getReferenceOnConcept(editorCell).apply(editorCell);
    }

    private static void setupLabel_property_name_1225194241674(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}
  public static class _Inline1330_1 extends AbstractCellProvider {

    public _Inline1330_1() {
      super();
    }

    public EditorCell createEditorCell(EditorContext context) {
      return this.createEditorCell(context, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext context, SNode node) {
      return this.createProperty1225194241687(context, node);
    }

    public EditorCell createProperty1225194241687_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
      CellProviderWithRole provider = aProvider;
      provider.setAuxiliaryCellProvider(null);
      EditorCell editorCell = provider.createEditorCell(context);
      setupBasic_property_name1225194241687(editorCell, node, context);
      if (editorCell instanceof EditorCell_Label) {
        setupLabel_property_name_1225194241687((EditorCell_Label)editorCell, node, context);
      }
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      return editorCell;
    }

    public EditorCell createProperty1225194241687(EditorContext context, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, context);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      provider.setAllowsEmptyTarget(false);
      EditorCell cellWithRole = this.createProperty1225194241687_internal(context, node, provider);
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = context.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
      } else
      return cellWithRole;
    }


    private static void setupBasic_property_name1225194241687(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("property_name");
    }

    private static void setupLabel_property_name_1225194241687(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}
  public static class propertiesListHandler_1330_0 extends RefNodeListHandler {

    public propertiesListHandler_1330_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = this.createEmptyCell_internal(context, this.getOwner());
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public EditorCell createEmptyCell_internal(EditorContext context, SNode node) {
      return this.createConstant1225194241771(context, node, "<<property constraints>>");
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

    public EditorCell createConstant1225194241771(EditorContext context, SNode node, String text) {
      EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
      setupBasic_Constant_12251942417711225194241771(editorCell, node, context);
      setupLabel_Constant_1225194241771_1225194241771(editorCell, node, context);
      editorCell.setDefaultText("");
      return editorCell;
    }


    private static void setupBasic_Constant_12251942417711225194241771(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("Constant_1225194241771");
      {
        Style inlineStyle = new Style(editorCell) {
          {
            this.set(StyleAttributes.TEXT_COLOR, MPSColors.lightGray);
          }

        };
        inlineStyle.apply(editorCell);
      }
    }

    private static void setupLabel_Constant_1225194241771_1225194241771(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}
  public static class referencesListHandler_1330_0 extends RefNodeListHandler {

    public referencesListHandler_1330_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = this.createEmptyCell_internal(context, this.getOwner());
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public EditorCell createEmptyCell_internal(EditorContext context, SNode node) {
      return this.createConstant1225194241786(context, node, "<<reference constraints>>");
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

    public EditorCell createConstant1225194241786(EditorContext context, SNode node, String text) {
      EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
      setupBasic_Constant_12251942417861225194241786(editorCell, node, context);
      setupLabel_Constant_1225194241786_1225194241786(editorCell, node, context);
      editorCell.setDefaultText("");
      return editorCell;
    }


    private static void setupBasic_Constant_12251942417861225194241786(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("Constant_1225194241786");
      {
        Style inlineStyle = new Style(editorCell) {
          {
            this.set(StyleAttributes.TEXT_COLOR, MPSColors.lightGray);
          }

        };
        inlineStyle.apply(editorCell);
      }
    }

    private static void setupLabel_Constant_1225194241786_1225194241786(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}
  public static class methodListHandler_1330_0 extends RefNodeListHandler {

    public methodListHandler_1330_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = this.createEmptyCell_internal(context, this.getOwner());
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public EditorCell createEmptyCell_internal(EditorContext context, SNode node) {
      return this.createConstant1225194241814(context, node, "<<concept methods>>");
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

    public EditorCell createConstant1225194241814(EditorContext context, SNode node, String text) {
      EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
      setupBasic_Constant_12251942418141225194241814(editorCell, node, context);
      setupLabel_Constant_1225194241814_1225194241814(editorCell, node, context);
      editorCell.setDefaultText("");
      return editorCell;
    }


    private static void setupBasic_Constant_12251942418141225194241814(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("Constant_1225194241814");
      {
        Style inlineStyle = new Style(editorCell) {
          {
            this.set(StyleAttributes.TEXT_COLOR, MPSColors.lightGray);
          }

        };
        inlineStyle.apply(editorCell);
      }
    }

    private static void setupLabel_Constant_1225194241814_1225194241814(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}
  public static class staticMethodListHandler_1330_0 extends RefNodeListHandler {

    public staticMethodListHandler_1330_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = this.createEmptyCell_internal(context, this.getOwner());
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public EditorCell createEmptyCell_internal(EditorContext context, SNode node) {
      return this.createConstant1225194241817(context, node, "<<static concept methods>>");
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

    public EditorCell createConstant1225194241817(EditorContext context, SNode node, String text) {
      EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
      setupBasic_Constant_12251942418171225194241817(editorCell, node, context);
      setupLabel_Constant_1225194241817_1225194241817(editorCell, node, context);
      editorCell.setDefaultText("");
      return editorCell;
    }


    private static void setupBasic_Constant_12251942418171225194241817(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("Constant_1225194241817");
      {
        Style inlineStyle = new Style(editorCell) {
          {
            this.set(StyleAttributes.TEXT_COLOR, MPSColors.lightGray);
          }

        };
        inlineStyle.apply(editorCell);
      }
    }

    private static void setupLabel_Constant_1225194241817_1225194241817(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}

}
