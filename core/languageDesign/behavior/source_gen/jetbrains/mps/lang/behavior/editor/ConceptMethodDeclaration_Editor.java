package jetbrains.mps.lang.behavior.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.baseLanguage.editor._DeprecatedPart;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.lang.behavior.behavior.ConceptMethodDeclaration_Behavior;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_Empty;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.nodeEditor.cells.EditorCell_Indent;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.cellMenu.CompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPart;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandlerElementKeyMap;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.nodeEditor.cellMenu.CellContext;

public class ConceptMethodDeclaration_Editor extends DefaultNodeEditor {

  /* package */AbstractCellProvider my_DeprecatedPart6299_0;
  /* package */AbstractCellListHandler myListHandler_6299_0;
  /* package */AbstractCellListHandler myListHandler_6299_1;
  /* package */AbstractCellListHandler myListHandler_6299_2;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection_6299_0(context, node);
  }

  public EditorCell createInspectedCell(EditorContext context, SNode node) {
    return this.createCollection_6299_6(context, node);
  }

  public EditorCell createCollection_6299_0(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_6299_0(editorCell, node, context);
    editorCell.addEditorCell(this.createComponent_6299_0(context, node));
    if (renderingCondition6299_11(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection_6299_11(context, node));
    }
    editorCell.addEditorCell(this.createCollection_6299_1(context, node));
    if (renderingCondition6299_5(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection_6299_5(context, node));
    }
    if (renderingCondition6299_6(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createConstant_6299_9(context, node, "}"));
    }
    editorCell.addEditorCell(this.createConstant_6299_10(context, node, ""));
    return editorCell;
  }

  public EditorCell createCollection_6299_1(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_6299_1(editorCell, node, context);
    editorCell.addEditorCell(this.createCollection_6299_2(context, node));
    if (renderingCondition6299_3(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createConstant_6299_7(context, node, "{"));
    }
    if (renderingCondition6299_4(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createConstant_6299_8(context, node, ";"));
    }
    return editorCell;
  }

  public EditorCell createCollection_6299_2(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_6299_2(editorCell, node, context);
    editorCell.addEditorCell(this.createCollection_6299_3(context, node));
    if (renderingCondition6299_2(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection_6299_4(context, node));
    }
    return editorCell;
  }

  public EditorCell createCollection_6299_3(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(context, node);
    setupBasic_Collection_6299_3(editorCell, node, context);
    editorCell.addEditorCell(this.createRefNode_6299_1(context, node));
    if (renderingCondition6299_0(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createConstant_6299_0(context, node, "virtual"));
    }
    if (renderingCondition6299_1(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createConstant_6299_1(context, node, "abstract"));
    }
    editorCell.addEditorCell(this.createRefNode_6299_3(context, node));
    editorCell.addEditorCell(this.createProperty_6299_1(context, node));
    editorCell.addEditorCell(this.createConstant_6299_2(context, node, "("));
    editorCell.addEditorCell(this.createRefNodeList_6299_0(context, node));
    editorCell.addEditorCell(this.createConstant_6299_4(context, node, ")"));
    return editorCell;
  }

  public EditorCell createCollection_6299_4(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(context, node);
    setupBasic_Collection_6299_4(editorCell, node, context);
    editorCell.addEditorCell(this.createIndentCell6299_0(context, node));
    editorCell.addEditorCell(this.createConstant_6299_5(context, node, "overrides"));
    editorCell.addEditorCell(this.createReadOnlyModelAccessor_6299_0(context, node));
    editorCell.addEditorCell(this.createConstant_6299_6(context, node, "."));
    editorCell.addEditorCell(this.createRefCell_6299_1(context, node));
    return editorCell;
  }

  public EditorCell createCollection_6299_5(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_6299_5(editorCell, node, context);
    editorCell.addEditorCell(this.createIndentCell6299_1(context, node));
    editorCell.addEditorCell(this.createRefNode_6299_5(context, node));
    return editorCell;
  }

  public EditorCell createCollection_6299_6(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(context, node);
    setupBasic_Collection_6299_6(editorCell, node, context);
    if (renderingCondition6299_7(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection_6299_7(context, node));
    }
    if (renderingCondition6299_8(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection_6299_8(context, node));
    }
    if (renderingCondition6299_9(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection_6299_9(context, node));
    }
    if (renderingCondition6299_10(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection_6299_10(context, node));
    }
    editorCell.addEditorCell(this.createConstant_6299_15(context, node, "annotations:"));
    editorCell.addEditorCell(this.createRefNodeList_6299_2(context, node));
    return editorCell;
  }

  public EditorCell createCollection_6299_7(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(context, node);
    setupBasic_Collection_6299_7(editorCell, node, context);
    editorCell.addEditorCell(this.createConstant_6299_11(context, node, "virtual"));
    editorCell.addEditorCell(this.createProperty_6299_5(context, node));
    return editorCell;
  }

  public EditorCell createCollection_6299_8(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(context, node);
    setupBasic_Collection_6299_8(editorCell, node, context);
    editorCell.addEditorCell(this.createConstant_6299_12(context, node, "private"));
    editorCell.addEditorCell(this.createProperty_6299_7(context, node));
    return editorCell;
  }

  public EditorCell createCollection_6299_9(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(context, node);
    setupBasic_Collection_6299_9(editorCell, node, context);
    editorCell.addEditorCell(this.createConstant_6299_13(context, node, "abstract"));
    editorCell.addEditorCell(this.createProperty_6299_9(context, node));
    return editorCell;
  }

  public EditorCell createCollection_6299_10(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(context, node);
    setupBasic_Collection_6299_10(editorCell, node, context);
    editorCell.addEditorCell(this.createConstant_6299_14(context, node, "overrides"));
    editorCell.addEditorCell(this.createRefCell_6299_3(context, node));
    return editorCell;
  }

  public EditorCell createCollection_6299_11(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_6299_11(editorCell, node, context);
    editorCell.addEditorCell(this.createRefNodeList_6299_1(context, node));
    return editorCell;
  }

  public EditorCell createComponent_6299_0(EditorContext context, SNode node) {
    if (this.my_DeprecatedPart6299_0 == null) {
      this.my_DeprecatedPart6299_0 = new _DeprecatedPart(node);
    }
    EditorCell editorCell = this.my_DeprecatedPart6299_0.createEditorCell(context);
    setupBasic_Component_6299_0(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createConstant_6299_0(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_0(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_1(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_1(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_2(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_2(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_4(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_4(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_5(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_5(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_6(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_6(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_7(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_7(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_8(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_8(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_9(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_9(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_10(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_10(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_11(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_11(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_12(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_12(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_13(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_13(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_14(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_14(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_6299_15(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6299_15(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createReadOnlyModelAccessor_6299_0(final EditorContext context, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(context, new ModelAccessor() {

      public String getText() {
        return ConceptMethodDeclaration_Behavior.call_getOverridenMethodConceptName_1225196403980(node);
      }

      public void setText(String s) {
      }

      public boolean isValidText(String s) {
        return EqualUtil.equals(s, this.getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, new CellAction_Empty());
    setupBasic_ReadOnlyModelAccessor_6299_0(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createRefNodeList_6299_0(EditorContext context, SNode node) {
    if (this.myListHandler_6299_0 == null) {
      this.myListHandler_6299_0 = new ConceptMethodDeclaration_Editor.parameterListHandler_6299_0(node, "parameter", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_6299_0.createCells(context, new CellLayout_Indent(), false);
    setupBasic_RefNodeList_6299_0(editorCell, node, context);
    editorCell.setRole(this.myListHandler_6299_0.getElementRole());
    return editorCell;
  }

  public EditorCell createRefNodeList_6299_1(EditorContext context, SNode node) {
    if (this.myListHandler_6299_1 == null) {
      this.myListHandler_6299_1 = new ConceptMethodDeclaration_Editor.annotationListHandler_6299_0(node, "annotation", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_6299_1.createCells(context, new CellLayout_Indent(), false);
    setupBasic_RefNodeList_6299_1(editorCell, node, context);
    editorCell.setRole(this.myListHandler_6299_1.getElementRole());
    return editorCell;
  }

  public EditorCell createRefNodeList_6299_2(EditorContext context, SNode node) {
    if (this.myListHandler_6299_2 == null) {
      this.myListHandler_6299_2 = new ConceptMethodDeclaration_Editor.annotationListHandler_6299_1(node, "annotation", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_6299_2.createCells(context, new CellLayout_Indent(), false);
    setupBasic_RefNodeList_6299_2(editorCell, node, context);
    editorCell.setRole(this.myListHandler_6299_2.getElementRole());
    return editorCell;
  }

  public EditorCell createIndentCell6299_0(EditorContext context, SNode node) {
    EditorCell_Indent result = new EditorCell_Indent(context, node);
    return result;
  }

  public EditorCell createIndentCell6299_1(EditorContext context, SNode node) {
    EditorCell_Indent result = new EditorCell_Indent(context, node);
    return result;
  }

  public EditorCell createRefNode_6299_0_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_RefNode_6299_0(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode_6299_1(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("visibility");
    provider.setNoTargetText("/*package*/");
    EditorCell cellWithRole = this.createRefNode_6299_0_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefNode_6299_2_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_RefNode_6299_1(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode_6299_3(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("returnType");
    provider.setNoTargetText("<no returnType>");
    EditorCell cellWithRole = this.createRefNode_6299_2_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createProperty_6299_0_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_Property_6299_0(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    editorCell.setSubstituteInfo(new CompositeSubstituteInfo(context, provider.getCellContext(), new SubstituteInfoPart[]{new ConceptMethodDeclaration_Editor.ConceptMethodDeclaration_component_cellMenu0()}));
    return editorCell;
  }

  public EditorCell createProperty_6299_1(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell cellWithRole = this.createProperty_6299_0_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefCell_6299_0_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(new ConceptMethodDeclaration_Editor._Inline6299_0());
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_RefCell_6299_0(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefCell_6299_1(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, context);
    provider.setRole("overriddenMethod");
    provider.setNoTargetText("<no overriddenMethod>");
    EditorCell cellWithRole = this.createRefCell_6299_0_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefNode_6299_4_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_RefNode_6299_2(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode_6299_5(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("body");
    provider.setNoTargetText("<no body>");
    EditorCell cellWithRole = this.createRefNode_6299_4_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createProperty_6299_4_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_Property_6299_2(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty_6299_5(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("isVirtual");
    provider.setNoTargetText("<no isVirtual>");
    EditorCell cellWithRole = this.createProperty_6299_4_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createProperty_6299_6_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_Property_6299_3(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty_6299_7(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("isPrivate");
    provider.setNoTargetText("<no isPrivate>");
    EditorCell cellWithRole = this.createProperty_6299_6_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createProperty_6299_8_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_Property_6299_4(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty_6299_9(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("isAbstract");
    provider.setNoTargetText("<no isAbstract>");
    EditorCell cellWithRole = this.createProperty_6299_8_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefCell_6299_2_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(new ConceptMethodDeclaration_Editor._Inline6299_1());
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_RefCell_6299_1(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefCell_6299_3(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, context);
    provider.setRole("overriddenMethod");
    provider.setNoTargetText("<no overriden method>");
    EditorCell cellWithRole = this.createRefCell_6299_2_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }


  private static void setupBasic_Collection_6299_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_6299_0");
  }

  private static void setupBasic_Collection_6299_1(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_6299_1");
  }

  private static void setupBasic_Collection_6299_2(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_6299_2");
  }

  private static void setupBasic_Collection_6299_3(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_6299_3");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
  }

  private static void setupBasic_RefNode_6299_0(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_6299_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_0");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
  }

  private static void setupBasic_Constant_6299_1(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_1");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
  }

  private static void setupBasic_RefNode_6299_1(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Property_6299_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_name");
    BaseLanguageStyle_StyleSheet.getMethodName(editorCell).apply(editorCell);
  }

  private static void setupBasic_Constant_6299_2(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_2");
    BaseLanguageStyle_StyleSheet.getLeftParenAfterName(editorCell).apply(editorCell);
  }

  private static void setupBasic_RefNodeList_6299_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_parameter");
  }

  private static void setupBasic_Constant_6299_4(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_4");
    BaseLanguageStyle_StyleSheet.getRightParen(editorCell).apply(editorCell);
  }

  private static void setupBasic_Collection_6299_4(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_6299_4");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
  }

  private static void setupBasic_Indent_6299_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Indent_6299_0");
  }

  private static void setupBasic_Constant_6299_5(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_5");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
  }

  private static void setupBasic_Constant_6299_6(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_6");
    BaseLanguageStyle_StyleSheet.getDot(editorCell).apply(editorCell);
  }

  private static void setupBasic_RefCell_6299_0(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_6299_7(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_7");
    BaseLanguageStyle_StyleSheet.getLeftBrace(editorCell).apply(editorCell);
  }

  private static void setupBasic_Constant_6299_8(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_8");
    BaseLanguageStyle_StyleSheet.getSemicolon(editorCell).apply(editorCell);
  }

  private static void setupBasic_Collection_6299_5(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_6299_5");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
  }

  private static void setupBasic_Indent_6299_1(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Indent_6299_1");
  }

  private static void setupBasic_RefNode_6299_2(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_6299_9(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_9");
    BaseLanguageStyle_StyleSheet.getRightBrace(editorCell).apply(editorCell);
  }

  private static void setupBasic_Constant_6299_10(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_10");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
  }

  private static void setupBasic_Collection_6299_6(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_6299_6");
  }

  private static void setupBasic_Collection_6299_7(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_6299_7");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    }
  }

  private static void setupBasic_Constant_6299_11(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_11");
  }

  private static void setupBasic_Property_6299_2(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_isVirtual");
  }

  private static void setupBasic_Collection_6299_8(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_6299_8");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    }
  }

  private static void setupBasic_Constant_6299_12(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_12");
  }

  private static void setupBasic_Property_6299_3(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_isPrivate");
  }

  private static void setupBasic_Collection_6299_9(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_6299_9");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    }
  }

  private static void setupBasic_Constant_6299_13(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_13");
  }

  private static void setupBasic_Property_6299_4(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_isAbstract");
  }

  private static void setupBasic_Collection_6299_10(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_6299_10");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    }
  }

  private static void setupBasic_Constant_6299_14(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_14");
  }

  private static void setupBasic_RefCell_6299_1(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_ReadOnlyModelAccessor_6299_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("ReadOnlyModelAccessor_6299_0");
  }

  private static void setupBasic_Component_6299_0(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Collection_6299_11(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_6299_11");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
  }

  private static void setupBasic_RefNodeList_6299_1(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_annotation");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, true);
    }
  }

  private static void setupBasic_Constant_6299_15(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6299_15");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    }
  }

  private static void setupBasic_RefNodeList_6299_2(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_annotation_1");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
      style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, true);
    }
  }

  public static boolean renderingCondition6299_0(SNode node, EditorContext editorContext, IScope scope) {
    return SPropertyOperations.getBoolean(node, "isVirtual");
  }

  public static boolean renderingCondition6299_1(SNode node, EditorContext editorContext, IScope scope) {
    return SPropertyOperations.getBoolean(node, "isAbstract");
  }

  public static boolean renderingCondition6299_2(SNode node, EditorContext editorContext, IScope scope) {
    return SLinkOperations.getTarget(node, "overriddenMethod", false) != null;
  }

  public static boolean renderingCondition6299_3(SNode node, EditorContext editorContext, IScope scope) {
    return !(SPropertyOperations.getBoolean(node, "isAbstract"));
  }

  public static boolean renderingCondition6299_4(SNode node, EditorContext editorContext, IScope scope) {
    return SPropertyOperations.getBoolean(node, "isAbstract");
  }

  public static boolean renderingCondition6299_5(SNode node, EditorContext editorContext, IScope scope) {
    return !(SPropertyOperations.getBoolean(node, "isAbstract"));
  }

  public static boolean renderingCondition6299_6(SNode node, EditorContext editorContext, IScope scope) {
    return !(SPropertyOperations.getBoolean(node, "isAbstract"));
  }

  public static boolean renderingCondition6299_7(SNode node, EditorContext editorContext, IScope scope) {
    return !(SPropertyOperations.getBoolean(node, "isPrivate")) && SLinkOperations.getTarget(node, "overriddenMethod", false) == null;
  }

  public static boolean renderingCondition6299_8(SNode node, EditorContext editorContext, IScope scope) {
    return !(SPropertyOperations.getBoolean(node, "isVirtual")) && (SLinkOperations.getTarget(node, "overriddenMethod", false) == null);
  }

  public static boolean renderingCondition6299_9(SNode node, EditorContext editorContext, IScope scope) {
    return SPropertyOperations.getBoolean(node, "isVirtual");
  }

  public static boolean renderingCondition6299_10(SNode node, EditorContext editorContext, IScope scope) {
    return !(SPropertyOperations.getBoolean(node, "isVirtual")) && !(SPropertyOperations.getBoolean(node, "isPrivate"));
  }

  public static boolean renderingCondition6299_11(SNode node, EditorContext editorContext, IScope scope) {
    return SLinkOperations.getCount(node, "annotation") > 0;
  }

  public static class _Inline6299_0 extends AbstractCellProvider {

    public _Inline6299_0() {
      super();
    }

    public EditorCell createEditorCell(EditorContext context) {
      return this.createEditorCell(context, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext context, SNode node) {
      return this.createProperty_6299_3(context, node);
    }

    public EditorCell createProperty_6299_2_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
      CellProviderWithRole provider = aProvider;
      provider.setAuxiliaryCellProvider(null);
      EditorCell editorCell = provider.createEditorCell(context);
      setupBasic_Property_6299_1(editorCell, node, context);
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      return editorCell;
    }

    public EditorCell createProperty_6299_3(EditorContext context, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, context);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      EditorCell cellWithRole = this.createProperty_6299_2_internal(context, node, provider);
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = context.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
      } else
      return cellWithRole;
    }


    private static void setupBasic_Property_6299_1(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("property_name_1");
    }

}
  public static class _Inline6299_1 extends AbstractCellProvider {

    public _Inline6299_1() {
      super();
    }

    public EditorCell createEditorCell(EditorContext context) {
      return this.createEditorCell(context, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext context, SNode node) {
      return this.createProperty_6299_11(context, node);
    }

    public EditorCell createProperty_6299_10_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
      CellProviderWithRole provider = aProvider;
      provider.setAuxiliaryCellProvider(null);
      EditorCell editorCell = provider.createEditorCell(context);
      setupBasic_Property_6299_5(editorCell, node, context);
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      return editorCell;
    }

    public EditorCell createProperty_6299_11(EditorContext context, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, context);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      EditorCell cellWithRole = this.createProperty_6299_10_internal(context, node, provider);
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = context.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
      } else
      return cellWithRole;
    }


    private static void setupBasic_Property_6299_5(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("property_name_2");
    }

}
  public static class parameterListHandler_6299_0 extends RefNodeListHandler {

    public parameterListHandler_6299_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = this.createEmptyCell_internal(context, this.getOwner());
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public EditorCell createEmptyCell_internal(EditorContext context, SNode node) {
      return this.createConstant_6299_3(context, node, "");
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
          elementCell.addKeyMap(new RefNodeListHandlerElementKeyMap(this, ","));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      {
        EditorCell_Constant editorCell = new EditorCell_Constant(context, this.getOwner(), ",");
        editorCell.setSelectable(false);
        editorCell.getStyle().set(StyleAttributes.LAYOUT_CONSTRAINT, "");
        editorCell.getStyle().set(StyleAttributes.PUNCTUATION_LEFT, true);
        return editorCell;
      }
    }

    public EditorCell createConstant_6299_3(EditorContext context, SNode node, String text) {
      EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
      setupBasic_Constant_6299_3(editorCell, node, context);
      editorCell.setDefaultText("");
      return editorCell;
    }


    private static void setupBasic_Constant_6299_3(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("Constant_6299_3");
      {
        Style style = editorCell.getStyle();
        style.set(StyleAttributes.EDITABLE, true);
      }
    }

}
  public static class annotationListHandler_6299_0 extends RefNodeListHandler {

    public annotationListHandler_6299_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

}
  public static class annotationListHandler_6299_1 extends RefNodeListHandler {

    public annotationListHandler_6299_1(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

}
  public static class ConceptMethodDeclaration_component_cellMenu0 implements SubstituteInfoPart {

    private ConceptMethodDeclaration_Menu myComponent;

    public ConceptMethodDeclaration_component_cellMenu0() {
      this.myComponent = new ConceptMethodDeclaration_Menu();
    }

    public List<INodeSubstituteAction> createActions(CellContext cellContext, EditorContext editorContext) {
      return this.myComponent.createActions(cellContext, editorContext);
    }

}

}
