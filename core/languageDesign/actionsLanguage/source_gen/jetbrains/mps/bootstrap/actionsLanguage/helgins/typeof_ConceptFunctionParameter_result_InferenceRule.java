package jetbrains.mps.bootstrap.actionsLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_ConceptFunctionParameter_result_InferenceRule implements InferenceRule_Runtime {

  public typeof_ConceptFunctionParameter_result_InferenceRule() {
  }

  public void applyRule(final SNode result) {
    SNode conceptOfResult = null;
    SNode ancestor = SNodeOperations.getAncestorWhereConceptInList(result, new String[]{"jetbrains.mps.bootstrap.actionsLanguage.structure.ConceptRightTransformPart","jetbrains.mps.bootstrap.actionsLanguage.structure.ConceptSideTransformMenuPart"}, false, false);
    if (SNodeOperations.isInstanceOf(ancestor, "jetbrains.mps.bootstrap.actionsLanguage.structure.ConceptRightTransformPart")) {
      conceptOfResult = SLinkOperations.getTarget(ancestor, "concept", false);
    } else
    {
      conceptOfResult = SLinkOperations.getTarget(ancestor, "baseConcept", false);
    }
    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_1().createNode(conceptOfResult), result, "jetbrains.mps.bootstrap.actionsLanguage.helgins", "1180046146702");
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.bootstrap.actionsLanguage.structure.ConceptFunctionParameter_result";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
