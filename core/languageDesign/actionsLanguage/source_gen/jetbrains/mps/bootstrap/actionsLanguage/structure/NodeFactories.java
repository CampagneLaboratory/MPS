package jetbrains.mps.bootstrap.actionsLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.core.structure.BaseConcept;
import jetbrains.mps.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.Iterator;
import java.util.List;

public class NodeFactories extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.bootstrap.actionsLanguage.structure.NodeFactories";
  public static String NAME = "name";
  public static String SHORT_DESCRIPTION = "shortDescription";
  public static String ALIAS = "alias";
  public static String VIRTUAL_PACKAGE = "virtualPackage";
  public static String NODE_FACTORY = "nodeFactory";

  public NodeFactories(SNode node) {
    super(node);
  }

  public static NodeFactories newInstance(SModel sm, boolean init) {
    return (NodeFactories)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bootstrap.actionsLanguage.structure.NodeFactories", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static NodeFactories newInstance(SModel sm) {
    return NodeFactories.newInstance(sm, false);
  }


  public String getName() {
    return this.getProperty(NodeFactories.NAME);
  }

  public void setName(String value) {
    this.setProperty(NodeFactories.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(NodeFactories.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(NodeFactories.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(NodeFactories.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(NodeFactories.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(NodeFactories.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(NodeFactories.VIRTUAL_PACKAGE, value);
  }

  public int getNodeFactorysCount() {
    return this.getChildCount(NodeFactories.NODE_FACTORY);
  }

  public Iterator<NodeFactory> nodeFactorys() {
    return this.children(NodeFactories.NODE_FACTORY);
  }

  public List<NodeFactory> getNodeFactorys() {
    return this.getChildren(NodeFactories.NODE_FACTORY);
  }

  public void addNodeFactory(NodeFactory node) {
    this.addChild(NodeFactories.NODE_FACTORY, node);
  }

  public void insertNodeFactory(NodeFactory prev, NodeFactory node) {
    this.insertChild(prev, NodeFactories.NODE_FACTORY, node);
  }

}
