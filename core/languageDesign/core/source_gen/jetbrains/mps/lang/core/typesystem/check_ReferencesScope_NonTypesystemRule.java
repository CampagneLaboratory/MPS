package jetbrains.mps.lang.core.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import java.util.Date;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.core.plugin.ReferencesScopeCheckingOptionEditor;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.constraints.SearchScopeStatus;
import jetbrains.mps.smodel.constraints.ModelConstraintsUtil;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.nodeEditor.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_ReferencesScope_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_ReferencesScope_NonTypesystemRule() {
  }

  public void applyRule(final SNode baseConcept, final TypeCheckingContext typeCheckingContext) {
    // debugging info 
    long t0 = new Date().getTime();
    int cnt = 0;

    IOperationContext context = typeCheckingContext.getOperationContext();
    if (context == null || !(ReferencesScopeCheckingOptionEditor.ourRefScopeChecking)) {
      return;
    }
    SNode node = baseConcept;
    AbstractConceptDeclaration concept = node.getConceptDeclarationAdapter();
    for (SReference ref : node.getReferences()) {
      SearchScopeStatus sss = ModelConstraintsUtil.getSearchScope(node.getParent(), node, concept, ref.getRole(), context);
      SNode target = ref.getTargetNode();
      if (sss.isError()) {
        {
          BaseIntentionProvider intentionProvider = null;
          IErrorTarget errorTarget = new NodeErrorTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(node, sss.getMessage(), "r:cec599e3-51d2-48a7-af31-989e3cbd593c(jetbrains.mps.lang.core.typesystem)", "4942048232752368615", intentionProvider, errorTarget);
        }
      } else if (sss.isDefault()) {
        //  global search scope is not checked now 
      } else if (!(sss.getSearchScope().isInScope(target))) {
        String name = (target == null ?
          "" :
          target.getName()
        );
        {
          BaseIntentionProvider intentionProvider = null;
          IErrorTarget errorTarget = new NodeErrorTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(node, "reference" + ((name == null ?
            "" :
            " " + name
          )) + " (" + ref.getRole() + ") is out of" + ((sss.isDefault() ?
            " global" :
            " search"
          )) + " scope", "r:cec599e3-51d2-48a7-af31-989e3cbd593c(jetbrains.mps.lang.core.typesystem)", "4942048232752376292", intentionProvider, errorTarget);
        }
      }
      ++cnt;
    }
    // update debugging information (rule checking works in single thread) 
    ReferencesScopeCheckingOptionEditor.ourTime += new Date().getTime() - t0;
    ReferencesScopeCheckingOptionEditor.ourRefs += cnt;
    ++ReferencesScopeCheckingOptionEditor.ourNodes;
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
