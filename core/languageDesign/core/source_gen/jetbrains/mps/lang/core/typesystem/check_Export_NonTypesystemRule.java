package jetbrains.mps.lang.core.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.AttributesRolesUtil;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.typesystem.inference.ReferenceErrorTarget;
import jetbrains.mps.nodeEditor.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModel;

public class check_Export_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Export_NonTypesystemRule() {
  }

  public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {
    String namespace = check_fy6mn3_a0a0a(check_fy6mn3_a0a0a0(typeCheckingContext.getOperationContext()));
    if (namespace == null || namespace.equals(check_fy6mn3_a0a0b0a(check_fy6mn3_a0a0a1a0(check_fy6mn3_a0a0a0b0a(SNodeOperations.getModel(SNodeOperations.getConceptDeclaration(node))))))) {
      return;
    }
    // check instance of unexported concept 
    SNode exp = SLinkOperations.getTarget(ListSequence.fromList(SNodeOperations.getAncestors(((SNode) SNodeOperations.getConceptDeclaration(node)), null, true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode n) {
        return (SLinkOperations.getTarget(n, AttributesRolesUtil.childRoleFromAttributeRole("export"), true) != null);
      }
    }), AttributesRolesUtil.childRoleFromAttributeRole("export"), true);
    if ((exp == null)) {
      // for concepts default export is public 
    } else {
    }
    // check references 
    for (SReference ref : Sequence.fromIterable(SNodeOperations.getReferences(node))) {
      SNode target = SLinkOperations.getTargetNode(ref);
      if (namespace.equals(check_fy6mn3_a0a1a6a0(check_fy6mn3_a0a0b0g0a(check_fy6mn3_a0a0a1a6a0(SNodeOperations.getModel(target)))))) {
        continue;
      }
      exp = SLinkOperations.getTarget(ListSequence.fromList(SNodeOperations.getAncestors(SLinkOperations.getTargetNode(ref), null, true)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (SLinkOperations.getTarget(it, AttributesRolesUtil.childRoleFromAttributeRole("export"), true) != null);
        }
      }), AttributesRolesUtil.childRoleFromAttributeRole("export"), true);
      if ((exp == null)) {
        // for references default export is module 
        {
          BaseIntentionProvider intentionProvider = null;
          IErrorTarget errorTarget = new NodeErrorTarget();
          errorTarget = new ReferenceErrorTarget(SLinkOperations.getRole(ref));
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(node, "usage of nonpublic API", "r:cec599e3-51d2-48a7-af31-989e3cbd593c(jetbrains.mps.lang.core.typesystem)", "5425021671150237358", intentionProvider, errorTarget);
        }
      } else {
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

  private static String check_fy6mn3_a0a0a(IModule p) {
    if (null == p) {
      return null;
    }
    return p.getModuleFqName();
  }

  private static IModule check_fy6mn3_a0a0a0(IOperationContext p) {
    if (null == p) {
      return null;
    }
    return p.getModule();
  }

  private static String check_fy6mn3_a0a0b0a(IModule p) {
    if (null == p) {
      return null;
    }
    return p.getModuleFqName();
  }

  private static IModule check_fy6mn3_a0a0a1a0(SModelDescriptor p) {
    if (null == p) {
      return null;
    }
    return p.getModule();
  }

  private static SModelDescriptor check_fy6mn3_a0a0a0b0a(SModel p) {
    if (null == p) {
      return null;
    }
    return p.getModelDescriptor();
  }

  private static String check_fy6mn3_a0a1a6a0(IModule p) {
    if (null == p) {
      return null;
    }
    return p.getModuleFqName();
  }

  private static IModule check_fy6mn3_a0a0b0g0a(SModelDescriptor p) {
    if (null == p) {
      return null;
    }
    return p.getModule();
  }

  private static SModelDescriptor check_fy6mn3_a0a0a1a6a0(SModel p) {
    if (null == p) {
      return null;
    }
    return p.getModelDescriptor();
  }
}
