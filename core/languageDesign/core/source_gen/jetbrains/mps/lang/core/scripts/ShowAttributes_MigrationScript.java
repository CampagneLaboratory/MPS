package jetbrains.mps.lang.core.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ShowAttributes_MigrationScript extends BaseMigrationScript {
  public ShowAttributes_MigrationScript(IOperationContext operationContext) {
    super("Show old attributes");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Not converted concepts";
      }

      public String getAdditionalInfo() {
        return "Not converted concepts";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.core.structure.BaseConcept";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.Attribute")) {
          return false;
        }
        String role = SNodeOperations.getContainingLinkRole(node);
        return role != null && role.contains("$") && SNodeOperations.getContainingLinkDeclaration(node) != SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.core.structure.BaseConcept", "_$attribute");
      }

      public void doUpdateInstanceNode(SNode node) {
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Converted concepts";
      }

      public String getAdditionalInfo() {
        return "Converted concepts";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.core.structure.Attribute";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        String role = SNodeOperations.getContainingLinkRole(node);
        return role != null && role.contains("$") && SNodeOperations.getContainingLinkDeclaration(node) != SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.core.structure.BaseConcept", "_$attribute");

      }

      public void doUpdateInstanceNode(SNode node) {
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Not converted smodel operations";
      }

      public String getAdditionalInfo() {
        return "Not converted smodel operations";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.smodel.structure.AttributeAccessOperation";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
