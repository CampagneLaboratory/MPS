package jetbrains.mps.lang.core.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.AttributesRolesUtil;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModel;

public class ExportScope_Behavior {
  public static void init(SNode thisNode) {
  }

  public static boolean call_checkExport_2565736246230026584(SNode thisNode, String sourceNamespace) {
    String namespace = ExportScope_Behavior.getNamespace_2565736246230026649(thisNode);
    return namespace == null || sourceNamespace.startsWith(namespace);
  }

  public static String getNamespace_2565736246230026649(SNode node) {
    return check_ogf5a0_a0a0(check_ogf5a0_a0a0a(check_ogf5a0_a0a0a0(SNodeOperations.getModel(node))));
  }

  public static boolean checkExport_2565736246230031479(SNode node, String namespace, boolean def) {
    SNode exp = SLinkOperations.getTarget(ListSequence.fromList(SNodeOperations.getAncestors(node, null, true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, AttributesRolesUtil.childRoleFromAttributeRole("export"), true) != null);
      }
    }), AttributesRolesUtil.childRoleFromAttributeRole("export"), true);
    return ((exp == null) ?
      def :
      ExportScope_Behavior.call_checkExport_2565736246230026584(exp, namespace)
    );
  }

  private static String check_ogf5a0_a0a0(IModule p) {
    if (null == p) {
      return null;
    }
    return p.getModuleNamespace();
  }

  private static IModule check_ogf5a0_a0a0a(SModelDescriptor p) {
    if (null == p) {
      return null;
    }
    return p.getModule();
  }

  private static SModelDescriptor check_ogf5a0_a0a0a0(SModel p) {
    if (null == p) {
      return null;
    }
    return p.getModelDescriptor();
  }
}
