package jetbrains.mps.lang.core.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.structure.structure.LinkDeclaration;
import jetbrains.mps.smodel.constraints.SearchScopeStatus;
import jetbrains.mps.smodel.constraints.ModelConstraintsUtil;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.errors.messageTargets.ReferenceMessageTarget;

public class RefScopeChecker extends AbstractConstraintsChecker {
  public RefScopeChecker() {
  }

  public void checkNode(SNode node, LanguageErrorsComponent component, IOperationContext operationContext) {
    if (operationContext == null) {
      return;
    }
    AbstractConceptDeclaration concept = ((AbstractConceptDeclaration) SNodeOperations.getAdapter(SNodeOperations.getConceptDeclaration(node)));
    for (SReference ref : SNodeOperations.getReferences(node)) {
      SNode target = SLinkOperations.getTargetNode(ref);
      LinkDeclaration linkDeclaration = ((LinkDeclaration) SNodeOperations.getAdapter(SLinkOperations.findLinkDeclaration(ref)));
      // don't check unresolved and broken references, they should already have an error message 
      if ((target == null) || linkDeclaration == null) {
        continue;
      }
      component.addDependency(target);
      component.addDependency(linkDeclaration.getNode());
      SearchScopeStatus sss = ModelConstraintsUtil.getSearchScope(SNodeOperations.getParent(node), node, concept, linkDeclaration, operationContext);
      if (sss.isError()) {
        SetSequence.fromSet(new HashSet<SNode>());
        component.addError(node, sss.getMessage(), (SNode) null, new ReferenceMessageTarget(SLinkOperations.getRole(ref)));
      } else if (!(sss.isDefault() || sss.getSearchScope().isInScope(target))) {
        String name = target.getName();
        component.addError(node, "reference" + ((name == null ?
          "" :
          " " + name
        )) + " (" + SLinkOperations.getRole(ref) + ") is out of search scope", sss.getReferenceValidatorNode(), new ReferenceMessageTarget(SLinkOperations.getRole(ref)));
      }
    }
  }
}
