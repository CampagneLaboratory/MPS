package jetbrains.mps.core.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.action.ActionContext;
import jetbrains.mps.ide.action.CurrentProjectMPSAction;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.nodeEditor.AbstractEditorComponent;
import jetbrains.mps.nodeEditor.IEditorMessage;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;

import javax.swing.JOptionPane;
import java.util.List;

public class ShowNodeMessages_Action extends CurrentProjectMPSAction {
  public static final Logger LOG = Logger.getLogger(ShowNodeMessages_Action.class);

  private AbstractEditorComponent editorComponent;
  private SNode node;
  private boolean isAlwaysVisible = false;

  public ShowNodeMessages_Action(MPSProject project) {
    super(project, "Show Node Messages");
  }

  @NotNull()
  public String getKeyStroke() {
    return "ctrl alt shift M";
  }

  public boolean isApplicable(ActionContext context) {
    return !(this.editorComponent.getHighlightManager().getMessagesFor(this.node).isEmpty());
  }

  public void doUpdate(@NotNull()ActionContext context) {
    try {
      super.doUpdate(context);
      if (!(this.fillFieldsIfNecessary(context))) {
        this.setEnabled(false);
        this.setVisible(this.isAlwaysVisible);
        return;
      }
      {
        boolean enabled = this.isApplicable(context);
        this.setEnabled(enabled);
        this.setVisible(enabled || this.isAlwaysVisible);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ShowNodeMessages", t);
      this.setEnabled(false);
      this.setVisible(this.isAlwaysVisible);
    }
  }

  private boolean fillFieldsIfNecessary(ActionContext context) {
    try {
      this.editorComponent = context.get(AbstractEditorComponent.class);
      if (this.editorComponent == null) {
        return false;
      }
      this.node = context.getNode();
      if (this.node == null) {
        return false;
      }
    } catch (Throwable t) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final ActionContext context) {
    try {
      if (!(this.fillFieldsIfNecessary(context))) {
        return;
      }
      performExecution(context);
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ShowNodeMessages", t);
    }
  }

  private void performExecution(ActionContext context) {
    List<IEditorMessage> messages = this.editorComponent.getHighlightManager().getMessagesFor(this.node);
    StringBuilder sb = new StringBuilder();
    for (IEditorMessage message : messages) {
      sb.append(message.getMessage());
      sb.append("; owner is ");
      sb.append(message.getOwner().toString());
      sb.append("\n");
    }
    JOptionPane.showMessageDialog(this.editorComponent, sb, "node messages", JOptionPane.INFORMATION_MESSAGE);
  }

}
