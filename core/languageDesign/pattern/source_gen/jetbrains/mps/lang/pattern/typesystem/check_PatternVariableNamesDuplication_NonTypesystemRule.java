package jetbrains.mps.lang.pattern.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import java.util.List;
import jetbrains.mps.lang.pattern.behavior.PatternExpression_Behavior;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.nodeEditor.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_PatternVariableNamesDuplication_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_PatternVariableNamesDuplication_NonTypesystemRule() {
  }

  public void applyRule(final SNode patternExpression, final TypeCheckingContext typeCheckingContext) {
    List<SNode> variables = PatternExpression_Behavior.call_getVariables_4855904478357072957(patternExpression);
    Set<String> names = new HashSet();
    for (SNode var : variables) {
      if (names.contains(SPropertyOperations.getString(var, "name"))) {
        {
          BaseIntentionProvider intentionProvider = null;
          IErrorTarget errorTarget = new NodeErrorTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(patternExpression, "Pattern has two or more variables with name " + SPropertyOperations.getString(var, "name"), "r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.typesystem)", "4264731254635435133", intentionProvider, errorTarget);
        }
      } else {
        names.add(SPropertyOperations.getString(var, "name"));
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.pattern.structure.PatternExpression";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
