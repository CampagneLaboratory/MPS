package jetbrains.mps.lang.pattern.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.EditorIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.pattern.util.PatternAddingUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class CreateWildcardPattern_Intention extends EditorIntention {
  public CreateWildcardPattern_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.pattern.structure.PatternExpression";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Create Wildcard";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return PatternAddingUtil.isPatternApplicable(editorContext);
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode currentNode = editorContext.getSelectedNode();
    currentNode.setAttribute(SModelOperations.createNewNode(SNodeOperations.getModel(currentNode), "jetbrains.mps.lang.pattern.structure.WildcardPattern", null));
  }

  public String getLocationString() {
    return "jetbrains.mps.lang.pattern.intentions";
  }
}
