package jetbrains.mps.lang.pattern.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class PatternExpression extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.pattern.structure.PatternExpression";
  public static final String PATTERN_NODE = "patternNode";

  public PatternExpression(SNode node) {
    super(node);
  }

  public BaseConcept getPatternNode() {
    return (BaseConcept)this.getChild(BaseConcept.class, PatternExpression.PATTERN_NODE);
  }

  public void setPatternNode(BaseConcept node) {
    super.setChild(PatternExpression.PATTERN_NODE, node);
  }

  public static PatternExpression newInstance(SModel sm, boolean init) {
    return (PatternExpression)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.pattern.structure.PatternExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static PatternExpression newInstance(SModel sm) {
    return PatternExpression.newInstance(sm, false);
  }
}
