package jetbrains.mps.lang.pattern.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class PatternVariableDeclarationCopy extends Expression {
  public static final String concept = "jetbrains.mps.lang.pattern.structure.PatternVariableDeclarationCopy";
  public static final String DECLARATION = "declaration";

  public PatternVariableDeclarationCopy(SNode node) {
    super(node);
  }

  public PatternVariableDeclaration getDeclaration() {
    return (PatternVariableDeclaration) this.getReferent(PatternVariableDeclaration.class, PatternVariableDeclarationCopy.DECLARATION);
  }

  public void setDeclaration(PatternVariableDeclaration node) {
    super.setReferent(PatternVariableDeclarationCopy.DECLARATION, node);
  }

  public static PatternVariableDeclarationCopy newInstance(SModel sm, boolean init) {
    return (PatternVariableDeclarationCopy) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.pattern.structure.PatternVariableDeclarationCopy", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static PatternVariableDeclarationCopy newInstance(SModel sm) {
    return PatternVariableDeclarationCopy.newInstance(sm, false);
  }
}
