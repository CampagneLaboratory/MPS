package jetbrains.mps.lang.pattern.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.ConceptRegistry;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    int hash = conceptFqName.hashCode();
    if (hash == 716368539) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.AsPattern", "jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration");
    }
    if (hash == -2131337619) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.Pattern", "jetbrains.mps.lang.core.structure.NodeAttribute");
    }
    if (hash == -1337562907) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.PatternExpression", "jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IMetaLevelChanger");
    }
    if (hash == -1529997903) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration", "jetbrains.mps.lang.pattern.structure.Pattern", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == -1029075866) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.PropertyPatternVariableDeclaration", "jetbrains.mps.lang.core.structure.PropertyAttribute", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == -1207555533) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.WildcardPattern", "jetbrains.mps.lang.pattern.structure.Pattern");
    }
    if (hash == -1884208785) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.ListPattern", "jetbrains.mps.lang.pattern.structure.AsPattern");
    }
    if (hash == 809452491) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.LinkPatternVariableDeclaration", "jetbrains.mps.lang.core.structure.LinkAttribute", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == 1712602949) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.ActionAsPattern", "jetbrains.mps.lang.pattern.structure.AsPattern");
    }
    if (hash == -576410186) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.ActionStatement", "jetbrains.mps.baseLanguage.structure.Statement");
    }
    if (hash == 156926274) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.PatternVariableReference", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    if (hash == -561000502) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.OrPattern", "jetbrains.mps.lang.pattern.structure.Pattern");
    }
    if (hash == -682112551) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.OrPatternClause", "jetbrains.mps.lang.pattern.structure.PatternExpression");
    }
    if (hash == 1051743621) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.OrPatternVariableReference", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    if (hash == -993142711) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.InsertAfterPosition", "jetbrains.mps.lang.pattern.structure.InsertPosition");
    }
    if (hash == -4587228) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.InsertBeforePosition", "jetbrains.mps.lang.pattern.structure.InsertPosition");
    }
    if (hash == -737017467) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.pattern.structure.InsertPosition", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    return null;
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private ImmutableSet<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String... parents) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, parents);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static ImmutableSet<String> getAncestors(String conceptFqName, String... parents) {
      List<String> result = new ArrayList();

      result.add(conceptFqName);
      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : parents) {
        result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
      }
      return ImmutableSet.copyOf(result);
    }
  }
}
