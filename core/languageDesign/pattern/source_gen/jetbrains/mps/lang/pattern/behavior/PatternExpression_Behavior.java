package jetbrains.mps.lang.pattern.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class PatternExpression_Behavior {
  public static void init(SNode thisNode) {
  }

  public static int virtual_getMetaLevelChange_201537367881074474(SNode thisNode) {
    return -1;
  }

  public static List<SNode> call_getVariables_4855904478357072957(SNode thisNode) {
    List<SNode> variables = new ArrayList<SNode>();
    ListSequence.fromList(variables).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(thisNode, "jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration", false, new String[]{})));
    ListSequence.fromList(variables).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(thisNode, "jetbrains.mps.lang.pattern.structure.LinkPatternVariableDeclaration", false, new String[]{})));
    ListSequence.fromList(variables).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(thisNode, "jetbrains.mps.lang.pattern.structure.PropertyPatternVariableDeclaration", false, new String[]{})));
    return variables;
  }

  public static List<SNode> call_getUniqueVariables_4855904478357073018(SNode thisNode) {
    List<SNode> variables = PatternExpression_Behavior.call_getVariables_4855904478357072957(thisNode);
    List<SNode> result = new ArrayList<SNode>();
    Set<String> names = new HashSet();
    for (SNode var : variables) {
      if (!(names.contains(SPropertyOperations.getString(var, "name")))) {
        ListSequence.fromList(result).addElement(var);
        names.add(SPropertyOperations.getString(var, "name"));
      }
    }
    return result;
  }

  public static boolean call_hasVariable_4855904478357073120(SNode thisNode) {
    return false;
  }
}
