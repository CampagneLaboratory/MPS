package jetbrains.mps.lang.pattern.testLang.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ValueReference extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.pattern.testLang.structure.ValueReference";
  public static final String VALUE = "value";
  public static final String VARIABLE = "variable";

  public ValueReference(SNode node) {
    super(node);
  }

  public BaseConcept getValue() {
    return (BaseConcept) this.getChild(BaseConcept.class, ValueReference.VALUE);
  }

  public void setValue(BaseConcept node) {
    super.setChild(ValueReference.VALUE, node);
  }

  public PatternTestVariableReference getVariable() {
    return (PatternTestVariableReference) this.getChild(PatternTestVariableReference.class, ValueReference.VARIABLE);
  }

  public void setVariable(PatternTestVariableReference node) {
    super.setChild(ValueReference.VARIABLE, node);
  }

  public static ValueReference newInstance(SModel sm, boolean init) {
    return (ValueReference) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.pattern.testLang.structure.ValueReference", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ValueReference newInstance(SModel sm) {
    return ValueReference.newInstance(sm, false);
  }
}
