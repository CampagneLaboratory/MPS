package jetbrains.mps.lang.editor.editorTest.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class NotEditableVaraileReference_variableDeclaration_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {
  public NotEditableVaraileReference_variableDeclaration_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.lang.editor.editorTest.structure.NotEditableVaraileReference", "variableDeclaration", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.lang.editor.editorTest.structure.NotEditableVaraileReference", "variableDeclaration");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    List<SNode> result = new ArrayList<SNode>();
    for (SNode block : SNodeOperations.getAncestors(_context.getEnclosingNode(), "jetbrains.mps.lang.editor.editorTest.structure.TestBlockList", true)) {
      for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(block))) {
        if (SNodeOperations.isInstanceOf(child, "jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationBlock")) {
          ListSequence.fromList(result).addElement(SNodeOperations.cast(child, "jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationBlock"));
        }
      }
    }
    return result;
  }
}
