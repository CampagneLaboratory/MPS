package jetbrains.mps.make.script.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.ConceptRegistry;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    int hash = conceptFqName.hashCode();
    if (hash == 983572414) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.ResultStatement", "jetbrains.mps.baseLanguage.structure.Statement");
    }
    if (hash == -741479940) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.ResourceType", "jetbrains.mps.baseLanguage.structure.Type");
    }
    if (hash == 1427448848) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.OutputResources", "jetbrains.mps.baseLanguage.structure.Statement");
    }
    if (hash == -1101840932) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.JobDefinition", "jetbrains.mps.baseLanguage.structure.ConceptFunction");
    }
    if (hash == 575325786) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.InputResourcesParameter", "jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter");
    }
    if (hash == -102130137) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.QueryDefinition", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IWillBeClassifier");
    }
    if (hash == -1702025755) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.QueryParameterDeclaration", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == 1354309897) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.Option", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == -950406463) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.Text", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == 1079744641) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.OptionExpression", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    if (hash == 501708771) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.OptionType", "jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IWillBeClassifier");
    }
    if (hash == -123496991) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.ExpectedOption", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.make.script.structure.IExpected", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IWillBeClassifier");
    }
    if (hash == -1739978164) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.Expected", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -1672155938) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.ExpectedInput", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.make.script.structure.IExpected");
    }
    if (hash == -443646447) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.JobDeclaration", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -902242003) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.IExpected");
    }
    if (hash == -1879092157) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.RelayQueryExpression", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    if (hash == 722524617) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.ConfigDefinition", "jetbrains.mps.baseLanguage.structure.ConceptFunction");
    }
    if (hash == -1001578878) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.ReportFeedbackStatement", "jetbrains.mps.baseLanguage.structure.Statement");
    }
    if (hash == -861662775) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.BeginWorkStatement", "jetbrains.mps.baseLanguage.structure.Statement");
    }
    if (hash == 1713558928) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.AdvanceWorkStatement", "jetbrains.mps.baseLanguage.structure.Statement");
    }
    if (hash == 1362544503) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.FinishWorkStatement", "jetbrains.mps.baseLanguage.structure.Statement");
    }
    if (hash == 69496797) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.make.script.structure.AllWorkLeftExpression", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    return null;
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private ImmutableSet<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String... parents) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, parents);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static ImmutableSet<String> getAncestors(String conceptFqName, String... parents) {
      List<String> result = new ArrayList();

      result.add(conceptFqName);
      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : parents) {
        result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
      }
      return ImmutableSet.copyOf(result);
    }
  }
}
