package jetbrains.mps.make.facet.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.IModule;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.generator.GeneratorManager;
import jetbrains.mps.smodel.resources.ModelsToResources;

public class MakeActionParameters {
  private IOperationContext context;
  private List<SModelDescriptor> models;
  private SModelDescriptor cmodel;
  private List<IModule> modules;
  private IModule cmodule;

  public MakeActionParameters(IOperationContext context, List<SModelDescriptor> models, SModelDescriptor cmodel, List<IModule> modules, IModule cmodule) {
    this.context = context;
    this.models = models;
    this.cmodel = cmodel;
    this.modules = modules;
    this.cmodule = cmodule;
  }

  public String actionText(boolean cleanMake) {
    StringBuilder sb = new StringBuilder();
    sb.append((cleanMake ?
      "Rebuild " :
      "Make "
    ));
    IModule module = this.moduleToMake();
    SModelDescriptor model = this.modelToMake();
    if (model != null) {
      sb.append("Model '").append(model.getSModelReference().getSModelFqName().getCompactPresentation()).append("'");
    } else if (this.models != null && this.models.size() > 1) {
      sb.append("Selected Models");
    } else if (module != null) {
      sb.append(NameUtil.shortNameFromLongName(module.getClass().getName().replaceAll("\\$.*", ""))).append(" '").append(NameUtil.compactNamespace(module.getModuleReference().getModuleFqName())).append("'");
    } else if (this.modules != null && this.modules.size() > 1) {
      sb.append("Selected Modules");
    } else {
      return null;
    }
    return sb.toString();
  }

  public Iterable<IResource> collectInput(boolean dirtyOnly) {
    Iterable<SModelDescriptor> smds = Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModelDescriptor>() {
      public Iterable<SModelDescriptor> iterable() {
        return new Iterable<SModelDescriptor>() {
          public Iterator<SModelDescriptor> iterator() {
            return new YieldingIterator<SModelDescriptor>() {
              private int __CP__ = 0;
              private SModelDescriptor _4__yield_nk3wxj_a0a0a0a0a0a1;
              private Iterator<SModelDescriptor> _4__yield_nk3wxj_a0a0a0a0a0a1_it;
              private Iterable<SModelDescriptor> _12_modelsFromModules;
              private SModelDescriptor _13__yield_nk3wxj_c0a0a0a0a0a0b;
              private Iterator<SModelDescriptor> _13__yield_nk3wxj_c0a0a0a0a0a0b_it;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 4:
                      this._4__yield_nk3wxj_a0a0a0a0a0a1_it = Sequence.fromIterable(MakeActionParameters.this.models).iterator();
                    case 5:
                      if (!(this._4__yield_nk3wxj_a0a0a0a0a0a1_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._4__yield_nk3wxj_a0a0a0a0a0a1 = this._4__yield_nk3wxj_a0a0a0a0a0a1_it.next();
                      this.__CP__ = 6;
                      break;
                    case 13:
                      this._13__yield_nk3wxj_c0a0a0a0a0a0b_it = Sequence.fromIterable(_12_modelsFromModules).iterator();
                    case 14:
                      if (!(this._13__yield_nk3wxj_c0a0a0a0a0a0b_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._13__yield_nk3wxj_c0a0a0a0a0a0b = this._13__yield_nk3wxj_c0a0a0a0a0a0b_it.next();
                      this.__CP__ = 15;
                      break;
                    case 2:
                      if (MakeActionParameters.this.models != null && models.size() > 0) {
                        this.__CP__ = 3;
                        break;
                      } else if (MakeActionParameters.this.cmodel != null) {
                        this.__CP__ = 8;
                        break;
                      }
                      this.__CP__ = 10;
                      break;
                    case 7:
                      this.__CP__ = 5;
                      this.yield(_4__yield_nk3wxj_a0a0a0a0a0a1);
                      return true;
                    case 9:
                      this.__CP__ = 1;
                      this.yield(MakeActionParameters.this.cmodel);
                      return true;
                    case 16:
                      this.__CP__ = 14;
                      this.yield(_13__yield_nk3wxj_c0a0a0a0a0a0b);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 3:
                      this.__CP__ = 4;
                      break;
                    case 6:
                      this.__CP__ = 7;
                      break;
                    case 8:
                      this.__CP__ = 9;
                      break;
                    case 10:
                      this._12_modelsFromModules = null;
                      ModelAccess.instance().runReadAction(new Runnable() {
                        public void run() {
                          if (MakeActionParameters.this.modules != null) {
                            for (IModule mod : ListSequence.fromList(MakeActionParameters.this.modules)) {
                              _12_modelsFromModules = Sequence.fromIterable(_12_modelsFromModules).concat(ListSequence.fromList(mod.getEditableUserModels()));
                            }
                          } else if (MakeActionParameters.this.cmodule != null) {
                            _12_modelsFromModules = Sequence.fromIterable(_12_modelsFromModules).concat(ListSequence.fromList(MakeActionParameters.this.cmodule.getEditableUserModels()));
                          }
                        }
                      });
                      this.__CP__ = 13;
                      break;
                    case 15:
                      this.__CP__ = 16;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    })).where(new IWhereFilter<SModelDescriptor>() {
      public boolean accept(SModelDescriptor md) {
        return !(GeneratorManager.isDoNotGenerate(md));
      }
    });
    return new ModelsToResources(context, smds).resources(dirtyOnly);
  }

  private IModule moduleToMake() {
    Iterable<IModule> modulesSeq = ((Iterable<IModule>) this.modules);
    if (Sequence.fromIterable(modulesSeq).count() == 1) {
      return Sequence.fromIterable(modulesSeq).first();
    } else if (Sequence.fromIterable(modulesSeq).count() > 1) {
      return null;
    }
    return this.cmodule;
  }

  private SModelDescriptor modelToMake() {
    Iterable<SModelDescriptor> modelsSeq = ((Iterable<SModelDescriptor>) this.models);
    if (Sequence.fromIterable(modelsSeq).count() == 1) {
      return Sequence.fromIterable(modelsSeq).first();
    } else if (Sequence.fromIterable(modelsSeq).count() > 1) {
      return null;
    }
    return this.cmodel;
  }
}
