package jetbrains.mps.make.facet.plugin;

/*Generated by MPS */

import jetbrains.mps.generator.IncrementalGenerationStrategy;
import jetbrains.mps.generator.GenerationCacheContainer;
import jetbrains.mps.generator.impl.dependencies.GenerationDependencies;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.generator.impl.dependencies.GenerationDependenciesCache;
import java.util.Map;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.generator.ModelDigestHelper;

public class MakeGenerationStrategy implements IncrementalGenerationStrategy {
  private final GenerationCacheContainer cache;
  private final boolean isIncremental;

  public MakeGenerationStrategy(GenerationCacheContainer cache, boolean isIncremental) {
    this.cache = cache;
    this.isIncremental = isIncremental;
  }

  public GenerationDependencies getDependencies(SModelDescriptor descriptor) {
    return (isIncremental ?
      GenerationDependenciesCache.getInstance().get(descriptor) :
      null
    );
  }

  public GenerationCacheContainer getContainer() {
    return cache;
  }

  public Map<String, String> getModelHashes(SModelDescriptor sm, IOperationContext context) {
    if (!((sm instanceof EditableSModelDescriptor))) {
      return null;
    }
    EditableSModelDescriptor esm = (EditableSModelDescriptor) sm;
    if (esm.isPackaged()) {
      return null;
    }
    if (SModelStereotype.isStubModelStereotype(sm.getStereotype())) {
      return null;
    }

    IFile modelFile = esm.getModelFile();
    if (modelFile == null) {
      return null;
    }

    return ModelDigestHelper.getInstance().getGenerationHashes(modelFile, context);
  }

  public boolean isIncrementalEnabled() {
    return isIncremental;
  }
}
