package jetbrains.mps.make.facet.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.internal.make.runtime.script.ScriptBuilder;
import jetbrains.mps.internal.make.runtime.script.UIQueryRelayStrategy;
import jetbrains.mps.internal.make.runtime.script.LoggingProgressStrategy;
import jetbrains.mps.internal.make.runtime.script.LoggingFeedbackStrategy;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.script.IProgress;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.make.script.IOption;
import jetbrains.mps.make.script.IQuery;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.facet.IFacet;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.make.script.IParametersPool;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import com.intellij.openapi.project.Project;
import jetbrains.mps.make.script.IMonitors;
import com.intellij.ide.IdeEventQueue;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.progress.Progressive;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.ide.actions.ModelCheckerTool_Tool;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.generator.ModelGenerationStatusManager;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.util.ArrayList;

public class MakeOrBuild_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(MakeOrBuild_Action.class);

  private boolean cleanMake;

  public MakeOrBuild_Action(boolean cleanMake_par) {
    super("_Make", "", ICON);
    this.cleanMake = cleanMake_par;
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (MakeOrBuild_Action.this.cleanMake) {
      event.getPresentation().setText("Build");
    } else {
      event.getPresentation().setText("Make");
    }
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "MakeOrBuild", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("models", event.getData(MPSDataKeys.MODELS));
    MapSequence.fromMap(_params).put("cmodel", event.getData(MPSDataKeys.CONTEXT_MODEL));
    MapSequence.fromMap(_params).put("modules", event.getData(MPSDataKeys.MODULES));
    MapSequence.fromMap(_params).put("cmodule", event.getData(MPSDataKeys.CONTEXT_MODULE));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      ScriptBuilder scb = new ScriptBuilder();
      final UIQueryRelayStrategy relayStrat = new UIQueryRelayStrategy();
      final LoggingProgressStrategy logStrat = new LoggingProgressStrategy();
      final LoggingFeedbackStrategy feedbackStrat = new LoggingFeedbackStrategy();
      final IJobMonitor jmon = new IJobMonitor() {
        public boolean pleaseStop() {
          return false;
        }

        public IProgress currentProgress() {
          return logStrat.currentProgress();
        }

        public void reportFeedback(IFeedback fdbk) {
          feedbackStrat.reportFeedback(fdbk);
        }
      };
      final IConfigMonitor cmon = new IConfigMonitor() {
        public <T extends IOption> T relayQuery(IQuery<T> query) {
          return relayStrat.relayQuery(query, ((IOperationContext) MapSequence.fromMap(_params).get("context")));
        }
      };
      final IScript scr = scb.withFacets(new IFacet.Name("Generate"), new IFacet.Name("TextGen"), new IFacet.Name("JavaCompile"), new IFacet.Name("Make")).withTarget(new ITarget.Name("make")).withInit(new _FunctionTypes._void_P1_E0<IParametersPool>() {
        public void invoke(IParametersPool pool) {
          Tuples._3<Project, IOperationContext, Boolean> vars = (Tuples._3<Project, IOperationContext, Boolean>) pool.parameters(new ITarget.Name("checkParameters"), Object.class);
          vars._0(((IOperationContext) MapSequence.fromMap(_params).get("context")).getProject());
          vars._1(((IOperationContext) MapSequence.fromMap(_params).get("context")));
          vars._2(MakeOrBuild_Action.this.cleanMake);
        }
      }).withMonitors(new IMonitors.Stub(cmon, jmon) {
        @Override
        public void runJobWithMonitor(final _FunctionTypes._void_P1_E0<? super IJobMonitor> code) {
          IdeEventQueue.getInstance().flushQueue();
          ModelAccess.instance().runWriteActionWithProgressSynchronously(new Progressive() {
            public void run(ProgressIndicator realInd) {
              code.invoke(jmon);
            }
          }, "Script", true, ((IOperationContext) MapSequence.fromMap(_params).get("context")).getProject());
        }
      }).toScript();

      if (!(scr.isValid())) {
        return;
      }

      final Iterable<MResource> inputRes = MakeOrBuild_Action.this.collectInput(!(MakeOrBuild_Action.this.cleanMake), _params);

      // save all before launching the script 
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          SModelRepository.getInstance().saveAll();
        }
      });

      final Wrappers._T<IResult> res = new Wrappers._T<IResult>();

      ModelCheckerTool_Tool mct = ((IOperationContext) MapSequence.fromMap(_params).get("context")).getProject().getComponent(ProjectPluginManager.class).getTool(ModelCheckerTool_Tool.class);
      if (mct.checkModelsBeforeGenerationIfNeeded(((IOperationContext) MapSequence.fromMap(_params).get("context")), ((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models")), new Runnable() {
        public void run() {
          res.value = scr.execute(inputRes);
        }
      })) {
        //  this is insanity! really call this _again_? 
        new _FunctionTypes._return_P0_E0<IResult>() {
          public IResult invoke() {
            return res.value = scr.execute(inputRes);
          }
        }.invoke();
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "MakeOrBuild", t);
    }
  }

  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(((Object) this.cleanMake).toString());
    res.append("!");
    return res.toString();
  }

  private Iterable<MResource> collectInput(final boolean dirtyOnly, final Map<String, Object> _params) {
    Iterable<SModelDescriptor> smds = Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModelDescriptor>() {
      public Iterable<SModelDescriptor> iterable() {
        return new Iterable<SModelDescriptor>() {
          public Iterator<SModelDescriptor> iterator() {
            return new YieldingIterator<SModelDescriptor>() {
              private int __CP__ = 0;
              private SModelDescriptor _5__yield_rl5vzw_a0a0a0a0a0a0g;
              private Iterator<SModelDescriptor> _5__yield_rl5vzw_a0a0a0a0a0a0g_it;
              private Iterable<SModelDescriptor> _11_modelsFromModules;
              private SModelDescriptor _12__yield_rl5vzw_d0a0a0a0a0g;
              private Iterator<SModelDescriptor> _12__yield_rl5vzw_d0a0a0a0a0g_it;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 5:
                      this._5__yield_rl5vzw_a0a0a0a0a0a0g_it = Sequence.fromIterable(((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models"))).iterator();
                    case 6:
                      if (!(this._5__yield_rl5vzw_a0a0a0a0a0a0g_it.hasNext())) {
                        this.__CP__ = 4;
                        break;
                      }
                      this._5__yield_rl5vzw_a0a0a0a0a0a0g = this._5__yield_rl5vzw_a0a0a0a0a0a0g_it.next();
                      this.__CP__ = 7;
                      break;
                    case 12:
                      this._12__yield_rl5vzw_d0a0a0a0a0g_it = Sequence.fromIterable(_11_modelsFromModules).iterator();
                    case 13:
                      if (!(this._12__yield_rl5vzw_d0a0a0a0a0g_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._12__yield_rl5vzw_d0a0a0a0a0g = this._12__yield_rl5vzw_d0a0a0a0a0g_it.next();
                      this.__CP__ = 14;
                      break;
                    case 2:
                      if (((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models")) != null) {
                        this.__CP__ = 3;
                        break;
                      } else if (((SModelDescriptor) MapSequence.fromMap(_params).get("cmodel")) != null) {
                        this.__CP__ = 9;
                        break;
                      }
                      this.__CP__ = 4;
                      break;
                    case 8:
                      this.__CP__ = 6;
                      this.yield(_5__yield_rl5vzw_a0a0a0a0a0a0g);
                      return true;
                    case 10:
                      this.__CP__ = 4;
                      this.yield(((SModelDescriptor) MapSequence.fromMap(_params).get("cmodel")));
                      return true;
                    case 15:
                      this.__CP__ = 13;
                      this.yield(_12__yield_rl5vzw_d0a0a0a0a0g);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this._11_modelsFromModules = null;
                      ModelAccess.instance().runReadAction(new Runnable() {
                        public void run() {
                          if (((List<IModule>) MapSequence.fromMap(_params).get("modules")) != null) {
                            for (IModule mod : ListSequence.fromList(((List<IModule>) MapSequence.fromMap(_params).get("modules")))) {
                              _11_modelsFromModules = Sequence.fromIterable(_11_modelsFromModules).concat(ListSequence.fromList(mod.getEditableUserModels()));
                            }
                          } else if (((IModule) MapSequence.fromMap(_params).get("cmodule")) != null) {
                            _11_modelsFromModules = Sequence.fromIterable(_11_modelsFromModules).concat(ListSequence.fromList(((IModule) MapSequence.fromMap(_params).get("cmodule")).getEditableUserModels()));
                          }
                          if (dirtyOnly) {
                            _11_modelsFromModules = Sequence.fromIterable(_11_modelsFromModules).where(new IWhereFilter<SModelDescriptor>() {
                              public boolean accept(SModelDescriptor md) {
                                return ModelGenerationStatusManager.getInstance().generationRequired(md, ((IOperationContext) MapSequence.fromMap(_params).get("context")), false, true);
                              }
                            }).toListSequence();
                          }
                        }
                      });
                      this.__CP__ = 12;
                      break;
                    case 3:
                      this.__CP__ = 5;
                      break;
                    case 7:
                      this.__CP__ = 8;
                      break;
                    case 9:
                      this.__CP__ = 10;
                      break;
                    case 14:
                      this.__CP__ = 15;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    })).sort(new ISelector<SModelDescriptor, Comparable<?>>() {
      public Comparable<?> select(SModelDescriptor desc) {
        return desc.getModule().getModuleFqName();
      }
    }, true).concat(Sequence.fromIterable(Sequence.<SModelDescriptor>singleton(null)));
    final Wrappers._T<List<SModelDescriptor>> models = new Wrappers._T<List<SModelDescriptor>>(null);
    return Sequence.fromIterable(smds).<MResource>translate(new ITranslator2<SModelDescriptor, MResource>() {
      public Iterable<MResource> translate(final SModelDescriptor smd) {
        return new Iterable<MResource>() {
          public Iterator<MResource> iterator() {
            return new YieldingIterator<MResource>() {
              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      if (smd == null) {
                        this.__CP__ = 3;
                        break;
                      }
                      this.__CP__ = 7;
                      break;
                    case 4:
                      if (models.value != null) {
                        this.__CP__ = 5;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 8:
                      if (models.value != null) {
                        this.__CP__ = 9;
                        break;
                      }
                      this.__CP__ = 10;
                      break;
                    case 11:
                      if (ListSequence.fromList(models.value).last().getModule() == smd.getModule()) {
                        this.__CP__ = 12;
                        break;
                      }
                      this.__CP__ = 14;
                      break;
                    case 10:
                      if (models.value == null) {
                        this.__CP__ = 17;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 6:
                      this.__CP__ = 1;
                      this.yield(new MResource(ListSequence.fromList(models.value).last().getModule(), models.value));
                      return true;
                    case 15:
                      this.__CP__ = 16;
                      this.yield(new MResource(ListSequence.fromList(models.value).last().getModule(), models.value));
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 3:
                      this.__CP__ = 4;
                      break;
                    case 5:
                      this.__CP__ = 6;
                      break;
                    case 7:
                      this.__CP__ = 8;
                      break;
                    case 9:
                      this.__CP__ = 11;
                      break;
                    case 12:
                      ListSequence.fromList(models.value).addElement(smd);
                      this.__CP__ = 10;
                      break;
                    case 14:
                      this.__CP__ = 15;
                      break;
                    case 16:
                      models.value = null;
                      this.__CP__ = 10;
                      break;
                    case 17:
                      models.value = ListSequence.fromListAndArray(new ArrayList<SModelDescriptor>(), smd);
                      this.__CP__ = 1;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    }).toListSequence();
  }
}
