package jetbrains.mps.make.facet.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.script.ScriptBuilder;
import jetbrains.mps.make.facet.IFacet;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.make.script.IOption;
import jetbrains.mps.make.script.IQuery;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.workbench.make.WorkbenchMakeService;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.resources.ModelsToResources;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.resources.FResource;
import jetbrains.mps.workbench.make.TextPreviewFile;
import com.intellij.openapi.fileEditor.FileEditorManager;
import com.intellij.openapi.fileEditor.OpenFileDescriptor;
import java.util.List;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;

public class TextPreviewModel_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(TextPreviewModel_Action.class);

  public TextPreviewModel_Action() {
    super("Preview Generated Text", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    SModelDescriptor md = TextPreviewModel_Action.this.modelToGenerate(_params);
    return md != null && TextPreviewModel_Action.this.isUserEditableModel(md, _params);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "TextPreviewModel", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("cmodel", event.getData(MPSDataKeys.CONTEXT_MODEL));
    MapSequence.fromMap(_params).put("models", event.getData(MPSDataKeys.MODELS));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      SModelDescriptor md = TextPreviewModel_Action.this.modelToGenerate(_params);
      IScript scr = new ScriptBuilder().withFacets(new IFacet.Name("Generate"), new IFacet.Name("TextGen"), new IFacet.Name("JavaCompile"), new IFacet.Name("Make")).withTarget(new ITarget.Name("textGenToMemory")).toScript();
      IConfigMonitor cmon = new IConfigMonitor() {
        public <T extends IOption> T relayQuery(IQuery<T> query) {
          return query.defaultOption();
        }
      };
      IResult res = new WorkbenchMakeService(((IOperationContext) MapSequence.fromMap(_params).get("context")), cmon, true).make(new ModelsToResources(((IOperationContext) MapSequence.fromMap(_params).get("context")), Sequence.<SModelDescriptor>singleton(md)).resources(false), scr);

      if (res.isSucessful()) {
        FResource fres = new FResource().assignFrom((FResource) Sequence.fromIterable(res.output()).first());

        TextPreviewFile tfile = new TextPreviewFile(md.getSModelReference().getSModelFqName().getCompactPresentation(), "Generated text for " + md.getSModelReference().getSModelFqName().getLongName(), fres.contents());
        FileEditorManager.getInstance(((IOperationContext) MapSequence.fromMap(_params).get("context")).getProject()).openTextEditor(new OpenFileDescriptor(((IOperationContext) MapSequence.fromMap(_params).get("context")).getProject(), tfile), true);
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "TextPreviewModel", t);
    }
  }

  private SModelDescriptor modelToGenerate(final Map<String, Object> _params) {
    SModelDescriptor md = null;
    if (((SModelDescriptor) MapSequence.fromMap(_params).get("cmodel")) != null) {
      md = ((SModelDescriptor) MapSequence.fromMap(_params).get("cmodel"));
    } else if (((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models")).size() > 0) {
      md = ((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models")).get(0);
    }
    return md;
  }

  private boolean isUserEditableModel(SModelDescriptor md, final Map<String, Object> _params) {
    if (!(SModelStereotype.isUserModel(md))) {
      return false;
    }
    return md instanceof EditableSModelDescriptor && !(((EditableSModelDescriptor) md).isPackaged());
  }
}
