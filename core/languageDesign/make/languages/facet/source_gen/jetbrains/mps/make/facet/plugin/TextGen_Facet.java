package jetbrains.mps.make.facet.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.script.IParametersPool;
import jetbrains.mps.internal.make.runtime.java.FileProcessor;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.internal.make.runtime.java.JavaStreamHandler;
import jetbrains.mps.generator.ModelGenerationStatusManager;
import jetbrains.mps.make.java.BLDependenciesCache;
import jetbrains.mps.generator.traceInfo.TraceInfoCache;
import jetbrains.mps.generator.impl.dependencies.GenerationDependenciesCache;
import jetbrains.mps.generator.generationTypes.TextGenerator;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.generator.TransientModelsModule;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.cleanup.CleanupManager;
import jetbrains.mps.make.script.IConfig;

public class TextGen_Facet implements IFacet {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("TextGen");

  public TextGen_Facet() {
    ListSequence.fromList(targets).addElement(new TextGen_Facet.Target_21gswx_a());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return null;
  }

  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("Generate"), new IFacet.Name("Make")});
  }

  public Iterable<IFacet.Name> extended() {
    return null;
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public static class Target_21gswx_a implements ITarget {
    private ITarget.Name name = new ITarget.Name("textGen");

    public Target_21gswx_a() {
    }

    public IJob createJob() {
      return new IJob() {
        public IResult execute(final Iterable<IResource> input, final IJobMonitor monitor, final IParametersPool pool) {
          Iterable<IResource> _output_21gswx_a0a = null;
          switch (0) {
            case 0:
              monitor.currentProgress().beginWork("Generating text", Sequence.fromIterable(input).count() * 100, monitor.currentProgress().workLeft());
              for (IResource resource : Sequence.fromIterable(input)) {
                final FileProcessor fileProc = new FileProcessor();
                GResource gres = new GResource().assignFrom((GResource) resource);
                monitor.currentProgress().advanceWork("Generating text", 50, gres.status().getInputModel().getSModelReference().getSModelFqName().getLongName());
                if (!(gres.status().isOk())) {
                  Logger.getLogger("jetbrains.mps.make.TextGen").error("Generation was not OK");
                  return new IResult.FAILURE(_output_21gswx_a0a);
                }
                IFile targetDir = FileSystem.getInstance().getFileByPath(gres.module().getOutputFor(gres.model()));
                JavaStreamHandler javaStreamHandler = new JavaStreamHandler(gres.model(), targetDir, fileProc);
                try {
                  ModelGenerationStatusManager mgsm = ModelGenerationStatusManager.getInstance();
                  BLDependenciesCache bldc = BLDependenciesCache.getInstance();
                  TraceInfoCache tic = TraceInfoCache.getInstance();
                  GenerationDependenciesCache gdc = GenerationDependenciesCache.getInstance();
                  boolean res;
                  res = new TextGenerator(javaStreamHandler, mgsm.getCacheGenerator(), bldc.getGenerator(), tic.getGenerator(), gdc.getGenerator()).handleOutput(pool.parameters(new ITarget.Name("checkParameters"), Generate_Facet.Target_fi61u2_a.Variables.class).operationContext(), gres.status());

                  final SModelDescriptor outputMD = gres.status().getOutputModelDescriptor();
                  if (outputMD instanceof TransientModelsModule.TransientSModelDescriptor) {
                    ModelAccess.instance().runWriteInEDT(new Runnable() {
                      public void run() {
                        TransientModelsModule.TransientSModelDescriptor tmd = (TransientModelsModule.TransientSModelDescriptor) outputMD;
                        ((TransientModelsModule) tmd.getModule()).removeModel(tmd);
                      }
                    });
                  }
                  CleanupManager.getInstance().cleanup();

                  if (!(res)) {
                    Logger.getLogger("jetbrains.mps.make.TextGen").error("TextGenerator returned false");
                    return new IResult.FAILURE(_output_21gswx_a0a);
                  }
                  ModelAccess.instance().writeFilesInEDT(new Runnable() {
                    public void run() {
                      fileProc.saveGeneratedFiles();
                    }
                  });
                  monitor.currentProgress().advanceWork("Generating text", 50);
                } finally {
                  javaStreamHandler.dispose();
                }
                _output_21gswx_a0a = Sequence.fromIterable(_output_21gswx_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new TResource(gres.module()))));
              }
              monitor.currentProgress().finishWork("Generating text");
            default:
              return new IResult.SUCCESS(_output_21gswx_a0a);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("generate")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("cleanUpAfterGeneration"), new ITarget.Name("make")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return true;
    }

    public Class<? extends IResource> expectedResources() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return null;
    }
  }
}
