package smodelLanguage.samples;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import java.util.List;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.smodel.IScope;

public class Model {

  public void new_node_1(SModel model) {
    SNode new_stmt = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.IfStatement", null);
    SNode new_class = SModelOperations.createNewRootNode(model, "jetbrains.mps.baseLanguage.structure.ClassConcept", null);
    SModelOperations.addRootNode(model, SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Statement", null));
  }

  public void roots_access_1(SModel model) {
    List<SNode> roots1 = SModelOperations.getRoots(model, null);
    List<SNode> roots2 = SModelOperations.getRoots(model, "jetbrains.mps.baseLanguage.structure.ClassConcept");
    Iterable<SNode> roots3 = SequenceOperations.where(SModelOperations.getRoots(model, "jetbrains.mps.baseLanguage.structure.ClassConcept"), new zPredicate1(Model.this, null));
  }

  public void roots_access_2(SModel model, IScope scope) {
    SModelOperations.getRootsIncludingImported(model, scope, "jetbrains.mps.baseLanguage.structure.IfStatement");
  }

  public void nodes_access_1(SModel model) {
    List<SNode> nodes1 = SModelOperations.getNodes(model, null);
    List<SNode> nodes2 = SModelOperations.getNodes(model, "jetbrains.mps.baseLanguage.structure.ClassConcept");
    Iterable<SNode> nodes3 = SequenceOperations.where(SModelOperations.getNodes(model, "jetbrains.mps.baseLanguage.structure.ClassConcept"), new zPredicate2(Model.this, null));
  }

}
