package jetbrains.mps.bootstrap.smodelLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;

public class AddOperationParameter_Intention extends BaseIntention implements Intention {

  public String getConcept() {
    return "jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation";
  }

  public boolean isErrorIntention() {
    return false;
  }

  public String getDescription(SNode node, EditorContext editorContext) {
    return "add parameter(s)";
  }

  public boolean isApplicable(SNode node, EditorContext editorContext) {
    if (SequenceOperations.isEmpty(SLinkOperations.getTargets(node, "parameter", true))) {
      return !(SequenceOperations.isEmpty(SLinkOperations.getConceptLinkTargets(node, "applicableParameter")));
    }
    return false;
  }

  public void execute(SNode node, EditorContext editorContext) {
    List<SNode> applicableParms = SLinkOperations.getConceptLinkTargets(node, "applicableParameter");
    if (SequenceOperations.getSize(applicableParms) == 1) {
      SLinkOperations.addChild(node, "parameter", SConceptOperations.createNewNode(NameUtil.nodeFQName(((SNode)SequenceOperations.getFirst(applicableParms))), null));
    } else
    {
      SLinkOperations.addNewChild(node, "parameter", "jetbrains.mps.bootstrap.smodelLanguage.structure.AbstractOperationParameter");
    }
  }

}
