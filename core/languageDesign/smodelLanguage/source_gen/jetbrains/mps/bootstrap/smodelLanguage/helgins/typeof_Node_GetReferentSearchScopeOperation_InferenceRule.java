package jetbrains.mps.bootstrap.smodelLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import jetbrains.mps.bootstrap.structureLanguage.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_Node_GetReferentSearchScopeOperation_InferenceRule implements InferenceRule_Runtime {

  public typeof_Node_GetReferentSearchScopeOperation_InferenceRule() {
  }

  public void applyRule(final SNode op) {
    {
      SNode _nodeToCheck_1029348928467 = op;
      BaseIntentionProvider intentionProvider = null;
      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(op, "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1221168249378", true), new QuotationClass_100().createNode(), _nodeToCheck_1029348928467, null, "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1221168255365", intentionProvider);
    }
    // generic check 
    RulesUtil.checkAppliedCorrectly_generic(op);
    // check operation context argument
    {
      SNode _nodeToCheck_1029348928467 = op;
      BaseIntentionProvider intentionProvider = null;
      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(op, "operationContext", true), "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1221167442901", true), new QuotationClass_99().createNode(), _nodeToCheck_1029348928467, null, "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1221167466283", false, 0, intentionProvider);
    }
    // check link role argument
    final SNode linkDecl = SLinkOperations.getTarget(op, "referenceLink", false);
    if (linkDecl != null) {
      if (!(SPropertyOperations.hasValue(linkDecl, "metaClass", "reference", "reference"))) {
        TypeChecker.getInstance().reportTypeError(op, "reference link is expected", "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1221168677396");
      }
      final SNode Concept_typevar_1221168662799 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable();
      RulesUtil.equate_inputNodeConcept(op, TypeChecker.getInstance().getEquationManager().getRepresentator(Concept_typevar_1221168662799));
      {
        final SNode C = TypeChecker.getInstance().getEquationManager().getRepresentator(Concept_typevar_1221168662799);
        TypeChecker.getInstance().getRuntimeSupport().whenConcrete(C, new Runnable() {

          public void run() {
            SNode inputNodeConcept = TypeChecker.getInstance().getEquationManager().getRepresentator(C);
            List<SNode> declaredLinks = AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(inputNodeConcept);
            if (!(ListSequence.fromList(declaredLinks).contains(linkDecl))) {
              TypeChecker.getInstance().reportTypeError(op, "access to link '" + SPropertyOperations.getString(linkDecl, "role") + "' is not expected here", "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1221168662817");
            }
          }

        }, "jetbrains.mps.bootstrap.smodelLanguage.helgins@3_0", "1221168808278");
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.bootstrap.smodelLanguage.structure.Node_GetReferentSearchScopeOperation";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return true;
  }

}
