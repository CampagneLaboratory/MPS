package jetbrains.mps.bootstrap.smodelLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;

public class Concept_GetAllSuperConcepts_Editor extends DefaultNodeEditor {

  /* package */AbstractCellProvider myReplaceableAliasAndParms_Comp1;

  private static void setupBasic_Collection_12069962559861206996255986(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.putUserObject(EditorCell.CELL_ID, "Collection_1206996255986");
  }

  private static void setupBasic_component_ReplaceableAliasAndParms_Comp1206996255987(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.putUserObject(EditorCell.CELL_ID, "component_ReplaceableAliasAndParms_Comp");
  }


  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection1206996255986(context, node);
  }

  public EditorCell createCollection1206996255986(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12069962559861206996255986(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createComponent1206996255987(context, node));
    return editorCell;
  }

  public EditorCell createComponent1206996255987(EditorContext context, SNode node) {
    if (this.myReplaceableAliasAndParms_Comp1 == null) {
      this.myReplaceableAliasAndParms_Comp1 = new ReplaceableAliasAndParms_Comp(node);
    }
    EditorCell editorCell = this.myReplaceableAliasAndParms_Comp1.createEditorCell(context);
    setupBasic_component_ReplaceableAliasAndParms_Comp1206996255987(editorCell, node, context);
    return editorCell;
  }

}
