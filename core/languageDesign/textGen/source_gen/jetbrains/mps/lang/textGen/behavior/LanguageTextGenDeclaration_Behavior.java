package jetbrains.mps.lang.textGen.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class LanguageTextGenDeclaration_Behavior {

  public static void init(SNode thisNode) {
  }

  public static boolean call_useAppendNodeTextOperation_1234259560830(SNode thisNode) {
    for(SNode function : SLinkOperations.getTargets(thisNode, "operation", true)) {
      if (AbstractTextGenDeclaration_Behavior.call_containsAppendNodeTextOperation_1234282217768(thisNode, SLinkOperations.getTargets(SLinkOperations.getTarget(function, "body", true), "statement", true))) {
        return true;
      }
    }
    return false;
  }

  public static List<SNode> call_getParameters_1234799367488(SNode thisNode) {
    if (thisNode == null) {
      return ListSequence.<SNode>fromArray();
    }
    List<SNode> result = new ArrayList<SNode>();
    ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getConceptLinkTargets(thisNode, "applicableHiddenParameter")));
    return (List<SNode>)result;
  }

  public static List<SNode> virtual_getAvailableOperations_1234781444746(SNode thisNode) {
    List<SNode> result = new ArrayList<SNode>();
    List<SNode> list = LanguageTextGenDeclaration_Behavior.call_getBaseTextGenComponents_1234781318244(thisNode, new ArrayList<SNode>(), thisNode);
    for(SNode baseTextGen : list) {
      for(SNode func : SLinkOperations.getTargets(baseTextGen, "operation", true)) {
        if (SPropertyOperations.getString(func, "name") != null) {
          ListSequence.fromList(result).addElement(func);
        }
      }
      ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getTargets(baseTextGen, "operation", true)));
    }
    return result;
  }

  public static List<SNode> call_getAvailableFunctions_1234781318196(SNode thisNode) {
    List<SNode> result = new ArrayList<SNode>();
    List<SNode> list = LanguageTextGenDeclaration_Behavior.call_getBaseTextGenComponents_1234781318244(thisNode, new ArrayList<SNode>(), SLinkOperations.getTarget(thisNode, "baseTextGen", false));
    for(SNode baseTextGen : list) {
      for(SNode func : SLinkOperations.getTargets(baseTextGen, "function", true)) {
        if (SPropertyOperations.getString(func, "name") != null) {
          ListSequence.fromList(result).addElement(func);
        }
      }
    }
    return result;
  }

  public static List<SNode> call_getBaseTextGenComponents_1234781318244(SNode thisNode, List<SNode> list, SNode node) {
    ListSequence.fromList(list).addElement(node);
    if ((SLinkOperations.getTarget(node, "baseTextGen", false) == null) || !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "baseTextGen", false), "jetbrains.mps.lang.textGen.structure.LanguageTextGenDeclaration"))) {
      return list;
    } else
    {
      return LanguageTextGenDeclaration_Behavior.call_getBaseTextGenComponents_1234781318244(thisNode, list, (SNode)SLinkOperations.getTarget(node, "baseTextGen", false));
    }
  }

  public static String virtual_getTextGenNode_1234784577703(SNode thisNode) {
    return "textGen";
  }

}
