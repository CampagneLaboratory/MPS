package jetbrains.mps.lang.textGen.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ConstraintsDataHolder;
import java.util.Map;
import jetbrains.mps.smodel.constraints.INodePropertyGetter;
import java.util.HashMap;
import jetbrains.mps.smodel.constraints.BaseNodePropertyGetter;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider;
import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNodePointer;

public class OperationDeclaration_Constraints extends ConstraintsDataHolder {
  public OperationDeclaration_Constraints() {
  }

  public String getConceptFqName() {
    return "jetbrains.mps.lang.textGen.structure.OperationDeclaration";
  }

  public Map<String, INodePropertyGetter> getNodePropertyGetters() {
    HashMap<String, INodePropertyGetter> result = new HashMap<String, INodePropertyGetter>();
    result.put("operationName", new BaseNodePropertyGetter() {
      public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
        String name = SPropertyOperations.getString(node, "name");
        if (name == null) {
          return null;
        }
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < name.length(); i++) {
          if (Character.isUpperCase(name.charAt(i))) {
            result.append(' ');
            result.append(name.toLowerCase().charAt(i));
          } else {
            result.append(name.charAt(i));
          }
        }
        return result.toString();
      }
    });
    return result;
  }

  @Override
  public INodeReferentSearchScopeProvider getNodeDefaultSearchScopeProvider() {
    return new BaseNodeReferenceSearchScopeProvider() {
      public void registerSelf(ModelConstraintsManager manager) {
      }

      public void unRegisterSelf(ModelConstraintsManager manager) {
      }

      public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
        List<SNode> result = new ArrayList<SNode>();
        List<SNode> tgList = SModelOperations.getRootsIncludingImported(_context.getModel(), GlobalScope.getInstance(), "jetbrains.mps.lang.textGen.structure.LanguageTextGenDeclaration");
        for (SNode tg : tgList) {
          ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getTargets(tg, "operation", true)));
        }
        return result;
      }

      public SNodePointer getSearchScopeValidatorNodePointer() {
        return new SNodePointer("r:472e3702-e789-4c3f-b300-132c65ad44f1(jetbrains.mps.lang.textGen.constraints)", "1236703304349");
      }
    };
  }
}
