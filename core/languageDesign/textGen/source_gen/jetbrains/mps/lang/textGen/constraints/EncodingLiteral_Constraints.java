package jetbrains.mps.lang.textGen.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ConstraintsDataHolder;
import java.util.Map;
import jetbrains.mps.smodel.constraints.INodePropertyValidator;
import java.util.HashMap;
import jetbrains.mps.smodel.constraints.BaseNodePropertyValidator;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.nio.charset.Charset;

public class EncodingLiteral_Constraints extends ConstraintsDataHolder {
  public EncodingLiteral_Constraints() {
  }

  public String getConceptFqName() {
    return "jetbrains.mps.lang.textGen.structure.EncodingLiteral";
  }

  public Map<String, INodePropertyValidator> getNodePropertyValidators() {
    HashMap<String, INodePropertyValidator> result = new HashMap<String, INodePropertyValidator>();
    result.put("encoding", new BaseNodePropertyValidator() {
      public boolean checkPropertyValue(final SNode node, final String propertyName, final String propertyValue, final IScope scope) {
        if (StringUtils.isEmpty(StringUtils.trim((SPropertyOperations.getString(propertyValue))))) {
          return false;
        }
        if ((SPropertyOperations.getString(propertyValue)).equals("binary")) {
          return true;
        }
        try {
          Charset.forName((SPropertyOperations.getString(propertyValue)));
          return true;
        } catch (IllegalArgumentException uc) {
          return false;
        }
      }
    });
    return result;
  }
}
