package jetbrains.mps.lang.textGen.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.textGen.behavior.AbstractAppendPart_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class SetWithIndent_Intention extends BaseIntention {

  public String getConcept() {
    return "jetbrains.mps.lang.textGen.structure.AbstractAppendPart";
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    if (!(AbstractAppendPart_Behavior.call_withIndent_1237466287046(node))) {
      return "Append with indent";
    } else
    {
      return "Appent without indent";
    }
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.textGen.structure.ConstantStringPart") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.textGen.structure.NodePart");
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    boolean indent = AbstractAppendPart_Behavior.call_withIndent_1237466287046(node);
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.textGen.structure.ConstantStringPart")) {
      SPropertyOperations.set(node, "withIndent", "" + !(indent));
    } else
    {
      SPropertyOperations.set(node, "withIndent", "" + !(indent));
    }
  }

  public String getLocationString() {
    return "jetbrains.mps.lang.textGen.intentions";
  }

}
