package jetbrains.mps.lang.textGen.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class OperationCall_MigrationScript extends BaseMigrationScript {
  public OperationCall_MigrationScript(IOperationContext operationContext) {
    super("modify operation call");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "operation call";
      }

      public String getAdditionalInfo() {
        return "operation call";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.baseLanguage.structure.StatementList";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        for (SNode st : SLinkOperations.getTargets(node, "statement", true)) {
          if (SNodeOperations.isInstanceOf(st, "jetbrains.mps.lang.textGen.structure.OperationCall")) {
            return true;
          }
        }
        return false;
      }

      public void doUpdateInstanceNode(SNode node) {
        for (SNode st : SLinkOperations.getTargets(node, "statement", true)) {
          if (SNodeOperations.isInstanceOf(st, "jetbrains.mps.lang.textGen.structure.OperationCall")) {
            SNode append = SConceptOperations.createNewNode("jetbrains.mps.lang.textGen.structure.AppendOperation", null);
            SLinkOperations.removeAllChildren(append, "part");
            SLinkOperations.addChild(append, "part", SNodeOperations.copyNode(st));
            SNodeOperations.replaceWithAnother(st, append);
          }
        }
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
