package jetbrains.mps.lang.constraints.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.baseLanguage.plugin.AbstractExtractMethodRefactoringProcessor;
import jetbrains.mps.baseLanguage.plugin.AbstractStaticContainerProcessor;
import jetbrains.mps.baseLanguage.plugin.VisibilityLevel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ConceptBehavior_Behavior {

  public static void init(SNode thisNode) {
  }

  public static List<SNode> virtual_getMembers_1213877531970(SNode thisNode) {
    List<SNode> members = new ArrayList<SNode>();
    ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "properties", true)));
    ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "references", true)));
    ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "method", true)));
    return members;
  }

  public static List<SNode> call_getVisibleStaticMethods_1213877272451(SNode thisNode, SNode contextNode) {
    List<SNode> result = new ArrayList<SNode>();
    for(SNode method : SLinkOperations.getTargets(thisNode, "staticMethod", true)) {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method, "visibility", true), "jetbrains.mps.baseLanguage.structure.PublicVisibility")) {
        ListSequence.fromList(result).addElement(method);
      }
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method, "visibility", true), "jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
        if (SNodeOperations.getAncestor(contextNode, "jetbrains.mps.lang.constraints.structure.ConceptBehavior", true, false) == thisNode) {
          ListSequence.fromList(result).addElement(method);
        }
      }
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method, "visibility", true), "jetbrains.mps.baseLanguage.structure.ProtectedVisibility")) {
        SNode contextConcept = SLinkOperations.getTarget(SNodeOperations.getAncestor(contextNode, "jetbrains.mps.lang.constraints.structure.ConceptBehavior", true, false), "concept", false);
        SNode methodConcept = SLinkOperations.getTarget(SNodeOperations.getAncestor(method, "jetbrains.mps.lang.constraints.structure.ConceptBehavior", true, false), "concept", false);
        if (SConceptOperations.isSubConceptOf(contextConcept, NameUtil.nodeFQName(methodConcept))) {
          ListSequence.fromList(result).addElement(method);
        }
      }
      if ((SLinkOperations.getTarget(method, "visibility", true) == null)) {
        if (SNodeOperations.getModel(method) == SNodeOperations.getModel(contextNode)) {
          ListSequence.fromList(result).addElement(method);
        }
      }
    }
    return result;
  }

  public static AbstractExtractMethodRefactoringProcessor virtual_getExtractMethodRefactoringProcessor_1221393367929(SNode thisNode, List<SNode> nodesToExtract) {
    AbstractExtractMethodRefactoringProcessor result = new AbstractExtractMethodRefactoringProcessor(thisNode, nodesToExtract) {

      public SNode createMethodCall(SNode declaration, List<SNode> arguments) {
        if (SNodeOperations.isInstanceOf(declaration, "jetbrains.mps.lang.constraints.structure.ConceptMethodDeclaration")) {
          SNode call = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall", null);
          SLinkOperations.setTarget(call, "conceptMethodDeclaration", (SNode)declaration, false);
          SLinkOperations.addAll(call, "actualArgument", arguments);
          SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression", null);
          SLinkOperations.setTarget(result, "operand", SConceptOperations.createNewNode("jetbrains.mps.lang.constraints.structure.ThisNodeExpression", null), true);
          SLinkOperations.setTarget(result, "operation", call, true);
          return result;
        }
        if (SNodeOperations.isInstanceOf(declaration, "jetbrains.mps.lang.constraints.structure.StaticConceptMethodDeclaration")) {
          SNode call = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall", null);
          SLinkOperations.setTarget(call, "baseMethodDeclaration", (SNode)declaration, false);
          SLinkOperations.addAll(call, "actualArgument", arguments);
          SLinkOperations.setTarget(call, "concept", SLinkOperations.getTarget(((SNode)this.myNode), "concept", false), false);
          return call;
        }
        return null;
      }

    };
    return result;
  }

  public static AbstractStaticContainerProcessor virtual_getStaticContainerProcessor_1222174378300(SNode thisNode, SNode node) {
    return new AbstractStaticContainerProcessor(node) {

      public SNode createNewMethod(VisibilityLevel visiblity, SNode type, String name, List<SNode> params, SNode body) {
        SNode method = SConceptOperations.createNewNode("jetbrains.mps.lang.constraints.structure.StaticConceptMethodDeclaration", null);
        SLinkOperations.setTarget(method, "visibility", visiblity.getNode(), true);
        SLinkOperations.setTarget(method, "returnType", type, true);
        SPropertyOperations.set(method, "name", name);
        SLinkOperations.addAll(method, "parameter", params);
        SLinkOperations.setTarget(method, "body", body, true);
        return method;
      }

      public SNode createMethodCall(SNode method, List<SNode> arguments) {
        SNode call = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall", null);
        SLinkOperations.setTarget(call, "baseMethodDeclaration", ((SNode)method), false);
        SLinkOperations.setTarget(call, "concept", SLinkOperations.getTarget(((SNode)this.myStaticContainer), "concept", false), false);
        SLinkOperations.addAll(call, "actualArgument", arguments);
        return call;
      }

    };
  }

  public static void abc_1213877272405(int i, int j) {
    if (i == j) {
    }
  }

}
