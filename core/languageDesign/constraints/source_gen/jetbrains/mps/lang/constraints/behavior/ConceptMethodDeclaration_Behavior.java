package jetbrains.mps.lang.constraints.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ConceptMethodDeclaration_Behavior {

  public static void init(SNode thisNode) {
  }

  public static SNode call_findBehaviour_1213877345454(SNode thisNode) {
    return SNodeOperations.getContainingRoot(thisNode);
  }

  public static SNode call_getOverridenMethod_1213877345462(SNode thisNode) {
    if (SLinkOperations.getTarget(thisNode, "overriddenMethod", false) != null) {
      return SLinkOperations.getTarget(thisNode, "overriddenMethod", false);
    }
    if (SPropertyOperations.getBoolean(thisNode, "isVirtual")) {
      return thisNode;
    }
    return null;
  }

  public static String call_getOverridenMethodConceptName_1213877345485(SNode thisNode) {
    SNode conceptDeclaration = SLinkOperations.getTarget(SNodeOperations.getAncestor(ConceptMethodDeclaration_Behavior.call_getOverridenMethod_1213877345462(thisNode), "jetbrains.mps.lang.constraints.structure.ConceptBehavior", false, false), "concept", false);
    return SPropertyOperations.getString(conceptDeclaration, "name");
  }

  public static String call_getGeneratedName_1213877345504(SNode thisNode) {
    SNode baseMethod = ConceptMethodDeclaration_Behavior.call_getOverridenMethod_1213877345462(thisNode);
    if (baseMethod == null) {
      return ConceptMethodDeclaration_Behavior.call_getCallerMethodName_1213877345535(thisNode);
    }
    return "virtual_" + SPropertyOperations.getString(baseMethod, "name") + "_" + baseMethod.getId();
  }

  public static String call_getCallerMethodName_1213877345535(SNode thisNode) {
    return "call_" + SPropertyOperations.getString(thisNode, "name") + "_" + thisNode.getId();
  }

  public static String call_getSuperCallerMethodName_1213877345551(SNode thisNode) {
    return "callSuper_" + SPropertyOperations.getString(thisNode, "name") + "_" + thisNode.getId();
  }

}
