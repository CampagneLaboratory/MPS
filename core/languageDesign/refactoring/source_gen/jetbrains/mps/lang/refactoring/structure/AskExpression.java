package jetbrains.mps.lang.refactoring.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AskExpression extends Expression {
  public static final String concept = "jetbrains.mps.lang.refactoring.structure.AskExpression";
  public static final String PARAMETER = "parameter";

  public AskExpression(SNode node) {
    super(node);
  }

  public int getParametersCount() {
    return this.getChildCount(AskExpression.PARAMETER);
  }

  public Iterator<RefactoringParameterReference> parameters() {
    return this.children(RefactoringParameterReference.class, AskExpression.PARAMETER);
  }

  public List<RefactoringParameterReference> getParameters() {
    return this.getChildren(RefactoringParameterReference.class, AskExpression.PARAMETER);
  }

  public void addParameter(RefactoringParameterReference node) {
    this.addChild(AskExpression.PARAMETER, node);
  }

  public void insertParameter(RefactoringParameterReference prev, RefactoringParameterReference node) {
    this.insertChild(prev, AskExpression.PARAMETER, node);
  }

  public static AskExpression newInstance(SModel sm, boolean init) {
    return (AskExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.refactoring.structure.AskExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AskExpression newInstance(SModel sm) {
    return AskExpression.newInstance(sm, false);
  }
}
