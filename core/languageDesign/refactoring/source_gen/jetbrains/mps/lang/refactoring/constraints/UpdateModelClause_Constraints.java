package jetbrains.mps.lang.refactoring.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ConstraintsDataHolder;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.structure.CanBeASomethingMethod;
import jetbrains.mps.smodel.constraints.CanBeAnAncestorContext;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.structure.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class UpdateModelClause_Constraints extends ConstraintsDataHolder {
  public UpdateModelClause_Constraints() {
  }

  public String getConceptFqName() {
    return "jetbrains.mps.lang.refactoring.structure.UpdateModelClause";
  }

  @Nullable
  @Override
  public CanBeASomethingMethod<CanBeAnAncestorContext> getCanBeAnAncestorMethod() {
    return new CanBeASomethingMethod<CanBeAnAncestorContext>() {
      private SNodePointer breakingNode = new SNodePointer("r:00000000-0000-4000-0000-011c89590313(jetbrains.mps.lang.refactoring.constraints)", "2210862369564128647");

      public boolean canBe(IOperationContext operationContext, CanBeAnAncestorContext _context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = canBeAnAncestor(operationContext, _context);
        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.breakingNodePointer = breakingNode;
        }
        return result;
      }
    };
  }

  public static boolean canBeAnAncestor(final IOperationContext operationContext, final CanBeAnAncestorContext _context) {
    return SConceptOperations.isExactly(_context.getChildConcept(), "jetbrains.mps.baseLanguage.structure.StatementList") || SConceptOperations.isExactly(_context.getChildConcept(), "jetbrains.mps.lang.refactoring.structure.UpdateModelByDefaultOperation");
  }
}
