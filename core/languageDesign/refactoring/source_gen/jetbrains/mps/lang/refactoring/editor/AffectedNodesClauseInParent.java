package jetbrains.mps.lang.refactoring.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class AffectedNodesClauseInParent extends AbstractCellProvider {

  public AffectedNodesClauseInParent(SNode node) {
    super(node);
  }

  public EditorCell createEditorCell(EditorContext context) {
    return this.createEditorCell(context, this.getSNode());
  }

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection_5723_4(context, node);
  }

  public EditorCell createCollection_5723_0(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(context, node);
    editorCell.setCellId("Collection_5723_0");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
    editorCell.addEditorCell(this.createConstant_5723_0(context, node, "on no usages:"));
    editorCell.addEditorCell(this.createCollection_5723_1(context, node));
    return editorCell;
  }

  public EditorCell createCollection_5723_1(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    editorCell.setCellId("Collection_5723_1");
    editorCell.setGridLayout(true);
    editorCell.addEditorCell(this.createCollection_5723_2(context, node));
    if (renderingCondition5723_0(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection_5723_3(context, node));
    }
    return editorCell;
  }

  public EditorCell createCollection_5723_2(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    editorCell.setCellId("Collection_5723_2");
    editorCell.addEditorCell(this.createConstant_5723_1(context, node, "refactor immediately"));
    editorCell.addEditorCell(this.createConstant_5723_2(context, node, ":"));
    editorCell.addEditorCell(this.createProperty_5723_0(context, node));
    return editorCell;
  }

  public EditorCell createCollection_5723_3(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    editorCell.setCellId("Collection_5723_3");
    editorCell.addEditorCell(this.createConstant_5723_3(context, node, "non-local"));
    editorCell.addEditorCell(this.createConstant_5723_4(context, node, ":"));
    editorCell.addEditorCell(this.createProperty_5723_1(context, node));
    return editorCell;
  }

  public EditorCell createCollection_5723_4(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    editorCell.setCellId("Collection_5723_4");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
    if (renderingCondition5723_1(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection_5723_0(context, node));
    }
    return editorCell;
  }

  public EditorCell createConstant_5723_0(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    editorCell.setCellId("Constant_5723_0");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
      style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_BLUE);
    }
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_5723_1(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    editorCell.setCellId("Constant_5723_1");
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_5723_2(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    editorCell.setCellId("Constant_5723_2");
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_5723_3(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    editorCell.setCellId("Constant_5723_3");
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_5723_4(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    editorCell.setCellId("Constant_5723_4");
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createProperty_5723_0(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("refactorImmediatelyIfNoUsages");
    provider.setNoTargetText("<no refactorImmediatelyIfNoUsages>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(context);
    editorCell.setCellId("property_refactorImmediatelyIfNoUsages");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public EditorCell createProperty_5723_1(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("nonLocalByDefault");
    provider.setNoTargetText("<no nonLocalByDefault>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(context);
    editorCell.setCellId("property_nonLocalByDefault");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }


  public static boolean renderingCondition5723_0(SNode node, EditorContext editorContext, IScope scope) {
    return SPropertyOperations.getBoolean(node, "refactorImmediatelyIfNoUsages");
  }

  public static boolean renderingCondition5723_1(SNode node, EditorContext editorContext, IScope scope) {
    return SLinkOperations.getTarget(node, "affectedNodesClause", true) != null;
  }

}
