package jetbrains.mps.lang.refactoring.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.Iterator;
import jetbrains.mps.lang.refactoring.structure.FinderReference;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ExecuteFindersExpression extends jetbrains.mps.baseLanguage.structure.Expression {
  public static final String concept = "jetbrains.mps.lang.refactoring.structure.ExecuteFindersExpression";
  public static final String SEARCH_NODE = "searchNode";
  public static final String SEARCH_SCOPE = "searchScope";
  public static final String FINDERS = "finders";

  public ExecuteFindersExpression(SNode node) {
    super(node);
  }

  public jetbrains.mps.baseLanguage.structure.Expression getSearchNode() {
    return (jetbrains.mps.baseLanguage.structure.Expression)this.getChild(Expression.class, ExecuteFindersExpression.SEARCH_NODE);
  }

  public void setSearchNode(jetbrains.mps.baseLanguage.structure.Expression node) {
    super.setChild(ExecuteFindersExpression.SEARCH_NODE, node);
  }

  public jetbrains.mps.baseLanguage.structure.Expression getSearchScope() {
    return (jetbrains.mps.baseLanguage.structure.Expression)this.getChild(Expression.class, ExecuteFindersExpression.SEARCH_SCOPE);
  }

  public void setSearchScope(jetbrains.mps.baseLanguage.structure.Expression node) {
    super.setChild(ExecuteFindersExpression.SEARCH_SCOPE, node);
  }

  public int getFindersesCount() {
    return this.getChildCount(ExecuteFindersExpression.FINDERS);
  }

  public Iterator<jetbrains.mps.lang.refactoring.structure.FinderReference> finderses() {
    return this.children(FinderReference.class, ExecuteFindersExpression.FINDERS);
  }

  public List<jetbrains.mps.lang.refactoring.structure.FinderReference> getFinderses() {
    return this.getChildren(FinderReference.class, ExecuteFindersExpression.FINDERS);
  }

  public void addFinders(jetbrains.mps.lang.refactoring.structure.FinderReference node) {
    this.addChild(ExecuteFindersExpression.FINDERS, node);
  }

  public void insertFinders(jetbrains.mps.lang.refactoring.structure.FinderReference prev, jetbrains.mps.lang.refactoring.structure.FinderReference node) {
    this.insertChild(prev, ExecuteFindersExpression.FINDERS, node);
  }


  public static ExecuteFindersExpression newInstance(SModel sm, boolean init) {
    return (ExecuteFindersExpression)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.refactoring.structure.ExecuteFindersExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ExecuteFindersExpression newInstance(SModel sm) {
    return ExecuteFindersExpression.newInstance(sm, false);
  }

}
