package jetbrains.mps.lang.refactoring.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.refactoring.framework.ILoggableRefactoringOld;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.refactoring.framework.RefactoringUtil;
import jetbrains.mps.refactoring.framework.RefactoringTarget;
import jetbrains.mps.ide.actions.NodeActions_ActionGroup;
import jetbrains.mps.ide.actions.EditorPopup_ActionGroup;

public class NodeRefactoring_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(NodeRefactoring_ActionGroup.class);
  public static final String ID = "jetbrains.mps.lang.refactoring.plugin.NodeRefactoring";

  public NodeRefactoring_ActionGroup() {
    super("Refactoring", ID);
    this.setIsInternal(false);
    this.setPopup(true);
    try {
      for (ILoggableRefactoringOld refactoring : Sequence.fromIterable(RefactoringUtil.getRefactorings(RefactoringTarget.NODE).values())) {
        NodeRefactoring_ActionGroup.this.add(RefactoringHelper.getActionForRefactoring(refactoring));
      }
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void adjust() {
    this.insertGroupIntoAnother(NodeActions_ActionGroup.ID, null);
    this.insertGroupIntoAnother(EditorPopup_ActionGroup.ID, null);
  }
}
