package jetbrains.mps.lang.refactoring.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.lang.structure.structure.IConceptAspect;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.plugin.structure.KeyMapKeystroke;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Refactoring extends BaseConcept implements INamedConcept, IConceptAspect {
  public static final String concept = "jetbrains.mps.lang.refactoring.structure.Refactoring";
  public static final String USER_FRIENDLY_NAME = "userFriendlyName";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String OVERRIDES = "overrides";
  public static final String TARGET = "target";
  public static final String KEYSTROKE = "keystroke";
  public static final String INIT_BLOCK = "initBlock";
  public static final String DO_REFACTOR_BLOCK = "doRefactorBlock";
  public static final String MODELS_TO_GENERATE_BLOCK = "modelsToGenerateBlock";
  public static final String DO_WHEN_DONE_BLOCK = "doWhenDoneBlock";
  public static final String PARAMETER = "parameter";
  public static final String FIELD = "field";

  public Refactoring(SNode node) {
    super(node);
  }

  public String getUserFriendlyName() {
    return this.getProperty(Refactoring.USER_FRIENDLY_NAME);
  }

  public void setUserFriendlyName(String value) {
    this.setProperty(Refactoring.USER_FRIENDLY_NAME, value);
  }

  public String getName() {
    return this.getProperty(Refactoring.NAME);
  }

  public void setName(String value) {
    this.setProperty(Refactoring.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Refactoring.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Refactoring.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Refactoring.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Refactoring.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Refactoring.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Refactoring.VIRTUAL_PACKAGE, value);
  }

  public Refactoring getOverrides() {
    return (Refactoring)this.getReferent(Refactoring.class, Refactoring.OVERRIDES);
  }

  public void setOverrides(Refactoring node) {
    super.setReferent(Refactoring.OVERRIDES, node);
  }

  public RefactoringTarget getTarget() {
    return (RefactoringTarget)this.getChild(RefactoringTarget.class, Refactoring.TARGET);
  }

  public void setTarget(RefactoringTarget node) {
    super.setChild(Refactoring.TARGET, node);
  }

  public KeyMapKeystroke getKeystroke() {
    return (KeyMapKeystroke)this.getChild(KeyMapKeystroke.class, Refactoring.KEYSTROKE);
  }

  public void setKeystroke(KeyMapKeystroke node) {
    super.setChild(Refactoring.KEYSTROKE, node);
  }

  public InitClause getInitBlock() {
    return (InitClause)this.getChild(InitClause.class, Refactoring.INIT_BLOCK);
  }

  public void setInitBlock(InitClause node) {
    super.setChild(Refactoring.INIT_BLOCK, node);
  }

  public DoRefactorClause getDoRefactorBlock() {
    return (DoRefactorClause)this.getChild(DoRefactorClause.class, Refactoring.DO_REFACTOR_BLOCK);
  }

  public void setDoRefactorBlock(DoRefactorClause node) {
    super.setChild(Refactoring.DO_REFACTOR_BLOCK, node);
  }

  public ModelsToGenerateClause getModelsToGenerateBlock() {
    return (ModelsToGenerateClause)this.getChild(ModelsToGenerateClause.class, Refactoring.MODELS_TO_GENERATE_BLOCK);
  }

  public void setModelsToGenerateBlock(ModelsToGenerateClause node) {
    super.setChild(Refactoring.MODELS_TO_GENERATE_BLOCK, node);
  }

  public DoWhenDoneClause getDoWhenDoneBlock() {
    return (DoWhenDoneClause)this.getChild(DoWhenDoneClause.class, Refactoring.DO_WHEN_DONE_BLOCK);
  }

  public void setDoWhenDoneBlock(DoWhenDoneClause node) {
    super.setChild(Refactoring.DO_WHEN_DONE_BLOCK, node);
  }

  public int getParametersCount() {
    return this.getChildCount(Refactoring.PARAMETER);
  }

  public Iterator<RefactoringParameter> parameters() {
    return this.children(RefactoringParameter.class, Refactoring.PARAMETER);
  }

  public List<RefactoringParameter> getParameters() {
    return this.getChildren(RefactoringParameter.class, Refactoring.PARAMETER);
  }

  public void addParameter(RefactoringParameter node) {
    this.addChild(Refactoring.PARAMETER, node);
  }

  public void insertParameter(RefactoringParameter prev, RefactoringParameter node) {
    this.insertChild(prev, Refactoring.PARAMETER, node);
  }

  public int getFieldsCount() {
    return this.getChildCount(Refactoring.FIELD);
  }

  public Iterator<RefactoringField> fields() {
    return this.children(RefactoringField.class, Refactoring.FIELD);
  }

  public List<RefactoringField> getFields() {
    return this.getChildren(RefactoringField.class, Refactoring.FIELD);
  }

  public void addField(RefactoringField node) {
    this.addChild(Refactoring.FIELD, node);
  }

  public void insertField(RefactoringField prev, RefactoringField node) {
    this.insertChild(prev, Refactoring.FIELD, node);
  }

  public static Refactoring newInstance(SModel sm, boolean init) {
    return (Refactoring)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.refactoring.structure.Refactoring", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Refactoring newInstance(SModel sm) {
    return Refactoring.newInstance(sm, false);
  }
}
