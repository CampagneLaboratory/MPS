package jetbrains.mps.lang.refactoring.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class NodeTarget extends RefactoringTarget {
  public static final String concept = "jetbrains.mps.lang.refactoring.structure.NodeTarget";
  public static final String CONCEPT = "concept";
  public static final String IS_APPLICABLE_BLOCK = "isApplicableBlock";

  public NodeTarget(SNode node) {
    super(node);
  }

  public AbstractConceptDeclaration getConcept() {
    return (AbstractConceptDeclaration)this.getReferent(AbstractConceptDeclaration.class, NodeTarget.CONCEPT);
  }

  public void setConcept(AbstractConceptDeclaration node) {
    super.setReferent(NodeTarget.CONCEPT, node);
  }

  public IsApplicableToNodeClause getIsApplicableBlock() {
    return (IsApplicableToNodeClause)this.getReferent(IsApplicableToNodeClause.class, NodeTarget.IS_APPLICABLE_BLOCK);
  }

  public void setIsApplicableBlock(IsApplicableToNodeClause node) {
    super.setReferent(NodeTarget.IS_APPLICABLE_BLOCK, node);
  }

  public static NodeTarget newInstance(SModel sm, boolean init) {
    return (NodeTarget)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.refactoring.structure.NodeTarget", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static NodeTarget newInstance(SModel sm) {
    return NodeTarget.newInstance(sm, false);
  }
}
