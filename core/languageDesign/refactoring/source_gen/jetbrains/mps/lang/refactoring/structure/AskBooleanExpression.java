package jetbrains.mps.lang.refactoring.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AskBooleanExpression extends Expression {
  public static final String concept = "jetbrains.mps.lang.refactoring.structure.AskBooleanExpression";
  public static final String PARAMETER = "parameter";
  public static final String TEXT = "text";

  public AskBooleanExpression(SNode node) {
    super(node);
  }

  public RefactoringParameter getParameter() {
    return (RefactoringParameter) this.getReferent(RefactoringParameter.class, AskBooleanExpression.PARAMETER);
  }

  public void setParameter(RefactoringParameter node) {
    super.setReferent(AskBooleanExpression.PARAMETER, node);
  }

  public Expression getText() {
    return (Expression) this.getChild(Expression.class, AskBooleanExpression.TEXT);
  }

  public void setText(Expression node) {
    super.setChild(AskBooleanExpression.TEXT, node);
  }

  public static AskBooleanExpression newInstance(SModel sm, boolean init) {
    return (AskBooleanExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.refactoring.structure.AskBooleanExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AskBooleanExpression newInstance(SModel sm) {
    return AskBooleanExpression.newInstance(sm, false);
  }
}
