package jetbrains.mps.lang.refactoring.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class ExecuteFindersExpression_Editor extends DefaultNodeEditor {

  /* package */AbstractCellListHandler myListHandler_1212242818597;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection1212242756191(context, node);
  }

  public EditorCell createCollection1212242756191(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12122427561911212242756191(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1212242763349(context, node, "executeFinders"));
    editorCell.addEditorCell(this.createConstant1212242776289(context, node, "("));
    editorCell.addEditorCell(this.createRefNodeList1212242818597(context, node));
    editorCell.addEditorCell(this.createConstant1212242984484(context, node, ","));
    editorCell.addEditorCell(this.createRefNode1212242825771(context, node));
    editorCell.addEditorCell(this.createConstant1212242990705(context, node, ","));
    editorCell.addEditorCell(this.createRefNode1212242828164(context, node));
    editorCell.addEditorCell(this.createConstant1212242780620(context, node, ")"));
    return editorCell;
  }

  public EditorCell createConstant1212242763349(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12122427633491212242763349(editorCell, node, context);
    setupLabel_Constant_1212242763349_1212242763349(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1212242776289(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12122427762891212242776289(editorCell, node, context);
    setupLabel_Constant_1212242776289_1212242776289(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1212242780620(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12122427806201212242780620(editorCell, node, context);
    setupLabel_Constant_1212242780620_1212242780620(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1212242984484(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12122429844841212242984484(editorCell, node, context);
    setupLabel_Constant_1212242984484_1212242984484(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1212242990705(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12122429907051212242990705(editorCell, node, context);
    setupLabel_Constant_1212242990705_1212242990705(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createRefNodeList1212242818597(EditorContext context, SNode node) {
    if (this.myListHandler_1212242818597 == null) {
      this.myListHandler_1212242818597 = new ExecuteFindersExpression_Editor.findersListHandler_0628_0(node, "finders", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1212242818597.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_finders1212242818597(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.setRole(this.myListHandler_1212242818597.getElementRole());
    return editorCell;
  }

  public EditorCell createRefNode1212242825771_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_searchNode1212242825771(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_searchNode_1212242825771((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1212242825771(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("searchNode");
    provider.setNoTargetText("<context node>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1212242825771_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefNode1212242828164_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_searchScope1212242828164(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_searchScope_1212242828164((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1212242828164(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("searchScope");
    provider.setNoTargetText("<global scope>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1212242828164_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }


  private static void setupBasic_Collection_12122427561911212242756191(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1212242756191");
  }

  private static void setupBasic_Constant_12122427633491212242763349(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1212242763349");
  }

  private static void setupBasic_Constant_12122427762891212242776289(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1212242776289");
  }

  private static void setupBasic_Constant_12122427806201212242780620(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1212242780620");
  }

  private static void setupBasic_refNodeList_finders1212242818597(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_finders");
  }

  private static void setupBasic_refNode_searchNode1212242825771(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_refNode_searchScope1212242828164(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_12122429844841212242984484(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1212242984484");
  }

  private static void setupBasic_Constant_12122429907051212242990705(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1212242990705");
  }

  private static void setupLabel_Constant_1212242763349_1212242763349(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1212242776289_1212242776289(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1212242780620_1212242780620(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_finders_1212242818597(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNode_searchNode_1212242825771(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNode_searchScope_1212242828164(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1212242984484_1212242984484(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1212242990705_1212242990705(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static class findersListHandler_0628_0 extends RefNodeListHandler {

    public findersListHandler_0628_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

}

}
