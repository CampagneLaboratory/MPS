package jetbrains.mps.lang.refactoring.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MPSParameterChooser extends BaseConcept implements RefactoringParameterChooser {
  public static final String concept = "jetbrains.mps.lang.refactoring.structure.MPSParameterChooser";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String TYPE = "type";
  public static final String FILTER_BLOCK = "filterBlock";

  public MPSParameterChooser(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(MPSParameterChooser.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(MPSParameterChooser.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(MPSParameterChooser.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(MPSParameterChooser.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(MPSParameterChooser.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(MPSParameterChooser.VIRTUAL_PACKAGE, value);
  }

  public MPSParameterType getType() {
    String value = super.getProperty(MPSParameterChooser.TYPE);
    return MPSParameterType.parseValue(value);
  }

  public void setType(MPSParameterType value) {
    super.setProperty(MPSParameterChooser.TYPE, value.getValueAsString());
  }

  public FilterParameterClause getFilterBlock() {
    return (FilterParameterClause)this.getChild(FilterParameterClause.class, MPSParameterChooser.FILTER_BLOCK);
  }

  public void setFilterBlock(FilterParameterClause node) {
    super.setChild(MPSParameterChooser.FILTER_BLOCK, node);
  }

  public static MPSParameterChooser newInstance(SModel sm, boolean init) {
    return (MPSParameterChooser)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.refactoring.structure.MPSParameterChooser", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MPSParameterChooser newInstance(SModel sm) {
    return MPSParameterChooser.newInstance(sm, false);
  }
}
