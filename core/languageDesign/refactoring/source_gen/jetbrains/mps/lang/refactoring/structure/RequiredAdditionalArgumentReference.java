package jetbrains.mps.lang.refactoring.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgument;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class RequiredAdditionalArgumentReference extends jetbrains.mps.baseLanguage.structure.Expression {
  public static final String concept = "jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgumentReference";
  public static final String ARGUMENT = "argument";

  public RequiredAdditionalArgumentReference(SNode node) {
    super(node);
  }

  public jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgument getArgument() {
    return (jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgument)this.getReferent(RequiredAdditionalArgument.class, RequiredAdditionalArgumentReference.ARGUMENT);
  }

  public void setArgument(jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgument node) {
    super.setReferent(RequiredAdditionalArgumentReference.ARGUMENT, node);
  }


  public static RequiredAdditionalArgumentReference newInstance(SModel sm, boolean init) {
    return (RequiredAdditionalArgumentReference)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgumentReference", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static RequiredAdditionalArgumentReference newInstance(SModel sm) {
    return RequiredAdditionalArgumentReference.newInstance(sm, false);
  }

}
