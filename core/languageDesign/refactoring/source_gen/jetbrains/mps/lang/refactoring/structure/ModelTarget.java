package jetbrains.mps.lang.refactoring.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ModelTarget extends RefactoringTarget {
  public static final String concept = "jetbrains.mps.lang.refactoring.structure.ModelTarget";
  public static final String IS_APPLICABLE_BLOCK = "isApplicableBlock";

  public ModelTarget(SNode node) {
    super(node);
  }

  public IsApplicableToModelClause getIsApplicableBlock() {
    return (IsApplicableToModelClause)this.getChild(IsApplicableToModelClause.class, ModelTarget.IS_APPLICABLE_BLOCK);
  }

  public void setIsApplicableBlock(IsApplicableToModelClause node) {
    super.setChild(ModelTarget.IS_APPLICABLE_BLOCK, node);
  }

  public static ModelTarget newInstance(SModel sm, boolean init) {
    return (ModelTarget)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.refactoring.structure.ModelTarget", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ModelTarget newInstance(SModel sm) {
    return ModelTarget.newInstance(sm, false);
  }
}
