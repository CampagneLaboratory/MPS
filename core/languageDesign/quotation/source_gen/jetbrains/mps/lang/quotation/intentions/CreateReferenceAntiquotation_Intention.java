package jetbrains.mps.lang.quotation.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.lang.structure.structure.LinkDeclaration;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation_AnnotationLink;
import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class CreateReferenceAntiquotation_Intention extends BaseIntention {

  public String getConcept() {
    return "jetbrains.mps.lang.quotation.structure.Quotation";
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Create Reference Antiquotation";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    EditorCell selectedCell = editorContext.getSelectedCell();
    SNode contextNode = (SNode)selectedCell.getSNode();
    SNode linkNode = BaseAdapter.fromAdapter(selectedCell.getLinkDeclaration());
    if (!(BaseAdapter.isInstance(linkNode, LinkDeclaration.class))) {
      return false;
    }
    if (contextNode == null) {
      return false;
    }
    SNode link = (SNode)linkNode;
    if (SPropertyOperations.hasValue(link, "metaClass", "aggregation", "reference")) {
      return false;
    }
    return true;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    EditorCell selectedCell = editorContext.getSelectedCell();
    SNode contextNode = (SNode)selectedCell.getSNode();
    SNode linkNode = BaseAdapter.fromAdapter(selectedCell.getLinkDeclaration());
    if (!(BaseAdapter.isInstance(linkNode, LinkDeclaration.class))) {
      return;
    }
    if (contextNode == null) {
      return;
    }
    SNode link = (SNode)linkNode;
    if (SPropertyOperations.hasValue(link, "metaClass", "aggregation", "reference")) {
      return;
    }
    String role = SPropertyOperations.getString(link, "role");
    if (SNodeOperations.isInstanceOf(contextNode, "jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation")) {
      SNode attributedNode = SNodeOperations.getParent(contextNode);
      assert attributedNode != null;
      ReferenceAntiquotation_AnnotationLink.setReferenceAntiquotation(((BaseConcept)SNodeOperations.getAdapter(attributedNode)), role, null);
      attributedNode.setAttribute(null);
      return;
    }
    SModel model = SNodeOperations.getModel(contextNode);
    if (ReferenceAntiquotation_AnnotationLink.getReferenceAntiquotation(((BaseConcept)SNodeOperations.getAdapter(contextNode)), role) != null) {
      ReferenceAntiquotation_AnnotationLink.setReferenceAntiquotation(((BaseConcept)SNodeOperations.getAdapter(contextNode)), role, null);
    } else
    {
      ReferenceAntiquotation_AnnotationLink.setReferenceAntiquotation(((BaseConcept)SNodeOperations.getAdapter(contextNode)), role, ((ReferenceAntiquotation)SNodeOperations.getAdapter(SModelOperations.createNewNode(model, "jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation", null))));
    }
  }

  public String getLocationString() {
    return "jetbrains.mps.lang.quotation.intentions";
  }

}
