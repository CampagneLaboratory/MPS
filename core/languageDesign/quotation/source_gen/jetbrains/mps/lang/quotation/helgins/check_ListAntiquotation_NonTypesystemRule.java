package jetbrains.mps.lang.quotation.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.helgins.inference.TypeChecker;

public class check_ListAntiquotation_NonTypesystemRule implements NonTypesystemRule_Runtime {

  public check_ListAntiquotation_NonTypesystemRule() {
  }

  public void applyRule(final SNode listAntiquotation) {
    SNode annotatedNode = SNodeOperations.getParent(listAntiquotation, null, false, false);
    do {
      SNode matchedNode_1202840835241 = SNodeOperations.getParent(annotatedNode, null, false, false);
      {
        boolean matches_1202840835245 = false;
        matches_1202840835245 = SModelUtil_new.isAssignableConcept(SNodeOperations.getParent(annotatedNode, null, false, false).getConceptFqName(), "jetbrains.mps.quotation.structure.Quotation");
        if (matches_1202840835245) {
          if (SLinkOperations.getTarget(matchedNode_1202840835241, "quotedNode", true) == annotatedNode) {
            {
              BaseIntentionProvider intentionProvider = null;
              TypeChecker.getInstance().reportTypeError(listAntiquotation, "list antiquotation should not be used on a quoted node itself", "jetbrains.mps.quotation.helgins", "1202840835255", intentionProvider);
            }
          }
          break;
        }
      }
    } while(false);
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.quotation.structure.ListAntiquotation";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
