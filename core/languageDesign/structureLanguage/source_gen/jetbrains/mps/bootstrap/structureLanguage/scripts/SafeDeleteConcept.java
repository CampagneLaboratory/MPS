package jetbrains.mps.bootstrap.structureLanguage.scripts;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.AbstractLoggableRefactoring;
import jetbrains.mps.core.scripts.SafeDelete;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.action.ActionContext;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.ide.findusages.model.searchquery.SearchQuery;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.ide.findusages.model.result.SearchResults;
import jetbrains.mps.bootstrap.structureLanguage.findUsages.ConceptInstances_Finder;
import jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder;
import java.util.List;
import jetbrains.mps.ide.findusages.model.result.SearchResult;
import jetbrains.mps.ide.IDEProjectFrame;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.bootstrap.editorLanguage.structure.ConceptEditorDeclaration;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration;
import jetbrains.mps.bootstrap.constraintsLanguage.structure.ConceptBehavior;
import java.util.Map;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModel;
import java.util.HashMap;

public class SafeDeleteConcept extends AbstractLoggableRefactoring {
  public static final String showAffectedNodes = "showAffectedNodes";

  public static String getKeyStroke_static() {
    return SafeDelete.getKeyStroke_static();
  }

  public static Class getClass_static() {
    return SafeDeleteConcept.class;
  }

  public static boolean isApplicableWRTConcept_static(SNode node) {
    if(SModelUtil_new.isAssignableConcept(((AbstractConceptDeclaration)SNodeOperations.getAdapter(SNodeOperations.getConceptDeclaration(node))), "jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration")) {
      return true;
    } else
    {
      return SafeDelete.isApplicableWRTConcept_static(node);
    }
  }


  public String getUserFriendlyName() {
    return "Safe Delete Concept (under construction)";
  }

  public String getKeyStroke() {
    return SafeDeleteConcept.getKeyStroke_static();
  }

  public boolean isApplicableWRTConcept(SNode node) {
    return SafeDeleteConcept.isApplicableWRTConcept_static(node);
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration";
  }

  public Class getOverridenRefactoringClass() {
    return SafeDelete.getClass_static();
  }

  public boolean isApplicable(ActionContext actionContext, RefactoringContext refactoringContext) {
    {
      SNode node = actionContext.getNode();
      if(node == null) {
        return false;
      }
      SearchQuery searchQuery = new SearchQuery(new SNodePointer(node), actionContext.getScope());
      SearchResults searchResults1 = new ConceptInstances_Finder().find(searchQuery);
      SearchResults searchResults2 = new NodeUsages_Finder().find(searchQuery);
      List<SearchResult> aliveResults = searchResults1.getAliveResults();
      List<SearchResult> aliveResults2 = searchResults2.getAliveResults();
      if(!(aliveResults.isEmpty()) || !(aliveResults2.isEmpty())) {
        int size = aliveResults.size();
        size = size + aliveResults2.size();
        IDEProjectFrame projectFrame = (IDEProjectFrame)actionContext.get(IDEProjectFrame.class);
        String message = size + " usages found. delete anyway?";
        JFrame component = projectFrame.getMainFrame();
        int option = JOptionPane.showConfirmDialog(component, message, "Safe Delete", JOptionPane.YES_NO_OPTION);
        if(option == JOptionPane.YES_OPTION) {
          refactoringContext.setParameter("showAffectedNodes", true);
          return true;
        }
        return false;
      }
      refactoringContext.setParameter("showAffectedNodes", false);
      return true;
    }
  }

  public boolean showsAffectedNodes() {
    return true;
  }

  public SearchResults getAffectedNodes(ActionContext actionContext, RefactoringContext refactoringContext) {
    {
      if(!(((Boolean)refactoringContext.getParameter("showAffectedNodes")))) {
        return null;
      }
      SNode node = actionContext.getNode();
      SearchQuery searchQuery = new SearchQuery(new SNodePointer(node), actionContext.getScope());
      SearchResults searchResults1 = new NodeUsages_Finder().find(searchQuery);
      SearchResults searchResults2 = new ConceptInstances_Finder().find(searchQuery);
      searchResults1.getSearchResults().addAll(searchResults2.getSearchResults());
      searchResults1.getSearchedNodePointers().addAll(searchResults2.getSearchedNodePointers());
      return searchResults1;
    }
  }

  public void doRefactor(ActionContext actionContext, RefactoringContext refactoringContext) {
    {
      SNode node = actionContext.getNode();
      Language sourceLanguage = Language.getLanguageFor(SNodeOperations.getModel(node).getModelDescriptor());
      SModelDescriptor editorModelDescriptor = sourceLanguage.getEditorModelDescriptor();
      if(editorModelDescriptor != null) {
        ConceptEditorDeclaration conceptEditorDeclaration = SModelUtil_new.findEditorDeclaration(editorModelDescriptor.getSModel(), ((ConceptDeclaration)SNodeOperations.getAdapter(node)));
        conceptEditorDeclaration.delete();
      }
      SModelDescriptor constraintsModelDescriptor = sourceLanguage.getConstraintsModelDescriptor();
      if(constraintsModelDescriptor != null) {
        ConceptBehavior conceptBehavior = SModelUtil_new.findBehaviorDeclaration(constraintsModelDescriptor.getSModel(), ((ConceptDeclaration)SNodeOperations.getAdapter(node)));
        conceptBehavior.delete();
      }
      SNodeOperations.deleteNode(node);
    }
  }

  public Map<IModule, List<SModel>> getModelsToGenerate(ActionContext actionContext, RefactoringContext refactoringContext) {
    return new HashMap<IModule, List<SModel>>();
  }

  public void updateModel(SModel model, RefactoringContext refactoringContext) {
  }

  public boolean doesUpdateModel() {
    return false;
  }

  public boolean askForInfo(ActionContext actionContext, RefactoringContext refactoringContext) {
    return this.isApplicable(actionContext, refactoringContext);
  }

}
