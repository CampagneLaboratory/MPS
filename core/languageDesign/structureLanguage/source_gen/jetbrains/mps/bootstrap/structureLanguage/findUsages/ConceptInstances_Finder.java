package jetbrains.mps.bootstrap.structureLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.ide.findusages.model.result.SearchResults;

import java.util.List;

import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.ide.findusages.model.result.SearchResult;
import jetbrains.mps.smodel.SNodePointer;

public class ConceptInstances_Finder extends GeneratedFinder {
  public static Logger LOG = Logger.getLogger("jetbrains.mps.bootstrap.structureLanguage.findUsages.ConceptInstances_Finder");

  public boolean isVisible() {
    return true;
  }

  public String getDescription() {
    return "Concept Instances";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.core.structure.BaseConcept";
  }

  public boolean isApplicable(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration");
  }

  public void doFind(SNode node, IScope scope, SearchResults results) {
    List<SNode> resNodes = FindUsagesManager.getInstance().findInstances(node, scope);
    for (SNode resNode : resNodes) {
      results.getSearchResults().add(new SearchResult(new SNodePointer(resNode), "Concept Instances"));
    }
    results.getSearchedNodePointers().add(new SNodePointer(node));
  }

}
