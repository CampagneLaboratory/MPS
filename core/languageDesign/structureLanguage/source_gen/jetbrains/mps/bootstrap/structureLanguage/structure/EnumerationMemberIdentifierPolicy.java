package jetbrains.mps.bootstrap.structureLanguage.structure;

/*Generated by MPS */

import java.util.List;
import java.util.LinkedList;

public enum EnumerationMemberIdentifierPolicy {
  derive_from_presentation("derive from presentation", "derive_from_presentation"),
  derive_from_internal_value("derive from internal value", "derive_from_internal_value"),
  custom("custom", "custom");

  /* package */String myName;
  /* package */String myValue;

EnumerationMemberIdentifierPolicy(String name, String value) {
    this.myName = name;
    this.myValue = value;
  }

  public static List<EnumerationMemberIdentifierPolicy> getConstants() {
    List<EnumerationMemberIdentifierPolicy> list = new LinkedList<EnumerationMemberIdentifierPolicy>();
    list.add(EnumerationMemberIdentifierPolicy.derive_from_presentation);
    list.add(EnumerationMemberIdentifierPolicy.derive_from_internal_value);
    list.add(EnumerationMemberIdentifierPolicy.custom);
    return list;
  }

  public static EnumerationMemberIdentifierPolicy getDefault() {
    return EnumerationMemberIdentifierPolicy.derive_from_presentation;
  }

  public static EnumerationMemberIdentifierPolicy parseValue(String value) {
    if (value == null) {
      return EnumerationMemberIdentifierPolicy.getDefault();
    }
    if (value.equals(EnumerationMemberIdentifierPolicy.derive_from_presentation.getValueAsString())) {
      return EnumerationMemberIdentifierPolicy.derive_from_presentation;
    }
    if (value.equals(EnumerationMemberIdentifierPolicy.derive_from_internal_value.getValueAsString())) {
      return EnumerationMemberIdentifierPolicy.derive_from_internal_value;
    }
    if (value.equals(EnumerationMemberIdentifierPolicy.custom.getValueAsString())) {
      return EnumerationMemberIdentifierPolicy.custom;
    }
    return EnumerationMemberIdentifierPolicy.getDefault();
  }


  public String getName() {
    return this.myName;
  }

  public String getValueAsString() {
    return this.myValue;
  }

  public String getValue() {
    return this.myValue;
  }

}
