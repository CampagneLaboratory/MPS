package jetbrains.mps.bootstrap.structureLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;

import java.util.List;

import jetbrains.mps.smodel.IScope;

import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;

import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.findUsages.FindUsagesManager;
import org.jetbrains.annotations.Nullable;

public class NodeAndDescendantsUsages_Finder extends GeneratedFinder {
  public static Logger LOG = Logger.getLogger("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeAndDescendantsUsages_Finder");

  public boolean isVisible() {
    return true;
  }

  public String getDescription() {
    return "Node & Descendants Usages";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.core.structure.BaseConcept";
  }

  public boolean isApplicable(SNode node) {
    return true;
  }

  protected List<SNode> doFind(SNode node, IScope scope) {
    List<SNode> _results = new ArrayList<SNode>();
    {
      Set<SNode> nodes = new HashSet<SNode>();
      nodes.add(node);
      for (SNode child : ((SNode) node).allChildren()) {
        ListOperations.addElement(_results, child);
        nodes.add(child);
      }
      // null
      Set<SReference> resRefs = FindUsagesManager.getInstance().findUsages(nodes, scope, null);
      for (SReference reference : resRefs) {
        if (!(nodes.contains(reference.getSourceNode()))) {
          ListOperations.addElement(_results, reference.getSourceNode());
        }
      }
    }
    return _results;
  }

  public List<SNode> getSearchedNodes(SNode node, IScope scope) {
    List<SNode> _results = new ArrayList<SNode>();
    ListOperations.addElement(_results, node);
    return _results;
  }

  public String getNodeCategory(SNode node) {
    return "Node Descendants Usages";
  }

  @Nullable()
  public String getNodePresentation(SNode node) {
    return null;
  }

}
