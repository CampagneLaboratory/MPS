package jetbrains.mps.bootstrap.structureLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.ide.findusages.model.result.SearchResults;
import jetbrains.mps.smodel.SNodePointer;

import java.util.Set;
import java.util.HashSet;

import jetbrains.mps.smodel.SReference;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.ide.findusages.model.result.SearchResult;

public class NodeAndDescendantsUsages_Finder extends GeneratedFinder {
  public static Logger LOG = Logger.getLogger("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeAndDescendantsUsages_Finder");

  public boolean isVisible() {
    return true;
  }

  public String getDescription() {
    return "Node & Descendants Usages";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.core.structure.BaseConcept";
  }

  public boolean isApplicable(SNode node) {
    return true;
  }

  public void doFind(SNode node, IScope scope, SearchResults results) {
    results.getSearchedNodePointers().add(new SNodePointer(node));
    Set<SNode> nodes = new HashSet<SNode>();
    nodes.add(node);
    for (SNode child : ((SNode) node).allChildren()) {
      results.getSearchedNodePointers().add(new SNodePointer(child));
      nodes.add(child);
    }
    // null
    Set<SReference> resRefs = FindUsagesManager.getInstance().findUsages(nodes, scope, null);
    for (SReference reference : resRefs) {
      if (!(nodes.contains(reference.getSourceNode()))) {
        results.getSearchResults().add(new SearchResult(new SNodePointer(reference.getSourceNode()), "Node Descendants Usages"));
      }
    }
  }

}
