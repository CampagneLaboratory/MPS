package jetbrains.mps.ide.scriptLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.project.Project;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.workbench.action.BaseGroup;
import jetbrains.mps.workbench.action.ActionUtils;
import jetbrains.mps.ide.actions.Tools_ActionGroup;

public class ScriptsGlobally_ActionGroup extends GeneratedActionGroup {
  public static Logger LOG = Logger.getLogger(ScriptsGlobally_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.scriptLanguage.plugin.ScriptsGlobally";

  public ScriptsGlobally_ActionGroup() {
    super("Scripts", ID);
    this.setIsInternal(false);
    this.setMnemonic("S".charAt(0));
    this.setPopup(true);
    try {
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void doUpdate(AnActionEvent event) {
    try {
      ScriptsGlobally_ActionGroup.this.removeAll();
      event.getPresentation().setVisible(true);
      Project project = event.getData(MPSDataKeys.PROJECT);
      if (project == null) {
        event.getPresentation().setEnabled(false);
        return;
      }
      event.getPresentation().setEnabled(true);
      // 
      ScriptsMenuBuilder menuBuilder = new ScriptsMenuBuilder(false);
      this.add(menuBuilder.create_ByCategoryPopup());
      this.add(menuBuilder.create_ByBuildPopup());
      this.add(menuBuilder.create_ByLanguagePopup());
      // 
      this.add(menuBuilder.create_MoreAction());
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void adjust() {
    {
      BaseGroup gToBase = ActionUtils.getGroup(Tools_ActionGroup.ID);
      BaseGroup gWhat = ActionUtils.getGroup(ScriptsGlobally_ActionGroup.ID);
      if (gToBase == null || gWhat == null) {
        return;
      }
      gToBase.add(gWhat);
    }
  }

}
