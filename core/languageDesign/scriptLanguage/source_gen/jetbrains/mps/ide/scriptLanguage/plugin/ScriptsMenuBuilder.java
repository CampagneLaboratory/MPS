package jetbrains.mps.ide.scriptLanguage.plugin;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.ide.scriptLanguage.structure.MigrationScript;
import java.util.ArrayList;
import jetbrains.mps.project.GlobalScope;
import java.util.Collections;
import java.util.Comparator;
import jetbrains.mps.workbench.action.BaseGroup;
import jetbrains.mps.workbench.action.BaseAction;

public class ScriptsMenuBuilder {

  private boolean applyToSelection;
  private List<Language> allLanguages;
  private List<MigrationScript> allScripts;

  public ScriptsMenuBuilder(boolean applyToSelection) {
    this.applyToSelection = applyToSelection;
    this.allLanguages = new ArrayList<Language>(GlobalScope.getInstance().getVisibleLanguages());
    Collections.sort(this.allLanguages, new Comparator <Language>() {

      public int compare(Language l1, Language l2) {
        return l1.getNamespace().compareTo(l2.getNamespace());
      }

    });
    this.allScripts = ScriptsActionGroupHelper.getMigrationScripts(this.allLanguages);
  }

  public BaseGroup create_ByCategoryPopup() {
    BaseGroup byCategoryGroup = new BaseGroup("By Category");
    byCategoryGroup.setPopup(true);
    ScriptsActionGroupHelper.populateByCategoryGroup(this.allScripts, byCategoryGroup, this.applyToSelection);
    return byCategoryGroup;
  }

  public BaseGroup create_ByBuildPopup() {
    BaseGroup byBuildGroup = new BaseGroup("By Build");
    byBuildGroup.setPopup(true);
    ScriptsActionGroupHelper.populateByBuildGroup(this.allScripts, byBuildGroup, this.applyToSelection);
    return byBuildGroup;
  }

  public BaseGroup create_ByLanguagePopup() {
    BaseGroup byLanguageGroup = new BaseGroup("By Language");
    byLanguageGroup.setPopup(true);
    for(Language language : this.allLanguages) {
      ScriptsActionGroupHelper.populateByLanguageGroup(language, byLanguageGroup, this.applyToSelection);
    }
    return byLanguageGroup;
  }

  public BaseAction create_MoreAction() {
    return new RunMigrationScriptsAction(this.allScripts, "More...", this.applyToSelection);
  }

}
