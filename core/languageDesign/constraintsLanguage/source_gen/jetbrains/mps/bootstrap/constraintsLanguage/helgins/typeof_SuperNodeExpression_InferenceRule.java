package jetbrains.mps.bootstrap.constraintsLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_SuperNodeExpression_InferenceRule implements InferenceRule_Runtime {

  public typeof_SuperNodeExpression_InferenceRule() {
  }

  public void applyRule(final SNode nodeToCheck) {
    SNode behaviour = SNodeOperations.getAncestor(nodeToCheck, "jetbrains.mps.bootstrap.constraintsLanguage.structure.ConceptBehavior", true, false);
    SNode concept = SLinkOperations.getTarget(behaviour, "concept", false);
    SNode result = null;
    if (SNodeOperations.isInstanceOf(concept, "jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration")) {
      SNode cd = concept;
      result = SLinkOperations.getTarget(cd, "extends", false);
    } else
    {
      SNode icd = concept;
      result = ListSequence.fromList(SLinkOperations.getTargets(icd, "extends", true)).first();
    }
    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_11().createNode(result), nodeToCheck, "jetbrains.mps.bootstrap.constraintsLanguage.helgins", "1193400817254");
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.bootstrap.constraintsLanguage.structure.SuperNodeExpression";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
