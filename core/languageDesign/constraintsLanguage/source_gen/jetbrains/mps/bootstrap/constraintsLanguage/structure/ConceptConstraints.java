package jetbrains.mps.bootstrap.constraintsLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.lang.structure.structure.ConceptDeclaration;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ConceptConstraints extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.bootstrap.constraintsLanguage.structure.ConceptConstraints";
  public static String NAME = "name";
  public static String SHORT_DESCRIPTION = "shortDescription";
  public static String ALIAS = "alias";
  public static String VIRTUAL_PACKAGE = "virtualPackage";
  public static String CONCEPT = "concept";
  public static String DEFAULT_CONCRETE_CONCEPT = "defaultConcreteConcept";
  public static String DEFAULT_SCOPE = "defaultScope";
  public static String CAN_BE_CHILD = "canBeChild";
  public static String CAN_BE_PARENT = "canBeParent";
  public static String PROPERTY = "property";
  public static String REFERENT = "referent";

  public ConceptConstraints(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(ConceptConstraints.NAME);
  }

  public void setName(String value) {
    this.setProperty(ConceptConstraints.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(ConceptConstraints.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(ConceptConstraints.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(ConceptConstraints.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(ConceptConstraints.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(ConceptConstraints.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(ConceptConstraints.VIRTUAL_PACKAGE, value);
  }

  public AbstractConceptDeclaration getConcept() {
    return (AbstractConceptDeclaration)this.getReferent(ConceptConstraints.CONCEPT);
  }

  public void setConcept(AbstractConceptDeclaration node) {
    super.setReferent(ConceptConstraints.CONCEPT, node);
  }

  public ConceptDeclaration getDefaultConcreteConcept() {
    return (ConceptDeclaration)this.getReferent(ConceptConstraints.DEFAULT_CONCRETE_CONCEPT);
  }

  public void setDefaultConcreteConcept(ConceptDeclaration node) {
    super.setReferent(ConceptConstraints.DEFAULT_CONCRETE_CONCEPT, node);
  }

  public NodeDefaultSearchScope getDefaultScope() {
    return (NodeDefaultSearchScope)this.getChild(ConceptConstraints.DEFAULT_SCOPE);
  }

  public void setDefaultScope(NodeDefaultSearchScope node) {
    super.setChild(ConceptConstraints.DEFAULT_SCOPE, node);
  }

  public ConstraintFunction_CanBeAChild getCanBeChild() {
    return (ConstraintFunction_CanBeAChild)this.getChild(ConceptConstraints.CAN_BE_CHILD);
  }

  public void setCanBeChild(ConstraintFunction_CanBeAChild node) {
    super.setChild(ConceptConstraints.CAN_BE_CHILD, node);
  }

  public ConstraintFunction_CanBeAParent getCanBeParent() {
    return (ConstraintFunction_CanBeAParent)this.getChild(ConceptConstraints.CAN_BE_PARENT);
  }

  public void setCanBeParent(ConstraintFunction_CanBeAParent node) {
    super.setChild(ConceptConstraints.CAN_BE_PARENT, node);
  }

  public int getPropertiesCount() {
    return this.getChildCount(ConceptConstraints.PROPERTY);
  }

  public Iterator<NodePropertyConstraint> properties() {
    return this.children(ConceptConstraints.PROPERTY);
  }

  public List<NodePropertyConstraint> getProperties() {
    return this.getChildren(ConceptConstraints.PROPERTY);
  }

  public void addProperty(NodePropertyConstraint node) {
    this.addChild(ConceptConstraints.PROPERTY, node);
  }

  public void insertProperty(NodePropertyConstraint prev, NodePropertyConstraint node) {
    this.insertChild(prev, ConceptConstraints.PROPERTY, node);
  }

  public int getReferentsCount() {
    return this.getChildCount(ConceptConstraints.REFERENT);
  }

  public Iterator<NodeReferentConstraint> referents() {
    return this.children(ConceptConstraints.REFERENT);
  }

  public List<NodeReferentConstraint> getReferents() {
    return this.getChildren(ConceptConstraints.REFERENT);
  }

  public void addReferent(NodeReferentConstraint node) {
    this.addChild(ConceptConstraints.REFERENT, node);
  }

  public void insertReferent(NodeReferentConstraint prev, NodeReferentConstraint node) {
    this.insertChild(prev, ConceptConstraints.REFERENT, node);
  }


  public static ConceptConstraints newInstance(SModel sm, boolean init) {
    return (ConceptConstraints)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bootstrap.constraintsLanguage.structure.ConceptConstraints", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ConceptConstraints newInstance(SModel sm) {
    return ConceptConstraints.newInstance(sm, false);
  }

}
