package jetbrains.mps.bootstrap.constraintsLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class StaticConceptMethodDeclaration extends BaseMethodDeclaration {
  public static final String concept = "jetbrains.mps.bootstrap.constraintsLanguage.structure.StaticConceptMethodDeclaration";
  public static String IS_PRIVATE = "isPrivate";

  public StaticConceptMethodDeclaration(SNode node) {
    super(node);
  }

  public boolean getIsPrivate() {
    return this.getBooleanProperty(StaticConceptMethodDeclaration.IS_PRIVATE);
  }

  public void setIsPrivate(boolean value) {
    this.setBooleanProperty(StaticConceptMethodDeclaration.IS_PRIVATE, value);
  }


  public static StaticConceptMethodDeclaration newInstance(SModel sm, boolean init) {
    return (StaticConceptMethodDeclaration)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bootstrap.constraintsLanguage.structure.StaticConceptMethodDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static StaticConceptMethodDeclaration newInstance(SModel sm) {
    return StaticConceptMethodDeclaration.newInstance(sm, false);
  }

}
