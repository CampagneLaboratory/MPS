package jetbrains.mps.lang.typesystem.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.search.SearchScopeWithNode;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.util.Condition;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.structure.StatementList;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.search.AbstractSearchScope;
import jetbrains.mps.lang.typesystem.structure.TypeVarDeclaration;

public class TypeVarScope extends SearchScopeWithNode {
  private SNode myCurrentNode = null;

  public TypeVarScope(SNode enclosingNode) {
    super(enclosingNode);
  }

  public TypeVarScope(SNode enclosingNode, SNode currentNode) {
    super(enclosingNode);
    myCurrentNode = currentNode;
  }

  @NotNull
  public List<SNode> getNodes(Condition<SNode> condition) {
    List<SNode> vars = new ArrayList<SNode>();
    StatementList statementList = BaseAdapter.fromNode(getEnclosingNode()).getParent(StatementList.class);
    if (statementList != null) {
      Statement currentStatement;
      if (SNodeOperations.isInstanceOf(myCurrentNode, Statement.concept)) {
        currentStatement = (Statement) BaseAdapter.fromNode(myCurrentNode);
      } else {
        currentStatement = BaseAdapter.fromNode(getEnclosingNode()).getParent(Statement.class);
      }
      populateLocalVariables(statementList, currentStatement, vars);
    }
    if (condition == AbstractSearchScope.TRUE_CONDITION) {
      return vars;
    }
    List<SNode> result = new ArrayList<SNode>();
    for (SNode node : vars) {
      if (condition.met(node)) {
        result.add(node);
      }
    }
    return result;
  }

  private void populateLocalVariables(@NotNull StatementList statementList, Statement beforeStatement, List<SNode> result) {
    for (Statement statement : statementList.getStatements()) {
      if (statement == beforeStatement) {
        break;
      }
      if (statement instanceof TypeVarDeclaration) {
        result.add(statement.getNode());
      }
    }
    Statement containingStatement = statementList.getParent(Statement.class);
    if (containingStatement != null) {
      statementList = containingStatement.getParent(StatementList.class);
      if (statementList != null) {
        populateLocalVariables(statementList, containingStatement, result);
      }
    }
  }
}
