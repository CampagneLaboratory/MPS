package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.baseLanguage.structure.Statement;
import java.util.Iterator;
import jetbrains.mps.lang.typesystem.structure.MatchStatementItem;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MatchStatement extends jetbrains.mps.baseLanguage.structure.Statement {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.MatchStatement";
  public static final String EXPRESSION = "expression";
  public static final String IF_FALSE_STATEMENT = "ifFalseStatement";
  public static final String ITEM = "item";

  public MatchStatement(SNode node) {
    super(node);
  }

  public jetbrains.mps.baseLanguage.structure.Expression getExpression() {
    return (jetbrains.mps.baseLanguage.structure.Expression)this.getChild(Expression.class, MatchStatement.EXPRESSION);
  }

  public void setExpression(jetbrains.mps.baseLanguage.structure.Expression node) {
    super.setChild(MatchStatement.EXPRESSION, node);
  }

  public jetbrains.mps.baseLanguage.structure.Statement getIfFalseStatement() {
    return (jetbrains.mps.baseLanguage.structure.Statement)this.getChild(Statement.class, MatchStatement.IF_FALSE_STATEMENT);
  }

  public void setIfFalseStatement(jetbrains.mps.baseLanguage.structure.Statement node) {
    super.setChild(MatchStatement.IF_FALSE_STATEMENT, node);
  }

  public int getItemsCount() {
    return this.getChildCount(MatchStatement.ITEM);
  }

  public Iterator<jetbrains.mps.lang.typesystem.structure.MatchStatementItem> items() {
    return this.children(MatchStatementItem.class, MatchStatement.ITEM);
  }

  public List<jetbrains.mps.lang.typesystem.structure.MatchStatementItem> getItems() {
    return this.getChildren(MatchStatementItem.class, MatchStatement.ITEM);
  }

  public void addItem(jetbrains.mps.lang.typesystem.structure.MatchStatementItem node) {
    this.addChild(MatchStatement.ITEM, node);
  }

  public void insertItem(jetbrains.mps.lang.typesystem.structure.MatchStatementItem prev, jetbrains.mps.lang.typesystem.structure.MatchStatementItem node) {
    this.insertChild(prev, MatchStatement.ITEM, node);
  }


  public static MatchStatement newInstance(SModel sm, boolean init) {
    return (MatchStatement)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.MatchStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MatchStatement newInstance(SModel sm) {
    return MatchStatement.newInstance(sm, false);
  }

}
