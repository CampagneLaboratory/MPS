package jetbrains.mps.lang.typesystem.helgins;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_VarRef_in_WhenConcreteStatement_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {

  public check_VarRef_in_WhenConcreteStatement_InferenceRule() {
  }

  public void applyRule(final SNode variableReference, final TypeCheckingContext typeCheckingContext) {
    SNode ancestor = SNodeOperations.getAncestor(variableReference, "jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement", false, false);
    if (ancestor != null) {
      SNode argument = SLinkOperations.getTarget(ancestor, "argument", true);
      SNode parent = variableReference;
      while (parent != null && parent != ancestor) {
        if (parent == argument) {
          return;
        } else
        {
          parent = SNodeOperations.getParent(parent);
        }
      }
      SNode variableDeclaration = SLinkOperations.getTarget(variableReference, "variableDeclaration", false);
      if (SNodeOperations.isInstanceOf(variableDeclaration, "jetbrains.mps.baseLanguage.structure.FieldDeclaration") || SNodeOperations.isInstanceOf(variableDeclaration, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
        return;
      }
      if (variableDeclaration != null && !(ListSequence.fromList(SNodeOperations.getAncestors(variableDeclaration, "jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement", false)).contains(ancestor))) {
        if (!(SPropertyOperations.getBoolean(variableDeclaration, "isFinal"))) {
          BaseIntentionProvider intentionProvider = null;
          typeCheckingContext.reportTypeError(variableReference, "variable is used inside WHEN CONCRETE block. should be declared final", "r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.helgins)", "1185875417873", intentionProvider);
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.VariableReference";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
