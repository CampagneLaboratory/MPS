package jetbrains.mps.lang.typesystem.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;

public class ConstraintsDescriptor implements IModelConstraints {
  private List<IModelConstraints> myConstraints = ListSequence.fromList(new ArrayList<IModelConstraints>());

  public ConstraintsDescriptor() {
    ListSequence.fromList(this.myConstraints).addElement(new ChildTypeRestrictionReference_typeRestriction_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new WhenConcreteVariableReference_whenConcreteVar_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new ListVarReference_listVarDeclaration_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new PropertyPatternVariableReference_patternVarDecl_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new LinkPatternVariableReference_patternVarDecl_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new PatternVariableReference_patternVarDecl_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new TypeVarReference_typeVarDeclaration_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new ChildTypeRestriction_childLinkDeclaration_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new ConceptReference_concept_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new ApplicableNodeReference_applicableNode_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new TypesystemIntentionArgument_quickFixArgument_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new QuickFixArgumentReference_quickFixArgument_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new SimpleRule_VarRef_link_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new SimpleRule_ProcedureCall_actualArgumentsLink_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new SimpleRule_ProcedureCall_procedureDeclaration_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new SimpleRule_ProcedureCall_parametersLink_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new PropertyMessageTarget_propertyDeclaration_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new ReferenceMessageTarget_linkDeclaration_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new LinkAssociation_subtypeLink_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new LinkAssociation_supertypeLink_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new ConceptClauseLinkInfo_linkDeclaration_ReferentConstraint());
    ListSequence.fromList(this.myConstraints).addElement(new InequationReference_inequation_ReferentConstraint());
  }

  public void unRegisterSelf(ModelConstraintsManager p0) {
    for (IModelConstraints c : this.myConstraints) {
      c.unRegisterSelf(p0);
    }
  }

  public void registerSelf(ModelConstraintsManager p0) {
    for (IModelConstraints c : this.myConstraints) {
      c.registerSelf(p0);
    }
  }
}
