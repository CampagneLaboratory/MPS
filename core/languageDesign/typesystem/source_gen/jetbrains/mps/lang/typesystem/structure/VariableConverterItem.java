package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ApplicableBlock;
import jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ConvertBlock;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class VariableConverterItem extends jetbrains.mps.lang.core.structure.BaseConcept {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.VariableConverterItem";
  public static final String APPLICABLE_BLOCK = "applicableBlock";
  public static final String CONVERT_BLOCK = "convertBlock";

  public VariableConverterItem(SNode node) {
    super(node);
  }

  public jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ApplicableBlock getApplicableBlock() {
    return (jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ApplicableBlock)this.getChild(VariableConverterItem_ApplicableBlock.class, VariableConverterItem.APPLICABLE_BLOCK);
  }

  public void setApplicableBlock(jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ApplicableBlock node) {
    super.setChild(VariableConverterItem.APPLICABLE_BLOCK, node);
  }

  public jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ConvertBlock getConvertBlock() {
    return (jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ConvertBlock)this.getChild(VariableConverterItem_ConvertBlock.class, VariableConverterItem.CONVERT_BLOCK);
  }

  public void setConvertBlock(jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ConvertBlock node) {
    super.setChild(VariableConverterItem.CONVERT_BLOCK, node);
  }


  public static VariableConverterItem newInstance(SModel sm, boolean init) {
    return (VariableConverterItem)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.VariableConverterItem", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static VariableConverterItem newInstance(SModel sm) {
    return VariableConverterItem.newInstance(sm, false);
  }

}
