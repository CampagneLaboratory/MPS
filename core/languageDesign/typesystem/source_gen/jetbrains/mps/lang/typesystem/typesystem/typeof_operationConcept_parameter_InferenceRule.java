package jetbrains.mps.lang.typesystem.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;

public class typeof_operationConcept_parameter_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_operationConcept_parameter_InferenceRule() {
  }

  public void applyRule(final SNode concept_parameter, final TypeCheckingContext typeCheckingContext) {
    SNode typeRule = SNodeOperations.getAncestor(concept_parameter, "jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule", false, false);
    if ((typeRule != null)) {
      {
        SNode _nodeToCheck_1029348928467 = concept_parameter;
        BaseIntentionProvider intentionProvider = null;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.typesystem)", "1236083449677", 0, intentionProvider);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.typesystem)", "1236083449688", true), (SNode) new typeof_operationConcept_parameter_InferenceRule.QuotationClass_7793_l523emnfdnmo().createNode(SLinkOperations.getTarget(SLinkOperations.getTarget(typeRule, "operationConcept", true), "concept", false), typeCheckingContext), _info_12389875345);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.typesystem.structure.Operation_parameter";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

  public static class QuotationClass_7793_l523emnfdnmo {
    public QuotationClass_7793_l523emnfdnmo() {
    }

    public SNode createNode(Object parameter_7793_l523emnfdl3i, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_7793_l523emnfdl3g = null;
      {
        quotedNode_7793_l523emnfdl3g = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_7793_l523emnfdl3g = quotedNode_7793_l523emnfdl3g;
        quotedNode1_7793_l523emnfdl3g.setReferent("concept", (SNode) parameter_7793_l523emnfdl3i);
        result = quotedNode1_7793_l523emnfdl3g;
      }
      return result;
    }

    public SNode createNode(Object parameter_7793_l523emnfdl3i) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_7793_l523emnfdl3g = null;
      {
        quotedNode_7793_l523emnfdl3g = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_7793_l523emnfdl3g = quotedNode_7793_l523emnfdl3g;
        quotedNode1_7793_l523emnfdl3g.setReferent("concept", (SNode) parameter_7793_l523emnfdl3i);
        result = quotedNode1_7793_l523emnfdl3g;
      }
      return result;
    }
  }
}
