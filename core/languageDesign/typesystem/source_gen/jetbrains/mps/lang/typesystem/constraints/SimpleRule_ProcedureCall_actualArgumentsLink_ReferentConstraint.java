package jetbrains.mps.lang.typesystem.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.baseLanguage.collections.internal.query.ListOperations;
import jetbrains.mps.lang.structure.behavior.LinkDeclaration_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class SimpleRule_ProcedureCall_actualArgumentsLink_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {

  public SimpleRule_ProcedureCall_actualArgumentsLink_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.lang.typesystem.structure.SimpleRule_ProcedureCall", "actualArgumentsLink", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.lang.typesystem.structure.SimpleRule_ProcedureCall", "actualArgumentsLink");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    SNode conceptDeclaration = SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getReferenceNode(), "conceptReference", true), "concept", false);
    if ((conceptDeclaration != null)) {
      List<SNode> aggregationLinkDeclarations = AbstractConceptDeclaration_Behavior.call_getAggregationLinkDeclarations_1213877394521(conceptDeclaration);
      List<SNode> result = ListOperations.<SNode>createList();
      for(SNode ld : aggregationLinkDeclarations) {
        if (!(LinkDeclaration_Behavior.call_isSingular_1213877254557(ld))) {
          ListSequence.fromList(result).addElement(ld);
        }
      }
      return result;
    }
    return ListOperations.<SNode>createList();
  }

}
