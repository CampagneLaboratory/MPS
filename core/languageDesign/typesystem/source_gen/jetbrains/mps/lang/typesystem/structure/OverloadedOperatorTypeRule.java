package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.structure.ConceptReference;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class OverloadedOperatorTypeRule extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeRule";
  public static final String OPERATION_CONCEPT = "operationConcept";
  public static final String LEFT_OPERAND_CONCEPT = "leftOperandConcept";
  public static final String RIGHT_OPERAND_CONCEPT = "rightOperandConcept";
  public static final String FUNCTION = "function";

  public OverloadedOperatorTypeRule(SNode node) {
    super(node);
  }

  public ConceptReference getOperationConcept() {
    return (ConceptReference)this.getChild(ConceptReference.class, OverloadedOperatorTypeRule.OPERATION_CONCEPT);
  }

  public void setOperationConcept(ConceptReference node) {
    super.setChild(OverloadedOperatorTypeRule.OPERATION_CONCEPT, node);
  }

  public ConceptReference getLeftOperandConcept() {
    return (ConceptReference)this.getChild(ConceptReference.class, OverloadedOperatorTypeRule.LEFT_OPERAND_CONCEPT);
  }

  public void setLeftOperandConcept(ConceptReference node) {
    super.setChild(OverloadedOperatorTypeRule.LEFT_OPERAND_CONCEPT, node);
  }

  public ConceptReference getRightOperandConcept() {
    return (ConceptReference)this.getChild(ConceptReference.class, OverloadedOperatorTypeRule.RIGHT_OPERAND_CONCEPT);
  }

  public void setRightOperandConcept(ConceptReference node) {
    super.setChild(OverloadedOperatorTypeRule.RIGHT_OPERAND_CONCEPT, node);
  }

  public OverloadedOperatorTypeFunction getFunction() {
    return (OverloadedOperatorTypeFunction)this.getChild(OverloadedOperatorTypeFunction.class, OverloadedOperatorTypeRule.FUNCTION);
  }

  public void setFunction(OverloadedOperatorTypeFunction node) {
    super.setChild(OverloadedOperatorTypeRule.FUNCTION, node);
  }


  public static OverloadedOperatorTypeRule newInstance(SModel sm, boolean init) {
    return (OverloadedOperatorTypeRule)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeRule", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static OverloadedOperatorTypeRule newInstance(SModel sm) {
    return OverloadedOperatorTypeRule.newInstance(sm, false);
  }

}
