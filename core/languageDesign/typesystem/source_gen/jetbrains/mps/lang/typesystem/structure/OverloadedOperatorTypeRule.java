package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.structure.ConceptReference;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeFunction;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class OverloadedOperatorTypeRule extends jetbrains.mps.lang.core.structure.BaseConcept {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeRule";
  public static final String LEFT_IS_EXACT = "leftIsExact";
  public static final String RIGHT_IS_EXACT = "rightIsExact";
  public static final String OPERATION_CONCEPT = "operationConcept";
  public static final String LEFT_OPERAND_TYPE = "leftOperandType";
  public static final String RIGHT_OPERAND_TYPE = "rightOperandType";
  public static final String FUNCTION = "function";

  public OverloadedOperatorTypeRule(SNode node) {
    super(node);
  }

  public boolean getLeftIsExact() {
    return this.getBooleanProperty(OverloadedOperatorTypeRule.LEFT_IS_EXACT);
  }

  public void setLeftIsExact(boolean value) {
    this.setBooleanProperty(OverloadedOperatorTypeRule.LEFT_IS_EXACT, value);
  }

  public boolean getRightIsExact() {
    return this.getBooleanProperty(OverloadedOperatorTypeRule.RIGHT_IS_EXACT);
  }

  public void setRightIsExact(boolean value) {
    this.setBooleanProperty(OverloadedOperatorTypeRule.RIGHT_IS_EXACT, value);
  }

  public jetbrains.mps.lang.smodel.structure.ConceptReference getOperationConcept() {
    return (jetbrains.mps.lang.smodel.structure.ConceptReference)this.getChild(ConceptReference.class, OverloadedOperatorTypeRule.OPERATION_CONCEPT);
  }

  public void setOperationConcept(jetbrains.mps.lang.smodel.structure.ConceptReference node) {
    super.setChild(OverloadedOperatorTypeRule.OPERATION_CONCEPT, node);
  }

  public jetbrains.mps.baseLanguage.structure.Expression getLeftOperandType() {
    return (jetbrains.mps.baseLanguage.structure.Expression)this.getChild(Expression.class, OverloadedOperatorTypeRule.LEFT_OPERAND_TYPE);
  }

  public void setLeftOperandType(jetbrains.mps.baseLanguage.structure.Expression node) {
    super.setChild(OverloadedOperatorTypeRule.LEFT_OPERAND_TYPE, node);
  }

  public jetbrains.mps.baseLanguage.structure.Expression getRightOperandType() {
    return (jetbrains.mps.baseLanguage.structure.Expression)this.getChild(Expression.class, OverloadedOperatorTypeRule.RIGHT_OPERAND_TYPE);
  }

  public void setRightOperandType(jetbrains.mps.baseLanguage.structure.Expression node) {
    super.setChild(OverloadedOperatorTypeRule.RIGHT_OPERAND_TYPE, node);
  }

  public jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeFunction getFunction() {
    return (jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeFunction)this.getChild(OverloadedOperatorTypeFunction.class, OverloadedOperatorTypeRule.FUNCTION);
  }

  public void setFunction(jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeFunction node) {
    super.setChild(OverloadedOperatorTypeRule.FUNCTION, node);
  }


  public static OverloadedOperatorTypeRule newInstance(SModel sm, boolean init) {
    return (OverloadedOperatorTypeRule)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeRule", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static OverloadedOperatorTypeRule newInstance(SModel sm) {
    return OverloadedOperatorTypeRule.newInstance(sm, false);
  }

}
