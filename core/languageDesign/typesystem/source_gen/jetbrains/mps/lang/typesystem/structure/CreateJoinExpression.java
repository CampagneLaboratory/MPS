package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.ConceptDeclaration;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CreateJoinExpression extends Expression {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.CreateJoinExpression";
  public static final String CONCEPT_OF_INSTANCE = "conceptOfInstance";
  public static final String ARGUMENT = "argument";

  public CreateJoinExpression(SNode node) {
    super(node);
  }

  public ConceptDeclaration getConceptOfInstance() {
    return (ConceptDeclaration)this.getReferent(ConceptDeclaration.class, CreateJoinExpression.CONCEPT_OF_INSTANCE);
  }

  public void setConceptOfInstance(ConceptDeclaration node) {
    super.setReferent(CreateJoinExpression.CONCEPT_OF_INSTANCE, node);
  }

  public int getArgumentsCount() {
    return this.getChildCount(CreateJoinExpression.ARGUMENT);
  }

  public Iterator<Expression> arguments() {
    return this.children(Expression.class, CreateJoinExpression.ARGUMENT);
  }

  public List<Expression> getArguments() {
    return this.getChildren(Expression.class, CreateJoinExpression.ARGUMENT);
  }

  public void addArgument(Expression node) {
    this.addChild(CreateJoinExpression.ARGUMENT, node);
  }

  public void insertArgument(Expression prev, Expression node) {
    this.insertChild(prev, CreateJoinExpression.ARGUMENT, node);
  }

  public static CreateJoinExpression newInstance(SModel sm, boolean init) {
    return (CreateJoinExpression)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.CreateJoinExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CreateJoinExpression newInstance(SModel sm) {
    return CreateJoinExpression.newInstance(sm, false);
  }
}
