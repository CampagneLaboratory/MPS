package jetbrains.mps.lang.typesystem.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.util.Pair;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;

public class GoToTypeErrorRule_InGroup_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(GoToTypeErrorRule_InGroup_Action.class);

  private IOperationContext operationContext;
  private SNode node;
  private Pair<String, String> errorId;
  private boolean immediate;

  public GoToTypeErrorRule_InGroup_Action(Pair<String, String> errorId_par, boolean immediate_par) {
    super("Go to Rule Which Caused Error", "", ICON);
    this.errorId = errorId_par;
    this.immediate = immediate_par;
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "ctrl alt R";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "GoToTypeErrorRule_InGroup", t);
      this.disable(event.getPresentation());
    }
  }

  @Override
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.operationContext = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.operationContext == null) {
      return false;
    }
    this.node = event.getData(MPSDataKeys.NODE);
    if (this.node == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      GoToTypeErrorRuleUtil.goToRuleById(GoToTypeErrorRule_InGroup_Action.this.operationContext, new Pair<String, String>(GoToTypeErrorRule_InGroup_Action.this.errorId.o1, GoToTypeErrorRule_InGroup_Action.this.errorId.o2));
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "GoToTypeErrorRule_InGroup", t);
    }
  }

  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder(500);
    res.append(GoToTypeErrorRule_InGroup_Action.class.getName());
    res.append("#");
    res.append(errorId_State((Pair<String, String>)this.errorId));
    res.append("!");
    res.append(((Object)this.immediate).toString());
    res.append("!");
    return res.toString();
  }

  public static String errorId_State(Pair<String, String> object) {
    return object.o1 + "#" + object.o2;
  }
}
