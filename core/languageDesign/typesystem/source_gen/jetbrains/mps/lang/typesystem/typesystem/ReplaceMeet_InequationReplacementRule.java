package jetbrains.mps.lang.typesystem.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInequationReplacementRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.typesystem.runtime.IsApplicable2Status;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.smodel.SModelUtil_new;

public class ReplaceMeet_InequationReplacementRule extends AbstractInequationReplacementRule_Runtime {
  public ReplaceMeet_InequationReplacementRule() {
  }

  public boolean isApplicableCustom(SNode subtype, SNode supertype, IsApplicable2Status status) {
    if (ListSequence.fromList(SNodeOperations.getDescendants(supertype, "jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable", true, new String[]{})).isNotEmpty()) {
      return false;
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(subtype, "argument", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ListSequence.fromList(SNodeOperations.getDescendants(it, "jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable", true, new String[]{})).isEmpty();
      }
    }).isEmpty()) {
      return false;
    }
    return true;
  }

  public void processInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, final TypeCheckingContext typeCheckingContext, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    Iterable<SNode> concreteArguments = ListSequence.fromList(SLinkOperations.getTargets(subtype, "argument", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ListSequence.fromList(SNodeOperations.getDescendants(it, "jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable", true, new String[]{})).isEmpty();
      }
    });
    Iterable<SNode> variableArguments = ListSequence.fromList(SLinkOperations.getTargets(subtype, "argument", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ListSequence.fromList(SNodeOperations.getDescendants(it, "jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable", true, new String[]{})).isNotEmpty();
      }
    });
    for (SNode arg : concreteArguments) {
      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(arg, supertype)) {
        return;
      }
    }
    if (Sequence.fromIterable(variableArguments).count() == 0) {
      return;
    }
    if (Sequence.fromIterable(variableArguments).count() == 1) {
      {
        SNode _nodeToCheck_1029348928467 = equationInfo.getNodeWithError();
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.typesystem)", "8480419805626072061", 0, null);
        _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
        typeCheckingContext.createLessThanInequality((SNode) Sequence.fromIterable(variableArguments).first(), (SNode) supertype, false, inequalityIsWeak, inequalityIsLessThan, _info_12389875345);
      }
      return;
    }
    SNode meet = SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.MeetType", null);
    ListSequence.fromList(SLinkOperations.getTargets(meet, "argument", true)).addSequence(Sequence.fromIterable(variableArguments));
    {
      SNode _nodeToCheck_1029348928467 = equationInfo.getNodeWithError();
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.typesystem)", "8480419805626071996", 0, null);
      _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
      typeCheckingContext.createLessThanInequality((SNode) meet, (SNode) supertype, false, inequalityIsWeak, inequalityIsLessThan, _info_12389875345);
    }
  }

  public boolean checkInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    boolean result_14532009 = true;
    {
      Iterable<SNode> concreteArguments = ListSequence.fromList(SLinkOperations.getTargets(subtype, "argument", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return ListSequence.fromList(SNodeOperations.getDescendants(it, "jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable", true, new String[]{})).isEmpty();
        }
      });
      Iterable<SNode> variableArguments = ListSequence.fromList(SLinkOperations.getTargets(subtype, "argument", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return ListSequence.fromList(SNodeOperations.getDescendants(it, "jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable", true, new String[]{})).isNotEmpty();
        }
      });
      for (SNode arg : concreteArguments) {
        if (TypeChecker.getInstance().getSubtypingManager().isSubtype(arg, supertype)) {
          return result_14532009;
        }
      }
      if (Sequence.fromIterable(variableArguments).count() == 0) {
        return result_14532009;
      }
      if (Sequence.fromIterable(variableArguments).count() == 1) {
        result_14532009 = result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode) Sequence.fromIterable(variableArguments).first(), (SNode) supertype, true);
        return result_14532009;
      }
      SNode meet = SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.MeetType", null);
      ListSequence.fromList(SLinkOperations.getTargets(meet, "argument", true)).addSequence(Sequence.fromIterable(variableArguments));
      result_14532009 = result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode) meet, (SNode) supertype, true);
    }
    return result_14532009;
  }

  public boolean isWeak() {
    return true;
  }

  public IsApplicableStatus isApplicableSubtypeAndPattern(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConceptFqName(), this.getApplicableSubtypeConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public IsApplicableStatus isApplicableSupertypeAndPattern(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConceptFqName(), this.getApplicableSupertypeConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public String getApplicableSubtypeConceptFQName() {
    return "jetbrains.mps.lang.typesystem.structure.MeetType";
  }

  public String getApplicableSupertypeConceptFQName() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }
}
