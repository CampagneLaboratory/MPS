package jetbrains.mps.lang.typesystem.plugin;

/*Generated by MPS */

import jetbrains.mps.typesystem.inference.IErrorReporter;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.*;
import jetbrains.mps.workbench.editors.MPSEditorOpener;
import com.intellij.openapi.util.Computable;

public class GoToTypeErrorRuleUtil {

  public static void goToTypeErrorRule(IOperationContext context, IErrorReporter error, Logger LOG) {
    final String ruleID = error.getRuleId();
    String ruleModel = error.getRuleModel();
    SModelReference modelUID = SModelReference.fromString(ruleModel);
    modelUID = SModelReference.fromString(modelUID.getLongName());
    final SModelDescriptor modelDescriptor = SModelRepository.getInstance().getModelDescriptor(modelUID);
    if (modelDescriptor == null) {
      LOG.error("can't find rule's model " + ruleModel);
      return;
    }
    SNode rule = ModelAccess.instance().runReadAction(new Computable<SNode>() {
      public SNode compute() {
        return modelDescriptor.getSModel().getNodeById(ruleID);
      }
    });
    if (rule == null) {
      LOG.error("can't find rule with id " + ruleID + " in the model " + modelDescriptor);
      return;
    }
    context.getComponent(MPSEditorOpener.class).openNode(rule);
  }

}
