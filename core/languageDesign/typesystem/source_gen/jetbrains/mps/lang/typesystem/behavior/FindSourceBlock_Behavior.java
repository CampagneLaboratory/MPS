package jetbrains.mps.lang.typesystem.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.typesystem.RulesFunctions_BaseLanguage;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public class FindSourceBlock_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getExpectedReturnType_1213877374441(SNode thisNode) {
    return new FindSourceBlock_Behavior.QuotationClass_3704_0().createNode();
  }

  public static boolean call_isSet_1213877521577(SNode thisNode) {
    Iterable<SNode> returnStatements = RulesFunctions_BaseLanguage.collectReturnStatements(thisNode);
    SNode lastStatement = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "body", true), "statement", true)).last();
    Set<SNode> expressions = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode returnStatement : returnStatements) {
      SetSequence.fromSet(expressions).addElement(SLinkOperations.getTarget(returnStatement, "expression", true));
    }
    if (SNodeOperations.isInstanceOf(lastStatement, "jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
      SetSequence.fromSet(expressions).addElement(SLinkOperations.getTarget(SNodeOperations.cast(lastStatement, "jetbrains.mps.baseLanguage.structure.ExpressionStatement"), "expression", true));
    }
    for (SNode expr : expressions) {
      SNode type = TypeChecker.getInstance().getTypeOf(expr);
      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(type, new FindSourceBlock_Behavior.QuotationClass_3704_1().createNode()) && !(SNodeOperations.isInstanceOf(type, "jetbrains.mps.baseLanguage.structure.NullType"))) {
        return true;
      }
    }
    return false;
  }

  public static class QuotationClass_3704_0 {
    public QuotationClass_3704_0() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_3704_0 = null;
      SNode quotedNode_3704_1 = null;
      SNode quotedNode_3704_2 = null;
      SNode quotedNode_3704_3 = null;
      {
        quotedNode_3704_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.JoinType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_3704_0 = quotedNode_3704_0;
        {
          quotedNode_3704_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_3704_1 = quotedNode_3704_1;
          quotedNode_3704_0.addChild("argument", quotedNode1_3704_1);
        }
        {
          quotedNode_3704_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_3704_2 = quotedNode_3704_2;
          quotedNode1_3704_2.addReference(SReference.create("classifier", quotedNode1_3704_2, SModelReference.fromString("f:java_stub#java.util(java.util@java_stub)"), SNodeId.fromString("~Set")));
          {
            quotedNode_3704_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
            SNode quotedNode1_3704_3 = quotedNode_3704_3;
            quotedNode_3704_2.addChild("parameter", quotedNode1_3704_3);
          }
          quotedNode_3704_0.addChild("argument", quotedNode1_3704_2);
        }
        result = quotedNode1_3704_0;
      }
      return result;
    }
  }

  public static class QuotationClass_3704_1 {
    public QuotationClass_3704_1() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_3704_4 = null;
      {
        quotedNode_3704_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_3704_4 = quotedNode_3704_4;
        quotedNode1_3704_4.addReference(SReference.create("classifier", quotedNode1_3704_4, SModelReference.fromString("f:java_stub#java.util(java.util@java_stub)"), SNodeId.fromString("~Set")));
        result = quotedNode1_3704_4;
      }
      return result;
    }
  }
}
