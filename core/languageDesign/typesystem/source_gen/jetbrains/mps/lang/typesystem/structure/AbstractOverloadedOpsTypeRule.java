package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.structure.ConceptReference;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AbstractOverloadedOpsTypeRule extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule";
  public static final String OPERATION_CONCEPT = "operationConcept";
  public static final String FUNCTION = "function";

  public AbstractOverloadedOpsTypeRule(SNode node) {
    super(node);
  }

  public ConceptReference getOperationConcept() {
    return (ConceptReference)this.getChild(ConceptReference.class, AbstractOverloadedOpsTypeRule.OPERATION_CONCEPT);
  }

  public void setOperationConcept(ConceptReference node) {
    super.setChild(AbstractOverloadedOpsTypeRule.OPERATION_CONCEPT, node);
  }

  public OverloadedOperatorTypeFunction getFunction() {
    return (OverloadedOperatorTypeFunction)this.getChild(OverloadedOperatorTypeFunction.class, AbstractOverloadedOpsTypeRule.FUNCTION);
  }

  public void setFunction(OverloadedOperatorTypeFunction node) {
    super.setChild(AbstractOverloadedOpsTypeRule.FUNCTION, node);
  }

  public static AbstractOverloadedOpsTypeRule newInstance(SModel sm, boolean init) {
    return (AbstractOverloadedOpsTypeRule)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AbstractOverloadedOpsTypeRule newInstance(SModel sm) {
    return AbstractOverloadedOpsTypeRule.newInstance(sm, false);
  }
}
