package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeRule;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class OverloadedOpRulesContainer extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.OverloadedOpRulesContainer";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAME = "name";
  public static final String RULE = "rule";

  public OverloadedOpRulesContainer(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(OverloadedOpRulesContainer.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(OverloadedOpRulesContainer.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(OverloadedOpRulesContainer.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(OverloadedOpRulesContainer.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(OverloadedOpRulesContainer.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(OverloadedOpRulesContainer.VIRTUAL_PACKAGE, value);
  }

  public String getName() {
    return this.getProperty(OverloadedOpRulesContainer.NAME);
  }

  public void setName(String value) {
    this.setProperty(OverloadedOpRulesContainer.NAME, value);
  }

  public int getRulesCount() {
    return this.getChildCount(OverloadedOpRulesContainer.RULE);
  }

  public Iterator<OverloadedOperatorTypeRule> rules() {
    return this.children(OverloadedOperatorTypeRule.class, OverloadedOpRulesContainer.RULE);
  }

  public List<OverloadedOperatorTypeRule> getRules() {
    return this.getChildren(OverloadedOperatorTypeRule.class, OverloadedOpRulesContainer.RULE);
  }

  public void addRule(OverloadedOperatorTypeRule node) {
    this.addChild(OverloadedOpRulesContainer.RULE, node);
  }

  public void insertRule(OverloadedOperatorTypeRule prev, OverloadedOperatorTypeRule node) {
    this.insertChild(prev, OverloadedOpRulesContainer.RULE, node);
  }


  public static OverloadedOpRulesContainer newInstance(SModel sm, boolean init) {
    return (OverloadedOpRulesContainer)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.OverloadedOpRulesContainer", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static OverloadedOpRulesContainer newInstance(SModel sm) {
    return OverloadedOpRulesContainer.newInstance(sm, false);
  }

}
