package jetbrains.mps.lang.typesystem.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.DataFlowBuilders;
import jetbrains.mps.lang.dataFlow.DataFlowManager;
import jetbrains.mps.lang.typesystem.dataFlow.AbstractCheckingRule_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.AbstractSubtypingRule_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.IsSubtypeExpression_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.ApplicableNodeReference_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.ApplicableNodeCondition_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.AssertStatement_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.ReportErrorStatement_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.TypeOfExpression_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.AbstractEquationStatement_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.NormalTypeClause_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.TypeVarDeclaration_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.TypeVarReference_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.InequationReplacementRule_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.ComparisonRule_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.PatternCondition_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.CoerceStatement_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.WhenConcreteStatement_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.MultipleForeachLoop_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.ImmediateSupertypesExpression_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.MatchStatement_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.MatchStatementItem_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.GivetypeStatement_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.CoerceExpression_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.AddDependencyStatement_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.PropertyNameTarget_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.ReferenceRoleTarget_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.HelginsIntention_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.HelginsIntentionArgument_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.WarningStatement_DataFlow;
import jetbrains.mps.lang.typesystem.dataFlow.InfoStatement_DataFlow;

public class DFABuilders extends DataFlowBuilders {

  public void install(DataFlowManager manager) {
    manager.register("jetbrains.mps.lang.typesystem.structure.AbstractCheckingRule", new AbstractCheckingRule_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule", new AbstractSubtypingRule_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.IsSubtypeExpression", new IsSubtypeExpression_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.ApplicableNodeReference", new ApplicableNodeReference_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.ApplicableNodeCondition", new ApplicableNodeCondition_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.AssertStatement", new AssertStatement_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.ReportErrorStatement", new ReportErrorStatement_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.TypeOfExpression", new TypeOfExpression_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement", new AbstractEquationStatement_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.NormalTypeClause", new NormalTypeClause_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.TypeVarDeclaration", new TypeVarDeclaration_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.TypeVarReference", new TypeVarReference_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.InequationReplacementRule", new InequationReplacementRule_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.ComparisonRule", new ComparisonRule_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.PatternCondition", new PatternCondition_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.CoerceStatement", new CoerceStatement_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement", new WhenConcreteStatement_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.MultipleForeachLoop", new MultipleForeachLoop_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.ImmediateSupertypesExpression", new ImmediateSupertypesExpression_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.MatchStatement", new MatchStatement_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.MatchStatementItem", new MatchStatementItem_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.GivetypeStatement", new GivetypeStatement_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.CoerceExpression", new CoerceExpression_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.AddDependencyStatement", new AddDependencyStatement_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.PropertyNameTarget", new PropertyNameTarget_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.ReferenceRoleTarget", new ReferenceRoleTarget_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.HelginsIntention", new HelginsIntention_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.HelginsIntentionArgument", new HelginsIntentionArgument_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.WarningStatement", new WarningStatement_DataFlow());
    manager.register("jetbrains.mps.lang.typesystem.structure.InfoStatement", new InfoStatement_DataFlow());
  }

}
