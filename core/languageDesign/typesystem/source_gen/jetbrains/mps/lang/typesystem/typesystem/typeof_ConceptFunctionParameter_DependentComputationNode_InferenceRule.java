package jetbrains.mps.lang.typesystem.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;

public class typeof_ConceptFunctionParameter_DependentComputationNode_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_ConceptFunctionParameter_DependentComputationNode_InferenceRule() {
  }

  public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {
    SNode dependentComputationItem = SNodeOperations.getAncestor(node, "jetbrains.mps.lang.typesystem.structure.DependentComputationItem", false, false);
    if ((dependentComputationItem != null)) {
      {
        SNode _nodeToCheck_1029348928467 = node;
        BaseIntentionProvider intentionProvider = null;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.typesystem)", "8058965347377049402", 0, intentionProvider);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.typesystem)", "8058965347377049399", true), (SNode) new typeof_ConceptFunctionParameter_DependentComputationNode_InferenceRule.QuotationClass_1496_l523emnfdocf().createNode(SLinkOperations.getTarget(dependentComputationItem, "applicableConcept", false), typeCheckingContext), _info_12389875345);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_DependentComputationNode";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return true;
  }

  public static class QuotationClass_1496_l523emnfdocf {
    public QuotationClass_1496_l523emnfdocf() {
    }

    public SNode createNode(Object parameter_1496_l523emnfdlp4, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1496_l523emnfdlp2 = null;
      {
        quotedNode_1496_l523emnfdlp2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_1496_l523emnfdlp2 = quotedNode_1496_l523emnfdlp2;
        quotedNode1_1496_l523emnfdlp2.setReferent("concept", (SNode) parameter_1496_l523emnfdlp4);
        result = quotedNode1_1496_l523emnfdlp2;
      }
      return result;
    }

    public SNode createNode(Object parameter_1496_l523emnfdlp4) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1496_l523emnfdlp2 = null;
      {
        quotedNode_1496_l523emnfdlp2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_1496_l523emnfdlp2 = quotedNode_1496_l523emnfdlp2;
        quotedNode1_1496_l523emnfdlp2.setReferent("concept", (SNode) parameter_1496_l523emnfdlp4);
        result = quotedNode1_1496_l523emnfdlp2;
      }
      return result;
    }
  }
}
