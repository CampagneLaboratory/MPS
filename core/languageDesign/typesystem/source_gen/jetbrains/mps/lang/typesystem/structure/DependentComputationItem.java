package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.ConceptDeclaration;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DependentComputationItem extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.DependentComputationItem";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String APPLICABLE_CONCEPT = "applicableConcept";
  public static final String APPLICABLE_BLOCK = "applicableBlock";
  public static final String FIND_MASTER_BLOCK = "findMasterBlock";

  public DependentComputationItem(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(DependentComputationItem.NAME);
  }

  public void setName(String value) {
    this.setProperty(DependentComputationItem.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(DependentComputationItem.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(DependentComputationItem.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(DependentComputationItem.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(DependentComputationItem.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(DependentComputationItem.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(DependentComputationItem.VIRTUAL_PACKAGE, value);
  }

  public ConceptDeclaration getApplicableConcept() {
    return (ConceptDeclaration) this.getReferent(ConceptDeclaration.class, DependentComputationItem.APPLICABLE_CONCEPT);
  }

  public void setApplicableConcept(ConceptDeclaration node) {
    super.setReferent(DependentComputationItem.APPLICABLE_CONCEPT, node);
  }

  public DependentComputationItem_ApplicableBlock getApplicableBlock() {
    return (DependentComputationItem_ApplicableBlock) this.getChild(DependentComputationItem_ApplicableBlock.class, DependentComputationItem.APPLICABLE_BLOCK);
  }

  public void setApplicableBlock(DependentComputationItem_ApplicableBlock node) {
    super.setChild(DependentComputationItem.APPLICABLE_BLOCK, node);
  }

  public DependentComputationItem_FindMasterBlock getFindMasterBlock() {
    return (DependentComputationItem_FindMasterBlock) this.getChild(DependentComputationItem_FindMasterBlock.class, DependentComputationItem.FIND_MASTER_BLOCK);
  }

  public void setFindMasterBlock(DependentComputationItem_FindMasterBlock node) {
    super.setChild(DependentComputationItem.FIND_MASTER_BLOCK, node);
  }

  public static DependentComputationItem newInstance(SModel sm, boolean init) {
    return (DependentComputationItem) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.DependentComputationItem", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DependentComputationItem newInstance(SModel sm) {
    return DependentComputationItem.newInstance(sm, false);
  }
}
