package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.BaseConcept;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class JoinType extends jetbrains.mps.lang.core.structure.BaseConcept {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.JoinType";
  public static final String ARGUMENT = "argument";

  public JoinType(SNode node) {
    super(node);
  }

  public int getArgumentsCount() {
    return this.getChildCount(JoinType.ARGUMENT);
  }

  public Iterator<jetbrains.mps.lang.core.structure.BaseConcept> arguments() {
    return this.children(BaseConcept.class, JoinType.ARGUMENT);
  }

  public List<jetbrains.mps.lang.core.structure.BaseConcept> getArguments() {
    return this.getChildren(BaseConcept.class, JoinType.ARGUMENT);
  }

  public void addArgument(jetbrains.mps.lang.core.structure.BaseConcept node) {
    this.addChild(JoinType.ARGUMENT, node);
  }

  public void insertArgument(jetbrains.mps.lang.core.structure.BaseConcept prev, jetbrains.mps.lang.core.structure.BaseConcept node) {
    this.insertChild(prev, JoinType.ARGUMENT, node);
  }


  public static JoinType newInstance(SModel sm, boolean init) {
    return (JoinType)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.JoinType", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static JoinType newInstance(SModel sm) {
    return JoinType.newInstance(sm, false);
  }

}
