package jetbrains.mps.lang.typesystem.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ConvertGivetypeToTypeOfIntention_Intention extends BaseIntention implements Intention {
  public ConvertGivetypeToTypeOfIntention_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.typesystem.structure.GivetypeStatement";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Convert to 'typeof'";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode equationStatement = SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.lang.typesystem.structure.CreateEquationStatement", null);
    SNode typeOfExpression = SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.lang.typesystem.structure.TypeOfExpression", null);
    SNode leftTypeClause = SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.lang.typesystem.structure.NormalTypeClause", null);
    SNode rightTypeClause = SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.lang.typesystem.structure.NormalTypeClause", null);
    SLinkOperations.setTarget(equationStatement, "leftExpression", leftTypeClause, true);
    SLinkOperations.setTarget(equationStatement, "rightExpression", rightTypeClause, true);
    SLinkOperations.setTarget(leftTypeClause, "normalType", typeOfExpression, true);
    SNode typeExpression = SLinkOperations.getTarget(node, "typeExpression", true);
    SLinkOperations.setTarget(rightTypeClause, "normalType", typeExpression, true);
    SNode termExpression = SLinkOperations.getTarget(node, "termExpression", true);
    SLinkOperations.setTarget(typeOfExpression, "term", termExpression, true);
    SNodeOperations.replaceWithAnother(node, equationStatement);
  }

  public String getLocationString() {
    return "jetbrains.mps.lang.typesystem.intentions";
  }
}
