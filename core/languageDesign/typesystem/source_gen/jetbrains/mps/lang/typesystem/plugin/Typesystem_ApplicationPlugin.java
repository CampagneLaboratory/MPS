package jetbrains.mps.lang.typesystem.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.applicationplugins.BaseApplicationPlugin;
import com.intellij.openapi.extensions.PluginId;
import com.intellij.openapi.actionSystem.ActionManager;
import jetbrains.mps.ide.actions.EditorPopup_ActionGroup;
import jetbrains.mps.ide.actions.NodeActions_ActionGroup;
import jetbrains.mps.ide.actions.EditorInternal_ActionGroup;
import java.util.List;
import jetbrains.mps.workbench.action.BaseKeymapChanges;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class Typesystem_ApplicationPlugin extends BaseApplicationPlugin {
  private PluginId myId = PluginId.getId("jetbrains.mps.lang.typesystem");

  public Typesystem_ApplicationPlugin() {
  }

  public PluginId getId() {
    return myId;
  }

  public void createGroups() {
    ActionManager manager = ActionManager.getInstance();
    // actions w/o parameters 
    {
      GoToTypeErrorRule_Action action = new GoToTypeErrorRule_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ShowInequationsForCell_Action action = new ShowInequationsForCell_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ShowInferredNodeType_Action action = new ShowInferredNodeType_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ShowNodeType_Action action = new ShowNodeType_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ShowRulesWhichAffectNodeType_Action action = new ShowRulesWhichAffectNodeType_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ShowTypeSystemTrace_Action action = new ShowTypeSystemTrace_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    // groups 
    {
      GoToTypeErrorGroup_ActionGroup group = new GoToTypeErrorGroup_ActionGroup();
      manager.registerAction(GoToTypeErrorGroup_ActionGroup.ID, group, myId);
      addGroup(group);
    }
    {
      TypesystemActions_ActionGroup group = new TypesystemActions_ActionGroup();
      manager.registerAction(TypesystemActions_ActionGroup.ID, group, myId);
      addGroup(group);
    }
    {
      TypesystemEditorPopupInternal_ActionGroup group = new TypesystemEditorPopupInternal_ActionGroup();
      manager.registerAction(TypesystemEditorPopupInternal_ActionGroup.ID, group, myId);
      addGroup(group);
    }
    {
      TypesystemNodeActions_ActionGroup group = new TypesystemNodeActions_ActionGroup();
      manager.registerAction(TypesystemNodeActions_ActionGroup.ID, group, myId);
      addGroup(group);
    }
  }

  public void adjustRegularGroups() {
    this.insertGroupIntoAnother(EditorPopup_ActionGroup.ID, "jetbrains.mps.lang.typesystem.plugin.TypesystemActions_ActionGroup", null);
    this.insertGroupIntoAnother(NodeActions_ActionGroup.ID, "jetbrains.mps.lang.typesystem.plugin.TypesystemNodeActions_ActionGroup", null);
    this.insertGroupIntoAnother(EditorInternal_ActionGroup.ID, "jetbrains.mps.lang.typesystem.plugin.TypesystemEditorPopupInternal_ActionGroup", null);
    this.insertGroupIntoAnother(TypesystemActions_ActionGroup.ID, "jetbrains.mps.lang.typesystem.plugin.GoToTypeErrorGroup_ActionGroup", null);
    this.insertGroupIntoAnother(TypesystemNodeActions_ActionGroup.ID, "jetbrains.mps.lang.typesystem.plugin.GoToTypeErrorGroup_ActionGroup", null);
  }

  public List<BaseKeymapChanges> initKeymaps() {
    List<BaseKeymapChanges> res = ListSequence.fromList(new ArrayList<BaseKeymapChanges>());
    ListSequence.fromList(res).addElement(new Default_KeymapChanges());
    return res;
  }
}
