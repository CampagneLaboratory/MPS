package jetbrains.mps.lang.typesystem.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.applicationplugins.BaseApplicationPlugin;
import com.intellij.openapi.extensions.PluginId;
import jetbrains.mps.ide.actions.EditorPopup_ActionGroup;
import jetbrains.mps.ide.actions.NodeActions_ActionGroup;
import jetbrains.mps.ide.actions.EditorInternal_ActionGroup;
import java.util.List;
import jetbrains.mps.workbench.action.BaseKeymapChanges;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class Typesystem_ApplicationPlugin extends BaseApplicationPlugin {
  private PluginId myId = PluginId.getId("jetbrains.mps.lang.typesystem");

  public Typesystem_ApplicationPlugin() {
  }

  public PluginId getId() {
    return myId;
  }

  public void createGroups() {
    // actions w/o parameters 
    addAction(new GoToTypeErrorRule_Action());
    addAction(new ShowInequationsForCell_Action());
    addAction(new ShowInferredNodeType_Action());
    addAction(new ShowNodeType_Action());
    addAction(new ShowRulesWhichAffectNodeType_Action());
    addAction(new ShowTypeSystemTrace_Action());
    // groups 
    addGroup(new GoToTypeErrorGroup_ActionGroup());
    addGroup(new TypesystemActions_ActionGroup());
    addGroup(new TypesystemEditorPopupInternal_ActionGroup());
    addGroup(new TypesystemNodeActions_ActionGroup());
  }

  public void adjustRegularGroups() {
    insertGroupIntoAnother(EditorPopup_ActionGroup.ID, "jetbrains.mps.lang.typesystem.plugin.TypesystemActions_ActionGroup", null);
    insertGroupIntoAnother(NodeActions_ActionGroup.ID, "jetbrains.mps.lang.typesystem.plugin.TypesystemNodeActions_ActionGroup", null);
    insertGroupIntoAnother(EditorInternal_ActionGroup.ID, "jetbrains.mps.lang.typesystem.plugin.TypesystemEditorPopupInternal_ActionGroup", null);
    insertGroupIntoAnother(TypesystemActions_ActionGroup.ID, "jetbrains.mps.lang.typesystem.plugin.GoToTypeErrorGroup_ActionGroup", null);
    insertGroupIntoAnother(TypesystemNodeActions_ActionGroup.ID, "jetbrains.mps.lang.typesystem.plugin.GoToTypeErrorGroup_ActionGroup", null);
  }

  public List<BaseKeymapChanges> initKeymaps() {
    List<BaseKeymapChanges> res = ListSequence.fromList(new ArrayList<BaseKeymapChanges>());
    ListSequence.fromList(res).addElement(new Default_KeymapChanges());
    return res;
  }
}
