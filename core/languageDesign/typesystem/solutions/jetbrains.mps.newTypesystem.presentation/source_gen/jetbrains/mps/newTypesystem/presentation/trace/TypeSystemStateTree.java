package jetbrains.mps.newTypesystem.presentation.trace;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTree;
import jetbrains.mps.newTypesystem.state.blocks.BlockKind;
import jetbrains.mps.newTypesystem.state.blocks.InequalityBlock;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.newTypesystem.state.State;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.ide.ui.MPSTreeNode;

import java.awt.Color;
import java.util.List;
import java.util.Set;
import jetbrains.mps.newTypesystem.state.blocks.Block;
import java.util.Map;
import jetbrains.mps.smodel.SNode;

import java.util.ArrayList;
import jetbrains.mps.newTypesystem.state.NodeMaps;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.JPopupMenu;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.typesystem.util.GoToTypeErrorRuleUtil;
import jetbrains.mps.util.Pair;
import jetbrains.mps.workbench.editors.MPSEditorOpener;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.workbench.action.ActionUtils;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;

public class TypeSystemStateTree extends MPSTree {
  private IOperationContext myOperationContext;
  private State myState;
  private EditorComponent myEditorComponent;

  public TypeSystemStateTree(IOperationContext operationContext, State state, EditorComponent editorComponent) {
    myOperationContext = operationContext;
    myState = state;
    myEditorComponent = editorComponent;
    this.rebuildNow();
    expandAll();
  }

  public void resetState(State state) {
    myState = state;
    rebuildNow();
    expandAll();
  }

  @Override
  protected MPSTreeNode rebuild() {
    setRootVisible(false);
    return createNode();
  }

  private TypeSystemStateTreeNode createNode() {
    TypeSystemStateTreeNode result = new TypeSystemStateTreeNode("State", myOperationContext);
    result.add(new TypeSystemStateTreeNode("Solving inequalities in process: " + myState.getInequalities().isSolvingInProcess(), myOperationContext));
    result.add(createInequalitiesNode());
    /*
      result.add(createNode("Check-only inequalities", myState.getCheckingInequalities(), null));
    */
    result.add(createNode("Comparable", myState.getBlocks(BlockKind.COMPARABLE), null));
    result.add(createNode("When concrete", myState.getBlocks(BlockKind.WHEN_CONCRETE), null));
    result.add(createNode("Errors", myState.getNodeMaps().getErrorListPresentation(), Color.RED));
    /*
      result.add(createTypesNode());
    */
    result.add(createEquationsNode());
    return result;
  }

  private TypeSystemStateTreeNode createNode(String category, List<String> entries, Color color) {
    TypeSystemStateTreeNode result = new TypeSystemStateTreeNode(category, myOperationContext);
    if (color != null) {
      result.setColor(color);
    }
    for (String string : entries) {
      result.add(new TypeSystemStateTreeNode(string, myOperationContext));
    }
    return result;
  }

  private TypeSystemStateTreeNode createNode(String category, Set<Block> entries, Color color) {
    TypeSystemStateTreeNode result = new TypeSystemStateTreeNode(category + " (" + entries.size() + ")", myOperationContext);
    if (color != null) {
      result.setColor(color);
    }
    for (Block block : entries) {
      result.add(new BlockTreeNode(block, myOperationContext, myState, myEditorComponent));
    }
    return result;
  }

  private TypeSystemStateTreeNode createInequalitiesNode() {
    TypeSystemStateTreeNode result = new TypeSystemStateTreeNode("Inequalities by groups", myOperationContext);
    for (Map.Entry<Set<SNode>, Set<InequalityBlock>> entry : myState.getInequalities().getInequalityGroups(myState.getBlocks(BlockKind.INEQUALITY)).entrySet()) {
      Set<SNode> key = entry.getKey();
      TypeSystemStateTreeNode current;
      if (key.isEmpty()) {
        current = result;
      } else {
        current = new TypeSystemStateTreeNode(key.toString(), myOperationContext);
      }
      for (InequalityBlock block : entry.getValue()) {
        current.add(new BlockTreeNode(block, myOperationContext, myState, myEditorComponent));
      }
      if (!(key.isEmpty())) {
        result.add(current);
      }
    }
    return result;
  }

  private TypeSystemStateTreeNode createTypesNode() {
    TypeSystemStateTreeNode result = new TypeSystemStateTreeNode("Types", myOperationContext);
    List<TypeTreeNode> list = new ArrayList<TypeTreeNode>();
    NodeMaps nodeMaps = myState.getNodeMaps();
    for (SNode node : nodeMaps.getTypeKeySet()) {
      SNode type = nodeMaps.getInitialType(node);
      list.add(new TypeTreeNode(myOperationContext, node, type, myState.expand(type), myEditorComponent));
    }
    Collections.sort(list, new Comparator<TypeTreeNode>() {
      @Override
      public int compare(TypeTreeNode o1, TypeTreeNode o2) {
        return o1.toString().compareTo(o2.toString());
      }
    });
    for (TypeTreeNode node : list) {
      result.add(node);
    }
    return result;
  }

  private TypeSystemStateTreeNode createEquationsNode() {
    TypeSystemStateTreeNode result = new TypeSystemStateTreeNode("Equations", myOperationContext);
    for (Map.Entry<SNode, Set<SNode>> equationGroup : myState.getEquations().getEquationGroups()) {
      result.add(new EquationTreeNode(myOperationContext, equationGroup.getKey(), equationGroup.getValue(), myState, myEditorComponent));
    }
    return result;
  }

  @Override
  protected JPopupMenu createPopupMenu(final MPSTreeNode treeNode) {
    BaseAction goToRule = null;
    BaseAction goToNode = null;
    final TypeSystemStateTreeNode stateNode = (TypeSystemStateTreeNode) treeNode;
    if (stateNode.getRuleModel() != null && stateNode.getRuleId() != null) {
      goToRule = new BaseAction("Go to rule") {
        public void doExecute(AnActionEvent e, Map<String, Object> _params) {
          GoToTypeErrorRuleUtil.goToRuleById(myOperationContext, new Pair<String, String>(stateNode.getRuleModel(), stateNode.getRuleId()));

        }
      };
    }
    SNode source = stateNode.getSource();
    if (source != null && source.isRegistered()) {
      goToNode = new BaseAction("Go to node") {
        public void doExecute(AnActionEvent e, Map<String, Object> _params) {
          myOperationContext.getComponent(MPSEditorOpener.class).editNode(stateNode.getSource(), myOperationContext);

        }
      };
    }
    DefaultActionGroup group = ActionUtils.groupFromActions(goToRule, goToNode);
    return ActionManager.getInstance().createActionPopupMenu(ActionPlaces.UNKNOWN, group).getComponent();
  }
}
