package jetbrains.mps.lang.typesystem.runtime.trace;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTreeNode;
import java.util.Map;
import java.awt.Color;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.newTypesystem.operation.AbstractOperation;
import jetbrains.mps.ide.projectPane.Icons;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.typesystem.util.GoToTypeErrorRuleUtil;
import jetbrains.mps.util.Pair;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.workbench.editors.MPSEditorOpener;
import java.util.HashMap;
import jetbrains.mps.newTypesystem.operation.PresentationKind;

public class TypeSystemTraceTreeNode extends MPSTreeNode {
  private static final Map<String, Color> COLOR_MAP = initColors();

  public TypeSystemTraceTreeNode(Object userObject, IOperationContext operationContext) {
    super(userObject, operationContext);
    AbstractOperation difference = (AbstractOperation) userObject;
    setNodeIdentifier(difference.getPresentation());
    this.setAutoExpandable(true);
    this.setIcon(Icons.DEFAULT_ICON);
  }

  public void doUpdatePresentation() {
    super.doUpdatePresentation();
    AbstractOperation difference = (AbstractOperation) getUserObject();
    setColor(getOperationColor(difference));
  }

  private Color getOperationColor(AbstractOperation difference) {
    String colorId = difference.getPresentationKind();
    Color color = COLOR_MAP.get(colorId);
    return (color != null ?
      color :
      Color.BLACK
    );
  }

  public void goToRule() {
    AbstractOperation difference = (AbstractOperation) getUserObject();
    EquationInfo info = difference.getEquationInfo();
    if (info != null) {
      GoToTypeErrorRuleUtil.goToRuleById(getOperationContext(), new Pair<String, String>(info.getRuleModel(), info.getRuleId()));
    }
  }

  public void goToNode() {
    AbstractOperation difference = (AbstractOperation) getUserObject();
    SNode source = difference.getSource();
    if (source != null && source.isRegistered()) {
      getOperationContext().getComponent(MPSEditorOpener.class).editNode(source, getOperationContext());
    }
  }

  private static Map<String, Color> initColors() {
    Map<String, Color> result = new HashMap<String, Color>();
    result.put(PresentationKind.EQUATION_ADDED, new Color(6751077));
    result.put(PresentationKind.RELATION_ADDED, new Color(119));
    result.put(PresentationKind.RELATION_REMOVED, new Color(1144763));
    result.put(PresentationKind.WHEN_CONCRETE_ADDED, new Color(4486912));
    result.put(PresentationKind.WHEN_CONCRETE_REMOVED, new Color(7816192));
    result.put(PresentationKind.ERROR_ADDED, Color.RED);
    result.put(PresentationKind.TYPE_ASSIGNED, new Color(30464));
    result.put(PresentationKind.TYPE_EXPANDED, new Color(34564));
    result.put(PresentationKind.TYPE_REMOVED, new Color(10066329));
    result.put(PresentationKind.DEFAULT, Color.BLACK);
    return result;
  }
}
