package jetbrains.mps.lang.plugin.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class SplitTabbedEditors_MigrationScript extends BaseMigrationScript {
  public SplitTabbedEditors_MigrationScript(IOperationContext operationContext) {
    super("SplitTabbedEditors");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Split tabbed editors";
      }

      public String getAdditionalInfo() {
        return "Split tabbed editors";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.plugin.structure.TabbedEditorDeclaration";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
        SModel model = SNodeOperations.getModel(node);

        for (SNode tab : ListSequence.fromList(SLinkOperations.getTargets(node, "tabs", true))) {
          SNodeOperations.detachNode(tab);
          SModelOperations.addRootNode(model, tab);
          SLinkOperations.setTarget(tab, "baseNodeConcept", SLinkOperations.getTarget(node, "mainConcept", false), false);
        }
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
