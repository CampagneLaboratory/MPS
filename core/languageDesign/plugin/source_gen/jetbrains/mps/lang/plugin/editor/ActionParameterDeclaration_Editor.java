package jetbrains.mps.lang.plugin.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_Empty;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.style.Padding;
import jetbrains.mps.nodeEditor.style.Measure;

public class ActionParameterDeclaration_Editor extends DefaultNodeEditor {

  /* package */AbstractCellProvider myActionParameter_NameCellComponent6987_0;
  /* package */AbstractCellProvider myActionParameter_IsOptional6987_0;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection_6987_0(context, node);
  }

  public EditorCell createCollection_6987_0(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_6987_0(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createRefNode_6987_1(context, node));
    editorCell.addEditorCell(this.createComponent_6987_0(context, node));
    editorCell.addEditorCell(this.createConstant_6987_0(context, node, "key:"));
    editorCell.addEditorCell(this.createReadOnlyModelAccessor_6987_0(context, node));
    editorCell.addEditorCell(this.createComponent_6987_1(context, node));
    return editorCell;
  }

  public EditorCell createComponent_6987_0(EditorContext context, SNode node) {
    if (this.myActionParameter_NameCellComponent6987_0 == null) {
      this.myActionParameter_NameCellComponent6987_0 = new ActionParameter_NameCellComponent(node);
    }
    EditorCell editorCell = this.myActionParameter_NameCellComponent6987_0.createEditorCell(context);
    setupBasic_Component_6987_0(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createComponent_6987_1(EditorContext context, SNode node) {
    if (this.myActionParameter_IsOptional6987_0 == null) {
      this.myActionParameter_IsOptional6987_0 = new ActionParameter_IsOptional(node);
    }
    EditorCell editorCell = this.myActionParameter_IsOptional6987_0.createEditorCell(context);
    setupBasic_Component_6987_1(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createConstant_6987_0(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_6987_0(editorCell, node, context);
    setupLabel_Constant_6987_0(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createReadOnlyModelAccessor_6987_0(final EditorContext context, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(context, new ModelAccessor() {

      public String getText() {
        SNode fieldReference = null;
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "type", true), "jetbrains.mps.lang.smodel.structure.SNodeType")) {
          fieldReference = new _Quotations.QuotationClass_0().createNode();
        } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "type", true), "jetbrains.mps.lang.smodel.structure.SModelType")) {
          fieldReference = new _Quotations.QuotationClass_1().createNode();
        } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "type", true), "jetbrains.mps.lang.smodel.structure.SNodeListType")) {
          fieldReference = new _Quotations.QuotationClass_2().createNode();
        }
        assert fieldReference != null;
        return SPropertyOperations.getString(SLinkOperations.getTarget(fieldReference, "variableDeclaration", false), "name");
      }

      public void setText(String s) {
      }

      public boolean isValidText(String s) {
        return EqualUtil.equals(s, this.getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, new CellAction_Empty());
    setupBasic_ReadOnlyModelAccessor_6987_0(editorCell, node, context);
    setupLabel_ReadOnlyModelAccessor_6987_0(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createRefNode_6987_0_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_RefNode_6987_0(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_RefNode_6987_0((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode_6987_1(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("type");
    provider.setNoTargetText("<no type>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode_6987_0_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }


  private static void setupBasic_Component_6987_0(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_ReadOnlyModelAccessor_6987_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("ReadOnlyModelAccessor_6987_0");
  }

  private static void setupBasic_Collection_6987_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_6987_0");
  }

  private static void setupBasic_RefNode_6987_0(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_6987_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_6987_0");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
          this.set(StyleAttributes.PADDING_LEFT, new Padding(0, Measure.SPACES));
        }
      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Component_6987_1(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_ReadOnlyModelAccessor_6987_0(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_RefNode_6987_0(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_6987_0(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

}
