package jetbrains.mps.lang.plugin.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_Empty;
import jetbrains.mps.nodeEditor.cellMenu.CompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.BasicCellContext;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPart;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_Generic_Item;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;

public class ActionParameter_IsOptional extends AbstractCellProvider {

  public ActionParameter_IsOptional(SNode node) {
    super(node);
  }

  public EditorCell createEditorCell(EditorContext context) {
    return this.createEditorCell(context, this.getSNode());
  }

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createReadOnlyModelAccessor_3654_0(context, node);
  }

  public EditorCell createReadOnlyModelAccessor_3654_0(final EditorContext context, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(context, new ModelAccessor() {

      public String getText() {
        return (SPropertyOperations.getBoolean(node, "isOptional") ?
          "optional" :
          "required"
        );
      }

      public void setText(String s) {
      }

      public boolean isValidText(String s) {
        return EqualUtil.equals(s, this.getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, new CellAction_Empty());
    editorCell.setSubstituteInfo(new CompositeSubstituteInfo(context, new BasicCellContext(node), new SubstituteInfoPart[]{new ActionParameter_IsOptional.ActionParameter_generic_cellMenu0(), new ActionParameter_IsOptional.ActionParameter_generic_cellMenu1()}));
    setupBasic_ReadOnlyModelAccessor_3654_0(editorCell, node, context);
    setupLabel_ReadOnlyModelAccessor_3654_0(editorCell, node, context);
    return editorCell;
  }


  private static void setupBasic_ReadOnlyModelAccessor_3654_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("ReadOnlyModelAccessor_3654_0");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
  }

  private static void setupLabel_ReadOnlyModelAccessor_3654_0(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static class ActionParameter_generic_cellMenu0 extends AbstractCellMenuPart_Generic_Item {

    public ActionParameter_generic_cellMenu0() {
    }

    public void handleAction(SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      SPropertyOperations.set(node, "isOptional", "" + (true));
    }

    public String getMatchingText() {
      return "optional";
    }

  }

  public static class ActionParameter_generic_cellMenu1 extends AbstractCellMenuPart_Generic_Item {

    public ActionParameter_generic_cellMenu1() {
    }

    public void handleAction(SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      SPropertyOperations.set(node, "isOptional", "" + (false));
    }

    public String getMatchingText() {
      return "required";
    }

  }

}
