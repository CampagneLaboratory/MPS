package jetbrains.mps.lang.plugin.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class GetUserDataExpression extends Expression implements ExecuteSpecific {
  public static final String concept = "jetbrains.mps.lang.plugin.structure.GetUserDataExpression";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String ARGUMENT = "argument";

  public GetUserDataExpression(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(GetUserDataExpression.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(GetUserDataExpression.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(GetUserDataExpression.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(GetUserDataExpression.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(GetUserDataExpression.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(GetUserDataExpression.VIRTUAL_PACKAGE, value);
  }

  public Expression getArgument() {
    return (Expression) this.getChild(Expression.class, GetUserDataExpression.ARGUMENT);
  }

  public void setArgument(Expression node) {
    super.setChild(GetUserDataExpression.ARGUMENT, node);
  }

  public static GetUserDataExpression newInstance(SModel sm, boolean init) {
    return (GetUserDataExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.plugin.structure.GetUserDataExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static GetUserDataExpression newInstance(SModel sm) {
    return GetUserDataExpression.newInstance(sm, false);
  }
}
