package jetbrains.mps.lang.plugin.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodePropertyGetter;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class RunConfigPropertyInstance_name_PropertyConstraint implements IModelConstraints, INodePropertyGetter {
  public RunConfigPropertyInstance_name_PropertyConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodePropertyGetter("jetbrains.mps.lang.plugin.structure.RunConfigPropertyInstance", "name", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodePropertyGetter("jetbrains.mps.lang.plugin.structure.RunConfigPropertyInstance", "name");
  }

  public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
    if ((SLinkOperations.getTarget(node, "property", false) == null)) {
      return null;
    }
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, "property", false), "name");
  }
}
