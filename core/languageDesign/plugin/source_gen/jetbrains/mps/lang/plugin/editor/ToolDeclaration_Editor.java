package jetbrains.mps.lang.plugin.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cells.EditorCell_Image;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_Empty;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cells.EditorCell_Indent;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.plugin.behavior.ToolDeclaration_Behavior;
import jetbrains.mps.project.IModule;
import jetbrains.mps.lang.structure.editor.EditorUtil;
import jetbrains.mps.plugins.MacrosUtil;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.nodeEditor.BlockCells;

import javax.swing.JComponent;

import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandlerElementKeyMap;

public class ToolDeclaration_Editor extends DefaultNodeEditor {

  /* package */ AbstractCellListHandler myListHandler_1227014566132;
  /* package */ AbstractCellListHandler myListHandler_1227014566140;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection1227014566142(context, node);
  }

  public EditorCell createAlternation1227014566042(EditorContext context, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = ToolDeclaration_Editor.renderingCondition4170_1(node, context, context.getOperationContext().getScope());
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createCollection1227014566112(context, node);
    } else {
      editorCell = this.createConstant1227014566110(context, node, "<no icon>");
    }
    setupBasic_Alternation_12270145660421227014566042(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createCollection1227014565991(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12270145659911227014565991(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1227014565992(context, node, "tool"));
    editorCell.addEditorCell(this.createProperty1227014565993(context, node));
    return editorCell;
  }

  public EditorCell createCollection1227014565996(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_12270145659961227014565996(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createCollection1227014565997(context, node));
    editorCell.addEditorCell(this.createCollection1227014566001(context, node));
    editorCell.addEditorCell(this.createCollection1227014566039(context, node));
    editorCell.addEditorCell(this.createConstant1227014566131(context, node, ""));
    editorCell.addEditorCell(this.createRefNodeList1227014566132(context, node));
    editorCell.addEditorCell(this.createConstant1227014566133(context, node, ""));
    editorCell.addEditorCell(this.createRefNode1227014566134(context, node));
    editorCell.addEditorCell(this.createConstant1227014566135(context, node, ""));
    editorCell.addEditorCell(this.createRefNode1227014566136(context, node));
    editorCell.addEditorCell(this.createConstant1227014566137(context, node, ""));
    editorCell.addEditorCell(this.createRefNode1227014566138(context, node));
    editorCell.addEditorCell(this.createConstant1227014566139(context, node, ""));
    editorCell.addEditorCell(this.createRefNodeList1227014566140(context, node));
    return editorCell;
  }

  public EditorCell createCollection1227014565997(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12270145659971227014565997(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1227014565998(context, node, "caption:"));
    editorCell.addEditorCell(this.createProperty1227014565999(context, node));
    return editorCell;
  }

  public EditorCell createCollection1227014566001(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12270145660011227014566001(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1227014566002(context, node, "number:"));
    editorCell.addEditorCell(this.createProperty1227014566003(context, node));
    if (renderingCondition4170_0(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection1227014566004(context, node));
    }
    return editorCell;
  }

  public EditorCell createCollection1227014566004(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12270145660041227014566004(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1227014566005(context, node, "("));
    editorCell.addEditorCell(this.createConstant1227014566007(context, node, "show keystroke: "));
    editorCell.addEditorCell(this.createReadOnlyModelAccessor1227014566010(context, node));
    editorCell.addEditorCell(this.createConstant1227014566029(context, node, ")"));
    return editorCell;
  }

  public EditorCell createCollection1227014566039(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12270145660391227014566039(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1227014566040(context, node, "icon:"));
    editorCell.addEditorCell(this.createAlternation1227014566042(context, node));
    editorCell.addEditorCell(EditorCell_Component.createComponentCell(context, node, ToolDeclaration_Editor._QueryFunction_JComponent_1227014566123(node, context), "_1227014566122"));
    return editorCell;
  }

  public EditorCell createCollection1227014566112(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12270145661121227014566112(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createImage1227014566113(context, node));
    editorCell.addEditorCell(this.createProperty1227014566120(context, node));
    return editorCell;
  }

  public EditorCell createCollection1227014566142(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_12270145661421227014566142(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createCollection1227014566143(context, node));
    editorCell.addEditorCell(this.createCollection1227014566146(context, node));
    if (renderingCondition4170_3(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createConstant1227014566970(context, node, "}"));
    }
    return editorCell;
  }

  public EditorCell createCollection1227014566143(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12270145661431227014566143(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createCollection1227014565991(context, node));
    if (renderingCondition4170_2(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createConstant1227014566965(context, node, "{"));
    }
    return editorCell;
  }

  public EditorCell createCollection1227014566146(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12270145661461227014566146(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createIndentCell4170_0(context, node));
    editorCell.addEditorCell(this.createCollection1227014565996(context, node));
    return editorCell;
  }

  public EditorCell createConstant1227014565992(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145659921227014565992(editorCell, node, context);
    setupLabel_Constant_1227014565992_1227014565992(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014565998(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145659981227014565998(editorCell, node, context);
    setupLabel_Constant_1227014565998_1227014565998(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014566002(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145660021227014566002(editorCell, node, context);
    setupLabel_Constant_1227014566002_1227014566002(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014566005(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145660051227014566005(editorCell, node, context);
    setupLabel_Constant_1227014566005_1227014566005(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014566007(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145660071227014566007(editorCell, node, context);
    setupLabel_Constant_1227014566007_1227014566007(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014566029(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145660291227014566029(editorCell, node, context);
    setupLabel_Constant_1227014566029_1227014566029(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014566040(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145660401227014566040(editorCell, node, context);
    setupLabel_Constant_1227014566040_1227014566040(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014566110(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145661101227014566110(editorCell, node, context);
    setupLabel_Constant_1227014566110_1227014566110(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014566131(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145661311227014566131(editorCell, node, context);
    setupLabel_Constant_1227014566131_1227014566131(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014566133(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145661331227014566133(editorCell, node, context);
    setupLabel_Constant_1227014566133_1227014566133(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014566135(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145661351227014566135(editorCell, node, context);
    setupLabel_Constant_1227014566135_1227014566135(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014566137(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145661371227014566137(editorCell, node, context);
    setupLabel_Constant_1227014566137_1227014566137(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014566139(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145661391227014566139(editorCell, node, context);
    setupLabel_Constant_1227014566139_1227014566139(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014566965(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145669651227014566965(editorCell, node, context);
    setupLabel_Constant_1227014566965_1227014566965(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1227014566970(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12270145669701227014566970(editorCell, node, context);
    setupLabel_Constant_1227014566970_1227014566970(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createImage1227014566113(EditorContext context, SNode node) {
    EditorCell_Image editorCell;
    editorCell = EditorCell_Image.createImageCell(context, node, _image_provider_1227014566113(node, context));
    setupBasic_Image_12270145661131227014566113(editorCell, node, context);
    editorCell.setDescent(0);
    return editorCell;
  }

  public EditorCell createReadOnlyModelAccessor1227014566010(final EditorContext context, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(context, new ModelAccessor() {

      public String getText() {
        return "Alt-" + SPropertyOperations.getString(node, "number");
      }

      public void setText(String s) {
      }

      public boolean isValidText(String s) {
        return s.equals(this.getText());
      }

    }, node);
    editorCell.setAction(CellActionType.DELETE, new CellAction_Empty());
    setupBasic_ReadOnlyModelAccessor_12270145660101227014566010(editorCell, node, context);
    setupLabel_ReadOnlyModelAccessor_1227014566010_1227014566010(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createRefNodeList1227014566132(EditorContext context, SNode node) {
    if (this.myListHandler_1227014566132 == null) {
      this.myListHandler_1227014566132 = new ToolDeclaration_Editor.fieldDeclarationListHandler_4170_0(node, "fieldDeclaration", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1227014566132.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_fieldDeclaration1227014566132(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.setRole(this.myListHandler_1227014566132.getElementRole());
    return editorCell;
  }

  public EditorCell createRefNodeList1227014566140(EditorContext context, SNode node) {
    if (this.myListHandler_1227014566140 == null) {
      this.myListHandler_1227014566140 = new ToolDeclaration_Editor.methodDeclarationListHandler_4170_0(node, "methodDeclaration", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1227014566140.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_methodDeclaration1227014566140(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.setRole(this.myListHandler_1227014566140.getElementRole());
    return editorCell;
  }

  public EditorCell createIndentCell4170_0(EditorContext context, SNode node) {
    EditorCell_Indent result = new EditorCell_Indent(context, node);
    return result;
  }

  public EditorCell createProperty1227014565993_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_property_name1227014565993(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_property_name_1227014565993((EditorCell_Label) editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty1227014565993(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createProperty1227014565993_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
      return cellWithRole;
  }

  public EditorCell createProperty1227014565999_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_property_caption1227014565999(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_property_caption_1227014565999((EditorCell_Label) editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty1227014565999(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("caption");
    provider.setNoTargetText("<use name>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(true);
    EditorCell cellWithRole = this.createProperty1227014565999_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
      return cellWithRole;
  }

  public EditorCell createProperty1227014566003_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_property_number1227014566003(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_property_number_1227014566003((EditorCell_Label) editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty1227014566003(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("number");
    provider.setNoTargetText("<no>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(true);
    EditorCell cellWithRole = this.createProperty1227014566003_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
      return cellWithRole;
  }

  public EditorCell createProperty1227014566120_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_property_icon1227014566120(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_property_icon_1227014566120((EditorCell_Label) editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty1227014566120(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("icon");
    provider.setNoTargetText("<no icon>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createProperty1227014566120_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
      return cellWithRole;
  }

  public EditorCell createRefNode1227014566134_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_initBlock1227014566134(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_initBlock_1227014566134((EditorCell_Label) editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1227014566134(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("initBlock");
    provider.setNoTargetText("<init block>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1227014566134_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
      return cellWithRole;
  }

  public EditorCell createRefNode1227014566136_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_disposeBlock1227014566136(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_disposeBlock_1227014566136((EditorCell_Label) editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1227014566136(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("disposeBlock");
    provider.setNoTargetText("<dispose block>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1227014566136_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
      return cellWithRole;
  }

  public EditorCell createRefNode1227014566138_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_getComponentBlock1227014566138(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_getComponentBlock_1227014566138((EditorCell_Label) editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1227014566138(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("getComponentBlock");
    provider.setNoTargetText("<getComponent block>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1227014566138_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
      return cellWithRole;
  }


  private static void setupBasic_Collection_12270145659911227014565991(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1227014565991");
  }

  private static void setupBasic_Constant_12270145659921227014565992(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014565992");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
  }

  private static void setupBasic_property_name1227014565993(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_name");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, true);
          this.set(StyleAttributes.RT_ANCHOR_TAG, "default_RTransform");
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12270145659961227014565996(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1227014565996");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12270145659971227014565997(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1227014565997");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_12270145659981227014565998(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014565998");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
  }

  private static void setupBasic_property_caption1227014565999(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_caption");
  }

  private static void setupBasic_Collection_12270145660011227014566001(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1227014566001");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_12270145660021227014566002(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014566002");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
  }

  private static void setupBasic_property_number1227014566003(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_number");
  }

  private static void setupBasic_Collection_12270145660041227014566004(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1227014566004");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_12270145660051227014566005(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014566005");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.TEXT_COLOR, MPSColors.lightGray);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_12270145660071227014566007(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014566007");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
          this.set(StyleAttributes.TEXT_COLOR, MPSColors.lightGray);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_ReadOnlyModelAccessor_12270145660101227014566010(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("ReadOnlyModelAccessor_1227014566010");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
          this.set(StyleAttributes.TEXT_COLOR, MPSColors.darkGray);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_12270145660291227014566029(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014566029");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.TEXT_COLOR, MPSColors.lightGray);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12270145660391227014566039(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1227014566039");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_12270145660401227014566040(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014566040");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Alternation_12270145660421227014566042(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Alternation_1227014566042");
  }

  private static void setupBasic_Constant_12270145661101227014566110(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014566110");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.TEXT_COLOR, MPSColors.lightGray);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12270145661121227014566112(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1227014566112");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Image_12270145661131227014566113(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Image_1227014566113");
  }

  private static void setupBasic_property_icon1227014566120(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_icon");
  }

  private static void setupBasic_JComponent_12270145661221227014566122(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("JComponent_1227014566122");
  }

  private static void setupBasic_Constant_12270145661311227014566131(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014566131");
  }

  private static void setupBasic_refNodeList_fieldDeclaration1227014566132(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_fieldDeclaration");
  }

  private static void setupBasic_Constant_12270145661331227014566133(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014566133");
  }

  private static void setupBasic_refNode_initBlock1227014566134(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_12270145661351227014566135(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014566135");
  }

  private static void setupBasic_refNode_disposeBlock1227014566136(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_12270145661371227014566137(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014566137");
  }

  private static void setupBasic_refNode_getComponentBlock1227014566138(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_12270145661391227014566139(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014566139");
  }

  private static void setupBasic_refNodeList_methodDeclaration1227014566140(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_methodDeclaration");
  }

  private static void setupBasic_Collection_12270145661421227014566142(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1227014566142");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12270145661431227014566143(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1227014566143");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_12270145661461227014566146(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1227014566146");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Indent_12270145661471227014566147(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Indent_1227014566147");
  }

  private static void setupBasic_Constant_12270145669651227014566965(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014566965");
    BaseLanguageStyle_StyleSheet.getLeftBrace(editorCell).apply(editorCell);
  }

  private static void setupBasic_Constant_12270145669701227014566970(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1227014566970");
    BaseLanguageStyle_StyleSheet.getRightBrace(editorCell).apply(editorCell);
  }

  private static void setupLabel_Constant_1227014565992_1227014565992(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_property_name_1227014565993(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014565998_1227014565998(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_property_caption_1227014565999(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014566002_1227014566002(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_property_number_1227014566003(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014566005_1227014566005(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014566007_1227014566007(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_ReadOnlyModelAccessor_1227014566010_1227014566010(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014566029_1227014566029(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014566040_1227014566040(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014566110_1227014566110(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_property_icon_1227014566120(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014566131_1227014566131(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_fieldDeclaration_1227014566132(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014566133_1227014566133(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNode_initBlock_1227014566134(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014566135_1227014566135(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNode_disposeBlock_1227014566136(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014566137_1227014566137(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNode_getComponentBlock_1227014566138(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014566139_1227014566139(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_methodDeclaration_1227014566140(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014566965_1227014566965(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1227014566970_1227014566970(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static String _image_provider_1227014566113(SNode node, EditorContext editorContext) {
    return SPropertyOperations.getString(node, "icon");
  }

  public static boolean renderingCondition4170_0(SNode node, EditorContext editorContext, IScope scope) {
    return ToolDeclaration_Behavior.call_hasNumber_1213877425741(node);
  }

  public static boolean renderingCondition4170_1(SNode node, EditorContext editorContext, IScope scope) {
    String path = null;
    IModule module = EditorUtil.findAnchorModule(node);
    if (module != null) {
      path = MacrosUtil.expandPath(SPropertyOperations.getString(node, "icon"), module.getModuleUID());
    }
    return path != null && FileSystem.getFile(path).exists();
  }

  public static boolean renderingCondition4170_2(SNode node, EditorContext editorContext, IScope scope) {
    return BlockCells.useBraces();
  }

  public static boolean renderingCondition4170_3(SNode node, EditorContext editorContext, IScope scope) {
    return BlockCells.useBraces();
  }

  public static JComponent _QueryFunction_JComponent_1227014566123(SNode node, EditorContext editorContext) {
    return EditorUtil.createSelectIconButton(node, "icon", editorContext);
  }

  public static class fieldDeclarationListHandler_4170_0 extends RefNodeListHandler {

    public fieldDeclarationListHandler_4170_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

  }

  public static class methodDeclarationListHandler_4170_0 extends RefNodeListHandler {

    public methodDeclarationListHandler_4170_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
          elementCell.addKeyMap(new RefNodeListHandlerElementKeyMap(this, " "));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      {
        EditorCell_Constant editorCell = new EditorCell_Constant(context, this.getOwner(), " ");
        editorCell.setSelectable(false);
        return editorCell;
      }
    }

  }

}
