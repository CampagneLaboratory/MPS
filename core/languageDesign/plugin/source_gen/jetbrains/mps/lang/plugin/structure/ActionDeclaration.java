package jetbrains.mps.lang.plugin.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.plugin.structure.UpdateBlock;
import jetbrains.mps.lang.plugin.structure.ExecuteBlock;
import jetbrains.mps.lang.plugin.structure.KeyMapKeystroke;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration;
import java.util.List;
import jetbrains.mps.lang.plugin.structure.ActionParameter;
import jetbrains.mps.lang.plugin.structure.ActionConstructionParameterDeclaration;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ActionDeclaration extends jetbrains.mps.lang.core.structure.BaseConcept implements jetbrains.mps.baseLanguage.classifiers.structure.IClassifier {
  public static final String concept = "jetbrains.mps.lang.plugin.structure.ActionDeclaration";
  public static final String ICON_PATH = "iconPath";
  public static final String CAPTION = "caption";
  public static final String DESCRIPTION = "description";
  public static final String MNEMONIC = "mnemonic";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String IS_ALWAYS_VISIBLE = "isAlwaysVisible";
  public static final String OUTSIDE_COMMAND_EXECUTION = "outsideCommandExecution";
  public static final String UPDATE_BLOCK = "updateBlock";
  public static final String EXECUTE_FUNCTION = "executeFunction";
  public static final String KEYSTROKE = "keystroke";
  public static final String METHOD_DECLARATION = "methodDeclaration";
  public static final String PARAMETER = "parameter";
  public static final String CONSTRUCTION_PARAMETER = "constructionParameter";

  public ActionDeclaration(SNode node) {
    super(node);
  }

  public String getIconPath() {
    return this.getProperty(ActionDeclaration.ICON_PATH);
  }

  public void setIconPath(String value) {
    this.setProperty(ActionDeclaration.ICON_PATH, value);
  }

  public String getCaption() {
    return this.getProperty(ActionDeclaration.CAPTION);
  }

  public void setCaption(String value) {
    this.setProperty(ActionDeclaration.CAPTION, value);
  }

  public String getDescription() {
    return this.getProperty(ActionDeclaration.DESCRIPTION);
  }

  public void setDescription(String value) {
    this.setProperty(ActionDeclaration.DESCRIPTION, value);
  }

  public String getMnemonic() {
    return this.getProperty(ActionDeclaration.MNEMONIC);
  }

  public void setMnemonic(String value) {
    this.setProperty(ActionDeclaration.MNEMONIC, value);
  }

  public String getName() {
    return this.getProperty(ActionDeclaration.NAME);
  }

  public void setName(String value) {
    this.setProperty(ActionDeclaration.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(ActionDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(ActionDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(ActionDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(ActionDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(ActionDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(ActionDeclaration.VIRTUAL_PACKAGE, value);
  }

  public boolean getIsAlwaysVisible() {
    return this.getBooleanProperty(ActionDeclaration.IS_ALWAYS_VISIBLE);
  }

  public void setIsAlwaysVisible(boolean value) {
    this.setBooleanProperty(ActionDeclaration.IS_ALWAYS_VISIBLE, value);
  }

  public boolean getOutsideCommandExecution() {
    return this.getBooleanProperty(ActionDeclaration.OUTSIDE_COMMAND_EXECUTION);
  }

  public void setOutsideCommandExecution(boolean value) {
    this.setBooleanProperty(ActionDeclaration.OUTSIDE_COMMAND_EXECUTION, value);
  }

  public jetbrains.mps.lang.plugin.structure.UpdateBlock getUpdateBlock() {
    return (jetbrains.mps.lang.plugin.structure.UpdateBlock)this.getChild(UpdateBlock.class, ActionDeclaration.UPDATE_BLOCK);
  }

  public void setUpdateBlock(jetbrains.mps.lang.plugin.structure.UpdateBlock node) {
    super.setChild(ActionDeclaration.UPDATE_BLOCK, node);
  }

  public jetbrains.mps.lang.plugin.structure.ExecuteBlock getExecuteFunction() {
    return (jetbrains.mps.lang.plugin.structure.ExecuteBlock)this.getChild(ExecuteBlock.class, ActionDeclaration.EXECUTE_FUNCTION);
  }

  public void setExecuteFunction(jetbrains.mps.lang.plugin.structure.ExecuteBlock node) {
    super.setChild(ActionDeclaration.EXECUTE_FUNCTION, node);
  }

  public jetbrains.mps.lang.plugin.structure.KeyMapKeystroke getKeystroke() {
    return (jetbrains.mps.lang.plugin.structure.KeyMapKeystroke)this.getChild(KeyMapKeystroke.class, ActionDeclaration.KEYSTROKE);
  }

  public void setKeystroke(jetbrains.mps.lang.plugin.structure.KeyMapKeystroke node) {
    super.setChild(ActionDeclaration.KEYSTROKE, node);
  }

  public int getMethodDeclarationsCount() {
    return this.getChildCount(ActionDeclaration.METHOD_DECLARATION);
  }

  public Iterator<jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration> methodDeclarations() {
    return this.children(DefaultClassifierMethodDeclaration.class, ActionDeclaration.METHOD_DECLARATION);
  }

  public List<jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration> getMethodDeclarations() {
    return this.getChildren(DefaultClassifierMethodDeclaration.class, ActionDeclaration.METHOD_DECLARATION);
  }

  public void addMethodDeclaration(jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration node) {
    this.addChild(ActionDeclaration.METHOD_DECLARATION, node);
  }

  public void insertMethodDeclaration(jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration prev, jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration node) {
    this.insertChild(prev, ActionDeclaration.METHOD_DECLARATION, node);
  }

  public int getParametersCount() {
    return this.getChildCount(ActionDeclaration.PARAMETER);
  }

  public Iterator<jetbrains.mps.lang.plugin.structure.ActionParameter> parameters() {
    return this.children(ActionParameter.class, ActionDeclaration.PARAMETER);
  }

  public List<jetbrains.mps.lang.plugin.structure.ActionParameter> getParameters() {
    return this.getChildren(ActionParameter.class, ActionDeclaration.PARAMETER);
  }

  public void addParameter(jetbrains.mps.lang.plugin.structure.ActionParameter node) {
    this.addChild(ActionDeclaration.PARAMETER, node);
  }

  public void insertParameter(jetbrains.mps.lang.plugin.structure.ActionParameter prev, jetbrains.mps.lang.plugin.structure.ActionParameter node) {
    this.insertChild(prev, ActionDeclaration.PARAMETER, node);
  }

  public int getConstructionParametersCount() {
    return this.getChildCount(ActionDeclaration.CONSTRUCTION_PARAMETER);
  }

  public Iterator<jetbrains.mps.lang.plugin.structure.ActionConstructionParameterDeclaration> constructionParameters() {
    return this.children(ActionConstructionParameterDeclaration.class, ActionDeclaration.CONSTRUCTION_PARAMETER);
  }

  public List<jetbrains.mps.lang.plugin.structure.ActionConstructionParameterDeclaration> getConstructionParameters() {
    return this.getChildren(ActionConstructionParameterDeclaration.class, ActionDeclaration.CONSTRUCTION_PARAMETER);
  }

  public void addConstructionParameter(jetbrains.mps.lang.plugin.structure.ActionConstructionParameterDeclaration node) {
    this.addChild(ActionDeclaration.CONSTRUCTION_PARAMETER, node);
  }

  public void insertConstructionParameter(jetbrains.mps.lang.plugin.structure.ActionConstructionParameterDeclaration prev, jetbrains.mps.lang.plugin.structure.ActionConstructionParameterDeclaration node) {
    this.insertChild(prev, ActionDeclaration.CONSTRUCTION_PARAMETER, node);
  }


  public static ActionDeclaration newInstance(SModel sm, boolean init) {
    return (ActionDeclaration)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.plugin.structure.ActionDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ActionDeclaration newInstance(SModel sm) {
    return ActionDeclaration.newInstance(sm, false);
  }

}
