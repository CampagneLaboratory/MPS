package jetbrains.mps.lang.findUsages.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MakeResultProvider extends Expression {
  public static final String concept = "jetbrains.mps.lang.findUsages.structure.MakeResultProvider";
  public static final String FINDER = "finder";

  public MakeResultProvider(SNode node) {
    super(node);
  }

  public int getFindersCount() {
    return this.getChildCount(MakeResultProvider.FINDER);
  }

  public Iterator<FinderReference> finders() {
    return this.children(FinderReference.class, MakeResultProvider.FINDER);
  }

  public List<FinderReference> getFinders() {
    return this.getChildren(FinderReference.class, MakeResultProvider.FINDER);
  }

  public void addFinder(FinderReference node) {
    this.addChild(MakeResultProvider.FINDER, node);
  }

  public void insertFinder(FinderReference prev, FinderReference node) {
    this.insertChild(prev, MakeResultProvider.FINDER, node);
  }

  public static MakeResultProvider newInstance(SModel sm, boolean init) {
    return (MakeResultProvider) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.findUsages.structure.MakeResultProvider", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MakeResultProvider newInstance(SModel sm) {
    return MakeResultProvider.newInstance(sm, false);
  }
}
