package jetbrains.mps.lang.findUsages.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ExecuteFindersGetSearchResults extends Expression {
  public static final String concept = "jetbrains.mps.lang.findUsages.structure.ExecuteFindersGetSearchResults";
  public static final String QUERY_NODE = "queryNode";
  public static final String SCOPE = "scope";
  public static final String PROGRESS = "progress";
  public static final String FINDER = "finder";

  public ExecuteFindersGetSearchResults(SNode node) {
    super(node);
  }

  public Expression getQueryNode() {
    return (Expression) this.getChild(Expression.class, ExecuteFindersGetSearchResults.QUERY_NODE);
  }

  public void setQueryNode(Expression node) {
    super.setChild(ExecuteFindersGetSearchResults.QUERY_NODE, node);
  }

  public Expression getScope() {
    return (Expression) this.getChild(Expression.class, ExecuteFindersGetSearchResults.SCOPE);
  }

  public void setScope(Expression node) {
    super.setChild(ExecuteFindersGetSearchResults.SCOPE, node);
  }

  public Expression getProgress() {
    return (Expression) this.getChild(Expression.class, ExecuteFindersGetSearchResults.PROGRESS);
  }

  public void setProgress(Expression node) {
    super.setChild(ExecuteFindersGetSearchResults.PROGRESS, node);
  }

  public int getFindersCount() {
    return this.getChildCount(ExecuteFindersGetSearchResults.FINDER);
  }

  public Iterator<FinderReference> finders() {
    return this.children(FinderReference.class, ExecuteFindersGetSearchResults.FINDER);
  }

  public List<FinderReference> getFinders() {
    return this.getChildren(FinderReference.class, ExecuteFindersGetSearchResults.FINDER);
  }

  public void addFinder(FinderReference node) {
    this.addChild(ExecuteFindersGetSearchResults.FINDER, node);
  }

  public void insertFinder(FinderReference prev, FinderReference node) {
    this.insertChild(prev, ExecuteFindersGetSearchResults.FINDER, node);
  }

  public static ExecuteFindersGetSearchResults newInstance(SModel sm, boolean init) {
    return (ExecuteFindersGetSearchResults) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.findUsages.structure.ExecuteFindersGetSearchResults", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ExecuteFindersGetSearchResults newInstance(SModel sm) {
    return ExecuteFindersGetSearchResults.newInstance(sm, false);
  }
}
