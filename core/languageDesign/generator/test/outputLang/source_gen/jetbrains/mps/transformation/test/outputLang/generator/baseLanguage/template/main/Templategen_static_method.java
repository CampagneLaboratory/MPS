/*
 * Copyright 2003-2010 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.transformation.test.outputLang.generator.baseLanguage.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.TemplateDeclaration;
import java.util.Collection;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.runtime.TemplateExecutionEnvironment;
import jetbrains.mps.generator.runtime.TemplateContext;
import jetbrains.mps.generator.runtime.GenerationException;
import jetbrains.mps.generator.runtime.TemplateUtil;

public class Templategen_static_method implements TemplateDeclaration {
  public Templategen_static_method() {
  }

  public Collection<SNode> apply(@NotNull TemplateExecutionEnvironment environment, @NotNull TemplateContext context, String mappingName) throws GenerationException {
    SNode tnode1 = new SNode(null, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration", false);
    // TODO notify environment 
    tnode1.setProperty("name", "fact");
    {
      SNode tnode2 = new SNode(null, "jetbrains.mps.baseLanguage.structure.PublicVisibility", false);
      // TODO notify environment 
      tnode1.addChild("visibility", tnode2);
    }
    {
      SNode tnode3 = new SNode(null, "jetbrains.mps.baseLanguage.structure.StatementList", false);
      // TODO notify environment 
      {
        SNode tnode4 = new SNode(null, "jetbrains.mps.baseLanguage.structure.IfStatement", false);
        // TODO notify environment 
        {
          SNode tnode5 = new SNode(null, "jetbrains.mps.baseLanguage.structure.StatementList", false);
          // TODO notify environment 
          {
            SNode tnode6 = new SNode(null, "jetbrains.mps.baseLanguage.structure.ReturnStatement", false);
            // TODO notify environment 
            {
              SNode tnode7 = new SNode(null, "jetbrains.mps.baseLanguage.structure.IntegerConstant", false);
              // TODO notify environment 
              tnode7.setProperty("value", "1");
              tnode6.addChild("expression", tnode7);
            }
            tnode5.addChild("statement", tnode6);
          }
          tnode4.addChild("ifTrue", tnode5);
        }
        {
          SNode tnode8 = new SNode(null, "jetbrains.mps.baseLanguage.structure.EqualsExpression", false);
          // TODO notify environment 
          {
            SNode tnode9 = new SNode(null, "jetbrains.mps.baseLanguage.structure.ParameterReference", false);
            // TODO notify environment 
            environment.resolveInTemplateLater(tnode9, "variableDeclaration", "tpl/r:892d6d37-53bc-41be-9eef-f1dee29259f0/3392060900980724048", context);
            tnode8.addChild("leftExpression", tnode9);
          }
          {
            SNode tnode10 = new SNode(null, "jetbrains.mps.baseLanguage.structure.IntegerConstant", false);
            // TODO notify environment 
            tnode10.setProperty("value", "0");
            tnode8.addChild("rightExpression", tnode10);
          }
          tnode4.addChild("condition", tnode8);
        }
        tnode3.addChild("statement", tnode4);
      }
      {
        SNode tnode11 = new SNode(null, "jetbrains.mps.baseLanguage.structure.ReturnStatement", false);
        // TODO notify environment 
        {
          SNode tnode12 = new SNode(null, "jetbrains.mps.baseLanguage.structure.MulExpression", false);
          // TODO notify environment 
          {
            SNode tnode13 = new SNode(null, "jetbrains.mps.baseLanguage.structure.ParameterReference", false);
            // TODO notify environment 
            environment.resolveInTemplateLater(tnode13, "variableDeclaration", "tpl/r:892d6d37-53bc-41be-9eef-f1dee29259f0/3392060900980724048", context);
            tnode12.addChild("leftExpression", tnode13);
          }
          {
            SNode tnode14 = new SNode(null, "jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall", false);
            // TODO notify environment 
            environment.resolveInTemplateLater(tnode14, "baseMethodDeclaration", 4, context);
            {
              SNode tnode15 = new SNode(null, "jetbrains.mps.baseLanguage.structure.MinusExpression", false);
              // TODO notify environment 
              {
                SNode tnode16 = new SNode(null, "jetbrains.mps.baseLanguage.structure.IntegerConstant", false);
                // TODO notify environment 
                tnode16.setProperty("value", "1");
                tnode15.addChild("rightExpression", tnode16);
              }
              {
                SNode tnode17 = new SNode(null, "jetbrains.mps.baseLanguage.structure.ParameterReference", false);
                // TODO notify environment 
                environment.resolveInTemplateLater(tnode17, "variableDeclaration", "tpl/r:892d6d37-53bc-41be-9eef-f1dee29259f0/3392060900980724048", context);
                tnode15.addChild("leftExpression", tnode17);
              }
              tnode14.addChild("actualArgument", tnode15);
            }
            tnode12.addChild("rightExpression", tnode14);
          }
          tnode11.addChild("expression", tnode12);
        }
        tnode3.addChild("statement", tnode11);
      }
      tnode1.addChild("body", tnode3);
    }
    {
      SNode tnode18 = new SNode(null, "jetbrains.mps.baseLanguage.structure.IntegerType", false);
      // TODO notify environment 
      tnode1.addChild("returnType", tnode18);
    }
    {
      SNode tnode19 = new SNode(null, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration", false);
      // TODO notify environment 
      tnode19.setProperty("name", "e");
      {
        SNode tnode20 = new SNode(null, "jetbrains.mps.baseLanguage.structure.IntegerType", false);
        // TODO notify environment 
        tnode19.addChild("type", tnode20);
      }
      tnode1.addChild("parameter", tnode19);
    }
    return TemplateUtil.singletonList(tnode1);
  }
}
