package jetbrains.mps.transformation.test.outputLang.generator.baseLanguage.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.TemplateDeclaration;
import jetbrains.mps.smodel.SNode;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.runtime.TemplateExecutionEnvironment;
import jetbrains.mps.generator.runtime.TemplateContext;
import jetbrains.mps.generator.runtime.GenerationException;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import java.util.Collections;
import jetbrains.mps.generator.runtime.TemplateUtil;

public class TemplateprocessStatement implements TemplateDeclaration {
  private String myName;
  private String myName2;
  private SNode myExpr;
  private int myI;
  private boolean myB;

  public TemplateprocessStatement(String name, String name2, SNode expr, int i, boolean b) {
    this.myName = name;
    this.myName2 = name2;
    this.myExpr = expr;
    this.myI = i;
    this.myB = b;
  }

  public Collection<SNode> apply(@NotNull final TemplateExecutionEnvironment environment, @NotNull final TemplateContext context) throws GenerationException {
    TemplateContext contextWithParameters = context;
    final SNode tnode1 = new SNode(null, "jetbrains.mps.baseLanguage.structure.BlockStatement", false);
    // TODO notify environment 
    {
      final SNode tnode2 = new SNode(null, "jetbrains.mps.baseLanguage.structure.StatementList", false);
      // TODO notify environment 
      {
        final SNode tnode3 = new SNode(null, "jetbrains.mps.baseLanguage.structure.SingleLineComment", false);
        // TODO notify environment 
        {
          final SNode tnode4 = new SNode(null, "jetbrains.mps.baseLanguage.structure.TextCommentPart", false);
          // TODO notify environment 
          tnode4.setProperty("text", (String) QueriesGenerated.propertyMacro_GetPropertyValue_2681305894288695070(null, new PropertyMacroContext(contextWithParameters.getInput(), null, null, contextWithParameters, null)));
          tnode3.addChild("commentPart", tnode4);
        }
        {
          final SNode tnode5 = new SNode(null, "jetbrains.mps.baseLanguage.structure.TextCommentPart", false);
          // TODO notify environment 
          tnode5.setProperty("text", (String) QueriesGenerated.propertyMacro_GetPropertyValue_2163819695913280744(null, new PropertyMacroContext(contextWithParameters.getInput(), null, null, contextWithParameters, null)));
          tnode3.addChild("commentPart", tnode5);
        }
        tnode2.addChild("statement", tnode3);
      }
      {
        final SNode tnode6 = new SNode(null, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", false);
        // TODO notify environment 
        {
          final SNode tnode7 = new SNode(null, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", false);
          // TODO notify environment 
          tnode7.setProperty("name", (String) QueriesGenerated.propertyMacro_GetPropertyValue_2681305894288695040(null, new PropertyMacroContext(contextWithParameters.getInput(), null, null, contextWithParameters, null)));
          {
            final SNode tnode8 = new SNode(null, "jetbrains.mps.baseLanguage.structure.IntegerType", false);
            // TODO notify environment 
            tnode7.addChild("type", tnode8);
          }
          {
            final SNode copySrcInput9 = QueriesGenerated.sourceNodeQuery_2681305894288695056(environment.getOperationContext(), new SourceSubstituteMacroNodeContext(contextWithParameters.getInput(), null, contextWithParameters, environment.getGenerator()));
            Collection<SNode> tlist9 = environment.copyNodes(Collections.singletonList(copySrcInput9), null);
            for (SNode child10 : tlist9) {
              tnode7.addChild("initializer", child10);
            }
          }
          tnode6.addChild("localVariableDeclaration", tnode7);
        }
        tnode2.addChild("statement", tnode6);
      }
      tnode1.addChild("statements", tnode2);
    }
    final SNode tnode11 = new SNode(null, "jetbrains.mps.baseLanguage.structure.BlockStatement", false);
    // TODO notify environment 
    {
      final SNode tnode12 = new SNode(null, "jetbrains.mps.baseLanguage.structure.StatementList", false);
      // TODO notify environment 
      {
        final SNode tnode13 = new SNode(null, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", false);
        // TODO notify environment 
        {
          final SNode tnode14 = new SNode(null, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", false);
          // TODO notify environment 
          tnode14.setProperty("name", "e");
          {
            final SNode tnode15 = new SNode(null, "jetbrains.mps.baseLanguage.structure.IntegerType", false);
            // TODO notify environment 
            tnode14.addChild("type", tnode15);
          }
          tnode13.addChild("localVariableDeclaration", tnode14);
        }
        tnode12.addChild("statement", tnode13);
      }
      {
        final SNode tnode16 = new SNode(null, "jetbrains.mps.baseLanguage.structure.ExpressionStatement", false);
        // TODO notify environment 
        {
          final SNode tnode17 = new SNode(null, "jetbrains.mps.baseLanguage.structure.AssignmentExpression", false);
          // TODO notify environment 
          {
            final SNode tnode18 = new SNode(null, "jetbrains.mps.baseLanguage.structure.LocalVariableReference", false);
            // TODO notify environment 
            environment.resolveInTemplateLater(tnode18, "variableDeclaration", "tpl/r:00000000-0000-4000-0000-011c89590606/3392060900980649133", contextWithParameters);
            tnode17.addChild("lValue", tnode18);
          }
          {
            final SNode tnode19 = new SNode(null, "jetbrains.mps.baseLanguage.structure.IntegerConstant", false);
            // TODO notify environment 
            tnode19.setProperty("value", "5");
            tnode17.addChild("rValue", tnode19);
          }
          tnode16.addChild("expression", tnode17);
        }
        tnode12.addChild("statement", tnode16);
      }
      tnode11.addChild("statements", tnode12);
    }
    return TemplateUtil.asList(tnode1, tnode11);
  }
}
