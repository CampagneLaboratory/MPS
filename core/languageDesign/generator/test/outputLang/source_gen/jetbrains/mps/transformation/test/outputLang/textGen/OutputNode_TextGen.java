/*
 * Copyright 2003-2009 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.transformation.test.outputLang.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.textGen.TextGenManager;

public class OutputNode_TextGen extends SNodeTextGen {

  public void doGenerateText(SNode node) {
    if (SPropertyOperations.getString(node, "text") != null) {
      this.append(SPropertyOperations.getString(node, "text"));
    } else
    {
      this.append("!no text!");
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "outputChild", true)).isNotEmpty()) {
      this.append(" children:{");
      if (ListSequence.fromList(SLinkOperations.getTargets(node, "outputChild", true)).isNotEmpty()) {
        for(SNode item : SLinkOperations.getTargets(node, "outputChild", true)) {
          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
        }
      }
      this.append("}");
    }
  }

}
