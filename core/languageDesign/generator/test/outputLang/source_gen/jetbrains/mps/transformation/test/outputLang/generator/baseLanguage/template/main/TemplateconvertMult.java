package jetbrains.mps.transformation.test.outputLang.generator.baseLanguage.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.TemplateDeclaration;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.runtime.TemplateExecutionEnvironment;
import jetbrains.mps.generator.runtime.TemplateContext;
import jetbrains.mps.generator.runtime.GenerationException;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import java.util.Collections;
import jetbrains.mps.generator.runtime.TemplateUtil;

public class TemplateconvertMult implements TemplateDeclaration {
  private static SNodePointer copySrcMacro_eum2xg_a0a0a1a2a3a0 = new SNodePointer("r:00000000-0000-4000-0000-011c89590606(jetbrains.mps.transformation.test.outputLang.generator.baseLanguage.template.main@generator)", "4146564171992617088");
  private static SNodePointer copySrcMacro_eum2xg_a0a0a1a3a3a0 = new SNodePointer("r:00000000-0000-4000-0000-011c89590606(jetbrains.mps.transformation.test.outputLang.generator.baseLanguage.template.main@generator)", "4146564171992617084");

  private SNode myLeft;
  private SNode myRight;

  public TemplateconvertMult(SNode left, SNode right) {
    this.myLeft = left;
    this.myRight = right;
  }

  public Collection<SNode> apply(@NotNull final TemplateExecutionEnvironment environment, @NotNull final TemplateContext context) throws GenerationException {
    TemplateContext contextWithParameters = context;
    final SNode tnode1 = new SNode(null, "jetbrains.mps.baseLanguage.structure.ExpressionStatement", false);
    // TODO notify environment 
    {
      final SNode tnode2 = new SNode(null, "jetbrains.mps.baseLanguage.structure.MulAssignmentExpression", false);
      // TODO notify environment 
      {
        Collection<SNode> tlist3 = null;
        try {
          environment.getTracer().pushMacro(copySrcMacro_eum2xg_a0a0a1a2a3a0);
          final SNode copySrcInput3 = QueriesGenerated.sourceNodeQuery_4146564171992617089(environment.getOperationContext(), new SourceSubstituteMacroNodeContext(contextWithParameters.getInput(), null, contextWithParameters, environment.getGenerator()));
          tlist3 = environment.copyNodes(Collections.singletonList(copySrcInput3), null);
        } finally {
          environment.getTracer().closeMacro(copySrcMacro_eum2xg_a0a0a1a2a3a0);
        }
        for (SNode child4 : tlist3) {
          tnode2.addChild("lValue", child4);
        }
      }
      {
        Collection<SNode> tlist5 = null;
        try {
          environment.getTracer().pushMacro(copySrcMacro_eum2xg_a0a0a1a3a3a0);
          final SNode copySrcInput5 = QueriesGenerated.sourceNodeQuery_4146564171992617085(environment.getOperationContext(), new SourceSubstituteMacroNodeContext(contextWithParameters.getInput(), null, contextWithParameters, environment.getGenerator()));
          tlist5 = environment.copyNodes(Collections.singletonList(copySrcInput5), null);
        } finally {
          environment.getTracer().closeMacro(copySrcMacro_eum2xg_a0a0a1a3a3a0);
        }
        for (SNode child6 : tlist5) {
          tnode2.addChild("rValue", child6);
        }
      }
      tnode1.addChild("expression", tnode2);
    }
    return TemplateUtil.singletonList(tnode1);
  }
}
