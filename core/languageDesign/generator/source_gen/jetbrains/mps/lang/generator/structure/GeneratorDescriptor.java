package jetbrains.mps.lang.generator.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class GeneratorDescriptor extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.generator.structure.GeneratorDescriptor";
  public static final String REQUIRES = "requires";

  public GeneratorDescriptor(SNode node) {
    super(node);
  }

  public int getRequiresesCount() {
    return this.getChildCount(GeneratorDescriptor.REQUIRES);
  }

  public Iterator<GeneratorParameterReference> requireses() {
    return this.children(GeneratorParameterReference.class, GeneratorDescriptor.REQUIRES);
  }

  public List<GeneratorParameterReference> getRequireses() {
    return this.getChildren(GeneratorParameterReference.class, GeneratorDescriptor.REQUIRES);
  }

  public void addRequires(GeneratorParameterReference node) {
    this.addChild(GeneratorDescriptor.REQUIRES, node);
  }

  public void insertRequires(GeneratorParameterReference prev, GeneratorParameterReference node) {
    this.insertChild(prev, GeneratorDescriptor.REQUIRES, node);
  }

  public static GeneratorDescriptor newInstance(SModel sm, boolean init) {
    return (GeneratorDescriptor) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.generator.structure.GeneratorDescriptor", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static GeneratorDescriptor newInstance(SModel sm) {
    return GeneratorDescriptor.newInstance(sm, false);
  }
}
