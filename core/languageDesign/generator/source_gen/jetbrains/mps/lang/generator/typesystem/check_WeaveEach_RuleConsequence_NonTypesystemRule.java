package jetbrains.mps.lang.generator.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_WeaveEach_RuleConsequence_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_WeaveEach_RuleConsequence_NonTypesystemRule() {
  }

  public void applyRule(final SNode weaveEach, final TypeCheckingContext typeCheckingContext) {
    final SNode templateApplicableConcept = SLinkOperations.getTarget(SLinkOperations.getTarget(weaveEach, "template", false), "applicableConcept", false);
    if (templateApplicableConcept == null) {
      return;
    }
    SNode query = SLinkOperations.getTarget(weaveEach, "sourceNodesQuery", true);
    SNode NT = QueriesUtil.getOutputNodeType_fromSourceQuery(query);
    SNode nodeConcept = SLinkOperations.getTarget(SNodeOperations.cast(NT, "jetbrains.mps.lang.smodel.structure.SNodeType"), "concept", false);
    if (!(SModelUtil.isAssignableConcept(nodeConcept, templateApplicableConcept))) {
      {
        BaseIntentionProvider intentionProvider = null;
        IErrorTarget errorTarget = new NodeErrorTarget();
        typeCheckingContext.reportTypeError(weaveEach, "template is not applicable to " + NT, "r:00000000-0000-4000-0000-011c895902e4(jetbrains.mps.lang.generator.typesystem)", "1226664097354", intentionProvider, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.generator.structure.WeaveEach_RuleConsequence";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
