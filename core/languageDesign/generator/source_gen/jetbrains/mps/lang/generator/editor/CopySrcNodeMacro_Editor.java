package jetbrains.mps.lang.generator.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellMenu.CompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.BasicCellContext;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPart;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.FocusPolicy;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_ReplaceNode_CustomNodeConcept;

public class CopySrcNodeMacro_Editor extends DefaultNodeEditor {

  /* package */AbstractCellProvider myCopyScrNodeMacro_inspector2079_0;
  /* package */AbstractCellProvider myNodeMacro_postfix2079_0;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection_2079_0(context, node);
  }

  public EditorCell createInspectedCell(EditorContext context, SNode node) {
    return this.createComponent_2079_0(context, node);
  }

  public EditorCell createCollection_2079_0(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_2079_0(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant_2079_0(context, node, "$COPY_SRC$"));
    editorCell.addEditorCell(this.createComponent_2079_1(context, node));
    return editorCell;
  }

  public EditorCell createComponent_2079_0(EditorContext context, SNode node) {
    if (this.myCopyScrNodeMacro_inspector2079_0 == null) {
      this.myCopyScrNodeMacro_inspector2079_0 = new CopyScrNodeMacro_inspector(node);
    }
    EditorCell editorCell = this.myCopyScrNodeMacro_inspector2079_0.createEditorCell(context);
    setupBasic_Component_2079_0(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createComponent_2079_1(EditorContext context, SNode node) {
    if (this.myNodeMacro_postfix2079_0 == null) {
      this.myNodeMacro_postfix2079_0 = new NodeMacro_postfix(node);
    }
    EditorCell editorCell = this.myNodeMacro_postfix2079_0.createEditorCell(context);
    setupBasic_Component_2079_1(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createConstant_2079_0(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_2079_0(editorCell, node, context);
    setupLabel_Constant_2079_0(editorCell, node, context);
    editorCell.setDefaultText("");
    editorCell.setSubstituteInfo(new CompositeSubstituteInfo(context, new BasicCellContext(node), new SubstituteInfoPart[]{new CopySrcNodeMacro_Editor.CopySrcNodeMacro_Editor_replaceWith_NodeMacro_cellMenu0()}));
    return editorCell;
  }


  private static void setupBasic_Collection_2079_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_2079_0");
  }

  private static void setupBasic_Component_2079_0(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Component_2079_1(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_2079_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_2079_0");
    Styles_StyleSheet.getMacroStart(editorCell).apply(editorCell);
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.PUNCTUATION_RIGTH, true);
        }
      };
      inlineStyle.apply(editorCell);
    }
    if (true) {
      editorCell.setFocusPolicy(FocusPolicy.ATTRACTS_FOCUS);
    }
    MacroSymbol_Actions.setCellActions(editorCell, node, context);
  }

  private static void setupLabel_Constant_2079_0(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static class CopySrcNodeMacro_Editor_replaceWith_NodeMacro_cellMenu0 extends AbstractCellMenuPart_ReplaceNode_CustomNodeConcept {

    public CopySrcNodeMacro_Editor_replaceWith_NodeMacro_cellMenu0() {
    }

    public String getReplacementConceptName() {
      return "jetbrains.mps.lang.generator.structure.NodeMacro";
    }

}

}
