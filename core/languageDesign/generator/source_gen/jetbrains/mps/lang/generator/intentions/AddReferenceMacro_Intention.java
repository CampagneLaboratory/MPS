package jetbrains.mps.lang.generator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.lang.generator.editor.QueriesUtil;
import jetbrains.mps.nodeEditor.InspectorTool;

public class AddReferenceMacro_Intention extends BaseIntention {
  public AddReferenceMacro_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Add Reference Macro";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    if (!(SNodeOperations.getModel(node).getModelDescriptor().getModule() instanceof Generator)) {
      return false;
    }
    return QueriesUtil.isReferenceMacroApplicable(node, editorContext.getSelectedCell());
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode referenceMacro = QueriesUtil.addReferenceMacro(node, editorContext.getSelectedCell());
    // set caret
    editorContext.selectAndSetCaret(referenceMacro, 2);
    InspectorTool inspector = editorContext.getOperationContext().getComponent(InspectorTool.class);
    assert inspector != null;
    inspector.openTool(true);
  }

  public String getLocationString() {
    return "jetbrains.mps.lang.generator.intentions";
  }
}
