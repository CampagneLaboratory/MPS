package jetbrains.mps.lang.generator.generator.baseLanguage.template.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class GenUtil {
  private static final String KEY = "VarName";

  public GenUtil() {
  }

  public static String getVar(TemplateQueryContext context, SNode node, int skipMacro) {
    List<SNode> macros = ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.generator.structure.NodeMacro");
      }
    }).toListSequence();
    SNode real = (ListSequence.fromList(macros).count() <= skipMacro ?
      node :
      ListSequence.fromList(macros).getElement(skipMacro)
    );
    return (String) context.getTransientObject(MultiTuple.<String,SNode>from(KEY, real));
  }

  public static String saveVar(TemplateQueryContext context, SNode node, String var) {
    SNode original = (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.NodeMacro") ?
      SNodeOperations.getParent(node) :
      node
    );
    if (context.getTransientObject(original) == null) {
      context.putTransientObject(original, var);
    }
    context.putTransientObject(MultiTuple.<String,SNode>from(KEY, node), var);
    return var;
  }

  public static boolean isGeneratable(SModel model) {
    if (ListSequence.fromList(SModelOperations.getRoots(model, "jetbrains.mps.lang.generator.structure.MappingConfiguration")).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(it, "weavingMappingRule", true);
      }
    }).isNotEmpty()) {
      return false;
    }
    return SModelOperations.getModelName(model).startsWith("jetbrains.mps.transformation.test");
  }
}
