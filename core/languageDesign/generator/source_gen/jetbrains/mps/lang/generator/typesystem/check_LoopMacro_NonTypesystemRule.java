package jetbrains.mps.lang.generator.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.nodeEditor.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_LoopMacro_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_LoopMacro_NonTypesystemRule() {
  }

  public void applyRule(final SNode loopMacro, final TypeCheckingContext typeCheckingContext) {
    SNode attributedNode = SNodeOperations.getParent(loopMacro);
    if ((attributedNode != null)) {
      SNode linkdecl = SNodeOperations.getContainingLinkDeclaration(attributedNode);
      if ((linkdecl != null) && SPropertyOperations.hasValue(linkdecl, "metaClass", "aggregation", "reference")) {
        if (SPropertyOperations.hasValue(linkdecl, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(linkdecl, "sourceCardinality", "1", "0..1")) {
          {
            BaseIntentionProvider intentionProvider = null;
            IErrorTarget errorTarget = new NodeErrorTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(loopMacro, "Target role for $LOOP$ macro can contain max 1 element (role: " + SPropertyOperations.getString(linkdecl, "role") + ")", "r:00000000-0000-4000-0000-011c895902e4(jetbrains.mps.lang.generator.typesystem)", "1098116234534104047", intentionProvider, errorTarget);
          }
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.generator.structure.LoopMacro";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
