package jetbrains.mps.lang.generator.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.AttributesRolesUtil;
import jetbrains.mps.lang.structure.structure.PropertyDeclaration;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.structure.behavior.DataTypeDeclaration_Behavior;

public class PropertyMacro_GetPropertyValue_Behavior {

  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getExpectedReturnType_1213877374441(SNode thisNode) {
    SNode propertyMacro = SNodeOperations.getAncestor(thisNode, "jetbrains.mps.lang.generator.structure.PropertyMacro", false, false);
    SNode attributedNode = SNodeOperations.getParent(propertyMacro);
    String propertyName = AttributesRolesUtil.getPropertyNameFromPropertyAttributeRole(propertyMacro.getRole_());
    PropertyDeclaration property_ = SModelSearchUtil.findPropertyDeclaration(((AbstractConceptDeclaration)SNodeOperations.getAdapter(SNodeOperations.getConceptDeclaration(attributedNode))), propertyName);
    if (property_ != null) {
      SNode property = SNodeOperations.cast(property_.getNode(), "jetbrains.mps.lang.structure.structure.PropertyDeclaration");
      SNode dataType = SLinkOperations.getTarget(property, "dataType", false);
      if (dataType != null) {
        return DataTypeDeclaration_Behavior.call_toBaseLanguageType_1213877229718(dataType);
      }
    }
    return new _Quotations.QuotationClass_2().createNode();
  }

}
