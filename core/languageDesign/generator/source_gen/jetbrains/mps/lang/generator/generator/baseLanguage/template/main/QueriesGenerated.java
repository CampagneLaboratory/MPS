package jetbrains.mps.lang.generator.generator.baseLanguage.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.generator.generator.baseLanguage.template.TemplateFunctionMethodName;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.lang.smodel.behavior.SNodeOperation_Behavior;
import jetbrains.mps.generator.template.WeavingMappingRuleContext;
import jetbrains.mps.generator.template.MappingScriptContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.helgins.inference.TypeChecker;

public class QueriesGenerated {

  public static boolean baseMappingRule_Condition_1203536793839(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "operation", true), "jetbrains.mps.lang.generator.structure.Node_FindOutputNode");
  }

  public static Object propertyMacro_GetPropertyValue_1167762379110(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return TemplateFunctionMethodName.createRootRule_Condition(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1167764877550(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return TemplateFunctionMethodName.propertyMacro_GetPropertyValue(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1167765482559(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return TemplateFunctionMethodName.baseMappingRule_Condition(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1167770891051(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return TemplateFunctionMethodName.referenceMacro_GetReferent(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1167946761277(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return TemplateFunctionMethodName.ifMacro_Condition(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1167952935373(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return TemplateFunctionMethodName.sourceSubstituteMacro_SourceNodesQuery(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1168025033018(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return TemplateFunctionMethodName.sourceSubstituteMacro_SourceNodeQuery(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1170727064429(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return TemplateFunctionMethodName.mapSrcMacro_MapperFunction(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1184374857703(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return TemplateFunctionMethodName.templateFragment_ContextNodeQuery(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1184617630764(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return TemplateFunctionMethodName.weaving_MappingRule_ContextNodeQuery(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1195504684817(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return TemplateFunctionMethodName.mappingScript_CodeBlock(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1200915831659(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "label", false), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1200924580714(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "label", false), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1219959436950(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return TemplateFunctionMethodName.dropRootRule_Condition(_context.getNode());
  }

  public static Object referenceMacro_GetReferent_1217272831785(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    // method parameter
    return "_context";
  }

  public static SNode sourceNodeQuery_1168025330833(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1168025905128(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1168025917226(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1168025925887(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1168025932423(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1168025938897(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1168025947268(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1170727064418(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1184374857693(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1184617630754(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1195504684807(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1200915802103(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "templateGenerator", true);
  }

  public static SNode sourceNodeQuery_1200915812769(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SNodeOperation_Behavior.call_getLeftExpression_1213877508894(_context.getNode());
  }

  public static SNode sourceNodeQuery_1200924590431(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "templateGenerator", true);
  }

  public static SNode sourceNodeQuery_1203537118966(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "operation", true);
  }

  public static SNode sourceNodeQuery_1219959436940(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619599466(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByMappingLabel("queriesGenerated");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619796790(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByMappingLabel("queriesGenerated");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619844945(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByMappingLabel("queriesGenerated");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619847603(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByMappingLabel("queriesGenerated");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619852561(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByMappingLabel("queriesGenerated");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619865210(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByMappingLabel("queriesGenerated");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619868267(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByMappingLabel("queriesGenerated");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619877062(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByMappingLabel("queriesGenerated");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619879860(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByMappingLabel("queriesGenerated");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619882833(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByMappingLabel("queriesGenerated");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1195503404236(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByMappingLabel("queriesGenerated");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1219959119598(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByMappingLabel("queriesGenerated");
  }

  public static void mappingScript_CodeBlock_1199965771120(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> nodes = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_sourceNode");
    for(SNode node : nodes) {
      SNode replacement = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.internal.structure.TypeHintExpression", null);
      SLinkOperations.setTarget(replacement, "typeHint", SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(node)), true);
      SNodeOperations.replaceWithAnother(node, replacement);
      SLinkOperations.setTarget(replacement, "expression", node, true);
    }
  }

  public static void mappingScript_CodeBlock_1217270660171(final IOperationContext operationContext, final MappingScriptContext _context) {
    // references on mapping label will be lost because
    // TLBase generator executes first and doesn't copy
    // mapping configs (where labels are declared) to output model
    // 
    {
      // references in 'get by label'
      List<SNode> ops = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.transformation.generationContext.structure.GenerationContextOp_GetOutputByLabel");
      for(SNode op : ops) {
        SNode label = SLinkOperations.getTarget(op, "label", false);
        if (label == null) {
          _context.showErrorMessage(op, "reference on mapping label is broken");
          continue;
        }
        SPropertyOperations.set(op, "labelName_intern", SPropertyOperations.getString(label, "name"));
        SLinkOperations.setTarget(op, "label", null, false);
      }
    }
    {
      // references in 'get by label and node'
      List<SNode> ops = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.transformation.generationContext.structure.GenerationContextOp_GetOutputByLabelAndInput");
      for(SNode op : ops) {
        SNode label = SLinkOperations.getTarget(op, "label", false);
        if (label == null) {
          _context.showErrorMessage(op, "reference on mapping label is broken");
          continue;
        }
        SPropertyOperations.set(op, "labelName_intern", SPropertyOperations.getString(label, "name"));
        SLinkOperations.setTarget(op, "label", null, false);
      }
    }
    {
      // references in 'get by label and node and ref.scope'
      List<SNode> ops = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.transformation.generationContext.structure.GenerationContextOp_GetOutputByLabelAndInputAndReferenceScope");
      for(SNode op : ops) {
        SNode label = SLinkOperations.getTarget(op, "label", false);
        if (label == null) {
          _context.showErrorMessage(op, "reference on mapping label is broken");
          continue;
        }
        SPropertyOperations.set(op, "labelName_intern", SPropertyOperations.getString(label, "name"));
        SLinkOperations.setTarget(op, "label", null, false);
      }
    }
    {
      // references in 'get all by label and node'
      List<SNode> ops = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.transformation.generationContext.structure.GenerationContextOp_GetOutputListByLabelAndInput");
      for(SNode op : ops) {
        SNode label = SLinkOperations.getTarget(op, "label", false);
        if (label == null) {
          _context.showErrorMessage(op, "reference on mapping label is broken");
          continue;
        }
        SPropertyOperations.set(op, "labelName_intern", SPropertyOperations.getString(label, "name"));
        SLinkOperations.setTarget(op, "label", null, false);
      }
    }
    {
      // references in 'get prev input by label'
      List<SNode> ops = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.transformation.generationContext.structure.GenerationContextOp_GetPrevInputByLabel");
      for(SNode op : ops) {
        SNode label = SLinkOperations.getTarget(op, "label", false);
        if (label == null) {
          _context.showErrorMessage(op, "reference on mapping label is broken");
          continue;
        }
        SPropertyOperations.set(op, "labelName_intern", SPropertyOperations.getString(label, "name"));
        SLinkOperations.setTarget(op, "label", null, false);
      }
    }
  }

}
