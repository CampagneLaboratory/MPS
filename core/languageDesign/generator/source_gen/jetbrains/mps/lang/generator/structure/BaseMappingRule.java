package jetbrains.mps.lang.generator.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BaseMappingRule extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.lang.generator.structure.BaseMappingRule";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String APPLY_TO_CONCEPT_INHERITORS = "applyToConceptInheritors";
  public static final String APPLICABLE_CONCEPT = "applicableConcept";
  public static final String LABEL_DECLARATION = "labelDeclaration";
  public static final String CONDITION_FUNCTION = "conditionFunction";

  public BaseMappingRule(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(BaseMappingRule.NAME);
  }

  public void setName(String value) {
    this.setProperty(BaseMappingRule.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(BaseMappingRule.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BaseMappingRule.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BaseMappingRule.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BaseMappingRule.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BaseMappingRule.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BaseMappingRule.VIRTUAL_PACKAGE, value);
  }

  public boolean getApplyToConceptInheritors() {
    return this.getBooleanProperty(BaseMappingRule.APPLY_TO_CONCEPT_INHERITORS);
  }

  public void setApplyToConceptInheritors(boolean value) {
    this.setBooleanProperty(BaseMappingRule.APPLY_TO_CONCEPT_INHERITORS, value);
  }

  public AbstractConceptDeclaration getApplicableConcept() {
    return (AbstractConceptDeclaration)this.getReferent(BaseMappingRule.APPLICABLE_CONCEPT);
  }

  public void setApplicableConcept(AbstractConceptDeclaration node) {
    super.setReferent(BaseMappingRule.APPLICABLE_CONCEPT, node);
  }

  public MappingLabelDeclaration getLabelDeclaration() {
    return (MappingLabelDeclaration)this.getReferent(BaseMappingRule.LABEL_DECLARATION);
  }

  public void setLabelDeclaration(MappingLabelDeclaration node) {
    super.setReferent(BaseMappingRule.LABEL_DECLARATION, node);
  }

  public BaseMappingRule_Condition getConditionFunction() {
    return (BaseMappingRule_Condition)this.getChild(BaseMappingRule.CONDITION_FUNCTION);
  }

  public void setConditionFunction(BaseMappingRule_Condition node) {
    super.setChild(BaseMappingRule.CONDITION_FUNCTION, node);
  }


  public static BaseMappingRule newInstance(SModel sm, boolean init) {
    return (BaseMappingRule)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.generator.structure.BaseMappingRule", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BaseMappingRule newInstance(SModel sm) {
    return BaseMappingRule.newInstance(sm, false);
  }

}
