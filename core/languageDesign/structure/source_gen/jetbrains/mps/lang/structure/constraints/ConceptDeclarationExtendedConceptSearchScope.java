package jetbrains.mps.lang.structure.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.search.AbstractSearchScope;
import jetbrains.mps.lang.structure.structure.ConceptDeclaration;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.BaseAdapter;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.util.Condition;
import jetbrains.mps.util.CollectionUtil;
import java.util.ArrayList;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import jetbrains.mps.smodel.INodeAdapter;
import jetbrains.mps.kernel.model.SModelUtil;

/*package*/ class ConceptDeclarationExtendedConceptSearchScope extends AbstractSearchScope {
  private ConceptDeclaration myConceptDeclaration;
  private List<SNode> myOwnNodes;
  private IScope myScope;

  public ConceptDeclarationExtendedConceptSearchScope(@Nullable SNode conceptDeclaration, IScope scope) {
    myScope = scope;
    myConceptDeclaration = (ConceptDeclaration) BaseAdapter.fromNode(conceptDeclaration);
  }

  @NotNull
  public List<SNode> getNodes(Condition<SNode> condition) {
    if (myOwnNodes == null) {
      myOwnNodes = createOwnNodesList();
    }
    return CollectionUtil.filter(myOwnNodes, condition);
  }

  private List<SNode> createOwnNodesList() {
    if (myConceptDeclaration == null) {
      return new ArrayList<SNode>();
    }
    ISearchScope allNodesScope = SModelSearchUtil.createModelAndImportedModelsScope(myConceptDeclaration.getModel(), myScope);
    return BaseAdapter.toNodes(allNodesScope.getAdapters(new Condition<INodeAdapter>() {
      public boolean met(INodeAdapter object) {
        if (object.equals(myConceptDeclaration)) {
          return false;
        }
        if (!((object instanceof ConceptDeclaration))) {
          return false;
        }
        ConceptDeclaration concept = (ConceptDeclaration) object;
        return !(SModelUtil.isAssignableConcept(BaseAdapter.fromAdapter(concept), BaseAdapter.fromAdapter(myConceptDeclaration)));
      }
    }));
  }
}
