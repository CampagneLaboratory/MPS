package jetbrains.mps.lang.structure.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.tabbedEditor.BaseMultiTab;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.LanguageAspect;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class Editor_Tab extends BaseMultiTab {
  public Editor_Tab(SNode baseNode) {
    super(baseNode);
    ConceptEditorHelper.addMultitabbedListener(Editor_Tab.this, LanguageAspect.EDITOR, false);
  }

  public String getTitle() {
    return "Editor";
  }

  public Character getShortcutChar() {
    return 'E';
  }

  public String getNullText() {
    return "No Editor";
  }

  public boolean canCreate() {
    return false;
  }

  public List<SNode> getNodes(SNode node) {
    List<SNode> nodes = new ArrayList<SNode>();
    IScope scope = ConceptEditorHelper.getScope(Editor_Tab.this);
    ListSequence.fromList(nodes).addSequence(ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_findConceptAspectCollection_1567570417158062208(node, scope, LanguageAspect.EDITOR)));
    return ConceptEditorHelper.sortRootsByConcept(nodes, new SNode[]{SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration"), SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorComponentDeclaration"), SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.CellKeyMapDeclaration"), SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.CellActionMapDeclaration"), SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.CellMenuComponent"), SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.StyleSheet")});
  }

  public String getTabTextForNode(SNode node) {
    if (node.getName() != null) {
      return node.getName();
    } else {
      return node.toString();
    }
  }

  public List<SNode> getAvailableConcepts(final SNode node) {
    return ConceptEditorHelper.getAvailableConceptAspects(LanguageAspect.EDITOR, node);
  }

  public SNode createNode(final SNode node, final boolean ask, final SNode concept) {
    return ConceptEditorHelper.createNewConceptAspectInstance(LanguageAspect.EDITOR, node, concept, Editor_Tab.this);
  }
}
