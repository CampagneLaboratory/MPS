package jetbrains.mps.lang.structure.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseLoggableRefactoring;
import jetbrains.mps.lang.core.refactorings.MoveNodes;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.refactoring.framework.paramchooser.mps.MPSChooserFactory;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelReference;
import java.util.Map;
import jetbrains.mps.smodel.LanguageAspect;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.ArrayList;
import com.intellij.openapi.project.Project;
import jetbrains.mps.project.IModule;
import jetbrains.mps.refactoring.framework.RefactoringUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.view.FindUtils;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.internal.collections.runtime.ITranslator2;

public class MoveConcepts extends BaseLoggableRefactoring {
  public MoveConcepts() {
    this.addTransientParameter("targetModel");
    this.addTransientParameter("sourceModel");
    this.addTransientParameter("sourceLanguage");
  }

  public String getUserFriendlyName() {
    return "Move Concepts";
  }

  public String getKeyStroke() {
    return getKeyStroke_static();
  }

  public Class getOverridenRefactoringClass() {
    return MoveNodes.class;
  }

  public IRefactoringTarget getRefactoringTarget() {
    return new MoveConcepts_Target();
  }

  public boolean init(final RefactoringContext refactoringContext) {
    final Wrappers._boolean canRefactor = new Wrappers._boolean(false);
    final Wrappers._boolean hasGenerator = new Wrappers._boolean(false);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        final SModel model = SNodeOperations.getModel(ListSequence.fromList(refactoringContext.getSelectedNodes()).first());
        refactoringContext.setParameter("sourceModel", model.getModelDescriptor());
        refactoringContext.setParameter("sourceLanguage", Language.getLanguageFor(((SModelDescriptor) refactoringContext.getParameter("sourceModel"))));
        canRefactor.value = ListSequence.fromList(refactoringContext.getSelectedNodes()).all(new IWhereFilter<SNode>() {
          public boolean accept(SNode node) {
            return SNodeOperations.getModel(node) == model;
          }
        });
        hasGenerator.value = ListSequence.fromList(refactoringContext.getSelectedNodes()).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode node) {
            return ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_findGeneratorFragments_6409339300305625383(node)).isNotEmpty();
          }
        });
      }
    });
    if (!(canRefactor.value)) {
      return false;
    }
    if (hasGenerator.value) {
      Messages.showWarningDialog("Generator fragments will not be moved.", "Move concepts");
    }
    return MoveConcepts.this.ask(refactoringContext, MPSChooserFactory.createModelChooser(refactoringContext, "targetModel", new MoveConcepts_targetModel_Settings(refactoringContext)));
  }

  public void refactor(final RefactoringContext refactoringContext) {
    Language targetLanguage = Language.getLanguageFor(SModelRepository.getInstance().getModelDescriptor(((SModelReference) refactoringContext.getParameter("targetModel"))));

    // collect aspects: 
    Map<LanguageAspect, List<SNode>> aspectNodes = ConceptMoveUtil.getAspectNodes(((Language) refactoringContext.getParameter("sourceLanguage")), refactoringContext.getSelectedNodes());

    // refactoring itself 
    for (SNode node : refactoringContext.getSelectedNodes()) {
      refactoringContext.changeFeatureName(node, ((SModelReference) refactoringContext.getParameter("targetModel")).getSModelFqName().toString() + "." + SPropertyOperations.getString(node, "name"), SPropertyOperations.getString(node, "name"));
    }
    refactoringContext.moveNodesToModel(refactoringContext.getSelectedNodes(), SModelRepository.getInstance().getModelDescriptor(((SModelReference) refactoringContext.getParameter("targetModel"))).getSModel());
    // move aspects 
    for (LanguageAspect aspect : SetSequence.fromSet(MapSequence.fromMap(aspectNodes).keySet())) {
      SModel fromModel = aspect.get(((Language) refactoringContext.getParameter("sourceLanguage"))).getSModel();
      SModel toModel = aspect.get(targetLanguage, false).getSModel();
      refactoringContext.updateByDefault(fromModel);
      refactoringContext.moveNodesToModel(MapSequence.fromMap(aspectNodes).get(aspect), toModel);
      refactoringContext.updateByDefault(toModel);
    }
  }

  public List<SModel> getModelsToGenerate(final RefactoringContext refactoringContext) {
    List<SModel> result = ListSequence.fromList(new ArrayList<SModel>());

    Project project = refactoringContext.getSelectedProject();
    if (((Language) refactoringContext.getParameter("sourceLanguage")) != null) {
      Map<IModule, List<SModel>> models = RefactoringUtil.getLanguageAndItsExtendingLanguageModels(project, ((Language) refactoringContext.getParameter("sourceLanguage")));
      for (List<SModel> list : Sequence.fromIterable(models.values())) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList((List<SModel>) list));
      }
    }
    Language targetLanguage = Language.getLanguageFor(SModelRepository.getInstance().getModelDescriptor(((SModelReference) refactoringContext.getParameter("targetModel"))));
    if (targetLanguage != null) {
      Map<IModule, List<SModel>> models = RefactoringUtil.getLanguageAndItsExtendingLanguageModels(project, targetLanguage);
      for (List<SModel> list : Sequence.fromIterable(models.values())) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList((List<SModel>) list));
      }
    }

    return result;
  }

  public SearchResults getAffectedNodes(final RefactoringContext refactoringContext) {
    SearchResults searchResults = new SearchResults();
    for (SNode selNode : ListSequence.fromList(refactoringContext.getSelectedNodes())) {
      searchResults.addAll(FindUtils.getSearchResults(new EmptyProgressIndicator(), selNode, GlobalScope.getInstance(), "jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder", "jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder"));
    }
    Map<LanguageAspect, List<SNode>> aspectNodes = ConceptMoveUtil.getAspectNodes(((Language) refactoringContext.getParameter("sourceLanguage")), refactoringContext.getSelectedNodes());
    for (SNode node : Sequence.fromIterable(MapSequence.fromMap(aspectNodes).values()).translate(new ITranslator2<List<SNode>, SNode>() {
      public Iterable<SNode> translate(List<SNode> it) {
        return it;
      }
    })) {
      searchResults.addAll(FindUtils.getSearchResults(new EmptyProgressIndicator(), node, GlobalScope.getInstance(), "jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder"));
    }
    return searchResults;
  }

  public void updateModel(final SModel model, final RefactoringContext refactoringContext) {
    refactoringContext.updateByDefault(model);
  }

  public static String getKeyStroke_static() {
    return MoveNodes.getKeyStroke_static();
  }
}
