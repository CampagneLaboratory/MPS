package jetbrains.mps.lang.structure.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.EditorIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.workbench.editors.MPSEditorOpener;

public class CreateReferenceConcept_Intention extends EditorIntention {
  public CreateReferenceConcept_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Create Reference Concept";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.INamedConcept");
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    // structure 
    SNode concept = new _Quotations.QuotationClass_0().createNode(NameUtil.decapitalize(SPropertyOperations.getString(node, "name")), node, SPropertyOperations.getString(node, "name") + "Reference");
    SModelOperations.addRootNode(SNodeOperations.getModel(node), concept);
    SPropertyOperations.set(concept, "virtualPackage", SPropertyOperations.getString(node, "virtualPackage"));
    SNode link = ListSequence.fromList(SLinkOperations.getTargets(concept, "linkDeclaration", true)).first();

    // find editor model 
    Language language = Language.getLanguageFor(SNodeOperations.getModel(node).getModelDescriptor());
    SModel editorModel = language.getEditorModelDescriptor().getSModel();

    // editor 
    SNode editor = new _Quotations.QuotationClass_1().createNode(concept, link);
    SModelOperations.addRootNode(editorModel, editor);
    SPropertyOperations.set(editor, "virtualPackage", SPropertyOperations.getString(node, "virtualPackage"));

    IOperationContext context = editorContext.getOperationContext();
    new MPSEditorOpener(context.getProject()).editNode(concept, context);
  }

  public String getLocationString() {
    return "jetbrains.mps.lang.structure.intentions";
  }
}
