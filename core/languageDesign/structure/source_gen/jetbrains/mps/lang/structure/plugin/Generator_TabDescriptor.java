package jetbrains.mps.lang.structure.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.editorTabs.EditorTabDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.AttributesRolesUtil;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class Generator_TabDescriptor extends EditorTabDescriptor {
  public Generator_TabDescriptor() {
  }

  public String getTitle() {
    return "Generator";
  }

  public Character getShortcutChar() {
    return 'G';
  }

  public void startListening() {
    // <node> 
  }

  public SNode getBaseNode(SNode node) {
    return ConceptEditorOpenHelper.getBaseNode(node);
  }

  public boolean isApplicable(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration");
  }

  public List<SNode> getNodes(SNode node) {
    Set<SNode> nodes = SetSequence.fromSet(new HashSet<SNode>());
    SetSequence.fromSet(nodes).addSequence(ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_findGeneratorFragments_6409339300305625383(node)).<SNode>select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.getContainingRoot(it);
      }
    }));
    return SetSequence.fromSet(nodes).toListSequence();
  }

  public List<SNode> getConcepts(final SNode node) {
    List<SNode> result = ConceptEditorHelper.getAvailableConceptAspects(SNodeOperations.getModel(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateSwitch")), node);
    ListSequence.fromList(result).addElement(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence"));
    ListSequence.fromList(result).addElement(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence"));
    boolean rootable = SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.structure.structure.ConceptDeclaration") && SPropertyOperations.getBoolean(SNodeOperations.cast(node, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "rootable");
    boolean isInterface = SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration");
    if (rootable || isInterface) {
      boolean isNeedRootTemplate = true;
      for (SNode genFragment : AbstractConceptDeclaration_Behavior.call_findGeneratorFragments_6409339300305625383(node)) {
        if ((SLinkOperations.getTarget(genFragment, AttributesRolesUtil.childRoleFromAttributeRole("rootTemplateAnnotation"), true) != null)) {
          isNeedRootTemplate = false;
          break;
        }
      }
      if (isNeedRootTemplate) {
        for (ModuleReference moduleRef : SNodeOperations.getModel(node).importedLanguages()) {
          Language language = MPSModuleRepository.getInstance().getLanguage(moduleRef);
          if (language == null) {
            continue;
          }
          SModel structureModel = language.getStructureModelDescriptor().getSModel();
          for (SNode nodeToAdd : SModelOperations.getRoots(structureModel, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
            SNode conceptToAdd = (SNode) nodeToAdd;
            if (SPropertyOperations.getBoolean(nodeToAdd, "rootable")) {
              ListSequence.fromList(result).addElement(conceptToAdd);
            }
          }
        }
      }
    }
    return result;
  }
}
