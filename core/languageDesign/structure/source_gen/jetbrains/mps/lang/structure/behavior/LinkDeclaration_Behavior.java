package jetbrains.mps.lang.structure.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.nodeEditor.EditorContext;
import javax.swing.JOptionPane;
import jetbrains.mps.smodel.ModelAccess;

public class LinkDeclaration_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode call_getGenuineLink_1213877254523(SNode thisNode) {
    if (thisNode == null) {
      return null;
    }
    return SModelUtil.getGenuineLinkDeclaration(thisNode);
  }

  public static String call_getGenuineRole_1213877254542(SNode thisNode) {
    if (thisNode == null) {
      return null;
    }
    return SModelUtil.getGenuineLinkRole(thisNode);
  }

  public static boolean call_isSingular_1213877254557(SNode thisNode) {
    return SPropertyOperations.hasValue(thisNode, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(thisNode, "sourceCardinality", "1", "0..1");
  }

  public static String virtual_getPresentation_1213877396640(SNode thisNode) {
    return SPropertyOperations.getString(thisNode, "role");
  }

  public static boolean call_isAtLeastOneCardinality_3386205146660812199(SNode thisNode) {
    SNode genuineLink = LinkDeclaration_Behavior.call_getGenuineLink_1213877254523(thisNode);
    return SPropertyOperations.hasValue(genuineLink, "sourceCardinality", "1", "0..1") || SPropertyOperations.hasValue(genuineLink, "sourceCardinality", "1..n", "0..1");
  }

  public static void call_commitLinkRole_3129341680481880340(SNode thisNode, EditorContext editorContext, String oldValue, final String newValue, final SNode node, String message, String title) {
    if (oldValue != null) {
      if (oldValue.equals(newValue)) {
        return;
      }
      int result = JOptionPane.showConfirmDialog(editorContext.getNodeEditorComponent(), message, title, JOptionPane.YES_NO_OPTION);
      if (result == JOptionPane.NO_OPTION) {
        return;
      }
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SPropertyOperations.set(node, "role", newValue);
      }
    });
  }
}
