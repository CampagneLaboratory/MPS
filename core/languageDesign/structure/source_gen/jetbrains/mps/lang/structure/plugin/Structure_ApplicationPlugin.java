package jetbrains.mps.lang.structure.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.applicationplugins.BaseApplicationPlugin;
import com.intellij.openapi.extensions.PluginId;
import jetbrains.mps.ide.actions.EditorPopup_ActionGroup;
import jetbrains.mps.ide.actions.NodeActions_ActionGroup;
import jetbrains.mps.ide.actions.ModelActions_ActionGroup;
import java.util.List;
import jetbrains.mps.workbench.action.BaseKeymapChanges;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class Structure_ApplicationPlugin extends BaseApplicationPlugin {
  private PluginId myId = PluginId.getId("jetbrains.mps.lang.structure");

  public Structure_ApplicationPlugin() {
  }

  public PluginId getId() {
    return myId;
  }

  public void createGroups() {
    // actions w/o parameters 
    addAction(new ShowConceptStructure_Action());
    addAction(new ShowDefaultHelp_Action());
    addAction(new ShowHelpForAspect_Action());
    addAction(new ShowHelpForNode_Action());
    addAction(new ShowHelpForRoot_Action());
    // groups 
    addGroup(new ShowHelp_ActionGroup());
    addGroup(new Structure_ActionGroup());
  }

  public void adjustRegularGroups() {
    insertGroupIntoAnother(EditorPopup_ActionGroup.ID, "jetbrains.mps.lang.structure.plugin.Structure_ActionGroup", EditorPopup_ActionGroup.LABEL_ID_structure);
    insertGroupIntoAnother(NodeActions_ActionGroup.ID, "jetbrains.mps.lang.structure.plugin.Structure_ActionGroup", NodeActions_ActionGroup.LABEL_ID_structure);
    insertGroupIntoAnother(Structure_ActionGroup.ID, "jetbrains.mps.lang.structure.plugin.ShowHelp_ActionGroup", Structure_ActionGroup.LABEL_ID_showHelp);
    insertGroupIntoAnother(ModelActions_ActionGroup.ID, "jetbrains.mps.lang.structure.plugin.ShowHelp_ActionGroup", ModelActions_ActionGroup.LABEL_ID_showHelp);
  }

  public List<BaseKeymapChanges> initKeymaps() {
    List<BaseKeymapChanges> res = ListSequence.fromList(new ArrayList<BaseKeymapChanges>());
    ListSequence.fromList(res).addElement(new Default_KeymapChanges());
    return res;
  }
}
