package jetbrains.mps.lang.structure.scripts;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.AbstractLoggableRefactoring;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.core.scripts.SafeDelete;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.refactoring.framework.RefactoringTarget;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.workbench.action.ActionEventData;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.ide.findusages.model.SearchResult;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class SafeDeleteConcept extends AbstractLoggableRefactoring {
  public static final String sourceLanguage = "sourceLanguage";
  public static final String behaviorNode = "behaviorNode";
  public static final String editorNode = "editorNode";

  private Set<String> myTransientParameters = SetSequence.<String>fromArray();

  public SafeDeleteConcept() {
    this.myTransientParameters.add("sourceLanguage");
    this.myTransientParameters.add("behaviorNode");
    this.myTransientParameters.add("editorNode");
  }

  public String getUserFriendlyName() {
    return "Safe Delete Concept";
  }

  public Set<String> getTransientParameters() {
    return new HashSet<String>(this.myTransientParameters);
  }

  public String getKeyStroke() {
    return getKeyStroke_static();
  }

  public boolean isApplicableWRTConcept(SNode node) {
    return isApplicableWRTConcept_static(node);
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration";
  }

  public Class getOverridenRefactoringClass() {
    return SafeDelete.getClass_static();
  }

  public boolean isApplicable(RefactoringContext refactoringContext) {
    return true;
  }

  public boolean isApplicableToModel(SModelDescriptor modelDescriptor) {
    return true;
  }

  public boolean refactorImmediatelyIfNoUsages() {
    return true;
  }

  public RefactoringTarget getRefactoringTarget() {
    return RefactoringTarget.NODE;
  }

  public boolean showsAffectedNodes() {
    return true;
  }

  public SearchResults getAffectedNodes(final RefactoringContext refactoringContext) {
    {
      SNode node = refactoringContext.getSelectedNode();
      SearchResults searchResults = FindUtils.getSearchResults(ActionEventData.createProgressIndicator(), refactoringContext.getSelectedNode(), GlobalScope.getInstance(), "jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder", "jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder");
      refactoringContext.setParameter("sourceLanguage", Language.getLanguageFor(SNodeOperations.getModel(node).getModelDescriptor()));
      if (((Language)refactoringContext.getParameter("sourceLanguage")) != null) {
        SModelDescriptor editorModelDescriptor = ((Language)refactoringContext.getParameter("sourceLanguage")).getEditorModelDescriptor();
        List<SNode> searchResultsList = searchResults.getSearchResults();
        if (editorModelDescriptor != null) {
          refactoringContext.setParameter("editorNode", SModelUtil.findEditorDeclaration(editorModelDescriptor.getSModel(), node));
          if (((SNode)refactoringContext.getParameter("editorNode")) != null) {
            for(SearchResult<SNode> searchResult : new ArrayList<SearchResult<SNode>>((Collection)searchResultsList)) {
              if (searchResult.getObject().getContainingRoot() == ((SNode)refactoringContext.getParameter("editorNode"))) {
                searchResults.remove(searchResult);
              }
            }
          }
        }
        SModelDescriptor behaviorModelDescriptor = ((Language)refactoringContext.getParameter("sourceLanguage")).getBehaviorModelDescriptor();
        if (behaviorModelDescriptor != null) {
          refactoringContext.setParameter("behaviorNode", SModelUtil.findBehaviorDeclaration(behaviorModelDescriptor.getSModel(), node));
          if (((SNode)refactoringContext.getParameter("behaviorNode")) != null) {
            for(SearchResult<SNode> searchResult : new ArrayList<SearchResult<SNode>>((Collection)searchResultsList)) {
              if (searchResult.getObject().getContainingRoot() == ((SNode)refactoringContext.getParameter("behaviorNode"))) {
                searchResults.remove(searchResult);
              }
            }
          }
        }
      }
      return searchResults;
    }
  }

  public void doRefactor(final RefactoringContext refactoringContext) {
    {
      SNode node = refactoringContext.getSelectedNode();
      if (((SNode)refactoringContext.getParameter("behaviorNode")) != null) {
        ((SNode)refactoringContext.getParameter("behaviorNode")).delete();
      }
      if (((SNode)refactoringContext.getParameter("editorNode")) != null) {
        ((SNode)refactoringContext.getParameter("editorNode")).delete();
      }
      SNodeOperations.deleteNode(node);
    }
  }

  public Map<IModule, List<SModel>> getModelsToGenerate(final RefactoringContext refactoringContext) {
    {
      Map<IModule, List<SModel>> result = MapSequence.fromMap(new HashMap<IModule, List<SModel>>());
      if (((Language)refactoringContext.getParameter("sourceLanguage")) == null) {
        return result;
      }
      List<SModel> list = ListSequence.<SModel>fromArray();
      MapSequence.fromMap(result).put(((Language)refactoringContext.getParameter("sourceLanguage")), list);
      ListSequence.fromList(list).addElement(((Language)refactoringContext.getParameter("sourceLanguage")).getStructureModelDescriptor().getSModel());
      SModelDescriptor editorModelDescriptor = ((Language)refactoringContext.getParameter("sourceLanguage")).getEditorModelDescriptor();
      if (editorModelDescriptor != null) {
        ListSequence.fromList(list).addElement(editorModelDescriptor.getSModel());
      }
      SModelDescriptor constraintsModelDescriptor = ((Language)refactoringContext.getParameter("sourceLanguage")).getConstraintsModelDescriptor();
      if (constraintsModelDescriptor != null) {
        ListSequence.fromList(list).addElement(constraintsModelDescriptor.getSModel());
      }
      return result;
    }
  }

  public List<SModel> getModelsToUpdate(final RefactoringContext refactoringContext) {
    return ListSequence.<SModel>fromArray();
  }

  public void updateModel(SModel model, final RefactoringContext refactoringContext) {
  }

  public List<SNode> getNodesToOpen(final RefactoringContext refactoringContext) {
    return ListSequence.<SNode>fromArray();
  }

  public boolean doesUpdateModel() {
    return false;
  }

  public boolean askForInfo(final RefactoringContext refactoringContext) {
    {
      Boolean result = ModelAccess.instance().runReadAction(new Computable <Boolean>() {

        public Boolean compute() {
          return SafeDeleteConcept.this.isApplicable(refactoringContext);
        }
      });
      return result;
    }
  }


  public static String getKeyStroke_static() {
    return SafeDelete.getKeyStroke_static();
  }

  public static Class getClass_static() {
    return SafeDeleteConcept.class;
  }

  public static boolean isApplicableWRTConcept_static(SNode node) {
    if (SModelUtil.isAssignableConcept(SNodeOperations.getConceptDeclaration(node), SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))) {
      return true;
    } else
    {
      return SafeDelete.isApplicableWRTConcept_static(node);
    }
  }

}
