package jetbrains.mps.lang.structure.generator_new.baseLanguage;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.CreateRootRuleContext;
import jetbrains.mps.lang.structure.generator_new.util.QueriesUtil;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.structure.behavior.PrimitiveDataTypeDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.structure.generator_new.util.LinkDeclarationUtil;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.lang.structure.behavior.EnumerationDataTypeDeclaration_Behavior;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.generator.template.MapSrcMacroContext;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.generator.template.TemplateFragmentContext;
import jetbrains.mps.generator.template.WeavingMappingRuleContext;

public class QueriesGenerated {

  public static boolean createRootRule_Condition_1226343664102(final IOperationContext operationContext, final CreateRootRuleContext _context) {
    return QueriesUtil.getInputLanguage(_context.getOriginalInputModel()) != null;
  }

  public static boolean baseMappingRule_Condition_1167266219124(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    SNode type = SLinkOperations.getTarget(_context.getNode(), "memberDataType", false);
    return PrimitiveDataTypeDeclaration_Behavior.call_isString_1220268752134(type);
  }

  public static boolean baseMappingRule_Condition_1167266685049(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    SNode type = SLinkOperations.getTarget(_context.getNode(), "memberDataType", false);
    return PrimitiveDataTypeDeclaration_Behavior.call_isBoolean_1220268791641(type);
  }

  public static boolean baseMappingRule_Condition_1167266687532(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    SNode type = SLinkOperations.getTarget(_context.getNode(), "memberDataType", false);
    return PrimitiveDataTypeDeclaration_Behavior.call_isInteger_1220268780075(type);
  }

  public static boolean baseMappingRule_Condition_1167267315256(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "name", "AttributeConcept");
  }

  public static boolean baseMappingRule_Condition_1169582607456(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean b1 = SLinkOperations.getCount(_context.getNode(), "implements") > 0;
    boolean b2 = SLinkOperations.getCount(_context.getNode(), "propertyDeclaration") > 0;
    return b1 || b2;
  }

  public static boolean baseMappingRule_Condition_1169582607528(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean b1 = SLinkOperations.getCount(_context.getNode(), "implements") > 0;
    boolean b2 = SLinkOperations.getCount(_context.getNode(), "propertyDeclaration") > 0;
    return b1 || b2;
  }

  public static boolean baseMappingRule_Condition_1169582607585(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean b1 = SLinkOperations.getCount(_context.getNode(), "implements") > 0;
    boolean b2 = SLinkOperations.getCount(_context.getNode(), "propertyDeclaration") > 0;
    return b1 || b2;
  }

  public static boolean baseMappingRule_Condition_1169582607642(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean b1 = SLinkOperations.getCount(_context.getNode(), "implements") > 0;
    boolean b2 = SLinkOperations.getCount(_context.getNode(), "propertyDeclaration") > 0;
    return b1 || b2;
  }

  public static boolean baseMappingRule_Condition_1169582939030(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean b1 = SLinkOperations.getCount(_context.getNode(), "implements") > 0;
    boolean b2 = SLinkOperations.getCount(_context.getNode(), "linkDeclaration") > 0;
    return b1 || b2;
  }

  public static boolean baseMappingRule_Condition_1169583297029(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean b1 = SLinkOperations.getCount(_context.getNode(), "implements") > 0;
    boolean b2 = SLinkOperations.getCount(_context.getNode(), "linkDeclaration") > 0;
    return b1 || b2;
  }

  public static boolean baseMappingRule_Condition_1169591070445(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean b1 = SLinkOperations.getCount(_context.getNode(), "implements") > 0;
    boolean b2 = SLinkOperations.getCount(_context.getNode(), "linkDeclaration") > 0;
    return b1 || b2;
  }

  public static boolean baseMappingRule_Condition_1169592290031(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean b1 = SLinkOperations.getCount(_context.getNode(), "implements") > 0;
    boolean b2 = SLinkOperations.getCount(_context.getNode(), "linkDeclaration") > 0;
    return b1 || b2;
  }

  public static boolean baseMappingRule_Condition_1169592375050(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean b1 = SLinkOperations.getCount(_context.getNode(), "implements") > 0;
    boolean b2 = SLinkOperations.getCount(_context.getNode(), "linkDeclaration") > 0;
    return b1 || b2;
  }

  public static Object propertyMacro_GetPropertyValue_1168019908729(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1168020858179(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "CPR_" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1168020946114(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "CLNK_" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1168020996282(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1168021031848(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1169126625179(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1169581703461(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1169581753467(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "get" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1169581811302(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return NameUtil.toConstantName(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1169581814828(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "set" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1169755707217(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "role")) + "_AnnotationLink";
  }

  public static Object propertyMacro_GetPropertyValue_1169755781139(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return NameUtil.toConstantName(SPropertyOperations.getString(_context.getNode(), "role"));
  }

  public static Object propertyMacro_GetPropertyValue_1169755844288(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "role");
  }

  public static Object propertyMacro_GetPropertyValue_1169758290216(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.AL_class_setterName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1170173405392(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1170173405408(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "CPR_" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1170173405421(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1170173405437(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "CLNK_" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1170239141486(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return NameUtil.nodeFQName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1174696429121(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name") + "_PropertySupport";
  }

  public static Object propertyMacro_GetPropertyValue_1174697681347(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "constraint");
  }

  public static Object propertyMacro_GetPropertyValue_1174698054118(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1174698110415(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode enumerationType = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration");
    if (SPropertyOperations.hasValue(enumerationType, "memberIdentifierPolicy", "derive_from_internal_value", "derive_from_presentation")) {
      return NameUtil.toValidIdentifier(SPropertyOperations.getString(_context.getNode(), "internalValue"));
    }
    if (SPropertyOperations.hasValue(enumerationType, "memberIdentifierPolicy", "derive_from_presentation", "derive_from_presentation")) {
      return NameUtil.toValidIdentifier(SPropertyOperations.getString(_context.getNode(), "externalValue"));
    }
    return SPropertyOperations.getString(_context.getNode(), "javaIdentifier");
  }

  public static Object propertyMacro_GetPropertyValue_1174698175154(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "externalValue");
  }

  public static Object propertyMacro_GetPropertyValue_1189815461294(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return NameUtil.nodeFQName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1189815514401(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return NameUtil.nodeFQName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1198507396463(final IOperationContext operationContext, final PropertyMacroContext _context) {
    if ("jetbrains.mps.lang.core.structure.BaseConcept".equals(NameUtil.nodeFQName(_context.getNode()))) {
      return "jetbrains.mps.smodel.BaseAdapter";
    }
    SNode conceptDeclaration = SLinkOperations.getTarget(_context.getNode(), "extends", false);
    if ((conceptDeclaration == null)) {
      return "jetbrains.mps.lang.core.structure.BaseConcept";
    }
    return SNodeOperations.getModel(conceptDeclaration).getLongName() + "." + SPropertyOperations.getString(conceptDeclaration, "name");
  }

  public static Object propertyMacro_GetPropertyValue_1198508092517(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode conceptDeclaration = SLinkOperations.getTarget(_context.getNode(), "intfc", false);
    return SNodeOperations.getModel(conceptDeclaration).getLongName() + "." + SPropertyOperations.getString(conceptDeclaration, "name");
  }

  public static Object propertyMacro_GetPropertyValue_1198509740688(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode conceptDeclaration = SLinkOperations.getTarget(_context.getNode(), "intfc", false);
    return SNodeOperations.getModel(conceptDeclaration).getLongName() + "." + SPropertyOperations.getString(conceptDeclaration, "name");
  }

  public static Object propertyMacro_GetPropertyValue_1198510167227(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198510243920(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198510278710(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198510354819(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198510461552(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198510831398(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198510843781(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198510889181(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198510998198(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198511140727(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198511145355(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198511148264(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198511244640(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198511251162(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512295086(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512334946(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512344471(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512429163(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512438688(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512443603(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512505891(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512575166(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512581972(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512649467(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "source", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512699158(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "source", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512711229(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "source", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512728707(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "source", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512748482(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "source", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512758179(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "source", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512771266(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "source", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512780853(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "source", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198512784534(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "source", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198516836152(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return LinkDeclarationUtil.setterMethodName(SLinkOperations.getTarget(_context.getNode(), "specializedLink", false));
  }

  public static Object propertyMacro_GetPropertyValue_1198517087605(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return LinkDeclarationUtil.setterMethodName(SLinkOperations.getTarget(_context.getNode(), "specializedLink", false));
  }

  public static Object propertyMacro_GetPropertyValue_1204743264017(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.AL_class_getterName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1204743391565(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.AL_class_listGetterName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1204744128652(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.AL_class_getterName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1204744299607(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.AL_class_listGetterName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1204744522569(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.AL_class_setterName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1204744528715(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.AL_class_setterName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1204744584300(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.AL_class_getterName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1204744645214(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.AL_class_listGetterName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1212077641851(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return LinkDeclarationUtil.getterMethodName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1212077689625(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return LinkDeclarationUtil.getterMethodName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1212077722054(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return LinkDeclarationUtil.getterMethodName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1212077750997(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return LinkDeclarationUtil.getterMethodName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1212078150727(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return LinkDeclarationUtil.setterMethodName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1212078184085(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return LinkDeclarationUtil.setterMethodName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1212078194418(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return LinkDeclarationUtil.setterMethodName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1212078209314(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return LinkDeclarationUtil.setterMethodName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1212087871489(final IOperationContext operationContext, final PropertyMacroContext _context) {
    if (SPropertyOperations.getString(_context.getNode(), "noValueText") != null) {
      return SPropertyOperations.getString(_context.getNode(), "noValueText");
    }
    return "";
  }

  public static Object propertyMacro_GetPropertyValue_1219108817229(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name") + "_PropertySupport";
  }

  public static Object propertyMacro_GetPropertyValue_1219109134385(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return NameUtil.toConstantName(SPropertyOperations.getString(_context.getNode(), "role"));
  }

  public static Object propertyMacro_GetPropertyValue_1219109253891(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return NameUtil.toConstantName(SPropertyOperations.getString(_context.getNode(), "role"));
  }

  public static Object propertyMacro_GetPropertyValue_1219109306541(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return NameUtil.toConstantName(SPropertyOperations.getString(_context.getNode(), "role"));
  }

  public static Object propertyMacro_GetPropertyValue_1219109570605(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "role");
  }

  public static Object propertyMacro_GetPropertyValue_1219109623209(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "role");
  }

  public static Object propertyMacro_GetPropertyValue_1219109651702(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "role");
  }

  public static Object propertyMacro_GetPropertyValue_1219109844486(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return NameUtil.toConstantName(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1219109914383(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return NameUtil.toConstantName(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1219109949031(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return NameUtil.toConstantName(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1219110198475(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1219110241314(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1219110258538(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1219110458895(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "get" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1219110526858(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "get" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1219110545179(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "get" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1219110655219(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "set" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1219110685494(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "set" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1219110711472(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "set" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "name"));
  }

  public static Object propertyMacro_GetPropertyValue_1219165134105(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "get" + NameUtil.pluralize(NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "role"))) + "Count";
  }

  public static Object propertyMacro_GetPropertyValue_1219165288774(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return NameUtil.pluralize(SPropertyOperations.getString(_context.getNode(), "role"));
  }

  public static Object propertyMacro_GetPropertyValue_1219165377659(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "get" + NameUtil.capitalize(NameUtil.pluralize(SPropertyOperations.getString(_context.getNode(), "role")));
  }

  public static Object propertyMacro_GetPropertyValue_1219165473644(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "add" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "role"));
  }

  public static Object propertyMacro_GetPropertyValue_1219165555001(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "insert" + NameUtil.capitalize(SPropertyOperations.getString(_context.getNode(), "role"));
  }

  public static Object propertyMacro_GetPropertyValue_1225099518029(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Language lang = QueriesUtil.getInputLanguage(_context.getOriginalInputModel());
    String capitalizedName = NameUtil.capitalize(NameUtil.shortNameFromLongName(lang.getNamespace()));
    return capitalizedName + "_Language";
  }

  public static Object propertyMacro_GetPropertyValue_1225099631046(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.getInputLanguage(_context.getOriginalInputModel()).getModuleReference().toString();
  }

  public static Object propertyMacro_GetPropertyValue_1231676468685(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1231676937686(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1231677236698(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1231677278463(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return LinkDeclarationUtil.getterMethodName(SLinkOperations.getTarget(_context.getNode(), "specializedLink", false));
  }

  public static Object propertyMacro_GetPropertyValue_1231677291144(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "specializedLink", false), "role");
  }

  public static Object propertyMacro_GetPropertyValue_1231677363197(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1231677363206(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "specializedLink", false), "role");
  }

  public static Object propertyMacro_GetPropertyValue_1231677363218(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return LinkDeclarationUtil.getterMethodName(SLinkOperations.getTarget(_context.getNode(), "specializedLink", false));
  }

  public static Object propertyMacro_GetPropertyValue_1231679857997(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1231679865431(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1237047900651(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1237047900805(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1237047901022(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1237047901043(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1237047901127(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1237047901150(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object propertyMacro_GetPropertyValue_1237047901236(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return QueriesUtil.conceptClassFQName(SLinkOperations.getTarget(_context.getNode(), "target", false));
  }

  public static Object referenceMacro_GetReferent_1197509802062(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode defaultMember = EnumerationDataTypeDeclaration_Behavior.call_getDefaultMember_1213877397785(_context.getNode());
    SNode outputEnumConstant = _context.getOutputNodeByInputNodeAndMappingLabel(defaultMember, "outputEnumConstant");
    return (SNode)outputEnumConstant;
  }

  public static Object referenceMacro_GetReferent_1234209804321(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return QueriesUtil.getEnumClassResolveInfo(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "dataType", false), "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration"));
  }

  public static Object referenceMacro_GetReferent_1234210854396(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return QueriesUtil.getEnumClassResolveInfo(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "dataType", false), "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration"));
  }

  public static Object referenceMacro_GetReferent_1234210973468(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return QueriesUtil.getEnumClassResolveInfo(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "dataType", false), "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration"));
  }

  public static boolean ifMacro_Condition_1169755885217(final IOperationContext operationContext, final IfMacroContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "stereotype", "node", "node");
  }

  public static boolean ifMacro_Condition_1169756449482(final IOperationContext operationContext, final IfMacroContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "stereotype", "property", "node");
  }

  public static boolean ifMacro_Condition_1169756475519(final IOperationContext operationContext, final IfMacroContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "stereotype", "link", "node");
  }

  public static boolean ifMacro_Condition_1169756756933(final IOperationContext operationContext, final IfMacroContext _context) {
    return QueriesUtil.AL_isNodeStereotypeAndSingular(_context.getNode());
  }

  public static boolean ifMacro_Condition_1169756892981(final IOperationContext operationContext, final IfMacroContext _context) {
    return QueriesUtil.AL_isNodeStereotypeAndPlural(_context.getNode());
  }

  public static boolean ifMacro_Condition_1169757005015(final IOperationContext operationContext, final IfMacroContext _context) {
    return QueriesUtil.AL_isPropertyStereotypeAndSingular(_context.getNode());
  }

  public static boolean ifMacro_Condition_1169757018379(final IOperationContext operationContext, final IfMacroContext _context) {
    return QueriesUtil.AL_isPropertyStereotypeAndPlural(_context.getNode());
  }

  public static boolean ifMacro_Condition_1169757149991(final IOperationContext operationContext, final IfMacroContext _context) {
    return QueriesUtil.AL_isLinkStereotypeAndPlural(_context.getNode());
  }

  public static boolean ifMacro_Condition_1169757197199(final IOperationContext operationContext, final IfMacroContext _context) {
    return QueriesUtil.AL_isLinkStereotypeAndSingular(_context.getNode());
  }

  public static boolean ifMacro_Condition_1169758775014(final IOperationContext operationContext, final IfMacroContext _context) {
    return QueriesUtil.AL_isSingular(_context.getNode());
  }

  public static boolean ifMacro_Condition_1169758852353(final IOperationContext operationContext, final IfMacroContext _context) {
    return QueriesUtil.AL_isPlural(_context.getNode());
  }

  public static boolean ifMacro_Condition_1169758908113(final IOperationContext operationContext, final IfMacroContext _context) {
    return QueriesUtil.AL_isSingular(_context.getNode());
  }

  public static boolean ifMacro_Condition_1169758921200(final IOperationContext operationContext, final IfMacroContext _context) {
    return QueriesUtil.AL_isPlural(_context.getNode());
  }

  public static boolean ifMacro_Condition_1169758933189(final IOperationContext operationContext, final IfMacroContext _context) {
    return QueriesUtil.AL_isPlural(_context.getNode());
  }

  public static boolean ifMacro_Condition_1169758945100(final IOperationContext operationContext, final IfMacroContext _context) {
    return QueriesUtil.AL_isSingular(_context.getNode());
  }

  public static boolean ifMacro_Condition_1173128500049(final IOperationContext operationContext, final IfMacroContext _context) {
    return SLinkOperations.getCount(_context.getNode(), "extends") == 0;
  }

  public static boolean ifMacro_Condition_1212083662247(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(_context.getNode(), "hasNoDefaultMember"));
  }

  public static boolean ifMacro_Condition_1212084337843(final IOperationContext operationContext, final IfMacroContext _context) {
    return SPropertyOperations.getBoolean(_context.getNode(), "hasNoDefaultMember");
  }

  public static Iterable sourceNodesQuery_1167954157081(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "conceptPropertyDeclaration", true);
  }

  public static Iterable sourceNodesQuery_1168019837671(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "conceptLinkDeclaration", true);
  }

  public static Iterable sourceNodesQuery_1169582607427(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> concepts = QueriesUtil.conceptAndItsInterfaces(_context.getNode());
    //     all string-type-properties from implemented interfaces
    final List<String> names = ListSequence.<String>fromArray();
    return ListSequence.fromList(concepts).translate(new ITranslator2 <SNode, SNode>() {

      public Iterable<SNode> translate(final SNode it) {
        return new Iterable <SNode>() {

          public Iterator<SNode> iterator() {
            return new YieldingIterator <SNode>() {

              private int __CP__ = 0;
              private SNode _2_p;
              private Iterator<SNode> _2_p_it;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_p_it = ListSequence.fromList(SLinkOperations.getTargets(it, "propertyDeclaration", true)).iterator();
                    case 3:
                      if (!(this._2_p_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._2_p = this._2_p_it.next();
                      this.__CP__ = 4;
                      break;
                    case 5:
                      if (!(ListSequence.fromList(names).contains(SPropertyOperations.getString(this._2_p, "name")))) {
                        this.__CP__ = 6;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 7:
                      if (QueriesUtil.propertyDataType_isString(this._2_p)) {
                        this.__CP__ = 8;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 10:
                      this.__CP__ = 3;
                      this.yield(this._2_p);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this.__CP__ = 5;
                      break;
                    case 6:
                      this.__CP__ = 7;
                      break;
                    case 8:
                      ListSequence.fromList(names).addElement(SPropertyOperations.getString(this._2_p, "name"));
                      this.__CP__ = 10;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }
            };
          }
        };
      }
    });
  }

  public static Iterable sourceNodesQuery_1169582607484(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> concepts = QueriesUtil.conceptAndItsInterfaces(_context.getNode());
    //     all boolean-type-properties from implemented interfaces
    final List<String> names = ListSequence.<String>fromArray();
    return ListSequence.fromList(concepts).translate(new ITranslator2 <SNode, SNode>() {

      public Iterable<SNode> translate(final SNode it) {
        return new Iterable <SNode>() {

          public Iterator<SNode> iterator() {
            return new YieldingIterator <SNode>() {

              private int __CP__ = 0;
              private SNode _2_p;
              private Iterator<SNode> _2_p_it;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_p_it = ListSequence.fromList(SLinkOperations.getTargets(it, "propertyDeclaration", true)).iterator();
                    case 3:
                      if (!(this._2_p_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._2_p = this._2_p_it.next();
                      this.__CP__ = 4;
                      break;
                    case 5:
                      if (!(ListSequence.fromList(names).contains(SPropertyOperations.getString(this._2_p, "name")))) {
                        this.__CP__ = 6;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 7:
                      if (QueriesUtil.propertyDataType_isBoolean(this._2_p)) {
                        this.__CP__ = 8;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 10:
                      this.__CP__ = 3;
                      this.yield(this._2_p);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this.__CP__ = 5;
                      break;
                    case 6:
                      this.__CP__ = 7;
                      break;
                    case 8:
                      ListSequence.fromList(names).addElement(SPropertyOperations.getString(this._2_p, "name"));
                      this.__CP__ = 10;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }
            };
          }
        };
      }
    });
  }

  public static Iterable sourceNodesQuery_1169582607556(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> concepts = QueriesUtil.conceptAndItsInterfaces(_context.getNode());
    //     all integer-type-properties from implemented interfaces
    final List<String> names = ListSequence.<String>fromArray();
    return ListSequence.fromList(concepts).translate(new ITranslator2 <SNode, SNode>() {

      public Iterable<SNode> translate(final SNode it) {
        return new Iterable <SNode>() {

          public Iterator<SNode> iterator() {
            return new YieldingIterator <SNode>() {

              private int __CP__ = 0;
              private SNode _2_p;
              private Iterator<SNode> _2_p_it;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_p_it = ListSequence.fromList(SLinkOperations.getTargets(it, "propertyDeclaration", true)).iterator();
                    case 3:
                      if (!(this._2_p_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._2_p = this._2_p_it.next();
                      this.__CP__ = 4;
                      break;
                    case 5:
                      if (!(ListSequence.fromList(names).contains(SPropertyOperations.getString(this._2_p, "name")))) {
                        this.__CP__ = 6;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 7:
                      if (QueriesUtil.propertyDataType_isInteger(this._2_p)) {
                        this.__CP__ = 8;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 10:
                      this.__CP__ = 3;
                      this.yield(this._2_p);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this.__CP__ = 5;
                      break;
                    case 6:
                      this.__CP__ = 7;
                      break;
                    case 8:
                      ListSequence.fromList(names).addElement(SPropertyOperations.getString(this._2_p, "name"));
                      this.__CP__ = 10;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }
            };
          }
        };
      }
    });
  }

  public static Iterable sourceNodesQuery_1169582607613(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> concepts = QueriesUtil.conceptAndItsInterfaces(_context.getNode());
    //     all enum-type-properties from implemented interfaces
    final List<String> names = ListSequence.<String>fromArray();
    return ListSequence.fromList(concepts).translate(new ITranslator2 <SNode, SNode>() {

      public Iterable<SNode> translate(final SNode it) {
        return new Iterable <SNode>() {

          public Iterator<SNode> iterator() {
            return new YieldingIterator <SNode>() {

              private int __CP__ = 0;
              private SNode _2_p;
              private Iterator<SNode> _2_p_it;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_p_it = ListSequence.fromList(SLinkOperations.getTargets(it, "propertyDeclaration", true)).iterator();
                    case 3:
                      if (!(this._2_p_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._2_p = this._2_p_it.next();
                      this.__CP__ = 4;
                      break;
                    case 5:
                      if (!(ListSequence.fromList(names).contains(SPropertyOperations.getString(this._2_p, "name")))) {
                        this.__CP__ = 6;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 7:
                      if (QueriesUtil.propertyDataType_isEnum(this._2_p)) {
                        this.__CP__ = 8;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 10:
                      this.__CP__ = 3;
                      this.yield(this._2_p);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this.__CP__ = 5;
                      break;
                    case 6:
                      this.__CP__ = 7;
                      break;
                    case 8:
                      ListSequence.fromList(names).addElement(SPropertyOperations.getString(this._2_p, "name"));
                      this.__CP__ = 10;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }
            };
          }
        };
      }
    });
  }

  public static Iterable sourceNodesQuery_1169582939001(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> concepts = QueriesUtil.conceptAndItsInterfaces(_context.getNode());
    //     all reference links with cardinality=1 and no specialization
    return ListSequence.fromList(concepts).translate(new ITranslator2 <SNode, SNode>() {

      public Iterable<SNode> translate(final SNode it) {
        return new Iterable <SNode>() {

          public Iterator<SNode> iterator() {
            return new YieldingIterator <SNode>() {

              private int __CP__ = 0;
              private SNode _2_link;
              private Iterator<SNode> _2_link_it;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_link_it = ListSequence.fromList(SLinkOperations.getTargets(it, "linkDeclaration", true)).iterator();
                    case 3:
                      if (!(this._2_link_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._2_link = this._2_link_it.next();
                      this.__CP__ = 4;
                      break;
                    case 5:
                      if (QueriesUtil.isRefLink_card_1_nospec(this._2_link)) {
                        this.__CP__ = 6;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 7:
                      this.__CP__ = 3;
                      this.yield(this._2_link);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this.__CP__ = 5;
                      break;
                    case 6:
                      this.__CP__ = 7;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }
            };
          }
        };
      }
    });
  }

  public static Iterable sourceNodesQuery_1169583297000(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> concepts = QueriesUtil.conceptAndItsInterfaces(_context.getNode());
    //     all reference links with cardinality=1 and specialization
    return ListSequence.fromList(concepts).translate(new ITranslator2 <SNode, SNode>() {

      public Iterable<SNode> translate(final SNode it) {
        return new Iterable <SNode>() {

          public Iterator<SNode> iterator() {
            return new YieldingIterator <SNode>() {

              private int __CP__ = 0;
              private SNode _2_link;
              private Iterator<SNode> _2_link_it;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_link_it = ListSequence.fromList(SLinkOperations.getTargets(it, "linkDeclaration", true)).iterator();
                    case 3:
                      if (!(this._2_link_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._2_link = this._2_link_it.next();
                      this.__CP__ = 4;
                      break;
                    case 5:
                      if (QueriesUtil.isRefLink_card_1_spec(this._2_link)) {
                        this.__CP__ = 6;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 7:
                      this.__CP__ = 3;
                      this.yield(this._2_link);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this.__CP__ = 5;
                      break;
                    case 6:
                      this.__CP__ = 7;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }
            };
          }
        };
      }
    });
  }

  public static Iterable sourceNodesQuery_1169591070416(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> concepts = QueriesUtil.conceptAndItsInterfaces(_context.getNode());
    //     all aggregation links with cardinality:1 and no specialization
    return ListSequence.fromList(concepts).translate(new ITranslator2 <SNode, SNode>() {

      public Iterable<SNode> translate(final SNode it) {
        return new Iterable <SNode>() {

          public Iterator<SNode> iterator() {
            return new YieldingIterator <SNode>() {

              private int __CP__ = 0;
              private SNode _2_link;
              private Iterator<SNode> _2_link_it;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_link_it = ListSequence.fromList(SLinkOperations.getTargets(it, "linkDeclaration", true)).iterator();
                    case 3:
                      if (!(this._2_link_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._2_link = this._2_link_it.next();
                      this.__CP__ = 4;
                      break;
                    case 5:
                      if (QueriesUtil.isAggLink_card_1_nospec(this._2_link)) {
                        this.__CP__ = 6;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 7:
                      this.__CP__ = 3;
                      this.yield(this._2_link);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this.__CP__ = 5;
                      break;
                    case 6:
                      this.__CP__ = 7;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }
            };
          }
        };
      }
    });
  }

  public static Iterable sourceNodesQuery_1169592290002(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> concepts = QueriesUtil.conceptAndItsInterfaces(_context.getNode());
    //     all aggregation links with cardinality:1 and specialization
    return ListSequence.fromList(concepts).translate(new ITranslator2 <SNode, SNode>() {

      public Iterable<SNode> translate(final SNode it) {
        return new Iterable <SNode>() {

          public Iterator<SNode> iterator() {
            return new YieldingIterator <SNode>() {

              private int __CP__ = 0;
              private SNode _2_link;
              private Iterator<SNode> _2_link_it;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_link_it = ListSequence.fromList(SLinkOperations.getTargets(it, "linkDeclaration", true)).iterator();
                    case 3:
                      if (!(this._2_link_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._2_link = this._2_link_it.next();
                      this.__CP__ = 4;
                      break;
                    case 5:
                      if (QueriesUtil.isAggLink_card_1_spec(this._2_link)) {
                        this.__CP__ = 6;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 7:
                      this.__CP__ = 3;
                      this.yield(this._2_link);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this.__CP__ = 5;
                      break;
                    case 6:
                      this.__CP__ = 7;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }
            };
          }
        };
      }
    }).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode it) {
        return !(SPropertyOperations.getString(it, "role").equals(SPropertyOperations.getString(SLinkOperations.getTarget(it, "specializedLink", false), "role")));
      }
    });
  }

  public static Iterable sourceNodesQuery_1169592375021(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> concepts = QueriesUtil.conceptAndItsInterfaces(_context.getNode());
    //     all aggregation links with cardinality:n and no specialization
    return ListSequence.fromList(concepts).translate(new ITranslator2 <SNode, SNode>() {

      public Iterable<SNode> translate(final SNode it) {
        return new Iterable <SNode>() {

          public Iterator<SNode> iterator() {
            return new YieldingIterator <SNode>() {

              private int __CP__ = 0;
              private SNode _2_link;
              private Iterator<SNode> _2_link_it;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_link_it = ListSequence.fromList(SLinkOperations.getTargets(it, "linkDeclaration", true)).iterator();
                    case 3:
                      if (!(this._2_link_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._2_link = this._2_link_it.next();
                      this.__CP__ = 4;
                      break;
                    case 5:
                      if (QueriesUtil.isAggLink_card_n_nospec(this._2_link)) {
                        this.__CP__ = 6;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 7:
                      this.__CP__ = 3;
                      this.yield(this._2_link);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this.__CP__ = 5;
                      break;
                    case 6:
                      this.__CP__ = 7;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }
            };
          }
        };
      }
    });
  }

  public static Iterable sourceNodesQuery_1169751054593(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "propertyDeclaration", true)).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode p) {
        return QueriesUtil.propertyDataType_isString(p);
      }
    });
  }

  public static Iterable sourceNodesQuery_1169751903568(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "propertyDeclaration", true)).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode p) {
        return QueriesUtil.propertyDataType_isBoolean(p);
      }
    });
  }

  public static Iterable sourceNodesQuery_1169751987220(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "propertyDeclaration", true)).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode p) {
        return QueriesUtil.propertyDataType_isInteger(p);
      }
    });
  }

  public static Iterable sourceNodesQuery_1169752052157(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "propertyDeclaration", true)).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode p) {
        return QueriesUtil.propertyDataType_isEnum(p);
      }
    });
  }

  public static Iterable sourceNodesQuery_1169752120196(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "linkDeclaration", true)).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode link) {
        return QueriesUtil.isAggLink_card_1_nospec(link);
      }
    });
  }

  public static Iterable sourceNodesQuery_1169753230932(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "linkDeclaration", true)).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode link) {
        return QueriesUtil.isAggLink_card_1_spec(link);
      }
    });
  }

  public static Iterable sourceNodesQuery_1169753275330(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "linkDeclaration", true)).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode link) {
        return QueriesUtil.isAggLink_card_n_nospec(link);
      }
    });
  }

  public static Iterable sourceNodesQuery_1169753367103(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "linkDeclaration", true)).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode link) {
        return QueriesUtil.isRefLink_card_1_nospec(link);
      }
    });
  }

  public static Iterable sourceNodesQuery_1169753422079(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "linkDeclaration", true)).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode link) {
        return QueriesUtil.isRefLink_card_1_spec(link);
      }
    });
  }

  public static Iterable sourceNodesQuery_1170173405399(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "conceptPropertyDeclaration", true);
  }

  public static Iterable sourceNodesQuery_1170173405428(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration"), "conceptLinkDeclaration", true);
  }

  public static Iterable sourceNodesQuery_1174698255353(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "member", true);
  }

  public static Iterable sourceNodesQuery_1174700250815(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "member", true);
  }

  public static Iterable sourceNodesQuery_1174700303502(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "member", true);
  }

  public static Iterable sourceNodesQuery_1198508062250(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "implements", true);
  }

  public static Iterable sourceNodesQuery_1198509713444(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "extends", true);
  }

  public static SNode mapSrcMacro_mapper_1178978044712(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode enumDataType = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration");
    String internalValue = SPropertyOperations.getString(_context.getNode(), "internalValue");
    SNode memberDataType = SLinkOperations.getTarget(enumDataType, "memberDataType", false);
    SNode targetInternalValueExpression = null;
    SModel targetModel = _context.getOutputModel();
    if (SPropertyOperations.hasValue(memberDataType, "name", "string")) {
      if (internalValue == null) {
        targetInternalValueExpression = SModelOperations.createNewNode(targetModel, "jetbrains.mps.baseLanguage.structure.NullLiteral", null);
      } else
      {
        targetInternalValueExpression = SModelOperations.createNewNode(targetModel, "jetbrains.mps.baseLanguage.structure.StringLiteral", null);
        SPropertyOperations.set(SNodeOperations.cast(targetInternalValueExpression, "jetbrains.mps.baseLanguage.structure.StringLiteral"), "value", internalValue);
      }
    } else
    if (SPropertyOperations.hasValue(memberDataType, "name", "boolean")) {
      targetInternalValueExpression = SModelOperations.createNewNode(targetModel, "jetbrains.mps.baseLanguage.structure.BooleanConstant", null);
      if (internalValue == null) {
        SPropertyOperations.set(SNodeOperations.cast(targetInternalValueExpression, "jetbrains.mps.baseLanguage.structure.BooleanConstant"), "value", "" + (true));
      } else
      {
        SPropertyOperations.set(SNodeOperations.cast(targetInternalValueExpression, "jetbrains.mps.baseLanguage.structure.BooleanConstant"), "value", "" + (Boolean.parseBoolean(internalValue)));
      }
    } else
    if (SPropertyOperations.hasValue(memberDataType, "name", "integer")) {
      targetInternalValueExpression = SModelOperations.createNewNode(targetModel, "jetbrains.mps.baseLanguage.structure.IntegerConstant", null);
      if (internalValue == null) {
        SPropertyOperations.set(SNodeOperations.cast(targetInternalValueExpression, "jetbrains.mps.baseLanguage.structure.IntegerConstant"), "value", "" + (0));
      } else
      {
        SPropertyOperations.set(SNodeOperations.cast(targetInternalValueExpression, "jetbrains.mps.baseLanguage.structure.IntegerConstant"), "value", "" + (Integer.parseInt(internalValue)));
      }
    }
    if ((targetInternalValueExpression == null)) {
      _context.showErrorMessage(enumDataType, "Can't generate value for type " + SPropertyOperations.getString(memberDataType, "name"));
    }
    return targetInternalValueExpression;
  }

  public static SNode templateFragment_ContextNodeQuery_1184375448947(final IOperationContext operationContext, final TemplateFragmentContext _context) {
    List<SNode> methods = SLinkOperations.getTargets(SNodeOperations.cast(_context.getMainContextNode(), "jetbrains.mps.baseLanguage.structure.ClassConcept"), "method", true);
    for(SNode method : ListSequence.fromList(methods)) {
      if ("getValueAsString".equals(SPropertyOperations.getString(method, "name"))) {
        return SLinkOperations.getTarget(method, "body", true);
      }
    }
    return null;
  }

  public static SNode templateFragment_ContextNodeQuery_1184375906184(final IOperationContext operationContext, final TemplateFragmentContext _context) {
    List<SNode> methods = SLinkOperations.getTargets(SNodeOperations.cast(_context.getMainContextNode(), "jetbrains.mps.baseLanguage.structure.ClassConcept"), "method", true);
    for(SNode method : ListSequence.fromList(methods)) {
      if ("getValueAsString".equals(SPropertyOperations.getString(method, "name"))) {
        return SLinkOperations.getTarget(method, "body", true);
      }
    }
    return null;
  }

  public static SNode templateFragment_ContextNodeQuery_1184375942612(final IOperationContext operationContext, final TemplateFragmentContext _context) {
    List<SNode> methods = SLinkOperations.getTargets(SNodeOperations.cast(_context.getMainContextNode(), "jetbrains.mps.baseLanguage.structure.ClassConcept"), "method", true);
    for(SNode method : ListSequence.fromList(methods)) {
      if ("getValueAsString".equals(SPropertyOperations.getString(method, "name"))) {
        return SLinkOperations.getTarget(method, "body", true);
      }
    }
    return null;
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187043830800(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187043918082(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187043927698(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187043930924(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044131962(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044385569(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044389779(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044393880(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044465996(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044470566(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044512073(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044515517(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044519883(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044578844(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044581538(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044583904(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044587286(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044589887(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044592910(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044596292(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044599018(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187044602478(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "javaClass");
  }

}
