package jetbrains.mpslite.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModel;
import java.util.Map;
import jetbrains.mps.smodel.SNode;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mpslite.behavior.LineList_Behavior;
import jetbrains.mpslite.generator.template.util.EditorGenerationUtils;
import java.util.ArrayList;
import jetbrains.mps.smodel.SModelRepository;

public class QueriesGenerated {

  public static void mappingScript_CodeBlock_1238589718396(final IOperationContext operationContext, final MappingScriptContext _context) {
    Language language = Language.getLanguageFor(_context.getOriginalInputModel().getModelDescriptor());
    if (language == null) {
      return;
    }
    SModel structureModel = language.getStructureModelDescriptor().getSModel();
    Map<SNode, SNode> conceptsToTargets = new HashMap<SNode, SNode>();
    Map<SNode, SNode> linePartsToLinkDeclarations = new HashMap<SNode, SNode>();
    List<SNode> mpsliteConceptDeclarations = SModelOperations.getRoots(_context.getModel(), "jetbrains.mpslite.structure.MPSLiteConceptDeclaration");
    for(SNode conceptDeclaration : mpsliteConceptDeclarations) {
      SNode concept = SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.ConceptDeclaration", null);
      SPropertyOperations.set(concept, "name", SPropertyOperations.getString(conceptDeclaration, "name"));
      conceptsToTargets.put(conceptDeclaration, concept);
    }
    //     extends
    for(SNode conceptDeclaration : mpsliteConceptDeclarations) {
      SLinkOperations.setTarget((SNodeOperations.castConcept(conceptsToTargets.get(conceptDeclaration), "jetbrains.mps.lang.structure.structure.ConceptDeclaration")), "extends", SNodeOperations.castConcept((SNode)conceptsToTargets.get(SLinkOperations.getTarget(conceptDeclaration, "extends", false)), "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), false);
    }
    //     structure
    for(SNode conceptDeclaration : mpsliteConceptDeclarations) {
      LineList_Behavior.call_fillConceptStructure_1238593666753(SLinkOperations.getTarget(conceptDeclaration, "lineList", true), null, (SNode)conceptsToTargets.get(conceptDeclaration), conceptsToTargets, linePartsToLinkDeclarations);
    }
    //     editor
    SModel editorModel = language.getEditorModelDescriptor().getSModel();
    Map<SNode, SNode> conceptsToEditors = new HashMap<SNode, SNode>();
    for(SNode conceptDeclaration : mpsliteConceptDeclarations) {
      SNode editor = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration", null);
      SNode lineList = SLinkOperations.getTarget(conceptDeclaration, "lineList", true);
      SNode contentCell = EditorGenerationUtils.generateEditorCellModel(lineList, null, conceptDeclaration, linePartsToLinkDeclarations);
      if (contentCell == null) {
        continue;
      }
      SLinkOperations.setTarget(editor, "cellModel", contentCell, true);
      SLinkOperations.setTarget(editor, "conceptDeclaration", conceptsToTargets.get(conceptDeclaration), false);
      conceptsToEditors.put(conceptDeclaration, editor);
    }
    //     setting roots and deleting input roots
    structureModel.setLoading(true);
    for(SNode root : new ArrayList<SNode>(SModelOperations.getRoots(structureModel, null))) {
      structureModel.removeRoot(root);
    }
    for(SNode conceptDeclaration : mpsliteConceptDeclarations) {
      SNode concept = conceptsToTargets.get(conceptDeclaration);
      SModelOperations.addRootNode(structureModel, concept);
    }
    structureModel.setLoading(false);
    SModelRepository.getInstance().markChanged(structureModel);
    editorModel.setLoading(true);
    for(SNode root : new ArrayList<SNode>(SModelOperations.getRoots(editorModel, null))) {
      editorModel.removeRoot(root);
    }
    for(SNode conceptDeclaration : mpsliteConceptDeclarations) {
      SNode editorDeclaration = conceptsToEditors.get(conceptDeclaration);
      SModelOperations.addRootNode(editorModel, editorDeclaration);
    }
    editorModel.setLoading(false);
    SModelRepository.getInstance().markChanged(editorModel);
    for(SNode conceptDeclaration : mpsliteConceptDeclarations) {
      SNodeOperations.deleteNode(conceptDeclaration);
    }
  }

}
