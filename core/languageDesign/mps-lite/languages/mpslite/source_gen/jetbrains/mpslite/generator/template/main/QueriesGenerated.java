package jetbrains.mpslite.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModel;
import java.util.Map;
import jetbrains.mps.smodel.SNode;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mpslite.behavior.LineList_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class QueriesGenerated {

  public static void mappingScript_CodeBlock_1238589718396(final IOperationContext operationContext, final MappingScriptContext _context) {
    Language language = Language.getLanguageFor(_context.getOriginalInputModel().getModelDescriptor());
    if (language == null) {
      return;
    }
    SModel structureModel = language.getStructureModelDescriptor().getSModel();
    Map<SNode, SNode> conceptsToTargets = new HashMap<SNode, SNode>();
    Map<SNode, SNode> linePartsToLinkDeclarations = new HashMap<SNode, SNode>();
    List<SNode> mpsliteConceptDeclarations = SModelOperations.getRoots(_context.getModel(), "jetbrains.mpslite.structure.MPSLiteConceptDeclaration");
    for(SNode conceptDeclaration : mpsliteConceptDeclarations) {
      SNode concept = SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.ConceptDeclaration", null);
      SPropertyOperations.set(concept, "name", SPropertyOperations.getString(conceptDeclaration, "name"));
      conceptsToTargets.put(conceptDeclaration, concept);
    }
    //     extends
    for(SNode conceptDeclaration : mpsliteConceptDeclarations) {
      SLinkOperations.setTarget((conceptsToTargets.get(conceptDeclaration)), "extends", (SNode)conceptsToTargets.get(SLinkOperations.getTarget(conceptDeclaration, "extends", false)), false);
    }
    //     structure
    for(SNode conceptDeclaration : mpsliteConceptDeclarations) {
      LineList_Behavior.call_fillConceptStructure_1238593666753(SLinkOperations.getTarget(conceptDeclaration, "lineList", true), null, (SNode)conceptsToTargets.get(conceptDeclaration), conceptsToTargets, linePartsToLinkDeclarations);
    }
    //     setting roots and deleting input roots
    structureModel.setLoading(true);
    for(SNode conceptDeclaration : mpsliteConceptDeclarations) {
      SNode concept = conceptsToTargets.get(conceptDeclaration);
      SModelOperations.addRootNode(structureModel, concept);
      SNodeOperations.deleteNode(conceptDeclaration);
    }
    structureModel.setLoading(false);
  }

}
