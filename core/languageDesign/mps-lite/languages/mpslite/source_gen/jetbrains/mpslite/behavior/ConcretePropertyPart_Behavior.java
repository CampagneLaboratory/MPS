package jetbrains.mpslite.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Map;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mpslite.behavior._Quotations;
import jetbrains.mps.internal.collections.runtime.MapSequence;

public class ConcretePropertyPart_Behavior {

  public static void init(SNode thisNode) {
  }

  public static void virtual_fillConceptStructure_1238593834306(SNode thisNode, SNode templateBasedConcept, SNode concept, Map<SNode, SNode> conceptsToTargets, Map<SNode, SNode> linePartsToLinks) {
    SNode propertyDeclaration = SLinkOperations.addNewChild(concept, "propertyDeclaration", "jetbrains.mps.lang.structure.structure.PropertyDeclaration");
    SPropertyOperations.set(propertyDeclaration, "name", SPropertyOperations.getString(thisNode, "name"));
    if (SPropertyOperations.hasValue(thisNode, "propertyType", "numeric", "string")) {
      SLinkOperations.setTarget(propertyDeclaration, "dataType", SLinkOperations.getTarget(new _Quotations.QuotationClass_0().createNode(), "dataType", false), false);
    } else if (SPropertyOperations.hasValue(thisNode, "propertyType", "string", "string")) {
      SLinkOperations.setTarget(propertyDeclaration, "dataType", SLinkOperations.getTarget(new _Quotations.QuotationClass_1().createNode(), "dataType", false), false);
    }
    MapSequence.fromMap(linePartsToLinks).put(thisNode, propertyDeclaration);
  }

}
