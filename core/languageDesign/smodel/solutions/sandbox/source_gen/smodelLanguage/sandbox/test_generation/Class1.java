package smodelLanguage.sandbox.test_generation;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.AttributesRolesUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class Class1 {
  public void method1(SNode node) {
    SNodeOperations.isAttribute(node);
    List<SNode> nodes = SNodeOperations.getAllAttributes(node);
    SNode firstNode = ListSequence.fromList(SNodeOperations.getAllAttributes(node)).first();
  }

  public void method2(SNode node) {
    List<SNode> macros = SLinkOperations.getTargets(node, AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"), true);
    SNode firstMacro = ListSequence.fromList(SLinkOperations.getTargets(node, AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"), true)).first();
    SNode propertyMacro = SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromPropertyAttributeRole("propertyMacro", "name"), true);
    SNode concept = SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromPropertyAttributeRole("propertyMacro", "name"), true));
  }

  public void method3(SNode node) {
    SNode macro = SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromLinkAttributeRole("referenceMacro", "variableDeclaration"), true);
    SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromLinkAttributeRole("referenceMacro", "xoxoxoxo"), true);
  }

  public void method4(SNode node) {
    SNode variableDeclaration = SLinkOperations.getTarget(node, "variableDeclaration", false);
    SLinkOperations.setTarget(node, "variableDeclaration", null, false);
    SLinkOperations.setTarget(node, AttributesRolesUtil.childRoleFromLinkAttributeRole("referenceMacro", "variableDeclaration"), null, true);
    SLinkOperations.setTarget(node, AttributesRolesUtil.childRoleFromLinkAttributeRole("referenceMacro", "localVariableDeclaration"), SConceptOperations.createNewNode("jetbrains.mps.lang.generator.structure.ReferenceMacro", null), true);
  }

  public void method5(SNode node) {
    // single attribute access 
    SNode expression = SLinkOperations.getTarget(node, "expression", true);
    SLinkOperations.setNewChild(node, "expression", "jetbrains.mps.baseLanguage.structure.BinaryOperation");
    SLinkOperations.setNewChild(node, "expression", "jetbrains.mps.baseLanguage.structure.Expression");
    SNode ex = SNodeOperations.detachNode(SLinkOperations.getTarget(node, "expression", true));
    SLinkOperations.setNewChild(node, AttributesRolesUtil.childRoleFromPropertyAttributeRole("propertyMacro", "alias"), "jetbrains.mps.lang.generator.structure.PropertyMacro");
    SLinkOperations.setNewChild(node, AttributesRolesUtil.childRoleFromPropertyAttributeRole("propertyMacro", "alias"), "jetbrains.mps.lang.generator.structure.PropertyMacro");
    SNode macro = SNodeOperations.detachNode(SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromPropertyAttributeRole("propertyMacro", "alias"), true));
  }

  public void method6(SNode node) {
    // attribute list access 
    List<SNode> nodes = SLinkOperations.getTargets(node, "statement", true);
    SLinkOperations.addNewChild(node, "statement", "jetbrains.mps.baseLanguage.structure.Statement");
    SLinkOperations.addNewChild(node, "statement", "jetbrains.mps.baseLanguage.structure.Statement");
    ListSequence.fromList(SLinkOperations.getTargets(node, "statement", true)).addElement(null);
    ListSequence.fromList(SLinkOperations.getTargets(node, "statement", true)).addSequence(null);
    ListSequence.fromList(SLinkOperations.getTargets(node, "statement", true)).insertElement(0, SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ReturnStatement", null));
    int c1 = ListSequence.fromList(SLinkOperations.getTargets(node, "statement", true)).count();
    List<SNode> macros = SLinkOperations.getTargets(SNodeOperations.cast(node, ""), AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"), true);
    SLinkOperations.addNewChild(node, AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"), "jetbrains.mps.lang.generator.structure.NodeMacro");
    SLinkOperations.addNewChild(node, AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"), "jetbrains.mps.lang.generator.structure.NodeMacro");
    ListSequence.fromList(SLinkOperations.getTargets(node, AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"), true)).addElement(null);
    ListSequence.fromList(SLinkOperations.getTargets(node, AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"), true)).addSequence(null);
    ListSequence.fromList(SLinkOperations.getTargets(node, AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"), true)).insertElement(0, null);
    int c2 = ListSequence.fromList(SLinkOperations.getTargets(node, AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"), true)).count();
    int c3 = ListSequence.fromList(SLinkOperations.getTargets(node, AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"), true)).count();
    // not a link 
    int all = ListSequence.fromList(SNodeOperations.getAllAttributes(node)).count();
    SNodeOperations.copyNode(SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromPropertyAttributeRole("propertyMacro", "alias"), true));
  }

  public void method7(SNode node) {
    Iterable<SNode> seq = ListSequence.fromList(SLinkOperations.getTargets(node, "statement", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.ExpressionStatement"), "expression", true), "jetbrains.mps.baseLanguage.structure.NullLiteral");
      }
    });
    for (SNode statement : ListSequence.fromList(SLinkOperations.getTargets(node, "statement", true))) {
      String string = SPropertyOperations.getString(statement, "alias");
    }
  }

  public void method8(SNode es, SNode imco) {
    SLinkOperations.setTarget(es, "expression", SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Expression", null), true);
    SLinkOperations.setTarget(imco, "baseMethodDeclaration", SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null), false);
  }

  public static void main(String[] arg) {
  }
}
