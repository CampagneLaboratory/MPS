package model2;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.AttributesRolesUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;

public class TestAttr {
  public void aaa(SNode node) {
    SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromPropertyAttributeRole("propertyMacro", "sourceCardinality"), true);
    SLinkOperations.getTargets(node, AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"), true);
    SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromPropertyAttributeRole("propertyMacro", AAA.class), true);
    SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromPropertyAttributeRole("propertyMacro", SPropertyOperations.getString(node, "role")), true);
    String aaa = AAA.class;
    SNode ccc;
    SPropertyOperations.getString(node, "alias");
  }

  public void bbb(SNode node) {
    SNode macro = SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromLinkAttributeRole("referenceMacro", SPropertyOperations.getString(node, "alias")), true);
    SLinkOperations.setTarget(node, AttributesRolesUtil.childRoleFromLinkAttributeRole("referenceMacro", "aaa"), SConceptOperations.createNewNode("jetbrains.mps.lang.generator.structure.ReferenceMacro", null), true);
    ListSequence.fromList(SLinkOperations.getTargets(node, AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"), true)).addElement(SConceptOperations.createNewNode("jetbrains.mps.lang.generator.structure.NodeMacro", null));
    SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.IMemberContainer", false, false);
    SLinkOperations.getTarget(node, "baseMethodDeclaration", false);
  }

  public void ccc(SNode node) {
    SLinkOperations.setTarget(node, AttributesRolesUtil.childRoleFromPropertyAttributeRole("propertyMacro", "metaClass"), SConceptOperations.createNewNode("jetbrains.mps.lang.generator.structure.PropertyMacro", null), true);
    Iterable<SNode> macros1 = SLinkOperations.getTargets(node, AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"), true);
    List<SNode> ;
    List<SNode> macros = ((List<SNode>) macros1);
    SNode macro = SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromPropertyAttributeRole("propertyMacro", "alias"), true);
    List<SNode> nodes = ListSequence.fromList(SNodeOperations.getAllAttributes(node)).addElement(null);
  }
}
