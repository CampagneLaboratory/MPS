package jetbrains.mps.lang.smodel.generator.smodelAdapter;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNode;

public interface IAttributeDescriptor {
  public boolean match(@NotNull SNode attribute);
  public void update(@NotNull SNode attribute);
  public static class AttributeDescriptor implements IAttributeDescriptor {
    protected SNode myAttributeDeclaration;

    public AttributeDescriptor(SNode attributeDeclaration) {
      myAttributeDeclaration = attributeDeclaration;
    }

    public boolean match(@NotNull SNode attribute) {
      return myAttributeDeclaration == null || attribute.isInstanceOfConcept(myAttributeDeclaration);
    }

    public void update(@NotNull SNode attribute) {
    }
  }

  public static class AllAttributes extends IAttributeDescriptor.AttributeDescriptor {
    public AllAttributes() {
      super(null);
    }
  }

  public static class NodeAttribute extends IAttributeDescriptor.AttributeDescriptor {
    public NodeAttribute(@NotNull SNode attributeDeclaration) {
      super(attributeDeclaration);
    }
  }

  public static class LinkAttribute extends IAttributeDescriptor.AttributeDescriptor {
    private SNode myLinkDeclaration;

    public LinkAttribute(SNode attributeDeclaration, SNode linkDeclaration) {
      super(attributeDeclaration);
      myLinkDeclaration = linkDeclaration;
    }

    public boolean match(@NotNull SNode attribute) {
      return super.match(attribute) && (myLinkDeclaration == null || myLinkDeclaration == attribute.getReferent("link"));
    }

    public void update(@NotNull SNode attribute) {
      attribute.setReferent("link", myLinkDeclaration);
    }
  }

  public static class PropertyAttribute extends IAttributeDescriptor.AttributeDescriptor {
    private SNode myPropertyDeclaration;

    public PropertyAttribute(SNode attributeDeclaration, SNode propertyDeclaration) {
      super(attributeDeclaration);
      myPropertyDeclaration = propertyDeclaration;
    }

    public boolean match(@NotNull SNode attribute) {
      return super.match(attribute) && (myPropertyDeclaration == null || myPropertyDeclaration == attribute.getReferent("property"));
    }

    public void update(@NotNull SNode attribute) {
      attribute.setReferent("property", myPropertyDeclaration);
    }
  }

}
