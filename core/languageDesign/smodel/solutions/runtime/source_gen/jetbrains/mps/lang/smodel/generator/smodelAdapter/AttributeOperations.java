package jetbrains.mps.lang.smodel.generator.smodelAdapter;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.core.behavior.Attribute_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.List;
import java.util.ArrayList;

public class AttributeOperations {
  private AttributeOperations() {
  }

  public String getOldRole(SNode node) {
    return Attribute_Behavior.call_getOldAttributeRole_6407023681583030897(node);
  }

  public boolean isNewAttributeInOldRole(SNode node, String oldRole) {
    return SNodeOperations.hasRole(node, "jetbrains.mps.lang.core.structure.BaseConcept", "_$attribute") && oldRole.equals(Attribute_Behavior.call_getOldAttributeRole_6407023681583030897(node));
  }

  public static Iterable<SNode> getAttributes(SNode node, final IAttributeDescriptor descriptor) {
    return ListSequence.fromList(SLinkOperations.getTargets(node, "_$attribute", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return descriptor.match(it);
      }
    });
  }

  public static SNode getAttribute(SNode node, IAttributeDescriptor descriptor) {
    Iterable<SNode> list = getAttributes(node, descriptor);
    // todo: error if more than 1 attribute found 
    return (Sequence.fromIterable(list).isEmpty() ?
      null :
      Sequence.fromIterable(list).first()
    );
  }

  public static SNode addAttribute(SNode node, IAttributeDescriptor descriptor, SNode value) {
    ListSequence.fromList(SLinkOperations.getTargets(node, "_$attribute", true)).addElement(value);
    descriptor.update(value);
    return value;
  }

  public static SNode insertAttribute(SNode node, SNode anchor, IAttributeDescriptor descriptor, SNode value) {
    node.insertChild(anchor, "_$attribute", value);
    descriptor.update(value);
    return value;
  }

  public static void deleteAttribute(SNode node, IAttributeDescriptor descriptor, SNode value) {
    List<SNode> list = new ArrayList<SNode>();
    ListSequence.fromList(list).addSequence(Sequence.fromIterable(getAttributes(node, descriptor)));
    for (SNode attribute : ListSequence.fromList(list)) {
      if (value == null || value == attribute) {
        SNodeOperations.deleteNode(attribute);
      }
    }
  }

  public static SNode setAttribute(SNode node, IAttributeDescriptor descriptor, SNode value) {
    Iterable<SNode> oldlist = getAttributes(node, descriptor);
    if (Sequence.fromIterable(oldlist).isEmpty()) {
      if ((value == null)) {
        return null;
      }
      addAttribute(node, descriptor, value);
    } else if ((value == null)) {
      deleteAttribute(node, descriptor, value);
    } else {
      // todo: error if more than 1 attribute found 
      descriptor.update(value);
    }
    return value;
  }

  public static List<SNode> getAttributeList(SNode node, IAttributeDescriptor descriptor) {
    return ((node == null) ?
      null :
      new AttributeOperations.AttributeList(node, descriptor)
    );
  }

  public static boolean isAttribute(SNode node) {
    return SNodeOperations.hasRole(node, "jetbrains.mps.lang.core.structure.BaseConcept", "_$attribute");
  }

  public static SNode createAndSetAttrbiute(SNode node, IAttributeDescriptor descriptor, String newConceptFqname) {
    return setAttribute(node, descriptor, (SNode) SModelOperations.createNewNode(SNodeOperations.getModel(node), newConceptFqname));
  }

  public static SNode createAndAddAttribute(SNode node, IAttributeDescriptor descriptor, String newConceptFqname) {
    return addAttribute(node, descriptor, (SNode) SModelOperations.createNewNode(SNodeOperations.getModel(node), newConceptFqname));
  }

  public static void $$$$$$$$$$$$$$$$$$$$() {
  }

  public static class AttributeList extends AbstractSNodeList {
    private IAttributeDescriptor myAttributeDescriptor;

    public AttributeList(SNode attributed, IAttributeDescriptor descriptor) {
      super(attributed, null, AttributeOperations.getAttribute(SNodeOperations.cast(attributed, "jetbrains.mps.lang.core.structure.BaseConcept"), descriptor));
      myAttributeDescriptor = descriptor;
    }

    protected void insertAfter(SNode node, SNode anchorNode) {
      AttributeOperations.insertAttribute(myReferenceContainer, anchorNode, myAttributeDescriptor, (SNode) node);
    }

    protected void doAddReference(SNode node) {
      AttributeOperations.addAttribute(myReferenceContainer, myAttributeDescriptor, (SNode) node);
    }

    protected void doRemoveReference(SNode node) {
      AttributeOperations.deleteAttribute(myReferenceContainer, myAttributeDescriptor, (SNode) node);
    }
  }
}
