package jetbrains.mps.lang.smodel.generator.smodelAdapter;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import java.util.ArrayList;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.util.Condition;
import jetbrains.mps.util.ConditionalIterable;
import jetbrains.mps.smodel.IScope;
import java.util.Collections;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.search.IsInstanceCondition;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class SModelOperations {
  public SModelOperations() {
  }

  public static List<SNode> getRoots(SModel model, final String conceptFqName) {
    if (model == null) {
      return new ArrayList<SNode>();
    }
    if (conceptFqName == null) {
      ArrayList<SNode> result = new ArrayList<SNode>();
      for (SNode root : model.roots()) {
        result.add(root);
      }
      return result;
    }
    GlobalScope scope = GlobalScope.getInstance();
    SNode concept = SModelUtil.findConceptDeclaration(conceptFqName, scope);
    if (concept == null) {
      return new ArrayList<SNode>();
    }
    List<SNode> list = new ArrayList<SNode>();
    Condition<SNode> cond = new Condition<SNode>() {
      public boolean met(SNode node) {
        return node.isInstanceOfConcept(conceptFqName);
      }
    };
    Iterable<SNode> iterable = new ConditionalIterable<SNode>(model.roots(), cond);
    for (SNode node : iterable) {
      list.add(node);
    }
    return list;
  }

  public static List<SNode> getRootsIncludingImported(SModel model, IScope scope, String conceptFqName) {
    if (model == null) {
      return Collections.emptyList();
    }
    if (conceptFqName == null) {
      return allRootsIncludingImported(model, scope);
    }
    AbstractConceptDeclaration concept = SModelUtil_new.findConceptDeclaration(conceptFqName, scope);
    if (concept == null) {
      return Collections.emptyList();
    }
    List<SNode> list = new ArrayList<SNode>();
    for (SNode node : allRootsIncludingImported(model, scope)) {
      if (node.isInstanceOfConcept(concept)) {
        list.add(node);
      }
    }
    return list;
  }

  public static List<SNode> getNodesIncludingImported(SModel model, IScope scope, String conceptFqName) {
    if (model == null) {
      return Collections.emptyList();
    }
    if (conceptFqName == null) {
      return allNodesIncludingImported(model, scope, new Condition<SNode>() {
        public boolean met(SNode n) {
          return true;
        }
      });
    }
    final SNode concept = SModelUtil.findConceptDeclaration(conceptFqName, scope);
    if (concept == null) {
      return Collections.emptyList();
    }
    return allNodesIncludingImported(model, scope, new IsInstanceCondition(concept));
  }

  private static List<SNode> allNodesIncludingImported(SModel sModel, IScope scope, Condition<SNode> condition) {
    List<SModel> modelsList = new ArrayList<SModel>();
    modelsList.add(sModel);
    List<SModelDescriptor> modelDescriptors = jetbrains.mps.smodel.SModelOperations.allImportedModels(sModel, scope);
    for (SModelDescriptor descriptor : modelDescriptors) {
      modelsList.add(descriptor.getSModel());
    }
    List<SNode> resultNodes = new ArrayList<SNode>();
    for (SModel aModel : modelsList) {
      Iterable<SNode> iter = new ConditionalIterable<SNode>(aModel.nodes(), condition);
      for (SNode node : iter) {
        resultNodes.add(node);
      }
    }
    return resultNodes;
  }

  private static List<SNode> allRootsIncludingImported(SModel sModel, IScope scope) {
    List<SModel> modelsList = new ArrayList<SModel>();
    modelsList.add(sModel);
    List<SModelDescriptor> modelDescriptors = jetbrains.mps.smodel.SModelOperations.allImportedModels(sModel, scope);
    for (SModelDescriptor descriptor : modelDescriptors) {
      modelsList.add(descriptor.getSModel());
    }
    List<SNode> resultNodes = new ArrayList<SNode>();
    for (SModel aModel : modelsList) {
      for (SNode root : aModel.roots()) {
        resultNodes.add(root);
      }
    }
    return resultNodes;
  }

  public static List<SNode> getNodes(SModel model, final String conceptFqName) {
    if (model == null) {
      return new ArrayList<SNode>();
    }
    if (conceptFqName != null) {
      return model.getFastNodeFinder().getNodes(conceptFqName, true);
    }
    List<SNode> result = new ArrayList<SNode>();
    for (SNode node : model.nodes()) {
      result.add(node);
    }
    return result;
  }

  public static SNode createNewNode(SModel model, String conceptFqName) {
    if (conceptFqName == null) {
      return null;
    }
    AbstractConceptDeclaration nodeConcept = SModelUtil_new.findConceptDeclaration(conceptFqName, GlobalScope.getInstance());
    if (nodeConcept instanceof InterfaceConceptDeclaration) {
      return new SNode(model, conceptFqName);
    }
    SNode result = SModelUtil_new.instantiateConceptDeclaration(conceptFqName, model, GlobalScope.getInstance(), false);
    if (result == null) {
      return null;
    }
    BehaviorManager.getInstance().initNode(result);
    return result;
  }

  @Deprecated
  public static SNode createNewNode(SModel model, String conceptFqName, SNode prototypeNode) {
    return createNewNode(model, conceptFqName);
  }

  public static SNode createNewRootNode(SModel model, String conceptFqName, SNode prototypeNode) {
    SNode newNode = createNewNode(model, conceptFqName);
    model.addRoot(newNode);
    return newNode;
  }

  public static SNode addRootNode(SModel model, SNode node) {
    if (model != null && node != null) {
      model.addRoot(node);
    }
    return node;
  }

  public static String getModelName(SModel model) {
    if (model == null) {
      return null;
    }
    return model.getLongName();
  }
}
