package jetbrains.mps.lang.smodel.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ModelReferenceExpression_Constraints extends BaseConstraintsDescriptor {
  public ModelReferenceExpression_Constraints() {
    super("jetbrains.mps.lang.smodel.structure.ModelReferenceExpression");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("fqName", new BasePropertyConstraintsDescriptor("fqName", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "fqName";
        if (StringUtils.isEmpty(SPropertyOperations.getString(node, "name"))) {
          return null;
        }
        return SPropertyOperations.getString(node, "name") + ((StringUtils.isEmpty(SPropertyOperations.getString(node, "stereotype")) ?
          "" :
          "@" + SPropertyOperations.getString(node, "stereotype")
        ));
      }
    });
    return properties;
  }
}
