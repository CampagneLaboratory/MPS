package jetbrains.mps.lang.smodel.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class SNodeTypeCastExpression_Behavior {
  private static Class[] PARAMETERS_2749027262099690841 = {SNode.class};

  public static void init(SNode thisNode) {
  }

  public static boolean call_isSNodeCast_1238686302573(SNode thisNode) {
    SNode leftType = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(thisNode, "leftExpression", true));
    return !(TypeChecker.getInstance().getSubtypingManager().isSubtype(leftType, new _Quotations.QuotationClass_4().createNode(), false)) || SNodeOperations.isInstanceOf(leftType, "jetbrains.mps.lang.smodel.structure.SNodeType");
  }

  public static String virtual_getPresentation_1213877396640(SNode thisNode) {
    return (SPropertyOperations.getBoolean(thisNode, "asCast") ?
      "as" :
      ":"
    );
  }

  public static String call_getPresentation_2749027262099690841(SNode thisNode) {
    return (String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression"), "virtual_getPresentation_1213877396640", PARAMETERS_2749027262099690841);
  }

  public static String callSuper_getPresentation_2749027262099690841(SNode thisNode, String callerConceptFqName) {
    return (String) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression"), callerConceptFqName, "virtual_getPresentation_1213877396640", PARAMETERS_2749027262099690841);
  }
}
