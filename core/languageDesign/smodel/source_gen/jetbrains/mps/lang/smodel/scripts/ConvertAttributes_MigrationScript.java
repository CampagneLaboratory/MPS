package jetbrains.mps.lang.smodel.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.behavior.ILinkAccess_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ConvertAttributes_MigrationScript extends BaseMigrationScript {
  private static Logger LOG = Logger.getLogger(ConvertAttributes_MigrationScript.class);

  public ConvertAttributes_MigrationScript(IOperationContext operationContext) {
    super("Convert Attributes (smodel)");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Convert smodel attribute access operations";
      }

      public String getAdditionalInfo() {
        return "Convert smodel attribute access operations";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.smodel.structure.AttributeAccessOperation";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SConceptOperations.isSubConceptOf(ILinkAccess_Behavior.call_getTargetConcept_4024382256428848859(node), "jetbrains.mps.lang.core.structure.Attribute");
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode target = ILinkAccess_Behavior.call_getTargetConcept_4024382256428848859(node);
        // build new AttributeAccess operation and replace old with it 
        SNode attr = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.AttributeAccess", null);
        if (SConceptOperations.isSubConceptOf(target, "jetbrains.mps.lang.core.structure.NodeAttribute")) {
          SNode qualifier = SNodeOperations.as(SLinkOperations.getTarget(node, "attributeQualifier", true), "jetbrains.mps.lang.smodel.structure.NodeAttributeAccessQualifier");
          // todo: check validity 
          SNode q = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.NodeAttributeQualifier", null);
          SLinkOperations.setTarget(q, "attributeConcept", (SNode) target, false);
          SLinkOperations.setTarget(attr, "qualifier", q, true);
        } else if (SConceptOperations.isSubConceptOf(target, "jetbrains.mps.lang.core.structure.PropertyAttribute")) {
          SNode qualifier = SNodeOperations.as(SLinkOperations.getTarget(node, "attributeQualifier", true), "jetbrains.mps.lang.smodel.structure.PropertyAttributeAccessQualifier");
          // todo: check validity 
          SNode q = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.PropertyAttributeQualifier", null);
          SLinkOperations.setTarget(q, "attributeConcept", (SNode) target, false);
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(qualifier, "propertyQualifier", true), "jetbrains.mps.lang.smodel.structure.PropertyRefQualifier")) {
            SNode prop = SNodeOperations.cast(SLinkOperations.getTarget(qualifier, "propertyQualifier", true), "jetbrains.mps.lang.smodel.structure.PropertyRefQualifier");
            SNode propQ = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.PropertyQualifier", null);
            SLinkOperations.setTarget(propQ, "property", SLinkOperations.getTarget(prop, "property", false), false);
            SLinkOperations.setTarget(q, "propertyQualifier", propQ, true);
          } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(qualifier, "propertyQualifier", true), "jetbrains.mps.lang.smodel.structure.PoundExpression")) {
            SLinkOperations.setTarget(q, "propertyQualifier", SNodeOperations.cast(SLinkOperations.getTarget(qualifier, "propertyQualifier", true), "jetbrains.mps.lang.smodel.structure.PoundExpression"), true);
          } else {
            LOG.error("!!!");
          }
          SLinkOperations.setTarget(attr, "qualifier", q, true);
        } else if (SConceptOperations.isSubConceptOf(target, "jetbrains.mps.lang.core.structure.LinkAttribute")) {
          SNode qualifier = SNodeOperations.as(SLinkOperations.getTarget(node, "attributeQualifier", true), "jetbrains.mps.lang.smodel.structure.LinkAttributeAccessQualifier");
          // todo: check validity 
          SNode q = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.LinkAttributeQualifier", null);
          SLinkOperations.setTarget(q, "attributeConcept", (SNode) target, false);
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(qualifier, "linkQualifier", true), "jetbrains.mps.lang.smodel.structure.LinkRefQualifier")) {
            SNode link = SNodeOperations.cast(SLinkOperations.getTarget(qualifier, "linkQualifier", true), "jetbrains.mps.lang.smodel.structure.LinkRefQualifier");
            SNode linkQ = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.LinkQualifier", null);
            SLinkOperations.setTarget(linkQ, "link", SLinkOperations.getTarget(link, "link", false), false);
            SLinkOperations.setTarget(q, "linkQualifier", linkQ, true);
          } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(qualifier, "linkQualifier", true), "jetbrains.mps.lang.smodel.structure.PoundExpression")) {
            SLinkOperations.setTarget(q, "linkQualifier", SNodeOperations.cast(SLinkOperations.getTarget(qualifier, "linkQualifier", true), "jetbrains.mps.lang.smodel.structure.PoundExpression"), true);
          } else {
            LOG.error("!!!");
          }
          SLinkOperations.setTarget(attr, "qualifier", q, true);
        } else {
          LOG.error("!!!");
        }
        SNodeOperations.replaceWithAnother(node, attr);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Convert smodel @<all> attribute access operation";
      }

      public String getAdditionalInfo() {
        return "Convert smodel @<all> attribute access operation";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.smodel.structure.AttributeAccessOperation";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "attributeQualifier", true), "jetbrains.mps.lang.smodel.structure.AllAttributesQualifier");
      }

      public void doUpdateInstanceNode(SNode node) {
        // build new AttributeAccess operation and replace old with it 
        SNode attr = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.AttributeAccess", null);
        SLinkOperations.setTarget(attr, "qualifier", SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.AllAttributeQualifier", null), true);
        SNodeOperations.replaceWithAnother(node, attr);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
