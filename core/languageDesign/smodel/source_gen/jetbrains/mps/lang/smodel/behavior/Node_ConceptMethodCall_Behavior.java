package jetbrains.mps.lang.smodel.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.baseLanguage.plugin.MethodCallParameters;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class Node_ConceptMethodCall_Behavior {

  public static void init(SNode thisNode) {
  }

  public static boolean call_isVirtualMethodCall_1213877437823(SNode thisNode) {
    return (Node_ConceptMethodCall_Behavior.call_getVirtualMethodDeclaration_1213877437832(thisNode) != null);
  }

  public static SNode call_getVirtualMethodDeclaration_1213877437832(SNode thisNode) {
    SNode methodDeclaration = SLinkOperations.getTarget(thisNode, "conceptMethodDeclaration", false);
    if ((SLinkOperations.getTarget(methodDeclaration, "overriddenMethod", false) != null)) {
      return SLinkOperations.getTarget(methodDeclaration, "overriddenMethod", false);
    } else
    if (SPropertyOperations.getBoolean(methodDeclaration, "isVirtual")) {
      return methodDeclaration;
    } else
    {
      return null;
    }
  }

  public static String virtual_getVariableExpectedName_1213877410087(SNode thisNode) {
    String variableExpectedName;
    variableExpectedName = SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "conceptMethodDeclaration", false), "name");
    if (variableExpectedName.startsWith("get")) {
      variableExpectedName = variableExpectedName.substring(3);
    } else
    if (variableExpectedName.startsWith("is")) {
      variableExpectedName = variableExpectedName.substring(2);
    }
    return NameUtil.decapitalize(variableExpectedName);
  }

  public static MethodCallParameters virtual_getMethodCallParameters_1223390672636(SNode thisNode) {
    final SNode node = thisNode;
    return new MethodCallParameters() {

      public SNode getDeclaration() {
        return SLinkOperations.getTarget(node, "conceptMethodDeclaration", false);
      }

      public SNode getMethodCall() {
        return SNodeOperations.getParent(node);
      }

      public List<SNode> getArguments() {
        return ListSequence.fromList(SLinkOperations.getTargets(node, "actualArgument", true)).toListSequence();
      }

      public SNode getOperand() {
        return SLinkOperations.getTarget(((SNode)SNodeOperations.getParent(node)), "operand", true);
      }

      public boolean isThisExpression(SNode node) {
        return SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.constraints.structure.ThisNodeExpression");
      }

    };
  }

}
