/*
 * Copyright 2003-2010 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.lang.smodel.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.baseLanguage.structure.StatementList;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class IfInstanceOfStatement extends Statement {
  public static final String concept = "jetbrains.mps.lang.smodel.structure.IfInstanceOfStatement";
  public static final String NODE_CONCEPT = "nodeConcept";
  public static final String NODE_EXPRESSION = "nodeExpression";
  public static final String BODY = "body";
  public static final String VARIABLE = "variable";

  public IfInstanceOfStatement(SNode node) {
    super(node);
  }

  public AbstractConceptDeclaration getNodeConcept() {
    return (AbstractConceptDeclaration) this.getReferent(AbstractConceptDeclaration.class, IfInstanceOfStatement.NODE_CONCEPT);
  }

  public void setNodeConcept(AbstractConceptDeclaration node) {
    super.setReferent(IfInstanceOfStatement.NODE_CONCEPT, node);
  }

  public Expression getNodeExpression() {
    return (Expression) this.getChild(Expression.class, IfInstanceOfStatement.NODE_EXPRESSION);
  }

  public void setNodeExpression(Expression node) {
    super.setChild(IfInstanceOfStatement.NODE_EXPRESSION, node);
  }

  public StatementList getBody() {
    return (StatementList) this.getChild(StatementList.class, IfInstanceOfStatement.BODY);
  }

  public void setBody(StatementList node) {
    super.setChild(IfInstanceOfStatement.BODY, node);
  }

  public IfInstanceOfVariable getVariable() {
    return (IfInstanceOfVariable) this.getChild(IfInstanceOfVariable.class, IfInstanceOfStatement.VARIABLE);
  }

  public void setVariable(IfInstanceOfVariable node) {
    super.setChild(IfInstanceOfStatement.VARIABLE, node);
  }

  public static IfInstanceOfStatement newInstance(SModel sm, boolean init) {
    return (IfInstanceOfStatement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.IfInstanceOfStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static IfInstanceOfStatement newInstance(SModel sm) {
    return IfInstanceOfStatement.newInstance(sm, false);
  }
}
