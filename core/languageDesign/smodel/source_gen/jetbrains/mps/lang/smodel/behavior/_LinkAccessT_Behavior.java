package jetbrains.mps.lang.smodel.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.behavior.Type_Behavior;
import jetbrains.mps.baseLanguage.behavior.IInternalType_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.behavior._Quotations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class _LinkAccessT_Behavior {

  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getClassExpression_1213877337357(SNode thisNode) {
    return Type_Behavior.call_getClassExpression_1213877337357(IInternalType_Behavior.call_getPublicType_1213877443338(thisNode));
  }

  public static SNode virtual_getPublicType_1213877443338(SNode thisNode) {
    if (SPropertyOperations.getBoolean(thisNode, "singularCradinality")) {
      return new _Quotations.QuotationClass_2().createNode(SLinkOperations.getTarget(thisNode, "targetConcept", false));
    }
    return new _Quotations.QuotationClass_3().createNode(SLinkOperations.getTarget(thisNode, "targetConcept", false));
  }

  public static String virtual_getPresentation_1213877396640(SNode thisNode) {
    StringBuilder sb = new StringBuilder("[access to ");
    if (SPropertyOperations.getBoolean(thisNode, "aggregation")) {
      if (SPropertyOperations.getBoolean(thisNode, "singularCradinality")) {
        sb.append("child ");
      } else
      {
        sb.append("children ");
      }
    } else
    {
      sb.append("referent ");
    }
    sb.append("node<").append(SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "targetConcept", false), "name")).append(">]");
    return sb.toString();
  }

}
