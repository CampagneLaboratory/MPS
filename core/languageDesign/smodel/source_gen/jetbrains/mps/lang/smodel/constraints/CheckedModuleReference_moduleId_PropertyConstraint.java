package jetbrains.mps.lang.smodel.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodePropertyGetter;
import jetbrains.mps.smodel.constraints.INodePropertySetter;
import jetbrains.mps.smodel.constraints.INodePropertyValidator;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;

public class CheckedModuleReference_moduleId_PropertyConstraint implements IModelConstraints, INodePropertyGetter, INodePropertySetter, INodePropertyValidator {
  public CheckedModuleReference_moduleId_PropertyConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodePropertyGetter("jetbrains.mps.lang.smodel.structure.CheckedModuleReference", "moduleId", this);
    manager.registerNodePropertySetter("jetbrains.mps.lang.smodel.structure.CheckedModuleReference", "moduleId", this);
    manager.registerNodePropertyValidator("jetbrains.mps.lang.smodel.structure.CheckedModuleReference", "moduleId", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodePropertyGetter("jetbrains.mps.lang.smodel.structure.CheckedModuleReference", "moduleId");
    manager.unRegisterNodePropertySetter("jetbrains.mps.lang.smodel.structure.CheckedModuleReference", "moduleId");
    manager.unRegisterNodePropertyValidator("jetbrains.mps.lang.smodel.structure.CheckedModuleReference", "moduleId");
  }

  public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
    String original = SPropertyOperations.getString(node, "moduleId");
    if (StringUtils.isEmpty(original)) {
      return original;
    }
    ModuleReference moduleReference = ModuleReference.fromString(original);
    IModule module = MPSModuleRepository.getInstance().getModule(moduleReference);
    return (module != null ?
      module.getModuleFqName() :
      moduleReference.getModuleFqName()
    );
  }

  public void execPropertySet(final SNode node, final String propertyName, final String propertyValue, final IScope scope) {
    IModule module = MPSModuleRepository.getInstance().getModuleByUID((SPropertyOperations.getString(propertyValue)));
    SPropertyOperations.set(node, "moduleId", module.getModuleReference().toString());
  }

  public boolean checkPropertyValue(final SNode node, final String propertyName, final String propertyValue, final IScope scope) {
    IModule module = MPSModuleRepository.getInstance().getModuleByUID((SPropertyOperations.getString(propertyValue)));
    return module != null;
  }
}
