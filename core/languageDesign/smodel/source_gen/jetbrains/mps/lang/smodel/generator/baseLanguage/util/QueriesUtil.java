package jetbrains.mps.lang.smodel.generator.baseLanguage.util;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.baseLanguage.util.SModelLanguageUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.collections.internal.query.ListOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.PropertySupport;
import jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration;
import jetbrains.mps.lang.structure.structure.DataTypeDeclaration;
import jetbrains.mps.smodel.PropertySupportUtil;
import jetbrains.mps.smodel.DataTypeUtil;
import jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration;
import jetbrains.mps.lang.smodel.structure.SNodeOperation;
import jetbrains.mps.lang.smodel.structure.OperationParm_Concept;
import jetbrains.mps.lang.smodel.structure.OperationParm_ConceptList;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.lang.structure.behavior.EnumerationDataTypeDeclaration_Behavior;
import jetbrains.mps.util.NameUtil;

public class QueriesUtil {

  public static List<SNode> getNodeOperation_ConceptList_concepts(SNode operation) {
    SNode parm_ConceptList = ((SNode)SModelLanguageUtil.findNodeOperationParameter(operation, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.OperationParm_ConceptList")));
    List<SNode> result = ListOperations.<SNode>createList();
    for(SNode cRef : ListSequence.fromList(SLinkOperations.getTargets(parm_ConceptList, "concept", true))) {
      if (SLinkOperations.getTarget(cRef, "concept", false) != null) {
        ListSequence.fromList(result).addElement(SLinkOperations.getTarget(cRef, "concept", false));
      }
    }
    return result;
  }

  public static boolean operationHasParm_Inclusion(SNode inputNode) {
    return SModelLanguageUtil.findNodeOperationParameter(inputNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.OperationParm_Inclusion")) != null;
  }

  public static boolean operationHasParm_Root(SNode inputNode) {
    return SModelLanguageUtil.findNodeOperationParameter(inputNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.OperationParm_Root")) != null;
  }

  public static SNode get_SConceptPropertyAccess_GetMethod(SNode operation, IScope scope) {
    String methodName = "getString";
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(operation, "conceptProperty", false), "jetbrains.mps.lang.structure.structure.IntegerConceptPropertyDeclaration")) {
      methodName = "getInteger";
    } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(operation, "conceptProperty", false), "jetbrains.mps.lang.structure.structure.BooleanConceptPropertyDeclaration")) {
      methodName = "getBoolean";
    }
    SNode operationClass = ((SNode)SModelUtil.findNodeByFQName("jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations", SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"), scope));
    for(SNode method : ListSequence.fromList(SLinkOperations.getTargets(operationClass, "staticMethod", true))) {
      if (methodName.equals(SPropertyOperations.getString(method, "name"))) {
        return method;
      }
    }
    return null;
  }

  public static SNode get_SPropertyAccess_simple_getterMethod(SNode operation, IScope scope) {
    SNode datatype = SLinkOperations.getTarget(SLinkOperations.getTarget(operation, "property", false), "dataType", false);
    String methodName = "getString";
    if (SNodeOperations.isInstanceOf(datatype, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration")) {
      if (PropertySupport.isInteger(((PrimitiveDataTypeDeclaration)((DataTypeDeclaration)SNodeOperations.getAdapter(datatype))))) {
        methodName = "getInteger";
      } else if (PropertySupport.isBoolean(((PrimitiveDataTypeDeclaration)((DataTypeDeclaration)SNodeOperations.getAdapter(datatype))))) {
        methodName = "getBoolean";
      }
    }
    SNode operationClass = ((SNode)SModelUtil.findNodeByFQName("jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations", SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"), scope));
    for(SNode method : ListSequence.fromList(SLinkOperations.getTargets(operationClass, "staticMethod", true))) {
      if (methodName.equals(SPropertyOperations.getString(method, "name"))) {
        return method;
      }
    }
    return null;
  }

  public static SNode get_SPropertyAccess_enum_getterMethod(SNode operation, IScope scope) {
    SNode datatype = SLinkOperations.getTarget(SLinkOperations.getTarget(operation, "property", false), "dataType", false);
    SNode primitiveDatatype = SLinkOperations.getTarget((((SNode)datatype)), "memberDataType", false);
    String methodName = "getString_def";
    if (PropertySupportUtil.isInteger(((PrimitiveDataTypeDeclaration)SNodeOperations.getAdapter(primitiveDatatype)))) {
      methodName = "getInteger_def";
    } else if (PropertySupportUtil.isBoolean(((PrimitiveDataTypeDeclaration)SNodeOperations.getAdapter(primitiveDatatype)))) {
      methodName = "getBoolean_def";
    }
    SNode operationClass = ((SNode)SModelUtil.findNodeByFQName("jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations", SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"), scope));
    for(SNode method : ListSequence.fromList(SLinkOperations.getTargets(operationClass, "staticMethod", true))) {
      if (methodName.equals(SPropertyOperations.getString(method, "name"))) {
        return method;
      }
    }
    return null;
  }

  public static String get_SPropertyAccess_enum_defaultValue(SNode operation) {
    return DataTypeUtil.getDefaultMember((EnumerationDataTypeDeclaration)((DataTypeDeclaration)SNodeOperations.getAdapter(SLinkOperations.getTarget(SLinkOperations.getTarget(operation, "property", false), "dataType", false)))).getInternalValue();
  }

  public static boolean nodeOp_noParm_conceptList(SNode op) {
    Object parm = jetbrains.mps.lang.smodel.SModelLanguageUtil.findNodeOperationParameter(((SNodeOperation)SNodeOperations.getAdapter(op)), OperationParm_Concept.class);
    if (parm != null) {
      return true;
    }
    parm = jetbrains.mps.lang.smodel.SModelLanguageUtil.findNodeOperationParameter(((SNodeOperation)SNodeOperations.getAdapter(op)), OperationParm_ConceptList.class);
    return parm == null;
  }

  public static boolean nodeOp_hasParm_conceptList(SNode op) {
    Object parm = jetbrains.mps.lang.smodel.SModelLanguageUtil.findNodeOperationParameter(((SNodeOperation)SNodeOperations.getAdapter(op)), OperationParm_Concept.class);
    if (parm != null) {
      return false;
    }
    parm = jetbrains.mps.lang.smodel.SModelLanguageUtil.findNodeOperationParameter(((SNodeOperation)SNodeOperations.getAdapter(op)), OperationParm_ConceptList.class);
    return parm != null;
  }

  public static boolean isProperty_hasValueEnum_notNullDefaultValue(SNode op, ITemplateGenerator generator) {
    SNode dataTypeDeclaration = jetbrains.mps.lang.smodel.behavior.SModelLanguageUtil.getDatatypeFromLeft_SPropertyAccess(op);
    SNode defMember = EnumerationDataTypeDeclaration_Behavior.call_getDefaultMember_1213877397785(SNodeOperations.cast(dataTypeDeclaration, "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration"));
    return SPropertyOperations.getString(defMember, "internalValue") != null;
  }

  public static boolean isProperty_hasValueEnum_nullDefaultValue(SNode op, ITemplateGenerator generator) {
    SNode datatype = jetbrains.mps.lang.smodel.behavior.SModelLanguageUtil.getDatatypeFromLeft_SPropertyAccess(op);
    SNode defMemberNode = EnumerationDataTypeDeclaration_Behavior.call_getDefaultMember_1213877397785(SNodeOperations.cast(datatype, "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration"));
    return SPropertyOperations.getString(defMemberNode, "internalValue") == null;
  }

  public static String getConceptFqName(SNode concept) {
    return NameUtil.nodeFQName(concept);
  }

}
