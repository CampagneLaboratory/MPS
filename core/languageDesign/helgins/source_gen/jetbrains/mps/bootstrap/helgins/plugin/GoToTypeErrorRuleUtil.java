package jetbrains.mps.bootstrap.helgins.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.helgins.inference.IErrorReporter;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.ide.IEditor;
import jetbrains.mps.ide.EditorsPane;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelUID;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.navigation.NavigationActionProcessor;
import jetbrains.mps.ide.navigation.EditorNavigationCommand;

public class GoToTypeErrorRuleUtil {

  public static void goToTypeErrorRule(IOperationContext context, IErrorReporter error, Logger LOG) {
    IEditor currentEditor = context.getComponent(EditorsPane.class).getCurrentEditor();
    String ruleID = error.getRuleId();
    String ruleModel = error.getRuleModel();
    SModelDescriptor modelDescriptor = SModelRepository.getInstance().getModelDescriptor(SModelUID.fromString(ruleModel));
    if (modelDescriptor == null) {
      LOG.error("can't find rule's model" + ruleModel);
      return;
    }
    SNode rule = modelDescriptor.getSModel().getNodeById(ruleID);
    if (rule == null) {
      LOG.error("can't find rule with id " + ruleID + " in the model " + modelDescriptor);
    }
    NavigationActionProcessor.executeNavigationAction(new EditorNavigationCommand(rule, currentEditor, context.getComponent(EditorsPane.class)), context.getProject(), true);
  }

}
