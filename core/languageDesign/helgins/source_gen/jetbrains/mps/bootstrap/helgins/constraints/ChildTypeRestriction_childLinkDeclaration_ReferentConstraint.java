package jetbrains.mps.bootstrap.helgins.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.bootstrap.structureLanguage.constraints.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.smodel.search.SimpleSearchScope;

public class ChildTypeRestriction_childLinkDeclaration_ReferentConstraint implements IModelConstraints, INodeReferentSearchScopeProvider {

  public ChildTypeRestriction_childLinkDeclaration_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.bootstrap.helgins.structure.ChildTypeRestriction", "childLinkDeclaration", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.bootstrap.helgins.structure.ChildTypeRestriction", "childLinkDeclaration");
  }

  public boolean canCreateNodeReferentSearchScope(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    return true;
  }

  public ISearchScope createNodeReferentSearchScope(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    SNode inferenceRule = SNodeOperations.getParent(_context.getEnclosingNode(), null, false, false);
    SNode abstractConceptDeclaration = ApplicableNodeCondition_Behavior.call_getApplicableConcept_1212576937269(SLinkOperations.getTarget(inferenceRule, "applicableNode", true));
    List<SNode> declarations = new ArrayList<SNode>();
    SNode current = abstractConceptDeclaration;
    while((current != null)) {
      ListSequence.fromList(declarations).addSequence(ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getAggregationLinkDeclarations_1212184463482(current)));
    }
    return new SimpleSearchScope(declarations);
  }

  public String getNodeReferentSearchScopeDescription() {
    return "<no description>";
  }

}
