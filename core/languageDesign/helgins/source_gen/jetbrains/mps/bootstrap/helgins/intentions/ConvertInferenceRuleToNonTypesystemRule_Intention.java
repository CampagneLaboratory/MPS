package jetbrains.mps.bootstrap.helgins.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.workbench.editors.MPSEditorOpener;

public class ConvertInferenceRuleToNonTypesystemRule_Intention extends BaseIntention {

  public String getConcept() {
    return "jetbrains.mps.bootstrap.helgins.structure.InferenceRule";
  }

  public boolean isErrorIntention() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "convert to non-typesystem rule";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    List<SNode> descendants = SNodeOperations.getDescendantsWhereConceptInList(node, new String[]{"jetbrains.mps.bootstrap.helgins.structure.AbstractEquationStatement","jetbrains.mps.bootstrap.helgins.structure.GivetypeStatement","jetbrains.mps.bootstrap.helgins.structure.TypeVarDeclaration","jetbrains.mps.bootstrap.helgins.structure.TypeVarReference","jetbrains.mps.bootstrap.helgins.structure.TypeOfExpression","jetbrains.mps.bootstrap.helgins.structure.WhenConcreteStatement"}, false);
    return ListSequence.fromList(descendants).isEmpty();
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode nonTypesystemRule = SModelOperations.createNewRootNode(SNodeOperations.getModel(node), "jetbrains.mps.bootstrap.helgins.structure.NonTypesystemRule", null);
    SPropertyOperations.set(nonTypesystemRule, "overrides", "" + (SPropertyOperations.getBoolean(node, "overrides")));
    SPropertyOperations.set(nonTypesystemRule, "name", SPropertyOperations.getString(node, "name"));
    SLinkOperations.setTarget(nonTypesystemRule, "body", SNodeOperations.copyNode(SLinkOperations.getTarget(node, "body", true)), true);
    SLinkOperations.setTarget(nonTypesystemRule, "applicableNode", SNodeOperations.copyNode(SLinkOperations.getTarget(node, "applicableNode", true)), true);
    for(SNode applicableNodeReference : SNodeOperations.getDescendants(SLinkOperations.getTarget(nonTypesystemRule, "body", true), "jetbrains.mps.bootstrap.helgins.structure.ApplicableNodeReference", false)) {
      if (SLinkOperations.getTarget(applicableNodeReference, "applicableNode", false) == SLinkOperations.getTarget(node, "applicableNode", true)) {
        SLinkOperations.setTarget(applicableNodeReference, "applicableNode", SLinkOperations.getTarget(nonTypesystemRule, "applicableNode", true), false);
      }
    }
    SNodeOperations.deleteNode(node);
    IOperationContext operationContext = editorContext.getOperationContext();
    operationContext.getComponent(MPSEditorOpener.class).openNode(nonTypesystemRule);
  }

  public String getLocationString() {
    return "jetbrains.mps.bootstrap.helgins.intentions";
  }

}
