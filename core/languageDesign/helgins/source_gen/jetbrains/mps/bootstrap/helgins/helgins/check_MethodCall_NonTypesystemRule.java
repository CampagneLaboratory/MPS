package jetbrains.mps.bootstrap.helgins.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_MethodCall_NonTypesystemRule implements NonTypesystemRule_Runtime {

  public  check_MethodCall_NonTypesystemRule() {
  }

  public void applyRule(final SNode baseMethodCall) {
    for(SNode annotationInstance : SLinkOperations.getTargets(SLinkOperations.getTarget(baseMethodCall, "baseMethodDeclaration", false), "annotation", true)) {
      if(SLinkOperations.getTarget(annotationInstance, "annotation", false) == SLinkOperations.getTarget(new QuotationClass_18().createNode(), "classifier", false)) {
        if(!(RulesUtil.withinInferenceItem(baseMethodCall))) {
          TypeChecker.getInstance().reportTypeError(baseMethodCall, "inference method should be called only within inference rules", "jetbrains.mps.bootstrap.helgins.helgins", "1196178341653");
        }
        return;
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.BaseMethodCall";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
