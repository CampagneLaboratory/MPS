package jetbrains.mps.bootstrap.helgins.structure;

/*Generated by MPS */

import jetbrains.mps.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class SimpleRulesContainer extends BaseConcept {
  public static final String concept = "jetbrains.mps.bootstrap.helgins.structure.SimpleRulesContainer";
  public static String SIMPLE_RULE = "simpleRule";

  public SimpleRulesContainer(SNode node) {
    super(node);
  }

  public int getSimpleRulesCount() {
    return this.getChildCount(SimpleRulesContainer.SIMPLE_RULE);
  }

  public Iterator<SimpleRule> simpleRules() {
    return this.children(SimpleRulesContainer.SIMPLE_RULE);
  }

  public List<SimpleRule> getSimpleRules() {
    return this.getChildren(SimpleRulesContainer.SIMPLE_RULE);
  }

  public void addSimpleRule(SimpleRule node) {
    this.addChild(SimpleRulesContainer.SIMPLE_RULE, node);
  }

  public void insertSimpleRule(SimpleRule prev, SimpleRule node) {
    this.insertChild(prev, SimpleRulesContainer.SIMPLE_RULE, node);
  }


  public static SimpleRulesContainer newInstance(SModel sm, boolean init) {
    return (SimpleRulesContainer)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bootstrap.helgins.structure.SimpleRulesContainer", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static SimpleRulesContainer newInstance(SModel sm) {
    return SimpleRulesContainer.newInstance(sm, false);
  }

}
