package jetbrains.mps.bootstrap.helgins.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.Iterator;
import java.util.List;

public class MatchStatement extends Statement {
  public static final String concept = "jetbrains.mps.bootstrap.helgins.structure.MatchStatement";
  public static String EXPRESSION = "expression";
  public static String IF_FALSE_STATEMENT = "ifFalseStatement";
  public static String ITEM = "item";

  public  MatchStatement(SNode node) {
    super(node);
  }

  public static MatchStatement newInstance(SModel sm, boolean init) {
    return ((MatchStatement)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bootstrap.helgins.structure.MatchStatement", sm, GlobalScope.getInstance(), init).getAdapter());
  }

  public static MatchStatement newInstance(SModel sm) {
    return MatchStatement.newInstance(sm, false);
  }


  public Expression getExpression() {
    return ((Expression)this.getChild(MatchStatement.EXPRESSION));
  }

  public void setExpression(Expression node) {
    super.setChild(MatchStatement.EXPRESSION, node);
  }

  public Statement getIfFalseStatement() {
    return ((Statement)this.getChild(MatchStatement.IF_FALSE_STATEMENT));
  }

  public void setIfFalseStatement(Statement node) {
    super.setChild(MatchStatement.IF_FALSE_STATEMENT, node);
  }

  public int getItemsCount() {
    return this.getChildCount(MatchStatement.ITEM);
  }

  public Iterator<MatchStatementItem> items() {
    return this.children(MatchStatement.ITEM);
  }

  public List<MatchStatementItem> getItems() {
    return this.getChildren(MatchStatement.ITEM);
  }

  public void addItem(MatchStatementItem node) {
    this.addChild(MatchStatement.ITEM, node);
  }

  public void insertItem(MatchStatementItem prev, MatchStatementItem node) {
    this.insertChild(prev, MatchStatement.ITEM, node);
  }

}
