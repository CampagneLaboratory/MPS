package jetbrains.mps.dataFlow.runtime;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.framework.DataFlowAnalyzer;
import java.util.Map;
import jetbrains.mps.lang.dataFlow.framework.AnalysisDirection;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.Set;
import jetbrains.mps.lang.dataFlow.framework.ProgramState;
import jetbrains.mps.lang.dataFlow.framework.instructions.WriteInstruction;
import jetbrains.mps.lang.dataFlow.framework.instructions.VariableValueInstruction;

public class NullableAnalyzer <T> implements DataFlowAnalyzer<Map<T, NullableVariableState>> {

  public NullableAnalyzer() {
  }

  public AnalysisDirection getDirection() {
    return AnalysisDirection.FORWARD;
  }

  public Map<T, NullableVariableState> initial(Program p) {
    Map<T, NullableVariableState> result = MapSequence.fromMap(new HashMap<T, NullableVariableState>());
    for(Object var : SetSequence.fromSet(p.getVariables())) {
      MapSequence.fromMap(result).put(((T)var), NullableVariableState.NOT_INIT);
    }
    return result;
  }

  public Map<T, NullableVariableState> merge(Program program, Set<Map<T, NullableVariableState>> values) {
    Map<T, NullableVariableState> result = this.initial(program);
    for(Object var : SetSequence.fromSet(program.getVariables())) {
      T variable = (T)var;
      for(Map<T, NullableVariableState> value : SetSequence.fromSet(values)) {
        MapSequence.fromMap(result).put(variable, MapSequence.fromMap(result).get(variable).merge(MapSequence.fromMap(value).get(variable)));
      }
    }
    return result;
  }

  public Map<T, NullableVariableState> fun(Map<T, NullableVariableState> input, ProgramState state) {
    Map<T, NullableVariableState> result = MapSequence.fromMap(new HashMap<T, NullableVariableState>());
    result.putAll(input);
    if (state.getInstruction() instanceof WriteInstruction) {
      WriteInstruction write = (WriteInstruction)state.getInstruction();
      NullableVariableState value = ((NullableVariableState)write.getValue());
      T variable = (T)write.getVariable();
      if (value == null) {
        MapSequence.fromMap(result).put(variable, NullableVariableState.UNKNOWN);
      } else
      {
        MapSequence.fromMap(result).put(variable, value);
      }
    }
    if (state.getInstruction() instanceof VariableValueInstruction) {
      VariableValueInstruction varValue = (VariableValueInstruction)state.getInstruction();
      NullableVariableState value = varValue.getValue();
      T variable = (T)varValue.getVariable();
      if (value != null) {
        MapSequence.fromMap(result).put(variable, value);
      }
    }
    return result;
  }

}
