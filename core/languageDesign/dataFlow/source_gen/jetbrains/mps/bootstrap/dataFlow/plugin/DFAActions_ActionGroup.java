package jetbrains.mps.bootstrap.dataFlow.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.BaseActionGroup;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.action.ActionManager;
import jetbrains.mps.ide.action.IActionGroupElementOwner;
import jetbrains.mps.ide.action.ActionGroup;
import jetbrains.mps.ide.actions.EditorInternal_ActionGroup;

public class DFAActions_ActionGroup extends BaseActionGroup {
  public static Logger LOG = Logger.getLogger(DFAActions_ActionGroup.class);
  public static final String ID = "jetbrains.mps.bootstrap.dataFlow.plugin.DFAActions";

  public  DFAActions_ActionGroup(MPSProject project) {
    super("", DFAActions_ActionGroup.ID);
    this.setInternal(false);
    try {
      this.add(new PrintDFAResult_Action(project), this);
      this.add(new PrintInitializationInformation_Action(project), this);
      this.add(new ShowDFA_Action(project), this);
    } catch (Throwable t) {
      DFAActions_ActionGroup.LOG.error("User group error", t);
    }
  }

  public void adjust(ActionManager manager, IActionGroupElementOwner owner) {
    {
      ActionGroup gTo = manager.getGroup(EditorInternal_ActionGroup.ID);
      ActionGroup gWhat = manager.getGroup(DFAActions_ActionGroup.ID);
      if (gTo == null || gWhat == null) {
        return;
      }
      gTo.addEveryFrom(gWhat, owner);
    }
  }

}
