package jetbrains.mps.bootstrap.dataFlow.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.search.SimpleSearchScope;

public class LabelPosition_label_ReferentConstraint implements IModelConstraints, INodeReferentSearchScopeProvider {

  public LabelPosition_label_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.bootstrap.dataFlow.structure.LabelPosition", "label", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.bootstrap.dataFlow.structure.LabelPosition", "label");
  }

  public ISearchScope createNodeReferentSearchScope(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    List<SNode> labels = new ArrayList<SNode>();
    SNode builder = SNodeOperations.getAncestor(_context.getEnclosingNode(), "jetbrains.mps.bootstrap.dataFlow.structure.DataFlowBuilderDeclaration", true, false);
    ListSequence.fromList(labels).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(builder, "jetbrains.mps.bootstrap.dataFlow.structure.EmitLabelStatement", true)));
    return new SimpleSearchScope(labels);
  }

}
