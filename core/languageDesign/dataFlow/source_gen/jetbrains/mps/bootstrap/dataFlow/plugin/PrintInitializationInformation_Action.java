package jetbrains.mps.bootstrap.dataFlow.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.CurrentProjectMPSAction;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.action.ActionContext;
import jetbrains.mps.dataFlow.framework.Program;
import jetbrains.mps.dataFlow.DataFlowManager;
import jetbrains.mps.dataFlow.framework.AnalysisResult;
import java.util.Set;
import jetbrains.mps.dataFlow.framework.analyzers.InitializedVariablesAnalyzer;

public class PrintInitializationInformation_Action extends CurrentProjectMPSAction {
  public static final Logger LOG = Logger.getLogger(PrintInitializationInformation_Action.class);

  private SNode node;
  private boolean isAlwaysVisible = false;

  public  PrintInitializationInformation_Action(MPSProject project) {
    super(project, "Print DFA Initialization Information");
  }

  @NotNull()
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull() ActionContext context) {
    try {
      super.doUpdate(context);
      if (!(this.fillFieldsIfNecessary(context))) {
        this.setEnabled(false);
        this.setVisible(this.isAlwaysVisible);
        return;
      }
      this.setEnabled(true);
      this.setVisible(true);
    } catch (Throwable t) {
      PrintInitializationInformation_Action.LOG.error("User's action doUpdate method failed. Action:" + "PrintInitializationInformation", t);
      this.setEnabled(false);
      this.setVisible(this.isAlwaysVisible);
    }
  }

  private boolean fillFieldsIfNecessary(ActionContext context) {
    try {
      {
        SNode node = context.getNode();
        if (node != null) {
        }
        this.node = node;
        /*
          if (!(<!IsSubtypeExpression TextGen not found!>)) {
            return false;
          }
        */
      }
      if (this.node == null) {
        return false;
      }
    } catch (Throwable t) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() ActionContext context) {
    try {
      if (!(this.fillFieldsIfNecessary(context))) {
        return;
      }
      {
        Program program = DataFlowManager.getInstance().buildProgramFor(this.node);
        AnalysisResult<Set<Object>> result = program.analyze(new InitializedVariablesAnalyzer());
        System.out.println(result.toString());
      }
    } catch (Throwable t) {
      PrintInitializationInformation_Action.LOG.error("User's action execute method failed. Action:" + "PrintInitializationInformation", t);
    }
  }

}
