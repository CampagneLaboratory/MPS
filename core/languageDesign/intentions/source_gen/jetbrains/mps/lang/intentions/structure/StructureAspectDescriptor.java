package jetbrains.mps.lang.intentions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.ConceptRegistry;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    switch ((conceptFqName).hashCode()) {
      case -713206842:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.IntentionDeclaration", new String[]{"jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration"}, new String[]{"jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.ICheckedNamePolicy", "jetbrains.mps.lang.structure.structure.IConceptAspect", "jetbrains.mps.lang.core.structure.INamedConcept"});
      case -488683575:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.DescriptionBlock", new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
      case 599031500:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.IsApplicableBlock", new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
      case 1103938544:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.ExecuteBlock", new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
      case -328333184:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_node", new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
      case 1264391293:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.QueryBlock", new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
      case -417352459:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.IntentionParameter", new String[]{"jetbrains.mps.baseLanguage.structure.Expression"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
      case 1572281711:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.ParameterizedIntentionDeclaration", new String[]{"jetbrains.mps.lang.intentions.structure.IntentionDeclaration"}, new String[]{"jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration", "jetbrains.mps.lang.intentions.structure.IntentionDeclaration"}, new String[]{"jetbrains.mps.lang.plugin.structure.ICheckedNamePolicy", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.structure.structure.IConceptAspect", "jetbrains.mps.lang.core.structure.INamedConcept"});
      case -198052079:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.ChildFilterBlock", new String[]{}, new String[]{}, new String[]{});
      case -1133772076:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.ChildFilterFunction", new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.lang.intentions.structure.ChildFilterBlock"}, new String[]{"jetbrains.mps.lang.intentions.structure.ChildFilterBlock"}, new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
      case 226602368:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_childNode", new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
      case -619229129:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.plugin.structure.ICheckedNamePolicy", "jetbrains.mps.lang.structure.structure.IConceptAspect"}, new String[]{}, new String[]{"jetbrains.mps.lang.plugin.structure.ICheckedNamePolicy", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.structure.structure.IConceptAspect", "jetbrains.mps.lang.core.structure.INamedConcept"});
      case -1468598053:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.GenerateIntentionDeclaration", new String[]{"jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration"}, new String[]{"jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.ICheckedNamePolicy", "jetbrains.mps.lang.structure.structure.IConceptAspect", "jetbrains.mps.lang.core.structure.INamedConcept"});
      case 789005578:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.SurroundWithIntentionDeclaration", new String[]{"jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration"}, new String[]{"jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.ICheckedNamePolicy", "jetbrains.mps.lang.structure.structure.IConceptAspect", "jetbrains.mps.lang.core.structure.INamedConcept"});
      case -1332584164:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.ExecuteUIBlock", new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
      case -706594644:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.IntentionContextParameterDeclaration", new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"});
      case -238295015:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.intentions.structure.IntentionContextParamReference", new String[]{"jetbrains.mps.baseLanguage.structure.Expression"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
      default:
        return null;
    }
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private ImmutableSet<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String[] parents, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, ancestorsInLanguage, ancestorsNotInLanguage);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static ImmutableSet<String> getAncestors(String conceptFqName, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      ArrayList<String> result = new ArrayList(ancestorsInLanguage.length + 1);

      for (String ancestor : ancestorsInLanguage) {
        result.add(ancestor);
      }

      result.add(conceptFqName);
      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : ancestorsNotInLanguage) {
        result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
      }
      return ImmutableSet.copyOf(result);
    }
  }
}
