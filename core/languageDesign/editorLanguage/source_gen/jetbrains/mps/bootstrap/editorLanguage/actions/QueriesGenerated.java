package jetbrains.mps.bootstrap.editorLanguage.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstitutePreconditionContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.editorLanguage.CellMenuUtil;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.util.Calculable;
import jetbrains.mps.bootstrap.editorLanguage.constraints.BaseEditorComponent_Behavior;
import jetbrains.mps.smodel.action.*;
import jetbrains.mps.bootstrap.editorLanguage.structure.CellActionId;

public class QueriesGenerated {

  public static boolean nodeSubstituteActionsBuilder_Precondition_CellMenuPart_Abstract_1199894693230(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _parameterObject) {
    SNode editedFeature = CellMenuUtil.getEditedFeature(_parameterObject.getParentNode());
    return SNodeOperations.isInstanceOf(editedFeature, "jetbrains.mps.bootstrap.structureLanguage.structure.PropertyDeclaration");
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_CellMenuPart_Abstract_1199894948366(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _parameterObject) {
    SNode editedFeature = CellMenuUtil.getEditedFeature(_parameterObject.getParentNode());
    return SNodeOperations.isInstanceOf(editedFeature, "jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration") && SPropertyOperations.hasValue(editedFeature, "metaClass", null, null);
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_CellMenuPart_Abstract_1199895015796(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _parameterObject) {
    SNode editedFeature = CellMenuUtil.getEditedFeature(_parameterObject.getParentNode());
    return SNodeOperations.isInstanceOf(editedFeature, "jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration") && SPropertyOperations.hasValue(editedFeature, "metaClass", "aggregation", null);
  }

  public static void nodeFactory_NodeSetup_CellModel_Property_1158947460473(final IOperationContext operationContext, final NodeSetupContext _parameterObject) {
    SNode parentRefCell = SNodeOperations.getAncestor(_parameterObject.getEnclosingNode(), "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_RefCell", true, false);
    if(parentRefCell != null) {
      SPropertyOperations.set(_parameterObject.getNewNode(), "readOnly", "" + (true));
    }
  }

  public static void nodeFactory_NodeSetup_CellModel_Collection_1159287296419(final IOperationContext operationContext, final NodeSetupContext _parameterObject) {
    if(SNodeOperations.isInstanceOf(_parameterObject.getEnclosingNode(), "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Collection")) {
      SPropertyOperations.set(_parameterObject.getNewNode(), "selectable", "false");
    }
    if(SNodeOperations.isInstanceOf(_parameterObject.getSampleNode(), "jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel")) {
      SNode innerNode = SNodeOperations.copyNode(_parameterObject.getSampleNode());
      SLinkOperations.addChild(_parameterObject.getNewNode(), "childCellModel", innerNode);
      if(SNodeOperations.isInstanceOf(innerNode, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Collection")) {
        SPropertyOperations.set(innerNode, "selectable", "false");
      }
    }
  }

  public static void nodeFactory_NodeSetup_CellModel_Alternation_1165441265076(final IOperationContext operationContext, final NodeSetupContext _parameterObject) {
    SPropertyOperations.set(_parameterObject.getNewNode(), "vertical", "" + (true));
    if(SNodeOperations.isInstanceOf(_parameterObject.getSampleNode(), "jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel")) {
      SLinkOperations.setTarget(_parameterObject.getNewNode(), "ifTrueCellModel", SNodeOperations.copyNode(_parameterObject.getSampleNode()), true);
    }
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_CellMenuPart_Abstract_1199894656684(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _parameterObject) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.CellMenuPart_PropertyValues", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope());
      result.addAll(defaultActions);
    }
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.CellMenuPart_PropertyPostfixHints", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope());
      result.addAll(defaultActions);
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_CellMenuPart_Abstract_1199894924671(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _parameterObject) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.CellMenuPart_ReferentPrimary", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope());
      result.addAll(defaultActions);
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_CellMenuPart_Abstract_1199895015795(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _parameterObject) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.CellMenuPart_ReplaceChild_Group", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope());
      result.addAll(defaultActions);
    }
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.CellMenuPart_ReplaceChild_Item", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope());
      result.addAll(defaultActions);
    }
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.CellMenuPart_ReplaceChild_CustomChildConcept", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope());
      result.addAll(defaultActions);
    }
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.CellMenuPart_ReplaceChildPrimary", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope());
      result.addAll(defaultActions);
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_EditorCellModel_1177585776510(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _parameterObject) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode result = SConceptOperations.createNewNode("jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Collection", _parameterObject.getCurrentTargetNode());
          SPropertyOperations.set(result, "vertical", "" + (true));
          return result;
        }

        public String getMatchingText(String pattern) {
          return "collection (vertical)";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Collection", _parameterObject.getCurrentTargetNode());
          SPropertyOperations.set(result, "vertical", "" + (true));
          if((SNodeOperations.getAncestor(_parameterObject.getParentNode(), "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Collection", true, false) != null)) {
            SPropertyOperations.set(result, "selectable", "false");
          }
          return result;
        }

        public String getDescriptionText(String pattern) {
          return "collection (vertical)";
        }

        public String getMatchingText(String pattern) {
          return "[/";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Collection", _parameterObject.getCurrentTargetNode());
          SPropertyOperations.set(result, "vertical", "" + (false));
          return result;
        }

        public String getMatchingText(String pattern) {
          return "collection (horizontal)";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Collection", _parameterObject.getCurrentTargetNode());
          SPropertyOperations.set(result, "vertical", "" + (false));
          if((SNodeOperations.getAncestor(_parameterObject.getParentNode(), "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Collection", true, false) != null)) {
            SPropertyOperations.set(result, "selectable", "false");
          }
          return result;
        }

        public String getDescriptionText(String pattern) {
          return "collection (horizontal)";
        }

        public String getMatchingText(String pattern) {
          return "[>";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Collection", _parameterObject.getCurrentTargetNode());
          SPropertyOperations.set(result, "vertical", "" + (false));
          SNode indent = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Indent", null);
          SPropertyOperations.set(indent, "selectable", "false");
          SLinkOperations.insertChildFirst(result, "childCellModel", indent);
          if((SNodeOperations.getAncestor(_parameterObject.getParentNode(), "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Collection", true, false) != null)) {
            SPropertyOperations.set(result, "selectable", "false");
          }
          return result;
        }

        public String getDescriptionText(String pattern) {
          return "collection (with indent)";
        }

        public String getMatchingText(String pattern) {
          return "[_";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_RefNodeList", _parameterObject.getCurrentTargetNode());
          SPropertyOperations.set(result, "vertical", "" + (true));
          return result;
        }

        public String getMatchingText(String pattern) {
          return "ref.node list (vertical)";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_RefNodeList", _parameterObject.getCurrentTargetNode());
          SPropertyOperations.set(result, "vertical", "" + (true));
          if(SNodeOperations.isInstanceOf(_parameterObject.getParentNode(), "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Collection")) {
            SPropertyOperations.set(result, "selectable", "false");
          }
          return result;
        }

        public String getDescriptionText(String pattern) {
          return "ref.node list (vertical)";
        }

        public String getMatchingText(String pattern) {
          return "(/";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_RefNodeList", _parameterObject.getCurrentTargetNode());
          SPropertyOperations.set(result, "vertical", "" + (false));
          return result;
        }

        public String getMatchingText(String pattern) {
          return "ref.node list (horizontal)";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_RefNodeList", _parameterObject.getCurrentTargetNode());
          SPropertyOperations.set(result, "vertical", "" + (false));
          if(SNodeOperations.isInstanceOf(_parameterObject.getParentNode(), "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Collection")) {
            SPropertyOperations.set(result, "selectable", "false");
          }
          return result;
        }

        public String getDescriptionText(String pattern) {
          return "ref.node list (horizontal)";
        }

        public String getMatchingText(String pattern) {
          return "(>";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          return SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_RefCell", _parameterObject.getCurrentTargetNode());
        }

        public String getMatchingText(String pattern) {
          return "ref.cell";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          return SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_RefNode", _parameterObject.getCurrentTargetNode());
        }

        public String getMatchingText(String pattern) {
          return "ref.node";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          return SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Property", _parameterObject.getCurrentTargetNode());
        }

        public String getMatchingText(String pattern) {
          return "property";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_ConceptProperty", _parameterObject.getCurrentTargetNode());
          SPropertyOperations.set(result, "editable", "false");
          return result;
        }

        public String getMatchingText(String pattern) {
          return "concept property";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Alternation", _parameterObject.getCurrentTargetNode());
          return result;
        }

        public String getDescriptionText(String pattern) {
          return "alternation";
        }

        public String getMatchingText(String pattern) {
          return "if";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Constant", _parameterObject.getCurrentTargetNode());
          SPropertyOperations.set(result, "text", NameUtil.stripQuotes(pattern, "\"", "\""));
          return result;
        }

        public boolean hasSubstitute() {
          return true;
        }

        public boolean canSubstitute_internal(String pattern) {
          return pattern.startsWith("\"");
        }

        public String getDescriptionText(String pattern) {
          return "constant";
        }

        public String getMatchingText(String pattern) {
          return pattern;
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode result = SConceptOperations.createNewNode("jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Error", _parameterObject.getCurrentTargetNode());
          SPropertyOperations.set(result, "text", NameUtil.stripQuotes(pattern, "!", "!"));
          return result;
        }

        public boolean hasSubstitute() {
          return true;
        }

        public boolean canSubstitute_internal(String pattern) {
          return pattern.startsWith("!");
        }

        public String getDescriptionText(String pattern) {
          return "Error label";
        }

        public String getMatchingText(String pattern) {
          return pattern;
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          SNode container = SNodeOperations.getAncestor(_parameterObject.getParentNode(), "jetbrains.mps.bootstrap.editorLanguage.structure.BaseEditorComponent", true, false);
          return BaseEditorComponent_Behavior.call_getApplicableComponents_1199449552893(container, operationContext.getScope());
        }

      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      assert queryResult != null;
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode component = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Component", null);
            SLinkOperations.setTarget(component, "editorComponent", ((SNode)this.getParameterObject()), false);
            return component;
          }

          public String getMatchingText(String pattern) {
            return "#" + SPropertyOperations.getString(((SNode)this.getParameterObject()), "name") + "#";
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_CellActionMapItem_1185874474095(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _parameterObject) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.editorLanguage.structure.CellActionMapItem", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          return CellActionId.getConstants();
        }

      };
      Iterable<CellActionId> queryResult = (Iterable)calc.calculate();
      assert queryResult != null;
      for(CellActionId item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, _parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), _parameterObject.getChildSetter(), operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.editorLanguage.structure.CellActionMapItem", _parameterObject.getCurrentTargetNode());
            SPropertyOperations.set(newNode, "actionId", ((CellActionId)this.getParameterObject()).getValue());
            return newNode;
          }

          public String getMatchingText(String pattern) {
            return ((CellActionId)this.getParameterObject()).getName();
          }

        });
      }
    }
    return result;
  }

}
