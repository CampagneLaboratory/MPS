package jetbrains.mps.bootstrap.editorLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.style.AttributeCalculator;
import java.awt.Color;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.MPSColors;

public class Styles_StyleSheet {
  public static final Style STYLE = getStyle(null); 
  public static final Style REFERENCE = getReference(null);
  public static final Style ITEM = getItem(null);
  public static final Style HEADER = getHeader(null);
  public static final Style PROPERTY = getProperty(null);

  public static Style getStyle(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

          public Color calculate(EditorCell cell) {
            return Styles_StyleSheet.calculateColor7582_4(cell);
          }

        });
      }

    };
  }

  public static Style getReference(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

          public Color calculate(EditorCell cell) {
            return Styles_StyleSheet.calculateColor7582_0(cell);
          }

        });
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return Styles_StyleSheet.calculateFontStyle7582_0(cell);
          }

        });
      }

    };
  }

  public static Style getItem(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return Styles_StyleSheet.calculateFontStyle7582_1(cell);
          }

        });
        this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

          public Color calculate(EditorCell cell) {
            return Styles_StyleSheet.calculateColor7582_1(cell);
          }

        });
      }

    };
  }

  public static Style getHeader(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return Styles_StyleSheet.calculateFontStyle7582_2(cell);
          }

        });
        this.set(StyleAttributes.SELECTABLE, false);
        this.set(StyleAttributes.UNDERLINED, new AttributeCalculator <Boolean>() {

          public Boolean calculate(EditorCell cell) {
            return Styles_StyleSheet.calculateUnderlined7582_0(cell);
          }

        });
        this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

          public Color calculate(EditorCell cell) {
            return Styles_StyleSheet.calculateColor7582_2(cell);
          }

        });
      }

    };
  }

  public static Style getProperty(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.SELECTABLE, false);
        this.set(StyleAttributes.DRAW_BORDER, true);
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return Styles_StyleSheet.calculateFontStyle7582_3(cell);
          }

        });
        this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

          public Color calculate(EditorCell cell) {
            return Styles_StyleSheet.calculateColor7582_3(cell);
          }

        });
      }

    };
  }

  private static Integer calculateFontStyle7582_0(EditorCell cell) {
    int result;
    result = MPSFonts.ITALIC;
    return result;
  }

  private static Integer calculateFontStyle7582_1(EditorCell cell) {
    int result;
    result = MPSFonts.ITALIC;
    return result;
  }

  private static Integer calculateFontStyle7582_2(EditorCell cell) {
    int result;
    result = MPSFonts.BOLD;
    return result;
  }

  private static Integer calculateFontStyle7582_3(EditorCell cell) {
    int result;
    result = MPSFonts.PLAIN;
    return result;
  }

  private static Color calculateColor7582_0(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_BLUE;
    return result;
  }

  private static Color calculateColor7582_1(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_GREEN;
    return result;
  }

  private static Color calculateColor7582_2(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_GREEN;
    return result;
  }

  private static Color calculateColor7582_3(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_MAGENTA;
    return result;
  }

  private static Color calculateColor7582_4(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_GREEN;
    return result;
  }

  private static boolean calculateUnderlined7582_0(EditorCell cell) {
    boolean result;
    result = true;
    return result;
  }

}
