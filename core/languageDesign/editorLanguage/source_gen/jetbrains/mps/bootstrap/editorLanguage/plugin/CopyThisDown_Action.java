package jetbrains.mps.bootstrap.editorLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.structureLanguage.constraints.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.bootstrap.structureLanguage.constraints.LinkDeclaration_Behavior;
import jetbrains.mps.ide.action.ActionContext;
import jetbrains.mps.ide.action.CurrentProjectMPSAction;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;

public class CopyThisDown_Action extends CurrentProjectMPSAction {
  public static final Logger LOG = Logger.getLogger(CopyThisDown_Action.class);

  private SNode inputNode;
  private boolean isAlwaysVisible = false;

  public CopyThisDown_Action(MPSProject project) {
    super(project, "Duplicate Node");
  }

  @NotNull()
  public String getKeyStroke() {
    return "ctrl D";
  }

  public void doUpdate(@NotNull()ActionContext context) {
    try {
      super.doUpdate(context);
      if (!(this.fillFieldsIfNecessary(context))) {
        this.setEnabled(false);
        this.setVisible(this.isAlwaysVisible);
        return;
      }
      this.setEnabled(true);
      this.setVisible(true);
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "CopyThisDown", t);
      this.setEnabled(false);
      this.setVisible(this.isAlwaysVisible);
    }
  }

  private boolean fillFieldsIfNecessary(ActionContext context) {
    try {
      {
        SNode node = context.getNode();
        if (node != null) {
        }
        this.inputNode = node;
        /*
          if (!(<!IsSubtypeExpression TextGen not found!>)) {
            return false;
          }
        */
      }
      if (this.inputNode == null) {
        return false;
      }
    } catch (Throwable t) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final ActionContext context) {
    try {
      if (!(this.fillFieldsIfNecessary(context))) {
        return;
      }
      performExecution(context);
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "CopyThisDown", t);
    }
  }

  private void performExecution(ActionContext context) {
    SNode nodeToCopy = this.inputNode;
    while (SNodeOperations.getParent(nodeToCopy, null, false, false) != null) {
      SNode parent = SNodeOperations.getParent(nodeToCopy, null, false, false);
      String role = nodeToCopy.getRole_();
      SNode link = AbstractConceptDeclaration_Behavior.call_findLinkDeclaration_1212193671949(SNodeOperations.getConceptDeclaration(parent), role);
      if (link == null) {
        return;
      }
      if (!(LinkDeclaration_Behavior.call_isSingular_1205275061212(link))) {
        SNode copy = SNodeOperations.copyNode(nodeToCopy);
        parent.insertChild(nodeToCopy, role, copy);
        return;
      }
      nodeToCopy = parent;
    }
  }

}
