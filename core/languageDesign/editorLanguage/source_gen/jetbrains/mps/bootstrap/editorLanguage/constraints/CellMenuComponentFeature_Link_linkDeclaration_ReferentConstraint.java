package jetbrains.mps.bootstrap.editorLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.search.ISearchScope;
import java.util.List;
import jetbrains.mps.smodel.search.SModelSearchUtil_new;
import jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.search.SimpleSearchScope;
import jetbrains.mps.smodel.BaseAdapter;

public class CellMenuComponentFeature_Link_linkDeclaration_ReferentConstraint implements IModelConstraints, INodeReferentSearchScopeProvider {

  public  CellMenuComponentFeature_Link_linkDeclaration_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.bootstrap.editorLanguage.structure.CellMenuComponentFeature_Link", "relationDeclaration", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.bootstrap.editorLanguage.structure.CellMenuComponentFeature_Link", "relationDeclaration");
  }

  public boolean canCreateNodeReferentSearchScope(SModel model, SNode enclosingNode, SNode referenceNode, IScope scope) {
    return SLinkOperations.getTarget(SNodeOperations.getAncestor(enclosingNode, "jetbrains.mps.bootstrap.editorLanguage.structure.CellMenuComponent", true, false), "conceptDeclaration", false) != null;
  }

  public ISearchScope createNodeReferentSearchScope(final SModel model, final SNode enclosingNode, final SNode referenceNode, final IScope scope) {
    SNode editorComponent = SNodeOperations.getAncestor(enclosingNode, "jetbrains.mps.bootstrap.editorLanguage.structure.CellMenuComponent", true, false);
    SNode editedConcept = SLinkOperations.getTarget(editorComponent, "conceptDeclaration", false);
    List links = SModelSearchUtil_new.getLinkDeclarationsExcludingOverridden(((AbstractConceptDeclaration)SNodeOperations.getAdapter(editedConcept)));
    return new SimpleSearchScope(BaseAdapter.toNodes(links));
  }

  public String getNodeReferentSearchScopeDescription() {
    return "links declared in edited concept' hierarchy and not overridden";
  }

}
