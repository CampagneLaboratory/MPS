package jetbrains.mps.bootstrap.editorLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_Empty;
import jetbrains.mps.bootstrap.editorLanguage.behavior.EditorCellModel_Behavior;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.style.AttributeCalculator;
import java.awt.Color;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;

public class _CloseTag extends AbstractCellProvider {

  public _CloseTag(SNode node) {
    super(node);
  }

  public EditorCell createEditorCell(EditorContext context) {
    return this.createEditorCell(context, this.getSNode());
  }

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createModelAccess1176716918272(context, node);
  }

  public EditorCell createModelAccess1176716918272(EditorContext context, SNode node) {
    ModelAccessor modelAccessor = this._modelAcessorFactory_1176716918272(context, node);
    EditorCell_Property editorCell = EditorCell_Property.create(context, modelAccessor, node);
    editorCell.setAction(CellActionType.DELETE, new CellAction_Empty());
    setupBasic_ModelAccess_11767169182721176716918272(editorCell, node, context);
    setupLabel_ModelAccess_1176716918272_1176716918272(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public ModelAccessor _modelAcessorFactory_1176716918272(final EditorContext editorContext, final SNode node) {
    return new ModelAccessor() {

      public String getText() {
        return EditorCellModel_Behavior.call_getClosingTag_1220340488560(node);
      }

      public void setText(String text) {
      }

      public boolean isValidText(String text) {
        return true;
      }

    };
  }


  private static void setupBasic_ModelAccess_11767169182721176716918272(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.putUserObject(EditorCell.CELL_ID, "ModelAccess_1176716918272");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.BACKGROUND_COLOR, new AttributeCalculator <Color>() {

            public Color calculate(EditorCell cell) {
              return _CloseTag.calculateColor6449_0(cell);
            }

          });
          this.set(StyleAttributes.EDITABLE, false);
          this.set(StyleAttributes.DRAW_BORDER, true);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupLabel_ModelAccess_1176716918272_1176716918272(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static Color _null_1214396913636(SNode node, EditorContext editorContext) {
    return _EditorUtil.grayIfNotSelectable(node);
  }

  private static Color calculateColor6449_0(EditorCell cell) {
    Color result;
    result = _CloseTag._null_1214396913636(cell.getSNode(), cell.getEditorContext());
    return result;
  }

}
