package jetbrains.mps.bootstrap.editorLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.BaseActionGroup;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.action.IActionGroupElementOwner;
import jetbrains.mps.ide.action.ActionGroup;
import jetbrains.mps.ide.actions.EditorPopup_ActionGroup;
import jetbrains.mps.ide.actions.Edit_ActionGroup;

public class EditorActions_ActionGroup extends BaseActionGroup {
  public static Logger LOG = Logger.getLogger(EditorActions_ActionGroup.class);
  public static final String ID = "jetbrains.mps.bootstrap.editorLanguage.plugin.EditorActions";

  public EditorActions_ActionGroup(MPSProject project) {
    super("", EditorActions_ActionGroup.ID, project);
    this.setInternal(false);
    try {
      this.add(new CopyThisDown_Action(project), this);
    } catch (Throwable t) {
      EditorActions_ActionGroup.LOG.error("User group error", t);
    }
  }

  public void adjust(IActionGroupElementOwner owner) {
    {
      ActionGroup gTo = this.getGroup(EditorPopup_ActionGroup.ID);
      ActionGroup gWhat = this.getGroup(EditorActions_ActionGroup.ID);
      if (gTo == null || gWhat == null) {
        return;
      }
      gTo.addEveryFrom(gWhat, owner);
    }
    {
      ActionGroup gTo = this.getGroup(Edit_ActionGroup.ID);
      ActionGroup gWhat = this.getGroup(EditorActions_ActionGroup.ID);
      if (gTo == null || gWhat == null) {
        return;
      }
      {
        String labelName;
        labelName = Edit_ActionGroup.LABEL_ID_custom;
        gTo.addEveryFrom(gWhat, owner, labelName);
      }
    }
  }

}
