package jetbrains.mps.lang.test.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandlerElementKeyMap;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class AssertMatch_Editor extends DefaultNodeEditor {

  /* package */AbstractCellListHandler myListHandler_1211979504028;
  /* package */AbstractCellListHandler myListHandler_1211979534640;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection1211979486899(context, node);
  }

  public EditorCell createCollection1211979486899(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12119794868991211979486899(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1211979491120(context, node, "assert"));
    editorCell.addEditorCell(this.createConstant1211982195991(context, node, "<"));
    editorCell.addEditorCell(this.createRefNodeList1211979504028(context, node));
    editorCell.addEditorCell(this.createConstant1211982206915(context, node, ">"));
    editorCell.addEditorCell(this.createConstant1211979524795(context, node, " match"));
    editorCell.addEditorCell(this.createConstant1211982223918(context, node, "<"));
    editorCell.addEditorCell(this.createRefNodeList1211979534640(context, node));
    editorCell.addEditorCell(this.createConstant1211982237875(context, node, ">"));
    editorCell.addEditorCell(this.createConstant1211979547001(context, node, ";"));
    return editorCell;
  }

  public EditorCell createConstant1211979491120(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12119794911201211979491120(editorCell, node, context);
    setupLabel_Constant_1211979491120_1211979491120(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1211979524795(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12119795247951211979524795(editorCell, node, context);
    setupLabel_Constant_1211979524795_1211979524795(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1211979547001(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12119795470011211979547001(editorCell, node, context);
    setupLabel_Constant_1211979547001_1211979547001(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1211982195991(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12119821959911211982195991(editorCell, node, context);
    setupLabel_Constant_1211982195991_1211982195991(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1211982206915(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12119822069151211982206915(editorCell, node, context);
    setupLabel_Constant_1211982206915_1211982206915(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1211982223918(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12119822239181211982223918(editorCell, node, context);
    setupLabel_Constant_1211982223918_1211982223918(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1211982237875(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12119822378751211982237875(editorCell, node, context);
    setupLabel_Constant_1211982237875_1211982237875(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createRefNodeList1211979504028(EditorContext context, SNode node) {
    if (this.myListHandler_1211979504028 == null) {
      this.myListHandler_1211979504028 = new AssertMatch_Editor.beforeListHandler_9939_0(node, "before", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1211979504028.createCells(context, new CellLayout_Horizontal(), false);
    setupBasic_refNodeList_before1211979504028(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.putUserObject(EditorCell.ROLE, this.myListHandler_1211979504028.getElementRole());
    return editorCell;
  }

  public EditorCell createRefNodeList1211979534640(EditorContext context, SNode node) {
    if (this.myListHandler_1211979534640 == null) {
      this.myListHandler_1211979534640 = new AssertMatch_Editor.afterListHandler_9939_0(node, "after", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1211979534640.createCells(context, new CellLayout_Horizontal(), false);
    setupBasic_refNodeList_after1211979534640(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.putUserObject(EditorCell.ROLE, this.myListHandler_1211979534640.getElementRole());
    return editorCell;
  }


  private static void setupBasic_Collection_12119794868991211979486899(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1211979486899");
  }

  private static void setupBasic_Constant_12119794911201211979491120(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1211979491120");
    transformationTest_StyleSheet.getAssertStyle(editorCell).apply(editorCell);
  }

  private static void setupBasic_refNodeList_before1211979504028(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_before");
  }

  private static void setupBasic_Constant_12119795247951211979524795(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1211979524795");
    transformationTest_StyleSheet.getAssertStyle(editorCell).apply(editorCell);
  }

  private static void setupBasic_refNodeList_after1211979534640(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_after");
  }

  private static void setupBasic_Constant_12119795470011211979547001(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1211979547001");
  }

  private static void setupBasic_Constant_12119821959911211982195991(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1211982195991");
    BaseLanguageStyle_StyleSheet.getLeftParen(editorCell).apply(editorCell);
  }

  private static void setupBasic_Constant_12119822069151211982206915(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1211982206915");
    BaseLanguageStyle_StyleSheet.getRightParen(editorCell).apply(editorCell);
  }

  private static void setupBasic_Constant_12119822239181211982223918(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1211982223918");
    BaseLanguageStyle_StyleSheet.getLeftParen(editorCell).apply(editorCell);
  }

  private static void setupBasic_Constant_12119822378751211982237875(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1211982237875");
    BaseLanguageStyle_StyleSheet.getRightParen(editorCell).apply(editorCell);
  }

  private static void setupLabel_Constant_1211979491120_1211979491120(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_before_1211979504028(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1211979524795_1211979524795(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_after_1211979534640(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1211979547001_1211979547001(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1211982195991_1211982195991(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1211982206915_1211982206915(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1211982223918_1211982223918(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1211982237875_1211982237875(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static class beforeListHandler_9939_0 extends RefNodeListHandler {

    public beforeListHandler_9939_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
          elementCell.addKeyMap(new RefNodeListHandlerElementKeyMap(this, ","));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      {
        EditorCell_Constant editorCell = new EditorCell_Constant(context, this.getOwner(), ",");
        editorCell.setSelectable(false);
        return editorCell;
      }
    }

}
  public static class afterListHandler_9939_0 extends RefNodeListHandler {

    public afterListHandler_9939_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
          elementCell.addKeyMap(new RefNodeListHandlerElementKeyMap(this, ","));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      {
        EditorCell_Constant editorCell = new EditorCell_Constant(context, this.getOwner(), ",");
        editorCell.setSelectable(false);
        return editorCell;
      }
    }

}

}
