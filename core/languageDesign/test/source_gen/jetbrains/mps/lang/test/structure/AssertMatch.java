/*
 * Copyright 2003-2009 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.lang.test.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AssertMatch extends Statement {
  public static final String concept = "jetbrains.mps.lang.test.structure.AssertMatch";
  public static final String BEFORE = "before";
  public static final String AFTER = "after";

  public AssertMatch(SNode node) {
    super(node);
  }

  public int getBeforesCount() {
    return this.getChildCount(AssertMatch.BEFORE);
  }

  public Iterator<Expression> befores() {
    return this.children(Expression.class, AssertMatch.BEFORE);
  }

  public List<Expression> getBefores() {
    return this.getChildren(Expression.class, AssertMatch.BEFORE);
  }

  public void addBefore(Expression node) {
    this.addChild(AssertMatch.BEFORE, node);
  }

  public void insertBefore(Expression prev, Expression node) {
    this.insertChild(prev, AssertMatch.BEFORE, node);
  }

  public int getAftersCount() {
    return this.getChildCount(AssertMatch.AFTER);
  }

  public Iterator<Expression> afters() {
    return this.children(Expression.class, AssertMatch.AFTER);
  }

  public List<Expression> getAfters() {
    return this.getChildren(Expression.class, AssertMatch.AFTER);
  }

  public void addAfter(Expression node) {
    this.addChild(AssertMatch.AFTER, node);
  }

  public void insertAfter(Expression prev, Expression node) {
    this.insertChild(prev, AssertMatch.AFTER, node);
  }


  public static AssertMatch newInstance(SModel sm, boolean init) {
    return (AssertMatch)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.test.structure.AssertMatch", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AssertMatch newInstance(SModel sm) {
    return AssertMatch.newInstance(sm, false);
  }

}
