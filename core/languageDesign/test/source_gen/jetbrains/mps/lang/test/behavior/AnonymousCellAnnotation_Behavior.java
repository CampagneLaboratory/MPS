package jetbrains.mps.lang.test.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.ide.IEditor;
import junit.framework.Assert;

public class AnonymousCellAnnotation_Behavior {

  public static void init(SNode thisNode) {
  }

  public static void call_setupSelection_6268941039745707957(final SNode thisNode, final EditorComponent editorComponent, final SNode node) {
    final Wrappers._T<EditorCell> cellWithId = new Wrappers._T<EditorCell>();
    ModelAccess.instance().runReadAction(new Runnable() {

      public void run() {
        cellWithId.value = editorComponent.findCellWithId(node, SPropertyOperations.getString(thisNode, "cellId"));
        if (cellWithId.value instanceof EditorCell_Label) {
          EditorCell_Label label = (EditorCell_Label)cellWithId.value;
          label.setCaretPosition(AnonymousCellAnnotation_Behavior.call_getCaretPosition_6268941039745717986(thisNode, label));
          label.setSelectionStart(SPropertyOperations.getInteger(thisNode, "selectionStart"));
          label.setSelectionEnd(SPropertyOperations.getInteger(thisNode, "selectionEnd"));
        }
        if (cellWithId.value == null) {
          throw new RuntimeException("No cell " + thisNode);
        }
      }
    });
    editorComponent.changeSelection(cellWithId.value);
  }

  public static int call_getCaretPosition_6268941039745717986(SNode thisNode, EditorCell_Label label) {
    if (SPropertyOperations.getBoolean(thisNode, "isLastPosition")) {
      return label.getText().length();
    } else
    {
      return SPropertyOperations.getInteger(thisNode, "caretPosition");
    }
  }

  public static void call_assertEditor_6268941039745719581(SNode thisNode, IEditor editor) {
    EditorCell selectedCell = editor.getSelectedCell();
    Assert.assertEquals(selectedCell.getCellId(), SPropertyOperations.getString(thisNode, "cellId"));
    if (selectedCell instanceof EditorCell_Label) {
      EditorCell_Label label = (EditorCell_Label)selectedCell;
      Assert.assertEquals(SPropertyOperations.getInteger(thisNode, "selectionStart"), label.getSelectionStart());
      Assert.assertEquals(SPropertyOperations.getInteger(thisNode, "selectionEnd"), label.getSelectionEnd());
    }
  }

}
