/*
 * Copyright 2003-2008 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.lang.test.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class NodeOperationsContainer extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.test.structure.NodeOperationsContainer";
  public static final String OPERATIONS = "operations";

  public NodeOperationsContainer(SNode node) {
    super(node);
  }

  public int getOperationsesCount() {
    return this.getChildCount(NodeOperationsContainer.OPERATIONS);
  }

  public Iterator<NodeOperation> operationses() {
    return this.children(NodeOperationsContainer.OPERATIONS);
  }

  public List<NodeOperation> getOperationses() {
    return this.getChildren(NodeOperationsContainer.OPERATIONS);
  }

  public void addOperations(NodeOperation node) {
    this.addChild(NodeOperationsContainer.OPERATIONS, node);
  }

  public void insertOperations(NodeOperation prev, NodeOperation node) {
    this.insertChild(prev, NodeOperationsContainer.OPERATIONS, node);
  }


  public static NodeOperationsContainer newInstance(SModel sm, boolean init) {
    return (NodeOperationsContainer)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.test.structure.NodeOperationsContainer", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static NodeOperationsContainer newInstance(SModel sm) {
    return NodeOperationsContainer.newInstance(sm, false);
  }

}
