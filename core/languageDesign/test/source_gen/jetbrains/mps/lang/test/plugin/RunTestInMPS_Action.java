package jetbrains.mps.lang.test.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.logging.Logger;
import javax.swing.Icon;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.workbench.MPSDataKeys;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestCase_Behavior;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestMethod_Behavior;
import java.lang.reflect.Method;
import jetbrains.mps.smodel.SModelDescriptor;

public class RunTestInMPS_Action extends GeneratedAction {
  public static final Logger LOG = Logger.getLogger(RunTestInMPS_Action.class);
  public static final Icon ICON = null;

  private SModel model;
  private SNode node;
  public MPSProject project;

  public RunTestInMPS_Action() {
    super("Run test in MPS process", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull()
  public String getKeyStroke() {
    return "";
  }

  public boolean isApplicable(AnActionEvent event) {
    return SNodeOperations.isInstanceOf(RunTestInMPS_Action.this.node, "jetbrains.mps.lang.test.structure.NodesTestCase");
  }

  public void doUpdate(@NotNull() AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "RunTestInMPS", t);
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    if (event.getData(MPSDataKeys.MODEL_DESCRIPTOR) == null) {
      return false;
    }
    this.model = event.getData(MPSDataKeys.MODEL_DESCRIPTOR).getSModel();
    if (this.model == null) {
      return false;
    }
    {
      SNode node = event.getData(MPSDataKeys.SNODE);
      if (node != null) {
      }
      this.node = node;
    }
    if (this.node == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.MPS_PROJECT);
    if (this.project == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      final Set<SNode> tests = new HashSet<SNode>();
      tests.addAll(ListSequence.fromList(ITestCase_Behavior.call_getTestSet_1216130724401(RunTestInMPS_Action.this.node)).toListSequence());
      for(SNode test : tests) {
        RunTestInMPS_Action.this.runTest(test);
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "RunTestInMPS", t);
    }
  }

  /* package */void runTest(final SNode test) {
    try {
      final String className = ITestCase_Behavior.call_getClassName_1216136193905(ITestMethod_Behavior.call_getTestCase_1216134500045(test));
      final String testName = ITestMethod_Behavior.call_getTestName_1216136419751(test);
      System.out.println("Test " + className + "." + testName);
      final Class c = RunTestInMPS_Action.this.model.getModelDescriptor().getModule().getClass(ITestCase_Behavior.call_getClassName_1216136193905(ITestMethod_Behavior.call_getTestCase_1216134500045(test)));
      Method method = c.getMethod("setModelDescriptor", SModelDescriptor.class, MPSProject.class);
      final Object obj = c.newInstance();
      method.invoke(obj, RunTestInMPS_Action.this.model.getModelDescriptor(), RunTestInMPS_Action.this.project);
      final Method testMethod = c.getMethod("runTest", String.class, String.class);
      Thread thread = new Thread(new Runnable() {

        public void run() {
          try {
            testMethod.invoke(obj, className + "$TestBody", "body" + testName);
          } catch (Exception e) {
            e.printStackTrace();
          }
        }

      });
      thread.start();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

}
