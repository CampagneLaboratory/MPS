/*
 * Copyright 2003-2009 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.lang.test.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class NodePropertiesContainer extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.test.structure.NodePropertiesContainer";
  public static final String PROPERTIES = "properties";

  public NodePropertiesContainer(SNode node) {
    super(node);
  }

  public int getPropertiesesCount() {
    return this.getChildCount(NodePropertiesContainer.PROPERTIES);
  }

  public Iterator<NodeProperty> propertieses() {
    return this.children(NodeProperty.class, NodePropertiesContainer.PROPERTIES);
  }

  public List<NodeProperty> getPropertieses() {
    return this.getChildren(NodeProperty.class, NodePropertiesContainer.PROPERTIES);
  }

  public void addProperties(NodeProperty node) {
    this.addChild(NodePropertiesContainer.PROPERTIES, node);
  }

  public void insertProperties(NodeProperty prev, NodeProperty node) {
    this.insertChild(prev, NodePropertiesContainer.PROPERTIES, node);
  }


  public static NodePropertiesContainer newInstance(SModel sm, boolean init) {
    return (NodePropertiesContainer)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.test.structure.NodePropertiesContainer", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static NodePropertiesContainer newInstance(SModel sm) {
    return NodePropertiesContainer.newInstance(sm, false);
  }

}
