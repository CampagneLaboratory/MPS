package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import javax.swing.SwingUtilities;
import jetbrains.mps.TestMain;
import java.io.File;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.project.ProjectManager;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.project.structure.project.ProjectDescriptor;

public class ProjectContainer {
  private String projectName;
  private MPSProject lastProject;

  public ProjectContainer() {
  }

  public void clear() {
    try {
      SwingUtilities.invokeAndWait(new Runnable() {
        public void run() {
          if (ProjectContainer.this.lastProject != null) {
            ProjectContainer.this.lastProject.dispose();
            ProjectContainer.this.lastProject = null;
            ProjectContainer.this.projectName = null;
          }
        }
      });
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public MPSProject getProject(String name) {
    if (eq_v52ock_a0a0b(name, this.projectName)) {
      return this.lastProject;
    } else {
      MPSProject p = this.loadProjectInternal(name);
      if (this.lastProject != null) {
        try {
          SwingUtilities.invokeAndWait(new Runnable() {
            public void run() {
              ProjectContainer.this.lastProject.dispose();
            }
          });
        } catch (Exception e) {
          e.printStackTrace();
        }
      }
      this.lastProject = p;
      this.projectName = name;
      return p;
    }
  }

  private MPSProject loadProjectInternal(String name) {
    try {
      return TestMain.loadProject(new File(name));
    } catch (Throwable throwable) {
      // well, we could try to load a dummy project, if we cant load the real one 
      Project project = ProjectManager.getInstance().getDefaultProject();
      File projectFile = FileUtil.createTmpFile();
      MPSProject mpsProject = new MPSProject(project);
      mpsProject.init(projectFile, new ProjectDescriptor());
      projectFile.deleteOnExit();
      return mpsProject;
    }
  }

  private static boolean eq_v52ock_a0a0b(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
