package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import junit.framework.Assert;
import jetbrains.mps.newTypesystem.TypesUtil;
import jetbrains.mps.newTypesystem.TypeCheckingContextNew;
import jetbrains.mps.newTypesystem.state.State;

public class TypeSystemChecker {
  public TypeSystemChecker() {
  }

  public static void checkGenerationMode(SNode node) {
    TypeCheckingContext typeCheckingContext = TypeContextManager.getInstance().createTypeCheckingContext(node.getContainingRoot());
    typeCheckingContext.checkRoot(true);
    for (SNode child : SNodeOperations.getDescendants(node, "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{})) {
      SNode type1 = typeCheckingContext.getTypeDontCheck(child);
      SNode type2 = TypeContextManager.getInstance().getTypeOf(child, true, null);
      Assert.assertTrue(TypesUtil.match(type1, type2));
    }
  }

  public static void checkRollBacks(SNode node) {
    TypeCheckingContext typeCheckingContext = TypeContextManager.getInstance().createTypeCheckingContext(node.getContainingRoot());
    typeCheckingContext.checkIfNotChecked(node, true);
    if (typeCheckingContext instanceof TypeCheckingContextNew) {
      State state = ((TypeCheckingContextNew) typeCheckingContext).getState();

    }
  }
}
