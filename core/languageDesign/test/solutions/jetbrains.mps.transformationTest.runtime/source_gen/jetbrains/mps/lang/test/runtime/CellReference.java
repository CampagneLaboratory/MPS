package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ide.IEditor;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.lang.test.behavior.AnonymousCellAnnotation_Behavior;
import junit.framework.Assert;

public class CellReference {

  private SNode myNode;
  private SNode myAnnotation;

  public CellReference(SNode node, SNode annotation) {
    this.myNode = node;
    this.myAnnotation = SNodeOperations.cast(annotation, "jetbrains.mps.lang.test.structure.AnonymousCellAnnotation");
  }

  public SNode getNode() {
    return this.myNode;
  }

  public String toString() {
    final Wrappers._T<String> result = new Wrappers._T<String>();
    ModelAccess.instance().runReadAction(new Runnable() {

      public void run() {
        result.value = "(node " + CellReference.this.myNode.getId() + ", id " + SPropertyOperations.getString(CellReference.this.myAnnotation, "cellId") + ")";
      }
    });
    return result.value;
  }

  public void selectCell(IEditor editor) {
    EditorComponent editorComponent = editor.getCurrentEditorComponent();
    AnonymousCellAnnotation_Behavior.call_setupSelection_6268941039745707957(this.myAnnotation, editorComponent, this.myNode);
  }

  public void assertEditor(IEditor editorComponent, SNode node) {
    Assert.assertSame(this.getNode(), node);
    AnonymousCellAnnotation_Behavior.call_assertEditor_6268941039745719581(this.myAnnotation, editorComponent);
  }

}
