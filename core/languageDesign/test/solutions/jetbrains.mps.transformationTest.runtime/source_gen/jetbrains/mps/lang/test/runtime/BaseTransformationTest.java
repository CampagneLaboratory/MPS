package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.util.Macros;
import jetbrains.mps.vfs.IFile;
import javax.swing.SwingUtilities;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.IdeMain;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.project.ModuleContext;
import jetbrains.mps.generator.TransientModelsModule;
import jetbrains.mps.generator.template.CloneUtil;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;

public class BaseTransformationTest extends TestCase {
  public static ProjectContainer myContainer = new ProjectContainer();

  private SModelDescriptor myModel;
  private SModelDescriptor myTransidentModel;

  public BaseTransformationTest() {
  }

  public void intitTest(String projectName, final String model) throws Exception {
    final MPSProject project = myContainer.getProject(Macros.mpsHomeMacros().expandPath(projectName, ((IFile)null)));
    final BaseTransformationTest test = this;
    SwingUtilities.invokeAndWait(new Runnable() {

      public void run() {
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {

          public void run() {
            IdeMain.setTestMode(true);
            test.myModel = SModelRepository.getInstance().getModelDescriptor(SModelReference.fromString(model));
            ModuleContext context = ModuleContext.create(test.myModel, project, false);
            TransientModelsModule module = context.getComponent(TransientModelsModule.class);
            test.myTransidentModel = module.createTransientModel("testTransidentModel", "testTransidentModel");
            CloneUtil.cloneModel(test.myModel.getSModel(), test.myTransidentModel.getSModel());
            test.myTransidentModel.getSModel().validateLanguagesAndImports();
          }

        });
      }

    });
  }

  public void runTest(final String className, String methodName) throws Exception {
    final Wrappers._T<Class> clazz = new Wrappers._T<Class>();
    ModelAccess.instance().runReadAction(new Runnable() {

      public void run() {
        clazz.value = BaseTransformationTest.this.myModel.getModule().getClass(className);
      }

    });
    Object obj = clazz.value.newInstance();
    clazz.value.getField("myModel").set(obj, this.myTransidentModel);
    clazz.value.getDeclaredMethod(methodName).invoke(obj);
    ModelAccess.instance().runWriteAction(new Runnable() {

      public void run() {
        SModelRepository.getInstance().removeModelDescriptor(BaseTransformationTest.this.myTransidentModel);
      }

    });
  }


  public static ProjectContainer getProjectContainer() {
    return myContainer;
  }

}
