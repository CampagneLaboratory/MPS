package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.MPSProject;
import java.util.HashMap;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class BaseTestBody {

  public SModelDescriptor myModel;
  public MPSProject myProject;
  public HashMap<SNode, SNode> myMap;
  public ArrayList<SNode> myCopyes;

  public BaseTestBody() {
    this.myMap = new HashMap<SNode, SNode>();
    this.myCopyes = new ArrayList<SNode>();
  }

  public void addNodeById(final String id) throws Exception {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {

      public void run() {
        SNode node = BaseTestBody.this.myModel.getSModel().getNodeById(id);
        SNode copy = CopyUtil.copy(node, BaseTestBody.this.myMap, true);
        for(SNode a : Sequence.fromIterable(SNodeOperations.getDescendants(copy, "jetbrains.mps.lang.test.structure.INodeAnnotattion", false))) {
          SNodeOperations.deleteNode(a);
        }
        BaseTestBody.this.myModel.getSModel().addRoot(copy);
        BaseTestBody.this.myCopyes.add(copy);
      }

    });
  }

  public SNode getNodeById(String id) {
    return this.myMap.get(this.myModel.getSModel().getNodeById(id));
  }

  public SNode getRealNodeById(String id) {
    return this.myModel.getSModel().getNodeById(id);
  }

}
