package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.MPSProject;
import java.util.HashMap;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;

public class BaseTestBody {

  public SModelDescriptor myModel;
  public MPSProject myProject;
  public HashMap<SNode, SNode> myMap;
  public ArrayList<SNode> myCopyes;

  public BaseTestBody() {
    this.myMap = new HashMap<SNode, SNode>();
    this.myCopyes = new ArrayList<SNode>();
  }

  public void addNodeById(String id) throws Exception {
    SNode node = BaseTestBody.this.myModel.getSModel().getNodeById(id);
    SNode copy = CopyUtil.copy(node, BaseTestBody.this.myMap, true);
    for(SNode a : SNodeOperations.getDescendants(copy, "jetbrains.mps.lang.test.structure.TestNodeAnnotation", false)) {
      SNodeOperations.deleteNode(a);
    }
    BaseTestBody.this.myModel.getSModel().addRoot(copy);
    BaseTestBody.this.myCopyes.add(copy);
  }

  public SNode getNodeById(final String id) {
    final Wrappers._T<SNode> node = new Wrappers._T<SNode>();
    ModelAccess.instance().runReadAction(new Runnable() {

      public void run() {
        node.value = BaseTestBody.this.myMap.get(BaseTestBody.this.myModel.getSModel().getNodeById(id));
      }

    });
    return node.value;
  }

  public SNode getRealNodeById(final String id) {
    final Wrappers._T<SNode> node = new Wrappers._T<SNode>();
    ModelAccess.instance().runReadAction(new Runnable() {

      public void run() {
        node.value = BaseTestBody.this.myModel.getSModel().getNodeById(id);
      }

    });
    return node.value;
  }

  public void tearDown() throws Exception {
    for(SNode copy : this.myCopyes) {
      this.myModel.getSModel().removeRoot(copy);
    }
  }

}
