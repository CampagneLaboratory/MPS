package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import jetbrains.mps.TestMain;
import jetbrains.mps.ide.IdeMain;
import jetbrains.mps.ide.IdeMain.TestMode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.MPSProject;

import javax.swing.SwingUtilities;
import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class ProjectContainer {

  private Map<String, MPSProject> myProjects = new HashMap<String, MPSProject>();

  public ProjectContainer() {
  }

  public void clear() {
    final Map<String, MPSProject> projects = new HashMap<String, MPSProject>();
    try {
      SwingUtilities.invokeAndWait(new Runnable() {

        public void run() {
          for(MPSProject project : Sequence.fromIterable(projects.values())) {
            project.dispose();
          }
          MapSequence.fromMap(projects).clear();
        }

      });
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public MPSProject getProject(String name) {
    IdeMain.setTestMode(TestMode.CORE_TEST) ;
    if (MapSequence.fromMap(this.myProjects).containsKey(name)) {
      return this.myProjects.get(name);
    } else
    {
      TestMain.configureMPS();
      MPSProject p = TestMain.loadProject(new File(name));
      this.myProjects.put(name, p);
      return p;
    }
  }

}
