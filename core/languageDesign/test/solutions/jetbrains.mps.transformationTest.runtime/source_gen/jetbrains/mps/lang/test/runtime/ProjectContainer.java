package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import javax.swing.SwingUtilities;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ide.IdeMain;
import jetbrains.mps.TestMain;
import java.io.File;

public class ProjectContainer {

  private Map<String, MPSProject> myProjects = MapSequence.fromMap(new HashMap<String, MPSProject>());

  public ProjectContainer() {
  }

  public void clear() {
    final Map<String, MPSProject> projects = MapSequence.fromMap(new HashMap<String, MPSProject>());
    try {
      SwingUtilities.invokeAndWait(new Runnable() {

        public void run() {
          for(MPSProject project : Sequence.fromIterable(MapSequence.fromMap(projects).values())) {
            project.dispose();
          }
          MapSequence.fromMap(projects).clear();
        }
      });
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public MPSProject getProject(String name) {
    IdeMain.setTestMode(IdeMain.TestMode.CORE_TEST);
    if (MapSequence.fromMap(this.myProjects).containsKey(name)) {
      return this.myProjects.get(name);
    } else
    {
      TestMain.configureMPS();
      MPSProject p = TestMain.loadProject(new File(name));
      MapSequence.fromMap(this.myProjects).put(name, p);
      return p;
    }
  }

}
