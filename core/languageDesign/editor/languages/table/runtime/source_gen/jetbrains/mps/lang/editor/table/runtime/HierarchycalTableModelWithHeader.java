package jetbrains.mps.lang.editor.table.runtime;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;

public class HierarchycalTableModelWithHeader extends HierarchycalTableModel {
  private SNode myHeaderCellsLinkDeclaration;

  public HierarchycalTableModelWithHeader(@NotNull SNode tableNode, @NotNull SNode rowsLinkDeclaration, @NotNull SNode cellsLinkDeclaration, @NotNull SNode headerCellsLinkDeclaration) {
    super(tableNode, rowsLinkDeclaration, cellsLinkDeclaration);
    myHeaderCellsLinkDeclaration = headerCellsLinkDeclaration;
    assert ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(SNodeOperations.getConceptDeclaration(getTableNode()))).contains(myHeaderCellsLinkDeclaration);
  }

  @Override
  public SNode getValueAt(int row, int column) {
    assert row >= 0;
    assert column >= 0;
    if (row == 0) {
      return ListSequence.fromList(getHeaderCells()).getElement(column);
    }
    return super.getValueAt(row - 1, column);
  }

  @Override
  public int getRowCount() {
    return super.getRowCount() + 1;
  }

  @Override
  public int getColumnCount() {
    return ListSequence.fromList(getHeaderCells()).count();
  }

  @Override
  public void deleteRow(int row) {
    if (row == 0) {
      // it's not possible to delete header row 
      return;
    }
    super.deleteRow(row - 1);
  }

  @Override
  public void insertRow(int row) {
    if (row == 0) {
      // it's not possible to insert row before header 
      row = 1;
    }
    super.insertRow(row - 1);
  }

  private List<SNode> getHeaderCells() {
    return SNodeOperations.getChildren(getTableNode(), myHeaderCellsLinkDeclaration);
  }
}
