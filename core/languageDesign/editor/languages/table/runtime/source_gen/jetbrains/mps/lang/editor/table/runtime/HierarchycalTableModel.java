package jetbrains.mps.lang.editor.table.runtime;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;

public class HierarchycalTableModel extends AbstractTableModel {
  private SNode myTableNode;
  private SNode myRowsLinkDeclaration;
  private SNode myCellsLinkDeclaration;
  private int myColumnsNumber;

  public HierarchycalTableModel(@NotNull SNode tableNode, @NotNull SNode rowsLinkDeclaration, @NotNull SNode cellsLinkDeclaration) {
    myTableNode = tableNode;
    myRowsLinkDeclaration = rowsLinkDeclaration;
    assert ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(SNodeOperations.getConceptDeclaration(myTableNode))).contains(myRowsLinkDeclaration);
    myCellsLinkDeclaration = cellsLinkDeclaration;
    assert ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(SLinkOperations.getTarget(myRowsLinkDeclaration, "target", false))).contains(myCellsLinkDeclaration);
    myColumnsNumber = ListSequence.fromList(getColumns(ListSequence.fromList(getRows()).first())).count();
  }

  public SNode getValueAt(int row, int column) {
    assert row >= 0;
    assert column >= 0;
    return ListSequence.fromList(getColumns(ListSequence.fromList(getRows()).getElement(row))).getElement(column);
  }

  public int getRowsNumber() {
    return ListSequence.fromList(getRows()).count();

  }

  public int getColumnsNumber() {
    return myColumnsNumber;
  }

  @Override
  public void deleteRow(int row) {
    assert row >= 0;
    ListSequence.fromList(getRows()).removeElementAt(row);
  }

  @Override
  public void insertRow(int row) {
    assert row >= 0;
    SNode newRow = SConceptOperations.createNewNode(NameUtil.nodeFQName(SLinkOperations.getTarget(myRowsLinkDeclaration, "target", false)), null);
    for (int i = 0; i < getColumnsNumber(); i++) {
      newRow.addChild(SPropertyOperations.getString(myCellsLinkDeclaration, "role"), SConceptOperations.createNewNode(NameUtil.nodeFQName(SLinkOperations.getTarget(myCellsLinkDeclaration, "target", false)), null));
    }
    List<SNode> rows = getRows();
    if (ListSequence.fromList(rows).count() == 0) {
      assert row == 0;
      myTableNode.addChild(SPropertyOperations.getString(myRowsLinkDeclaration, "role"), newRow);
    } else {
      SNodeOperations.insertPrevSiblingChild(ListSequence.fromList(rows).getElement(row), newRow);
    }
  }

  protected SNode getTableNode() {
    return myTableNode;
  }

  private List<SNode> getRows() {
    return SNodeOperations.getChildren(myTableNode, myRowsLinkDeclaration);
  }

  private List<SNode> getColumns(SNode row) {
    return SNodeOperations.getChildren(row, myCellsLinkDeclaration);
  }
}
