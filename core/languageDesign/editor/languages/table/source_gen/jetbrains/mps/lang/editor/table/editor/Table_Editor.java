package jetbrains.mps.lang.editor.table.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.lang.editor.table.runtime.TableModelCreator;
import jetbrains.mps.lang.editor.table.runtime.TableModel;
import jetbrains.mps.lang.editor.table.runtime.AbstractTableModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.editor.table.runtime.EditorCell_Table;

public class Table_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_3p37vj_a(editorContext, node);
  }

  private EditorCell createCollection_3p37vj_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_3p37vj_a");
    editorCell.addEditorCell(this.createTable_3p37vj_a0(editorContext, node));
    return editorCell;
  }

  private EditorCell createTable_3p37vj_a0(EditorContext editorContext, SNode node) {
    TableModelCreator creator = new TableModelCreator() {
      public TableModel getTable(final SNode node, EditorContext editorContext) {
        return new AbstractTableModel() {
          public SNode getValueAt(int row, int column) {
            return ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true)).getElement(row), "cell", true)).getElement(column);
          }

          public int getRowsNumber() {
            return ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true)).count();
          }

          public int getColumnsNumber() {
            return ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true)).first(), "cell", true)).count();
          }

          public void deleteRow(int row) {
            ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true)).removeElementAt(row);
          }

          @Override
          public void insertRow(int row) {
            SNode rowNode = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.table.structure.Row", null);
            for (int i = 0; i < ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true)).first(), "cell", true)).count(); i++) {
              ListSequence.fromList(SLinkOperations.getTargets(rowNode, "cell", true)).addElement(SConceptOperations.createNewNode("jetbrains.mps.lang.editor.table.structure.DataCell", null));
            }
            ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true)).insertElement(row, rowNode);
          }
        };
      }
    };
    EditorCell_Collection editorCell = EditorCell_Table.createTable(editorContext, node, creator.getTable(node, editorContext));
    editorCell.setCellId("Table_3p37vj_a0");
    return editorCell;
  }
}
