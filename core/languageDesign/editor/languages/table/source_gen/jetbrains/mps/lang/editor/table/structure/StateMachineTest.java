package jetbrains.mps.lang.editor.table.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class StateMachineTest extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.lang.editor.table.structure.StateMachineTest";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String EMPTY = "empty";
  public static final String EVENTS = "events";
  public static final String TRANSITION = "transition";
  public static final String STATES = "states";

  public StateMachineTest(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(StateMachineTest.NAME);
  }

  public void setName(String value) {
    this.setProperty(StateMachineTest.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(StateMachineTest.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(StateMachineTest.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(StateMachineTest.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(StateMachineTest.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(StateMachineTest.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(StateMachineTest.VIRTUAL_PACKAGE, value);
  }

  public Empty getEmpty() {
    return (Empty) this.getChild(Empty.class, StateMachineTest.EMPTY);
  }

  public void setEmpty(Empty node) {
    super.setChild(StateMachineTest.EMPTY, node);
  }

  public int getEventsesCount() {
    return this.getChildCount(StateMachineTest.EVENTS);
  }

  public Iterator<Event> eventses() {
    return this.children(Event.class, StateMachineTest.EVENTS);
  }

  public List<Event> getEventses() {
    return this.getChildren(Event.class, StateMachineTest.EVENTS);
  }

  public void addEvents(Event node) {
    this.addChild(StateMachineTest.EVENTS, node);
  }

  public void insertEvents(Event prev, Event node) {
    this.insertChild(prev, StateMachineTest.EVENTS, node);
  }

  public int getTransitionsCount() {
    return this.getChildCount(StateMachineTest.TRANSITION);
  }

  public Iterator<Transition> transitions() {
    return this.children(Transition.class, StateMachineTest.TRANSITION);
  }

  public List<Transition> getTransitions() {
    return this.getChildren(Transition.class, StateMachineTest.TRANSITION);
  }

  public void addTransition(Transition node) {
    this.addChild(StateMachineTest.TRANSITION, node);
  }

  public void insertTransition(Transition prev, Transition node) {
    this.insertChild(prev, StateMachineTest.TRANSITION, node);
  }

  public int getStatesesCount() {
    return this.getChildCount(StateMachineTest.STATES);
  }

  public Iterator<State> stateses() {
    return this.children(State.class, StateMachineTest.STATES);
  }

  public List<State> getStateses() {
    return this.getChildren(State.class, StateMachineTest.STATES);
  }

  public void addStates(State node) {
    this.addChild(StateMachineTest.STATES, node);
  }

  public void insertStates(State prev, State node) {
    this.insertChild(prev, StateMachineTest.STATES, node);
  }

  public static StateMachineTest newInstance(SModel sm, boolean init) {
    return (StateMachineTest) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.table.structure.StateMachineTest", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static StateMachineTest newInstance(SModel sm) {
    return StateMachineTest.newInstance(sm, false);
  }
}
