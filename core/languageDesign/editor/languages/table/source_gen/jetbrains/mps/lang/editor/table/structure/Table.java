package jetbrains.mps.lang.editor.table.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Table extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.editor.table.structure.Table";
  public static final String HEADER = "header";
  public static final String ROWS = "rows";

  public Table(SNode node) {
    super(node);
  }

  public int getHeadersCount() {
    return this.getChildCount(Table.HEADER);
  }

  public Iterator<DataCell> headers() {
    return this.children(DataCell.class, Table.HEADER);
  }

  public List<DataCell> getHeaders() {
    return this.getChildren(DataCell.class, Table.HEADER);
  }

  public void addHeader(DataCell node) {
    this.addChild(Table.HEADER, node);
  }

  public void insertHeader(DataCell prev, DataCell node) {
    this.insertChild(prev, Table.HEADER, node);
  }

  public int getRowsesCount() {
    return this.getChildCount(Table.ROWS);
  }

  public Iterator<Row> rowses() {
    return this.children(Row.class, Table.ROWS);
  }

  public List<Row> getRowses() {
    return this.getChildren(Row.class, Table.ROWS);
  }

  public void addRows(Row node) {
    this.addChild(Table.ROWS, node);
  }

  public void insertRows(Row prev, Row node) {
    this.insertChild(prev, Table.ROWS, node);
  }

  public static Table newInstance(SModel sm, boolean init) {
    return (Table) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.table.structure.Table", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Table newInstance(SModel sm) {
    return Table.newInstance(sm, false);
  }
}
