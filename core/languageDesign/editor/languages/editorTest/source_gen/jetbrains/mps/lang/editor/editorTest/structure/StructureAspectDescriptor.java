package jetbrains.mps.lang.editor.editorTest.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.ConceptRegistry;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    int hash = conceptFqName.hashCode();
    if (hash == -1759156442) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.TestBlockList", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == 1838626778) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.BracesBlock", "jetbrains.mps.lang.editor.editorTest.structure.TestBlockList", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == -1413767628) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == 1922376652) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.StubBlock", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == -1545833224) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.VerticalLayoutBlockList", "jetbrains.mps.lang.editor.editorTest.structure.TestBlockList", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == 777653580) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.BracesStubBlock", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == 1698810025) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.InspectorBlock", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == 1655701512) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.ReferenceAnnotataion", "jetbrains.mps.lang.core.structure.LinkAttribute");
    }
    if (hash == -1420746790) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.SideTranformWrapper", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == 6349412) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.IntegerLiteral", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == 1761161612) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.BinaryExpression", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == 260124837) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.PlusExpression", "jetbrains.mps.lang.editor.editorTest.structure.BinaryExpression");
    }
    if (hash == -866307302) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.AttractsFocusBlock", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == 16423650) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationBlock", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == 261153568) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationReference", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == 546793608) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.NonEmptyProperty", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    if (hash == 1808004967) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.NotEditableVaraileReference", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock");
    }
    return null;
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private ImmutableSet<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String... parents) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, parents);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static ImmutableSet<String> getAncestors(String conceptFqName, String... parents) {
      List<String> result = new ArrayList();

      result.add(conceptFqName);
      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : parents) {
        result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
      }
      return ImmutableSet.copyOf(result);
    }
  }
}
