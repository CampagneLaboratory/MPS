package jetbrains.mps.lang.editor.editorTest.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.ConceptRegistry;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    switch ((conceptFqName).hashCode()) {
      case -1759156442:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.TestBlockList", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 1838626778:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.BracesBlock", new String[]{"jetbrains.mps.lang.editor.editorTest.structure.TestBlockList", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.TestBlockList", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case -1413767628:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock", new String[]{}, new String[]{}, new String[]{});
      case 1922376652:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.StubBlock", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case -1545833224:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.VerticalLayoutBlockList", new String[]{"jetbrains.mps.lang.editor.editorTest.structure.TestBlockList", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.TestBlockList", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 777653580:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.BracesStubBlock", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 1698810025:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.InspectorBlock", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 1655701512:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.ReferenceAnnotataion", new String[]{"jetbrains.mps.lang.core.structure.LinkAttribute"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.LinkAttribute"});
      case -1420746790:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.SideTranformWrapper", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 6349412:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.IntegerLiteral", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 1761161612:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.BinaryExpression", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 260124837:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.PlusExpression", new String[]{"jetbrains.mps.lang.editor.editorTest.structure.BinaryExpression"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.BinaryExpression", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case -866307302:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.AttractsFocusBlock", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 16423650:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationBlock", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"});
      case 261153568:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationReference", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 546793608:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.NonEmptyProperty", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 1808004967:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.editor.editorTest.structure.NotEditableVaraileReference", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      default:
        return null;
    }
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private ImmutableSet<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String[] parents, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, ancestorsInLanguage, ancestorsNotInLanguage);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static ImmutableSet<String> getAncestors(String conceptFqName, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      ArrayList<String> result = new ArrayList(ancestorsInLanguage.length + 1);

      for (String ancestor : ancestorsInLanguage) {
        result.add(ancestor);
      }

      result.add(conceptFqName);
      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : ancestorsNotInLanguage) {
        result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
      }
      return ImmutableSet.copyOf(result);
    }
  }
}
