package jetbrains.mps.lang.editor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import java.util.Iterator;
import jetbrains.mps.lang.editor.structure.CellActionMapItem;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CellActionMapDeclaration extends jetbrains.mps.lang.core.structure.BaseConcept implements jetbrains.mps.lang.core.structure.INamedConcept {
  public static final String concept = "jetbrains.mps.lang.editor.structure.CellActionMapDeclaration";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String APPLICABLE_CONCEPT = "applicableConcept";
  public static final String ITEM = "item";

  public CellActionMapDeclaration(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(CellActionMapDeclaration.NAME);
  }

  public void setName(String value) {
    this.setProperty(CellActionMapDeclaration.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(CellActionMapDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(CellActionMapDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(CellActionMapDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(CellActionMapDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(CellActionMapDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(CellActionMapDeclaration.VIRTUAL_PACKAGE, value);
  }

  public jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration getApplicableConcept() {
    return (jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration)this.getReferent(AbstractConceptDeclaration.class, CellActionMapDeclaration.APPLICABLE_CONCEPT);
  }

  public void setApplicableConcept(jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration node) {
    super.setReferent(CellActionMapDeclaration.APPLICABLE_CONCEPT, node);
  }

  public int getItemsCount() {
    return this.getChildCount(CellActionMapDeclaration.ITEM);
  }

  public Iterator<jetbrains.mps.lang.editor.structure.CellActionMapItem> items() {
    return this.children(CellActionMapItem.class, CellActionMapDeclaration.ITEM);
  }

  public List<jetbrains.mps.lang.editor.structure.CellActionMapItem> getItems() {
    return this.getChildren(CellActionMapItem.class, CellActionMapDeclaration.ITEM);
  }

  public void addItem(jetbrains.mps.lang.editor.structure.CellActionMapItem node) {
    this.addChild(CellActionMapDeclaration.ITEM, node);
  }

  public void insertItem(jetbrains.mps.lang.editor.structure.CellActionMapItem prev, jetbrains.mps.lang.editor.structure.CellActionMapItem node) {
    this.insertChild(prev, CellActionMapDeclaration.ITEM, node);
  }


  public static CellActionMapDeclaration newInstance(SModel sm, boolean init) {
    return (CellActionMapDeclaration)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.structure.CellActionMapDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CellActionMapDeclaration newInstance(SModel sm) {
    return CellActionMapDeclaration.newInstance(sm, false);
  }

}
