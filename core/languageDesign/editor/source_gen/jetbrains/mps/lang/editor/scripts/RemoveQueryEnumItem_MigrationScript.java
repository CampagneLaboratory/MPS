package jetbrains.mps.lang.editor.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class RemoveQueryEnumItem_MigrationScript extends BaseMigrationScript {

  public RemoveQueryEnumItem_MigrationScript(IOperationContext operationContext) {
    super("remove enum item \"query\"");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {

      public String getName() {
        return "color query";
      }

      public String getAdditionalInfo() {
        return "color query";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.editor.structure.ColorStyleClassItem";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SPropertyOperations.hasValue(node, "color", "query", null);
      }

      public void doUpdateInstanceNode(SNode node) {
        SPropertyOperations.set(node, "color", null);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {

      public String getName() {
        return "font style query";
      }

      public String getAdditionalInfo() {
        return "font style query";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.editor.structure.FontStyleStyleClassItem";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SPropertyOperations.hasValue(node, "style", "QUERY", null);
      }

      public void doUpdateInstanceNode(SNode node) {
        SPropertyOperations.set(node, "style", null);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
