package jetbrains.mps.lang.editor.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.PropertyDeclaration;
import jetbrains.mps.baseLanguage.structure.Type;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.structure.ParameterDeclaration;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class QueryMethodIdEditorProviderExpression extends Expression {
  public static final String concept = "jetbrains.mps.lang.editor.structure.QueryMethodIdEditorProviderExpression";
  public static final String NOT_SET_STRING = "notSetString";
  public static final String PREFIX = "prefix";
  public static final String QUERY_ID_PROPERTY = "queryIdProperty";
  public static final String RETURN_TYPE = "returnType";
  public static final String PARAMETER = "parameter";
  public static final String ADDITIONAL_IMPORT = "additionalImport";

  public QueryMethodIdEditorProviderExpression(SNode node) {
    super(node);
  }

  public String getNotSetString() {
    return this.getProperty(QueryMethodIdEditorProviderExpression.NOT_SET_STRING);
  }

  public void setNotSetString(String value) {
    this.setProperty(QueryMethodIdEditorProviderExpression.NOT_SET_STRING, value);
  }

  public String getPrefix() {
    return this.getProperty(QueryMethodIdEditorProviderExpression.PREFIX);
  }

  public void setPrefix(String value) {
    this.setProperty(QueryMethodIdEditorProviderExpression.PREFIX, value);
  }

  public PropertyDeclaration getQueryIdProperty() {
    return (PropertyDeclaration) this.getReferent(PropertyDeclaration.class, QueryMethodIdEditorProviderExpression.QUERY_ID_PROPERTY);
  }

  public void setQueryIdProperty(PropertyDeclaration node) {
    super.setReferent(QueryMethodIdEditorProviderExpression.QUERY_ID_PROPERTY, node);
  }

  public Type getReturnType() {
    return (Type) this.getChild(Type.class, QueryMethodIdEditorProviderExpression.RETURN_TYPE);
  }

  public void setReturnType(Type node) {
    super.setChild(QueryMethodIdEditorProviderExpression.RETURN_TYPE, node);
  }

  public int getParametersCount() {
    return this.getChildCount(QueryMethodIdEditorProviderExpression.PARAMETER);
  }

  public Iterator<ParameterDeclaration> parameters() {
    return this.children(ParameterDeclaration.class, QueryMethodIdEditorProviderExpression.PARAMETER);
  }

  public List<ParameterDeclaration> getParameters() {
    return this.getChildren(ParameterDeclaration.class, QueryMethodIdEditorProviderExpression.PARAMETER);
  }

  public void addParameter(ParameterDeclaration node) {
    this.addChild(QueryMethodIdEditorProviderExpression.PARAMETER, node);
  }

  public void insertParameter(ParameterDeclaration prev, ParameterDeclaration node) {
    this.insertChild(prev, QueryMethodIdEditorProviderExpression.PARAMETER, node);
  }

  public int getAdditionalImportsCount() {
    return this.getChildCount(QueryMethodIdEditorProviderExpression.ADDITIONAL_IMPORT);
  }

  public Iterator<Type> additionalImports() {
    return this.children(Type.class, QueryMethodIdEditorProviderExpression.ADDITIONAL_IMPORT);
  }

  public List<Type> getAdditionalImports() {
    return this.getChildren(Type.class, QueryMethodIdEditorProviderExpression.ADDITIONAL_IMPORT);
  }

  public void addAdditionalImport(Type node) {
    this.addChild(QueryMethodIdEditorProviderExpression.ADDITIONAL_IMPORT, node);
  }

  public void insertAdditionalImport(Type prev, Type node) {
    this.insertChild(prev, QueryMethodIdEditorProviderExpression.ADDITIONAL_IMPORT, node);
  }

  public static QueryMethodIdEditorProviderExpression newInstance(SModel sm, boolean init) {
    return (QueryMethodIdEditorProviderExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.structure.QueryMethodIdEditorProviderExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static QueryMethodIdEditorProviderExpression newInstance(SModel sm) {
    return QueryMethodIdEditorProviderExpression.newInstance(sm, false);
  }
}
