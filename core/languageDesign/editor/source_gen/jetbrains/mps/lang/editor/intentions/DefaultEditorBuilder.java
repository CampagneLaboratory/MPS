package jetbrains.mps.lang.editor.intentions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class DefaultEditorBuilder {

  public DefaultEditorBuilder() {
  }

  public static void buildDefaultEditor(SNode node) {
    SNode conceptDeclaration = SLinkOperations.getTarget(node, "conceptDeclaration", false);
    SNode collection = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Collection", null);
    SLinkOperations.setTarget(collection, "cellLayout", SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Indent", null), true);
    for(SNode property : ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getPropertyDeclarations_1213877394546(conceptDeclaration))) {
      DefaultEditorBuilder.addName(SPropertyOperations.getString(property, "name"), collection);
      SNode propertyCell = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Property", null);
      SLinkOperations.setTarget(propertyCell, "relationDeclaration", property, false);
      DefaultEditorBuilder.makeNewLine(propertyCell);
      SLinkOperations.addChild(collection, "childCellModel", propertyCell);
    }
    for(SNode linkDeclaration : ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(conceptDeclaration))) {
      DefaultEditorBuilder.addName(SPropertyOperations.getString(linkDeclaration, "role"), collection);
      SNode propertyCell = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_RefNode", null);
      SLinkOperations.setTarget(propertyCell, "relationDeclaration", linkDeclaration, false);
    }
    SLinkOperations.setTarget(node, "cellModel", collection, true);
  }

  private static void makeNewLine(SNode propertyCell) {
    SNode classItem = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.IndentLayoutNewLineStyleClassItem", null);
    SPropertyOperations.set(classItem, "flag", "" + true);
    SLinkOperations.addChild(propertyCell, "styleItem", classItem);
  }

  private static void addName(String name, SNode collection) {
    SNode nameCell = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Constant", null);
    SPropertyOperations.set(nameCell, "text", name);
    SLinkOperations.addChild(collection, "childCellModel", nameCell);
  }

}
