package jetbrains.mps.lang.editor.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.helgins.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_CellModel_RefNode_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {

  public check_CellModel_RefNode_InferenceRule() {
  }

  public void applyRule(final SNode refNode, final TypeCheckingContext typeCheckingContext) {
    SNode lnk = SLinkOperations.getTarget(refNode, "relationDeclaration", false);
    if (!(SPropertyOperations.hasValue(lnk, "metaClass", "aggregation", "reference"))) {
      TypeChecker.getInstance().reportTypeError(refNode, "aggregation link expected", "r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)", "1180280667546");
    }
    if (!(SPropertyOperations.hasValue(lnk, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(lnk, "sourceCardinality", "1", "0..1"))) {
      TypeChecker.getInstance().reportTypeError(refNode, "single cardinality expected", "r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)", "1180280735244");
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.editor.structure.CellModel_RefNode";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
