package jetbrains.mps.lang.editor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.editor.structure.FocusPolicy;
import jetbrains.mps.lang.editor.structure.CellActionMapDeclaration;
import jetbrains.mps.lang.editor.structure.CellKeyMapDeclaration;
import jetbrains.mps.lang.editor.structure.StyleSheetClass;
import jetbrains.mps.lang.editor.structure.QueryFunction_NodeCondition;
import jetbrains.mps.lang.editor.structure.CellMenuDescriptor;
import jetbrains.mps.lang.editor.structure.QueryFunction_Color;
import java.util.Iterator;
import jetbrains.mps.lang.editor.structure.StyleClassItem;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class EditorCellModel extends jetbrains.mps.lang.core.structure.BaseConcept implements jetbrains.mps.lang.editor.structure.IStyleContainer {
  public static final String concept = "jetbrains.mps.lang.editor.structure.EditorCellModel";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String ATTRACTS_FOCUS = "attractsFocus";
  public static final String ACTION_MAP = "actionMap";
  public static final String KEY_MAP = "keyMap";
  public static final String STYLE_CLASS = "styleClass";
  public static final String RENDERING_CONDITION = "renderingCondition";
  public static final String MENU_DESCRIPTOR = "menuDescriptor";
  public static final String CELL_BACKGROUND_FUNCTION = "cellBackgroundFunction";
  public static final String FOCUS_POLICY_APPLICABLE = "focusPolicyApplicable";
  public static final String STYLE_ITEM = "styleItem";

  public EditorCellModel(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(EditorCellModel.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(EditorCellModel.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(EditorCellModel.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(EditorCellModel.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(EditorCellModel.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(EditorCellModel.VIRTUAL_PACKAGE, value);
  }

  public FocusPolicy getAttractsFocus() {
    String value = super.getProperty(EditorCellModel.ATTRACTS_FOCUS);
    return FocusPolicy.parseValue(value);
  }

  public void setAttractsFocus(FocusPolicy value) {
    super.setProperty(EditorCellModel.ATTRACTS_FOCUS, value.getValueAsString());
  }

  public jetbrains.mps.lang.editor.structure.CellActionMapDeclaration getActionMap() {
    return (jetbrains.mps.lang.editor.structure.CellActionMapDeclaration)this.getReferent(CellActionMapDeclaration.class, EditorCellModel.ACTION_MAP);
  }

  public void setActionMap(jetbrains.mps.lang.editor.structure.CellActionMapDeclaration node) {
    super.setReferent(EditorCellModel.ACTION_MAP, node);
  }

  public jetbrains.mps.lang.editor.structure.CellKeyMapDeclaration getKeyMap() {
    return (jetbrains.mps.lang.editor.structure.CellKeyMapDeclaration)this.getReferent(CellKeyMapDeclaration.class, EditorCellModel.KEY_MAP);
  }

  public void setKeyMap(jetbrains.mps.lang.editor.structure.CellKeyMapDeclaration node) {
    super.setReferent(EditorCellModel.KEY_MAP, node);
  }

  public jetbrains.mps.lang.editor.structure.StyleSheetClass getStyleClass() {
    return (jetbrains.mps.lang.editor.structure.StyleSheetClass)this.getReferent(StyleSheetClass.class, EditorCellModel.STYLE_CLASS);
  }

  public void setStyleClass(jetbrains.mps.lang.editor.structure.StyleSheetClass node) {
    super.setReferent(EditorCellModel.STYLE_CLASS, node);
  }

  public jetbrains.mps.lang.editor.structure.QueryFunction_NodeCondition getRenderingCondition() {
    return (jetbrains.mps.lang.editor.structure.QueryFunction_NodeCondition)this.getChild(QueryFunction_NodeCondition.class, EditorCellModel.RENDERING_CONDITION);
  }

  public void setRenderingCondition(jetbrains.mps.lang.editor.structure.QueryFunction_NodeCondition node) {
    super.setChild(EditorCellModel.RENDERING_CONDITION, node);
  }

  public jetbrains.mps.lang.editor.structure.CellMenuDescriptor getMenuDescriptor() {
    return (jetbrains.mps.lang.editor.structure.CellMenuDescriptor)this.getChild(CellMenuDescriptor.class, EditorCellModel.MENU_DESCRIPTOR);
  }

  public void setMenuDescriptor(jetbrains.mps.lang.editor.structure.CellMenuDescriptor node) {
    super.setChild(EditorCellModel.MENU_DESCRIPTOR, node);
  }

  public jetbrains.mps.lang.editor.structure.QueryFunction_Color getCellBackgroundFunction() {
    return (jetbrains.mps.lang.editor.structure.QueryFunction_Color)this.getChild(QueryFunction_Color.class, EditorCellModel.CELL_BACKGROUND_FUNCTION);
  }

  public void setCellBackgroundFunction(jetbrains.mps.lang.editor.structure.QueryFunction_Color node) {
    super.setChild(EditorCellModel.CELL_BACKGROUND_FUNCTION, node);
  }

  public jetbrains.mps.lang.editor.structure.QueryFunction_NodeCondition getFocusPolicyApplicable() {
    return (jetbrains.mps.lang.editor.structure.QueryFunction_NodeCondition)this.getChild(QueryFunction_NodeCondition.class, EditorCellModel.FOCUS_POLICY_APPLICABLE);
  }

  public void setFocusPolicyApplicable(jetbrains.mps.lang.editor.structure.QueryFunction_NodeCondition node) {
    super.setChild(EditorCellModel.FOCUS_POLICY_APPLICABLE, node);
  }

  public int getStyleItemsCount() {
    return this.getChildCount(EditorCellModel.STYLE_ITEM);
  }

  public Iterator<jetbrains.mps.lang.editor.structure.StyleClassItem> styleItems() {
    return this.children(StyleClassItem.class, EditorCellModel.STYLE_ITEM);
  }

  public List<jetbrains.mps.lang.editor.structure.StyleClassItem> getStyleItems() {
    return this.getChildren(StyleClassItem.class, EditorCellModel.STYLE_ITEM);
  }

  public void addStyleItem(jetbrains.mps.lang.editor.structure.StyleClassItem node) {
    this.addChild(EditorCellModel.STYLE_ITEM, node);
  }

  public void insertStyleItem(jetbrains.mps.lang.editor.structure.StyleClassItem prev, jetbrains.mps.lang.editor.structure.StyleClassItem node) {
    this.insertChild(prev, EditorCellModel.STYLE_ITEM, node);
  }


  public static EditorCellModel newInstance(SModel sm, boolean init) {
    return (EditorCellModel)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static EditorCellModel newInstance(SModel sm) {
    return EditorCellModel.newInstance(sm, false);
  }

}
