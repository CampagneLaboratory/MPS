package jetbrains.mps.lang.migration.runtime.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.project.Solution;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.apache.log4j.Level;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.SLanguageHierarchy;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import jetbrains.mps.project.AbstractModule;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MigrationsUtil {
  public static Iterable<SModule> getMigrateableModulesFromProject(Project p) {
    Iterable<? extends SModule> modules = p.getModulesWithGenerators();
    return Sequence.fromIterable(modules).where(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return MigrationsUtil.isModuleMigrateable(it);
      }
    }).ofType(SModule.class);
  }

  public static boolean isModuleMigrateable(SModule m) {
    return !((m instanceof DevKit)) && !((Solution.isBootstrapSolution(m.getModuleReference()))) && !((m.isReadOnly()));
  }

  public static boolean isMigrationNeeded(SLanguage language, int importVersion, SModule module) {
    int currentVersion = language.getLanguageVersion();

    // broken language 
    if (currentVersion == -1) {
      return false;
    }

    // if we don't have version, it's simply 0 
    if (importVersion == -1) {
      importVersion = 0;
    }
    if (importVersion > currentVersion) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Module " + module + " depends on version " + importVersion + " of language " + language + " which is higher than available version (" + currentVersion + ")");
      }
      return false;
    }
    return importVersion < currentVersion;
  }
  public static Iterable<MigrationScriptReference> getNextStepScripts(SModule module) {
    List<MigrationScriptReference> result = ListSequence.fromList(new ArrayList<MigrationScriptReference>());
    for (SLanguage lang : SetSequence.fromSet(new SLanguageHierarchy(module.getUsedLanguages()).getExtended())) {
      int currentLangVersion = lang.getLanguageVersion();
      int ver = module.getUsedLanguageVersion(lang);

      ver = Math.max(ver, 0);
      currentLangVersion = Math.max(currentLangVersion, 0);

      if (ver < currentLangVersion) {
        ListSequence.fromList(result).addElement(new MigrationScriptReference(lang, ver));
      }
    }
    return result;
  }
  public static Iterable<MigrationScriptReference> getAllScriptsToBeExecuted(SModule module) {
    List<MigrationScriptReference> result = ListSequence.fromList(new ArrayList<MigrationScriptReference>());
    for (SLanguage lang : SetSequence.fromSet(new SLanguageHierarchy(module.getUsedLanguages()).getExtended())) {
      int currentLangVersion = lang.getLanguageVersion();
      int ver = module.getUsedLanguageVersion(lang);

      ver = Math.max(ver, 0);
      currentLangVersion = Math.max(currentLangVersion, 0);
      for (int i = ver; i < currentLangVersion; i++) {
        ListSequence.fromList(result).addElement(new MigrationScriptReference(lang, i));
      }
    }
    return result;
  }
  public static boolean isApplied(MigrationScriptReference script, SModule module) {
    return !(new SLanguageHierarchy(module.getUsedLanguages()).getExtended().contains(script.getLanguage())) || script.getFromVersion() < module.getUsedLanguageVersion(script.getLanguage());
  }
  public static Set<SModule> getModuleDependencies(SModule module) {
    Set<SModule> dependencies = SetSequence.fromSetWithValues(new HashSet<SModule>(), new GlobalModuleDependenciesManager(module).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE));
    SetSequence.fromSet(dependencies).addElement(module);
    return dependencies;
  }
  public static boolean isAppliedForAllMyDeps(final MigrationScriptReference script, SModule module) {
    return SetSequence.fromSet(getModuleDependencies(module)).ofType(AbstractModule.class).all(new IWhereFilter<AbstractModule>() {
      public boolean accept(AbstractModule it) {
        return isApplied(script, it);
      }
    });
  }
  protected static Logger LOG = LogManager.getLogger(MigrationsUtil.class);
}
