package jetbrains.mps.lang.migration.runtime.base;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.util.containers.EmptyIterable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Map;
import java.util.Collections;

public abstract class MigrationScriptBase implements MigrationScript {
  private DataCollector myDC = new MigrationScriptBase.EmptyDataCollector();

  public String getCaption() {
    return "";
  }

  public void setDataCollector(DataCollector dataCollector) {
    myDC = dataCollector;
  }

  protected DataCollector getDataCollector() {
    return myDC;
  }

  @Nullable
  public SNode execute(SModule module) {
    // todo remove implementation after 3.2.  
    return null;
  }

  public SNode execute(SModule module, DataCollector c) {
    // todo remove after 3.2 
    setDataCollector(c);
    return execute(module);
  }

  public Iterable<MigrationScriptReference> requiresData() {
    return new EmptyIterable<MigrationScriptReference>();
  }

  public Iterable<MigrationScriptReference> executeAfter() {
    return new EmptyIterable<MigrationScriptReference>();
  }

  @Override
  public String toString() {
    return getCaption();
  }

  protected void adjustMigratedIds(SNode node, SNode migrated) {
    if (!(ListSequence.fromList(SNodeOperations.getNodeAncestors(node, null, false)).contains(migrated))) {
      ((jetbrains.mps.smodel.SNode) migrated).setId(node.getNodeId());
    }
  }

  private class EmptyDataCollector implements DataCollector {
    public EmptyDataCollector() {
    }
    public Map<SModule, SNode> collectData(SModule myModule, MigrationScriptReference scriptReference) {
      return Collections.<SModule,SNode>emptyMap();
    }
  }
}
