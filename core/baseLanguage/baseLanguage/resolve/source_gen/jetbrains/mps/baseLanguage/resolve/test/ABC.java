package jetbrains.mps.baseLanguage.resolve.test;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.List;

public class ABC {
  private static int fact88 = fact_owx_a0a0o0a1(88);

  public void a() {
    ABC.B.C abc;
    new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        try {
        } catch (<!TextGen not found for 'jetbrains.mps.baseLanguage.structure.Type'!> ) {
        }
      }
    };
  }

  public static int fact_owx_a0a0o0a1(int i) throws IndexOutOfBoundsException {
    return fact_owx_a0a0o0a1(i) + fact_owx_a0a0o0a1(i - 1);
  }

  public class II {
    public II() {
      Object i;
      boolean b = i instanceof List<String>;
    }

    public void go() {
    }
  }

  public static class A {
    public A() {
      ABC.B.C c;
      ABC.B.C c;

    }

    public int goUp() {
      if (2 == 3) {
        return 2;
      }

      if (3 == 4) {
        return 11;
      }

      if (true) {
        int i;
        int j;
      }

      int qq = 5;
      int[] a = new int[]{1, 2, qq};
      for (Object i : (a)) {

      }
      int i = seleI();

      int e = seleXI();

      int calc6 = calc(6);
      int e22 = (calc6 + 1);

      int ttt = fact88;

      int qq1 = ttt + fact_owx_a0a0q0a1();

      int ee;
      int bbb = 3;
      int i = (ee = 1 + bbb);
      q();

      int res2 = this.goUp() + new _FunctionTypes._return_P0_E0<Integer>() {
        public Integer invoke() {
          q();
          return 1;
        }
      }.invoke();

      return i + e22;
    }

    public static void q() {
    }

    public static int seleI() {
      q();
      return 42;
    }

    private static int seleXI() {
      q();
      return 42;
    }

    public static int calc(int i) {
      return calc(i - 1) + calc(i - 2);
    }

    public static int fact_owx_a0a0q0a1() {
      return 123;
    }
  }

  public class B {
    public B() {
      ABC.B.C c;
      new ABC.A();
      ABC.B b = new ABC.B();
    }

    public class C {
      public C() {
        ABC.B.C c;
        ABC.B b;
        ABC.A a;
      }
    }
  }
}
