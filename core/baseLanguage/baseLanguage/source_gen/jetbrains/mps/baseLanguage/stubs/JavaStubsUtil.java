package jetbrains.mps.baseLanguage.stubs;

/*Generated by MPS */

import java.util.ArrayList;
import java.util.Set;

import jetbrains.mps.project.StubPath;
import jetbrains.mps.smodel.descriptor.source.StubModelDataSource;
import jetbrains.mps.stubs.BaseStubModelDescriptor;
import jetbrains.mps.stubs.StubModelManagerFactory;
import jetbrains.mps.stubs.StubLocation;
import java.util.HashSet;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.reloading.ClassPathFactory;
import jetbrains.mps.stubs.StubDescriptor;

/*package*/ class JavaStubsUtil {
  public JavaStubsUtil() {
  }

  /*package*/ static Set<BaseStubModelDescriptor> getModelDescriptors(StubModelManagerFactory stubCreator, StubLocation location, String languageId) {
    Set<BaseStubModelDescriptor> result = new HashSet<BaseStubModelDescriptor>();
    JavaStubsUtil.getModelDescriptors(stubCreator, location, languageId, result);
    return result;
  }

  private static void getModelDescriptors(StubModelManagerFactory stubCreator, StubLocation location, String languageId, Set<BaseStubModelDescriptor> result) {
    String pack = location.getPrefix();
    IClassPathItem cpItem = createClassPathItem(location);
    if (cpItem == null) {
      return;
    }

    for (String subpackage : cpItem.getSubpackages(pack)) {
      if (cpItem.getRootClasses(subpackage).iterator().hasNext()) {
        SModelReference modelReference = StubHelper.uidForPackageInStubs(subpackage, languageId, location.getModule().getModuleReference());
        if (SModelRepository.getInstance().getModelDescriptor(modelReference) != null) {
          SModelDescriptor descriptor = SModelRepository.getInstance().getModelDescriptor(modelReference);
          assert descriptor instanceof BaseStubModelDescriptor;
          result.add((BaseStubModelDescriptor) descriptor);
        } else {
          result.add(new BaseStubModelDescriptor(stubCreator, modelReference, true, new StubModelDataSource(new ArrayList<StubPath>())));
        }
      }
      StubLocation newLocation = new StubLocation(location.getPath(), subpackage, location.getModuleRef());
      getModelDescriptors(stubCreator, newLocation, languageId, result);
    }
  }

  @Nullable
  /*package*/ static IClassPathItem createClassPathItem(StubLocation location) {
    return ClassPathFactory.getInstance().createFromPath(location.getPath());
  }

  public static Set<StubDescriptor> iterateClassPath(IClassPathItem item) {
    Set<StubDescriptor> result = new HashSet<StubDescriptor>();
    iterateClassPath(item, result, "");
    return result;
  }

  private static void iterateClassPath(IClassPathItem item, Set<StubDescriptor> result, String packageName) {
    for (String cls : item.getRootClasses(packageName)) {
      result.add(new StubDescriptor(cls, packageName, item));
    }
    for (String subpack : item.getSubpackages(packageName)) {
      iterateClassPath(item, result, subpack);
    }
  }
}
