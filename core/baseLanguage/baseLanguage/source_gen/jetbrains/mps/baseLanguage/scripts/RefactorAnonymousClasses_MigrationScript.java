package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.ide.resolve.MethodDeclarationsFixer;

public class RefactorAnonymousClasses_MigrationScript extends BaseMigrationScript {
  public RefactorAnonymousClasses_MigrationScript(IOperationContext operationContext) {
    super("Refactor anonymous classes");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Refactor anonymous classes";
      }

      public String getAdditionalInfo() {
        return "Refactor anonymous classes";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.baseLanguage.structure.AnonymousClass";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return (SLinkOperations.getTarget(node, "baseMethodDeclaration", false) == null) || ListSequence.fromList(SLinkOperations.getTargets(node, "parameter", true)).isNotEmpty();
      }

      public void doUpdateInstanceNode(SNode node) {
        for (SNode parameter : SLinkOperations.getTargets(node, "parameter", true)) {
          ListSequence.fromList(SLinkOperations.getTargets(node, "actualArgument", true)).addElement(parameter);
        }
        Map<SNode, SNode> map = new HashMap<SNode, SNode>();
        new MethodDeclarationsFixer().testAndFixMethodCall(node, map);
        SNode target = map.get(node);
        if (target != null) {
          SLinkOperations.setTarget(node, "baseMethodDeclaration", (SNode) target, false);
        }
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
