package jetbrains.mps.baseLanguage.actions;

/*Generated by MPS */

import jetbrains.mps.lang.actions.SmartAction_Runtime;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.actions.SmartActionContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.actions.SmartActionUIPanel;

public class SmartActions_Generated {

  public SmartActions_Generated() {
  }

  public SmartAction_Runtime getGenerateCodeAction_1235058531184() {
    return new SmartAction_Runtime() {

      public void execute(EditorCell selectedCell, IOperationContext operationContext, SmartActionContext smartActionContext) {
        SNode ancestor = SNodeOperations.getAncestor(((SNode)selectedCell.getSNode()), "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
        for(SNode field : ((List<SNode>)smartActionContext.get("fields")[0])) {
          SNode getter = SLinkOperations.addNewChild(ancestor, "method", "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
          SPropertyOperations.set(getter, "name", "get" + NameUtil.capitalize(SPropertyOperations.getString(field, "name")));
          SLinkOperations.setNewChild(getter, "body", "jetbrains.mps.baseLanguage.structure.StatementList");
          SNode returnStatement = SLinkOperations.addNewChild(SLinkOperations.getTarget(getter, "body", true), "statement", "jetbrains.mps.baseLanguage.structure.ReturnStatement");
          SNode dotExpression = SLinkOperations.setNewChild(returnStatement, "expression", "jetbrains.mps.baseLanguage.structure.DotExpression");
          SLinkOperations.setNewChild(dotExpression, "operand", "jetbrains.mps.baseLanguage.structure.ThisExpression");
          SNode fieldRef = SLinkOperations.setNewChild(dotExpression, "operation", "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation");
          SLinkOperations.setTarget(fieldRef, "fieldDeclaration", field, false);
        }
      }

      public SmartActionUIPanel getUI(SmartActionContext smartActionContext) {
        return null;
      }

      public boolean isApplicable(EditorCell selectedCell, IOperationContext operationContext) {
        {
          SNode sNode = selectedCell.getSNode();
          if (sNode == null) {
            return false;
          }
          SNode ancestor = SNodeOperations.getAncestor(sNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
          return (ancestor != null);
        }
      }

      public String getDescriptionText() {
        return "Getter";
      }

    };
  }

}
