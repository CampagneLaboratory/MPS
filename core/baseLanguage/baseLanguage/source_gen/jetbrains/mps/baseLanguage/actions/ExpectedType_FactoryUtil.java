package jetbrains.mps.baseLanguage.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.TypeDerivable_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.pattern.util.MatchingUtil;

public class ExpectedType_FactoryUtil {
  public static boolean canComputeCastType(SNode castExpression) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(castExpression), "jetbrains.mps.baseLanguage.structure.TypeDerivable");
  }

  public static SNode createExpectedType(SNode contextNode) {
    SNode castType = null;
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(contextNode), "jetbrains.mps.baseLanguage.structure.TypeDerivable")) {
      castType = TypeDerivable_Behavior.call_deriveType_1213877435747(SNodeOperations.cast(SNodeOperations.getParent(contextNode), "jetbrains.mps.baseLanguage.structure.TypeDerivable"), contextNode);
    }
    return castType;
  }

  public static SNode getOriginalExpression(SNode enclosingNode, SNode copiedExpression) {
    SNode originalExpression = null;
    for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(enclosingNode))) {
      if (MatchingUtil.matchNodes(copiedExpression, child)) {
        originalExpression = SNodeOperations.cast(child, "jetbrains.mps.baseLanguage.structure.Expression");
      }
    }
    return originalExpression;
  }
}
