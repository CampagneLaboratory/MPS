package jetbrains.mps.baseLanguage.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;

public class PrecedenceUtil {
  public static SNode getTargetForLeftTransform(SNode contextNode, SNode resultConcept) {
    int resultingExpressionPriority = getPriority(resultConcept).ordinal();
    SNode targetNode = contextNode;
    for (SNode parentNode = SNodeOperations.getParent(targetNode); parentNode != null && SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.baseLanguage.structure.Expression") && getPriority(SNodeOperations.getConceptDeclaration(parentNode)).ordinal() <= resultingExpressionPriority; parentNode = SNodeOperations.getParent(targetNode)) {
      if (SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.baseLanguage.structure.IMethodCall")) {
        // if parent expression is IMethodCall then targetNode is either actualArgument 
        // or typeArgument (parameters of method call), so we should not go upper 
        break;
      }
      targetNode = SNodeOperations.cast(parentNode, "jetbrains.mps.baseLanguage.structure.Expression");
    }
    return targetNode;
  }

  private static PrecedenceUtil.Precedence getPriority(SNode expression) {
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      switch (SConceptPropertyOperations.getInteger(((SNode) expression), "priority")) {
        case -2:
          // || 
          return PrecedenceUtil.Precedence.J_13;
        case -1:
          // && 
          return PrecedenceUtil.Precedence.J_12;
        case 0:
          // ==, != 
          return PrecedenceUtil.Precedence.J_8;
        case 1:
          // <, <=, >, >= 
          return PrecedenceUtil.Precedence.J_7;
        case 2:
          // +, - 
          return PrecedenceUtil.Precedence.J_5;
        case 3:
          // *, /, % 
          return PrecedenceUtil.Precedence.J_4;
        case 4:
          return PrecedenceUtil.Precedence.MPS_EQUALITY_OPERATIONS;
        case 5:
          // >>, << 
          return PrecedenceUtil.Precedence.J_6;
        case 8:
          // & 
          return PrecedenceUtil.Precedence.J_9;
        case 9:
          // ^ 
          return PrecedenceUtil.Precedence.J_10;
        case 10:
          // | 
          return PrecedenceUtil.Precedence.J_11;
        default:
      }
    }

    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.ArrayAccessExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.DotExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.IMethodCall") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.VariableReference") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.collections.structure.MapElement")) {
      return PrecedenceUtil.Precedence.J_1;
    }
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.UnaryMinus") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.NotExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.BitwiseNotExpression")) {
      return PrecedenceUtil.Precedence.J_2;
    }
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.CastExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.GenericNewExpression")) {
      return PrecedenceUtil.Precedence.J_3;
    }
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.InstanceOfExpression")) {
      return PrecedenceUtil.Precedence.J_7;
    }
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression")) {
      return PrecedenceUtil.Precedence.J_14;
    }
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression")) {
      return PrecedenceUtil.Precedence.J_15;
    }
    return PrecedenceUtil.Precedence.DEFAULT;
  }

  private static   enum Precedence {
    J_1(),
    J_2(),
    J_3(),
    MPS_EQUALITY_OPERATIONS(),
    J_4(),
    J_5(),
    J_6(),
    J_7(),
    J_8(),
    J_9(),
    J_10(),
    J_11(),
    J_12(),
    J_13(),
    J_14(),
    J_15(),
    DEFAULT();

    Precedence() {
      // All J_ constants corresponds to the levels "defined" in java - see 
      // http://www.cs.princeton.edu/introcs/11precedence/ 

      // All MPS_ constants were introduced in MPS languages 

      // Actual priority of Expression is determined by ordinal of corresponding 
      // enumeration constant upper constants has higher priority then lower 
    }
  }
}
