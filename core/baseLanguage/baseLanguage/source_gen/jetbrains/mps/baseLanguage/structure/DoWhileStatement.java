package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DoWhileStatement extends jetbrains.mps.baseLanguage.structure.AbstractLoopStatement {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.DoWhileStatement";
  public static final String CONDITION = "condition";

  public DoWhileStatement(SNode node) {
    super(node);
  }

  public jetbrains.mps.baseLanguage.structure.Expression getCondition() {
    return (jetbrains.mps.baseLanguage.structure.Expression)this.getChild(Expression.class, DoWhileStatement.CONDITION);
  }

  public void setCondition(jetbrains.mps.baseLanguage.structure.Expression node) {
    super.setChild(DoWhileStatement.CONDITION, node);
  }


  public static DoWhileStatement newInstance(SModel sm, boolean init) {
    return (DoWhileStatement)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DoWhileStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DoWhileStatement newInstance(SModel sm) {
    return DoWhileStatement.newInstance(sm, false);
  }

}
