package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.BaseScope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.INodeAdapter;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class IfStatement extends BaseConcept implements BaseScope {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.IfStatement";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String CONDITION = "condition";
  public static final String IF_FALSE_STATEMENT = "ifFalseStatement";
  public static final String IF_TRUE = "ifTrue";
  public static final String ELSIF_CLAUSES = "elsifClauses";

  public IfStatement(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(IfStatement.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(IfStatement.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(IfStatement.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(IfStatement.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(IfStatement.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(IfStatement.VIRTUAL_PACKAGE, value);
  }

  public INodeAdapter getCondition() {
    return (INodeAdapter)this.getChild(, IfStatement.CONDITION);
  }

  public void setCondition(INodeAdapter node) {
    super.setChild(IfStatement.CONDITION, node);
  }

  public INodeAdapter getIfFalseStatement() {
    return (INodeAdapter)this.getChild(, IfStatement.IF_FALSE_STATEMENT);
  }

  public void setIfFalseStatement(INodeAdapter node) {
    super.setChild(IfStatement.IF_FALSE_STATEMENT, node);
  }

  public INodeAdapter getIfTrue() {
    return (INodeAdapter)this.getChild(, IfStatement.IF_TRUE);
  }

  public void setIfTrue(INodeAdapter node) {
    super.setChild(IfStatement.IF_TRUE, node);
  }

  public int getElsifClausesesCount() {
    return this.getChildCount(IfStatement.ELSIF_CLAUSES);
  }

  public Iterator<INodeAdapter> elsifClauseses() {
    return this.children(, IfStatement.ELSIF_CLAUSES);
  }

  public List<INodeAdapter> getElsifClauseses() {
    return this.getChildren(, IfStatement.ELSIF_CLAUSES);
  }

  public void addElsifClauses(INodeAdapter node) {
    this.addChild(IfStatement.ELSIF_CLAUSES, node);
  }

  public void insertElsifClauses(INodeAdapter prev, INodeAdapter node) {
    this.insertChild(prev, IfStatement.ELSIF_CLAUSES, node);
  }


  public static IfStatement newInstance(SModel sm, boolean init) {
    return (IfStatement)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static IfStatement newInstance(SModel sm) {
    return IfStatement.newInstance(sm, false);
  }

}
