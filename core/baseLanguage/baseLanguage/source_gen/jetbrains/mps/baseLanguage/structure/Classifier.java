package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.BaseScope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.INodeAdapter;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Classifier extends BaseConcept implements BaseScope, BaseScope, BaseScope, BaseScope, BaseScope, BaseScope {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.Classifier";
  public static final String NESTED_NAME = "nestedName";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String RESOLVE_INFO = "resolveInfo";
  public static final String NAME = "name";
  public static final String IS_DEPRECATED = "isDeprecated";
  public static final String VISIBILITY = "visibility";
  public static final String STATIC_FIELD = "staticField";
  public static final String METHOD = "method";
  public static final String ANNOTATION = "annotation";

  public Classifier(SNode node) {
    super(node);
  }

  public String getNestedName() {
    return this.getProperty(Classifier.NESTED_NAME);
  }

  public void setNestedName(String value) {
    this.setProperty(Classifier.NESTED_NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Classifier.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Classifier.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Classifier.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Classifier.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Classifier.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Classifier.VIRTUAL_PACKAGE, value);
  }

  public String getResolveInfo() {
    return this.getProperty(Classifier.RESOLVE_INFO);
  }

  public void setResolveInfo(String value) {
    this.setProperty(Classifier.RESOLVE_INFO, value);
  }

  public String getName() {
    return this.getProperty(Classifier.NAME);
  }

  public void setName(String value) {
    this.setProperty(Classifier.NAME, value);
  }

  public boolean getIsDeprecated() {
    return this.getBooleanProperty(Classifier.IS_DEPRECATED);
  }

  public void setIsDeprecated(boolean value) {
    this.setBooleanProperty(Classifier.IS_DEPRECATED, value);
  }

  public INodeAdapter getVisibility() {
    return (INodeAdapter)this.getChild(, Classifier.VISIBILITY);
  }

  public void setVisibility(INodeAdapter node) {
    super.setChild(Classifier.VISIBILITY, node);
  }

  public int getStaticFieldsCount() {
    return this.getChildCount(Classifier.STATIC_FIELD);
  }

  public Iterator<INodeAdapter> staticFields() {
    return this.children(, Classifier.STATIC_FIELD);
  }

  public List<INodeAdapter> getStaticFields() {
    return this.getChildren(, Classifier.STATIC_FIELD);
  }

  public void addStaticField(INodeAdapter node) {
    this.addChild(Classifier.STATIC_FIELD, node);
  }

  public void insertStaticField(INodeAdapter prev, INodeAdapter node) {
    this.insertChild(prev, Classifier.STATIC_FIELD, node);
  }

  public int getMethodsCount() {
    return this.getChildCount(Classifier.METHOD);
  }

  public Iterator<INodeAdapter> methods() {
    return this.children(, Classifier.METHOD);
  }

  public List<INodeAdapter> getMethods() {
    return this.getChildren(, Classifier.METHOD);
  }

  public void addMethod(INodeAdapter node) {
    this.addChild(Classifier.METHOD, node);
  }

  public void insertMethod(INodeAdapter prev, INodeAdapter node) {
    this.insertChild(prev, Classifier.METHOD, node);
  }

  public int getAnnotationsCount() {
    return this.getChildCount(Classifier.ANNOTATION);
  }

  public Iterator<INodeAdapter> annotations() {
    return this.children(, Classifier.ANNOTATION);
  }

  public List<INodeAdapter> getAnnotations() {
    return this.getChildren(, Classifier.ANNOTATION);
  }

  public void addAnnotation(INodeAdapter node) {
    this.addChild(Classifier.ANNOTATION, node);
  }

  public void insertAnnotation(INodeAdapter prev, INodeAdapter node) {
    this.insertChild(prev, Classifier.ANNOTATION, node);
  }


  public static Classifier newInstance(SModel sm, boolean init) {
    return (Classifier)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Classifier newInstance(SModel sm) {
    return Classifier.newInstance(sm, false);
  }

}
