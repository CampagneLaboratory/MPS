package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class SubstringExpression extends jetbrains.mps.baseLanguage.structure.Expression {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.SubstringExpression";
  public static final String OPERAND = "operand";
  public static final String START_INDEX = "startIndex";
  public static final String END_INDEX = "endIndex";

  public SubstringExpression(SNode node) {
    super(node);
  }

  public jetbrains.mps.baseLanguage.structure.Expression getOperand() {
    return (jetbrains.mps.baseLanguage.structure.Expression)this.getChild(Expression.class, SubstringExpression.OPERAND);
  }

  public void setOperand(jetbrains.mps.baseLanguage.structure.Expression node) {
    super.setChild(SubstringExpression.OPERAND, node);
  }

  public jetbrains.mps.baseLanguage.structure.Expression getStartIndex() {
    return (jetbrains.mps.baseLanguage.structure.Expression)this.getChild(Expression.class, SubstringExpression.START_INDEX);
  }

  public void setStartIndex(jetbrains.mps.baseLanguage.structure.Expression node) {
    super.setChild(SubstringExpression.START_INDEX, node);
  }

  public jetbrains.mps.baseLanguage.structure.Expression getEndIndex() {
    return (jetbrains.mps.baseLanguage.structure.Expression)this.getChild(Expression.class, SubstringExpression.END_INDEX);
  }

  public void setEndIndex(jetbrains.mps.baseLanguage.structure.Expression node) {
    super.setChild(SubstringExpression.END_INDEX, node);
  }


  public static SubstringExpression newInstance(SModel sm, boolean init) {
    return (SubstringExpression)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.SubstringExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static SubstringExpression newInstance(SModel sm) {
    return SubstringExpression.newInstance(sm, false);
  }

}
