package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import jetbrains.mps.baseLanguage.structure.StatementList;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.structure.ParameterDeclaration;
import java.util.List;
import jetbrains.mps.baseLanguage.structure.AnnotationInstance;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BaseMethodDeclaration extends jetbrains.mps.baseLanguage.structure.GenericDeclaration implements jetbrains.mps.baseLanguage.structure.IValidIdentifier, jetbrains.mps.baseLanguage.structure.HasAnnotation, jetbrains.mps.baseLanguage.structure.IBLDeprecatable, jetbrains.mps.baseLanguage.structure.IStatementListContainer, jetbrains.mps.lang.core.structure.IContainer, jetbrains.mps.baseLanguage.structure.TypeAnnotable {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String IS_FINAL = "isFinal";
  public static final String IS_DEPRECATED = "isDeprecated";
  public static final String RETURN_TYPE = "returnType";
  public static final String BODY = "body";
  public static final String PARAMETER = "parameter";
  public static final String THROWS_ITEM = "throwsItem";
  public static final String ANNOTATION = "annotation";

  public BaseMethodDeclaration(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(BaseMethodDeclaration.NAME);
  }

  public void setName(String value) {
    this.setProperty(BaseMethodDeclaration.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(BaseMethodDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BaseMethodDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BaseMethodDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BaseMethodDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BaseMethodDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BaseMethodDeclaration.VIRTUAL_PACKAGE, value);
  }

  public boolean getIsFinal() {
    return this.getBooleanProperty(BaseMethodDeclaration.IS_FINAL);
  }

  public void setIsFinal(boolean value) {
    this.setBooleanProperty(BaseMethodDeclaration.IS_FINAL, value);
  }

  public boolean getIsDeprecated() {
    return this.getBooleanProperty(BaseMethodDeclaration.IS_DEPRECATED);
  }

  public void setIsDeprecated(boolean value) {
    this.setBooleanProperty(BaseMethodDeclaration.IS_DEPRECATED, value);
  }

  public jetbrains.mps.baseLanguage.structure.Type getReturnType() {
    return (jetbrains.mps.baseLanguage.structure.Type)this.getChild(Type.class, BaseMethodDeclaration.RETURN_TYPE);
  }

  public void setReturnType(jetbrains.mps.baseLanguage.structure.Type node) {
    super.setChild(BaseMethodDeclaration.RETURN_TYPE, node);
  }

  public jetbrains.mps.baseLanguage.structure.StatementList getBody() {
    return (jetbrains.mps.baseLanguage.structure.StatementList)this.getChild(StatementList.class, BaseMethodDeclaration.BODY);
  }

  public void setBody(jetbrains.mps.baseLanguage.structure.StatementList node) {
    super.setChild(BaseMethodDeclaration.BODY, node);
  }

  public int getParametersCount() {
    return this.getChildCount(BaseMethodDeclaration.PARAMETER);
  }

  public Iterator<jetbrains.mps.baseLanguage.structure.ParameterDeclaration> parameters() {
    return this.children(ParameterDeclaration.class, BaseMethodDeclaration.PARAMETER);
  }

  public List<jetbrains.mps.baseLanguage.structure.ParameterDeclaration> getParameters() {
    return this.getChildren(ParameterDeclaration.class, BaseMethodDeclaration.PARAMETER);
  }

  public void addParameter(jetbrains.mps.baseLanguage.structure.ParameterDeclaration node) {
    this.addChild(BaseMethodDeclaration.PARAMETER, node);
  }

  public void insertParameter(jetbrains.mps.baseLanguage.structure.ParameterDeclaration prev, jetbrains.mps.baseLanguage.structure.ParameterDeclaration node) {
    this.insertChild(prev, BaseMethodDeclaration.PARAMETER, node);
  }

  public int getThrowsItemsCount() {
    return this.getChildCount(BaseMethodDeclaration.THROWS_ITEM);
  }

  public Iterator<jetbrains.mps.baseLanguage.structure.Type> throwsItems() {
    return this.children(Type.class, BaseMethodDeclaration.THROWS_ITEM);
  }

  public List<jetbrains.mps.baseLanguage.structure.Type> getThrowsItems() {
    return this.getChildren(Type.class, BaseMethodDeclaration.THROWS_ITEM);
  }

  public void addThrowsItem(jetbrains.mps.baseLanguage.structure.Type node) {
    this.addChild(BaseMethodDeclaration.THROWS_ITEM, node);
  }

  public void insertThrowsItem(jetbrains.mps.baseLanguage.structure.Type prev, jetbrains.mps.baseLanguage.structure.Type node) {
    this.insertChild(prev, BaseMethodDeclaration.THROWS_ITEM, node);
  }

  public int getAnnotationsCount() {
    return this.getChildCount(BaseMethodDeclaration.ANNOTATION);
  }

  public Iterator<jetbrains.mps.baseLanguage.structure.AnnotationInstance> annotations() {
    return this.children(AnnotationInstance.class, BaseMethodDeclaration.ANNOTATION);
  }

  public List<jetbrains.mps.baseLanguage.structure.AnnotationInstance> getAnnotations() {
    return this.getChildren(AnnotationInstance.class, BaseMethodDeclaration.ANNOTATION);
  }

  public void addAnnotation(jetbrains.mps.baseLanguage.structure.AnnotationInstance node) {
    this.addChild(BaseMethodDeclaration.ANNOTATION, node);
  }

  public void insertAnnotation(jetbrains.mps.baseLanguage.structure.AnnotationInstance prev, jetbrains.mps.baseLanguage.structure.AnnotationInstance node) {
    this.insertChild(prev, BaseMethodDeclaration.ANNOTATION, node);
  }


  public static BaseMethodDeclaration newInstance(SModel sm, boolean init) {
    return (BaseMethodDeclaration)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BaseMethodDeclaration newInstance(SModel sm) {
    return BaseMethodDeclaration.newInstance(sm, false);
  }

}
