package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ForStatement extends AbstractForStatement {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.ForStatement";
  public static final String CONDITION = "condition";
  public static final String ITERATION = "iteration";
  public static final String ADDITIONAL_VAR = "additionalVar";

  public ForStatement(SNode node) {
    super(node);
  }

  public Expression getCondition() {
    return (Expression) this.getChild(Expression.class, ForStatement.CONDITION);
  }

  public void setCondition(Expression node) {
    super.setChild(ForStatement.CONDITION, node);
  }

  public int getIterationsCount() {
    return this.getChildCount(ForStatement.ITERATION);
  }

  public Iterator<Expression> iterations() {
    return this.children(Expression.class, ForStatement.ITERATION);
  }

  public List<Expression> getIterations() {
    return this.getChildren(Expression.class, ForStatement.ITERATION);
  }

  public void addIteration(Expression node) {
    this.addChild(ForStatement.ITERATION, node);
  }

  public void insertIteration(Expression prev, Expression node) {
    this.insertChild(prev, ForStatement.ITERATION, node);
  }

  public int getAdditionalVarsCount() {
    return this.getChildCount(ForStatement.ADDITIONAL_VAR);
  }

  public Iterator<LocalVariableDeclaration> additionalVars() {
    return this.children(LocalVariableDeclaration.class, ForStatement.ADDITIONAL_VAR);
  }

  public List<LocalVariableDeclaration> getAdditionalVars() {
    return this.getChildren(LocalVariableDeclaration.class, ForStatement.ADDITIONAL_VAR);
  }

  public void addAdditionalVar(LocalVariableDeclaration node) {
    this.addChild(ForStatement.ADDITIONAL_VAR, node);
  }

  public void insertAdditionalVar(LocalVariableDeclaration prev, LocalVariableDeclaration node) {
    this.insertChild(prev, ForStatement.ADDITIONAL_VAR, node);
  }

  public static ForStatement newInstance(SModel sm, boolean init) {
    return (ForStatement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ForStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ForStatement newInstance(SModel sm) {
    return ForStatement.newInstance(sm, false);
  }
}
