package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.INodeAdapter;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AsExpression extends BaseConcept {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.AsExpression";
  public static final String EXPRESSION = "expression";
  public static final String CLASSIFIER_TYPE = "classifierType";

  public AsExpression(SNode node) {
    super(node);
  }

  public INodeAdapter getExpression() {
    return (INodeAdapter)this.getChild(, AsExpression.EXPRESSION);
  }

  public void setExpression(INodeAdapter node) {
    super.setChild(AsExpression.EXPRESSION, node);
  }

  public INodeAdapter getClassifierType() {
    return (INodeAdapter)this.getChild(, AsExpression.CLASSIFIER_TYPE);
  }

  public void setClassifierType(INodeAdapter node) {
    super.setChild(AsExpression.CLASSIFIER_TYPE, node);
  }


  public static AsExpression newInstance(SModel sm, boolean init) {
    return (AsExpression)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AsExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AsExpression newInstance(SModel sm) {
    return AsExpression.newInstance(sm, false);
  }

}
