package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.baseLanguage.structure.ClassifierType;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AsExpression extends jetbrains.mps.baseLanguage.structure.Expression {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.AsExpression";
  public static final String EXPRESSION = "expression";
  public static final String CLASSIFIER_TYPE = "classifierType";

  public AsExpression(SNode node) {
    super(node);
  }

  public jetbrains.mps.baseLanguage.structure.Expression getExpression() {
    return (jetbrains.mps.baseLanguage.structure.Expression)this.getChild(Expression.class, AsExpression.EXPRESSION);
  }

  public void setExpression(jetbrains.mps.baseLanguage.structure.Expression node) {
    super.setChild(AsExpression.EXPRESSION, node);
  }

  public jetbrains.mps.baseLanguage.structure.ClassifierType getClassifierType() {
    return (jetbrains.mps.baseLanguage.structure.ClassifierType)this.getChild(ClassifierType.class, AsExpression.CLASSIFIER_TYPE);
  }

  public void setClassifierType(jetbrains.mps.baseLanguage.structure.ClassifierType node) {
    super.setChild(AsExpression.CLASSIFIER_TYPE, node);
  }


  public static AsExpression newInstance(SModel sm, boolean init) {
    return (AsExpression)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AsExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AsExpression newInstance(SModel sm) {
    return AsExpression.newInstance(sm, false);
  }

}
