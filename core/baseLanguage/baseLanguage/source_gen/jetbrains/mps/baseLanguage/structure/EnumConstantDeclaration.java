package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.BaseScope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.INodeAdapter;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class EnumConstantDeclaration extends BaseConcept implements BaseScope, BaseScope, BaseScope, BaseScope {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String RESOLVE_INFO = "resolveInfo";
  public static final String BASE_METHOD_DECLARATION = "baseMethodDeclaration";
  public static final String VISIBILITY = "visibility";
  public static final String ACTUAL_ARGUMENT = "actualArgument";

  public EnumConstantDeclaration(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(EnumConstantDeclaration.NAME);
  }

  public void setName(String value) {
    this.setProperty(EnumConstantDeclaration.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(EnumConstantDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(EnumConstantDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(EnumConstantDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(EnumConstantDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(EnumConstantDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(EnumConstantDeclaration.VIRTUAL_PACKAGE, value);
  }

  public String getResolveInfo() {
    return this.getProperty(EnumConstantDeclaration.RESOLVE_INFO);
  }

  public void setResolveInfo(String value) {
    this.setProperty(EnumConstantDeclaration.RESOLVE_INFO, value);
  }

  public INodeAdapter getBaseMethodDeclaration() {
    return (INodeAdapter)this.getReferent(, EnumConstantDeclaration.BASE_METHOD_DECLARATION);
  }

  public void setBaseMethodDeclaration(INodeAdapter node) {
    super.setReferent(EnumConstantDeclaration.BASE_METHOD_DECLARATION, node);
  }

  public INodeAdapter getConstructor() {
    return this.ensureAdapter(, "baseMethodDeclaration", );
  }

  public void setConstructor(INodeAdapter node) {
    ;
  }

  public INodeAdapter getVisibility() {
    return (INodeAdapter)this.getChild(, EnumConstantDeclaration.VISIBILITY);
  }

  public void setVisibility(INodeAdapter node) {
    super.setChild(EnumConstantDeclaration.VISIBILITY, node);
  }

  public int getActualArgumentsCount() {
    return this.getChildCount(EnumConstantDeclaration.ACTUAL_ARGUMENT);
  }

  public Iterator<INodeAdapter> actualArguments() {
    return this.children(, EnumConstantDeclaration.ACTUAL_ARGUMENT);
  }

  public List<INodeAdapter> getActualArguments() {
    return this.getChildren(, EnumConstantDeclaration.ACTUAL_ARGUMENT);
  }

  public void addActualArgument(INodeAdapter node) {
    this.addChild(EnumConstantDeclaration.ACTUAL_ARGUMENT, node);
  }

  public void insertActualArgument(INodeAdapter prev, INodeAdapter node) {
    this.insertChild(prev, EnumConstantDeclaration.ACTUAL_ARGUMENT, node);
  }


  public static EnumConstantDeclaration newInstance(SModel sm, boolean init) {
    return (EnumConstantDeclaration)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static EnumConstantDeclaration newInstance(SModel sm) {
    return EnumConstantDeclaration.newInstance(sm, false);
  }

}
