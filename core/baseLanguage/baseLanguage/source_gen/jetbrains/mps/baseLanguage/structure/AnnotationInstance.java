package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.INodeAdapter;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AnnotationInstance extends BaseConcept {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.AnnotationInstance";
  public static final String ANNOTATION = "annotation";
  public static final String VALUE = "value";

  public AnnotationInstance(SNode node) {
    super(node);
  }

  public INodeAdapter getAnnotation() {
    return (INodeAdapter)this.getReferent(, AnnotationInstance.ANNOTATION);
  }

  public void setAnnotation(INodeAdapter node) {
    super.setReferent(AnnotationInstance.ANNOTATION, node);
  }

  public int getValuesCount() {
    return this.getChildCount(AnnotationInstance.VALUE);
  }

  public Iterator<INodeAdapter> values() {
    return this.children(, AnnotationInstance.VALUE);
  }

  public List<INodeAdapter> getValues() {
    return this.getChildren(, AnnotationInstance.VALUE);
  }

  public void addValue(INodeAdapter node) {
    this.addChild(AnnotationInstance.VALUE, node);
  }

  public void insertValue(INodeAdapter prev, INodeAdapter node) {
    this.insertChild(prev, AnnotationInstance.VALUE, node);
  }


  public static AnnotationInstance newInstance(SModel sm, boolean init) {
    return (AnnotationInstance)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstance", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AnnotationInstance newInstance(SModel sm) {
    return AnnotationInstance.newInstance(sm, false);
  }

}
