package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class SuperConstructorInvocation extends Statement {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation";
  public static final String CONSTRUCTOR_DECLARATION = "constructorDeclaration";
  public static final String ACTUAL_ARGUMENT = "actualArgument";

  public SuperConstructorInvocation(SNode node) {
    super(node);
  }

  public ConstructorDeclaration getConstructorDeclaration() {
    return (ConstructorDeclaration)this.getReferent(ConstructorDeclaration.class, SuperConstructorInvocation.CONSTRUCTOR_DECLARATION);
  }

  public void setConstructorDeclaration(ConstructorDeclaration node) {
    super.setReferent(SuperConstructorInvocation.CONSTRUCTOR_DECLARATION, node);
  }

  public int getActualArgumentsCount() {
    return this.getChildCount(SuperConstructorInvocation.ACTUAL_ARGUMENT);
  }

  public Iterator<Expression> actualArguments() {
    return this.children(Expression.class, SuperConstructorInvocation.ACTUAL_ARGUMENT);
  }

  public List<Expression> getActualArguments() {
    return this.getChildren(Expression.class, SuperConstructorInvocation.ACTUAL_ARGUMENT);
  }

  public void addActualArgument(Expression node) {
    this.addChild(SuperConstructorInvocation.ACTUAL_ARGUMENT, node);
  }

  public void insertActualArgument(Expression prev, Expression node) {
    this.insertChild(prev, SuperConstructorInvocation.ACTUAL_ARGUMENT, node);
  }


  public static SuperConstructorInvocation newInstance(SModel sm, boolean init) {
    return (SuperConstructorInvocation)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static SuperConstructorInvocation newInstance(SModel sm) {
    return SuperConstructorInvocation.newInstance(sm, false);
  }

}
