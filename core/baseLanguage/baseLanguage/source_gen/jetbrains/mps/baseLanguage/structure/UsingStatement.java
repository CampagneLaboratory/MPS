package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.INodeAdapter;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class UsingStatement extends BaseConcept {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.UsingStatement";
  public static final String BODY = "body";
  public static final String RESOURCE = "resource";

  public UsingStatement(SNode node) {
    super(node);
  }

  public INodeAdapter getBody() {
    return (INodeAdapter)this.getChild(, UsingStatement.BODY);
  }

  public void setBody(INodeAdapter node) {
    super.setChild(UsingStatement.BODY, node);
  }

  public int getResourcesCount() {
    return this.getChildCount(UsingStatement.RESOURCE);
  }

  public Iterator<INodeAdapter> resources() {
    return this.children(, UsingStatement.RESOURCE);
  }

  public List<INodeAdapter> getResources() {
    return this.getChildren(, UsingStatement.RESOURCE);
  }

  public void addResource(INodeAdapter node) {
    this.addChild(UsingStatement.RESOURCE, node);
  }

  public void insertResource(INodeAdapter prev, INodeAdapter node) {
    this.insertChild(prev, UsingStatement.RESOURCE, node);
  }


  public static UsingStatement newInstance(SModel sm, boolean init) {
    return (UsingStatement)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.UsingStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static UsingStatement newInstance(SModel sm) {
    return UsingStatement.newInstance(sm, false);
  }

}
