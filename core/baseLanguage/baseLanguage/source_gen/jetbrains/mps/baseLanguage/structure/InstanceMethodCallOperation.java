package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.Iterator;
import java.util.List;

public class InstanceMethodCallOperation extends BaseConcept implements IOperation, IMethodCall {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
  public static String BASE_METHOD_DECLARATION = "baseMethodDeclaration";
  public static String ACTUAL_ARGUMENT = "actualArgument";
  public static String SHORT_DESCRIPTION = "shortDescription";
  public static String ALIAS = "alias";
  public static String VIRTUAL_PACKAGE = "virtualPackage";

  public  InstanceMethodCallOperation(SNode node) {
    super(node);
  }

  public static InstanceMethodCallOperation newInstance(SModel sm, boolean init) {
    return (InstanceMethodCallOperation)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static InstanceMethodCallOperation newInstance(SModel sm) {
    return InstanceMethodCallOperation.newInstance(sm, false);
  }


  public BaseMethodDeclaration getBaseMethodDeclaration() {
    return (BaseMethodDeclaration)this.getReferent(InstanceMethodCallOperation.BASE_METHOD_DECLARATION);
  }

  public void setBaseMethodDeclaration(BaseMethodDeclaration node) {
    super.setReferent(InstanceMethodCallOperation.BASE_METHOD_DECLARATION, node);
  }

  public InstanceMethodDeclaration getInstanceMethodDeclaration() {
    return (InstanceMethodDeclaration)this.getBaseMethodDeclaration();
  }

  public void setInstanceMethodDeclaration(InstanceMethodDeclaration node) {
    this.setBaseMethodDeclaration(node);
  }

  public int getActualArgumentsCount() {
    return this.getChildCount(InstanceMethodCallOperation.ACTUAL_ARGUMENT);
  }

  public Iterator<Expression> actualArguments() {
    return this.children(InstanceMethodCallOperation.ACTUAL_ARGUMENT);
  }

  public List<Expression> getActualArguments() {
    return this.getChildren(InstanceMethodCallOperation.ACTUAL_ARGUMENT);
  }

  public void addActualArgument(Expression node) {
    this.addChild(InstanceMethodCallOperation.ACTUAL_ARGUMENT, node);
  }

  public void insertActualArgument(Expression prev, Expression node) {
    this.insertChild(prev, InstanceMethodCallOperation.ACTUAL_ARGUMENT, node);
  }

  public String getShortDescription() {
    return this.getProperty(InstanceMethodCallOperation.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(InstanceMethodCallOperation.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(InstanceMethodCallOperation.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(InstanceMethodCallOperation.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(InstanceMethodCallOperation.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(InstanceMethodCallOperation.VIRTUAL_PACKAGE, value);
  }

}
