package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.INodeAdapter;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ThisConstructorInvocation extends BaseConcept {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation";
  public static final String CONSTRUCTOR_DECLARATION = "constructorDeclaration";
  public static final String ACTUAL_ARGUMENT = "actualArgument";

  public ThisConstructorInvocation(SNode node) {
    super(node);
  }

  public INodeAdapter getConstructorDeclaration() {
    return (INodeAdapter)this.getReferent(, ThisConstructorInvocation.CONSTRUCTOR_DECLARATION);
  }

  public void setConstructorDeclaration(INodeAdapter node) {
    super.setReferent(ThisConstructorInvocation.CONSTRUCTOR_DECLARATION, node);
  }

  public int getActualArgumentsCount() {
    return this.getChildCount(ThisConstructorInvocation.ACTUAL_ARGUMENT);
  }

  public Iterator<INodeAdapter> actualArguments() {
    return this.children(, ThisConstructorInvocation.ACTUAL_ARGUMENT);
  }

  public List<INodeAdapter> getActualArguments() {
    return this.getChildren(, ThisConstructorInvocation.ACTUAL_ARGUMENT);
  }

  public void addActualArgument(INodeAdapter node) {
    this.addChild(ThisConstructorInvocation.ACTUAL_ARGUMENT, node);
  }

  public void insertActualArgument(INodeAdapter prev, INodeAdapter node) {
    this.insertChild(prev, ThisConstructorInvocation.ACTUAL_ARGUMENT, node);
  }


  public static ThisConstructorInvocation newInstance(SModel sm, boolean init) {
    return (ThisConstructorInvocation)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ThisConstructorInvocation newInstance(SModel sm) {
    return ThisConstructorInvocation.newInstance(sm, false);
  }

}
