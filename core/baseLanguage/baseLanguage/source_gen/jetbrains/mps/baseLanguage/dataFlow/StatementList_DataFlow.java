package jetbrains.mps.baseLanguage.dataFlow;

/*Generated by MPS */

import jetbrains.mps.dataFlow.DataFlowBuilder;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.dataFlow.DataFlowBuilderContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.baseLanguage.LastStatementUtil;
import jetbrains.mps.project.GlobalScope;

public class StatementList_DataFlow extends DataFlowBuilder {

  public  StatementList_DataFlow() {
  }

  public void build(final IOperationContext operationContext, final DataFlowBuilderContext _context) {
    _context.getBuilder().emitNop();
    for(SNode s : SLinkOperations.getTargets(_context.getNode(), "statement", true)) {
      _context.getBuilder().build(s);
    }
    if (!(SequenceOperations.isEmpty(SLinkOperations.getTargets(_context.getNode(), "statement", true)))) {
      SNode lastStatement = SequenceOperations.getLast(SLinkOperations.getTargets(_context.getNode(), "statement", true));
      if (LastStatementUtil.canMakeReturnStatement(lastStatement, GlobalScope.getInstance())) {
        _context.getBuilder().emitRet();
      }
    }
  }

}
