package jetbrains.mps.baseLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodePropertyGetter;
import jetbrains.mps.smodel.constraints.INodePropertySetter;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ClassConcept_isStatic_PropertyConstraint implements IModelConstraints, INodePropertyGetter, INodePropertySetter {
  public ClassConcept_isStatic_PropertyConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodePropertyGetter("jetbrains.mps.baseLanguage.structure.ClassConcept", "isStatic", this);
    manager.registerNodePropertySetter("jetbrains.mps.baseLanguage.structure.ClassConcept", "isStatic", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodePropertyGetter("jetbrains.mps.baseLanguage.structure.ClassConcept", "isStatic");
    manager.unRegisterNodePropertySetter("jetbrains.mps.baseLanguage.structure.ClassConcept", "isStatic");
  }

  public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
    return !(SPropertyOperations.getBoolean(node, "nonStatic"));
  }

  public void execPropertySet(final SNode node, final String propertyName, final String propertyValue, final IScope scope) {
    SPropertyOperations.set(node, "nonStatic", "" + !((SPropertyOperations.getBoolean(propertyValue))));
  }
}
