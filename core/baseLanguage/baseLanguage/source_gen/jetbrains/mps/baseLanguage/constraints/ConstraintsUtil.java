package jetbrains.mps.baseLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class ConstraintsUtil {
  private ConstraintsUtil() {
  }

  public static boolean isInNonStaticClasssifierContext(SNode node) {
    if (!(isInsideOfClassifier(node))) {
      return false;
    }
    return ListSequence.fromList(SNodeOperations.getAncestorsWhereConceptInList(node, new String[]{"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration","jetbrains.mps.baseLanguage.structure.ConstructorDeclaration","jetbrains.mps.baseLanguage.structure.FieldDeclaration","jetbrains.mps.baseLanguage.structure.InstanceInitializer"}, false)).isNotEmpty();
  }

  public static boolean isInsideOfClassifier(SNode node) {
    return (SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.Classifier", true, false) != null);
  }
}
