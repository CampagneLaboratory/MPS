package jetbrains.mps.baseLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.baseLanguage.search.ClassifierAndSuperClassifiersScope;
import jetbrains.mps.baseLanguage.structure.Classifier;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.search.VisibilityUtil;

public class PropertyReference_property_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {

  public PropertyReference_property_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.baseLanguage.structure.PropertyReference", "property", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.baseLanguage.structure.PropertyReference", "property");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    if (!(SNodeOperations.isInstanceOf(, "jetbrains.mps.baseLanguage.structure.DotExpression"))) {
      return null;
    }
    SNode opClassifier = ;
    if (opClassifier == null) {
      return null;
    }
    List<SNode> resultProperties = ;
    List<SNode> classifiers = ((List<SNode>)new ClassifierAndSuperClassifiersScope(((Classifier)SNodeOperations.getAdapter(opClassifier))).getClassifierNodes());
    for(SNode classifier : ListSequence.fromList(classifiers)) {
      if (SNodeOperations.isInstanceOf(classifier, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
        SNode classConcept = SNodeOperations.cast(classifier, "jetbrains.mps.baseLanguage.structure.ClassConcept");
        List<SNode> properties = SLinkOperations.getTargets(classConcept, "property", true);
        for(SNode property : ListSequence.fromList(properties)) {
          if (VisibilityUtil.isVisible(, property)) {
            ListSequence.fromList(resultProperties).addElement(property);
          }
        }
      }
    }
    return resultProperties;
  }

}
