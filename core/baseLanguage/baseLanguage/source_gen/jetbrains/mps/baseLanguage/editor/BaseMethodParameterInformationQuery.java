package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.ParametersInformation;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.IMemberContainer_Behavior;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.apache.commons.lang.ObjectUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.editor.runtime.StyledTextPrinter;
import jetbrains.mps.lang.core.behavior.BaseConcept_Behavior;

public class BaseMethodParameterInformationQuery extends ParametersInformation {
  public BaseMethodParameterInformationQuery() {
  }

  public List<SNode> getMethods(SNode node, EditorContext editorContext) {
    SNode method = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.IMethodCall"), "baseMethodDeclaration", false);
    SNode classifier = SNodeOperations.cast(SNodeOperations.getParent(method), "jetbrains.mps.baseLanguage.structure.IMemberContainer");
    List<SNode> members = IMemberContainer_Behavior.call_getMembers_1213877531970(classifier);
    List<SNode> methodsToShow = new ArrayList<SNode>();
    for (SNode member : ListSequence.fromList(members)) {
      if (SNodeOperations.isInstanceOf(member, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration") && ObjectUtils.equals(SPropertyOperations.getString(SNodeOperations.cast(member, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "name"), SPropertyOperations.getString(method, "name"))) {
        ListSequence.fromList(methodsToShow).addElement(SNodeOperations.cast(member, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
      }
    }
    return methodsToShow;
  }

  public void getStyledMethodPresentation(SNode node, EditorContext editorContext, SNode method, StyledTextPrinter styledText) {
    styledText.print(BaseConcept_Behavior.call_getPresentation_1213877396640(SNodeOperations.cast(method, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")));
  }

  public boolean isMethodCurrent(SNode node, EditorContext editorContext, SNode method) {
    return SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.IMethodCall"), "baseMethodDeclaration", false) == method;
  }
}
