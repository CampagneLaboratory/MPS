package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.ParametersInformation;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import jetbrains.mps.baseLanguage.behavior.IMemberContainer_Behavior;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.apache.commons.lang.ObjectUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.editor.runtime.StyledTextPrinter;
import jetbrains.mps.lang.core.behavior.BaseConcept_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class BaseMethodParameterInformationQuery extends ParametersInformation<SNode> {
  public BaseMethodParameterInformationQuery() {
  }

  public Iterable<SNode> getMethods(SNode node, EditorContext editorContext) {
    SNode selectedActualArgument = this.getSelectedActualArgument(editorContext);
    SNode methodCall = (selectedActualArgument != null ?
      SNodeOperations.cast(SNodeOperations.getParent(selectedActualArgument), "jetbrains.mps.baseLanguage.structure.IMethodCall") :
      node
    );
    SNode method = SLinkOperations.getTarget(methodCall, "baseMethodDeclaration", false);
    SNode classifier = SNodeOperations.cast(SNodeOperations.getParent(method), "jetbrains.mps.baseLanguage.structure.IMemberContainer");
    List<SNode> members;
    if (SNodeOperations.isInstanceOf(methodCall, "jetbrains.mps.baseLanguage.structure.Classifier")) {
      members = Classifier_Behavior.call_getVisibleMembers_1213877306257(SNodeOperations.cast(classifier, "jetbrains.mps.baseLanguage.structure.Classifier"), methodCall, IClassifiersSearchScope.ANYTHING);
    } else {
      members = IMemberContainer_Behavior.call_getMembers_1213877531970(classifier);
    }
    List<SNode> methodsToShow = new ArrayList<SNode>();
    for (SNode member : ListSequence.fromList(members)) {
      if (SNodeOperations.isInstanceOf(member, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration") && ObjectUtils.equals(SPropertyOperations.getString(SNodeOperations.cast(member, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "name"), SPropertyOperations.getString(method, "name"))) {
        ListSequence.fromList(methodsToShow).addElement(SNodeOperations.cast(member, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
      }
    }
    return methodsToShow;
  }

  public void getStyledMethodPresentation(SNode node, EditorContext editorContext, SNode parameterObject, StyledTextPrinter styledText) {
    SNode methodDeclaration = parameterObject;
    if (!(SNodeOperations.isInstanceOf(methodDeclaration, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"))) {
      if (SLinkOperations.getTarget(methodDeclaration, "returnType", true) != null) {
        styledText.append(BaseConcept_Behavior.call_getPresentation_1213877396640(SLinkOperations.getTarget(methodDeclaration, "returnType", true)) + " ");
      } else {
        styledText.append("??? ");
      }
    }
    if (SPropertyOperations.getString(methodDeclaration, "name") != null) {
      styledText.append(SPropertyOperations.getString(methodDeclaration, "name"));
    } else {
      styledText.append("<no name>");
    }
    if (SNodeOperations.isInstanceOf(methodDeclaration, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")) {
      SNode classifier = SNodeOperations.getAncestor(methodDeclaration, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
      if (classifier != null && ListSequence.fromList(SLinkOperations.getTargets(classifier, "typeVariableDeclaration", true)).isNotEmpty()) {
        styledText.append("<");
        for (SNode param : SLinkOperations.getTargets(classifier, "typeVariableDeclaration", true)) {
          if (SNodeOperations.getIndexInParent(param) > 0) {
            styledText.append(", ");
          }
          styledText.append(BaseConcept_Behavior.call_getPresentation_1213877396640(param));
        }
        styledText.append(">");
      }
    }

    SNode selectedActualArgument = this.getSelectedActualArgument(editorContext);
    int argumentIndex = (selectedActualArgument != null ?
      SNodeOperations.getIndexInParent(selectedActualArgument) :
      -1
    );
    styledText.append("(");
    for (SNode param : SLinkOperations.getTargets(methodDeclaration, "parameter", true)) {
      if (SNodeOperations.getIndexInParent(param) > 0) {
        styledText.append(", ");
      }
      if (SNodeOperations.getIndexInParent(param) == argumentIndex) {
        styledText.setBold(true);
      }
      if (SLinkOperations.getTarget(param, "type", true) != null) {
        styledText.append(BaseConcept_Behavior.call_getPresentation_1213877396640(SLinkOperations.getTarget(param, "type", true)));
      } else {
        styledText.append("???");
      }
      if (SPropertyOperations.getString(param, "name") != null) {
        styledText.append(" " + SPropertyOperations.getString(param, "name"));
      }
      styledText.setBold(false);
    }
    styledText.append(")");
  }

  public boolean isMethodCurrent(SNode node, EditorContext editorContext, SNode parameterObject) {
    return SLinkOperations.getTarget(node, "baseMethodDeclaration", false) == parameterObject;
  }

  private SNode getSelectedActualArgument(EditorContext editorContext) {
    SNode selectedNode = editorContext.getSelectedNode();
    return ListSequence.fromList(SNodeOperations.getAncestors(selectedNode, "jetbrains.mps.baseLanguage.structure.Expression", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(SNodeOperations.getParent(it), "jetbrains.mps.baseLanguage.structure.IMethodCall") && SNodeOperations.getContainingLinkDeclaration(it) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.IMethodCall", "actualArgument");
      }
    });
  }
}
