package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_Empty;
import jetbrains.mps.nodeEditor.cellMenu.CompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.BasicCellContext;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPart;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_Generic_Group;
import java.util.List;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.Pair;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.presentation.NodePresentationUtil;

public class ClassifierClassExpression_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_4221_0(editorContext, node);
  }

  private EditorCell createCollection_4221_0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_4221_0");
    editorCell.addEditorCell(this.createReadOnlyModelAccessor_4221_0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_4221_1(editorContext, node));
    editorCell.addEditorCell(this.createConstant_4221_0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_4221_0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "class");
    editorCell.setCellId("Constant_4221_0");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_4221_1(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ".");
    editorCell.setCellId("Constant_4221_1");
    BaseLanguageStyle_StyleSheet.getDot(editorCell).apply(editorCell);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createReadOnlyModelAccessor_4221_0(final EditorContext editorContext, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
      public String getText() {
        if ((SLinkOperations.getTarget(node, "classifier", false) == null)) {
          return "?no classifier?";
        }

        return Classifier_Behavior.call_getNestedNameInContext_8540045600162183880(SLinkOperations.getTarget(node, "classifier", false), node);
      }

      public void setText(String s) {
      }

      public boolean isValidText(String s) {
        return EqualUtil.equals(s, this.getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, new CellAction_Empty());
    editorCell.setSubstituteInfo(new CompositeSubstituteInfo(editorContext, new BasicCellContext(node), new SubstituteInfoPart[]{new ClassifierClassExpression_Editor.ClassifierClassExpression_generic_cellMenu0()}));
    editorCell.setCellId("ReadOnlyModelAccessor_4221_0");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.NAVIGATABLE_REFERENCE, "classifier");
    }
    return editorCell;
  }

  public static class ClassifierClassExpression_generic_cellMenu0 extends AbstractCellMenuPart_Generic_Group {
    public ClassifierClassExpression_generic_cellMenu0() {
    }

    public List<?> createParameterObjects(SNode node, IScope scope, IOperationContext operationContext) {
      ISearchScope searchScope = SNodeOperations.getReferentSearchScope(node, "classifier", operationContext);
      List<Pair<SNode, SNode>> result = ListSequence.fromList(new ArrayList<Pair<SNode, SNode>>());
      for (SNode n : searchScope.getNodes()) {
        ListSequence.fromList(result).addElement(new Pair<SNode, SNode>(SNodeOperations.cast(n, "jetbrains.mps.baseLanguage.structure.Classifier"), node));
      }
      return result;
    }

    public void handleAction(Object parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      this.handleAction_impl((Pair<SNode, SNode>)parameterObject, node, model, scope, operationContext);
    }

    public void handleAction_impl(Pair<SNode, SNode> parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      SLinkOperations.setTarget(node, "classifier", parameterObject.o1, false);
    }

    public boolean isReferentPresentation() {
      return false;
    }

    public String getMatchingText(Object parameterObject) {
      return this.getMatchingText_internal((Pair<SNode, SNode>)parameterObject);
    }

    public String getMatchingText_internal(Pair<SNode, SNode> parameterObject) {
      return Classifier_Behavior.call_getNestedNameInContext_8540045600162183880(parameterObject.o1, parameterObject.o2);
    }

    public String getDescriptionText(Object parameterObject) {
      return this.getDescriptionText_internal((Pair<SNode, SNode>)parameterObject);
    }

    public String getDescriptionText_internal(Pair<SNode, SNode> parameterObject) {
      return NodePresentationUtil.descriptionText(parameterObject.o1);
    }
  }
}
