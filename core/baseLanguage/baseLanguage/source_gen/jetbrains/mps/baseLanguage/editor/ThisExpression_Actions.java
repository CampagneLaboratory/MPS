package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.EditorCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.behavior.FieldReferenceOperation_Behavior;
import jetbrains.mps.baseLanguage.behavior.InstanceMethodCallOperation_Behavior;

public class ThisExpression_Actions {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new ThisExpression_Actions.ThisExpression_Actions_DELETE(node));
  }

  public static class ThisExpression_Actions_DELETE extends EditorCellAction {
    /*package*/ SNode myNode;

    public ThisExpression_Actions_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.DotExpression")) {
        SNode dot = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.DotExpression");
        SNode operation = SLinkOperations.getTarget(dot, "operation", true);
        if (SNodeOperations.isInstanceOf(operation, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")) {
          SNode fieldRef = SNodeOperations.cast(operation, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation");
          if (FieldReferenceOperation_Behavior.call_canBeConvertedToLocal_5311267937735160942(fieldRef)) {
            FieldReferenceOperation_Behavior.call_convertToLocal_5311267937735269195(fieldRef);
            return;
          }
        }
        if (SNodeOperations.isInstanceOf(operation, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
          SNode methodCall = SNodeOperations.cast(operation, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
          if (InstanceMethodCallOperation_Behavior.call_canBeConvertedToLocal_5311267937735225328(methodCall)) {
            InstanceMethodCallOperation_Behavior.call_convertToLocal_5311267937735269230(methodCall);
            return;
          }
        }
      }
    }
  }
}
