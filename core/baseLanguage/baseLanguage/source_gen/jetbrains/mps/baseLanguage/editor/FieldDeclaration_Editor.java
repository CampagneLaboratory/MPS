package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class FieldDeclaration_Editor extends DefaultNodeEditor {

  /* package */AbstractCellProvider my_Component_Visibility6732_0;
  /* package */AbstractCellProvider myVariableDeclaration_NameCellComponent6732_0;
  /* package */AbstractCellProvider my_DeprecatedPart6732_0;
  /* package */AbstractCellListHandler myListHandler_1188210583261;
  /* package */AbstractCellListHandler myListHandler_1188210594842;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection1188210576812(context, node);
  }

  public EditorCell createInspectedCell(EditorContext context, SNode node) {
    return this.createCollection1188210582852(context, node);
  }

  public EditorCell createCollection1188210576812(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_11882105768121188210576812(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createComponent1223639195172(context, node));
    if (renderingCondition6732_1(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection1188210594841(context, node));
    }
    editorCell.addEditorCell(this.createCollection1188210576813(context, node));
    return editorCell;
  }

  public EditorCell createCollection1188210576813(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11882105768131188210576813(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createComponent1188210576814(context, node));
    if (renderingCondition6732_2(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createConstant1217351603902(context, node, "final"));
    }
    editorCell.addEditorCell(this.createRefNode1188210576815(context, node));
    editorCell.addEditorCell(this.createComponent1188210576816(context, node));
    if (renderingCondition6732_0(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection1188210576817(context, node));
    }
    editorCell.addEditorCell(this.createConstant1188210576828(context, node, ";"));
    return editorCell;
  }

  public EditorCell createCollection1188210576817(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11882105768171188210576817(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1188210576818(context, node, "="));
    editorCell.addEditorCell(this.createRefNode1188210576819(context, node));
    return editorCell;
  }

  public EditorCell createCollection1188210582852(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_11882105828521188210582852(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createCollection1188210583259(context, node));
    editorCell.addEditorCell(this.createRefNodeList1188210583261(context, node));
    return editorCell;
  }

  public EditorCell createCollection1188210583259(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11882105832591188210583259(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1188210583260(context, node, "annotations:"));
    return editorCell;
  }

  public EditorCell createCollection1188210594841(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_11882105948411188210594841(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createRefNodeList1188210594842(context, node));
    return editorCell;
  }

  public EditorCell createComponent1188210576814(EditorContext context, SNode node) {
    if (this.my_Component_Visibility6732_0 == null) {
      this.my_Component_Visibility6732_0 = new _Component_Visibility(node);
    }
    EditorCell editorCell = this.my_Component_Visibility6732_0.createEditorCell(context);
    setupBasic_component__Component_Visibility1188210576814(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createComponent1188210576816(EditorContext context, SNode node) {
    if (this.myVariableDeclaration_NameCellComponent6732_0 == null) {
      this.myVariableDeclaration_NameCellComponent6732_0 = new VariableDeclaration_NameCellComponent(node);
    }
    EditorCell editorCell = this.myVariableDeclaration_NameCellComponent6732_0.createEditorCell(context);
    setupBasic_component_VariableDeclaration_NameCellComponent1188210576816(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createComponent1223639195172(EditorContext context, SNode node) {
    if (this.my_DeprecatedPart6732_0 == null) {
      this.my_DeprecatedPart6732_0 = new _DeprecatedPart(node);
    }
    EditorCell editorCell = this.my_DeprecatedPart6732_0.createEditorCell(context);
    setupBasic_component__DeprecatedPart1223639195172(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createConstant1188210576818(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11882105768181188210576818(editorCell, node, context);
    setupLabel_Constant_1188210576818_1188210576818(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1188210576828(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11882105768281188210576828(editorCell, node, context);
    setupLabel_Constant_1188210576828_1188210576828(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1188210583260(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11882105832601188210583260(editorCell, node, context);
    setupLabel_Constant_1188210583260_1188210583260(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1217351603902(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12173516039021217351603902(editorCell, node, context);
    setupLabel_Constant_1217351603902_1217351603902(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createRefNodeList1188210583261(EditorContext context, SNode node) {
    if (this.myListHandler_1188210583261 == null) {
      this.myListHandler_1188210583261 = new FieldDeclaration_Editor.annotationListHandler_6732_0(node, "annotation", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1188210583261.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_annotation1188210583261(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.setRole(this.myListHandler_1188210583261.getElementRole());
    return editorCell;
  }

  public EditorCell createRefNodeList1188210594842(EditorContext context, SNode node) {
    if (this.myListHandler_1188210594842 == null) {
      this.myListHandler_1188210594842 = new FieldDeclaration_Editor.annotationListHandler_6732_1(node, "annotation", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1188210594842.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_annotation1188210594842(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.setRole(this.myListHandler_1188210594842.getElementRole());
    return editorCell;
  }

  public EditorCell createRefNode1188210576815_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_type1188210576815(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_type_1188210576815((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1188210576815(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("type");
    provider.setNoTargetText("<no type>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1188210576815_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefNode1188210576819_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_initializer1188210576819(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_initializer_1188210576819((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1188210576819(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("initializer");
    provider.setNoTargetText("<no initializer>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1188210576819_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }


  private static void setupBasic_Collection_11882105768121188210576812(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1188210576812");
  }

  private static void setupBasic_Collection_11882105768131188210576813(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1188210576813");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
    editorCell.addKeyMap(new FieldDeclaration_keyMap());
  }

  private static void setupBasic_component__Component_Visibility1188210576814(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("component__Component_Visibility");
  }

  private static void setupBasic_refNode_type1188210576815(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_component_VariableDeclaration_NameCellComponent1188210576816(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("component_VariableDeclaration_NameCellComponent");
    BaseLanguageStyle_StyleSheet.getField(editorCell).apply(editorCell);
  }

  private static void setupBasic_Collection_11882105768171188210576817(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1188210576817");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_11882105768181188210576818(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1188210576818");
    BaseLanguageStyle_StyleSheet.getOperator(editorCell).apply(editorCell);
  }

  private static void setupBasic_refNode_initializer1188210576819(EditorCell editorCell, SNode node, EditorContext context) {
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.AUTO_DELETABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_11882105768281188210576828(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1188210576828");
    BaseLanguageStyle_StyleSheet.getSemicolon(editorCell).apply(editorCell);
  }

  private static void setupBasic_Collection_11882105828521188210582852(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1188210582852");
  }

  private static void setupBasic_Collection_11882105832591188210583259(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1188210583259");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_11882105832601188210583260(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1188210583260");
  }

  private static void setupBasic_refNodeList_annotation1188210583261(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_annotation");
  }

  private static void setupBasic_Collection_11882105948411188210594841(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1188210594841");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_refNodeList_annotation1188210594842(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_annotation");
  }

  private static void setupBasic_Constant_12173516039021217351603902(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1217351603902");
    BaseLanguageStyle_StyleSheet.getKeyWord(editorCell).apply(editorCell);
  }

  private static void setupBasic_component__DeprecatedPart1223639195172(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("component__DeprecatedPart");
  }

  private static void setupLabel_refNode_type_1188210576815(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1188210576818_1188210576818(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNode_initializer_1188210576819(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1188210576828_1188210576828(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1188210583260_1188210583260(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_annotation_1188210583261(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_annotation_1188210594842(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1217351603902_1217351603902(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static boolean renderingCondition6732_0(SNode node, EditorContext editorContext, IScope scope) {
    return SLinkOperations.getTarget(node, "initializer", true) != null;
  }

  public static boolean renderingCondition6732_1(SNode node, EditorContext editorContext, IScope scope) {
    return SLinkOperations.getCount(node, "annotation") > 0;
  }

  public static boolean renderingCondition6732_2(SNode node, EditorContext editorContext, IScope scope) {
    return SPropertyOperations.getBoolean(node, "isFinal");
  }

  public static class annotationListHandler_6732_0 extends RefNodeListHandler {

    public annotationListHandler_6732_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

}
  public static class annotationListHandler_6732_1 extends RefNodeListHandler {

    public annotationListHandler_6732_1(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

}

}
