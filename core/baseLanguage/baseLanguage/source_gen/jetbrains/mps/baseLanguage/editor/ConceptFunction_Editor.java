package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptPropertyOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.ConceptFunction_Behavior;

public class ConceptFunction_Editor extends DefaultNodeEditor {

  /* package */AbstractCellProvider myConceptFunction_Component;
  /* package */AbstractCellProvider myCellProvider;

  private static void setupBasic_component_ConceptFunction_Component1196975582231(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.putUserObject(EditorCell.CELL_ID, "component_ConceptFunction_Component");
  }

  private static void setupBasic_Custom_12075779223241207577922324(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.putUserObject(EditorCell.CELL_ID, "Custom_1207577922324");
  }


  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createComponent1196975582231(context, node);
  }

  public EditorCell createInspectedCell(EditorContext context, SNode node) {
    return this.createCustom1207577922324(context, node);
  }

  public EditorCell createComponent1196975582231(EditorContext context, SNode node) {
    if (this.myConceptFunction_Component == null) {
      this.myConceptFunction_Component = new ConceptFunction_Component(node);
    }
    EditorCell editorCell = this.myConceptFunction_Component.createEditorCell(context);
    setupBasic_component_ConceptFunction_Component1196975582231(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createCustom1207577922324(EditorContext context, SNode node) {
    if (this.myCellProvider == null) {
      this.myCellProvider = this._cellProviderFactory_1207577922324(node, context);
    }
    EditorCell editorCell = this.myCellProvider.createEditorCell(context);
    setupBasic_Custom_12075779223241207577922324(editorCell, node, context);
    return editorCell;
  }

  public AbstractCellProvider _cellProviderFactory_1207577922324(final SNode node, final EditorContext editorContext) {
    return new AbstractCellProvider() {

      public EditorCell createEditorCell(EditorContext editorContext) {
        EditorCell_Collection collection = EditorCell_Collection.createVertical(editorContext, node);
        collection.addEditorCell(new EditorCell_Constant(editorContext, node, "Concept function help:"));
        if (SConceptPropertyOperations.getString(SNodeOperations.getConceptDeclaration(node), "short_description") != null) {
          collection.addEditorCell(new EditorCell_Constant(editorContext, node, SConceptPropertyOperations.getString(SNodeOperations.getConceptDeclaration(node), "short_description")));
        }
        collection.addEditorCell(new EditorCell_Constant(editorContext, node, ""));
        collection.addEditorCell(new EditorCell_Constant(editorContext, node, "Parameter help:"));
        for(SNode cfp : ConceptFunction_Behavior.call_getParameters_1213877374450(node)) {
          String alias = SConceptPropertyOperations.getString(cfp, "alias");
          String description = SConceptPropertyOperations.getString(cfp, "short_description");
          if (description == null) {
            description = "<no help. use short_description concept function property to create one>";
          }
          EditorCell_Constant message = new EditorCell_Constant(editorContext, node, alias + " : " + description);
          collection.addEditorCell(message);
        }
        return collection;
      }

    };
  }

}
