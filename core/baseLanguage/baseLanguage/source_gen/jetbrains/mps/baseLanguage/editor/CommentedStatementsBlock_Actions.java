package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCell;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.EditorCellAction;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;

public class CommentedStatementsBlock_Actions {

  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction("DELETE", new CommentedStatementsBlock_Actions.CommentedStatementsBlock_Actions_DELETE(node));
  }

  public static class CommentedStatementsBlock_Actions_DELETE extends EditorCellAction {

    /* package */SNode myNode;

    public  CommentedStatementsBlock_Actions_DELETE(SNode node) {
      this.myNode = node;
    }

    public String getDescriptionText() {
      return "remove commenting";
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      {
        ICursor<SNode> _zCursor13 = CursorFactory.createCursor(SLinkOperations.getTargets(node, "statement", true));
        try {
          while(_zCursor13.moveToNext()) {
            SNode statement = _zCursor13.getCurrent();
            SNodeOperations.insertPrevSiblingChild(node, statement);
          }
        } finally {
          _zCursor13.release();
        }
      }
      SNodeOperations.deleteNode(node);
    }

}

}
