package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.style.AttributeCalculator;
import java.awt.Color;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.MPSColors;

public class BaseLanguageStyle_StyleSheet {
  public static final Style KEY_WORD = getKeyWord(null);
  public static final Style COMPACT_KEY_WORD = getCompactKeyWord(null);
  public static final Style COMMENT = getComment(null);
  public static final Style FIELD = getField(null);
  public static final Style LOCAL_VARIABLE = getLocalVariable(null);
  public static final Style PARAMETER = getParameter(null);
  public static final Style STATIC_FIELD = getStaticField(null);
  public static final Style STRING_LITERAL = getStringLiteral(null);
  public static final Style NUMERIC_LITERAL = getNumericLiteral(null);
  public static final Style EMPTY_CELL = getEmptyCell(null);
  public static final Style INSTANCE_METHOD = getInstanceMethod(null);
  public static final Style STATIC_METHOD = getStaticMethod(null);
  public static final Style ANNOTATION = getAnnotation(null);
  public static final Style OPERATOR = getOperator(null);
  public static final Style PARENTHESIS = getParenthesis(null);
  public static final Style LEFT_PAREN = getLeftParen(null);
  public static final Style RIGHT_PAREN = getRightParen(null);
  public static final Style BRACE = getBrace(null);
  public static final Style LEFT_BRACE = getLeftBrace(null);
  public static final Style RIGHT_BRACE = getRightBrace(null);
  public static final Style BRACKET = getBracket(null);
  public static final Style METHOD_NAME = getMethodName(null);
  public static final Style VARIABLE_NAME = getVariableName(null);
  public static final Style CLASS_NAME = getClassName(null);
  public static final Style SEMICOLON = getSemicolon(null);
  public static final Style DOT = getDot(null);

  public static Style getKeyWord(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

          public Color calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateColor0216_0(cell);
          }

        });
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_0(cell);
          }

        });
      }

    };
  }

  public static Style getCompactKeyWord(final EditorCell cell) {
    return new Style(cell) {
      {
        this.putAll(BaseLanguageStyle_StyleSheet.getKeyWord(null));
        this.set(StyleAttributes.PADDING_LEFT, 0.0);
        this.set(StyleAttributes.PADDING_RIGHT, 0.0);
      }

    };
  }

  public static Style getComment(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

          public Color calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateColor0216_4(cell);
          }

        });
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_3(cell);
          }

        });
      }

    };
  }

  public static Style getField(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

          public Color calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateColor0216_5(cell);
          }

        });
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_4(cell);
          }

        });
      }

    };
  }

  public static Style getLocalVariable(final EditorCell cell) {
    return new Style(cell) {
      {
      }

    };
  }

  public static Style getParameter(final EditorCell cell) {
    return new Style(cell) {
      {
      }

    };
  }

  public static Style getStaticField(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

          public Color calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateColor0216_3(cell);
          }

        });
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_2(cell);
          }

        });
      }

    };
  }

  public static Style getStringLiteral(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

          public Color calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateColor0216_1(cell);
          }

        });
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_1(cell);
          }

        });
      }

    };
  }

  public static Style getNumericLiteral(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

          public Color calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateColor0216_6(cell);
          }

        });
      }

    };
  }

  public static Style getEmptyCell(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

          public Color calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateColor0216_2(cell);
          }

        });
      }

    };
  }

  public static Style getInstanceMethod(final EditorCell cell) {
    return new Style(cell) {
      {
      }

    };
  }

  public static Style getStaticMethod(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_5(cell);
          }

        });
      }

    };
  }

  public static Style getAnnotation(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

          public Color calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateColor0216_7(cell);
          }

        });
      }

    };
  }

  public static Style getOperator(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_6(cell);
          }

        });
        this.set(StyleAttributes.PADDING_LEFT, 1.0);
        this.set(StyleAttributes.PADDING_RIGHT, 1.0);
      }

    };
  }

  public static Style getParenthesis(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_7(cell);
          }

        });
      }

    };
  }

  public static Style getLeftParen(final EditorCell cell) {
    return new Style(cell) {
      {
        this.putAll(BaseLanguageStyle_StyleSheet.getParenthesis(null));
        this.set(StyleAttributes.LAST_POSITION_ALLOWED, false);
        this.set(StyleAttributes.PADDING_LEFT, 0.0);
        this.set(StyleAttributes.PADDING_RIGHT, 0.0);
      }

    };
  }

  public static Style getRightParen(final EditorCell cell) {
    return new Style(cell) {
      {
        this.putAll(BaseLanguageStyle_StyleSheet.getParenthesis(null));
        this.set(StyleAttributes.FIRST_POSITION_ALLOWED, false);
        this.set(StyleAttributes.PADDING_LEFT, 0.0);
        this.set(StyleAttributes.PADDING_RIGHT, 0.0);
      }

    };
  }

  public static Style getBrace(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_8(cell);
          }

        });
      }

    };
  }

  public static Style getLeftBrace(final EditorCell cell) {
    return new Style(cell) {
      {
        this.putAll(BaseLanguageStyle_StyleSheet.getBrace(null));
        this.set(StyleAttributes.PADDING_LEFT, 1.0);
        this.set(StyleAttributes.PADDING_RIGHT, 0.0);
      }

    };
  }

  public static Style getRightBrace(final EditorCell cell) {
    return new Style(cell) {
      {
        this.putAll(BaseLanguageStyle_StyleSheet.getBrace(null));
      }

    };
  }

  public static Style getBracket(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

          public Integer calculate(EditorCell cell) {
            return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_9(cell);
          }

        });
        this.set(StyleAttributes.PADDING_RIGHT, 0.0);
      }

    };
  }

  public static Style getMethodName(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.PADDING_LEFT, 0.0);
        this.set(StyleAttributes.PADDING_RIGHT, 0.0);
      }

    };
  }

  public static Style getVariableName(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.PADDING_RIGHT, 0.0);
      }

    };
  }

  public static Style getClassName(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.PADDING_LEFT, 0.0);
        this.set(StyleAttributes.PADDING_RIGHT, 0.0);
      }

    };
  }

  public static Style getSemicolon(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.PADDING_LEFT, 0.0);
        this.set(StyleAttributes.PADDING_RIGHT, 0.0);
        this.set(StyleAttributes.FIRST_POSITION_ALLOWED, false);
      }

    };
  }

  public static Style getDot(final EditorCell cell) {
    return new Style(cell) {
      {
        this.set(StyleAttributes.PADDING_LEFT, 0.0);
        this.set(StyleAttributes.PADDING_RIGHT, 0.0);
        this.set(StyleAttributes.SELECTABLE, false);
      }

    };
  }

  private static Integer calculateFontStyle0216_0(EditorCell cell) {
    int result;
    result = MPSFonts.BOLD;
    return result;
  }

  private static Integer calculateFontStyle0216_1(EditorCell cell) {
    int result;
    result = MPSFonts.BOLD;
    return result;
  }

  private static Integer calculateFontStyle0216_2(EditorCell cell) {
    int result;
    result = MPSFonts.BOLD_ITALIC;
    return result;
  }

  private static Integer calculateFontStyle0216_3(EditorCell cell) {
    int result;
    result = MPSFonts.BOLD;
    return result;
  }

  private static Integer calculateFontStyle0216_4(EditorCell cell) {
    int result;
    result = MPSFonts.BOLD;
    return result;
  }

  private static Integer calculateFontStyle0216_5(EditorCell cell) {
    int result;
    result = MPSFonts.ITALIC;
    return result;
  }

  private static Integer calculateFontStyle0216_6(EditorCell cell) {
    int result;
    result = MPSFonts.PLAIN;
    return result;
  }

  private static Integer calculateFontStyle0216_7(EditorCell cell) {
    int result;
    result = MPSFonts.PLAIN;
    return result;
  }

  private static Integer calculateFontStyle0216_8(EditorCell cell) {
    int result;
    result = MPSFonts.PLAIN;
    return result;
  }

  private static Integer calculateFontStyle0216_9(EditorCell cell) {
    int result;
    result = MPSFonts.PLAIN;
    return result;
  }

  private static Color calculateColor0216_0(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_BLUE;
    return result;
  }

  private static Color calculateColor0216_1(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_GREEN;
    return result;
  }

  private static Color calculateColor0216_2(EditorCell cell) {
    Color result;
    result = MPSColors.lightGray;
    return result;
  }

  private static Color calculateColor0216_3(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_MAGENTA;
    return result;
  }

  private static Color calculateColor0216_4(EditorCell cell) {
    Color result;
    result = MPSColors.darkGray;
    return result;
  }

  private static Color calculateColor0216_5(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_MAGENTA;
    return result;
  }

  private static Color calculateColor0216_6(EditorCell cell) {
    Color result;
    result = MPSColors.blue;
    return result;
  }

  private static Color calculateColor0216_7(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_GREEN;
    return result;
  }

}
