package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.style.AttributeCalculator;
import java.awt.Color;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.MPSColors;

public class BaseLanguageStyle_StyleSheet {
  public static final Style KEY_WORD = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateColor0216_0(cell);
        }

      });
      this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

        public Integer calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_0(cell);
        }

      });
    }

  };
  public static final Style COMPACT_KEY_WORD = new Style() {
    {
      this.putAll(BaseLanguageStyle_StyleSheet.KEY_WORD);
      this.set(StyleAttributes.PADDING_LEFT, 0.0);
      this.set(StyleAttributes.PADDING_RIGHT, 0.0);
    }

  };
  public static final Style COMMENT = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateColor0216_4(cell);
        }

      });
      this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

        public Integer calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_3(cell);
        }

      });
    }

  };
  public static final Style FIELD = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateColor0216_5(cell);
        }

      });
      this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

        public Integer calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_4(cell);
        }

      });
    }

  };
  public static final Style LOCAL_VARIABLE = new Style() {
    {
    }

  };
  public static final Style PARAMETER = new Style() {
    {
    }

  };
  public static final Style STATIC_FIELD = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateColor0216_3(cell);
        }

      });
      this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

        public Integer calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_2(cell);
        }

      });
    }

  };
  public static final Style STRING_LITERAL = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateColor0216_1(cell);
        }

      });
      this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

        public Integer calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_1(cell);
        }

      });
    }

  };
  public static final Style NUMERIC_LITERAL = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateColor0216_6(cell);
        }

      });
    }

  };
  public static final Style EMPTY_CELL = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateColor0216_2(cell);
        }

      });
    }

  };
  public static final Style INSTANCE_METHOD = new Style() {
    {
    }

  };
  public static final Style STATIC_METHOD = new Style() {
    {
      this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

        public Integer calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_5(cell);
        }

      });
    }

  };
  public static final Style ANNOTATION = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateColor0216_7(cell);
        }

      });
    }

  };
  public static final Style OPERATOR = new Style() {
    {
      this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

        public Integer calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_6(cell);
        }

      });
      this.set(StyleAttributes.PADDING_LEFT, 1.0);
      this.set(StyleAttributes.PADDING_RIGHT, 1.0);
    }

  };
  public static final Style PARENTHESIS = new Style() {
    {
      this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

        public Integer calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_7(cell);
        }

      });
    }

  };
  public static final Style LEFT_PAREN = new Style() {
    {
      this.putAll(BaseLanguageStyle_StyleSheet.PARENTHESIS);
      this.set(StyleAttributes.LAST_POSITION_ALLOWED, false);
      this.set(StyleAttributes.PADDING_LEFT, 0.0);
      this.set(StyleAttributes.PADDING_RIGHT, 0.0);
    }

  };
  public static final Style RIGHT_PAREN = new Style() {
    {
      this.putAll(BaseLanguageStyle_StyleSheet.PARENTHESIS);
      this.set(StyleAttributes.FIRST_POSITION_ALLOWED, false);
      this.set(StyleAttributes.PADDING_LEFT, 0.0);
      this.set(StyleAttributes.PADDING_RIGHT, 0.0);
    }

  };
  public static final Style BRACE = new Style() {
    {
      this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

        public Integer calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_8(cell);
        }

      });
    }

  };
  public static final Style LEFT_BRACE = new Style() {
    {
      this.putAll(BaseLanguageStyle_StyleSheet.BRACE);
      this.set(StyleAttributes.PADDING_LEFT, 1.0);
      this.set(StyleAttributes.PADDING_RIGHT, 0.0);
    }

  };
  public static final Style RIGHT_BRACE = new Style() {
    {
      this.putAll(BaseLanguageStyle_StyleSheet.BRACE);
    }

  };
  public static final Style BRACKET = new Style() {
    {
      this.set(StyleAttributes.FONT_STYLE, new AttributeCalculator <Integer>() {

        public Integer calculate(EditorCell cell) {
          return BaseLanguageStyle_StyleSheet.calculateFontStyle0216_9(cell);
        }

      });
      this.set(StyleAttributes.PADDING_RIGHT, 0.0);
    }

  };
  public static final Style METHOD_NAME = new Style() {
    {
      this.set(StyleAttributes.PADDING_LEFT, 0.0);
      this.set(StyleAttributes.PADDING_RIGHT, 0.0);
    }

  };
  public static final Style VARIABLE_NAME = new Style() {
    {
      this.set(StyleAttributes.PADDING_RIGHT, 0.0);
    }

  };
  public static final Style CLASS_NAME = new Style() {
    {
      this.set(StyleAttributes.PADDING_LEFT, 0.0);
      this.set(StyleAttributes.PADDING_RIGHT, 0.0);
    }

  };
  public static final Style SEMICOLON = new Style() {
    {
      this.set(StyleAttributes.PADDING_LEFT, 0.0);
      this.set(StyleAttributes.PADDING_RIGHT, 0.0);
      this.set(StyleAttributes.FIRST_POSITION_ALLOWED, false);
    }

  };
  public static final Style DOT = new Style() {
    {
      this.set(StyleAttributes.PADDING_LEFT, 0.0);
      this.set(StyleAttributes.PADDING_RIGHT, 0.0);
      this.set(StyleAttributes.SELECTABLE, false);
    }

  };

  private static Integer calculateFontStyle0216_0(EditorCell cell) {
    int result;
    result = MPSFonts.BOLD;
    return result;
  }

  private static Integer calculateFontStyle0216_1(EditorCell cell) {
    int result;
    result = MPSFonts.BOLD;
    return result;
  }

  private static Integer calculateFontStyle0216_2(EditorCell cell) {
    int result;
    result = MPSFonts.BOLD_ITALIC;
    return result;
  }

  private static Integer calculateFontStyle0216_3(EditorCell cell) {
    int result;
    result = MPSFonts.BOLD;
    return result;
  }

  private static Integer calculateFontStyle0216_4(EditorCell cell) {
    int result;
    result = MPSFonts.BOLD;
    return result;
  }

  private static Integer calculateFontStyle0216_5(EditorCell cell) {
    int result;
    result = MPSFonts.ITALIC;
    return result;
  }

  private static Integer calculateFontStyle0216_6(EditorCell cell) {
    int result;
    result = MPSFonts.PLAIN;
    return result;
  }

  private static Integer calculateFontStyle0216_7(EditorCell cell) {
    int result;
    result = MPSFonts.PLAIN;
    return result;
  }

  private static Integer calculateFontStyle0216_8(EditorCell cell) {
    int result;
    result = MPSFonts.PLAIN;
    return result;
  }

  private static Integer calculateFontStyle0216_9(EditorCell cell) {
    int result;
    result = MPSFonts.PLAIN;
    return result;
  }

  private static Color calculateColor0216_0(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_BLUE;
    return result;
  }

  private static Color calculateColor0216_1(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_GREEN;
    return result;
  }

  private static Color calculateColor0216_2(EditorCell cell) {
    Color result;
    result = MPSColors.lightGray;
    return result;
  }

  private static Color calculateColor0216_3(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_MAGENTA;
    return result;
  }

  private static Color calculateColor0216_4(EditorCell cell) {
    Color result;
    result = MPSColors.darkGray;
    return result;
  }

  private static Color calculateColor0216_5(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_MAGENTA;
    return result;
  }

  private static Color calculateColor0216_6(EditorCell cell) {
    Color result;
    result = MPSColors.blue;
    return result;
  }

  private static Color calculateColor0216_7(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_GREEN;
    return result;
  }

}
