package jetbrains.mps.baseLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_BreakStatement_InferenceRule implements InferenceRule_Runtime {

  public  check_BreakStatement_InferenceRule() {
  }

  public void applyRule(final SNode nodeToCheck) {
    final zClosureContext1 _zClosureContext1 = new zClosureContext1();
    if (!(SPropertyOperations.hasValue(nodeToCheck, "label", null))) {
      _zClosureContext1.lbl = SPropertyOperations.getString(nodeToCheck, "label");
      Iterable<SNode> matchingLoops = SequenceOperations.where(SNodeOperations.getAncestors(nodeToCheck, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement", false), new zPredicate1(check_BreakStatement_InferenceRule.this, _zClosureContext1));
      if (!(!(SequenceOperations.isEmpty(matchingLoops)))) {
        TypeChecker.getInstance().reportTypeError(nodeToCheck, "No such label", "jetbrains.mps.baseLanguage.helgins", "1199469904373");
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.BreakStatement";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
