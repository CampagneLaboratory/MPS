package jetbrains.mps.baseLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.SubtypingRule_Runtime;
import jetbrains.mps.bootstrap.helgins.runtime.ISubtypingRule_Runtime;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelUtil_new;

public class PrimitiveSubtyping_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {

  public PrimitiveSubtyping_SubtypingRule() {
  }

  public List<SNode> getSubOrSuperTypes(SNode primitiveTypeDescriptor) {
    List<SNode> result = new ArrayList<SNode>();
    for(SNode ref : SLinkOperations.getTargets(primitiveTypeDescriptor, "extends", true)) {
      ListSequence.fromList(result).addElement(SLinkOperations.getTarget(ref, "descriptor", false));
    }
    return result;
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.blTypes.structure.PrimitiveTypeDescriptor";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean isWeak() {
    return false;
  }

}
