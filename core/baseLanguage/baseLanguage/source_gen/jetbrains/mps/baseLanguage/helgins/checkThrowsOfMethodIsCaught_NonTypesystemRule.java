package jetbrains.mps.baseLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;

public class checkThrowsOfMethodIsCaught_NonTypesystemRule implements NonTypesystemRule_Runtime {

  public checkThrowsOfMethodIsCaught_NonTypesystemRule() {
  }

  public void applyRule(final SNode baseMethodCall) {
    if ((SNodeOperations.getAncestor(baseMethodCall, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false) == null)) {
      return;
    }
    SNode mainBaseMethodDeclaration = SLinkOperations.getTarget(baseMethodCall, "baseMethodDeclaration", false);
    if ((mainBaseMethodDeclaration == null)) {
      return;
    }
    Set<SNode> throwables = new HashSet<SNode>(SLinkOperations.getTargets(mainBaseMethodDeclaration, "throwsItem", true));
    RulesFunctions_BaseLanguage.check(throwables, baseMethodCall);
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.BaseMethodCall";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
