package jetbrains.mps.baseLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import java.util.Set;
import jetbrains.mps.dataFlow.DataFlow;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_BaseMethodDeclaration_UnreachableStatements_NonTypesystemRule implements NonTypesystemRule_Runtime {

  public  check_BaseMethodDeclaration_UnreachableStatements_NonTypesystemRule() {
  }

  public void applyRule(final SNode nodeToCheck) {
    Set<SNode> unreachable = DataFlow.getUnreachableNodes(SLinkOperations.getTarget(nodeToCheck, "body", true));
    for(SNode n : unreachable) {
      TypeChecker.getInstance().reportTypeError(n, "Unreachable node", "jetbrains.mps.baseLanguage.helgins", "1206464217913");
    }
    if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(nodeToCheck, "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType")) && !(SNodeOperations.isInstanceOf(nodeToCheck, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"))) {
      Set<SNode> expectedReturns = DataFlow.getExpectedReturns(SLinkOperations.getTarget(nodeToCheck, "body", true));
      for(SNode n : expectedReturns) {
        SNode statement = SNodeOperations.getAncestor(n, "jetbrains.mps.baseLanguage.structure.Statement", true, false);
        if (statement != null) {
          TypeChecker.getInstance().reportTypeError(statement, "Return expected", "jetbrains.mps.baseLanguage.helgins", "1206464291934");
        } else
        {
          TypeChecker.getInstance().reportTypeError(n, "Return expected", "jetbrains.mps.baseLanguage.helgins", "1206464542173");
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
