package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Map;
import jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration;
import jetbrains.mps.baseLanguage.structure.Type;
import java.util.HashMap;

public class ConstructorInvocationStatement_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getInstanceType_8008512149545154471(SNode thisNode) {
    SNode concept = SNodeOperations.getAncestor(thisNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
    List<SNode> typeVarRefs = new ArrayList<SNode>();
    for (SNode tvd : SLinkOperations.getTargets(concept, "typeVariableDeclaration", true)) {
      ListSequence.fromList(typeVarRefs).addElement(new _Quotations.QuotationClass_28().createNode(tvd));
    }
    return new _Quotations.QuotationClass_23().createNode(typeVarRefs, concept);
  }

  public static Map<TypeVariableDeclaration, Type> virtual_getTypesByTypeVars_851115533308208851(SNode thisNode) {
    return new HashMap<TypeVariableDeclaration, Type>();
  }
}
