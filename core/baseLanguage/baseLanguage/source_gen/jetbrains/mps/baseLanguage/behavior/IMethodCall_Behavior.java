package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import java.util.List;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class IMethodCall_Behavior {
  private static Class[] PARAMETERS_8008512149545154471 = {SNode.class};

  public static void init(SNode thisNode) {
  }

  public static Object[] call_getActualArguments_1219275428261(SNode thisNode, final IModule module) {
    return ListSequence.fromIterable(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "actualArgument", true)).select(new ISelector <SNode, Object>() {

      public Object select(SNode it) {
        return Expression_Behavior.call_eval_1213877519769(it, module);
      }
    })).toGenericArray(Object.class);
  }

  public static SNode virtual_deriveType_1213877435747(SNode thisNode, SNode expression) {
    // is 'experssion' an actual argument in this method call?
    if (SNodeOperations.getParent(expression) == thisNode && SNodeOperations.hasRole(expression, "jetbrains.mps.baseLanguage.structure.IMethodCall", "actualArgument")) {
      SNode method = SLinkOperations.getTarget(thisNode, "baseMethodDeclaration", false);
      int i = SNodeOperations.getIndexInParent(expression);
      if (i < SLinkOperations.getCount(method, "parameter")) {
        SNode parameterDeclaration = ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).getElement(i);
        SNode rawType = SNodeOperations.copyNode(SLinkOperations.getTarget(parameterDeclaration, "type", true));
        SNode instanceType = IMethodCall_Behavior.call_getInstanceType_8008512149545154471(thisNode);
        if ((instanceType == null)) {
          return rawType;
        }
        SNode methodClassifier = SNodeOperations.getAncestor(SLinkOperations.getTarget(thisNode, "baseMethodDeclaration", false), "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
        {
          _Patterns.Pattern_3 pattern_3 = new _Patterns.Pattern_3(methodClassifier);
          SNode coercedNode_3 = TypeChecker.getInstance().getRuntimeSupport().coerce_(instanceType, pattern_3);
          if (coercedNode_3 != null) {
            SNode resultType;
            if (SNodeOperations.isInstanceOf(rawType, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
              resultType = IMethodCall_Behavior.call_getConcreteType_8008512149545161843(thisNode, SNodeOperations.cast(rawType, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), coercedNode_3, methodClassifier);
            } else
            {
              for(SNode typeVariableReference : SNodeOperations.getDescendants(rawType, "jetbrains.mps.baseLanguage.structure.TypeVariableReference", false)) {
                SNode concreteType = IMethodCall_Behavior.call_getConcreteType_8008512149545161843(thisNode, typeVariableReference, coercedNode_3, methodClassifier);
                SNodeOperations.replaceWithAnother(typeVariableReference, concreteType);
              }
              resultType = rawType;
            }
            return resultType;
          } else
          {
            return rawType;
          }
        }
      }
    }
    return null;
  }

  public static SNode call_getConcreteType_8008512149545161843(SNode thisNode, SNode typeVariableReference, SNode coercedClt, SNode methodClassifier) {
    List<SNode> parameters = SLinkOperations.getTargets(coercedClt, "parameter", true);
    SNode concreteType;
    if (SNodeOperations.getParent(SLinkOperations.getTarget(typeVariableReference, "typeVariableDeclaration", false)) == methodClassifier) {
      concreteType = SNodeOperations.copyNode(ListSequence.fromList(parameters).getElement(SNodeOperations.getIndexInParent(SLinkOperations.getTarget(typeVariableReference, "typeVariableDeclaration", false))));
    } else
    {
      concreteType = new _Quotations.QuotationClass_16().createNode();
    }
    return concreteType;
  }

  public static SNode virtual_getTypeAnnotation_1233920952262(SNode thisNode) {
    return TypeAnnotable_Behavior.call_getTypeAnnotation_1233920952262(SLinkOperations.getTarget(thisNode, "baseMethodDeclaration", false));
  }

  public static SNode virtual_getInstanceType_8008512149545154471(SNode thisNode) {
    return null;
  }

  public static SNode call_getInstanceType_8008512149545154471(SNode thisNode) {
    return (SNode)BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.IMethodCall"), "virtual_getInstanceType_8008512149545154471", PARAMETERS_8008512149545154471);
  }

  public static SNode callSuper_getInstanceType_8008512149545154471(SNode thisNode, String callerConceptFqName) {
    return (SNode)BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.IMethodCall"), callerConceptFqName, "virtual_getInstanceType_8008512149545154471", PARAMETERS_8008512149545154471);
  }

}
