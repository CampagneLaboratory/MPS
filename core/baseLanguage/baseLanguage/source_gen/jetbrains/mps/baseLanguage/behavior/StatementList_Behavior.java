package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class StatementList_Behavior {

  public static void init(SNode thisNode) {
  }

  public static Set<SNode> call_getExternalVariablesDeclarations_1214501165480(SNode thisNode) {
    HashSet<SNode> declarations = new HashSet<SNode>();
    HashSet<SNode> reference = new HashSet<SNode>();
    reference.addAll(SNodeOperations.getDescendants(thisNode, "jetbrains.mps.baseLanguage.structure.LocalVariableReference", false));
    reference.addAll(SNodeOperations.getDescendants(thisNode, "jetbrains.mps.baseLanguage.structure.ParameterReference", false));
    for(SNode ref : reference) {
      boolean statementsContainsVar = false;
      for(SNode parent : SNodeOperations.getAncestors(SLinkOperations.getTarget(ref, "variableDeclaration", false), null, false)) {
        if (parent == SNodeOperations.getParent(thisNode)) {
          statementsContainsVar = true;
        }
      }
      if (!(statementsContainsVar)) {
        declarations.add(SLinkOperations.getTarget(ref, "variableDeclaration", false));
      }
    }
    return declarations;
  }

  public static SNode virtual_addVariableDeclarationBefore_1231760097557(SNode thisNode, SNode statement, SNode type, String name, SNode expression) {
    assert SNodeOperations.getParent(statement) == thisNode;
    SNode newStatement = new _Quotations.QuotationClass_10().createNode(type, expression, name);
    SNodeOperations.insertPrevSiblingChild(statement, newStatement);
    return SLinkOperations.getTarget(newStatement, "localVariableDeclaration", true);
  }

}
