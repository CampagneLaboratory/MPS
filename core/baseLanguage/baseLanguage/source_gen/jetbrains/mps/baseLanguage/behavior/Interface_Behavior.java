package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.HashSet;

public class Interface_Behavior {
  private static Logger LOG = Logger.getLogger(Interface_Behavior.class);

  public static void init(SNode thisNode) {
  }

  public static boolean virtual_isDescendant_checkLoops_7165541881557222950(SNode thisNode, SNode nodeToCompare, Set<SNode> visited) {
    if (SetSequence.fromSet(visited).contains(thisNode)) {
      LOG.error("circular hierarchy in interface " + INamedConcept_Behavior.call_getFqName_1213877404258(thisNode));
      return false;
    }
    if (nodeToCompare == thisNode) {
      return true;
    }
    SetSequence.fromSet(visited).addElement(thisNode);
    for (SNode extended : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "extendedInterface", true))) {
      Set<SNode> classifiers = SetSequence.fromSetWithValues(new HashSet<SNode>(), visited);
      if (Classifier_Behavior.call_isDescendant_checkLoops_7165541881557222950(SLinkOperations.getTarget(extended, "classifier", false), nodeToCompare, classifiers)) {
        return true;
      }
    }
    return false;
  }
}
