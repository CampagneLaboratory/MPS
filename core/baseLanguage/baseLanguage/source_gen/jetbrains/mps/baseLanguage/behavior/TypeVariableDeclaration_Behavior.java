package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.Set;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.core.behavior.BaseConcept_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class TypeVariableDeclaration_Behavior {
  private static Class[] PARAMETERS_1775412259244835270 = {SNode.class};

  public static void init(SNode thisNode) {
  }

  public static SNode call_getConcreteUpperBound_4346214032091509920(SNode thisNode) {
    return TypeVariableDeclaration_Behavior.call_getConcreteUpperBound_4346214032091504647(thisNode, SetSequence.fromSet(new HashSet<SNode>()));
  }

  public static SNode call_getConcreteUpperBound_4346214032091504647(SNode thisNode, Set<SNode> visitedVars) {
    if (SetSequence.fromSet(visitedVars).contains(thisNode)) {
      return new _Quotations.QuotationClass_22().createNode();
    }
    SetSequence.fromSet(visitedVars).addElement(thisNode);
    if ((SLinkOperations.getTarget(thisNode, "bound", true) != null)) {
      return TypeVariableDeclaration_Behavior.getTypeWithConcreteUpperBounds_4346214032091504651(SLinkOperations.getTarget(thisNode, "bound", true), visitedVars);
    } else {
      return new _Quotations.QuotationClass_21().createNode();
    }
  }

  public static String virtual_getPresentation_1213877396640(SNode thisNode) {
    StringBuffer buff = new StringBuffer();
    buff.append(SPropertyOperations.getString(thisNode, "name"));
    if ((SLinkOperations.getTarget(thisNode, "bound", true) != null)) {
      buff.append(" extends ").append(BaseConcept_Behavior.call_getPresentation_1213877396640(SLinkOperations.getTarget(thisNode, "bound", true)));
    }
    for (SNode bound : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "auxBounds", true))) {
      buff.append(" & ").append(BaseConcept_Behavior.call_getPresentation_1213877396640(bound));
    }
    return buff.toString();
  }

  public static String call_getPresentation_1775412259244835270(SNode thisNode) {
    return (String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration"), "virtual_getPresentation_1213877396640", PARAMETERS_1775412259244835270);
  }

  public static String callSuper_getPresentation_1775412259244835270(SNode thisNode, String callerConceptFqName) {
    return (String) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration"), callerConceptFqName, "virtual_getPresentation_1213877396640", PARAMETERS_1775412259244835270);
  }

  public static SNode getTypeWithConcreteUpperBounds_4346214032091504651(SNode inputType, Set<SNode> visitedVars) {
    if (SNodeOperations.isInstanceOf(inputType, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      return TypeVariableDeclaration_Behavior.call_getConcreteUpperBound_4346214032091504647(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.copyNode(inputType), "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false), visitedVars);
    }
    SNode javaType = Type_Behavior.call_getJavaType_1213877337345(inputType);
    if (SNodeOperations.isInstanceOf(javaType, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
      SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
      SLinkOperations.setTarget(result, "classifier", SLinkOperations.getTarget(SNodeOperations.cast(javaType, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false), false);
      return result;
    } else {
      return SNodeOperations.copyNode(javaType);
    }
  }
}
