package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.Set;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class TypeVariableDeclaration_Behavior {

  public static void init(SNode thisNode) {
  }

  public static SNode call_getConcreteUpperBound_4346214032091509920(SNode thisNode) {
    return TypeVariableDeclaration_Behavior.call_getConcreteUpperBound_4346214032091504647(thisNode, SetSequence.fromSet(new HashSet<SNode>()));
  }

  public static SNode call_getConcreteUpperBound_4346214032091504647(SNode thisNode, Set<SNode> visitedVars) {
    if (SetSequence.fromSet(visitedVars).contains(thisNode)) {
      return new _Quotations.QuotationClass_20().createNode();
    }
    SetSequence.fromSet(visitedVars).addElement(thisNode);
    if ((SLinkOperations.getTarget(thisNode, "bound", true) != null)) {
      return TypeVariableDeclaration_Behavior.getTypeWithConcreteUpperBounds_4346214032091504651(SLinkOperations.getTarget(thisNode, "bound", true), visitedVars);
    } else
    {
      return new _Quotations.QuotationClass_21().createNode();
    }
  }

  public static SNode getTypeWithConcreteUpperBounds_4346214032091504651(SNode inputType, Set<SNode> visitedVars) {
    SNode result = SNodeOperations.copyNode(inputType);
    if (SNodeOperations.isInstanceOf(result, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      return TypeVariableDeclaration_Behavior.call_getConcreteUpperBound_4346214032091504647(SLinkOperations.getTarget(SNodeOperations.cast(result, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false), visitedVars);
    }
    List<SNode> variableReferences = SNodeOperations.getDescendants(result, "jetbrains.mps.baseLanguage.structure.TypeVariableReference", false);
    List<SNode> list = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(list).addSequence(ListSequence.fromList(variableReferences));
    for(SNode typeVariableReference : list) {
      SNode concreteUpperBound = TypeVariableDeclaration_Behavior.call_getConcreteUpperBound_4346214032091504647(SLinkOperations.getTarget(typeVariableReference, "typeVariableDeclaration", false), visitedVars);
      SNodeOperations.replaceWithAnother(typeVariableReference, concreteUpperBound);
    }
    return result;
  }

}
