package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration;
import jetbrains.mps.baseLanguage.search.ClassifierAndSuperClassifiersScope;
import jetbrains.mps.baseLanguage.structure.ClassConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class LocalStaticMethodCall_Behavior {

  public static void init(SNode thisNode) {
  }

  public static List<SNode> virtual_getAvailableMethodDeclarations_5776618742611315379(SNode thisNode, String methodName) {
    List<BaseMethodDeclaration> methods = new ClassifierAndSuperClassifiersScope(((ClassConcept)SNodeOperations.getAdapter(SNodeOperations.getAncestor(thisNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false))), IClassifiersSearchScope.STATIC_METHOD).getMethodsByName(methodName);
    List<SNode> result = new ArrayList<SNode>();
    for(BaseMethodDeclaration bmd : methods) {
      SNode node = bmd.getNode();
      ListSequence.fromList(result).addElement(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
    }
    return result;
  }

}
