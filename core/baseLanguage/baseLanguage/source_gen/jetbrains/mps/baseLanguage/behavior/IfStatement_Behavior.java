package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.behavior.Statement_Behavior;

public class IfStatement_Behavior {

  public static void init(SNode thisNode) {
  }

  public static void call_convertElseToElseIf_1217845914183(SNode thisNode) {
    SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ElsifClause", null);
    SNode ifFalseStatement = SLinkOperations.getTarget(thisNode, "ifFalseStatement", true);
    if (SNodeOperations.isInstanceOf(ifFalseStatement, "jetbrains.mps.baseLanguage.structure.BlockStatement")) {
      SLinkOperations.setTarget(result, "statementList", SNodeOperations.copyNode(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "ifFalseStatement", true), "statements", true)), true);
    } else
    {
      SLinkOperations.addChild(SLinkOperations.getTarget(result, "statementList", true), "statement", SNodeOperations.copyNode(ifFalseStatement));
    }
    SNodeOperations.detachNode(SLinkOperations.getTarget(thisNode, "ifFalseStatement", true));
    SLinkOperations.addChild(thisNode, "elsifClauses", result);
  }

  public static boolean call_isGuardIf_1237547453258(SNode thisNode) {
    if ((SLinkOperations.getTarget(thisNode, "ifFalseStatement", true) != null) || ListSequence.fromList(SLinkOperations.getTargets(thisNode, "elsifClauses", true)).isNotEmpty()) {
      return false;
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "ifTrue", true), "statement", true)).count() != 1) {
      return false;
    }
    SNode onlyStatement = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "ifTrue", true), "statement", true)).first();
    return Statement_Behavior.call_isGuardClauseStatement_1237547327995(onlyStatement);
  }

  public static boolean virtual_isStatementListCompactable_1237546012856(SNode thisNode) {
    return IfStatement_Behavior.call_isGuardIf_1237547453258(thisNode);
  }

}
