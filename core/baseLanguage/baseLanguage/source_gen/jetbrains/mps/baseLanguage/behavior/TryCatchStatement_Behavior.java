package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Set;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.typesystem.inference.TypeChecker;

public class TryCatchStatement_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_collectUncaughtMethodThrowables_5412515780383134223(SNode thisNode, Set<SNode> throwables, boolean ignoreMayBeThrowables) {
    TryCatchStatement_Behavior.collectUncatchedThrowables_4313092516462065508(throwables, SLinkOperations.getTarget(thisNode, "body", true), SLinkOperations.getTargets(thisNode, "catchClause", true), ignoreMayBeThrowables);
  }

  public static void collectUncatchedThrowables_4313092516462065508(Set<SNode> throwables, SNode body, List<SNode> catchClause, boolean ignoreMayBeThrowables) {
    Set<SNode> thrownsFromBody = SetSequence.fromSet(new HashSet());
    StatementList_Behavior.call_collectUncatchedThrowables_5412515780383134474(body, thrownsFromBody, ignoreMayBeThrowables);

    // remove what we have catched 
    for (SNode caatch : ListSequence.fromList(catchClause)) {
      SLinkOperations.getTarget(caatch, "throwable", true);
      Set<SNode> toRemove = SetSequence.fromSet(new HashSet());
      for (SNode thrownFromBody : SetSequence.fromSet(thrownsFromBody)) {
        SNode catchedType = SLinkOperations.getTarget(SLinkOperations.getTarget(caatch, "throwable", true), "type", true);
        if (TypeChecker.getInstance().getSubtypingManager().isSubtype(new _Quotations.QuotationClass_20().createNode(thrownFromBody), catchedType)) {
          SetSequence.fromSet(toRemove).addElement(thrownFromBody);
        }
      }
      SetSequence.fromSet(thrownsFromBody).removeSequence(SetSequence.fromSet(toRemove));
    }
    SetSequence.fromSet(throwables).addSequence(SetSequence.fromSet(thrownsFromBody));

    // now collect what was thrown in catch blocks 
    for (SNode caatch : ListSequence.fromList(catchClause)) {
      StatementList_Behavior.call_collectUncatchedThrowables_5412515780383134474(SLinkOperations.getTarget(caatch, "catchBody", true), throwables, ignoreMayBeThrowables);
    }
  }
}
