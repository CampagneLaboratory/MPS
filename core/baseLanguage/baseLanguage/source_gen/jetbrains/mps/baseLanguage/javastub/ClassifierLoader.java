package jetbrains.mps.baseLanguage.javastub;

/*Generated by MPS */

import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.stubs.StubLocation;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.reloading.AbstractClassPathItem;
import org.objectweb.asm.ClassReader;
import jetbrains.mps.stubs.javastub.asm.ASMClass;
import jetbrains.mps.baseLanguage.structure.Classifier;
import org.objectweb.asm.tree.InnerClassNode;
import org.objectweb.asm.Opcodes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.stubs.javastub.classpath.ClassifierKind;
import jetbrains.mps.baseLanguage.structure.ClassConcept;
import jetbrains.mps.baseLanguage.structure.Interface;
import jetbrains.mps.baseLanguage.structure.Annotation;
import jetbrains.mps.baseLanguage.structure.EnumClass;
import jetbrains.mps.util.NameUtil;

public class ClassifierLoader {
  private IClassPathItem myCpItem;
  private SModel myModel;
  private ClassifierUpdater myUpdater;
  private StubLocation myLocation;

  public ClassifierLoader(StubLocation location, SModel model, IClassPathItem cpItem, ClassifierUpdater updater) {
    myLocation = location;
    myModel = model;
    myCpItem = cpItem;
    myUpdater = updater;
  }

  public void loadRootClassifier(String name) {
    getClassifier(name, new _FunctionTypes._void_P1_E0<SNode>() {
      public void invoke(SNode n) {
        myModel.addRoot(n);
      }
    });
  }

  private void getClassifier(String name, _FunctionTypes._void_P1_E0<? super SNode> adder) {
    if (AbstractClassPathItem.isAnonymous(name)) {
      return;
    }

    String pack = myModel.getLongName();
    byte[] code = myCpItem.getClass((pack.length() == 0 ?
      name :
      pack + "." + name
    ));
    if (code == null) {
      return;
    }
    ClassReader reader = new ClassReader(code);
    ASMClass ac = new ASMClass(reader);
    Classifier res = createClassifierForClass(name, myModel, reader);
    adder.invoke(res.getNode());
    myUpdater.updateClassifier(myLocation.getModule(), res, ac);
    updateInnerClassifiers(ac, res);
  }

  public void updateInnerClassifiers(ASMClass ac, final Classifier cls) {
    for (InnerClassNode cn : ac.getInnerClasses()) {
      if ((cn.access & Opcodes.ACC_SYNTHETIC) != 0) {
        continue;
      }

      boolean isPrivate = (cn.access & Opcodes.ACC_PRIVATE) != 0;
      if (isPrivate && ASMModelLoader.SKIP_PRIVATE) {
        continue;
      }

      String name = cn.name;
      if (name == null) {
        continue;
      }
      if (!(name.startsWith(ac.getName() + "$"))) {
        continue;
      }

      int index = name.lastIndexOf("/");
      if (index != -1) {
        name = name.substring(index + 1);
      }

      final boolean isStatic = (cn.access & Opcodes.ACC_STATIC) != 0;
      getClassifier(name, new _FunctionTypes._void_P1_E0<SNode>() {
        public void invoke(SNode n) {
          SPropertyOperations.set(SNodeOperations.cast(n, "jetbrains.mps.baseLanguage.structure.Classifier"), "nonStatic", "" + !(isStatic));
          cls.addStaticInnerClassifiers(((Classifier) ((BaseConcept) SNodeOperations.getAdapter(n))));
        }
      });
    }
  }

  private Classifier createClassifierForClass(String fqName, SModel model, ClassReader reader) {
    Classifier result = null;
    ClassifierKind kind = ClassifierKind.getClassifierKind(reader);
    if (kind == null) {
      return null;
    }
    if (kind == ClassifierKind.CLASS) {
      result = ClassConcept.newInstance(model);
    } else if (kind == ClassifierKind.INTERFACE) {
      result = Interface.newInstance(model);
    } else if (kind == ClassifierKind.ANNOTATIONS) {
      result = Annotation.newInstance(model);
    } else if (kind == ClassifierKind.ENUM) {
      result = EnumClass.newInstance(model);
    } else if (kind == ClassifierKind.UNKNOWN) {
      return null;
    }
    result.setName(NameUtil.shortNameFromLongName(fqName.replace('$', '.')));
    result.getNode().setId(ASMNodeId.createId(fqName));
    return result;
  }
}
