package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.textGen.TextGenBuffer;
import jetbrains.mps.generator.JavaNameUtil;

public abstract class BaseLanguageTextGen {

  public static void typeParameters(List<SNode> types, final SNodeTextGen textGen) {
    if (ListSequence.fromList(types).isNotEmpty()) {
      textGen.append("<");
      if (ListSequence.fromList(types).isNotEmpty()) {
        for(SNode item : types) {
          TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());
          if (item != ListSequence.fromList(types).last()) {
            textGen.append(", ");
          }
        }
      }
      textGen.append(">");
    }
  }

  public static void arguments(SNode methodCall, final SNodeTextGen textGen) {
    textGen.append("(");
    if (ListSequence.fromList(SLinkOperations.getTargets(methodCall, "actualArgument", true)).isNotEmpty()) {
      for(SNode item : SLinkOperations.getTargets(methodCall, "actualArgument", true)) {
        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());
        if (item != ListSequence.fromList(SLinkOperations.getTargets(methodCall, "actualArgument", true)).last()) {
          textGen.append(", ");
        }
      }
    }
    textGen.append(")");
  }

  public static void annotations(SNode annotable, final SNodeTextGen textGen) {
    if (ListSequence.fromList(SLinkOperations.getTargets(annotable, "annotation", true)).isNotEmpty()) {
      for(SNode item : SLinkOperations.getTargets(annotable, "annotation", true)) {
        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());
      }
    }
  }

  public static void visibility(SNode v, final SNodeTextGen textGen) {
    if ((v == null)) {
      textGen.append("/* package */");
    } else
    {
      TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), v, textGen.getSNode());
    }
  }

  public static void visibilityWithIndent(SNode v, final SNodeTextGen textGen) {
    textGen.indentBuffer();
    BaseLanguageTextGen.visibility(v, textGen);
  }

  public static void classifierName(SNode node, final SNodeTextGen textGen) {
    if ((node == null)) {
      textGen.foundError();
      textGen.append("???");
      return;
    }
    BaseLanguageTextGen.appendClsName(BaseLanguageTextGen.getPackageName(node, textGen), SPropertyOperations.getString(node, "nestedName"), textGen);
  }

  public static void variableDeclaration(SNode node, final SNodeTextGen textGen) {
    if (SPropertyOperations.getBoolean(node, "isFinal")) {
      textGen.append("final ");
    }
    TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), SLinkOperations.getTarget(node, "type", true), textGen.getSNode());
    textGen.append(" ");
    textGen.append(SPropertyOperations.getString(node, "name"));
    if ((SLinkOperations.getTarget(node, "initializer", true) != null)) {
      textGen.append(" = ");
      TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), SLinkOperations.getTarget(node, "initializer", true), textGen.getSNode());
    }
  }

  public static void fileHeader(SNode cls, final SNodeTextGen textGen) {
    Set<String> names = (Set<String>)BaseLanguageTextGen.getImportedNames(textGen);
    SetSequence.fromSet(names).addElement(BaseLanguageTextGen.getPackageName(cls, textGen) + "." + SPropertyOperations.getString(cls, "name"));
    if (cls.isRoot()) {
      int wasPart = textGen.getBuffer().selectPart(TextGenBuffer.TOP);
      textGen.append("package " + BaseLanguageTextGen.getPackageName(cls, textGen) + ";");
      textGen.appendNewLine();
      textGen.appendNewLine();
      textGen.append("/*Generated by MPS */");
      textGen.appendNewLine();
      textGen.getBuffer().selectPart(wasPart);
    }
  }

  public static void methodCall(SNode methodCall, final SNodeTextGen textGen) {
    textGen.append(textGen.getReferentResolveInfoOrName("baseMethodDeclaration", methodCall));
    BaseLanguageTextGen.arguments(methodCall, textGen);
  }

  public static void clsName(String pack, String className, final SNodeTextGen textGen) {
    BaseLanguageTextGen.appendClsName(pack, className, textGen);
  }

  protected static Set<String> getImportedNames(final SNodeTextGen textGen) {
    Set<String> importedNames = (Set<String>)textGen.getBuffer().getUserObject("IMPORT");
    if (importedNames == null) {
      importedNames = SetSequence.<String>fromArray();
      textGen.getBuffer().putUserObject("IMPORT", importedNames);
    }
    return importedNames;
  }

  protected static String getPackageName(SNode cls, final SNodeTextGen textGen) {
    return cls.getModel().getSModelReference().getLongName();
  }

  protected static void appendClsName(String packageName, String className, final SNodeTextGen textGen) {
    if (className == null) {
      textGen.foundError("class name is NULL");
      textGen.append("???");
      return;
    }
    if (packageName.contains("@") || className.contains("@")) {
      textGen.foundError("class name not contain '@'");
    }
    String importedFqName;
    String importedShortName = className.split("\\.")[0];
    if (packageName.length() > 0) {
      importedFqName = packageName + "." + importedShortName;
    } else
    {
      importedFqName = importedShortName;
    }
    Set<String> importedNames = BaseLanguageTextGen.getImportedNames(textGen);
    if (importedNames.contains(importedFqName)) {
      textGen.append(className);
      return;
    }
    for(String importedName : importedNames) {
      if (importedShortName.equals(JavaNameUtil.shortName(importedName))) {
        String fqName;
        if (packageName.length() > 0) {
          fqName = packageName + "." + className;
        } else
        {
          fqName = className;
        }
        textGen.append(fqName);
        return;
      }
    }
    importedNames.add(importedFqName);
    if (!(packageName.equals("java.lang")) || packageName.equals(textGen.getBuffer().getUserObject("PACKAGE_NAME"))) {
      int currPartId = textGen.getBuffer().selectPart(TextGenBuffer.TOP);
      textGen.appendNewLine();
      textGen.append("import " + importedFqName + ";");
      textGen.getBuffer().selectPart(currPartId);
    }
    textGen.append(className);
  }

}
