package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.IMethodLike_Behavior;
import jetbrains.mps.baseLanguage.LastStatementUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.textGen.TextGenManager;

public class StatementList_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    int size = ListSequence.fromList(SLinkOperations.getTargets(node, "statement", true)).count();
    SNode methodLike = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.IMethodLike", false, false);
    SNode lastStatement = IMethodLike_Behavior.call_getLastStatement_1239354409446(methodLike);
    for (int i = 0; i < size; i++) {
      SNode statement = ListSequence.fromList(ListSequence.fromList(SLinkOperations.getTargets(node, "statement", true)).toListSequence()).getElement(i);
      if (statement == lastStatement && (LastStatementUtil.canMakeReturnStatement(statement, null))) {
        SNode expressionStatement = SNodeOperations.cast(statement, "jetbrains.mps.baseLanguage.structure.ExpressionStatement");
        SNode returnStatement = SModelOperations.createNewNode(SNodeOperations.getModel(statement), "jetbrains.mps.baseLanguage.structure.ReturnStatement", null);
        SNode expression = SNodeOperations.copyNode(SLinkOperations.getTarget(expressionStatement, "expression", true));
        SLinkOperations.setNewChild(expressionStatement, "expression", "jetbrains.mps.baseLanguage.structure.Expression");
        SLinkOperations.setTarget(returnStatement, "expression", expression, true);
        statement = returnStatement;
        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), statement, this.getSNode());
        // rollback changes 
        SLinkOperations.setNewChild(returnStatement, "expression", "jetbrains.mps.baseLanguage.structure.Expression");
        SLinkOperations.setTarget(expressionStatement, "expression", expression, true);
      } else {
        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), statement, this.getSNode());
      }
    }
  }
}
