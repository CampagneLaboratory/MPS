package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jdom.Element;
import java.util.Collections;

public class RootDependencies implements Comparable<RootDependencies> {
  private static final String CLASS_NAME = "className";
  private static final String DEPEND_CLASS = "classNode";
  private static final String DEPEND_CLASS_NAME = "dependClassName";
  private static final String EXTENDS_CLASS_NAME = "extendsClassName";

  private List<String> myDependNodes = ListSequence.fromList(new ArrayList<String>(0));
  private List<String> myExtendsNodes = ListSequence.fromList(new ArrayList<String>(0));
  private String myClassName;

  public RootDependencies(String nodeName, List<String> dependNodes, List<String> extendsNodes) {
    this.myClassName = nodeName;
    if (dependNodes != null) {
      ListSequence.fromList(this.myDependNodes).addSequence(ListSequence.fromList(dependNodes));
    }
    if (extendsNodes != null) {
      ListSequence.fromList(this.myExtendsNodes).addSequence(ListSequence.fromList(extendsNodes));
    }
  }

  public RootDependencies(Element element) {
    this.myClassName = element.getAttribute(CLASS_NAME).getValue();
    for (Element e : ((List<Element>)element.getChildren(DEPEND_CLASS))) {
      if (e == null) {
        continue;
      }
      if (e.getAttribute(DEPEND_CLASS_NAME) != null) {
        ListSequence.fromList(this.myDependNodes).addElement(e.getAttribute(DEPEND_CLASS_NAME).getValue());
      }
      if (e.getAttribute(EXTENDS_CLASS_NAME) != null) {
        ListSequence.fromList(this.myExtendsNodes).addElement(e.getAttribute(EXTENDS_CLASS_NAME).getValue());
      }
    }
  }

  public void saveTo(Element element) {
    element.setAttribute(CLASS_NAME, this.myClassName);
    for (String dependNodeName : this.myDependNodes) {
      Element e = new Element(DEPEND_CLASS);
      e.setAttribute(DEPEND_CLASS_NAME, dependNodeName);
      element.addContent(e);
    }
    for (String dependNodeName : this.myExtendsNodes) {
      Element e = new Element(DEPEND_CLASS);
      e.setAttribute(EXTENDS_CLASS_NAME, dependNodeName);
      element.addContent(e);
    }
  }

  public List<String> getDependencies() {
    return Collections.unmodifiableList(this.myDependNodes);
  }

  public List<String> getExtends() {
    return Collections.unmodifiableList(this.myExtendsNodes);
  }

  public String getClassName() {
    return this.myClassName;
  }

  public int compareTo(RootDependencies p0) {
    if (p0 == null || this.myClassName == null || p0.myClassName == null) {
      return 0;
    }
    return this.myClassName.compareTo(p0.myClassName);
  }
}
