package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import org.xml.sax.helpers.DefaultHandler;
import java.util.Stack;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;

public class BLDependenciesHandler extends DefaultHandler {
  private static BLDependenciesHandler.dependenciesRootElementHandler dependenciesRoothandler = new BLDependenciesHandler.dependenciesRootElementHandler();
  private static BLDependenciesHandler.dependencyElementHandler dependencyhandler = new BLDependenciesHandler.dependencyElementHandler();
  private static BLDependenciesHandler.classNodeElementHandler classNodehandler = new BLDependenciesHandler.classNodeElementHandler();

  private Stack<BLDependenciesHandler.ElementHandler> handlers;

  public BLDependenciesHandler() {
  }

  @Override
  public void characters(char[] array, int start, int len) throws SAXException {
  }

  @Override
  public void endElement(String uri, String localName, String qName) throws SAXException {
  }

  @Override
  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    BLDependenciesHandler.ElementHandler current = handlers.peek();
    if (current == null) {
      // root 
      current = dependenciesRoothandler;
    } else {
      current = current.createChild(localName);
    }

    // handle attributes 
    for (int i = 0; i < attributes.getLength(); i++) {
      String name = attributes.getLocalName(i);
      String value = attributes.getValue(i);
      current.handleAttribute(name, value);
    }
  }

  private static class ElementHandler {
    protected void handleAttribute(String name, String value) throws SAXParseException {
    }

    protected BLDependenciesHandler.ElementHandler createChild(String tagName) throws SAXParseException {
      throw new SAXParseException("unknown tag: " + tagName, null);
    }

    protected void handleChild(String tagName, Object value) throws SAXParseException {
    }

    protected void handleText() throws SAXParseException {
    }
  }

  public static class dependenciesRootElementHandler extends BLDependenciesHandler.ElementHandler {
    public dependenciesRootElementHandler() {
    }

    @Override
    protected void handleChild(String tagName, Object value) throws SAXParseException {
      super.handleChild(tagName, value);
    }
  }

  public static class dependencyElementHandler extends BLDependenciesHandler.ElementHandler {
    public dependencyElementHandler() {
    }

    @Override
    protected void handleChild(String tagName, Object value) throws SAXParseException {
      super.handleChild(tagName, value);
    }
  }

  public static class classNodeElementHandler extends BLDependenciesHandler.ElementHandler {
    public classNodeElementHandler() {
    }

    @Override
    protected void handleChild(String tagName, Object value) throws SAXParseException {
      super.handleChild(tagName, value);
    }
  }
}
