package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.textGen.TraceableNodeTextGen;
import jetbrains.mps.textGen.ScopeNodeTextGen;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.textGen.TraceInfoGenerationUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.AttributesRolesUtil;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.textGen.behavior.TraceableConcept_Behavior;
import java.util.List;
import jetbrains.mps.lang.textGen.behavior.ScopeConcept_Behavior;

public class AnnotationMethodDeclaration_TextGen extends SNodeTextGen implements TraceableNodeTextGen, ScopeNodeTextGen {
  public void doGenerateText(SNode node) {
    TraceInfoGenerationUtil.createPositionInfo(this, node);
    TraceInfoGenerationUtil.createScopeInfo(this, node);
    if ((SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromAttributeRole("methodDocComment"), true) != null)) {
      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromAttributeRole("methodDocComment"), true), this.getSNode());
    }
    this.appendNewLine();
    this.indentBuffer();
    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "returnType", true), this.getSNode());
    this.append(" ");
    this.append(SPropertyOperations.getString(node, "name"));
    this.append("()");
    if ((SLinkOperations.getTarget(node, "defaultValue", true) != null)) {
      this.append(" default ");
      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "defaultValue", true), this.getSNode());
    }
    this.append(";");
    TraceInfoGenerationUtil.fillPositionInfo(this, node);
    TraceInfoGenerationUtil.fillScopeInfo(this, node);
  }

  public String getTraceableProperty(SNode node) {
    return TraceableConcept_Behavior.call_getTraceableProperty_3822000666564591088(node);
  }

  public List<SNode> getScopeVariables(SNode node) {
    return ScopeConcept_Behavior.call_getScopeVariables_3822000666564591100(node);
  }
}
