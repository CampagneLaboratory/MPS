package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.generator.JavaNameUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.textGen.TextGenManager;

public class Interface_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    BaseLanguageTextGen.fileHeader(node, this);
    BaseLanguageTextGen.annotations(node, this);
    BaseLanguageTextGen.visibility(SLinkOperations.getTarget(node, "visibility", true), this);
    if (!(ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(node), "jetbrains.mps.baseLanguage.structure.Interface")).contains(node))) {
      this.append("static ");
    }
    this.appendWithIndent("interface ");
    this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node, "name")));
    GenericDeclarationTextGen2.typeDeclarations(node, this);
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "extendedInterface", true)).isNotEmpty()) {
      this.append(" extends ");
      if (ListSequence.fromList(SLinkOperations.getTargets(node, "extendedInterface", true)).isNotEmpty()) {
        for (SNode item : SLinkOperations.getTargets(node, "extendedInterface", true)) {
          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, "extendedInterface", true)).last()) {
            this.append(", ");
          }
        }
      }
    }
    this.append(" {");
    this.increaseDepth();
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "staticField", true)).isNotEmpty()) {
      for (SNode item : SLinkOperations.getTargets(node, "staticField", true)) {
        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
      }
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "method", true)).isNotEmpty()) {
      BaseLanguageTextGen.newLine(ListSequence.fromList(SLinkOperations.getTargets(node, "staticField", true)).isNotEmpty(), this);
      this.appendNewLine();
      if (ListSequence.fromList(SLinkOperations.getTargets(node, "method", true)).isNotEmpty()) {
        for (SNode item : SLinkOperations.getTargets(node, "method", true)) {
          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
        }
      }
    }
    this.decreaseDepth();
    this.appendNewLine();
    if (node.isRoot()) {
      this.append("}");
    } else {
      this.appendWithIndent("}");
    }
    this.appendNewLine();
  }

  public String getExtention(SNode node) {
    return "java";
  }
}
