package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.TreeSet;
import jetbrains.mps.smodel.SModel;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.watching.ModelChangesWatcher;
import org.jdom.Element;
import jetbrains.mps.util.JDOMUtil;
import org.jdom.Document;
import jetbrains.mps.smodel.SModelDescriptor;
import java.io.File;
import jetbrains.mps.vfs.FileSystem;

public class DependenciesRoot {
  private static final String DEPENDENCY = "dependency";
  private static final String DEPENDENCIES_ROOT = "dependenciesRoot";
  private static final Logger LOG = Logger.getLogger(DependenciesRoot.class);

  private Set<Dependency> myDependencies = SetSequence.fromSet(new TreeSet<Dependency>());
  private SModel myModel;

  public DependenciesRoot() {
  }

  public void addDependencies(Dependency newDependency) {
    SetSequence.fromSet(this.myDependencies).addElement(newDependency);
  }

  public Set<Dependency> getDependencies() {
    return this.myDependencies;
  }

  public void setModel(SModel model) {
    this.myModel = model;
  }

  public SModel getModel() {
    return this.myModel;
  }

  public List<String> getAllExtends() {
    List<String> result = ListSequence.fromList(new ArrayList<String>());
    for (Dependency dependency : this.myDependencies) {
      ListSequence.fromList(result).addSequence(SetSequence.fromSet(dependency.getExtends()));
    }
    return result;
  }

  public List<String> getAllDependenciesNames() {
    List<String> result = ListSequence.fromList(new ArrayList<String>());
    for (Dependency dependency : this.myDependencies) {
      ListSequence.fromList(result).addSequence(SetSequence.fromSet(dependency.getAllDependencies()));
    }
    return result;
  }

  public void saveTo(IFile file) {
    if (SetSequence.fromSet(this.myDependencies).isEmpty() || this.isEmptyCollections()) {
      if (file.exists()) {
        file.delete();
      }
      return;
    }
    if (!(file.exists())) {
      file.createNewFile();
      ModelChangesWatcher.instance().fireDataFileCreated(file);
    }
    Element root = new Element(DEPENDENCIES_ROOT);
    for (Dependency dependency : this.myDependencies) {
      if (SetSequence.fromSet(dependency.getAllDependencies()).isEmpty() && SetSequence.fromSet(dependency.getExtends()).isEmpty()) {
        continue;
      }
      Element e = new Element(DEPENDENCY);
      dependency.saveTo(e);
      root.addContent(e);
    }
    try {
      JDOMUtil.writeDocument(new Document(root), file);
    } catch (Exception e) {
      LOG.error(e);
    }
  }

  private boolean isEmptyCollections() {
    for (Dependency dependency : this.myDependencies) {
      boolean haveDependencies = SetSequence.fromSet(dependency.getAllDependencies()).isNotEmpty();
      boolean haveExtends = SetSequence.fromSet(dependency.getExtends()).isNotEmpty();
      if (haveDependencies || haveExtends) {
        return false;
      }
    }
    return true;
  }

  public static DependenciesRoot load(IFile file) {
    try {
      Document document = JDOMUtil.loadDocument(file);
      Element root = document.getRootElement();
      DependenciesRoot result = new DependenciesRoot();
      for (Element e : ((List<Element>)root.getChildren(DEPENDENCY))) {
        result.addDependencies(new Dependency(e));
      }
      return result;
    } catch (Exception e) {
      LOG.error(e);
    }
    return null;
  }

  public static IFile getOutputFileOfModel(String outputDir, SModelDescriptor model) {
    String modelName = model.getLongName().replace(".", File.separator);
    String path = modelName.substring(0, modelName.length()) + File.separator + ".dependencies";
    return FileSystem.getFile(outputDir + File.separator + path);
  }
}
