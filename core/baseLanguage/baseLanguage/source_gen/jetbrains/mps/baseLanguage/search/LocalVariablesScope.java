package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import jetbrains.mps.smodel.search.AbstractSearchScope;
import jetbrains.mps.smodel.INodeAdapter;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.BaseAdapter;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.util.Condition;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.structure.ILocalVariableElementList;
import jetbrains.mps.baseLanguage.structure.ILocalVariableElement;
import jetbrains.mps.baseLanguage.structure.AbstractLoopStatement;
import jetbrains.mps.baseLanguage.structure.CatchClause;
import jetbrains.mps.baseLanguage.behavior.ILocalVariableElementList_Behavior;
import jetbrains.mps.baseLanguage.behavior.ILocalVariableElement_Behavior;
import jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration;
import jetbrains.mps.smodel.search.IReferenceInfoResolver;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.baseLanguage.structure.ConceptFunction;
import jetbrains.mps.baseLanguage.structure.Closure;

public class LocalVariablesScope extends AbstractSearchScope {
  private INodeAdapter myContextNode;
  private List<SNode> myLocalVariables;

  public LocalVariablesScope(SNode contextNode) {
    this.myContextNode = BaseAdapter.fromNode(contextNode);
  }

  @NotNull
  public List<SNode> getNodes(Condition<SNode> condition) {
    if (this.myLocalVariables == null) {
      this.myLocalVariables = new ArrayList<SNode>();
      ILocalVariableElementList statementList = LocalVariablesScope.findThisOrParent(this.myContextNode, ILocalVariableElementList.class);
      if (statementList != null) {
        ILocalVariableElement currentStatement = LocalVariablesScope.findThisOrParent(this.myContextNode, ILocalVariableElement.class);
        this._populateLocalVariables(statementList, currentStatement, this.myLocalVariables);
      }
      AbstractLoopStatement loopStatement = LocalVariablesScope.findThisOrParent(this.myContextNode, AbstractLoopStatement.class);
      if (loopStatement != null) {
        this._populateLocalVariables(loopStatement, this.myLocalVariables);
      }
      CatchClause catchClause = LocalVariablesScope.findThisOrParent(this.myContextNode, CatchClause.class);
      if (catchClause != null) {
        this._populateLocalVariables(catchClause, this.myLocalVariables);
      }
    }
    if (condition == AbstractSearchScope.TRUE_CONDITION) {
      return this.myLocalVariables;
    }
    List<SNode> result = new ArrayList<SNode>(this.myLocalVariables.size());
    for (SNode node : this.myLocalVariables) {
      if (condition.met(node)) {
        result.add(node);
      }
    }
    return result;
  }

  private void _populateLocalVariables(ILocalVariableElementList statementList, ILocalVariableElement beforeStatement, List<SNode> result) {
    if (statementList == null) {
      return;
    }
    if (statementList != beforeStatement) {
      List<SNode> varElements = ILocalVariableElementList_Behavior.call_getLocalVariableElements_1238805763253(BaseAdapter.fromAdapter(statementList));
      for (SNode sNode : varElements) {
        INodeAdapter n = BaseAdapter.fromNode(sNode);
        if (!((n instanceof ILocalVariableElement))) {
          continue;
        }
        ILocalVariableElement statement = (ILocalVariableElement) n;
        if (statement == beforeStatement) {
          break;
        }
        SNode declarationNode = ILocalVariableElement_Behavior.call_getLocalVariableDeclaration_1238803857389(BaseAdapter.fromAdapter(statement));
        if (declarationNode != null) {
          result.add(declarationNode);
        }
      }
    }
    ILocalVariableElement containingStatement = LocalVariablesScope.findThisOrParent(statementList, ILocalVariableElement.class);
    if (containingStatement != null) {
      statementList = containingStatement.findParent(ILocalVariableElementList.class);
      this._populateLocalVariables(statementList, containingStatement, result);
    }
  }

  private void _populateLocalVariables(AbstractLoopStatement loopStatement, List<SNode> result) {
    for (INodeAdapter child : loopStatement.getChildren()) {
      if (child.getRole_().equals(AbstractLoopStatement.BODY)) {
        continue;
      }
      if (child instanceof LocalVariableDeclaration) {
        result.add(child.getNode());
      }
      List<LocalVariableDeclaration> moreChildren = child.getDescendants(LocalVariableDeclaration.class);
      for (LocalVariableDeclaration child_ : moreChildren) {
        result.add(child_.getNode());
      }
    }
    AbstractLoopStatement containingLoop = LocalVariablesScope.findThisOrParent(loopStatement.getParent(), AbstractLoopStatement.class);
    if (containingLoop != null) {
      this._populateLocalVariables(containingLoop, result);
    }
  }

  private void _populateLocalVariables(CatchClause tryCatchStatement, List<SNode> result) {
    if (tryCatchStatement.getThrowable() != null) {
      LocalVariableDeclaration throwable = tryCatchStatement.getThrowable();
      result.add(throwable.getNode());
    }
    CatchClause containingCatchClause = LocalVariablesScope.findThisOrParent(tryCatchStatement.getParent(), CatchClause.class);
    if (containingCatchClause != null) {
      this._populateLocalVariables(containingCatchClause, result);
    }
  }

  public IReferenceInfoResolver getReferenceInfoResolver(SNode referenceNode, AbstractConceptDeclaration targetConcept) {
    if (SModelUtil_new.isAssignableConcept(targetConcept, LocalVariableDeclaration.concept)) {
      return new IReferenceInfoResolver() {
        public SNode resolve(String referenceInfo, SModelReference targetModelReference) {
          if (referenceInfo == null) {
            return null;
          }
          for (SNode node : LocalVariablesScope.this.getNodes(AbstractSearchScope.TRUE_CONDITION)) {
            if (referenceInfo.equals(node.getName())) {
              return node;
            }
          }
          return null;
        }
      };
    }
    return super.getReferenceInfoResolver(referenceNode, targetConcept);
  }

  private static <BA extends INodeAdapter> BA findThisOrParent(INodeAdapter sourceNode, Class<BA> clazz) {
    INodeAdapter testNode = sourceNode;
    while (testNode != null) {
      if (clazz.isAssignableFrom(testNode.getClass())) {
        return (BA) testNode;
      }
      if (ConceptFunction.class.isAssignableFrom(testNode.getClass())) {
        if (!(Closure.class.isAssignableFrom(testNode.getClass()))) {
          break;
        }
      }
      testNode = testNode.getParent();
    }
    return null;
  }
}
