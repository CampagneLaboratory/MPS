package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Type;
import java.util.Map;
import jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration;
import jetbrains.mps.baseLanguage.structure.TypeVariableReference;
import jetbrains.mps.baseLanguage.structure.ClassifierType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.CopyUtil;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class GenericTypesUtil {
  public GenericTypesUtil() {
  }

  @Deprecated
  public static Type getTypeWithResolvedTypeVars(Type type, Map<TypeVariableDeclaration, Type> typeByTypeVar) {
    if (type instanceof TypeVariableReference) {
      return GenericTypesUtil.getTypeByTypeVariable((TypeVariableReference) type, typeByTypeVar);
    } else
    if (type instanceof ClassifierType) {
      return GenericTypesUtil.createClassifierTypeWithResolvedTypeVars((ClassifierType) type, typeByTypeVar);
    }
    return type;
  }

  public static SNode getTypeWithResolvedTypeVars(SNode type, Map<SNode, SNode> typeByTypeVar) {
    if (SNodeOperations.isInstanceOf(type, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      return GenericTypesUtil.getTypeByTypeVariable(SNodeOperations.cast(type, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), typeByTypeVar);
    } else
    if (SNodeOperations.isInstanceOf(type, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
      return GenericTypesUtil.createClassifierTypeWithResolvedTypeVars(SNodeOperations.cast(type, "jetbrains.mps.baseLanguage.structure.ClassifierType"), typeByTypeVar);
    }
    return type;
  }

  @Deprecated
  private static Type getTypeByTypeVariable(TypeVariableReference typeVariableRef, Map<TypeVariableDeclaration, Type> typeByTypeVar) {
    Type result = typeVariableRef;
    TypeVariableDeclaration typeVar = typeVariableRef.getTypeVariableDeclaration();
    while (typeVar != null) {
      Type typeVarValue = typeByTypeVar.get(typeVar);
      if (typeVarValue == null) {
        break;
      }
      result = typeVarValue;
      if (result instanceof TypeVariableReference) {
        TypeVariableDeclaration newTypeVar = ((TypeVariableReference) result).getTypeVariableDeclaration();
        if (typeVar == newTypeVar) {
          break;
        }
        typeVar = newTypeVar;
      } else {
        break;
      }
    }
    return result;
  }

  private static SNode getTypeByTypeVariable(SNode typeVariableRef, Map<SNode, SNode> typeByTypeVar) {
    SNode result = typeVariableRef;
    SNode typeVar = SLinkOperations.getTarget(typeVariableRef, "typeVariableDeclaration", false);
    while ((typeVar != null)) {
      SNode typeVarValue = typeByTypeVar.get(typeVar);
      if ((typeVarValue == null)) {
        break;
      }
      result = typeVarValue;
      if (SNodeOperations.isInstanceOf(result, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
        SNode newTypeVar = SLinkOperations.getTarget(SNodeOperations.cast(result, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false);
        if (typeVar == newTypeVar) {
          break;
        }
        typeVar = newTypeVar;
      } else {
        break;
      }
    }
    return result;
  }

  @Deprecated
  private static ClassifierType createClassifierTypeWithResolvedTypeVars(ClassifierType type, Map<TypeVariableDeclaration, Type> typeByTypeVar) {
    ClassifierType typeCopy = CopyUtil.copy(type);
    List<TypeVariableReference> list = typeCopy.getDescendants(TypeVariableReference.class);
    for (TypeVariableReference typeVariableRef : list) {
      Type resolvedType = GenericTypesUtil.getTypeByTypeVariable(typeVariableRef, typeByTypeVar);
      if (resolvedType.getNode() != typeVariableRef.getNode()) {
        typeVariableRef.getParent().replaceChild(typeVariableRef, CopyUtil.copy(resolvedType));
      }
    }
    return typeCopy;
  }

  private static SNode createClassifierTypeWithResolvedTypeVars(SNode type, Map<SNode, SNode> typeByTypeVar) {
    SNode typeCopy = SNodeOperations.copyNode(type);
    for (SNode typeVariableRef : ListSequence.fromList(SNodeOperations.getDescendants(typeCopy, "jetbrains.mps.baseLanguage.structure.TypeVariableReference", false, new String[]{}))) {
      SNode resolvedType = GenericTypesUtil.getTypeByTypeVariable(typeVariableRef, typeByTypeVar);
      if (resolvedType != typeVariableRef) {
        SNodeOperations.replaceWithAnother(typeVariableRef, SNodeOperations.copyNode(resolvedType));
      }
    }
    return typeCopy;
  }
}
