package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Type;
import java.util.Map;
import jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration;
import jetbrains.mps.baseLanguage.structure.TypeVariableReference;
import jetbrains.mps.baseLanguage.structure.ClassifierType;
import jetbrains.mps.smodel.CopyUtil;
import java.util.List;

public class GenericTypesUtil {
  public GenericTypesUtil() {
  }

  public static Type getTypeWithResolvedTypeVars(Type type, Map<TypeVariableDeclaration, Type> typeByTypeVar) {
    if (type instanceof TypeVariableReference) {
      return GenericTypesUtil.getTypeByTypeVariable((TypeVariableReference) type, typeByTypeVar);
    } else
    if (type instanceof ClassifierType) {
      return GenericTypesUtil.createClassifierTypeWithResolvedTypeVars((ClassifierType) type, typeByTypeVar);
    }
    return type;
  }

  private static Type getTypeByTypeVariable(TypeVariableReference typeVariableRef, Map<TypeVariableDeclaration, Type> typeByTypeVar) {
    Type result = typeVariableRef;
    TypeVariableDeclaration typeVar = typeVariableRef.getTypeVariableDeclaration();
    while (typeVar != null) {
      Type typeVarValue = typeByTypeVar.get(typeVar);
      if (typeVarValue == null) {
        break;
      }
      result = typeVarValue;
      if (result instanceof TypeVariableReference) {
        TypeVariableDeclaration newTypeVar = ((TypeVariableReference) result).getTypeVariableDeclaration();
        if (typeVar == newTypeVar) {
          break;
        }
        typeVar = newTypeVar;
      } else {
        break;
      }
    }
    return result;
  }

  private static ClassifierType createClassifierTypeWithResolvedTypeVars(ClassifierType type, Map<TypeVariableDeclaration, Type> typeByTypeVar) {
    ClassifierType typeCopy = CopyUtil.copy(type);
    List<TypeVariableReference> list = typeCopy.getDescendants(TypeVariableReference.class);
    for (TypeVariableReference typeVariableRef : list) {
      Type resolvedType = GenericTypesUtil.getTypeByTypeVariable(typeVariableRef, typeByTypeVar);
      if (resolvedType.getNode() != typeVariableRef.getNode()) {
        typeVariableRef.getParent().replaceChild(typeVariableRef, CopyUtil.copy(resolvedType));
      }
    }
    return typeCopy;
  }
}
