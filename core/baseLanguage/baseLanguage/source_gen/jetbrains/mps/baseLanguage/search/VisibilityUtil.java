package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import jetbrains.mps.smodel.INodeAdapter;
import jetbrains.mps.baseLanguage.structure.IVisible;
import jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration;
import jetbrains.mps.baseLanguage.structure.Visibility;
import jetbrains.mps.baseLanguage.structure.PublicVisibility;
import jetbrains.mps.baseLanguage.structure.ProtectedVisibility;
import jetbrains.mps.baseLanguage.structure.ClassifierMember;
import jetbrains.mps.baseLanguage.structure.Classifier;
import jetbrains.mps.baseLanguage.BaseLanguageUtil;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.BaseAdapter;

public final class VisibilityUtil {
  private VisibilityUtil() {
  }

  /*package*/ static boolean isVisible(INodeAdapter contextNode, IVisible member) {
    if (contextNode == null) {
      return true;
    }
    if (member instanceof EnumConstantDeclaration) {
      return true;
    }
    Visibility visibility = member.getVisibility();
    if (visibility instanceof PublicVisibility) {
      return true;
    }
    if (visibility == null) {
      return member.getModel().getSModelFqName().getNamespace().equals(contextNode.getModel().getSModelFqName().getNamespace());
    }
    if (visibility instanceof ProtectedVisibility && member.getModel().getSModelFqName().getNamespace().equals(contextNode.getModel().getSModelFqName().getNamespace())) {
      return true;
    }
    if (!((member instanceof ClassifierMember))) {
      return true;
    }
    Classifier memberClassifier = member.getParent(Classifier.class, true);
    if (memberClassifier == null) {
      return true;
    }
    Classifier contextClassifier = contextNode.getParent(Classifier.class, true);
    while (contextClassifier != null) {
      if (memberClassifier == contextClassifier) {
        return true;
      }
      if (visibility instanceof ProtectedVisibility) {
        if (BaseLanguageUtil.isAssignable(contextClassifier, memberClassifier)) {
          return true;
        }
      }
      Classifier parent = contextClassifier.getParent(Classifier.class, false);
      if (parent == null) {
        break;
      }
      contextClassifier = parent;
    }
    while (memberClassifier != null) {
      Classifier parent = memberClassifier.getParent(Classifier.class, false);
      if (parent == null) {
        if (memberClassifier == contextClassifier) {
          return true;
        }
      }
      memberClassifier = parent;
    }
    return false;
  }

  public static boolean isVisible(SNode contextNode, SNode memberNode) {
    return VisibilityUtil.isVisible(BaseAdapter.fromNode(contextNode), (IVisible) BaseAdapter.fromNode(memberNode));
  }
}
