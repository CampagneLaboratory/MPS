package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.BaseLanguageUtil;
import jetbrains.mps.baseLanguage.structure.Classifier;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public final class VisibilityUtil {
  private VisibilityUtil() {
  }

  @Deprecated
  public static boolean isVisible(SNode contextNode, @NotNull SNode member) {
    if (contextNode == null) {
      return true;
    }
    if (SNodeOperations.isInstanceOf(member, "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration")) {
      return true;
    }
    SNode visibility = SLinkOperations.getTarget(member, "visibility", true);
    if (SNodeOperations.isInstanceOf(visibility, "jetbrains.mps.baseLanguage.structure.PublicVisibility")) {
      return true;
    }
    if (visibility == null) {
      return SNodeOperations.getModel(member).getSModelFqName().getNamespace().equals(SNodeOperations.getModel(contextNode).getSModelFqName().getNamespace());
    }
    if (SNodeOperations.isInstanceOf(visibility, "jetbrains.mps.baseLanguage.structure.ProtectedVisibility") && SNodeOperations.getModel(member).getSModelFqName().getNamespace().equals(SNodeOperations.getModel(contextNode).getSModelFqName().getNamespace())) {
      return true;
    }
    if (!(SNodeOperations.isInstanceOf(member, "jetbrains.mps.baseLanguage.structure.ClassifierMember"))) {
      return true;
    }
    SNode memberClassifier = SNodeOperations.getAncestor(member, "jetbrains.mps.baseLanguage.structure.Classifier", true, false);
    if (memberClassifier == null) {
      return true;
    }
    SNode contextClassifier = SNodeOperations.getAncestor(contextNode, "jetbrains.mps.baseLanguage.structure.Classifier", true, false);
    while (contextClassifier != null) {
      if (memberClassifier == contextClassifier) {
        return true;
      }
      if (SNodeOperations.isInstanceOf(visibility, "jetbrains.mps.baseLanguage.structure.ProtectedVisibility")) {
        if (BaseLanguageUtil.isAssignable(((Classifier) SNodeOperations.getAdapter(contextClassifier)), ((Classifier) SNodeOperations.getAdapter(memberClassifier)))) {
          return true;
        }
      }
      SNode parent = SNodeOperations.getAncestor(contextClassifier, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
      if (parent == null) {
        break;
      }
      contextClassifier = parent;
    }
    while (memberClassifier != null) {
      SNode parent = SNodeOperations.getAncestor(memberClassifier, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
      if (parent == null) {
        if (memberClassifier == contextClassifier) {
          return true;
        }
      }
      memberClassifier = parent;
    }
    return false;
  }

  public static String packageName(@NotNull SNode node) {
    return SNodeOperations.getModel(node).getSModelFqName().getNamespace();
  }

  public static SNode topClassifier(@NotNull SNode node) {
    return ListSequence.fromList(SNodeOperations.getAncestors(node, "jetbrains.mps.baseLanguage.structure.Classifier", true)).last();
  }

  public static boolean isAccessible(@NotNull SNode context, @NotNull SNode name) {
    SNode classifier = SNodeOperations.getAncestor(name, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
    if ((classifier == null)) {
      // top level class or interface accessible in the same package or if public 
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(name, "visibility", true), "jetbrains.mps.baseLanguage.structure.PublicVisibility") || packageName(context).equals(packageName(name));
    }
    if (!(isAccessible(context, classifier))) {
      return false;
    }
    // type is accessible, check member access 
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(name, "visibility", true), "jetbrains.mps.baseLanguage.structure.PublicVisibility")) {
      return true;
    }
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(name, "visibility", true), "jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
      // private member accessible only in the body of top level class of member definition 
      return topClassifier(context) == topClassifier(name);
    }
    // protected or package access 
    if (packageName(context).equals(packageName(name))) {
      return true;
    }
    // check special cases of protected access 
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(name, "visibility", true), "jetbrains.mps.baseLanguage.structure.ProtectedVisibility")) {
      // context should be in the body of subclass of member class 
      // + context should be a member access node with the type = subclass of that subclass (not checked now) 
      for (SNode cls : ListSequence.fromList(SNodeOperations.getAncestors(context, "jetbrains.mps.baseLanguage.structure.Classifier", false))) {
        if (BaseLanguageUtil.isAssignable(((Classifier) SNodeOperations.getAdapter(cls)), ((Classifier) SNodeOperations.getAdapter(classifier)))) {
          if (SNodeOperations.isInstanceOf(name, "jetbrains.mps.baseLanguage.structure.FieldDeclaration") || SNodeOperations.isInstanceOf(name, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
            // todo: check ExpressionName or PrimaryExpression is subclass of cls 
          }
          if (SNodeOperations.isInstanceOf(name, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")) {
            // check it is superclass constructor infocation or anonymous class instance creation 
            return SNodeOperations.isInstanceOf(context, "jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation") || SNodeOperations.isInstanceOf(context, "jetbrains.mps.baseLanguage.structure.AnonymousClass") || SNodeOperations.isInstanceOf(context, "jetbrains.mps.baseLanguage.structure.AnonymousClassCreator");
          }
          return true;
        }
      }
    }
    return false;
  }
}
