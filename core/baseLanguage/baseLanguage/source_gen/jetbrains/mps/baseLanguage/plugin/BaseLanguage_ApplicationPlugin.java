package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.applicationplugins.BaseApplicationPlugin;
import com.intellij.openapi.extensions.PluginId;
import com.intellij.openapi.actionSystem.ActionManager;
import jetbrains.mps.ide.actions.ModelActionsInternal_ActionGroup;
import jetbrains.mps.lang.refactoring.plugin.NodeRefactoring_ActionGroup;
import jetbrains.mps.ide.actions.EditorPopup_ActionGroup;
import jetbrains.mps.ide.actions.EditorInternal_ActionGroup;
import jetbrains.mps.ide.actions.NodeActionsInternal_ActionGroup;
import jetbrains.mps.ide.actions.Tools_ActionGroup;
import jetbrains.mps.lang.dataFlow.plugin.DFAActions_ActionGroup;
import jetbrains.mps.ide.actions.Code_ActionGroup;
import java.util.List;
import jetbrains.mps.plugins.pluginparts.custom.BaseCustomApplicationPlugin;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class BaseLanguage_ApplicationPlugin extends BaseApplicationPlugin {
  private PluginId myId = PluginId.getId("jetbrains.mps.baseLanguage");

  public BaseLanguage_ApplicationPlugin() {
  }

  public PluginId getId() {
    return myId;
  }

  public void createGroups() {
    ActionManager manager = ActionManager.getInstance();
    // actions w/o parameters 
    {
      AnalyzeStacktrace_Action action = new AnalyzeStacktrace_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      CommentLine_Action action = new CommentLine_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      CommentStatements_Action action = new CommentStatements_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ExtractMethod_Action action = new ExtractMethod_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      GoToInheritedClassifier_Action action = new GoToInheritedClassifier_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      GoToOverridenMethod_Action action = new GoToOverridenMethod_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ImplementMethod_Action action = new ImplementMethod_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      InlineLocalVariable_Action action = new InlineLocalVariable_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      InlineMethod_Action action = new InlineMethod_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      IntroduceConstant_Action action = new IntroduceConstant_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      IntroduceField_Action action = new IntroduceField_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      IntroduceVariable_Action action = new IntroduceVariable_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      OverrideMethod_Action action = new OverrideMethod_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      PrintNodePosition_Action action = new PrintNodePosition_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      RenameVariable_Action action = new RenameVariable_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ShowMembers_Action action = new ShowMembers_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ShowNullDFA_Action action = new ShowNullDFA_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ShowTodoViewer_Action action = new ShowTodoViewer_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      UncommentStatements_Action action = new UncommentStatements_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    // parameterized actions 

    // groups 
    manager.registerAction(AnalyzersActions_ActionGroup.ID, new AnalyzersActions_ActionGroup(), myId);
    manager.registerAction(BaseLangaugeCodeCommentsMenuGroup_ActionGroup.ID, new BaseLangaugeCodeCommentsMenuGroup_ActionGroup(), myId);
    manager.registerAction(BaseLanguageEditorPopupInternal_ActionGroup.ID, new BaseLanguageEditorPopupInternal_ActionGroup(), myId);
    manager.registerAction(BaseLanguageEditorPopup_ActionGroup.ID, new BaseLanguageEditorPopup_ActionGroup(), myId);
    manager.registerAction(BaseLanguageModelActionsInternal_ActionGroup.ID, new BaseLanguageModelActionsInternal_ActionGroup(), myId);
    manager.registerAction(BaseLanguageNodeActionsInternal_ActionGroup.ID, new BaseLanguageNodeActionsInternal_ActionGroup(), myId);
    manager.registerAction(BaseLanguageToolsAddition_ActionGroup.ID, new BaseLanguageToolsAddition_ActionGroup(), myId);
    manager.registerAction(BaseLangugeCodeOverrideImplementMenuGroup_ActionGroup.ID, new BaseLangugeCodeOverrideImplementMenuGroup_ActionGroup(), myId);
    manager.registerAction(PrintNodePosition_ActionGroup.ID, new PrintNodePosition_ActionGroup(), myId);
    manager.registerAction(RefactoringAddition_ActionGroup.ID, new RefactoringAddition_ActionGroup(), myId);
  }

  public void adjustRegularGroups() {
    this.insertGroupIntoAnother(ModelActionsInternal_ActionGroup.ID, "jetbrains.mps.baseLanguage.plugin.BaseLanguageModelActionsInternal_ActionGroup", null);
    this.insertGroupIntoAnother(NodeRefactoring_ActionGroup.ID, "jetbrains.mps.baseLanguage.plugin.RefactoringAddition_ActionGroup", null);
    this.insertGroupIntoAnother(EditorPopup_ActionGroup.ID, "jetbrains.mps.baseLanguage.plugin.BaseLanguageEditorPopup_ActionGroup", null);
    this.insertGroupIntoAnother(EditorInternal_ActionGroup.ID, "jetbrains.mps.baseLanguage.plugin.BaseLanguageEditorPopupInternal_ActionGroup", null);
    this.insertGroupIntoAnother(NodeActionsInternal_ActionGroup.ID, "jetbrains.mps.baseLanguage.plugin.BaseLanguageNodeActionsInternal_ActionGroup", null);
    this.insertGroupIntoAnother(Tools_ActionGroup.ID, "jetbrains.mps.baseLanguage.plugin.BaseLanguageToolsAddition_ActionGroup", Tools_ActionGroup.LABEL_ID_customTools);
    this.insertGroupIntoAnother(DFAActions_ActionGroup.ID, "jetbrains.mps.baseLanguage.plugin.AnalyzersActions_ActionGroup", null);
    this.insertGroupIntoAnother(Code_ActionGroup.ID, "jetbrains.mps.baseLanguage.plugin.BaseLangugeCodeOverrideImplementMenuGroup_ActionGroup", Code_ActionGroup.LABEL_ID_overrideImplement);
    this.insertGroupIntoAnother(Code_ActionGroup.ID, "jetbrains.mps.baseLanguage.plugin.BaseLangaugeCodeCommentsMenuGroup_ActionGroup", Code_ActionGroup.LABEL_ID_comments);
    this.insertGroupIntoAnother(EditorInternal_ActionGroup.ID, "jetbrains.mps.baseLanguage.plugin.PrintNodePosition_ActionGroup", null);
  }

  public List<BaseCustomApplicationPlugin> initCustomParts() {
    List<BaseCustomApplicationPlugin> res = ListSequence.fromList(new ArrayList<BaseCustomApplicationPlugin>());
    this.addCustomPart(res, new DebugInfoProvider_CustomApplicationPlugin());
    this.addCustomPart(res, new TraceInfoInitializer_CustomApplicationPlugin());
    return res;
  }

  private void addCustomPart(List<BaseCustomApplicationPlugin> plugins, BaseCustomApplicationPlugin plugin) {
    ListSequence.fromList(plugins).addElement(plugin);
    plugin.init();
  }
}
