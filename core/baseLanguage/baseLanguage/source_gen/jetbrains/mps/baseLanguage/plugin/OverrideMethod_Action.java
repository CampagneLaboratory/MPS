package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.workbench.MPSDataKeys;
import com.intellij.openapi.project.Project;
import java.awt.Frame;
import jetbrains.mps.ide.actions.StratergyAddMethodDialog;
import jetbrains.mps.ide.actions.AddClassMethodStrategy;
import jetbrains.mps.ide.actions.MethodsToOverrideStrategy;
import jetbrains.mps.ide.actions.OverrideClassMethodStrategy;

public class OverrideMethod_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(OverrideMethod_Action.class);

  private SNode selectedNode;
  private EditorContext editorContext;
  private IOperationContext operationContext;

  public OverrideMethod_Action() {
    super("Override Method...", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
    this.setMnemonic("O".charAt(0));
  }

  @NotNull
  public String getKeyStroke() {
    return "ctrl O";
  }

  public boolean isApplicable(AnActionEvent event) {
    return (SNodeOperations.getAncestor(OverrideMethod_Action.this.selectedNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", true, false) != null);
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "OverrideMethod", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    {
      SNode node = event.getData(MPSDataKeys.NODE);
      if (node != null) {
      }
      this.selectedNode = node;
    }
    if (this.selectedNode == null) {
      return false;
    }
    this.editorContext = event.getData(MPSDataKeys.EDITOR_CONTEXT);
    if (this.editorContext == null) {
      return false;
    }
    this.operationContext = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.operationContext == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      Project project = OverrideMethod_Action.this.operationContext.getProject();
      Frame frame = OverrideMethod_Action.this.editorContext.getMainFrame();
      new StratergyAddMethodDialog(OverrideMethod_Action.this.editorContext, frame, new AddClassMethodStrategy(OverrideMethod_Action.this.selectedNode), new MethodsToOverrideStrategy(), new OverrideClassMethodStrategy(project)).showDialog();
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "OverrideMethod", t);
    }
  }
}
