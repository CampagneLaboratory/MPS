package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.CurrentProjectMPSAction;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.action.ActionContext;
import jetbrains.mps.ide.action.MPSAction;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.refactoring.inlineMethod.InlineMethodDialog;

public class InlineMethod_Action extends CurrentProjectMPSAction {
  public static final Logger LOG = Logger.getLogger(InlineMethod_Action.class);

  private boolean isAlwaysVisible = true;

  public InlineMethod_Action(MPSProject project) {
    super(project, "Inline method");
  }

  @NotNull()
  public String getKeyStroke() {
    return "ctrl alt N";
  }

  public void doUpdate(@NotNull() ActionContext context) {
    try {
      super.doUpdate(context);
      if (!(this.fillFieldsIfNecessary(context))) {
        this.setEnabled(false);
        this.setVisible(this.isAlwaysVisible);
        return;
      }
      {
        final MPSAction action = this;
        final SNode node = context.getNode();
        ModelAccess.instance().runReadAction(new Runnable() {

          public void run() {
            boolean b = false;
            if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
              b = true;
            }
            if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.BaseMethodCall")) {
              b = true;
            }
            action.setVisible(b);
          }

        });
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "InlineMethod", t);
      this.setEnabled(false);
      this.setVisible(this.isAlwaysVisible);
    }
  }

  private boolean fillFieldsIfNecessary(ActionContext context) {
    try {
    } catch (Throwable t) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final ActionContext context) {
    try {
      if (!(this.fillFieldsIfNecessary(context))) {
        return;
      }
      performExecution(context);
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "InlineMethod", t);
    }
  }

  private void performExecution(ActionContext context) {
    InlineMethodDialog dialog = new InlineMethodDialog(context);
    dialog.tryToShow();
  }

  /* package */boolean isMethod(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
      return true;
    }
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.BaseMethodCall")) {
      return true;
    }
    return false;
  }

  public boolean executeInsideCommand() {
    return false;
  }

}
