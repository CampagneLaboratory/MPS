package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.logging.Logger;
import javax.swing.Icon;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.action.ActionEventData;
import jetbrains.mps.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.baseLanguage.refactoring.inlineMethod.InlineMethodRefactoringAnalyzer;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.baseLanguage.refactoring.inlineMethod.InlineMethodDialog;

public class InlineMethod_Action extends GeneratedAction {
  public static final Logger LOG = Logger.getLogger(InlineMethod_Action.class);
  public static final Icon ICON = null;

  private SNode node;

  public InlineMethod_Action() {
    super("Inline method", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull()
  public String getKeyStroke() {
    return "ctrl alt N";
  }

  public boolean isApplicable(AnActionEvent event) {
    final SNode node = new ActionEventData(event).getNode();
    final Wrappers._T<Boolean> b = new Wrappers._T<Boolean>(false);
    ModelAccess.instance().runReadAction(new Runnable() {

      public void run() {
        b.value = InlineMethodRefactoringAnalyzer.isMethodNode(node);
      }

    });
    return b.value;
  }

  public void doUpdate(@NotNull() AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "InlineMethod", t);
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    {
      SNode node = event.getData(MPSDataKeys.SNODE);
      if (node != null) {
      }
      this.node = node;
    }
    if (this.node == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      InlineMethodDialog dialog = new InlineMethodDialog(new ActionEventData(event));
      dialog.tryToShow();
      dialog.pack();
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "InlineMethod", t);
    }
  }

}
