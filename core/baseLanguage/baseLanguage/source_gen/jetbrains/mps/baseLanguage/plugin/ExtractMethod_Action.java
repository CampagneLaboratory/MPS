package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.refactoring.extractMethod.ExtractMethodDialog;
import jetbrains.mps.baseLanguage.refactoring.extractMethod.ExtractMethodKind;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.action.ActionContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.plugins.CurrentProjectMPSAction;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.List;

public class ExtractMethod_Action extends CurrentProjectMPSAction {
  public static final Logger LOG = Logger.getLogger(ExtractMethod_Action.class);

  private List<SNode> nodes;
  private boolean isAlwaysVisible = false;

  public ExtractMethod_Action(MPSProject project) {
    super(project, "Extract Method");
  }

  @NotNull()
  public String getKeyStroke() {
    return "ctrl alt M";
  }

  public void doUpdate(@NotNull()ActionContext context) {
    try {
      super.doUpdate(context);
      if (!(this.fillFieldsIfNecessary(context))) {
        this.setEnabled(false);
        this.setVisible(this.isAlwaysVisible);
        return;
      }
      if (!(this.isExpression(this.nodes)) && !(this.isStatements(this.nodes))) {
        this.setVisible(false);
      } else {
        this.setVisible(true);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ExtractMethod", t);
      this.setEnabled(false);
      this.setVisible(this.isAlwaysVisible);
    }
  }

  private boolean fillFieldsIfNecessary(ActionContext context) {
    try {
      {
        List<SNode> nodes = context.getNodes();
        boolean error = false;
        if (nodes != null) {
        }
        if (error) {
          this.nodes = null;
        } else {
          this.nodes = new ArrayList<SNode>(nodes);
        }
      }
      if (this.nodes == null) {
        return false;
      }
    } catch (Throwable t) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final ActionContext context) {
    try {
      if (!(this.fillFieldsIfNecessary(context))) {
        return;
      }
      performExecution(context);
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ExtractMethod", t);
    }
  }

  private void performExecution(ActionContext context) {
    ExtractMethodKind kind;
    if (this.isStatements(this.nodes)) {
      kind = ExtractMethodKind.FROM_STATEMENTS;
    } else {
      kind = ExtractMethodKind.FROM_EXPRESSION;
    }
    ExtractMethodDialog dialog = new ExtractMethodDialog(kind, context);
    dialog.showDialog();
  }

  /* package */boolean isStatements(List<SNode> statements) {
    for (SNode node : statements) {
      if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Statement"))) {
        return false;
      }
    }
    return true;
  }

  /* package */boolean isExpression(List<SNode> nodes) {
    return ListSequence.fromList(nodes).count() == 1 && SNodeOperations.isInstanceOf(ListSequence.fromList(nodes).first(), "jetbrains.mps.baseLanguage.structure.Expression");
  }

}
