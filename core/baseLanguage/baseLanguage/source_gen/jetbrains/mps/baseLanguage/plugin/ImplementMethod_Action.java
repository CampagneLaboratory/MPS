package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import jetbrains.mps.project.Project;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.ide.actions.OverrideImplementMethodsDialog;
import jetbrains.mps.baseLanguage.behavior.IMemberContainer_Behavior;
import jetbrains.mps.ide.project.ProjectHelper;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.actions.OverrideImplementMethodsHelper;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ImplementMethod_Action extends BaseAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(ImplementMethod_Action.class);

  public ImplementMethod_Action() {
    super("Implement Method...", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
    this.setMnemonic("I".charAt(0));
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return !(((EditorContext) MapSequence.fromMap(_params).get("editorContext")).isInspector()) && (SNodeOperations.getAncestor(((SNode) MapSequence.fromMap(_params).get("selectedNode")), "jetbrains.mps.baseLanguage.structure.ClassConcept", true, false) != null);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ImplementMethod", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node != null) {
      }
      MapSequence.fromMap(_params).put("selectedNode", node);
    }
    if (MapSequence.fromMap(_params).get("selectedNode") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("editorContext", event.getData(MPSEditorDataKeys.EDITOR_CONTEXT));
    if (MapSequence.fromMap(_params).get("editorContext") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("operationContext", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("operationContext") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final Project project = ((IOperationContext) MapSequence.fromMap(_params).get("operationContext")).getProject();

      final SNode contextClass = SNodeOperations.getAncestor(((SNode) MapSequence.fromMap(_params).get("selectedNode")), "jetbrains.mps.baseLanguage.structure.ClassConcept", true, false);
      final SNode contextMethod = SNodeOperations.getAncestor(((SNode) MapSequence.fromMap(_params).get("selectedNode")), "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", true, false);
      final SNodePointer[] methods = ModelAccess.instance().runReadAction(new Computable<SNodePointer[]>() {
        public SNodePointer[] compute() {
          return OverrideImplementMethodsDialog.toNodePointers(OverrideImplementMethodsDialog.sortMethods(contextClass, IMemberContainer_Behavior.call_getMethodsToImplement_5418393554803775106(contextClass)));
        }
      });

      final OverrideImplementMethodsDialog dialog = new OverrideImplementMethodsDialog(methods, ProjectHelper.toIdeaProject(project)) {
        @Override
        protected boolean showInsertOverride() {
          return false;
        }
      };
      dialog.setTitle("Select Methods to Implement");
      dialog.show();

      if (dialog.isOK()) {
        final Iterable<SNodePointer> selectedElements = (Iterable<SNodePointer>) dialog.getSelectedElements();

        ModelAccess.instance().runCommandInEDT(new Runnable() {
          public void run() {
            List<SNode> selection = Sequence.fromIterable(selectedElements).select(new ISelector<SNodePointer, SNode>() {
              public SNode select(SNodePointer it) {
                return SNodeOperations.cast(it.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
              }
            }).toListSequence();

            OverrideImplementMethodsHelper helper = new OverrideImplementMethodsHelper(project, contextClass, contextMethod, dialog.isRemoveAttributes(), false, dialog.isAddReturn());
            List<SNode> insertedMethods = helper.insertMethods(selection);
            if (insertedMethods.isEmpty()) {
              return;
            }
            if (insertedMethods.size() == 1) {
              ((EditorContext) MapSequence.fromMap(_params).get("editorContext")).selectAfter(ListSequence.fromList(insertedMethods).first());
            } else {
              ((EditorContext) MapSequence.fromMap(_params).get("editorContext")).select(ListSequence.fromList(insertedMethods).last());
              ((EditorContext) MapSequence.fromMap(_params).get("editorContext")).selectRange(ListSequence.fromList(insertedMethods).last(), ListSequence.fromList(insertedMethods).first());
            }

          }
        }, project);
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ImplementMethod", t);
    }
  }
}
