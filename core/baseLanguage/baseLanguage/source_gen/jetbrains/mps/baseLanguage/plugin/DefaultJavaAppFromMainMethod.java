package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.logging.Logger;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.baseLanguage.behavior.StaticMethodDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSPsiElement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.configurations.ConfigurationFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class DefaultJavaAppFromMainMethod extends BaseConfigCreator<SNode> implements Cloneable {
  private static final Logger LOG = Logger.getLogger(DefaultJavaAppFromMainMethod.class);

  private RunConfiguration myConfig;

  public DefaultJavaAppFromMainMethod() {
    super(findFactoryImpl(ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), JavaApplication_ConfigurationType.class), "DefaultJavaApplication"));
  }

  protected RunConfiguration doCreateConfiguration(SNode node) {
    this.createConfig(node);
    return this.myConfig;
  }

  private void createConfig(final SNode parameter) {
    if (!(StaticMethodDeclaration_Behavior.call_isMainMethod_1213877536670(parameter))) {
      return;
    }

    SNode classifier = SNodeOperations.getAncestor(parameter, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
    DefaultJavaAppFromMainMethod.this.setSourceElement(new MPSPsiElement(classifier));

    {
      JavaApplication_ConfigurationType configType = ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), JavaApplication_ConfigurationType.class);
      DefaultJavaApplication_Configuration _config = new DefaultJavaApplication_Configuration(DefaultJavaAppFromMainMethod.this.getContext().getProject(), findFactory(configType, "DefaultJavaApplication"), "NewConfig");
      _config.setName(SPropertyOperations.getString(classifier, "name"));
      _config.getStateObject().nodeId = classifier.getId();
      _config.getStateObject().modelId = classifier.getModel().getModelDescriptor().getSModelReference().toString();
      DefaultJavaAppFromMainMethod.this.myConfig = _config;
    }
  }

  @Override
  public DefaultJavaAppFromMainMethod clone() {
    return ((DefaultJavaAppFromMainMethod) super.clone());
  }

  protected boolean isApplicable(final Object element) {
    return element instanceof SNode && SNodeOperations.isInstanceOf(((SNode) element), "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
  }

  @NotNull
  private ConfigurationFactory findFactory(ConfigurationType configurationType, String configurationName) {
    return findFactoryImpl(configurationType, configurationName);
  }

  @NotNull
  private static ConfigurationFactory findFactoryImpl(ConfigurationType configurationType, String configurationName) {
    for (ConfigurationFactory factory : Sequence.fromIterable(Sequence.fromArray(configurationType.getConfigurationFactories()))) {
      if (factory.getClass().getName().contains(configurationName)) {
        return factory;
      }
    }
    LOG.warning("Cound not find configuration factory for " + configurationName + " in type " + configurationType.getDisplayName() + ".");
    return configurationType.getConfigurationFactories()[0];
  }
}
