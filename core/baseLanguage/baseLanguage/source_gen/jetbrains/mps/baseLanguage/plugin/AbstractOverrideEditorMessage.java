package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultEditorMessage;
import jetbrains.mps.nodeEditor.EditorMessageIconRenderer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorMessageOwner;
import java.awt.Color;
import java.awt.Graphics;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import java.awt.Cursor;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.CellFinders;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;

public abstract class AbstractOverrideEditorMessage extends DefaultEditorMessage implements EditorMessageIconRenderer {
  private String myTooltip;

  public AbstractOverrideEditorMessage(SNode node, EditorMessageOwner ovner, String tooltip) {
    super(node, Color.cyan, "", ovner);
    this.myTooltip = tooltip;
  }

  @Override
  public void paint(Graphics graphics, EditorComponent component, EditorCell cell) {
  }

  public String getTooltipText() {
    return this.myTooltip;
  }

  public Cursor getMouseOwerCursor() {
    return Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
  }

  public EditorCell getAnchorCell(EditorCell bigCell) {
    if (bigCell instanceof EditorCell_Collection) {
      return bigCell.findChild(CellFinders.byClass(EditorCell_Label.class, true));
    }
    return bigCell;
  }
}
