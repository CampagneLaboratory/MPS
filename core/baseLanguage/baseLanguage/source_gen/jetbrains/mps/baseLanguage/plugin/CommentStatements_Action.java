package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.CurrentProjectMPSAction;
import jetbrains.mps.logging.Logger;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.action.ActionContext;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;

public class CommentStatements_Action extends CurrentProjectMPSAction {
  public static final Logger LOG = Logger.getLogger(CommentStatements_Action.class);

  private List<SNode> nodes;

  public  CommentStatements_Action(MPSProject project) {
    super(project, "Comment Statements");
  }

  @NotNull()
  public String getKeyStroke() {
    return "control shift SLASH";
  }

  public boolean isApplicable(ActionContext context) {
    {
      ICursor<SNode> _zCursor = CursorFactory.createCursor(this.nodes);
      try {
        while(_zCursor.moveToNext()) {
          SNode node = _zCursor.getCurrent();
          if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Statement"))) {
            return false;
          }
        }
      } finally {
        _zCursor.release();
      }
    }
    if (SequenceOperations.getSize(this.nodes) == 1 && SNodeOperations.isInstanceOf(SequenceOperations.getFirst(this.nodes), "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock")) {
      return false;
    }
    return true;
  }

  public void doUpdate(@NotNull() ActionContext context) {
    super.doUpdate(context);
    if (!(this.fillFieldsIfNecessary(context))) {
      this.setEnabled(false);
      this.setVisible(false);
      return;
    }
    {
      boolean enabled = this.isApplicable(context);
      this.setEnabled(enabled);
      this.setVisible(enabled);
    }
  }

  public boolean fillFieldsIfNecessary(ActionContext context) {
    try {
      this.nodes = new ArrayList<SNode>(context.getNodes());
      if (this.nodes == null) {
        return false;
      }
    } catch (Throwable t) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() ActionContext context) {
    if (!(this.fillFieldsIfNecessary(context))) {
      return;
    }
    {
      List<SNode> statements = (List<SNode>)this.nodes;
      SNode commentedStatementsBlock = SNodeOperations.insertNewPrevSiblingChild(SequenceOperations.getFirst(statements), "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock");
      SLinkOperations.addAll(commentedStatementsBlock, "statement", statements);
      SNodeOperations.deleteNode(ListOperations.getElement(SLinkOperations.getTargets(commentedStatementsBlock, "statement", true), 0));
    }
  }

}
