package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.helgins.checking.EditorCheckerAdapter;
import java.util.Set;
import jetbrains.mps.nodeEditor.IEditorMessage;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import java.util.LinkedHashSet;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.RemarkStatement_Behavior;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.event.SModelPropertyEvent;

public class ToDoHighlighter extends EditorCheckerAdapter {

  public ToDoHighlighter() {
  }

  public Set<IEditorMessage> createMessages(SNode rootNode, IOperationContext operationContext) {
    Set<IEditorMessage> messages = new LinkedHashSet<IEditorMessage>();
    SNode node = rootNode;
    for(SNode remark : SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.RemarkStatement", false)) {
      if (RemarkStatement_Behavior.call_isTodo_1213877427548(remark)) {
        messages.add(new ToDoMessage(remark, SPropertyOperations.getString(remark, "value"), this.getOwner(rootNode)));
      }
    }
    return messages;
  }

  public boolean isPropertyEventDramatical(SModelPropertyEvent propertyEvent) {
    SNode node = propertyEvent.getNode();
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.RemarkStatement")) {
      if (propertyEvent.getPropertyName().equals("value")) {
        return true;
      }
    }
    return false;
  }

}
