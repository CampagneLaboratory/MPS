package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.logging.Logger;
import javax.swing.Icon;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.smodel.ModelAccess;

public class InlineLocalVariable_Action extends GeneratedAction {
  public static final Logger LOG = Logger.getLogger(InlineLocalVariable_Action.class);
  public static final Icon ICON = null;

  private SNode node;
  public EditorContext editorContext;

  public InlineLocalVariable_Action() {
    super("Inline local variable", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull()
  public String getKeyStroke() {
    return "ctrl alt N";
  }

  public boolean isApplicable(AnActionEvent event) {
    return SNodeOperations.isInstanceOf(InlineLocalVariable_Action.this.node, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
  }

  public void doUpdate(@NotNull() AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "InlineLocalVariable", t);
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    {
      SNode node = event.getData(MPSDataKeys.SNODE);
      if (node != null) {
      }
      this.node = node;
    }
    if (this.node == null) {
      return false;
    }
    this.editorContext = event.getData(MPSDataKeys.EDITOR_CONTEXT);
    if (this.editorContext == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      final InlineVariableRefactoring ref = new InlineVariableRefactoring(((SNode)InlineLocalVariable_Action.this.node), InlineLocalVariable_Action.this.editorContext);
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {

        public void run() {
          ref.doRefactoring();
        }

      });
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "InlineLocalVariable", t);
    }
  }

}
