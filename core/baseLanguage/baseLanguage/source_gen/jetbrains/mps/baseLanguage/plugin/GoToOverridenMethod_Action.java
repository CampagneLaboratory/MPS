package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.workbench.editors.MPSEditorOpener;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.search.ClassifierAndSuperClassifiersScope;
import jetbrains.mps.baseLanguage.structure.Classifier;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import java.util.List;
import jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration;
import jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class GoToOverridenMethod_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(GoToOverridenMethod_Action.class);

  private SNode selectedNode;
  private IOperationContext operationContext;

  public GoToOverridenMethod_Action() {
    super("Go to Overriden Method", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull
  public String getKeyStroke() {
    return "ctrl U";
  }

  public boolean isApplicable(AnActionEvent event) {
    return (GoToOverridenMethod_Action.this.getInstanceMethodDeclaration() != null) && (GoToOverridenMethod_Action.this.getClassifier() != null) && GoToOverridenMethod_Action.this.getOverridenMethod() != null;
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "GoToOverridenMethod", t);
      this.disable(event.getPresentation());
    }
  }

  @Override
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    {
      SNode node = event.getData(MPSDataKeys.NODE);
      if (node != null) {
      }
      this.selectedNode = node;
    }
    if (this.selectedNode == null) {
      return false;
    }
    this.operationContext = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.operationContext == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      // should be executed as write action since <node> requires it now 
      ModelAccess.instance().runWriteAction(new Runnable() {
        public void run() {
          SNode overridenMethod = GoToOverridenMethod_Action.this.getOverridenMethod();
          GoToOverridenMethod_Action.this.operationContext.getComponent(MPSEditorOpener.class).editNode(overridenMethod, GoToOverridenMethod_Action.this.operationContext);
        }
      });
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "GoToOverridenMethod", t);
    }
  }

  private SNode getInstanceMethodDeclaration() {
    return SNodeOperations.getAncestor(GoToOverridenMethod_Action.this.selectedNode, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", true, false);
  }

  private SNode getClassifier() {
    return SNodeOperations.getAncestor(GoToOverridenMethod_Action.this.getInstanceMethodDeclaration(), "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
  }

  private SNode getOverridenMethod() {
    SNode method = GoToOverridenMethod_Action.this.getInstanceMethodDeclaration();
    SNode classifier = GoToOverridenMethod_Action.this.getClassifier();
    ClassifierAndSuperClassifiersScope scope = new ClassifierAndSuperClassifiersScope(((Classifier) SNodeOperations.getAdapter(classifier)), IClassifiersSearchScope.INSTANCE_METHOD);
    List<BaseMethodDeclaration> overridenMethods = scope.getOverriddenMethods(((InstanceMethodDeclaration) SNodeOperations.getAdapter(method)));
    return SNodeOperations.cast(BaseAdapter.fromAdapter(ListSequence.fromList(overridenMethods).first()), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
  }
}
