package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCheckerAdapter;
import java.util.Set;
import jetbrains.mps.nodeEditor.EditorMessage;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import java.util.List;
import jetbrains.mps.smodel.event.SModelEvent;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.index.ClassifierSuccessorsFinder;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.project.GlobalScope;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.behavior.BaseMethodDeclaration_Behavior;
import jetbrains.mps.smodel.event.SModelRootEvent;
import jetbrains.mps.smodel.event.SModelFileChangedEvent;
import jetbrains.mps.smodel.event.SModelChildEvent;
import jetbrains.mps.smodel.event.SModelReferenceEvent;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.event.SModelPropertyEvent;

public class OverrideMethodsChecker extends EditorCheckerAdapter {
  private boolean myIndexWasNotReady;

  public OverrideMethodsChecker() {
  }

  public Set<EditorMessage> createMessages(SNode rootNode, IOperationContext operationConcets, List<SModelEvent> events, boolean wasCheckedOnce) {
    Iterable<SNode> classifiers = ListSequence.fromList(SNodeOperations.getDescendants(rootNode, "jetbrains.mps.baseLanguage.structure.Classifier", true, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.ClassConcept") || SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.Interface");
      }
    });
    this.myIndexWasNotReady = !(ClassifierSuccessorsFinder.isIndexReady());
    if (Sequence.fromIterable(classifiers).isEmpty() || this.myIndexWasNotReady) {
      return Collections.emptySet();
    }
    Set<EditorMessage> result = SetSequence.fromSet(new HashSet<EditorMessage>());
    for (SNode containedClassifier : Sequence.fromIterable(classifiers)) {
      this.collectOverridenMethods(containedClassifier, result);
    }
    return result;
  }

  private void collectOverridenMethods(SNode container, Set<EditorMessage> messages) {
    List<SNode> methods = SLinkOperations.getTargets(container, "method", true);
    if (ListSequence.fromList(methods).isEmpty()) {
      return;
    }

    List<SNode> methodsCopy = new ArrayList<SNode>();
    for (SNode method : ListSequence.fromList(methods)) {
      if (SPropertyOperations.getBoolean(method, "isFinal") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method, "visibility", true), "jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
        continue;
      }
      ListSequence.fromList(methodsCopy).addElement(method);
    }
    if (ListSequence.fromList(methodsCopy).isEmpty()) {
      return;
    }

    List<SNode> derivedClasses = ClassifierSuccessorsFinder.getDerivedClassifiers(container, GlobalScope.getInstance());
    if (ListSequence.fromList(derivedClasses).isEmpty()) {
      return;
    }
    this.createOverridenMethodsMessages(methodsCopy, derivedClasses, messages);
  }

  private void createOverridenMethodsMessages(List<SNode> methods, List<SNode> derivedClasses, Set<EditorMessage> messages) {
    for (Iterator<SNode> derivedClassesIt = ListSequence.fromList(derivedClasses).iterator(); derivedClassesIt.hasNext() && ListSequence.fromList(methods).isNotEmpty();) {
      SNode nextNode = derivedClassesIt.next();
      if (!(SNodeOperations.isInstanceOf(nextNode, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
        continue;
      }
      for (Iterator<SNode> derivedClassMethodsIt = ListSequence.fromList(SLinkOperations.getTargets(((SNode) nextNode), "method", true)).iterator(); derivedClassMethodsIt.hasNext() && ListSequence.fromList(methods).isNotEmpty();) {
        SNode derivedClassifierMethod = derivedClassMethodsIt.next();
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(derivedClassifierMethod, "visibility", true), "jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
          continue;
        }
        for (SNode method : ListSequence.fromList(methods)) {
          if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(derivedClassifierMethod, method)) {
            ListSequence.fromList(methods).removeElement(method);
            SetSequence.fromSet(messages).addElement(new OverrideEditorMessage(method, this));
            break;
          }
        }
      }
    }
  }

  @Override
  public boolean hasDramaticalEvent(List<SModelEvent> events) {
    if (this.myIndexWasNotReady) {
      return true;
    }
    for (SModelEvent event : ListSequence.fromList(events)) {
      if (event instanceof SModelRootEvent || event instanceof SModelFileChangedEvent) {
        return true;
      }
      if (event instanceof SModelChildEvent) {
        SModelChildEvent childEvent = (SModelChildEvent) event;
        SNode child = childEvent.getChild();
        String childRole = childEvent.getChildRole();
        // Class or Interface was added/removed 
        if (SNodeOperations.isInstanceOf(child, "jetbrains.mps.baseLanguage.structure.Interface") || SNodeOperations.isInstanceOf(child, "jetbrains.mps.baseLanguage.structure.ClassConcept") || SNodeOperations.isInstanceOf(child, "jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
          return true;
        }
        // method was added/removed from containing Classifier 
        if (SNodeOperations.isInstanceOf(child, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration") && SPropertyOperations.getString(SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.Classifier", "method"), "role").equals(childRole)) {
          return true;
        }
        // one of extendedInterface/superclass/implementedInterface child elements was added/removed 
        if (SNodeOperations.isInstanceOf(child, "jetbrains.mps.baseLanguage.structure.ClassifierType") && (SPropertyOperations.getString(SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.Interface", "extendedInterface"), "role").equals(childRole) || SPropertyOperations.getString(SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept", "superclass"), "role").equals(childRole) || SPropertyOperations.getString(SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept", "implementedInterface"), "role").equals(childRole))) {
          return true;
        }
        // parameter was added/removed 
        if (SNodeOperations.isInstanceOf(child, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration") && SPropertyOperations.getString(SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "parameter"), "role").equals(childRole)) {
          return true;
        }
        if (SNodeOperations.isInstanceOf(child, "jetbrains.mps.baseLanguage.structure.Type") && this.isParameterType(child)) {
          return true;
        }
      }
      if (event instanceof SModelReferenceEvent) {
        SModelReferenceEvent referenceEvent = (SModelReferenceEvent) event;
        SReference reference = referenceEvent.getReference();
        SNode sourceNode = reference.getSourceNode();
        String referenceRole = reference.getRole();
        if (SPropertyOperations.getString(SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", "classifier"), "role").equals(referenceRole) && SNodeOperations.isInstanceOf(sourceNode, "jetbrains.mps.baseLanguage.structure.ClassifierType") && (SNodeOperations.isInstanceOf(SNodeOperations.getParent(sourceNode), "jetbrains.mps.baseLanguage.structure.Classifier"))) {
          return true;
        }
        if (SPropertyOperations.getString(SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.AnonymousClass", "classifier"), "role").equals(referenceRole) && SNodeOperations.isInstanceOf(sourceNode, "jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
          return true;
        }
        if (SNodeOperations.isInstanceOf(sourceNode, "jetbrains.mps.baseLanguage.structure.Type") && this.isParameterType(sourceNode)) {
          return true;
        }
      }
      if (event instanceof SModelPropertyEvent) {
        SModelPropertyEvent propertyEvent = (SModelPropertyEvent) event;
        SNode node = propertyEvent.getNode();
        if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
          return true;
        }
      }
    }
    return false;
  }

  private boolean isParameterType(SNode type) {
    SNode parent = SNodeOperations.getParent(type);
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration")) {
      return true;
    }
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.Type")) {
      return this.isParameterType(parent);
    }
    return false;
  }
}
