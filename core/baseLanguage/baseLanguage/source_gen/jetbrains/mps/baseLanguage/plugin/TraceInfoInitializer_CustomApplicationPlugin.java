package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.custom.BaseCustomApplicationPlugin;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.traceInfo.TraceInfoManager;
import jetbrains.mps.util.Mapper;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.behavior.AnonymousClass_Behavior;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.debug.api.BreakpointManagerComponent;

public class TraceInfoInitializer_CustomApplicationPlugin extends BaseCustomApplicationPlugin {
  private static Logger LOG = Logger.getLogger(TraceInfoInitializer_CustomApplicationPlugin.class);

  public TraceInfoInitializer_CustomApplicationPlugin() {
  }

  public void doInit() {
    TraceInfoManager traceInfoManager = TraceInfoManager.getInstance();
    traceInfoManager.addTraceableConcept("jetbrains.mps.baseLanguage.structure.Statement");
    traceInfoManager.addTraceableConcept("jetbrains.mps.baseLanguage.structure.FieldDeclaration");
    traceInfoManager.addTraceableConcept("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
    traceInfoManager.addTraceableConcept("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
    traceInfoManager.addScopeConcept("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", new Mapper<SNode, List<SNode>>() {
      public List<SNode> value(SNode scopeNode) {
        return SLinkOperations.getTargets(scopeNode, "parameter", true);
      }
    });
    traceInfoManager.addScopeConcept("jetbrains.mps.baseLanguage.structure.StatementList", new Mapper<SNode, List<SNode>>() {
      public List<SNode> value(SNode scopeNode) {
        List<SNode> result = new ArrayList<SNode>();
        for (SNode statement : SLinkOperations.getTargets(scopeNode, "statement", true)) {
          if (SNodeOperations.isInstanceOf(statement, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")) {
            ListSequence.fromList(result).addElement(SLinkOperations.getTarget(SNodeOperations.cast(statement, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"), "localVariableDeclaration", true));
          }
        }
        return result;
      }
    });
    traceInfoManager.addScopeConcept("jetbrains.mps.baseLanguage.structure.ForeachStatement", new Mapper<SNode, List<SNode>>() {
      public List<SNode> value(SNode scopeNode) {
        return ListSequence.fromListAndArray(new ArrayList<SNode>(), SLinkOperations.getTarget(scopeNode, "variable", true));
      }
    });
    traceInfoManager.addScopeConcept("jetbrains.mps.baseLanguage.structure.ForStatement", new Mapper<SNode, List<SNode>>() {
      public List<SNode> value(SNode scopeNode) {
        return ListSequence.fromListAndArray(new ArrayList<SNode>(), SLinkOperations.getTarget(scopeNode, "variable", true));
      }
    });
    traceInfoManager.addScopeConcept("jetbrains.mps.baseLanguage.structure.CatchClause", new Mapper<SNode, List<SNode>>() {
      public List<SNode> value(SNode scopeNode) {
        return ListSequence.fromListAndArray(new ArrayList<SNode>(), SLinkOperations.getTarget(scopeNode, "throwable", true));
      }
    });
    traceInfoManager.addUnitConcept("jetbrains.mps.baseLanguage.structure.AnonymousClass", new Mapper<SNode, String>() {
      public String value(SNode unitNode) {
        return AnonymousClass_Behavior.call_getJavaName_2977939203456914071(unitNode);
      }
    });
    traceInfoManager.addUnitConcept("jetbrains.mps.baseLanguage.structure.Interface", new Mapper<SNode, String>() {
      public String value(SNode unitNode) {
        String fqName = INamedConcept_Behavior.call_getFqName_1213877404258(unitNode);
        if (SNodeOperations.getAncestor(unitNode, "jetbrains.mps.baseLanguage.structure.Classifier", false, false) == null) {
          return fqName;
        }
        int index = fqName.lastIndexOf(".");
        if (index <= 0) {
          return fqName;
        }
        return fqName.substring(0, index) + "$" + fqName.substring(index + 1);
      }
    });
    traceInfoManager.addUnitConcept("jetbrains.mps.baseLanguage.structure.ClassConcept", new Mapper<SNode, String>() {
      public String value(SNode unitNode) {
        String fqName = INamedConcept_Behavior.call_getFqName_1213877404258(unitNode);
        if (SNodeOperations.getAncestor(unitNode, "jetbrains.mps.baseLanguage.structure.Classifier", false, false) == null) {
          return fqName;
        }
        int index = fqName.lastIndexOf(".");
        if (index <= 0) {
          return fqName;
        }
        return fqName.substring(0, index) + "$" + fqName.substring(index + 1);
      }
    });
    BreakpointManagerComponent.notifyDebuggableConceptsAdded();
  }

  public void doDispose() {
    TraceInfoManager traceInfoManager = TraceInfoManager.getInstance();
    traceInfoManager.removeTraceableConcept("jetbrains.mps.baseLanguage.structure.Statement");
    traceInfoManager.removeTraceableConcept("jetbrains.mps.baseLanguage.structure.FieldDeclaration");
    traceInfoManager.removeTraceableConcept("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
    traceInfoManager.removeTraceableConcept("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
    traceInfoManager.removeScopeConcept("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
    traceInfoManager.removeScopeConcept("jetbrains.mps.baseLanguage.structure.StatementList");
    traceInfoManager.removeScopeConcept("jetbrains.mps.baseLanguage.structure.ForeachStatement");
    traceInfoManager.removeScopeConcept("jetbrains.mps.baseLanguage.structure.ForStatement");
    traceInfoManager.removeScopeConcept("jetbrains.mps.baseLanguage.structure.CatchClause");
    traceInfoManager.removeUnitConcept("jetbrains.mps.baseLanguage.structure.AnonymousClass");
    traceInfoManager.removeUnitConcept("jetbrains.mps.baseLanguage.structure.Interface");
    traceInfoManager.removeUnitConcept("jetbrains.mps.baseLanguage.structure.ClassConcept");
  }
}
