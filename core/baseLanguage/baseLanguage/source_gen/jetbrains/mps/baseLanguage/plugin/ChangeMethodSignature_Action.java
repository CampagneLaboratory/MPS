package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModelRepository;
import java.util.List;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.ChangeMethodSignatureRefactoring;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.refactoring.framework.RefactoringUtil;
import java.util.Arrays;
import jetbrains.mps.ide.project.ProjectHelper;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.refactoring.RefactoringFacade;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.ChangeMethodSignatureDialog;

public class ChangeMethodSignature_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(ChangeMethodSignature_Action.class);

  public ChangeMethodSignature_Action() {
    super("ChangeMethodSignature", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ChangeMethodSignature", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSDataKeys.NODE);
      if (node != null) {
        if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"))) {
          node = null;
        }
      }
      MapSequence.fromMap(_params).put("method", node);
    }
    if (MapSequence.fromMap(_params).get("method") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {

      ModelAccess.instance().runWriteAction(new Runnable() {
        public void run() {
          SModelRepository.getInstance().saveAll();
        }
      });

      new Thread() {
        public void run() {
          final List<ChangeMethodSignatureRefactoring> myRefactorings = ChangeMethodSignature_Action.this.init(event.getData(MPSDataKeys.OPERATION_CONTEXT), _params);
          if (ListSequence.fromList(myRefactorings).isEmpty()) {
            return;
          }
          final Wrappers._T<RefactoringContext> c = new Wrappers._T<RefactoringContext>();

          ModelAccess.instance().runReadAction(new Runnable() {
            public void run() {
              c.value = RefactoringContext.createRefactoringContext(RefactoringUtil.getRefactoringByClassName("jetbrains.mps.baseLanguage.refactorings" + "." + "ChangeMethodSignature"), Arrays.asList("myRefactorings"), Arrays.asList(myRefactorings), ((SNode) MapSequence.fromMap(_params).get("method")), ProjectHelper.toMPSProject(((Project) MapSequence.fromMap(_params).get("project"))));
            }
          });
          if (c.value != null) {
            new RefactoringFacade().execute(c.value);
          }


        }
      }.start();

    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ChangeMethodSignature", t);
    }
  }

  private List<ChangeMethodSignatureRefactoring> init(final IOperationContext context, final Map<String, Object> _params) {
    final List[] result = new List[1];
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        ChangeMethodSignatureDialog dialog = new ChangeMethodSignatureDialog(((SNode) MapSequence.fromMap(_params).get("method")), context);
        dialog.showDialog();
        result[0] = dialog.getAllRefactorings();
      }
    });
    return (List<ChangeMethodSignatureRefactoring>) result[0];
  }
}
