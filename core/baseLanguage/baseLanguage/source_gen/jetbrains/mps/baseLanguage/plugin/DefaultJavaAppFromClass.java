package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import jetbrains.mps.smodel.SNode;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import jetbrains.mps.baseLanguage.behavior.ClassConcept_Behavior;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSPsiElement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class DefaultJavaAppFromClass extends BaseConfigCreator<SNode> implements Cloneable {
  private RunConfiguration myConfig;

  public DefaultJavaAppFromClass() {
    super(ContainerUtil.findInstance(Extensions.getExtensions(JavaApplication_ConfigurationType.CONFIGURATION_TYPE_EP), JavaApplication_ConfigurationType.class));
  }

  protected RunConfiguration doCreateConfiguration(SNode node) {
    this.createConfig(node);
    return this.myConfig;
  }

  private void createConfig(final SNode parameter) {
    SNode mainMethod = ClassConcept_Behavior.call_getMainMethod_1213877355884(parameter);

    if ((mainMethod == null)) {
      return;
    }

    DefaultJavaAppFromClass.this.setSourceElement(new MPSPsiElement(parameter));

    {
      JavaApplication_ConfigurationType configType = ContainerUtil.findInstance(Extensions.getExtensions(JavaApplication_ConfigurationType.CONFIGURATION_TYPE_EP), JavaApplication_ConfigurationType.class);
      DefaultJavaApplication_Configuration _config = new DefaultJavaApplication_Configuration(DefaultJavaAppFromClass.this.getContext().getProject(), configType.getConfigurationFactories()[0], "NewConfig");
      _config.setName(SPropertyOperations.getString(parameter, "name"));
      _config.getStateObject().nodeId = parameter.getId();
      _config.getStateObject().modelId = parameter.getModel().getModelDescriptor().getSModelReference().toString();
      DefaultJavaAppFromClass.this.myConfig = _config;
    }
  }

  @Override
  public DefaultJavaAppFromClass clone() {
    return ((DefaultJavaAppFromClass) super.clone());
  }

  protected boolean isApplicable(final Object element) {
    return element instanceof SNode && SNodeOperations.isInstanceOf(((SNode) element), "jetbrains.mps.baseLanguage.structure.ClassConcept");
  }
}
