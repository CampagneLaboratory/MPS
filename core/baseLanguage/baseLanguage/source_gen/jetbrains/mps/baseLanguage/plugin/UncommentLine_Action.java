package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorComponent;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.workbench.MPSDataKeys;

public class UncommentLine_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(UncommentLine_Action.class);

  private SNode selectedNode;
  private EditorComponent editorComponent;

  public UncommentLine_Action() {
    super("Uncomment Line", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "ctrl SLASH";
  }

  public boolean isApplicable(AnActionEvent event) {
    SNode comment = UncommentLine_Action.this.getCommentStatement();
    return comment != null && ListSequence.fromList(SLinkOperations.getTargets(comment, "commentPart", true)).count() == 1 && SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getTargets(comment, "commentPart", true)).first(), "jetbrains.mps.baseLanguage.structure.StatementCommentPart") && !(UncommentLine_Action.this.editorComponent.isReadOnly());
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "UncommentLine", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    {
      SNode node = event.getData(MPSDataKeys.NODE);
      if (node != null) {
      }
      this.selectedNode = node;
    }
    if (this.selectedNode == null) {
      return false;
    }
    this.editorComponent = event.getData(MPSDataKeys.EDITOR_COMPONENT);
    if (this.editorComponent == null) {
      return false;
    }
    return true;
  }

  protected void cleanup() {
    super.cleanup();
    this.selectedNode = null;
    this.editorComponent = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      SNode comment = UncommentLine_Action.this.getCommentStatement();
      SNode innerStatement = SLinkOperations.getTarget(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(comment, "commentPart", true)).first(), "jetbrains.mps.baseLanguage.structure.StatementCommentPart"), "commentedStatement", true);
      SNodeOperations.replaceWithAnother(comment, innerStatement);
      SNodeOperations.deleteNode(comment);
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "UncommentLine", t);
    }
  }

  /*package*/ SNode getCommentStatement() {
    return SNodeOperations.getAncestor(UncommentLine_Action.this.selectedNode, "jetbrains.mps.baseLanguage.structure.SingleLineComment", true, false);
  }
}
