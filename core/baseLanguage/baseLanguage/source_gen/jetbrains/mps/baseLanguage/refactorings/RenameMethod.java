package jetbrains.mps.baseLanguage.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseRefactoring;
import jetbrains.mps.lang.core.refactorings.Rename;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.project.GlobalScope;

public class RenameMethod extends BaseRefactoring {
  public RenameMethod() {
    this.addTransientParameter("newName");
    this.addTransientParameter("refactorOverriding");
    this.addTransientParameter("overriding");
  }

  public String getUserFriendlyName() {
    return "Rename Method";
  }

  public String getKeyStroke() {
    return getKeyStroke_static();
  }

  public Class getOverridenRefactoringClass() {
    return Rename.class;
  }

  public IRefactoringTarget getRefactoringTarget() {
    return new RenameMethod_Target();
  }

  public void refactor(final RefactoringContext refactoringContext) {
    SNode method = RenameUtil.getMethodDeclaration(refactoringContext.getSelectedNode());
    if (ListSequence.fromList(((List<SNode>) refactoringContext.getParameter("overriding"))).isNotEmpty() && ((Boolean) refactoringContext.getParameter("refactorOverriding"))) {
      for (SNode node : ListSequence.fromList(((List<SNode>) refactoringContext.getParameter("overriding")))) {
        SPropertyOperations.set(node, "name", ((String) refactoringContext.getParameter("newName")));
      }
    }
    SPropertyOperations.set(method, "name", ((String) refactoringContext.getParameter("newName")));
  }

  public List<SModel> getModelsToGenerate(final RefactoringContext refactoringContext) {
    return (List<SModel>) refactoringContext.getModelsFromUsages(refactoringContext.getSelectedModel().getSModel());
  }

  public SearchResults getAffectedNodes(final RefactoringContext refactoringContext) {
    SNode method = RenameUtil.getMethodDeclaration(refactoringContext.getSelectedNode());
    return (((Boolean) refactoringContext.getParameter("refactorOverriding")) == null || !(((Boolean) refactoringContext.getParameter("refactorOverriding"))) ?
      FindUtils.getSearchResults(new EmptyProgressMonitor(), method, GlobalScope.getInstance(), "jetbrains.mps.baseLanguage.findUsages.ExactMethodUsages_Finder") :
      FindUtils.getSearchResults(new EmptyProgressMonitor(), method, GlobalScope.getInstance(), "jetbrains.mps.baseLanguage.findUsages.BaseMethodUsages_Finder")
    );
  }

  public static String getKeyStroke_static() {
    return Rename.getKeyStroke_static();
  }
}
