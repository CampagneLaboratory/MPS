package jetbrains.mps.baseLanguage.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseRefactoring;
import jetbrains.mps.lang.core.refactorings.Rename;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.plugin.MethodRefactoringUtils;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class RenameMethod extends BaseRefactoring {
  public RenameMethod() {
    this.addTransientParameter("newName");
    this.addTransientParameter("refactorOverriding");
  }

  public String getUserFriendlyName() {
    return "Rename Method";
  }

  public String getKeyStroke() {
    return getKeyStroke_static();
  }

  public Class getOverridenRefactoringClass() {
    return Rename.class;
  }

  public IRefactoringTarget getRefactoringTarget() {
    return new RenameMethod_Target();
  }

  public boolean init(final RefactoringContext refactoringContext) {
    boolean result = RenameMethod.this.ask(refactoringContext, new RenameMethod_newName_Chooser(refactoringContext));
    if (!(result)) {
      return false;
    }

    final Wrappers._T<List<SNode>> overriding = new Wrappers._T<List<SNode>>();
    final Wrappers._T<SNode> methodDeclNode = new Wrappers._T<SNode>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        methodDeclNode.value = SLinkOperations.getTarget(refactoringContext.getSelectedNode(), "baseMethodDeclaration", false);
        overriding.value = MethodRefactoringUtils.findOverridingMethods(methodDeclNode.value, new EmptyProgressIndicator());
      }
    });
    if (ListSequence.fromList(overriding.value).isNotEmpty()) {
      result = RenameMethod.this.ask(refactoringContext, new RenameMethod_refactorOverriding_Chooser(refactoringContext));
      if (!(result)) {
        return false;
      }
    }

    return true;
  }

  public void refactor(final RefactoringContext refactoringContext) {
    SNode methodDeclNode = SLinkOperations.getTarget(refactoringContext.getSelectedNode(), "baseMethodDeclaration", false);
    List<SNode> overriding = MethodRefactoringUtils.findOverridingMethods(methodDeclNode, new EmptyProgressIndicator());

    SPropertyOperations.set(methodDeclNode, "name", ((String)refactoringContext.getParameter("newName")));
    for (SNode node : ListSequence.fromList(overriding)) {
      SPropertyOperations.set(node, "name", ((String)refactoringContext.getParameter("newName")));
    }
  }

  public static String getKeyStroke_static() {
    return Rename.getKeyStroke_static();
  }
}
