package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.nodeEditor.IErrorReporter;

public class check_InstanceOf_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_InstanceOf_NonTypesystemRule() {
  }

  public void applyRule(final SNode instanceOfExpression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    do {
      SNode matchedNode_83s6f5_a0 = SLinkOperations.getTarget(instanceOfExpression, "classType", true);
      {
        boolean matches_83s6f5_a0a = false;
        {
          SNode matchingNode_83s6f5_a0a = SLinkOperations.getTarget(instanceOfExpression, "classType", true);
          if (matchingNode_83s6f5_a0a != null) {
            matches_83s6f5_a0a = SModelUtil_new.isAssignableConcept(matchingNode_83s6f5_a0a.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.ClassifierType");
          }
        }
        if (matches_83s6f5_a0a) {
          if (ListSequence.fromList(SLinkOperations.getTargets(matchedNode_83s6f5_a0, "parameter", true)).isNotEmpty()) {
            {
              BaseQuickFixProvider intentionProvider = null;
              IErrorTarget errorTarget = new NodeErrorTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(matchedNode_83s6f5_a0, "parameterized type in instanceof is not allowed", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "7854098281915151107", intentionProvider, errorTarget);
            }
          }
          break;
        }
      }
    } while (false);
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.InstanceOfExpression";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
