package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.dependencies.CheckingMethod;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.dataFlow.DataflowBuilderException;
import java.util.Set;
import jetbrains.mps.lang.dataFlow.DataFlow;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.baseLanguage.behavior.LocalVariableDeclaration_Behavior;
import jetbrains.mps.baseLanguage.behavior.IVariableAssignment_Behavior;
import jetbrains.mps.dataFlow.runtime.NullableAnalysisResult;

public class DataFlowUtil {

  public DataFlowUtil() {
  }

  @CheckingMethod()
  public static void checkDataFlow(final TypeCheckingContext typeCheckingContext, @NotNull() SNode statementList) {
    try {
      checkUnreachable(typeCheckingContext, statementList);
      checkUninitializedReads(typeCheckingContext, statementList);
      checkUnusedAssignments(typeCheckingContext, statementList);
      checkUnusedVariables(typeCheckingContext, statementList);
      /*
        checkNullable(typeCheckingContext, statementList);
      */
    } catch (DataflowBuilderException e) {
      throw new RuntimeException("Building dataflow for node: " + statementList.getId() + " model: " + statementList.getModel(), e);
    }
  }

  @CheckingMethod()
  public static void checkReturns(final TypeCheckingContext typeCheckingContext, SNode statementList) {
    Set<SNode> expectedReturns = DataFlow.getExpectedReturns(statementList);
    for(SNode n : expectedReturns) {
      if (n != null) {
        SNode nodeToSelect;
        SNode sl = SNodeOperations.getAncestor(n, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
        if ((sl != null) && ListSequence.fromList(SLinkOperations.getTargets(sl, "statement", true)).isNotEmpty()) {
          SNodeOperations.getAncestor(nodeToSelect = n, "jetbrains.mps.baseLanguage.structure.Statement", true, false);
        } else
        {
          nodeToSelect = SNodeOperations.getAncestor(n, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
        }
        if (nodeToSelect != null) {
          {
            BaseIntentionProvider intentionProvider = null;
            IErrorTarget errorTarget = new NodeErrorTarget();
            typeCheckingContext.reportTypeError(nodeToSelect, "Return expected", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1223640343628", intentionProvider, errorTarget);
          }
        } else
        {
          {
            BaseIntentionProvider intentionProvider = null;
            IErrorTarget errorTarget = new NodeErrorTarget();
            typeCheckingContext.reportTypeError(n, "Return expected", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1223640343636", intentionProvider, errorTarget);
          }
        }
      }
    }
  }

  @CheckingMethod()
  private static void checkUnreachable(final TypeCheckingContext typeCheckingContext, SNode statementList) {
    Set<SNode> unreachable = DataFlow.getUnreachableNodes(statementList);
    for(SNode n : unreachable) {
      {
        BaseIntentionProvider intentionProvider = null;
        IErrorTarget errorTarget = new NodeErrorTarget();
        typeCheckingContext.reportTypeError(n, "Unreachable node", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1223640538234", intentionProvider, errorTarget);
      }
    }
  }

  @CheckingMethod()
  private static void checkUninitializedReads(final TypeCheckingContext typeCheckingContext, SNode statementList) {
    Set<SNode> uninitializedReads = DataFlow.getUninitializedReads(statementList);
    for(SNode read : uninitializedReads) {
      if (SNodeOperations.isInstanceOf(read, "jetbrains.mps.baseLanguage.structure.LocalVariableReference")) {
        SNode ref = read;
        if (!(LocalVariableDeclaration_Behavior.call_isVariableReferencedInClosures_1229352990212(SLinkOperations.getTarget(ref, "variableDeclaration", false)))) {
          {
            BaseIntentionProvider intentionProvider = null;
            IErrorTarget errorTarget = new NodeErrorTarget();
            typeCheckingContext.reportTypeError(ref, "Variable used before it is initialized", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1229353228479", intentionProvider, errorTarget);
          }
        }
      }
    }
  }

  @CheckingMethod()
  private static void checkUnusedAssignments(final TypeCheckingContext typeCheckingContext, SNode statementList) {
    Set<SNode> unusedAssignments = DataFlow.getUnusedAssignments(statementList);
    for(SNode write : unusedAssignments) {
      if (SNodeOperations.isInstanceOf(write, "jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression")) {
        SNode assignment = write;
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(assignment, "lValue", true), "jetbrains.mps.baseLanguage.structure.LocalVariableReference") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(assignment, "lValue", true), "jetbrains.mps.baseLanguage.structure.ParameterReference")) {
          {
            BaseIntentionProvider intentionProvider = null;
            intentionProvider = new BaseIntentionProvider("r:00000000-0000-4000-0000-011c895902c1(jetbrains.mps.baseLanguage.constraints).RemoveUnusedAssignment_QuickFix");
            IErrorTarget errorTarget = new NodeErrorTarget();
            typeCheckingContext.reportWarning(assignment, "Unused assignment", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1223642282236", intentionProvider, errorTarget);
          }
        }
      }
      if (SNodeOperations.isInstanceOf(write, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration")) {
        SNode variableAssignment = write;
        if (IVariableAssignment_Behavior.call_isCanBeUnused_1223985713603(variableAssignment)) {
          {
            BaseIntentionProvider intentionProvider = null;
            IErrorTarget errorTarget = new NodeErrorTarget();
            typeCheckingContext.reportWarning(write, "Unused parameter", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1225278748067", intentionProvider, errorTarget);
          }
        }
      }
      if (SNodeOperations.isInstanceOf(write, "jetbrains.mps.baseLanguage.structure.IVariableAssignment")) {
        SNode variableAssignment = write;
        if (IVariableAssignment_Behavior.call_isCanBeUnused_1223985713603(variableAssignment)) {
          {
            BaseIntentionProvider intentionProvider = null;
            IErrorTarget errorTarget = new NodeErrorTarget();
            typeCheckingContext.reportWarning(write, "Unused assignment", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1225278681706", intentionProvider, errorTarget);
          }
        }
      }
    }
  }

  @CheckingMethod()
  public static void checkUnusedVariables(final TypeCheckingContext typeCheckingContext, SNode statementList) {
    Set<SNode> unusedVariables = DataFlow.getUnusedVariables(statementList);
    for(SNode var : unusedVariables) {
      if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(var), "jetbrains.mps.baseLanguage.structure.CatchClause")) && SNodeOperations.getAncestor(var, "jetbrains.mps.lang.quotation.structure.Quotation", false, false) == null) {
        {
          BaseIntentionProvider intentionProvider = null;
          IErrorTarget errorTarget = new NodeErrorTarget();
          typeCheckingContext.reportWarning(var, "Unused variable", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1223642399966", intentionProvider, errorTarget);
        }
      }
    }
  }

  @CheckingMethod()
  public static void checkNullable(final TypeCheckingContext typeCheckingContext, SNode statementList) {
    NullableAnalysisResult result = new NullableAnalysisResult(statementList);
    for(SNode problemNode : ListSequence.fromList(result.checkNodes(statementList))) {
      if (SNodeOperations.isInstanceOf(problemNode, "jetbrains.mps.baseLanguage.structure.AssignmentExpression")) {
        {
          BaseIntentionProvider intentionProvider = null;
          IErrorTarget errorTarget = new NodeErrorTarget();
          typeCheckingContext.reportWarning(problemNode, "Assign nullable value to not nullable.", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1235234110878", intentionProvider, errorTarget);
        }
      } else if (SNodeOperations.isInstanceOf(problemNode, "jetbrains.mps.baseLanguage.structure.Expression")) {
        {
          BaseIntentionProvider intentionProvider = null;
          IErrorTarget errorTarget = new NodeErrorTarget();
          typeCheckingContext.reportWarning(problemNode, "Expression may be null.", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1235234157876", intentionProvider, errorTarget);
        }
      }
    }
  }

}
