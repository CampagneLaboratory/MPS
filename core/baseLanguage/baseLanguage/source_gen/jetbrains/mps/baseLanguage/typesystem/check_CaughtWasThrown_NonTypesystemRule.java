package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.baseLanguage.behavior.StatementList_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.nodeEditor.IErrorReporter;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public class check_CaughtWasThrown_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_CaughtWasThrown_NonTypesystemRule() {
  }

  public void applyRule(final SNode catchClause, final TypeCheckingContext typeCheckingContext) {
    final SNode caughtType = SLinkOperations.getTarget(SLinkOperations.getTarget(catchClause, "throwable", true), "type", true);
    if (SNodeOperations.isInstanceOf(caughtType, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
      SNode caughtClassifier = SLinkOperations.getTarget(SNodeOperations.cast(caughtType, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false);
      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(caughtType, new check_CaughtWasThrown_NonTypesystemRule.QuotationClass_1935_0().createNode(typeCheckingContext)) || TypeChecker.getInstance().getSubtypingManager().isSubtype(caughtType, new check_CaughtWasThrown_NonTypesystemRule.QuotationClass_1935_1().createNode(typeCheckingContext)) || caughtClassifier == SNodeOperations.getNode("f:java_stub#java.lang(java.lang@java_stub)", "~Exception") || caughtClassifier == SNodeOperations.getNode("f:java_stub#java.lang(java.lang@java_stub)", "~Throwable")) {
        // ignore 
      } else {
        Set<SNode> thrown = SetSequence.fromSet(new HashSet<SNode>());
        do {
          SNode matchedNode_5614_0 = SNodeOperations.getParent(catchClause);
          {
            boolean matches_5614_0 = false;
            {
              SNode matchingNode_5614_0 = SNodeOperations.getParent(catchClause);
              if (matchingNode_5614_0 != null) {
                matches_5614_0 = SModelUtil_new.isAssignableConcept(matchingNode_5614_0.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.TryCatchStatement");
              }
            }
            if (matches_5614_0) {
              thrown = StatementList_Behavior.call_uncaughtThrowables_3331512479731115649(SLinkOperations.getTarget(matchedNode_5614_0, "body", true), false);
              break;
            }
          }
          {
            boolean matches_5614_1 = false;
            {
              SNode matchingNode_5614_1 = SNodeOperations.getParent(catchClause);
              if (matchingNode_5614_1 != null) {
                matches_5614_1 = SModelUtil_new.isAssignableConcept(matchingNode_5614_1.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.TryStatement");
              }
            }
            if (matches_5614_1) {
              thrown = StatementList_Behavior.call_uncaughtThrowables_3331512479731115649(SLinkOperations.getTarget(matchedNode_5614_0, "body", true), false);
              break;
            }
          }
        } while(false);

        if (!(SetSequence.fromSet(thrown).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode t) {
            return TypeChecker.getInstance().getSubtypingManager().isSubtype(new check_CaughtWasThrown_NonTypesystemRule.QuotationClass_1935_2().createNode(t, typeCheckingContext), caughtType);
          }
        }))) {
          {
            BaseIntentionProvider intentionProvider = null;
            IErrorTarget errorTarget = new NodeErrorTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(catchClause, "throwable", true), "Caught exception " + caughtType + " is never thrown in the corresponding try block", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "8512491756795014519", intentionProvider, errorTarget);
          }
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.CatchClause";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

  public static class QuotationClass_1935_0 {
    public QuotationClass_1935_0() {
    }

    public SNode createNode(final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1935_0 = null;
      {
        quotedNode_1935_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_1935_0 = quotedNode_1935_0;
        quotedNode1_1935_0.addReference(SReference.create("classifier", quotedNode1_1935_0, SModelReference.fromString("f:java_stub#java.lang(java.lang@java_stub)"), SNodeId.fromString("~RuntimeException")));
        result = quotedNode1_1935_0;
      }
      return result;
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1935_0 = null;
      {
        quotedNode_1935_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_1935_0 = quotedNode_1935_0;
        quotedNode1_1935_0.addReference(SReference.create("classifier", quotedNode1_1935_0, SModelReference.fromString("f:java_stub#java.lang(java.lang@java_stub)"), SNodeId.fromString("~RuntimeException")));
        result = quotedNode1_1935_0;
      }
      return result;
    }
  }

  public static class QuotationClass_1935_1 {
    public QuotationClass_1935_1() {
    }

    public SNode createNode(final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1935_1 = null;
      {
        quotedNode_1935_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_1935_1 = quotedNode_1935_1;
        quotedNode1_1935_1.addReference(SReference.create("classifier", quotedNode1_1935_1, SModelReference.fromString("f:java_stub#java.lang(java.lang@java_stub)"), SNodeId.fromString("~Error")));
        result = quotedNode1_1935_1;
      }
      return result;
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1935_1 = null;
      {
        quotedNode_1935_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_1935_1 = quotedNode_1935_1;
        quotedNode1_1935_1.addReference(SReference.create("classifier", quotedNode1_1935_1, SModelReference.fromString("f:java_stub#java.lang(java.lang@java_stub)"), SNodeId.fromString("~Error")));
        result = quotedNode1_1935_1;
      }
      return result;
    }
  }

  public static class QuotationClass_1935_2 {
    public QuotationClass_1935_2() {
    }

    public SNode createNode(Object parameter_1935_0, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1935_2 = null;
      {
        quotedNode_1935_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_1935_2 = quotedNode_1935_2;
        quotedNode1_1935_2.setReferent("classifier", (SNode) parameter_1935_0);
        result = quotedNode1_1935_2;
      }
      return result;
    }

    public SNode createNode(Object parameter_1935_0) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1935_2 = null;
      {
        quotedNode_1935_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_1935_2 = quotedNode_1935_2;
        quotedNode1_1935_2.setReferent("classifier", (SNode) parameter_1935_0);
        result = quotedNode1_1935_2;
      }
      return result;
    }
  }
}
