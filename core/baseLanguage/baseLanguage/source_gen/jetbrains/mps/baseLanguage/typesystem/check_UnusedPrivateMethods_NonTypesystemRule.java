package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.nodeEditor.IErrorReporter;

public class check_UnusedPrivateMethods_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_UnusedPrivateMethods_NonTypesystemRule() {
  }

  public void applyRule(final SNode classifierMember, final TypeCheckingContext typeCheckingContext) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(classifierMember, "visibility", true), "jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
      do {
        final SNode matchedNode_6708_0 = classifierMember;
        {
          boolean matches_6708_0 = false;
          {
            SNode matchingNode_6708_0 = classifierMember;
            if (matchingNode_6708_0 != null) {
              matches_6708_0 = SModelUtil_new.isAssignableConcept(matchingNode_6708_0.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
            }
          }
          if (matches_6708_0) {
            {
              SNode topClassifier = SNodeOperations.getAncestor(matchedNode_6708_0, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
              if (topClassifier != null) {
                while (SNodeOperations.getAncestor(topClassifier, "jetbrains.mps.baseLanguage.structure.Classifier", false, false) != null) {
                  topClassifier = SNodeOperations.getAncestor(topClassifier, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
                }
                if (!(ListSequence.fromList(SNodeOperations.getDescendants(topClassifier, "jetbrains.mps.baseLanguage.structure.IMethodCall", false, new String[]{})).any(new IWhereFilter<SNode>() {
                  public boolean accept(SNode call) {
                    return SLinkOperations.getTarget(call, "baseMethodDeclaration", false) == matchedNode_6708_0;
                  }
                }))) {
                  {
                    BaseIntentionProvider intentionProvider = null;
                    IErrorTarget errorTarget = new NodeErrorTarget();
                    IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(matchedNode_6708_0, "Private method " + matchedNode_6708_0 + " is never used", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "8101436443850399677", intentionProvider, errorTarget);
                  }
                }
              }
            }
            break;
          }
        }
      } while(false);
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.ClassifierMember";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
