package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Set;
import java.util.HashSet;
import java.util.ArrayList;

public class ResolveUtil {

  public ResolveUtil() {
  }

  public static List<SNode> parameterTypes(SNode method, SNode instanceType, SNode classifier) {
    List<SNode> result = new LinkedList<SNode>();
    boolean containsVars = false;
    for(SNode parameter : SLinkOperations.getTargets(method, "parameter", true)) {
      if (ListSequence.fromList(SNodeOperations.getDescendants(parameter, "jetbrains.mps.baseLanguage.structure.TypeVariableReference", true)).isNotEmpty()) {
        containsVars = true;
      }
      result.add(SNodeOperations.copyNode(SLinkOperations.getTarget(parameter, "type", true)));
    }
    if (!(containsVars)) {
      return result;
    }
    Set<SNode> frontier = new HashSet<SNode>();
    Set<SNode> newFrontier = new HashSet<SNode>();
    SNode concreteMethodClassifierType = null;
    frontier.add(instanceType);
outer:
    while (!(frontier.isEmpty())) {
      for(SNode currentType : frontier) {
        SNode currentClassifier = SLinkOperations.getTarget(currentType, "classifier", false);
        if (currentClassifier == classifier) {
          concreteMethodClassifierType = currentType;
          break outer;
        }
        if (SNodeOperations.isInstanceOf(currentClassifier, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
          SNode classConcept = currentClassifier;
          newFrontier.add(getConcreteClassifierType(SLinkOperations.getTarget(classConcept, "superclass", true), currentType));
          for(SNode intfc : SLinkOperations.getTargets(classConcept, "implementedInterface", true)) {
            newFrontier.add(getConcreteClassifierType(intfc, currentType));
          }
        }
        if (SNodeOperations.isInstanceOf(currentClassifier, "jetbrains.mps.baseLanguage.structure.Interface")) {
          SNode interfaceConcept = currentClassifier;
          for(SNode intfc : SLinkOperations.getTargets(interfaceConcept, "extendedInterface", true)) {
            newFrontier.add(getConcreteClassifierType(intfc, currentType));
          }
        }
      }
      frontier = newFrontier;
      newFrontier = new HashSet<SNode>();
    }
    if (concreteMethodClassifierType == null) {
      return result;
    }
    List<SNode> typeParameters = ListSequence.fromList(SLinkOperations.getTargets(concreteMethodClassifierType, "parameter", true)).toListSequence();
    for(SNode paramType : new ArrayList<SNode>(result)) {
      for(SNode typeVar : SNodeOperations.getDescendants(paramType, "jetbrains.mps.baseLanguage.structure.TypeVariableReference", true)) {
        SNode replacement = SNodeOperations.copyNode(ListSequence.fromList(typeParameters).getElement(SNodeOperations.getIndexInParent(SLinkOperations.getTarget(typeVar, "typeVariableDeclaration", false))));
        if ((SNodeOperations.getParent(typeVar) == null)) {
          result.add(result.indexOf(typeVar), replacement);
          result.remove(typeVar);
        } else
        {
          SNodeOperations.replaceWithAnother(typeVar, replacement);
        }
      }
    }
    return result;
  }

  public static SNode getConcreteClassifierType(SNode typeWithVars, SNode classifierSubtype) {
    SNode result = SNodeOperations.copyNode(typeWithVars);
    List<SNode> varRefs = SNodeOperations.getDescendants(result, "jetbrains.mps.baseLanguage.structure.TypeVariableReference", false);
    List<SNode> params = ListSequence.fromList(SLinkOperations.getTargets(classifierSubtype, "parameter", true)).toListSequence();
    for(SNode varRef : varRefs) {
      SNodeOperations.replaceWithAnother(varRef, SNodeOperations.copyNode(ListSequence.fromList(params).getElement(SNodeOperations.getIndexInParent(SLinkOperations.getTarget(varRef, "typeVariableDeclaration", false)))));
    }
    return result;
  }

}
