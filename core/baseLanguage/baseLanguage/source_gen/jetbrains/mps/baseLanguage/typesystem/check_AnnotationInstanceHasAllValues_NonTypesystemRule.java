package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.nodeEditor.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_AnnotationInstanceHasAllValues_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_AnnotationInstanceHasAllValues_NonTypesystemRule() {
  }

  public void applyRule(final SNode annotationInstance, final TypeCheckingContext typeCheckingContext) {
    SNode annotation = SLinkOperations.getTarget(annotationInstance, "annotation", false);
    for (SNode annotationMethod : SLinkOperations.getTargets(annotation, "method", true)) {
      if ((SLinkOperations.getTarget(annotationMethod, "defaultValue", true) != null)) {
        continue;
      }
      boolean found = false;
      for (SNode annotationInstanceValue : SLinkOperations.getTargets(annotationInstance, "value", true)) {
        if (SLinkOperations.getTarget(annotationInstanceValue, "key", false) == annotationMethod) {
          found = true;
          break;
        }
      }
      if (!(found)) {
        {
          BaseIntentionProvider intentionProvider = null;
          IErrorTarget errorTarget = new NodeErrorTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(annotationInstance, "'" + SPropertyOperations.getString(annotationMethod, "name") + "' missing though required", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "6624237184121162632", intentionProvider, errorTarget);
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.AnnotationInstance";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
