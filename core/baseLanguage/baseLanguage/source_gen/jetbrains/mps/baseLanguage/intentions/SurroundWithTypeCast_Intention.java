package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.SurroundWithIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.baseLanguage.actions.ExpectedType_FactoryUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class SurroundWithTypeCast_Intention extends SurroundWithIntention {
  public SurroundWithTypeCast_Intention() {
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(SNode p0, EditorContext p1) {
    return "(Type) expr";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return editorContext.getSelectedNodes().size() == 1;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode expectedType = ExpectedType_FactoryUtil.createExpectedType(node);
    SNode castExpression = new _Quotations.QuotationClass_4().createNode(SNodeOperations.copyNode(node), expectedType);
    SNodeOperations.replaceWithAnother(node, castExpression);
    if (expectedType != null) {
      editorContext.select(castExpression);
    } else {
      editorContext.selectAndSetCaret(SLinkOperations.getTarget(SNodeOperations.cast(castExpression, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression"), "expression", true), 2);
    }
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.intentions";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.Expression";
  }
}
