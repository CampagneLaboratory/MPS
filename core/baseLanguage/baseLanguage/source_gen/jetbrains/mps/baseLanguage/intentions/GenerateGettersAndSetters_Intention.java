package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.GenerateIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.IntentionContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class GenerateGettersAndSetters_Intention extends GenerateIntention implements Intention {
  public GenerateGettersAndSetters_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ClassConcept";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Getters and Setters";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    List<SNode> fields = SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "field", true);
    if (ListSequence.fromList(fields).isEmpty()) {
      return false;
    }
    boolean allGettersImplemented = true;
    for (SNode fieldDeclaration : fields) {
      boolean hasCurrentFieldGetter = false;
      final String getterName = GenerateGettersAndSettersUtil.getFieldGetterName(fieldDeclaration);
      if (ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "method", true)).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return getterName.equals(SPropertyOperations.getString(it, "name")) && ListSequence.fromList(SLinkOperations.getTargets(it, "parameter", true)).isEmpty();
        }
      })) {
        hasCurrentFieldGetter = true;
      }
      if (!(hasCurrentFieldGetter)) {
        allGettersImplemented = false;
        break;
      }
    }
    if (!(allGettersImplemented)) {
      return true;
    } else {
      boolean hasAllSetters = true;
      for (SNode field : fields) {
        final String setterName = GenerateGettersAndSettersUtil.getFieldSetterName(field);
        boolean hasCurrentFieldSetter = false;
        if (ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "method", true)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return setterName.equals(SPropertyOperations.getString(it, "name")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType");
          }
        })) {
          hasCurrentFieldSetter = true;
        }
        if (!(hasCurrentFieldSetter)) {
          hasAllSetters = false;
          break;
        }
      }
      return !(hasAllSetters);
    }
  }

  public void execute(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {
    SNode classConcept = SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept");
    final SNode thisExpression = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ThisExpression", null);
    SNode lastAdded = null;
    for (final SNode field : ((List<SNode>) intentionContext.getContextParametersMap().get("selectedFields"))) {
      final String getterName = GenerateGettersAndSettersUtil.getFieldGetterName(field);
      final Wrappers._boolean getterIsAbsent = new Wrappers._boolean(true);
      ListSequence.fromList(SLinkOperations.getTargets(classConcept, "method", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          if (getterName.equals(SPropertyOperations.getString(it, "name")) && ListSequence.fromList(SLinkOperations.getTargets(it, "parameter", true)).isEmpty()) {
            getterIsAbsent.value = false;
          }
        }
      });
      if (!(getterIsAbsent.value)) {
        continue;
      }
      lastAdded = ListSequence.fromList(SLinkOperations.getTargets(classConcept, "method", true)).addElement(new GenerateGettersAndSetters_Intention.QuotationClass_7565_0().createNode(SLinkOperations.getTarget(field, "type", true), thisExpression, field, getterName));

      final String setterName = GenerateGettersAndSettersUtil.getFieldSetterName(field);
      final Wrappers._boolean setterIsAbsent = new Wrappers._boolean(true);
      ListSequence.fromList(SLinkOperations.getTargets(classConcept, "method", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode method) {
          if (setterName.equals(SPropertyOperations.getString(method, "name")) && ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).count() == 1) {
            setterIsAbsent.value = false;
          }
        }
      });
      if (!(setterIsAbsent.value)) {
        continue;
      }
      lastAdded = ListSequence.fromList(SLinkOperations.getTargets(classConcept, "method", true)).addElement(new GenerateGettersAndSetters_Intention.QuotationClass_7565_1().createNode(thisExpression, field, SLinkOperations.getTarget(field, "type", true), SPropertyOperations.getString(field, "name"), setterName));
    }
    if (lastAdded != null) {
      editorContext.select(lastAdded);
    }
  }

  public boolean executeUI(final SNode node, final EditorContext editorContext, IntentionContext intentionContext) {
    SelectFieldsDialog selectFieldsDialog = new SelectFieldsDialog(editorContext, editorContext.getOperationContext().getMainFrame(), node);
    selectFieldsDialog.showDialog();
    intentionContext.getContextParametersMap().put("selectedFields", selectFieldsDialog.getSelectedFields());
    return selectFieldsDialog.getAnswer();
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.intentions";
  }

  public static class QuotationClass_7565_0 {
    public QuotationClass_7565_0() {
    }

    public SNode createNode(Object parameter_7904_0, Object parameter_7904_1, Object parameter_7904_2, Object parameter_7904_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_7904_0 = null;
      SNode quotedNode_7904_1 = null;
      SNode quotedNode_7904_2 = null;
      SNode quotedNode_7904_3 = null;
      SNode quotedNode_7904_4 = null;
      SNode quotedNode_7904_5 = null;
      SNode quotedNode_7904_6 = null;
      SNode quotedNode_7904_7 = null;
      {
        quotedNode_7904_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_7904_0 = quotedNode_7904_0;
        quotedNode1_7904_0.setProperty("name", (String) parameter_7904_3);
        {
          quotedNode_7904_1 = (SNode) parameter_7904_0;
          SNode quotedNode1_99;
          if (_parameterValues_129834374.contains(quotedNode_7904_1)) {
            quotedNode1_99 = CopyUtil.copy(quotedNode_7904_1);
          } else {
            _parameterValues_129834374.add(quotedNode_7904_1);
            quotedNode1_99 = quotedNode_7904_1;
          }
          if (quotedNode1_99 != null) {
            quotedNode_7904_0.addChild("returnType", HUtil.copyIfNecessary(quotedNode1_99));
          }
        }
        {
          quotedNode_7904_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_7904_1 = quotedNode_7904_2;
          quotedNode_7904_0.addChild("visibility", quotedNode1_7904_1);
        }
        {
          quotedNode_7904_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_7904_2 = quotedNode_7904_3;
          {
            quotedNode_7904_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
            SNode quotedNode1_7904_3 = quotedNode_7904_4;
            {
              quotedNode_7904_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
              SNode quotedNode1_7904_4 = quotedNode_7904_5;
              {
                quotedNode_7904_6 = (SNode) parameter_7904_1;
                SNode quotedNode1_100;
                if (_parameterValues_129834374.contains(quotedNode_7904_6)) {
                  quotedNode1_100 = CopyUtil.copy(quotedNode_7904_6);
                } else {
                  _parameterValues_129834374.add(quotedNode_7904_6);
                  quotedNode1_100 = quotedNode_7904_6;
                }
                if (quotedNode1_100 != null) {
                  quotedNode_7904_5.addChild("operand", HUtil.copyIfNecessary(quotedNode1_100));
                }
              }
              {
                quotedNode_7904_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
                SNode quotedNode1_7904_5 = quotedNode_7904_7;
                quotedNode1_7904_5.setReferent("fieldDeclaration", (SNode) parameter_7904_2);
                quotedNode_7904_5.addChild("operation", quotedNode1_7904_5);
              }
              quotedNode_7904_4.addChild("expression", quotedNode1_7904_4);
            }
            quotedNode_7904_3.addChild("statement", quotedNode1_7904_3);
          }
          quotedNode_7904_0.addChild("body", quotedNode1_7904_2);
        }
        result = quotedNode1_7904_0;
      }
      return result;
    }
  }

  public static class QuotationClass_7565_1 {
    public QuotationClass_7565_1() {
    }

    public SNode createNode(Object parameter_7904_4, Object parameter_7904_5, Object parameter_7904_6, Object parameter_7904_7, Object parameter_7904_8) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_7904_8 = null;
      SNode quotedNode_7904_9 = null;
      SNode quotedNode_7904_10 = null;
      SNode quotedNode_7904_11 = null;
      SNode quotedNode_7904_12 = null;
      SNode quotedNode_7904_13 = null;
      SNode quotedNode_7904_14 = null;
      SNode quotedNode_7904_15 = null;
      SNode quotedNode_7904_16 = null;
      SNode quotedNode_7904_17 = null;
      SNode quotedNode_7904_18 = null;
      SNode quotedNode_7904_19 = null;
      {
        quotedNode_7904_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_7904_6 = quotedNode_7904_8;
        quotedNode1_7904_6.setProperty("name", (String) parameter_7904_8);
        {
          quotedNode_7904_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VoidType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_7904_7 = quotedNode_7904_9;
          quotedNode_7904_8.addChild("returnType", quotedNode1_7904_7);
        }
        {
          quotedNode_7904_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_7904_8 = quotedNode_7904_10;
          quotedNode_7904_8.addChild("visibility", quotedNode1_7904_8);
        }
        {
          quotedNode_7904_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_7904_9 = quotedNode_7904_11;
          {
            quotedNode_7904_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
            SNode quotedNode1_7904_10 = quotedNode_7904_13;
            {
              quotedNode_7904_15 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
              SNode quotedNode1_7904_11 = quotedNode_7904_15;
              {
                quotedNode_7904_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterReference", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
                SNode quotedNode1_7904_12 = quotedNode_7904_16;
                quotedNode_7904_15.addChild("rValue", quotedNode1_7904_12);
              }
              {
                quotedNode_7904_17 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
                SNode quotedNode1_7904_13 = quotedNode_7904_17;
                {
                  quotedNode_7904_18 = (SNode) parameter_7904_4;
                  SNode quotedNode1_101;
                  if (_parameterValues_129834374.contains(quotedNode_7904_18)) {
                    quotedNode1_101 = CopyUtil.copy(quotedNode_7904_18);
                  } else {
                    _parameterValues_129834374.add(quotedNode_7904_18);
                    quotedNode1_101 = quotedNode_7904_18;
                  }
                  if (quotedNode1_101 != null) {
                    quotedNode_7904_17.addChild("operand", HUtil.copyIfNecessary(quotedNode1_101));
                  }
                }
                {
                  quotedNode_7904_19 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
                  SNode quotedNode1_7904_14 = quotedNode_7904_19;
                  quotedNode1_7904_14.setReferent("fieldDeclaration", (SNode) parameter_7904_5);
                  quotedNode_7904_17.addChild("operation", quotedNode1_7904_14);
                }
                quotedNode_7904_15.addChild("lValue", quotedNode1_7904_13);
              }
              quotedNode_7904_13.addChild("expression", quotedNode1_7904_11);
            }
            quotedNode_7904_11.addChild("statement", quotedNode1_7904_10);
          }
          quotedNode_7904_8.addChild("body", quotedNode1_7904_9);
        }
        {
          quotedNode_7904_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_7904_15 = quotedNode_7904_12;
          quotedNode1_7904_15.setProperty("name", (String) parameter_7904_7);
          {
            quotedNode_7904_14 = (SNode) parameter_7904_6;
            SNode quotedNode1_102;
            if (_parameterValues_129834374.contains(quotedNode_7904_14)) {
              quotedNode1_102 = CopyUtil.copy(quotedNode_7904_14);
            } else {
              _parameterValues_129834374.add(quotedNode_7904_14);
              quotedNode1_102 = quotedNode_7904_14;
            }
            if (quotedNode1_102 != null) {
              quotedNode_7904_12.addChild("type", HUtil.copyIfNecessary(quotedNode1_102));
            }
          }
          quotedNode_7904_8.addChild("parameter", quotedNode1_7904_15);
        }
        result = quotedNode1_7904_6;
      }
      quotedNode_7904_16.setReferent("variableDeclaration", quotedNode_7904_12);
      return result;
    }
  }
}
