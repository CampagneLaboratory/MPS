package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;

public class InvertIfCondition_Intention extends BaseIntention {

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IfStatement";
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Invert If condition";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    // Invert condition
    SNode condition = SLinkOperations.getTarget(node, "condition", true);
    if ((condition != null)) {
      if (SNodeOperations.isInstanceOf(condition, "jetbrains.mps.baseLanguage.structure.NotExpression")) {
        condition = SLinkOperations.getTarget(condition, "expression", true);
      } else {
        SNode newCondition = null;
        if (SNodeOperations.isInstanceOf(condition, "jetbrains.mps.baseLanguage.structure.EqualsExpression")) {
          newCondition = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null);
        } else
        if (SNodeOperations.isInstanceOf(condition, "jetbrains.mps.baseLanguage.structure.NotEqualsExpression")) {
          newCondition = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EqualsExpression", null);
        } else
        if (SNodeOperations.isInstanceOf(condition, "jetbrains.mps.baseLanguage.structure.GreaterThanExpression")) {
          newCondition = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression", null);
        } else
        if (SNodeOperations.isInstanceOf(condition, "jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression")) {
          newCondition = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanExpression", null);
        } else if (SNodeOperations.isInstanceOf(condition, "jetbrains.mps.baseLanguage.structure.LessThanExpression")) {
          newCondition = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression", null);
        } else
        if (SNodeOperations.isInstanceOf(condition, "jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression")) {
          newCondition = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.GreaterThanExpression", null);
        }
        if (newCondition != null) {
          SLinkOperations.setTarget(newCondition, "leftExpression", SLinkOperations.getTarget(condition, "leftExpression", true), true);
          SLinkOperations.setTarget(newCondition, "rightExpression", SLinkOperations.getTarget(condition, "rightExpression", true), true);
          condition = newCondition;
        } else {
          SNode notExpression = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NotExpression", null);
          SLinkOperations.setTarget(notExpression, "expression", condition, true);
          condition = notExpression;
        }
      }
      SLinkOperations.setTarget(node, "condition", condition, true);
    }
    // Flip ifTrue and ifFalse
    SNode ifTrue = SLinkOperations.getTarget(node, "ifTrue", true);
    SNode ifFalse = SLinkOperations.getTarget(node, "ifFalseStatement", true);
    SNode newIfTrue;
    SNode newIfFalse;
    // Set new ifFalse
    if (SLinkOperations.getCount(ifTrue, "statement") == 0) {
      newIfFalse = null;
    } else
    if (SLinkOperations.getCount(ifTrue, "statement") == 1 && SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getTargets(ifTrue, "statement", true)).first(), "jetbrains.mps.baseLanguage.structure.IfStatement")) {
      newIfFalse = ListSequence.fromList(SLinkOperations.getTargets(ifTrue, "statement", true)).first();
    } else {
      newIfFalse = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.BlockStatement", null);
      SLinkOperations.setTarget(newIfFalse, "statements", ifTrue, true);
    }
    // Set new ifTrue
    if (SNodeOperations.isInstanceOf(ifFalse, "jetbrains.mps.baseLanguage.structure.BlockStatement")) {
      newIfTrue = SLinkOperations.getTarget(ifFalse, "statements", true);
    } else {
      newIfTrue = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList", null);
      if (ifFalse != null) {
        SLinkOperations.addChild(newIfTrue, "statement", ifFalse);
      }
    }
    SLinkOperations.setTarget(node, "ifTrue", newIfTrue, true);
    SLinkOperations.setTarget(node, "ifFalseStatement", newIfFalse, true);
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.intentions";
  }

}
