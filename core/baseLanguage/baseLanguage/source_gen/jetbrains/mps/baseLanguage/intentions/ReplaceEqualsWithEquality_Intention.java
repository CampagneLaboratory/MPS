package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;

public class ReplaceEqualsWithEquality_Intention extends BaseIntention implements Intention {

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.InstanceMethodCall";
  }

  public boolean isErrorIntention() {
    return false;
  }

  public String getDescription(SNode node, EditorContext editorContext) {
    return "Replace equals with equality";
  }

  public boolean isApplicable(SNode node, EditorContext editorContext) {
    if(SLinkOperations.getTarget(node, "baseMethodDeclaration", false) == null) {
      return false;
    }
    if(SPropertyOperations.getString(SLinkOperations.getTarget(node, "baseMethodDeclaration", false), "name") == null) {
      return false;
    }
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, "baseMethodDeclaration", false), "name").equals("equals") && SLinkOperations.getCount(SLinkOperations.getTarget(node, "baseMethodDeclaration", false), "parameter") == 1;
  }

  public void execute(SNode node, EditorContext editorContext) {
    SNode leftExpr = SLinkOperations.getTarget(node, "instance", true);
    SNode rightExpression = SequenceOperations.getFirst(SLinkOperations.getTargets(node, "actualArgument", true));
    SNode equalsExpression = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EqualsExpression", null);
    SLinkOperations.setTarget(equalsExpression, "leftExpression", leftExpr, true);
    SLinkOperations.setTarget(equalsExpression, "rightExpression", rightExpression, true);
    SNodeOperations.replaceWithAnother(node, equalsExpression);
  }

}
