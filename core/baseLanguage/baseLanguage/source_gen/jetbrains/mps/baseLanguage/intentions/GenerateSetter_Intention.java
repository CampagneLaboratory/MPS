package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.GenerateIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class GenerateSetter_Intention extends GenerateIntention {
  public GenerateSetter_Intention() {
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Setter";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    SNode classConcept = SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept");
    List<SNode> fields = SLinkOperations.getTargets(classConcept, "field", true);
    boolean hasAllSetters = true;
    for (SNode field : fields) {
      final String setterName = "set" + NameUtil.capitalize(SPropertyOperations.getString(field, "name"));
      final Wrappers._boolean hasCurrentFieldSetter = new Wrappers._boolean(false);
      ListSequence.fromList(SLinkOperations.getTargets(classConcept, "method", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode method) {
          if (SPropertyOperations.getString(method, "name").equals(setterName)) {
            hasCurrentFieldSetter.value = true;
          }
        }
      });
      if (!(hasCurrentFieldSetter.value)) {
        hasAllSetters = false;
      }
    }
    return !(hasAllSetters);
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode classConcept = SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept");
    List<SNode> fields = SLinkOperations.getTargets(classConcept, "field", true);
    if (ListSequence.fromList(fields).isEmpty()) {
      return;
    }
    for (SNode field : fields) {
      final String setterName = "set" + NameUtil.capitalize(SPropertyOperations.getString(field, "name"));
      final Wrappers._boolean setterIsAbsent = new Wrappers._boolean(true);
      ListSequence.fromList(SLinkOperations.getTargets(classConcept, "method", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode method) {
          if (SPropertyOperations.getString(method, "name").equals(setterName) && ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).count() == 1) {
            setterIsAbsent.value = false;
          }
        }
      });
      if (!(setterIsAbsent.value)) {
        continue;
      }
      SNode setter = SLinkOperations.addNewChild(classConcept, "method", "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
      SPropertyOperations.set(setter, "name", setterName);
      SLinkOperations.setNewChild(setter, "returnType", "jetbrains.mps.baseLanguage.structure.VoidType");
      SNode parameterDeclaration = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null);
      SLinkOperations.setTarget(parameterDeclaration, "type", SNodeOperations.copyNode(SLinkOperations.getTarget(field, "type", true)), true);
      SPropertyOperations.set(parameterDeclaration, "name", SPropertyOperations.getString(field, "name"));
      SLinkOperations.addChild(setter, "parameter", parameterDeclaration);
      SLinkOperations.setNewChild(setter, "body", "jetbrains.mps.baseLanguage.structure.StatementList");
      SNode expressionStatement = SLinkOperations.addNewChild(SLinkOperations.getTarget(setter, "body", true), "statement", "jetbrains.mps.baseLanguage.structure.ExpressionStatement");
      SNode assignmentExpression = SLinkOperations.setNewChild(expressionStatement, "expression", "jetbrains.mps.baseLanguage.structure.AssignmentExpression");
      SNode dotExpression = SLinkOperations.setNewChild(assignmentExpression, "lValue", "jetbrains.mps.baseLanguage.structure.DotExpression");
      SLinkOperations.setNewChild(dotExpression, "operand", "jetbrains.mps.baseLanguage.structure.ThisExpression");
      SNode fieldRef = SLinkOperations.setNewChild(dotExpression, "operation", "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation");
      SLinkOperations.setTarget(fieldRef, "fieldDeclaration", field, false);
      SNode parameterReference = SLinkOperations.setNewChild(assignmentExpression, "rValue", "jetbrains.mps.baseLanguage.structure.ParameterReference");
      SLinkOperations.setTarget(parameterReference, "variableDeclaration", parameterDeclaration, false);
    }
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.intentions";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ClassConcept";
  }
}
