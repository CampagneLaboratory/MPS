package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;

public class AddRemoveStaticMethodModifier_Intention extends BaseIntention implements Intention {

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration";
  }

  public boolean isErrorIntention() {
    return false;
  }

  public String getDescription(SNode node, EditorContext editorContext) {
    return (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration") ?
      "Remove static modifier" :
      "Add static modifier"
    );
  }

  public boolean isApplicable(SNode node, EditorContext editorContext) {
    if (SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false) == null) {
      return false;
    }
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"))) {
      return false;
    }
    {
      ICursor<SNode> _zCursor2 = CursorFactory.createCursor(SequenceOperations.where(SNodeOperations.getDescendants(node, null, false), new zPredicate5(AddRemoveStaticMethodModifier_Intention.this, null)));
      try {
        while (_zCursor2.moveToNext()) {
          SNode variableReference = _zCursor2.getCurrent();
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(variableReference, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
            return false;
          }
        }
      } finally {
        _zCursor2.release();
      }
    }
    return true;
  }

  public void execute(SNode node, EditorContext editorContext) {
    SNode classConcept = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
    SNode method;
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
      method = SLinkOperations.addNewChild(classConcept, "method", "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    } else {
      method = SLinkOperations.addNewChild(classConcept, "staticMethod", "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
    }
    SLinkOperations.setTarget(method, "returnType", SLinkOperations.getTarget(node, "returnType", true), true);
    SLinkOperations.addAll(method, "parameter", SLinkOperations.getTargets(node, "parameter", true));
    SLinkOperations.setTarget(method, "body", SLinkOperations.getTarget(node, "body", true), true);
    SLinkOperations.addAll(method, "throwsItem", SLinkOperations.getTargets(node, "throwsItem", true));
    SLinkOperations.setTarget(method, "visibility", SLinkOperations.getTarget(node, "visibility", true), true);
    SPropertyOperations.set(method, "name", SPropertyOperations.getString(node, "name"));
    SPropertyOperations.set(method, "isFinal", "" + (SPropertyOperations.getBoolean(node, "isFinal")));
    SLinkOperations.addAll(method, "annotation", SLinkOperations.getTargets(node, "annotation", true));
    SNodeOperations.deleteNode(node);
  }

}
