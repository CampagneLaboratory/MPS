package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.GenerateIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import java.util.Iterator;

public class GenerateToString_Intention extends GenerateIntention {
  public GenerateToString_Intention() {
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "toString()";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "method", true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode method) {
        return "toString".equals(SPropertyOperations.getString(method, "name")) && ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).isEmpty() && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method, "returnType", true), "jetbrains.mps.baseLanguage.structure.StringType");
      }
    });
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode classConcept = SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept");
    List<SNode> fields = SLinkOperations.getTargets(classConcept, "field", true);
    SNode toStringMethod = SLinkOperations.addNewChild(classConcept, "method", "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    SPropertyOperations.set(toStringMethod, "name", "toString");
    SLinkOperations.setNewChild(toStringMethod, "returnType", "jetbrains.mps.baseLanguage.structure.StringType");
    SLinkOperations.setNewChild(toStringMethod, "body", "jetbrains.mps.baseLanguage.structure.StatementList");
    SNode returnStatement = SLinkOperations.addNewChild(SLinkOperations.getTarget(toStringMethod, "body", true), "statement", "jetbrains.mps.baseLanguage.structure.ReturnStatement");
    SNode returnExpression = SLinkOperations.setNewChild(returnStatement, "expression", "jetbrains.mps.baseLanguage.structure.PlusExpression");
    SNode classNameLiteral = SLinkOperations.setNewChild(returnExpression, "leftExpression", "jetbrains.mps.baseLanguage.structure.StringLiteral");
    SPropertyOperations.set(classNameLiteral, "value", SPropertyOperations.getString(classConcept, "name") + "{");
    SNode currentPlusExpression = SLinkOperations.setNewChild(returnExpression, "rightExpression", "jetbrains.mps.baseLanguage.structure.PlusExpression");
    Iterator<SNode> fieldIterator = ListSequence.fromList(fields).iterator();
    while (fieldIterator.hasNext()) {
      SNode field = fieldIterator.next();
      SNode plusExpression = SLinkOperations.setNewChild(currentPlusExpression, "leftExpression", "jetbrains.mps.baseLanguage.structure.PlusExpression");
      SNode fieldLiteral = SLinkOperations.setNewChild(plusExpression, "leftExpression", "jetbrains.mps.baseLanguage.structure.StringLiteral");
      SPropertyOperations.set(fieldLiteral, "value", SPropertyOperations.getString(field, "name") + ": ");
      SNode dotExpression;
      if (fieldIterator.hasNext()) {
        SNode extraCommaExpression = SLinkOperations.setNewChild(plusExpression, "rightExpression", "jetbrains.mps.baseLanguage.structure.PlusExpression");
        SNode commaLiteral = SLinkOperations.setNewChild(extraCommaExpression, "rightExpression", "jetbrains.mps.baseLanguage.structure.StringLiteral");
        SPropertyOperations.set(commaLiteral, "value", ", ");
        dotExpression = SLinkOperations.setNewChild(extraCommaExpression, "leftExpression", "jetbrains.mps.baseLanguage.structure.DotExpression");
      } else {
        dotExpression = SLinkOperations.setNewChild(plusExpression, "rightExpression", "jetbrains.mps.baseLanguage.structure.DotExpression");
      }
      SLinkOperations.setNewChild(dotExpression, "operand", "jetbrains.mps.baseLanguage.structure.ThisExpression");
      SNode fieldRef = SLinkOperations.setNewChild(dotExpression, "operation", "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation");
      SLinkOperations.setTarget(fieldRef, "fieldDeclaration", field, false);
      currentPlusExpression = SLinkOperations.setNewChild(currentPlusExpression, "rightExpression", "jetbrains.mps.baseLanguage.structure.PlusExpression");
    }
    currentPlusExpression = SNodeOperations.cast(SNodeOperations.getParent(currentPlusExpression), "jetbrains.mps.baseLanguage.structure.PlusExpression");
    SNode closingBracketLiteral = SLinkOperations.setNewChild(currentPlusExpression, "rightExpression", "jetbrains.mps.baseLanguage.structure.StringLiteral");
    SPropertyOperations.set(closingBracketLiteral, "value", " }");
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.intentions";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ClassConcept";
  }
}
