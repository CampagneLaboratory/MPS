package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.IEditor;
import jetbrains.mps.workbench.editors.MPSEditorOpener;

public class CreateMethodDeclaration_Intention extends BaseIntention {
  public CreateMethodDeclaration_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IOperation";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Create Method Declaration";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return CreateMethodDeclarationUtil.isApplicable(editorContext, node);
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode classifier = CreateMethodDeclarationUtil.getClassifier(node);
    boolean isSameClassifier = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.Classifier", false, false) == classifier;
    final String name = CreateMethodDeclarationUtil.getMethodName(editorContext);
    SNode method = new _Quotations.QuotationClass_17().createNode(name);
    if (!(isSameClassifier)) {
      SLinkOperations.setTarget(method, "visibility", new _Quotations.QuotationClass_21().createNode(), true);
    }
    SLinkOperations.addChild(classifier, "method", method);
    SNodeOperations.replaceWithAnother(node, new _Quotations.QuotationClass_18().createNode(method));
    if (isSameClassifier) {
      editorContext.selectWRTFocusPolicy(method);
    } else {
      IOperationContext operationContext = editorContext.getOperationContext();
      IEditor editor = operationContext.getComponent(MPSEditorOpener.class).editNode(classifier, operationContext);
      editor.getEditorContext().selectWRTFocusPolicy(method);
    }
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.intentions";
  }
}
