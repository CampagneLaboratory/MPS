package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.GenerateIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class GenerateGetter_Intention extends GenerateIntention {
  public GenerateGetter_Intention() {
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Getter";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    List<SNode> fields = SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "field", true);
    boolean allGettersImplemented = true;
    for (SNode fieldDeclaration : fields) {
      final Wrappers._boolean hasCurrentFiedGetter = new Wrappers._boolean(false);
      final String getterName = "get" + NameUtil.capitalize(SPropertyOperations.getString(fieldDeclaration, "name"));
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "method", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          if (!(SPropertyOperations.getString(it, "name").equals(getterName) && ListSequence.fromList(SLinkOperations.getTargets(it, "parameter", true)).isEmpty())) {
            hasCurrentFiedGetter.value = true;
          }
        }
      });
      if (!(hasCurrentFiedGetter.value)) {
        allGettersImplemented = false;
      }
    }
    return !(allGettersImplemented);

  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode classConcept = SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept");
    List<SNode> fields = SLinkOperations.getTargets(classConcept, "field", true);
    if (ListSequence.fromList(fields).isEmpty()) {
      return;
    }
    for (SNode field : fields) {
      final String getterName = "get" + NameUtil.capitalize(SPropertyOperations.getString(field, "name"));
      final Wrappers._boolean getterIsAbsent = new Wrappers._boolean(true);
      ListSequence.fromList(SLinkOperations.getTargets(classConcept, "method", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          if (SPropertyOperations.getString(it, "name").equals(getterName) && ListSequence.fromList(SLinkOperations.getTargets(it, "parameter", true)).isEmpty()) {
            getterIsAbsent.value = false;
          }
        }
      });
      if (!(getterIsAbsent.value)) {
        continue;
      }
      SNode getter = SLinkOperations.addNewChild(classConcept, "method", "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
      SPropertyOperations.set(getter, "name", getterName);
      SLinkOperations.setTarget(getter, "returnType", SNodeOperations.copyNode(SLinkOperations.getTarget(field, "type", true)), true);
      SLinkOperations.setNewChild(getter, "body", "jetbrains.mps.baseLanguage.structure.StatementList");
      SNode returnStatement = SLinkOperations.addNewChild(SLinkOperations.getTarget(getter, "body", true), "statement", "jetbrains.mps.baseLanguage.structure.ReturnStatement");
      SNode dotExpression = SLinkOperations.setNewChild(returnStatement, "expression", "jetbrains.mps.baseLanguage.structure.DotExpression");
      SLinkOperations.setNewChild(dotExpression, "operand", "jetbrains.mps.baseLanguage.structure.ThisExpression");
      SNode fieldRef = SLinkOperations.setNewChild(dotExpression, "operation", "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation");
      SLinkOperations.setTarget(fieldRef, "fieldDeclaration", field, false);
    }
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.intentions";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ClassConcept";
  }
}
