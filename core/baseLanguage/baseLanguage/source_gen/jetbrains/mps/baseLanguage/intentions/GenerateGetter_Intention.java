package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.GenerateIntention;
import jetbrains.mps.lang.intentions.structure.IntentionContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.util.Pair;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.ide.actions.SelectFieldsDialog;

public class GenerateGetter_Intention extends GenerateIntention {
  private IntentionContext intentionContext = new IntentionContext();

  public GenerateGetter_Intention() {
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Getters";
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    List<SNode> fields = SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "field", true);
    if (ListSequence.fromList(fields).isEmpty()) {
      return false;
    }
    boolean allGettersImplemented = true;
    for (SNode fieldDeclaration : fields) {
      final String getterName = "get" + NameUtil.capitalize(SPropertyOperations.getString(fieldDeclaration, "name"));
      boolean fieldHasGetter = false;
      if (ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "method", true)).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode method) {
          return getterName.equals(SPropertyOperations.getString(method, "name")) && ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).isEmpty();
        }
      })) {
        fieldHasGetter = true;
      }
      if (!(fieldHasGetter)) {
        allGettersImplemented = false;
      }
    }
    return !(allGettersImplemented);

  }

  public void executeIntention(final SNode node, final EditorContext editorContext) {
    SNode classConcept = SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept");
    for (final SNode field : (List<SNode>)this.intentionContext.getMyContextParametersMap().get("selectedFields")) {
      final String getterName = "get" + NameUtil.capitalize(SPropertyOperations.getString(field, "name"));
      if (ListSequence.fromList(SLinkOperations.getTargets(classConcept, "method", true)).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode method) {
          return getterName.equals(SPropertyOperations.getString(method, "name")) && ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).isEmpty();
        }
      })) {
        continue;
      }
      // Method creation begins 
      Pair p;
      final SNode thisExpression = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ThisExpression", null);
      SLinkOperations.addChild(classConcept, "method", new _Quotations.QuotationClass_31().createNode(SLinkOperations.getTarget(field, "type", true), thisExpression, field, getterName));
    }
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    this.executeIntention(node, editorContext);
  }

  public boolean executeUI(final SNode node, final EditorContext editorContext) {
    SelectFieldsDialog selectFieldsDialog = new SelectFieldsDialog(editorContext, null, node);
    selectFieldsDialog.showDialog();
    this.intentionContext.getMyContextParametersMap().put("selectedFields", selectFieldsDialog.getSelectedFields());
    return true;
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.intentions";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ClassConcept";
  }
}
