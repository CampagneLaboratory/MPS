package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.core.behavior.IDeprecatable_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class DeprecatedJavaDoc_Intention extends BaseIntention {

  public DeprecatedJavaDoc_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IBLDeprecatable";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    if (IDeprecatable_Behavior.call_isDeprecated_1224609060727(node)) {
      return "Remove Deprecated javadoc";
    } else
    {
      return "Add Deprecated javadoc";
    }
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    if (SPropertyOperations.getBoolean(node, "isDeprecated")) {
      SPropertyOperations.set(node, "isDeprecated", "" + (false));
    } else
    {
      SPropertyOperations.set(node, "isDeprecated", "" + (true));
    }
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.intentions";
  }

  public List<Intention> getInstances(final SNode node, final EditorContext editorContext) {
    List<Intention> list = ListSequence.fromList(new ArrayList<Intention>());
    ListSequence.fromList(list).addElement(this);
    return list;
  }

}
