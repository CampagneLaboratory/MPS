package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.util.Pair;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.smodel.SNode;
import com.intellij.openapi.project.Project;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.CodeStyleSettings;

public class GenerateGettersAndSettersUtil {
  public GenerateGettersAndSettersUtil() {
  }

  private static String getPreparedName(String fullName, Pair<String, String> settings) {
    String prefix = settings.o1;
    String suffix = settings.o2;
    int preparedNameStart = ((StringUtils.isNotEmpty(prefix) && fullName.startsWith(prefix)) ?
      prefix.length() :
      0
    );
    int preparedNameEnd = ((StringUtils.isNotEmpty(suffix) && fullName.endsWith(suffix)) ?
      fullName.indexOf(suffix) :
      fullName.length()
    );
    if (preparedNameStart >= preparedNameEnd) {
      return fullName;
    }
    return fullName.substring(preparedNameStart, preparedNameEnd);
  }

  public static String getFieldGetterName(SNode fieldDeclaration, Project project) {
    return "get" + NameUtil.capitalize(getPreparedFieldName(fieldDeclaration, project));
  }

  public static String getFieldSetterName(SNode fieldDeclaration, Project project) {
    return "set" + NameUtil.capitalize(getPreparedFieldName(fieldDeclaration, project));
  }

  public static String getPreparedFieldName(SNode fieldDeclaration, Project project) {
    String rawName = SPropertyOperations.getString(fieldDeclaration, "name");
    if (rawName == null || rawName.length() == 0) {
      return "unnamedField";
    }
    CodeStyleSettings codeStyleSettings = CodeStyleSettings.getInstance(project);
    if (codeStyleSettings == null) {
      return rawName;
    }
    return getPreparedName(rawName, codeStyleSettings.getFieldSettings());
  }
}
