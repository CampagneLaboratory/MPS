package jetbrains.mps.baseLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.baseLanguage.index.ClassifierSuccessorsFinder;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.behavior.BaseMethodDeclaration_Behavior;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class DerivedMethods_Finder extends GeneratedFinder {
  private static Logger LOG = Logger.getLogger("jetbrains.mps.baseLanguage.findUsages.DerivedMethods_Finder");

  public String getDescription() {
    return "Derived Methods";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration";
  }

  public boolean isApplicable(SNode node) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.Classifier");
  }

  protected void doFind(SNode node, IScope scope, final List<SNode> _results, ProgressIndicator indicator) {
    SNode classifier = (SNode) SNodeOperations.getParent(node);
    final SNode instanceMethod = node;
    List<SNode> derivedClassifiers = ClassifierSuccessorsFinder.getDerivedClassifiers(SNodeOperations.getParent(node), scope);
    for (SNode derivedClassifier : ListSequence.fromList(derivedClassifiers).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.as(it, "jetbrains.mps.baseLanguage.structure.Classifier");
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return it != null;
      }
    })) {
      ListSequence.fromList(SLinkOperations.getTargets(derivedClassifier, "method", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(instanceMethod, it);
        }
      }).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          ListSequence.fromList(_results).addElement(it);
        }
      });
    }
  }
}
