package jetbrains.mps.baseLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.ide.findusages.model.result.SearchResults;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.ide.findusages.model.result.SearchResult;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.helgins.inference.TypeChecker;

import java.util.List;
import java.util.ArrayList;

import jetbrains.mps.ide.findusages.model.searchquery.SearchQuery;

public class ConstructorUsages_Finder extends GeneratedFinder {
  public static Logger LOG = Logger.getLogger("jetbrains.mps.baseLanguage.findUsages.ConstructorUsages_Finder");

  public boolean isVisible() {
    return true;
  }

  public String getDescription() {
    return "Constructor Usages";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration";
  }

  public boolean isApplicable(SNode node) {
    SNode queryNode = (SNode) node;
    return SNodeOperations.getAncestor(queryNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false) != null;
  }

  public void doFind(SNode node, IScope scope, SearchResults results) {
    results.getSearchedNodePointers().add(new SNodePointer(node));
    // search for straight usages & search for SUPER calls
    // BUG IN BASE LANGUAGE -- AT THE TIME THIS THING DOES NOT FIND SUPER() CALLS
    {
      ICursor<SNode> _zCursor12 = CursorFactory.createCursor(this.executejetbrainsMpsBootstrapStructureLanguageFindUsagesNodeUsages_Finder(node, scope));
      try {
        while (_zCursor12.moveToNext()) {
          SNode nodeUsage = _zCursor12.getCurrent();
          results.getSearchResults().add(new SearchResult(new SNodePointer(nodeUsage), "Constructor Usages"));
        }
      } finally {
        _zCursor12.release();
      }
    }
    // WORKAROUND - FIND SUPER() CALLS
    {
      ICursor<SNode> _zCursor13 = CursorFactory.createCursor(this.executejetbrainsMpsBaseLanguageFindUsagesStraightDerivedClasses_Finder(SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false), scope));
      try {
        while (_zCursor13.moveToNext()) {
          SNode subclassResult = _zCursor13.getCurrent();
          {
            ICursor<SNode> _zCursor14 = CursorFactory.createCursor(SLinkOperations.getTargets(subclassResult, "constructor", true));
            try {
              while (_zCursor14.moveToNext()) {
                SNode constructorNode = _zCursor14.getCurrent();
                {
                  ICursor<SNode> _zCursor15 = CursorFactory.createCursor(SequenceOperations.where(SNodeOperations.getDescendants(constructorNode, null, false), new zPredicate(null, null)));
                  try {
                    while (_zCursor15.moveToNext()) {
                      SNode invocation = _zCursor15.getCurrent();
                      {
                        boolean thisConstructor = true;
                        SNode invocationNode = (SNode) invocation;
                        if (SequenceOperations.getSize(SLinkOperations.getTargets(invocationNode, "actualArgument", true)) == SequenceOperations.getSize(SLinkOperations.getTargets(node, "parameter", true))) {
                          for (int i = 0; i < SequenceOperations.getSize(SLinkOperations.getTargets(invocationNode, "actualArgument", true)); i = i + 1)
                          {
                            SNode actualArgument = ListOperations.getElement(SLinkOperations.getTargets(invocationNode, "actualArgument", true), i);
                            SNode formalArgument = ListOperations.getElement(SLinkOperations.getTargets(node, "parameter", true), i);
                            if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(actualArgument), SLinkOperations.getTarget(formalArgument, "type", true)))) {
                              thisConstructor = false;
                            }
                          }
                          if (thisConstructor) {
                            results.getSearchResults().add(new SearchResult(new SNodePointer(invocationNode), "Constructor Usages"));
                          }
                        }
                      }
                    }
                  } finally {
                    _zCursor15.release();
                  }
                }
              }
            } finally {
              _zCursor14.release();
            }
          }
        }
      } finally {
        _zCursor13.release();
      }
    }
    // search for enum constants creation
    SNode enumNode = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.EnumClass", false, false);
    if (enumNode != null) {
      {
        ICursor<SNode> _zCursor16 = CursorFactory.createCursor(SLinkOperations.getTargets(enumNode, "enumConstant", true));
        try {
          while (_zCursor16.moveToNext()) {
            SNode enumConstant = _zCursor16.getCurrent();
            {
              boolean thisConstructor = true;
              if (SequenceOperations.getSize(SLinkOperations.getTargets(enumConstant, "actualArgument", true)) == SequenceOperations.getSize(SLinkOperations.getTargets(node, "parameter", true))) {
                for (int i = 0; i < SequenceOperations.getSize(SLinkOperations.getTargets(enumConstant, "actualArgument", true)); i = i + 1)
                {
                  SNode actualArgument = ListOperations.getElement(SLinkOperations.getTargets(enumConstant, "actualArgument", true), i);
                  SNode formalArgument = ListOperations.getElement(SLinkOperations.getTargets(node, "parameter", true), i);
                  if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(actualArgument), SLinkOperations.getTarget(formalArgument, "type", true)))) {
                    thisConstructor = false;
                  }
                }
                if (thisConstructor) {
                  results.getSearchResults().add(new SearchResult(new SNodePointer(enumConstant), "Constructor Usages"));
                }
              }
            }
          }
        } finally {
          _zCursor16.release();
        }
      }
    }
  }

  public List<SNode> executejetbrainsMpsBaseLanguageFindUsagesStraightDerivedClasses_Finder(SNode node, IScope scope) {
    List<SNode> result = new ArrayList<SNode>();
    try {
      GeneratedFinder finder = (GeneratedFinder) Class.forName("jetbrains.mps.baseLanguage.findUsages.StraightDerivedClasses_Finder").newInstance();
      {
        ICursor<SearchResult> _zCursor35 = CursorFactory.createCursor(finder.find(new SearchQuery(node, scope)).getSearchResults());
        try {
          while (_zCursor35.moveToNext()) {
            SearchResult searchResult = _zCursor35.getCurrent();
            ListOperations.addElement(result, searchResult.getNode());
          }
        } finally {
          _zCursor35.release();
        }
      }
    } catch (Throwable t) {
      ConstructorUsages_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.StraightDerivedClasses_Finder" + "\"  Message:" + t.getMessage());
    }
    return result;
  }

  public List<SNode> executejetbrainsMpsBootstrapStructureLanguageFindUsagesNodeUsages_Finder(SNode node, IScope scope) {
    List<SNode> result = new ArrayList<SNode>();
    try {
      GeneratedFinder finder = (GeneratedFinder) Class.forName("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder").newInstance();
      {
        ICursor<SearchResult> _zCursor36 = CursorFactory.createCursor(finder.find(new SearchQuery(node, scope)).getSearchResults());
        try {
          while (_zCursor36.moveToNext()) {
            SearchResult searchResult = _zCursor36.getCurrent();
            ListOperations.addElement(result, searchResult.getNode());
          }
        } finally {
          _zCursor36.release();
        }
      }
    } catch (Throwable t) {
      ConstructorUsages_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder" + "\"  Message:" + t.getMessage());
    }
    return result;
  }

}
