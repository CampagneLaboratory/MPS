package jetbrains.mps.baseLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import jetbrains.mps.ide.progress.IAdaptiveProgressMonitor;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import org.jetbrains.annotations.Nullable;

public class DerivedClasses_Finder extends GeneratedFinder {
  public static Logger LOG = Logger.getLogger("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder");

  public boolean isVisible() {
    return true;
  }

  public String getDescription() {
    return "Derived Classes";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ClassConcept";
  }

  public boolean isApplicable(SNode node) {
    return true;
  }

  protected void doFind(SNode node, IScope scope, List<SNode> _results, IAdaptiveProgressMonitor monitor) {
    List<SNode> derived = new ArrayList<SNode>();
    ListOperations.addElement(derived, (SNode)node);
    // 
    int passed = 0;
    while(SequenceOperations.getSize(derived) != passed) {
      SNode passingNode = ListOperations.getElement(derived, passed);
      for(SNode classNode : this.executeFinder("jetbrains.mps.baseLanguage.findUsages.StraightDerivedClasses_Finder", passingNode, scope, monitor)) {
        ListOperations.addElement(derived, classNode);
      }
      if (passingNode != node) {
        ListOperations.addElement(_results, passingNode);
      }
      passed = passed + 1;
    }
  }

  public void getSearchedNodes(SNode node, IScope scope, List<SNode> _results) {
    ListOperations.addElement(_results, node);
  }

  public String getNodeCategory(SNode node) {
    return "Derived Classes";
  }

  @Nullable()
  public String getNodePresentation(SNode node) {
    return null;
  }

}
