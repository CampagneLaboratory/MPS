package jetbrains.mps.baseLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import jetbrains.mps.ide.progress.IAdaptiveProgressMonitor;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.ide.progress.NullAdaptiveProgressMonitor;
import org.jetbrains.annotations.Nullable;

public class FieldUsages_Finder extends GeneratedFinder {
  public static Logger LOG = Logger.getLogger("jetbrains.mps.baseLanguage.findUsages.FieldUsages_Finder");

  public boolean isVisible() {
    return true;
  }

  public String getDescription() {
    return "Field Usages";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.VariableDeclaration";
  }

  public boolean isApplicable(SNode node) {
    if (SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false) == null && SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.Interface", false, false) == null) {
      return false;
    }
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) && !(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"))) {
      return false;
    }
    return true;
  }

  protected void doFind(SNode node, IScope scope, List<SNode> _results, IAdaptiveProgressMonitor monitor) {
    List<SNode> fieldDeclarations = new ArrayList<SNode>();
    ListOperations.addElement(fieldDeclarations, node);
    if (SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false) != null) {
      ListOperations.addAllElements(fieldDeclarations, (List<SNode>)this.executeFinder("jetbrains.mps.baseLanguage.findUsages.OverridingFields_Finder", node, scope, monitor));
    }
    // 
    {
      ICursor<SNode> _zCursor5 = CursorFactory.createCursor(fieldDeclarations);
      try {
        while(_zCursor5.moveToNext()) {
          SNode fieldDeclaration = _zCursor5.getCurrent();
          {
            ICursor<SNode> _zCursor6 = CursorFactory.createCursor(this.executeFinder("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder", fieldDeclaration, scope, monitor));
            try {
              while(_zCursor6.moveToNext()) {
                SNode fieldUsage = _zCursor6.getCurrent();
                ListOperations.addElement(_results, fieldUsage);
              }
            } finally {
              _zCursor6.release();
            }
          }
        }
      } finally {
        _zCursor5.release();
      }
    }
  }

  public void getSearchedNodes(SNode node, IScope scope, List<SNode> _results) {
    ListOperations.addElement(_results, node);
    if (SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false) != null) {
      {
        ICursor<SNode> _zCursor7 = CursorFactory.createCursor(this.executeFinder("jetbrains.mps.baseLanguage.findUsages.OverridingFields_Finder", node, scope, new NullAdaptiveProgressMonitor()));
        try {
          while(_zCursor7.moveToNext()) {
            SNode fieldNode = _zCursor7.getCurrent();
            ListOperations.addElement(_results, fieldNode);
          }
        } finally {
          _zCursor7.release();
        }
      }
    }
  }

  public String getNodeCategory(SNode node) {
    return "Field Usages";
  }

  @Nullable()
  public String getNodePresentation(SNode node) {
    return null;
  }

}
