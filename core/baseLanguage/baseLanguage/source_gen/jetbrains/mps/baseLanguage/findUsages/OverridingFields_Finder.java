package jetbrains.mps.baseLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.ide.findusages.model.result.SearchResults;
import jetbrains.mps.smodel.SNodePointer;

import java.util.List;
import java.util.ArrayList;

import jetbrains.mps.ide.findusages.model.result.SearchResult;
import jetbrains.mps.ide.findusages.model.searchquery.SearchQuery;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.constraints.Type_Behavior;

public class OverridingFields_Finder extends GeneratedFinder {
  public static Logger LOG = Logger.getLogger("jetbrains.mps.baseLanguage.findUsages.OverridingFields_Finder");

  public boolean isVisible() {
    return true;
  }

  public String getDescription() {
    return "Overriding Fields";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.VariableDeclaration";
  }

  public boolean isApplicable(SNode node) {
    if (SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false) == null) {
      return false;
    }
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) && !(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"))) {
      return false;
    }
    return true;
  }

  public void doFind(SNode node, IScope scope, SearchResults results) {
    results.getSearchedNodePointers().add(new SNodePointer(node));
    // null
    List<SNode> nodes = new ArrayList<SNode>();
    List<SearchResult> derivedClassesResults = new ArrayList<SearchResult>();
    try {
      GeneratedFinder _finder = (GeneratedFinder) Class.forName("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder").newInstance();
      SNode _node = SNodeOperations.getParent(node, null, false, false);
      IScope _scope;
      _scope = scope;
      boolean rightConcept = _node.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.ClassConcept");
      if (!(rightConcept)) {
        OverridingFields_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: " + node.getConceptFqName());
      } else {
        boolean isApplicable = _finder.isApplicable(_node);
        if (!(isApplicable)) {
          OverridingFields_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: " + node.toString());
        } else {
          SearchResults results_11 = _finder.find(new SearchQuery(_node, _scope));
          for (SNodePointer nodePointer : results_11.getSearchedNodePointers()) {
            ListOperations.addElement(nodes, nodePointer.getNode());
          }
          for (SearchResult result : results_11.getSearchResults()) {
            derivedClassesResults.add(result);
          }
        }
      }
    } catch (Throwable t) {
      OverridingFields_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder" + "\"  Message:" + t.getMessage());
    }
    // null
    {
      ICursor<SearchResult> _zCursor3 = CursorFactory.createCursor(derivedClassesResults);
      try {
        while (_zCursor3.moveToNext()) {
          SearchResult result = _zCursor3.getCurrent();
          {
            SNode classNode = (SNode) result.getNode();
            Iterable<SNode> fieldsOfSameKind;
            if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
              fieldsOfSameKind = SLinkOperations.getTargets(classNode, "field", true);
            } else {
              fieldsOfSameKind = SLinkOperations.getTargets(classNode, "staticField", true);
            }
            {
              ICursor<SNode> _zCursor4 = CursorFactory.createCursor(fieldsOfSameKind);
              try {
                while (_zCursor4.moveToNext()) {
                  SNode field = _zCursor4.getCurrent();
                  if (SPropertyOperations.getString(field, "name").equals(SPropertyOperations.getString(node, "name")) && Type_Behavior.call_getErasureSignature_1199318924019(SLinkOperations.getTarget(field, "type", true)).equals(Type_Behavior.call_getErasureSignature_1199318924019(SLinkOperations.getTarget(node, "type", true)))) {
                    results.getSearchResults().add(new SearchResult(new SNodePointer(field), "Overriding Fields"));
                  }
                }
              } finally {
                _zCursor4.release();
              }
            }
          }
        }
      } finally {
        _zCursor3.release();
      }
    }
  }

}
