package jetbrains.mps.baseLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;

import java.util.List;

import jetbrains.mps.smodel.IScope;

import java.util.ArrayList;

import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.ide.findusages.model.result.SearchResult;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.ide.findusages.model.searchquery.SearchQuery;

public class ImplementingClasses_Finder extends GeneratedFinder {
  public static Logger LOG = Logger.getLogger("jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder");

  public boolean isVisible() {
    return true;
  }

  public String getDescription() {
    return "Implementing Classes";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.Interface";
  }

  public boolean isApplicable(SNode node) {
    return true;
  }

  protected List<SNode> doFind(SNode node, IScope scope) {
    List<SNode> _results = new ArrayList<SNode>();
    {
      List<SNode> derivedInterfaces = this.executejetbrainsMpsBaseLanguageFindUsagesDerivedInterfaces_Finder(node, scope);
      ListOperations.addElement(derivedInterfaces, node);
      // null
      List<SNode> derivedInterfacesUsages = new ArrayList<SNode>();
      for (SNode derivedInterface : derivedInterfaces) {
        /*
          ListOperations.addElement(_results, derivedInterface);
        */
        ListOperations.addAllElements(derivedInterfacesUsages, this.executejetbrainsMpsBootstrapStructureLanguageFindUsagesNodeUsages_Finder(derivedInterface, scope));
      }
      // null
      for (SNode interfaceNode : derivedInterfacesUsages) {
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(interfaceNode, null, false, false), "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
          if (SNodeOperations.hasRole(interfaceNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", "implementedInterface")) {
            ListOperations.addElement(_results, SNodeOperations.getParent(interfaceNode, null, false, false));
            for (SNode classNode : this.executejetbrainsMpsBaseLanguageFindUsagesDerivedClasses_Finder(interfaceNode, scope)) {
              ListOperations.addElement(_results, classNode);
            }
          }
        }
      }
    }
    return _results;
  }

  public List<SNode> getSearchedNodes(SNode node, IScope scope) {
    List<SNode> _results = new ArrayList<SNode>();
    ListOperations.addElement(_results, node);
    return _results;
  }

  public String getNodeCategory(SNode node) {
    return "Implementing Classes";
  }

  @Nullable()
  public String getNodePresentation(SNode node) {
    return null;
  }

  public List<SNode> executejetbrainsMpsBaseLanguageFindUsagesDerivedInterfaces_Finder(SNode node, IScope scope) {
    List<SNode> result = new ArrayList<SNode>();
    try {
      GeneratedFinder finder = (GeneratedFinder) Class.forName("jetbrains.mps.baseLanguage.findUsages.DerivedInterfaces_Finder").newInstance();
      {
        ICursor<SearchResult> _zCursor20 = CursorFactory.createCursor(finder.find(new SearchQuery(node, scope)).getSearchResults());
        try {
          while (_zCursor20.moveToNext()) {
            SearchResult searchResult = _zCursor20.getCurrent();
            ListOperations.addElement(result, searchResult.getNode());
          }
        } finally {
          _zCursor20.release();
        }
      }
    } catch (Throwable t) {
      ImplementingClasses_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.DerivedInterfaces_Finder" + "\"  Message:" + t.getMessage());
    }
    return result;
  }

  public List<SNode> executejetbrainsMpsBootstrapStructureLanguageFindUsagesNodeUsages_Finder(SNode node, IScope scope) {
    List<SNode> result = new ArrayList<SNode>();
    try {
      GeneratedFinder finder = (GeneratedFinder) Class.forName("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder").newInstance();
      {
        ICursor<SearchResult> _zCursor21 = CursorFactory.createCursor(finder.find(new SearchQuery(node, scope)).getSearchResults());
        try {
          while (_zCursor21.moveToNext()) {
            SearchResult searchResult = _zCursor21.getCurrent();
            ListOperations.addElement(result, searchResult.getNode());
          }
        } finally {
          _zCursor21.release();
        }
      }
    } catch (Throwable t) {
      ImplementingClasses_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder" + "\"  Message:" + t.getMessage());
    }
    return result;
  }

  public List<SNode> executejetbrainsMpsBaseLanguageFindUsagesDerivedClasses_Finder(SNode node, IScope scope) {
    List<SNode> result = new ArrayList<SNode>();
    try {
      GeneratedFinder finder = (GeneratedFinder) Class.forName("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder").newInstance();
      {
        ICursor<SearchResult> _zCursor22 = CursorFactory.createCursor(finder.find(new SearchQuery(node, scope)).getSearchResults());
        try {
          while (_zCursor22.moveToNext()) {
            SearchResult searchResult = _zCursor22.getCurrent();
            ListOperations.addElement(result, searchResult.getNode());
          }
        } finally {
          _zCursor22.release();
        }
      }
    } catch (Throwable t) {
      ImplementingClasses_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder" + "\"  Message:" + t.getMessage());
    }
    return result;
  }

}
