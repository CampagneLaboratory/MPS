package jetbrains.mps.baseLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.ide.findusages.model.searchquery.SearchQuery;
import jetbrains.mps.ide.findusages.model.result.SearchResults;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.ide.findusages.model.result.SearchResult;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.IScope;

public class InterfaceAncestors_Finder extends GeneratedFinder {
  public static Logger LOG = Logger.getLogger("jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder");

  public boolean isVisible() {
    return true;
  }

  public String getDescription() {
    return "Interface Ancestors";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.Interface";
  }

  public boolean isApplicable(SNode node) {
    return !(SequenceOperations.isEmpty(SLinkOperations.getTargets(node, "extendedInterface", true)));
  }

  public void doFind(SearchQuery searchQuery, SearchResults results) {
    SNode current = (SNode)searchQuery.getNode();
    results.getSearchedNodePointers().add(new SNodePointer(current));
    {
      ICursor<SNode> _zCursor16 = CursorFactory.createCursor(SLinkOperations.getTargets(current, "extendedInterface", true));
      try {
        while(_zCursor16.moveToNext()) {
          SNode ancestor = _zCursor16.getCurrent();
          {
            results.getSearchResults().add(new SearchResult(new SNodePointer(ancestor), "Ancestor"));
            List<SearchResult> ancestorAncestors = new ArrayList<SearchResult>();
            try {
              GeneratedFinder _finder = (GeneratedFinder)Class.forName("jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder").newInstance();
              SNode _node = ancestor;
              IScope _scope;
              _scope = searchQuery.getScope();
              boolean rightConcept = _node.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.Interface");
              if(!(rightConcept)) {
                InterfaceAncestors_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: " + searchQuery.getNodePointer().getNode().getConceptFqName());
              } else
              {
                boolean isApplicable = _finder.isApplicable(_node);
                if(!(isApplicable)) {
                  InterfaceAncestors_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: " + searchQuery.getNodePointer().getNode().toString());
                } else
                {
                  SearchResults results_19 = _finder.find(new SearchQuery(_node, _scope));
                  for(SearchResult result : results_19.getSearchResults()) {
                    ancestorAncestors.add(result);
                  }
                }
              }
            } catch (Throwable t) {
              InterfaceAncestors_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder" + "\"  Message:" + t.getMessage());
            }
            {
              ICursor<SearchResult> _zCursor17 = CursorFactory.createCursor(ancestorAncestors);
              try {
                while(_zCursor17.moveToNext()) {
                  SearchResult ancestorAncestor = _zCursor17.getCurrent();
                  results.getSearchResults().add(new SearchResult(new SNodePointer(ancestorAncestor.getNode()), "Ancestor"));
                }
              } finally {
                _zCursor17.release();
              }
            }
          }
        }
      } finally {
        _zCursor16.release();
      }
    }
  }

}
