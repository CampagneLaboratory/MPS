package jetbrains.mps.baseLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.ide.findusages.model.result.SearchResults;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.ide.findusages.model.result.SearchResult;

import java.util.List;
import java.util.ArrayList;

import jetbrains.mps.ide.findusages.model.searchquery.SearchQuery;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;

public class InterfaceAncestors_Finder extends GeneratedFinder {
  public static Logger LOG = Logger.getLogger("jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder");

  public boolean isVisible() {
    return true;
  }

  public String getDescription() {
    return "Interface Ancestors";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.Interface";
  }

  public boolean isApplicable(SNode node) {
    return !(SequenceOperations.isEmpty(SLinkOperations.getTargets(node, "extendedInterface", true)));
  }

  public void doFind(SNode node, IScope scope, SearchResults results) {
    SNode current = node;
    results.getSearchedNodePointers().add(new SNodePointer(current));
    {
      ICursor<SNode> _zCursor17 = CursorFactory.createCursor(SLinkOperations.getTargets(current, "extendedInterface", true));
      try {
        while (_zCursor17.moveToNext()) {
          SNode ancestor = _zCursor17.getCurrent();
          results.getSearchResults().add(new SearchResult(new SNodePointer(ancestor), "Ancestor"));
          {
            ICursor<SNode> _zCursor18 = CursorFactory.createCursor(this.executejetbrainsMpsBaseLanguageFindUsagesInterfaceAncestors_Finder(ancestor, scope));
            try {
              while (_zCursor18.moveToNext()) {
                SNode ancestorAncestor = _zCursor18.getCurrent();
                results.getSearchResults().add(new SearchResult(new SNodePointer(ancestorAncestor), "Ancestor"));
              }
            } finally {
              _zCursor18.release();
            }
          }
          /*statement: [statement] Statement <no name>[1206458967994] in jetbrains.mps.baseLanguage.findUsages@2_1*/
        }
      } finally {
        _zCursor17.release();
      }
    }
  }

  public List<SNode> executejetbrainsMpsBaseLanguageFindUsagesInterfaceAncestors_Finder(SNode node, IScope scope) {
    List<SNode> result = new ArrayList<SNode>();
    try {
      GeneratedFinder finder = (GeneratedFinder) Class.forName("jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder").newInstance();
      {
        ICursor<SearchResult> _zCursor38 = CursorFactory.createCursor(finder.find(new SearchQuery(node, scope)).getSearchResults());
        try {
          while (_zCursor38.moveToNext()) {
            SearchResult searchResult = _zCursor38.getCurrent();
            ListOperations.addElement(result, searchResult.getNode());
          }
        } finally {
          _zCursor38.release();
        }
      }
    } catch (Throwable t) {
      InterfaceAncestors_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder" + "\"  Message:" + t.getMessage());
    }
    return result;
  }

}
