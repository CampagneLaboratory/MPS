package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ExtractMethodWithReturn extends ExtractMethodFromStatementsRefactoring {
  /*package*/ ExtractMethodWithReturn(ExtractMethodRefactoringParameters params) {
    super(params);
  }

  public SNode getMethodType() {
    return this.myAnalyzer.getExtractMethodReafactoringProcessor().getContainerReturnType();
  }

  protected void addCallExpression(SNode newMethod) {
    SNode methodCall = this.createMethodCall(newMethod);
    SNode returnlStatement = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ReturnStatement", null);
    SLinkOperations.setTarget(returnlStatement, "expression", methodCall, true);
    SNodeOperations.insertPrevSiblingChild(ListSequence.fromList(this.myStatements).first(), returnlStatement);
    for (SNode statement : ListSequence.fromList(this.myStatements)) {
      SNodeOperations.deleteNode(statement);
    }
  }
}
