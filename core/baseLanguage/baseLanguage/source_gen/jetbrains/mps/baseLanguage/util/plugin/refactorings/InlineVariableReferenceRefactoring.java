package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Set;
import jetbrains.mps.lang.dataFlow.framework.instructions.WriteInstruction;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.dataFlow.DataFlowManager;
import jetbrains.mps.lang.dataFlow.framework.AnalysisResult;
import jetbrains.mps.lang.dataFlow.framework.analyzers.ReachingDefinitionsAnalyzer;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.awt.Frame;

public class InlineVariableReferenceRefactoring extends InlineVariableRefactoring {
  private SNode myReference;
  private Set<WriteInstruction> myDefinitions;

  public InlineVariableReferenceRefactoring(SNode node) {
    this.myReference = node;
    SNode declaration = this.getBaseStatementList(node);
    Program program = DataFlowManager.getInstance().buildProgramFor(declaration);
    AnalysisResult<Set<WriteInstruction>> definitions = program.analyze(new ReachingDefinitionsAnalyzer());
    this.myDefinitions = SetSequence.fromSet(new HashSet<WriteInstruction>());
    for (Instruction instruction : program.getInstructionsFor(node)) {
      SetSequence.fromSet(this.myDefinitions).addSequence(SetSequence.fromSet(definitions.get(instruction)));
    }
  }

  public SNode doRefactoring() {
    SNode variable = SLinkOperations.getTarget(this.myReference, "variableDeclaration", false);
    SNode assignment = null;
    for (WriteInstruction definition : SetSequence.fromSet(this.myDefinitions)) {
      if (definition.getVariable() == variable) {
        assignment = ((SNode) definition.getSource());
      }
    }
    SNode nodeToSelect;
    if (assignment == null) {
      nodeToSelect = SLinkOperations.getTarget(SLinkOperations.getTarget(this.myReference, "variableDeclaration", false), "initializer", true);
      SNodeOperations.replaceWithAnother(this.myReference, nodeToSelect);
    } else
    if (SNodeOperations.isInstanceOf(assignment, "jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
      nodeToSelect = SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(assignment, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"), "initializer", true));
      SNodeOperations.replaceWithAnother(this.myReference, nodeToSelect);
    } else {
      nodeToSelect = SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(assignment, "jetbrains.mps.baseLanguage.structure.AssignmentExpression"), "rValue", true));
      SNodeOperations.replaceWithAnother(this.myReference, nodeToSelect);
      this.optimizeAssignment(SNodeOperations.cast(assignment, "jetbrains.mps.baseLanguage.structure.AssignmentExpression"), variable);
    }
    this.optimizeDeclaration(variable);
    return nodeToSelect;
  }

  public boolean checkRefactoring(Frame frame) {
    return true;
  }
}
