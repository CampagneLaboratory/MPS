package jetbrains.mps.baseLanguage.util.plugin.run;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.generator.GeneratorManager;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.ModelGenerationStatusManager;
import com.intellij.openapi.project.Project;
import jetbrains.mps.generator.NoCachesStrategy;
import jetbrains.mps.generator.IGenerationType;

public class RunUtil {
  public RunUtil() {
  }

  public static void makeBeforeRun(final MPSProject project, List<SNode> nodes) {
    GeneratorManager genManager = project.getComponent(GeneratorManager.class);
    final List<SModelDescriptor> models = ListSequence.fromList(new ArrayList<SModelDescriptor>());
    for (final SNode node : nodes) {
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          SModelDescriptor md = SNodeOperations.getModel(node).getModelDescriptor();
          if (!(ListSequence.fromList(models).contains(md)) && ModelGenerationStatusManager.getInstance().generationRequired(md, project.getComponent(Project.class), NoCachesStrategy.createBuildCachesStrategy())) {
            ListSequence.fromList(models).addElement(md);
          }
        }
      });
    }
    if (ListSequence.fromList(models).isNotEmpty()) {
      genManager.generateModelsFromDifferentModules(project.createOperationContext(), models, IGenerationType.FILES);
    }
  }
}
