package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

/*package*/ class ExtractMethodWithOutputVariable extends ExtractMethodFromStatementsRefactoring {
  private SNode myOutputVariable;
  private SNode myDeclarationStatement;

  /*package*/ ExtractMethodWithOutputVariable(ExtractMethodRefactoringParameters parameters) {
    super(parameters);
    List<SNode> output = this.myAnalyzer.getOutputVariables();
    if (ListSequence.fromList(output).isNotEmpty()) {
      this.myOutputVariable = SNodeOperations.cast(ListSequence.fromList(output).first(), "jetbrains.mps.baseLanguage.structure.VariableDeclaration");
    }
    for (SNode statement : ListSequence.fromList(this.myStatements)) {
      if (SNodeOperations.isInstanceOf(statement, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")) {
        SNode tmp = SNodeOperations.cast(statement, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement");
        if (SLinkOperations.getTarget(tmp, "localVariableDeclaration", true) == this.myOutputVariable) {
          this.myDeclarationStatement = tmp;
        }
      }
    }
  }

  protected void modifyPartToExtract() {
    SNode returnStatement = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ReturnStatement", null);
    SLinkOperations.setTarget(returnStatement, "expression", this.createReference(this.myOutputVariable), true);
    ListSequence.fromList(this.myStatements).addElement(returnStatement);
  }

  public SNode getMethodType() {
    return SNodeOperations.copyNode(SLinkOperations.getTarget(this.myOutputVariable, "type", true));
  }

  protected void addCallExpression(MethodMatch match, List<SNode> parameterOrder, SNode newMethod) {
    SNode methodCall = this.createMethodCall(match, parameterOrder, newMethod);
    SLinkOperations.setTarget(SLinkOperations.getTarget(this.myDeclarationStatement, "localVariableDeclaration", true), "initializer", methodCall, true);
    for (SNode statement : ListSequence.fromList(this.myStatements)) {
      if (statement != this.myDeclarationStatement) {
        SNodeOperations.deleteNode(statement);
      }
    }
  }
}
