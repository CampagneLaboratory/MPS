package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class ExtractMethodFactory {
  public static ExtractMethodRefactoringParameters createParameters(List<SNode> nodes) {
    SNode first = ListSequence.fromList(nodes).first();
    if (SNodeOperations.isInstanceOf(first, "jetbrains.mps.baseLanguage.structure.Expression") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(first), "jetbrains.mps.baseLanguage.structure.Statement")) {
      List<SNode> newNodes = new ArrayList<SNode>();
      ListSequence.fromList(newNodes).addElement(SNodeOperations.getParent(first));
      return new ExtractMethodRefactoringParameters(newNodes);
    }

    return new ExtractMethodRefactoringParameters(nodes);
  }

  public static ExtractMethodRefactoring createRefactoring(ExtractMethodRefactoringParameters parameteres) {
    if (SNodeOperations.isInstanceOf(ListSequence.fromList(parameteres.getNodesToRefactor()).first(), "jetbrains.mps.baseLanguage.structure.Expression")) {
      return new ExtractMethodFromExpressionRefactoring(parameteres);
    }
    if (ListSequence.fromList(parameteres.getAnalyzer().getOutputVariables()).count() > 0) {
      return new ExtractMethodWithOutputVariable(parameteres);
    }
    SNode containerType = parameteres.getAnalyzer().getExtractMethodReafactoringProcessor().getContainerReturnType();
    if (parameteres.getAnalyzer().isAlwaysReturns() && containerType != null && !(SNodeOperations.isInstanceOf(containerType, "jetbrains.mps.baseLanguage.structure.VoidType"))) {
      return new ExtractMethodWithReturn(parameteres);
    }
    if (parameteres.getAnalyzer().hasExitPoints()) {
      return new ExtractMethodWithExitPoints(parameteres);
    }
    return new ExtractMethodFromStatementsRefactoring(parameteres);
  }

  public static boolean isRefactoringAvailable(List<SNode> nodes) {
    SNode first = ListSequence.fromList(nodes).first();
    boolean hasProperContainer = (SNodeOperations.getAncestor(first, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false) != null) || (SNodeOperations.getAncestor(first, "jetbrains.mps.baseLanguage.structure.ConceptFunction", false, false) != null);
    return ((ListSequence.fromList(nodes).count() == 1 && SNodeOperations.isInstanceOf(first, "jetbrains.mps.baseLanguage.structure.Expression")) || SNodeOperations.isInstanceOf(first, "jetbrains.mps.baseLanguage.structure.Statement")) && hasProperContainer;
  }

  public static String getErrors(List<SNode> nodes) {
    ExtractMethodRefactoringAnalyzer analyzer = new ExtractMethodRefactoringAnalyzer(nodes);
    if (analyzer.isExitPointsDifferent() && !(analyzer.isAlwaysReturns())) {
      return "There is multiple exit points.";
    }
    if (!(analyzer.hasExitPoints())) {
      if (ListSequence.fromList(analyzer.getOutputVariables()).count() > 1) {
        return "Too many output variables.";
      }
    } else {
      if (ListSequence.fromList(analyzer.getOutputVariables()).count() > 0) {
        return "Too many output variables.";
      }
      if (!(analyzer.isReturnExpressionsNotChangedInStatements() || analyzer.isAlwaysReturns())) {
        return "Too many output variables.";
      }
    }
    return null;
  }

  public static void temp(SNode node) {
    List<SNode> a = SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(node, "creator", true), "jetbrains.mps.baseLanguage.structure.ClassCreator"), "actualArgument", true);
    SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(node, "creator", true), "jetbrains.mps.baseLanguage.structure.ClassCreator"), "actualArgument", true);
    SNodeOperations.replaceWithAnother(node, new ExtractMethodFactory.QuotationClass_v5nwg4_a0a0c0e().createNode(ListSequence.fromList(a).getElement(0)));
  }

  public static class QuotationClass_v5nwg4_a0a0c0e {
    public QuotationClass_v5nwg4_a0a0c0e() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        quotedNode1_3.addReference(SReference.create("baseMethodDeclaration", quotedNode1_3, SModelReference.fromString("r:6f239204-0a4e-4aeb-b636-582aa7e86328(jetbrains.mps.baseLanguage.util.plugin.refactorings@0_1)"), SNodeId.fromString("8155843501977598856")));
        quotedNode1_3.addReference(SReference.create("classConcept", quotedNode1_3, SModelReference.fromString("r:6f239204-0a4e-4aeb-b636-582aa7e86328(jetbrains.mps.baseLanguage.util.plugin.refactorings@0_1)"), SNodeId.fromString("8492459591399162714")));
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = CopyUtil.copy(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("actualArgument", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }
}
