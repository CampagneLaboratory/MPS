package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;

public class IntroduceFieldRefactoring extends IntroduceVariableRefactoring {
  private FieldInitializationPlace myFieldInitialization;

  public IntroduceFieldRefactoring() {
  }

  public void run() {
  }

  public SNode doRefactoring() {
    SNode newDeclaration;
    if (this.myFieldInitialization == FieldInitializationPlace.FIELD) {
      newDeclaration = new _Quotations.QuotationClass_1().createNode(SNodeOperations.copyNode(this.getExpressionType()), SNodeOperations.copyNode(this.getExpression()), this.getName());
    } else {
      newDeclaration = new _Quotations.QuotationClass_2().createNode(SNodeOperations.copyNode(this.getExpressionType()), this.getName());
    }
    SNode classConcept = SNodeOperations.getAncestor(this.getExpression(), "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
    SLinkOperations.addChild(classConcept, "field", newDeclaration);
    SNode assignStatement = new _Quotations.QuotationClass_3().createNode(newDeclaration, SNodeOperations.copyNode(this.getExpression()));
    if (this.myFieldInitialization == FieldInitializationPlace.METHOD) {
      SNodeOperations.insertPrevSiblingChild(SNodeOperations.getAncestor(this.getExpression(), "jetbrains.mps.baseLanguage.structure.Statement", false, false), SNodeOperations.copyNode(assignStatement));
    }
    if (this.myFieldInitialization == FieldInitializationPlace.CONSTRUCTOR) {
      SNode declaration = SNodeOperations.getAncestor(this.getExpression(), "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
      for (SNode constructor : ListSequence.fromList(SLinkOperations.getTargets(declaration, "constructor", true))) {
        SNodeOperations.insertPrevSiblingChild(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(constructor, "body", true), "statement", true)).first(), SNodeOperations.copyNode(assignStatement));
      }
    }
    SNodeOperations.replaceWithAnother(this.getExpression(), new _Quotations.QuotationClass_4().createNode(newDeclaration));
    return newDeclaration;
  }

  public void setFieldInitializationPlace(FieldInitializationPlace place) {
    this.myFieldInitialization = place;
  }

  public boolean isInitialyzeInFieldAvailable() {
    final Wrappers._boolean result = new Wrappers._boolean();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        result.value = ListSequence.fromList(SNodeOperations.getDescendants(IntroduceFieldRefactoring.this.getExpression(), "jetbrains.mps.baseLanguage.structure.LocalVariableReference", true, new String[]{})).isEmpty();
      }
    });
    return result.value;
  }
}
