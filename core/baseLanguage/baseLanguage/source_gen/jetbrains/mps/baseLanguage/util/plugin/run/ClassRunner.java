package jetbrains.mps.baseLanguage.util.plugin.run;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import com.intellij.execution.process.ProcessNotCreatedException;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import org.apache.commons.lang.StringUtils;
import java.io.File;
import java.io.IOException;

public class ClassRunner extends BaseRunner {
  private static Logger LOG = Logger.getLogger(ClassRunner.class);

  private ProcessBuilder myProcessBuilder;

  public ClassRunner(ConfigRunParameters parameters) {
    super(parameters);
  }

  public Process run(final SNode node, final String className) throws ProcessNotCreatedException {
    final List<String> params = ListSequence.fromList(new ArrayList<String>());
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        addJavaCommand(params);
        addClassPath(params, node);
        addVmOptions(params);
        ListSequence.fromList(params).addElement(className);
        addProgramParameters(params);
        ClassRunner.this.myProcessBuilder = new ProcessBuilder(params);

        String workingDir = myRunParameters.getWorkingDirectory();
        if (workingDir != null && StringUtils.isNotEmpty(workingDir)) {
          ClassRunner.this.myProcessBuilder.directory(new File(workingDir));
        }
      }
    });

    try {
      return this.myProcessBuilder.start();
    } catch (IOException e) {
      LOG.error("Can't run class " + className + ": " + e.getMessage(), e);
      throw new ProcessNotCreatedException(e.getMessage(), e, this.getCommandLine());
    }
  }

  public String getCommandString() {
    return this.getCommandString(this.myProcessBuilder);
  }
}
