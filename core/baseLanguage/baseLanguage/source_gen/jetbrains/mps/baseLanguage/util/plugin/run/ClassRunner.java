package jetbrains.mps.baseLanguage.util.plugin.run;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import com.intellij.execution.process.ProcessNotCreatedException;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.io.File;
import java.io.IOException;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class ClassRunner extends BaseRunner {
  private static Logger LOG = Logger.getLogger(ClassRunner.class);

  private ProcessBuilder myProcessBuilder;
  private boolean myIsDebug;
  private String myDebugArguments;

  public ClassRunner() {
  }

  public void setDebugArguments(String arguments) {
    this.myIsDebug = true;
    this.myDebugArguments = arguments;
  }

  public Process run(List<SNode> nodes) throws ProcessNotCreatedException {
    SNode classConcept = getClassConcept(nodes);
    return this.run(classConcept, null, null, null);
  }

  public Process run(final SNode classConcept, final String programParams, final String vmParams, final String workingDir) throws ProcessNotCreatedException {
    final Wrappers._T<String> className = new Wrappers._T<String>();
    final List<String> params = ListSequence.fromList(new ArrayList<String>());
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        className.value = INamedConcept_Behavior.call_getFqName_1213877404258(classConcept);
        ClassRunner.this.addJavaCommand(params);
        if (ClassRunner.this.myIsDebug) {
          ClassRunner.this.addDebug(params, ClassRunner.this.myDebugArguments);
        }
        ClassRunner.this.addClassPath(params, classConcept);
        if (vmParams != null && StringUtils.isNotEmpty(vmParams)) {
          String[] paramList = ClassRunner.this.splitParams(vmParams);
          ListSequence.fromList(params).addSequence(Sequence.fromIterable(Sequence.fromArray(paramList)));
        }
        ListSequence.fromList(params).addElement(className.value);
        if (programParams != null && StringUtils.isNotEmpty(programParams)) {
          String[] paramList = ClassRunner.this.splitParams(programParams);
          ListSequence.fromList(params).addSequence(Sequence.fromIterable(Sequence.fromArray(paramList)));
        }
        ClassRunner.this.myProcessBuilder = new ProcessBuilder(params);

        if (workingDir != null && StringUtils.isNotEmpty(workingDir)) {
          ClassRunner.this.myProcessBuilder.directory(new File(workingDir));
        }
      }
    });

    try {
      return this.myProcessBuilder.start();
    } catch (IOException e) {
      LOG.error("Can't run class " + className.value + ": " + e.getMessage(), e);
      throw new ProcessNotCreatedException(e.getMessage(), e, this.getCommandLine(workingDir));
    }
  }

  public String getCommandString() {
    return this.getCommandString(this.myProcessBuilder);
  }

  public static SNode getClassConcept(List<SNode> nodes) {
    SNode classConcept = null;
    if (nodes != null) {
      for (SNode node : ListSequence.fromList(nodes)) {
        SNode n = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", true, false);
        if ((n != null)) {
          classConcept = n;
          break;
        }
      }
    }
    return classConcept;
  }
}
