package jetbrains.mps.baseLanguage.util.plugin.run;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.io.File;
import java.io.IOException;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class ClassRunner extends BaseRunner {
  private ProcessBuilder processBuilder;
  private boolean myIsDebug;
  private String myDebugArguments;

  public ClassRunner() {
  }

  public void setDebugArguments(String arguments) {
    this.myIsDebug = true;
    this.myDebugArguments = arguments;
  }

  public Process run(List<SNode> nodes) {
    SNode classConcept = getClassConcept(nodes);
    return this.run(classConcept, null, null, null);
  }

  public Process run(SNode classConcept, String programParams, String vmParams, String workingDir) {
    String className = INamedConcept_Behavior.call_getFqName_1213877404258(classConcept);
    List<String> params = ListSequence.fromList(new ArrayList<String>());

    this.addJavaCommand(params);
    if (this.myIsDebug) {
      this.addDebug(params, this.myDebugArguments);
    }
    this.addClassPath(params, classConcept);
    if (vmParams != null && StringUtils.isNotEmpty(vmParams)) {
      String[] paramList = this.splitParams(vmParams);
      ListSequence.fromList(params).addSequence(Sequence.fromIterable(Sequence.fromArray(paramList)));
    }
    ListSequence.fromList(params).addElement(className);
    if (programParams != null && StringUtils.isNotEmpty(programParams)) {
      String[] paramList = this.splitParams(programParams);
      ListSequence.fromList(params).addSequence(Sequence.fromIterable(Sequence.fromArray(paramList)));
    }
    this.processBuilder = new ProcessBuilder(params);

    if (workingDir != null && StringUtils.isNotEmpty(workingDir)) {
      this.processBuilder.directory(new File(workingDir));
    }

    try {
      return this.processBuilder.start();
    } catch (IOException e) {
      Logger.getLogger(ClassRunner.class).error("Can't run " + className, e);
      return null;
    }
  }

  public String getCommandString() {
    return this.getCommandString(this.processBuilder);
  }

  public static SNode getClassConcept(List<SNode> nodes) {
    SNode classConcept = null;
    if (nodes != null) {
      for (SNode node : ListSequence.fromList(nodes)) {
        SNode n = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", true, false);
        if ((n != null)) {
          classConcept = n;
          break;
        }
      }
    }
    return classConcept;
  }
}
