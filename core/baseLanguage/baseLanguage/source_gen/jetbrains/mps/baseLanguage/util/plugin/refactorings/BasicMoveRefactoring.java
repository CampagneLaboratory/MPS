package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class BasicMoveRefactoring {
  protected final SNode moving;
  protected final SNode destination;
  protected SNode replacing = null;
  protected SearchResults<SNode> usages = new SearchResults<SNode>();
  private boolean isChangingModel = false;

  public BasicMoveRefactoring(SNode moving, SNode destination) {
    this.moving = moving;
    this.destination = destination;
  }

  public void setUssages(SearchResults<SNode> usages) {
    this.usages = usages;
  }

  public SearchResults<SNode> getUsages() {
    return this.usages;
  }

  public void doRefactoring() {
    this.setIsChangingModel();
    this.correctMoving();
    this.createCopy();
    for (SearchResult<SNode> result : ListSequence.fromList(this.usages.getSearchResults())) {
      this.replaceSingleUsage(result.getObject());
    }
    this.deleteOld();
  }

  public void replaceSingleUsage(SNode usage) {
    if (this.isChangingModel) {
      MoveRefactoringUtils.addImportIfNeed(SNodeOperations.getModel(usage), SNodeOperations.getModel(this.destination));
    }
  }

  protected void createCopy() {
    this.replacing = SNodeOperations.copyNode(this.moving);
    MoveRefactoringUtils.addNodeAtLink(this.destination, this.replacing);
  }

  protected void deleteOld() {
    SNodeOperations.detachNode(this.moving);
  }

  protected void correctMoving() {
  }

  private void setIsChangingModel() {
    this.isChangingModel = (SNodeOperations.getModel(this.destination) != SNodeOperations.getModel(this.moving));
  }
}
