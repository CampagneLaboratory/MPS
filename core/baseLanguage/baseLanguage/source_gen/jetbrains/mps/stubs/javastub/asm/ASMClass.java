package jetbrains.mps.stubs.javastub.asm;

/*Generated by MPS */

import org.objectweb.asm.tree.ClassNode;
import java.util.List;
import java.util.ArrayList;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.signature.SignatureReader;
import org.objectweb.asm.signature.SignatureVisitor;
import org.objectweb.asm.tree.FieldNode;
import org.objectweb.asm.tree.MethodNode;
import org.objectweb.asm.tree.AnnotationNode;
import org.objectweb.asm.Opcodes;
import java.util.Collections;

public class ASMClass {
  private ClassNode myNode;
  private List<ASMTypeVariable> myTypeVariables = new ArrayList<ASMTypeVariable>();
  private List<ASMType> myGenericInterfaces = new ArrayList<ASMType>();
  private List<ASMField> myFields = new ArrayList<ASMField>();
  private List<ASMMethod> myMethods = new ArrayList<ASMMethod>();
  private List<ASMMethod> myConstructors = new ArrayList<ASMMethod>();
  private List<ASMAnnotation> myAnnotations;
  private ASMType myGenericSuperclass;

  public ASMClass(ClassReader reader) {
    this.myNode = new ClassNode();
    reader.accept(this.myNode, ClassReader.SKIP_CODE & ClassReader.SKIP_DEBUG & ClassReader.SKIP_FRAMES);
    if (this.myNode.signature != null) {
      SignatureReader signReader = new SignatureReader(this.myNode.signature);
      signReader.accept(new SignatureVisitorAdapter() {
        public SignatureVisitor visitSuperclass() {
          return new ASMClass.ClassifierSignatureVisitor() {
            public void visitEnd() {
              ASMClassType cls = new ASMClassType(this.myName);
              ASMClass.this.myGenericSuperclass = new ASMParameterizedType(cls, this.myParameters);
            }
          };
        }

        public SignatureVisitor visitInterface() {
          return new ASMClass.ClassifierSignatureVisitor() {
            public void visitEnd() {
              ASMClassType cls = new ASMClassType(this.myName);
              ASMClass.this.myGenericInterfaces.add(new ASMParameterizedType(cls, this.myParameters));
            }
          };
        }
      });
    } else {
      if (this.myNode.superName != null) {
        this.myGenericSuperclass = new ASMClassType(this.myNode.superName.replace('/', '.'));
      }
      for (String intfc : (List<String>) this.myNode.interfaces) {
        this.myGenericInterfaces.add(new ASMClassType(intfc.replace('/', '.')));
      }
    }
    if (this.myNode.signature != null) {
      this.myTypeVariables.addAll(TypeUtil.getFormalTypeParameters(this.myNode.signature));
    }
    for (FieldNode fn : (List<FieldNode>) this.myNode.fields) {
      this.myFields.add(new ASMField(fn));
    }
    for (MethodNode mn : (List<MethodNode>) this.myNode.methods) {
      ASMMethod am = new ASMMethod(mn);
      if (am.isConstructor()) {
        this.myConstructors.add(am);
      } else {
        this.myMethods.add(am);
      }
    }
    if (this.myNode.visibleAnnotations != null || this.myNode.invisibleAnnotations != null) {
      int size = ((this.myNode.visibleAnnotations != null ?
        this.myNode.visibleAnnotations.size() :
        0
      )) + ((this.myNode.invisibleAnnotations != null ?
        this.myNode.invisibleAnnotations.size() :
        0
      ));
      this.myAnnotations = new ArrayList<ASMAnnotation>(size);
      if (this.myNode.visibleAnnotations != null) {
        for (AnnotationNode an : (List<AnnotationNode>) this.myNode.visibleAnnotations) {
          ASMAnnotation aa = new ASMAnnotation(an);
          this.myAnnotations.add(aa);
        }
      }
      if (this.myNode.invisibleAnnotations != null) {
        for (AnnotationNode an : (List<AnnotationNode>) this.myNode.invisibleAnnotations) {
          ASMAnnotation aa = new ASMAnnotation(an);
          this.myAnnotations.add(aa);
        }
      }
    }
  }

  public boolean isAbstract() {
    return (this.myNode.access & Opcodes.ACC_ABSTRACT) != 0;
  }

  public boolean isPublic() {
    return (this.myNode.access & Opcodes.ACC_PUBLIC) != 0;
  }

  public boolean isFinal() {
    return (this.myNode.access & Opcodes.ACC_FINAL) != 0;
  }

  public boolean isDeprecated() {
    return (Opcodes.ACC_DEPRECATED & this.myNode.access) != 0;
  }

  public String getName() {
    return this.myNode.name;
  }

  public String getFqName() {
    return this.myNode.name.replace("/", ".");
  }

  public List<ASMTypeVariable> getTypeParameters() {
    return Collections.unmodifiableList(this.myTypeVariables);
  }

  public List<ASMType> getGenericInterfaces() {
    return Collections.unmodifiableList(this.myGenericInterfaces);
  }

  public List<ASMAnnotation> getAnnotations() {
    return ((List<ASMAnnotation>) (this.myAnnotations == null ?
      Collections.emptyList() :
      Collections.unmodifiableList(this.myAnnotations)
    ));
  }

  public ASMType getGenericSuperclass() {
    return this.myGenericSuperclass;
  }

  public List<ASMField> getDeclaredFields() {
    return Collections.unmodifiableList(this.myFields);
  }

  public List<ASMMethod> getDeclaredMethods() {
    return Collections.unmodifiableList(this.myMethods);
  }

  public List<ASMMethod> getDeclaredConstructors() {
    return Collections.unmodifiableList(this.myConstructors);
  }

  private class ClassifierSignatureVisitor_old extends SignatureVisitorAdapter {
    /*package*/ String myName;
    /*package*/ List<ASMType> myParameters = new ArrayList<ASMType>();

    private ClassifierSignatureVisitor_old() {
    }

    public SignatureVisitor visitTypeArgument(char wildcard) {
      return new SignatureVisitorAdapter() {
        public void visitClassType(String name) {
          ClassifierSignatureVisitor_old.this.myParameters.add(new ASMClassType(name.replace('/', '.')));
        }

        public void visitTypeVariable(String name) {
          ClassifierSignatureVisitor_old.this.myParameters.add(new ASMTypeVariable(name));
        }
      };
    }

    public void visitClassType(String name) {
      this.myName = name.replace('/', '.');
    }
  }

  private class ClassifierSignatureVisitor extends SignatureVisitorAdapter {
    /*package*/ String myName;
    /*package*/ List<ASMType> myParameters;
    /*package*/ ASMClass.ClassifierSignatureVisitor myParentVisitor = null;

    public ClassifierSignatureVisitor() {
    }

    public ClassifierSignatureVisitor(ASMClass.ClassifierSignatureVisitor parentVisitor) {
      this.myParentVisitor = parentVisitor;
    }

    public SignatureVisitor visitTypeArgument(char wildcard) {
      return new ASMClass.ClassifierSignatureVisitor(this) {
        public void visitTypeVariable(String name) {
          if (this.myParentVisitor != null) {
            if (this.myParentVisitor.myParameters == null) {
              this.myParentVisitor.myParameters = new ArrayList<ASMType>();
            }
            this.myParentVisitor.myParameters.add(new ASMTypeVariable(name));
          }
        }

        public void visitEnd() {
          if (this.myParentVisitor != null) {
            ASMClassType cls = new ASMClassType(this.myName);
            if (this.myParentVisitor.myParameters == null) {
              this.myParentVisitor.myParameters = new ArrayList<ASMType>();
            }
            this.myParentVisitor.myParameters.add(new ASMParameterizedType(cls, this.myParameters));
          }
        }
      };
    }

    public void visitClassType(String name) {
      this.myName = name.replace('/', '.');
    }
  }
}
