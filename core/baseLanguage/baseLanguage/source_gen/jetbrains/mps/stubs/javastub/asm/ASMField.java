package jetbrains.mps.stubs.javastub.asm;

/*Generated by MPS */

import org.objectweb.asm.tree.FieldNode;
import java.util.List;
import java.util.ArrayList;
import org.objectweb.asm.tree.AnnotationNode;
import org.objectweb.asm.Opcodes;
import java.util.Collections;

public class ASMField {
  private FieldNode myField;
  private List<ASMAnnotation> myAnnotations;
  private ASMType myType;
  private ASMType myGenericType;

  /*package*/ ASMField(FieldNode field) {
    this.myField = field;
    if (this.myField.visibleAnnotations != null) {
      this.myAnnotations = new ArrayList<ASMAnnotation>(this.myField.visibleAnnotations.size());
      for (AnnotationNode an : (List<AnnotationNode>) this.myField.visibleAnnotations) {
        ASMAnnotation aa = new ASMAnnotation(an);
        this.myAnnotations.add(aa);
      }
    }
    this.myType = TypeUtil.fromDescriptor(this.myField.desc);
    if (this.myField.signature != null) {
      this.myGenericType = TypeUtil.getFieldType(this.myField.signature);
    } else {
      this.myGenericType = this.myType;
    }
  }

  public String getName() {
    return this.myField.name;
  }

  public boolean isPrivate() {
    return (Opcodes.ACC_PRIVATE & this.myField.access) != 0;
  }

  public boolean isPublic() {
    return (Opcodes.ACC_PUBLIC & this.myField.access) != 0;
  }

  public boolean isProtected() {
    return (Opcodes.ACC_PROTECTED & this.myField.access) != 0;
  }

  public boolean isDeprecated() {
    return (Opcodes.ACC_DEPRECATED & this.myField.access) != 0;
  }

  public boolean isPackageProtected() {
    return !(this.isPublic()) && !(this.isPrivate()) && !(this.isProtected());
  }

  public boolean isStatic() {
    return (Opcodes.ACC_STATIC & this.myField.access) != 0;
  }

  public boolean isEnumConstant() {
    return (Opcodes.ACC_ENUM & this.myField.access) != 0;
  }

  public boolean isCompilerGenerated() {
    return this.myField.name.equals("$assertionsDisabled");
  }

  public ASMType getType() {
    return this.myType;
  }

  public ASMType getGenericType() {
    return this.myGenericType;
  }

  public List<ASMAnnotation> getAnnotations() {
    return ((List<ASMAnnotation>) (this.myAnnotations == null ?
      Collections.emptyList() :
      Collections.unmodifiableList(this.myAnnotations)
    ));
  }
}
