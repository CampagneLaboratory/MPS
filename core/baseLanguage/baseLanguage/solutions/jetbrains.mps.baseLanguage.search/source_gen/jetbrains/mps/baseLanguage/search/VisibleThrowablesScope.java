package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.BaseAdapter;

public class VisibleThrowablesScope extends VisibleClassifiersScope {
  public VisibleThrowablesScope(@NotNull SNode contextNode, int constraint, IScope scope) {
    super(contextNode, constraint, scope);
  }

  @NotNull
  public List<SNode> getClassifiers() {
    List<SNode> result = new ArrayList<SNode>();
    SNode throwable = SModelUtil.findNodeByFQName("java.lang.Throwable", SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"), GlobalScope.getInstance());
    for (SNode cls : super.getClassifiers()) {
      if (ClassifierAndSuperClassifiersCache.getInstance(cls).getClassifiers().contains(BaseAdapter.fromNode(throwable))) {
        result.add(cls);
      }
    }
    return result;
  }
}
