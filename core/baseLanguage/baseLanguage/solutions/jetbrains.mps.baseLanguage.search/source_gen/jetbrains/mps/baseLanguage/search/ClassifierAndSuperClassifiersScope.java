package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Classifier;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration;
import jetbrains.mps.baseLanguage.structure.EnumClass;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.util.Condition;
import jetbrains.mps.baseLanguage.structure.ClassConcept;
import jetbrains.mps.baseLanguage.structure.ConstructorDeclaration;
import jetbrains.mps.smodel.search.IReferenceInfoResolver;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SModelReference;

public class ClassifierAndSuperClassifiersScope extends AbstractClassifiersScope {
  private Classifier myTopClassifier;
  private int myOriginalConstraint;

  public ClassifierAndSuperClassifiersScope(@Nullable Classifier topClassifier) {
    this(topClassifier, IClassifiersSearchScope.ANYTHING);
  }

  public ClassifierAndSuperClassifiersScope(@Nullable Classifier topClassifier, int constraint) {
    super(constraint ^ (constraint & (IClassifiersSearchScope.INSTANCE_METHOD | IClassifiersSearchScope.STATIC_METHOD | IClassifiersSearchScope.CONSTRUCTOR | IClassifiersSearchScope.INSTANCE_FIELD | IClassifiersSearchScope.STATIC_FIELD)));
    this.myTopClassifier = topClassifier;
    this.myOriginalConstraint = constraint;
  }

  public ClassifierAndSuperClassifiersScope(@Nullable SNode topClassifier, int constraint) {
    this(((Classifier) SNodeOperations.getAdapter(topClassifier)), constraint);
  }

  public ClassifierAndSuperClassifiersScope(@Nullable SNode topClassifier) {
    this(((Classifier) SNodeOperations.getAdapter(topClassifier)));
  }

  @NotNull
  public List<SNode> getClassifiers() {
    if (this.myTopClassifier == null) {
      return new ArrayList<SNode>();
    }
    return (List<SNode>) BaseAdapter.toNodes(ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getClassifiers());
  }

  @NotNull
  public List<SNode> getMethods() {
    if (this.myTopClassifier == null) {
      return new ArrayList<SNode>();
    }
    return new ArrayList<SNode>(ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getMethods());
  }

  @NotNull
  public List<SNode> getOverriddenMethods(SNode method) {
    if (this.myTopClassifier == null) {
      return new ArrayList<SNode>();
    }
    return new ArrayList<SNode>(ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getOverriddenMethods(method));
  }

  public List<SNode> getMethodsByName(String methodName) {
    if (this.myTopClassifier == null) {
      return new ArrayList<SNode>();
    }
    return new ArrayList<SNode>(ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getMethodsByName(methodName));
  }

  @NotNull
  public List<SNode> getFields() {
    if (this.myTopClassifier == null) {
      return new ArrayList<SNode>();
    }
    return new ArrayList<SNode>(ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getFields());
  }

  public SNode getFieldByName(String name) {
    if (this.myTopClassifier == null) {
      return null;
    }
    return ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getFieldByName(name);
  }

  public SNode getStaticFieldByName(String name) {
    if (this.myTopClassifier == null) {
      return null;
    }
    return ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getStaticFieldByName(name);
  }

  public EnumConstantDeclaration getEnumConstantByName(String name) {
    if (this.myTopClassifier == null) {
      return null;
    }
    if (this.myTopClassifier instanceof EnumClass) {
      EnumClass enumClass = (EnumClass) this.myTopClassifier;
      for (EnumConstantDeclaration ec : enumClass.getEnumConstants()) {
        if (EqualUtil.equals(ec.getName(), name)) {
          return ec;
        }
      }
    }
    return null;
  }

  @NotNull
  public List<SNode> getNodes(Condition<SNode> condition) {
    List<SNode> list = super.getNodes(condition);
    if (this.myTopClassifier instanceof ClassConcept && (this.myOriginalConstraint & IClassifiersSearchScope.CONSTRUCTOR) == IClassifiersSearchScope.CONSTRUCTOR) {
      List<ConstructorDeclaration> constructors = ((ClassConcept) this.myTopClassifier).getConstructors();
      for (ConstructorDeclaration constructor : constructors) {
        if (condition.met(constructor.getNode())) {
          list.add(constructor.getNode());
        }
      }
    }
    if ((this.myOriginalConstraint & (IClassifiersSearchScope.INSTANCE_METHOD | IClassifiersSearchScope.STATIC_METHOD)) != 0) {
      List<SNode> methods = this.getMethods();
      for (SNode method : methods) {
        if (SNodeOperations.isInstanceOf(method, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
          if ((this.myOriginalConstraint & IClassifiersSearchScope.INSTANCE_METHOD) == IClassifiersSearchScope.INSTANCE_METHOD) {
            if (condition.met(method)) {
              list.add(method);
            }
          }
        } else
        if (SNodeOperations.isInstanceOf(method, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
          if ((this.myOriginalConstraint & IClassifiersSearchScope.STATIC_METHOD) == IClassifiersSearchScope.STATIC_METHOD) {
            if (condition.met(method)) {
              list.add(method);
            }
          }
        }
      }
    }
    if ((this.myOriginalConstraint & (IClassifiersSearchScope.INSTANCE_FIELD | IClassifiersSearchScope.STATIC_FIELD)) != 0) {
      List<SNode> fields = this.getFields();
      for (SNode field : fields) {
        if (SNodeOperations.isInstanceOf(field, "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
          if ((this.myOriginalConstraint & IClassifiersSearchScope.INSTANCE_FIELD) == IClassifiersSearchScope.INSTANCE_FIELD) {
            if (condition.met(field)) {
              list.add(field);
            }
          }
        } else
        if (SNodeOperations.isInstanceOf(field, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
          if ((this.myOriginalConstraint & IClassifiersSearchScope.STATIC_FIELD) == IClassifiersSearchScope.STATIC_FIELD) {
            if (condition.met(field)) {
              list.add(field);
            }
          }
        }
      }
    }
    return list;
  }

  @Override
  public IReferenceInfoResolver getReferenceInfoResolver(SNode referenceNode, SNode targetConcept) {
    if (SModelUtil.isAssignableConcept(targetConcept, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration"))) {
      return new IReferenceInfoResolver() {
        public SNode resolve(String referenceInfo, SModelReference targetModelReference) {
          if (referenceInfo == null) {
            return null;
          }
          return ClassifierAndSuperClassifiersScope.this.getFieldByName(referenceInfo);
        }
      };
    }
    if (SModelUtil.isAssignableConcept(targetConcept, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"))) {
      return new IReferenceInfoResolver() {
        public SNode resolve(String referenceInfo, SModelReference targetModelReference) {
          if (referenceInfo == null) {
            return null;
          }
          return ClassifierAndSuperClassifiersScope.this.getStaticFieldByName(referenceInfo);
        }
      };
    }
    if (SModelUtil.isAssignableConcept(targetConcept, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration"))) {
      return new IReferenceInfoResolver() {
        public SNode resolve(String referenceInfo, SModelReference targetModelReference) {
          if (referenceInfo == null) {
            return null;
          }
          return BaseAdapter.fromAdapter(ClassifierAndSuperClassifiersScope.this.getEnumConstantByName(referenceInfo));
        }
      };
    }
    return super.getReferenceInfoResolver(referenceNode, targetConcept);
  }
}
