package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Classifier;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.baseLanguage.structure.ClassConcept;
import jetbrains.mps.baseLanguage.structure.ClassifierType;
import jetbrains.mps.smodel.SModel;

public class BaseLanguageUtil {
  public BaseLanguageUtil() {
  }

  public static boolean isAssignable(Classifier fromClassifier, String toClassifierFqName, IScope scope) {
    Classifier toClassifier = SModelUtil_new.findNodeByFQName(toClassifierFqName, Classifier.class, scope);
    return isAssignable(fromClassifier, toClassifier);
  }

  public static boolean isAssignable(Classifier fromClassifier, Classifier toClassifier) {
    if (fromClassifier == null) {
      return false;
    }
    if (fromClassifier.equals(toClassifier)) {
      return true;
    }
    if ("java.lang.Object".equals(NameUtil.nodeFQName(toClassifier.getNode()))) {
      return true;
    }
    ClassifierAndSuperClassifiersScope scope = new ClassifierAndSuperClassifiersScope(fromClassifier);
    return scope.getClassifiers().contains(toClassifier);
  }

  public static ClassConcept getSuperclass(ClassConcept subClass) {
    ClassifierType superclass = subClass.getSuperclass();
    if (superclass != null) {
      return (ClassConcept) superclass.getClassifier();
    }
    return null;
  }

  public static ClassifierType createObjectClassType(SModel model, IScope scope) {
    ClassConcept objectClass = SModelUtil_new.findNodeByFQName("java.lang.Object", ClassConcept.class, scope);
    ClassifierType objectType = ClassifierType.newInstance(model);
    objectType.setClassifier(objectClass);
    return objectType;
  }

  public static ClassifierType createStringClassType(SModel model, IScope scope) {
    ClassConcept objectClass = SModelUtil_new.findNodeByFQName("java.lang.String", ClassConcept.class, scope);
    ClassifierType objectType = ClassifierType.newInstance(model);
    objectType.setClassifier(objectClass);
    return objectType;
  }
}
