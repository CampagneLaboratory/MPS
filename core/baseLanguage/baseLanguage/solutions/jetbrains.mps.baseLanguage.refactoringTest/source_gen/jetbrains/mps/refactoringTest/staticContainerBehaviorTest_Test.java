package jetbrains.mps.refactoringTest;

/*Generated by MPS */

import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.plugin.ExtractMethodRefactoringParameters;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.plugin.ExtractMethodRefactoring;
import jetbrains.mps.baseLanguage.plugin.ExtractMethodFabric;
import junit.framework.Assert;
import jetbrains.mps.lang.test.matcher.NodesMatcher;

public class staticContainerBehaviorTest_Test extends BaseTransformationTest {

  @Test()
  public void test_staticContainerBehaviorTest() throws Throwable {
    this.initTest("${mps_home}/core/baseLanguage/baseLanguage/baseLanguage.mpr", "r:4dc6ffb5-4bbb-4773-b0b7-e52989ceb56f(jetbrains.mps.refactoringTest)");
    this.runTest(this.getClass().getCanonicalName() + "$TestBody", "test_staticContainerBehaviorTest", true);
  }

  public static class TestBody extends BaseTestBody {

    public void test_staticContainerBehaviorTest() throws Exception {
      this.addNodeById("1230040828066");
      this.addNodeById("1230040828098");
      this.addNodeById("1230040828111");
      this.addNodeById("1230040828116");
      SNode call = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall", null);
      SLinkOperations.setTarget(call, "baseMethodDeclaration", this.getNodeById("1230040828118"), false);
      SNode var = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
      SLinkOperations.setTarget(var, "variableDeclaration", this.getNodeById("1230040828103"), false);
      SLinkOperations.addChild(call, "actualArgument", var);
      SLinkOperations.setTarget(call, "concept", SLinkOperations.getTarget(this.getNodeById("1230040828117"), "concept", false), false);
      SNodeOperations.replaceWithAnother(this.getNodeById("1230040828108"), call);
      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.<SNode>fromArray(this.getNodeById("1230040828090")));
      params.setName("foo");
      ExtractMethodRefactoring ref = ExtractMethodFabric.createRefactoring(params);
      ref.setStaticContainer(this.getNodeById("1230040828112"));
      ref.doRefactor();
      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.<SNode>fromArray(this.getNodeById("1230040828067"), this.getNodeById("1230040828112")), ListSequence.<SNode>fromArray(this.getNodeById("1230040828099"), this.getNodeById("1230040828117"))));
    }

}

}
