package jetbrains.mps.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.dataFlow.DataFlowManager;
import jetbrains.mps.lang.dataFlow.framework.AnalysisResult;
import java.util.Map;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.dataFlow.runtime.NullableVariableState;
import jetbrains.mps.dataFlow.runtime.NullableAnalyser;
import junit.framework.Assert;
import jetbrains.mps.internal.collections.runtime.MapSequence;

public class NullableTest_Test extends BaseTransformationTest {

  @Test()
  public void test_DataFlow() throws Throwable {
    this.initTest("${mps_home}/core/languageDesign/dataFlow/dataFlow.mpr", "r:9fbe113d-f88e-4e20-8d93-4ca75599a781(jetbrains.mps.dataFlow)");
    this.runTest(this.getClass().getCanonicalName() + "$TestBody", "test_DataFlow", true);
  }

  public static class TestBody extends BaseTestBody {

    public void test_DataFlow() throws Exception {
      this.addNodeById("1230538064114");
      Program p = DataFlowManager.getInstance().buildProgramFor(this.getNodeById("1230538345793"));
      AnalysisResult<Map<SNode, NullableVariableState>> result = p.analyze(new NullableAnalyser());
      Map<SNode, NullableVariableState> analysResult = result.get(p.getInstructionsFor(this.getNodeById("1230538435440")).get(0));
      Assert.assertEquals(NullableVariableState.NULLABLE, MapSequence.fromMap(analysResult).get(this.getNodeById("1230538388437")));
    }

}

}
