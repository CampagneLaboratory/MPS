package jetbrains.mps.baseLanguage.internal.helgins;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Iterator;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_InternalThisExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {

  public typeof_InternalThisExpression_InferenceRule() {
  }

  public void applyRule(final SNode ite, final TypeCheckingContext typeCheckingContext) {
    SNode c = SNodeOperations.getAncestor(ite, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
    SNode ct = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    SLinkOperations.setTarget(ct, "classifier", c, false);
    SLinkOperations.getTargets(c, "typeVariableDeclaration", true);
    {
      SNode tvd;
      Iterator<SNode> tvd_iterator = SLinkOperations.getTargets(c, "typeVariableDeclaration", true).iterator();
      while (true) {
        if (!(tvd_iterator.hasNext())) {
          break;
        }
        tvd = tvd_iterator.next();
        {
          SNode tvr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.TypeVariableReference", null);
          SLinkOperations.setTarget(tvr, "typeVariableDeclaration", tvd, false);
          SLinkOperations.addChild(ct, "parameter", tvr);
        }
      }
    }
    {
      SNode _nodeToCheck_1029348928467 = ite;
      BaseIntentionProvider intentionProvider = null;
      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(ite, "r:00000000-0000-4000-0000-011c895903ab(jetbrains.mps.baseLanguage.internal.helgins)", "1202838281158", true), ct, _nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895903ab(jetbrains.mps.baseLanguage.internal.helgins)", "1202838278072", intentionProvider);
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.internal.structure.InternalThisExpression";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
