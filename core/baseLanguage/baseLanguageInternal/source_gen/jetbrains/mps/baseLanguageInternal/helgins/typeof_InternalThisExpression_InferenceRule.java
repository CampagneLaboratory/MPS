package jetbrains.mps.baseLanguageInternal.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import java.util.Iterator;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_InternalThisExpression_InferenceRule implements InferenceRule_Runtime {

  public typeof_InternalThisExpression_InferenceRule() {
  }

  public void applyRule(final SNode ite) {
    SNode c = SNodeOperations.getAncestor(ite, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
    SNode ct = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    SLinkOperations.setTarget(ct, "classifier", c, false);
    SLinkOperations.getTargets(c, "typeVariableDeclaration", true);
    {
      SNode tvd;
      Iterator<SNode> tvd_iterator = SLinkOperations.getTargets(c, "typeVariableDeclaration", true).iterator();
      while (true) {
        if (!(tvd_iterator.hasNext())) {
          break;
        }
        tvd = tvd_iterator.next();
        {
          SNode tvr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.TypeVariableReference", null);
          SLinkOperations.setTarget(tvr, "typeVariableDeclaration", tvd, false);
          SLinkOperations.addChild(ct, "parameter", tvr);
        }
      }
    }
    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(ite, "jetbrains.mps.baseLanguageInternal.helgins", "1202838281158", true), ct, ite, null, "jetbrains.mps.baseLanguageInternal.helgins", "1202838278072");
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguageInternal.structure.InternalThisExpression";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
