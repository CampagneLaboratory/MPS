package jetbrains.mps.baseLanguageInternal.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.BaseMethodCall;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class InternalNewExpression extends BaseMethodCall {
  public static final String concept = "jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression";
  public static final String FQ_CLASS_NAME = "fqClassName";
  public static final String TYPE = "type";
  public static final String PARAMETER = "parameter";

  public InternalNewExpression(SNode node) {
    super(node);
  }

  public String getFqClassName() {
    return this.getProperty(InternalNewExpression.FQ_CLASS_NAME);
  }

  public void setFqClassName(String value) {
    this.setProperty(InternalNewExpression.FQ_CLASS_NAME, value);
  }

  public Type getType() {
    return (Type)this.getChild(Type.class, InternalNewExpression.TYPE);
  }

  public void setType(Type node) {
    super.setChild(InternalNewExpression.TYPE, node);
  }

  public int getParametersCount() {
    return this.getChildCount(InternalNewExpression.PARAMETER);
  }

  public Iterator<Type> parameters() {
    return this.children(Type.class, InternalNewExpression.PARAMETER);
  }

  public List<Type> getParameters() {
    return this.getChildren(Type.class, InternalNewExpression.PARAMETER);
  }

  public void addParameter(Type node) {
    this.addChild(InternalNewExpression.PARAMETER, node);
  }

  public void insertParameter(Type prev, Type node) {
    this.insertChild(prev, InternalNewExpression.PARAMETER, node);
  }


  public static InternalNewExpression newInstance(SModel sm, boolean init) {
    return (InternalNewExpression)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static InternalNewExpression newInstance(SModel sm) {
    return InternalNewExpression.newInstance(sm, false);
  }

}
