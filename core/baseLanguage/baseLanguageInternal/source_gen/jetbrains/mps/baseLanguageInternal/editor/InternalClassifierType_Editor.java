package jetbrains.mps.baseLanguageInternal.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandlerElementKeyMap;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class InternalClassifierType_Editor extends DefaultNodeEditor {

  /* package */AbstractCellListHandler myListHandler_1202148817970;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createAlternation1202148781767(context, node);
  }

  public EditorCell createAlternation1202148781767(EditorContext context, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = InternalClassifierType_Editor.renderingCondition7316_0(node, context, context.getOperationContext().getScope());
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createCollection1202148806286(context, node);
    } else
    {
      editorCell = this.createCollection1202148783422(context, node);
    }
    setupBasic_Alternation_12021487817671202148781767(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createCollection1202148783422(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12021487834221202148783422(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1202148783423(context, node, "["));
    editorCell.addEditorCell(this.createProperty1202148783424(context, node));
    editorCell.addEditorCell(this.createConstant1202148783425(context, node, "extends"));
    editorCell.addEditorCell(this.createRefCell1202148783426(context, node));
    editorCell.addEditorCell(this.createConstant1202148783429(context, node, "]"));
    return editorCell;
  }

  public EditorCell createCollection1202148806286(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_12021488062861202148806286(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1202148806287(context, node, "["));
    editorCell.addEditorCell(this.createProperty1202148806288(context, node));
    editorCell.addEditorCell(this.createConstant1202148806289(context, node, "extends"));
    editorCell.addEditorCell(this.createRefCell1202148806290(context, node));
    editorCell.addEditorCell(this.createConstant1202148806293(context, node, "]"));
    editorCell.addEditorCell(this.createConstant1202148811476(context, node, "<"));
    editorCell.addEditorCell(this.createRefNodeList1202148817970(context, node));
    editorCell.addEditorCell(this.createConstant1202148814343(context, node, ">"));
    return editorCell;
  }

  public EditorCell createConstant1202148783423(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12021487834231202148783423(editorCell, node, context);
    setupLabel_Constant_1202148783423_1202148783423(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1202148783425(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12021487834251202148783425(editorCell, node, context);
    setupLabel_Constant_1202148783425_1202148783425(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1202148783429(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12021487834291202148783429(editorCell, node, context);
    setupLabel_Constant_1202148783429_1202148783429(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1202148806287(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12021488062871202148806287(editorCell, node, context);
    setupLabel_Constant_1202148806287_1202148806287(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1202148806289(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12021488062891202148806289(editorCell, node, context);
    setupLabel_Constant_1202148806289_1202148806289(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1202148806293(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12021488062931202148806293(editorCell, node, context);
    setupLabel_Constant_1202148806293_1202148806293(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1202148811476(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12021488114761202148811476(editorCell, node, context);
    setupLabel_Constant_1202148811476_1202148811476(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1202148814343(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_12021488143431202148814343(editorCell, node, context);
    setupLabel_Constant_1202148814343_1202148814343(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createRefNodeList1202148817970(EditorContext context, SNode node) {
    if (this.myListHandler_1202148817970 == null) {
      this.myListHandler_1202148817970 = new InternalClassifierType_Editor.parameterListHandler_7316_0(node, "parameter", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1202148817970.createCells(context, new CellLayout_Horizontal(), false);
    setupBasic_refNodeList_parameter1202148817970(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.putUserObject(EditorCell.ROLE, this.myListHandler_1202148817970.getElementRole());
    return editorCell;
  }

  public EditorCell createProperty1202148783424_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_property_fqClassName1202148783424(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_property_fqClassName_1202148783424((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty1202148783424(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("fqClassName");
    provider.setNoTargetText("<no fqClassName>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createProperty1202148783424_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefCell1202148783426_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(new InternalClassifierType_Editor._Inline7316_0());
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refCell_classifier1202148783426(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refCell_classifier_1202148783426((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefCell1202148783426(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, context);
    provider.setRole("classifier");
    provider.setNoTargetText("<no classifier>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefCell1202148783426_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createProperty1202148806288_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_property_fqClassName1202148806288(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_property_fqClassName_1202148806288((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty1202148806288(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("fqClassName");
    provider.setNoTargetText("<no fqClassName>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createProperty1202148806288_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefCell1202148806290_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(new InternalClassifierType_Editor._Inline7316_1());
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refCell_classifier1202148806290(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refCell_classifier_1202148806290((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefCell1202148806290(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, context);
    provider.setRole("classifier");
    provider.setNoTargetText("<no classifier>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefCell1202148806290_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }


  private static void setupBasic_Alternation_12021487817671202148781767(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Alternation_1202148781767");
  }

  private static void setupBasic_Collection_12021487834221202148783422(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1202148783422");
  }

  private static void setupBasic_Constant_12021487834231202148783423(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1202148783423");
    StyleSheet_StyleSheet.getSquareBracket(editorCell).apply(editorCell);
  }

  private static void setupBasic_property_fqClassName1202148783424(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_fqClassName");
  }

  private static void setupBasic_Constant_12021487834251202148783425(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1202148783425");
    StyleSheet_StyleSheet.getInternalKeyword(editorCell).apply(editorCell);
  }

  private static void setupBasic_refCell_classifier1202148783426(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refCell_classifier");
  }

  private static void setupBasic_Constant_12021487834291202148783429(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1202148783429");
    StyleSheet_StyleSheet.getSquareBracket(editorCell).apply(editorCell);
  }

  private static void setupBasic_Collection_12021488062861202148806286(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1202148806286");
  }

  private static void setupBasic_Constant_12021488062871202148806287(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1202148806287");
    StyleSheet_StyleSheet.getSquareBracket(editorCell).apply(editorCell);
  }

  private static void setupBasic_property_fqClassName1202148806288(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_fqClassName");
  }

  private static void setupBasic_Constant_12021488062891202148806289(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1202148806289");
    StyleSheet_StyleSheet.getInternalKeyword(editorCell).apply(editorCell);
  }

  private static void setupBasic_refCell_classifier1202148806290(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refCell_classifier");
  }

  private static void setupBasic_Constant_12021488062931202148806293(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1202148806293");
    StyleSheet_StyleSheet.getSquareBracket(editorCell).apply(editorCell);
  }

  private static void setupBasic_Constant_12021488114761202148811476(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1202148811476");
  }

  private static void setupBasic_Constant_12021488143431202148814343(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1202148814343");
  }

  private static void setupBasic_refNodeList_parameter1202148817970(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_parameter");
  }

  private static void setupLabel_Constant_1202148783423_1202148783423(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_property_fqClassName_1202148783424(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1202148783425_1202148783425(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refCell_classifier_1202148783426(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1202148783429_1202148783429(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1202148806287_1202148806287(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_property_fqClassName_1202148806288(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1202148806289_1202148806289(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refCell_classifier_1202148806290(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1202148806293_1202148806293(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1202148811476_1202148811476(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1202148814343_1202148814343(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_parameter_1202148817970(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static boolean renderingCondition7316_0(SNode node, EditorContext editorContext, IScope scope) {
    return SLinkOperations.getCount(node, "parameter") > 0;
  }

  public static class _Inline7316_0 extends AbstractCellProvider {

    public _Inline7316_0() {
      super();
    }

    public EditorCell createEditorCell(EditorContext context) {
      return this.createEditorCell(context, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext context, SNode node) {
      return this.createProperty1202148783428(context, node);
    }

    public EditorCell createProperty1202148783428_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
      CellProviderWithRole provider = aProvider;
      provider.setAuxiliaryCellProvider(null);
      EditorCell editorCell = provider.createEditorCell(context);
      setupBasic_property_name1202148783428(editorCell, node, context);
      if (editorCell instanceof EditorCell_Label) {
        setupLabel_property_name_1202148783428((EditorCell_Label)editorCell, node, context);
      }
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      return editorCell;
    }

    public EditorCell createProperty1202148783428(EditorContext context, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, context);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      provider.setAllowsEmptyTarget(false);
      EditorCell cellWithRole = this.createProperty1202148783428_internal(context, node, provider);
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = context.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
      } else
      return cellWithRole;
    }


    private static void setupBasic_property_name1202148783428(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("property_name");
    }

    private static void setupLabel_property_name_1202148783428(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}
  public static class _Inline7316_1 extends AbstractCellProvider {

    public _Inline7316_1() {
      super();
    }

    public EditorCell createEditorCell(EditorContext context) {
      return this.createEditorCell(context, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext context, SNode node) {
      return this.createProperty1202148806292(context, node);
    }

    public EditorCell createProperty1202148806292_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
      CellProviderWithRole provider = aProvider;
      provider.setAuxiliaryCellProvider(null);
      EditorCell editorCell = provider.createEditorCell(context);
      setupBasic_property_name1202148806292(editorCell, node, context);
      if (editorCell instanceof EditorCell_Label) {
        setupLabel_property_name_1202148806292((EditorCell_Label)editorCell, node, context);
      }
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      return editorCell;
    }

    public EditorCell createProperty1202148806292(EditorContext context, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, context);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      provider.setAllowsEmptyTarget(false);
      EditorCell cellWithRole = this.createProperty1202148806292_internal(context, node, provider);
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = context.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
      } else
      return cellWithRole;
    }


    private static void setupBasic_property_name1202148806292(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("property_name");
    }

    private static void setupLabel_property_name_1202148806292(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}
  public static class parameterListHandler_7316_0 extends RefNodeListHandler {

    public parameterListHandler_7316_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
          elementCell.addKeyMap(new RefNodeListHandlerElementKeyMap(this, ","));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      {
        EditorCell_Constant editorCell = new EditorCell_Constant(context, this.getOwner(), ",");
        editorCell.setSelectable(false);
        return editorCell;
      }
    }

}

}
