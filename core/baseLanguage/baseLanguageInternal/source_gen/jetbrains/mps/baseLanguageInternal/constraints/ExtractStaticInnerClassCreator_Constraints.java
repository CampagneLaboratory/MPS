package jetbrains.mps.baseLanguageInternal.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ConstraintsDataHolder;
import java.util.Map;
import jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider;
import java.util.HashMap;
import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.PresentationReferentConstraintContext;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.ConstructorDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SNodePointer;

public class ExtractStaticInnerClassCreator_Constraints extends ConstraintsDataHolder {
  public ExtractStaticInnerClassCreator_Constraints() {
  }

  public String getConceptFqName() {
    return "jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassCreator";
  }

  public Map<String, INodeReferentSearchScopeProvider> getNodeNonDefaultSearchScopeProviders() {
    HashMap<String, INodeReferentSearchScopeProvider> result = new HashMap<String, INodeReferentSearchScopeProvider>();
    result.put("baseMethodDeclaration", new BaseNodeReferenceSearchScopeProvider() {
      public boolean hasPresentation() {
        return true;
      }

      public String getPresentation(final IOperationContext operationContext, final PresentationReferentConstraintContext _context) {
        if (_context.getInEditor()) {
          return Classifier_Behavior.call_getNestedNameInContext_8540045600162183880(SNodeOperations.cast(SNodeOperations.getParent(_context.getParameterNode()), "jetbrains.mps.baseLanguage.structure.Classifier"), _context.getEnclosingNode());
        }
        if (_context.getVisible()) {
          return ConstructorDeclaration_Behavior.call_getPresentationInContext_983626226385657373(_context.getParameterNode(), _context.getEnclosingNode());
        } else {
          return SPropertyOperations.getString(_context.getParameterNode(), "name");
        }
      }

      public void registerSelf(ModelConstraintsManager manager) {
      }

      public void unRegisterSelf(ModelConstraintsManager manager) {
      }

      public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
        List<SNode> res = new ArrayList<SNode>();
        SNode context = ((_context.getReferenceNode() != null) ?
          _context.getReferenceNode() :
          _context.getEnclosingNode()
        );
        for (SNode n : SNodeOperations.getAncestors(context, "jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassExpression", false)) {
          if ((SLinkOperations.getTarget(n, "innerClass", true) != null)) {
            ListSequence.fromList(res).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(n, "innerClass", true), "constructor", true)));
          }
        }
        return res;
      }

      public SNodePointer getSearchScopeValidatorNodePointer() {
        return new SNodePointer("r:1ce54900-c35b-4aa5-b24f-b47c871a6d6f(jetbrains.mps.baseLanguageInternal.constraints)", "5822086619725599108");
      }
    });
    return result;
  }
}
