package jetbrains.mps.baseLanguage.tuples.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.closures.constraints.ClassifierTypeUtil;
import jetbrains.mps.smodel.SModelUtil_new;

public class Tuple_classifier_supertypeOf_indexedTupleType_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public Tuple_classifier_supertypeOf_indexedTupleType_SubtypingRule() {
  }

  public List<SNode> getSubOrSuperTypes(SNode itt, TypeCheckingContext typeCheckingContext) {
    List<SNode> result = new ArrayList<SNode>();
    String clname = "Tuples._" + ListSequence.fromList(SLinkOperations.getTargets(itt, "componentType", true)).count();
    SModel rtmodel = SNodeOperations.getModel(SLinkOperations.getTarget(new _Quotations.QuotationClass_7().createNode(typeCheckingContext), "classifier", false));
    for (SNode ct : SModelOperations.getNodes(rtmodel, "jetbrains.mps.baseLanguage.structure.Classifier")) {
      if ((clname).equals(SPropertyOperations.getString(ct, "name"))) {
        SNode supertype = new _Quotations.QuotationClass_8().createNode(ct, typeCheckingContext);
        ListSequence.fromList(result).addElement(supertype);
        for (SNode comptype : SLinkOperations.getTargets(itt, "componentType", true)) {
          SNode javatype = ClassifierTypeUtil.getTypeCoercedToClassifierType(comptype);
          ListSequence.fromList(SLinkOperations.getTargets(supertype, "parameter", true)).addElement(SNodeOperations.copyNode(javatype));
        }
      }
    }
    return result;
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleType";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean isWeak() {
    return true;
  }
}
