package jetbrains.mps.baseLanguage.tuples.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ConstraintsDataHolder;
import java.util.Map;
import jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider;
import java.util.HashMap;
import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.baseLanguage.search.VisibleClassifiersScope;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.util.Condition;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;

public class NamedTupleType_Constraints extends ConstraintsDataHolder {
  public NamedTupleType_Constraints() {
  }

  public String getConceptFqName() {
    return "jetbrains.mps.baseLanguage.tuples.structure.NamedTupleType";
  }

  public Map<String, INodeReferentSearchScopeProvider> getNodeNonDefaultSearchScopeProviders() {
    HashMap<String, INodeReferentSearchScopeProvider> result = new HashMap<String, INodeReferentSearchScopeProvider>();
    result.put("classifier", new BaseNodeReferenceSearchScopeProvider() {
      public void registerSelf(ModelConstraintsManager manager) {
      }

      public void unRegisterSelf(ModelConstraintsManager manager) {
      }

      public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
        return new VisibleClassifiersScope(((_context.getReferenceNode() == null) ?
          _context.getEnclosingNode() :
          _context.getReferenceNode()
        ), IClassifiersSearchScope.ANYTHING, operationContext.getScope()) {
          protected List<SNode> getNodesFormClassifiersList(List<SNode> classifiers, int constraint, Condition<SNode> condition) {
            List<SNode> result = new ArrayList<SNode>();
            for (SNode classifier : classifiers) {
              if (SNodeOperations.isInstanceOf(classifier, "jetbrains.mps.baseLanguage.tuples.structure.NamedTupleDeclaration")) {
                result.add(classifier);
              }
            }
            return result;
          }
        };
      }

      public SNodePointer getSearchScopeValidatorNodePointer() {
        return new SNodePointer("r:3d04bd03-b6d9-4be1-8a52-d7b756e1d85b(jetbrains.mps.baseLanguage.tuples.constraints)", "1652220223504359703");
      }
    });
    return result;
  }
}
