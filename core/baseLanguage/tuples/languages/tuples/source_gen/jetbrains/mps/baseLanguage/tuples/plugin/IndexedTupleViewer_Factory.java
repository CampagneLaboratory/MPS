package jetbrains.mps.baseLanguage.tuples.plugin;

/*Generated by MPS */

import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapperFactory;
import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapper;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaValue;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaObjectValue;
import java.util.List;
import jetbrains.mps.debug.runtime.java.programState.watchables.CustomJavaWatchable;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaArrayValue;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaPrimitiveValue;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaStringValue;

public class IndexedTupleViewer_Factory extends ValueWrapperFactory {
  public IndexedTupleViewer_Factory() {
  }

  public ValueWrapper createValueWrapper(JavaValue value) {
    return new IndexedTupleViewer_Factory.IndexedTupleViewer_Wrapper(value);
  }

  @Override
  public boolean canWrapValue(JavaValue value) {
    if (value instanceof JavaObjectValue) {
      return ((JavaObjectValue) value).getClassFqName().startsWith("jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple$_");
    }
    return false;
  }

  public static class IndexedTupleViewer_Wrapper extends ValueWrapper {
    public IndexedTupleViewer_Wrapper(JavaValue value) {
      super(value);
    }

    public List<CustomJavaWatchable> getSubvaluesImpl() {
      JavaValue value = ((JavaObjectValue) myWrappedValue).getFieldValue("values");
      JavaArrayValue values = (JavaArrayValue) value;
      List<CustomJavaWatchable> result = ListSequence.fromList(new ArrayList<CustomJavaWatchable>());
      for (JavaValue elementValue : values.getAllElements()) {
        ListSequence.fromList(result).addElement(new TuplesWatchables.MyWatchable_element(JavaObjectValue.tryToWrap(elementValue), "element"));
      }
      return result;
    }

    @Override
    public String getValuePresentation() {
      StringBuilder sb = new StringBuilder("tuple [");
      JavaValue value = ((JavaObjectValue) myWrappedValue).getFieldValue("values");
      JavaArrayValue values = (JavaArrayValue) value;
      int index = 0;
      int size = values.getSize();
      for (JavaValue elementValue : values.getAllElements()) {
        if (elementValue instanceof JavaPrimitiveValue) {
          sb.append(((JavaPrimitiveValue) elementValue).getJavaValue());
        } else if (elementValue instanceof JavaStringValue) {
          sb.append("\"");
          sb.append(((JavaStringValue) elementValue).getJavaStringValue());
          sb.append("\"");
        } else if (elementValue instanceof JavaObjectValue) {
          JavaValue tostring = ((JavaObjectValue) elementValue).executeMethod("toString", "()Ljava/lang/String;");
          sb.append(((JavaStringValue) tostring).getJavaStringValue());
        } else {
          sb.append("item");
        }
        if (index < size - 1) {
          sb.append(", ");
        }
        index++;
      }
      sb.append("]");
      return sb.toString();
    }
  }
}
