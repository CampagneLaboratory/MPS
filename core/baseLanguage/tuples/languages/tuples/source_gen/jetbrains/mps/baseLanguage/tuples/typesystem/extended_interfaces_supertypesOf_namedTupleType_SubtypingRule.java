package jetbrains.mps.baseLanguage.tuples.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class extended_interfaces_supertypesOf_namedTupleType_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public extended_interfaces_supertypesOf_namedTupleType_SubtypingRule() {
  }

  public List<SNode> getSubOrSuperTypes(SNode namedTupleType, TypeCheckingContext typeCheckingContext) {
    List<SNode> result = new ArrayList<SNode>();
    for (SNode ct : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(namedTupleType, "classifier", false), "extends", true))) {
      List<SNode> paramTypes = new ArrayList<SNode>();
      for (SNode pt : ListSequence.fromList(SLinkOperations.getTargets(ct, "parameter", true))) {
        if (SNodeOperations.isInstanceOf(pt, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
          ListSequence.fromList(paramTypes).addElement(ListSequence.fromList(ListSequence.fromList(SLinkOperations.getTargets(namedTupleType, "parameter", true)).toListSequence()).getElement(SNodeOperations.getIndexInParent(SLinkOperations.getTarget(SNodeOperations.cast(pt, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false))));
        } else {
          ListSequence.fromList(paramTypes).addElement(pt);
        }
      }
      ListSequence.fromList(result).addElement(new extended_interfaces_supertypesOf_namedTupleType_SubtypingRule.QuotationClass_2344_l523emnekzk8().createNode(paramTypes, SLinkOperations.getTarget(ct, "classifier", false), typeCheckingContext));
    }
    return result;
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.tuples.structure.NamedTupleType";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean isWeak() {
    return true;
  }

  public static class QuotationClass_2344_l523emnekzk8 {
    public QuotationClass_2344_l523emnekzk8() {
    }

    public SNode createNode(Object parameter_2344_l523emnekxok, Object parameter_2344_l523emnekxom, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_2344_l523emnekxoh = null;
      SNode quotedNode_2344_l523emnekxoi = null;
      {
        quotedNode_2344_l523emnekxoh = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2344_l523emnekxoh = quotedNode_2344_l523emnekxoh;
        quotedNode1_2344_l523emnekxoh.setReferent("classifier", (SNode) parameter_2344_l523emnekxom);
        {
          List<SNode> nodes = (List<SNode>) parameter_2344_l523emnekxok;
          for (SNode child : nodes) {
            quotedNode_2344_l523emnekxoh.addChild("parameter", HUtil.copyIfNecessary(child, typeCheckingContext));
          }
        }
        result = quotedNode1_2344_l523emnekxoh;
      }
      return result;
    }

    public SNode createNode(Object parameter_2344_l523emnekxok, Object parameter_2344_l523emnekxom) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_2344_l523emnekxoh = null;
      SNode quotedNode_2344_l523emnekxoi = null;
      {
        quotedNode_2344_l523emnekxoh = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2344_l523emnekxoh = quotedNode_2344_l523emnekxoh;
        quotedNode1_2344_l523emnekxoh.setReferent("classifier", (SNode) parameter_2344_l523emnekxom);
        {
          List<SNode> nodes = (List<SNode>) parameter_2344_l523emnekxok;
          for (SNode child : nodes) {
            quotedNode_2344_l523emnekxoh.addChild("parameter", HUtil.copyIfNecessary(child));
          }
        }
        result = quotedNode1_2344_l523emnekxoh;
      }
      return result;
    }
  }
}
