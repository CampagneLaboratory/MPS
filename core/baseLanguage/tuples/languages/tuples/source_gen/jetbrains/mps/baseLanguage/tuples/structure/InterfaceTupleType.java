package jetbrains.mps.baseLanguage.tuples.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Type;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Interface;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class InterfaceTupleType extends Type {
  public static final String concept = "jetbrains.mps.baseLanguage.tuples.structure.InterfaceTupleType";
  public static final String CPR_LeftBracket = "leftBracket";
  public static final String CPR_RightBracket = "rightBracket";
  public static final String IFACE = "iface";
  public static final String PARAMETER_TYPE = "parameterType";

  public InterfaceTupleType(SNode node) {
    super(node);
  }

  public Interface getIface() {
    return (Interface) this.getReferent(Interface.class, InterfaceTupleType.IFACE);
  }

  public void setIface(Interface node) {
    super.setReferent(InterfaceTupleType.IFACE, node);
  }

  public int getParameterTypesCount() {
    return this.getChildCount(InterfaceTupleType.PARAMETER_TYPE);
  }

  public Iterator<Type> parameterTypes() {
    return this.children(Type.class, InterfaceTupleType.PARAMETER_TYPE);
  }

  public List<Type> getParameterTypes() {
    return this.getChildren(Type.class, InterfaceTupleType.PARAMETER_TYPE);
  }

  public void addParameterType(Type node) {
    this.addChild(InterfaceTupleType.PARAMETER_TYPE, node);
  }

  public void insertParameterType(Type prev, Type node) {
    this.insertChild(prev, InterfaceTupleType.PARAMETER_TYPE, node);
  }

  public static InterfaceTupleType newInstance(SModel sm, boolean init) {
    return (InterfaceTupleType) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.tuples.structure.InterfaceTupleType", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static InterfaceTupleType newInstance(SModel sm) {
    return InterfaceTupleType.newInstance(sm, false);
  }
}
