package jetbrains.mps.baseLanguage.tuples.customViewers.plugin;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.library.contributor.LibraryContributor;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.library.LibraryInitializer;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.annotations.Nullable;
import java.io.File;
import com.intellij.openapi.extensions.PluginId;
import com.intellij.ide.plugins.PluginManager;
import com.intellij.ide.plugins.IdeaPluginDescriptor;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;

public class CustomViewers_PluginInitializer implements ApplicationComponent {
  protected static Log log = LogFactory.getLog(CustomViewers_PluginInitializer.class);

  private final LibraryContributor myContributor = new CustomViewers_PluginInitializer.MyLibraryContributor();

  public CustomViewers_PluginInitializer() {
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    // module short names could be the same for different modules => use full name 
    return this.getClass().getName();
  }

  public void initComponent() {
    LibraryInitializer.getInstance().addContributor(myContributor);
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        LibraryInitializer.getInstance().update();
      }
    });
  }

  public void disposeComponent() {
    LibraryInitializer.getInstance().removeContributor(myContributor);
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        LibraryInitializer.getInstance().update();
      }
    });
  }

  @Nullable
  private File getPluginPath() {
    String className = this.getClass().getName();
    PluginId pluginId = PluginManager.getPluginByClassName(className);
    if (pluginId == null) {
      // <node> 
      return null;
    }
    IdeaPluginDescriptor descriptor = PluginManager.getPlugin(pluginId);
    if (descriptor == null) {
      return null;
    }
    return descriptor.getPath();
  }

  public class MyLibraryContributor implements LibraryContributor {
    public MyLibraryContributor() {
    }

    public Set<String> getLibraries() {
      File pluginPath = getPluginPath();
      if (pluginPath == null) {
        return SetSequence.fromSet(new HashSet<String>());
      }
      Set<String> libraries = SetSequence.fromSet(new HashSet<String>());
      return libraries;
    }
  }
}
