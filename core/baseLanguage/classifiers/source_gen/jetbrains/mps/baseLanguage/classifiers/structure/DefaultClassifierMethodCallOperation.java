package jetbrains.mps.baseLanguage.classifiers.structure;

/*Generated by MPS */

import jetbrains.mps.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.List;

public class DefaultClassifierMethodCallOperation extends BaseConcept implements IMemberOperation {
  public static final String concept = "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodCallOperation";
  public static String MEMBER = "member";
  public static String ACTUAL_ARGUMENT = "actualArgument";
  public static String SHORT_DESCRIPTION = "shortDescription";
  public static String ALIAS = "alias";
  public static String VIRTUAL_PACKAGE = "virtualPackage";

  public  DefaultClassifierMethodCallOperation(SNode node) {
    super(node);
  }

  public static DefaultClassifierMethodCallOperation newInstance(SModel sm, boolean init) {
    return ((DefaultClassifierMethodCallOperation)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodCallOperation", sm, GlobalScope.getInstance(), init).getAdapter());
  }

  public static DefaultClassifierMethodCallOperation newInstance(SModel sm) {
    return DefaultClassifierMethodCallOperation.newInstance(sm, false);
  }


  public IMember getMember() {
    return ((IMember)this.getReferent(DefaultClassifierMethodCallOperation.MEMBER));
  }

  public void setMember(IMember node) {
    super.setReferent(DefaultClassifierMethodCallOperation.MEMBER, node);
  }

  public DefaultClassifierMethodDeclaration getMethod() {
    return ((DefaultClassifierMethodDeclaration)this.getMember());
  }

  public void setMethod(DefaultClassifierMethodDeclaration node) {
    this.setMember(node);
  }

  public int getActualArgumentsCount() {
    return this.getChildCount(DefaultClassifierMethodCallOperation.ACTUAL_ARGUMENT);
  }

  public Iterator<Expression> actualArguments() {
    return this.children(DefaultClassifierMethodCallOperation.ACTUAL_ARGUMENT);
  }

  public List<Expression> getActualArguments() {
    return this.getChildren(DefaultClassifierMethodCallOperation.ACTUAL_ARGUMENT);
  }

  public void addActualArgument(Expression node) {
    this.addChild(DefaultClassifierMethodCallOperation.ACTUAL_ARGUMENT, node);
  }

  public void insertActualArgument(Expression prev, Expression node) {
    this.insertChild(prev, DefaultClassifierMethodCallOperation.ACTUAL_ARGUMENT, node);
  }

  public String getShortDescription() {
    return this.getProperty(DefaultClassifierMethodCallOperation.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(DefaultClassifierMethodCallOperation.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(DefaultClassifierMethodCallOperation.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(DefaultClassifierMethodCallOperation.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(DefaultClassifierMethodCallOperation.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(DefaultClassifierMethodCallOperation.VIRTUAL_PACKAGE, value);
  }

}
