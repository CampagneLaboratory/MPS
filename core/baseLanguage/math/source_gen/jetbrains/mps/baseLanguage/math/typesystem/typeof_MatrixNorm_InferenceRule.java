package jetbrains.mps.baseLanguage.math.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.baseLanguage.math.behavior.MathUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_MatrixNorm_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_MatrixNorm_InferenceRule() {
  }

  public void applyRule(final SNode norm, final TypeCheckingContext typeCheckingContext) {
    {
      final SNode mT = typeCheckingContext.typeOf(SLinkOperations.getTarget(norm, "mat", true), "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "3361677252835031830", true);
      typeCheckingContext.whenConcrete(mT, new Runnable() {
        public void run() {
          if (!(SNodeOperations.isInstanceOf(typeCheckingContext.getEquationManager().getRepresentator(mT), "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType"))) {
            {
              BaseIntentionProvider intentionProvider = null;
              IErrorTarget errorTarget = new NodeErrorTarget();
              typeCheckingContext.reportTypeError(norm, "Expression should have matrix or vector type", "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "3361677252835032977", intentionProvider, errorTarget);
            }
          } else {
            SNode t = MathUtil.getUnboxedElementType(typeCheckingContext.getEquationManager().getRepresentator(mT));
            boolean floatResult = SPropertyOperations.getInteger_def(norm, "deg", "1") == 2;
            if (TypeChecker.getInstance().getSubtypingManager().isSubtype(t, MathTypeUtil.qBigInteger)) {
              SNode f = null;
              SNode i = null;
              if (MatchingUtil.matchNodes(t, new _Quotations.QuotationClass_32().createNode(typeCheckingContext)) || MatchingUtil.matchNodes(t, new _Quotations.QuotationClass_33().createNode(typeCheckingContext)) || MatchingUtil.matchNodes(t, new _Quotations.QuotationClass_34().createNode(typeCheckingContext))) {
                i = new _Quotations.QuotationClass_36().createNode(typeCheckingContext);
                f = new _Quotations.QuotationClass_37().createNode(typeCheckingContext);
              } else if (MatchingUtil.matchNodes(t, new _Quotations.QuotationClass_35().createNode(typeCheckingContext))) {
                i = new _Quotations.QuotationClass_39().createNode(typeCheckingContext);
                f = new _Quotations.QuotationClass_38().createNode(typeCheckingContext);
              } else if (SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigIntegerType")) {
                i = SNodeOperations.copyNode(MathTypeUtil.qBigInteger);
                f = SNodeOperations.copyNode(MathTypeUtil.qBigDecimal);
              }
              {
                SNode _nodeToCheck_1029348928467 = norm;
                BaseIntentionProvider intentionProvider = null;
                EquationInfo info = new EquationInfo(_nodeToCheck_1029348928467, null, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "3361677252835033179", 0, intentionProvider);
                typeCheckingContext.createEquation((SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "3361677252835033176", true), (SNode)(floatResult ?
                  f :
                  i
                ), info);
              }
            } else if (SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.ComplexType")) {
              {
                SNode _nodeToCheck_1029348928467 = norm;
                BaseIntentionProvider intentionProvider = null;
                EquationInfo info = new EquationInfo(_nodeToCheck_1029348928467, null, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "3361677252835033410", 0, intentionProvider);
                typeCheckingContext.createEquation((SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "3361677252835033415", true), (SNode)new _Quotations.QuotationClass_40().createNode(typeCheckingContext), info);
              }
            } else if (SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigComplexType")) {
              {
                SNode _nodeToCheck_1029348928467 = norm;
                BaseIntentionProvider intentionProvider = null;
                EquationInfo info = new EquationInfo(_nodeToCheck_1029348928467, null, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "3361677252835033432", 0, intentionProvider);
                typeCheckingContext.createEquation((SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "3361677252835033429", true), (SNode)SNodeOperations.copyNode(MathTypeUtil.qBigDecimal), info);
              }
            } else {
              {
                SNode _nodeToCheck_1029348928467 = norm;
                BaseIntentionProvider intentionProvider = null;
                EquationInfo info = new EquationInfo(_nodeToCheck_1029348928467, null, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "3361677252835033448", 0, intentionProvider);
                typeCheckingContext.createEquation((SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "3361677252835033443", true), (SNode)t, info);
              }
            }
          }
        }
      }, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "3361677252835031827", false, false);
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.math.structure.MatrixNorm";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
