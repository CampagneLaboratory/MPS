package jetbrains.mps.baseLanguage.math.typesystem;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.baseLanguage.math.behavior.MathUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.baseLanguage.behavior.Type_Behavior;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.behavior.ConceptFunction_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class MathTypeUtil {
  public static final SNode qBigComplex = new _Quotations.QuotationClass_21().createNode();
  public static final SNode qBCMatrix = new _Quotations.QuotationClass_24().createNode();
  public static final SNode qBigInteger = new _Quotations.QuotationClass_22().createNode();
  public static final SNode qBigDecimal = new _Quotations.QuotationClass_23().createNode();
  public static final SNode qLong = new _Quotations.QuotationClass_25().createNode();
  public static final SNode bLong = new _Quotations.QuotationClass_15().createNode();
  public static final SNode qBoolean = new _Quotations.QuotationClass_32().createNode();
  public static final SNode qComplex = new _Quotations.QuotationClass_28().createNode();
  public static final SNode qInt = new _Quotations.QuotationClass_26().createNode();
  public static final SNode bInt = new _Quotations.QuotationClass_14().createNode();
  public static final SNode qFloat = new _Quotations.QuotationClass_30().createNode();
  public static final SNode bFloat = new _Quotations.QuotationClass_13().createNode();
  public static final SNode qDouble = new _Quotations.QuotationClass_27().createNode();
  public static final SNode bDouble = new _Quotations.QuotationClass_12().createNode();

  public MathTypeUtil() {
  }

  public static SNode qMatrix(SNode elementType) {
    return new _Quotations.QuotationClass_29().createNode(elementType);
  }

  public static SNode qVector(SNode elementType) {
    return new _Quotations.QuotationClass_31().createNode(elementType);
  }

  public static boolean bigType(SNode t) {
    return SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigIntegerType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigDecimalType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigComplexType");
  }

  public static boolean complexType(SNode t) {
    return SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.ComplexType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigComplexType");
  }

  public static boolean floatType(SNode t) {
    return SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.structure.FloatType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.structure.DoubleType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.ComplexType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigDecimalType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigComplexType") || MatchingUtil.matchNodes(t, new _Quotations.QuotationClass_45().createNode()) || MatchingUtil.matchNodes(t, new _Quotations.QuotationClass_46().createNode());
  }

  public static SNode join(SNode t1, SNode t2) {

    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(t1, t2)) {
      return t2;
    } else if (TypeChecker.getInstance().getSubtypingManager().isSubtype(t2, t1)) {
      return t1;
    } else {
      boolean bf = bigType(t1) || bigType(t2);
      boolean cf = complexType(t1) || complexType(t2);
      boolean ff = floatType(t1) || floatType(t2);
      if (bf && cf) {
        return SNodeOperations.copyNode(qBigComplex);
      }
      if (ff && bf) {
        return SNodeOperations.copyNode(qBigDecimal);
      }
      return null;
    }
  }

  public static SNode ML_arithmeticOp(SNode t1, SNode t2) {
    if (SNodeOperations.isInstanceOf(t1, "jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType") || SNodeOperations.isInstanceOf(t2, "jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType")) {
      return MathTypeUtil.join(t1, t2);
    }
    return null;
  }

  public static SNode ML_bitwiseOp(SNode t1, SNode t2) {
    if (SNodeOperations.isInstanceOf(t1, "jetbrains.mps.baseLanguage.math.structure.BigIntegerType") || SNodeOperations.isInstanceOf(t2, "jetbrains.mps.baseLanguage.math.structure.BigIntegerType")) {
      return SNodeOperations.copyNode(MathTypeUtil.qBigInteger);
    }
    return null;
  }

  public static SNode ML_compareOp(SNode t1, SNode t2) {
    if (SNodeOperations.isInstanceOf(t1, "jetbrains.mps.baseLanguage.structure.NullType") || SNodeOperations.isInstanceOf(t2, "jetbrains.mps.baseLanguage.structure.NullType")) {
      return null;
    }
    return SNodeOperations.copyNode(qBoolean);
  }

  public static SNode ML_matrixOp(SNode t1, SNode t2, boolean mul) {
    SNode eT = join(MathUtil.getUnboxedElementType(t1), MathUtil.getUnboxedElementType(t2));
    boolean v1 = SNodeOperations.isInstanceOf(t1, "jetbrains.mps.baseLanguage.math.structure.VectorType");
    boolean v2 = SNodeOperations.isInstanceOf(t2, "jetbrains.mps.baseLanguage.math.structure.VectorType");
    if (mul) {
      if (v2) {
        return qVector(SNodeOperations.copyNode(eT));
      } else {
        return qMatrix(SNodeOperations.copyNode(eT));
      }
    } else {
      if (v1 || v2) {
        return qVector(SNodeOperations.copyNode(eT));
      } else {
        return qMatrix(SNodeOperations.copyNode(eT));
      }
    }
  }

  public static int binaryOperationRequiresWidening(SNode binOp, SNode expr) {
    boolean left = SNodeOperations.hasRole(expr, "jetbrains.mps.baseLanguage.structure.BinaryOperation", "leftExpression");
    boolean right = SNodeOperations.hasRole(expr, "jetbrains.mps.baseLanguage.structure.BinaryOperation", "rightExpression");
    if (!(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(binOp), "jetbrains.mps.baseLanguage.structure.Type")) || !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(expr), "jetbrains.mps.baseLanguage.structure.Type"))) {
      return 0;
    }
    SNode opType = SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(binOp), "jetbrains.mps.baseLanguage.structure.Type");
    SNode exprType = SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(expr), "jetbrains.mps.baseLanguage.structure.Type");
    SNode oppositeOp = null;
    if (left) {
      oppositeOp = SLinkOperations.getTarget(binOp, "rightExpression", true);
    }
    if (right) {
      oppositeOp = SLinkOperations.getTarget(binOp, "leftExpression", true);
    }
    SNode oppExprType = SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(oppositeOp), "jetbrains.mps.baseLanguage.structure.Type");
    if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(binOp), "jetbrains.mps.baseLanguage.math.structure.MatrixType") && (SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.MulExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.PlusExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.MinusExpression"))) {
      return 0;
    } else {
      if (SNodeOperations.isInstanceOf(oppExprType, "jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType") || SNodeOperations.isInstanceOf(exprType, "jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType")) {
        if (SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.PlusExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.MinusExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.DivExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.MulExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.BitwiseAndExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.BitwiseXorExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.BitwiseOrExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation")) {
          return pickExplicitWidening(exprType, opType);
        } else if (SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.EqualsExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.NotEqualsExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.LessThanExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.GreaterThanExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression")) {
          if (SNodeOperations.isInstanceOf(oppositeOp, "jetbrains.mps.baseLanguage.structure.NullLiteral") || SNodeOperations.isInstanceOf(expr, "jetbrains.mps.baseLanguage.structure.NullLiteral")) {
            return 0;
          }
          return pickExplicitWidening(exprType, join(exprType, oppExprType));
        } else {
          return 0;
        }
      } else {
        return 0;
      }
    }
  }

  public static SNode getElementType(SNode t) {
    do {
      SNode matchedNode_2 = t;
      {
        boolean matches_7 = false;
        {
          SNode matchingNode_7 = t;
          if (matchingNode_7 != null) {
            matches_7 = SModelUtil_new.isAssignableConcept(matchingNode_7.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.MatrixType");
          }
        }
        if (matches_7) {
          return SLinkOperations.getTarget(matchedNode_2, "elementType", true);
        }
      }
      {
        boolean matches_8 = false;
        {
          SNode matchingNode_8 = t;
          if (matchingNode_8 != null) {
            matches_8 = SModelUtil_new.isAssignableConcept(matchingNode_8.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.VectorType");
          }
        }
        if (matches_8) {
          return SLinkOperations.getTarget(matchedNode_2, "elementType", true);
        }
      }
      return null;
    } while(false);
  }

  public static int pickExplicitWidening(SNode narrower, SNode wider) {
    if (!(SNodeOperations.isInstanceOf(narrower, "jetbrains.mps.baseLanguage.structure.Type"))) {
      return 0;
    }
    if (SNodeOperations.isInstanceOf(narrower, "jetbrains.mps.baseLanguage.structure.NullType")) {
      return 0;
    }
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(wider, qBCMatrix) && TypeChecker.getInstance().getSubtypingManager().isSubtype(narrower, qBCMatrix) && !(MatchingUtil.matchNodes(Type_Behavior.call_getUnboxedType_1213877337320(getElementType(wider)), Type_Behavior.call_getUnboxedType_1213877337320(getElementType(narrower))))) {
      if (MatchingUtil.matchNodes(Type_Behavior.call_getUnboxedType_1213877337320(getElementType(wider)), bInt)) {
        return 9;
      }
      if (MatchingUtil.matchNodes(Type_Behavior.call_getUnboxedType_1213877337320(getElementType(wider)), bLong)) {
        return 10;
      }
      if (MatchingUtil.matchNodes(Type_Behavior.call_getUnboxedType_1213877337320(getElementType(wider)), bFloat)) {
        return 11;
      }
      if (MatchingUtil.matchNodes(Type_Behavior.call_getUnboxedType_1213877337320(getElementType(wider)), bDouble)) {
        return 12;
      }
      if (SNodeOperations.isInstanceOf(getElementType(wider), "jetbrains.mps.baseLanguage.math.structure.BigIntegerType")) {
        return 13;
      }
      if (SNodeOperations.isInstanceOf(getElementType(wider), "jetbrains.mps.baseLanguage.math.structure.BigDecimalType")) {
        return 14;
      }
      if (SNodeOperations.isInstanceOf(getElementType(wider), "jetbrains.mps.baseLanguage.math.structure.ComplexType")) {
        return 15;
      }
      if (SNodeOperations.isInstanceOf(getElementType(wider), "jetbrains.mps.baseLanguage.math.structure.BigComplexType")) {
        return 16;
      }
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigIntegerType") && TypeChecker.getInstance().getSubtypingManager().isSubtype(narrower, qLong)) {
      return 1;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.ComplexType") && TypeChecker.getInstance().getSubtypingManager().isSubtype(narrower, qDouble)) {
      return 2;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigDecimalType") && TypeChecker.getInstance().getSubtypingManager().isSubtype(narrower, qDouble)) {
      return 3;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigDecimalType") && SNodeOperations.isInstanceOf(narrower, "jetbrains.mps.baseLanguage.math.structure.BigIntegerType")) {
      return 4;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigComplexType") && TypeChecker.getInstance().getSubtypingManager().isSubtype(narrower, qDouble)) {
      return 5;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigComplexType") && SNodeOperations.isInstanceOf(narrower, "jetbrains.mps.baseLanguage.math.structure.BigIntegerType")) {
      return 6;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigComplexType") && SNodeOperations.isInstanceOf(narrower, "jetbrains.mps.baseLanguage.math.structure.BigDecimalType")) {
      return 7;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigComplexType") && SNodeOperations.isInstanceOf(narrower, "jetbrains.mps.baseLanguage.math.structure.ComplexType")) {
      return 8;
    }
    return 0;
  }

  public static SNode canMakeReturnStatement(SNode node) {
    SNode returnType = null;
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.StatementList")) {
        SNode statementList = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.StatementList");
        SNode parent = SNodeOperations.getParent(statementList);
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(statementList), "jetbrains.mps.baseLanguage.structure.BlockStatement")) {
          SNode blockStatement = SNodeOperations.cast(SNodeOperations.getParent(statementList), "jetbrains.mps.baseLanguage.structure.BlockStatement");
          parent = SNodeOperations.getParent(blockStatement);
          if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.StatementList")) {
            SNode bsStatementList = SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.StatementList");
            List<SNode> statements = SLinkOperations.getTargets(bsStatementList, "statement", true);
            if (ListSequence.fromList(statements).last() == blockStatement) {
              parent = SNodeOperations.getParent(bsStatementList);
            }
          }
        }
        if (!(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.Statement")) && !(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")) && !(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.CatchClause")) && !(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.SwitchCase"))) {
          if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
            returnType = SLinkOperations.getTarget(SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "returnType", true);
          } else if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.ConceptFunction")) {
            returnType = SNodeOperations.cast(ConceptFunction_Behavior.call_getExpectedReturnType_1213877374441(SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.ConceptFunction")), "jetbrains.mps.baseLanguage.structure.Type");
          }
        }
      }
    }
    return returnType;
  }

  public static SNode typeOfMatrixScalarMultiplication(SNode scalarType, SNode vT) {
    SNode e = MathTypeUtil.getElementType(vT);
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(e, scalarType)) {
      e = scalarType;
    }
    do {
      SNode matchedNode_3 = vT;
      {
        boolean matches_9 = false;
        {
          SNode matchingNode_9 = vT;
          if (matchingNode_9 != null) {
            matches_9 = SModelUtil_new.isAssignableConcept(matchingNode_9.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.MatrixType");
          }
        }
        if (matches_9) {
          {
            SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.math.structure.MatrixType", null);
            SPropertyOperations.set(result, "rows", "" + SPropertyOperations.getInteger(matchedNode_3, "rows"));
            SPropertyOperations.set(result, "columns", "" + SPropertyOperations.getInteger(matchedNode_3, "columns"));
            SLinkOperations.setTarget(result, "elementType", e, true);
            return result;
          }
        }
      }
      {
        boolean matches_10 = false;
        {
          SNode matchingNode_10 = vT;
          if (matchingNode_10 != null) {
            matches_10 = SModelUtil_new.isAssignableConcept(matchingNode_10.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.VectorType");
          }
        }
        if (matches_10) {
          {
            SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.math.structure.VectorType", null);
            SPropertyOperations.set(result, "height", "" + SPropertyOperations.getInteger(matchedNode_3, "height"));
            SLinkOperations.setTarget(result, "elementType", e, true);
            return result;
          }
        }
      }
      return null;
    } while(false);
  }

  public static boolean checkAdditiveOperationDimensions(SNode binOp) {
    SNode lEt = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binOp, "leftExpression", true));
    SNode rEt = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binOp, "rightExpression", true));
    if (SNodeOperations.isInstanceOf(lEt, "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType") && SNodeOperations.isInstanceOf(rEt, "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType")) {
      int lr = DimensionUtil.dimr(lEt);
      int lc = DimensionUtil.dimc(lEt);
      int rr = DimensionUtil.dimr(rEt);
      int rc = DimensionUtil.dimc(rEt);
      if ((lr != 0 && rr != 0 && (lr != rr)) || (lc != 0 && rc != 0 && (lc != rc))) {
        return false;
      }
    }
    return true;
  }

  public static SNode typeCast(SNode type, SNode parentType) {
    if (MatchingUtil.matchNodes(parentType, bDouble) && !(MatchingUtil.matchNodes(Type_Behavior.call_getUnboxedType_1213877337320(type), bDouble))) {
      return new _Quotations.QuotationClass_16().createNode();
    }
    if (MatchingUtil.matchNodes(parentType, bFloat) && !(MatchingUtil.matchNodes(Type_Behavior.call_getUnboxedType_1213877337320(type), bFloat))) {
      return new _Quotations.QuotationClass_17().createNode();
    }
    if (MatchingUtil.matchNodes(parentType, bInt) && !(MatchingUtil.matchNodes(Type_Behavior.call_getUnboxedType_1213877337320(type), bInt))) {
      return new _Quotations.QuotationClass_18().createNode();
    }
    if (MatchingUtil.matchNodes(parentType, bLong) && !(MatchingUtil.matchNodes(Type_Behavior.call_getUnboxedType_1213877337320(type), bLong))) {
      return new _Quotations.QuotationClass_19().createNode();
    }
    return null;
  }
}
