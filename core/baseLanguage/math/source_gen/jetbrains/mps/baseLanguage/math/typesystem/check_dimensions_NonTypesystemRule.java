package jetbrains.mps.baseLanguage.math.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;

public class check_dimensions_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_dimensions_NonTypesystemRule() {
  }

  public void applyRule(final SNode binaryOperation, final TypeCheckingContext typeCheckingContext) {
    do {
      SNode matchedNode_1 = binaryOperation;
      {
        boolean matches_4 = false;
        {
          SNode matchingNode_4 = binaryOperation;
          if (matchingNode_4 != null) {
            matches_4 = SModelUtil_new.isAssignableConcept(matchingNode_4.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.MulExpression");
          }
        }
        if (matches_4) {
          if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation, "leftExpression", true)), "jetbrains.mps.baseLanguage.math.structure.MatrixType") && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation, "rightExpression", true)), "jetbrains.mps.baseLanguage.math.structure.MatrixType")) {
            int lc = SPropertyOperations.getInteger(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation, "leftExpression", true)), "jetbrains.mps.baseLanguage.math.structure.MatrixType"), "columns");
            int rr = SPropertyOperations.getInteger(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation, "rightExpression", true)), "jetbrains.mps.baseLanguage.math.structure.MatrixType"), "rows");
            if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation, "leftExpression", true)), "jetbrains.mps.baseLanguage.math.structure.MatrixType") && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation, "rightExpression", true)), "jetbrains.mps.baseLanguage.math.structure.MatrixType")) {
              if (lc != 0 && rr != 0 && rr != lc) {
                {
                  BaseIntentionProvider intentionProvider = null;
                  IErrorTarget errorTarget = new NodeErrorTarget();
                  typeCheckingContext.reportTypeError(binaryOperation, "These matrices cannot be multiplied with each other", "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "6527203785516632809", intentionProvider, errorTarget);
                }
              }
            }
          }
          break;
        }
      }
      {
        boolean matches_5 = false;
        {
          SNode matchingNode_5 = binaryOperation;
          if (matchingNode_5 != null) {
            matches_5 = SModelUtil_new.isAssignableConcept(matchingNode_5.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.PlusExpression");
          }
        }
        if (matches_5) {
          if (!(MathTypeUtil.checkAdditiveOperationDimensions(matchedNode_1))) {
            {
              BaseIntentionProvider intentionProvider = null;
              IErrorTarget errorTarget = new NodeErrorTarget();
              typeCheckingContext.reportTypeError(binaryOperation, "Invalid dimensions", "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "6527203785516632993", intentionProvider, errorTarget);
            }
          }
          break;
        }
      }
      {
        boolean matches_6 = false;
        {
          SNode matchingNode_6 = binaryOperation;
          if (matchingNode_6 != null) {
            matches_6 = SModelUtil_new.isAssignableConcept(matchingNode_6.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.MinusExpression");
          }
        }
        if (matches_6) {
          if (!(MathTypeUtil.checkAdditiveOperationDimensions(matchedNode_1))) {
            {
              BaseIntentionProvider intentionProvider = null;
              IErrorTarget errorTarget = new NodeErrorTarget();
              typeCheckingContext.reportTypeError(binaryOperation, "Invalid dimensions", "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "6527203785516633003", intentionProvider, errorTarget);
            }
          }
          break;
        }
      }
    } while(false);
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.BinaryOperation";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
