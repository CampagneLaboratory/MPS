package jetbrains.mps.baseLanguage.math.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.math.behavior.MathUtil;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.nodeEditor.IErrorReporter;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;

public class typeof_BinaryOperationMathContext_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_BinaryOperationMathContext_InferenceRule() {
  }

  public void applyRule(final SNode oper, final TypeCheckingContext typeCheckingContext) {
    final String S = "Operation only applicable to arguments of big decimal type";
    final SNode rightExpressionType_typevar_8613885519962201007 = typeCheckingContext.createNewRuntimeTypesVariable();
    final SNode leftExpressionType_typevar_8613885519962201008 = typeCheckingContext.createNewRuntimeTypesVariable();
    {
      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(oper, "rightExpression", true);
      BaseIntentionProvider intentionProvider = null;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "8613885519962201009", 0, intentionProvider);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.getEquationManager().getRepresentator(rightExpressionType_typevar_8613885519962201007), (SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "8613885519962201011", true), _info_12389875345);
    }
    {
      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(oper, "leftExpression", true);
      BaseIntentionProvider intentionProvider = null;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "8613885519962201017", 0, intentionProvider);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.getEquationManager().getRepresentator(leftExpressionType_typevar_8613885519962201008), (SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "8613885519962201019", true), _info_12389875345);
    }
    {
      final SNode leftType = typeCheckingContext.getEquationManager().getRepresentator(leftExpressionType_typevar_8613885519962201008);
      typeCheckingContext.whenConcrete(leftType, new Runnable() {
        public void run() {
          {
            final SNode rightType = typeCheckingContext.getEquationManager().getRepresentator(rightExpressionType_typevar_8613885519962201007);
            typeCheckingContext.whenConcrete(rightType, new Runnable() {
              public void run() {
                SNode op;
                do {
                  SNode matchedNode_0 = oper;
                  {
                    boolean matches_0 = false;
                    {
                      SNode matchingNode_0 = oper;
                      if (matchingNode_0 != null) {
                        matches_0 = SModelUtil_new.isAssignableConcept(matchingNode_0.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression");
                      }
                    }
                    if (matches_0) {
                      op = new typeof_BinaryOperationMathContext_InferenceRule.QuotationClass_0469_0().createNode(typeCheckingContext);
                      break;
                    }
                  }
                  {
                    boolean matches_1 = false;
                    {
                      SNode matchingNode_1 = oper;
                      if (matchingNode_1 != null) {
                        matches_1 = SModelUtil_new.isAssignableConcept(matchingNode_1.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression");
                      }
                    }
                    if (matches_1) {
                      op = new typeof_BinaryOperationMathContext_InferenceRule.QuotationClass_0469_1().createNode(typeCheckingContext);
                      break;
                    }
                  }
                  {
                    boolean matches_2 = false;
                    {
                      SNode matchingNode_2 = oper;
                      if (matchingNode_2 != null) {
                        matches_2 = SModelUtil_new.isAssignableConcept(matchingNode_2.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression");
                      }
                    }
                    if (matches_2) {
                      op = new typeof_BinaryOperationMathContext_InferenceRule.QuotationClass_0469_2().createNode(typeCheckingContext);
                      break;
                    }
                  }
                  {
                    boolean matches_3 = false;
                    {
                      SNode matchingNode_3 = oper;
                      if (matchingNode_3 != null) {
                        matches_3 = SModelUtil_new.isAssignableConcept(matchingNode_3.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression");
                      }
                    }
                    if (matches_3) {
                      op = new typeof_BinaryOperationMathContext_InferenceRule.QuotationClass_0469_3().createNode(typeCheckingContext);
                      break;
                    }
                  }
                  op = null;
                } while(false);
                SNode opType = typeCheckingContext.getOverloadedOperationType(op, typeCheckingContext.getEquationManager().getRepresentator(leftType), typeCheckingContext.getEquationManager().getRepresentator(rightType));
                if (!(SNodeOperations.isInstanceOf(opType, "jetbrains.mps.baseLanguage.math.structure.BigComplexType") || SNodeOperations.isInstanceOf(opType, "jetbrains.mps.baseLanguage.math.structure.BigDecimalType") || (SNodeOperations.isInstanceOf(opType, "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType") && (SNodeOperations.isInstanceOf(MathUtil.getUnboxedElementType(opType), "jetbrains.mps.baseLanguage.math.structure.BigComplexType") || SNodeOperations.isInstanceOf(MathUtil.getUnboxedElementType(opType), "jetbrains.mps.baseLanguage.math.structure.BigDecimalType"))))) {
                  {
                    BaseIntentionProvider intentionProvider = null;
                    intentionProvider = new BaseIntentionProvider("jetbrains.mps.baseLanguage.math.typesystem.DeleteMathContext_QuickFix", false);
                    IErrorTarget errorTarget = new NodeErrorTarget();
                    IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(oper, S, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "8613885519962202373", intentionProvider, errorTarget);
                  }
                }
                if ((opType != null)) {
                  {
                    SNode _nodeToCheck_1029348928467 = oper;
                    BaseIntentionProvider intentionProvider = null;
                    EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "8613885519962201041", 0, intentionProvider);
                    typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "8613885519962201043", true), (SNode) opType, _info_12389875345);
                  }
                } else {
                  {
                    BaseIntentionProvider intentionProvider = null;
                    IErrorTarget errorTarget = new NodeErrorTarget();
                    IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(op, "operation can't be applied to these operands", "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "8613885519962201052", intentionProvider, errorTarget);
                  }
                }
              }
            }, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "8613885519962201027", false, false);
          }
        }
      }, "r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)", "8613885519962201025", false, false);
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

  public static class QuotationClass_0469_0 {
    public QuotationClass_0469_0() {
    }

    public SNode createNode(final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_19 = null;
      SNode quotedNode_20 = null;
      SNode quotedNode_21 = null;
      {
        quotedNode_19 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DivExpression", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_19 = quotedNode_19;
        {
          quotedNode_20 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_20 = quotedNode_20;
          quotedNode1_20.setProperty("value", "1");
          quotedNode_19.addChild("rightExpression", quotedNode1_20);
        }
        {
          quotedNode_21 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_21 = quotedNode_21;
          quotedNode1_21.setProperty("value", "1");
          quotedNode_19.addChild("leftExpression", quotedNode1_21);
        }
        result = quotedNode1_19;
      }
      return result;
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_19 = null;
      SNode quotedNode_20 = null;
      SNode quotedNode_21 = null;
      {
        quotedNode_19 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DivExpression", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_19 = quotedNode_19;
        {
          quotedNode_20 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_20 = quotedNode_20;
          quotedNode1_20.setProperty("value", "1");
          quotedNode_19.addChild("rightExpression", quotedNode1_20);
        }
        {
          quotedNode_21 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_21 = quotedNode_21;
          quotedNode1_21.setProperty("value", "1");
          quotedNode_19.addChild("leftExpression", quotedNode1_21);
        }
        result = quotedNode1_19;
      }
      return result;
    }
  }

  public static class QuotationClass_0469_1 {
    public QuotationClass_0469_1() {
    }

    public SNode createNode(final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_22 = null;
      SNode quotedNode_23 = null;
      SNode quotedNode_24 = null;
      {
        quotedNode_22 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.MinusExpression", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_22 = quotedNode_22;
        {
          quotedNode_23 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_23 = quotedNode_23;
          quotedNode1_23.setProperty("value", "1");
          quotedNode_22.addChild("leftExpression", quotedNode1_23);
        }
        {
          quotedNode_24 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_24 = quotedNode_24;
          quotedNode1_24.setProperty("value", "1");
          quotedNode_22.addChild("rightExpression", quotedNode1_24);
        }
        result = quotedNode1_22;
      }
      return result;
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_22 = null;
      SNode quotedNode_23 = null;
      SNode quotedNode_24 = null;
      {
        quotedNode_22 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.MinusExpression", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_22 = quotedNode_22;
        {
          quotedNode_23 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_23 = quotedNode_23;
          quotedNode1_23.setProperty("value", "1");
          quotedNode_22.addChild("leftExpression", quotedNode1_23);
        }
        {
          quotedNode_24 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_24 = quotedNode_24;
          quotedNode1_24.setProperty("value", "1");
          quotedNode_22.addChild("rightExpression", quotedNode1_24);
        }
        result = quotedNode1_22;
      }
      return result;
    }
  }

  public static class QuotationClass_0469_2 {
    public QuotationClass_0469_2() {
    }

    public SNode createNode(final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_25 = null;
      SNode quotedNode_26 = null;
      SNode quotedNode_27 = null;
      {
        quotedNode_25 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.MulExpression", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_25 = quotedNode_25;
        {
          quotedNode_26 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_26 = quotedNode_26;
          quotedNode1_26.setProperty("value", "1");
          quotedNode_25.addChild("rightExpression", quotedNode1_26);
        }
        {
          quotedNode_27 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_27 = quotedNode_27;
          quotedNode1_27.setProperty("value", "1");
          quotedNode_25.addChild("leftExpression", quotedNode1_27);
        }
        result = quotedNode1_25;
      }
      return result;
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_25 = null;
      SNode quotedNode_26 = null;
      SNode quotedNode_27 = null;
      {
        quotedNode_25 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.MulExpression", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_25 = quotedNode_25;
        {
          quotedNode_26 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_26 = quotedNode_26;
          quotedNode1_26.setProperty("value", "1");
          quotedNode_25.addChild("rightExpression", quotedNode1_26);
        }
        {
          quotedNode_27 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_27 = quotedNode_27;
          quotedNode1_27.setProperty("value", "1");
          quotedNode_25.addChild("leftExpression", quotedNode1_27);
        }
        result = quotedNode1_25;
      }
      return result;
    }
  }

  public static class QuotationClass_0469_3 {
    public QuotationClass_0469_3() {
    }

    public SNode createNode(final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_28 = null;
      SNode quotedNode_29 = null;
      SNode quotedNode_30 = null;
      {
        quotedNode_28 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_28 = quotedNode_28;
        {
          quotedNode_29 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_29 = quotedNode_29;
          quotedNode1_29.setProperty("value", "1");
          quotedNode_28.addChild("leftExpression", quotedNode1_29);
        }
        {
          quotedNode_30 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_30 = quotedNode_30;
          quotedNode1_30.setProperty("value", "1");
          quotedNode_28.addChild("rightExpression", quotedNode1_30);
        }
        result = quotedNode1_28;
      }
      return result;
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_28 = null;
      SNode quotedNode_29 = null;
      SNode quotedNode_30 = null;
      {
        quotedNode_28 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_28 = quotedNode_28;
        {
          quotedNode_29 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_29 = quotedNode_29;
          quotedNode1_29.setProperty("value", "1");
          quotedNode_28.addChild("leftExpression", quotedNode1_29);
        }
        {
          quotedNode_30 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_30 = quotedNode_30;
          quotedNode1_30.setProperty("value", "1");
          quotedNode_28.addChild("rightExpression", quotedNode1_30);
        }
        result = quotedNode1_28;
      }
      return result;
    }
  }
}
