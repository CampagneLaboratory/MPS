package jetbrains.mps.baseLanguage.math.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class TransposeOperation extends Expression {
  public static final String concept = "jetbrains.mps.baseLanguage.math.structure.TransposeOperation";
  public static final String CONJ = "conj";
  public static final String EXPRESSION = "expression";

  public TransposeOperation(SNode node) {
    super(node);
  }

  public boolean getConj() {
    return this.getBooleanProperty(TransposeOperation.CONJ);
  }

  public void setConj(boolean value) {
    this.setBooleanProperty(TransposeOperation.CONJ, value);
  }

  public Expression getExpression() {
    return (Expression)this.getChild(Expression.class, TransposeOperation.EXPRESSION);
  }

  public void setExpression(Expression node) {
    super.setChild(TransposeOperation.EXPRESSION, node);
  }

  public static TransposeOperation newInstance(SModel sm, boolean init) {
    return (TransposeOperation)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.TransposeOperation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static TransposeOperation newInstance(SModel sm) {
    return TransposeOperation.newInstance(sm, false);
  }
}
