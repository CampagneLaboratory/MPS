package jetbrains.mps.baseLanguage.math.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.style.CellAlign;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.baseLanguage.math.plugin.HLineCellProvider;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.editor.runtime.EditorCell_Empty;

public class DivExpressionFraction_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_9055_fsbffl6w(editorContext, node);
  }

  private EditorCell createCollection_9055_fsbev7mo(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_9055_fsbev7mo");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, true);
      style.set(StyleAttributes.HORIZONTAL_ALIGN, CellAlign.CENTER);
    }
    editorCell.addEditorCell(this.createRefNode_9055_fsbf5smh(editorContext, node));
    editorCell.addEditorCell(this.createCustom_9055_1xixm5yv3wtfq(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_9055_fsbf63en(editorContext, node));
    return editorCell;
  }

  private EditorCell createCollection_9055_fsbffl6w(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_9055_fsbffl6w");
    editorCell.addEditorCell(this.createEmpty_9055_1r5w89bsxb4ep(editorContext, node));
    editorCell.addEditorCell(this.createCollection_9055_fsbev7mo(editorContext, node));
    editorCell.addEditorCell(this.createEmpty_9055_1r5w89bsxb4et(editorContext, node));
    return editorCell;
  }

  private EditorCell createCustom_9055_1xixm5yv3wtfq(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<HLineCellProvider>() {
      public HLineCellProvider invoke() {
        return new HLineCellProvider(node);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_9055_1xixm5yv3wtfq");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.BASE_LINE_CELL, true);
    }
    return editorCell;
  }

  private EditorCell createRefNode_9055_fsbf5smh(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);
    provider.setRole("numerator");
    provider.setNoTargetText("<no numerator>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    delete_numerator.setCellActions(editorCell, node, editorContext);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createRefNode_9055_fsbf63en(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);
    provider.setRole("denominator");
    provider.setNoTargetText("<no denominator>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    delete_denominator.setCellActions(editorCell, node, editorContext);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createEmpty_9055_1r5w89bsxb4ep(EditorContext editorContext, SNode node) {
    EditorCell_Empty editorCell = new EditorCell_Empty(editorContext, node);
    editorCell.setCellId("Empty_9055_1r5w89bsxb4ep");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    }
    return editorCell;
  }

  private EditorCell createEmpty_9055_1r5w89bsxb4et(EditorContext editorContext, SNode node) {
    EditorCell_Empty editorCell = new EditorCell_Empty(editorContext, node);
    editorCell.setCellId("Empty_9055_1r5w89bsxb4et");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    }
    return editorCell;
  }
}
