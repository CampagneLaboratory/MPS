package jetbrains.mps.baseLanguage.math.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.behavior.Type_Behavior;
import jetbrains.mps.lang.pattern.util.MatchingUtil;

public class MathUtil {
  private static SNode[] operations = {new _Quotations.QuotationClass_22().createNode() ,new _Quotations.QuotationClass_23().createNode() ,new _Quotations.QuotationClass_24().createNode() ,new _Quotations.QuotationClass_25().createNode() ,new _Quotations.QuotationClass_26().createNode() ,new _Quotations.QuotationClass_27().createNode() ,new _Quotations.QuotationClass_28().createNode() ,new _Quotations.QuotationClass_29().createNode() ,new _Quotations.QuotationClass_30().createNode() ,new _Quotations.QuotationClass_31().createNode()};

  public static boolean applicable(SNode contextParent) {
    boolean operation_ok = SNodeOperations.isInstanceOf(contextParent, "jetbrains.mps.baseLanguage.structure.PlusExpression") || SNodeOperations.isInstanceOf(contextParent, "jetbrains.mps.baseLanguage.structure.DivExpression") || SNodeOperations.isInstanceOf(contextParent, "jetbrains.mps.baseLanguage.structure.MulExpression") || SNodeOperations.isInstanceOf(contextParent, "jetbrains.mps.baseLanguage.structure.MinusExpression");
    boolean types_ok = SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(contextParent), "jetbrains.mps.baseLanguage.math.structure.BigDecimalType") || SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(contextParent), "jetbrains.mps.baseLanguage.math.structure.BigComplexType");
    return operation_ok && types_ok;
  }

  public static SNode convert1(SNode bmc) {
    do {
      SNode matchedNode_0 = bmc;
      {
        boolean matches_0 = false;
        {
          SNode matchingNode_0 = bmc;
          if (matchingNode_0 != null) {
            matches_0 = SModelUtil_new.isAssignableConcept(matchingNode_0.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression");
          }
        }
        if (matches_0) {
          return new _Quotations.QuotationClass_0().createNode(SLinkOperations.getTarget(matchedNode_0, "rightExpression", true), SLinkOperations.getTarget(matchedNode_0, "leftExpression", true));
        }
      }
      {
        boolean matches_1 = false;
        {
          SNode matchingNode_1 = bmc;
          if (matchingNode_1 != null) {
            matches_1 = SModelUtil_new.isAssignableConcept(matchingNode_1.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression");
          }
        }
        if (matches_1) {
          return new _Quotations.QuotationClass_1().createNode(SLinkOperations.getTarget(matchedNode_0, "rightExpression", true), SLinkOperations.getTarget(matchedNode_0, "leftExpression", true));
        }
      }
      {
        boolean matches_2 = false;
        {
          SNode matchingNode_2 = bmc;
          if (matchingNode_2 != null) {
            matches_2 = SModelUtil_new.isAssignableConcept(matchingNode_2.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression");
          }
        }
        if (matches_2) {
          return new _Quotations.QuotationClass_2().createNode(SLinkOperations.getTarget(matchedNode_0, "rightExpression", true), SLinkOperations.getTarget(matchedNode_0, "leftExpression", true));
        }
      }
      {
        boolean matches_3 = false;
        {
          SNode matchingNode_3 = bmc;
          if (matchingNode_3 != null) {
            matches_3 = SModelUtil_new.isAssignableConcept(matchingNode_3.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression");
          }
        }
        if (matches_3) {
          return new _Quotations.QuotationClass_3().createNode(SLinkOperations.getTarget(matchedNode_0, "rightExpression", true), SLinkOperations.getTarget(matchedNode_0, "leftExpression", true));
        }
      }
      return null;
    } while(false);
  }

  public static SNode convert2(SNode bmc) {
    do {
      SNode matchedNode_1 = bmc;
      {
        boolean matches_4 = false;
        {
          SNode matchingNode_4 = bmc;
          if (matchingNode_4 != null) {
            matches_4 = SModelUtil_new.isAssignableConcept(matchingNode_4.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.PlusExpression");
          }
        }
        if (matches_4) {
          return new _Quotations.QuotationClass_4().createNode(SLinkOperations.getTarget(bmc, "rightExpression", true), SLinkOperations.getTarget(bmc, "leftExpression", true));
        }
      }
      {
        boolean matches_5 = false;
        {
          SNode matchingNode_5 = bmc;
          if (matchingNode_5 != null) {
            matches_5 = SModelUtil_new.isAssignableConcept(matchingNode_5.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.MinusExpression");
          }
        }
        if (matches_5) {
          return new _Quotations.QuotationClass_5().createNode(SLinkOperations.getTarget(bmc, "rightExpression", true), SLinkOperations.getTarget(bmc, "leftExpression", true));
        }
      }
      {
        boolean matches_6 = false;
        {
          SNode matchingNode_6 = bmc;
          if (matchingNode_6 != null) {
            matches_6 = SModelUtil_new.isAssignableConcept(matchingNode_6.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.MulExpression");
          }
        }
        if (matches_6) {
          return new _Quotations.QuotationClass_6().createNode(SLinkOperations.getTarget(bmc, "rightExpression", true), SLinkOperations.getTarget(bmc, "leftExpression", true));
        }
      }
      {
        boolean matches_7 = false;
        {
          SNode matchingNode_7 = bmc;
          if (matchingNode_7 != null) {
            matches_7 = SModelUtil_new.isAssignableConcept(matchingNode_7.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.DivExpression");
          }
        }
        if (matches_7) {
          return new _Quotations.QuotationClass_7().createNode(SLinkOperations.getTarget(bmc, "rightExpression", true), SLinkOperations.getTarget(bmc, "leftExpression", true));
        }
      }
      return null;
    } while(false);
  }

  public static SNode getMathContext(SNode node) {
    SNode mc;
    do {
      SNode matchedNode_2 = node;
      {
        boolean matches_8 = false;
        {
          SNode matchingNode_8 = node;
          if (matchingNode_8 != null) {
            matches_8 = SModelUtil_new.isAssignableConcept(matchingNode_8.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation");
          }
        }
        if (matches_8) {
          mc = SLinkOperations.getTarget(matchedNode_2, "context", true);
          break;
        }
      }
      {
        boolean matches_9 = false;
        {
          SNode matchingNode_9 = node;
          if (matchingNode_9 != null) {
            matches_9 = SModelUtil_new.isAssignableConcept(matchingNode_9.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation");
          }
        }
        if (matches_9) {
          mc = SLinkOperations.getTarget(matchedNode_2, "context", true);
          break;
        }
      }
      {
        boolean matches_10 = false;
        {
          SNode matchingNode_10 = node;
          if (matchingNode_10 != null) {
            matches_10 = SModelUtil_new.isAssignableConcept(matchingNode_10.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation");
          }
        }
        if (matches_10) {
          mc = SLinkOperations.getTarget(matchedNode_2, "context", true);
          break;
        }
      }
      return new _Quotations.QuotationClass_21().createNode();
    } while(false);
    switch (SPropertyOperations.getInteger_def(mc, "precisionSetting", "0")) {
      case 1:
        return new _Quotations.QuotationClass_8().createNode();
      case 2:
        return new _Quotations.QuotationClass_9().createNode();
      case 3:
        return new _Quotations.QuotationClass_10().createNode();
      case 4:
        return new _Quotations.QuotationClass_11().createNode();
      default:
        SNode c = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IntegerConstant", null);
        SPropertyOperations.set(c, "value", "" + SPropertyOperations.getInteger(mc, "precision"));
        return new _Quotations.QuotationClass_12().createNode(c, MathUtil.getRoundingMode(SPropertyOperations.getInteger_def(mc, "roundingMode", "4")));
    }
  }

  public static SNode getRoundingMode(int roundingMode) {
    switch (roundingMode) {
      case 0:
        return new _Quotations.QuotationClass_13().createNode();
      case 1:
        return new _Quotations.QuotationClass_14().createNode();
      case 2:
        return new _Quotations.QuotationClass_15().createNode();
      case 3:
        return new _Quotations.QuotationClass_16().createNode();
      case 4:
        return new _Quotations.QuotationClass_17().createNode();
      case 5:
        return new _Quotations.QuotationClass_18().createNode();
      case 6:
        return new _Quotations.QuotationClass_19().createNode();
      case 7:
        return new _Quotations.QuotationClass_20().createNode();
      default:
        return null;
    }
  }

  public static SNode getUnboxedElementType(SNode t) {
    do {
      SNode matchedNode_3 = t;
      {
        boolean matches_11 = false;
        {
          SNode matchingNode_11 = t;
          if (matchingNode_11 != null) {
            matches_11 = SModelUtil_new.isAssignableConcept(matchingNode_11.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.MatrixType");
          }
        }
        if (matches_11) {
          return Type_Behavior.call_getUnboxedType_1213877337320(SLinkOperations.getTarget(matchedNode_3, "elementType", true));
        }
      }
      {
        boolean matches_12 = false;
        {
          SNode matchingNode_12 = t;
          if (matchingNode_12 != null) {
            matches_12 = SModelUtil_new.isAssignableConcept(matchingNode_12.getConceptFqName(), "jetbrains.mps.baseLanguage.math.structure.VectorType");
          }
        }
        if (matches_12) {
          return Type_Behavior.call_getUnboxedType_1213877337320(SLinkOperations.getTarget(matchedNode_3, "elementType", true));
        }
      }
      return null;
    } while(false);
  }

  public static int getIndex(SNode node) {
    if (MatchingUtil.matchNodes(getUnboxedElementType(TypeChecker.getInstance().getTypeOf(node)), new _Quotations.QuotationClass_32().createNode())) {
      return 1;
    }
    if (MatchingUtil.matchNodes(getUnboxedElementType(TypeChecker.getInstance().getTypeOf(node)), new _Quotations.QuotationClass_33().createNode())) {
      return 2;
    }
    if (MatchingUtil.matchNodes(getUnboxedElementType(TypeChecker.getInstance().getTypeOf(node)), new _Quotations.QuotationClass_34().createNode())) {
      return 3;
    }
    if (MatchingUtil.matchNodes(getUnboxedElementType(TypeChecker.getInstance().getTypeOf(node)), new _Quotations.QuotationClass_35().createNode())) {
      return 4;
    }
    if (MatchingUtil.matchNodes(getUnboxedElementType(TypeChecker.getInstance().getTypeOf(node)), new _Quotations.QuotationClass_36().createNode())) {
      return 5;
    }
    if (SNodeOperations.isInstanceOf(getUnboxedElementType(TypeChecker.getInstance().getTypeOf(node)), "jetbrains.mps.baseLanguage.math.structure.BigIntegerType")) {
      return 6;
    }
    if (SNodeOperations.isInstanceOf(getUnboxedElementType(TypeChecker.getInstance().getTypeOf(node)), "jetbrains.mps.baseLanguage.math.structure.BigDecimalType")) {
      return 7;
    }
    if (SNodeOperations.isInstanceOf(getUnboxedElementType(TypeChecker.getInstance().getTypeOf(node)), "jetbrains.mps.baseLanguage.math.structure.ComplexType")) {
      return 8;
    }
    if (SNodeOperations.isInstanceOf(getUnboxedElementType(TypeChecker.getInstance().getTypeOf(node)), "jetbrains.mps.baseLanguage.math.structure.BigComplexType")) {
      return 9;
    }
    return 0;
  }

  public static SNode operConstant(SNode node) {
    boolean b1 = SNodeOperations.isInstanceOf(getUnboxedElementType(TypeChecker.getInstance().getTypeOf(node)), "jetbrains.mps.baseLanguage.math.structure.BigDecimalType");
    boolean b2 = SNodeOperations.isInstanceOf(getUnboxedElementType(TypeChecker.getInstance().getTypeOf(node)), "jetbrains.mps.baseLanguage.math.structure.BigComplexType");
    SNode operation = new _Quotations.QuotationClass_37().createNode();
    if (b1) {
      operation = new _Quotations.QuotationClass_38().createNode(MathUtil.getMathContext(node));
    }
    if (b2) {
      operation = new _Quotations.QuotationClass_39().createNode(MathUtil.getMathContext(node));
    }
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation") && (b1 || b2)) {
      return operation;
    } else if ((SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation") && SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation"), "context", true) != null) && (b1 || b2)) {
      return operation;
    } else if ((SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation") && SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation"), "context", true) != null) && (b1 || b2)) {
      return operation;
    } else {
      return operations[getIndex(node)];
    }
  }
}
