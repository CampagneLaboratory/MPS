package jetbrains.mps.baseLanguage.math.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.BaseHelginsDescriptor;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InequationReplacementRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.OverloadedOperationsTypesProvider;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.baseLanguage.math.behavior.MathUtil;

public class TypesystemDescriptor extends BaseHelginsDescriptor {
  public TypesystemDescriptor() {
    {
      InferenceRule_Runtime inferenceRule = new typeof_AbsExpression_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_ArithmSymbol_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_BinaryOperationMathContext_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_ComplexLiteral_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_ConjugateOperation_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_Determinant_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_DivOperationFraction_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_ExtrSymbol_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_ILiteral_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_InIntervalExpression_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_IntervalContainsExpression_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_IntervalLiteral_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_IntervalType_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_LinearSolveOperation_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_MathSymbol_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_MathSymbolFromToIndex_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_MathSymbolIndex_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_MathSymbolReference_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_MathTypeCast_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_MatrixConstructor_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_MatrixElementAccessExpression_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_MatrixInitializer_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_MatrixInitializerIndexReference_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_MatrixInverseOperation_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_MatrixNorm_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_MatrixUnit_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_MatrixZero_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_PowExpression_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_TransposeOperation_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_TrigonometricExpression_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      InferenceRule_Runtime inferenceRule = new typeof_VectorInitializer_InferenceRule();
      this.myInferenceRules.add(inferenceRule);
    }
    {
      NonTypesystemRule_Runtime nonTypesystemRule = new check_dimensions_NonTypesystemRule();
      this.myNonTypesystemRules.add(nonTypesystemRule);
    }
    {
      NonTypesystemRule_Runtime nonTypesystemRule = new highlight_complex_to_real_casts_NonTypesystemRule();
      this.myNonTypesystemRules.add(nonTypesystemRule);
    }
    {
      NonTypesystemRule_Runtime nonTypesystemRule = new matrix_element_must_be_number_NonTypesystemRule();
      this.myNonTypesystemRules.add(nonTypesystemRule);
    }
    {
      NonTypesystemRule_Runtime nonTypesystemRule = new matrix_index_lvalue_NonTypesystemRule();
      this.myNonTypesystemRules.add(nonTypesystemRule);
    }
    {
      NonTypesystemRule_Runtime nonTypesystemRule = new vector_element_must_be_number_NonTypesystemRule();
      this.myNonTypesystemRules.add(nonTypesystemRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new IntervalSupertypes_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new bigcomplex_extends_BigComplex_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new bigdecimal_extends_BigDecimal_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new bigdecimal_extends_bigcomplex_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new biginteger_extends_BigInteger_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new biginteger_extends_bigdecimal_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new complex_extends_Complex_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new complex_extends_bigcomplex_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new double_extends_bigdecimal_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new double_extends_complex_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new long_extends_biginteger_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new matrix_subtype_of_object_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      SubtypingRule_Runtime subtypingRule = new vector_subtype_of_matrix_SubtypingRule();
      this.mySubtypingRules.add(subtypingRule);
    }
    {
      InequationReplacementRule_Runtime eliminationRule = new matrix_replacement_rule_InequationReplacementRule();
      this.myInequationReplacementRules.add(eliminationRule);
    }
    {
      InequationReplacementRule_Runtime eliminationRule = new matrix_vector_replacement_rule_InequationReplacementRule();
      this.myInequationReplacementRules.add(eliminationRule);
    }
    {
      InequationReplacementRule_Runtime eliminationRule = new vector_vector_replacement_rule_InequationReplacementRule();
      this.myInequationReplacementRules.add(eliminationRule);
    }
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProviderfsn8dg0i("jetbrains.mps.baseLanguage.structure.ShiftLeftExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProviderfsn96dgs("jetbrains.mps.baseLanguage.structure.BitwiseAndExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProviderfsn974ip("jetbrains.mps.baseLanguage.structure.BitwiseOrExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProviderfsn976cf("jetbrains.mps.baseLanguage.structure.BitwiseXorExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProviderfsn9jzp4("jetbrains.mps.baseLanguage.structure.ShiftRightExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProviderfsvuwn40("jetbrains.mps.baseLanguage.structure.RemExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProviderft5rbw06("jetbrains.mps.baseLanguage.structure.LessThanExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProviderft5rcjrn("jetbrains.mps.baseLanguage.structure.GreaterThanExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProviderft5rckc8("jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProviderft5rckx8("jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider11xagq0fibkr6("jetbrains.mps.baseLanguage.structure.PlusExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider11xagq0fiepx5("jetbrains.mps.baseLanguage.structure.MinusExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider11xagq0fierl2("jetbrains.mps.baseLanguage.structure.MulExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider11xagq0fierm4("jetbrains.mps.baseLanguage.structure.DivExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider1mbntjfiom0kv("jetbrains.mps.baseLanguage.structure.PlusExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider1mbntjfiom5ny("jetbrains.mps.baseLanguage.structure.MinusExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider1mbntjfioosq6("jetbrains.mps.baseLanguage.structure.MulExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider1mbntjfioosqc("jetbrains.mps.baseLanguage.structure.MulExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider1mbntjfioouf0("jetbrains.mps.baseLanguage.structure.DivExpression"));
    this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider1mbntjfioq6tr("jetbrains.mps.baseLanguage.structure.MulExpression"));
  }

  public static class CustomOverloadedOperationsTypesProviderfsn8dg0i extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProviderfsn8dg0i(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigInteger;
      this.myRightOperandType = MathTypeUtil.qInt;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = true;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.qBigInteger;
    }
  }

  public static class CustomOverloadedOperationsTypesProviderfsn96dgs extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProviderfsn96dgs(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigInteger;
      this.myRightOperandType = MathTypeUtil.qBigInteger;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_bitwiseOp(leftOperandType, rightOperandType);
    }
  }

  public static class CustomOverloadedOperationsTypesProviderfsn974ip extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProviderfsn974ip(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigInteger;
      this.myRightOperandType = MathTypeUtil.qBigInteger;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_bitwiseOp(leftOperandType, rightOperandType);
    }
  }

  public static class CustomOverloadedOperationsTypesProviderfsn976cf extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProviderfsn976cf(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigInteger;
      this.myRightOperandType = MathTypeUtil.qBigInteger;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_bitwiseOp(leftOperandType, rightOperandType);
    }
  }

  public static class CustomOverloadedOperationsTypesProviderfsn9jzp4 extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProviderfsn9jzp4(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigInteger;
      this.myRightOperandType = MathTypeUtil.qInt;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = true;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.qBigInteger;
    }
  }

  public static class CustomOverloadedOperationsTypesProviderfsvuwn40 extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProviderfsvuwn40(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigInteger;
      this.myRightOperandType = MathTypeUtil.qBigInteger;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_bitwiseOp(leftOperandType, rightOperandType);
    }
  }

  public static class CustomOverloadedOperationsTypesProviderft5rbw06 extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProviderft5rbw06(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigDecimal;
      this.myRightOperandType = MathTypeUtil.qBigDecimal;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_compareOp(leftOperandType, rightOperandType);
    }
  }

  public static class CustomOverloadedOperationsTypesProviderft5rcjrn extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProviderft5rcjrn(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigDecimal;
      this.myRightOperandType = MathTypeUtil.qBigDecimal;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_compareOp(leftOperandType, rightOperandType);
    }
  }

  public static class CustomOverloadedOperationsTypesProviderft5rckc8 extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProviderft5rckc8(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigDecimal;
      this.myRightOperandType = MathTypeUtil.qBigDecimal;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_compareOp(leftOperandType, rightOperandType);
    }
  }

  public static class CustomOverloadedOperationsTypesProviderft5rckx8 extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProviderft5rckx8(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigDecimal;
      this.myRightOperandType = MathTypeUtil.qBigDecimal;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_compareOp(leftOperandType, rightOperandType);
    }
  }

  public static class CustomOverloadedOperationsTypesProvider11xagq0fibkr6 extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider11xagq0fibkr6(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigComplex;
      this.myRightOperandType = MathTypeUtil.qBigComplex;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_arithmeticOp(leftOperandType, rightOperandType);
    }
  }

  public static class CustomOverloadedOperationsTypesProvider11xagq0fiepx5 extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider11xagq0fiepx5(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigComplex;
      this.myRightOperandType = MathTypeUtil.qBigComplex;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_arithmeticOp(leftOperandType, rightOperandType);
    }
  }

  public static class CustomOverloadedOperationsTypesProvider11xagq0fierl2 extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider11xagq0fierl2(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigComplex;
      this.myRightOperandType = MathTypeUtil.qBigComplex;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_arithmeticOp(leftOperandType, rightOperandType);
    }
  }

  public static class CustomOverloadedOperationsTypesProvider11xagq0fierm4 extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider11xagq0fierm4(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigComplex;
      this.myRightOperandType = MathTypeUtil.qBigComplex;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_arithmeticOp(leftOperandType, rightOperandType);
    }
  }

  public static class CustomOverloadedOperationsTypesProvider1mbntjfiom0kv extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider1mbntjfiom0kv(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBCMatrix;
      this.myRightOperandType = MathTypeUtil.qBCMatrix;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_matrixOp(leftOperandType, rightOperandType, false);
    }
  }

  public static class CustomOverloadedOperationsTypesProvider1mbntjfiom5ny extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider1mbntjfiom5ny(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBCMatrix;
      this.myRightOperandType = MathTypeUtil.qBCMatrix;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_matrixOp(leftOperandType, rightOperandType, false);
    }
  }

  public static class CustomOverloadedOperationsTypesProvider1mbntjfioosq6 extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider1mbntjfioosq6(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBigComplex;
      this.myRightOperandType = MathTypeUtil.qBCMatrix;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.typeOfMatrixScalarMultiplication(leftOperandType, rightOperandType);
    }
  }

  public static class CustomOverloadedOperationsTypesProvider1mbntjfioosqc extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider1mbntjfioosqc(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBCMatrix;
      this.myRightOperandType = MathTypeUtil.qBigComplex;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(MathUtil.getUnboxedElementType(leftOperandType), rightOperandType)) {
        return MathTypeUtil.qMatrix(rightOperandType);
      } else {
        return leftOperandType;
      }
    }
  }

  public static class CustomOverloadedOperationsTypesProvider1mbntjfioouf0 extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider1mbntjfioouf0(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBCMatrix;
      this.myRightOperandType = MathTypeUtil.qBigComplex;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(MathUtil.getUnboxedElementType(leftOperandType), rightOperandType)) {
        return MathTypeUtil.qMatrix(rightOperandType);
      } else {
        return leftOperandType;
      }
    }
  }

  public static class CustomOverloadedOperationsTypesProvider1mbntjfioq6tr extends OverloadedOperationsTypesProvider {
    public CustomOverloadedOperationsTypesProvider1mbntjfioq6tr(String conceptFQ) {
      this.myLeftOperandType = MathTypeUtil.qBCMatrix;
      this.myRightOperandType = MathTypeUtil.qBCMatrix;
      this.myOperationConceptFQName = conceptFQ;
      this.myLeftTypeIsExact = false;
      this.myRightTypeIsExact = false;
      this.myRightIsStrong = false;
      this.myLeftIsStrong = false;
    }

    public SNode getOperationType(SNode operation, SNode leftOperandType, SNode rightOperandType) {
      return MathTypeUtil.ML_matrixOp(leftOperandType, rightOperandType, true);
    }
  }
}
