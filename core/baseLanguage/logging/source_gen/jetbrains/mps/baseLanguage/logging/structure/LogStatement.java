package jetbrains.mps.baseLanguage.logging.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class LogStatement extends Statement {
  public static final String concept = "jetbrains.mps.baseLanguage.logging.structure.LogStatement";
  public static final String HAS_EXCEPTION = "hasException";
  public static final String SEVERITY = "severity";
  public static final String LOG_EXPRESSION = "logExpression";
  public static final String EXCEPTION = "exception";

  public LogStatement(SNode node) {
    super(node);
  }

  public boolean getHasException() {
    return this.getBooleanProperty(LogStatement.HAS_EXCEPTION);
  }

  public void setHasException(boolean value) {
    this.setBooleanProperty(LogStatement.HAS_EXCEPTION, value);
  }

  public Severity getSeverity() {
    String value = super.getProperty(LogStatement.SEVERITY);
    return Severity.parseValue(value);
  }

  public void setSeverity(Severity value) {
    super.setProperty(LogStatement.SEVERITY, value.getValueAsString());
  }

  public Expression getLogExpression() {
    return (Expression)this.getChild(LogStatement.LOG_EXPRESSION);
  }

  public void setLogExpression(Expression node) {
    super.setChild(LogStatement.LOG_EXPRESSION, node);
  }

  public Expression getException() {
    return (Expression)this.getChild(LogStatement.EXCEPTION);
  }

  public void setException(Expression node) {
    super.setChild(LogStatement.EXCEPTION, node);
  }


  public static LogStatement newInstance(SModel sm, boolean init) {
    return (LogStatement)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.logging.structure.LogStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static LogStatement newInstance(SModel sm) {
    return LogStatement.newInstance(sm, false);
  }

}
