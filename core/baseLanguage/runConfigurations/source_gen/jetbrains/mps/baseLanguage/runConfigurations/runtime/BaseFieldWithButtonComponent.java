package jetbrains.mps.baseLanguage.runConfigurations.runtime;

/*Generated by MPS */

import javax.swing.JPanel;
import com.intellij.openapi.Disposable;
import java.util.List;
import java.awt.event.ActionListener;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.annotations.NotNull;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import com.intellij.openapi.util.Disposer;
import javax.swing.JTextField;

public class BaseFieldWithButtonComponent extends JPanel implements Disposable {
  private final List<ActionListener> myListeners = ListSequence.fromList(new ArrayList<ActionListener>());
  private String myText;

  public BaseFieldWithButtonComponent() {
  }

  public void removeActionListener(ActionListener listener) {
    ListSequence.fromList(this.myListeners).removeElement(listener);
  }

  public void addActionListener(@NotNull final ActionListener listener) {
    ListSequence.fromList(this.myListeners).addElement(listener);
    this.getTextField().addKeyListener(new KeyAdapter() {
      @Override
      public void keyReleased(KeyEvent p0) {
        BaseFieldWithButtonComponent.this.onChange();
      }
    });
  }

  public void setText(String text) {
    this.myText = text;
    this.onChange();
  }

  public String getText() {
    if (this.myText == null) {
      return this.getTextField().getText();
    }
    return this.myText;
  }

  protected void onChange() {
    ListSequence.fromList(this.myListeners).visitAll(new IVisitor<ActionListener>() {
      public void visit(ActionListener it) {
        it.actionPerformed(null);
      }
    });
    int cp = this.getTextField().getCaretPosition();
    this.getTextField().setText(this.getText());
    this.getTextField().setCaretPosition(cp);
    this.myText = null;
  }

  public void dispose() {
    Disposable disposable = this.getDisposableComponent();
    if (disposable == null) {
      return;
    }
    Disposer.dispose(disposable);
  }

  public JTextField getTextField() {
    return new JTextField();
  }

  public Disposable getDisposableComponent() {
    return null;
  }
}
