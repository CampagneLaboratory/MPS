package jetbrains.mps.baseLanguage.runConfigurations.runtime;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.findUsages.FindUsagesManager;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import jetbrains.mps.smodel.ModelAccess;
import java.util.Set;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.workbench.dialogs.choosers.CommonChoosers;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;

public class MainNodeChooser<C extends SNode> extends BaseChooserComponent {
  @NotNull
  private final C myTargetConcept;
  @Nullable
  private final _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> myAcceptor;
  private SNode myNode;

  public MainNodeChooser(@NotNull C targetConcept, @Nullable _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> acceptor) {
    super();

    this.myTargetConcept = targetConcept;
    this.myAcceptor = acceptor;

    this.init(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {

        final FindUsagesManager findUsegesManager = FindUsagesManager.getInstance();
        final FindUsagesManager.ProgressAdapter progressAdapter = new FindUsagesManager.ProgressAdapter(new EmptyProgressIndicator());

        final Wrappers._T<List<SNode>> toChooseFrom = new Wrappers._T<List<SNode>>();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            Set<SNode> instances = findUsegesManager.findInstances(((AbstractConceptDeclaration) SNodeOperations.getAdapter(MainNodeChooser.this.myTargetConcept)), GlobalFileteredScope.getInstance(), progressAdapter, false);
            if (MainNodeChooser.this.myAcceptor == null) {
              toChooseFrom.value = ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<SNode>(), instances)).toListSequence();
            } else {
              toChooseFrom.value = ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<SNode>(), instances)).where(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return MainNodeChooser.this.myAcceptor.invoke(it);
                }
              }).toListSequence();
            }
          }
        });

        SNode selectedNode = CommonChoosers.showDialogNodeChooser(MainNodeChooser.this, toChooseFrom.value);
        MainNodeChooser.this.setNode(selectedNode);
      }
    });
  }

  public SNode getNode() {
    return this.myNode;
  }

  public void setNode(final SNode node) {
    if (node == null) {
      if (this.myNode == null) {
        this.setText(null);
      }
    } else {
      this.myNode = node;
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          MainNodeChooser.this.setText(INamedConcept_Behavior.call_getFqName_1213877404258(node));
        }
      });
    }
  }
}
