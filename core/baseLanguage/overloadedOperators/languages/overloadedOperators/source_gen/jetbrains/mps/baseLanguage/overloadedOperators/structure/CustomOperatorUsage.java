package jetbrains.mps.baseLanguage.overloadedOperators.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.BinaryOperation;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CustomOperatorUsage extends BinaryOperation {
  public static final String concept = "jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperatorUsage";
  public static final String OPERATOR = "operator";

  public CustomOperatorUsage(SNode node) {
    super(node);
  }

  public CustomOperatorDeclaration getOperator() {
    return (CustomOperatorDeclaration) this.getReferent(CustomOperatorDeclaration.class, CustomOperatorUsage.OPERATOR);
  }

  public void setOperator(CustomOperatorDeclaration node) {
    super.setReferent(CustomOperatorUsage.OPERATOR, node);
  }

  public static CustomOperatorUsage newInstance(SModel sm, boolean init) {
    return (CustomOperatorUsage) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperatorUsage", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CustomOperatorUsage newInstance(SModel sm) {
    return CustomOperatorUsage.newInstance(sm, false);
  }
}
