package jetbrains.mps.baseLanguage.overloadedOperators.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.ConceptDeclaration;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BinaryOperationReference extends Operator {
  public static final String concept = "jetbrains.mps.baseLanguage.overloadedOperators.structure.BinaryOperationReference";
  public static final String BINARY_OPERATION = "binaryOperation";

  public BinaryOperationReference(SNode node) {
    super(node);
  }

  public ConceptDeclaration getBinaryOperation() {
    return (ConceptDeclaration) this.getReferent(ConceptDeclaration.class, BinaryOperationReference.BINARY_OPERATION);
  }

  public void setBinaryOperation(ConceptDeclaration node) {
    super.setReferent(BinaryOperationReference.BINARY_OPERATION, node);
  }

  public static BinaryOperationReference newInstance(SModel sm, boolean init) {
    return (BinaryOperationReference) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.overloadedOperators.structure.BinaryOperationReference", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BinaryOperationReference newInstance(SModel sm) {
    return BinaryOperationReference.newInstance(sm, false);
  }
}
