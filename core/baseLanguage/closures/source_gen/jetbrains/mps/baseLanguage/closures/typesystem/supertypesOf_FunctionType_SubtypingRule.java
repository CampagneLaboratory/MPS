package jetbrains.mps.baseLanguage.closures.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.closures.behavior.FunctionType_Behavior;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.baseLanguage.closures.behavior.RuntimeUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;

public class supertypesOf_FunctionType_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public supertypesOf_FunctionType_SubtypingRule() {
  }

  public List<SNode> getSubOrSuperTypes(SNode ft, TypeCheckingContext typeCheckingContext) {
    List<SNode> supertypes = ListSequence.fromList(new ArrayList<SNode>());
    String rtSig = FunctionType_Behavior.call_getRuntimeClassName_1230472987259(ft) + "." + FunctionType_Behavior.call_getRuntimeSignature_1213877404927(ft);
    SNode ice = MapSequence.fromMap(RuntimeUtils.getRuntimeClassifiersMap()).get(rtSig);
    if (SNodeOperations.isInstanceOf(ice, "jetbrains.mps.baseLanguage.structure.Interface")) {
      SNode ct = new supertypesOf_FunctionType_SubtypingRule.QuotationClass_0368_l523emne7dbw().createNode(ice, typeCheckingContext);
      if ((FunctionType_Behavior.call_getResultType_1230475757059(ft) != null)) {
        ListSequence.fromList(SLinkOperations.getTargets(ct, "parameter", true)).addElement(SNodeOperations.copyNode(FunctionType_Behavior.call_getResultType_1230475757059(ft)));
      }
      for (SNode pt : SLinkOperations.getTargets(ft, "parameterType", true)) {
        ListSequence.fromList(SLinkOperations.getTargets(ct, "parameter", true)).addElement(SNodeOperations.copyNode(pt));
      }
      supertypes = ListSequence.fromList(new ArrayList<SNode>());
    }
    return supertypes;
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.closures.structure.FunctionType";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean isWeak() {
    return true;
  }

  public static class QuotationClass_0368_l523emne7dbw {
    public QuotationClass_0368_l523emne7dbw() {
    }

    public SNode createNode(Object parameter_0368_l523emne7avt, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_0368_l523emne7avr = null;
      {
        quotedNode_0368_l523emne7avr = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_0368_l523emne7avr = quotedNode_0368_l523emne7avr;
        quotedNode1_0368_l523emne7avr.setReferent("classifier", (SNode) parameter_0368_l523emne7avt);
        result = quotedNode1_0368_l523emne7avr;
      }
      return result;
    }

    public SNode createNode(Object parameter_0368_l523emne7avt) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_0368_l523emne7avr = null;
      {
        quotedNode_0368_l523emne7avr = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_0368_l523emne7avr = quotedNode_0368_l523emne7avr;
        quotedNode1_0368_l523emne7avr.setReferent("classifier", (SNode) parameter_0368_l523emne7avt);
        result = quotedNode1_0368_l523emne7avr;
      }
      return result;
    }
  }
}
