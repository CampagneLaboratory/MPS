package jetbrains.mps.baseLanguage.closures.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.smodel.CopyUtil;

public class typeof_CompactInvokeFunctionExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_CompactInvokeFunctionExpression_InferenceRule() {
  }

  public void applyRule(final SNode invoke, final TypeCheckingContext typeCheckingContext) {
    List<SNode> ptypes1 = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> ptypes2 = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode p : SLinkOperations.getTargets(invoke, "parameter", true)) {
      final SNode T_typevar_7246115176735293270 = typeCheckingContext.createNewRuntimeTypesVariable();
      ListSequence.fromList(ptypes1).addElement(typeCheckingContext.getEquationManager().getRepresentator(T_typevar_7246115176735293270));
      ListSequence.fromList(ptypes2).addElement(typeCheckingContext.getEquationManager().getRepresentator(T_typevar_7246115176735293270));
      {
        SNode _nodeToCheck_1029348928467 = p;
        BaseIntentionProvider intentionProvider = null;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "7246115176735293281", 0, intentionProvider);
        _info_12389875345.setInequationGroup("default");
        typeCheckingContext.createLessThanInequation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "7246115176735293285", true), (SNode) typeCheckingContext.getEquationManager().getRepresentator(T_typevar_7246115176735293270), false, _info_12389875345);
      }
    }
    final SNode ret_typevar_7246115176735293292 = typeCheckingContext.createNewRuntimeTypesVariable();
    final SNode ret2_typevar_7246115176735293293 = typeCheckingContext.createNewRuntimeTypesVariable();
    {
      SNode _nodeToCheck_1029348928467 = invoke;
      BaseIntentionProvider intentionProvider = null;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "7246115176735293294", 0, intentionProvider);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "7246115176735293298", true), (SNode) typeCheckingContext.getEquationManager().getRepresentator(ret_typevar_7246115176735293292), _info_12389875345);
    }
    {
      SNode _nodeToCheck_1029348928467 = invoke;
      BaseIntentionProvider intentionProvider = null;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, "either return type or parameter types don't match", "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "7246115176735293300", 0, intentionProvider);
      _info_12389875345.setInequationGroup("default");
      typeCheckingContext.createLessThanInequationStrong((SNode) typeCheckingContext.typeOf(SLinkOperations.getTarget(invoke, "function", true), "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "7246115176735293302", true), (SNode) new typeof_CompactInvokeFunctionExpression_InferenceRule.QuotationClass_2237_0().createNode(ptypes1, typeCheckingContext.getEquationManager().getRepresentator(ret_typevar_7246115176735293292), ptypes2, typeCheckingContext.getEquationManager().getRepresentator(ret_typevar_7246115176735293292), typeCheckingContext.getEquationManager().getRepresentator(ret2_typevar_7246115176735293293), typeCheckingContext), false, _info_12389875345);
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

  public static class QuotationClass_2237_0 {
    public QuotationClass_2237_0() {
    }

    public SNode createNode(Object parameter_2237_0, Object parameter_2237_1, Object parameter_2237_2, Object parameter_2237_3, Object parameter_2237_4, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_2237_0 = null;
      SNode quotedNode_2237_1 = null;
      SNode quotedNode_2237_2 = null;
      SNode quotedNode_2237_3 = null;
      SNode quotedNode_2237_4 = null;
      SNode quotedNode_2237_5 = null;
      SNode quotedNode_2237_6 = null;
      SNode quotedNode_2237_7 = null;
      {
        quotedNode_2237_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.JoinType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2237_0 = quotedNode_2237_0;
        {
          quotedNode_2237_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.FunctionType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_2237_1 = quotedNode_2237_1;
          {
            List<SNode> nodes = (List<SNode>) parameter_2237_0;
            for (SNode child : nodes) {
              quotedNode_2237_1.addChild("parameterType", HUtil.copyIfNecessary(child, typeCheckingContext));
            }
          }
          {
            quotedNode_2237_4 = (SNode) parameter_2237_1;
            SNode quotedNode1_2237_2;
            if (_parameterValues_129834374.contains(quotedNode_2237_4)) {
              quotedNode1_2237_2 = CopyUtil.copy(quotedNode_2237_4);
            } else {
              _parameterValues_129834374.add(quotedNode_2237_4);
              quotedNode1_2237_2 = quotedNode_2237_4;
            }
            if (quotedNode1_2237_2 != null) {
              quotedNode_2237_1.addChild("resultType", HUtil.copyIfNecessary(quotedNode1_2237_2, typeCheckingContext));
            }
          }
          quotedNode_2237_0.addChild("argument", quotedNode1_2237_1);
        }
        {
          quotedNode_2237_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_2237_3 = quotedNode_2237_2;
          {
            List<SNode> nodes = (List<SNode>) parameter_2237_2;
            for (SNode child : nodes) {
              quotedNode_2237_2.addChild("parameterType", HUtil.copyIfNecessary(child, typeCheckingContext));
            }
          }
          {
            quotedNode_2237_6 = (SNode) parameter_2237_3;
            SNode quotedNode1_2237_4;
            if (_parameterValues_129834374.contains(quotedNode_2237_6)) {
              quotedNode1_2237_4 = CopyUtil.copy(quotedNode_2237_6);
            } else {
              _parameterValues_129834374.add(quotedNode_2237_6);
              quotedNode1_2237_4 = quotedNode_2237_6;
            }
            if (quotedNode1_2237_4 != null) {
              quotedNode_2237_2.addChild("terminateType", HUtil.copyIfNecessary(quotedNode1_2237_4, typeCheckingContext));
            }
          }
          {
            quotedNode_2237_7 = (SNode) parameter_2237_4;
            SNode quotedNode1_2237_5;
            if (_parameterValues_129834374.contains(quotedNode_2237_7)) {
              quotedNode1_2237_5 = CopyUtil.copy(quotedNode_2237_7);
            } else {
              _parameterValues_129834374.add(quotedNode_2237_7);
              quotedNode1_2237_5 = quotedNode_2237_7;
            }
            if (quotedNode1_2237_5 != null) {
              quotedNode_2237_2.addChild("resultType", HUtil.copyIfNecessary(quotedNode1_2237_5, typeCheckingContext));
            }
          }
          quotedNode_2237_0.addChild("argument", quotedNode1_2237_3);
        }
        result = quotedNode1_2237_0;
      }
      return result;
    }

    public SNode createNode(Object parameter_2237_0, Object parameter_2237_1, Object parameter_2237_2, Object parameter_2237_3, Object parameter_2237_4) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_2237_0 = null;
      SNode quotedNode_2237_1 = null;
      SNode quotedNode_2237_2 = null;
      SNode quotedNode_2237_3 = null;
      SNode quotedNode_2237_4 = null;
      SNode quotedNode_2237_5 = null;
      SNode quotedNode_2237_6 = null;
      SNode quotedNode_2237_7 = null;
      {
        quotedNode_2237_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.JoinType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2237_0 = quotedNode_2237_0;
        {
          quotedNode_2237_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.FunctionType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_2237_1 = quotedNode_2237_1;
          {
            List<SNode> nodes = (List<SNode>) parameter_2237_0;
            for (SNode child : nodes) {
              quotedNode_2237_1.addChild("parameterType", HUtil.copyIfNecessary(child));
            }
          }
          {
            quotedNode_2237_4 = (SNode) parameter_2237_1;
            SNode quotedNode1_2237_2;
            if (_parameterValues_129834374.contains(quotedNode_2237_4)) {
              quotedNode1_2237_2 = CopyUtil.copy(quotedNode_2237_4);
            } else {
              _parameterValues_129834374.add(quotedNode_2237_4);
              quotedNode1_2237_2 = quotedNode_2237_4;
            }
            if (quotedNode1_2237_2 != null) {
              quotedNode_2237_1.addChild("resultType", HUtil.copyIfNecessary(quotedNode1_2237_2));
            }
          }
          quotedNode_2237_0.addChild("argument", quotedNode1_2237_1);
        }
        {
          quotedNode_2237_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_2237_3 = quotedNode_2237_2;
          {
            List<SNode> nodes = (List<SNode>) parameter_2237_2;
            for (SNode child : nodes) {
              quotedNode_2237_2.addChild("parameterType", HUtil.copyIfNecessary(child));
            }
          }
          {
            quotedNode_2237_6 = (SNode) parameter_2237_3;
            SNode quotedNode1_2237_4;
            if (_parameterValues_129834374.contains(quotedNode_2237_6)) {
              quotedNode1_2237_4 = CopyUtil.copy(quotedNode_2237_6);
            } else {
              _parameterValues_129834374.add(quotedNode_2237_6);
              quotedNode1_2237_4 = quotedNode_2237_6;
            }
            if (quotedNode1_2237_4 != null) {
              quotedNode_2237_2.addChild("terminateType", HUtil.copyIfNecessary(quotedNode1_2237_4));
            }
          }
          {
            quotedNode_2237_7 = (SNode) parameter_2237_4;
            SNode quotedNode1_2237_5;
            if (_parameterValues_129834374.contains(quotedNode_2237_7)) {
              quotedNode1_2237_5 = CopyUtil.copy(quotedNode_2237_7);
            } else {
              _parameterValues_129834374.add(quotedNode_2237_7);
              quotedNode1_2237_5 = quotedNode_2237_7;
            }
            if (quotedNode1_2237_5 != null) {
              quotedNode_2237_2.addChild("resultType", HUtil.copyIfNecessary(quotedNode1_2237_5));
            }
          }
          quotedNode_2237_0.addChild("argument", quotedNode1_2237_3);
        }
        result = quotedNode1_2237_0;
      }
      return result;
    }
  }
}
