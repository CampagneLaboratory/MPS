package jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.helper;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.closures.behavior.FunctionType_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Collections;
import java.util.Iterator;
import java.text.Collator;
import jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.helper._Quotations;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.baseLanguage.closures.util.Constants;
import jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.helper.ClosureLiteralUtil;
import jetbrains.mps.baseLanguage.closures.constraints.ClassifierTypeUtil;
import java.util.Comparator;

public class FunctionTypeUtil {

  public static String getRuntimeSignature(SNode ft) {
    return FunctionType_Behavior.call_getRuntimeSignature_1213877404927(ft);
  }

  public static String getAdapterName(SNode adaptable, SNode target) {
    String aname = SPropertyOperations.getString(SLinkOperations.getTarget(adaptable, "classifier", false), "name");
    int aldidx = aname.lastIndexOf(".");
    aname = (aldidx >= 0 ?
      aname.substring(aldidx + 1) :
      aname
    );
    String tname = SPropertyOperations.getString(SLinkOperations.getTarget(target, "classifier", false), "name");
    int tldidx = tname.lastIndexOf(".");
    tname = (tldidx >= 0 ?
      tname.substring(tldidx + 1) :
      tname
    );
    return aname + "_to_" + tname + "_adapter";
  }

  public static SNode getAdaptableTarget(SNode expr, ITemplateGenerator generator) {
    SNode ntype = TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(expr), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), true);
    assert ntype != null;
    List<SNode> targets = FunctionTypeUtil.getAdaptableClassifierTypeTargets(SNodeOperations.cast(ntype, "jetbrains.mps.baseLanguage.structure.ClassifierType"), generator);
    String trgFQname = (String)FunctionTypeUtil.getPrepData(expr, generator);
    SNode trg = null;
    for(SNode ct : targets) {
      if (trgFQname.equals(INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(ct, "classifier", false)))) {
        trg = ct;
        break;
      }
    }
    return trg;
  }

  public static List<SNode> getAllFunctionTypes(SModel sourceModel) {
    List<SNode> cls = SModelOperations.getNodes(sourceModel, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral");
    List<SNode> typesList = ListSequence.<SNode>fromArray();
    for(SNode cl : cls) {
      ListSequence.fromList(typesList).addElement(TypeChecker.getInstance().getTypeOf(cl));
    }
    List<SNode> funTypes = SModelOperations.getNodes(sourceModel, "jetbrains.mps.baseLanguage.closures.structure.FunctionType");
    ListSequence.fromList(typesList).addSequence(ListSequence.fromList(funTypes));
    Collections.sort(typesList, new FunctionTypeUtil.FunctionTypeComparator());
    SNode prev = null;
    for(Iterator<SNode> it = ListSequence.fromList(typesList).iterator() ; it.hasNext() ; ) {
      SNode next = ((SNode)it.next());
      if (prev != null) {
        if (Collator.getInstance().compare(FunctionType_Behavior.call_getSignature_1213877405047(((SNode)prev)), FunctionType_Behavior.call_getSignature_1213877405047(((SNode)next))) == 0) {
          it.remove();
          continue;
        }
      }
      prev = next;
    }
    return typesList;
  }

  public static SNode unmeet(SNode possiblyMeet) {
    SNode tmp = possiblyMeet;
with_meet:
    while (SNodeOperations.isInstanceOf(tmp, "jetbrains.mps.lang.typesystem.structure.MeetType")) {
      for(SNode arg : SLinkOperations.getTargets(SNodeOperations.cast(tmp, "jetbrains.mps.lang.typesystem.structure.MeetType"), "argument", true)) {
        if (!(SNodeOperations.isInstanceOf(arg, "jetbrains.mps.baseLanguage.structure.VoidType"))) {
          tmp = arg;
          continue with_meet;
        }
      }
      return new _Quotations.QuotationClass_0().createNode();
    }
    if (SNodeOperations.isInstanceOf(tmp, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
      List<SNode> params = SLinkOperations.getTargets(SNodeOperations.cast(tmp, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "parameter", true);
      for(SNode p : params) {
        SNode up = unmeet(p);
        if (up != p) {
          SNodeOperations.replaceWithAnother(p, up);
        }
      }
    }
    return tmp;
  }

  public static SNode unmeetRecursively(SNode nodeWithMeetDescendants) {
    for(SNode dsc : SNodeOperations.getDescendants(nodeWithMeetDescendants, null, false)) {
      if (SNodeOperations.isInstanceOf(dsc, "jetbrains.mps.lang.typesystem.structure.MeetType")) {
        SNodeOperations.replaceWithAnother(dsc, SNodeOperations.copyNode(unmeet(dsc)));
      }
    }
    return nodeWithMeetDescendants;
  }

  public static void prepAdaptations(SNode ltype, SNode rexpr, TemplateQueryContext genContext) {
    SNode lCType = (SNodeOperations.isInstanceOf(ltype, "jetbrains.mps.baseLanguage.structure.ClassifierType") ?
      SNodeOperations.cast(ltype, "jetbrains.mps.baseLanguage.structure.ClassifierType") :
      null
    );
    SNode lFType = (SNodeOperations.isInstanceOf(ltype, "jetbrains.mps.baseLanguage.closures.structure.FunctionType") ?
      SNodeOperations.cast(ltype, "jetbrains.mps.baseLanguage.closures.structure.FunctionType") :
      null
    );
    if ((lFType == null) && (lCType == null)) {
      return;
    }
    if ((lCType != null) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(lCType, "classifier", false), "jetbrains.mps.baseLanguage.structure.Interface"))) {
      return;
    }
    if (Constants.ONLY_CLOSURE_LITERAL_AS_FUNCTION_TYPE) {
      //        TEMP HACK: proceed only if the "right" expression is a ClosureLiteral, balk otherwise
      //        This may cause unexpected results, so please disable in case of difficulties generating some code
      if (!(SNodeOperations.isInstanceOf(rexpr, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"))) {
        return;
      }
    }
    SNode rtype = TypeChecker.getInstance().getTypeOf(rexpr);
    SNode rFType = (SNodeOperations.isInstanceOf(rtype, "jetbrains.mps.baseLanguage.closures.structure.FunctionType") ?
      SNodeOperations.cast(rtype, "jetbrains.mps.baseLanguage.closures.structure.FunctionType") :
      null
    );
    SNode rCType = (SNodeOperations.isInstanceOf(rtype, "jetbrains.mps.baseLanguage.structure.ClassifierType") ?
      SNodeOperations.cast(rtype, "jetbrains.mps.baseLanguage.structure.ClassifierType") :
      null
    );
    if ((lCType != null) && (rFType != null)) {
      if (SNodeOperations.isInstanceOf(rexpr, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral")) {
        ClosureLiteralUtil.addAdaptableClosureLiteralTarget(SNodeOperations.cast(rexpr, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), lCType, genContext);
      } else
      {
        FunctionTypeUtil.addAdaptableClassifierTypeTarget(ClassifierTypeUtil.getDeclarationClassifierType(rFType), lCType, genContext);
        FunctionTypeUtil.putPrepData(rexpr, INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(lCType, "classifier", false)), genContext);
      }
    } else
    if ((lFType != null) && (rCType != null)) {
      FunctionTypeUtil.addAdaptableClassifierTypeTarget(rCType, ClassifierTypeUtil.getDeclarationClassifierType(lFType), genContext);
      FunctionTypeUtil.putPrepData(rexpr, INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(ClassifierTypeUtil.getDeclarationClassifierType(lFType), "classifier", false)), genContext);
    } else
    if ((lFType != null) && (rFType != null)) {
      if (SNodeOperations.isInstanceOf(rexpr, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral")) {
        ClosureLiteralUtil.addAdaptableClosureLiteralTarget(SNodeOperations.cast(rexpr, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), ClassifierTypeUtil.getClassifierType(lFType, SLinkOperations.getTargets(rFType, "parameterType", true)), genContext);
      } else if (SLinkOperations.getCount(lFType, "throwsType") != SLinkOperations.getCount(rFType, "throwsType")) {
        FunctionTypeUtil.addAdaptableClassifierTypeTarget(ClassifierTypeUtil.getDeclarationClassifierType(rFType), ClassifierTypeUtil.getDeclarationClassifierType(lFType), genContext);
        FunctionTypeUtil.putPrepData(rexpr, INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(ClassifierTypeUtil.getDeclarationClassifierType(lFType), "classifier", false)), genContext);
      }
    }
  }

  public static void addAdaptableClassifierTypeTarget(SNode adaptable, SNode target, TemplateQueryContext genContext) {
    List<SNode> allAdaptable = getAllAdaptableClassifierTypes(genContext);
    if (allAdaptable == null) {
      allAdaptable = ListSequence.<SNode>fromArray();
      genContext.putStepObject("all_needs_adapted", allAdaptable);
    }
    if (!(ListSequence.fromList(allAdaptable).contains(adaptable))) {
      ListSequence.fromList(allAdaptable).addElement(adaptable);
    }
    List<SNode> trgList = (List<SNode>)genContext.getStepObject("needs_adapted_" + INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(adaptable, "classifier", false)));
    if (trgList == null) {
      trgList = ListSequence.<SNode>fromArray();
      genContext.putStepObject("needs_adapted_" + INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(adaptable, "classifier", false)), trgList);
    }
    boolean hasOneAlready = false;
    for(SNode ct : trgList) {
      if (INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(target, "classifier", false)).equals(INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(ct, "classifier", false)))) {
        hasOneAlready = true;
        break;
      }
    }
    if (!(hasOneAlready)) {
      SNode trg = SNodeOperations.copyNode(target);
      ListSequence.fromList(trgList).addElement(trg);
      ((SNode)trg).putUserObject("adaptable", adaptable);
    }
  }

  public static List<SNode> getAllAdaptableClassifierTypes(TemplateQueryContext genContext) {
    return (List<SNode>)genContext.getStepObject("all_needs_adapted");
  }

  public static List<SNode> getAdaptableClassifierTypeTargets(SNode adaptable, ITemplateGenerator generator) {
    return (List<SNode>)generator.getGeneratorSessionContext().getStepObject("needs_adapted_" + INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(adaptable, "classifier", false)));
  }

  public static void putPrepData(SNode sn, Object data, TemplateQueryContext genContext) {
    genContext.putStepObject("classifierType_prepdata_" + ((SNode)sn).getId(), data);
  }

  public static Object getPrepData(SNode sn, ITemplateGenerator generator) {
    return generator.getGeneratorSessionContext().getStepObject("classifierType_prepdata_" + ((SNode)sn).getId());
  }

  public static void putPostData(SNode sn, Object data, TemplateQueryContext genContext) {
    genContext.putStepObject("classifierType_postData_" + ((SNode)sn).getId(), data);
  }

  public static Object getPostData(SNode sn, ITemplateGenerator generator) {
    return generator.getGeneratorSessionContext().getStepObject("classifierType_postData_" + ((SNode)sn).getId());
  }

  public static class FunctionTypeComparator implements Comparator<SNode> {

    public FunctionTypeComparator() {
    }

    public int compare(SNode x, SNode y) {
      return Collator.getInstance().compare(FunctionType_Behavior.call_getSignature_1213877405047(((SNode)x)), FunctionType_Behavior.call_getSignature_1213877405047(((SNode)y)));
    }

}

}
