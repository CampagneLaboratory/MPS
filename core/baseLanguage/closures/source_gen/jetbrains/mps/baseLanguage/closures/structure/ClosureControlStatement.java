package jetbrains.mps.baseLanguage.closures.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ClosureControlStatement extends Statement {
  public static final String concept = "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement";
  public static final String CONTROL_METHOD = "controlMethod";
  public static final String CLOSURE = "closure";
  public static final String PARAMETER = "parameter";

  public ClosureControlStatement(SNode node) {
    super(node);
  }

  public StaticMethodDeclaration getControlMethod() {
    return (StaticMethodDeclaration)this.getReferent(StaticMethodDeclaration.class, ClosureControlStatement.CONTROL_METHOD);
  }

  public void setControlMethod(StaticMethodDeclaration node) {
    super.setReferent(ClosureControlStatement.CONTROL_METHOD, node);
  }

  public int getClosuresCount() {
    return this.getChildCount(ClosureControlStatement.CLOSURE);
  }

  public Iterator<ControlClosureLiteral> closures() {
    return this.children(ControlClosureLiteral.class, ClosureControlStatement.CLOSURE);
  }

  public List<ControlClosureLiteral> getClosures() {
    return this.getChildren(ControlClosureLiteral.class, ClosureControlStatement.CLOSURE);
  }

  public void addClosure(ControlClosureLiteral node) {
    this.addChild(ClosureControlStatement.CLOSURE, node);
  }

  public void insertClosure(ControlClosureLiteral prev, ControlClosureLiteral node) {
    this.insertChild(prev, ClosureControlStatement.CLOSURE, node);
  }

  public int getParametersCount() {
    return this.getChildCount(ClosureControlStatement.PARAMETER);
  }

  public Iterator<Expression> parameters() {
    return this.children(Expression.class, ClosureControlStatement.PARAMETER);
  }

  public List<Expression> getParameters() {
    return this.getChildren(Expression.class, ClosureControlStatement.PARAMETER);
  }

  public void addParameter(Expression node) {
    this.addChild(ClosureControlStatement.PARAMETER, node);
  }

  public void insertParameter(Expression prev, Expression node) {
    this.insertChild(prev, ClosureControlStatement.PARAMETER, node);
  }


  public static ClosureControlStatement newInstance(SModel sm, boolean init) {
    return (ClosureControlStatement)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ClosureControlStatement newInstance(SModel sm) {
    return ClosureControlStatement.newInstance(sm, false);
  }

}
