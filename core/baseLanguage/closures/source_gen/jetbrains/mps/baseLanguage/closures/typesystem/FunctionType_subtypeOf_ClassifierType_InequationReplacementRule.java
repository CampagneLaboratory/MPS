package jetbrains.mps.baseLanguage.closures.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInequationReplacementRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.closures.behavior.FunctionType_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.nodeEditor.IErrorReporter;
import jetbrains.mps.lang.core.behavior.BaseConcept_Behavior;
import jetbrains.mps.baseLanguage.closures.constraints.ClassifierTypeUtil;
import java.util.Iterator;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.SModelUtil_new;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.project.GlobalScope;

public class FunctionType_subtypeOf_ClassifierType_InequationReplacementRule extends AbstractInequationReplacementRule_Runtime {
  public FunctionType_subtypeOf_ClassifierType_InequationReplacementRule() {
  }

  public void processInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, final TypeCheckingContext typeCheckingContext) {
    SNode classifier = SLinkOperations.getTarget(supertype, "classifier", false);
    String errorMsg = "";
    if ((SLinkOperations.getTarget(subtype, "runtimeIface", false) != null)) {
      SNode ct = null;
      ct = new FunctionType_subtypeOf_ClassifierType_InequationReplacementRule.QuotationClass_cb4elm_a0a1a2a0().createNode(SLinkOperations.getTarget(subtype, "runtimeIface", false), typeCheckingContext);
      if ((FunctionType_Behavior.call_getResultType_1230475757059(subtype) != null)) {
        ListSequence.fromList(SLinkOperations.getTargets(ct, "parameter", true)).addElement(SNodeOperations.copyNode(FunctionType_Behavior.call_getResultType_1230475757059(subtype)));
      }
      for (SNode pt : SLinkOperations.getTargets(subtype, "parameterType", true)) {
        ListSequence.fromList(SLinkOperations.getTargets(ct, "parameter", true)).addElement(SNodeOperations.copyNode(pt));
      }
    }
    if (SNodeOperations.isInstanceOf(classifier, "jetbrains.mps.baseLanguage.structure.Interface")) {
      List<SNode> methods = SLinkOperations.getTargets(classifier, "method", true);
      if (methods != null) {
        if (ListSequence.fromList(methods).count() > 1) {
          //  dirty hack 
          errorMsg = ": interface must have only one method";
          {
            BaseIntentionProvider intentionProvider = null;
            IErrorTarget errorTarget = new NodeErrorTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(equationInfo.getNodeWithError(), BaseConcept_Behavior.call_getPresentation_1213877396640(subtype) + " is not a subtype of " + BaseConcept_Behavior.call_getPresentation_1213877396640(supertype) + errorMsg, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "1225908155523", intentionProvider, errorTarget);
            _reporter_2309309498.addAdditionalRuleIdsFromInfo(equationInfo);
          }
        }
        SNode md = ListSequence.fromList(methods).getElement(0);
        if (ListSequence.fromList(SLinkOperations.getTargets(subtype, "parameterType", true)).count() == ListSequence.fromList(SLinkOperations.getTargets(md, "parameter", true)).count()) {
          SNode retType = ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(md, "returnType", true), supertype);
          if (!(SNodeOperations.isInstanceOf(retType, "jetbrains.mps.baseLanguage.structure.VoidType"))) {
            {
              SNode _nodeToCheck_1029348928467 = equationInfo.getNodeWithError();
              BaseIntentionProvider intentionProvider = null;
              EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "1202742499735", 0, intentionProvider);
              _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
              _info_12389875345.setInequationGroup("priority_4_1759628044690732301");
              _info_12389875345.addInequationGroupBefore("priority_3_1759628044690732300");
              _info_12389875345.addInequationGroupBefore("priority_2_1759628044690732299");
              _info_12389875345.addInequationGroupBefore("priority_1_1759628044690732298");
              _info_12389875345.addInequationGroupBefore("default");
              typeCheckingContext.createLessThanInequation((SNode) SLinkOperations.getTarget(subtype, "resultType", true), (SNode) retType, false, _info_12389875345);
            }
          }
          {
            SNode fpt;
            SNode mpt;
            Iterator<SNode> fpt_iterator = ListSequence.fromList(SLinkOperations.getTargets(subtype, "parameterType", true)).iterator();
            Iterator<SNode> mpt_iterator = ListSequence.fromList(SLinkOperations.getTargets(md, "parameter", true)).iterator();
            while (true) {
              if (!(fpt_iterator.hasNext())) {
                break;
              }
              if (!(mpt_iterator.hasNext())) {
                break;
              }
              fpt = fpt_iterator.next();
              mpt = mpt_iterator.next();
              {
                SNode _nodeToCheck_1029348928467 = equationInfo.getNodeWithError();
                BaseIntentionProvider intentionProvider = null;
                EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "1202746383183", 0, intentionProvider);
                _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
                _info_12389875345.setInequationGroup("priority_4_1759628044690732301");
                _info_12389875345.addInequationGroupBefore("priority_3_1759628044690732300");
                _info_12389875345.addInequationGroupBefore("priority_2_1759628044690732299");
                _info_12389875345.addInequationGroupBefore("priority_1_1759628044690732298");
                _info_12389875345.addInequationGroupBefore("default");
                typeCheckingContext.createLessThanInequation((SNode) ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(mpt, "type", true), supertype), (SNode) fpt, false, _info_12389875345);
              }
            }
          }
          return;
        } else {
          errorMsg = ": wrong parameter number";
        }
      } else {
        errorMsg = ": interface must define a method";
      }
    } else {
      errorMsg = ": not an interface";
    }
    {
      BaseIntentionProvider intentionProvider = null;
      IErrorTarget errorTarget = new NodeErrorTarget();
      IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(), BaseConcept_Behavior.call_getPresentation_1213877396640(subtype) + " is not a subtype of " + BaseConcept_Behavior.call_getPresentation_1213877396640(supertype) + errorMsg, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "1202742336483", intentionProvider, errorTarget);
      _reporter_2309309498.addAdditionalRuleIdsFromInfo(equationInfo);
    }
  }

  public boolean checkInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo) {
    boolean result_14532009 = true;
    {
      SNode classifier = SLinkOperations.getTarget(supertype, "classifier", false);
      String errorMsg = "";
      if ((SLinkOperations.getTarget(subtype, "runtimeIface", false) != null)) {
        SNode ct = null;
        ct = new FunctionType_subtypeOf_ClassifierType_InequationReplacementRule.QuotationClass_cb4elm_a0a1a2a1a1().createNode(SLinkOperations.getTarget(subtype, "runtimeIface", false));
        if ((FunctionType_Behavior.call_getResultType_1230475757059(subtype) != null)) {
          ListSequence.fromList(SLinkOperations.getTargets(ct, "parameter", true)).addElement(SNodeOperations.copyNode(FunctionType_Behavior.call_getResultType_1230475757059(subtype)));
        }
        for (SNode pt : SLinkOperations.getTargets(subtype, "parameterType", true)) {
          ListSequence.fromList(SLinkOperations.getTargets(ct, "parameter", true)).addElement(SNodeOperations.copyNode(pt));
        }
      }
      if (SNodeOperations.isInstanceOf(classifier, "jetbrains.mps.baseLanguage.structure.Interface")) {
        List<SNode> methods = SLinkOperations.getTargets(classifier, "method", true);
        if (methods != null) {
          if (ListSequence.fromList(methods).count() > 1) {
            //  dirty hack 
            errorMsg = ": interface must have only one method";
            // generated from warning statement 
          }
          SNode md = ListSequence.fromList(methods).getElement(0);
          if (ListSequence.fromList(SLinkOperations.getTargets(subtype, "parameterType", true)).count() == ListSequence.fromList(SLinkOperations.getTargets(md, "parameter", true)).count()) {
            SNode retType = ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(md, "returnType", true), supertype);
            if (!(SNodeOperations.isInstanceOf(retType, "jetbrains.mps.baseLanguage.structure.VoidType"))) {
              result_14532009 = result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode) SLinkOperations.getTarget(subtype, "resultType", true), (SNode) retType, true);
            }
            {
              SNode fpt;
              SNode mpt;
              Iterator<SNode> fpt_iterator = ListSequence.fromList(SLinkOperations.getTargets(subtype, "parameterType", true)).iterator();
              Iterator<SNode> mpt_iterator = ListSequence.fromList(SLinkOperations.getTargets(md, "parameter", true)).iterator();
              while (true) {
                if (!(fpt_iterator.hasNext())) {
                  break;
                }
                if (!(mpt_iterator.hasNext())) {
                  break;
                }
                fpt = fpt_iterator.next();
                mpt = mpt_iterator.next();
                result_14532009 = result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode) ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(mpt, "type", true), supertype), (SNode) fpt, true);
              }
            }
            return result_14532009;
          } else {
            errorMsg = ": wrong parameter number";
          }
        } else {
          errorMsg = ": interface must define a method";
        }
      } else {
        errorMsg = ": not an interface";
      }
      result_14532009 = false;
    }
    return result_14532009;
  }

  public boolean isWeak() {
    return true;
  }

  public boolean isApplicableSubtype(SNode node) {
    return SModelUtil_new.isAssignableConcept(node.getConceptFqName(), this.getApplicableSubtypeConceptFQName());
  }

  public boolean isApplicableSupertype(SNode node) {
    return SModelUtil_new.isAssignableConcept(node.getConceptFqName(), this.getApplicableSupertypeConceptFQName());
  }

  public String getApplicableSubtypeConceptFQName() {
    return "jetbrains.mps.baseLanguage.closures.structure.FunctionType";
  }

  public String getApplicableSupertypeConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.ClassifierType";
  }

  public static class QuotationClass_cb4elm_a0a1a2a0 {
    public QuotationClass_cb4elm_a0a1a2a0() {
    }

    public SNode createNode(Object parameter_3, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReferent("classifier", (SNode) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReferent("classifier", (SNode) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_cb4elm_a0a1a2a1a1 {
    public QuotationClass_cb4elm_a0a1a2a1a1() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReferent("classifier", (SNode) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
