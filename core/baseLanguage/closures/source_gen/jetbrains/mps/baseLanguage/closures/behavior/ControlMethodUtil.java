package jetbrains.mps.baseLanguage.closures.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.util.ArrayList;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import java.util.Collections;

public class ControlMethodUtil {

  public static boolean isControlMethod(SNode smd) {
    return ControlMethodUtil.analyze(smd) != null;
  }

  public static ControlMethodUtil.Info analyze(SNode smd) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(smd, "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType")) {
      List<SNode> params = SLinkOperations.getTargets(smd, "parameter", true);
      //  0..k-1 : control function parameters, k..l-1 : control closure parameter declarations (closures), l..m-1 : control closures
      ControlMethodUtil.Info inf = new ControlMethodUtil.Info();
      int functionParams = 0;
      int initClosures = 0;
      int controlClosures = 0;
      List<SNode> closureParamTypes = null;
      for(int idx = params.size() - 1 ; idx >= 0 ; idx-- ) {
        SNode p = params.get(idx);
        SNode ptype = SLinkOperations.getTarget(p, "type", true);
        if (SNodeOperations.isInstanceOf(ptype, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")) {
          if (functionParams > 0) {
            return null;
          }
          if (SNodeOperations.getConceptDeclaration(ptype) == SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ptype, "resultType", true), "jetbrains.mps.baseLanguage.structure.VoidType")) {
            if (initClosures > 0) {
              return null;
            }
            controlClosures++ ;
            inf.addControlClosureType(SNodeOperations.copyNode(ptype));
            if (closureParamTypes == null) {
              closureParamTypes = new ArrayList<SNode>();
              for(SNode pt : SLinkOperations.getTargets(ptype, "parameterType", true)) {
                closureParamTypes.add(SNodeOperations.copyNode(pt));
              }
            } else if (closureParamTypes != null && closureParamTypes.size() == SLinkOperations.getCount(ptype, "parameterType")) {
              int i = 0;
              for(SNode pt : SLinkOperations.getTargets(ptype, "parameterType", true)) {
                if (!(MatchingUtil.matchNodes(pt, closureParamTypes.get(i++ )))) {
                  return null;
                }
              }
            } else
            {
              return null;
            }
          } else if (SLinkOperations.getCount(ptype, "parameterType") == 0 && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ptype, "resultType", true), "jetbrains.mps.baseLanguage.structure.VoidType"))) {
            if (controlClosures == 0 || initClosures >= closureParamTypes.size()) {
              return null;
            }
            initClosures++ ;
            inf.addInitClosureType(SNodeOperations.copyNode(ptype));
            SNode rt = SLinkOperations.getTarget(ptype, "resultType", true);
            if (!(MatchingUtil.matchNodes(rt, closureParamTypes.get(closureParamTypes.size() - initClosures)))) {
              return null;
            }
          } else
          {
            return null;
          }
        } else if (controlClosures > 0) {
          functionParams++ ;
          inf.addFunctionParameterType(SNodeOperations.copyNode(ptype));
        } else
        {
          return null;
        }
      }
      return inf;
    }
    return null;
  }

  public static class Info {

    private List<SNode> controlClosures;
    private List<SNode> initClosures;
    private List<SNode> functionParams;
    private boolean initialized = false;

    public Info() {
    }

    public void addControlClosureType(SNode cct) {
      this.init();
      this.controlClosures.add(cct);
    }

    public void addInitClosureType(SNode ict) {
      this.init();
      this.initClosures.add(ict);
    }

    public void addFunctionParameterType(SNode fpt) {
      this.init();
      this.functionParams.add(fpt);
    }

    public List<SNode> getControlClosureTypes() {
      return this.ensureNotNull(this.controlClosures);
    }

    public List<SNode> getInitClosureTypes() {
      return this.ensureNotNull(this.initClosures);
    }

    public List<SNode> getFunctionParamTypes() {
      return this.ensureNotNull(this.functionParams);
    }

    public List<SNode> ensureNotNull(List<SNode> list) {
      if (list == null) {
        return Collections.emptyList();
      }
      return list;
    }

    private void init() {
      if (!(this.initialized)) {
        this.controlClosures = new ArrayList<SNode>();
        this.initClosures = new ArrayList<SNode>();
        this.functionParams = new ArrayList<SNode>();
        this.initialized = true;
      }
    }

}

}
