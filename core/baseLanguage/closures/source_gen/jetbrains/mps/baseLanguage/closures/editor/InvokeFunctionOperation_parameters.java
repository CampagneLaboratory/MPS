package jetbrains.mps.baseLanguage.closures.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.ParametersInformation;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.baseLanguage.behavior.IOperation_Behavior;
import jetbrains.mps.editor.runtime.StyledTextPrinter;
import jetbrains.mps.lang.core.behavior.BaseConcept_Behavior;

public class InvokeFunctionOperation_parameters extends ParametersInformation<SNode> {
  public InvokeFunctionOperation_parameters() {
  }

  public Iterable<SNode> getMethods(SNode node, EditorContext editorContext) {
    return Sequence.<SNode>singleton(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(IOperation_Behavior.call_getOperand_1213877410070(node)), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
  }

  public void getStyledMethodPresentation(SNode node, EditorContext editorContext, SNode parameterObject, StyledTextPrinter styledText) {
    styledText.append(BaseConcept_Behavior.call_getPresentation_1213877396640(parameterObject));
  }

  public boolean isMethodCurrent(SNode node, EditorContext editorContext, SNode parameterObject) {
    return true;
  }
}
