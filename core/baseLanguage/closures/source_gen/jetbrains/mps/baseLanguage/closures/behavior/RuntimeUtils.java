package jetbrains.mps.baseLanguage.closures.behavior;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SReference;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.reloading.ClassLoaderManager;
import jetbrains.mps.reloading.ReloadAdapter;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public class RuntimeUtils {
  private static Map<String, SNode> runtimeClassifiers = null;

  public RuntimeUtils() {
  }

  public static SModel getRuntimeModel() {
    SNode classifierType = new RuntimeUtils.QuotationClass_hadnfw_a0a0a0().createNode();
    SNode node = SLinkOperations.getTarget(classifierType, "classifier", false);
    if ((node != null)) {
      return SNodeOperations.getModel(node);
    } else {
      final SReference oldRef = SNodeOperations.getReference(classifierType, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", "classifier"));
      List<SModelDescriptor> ownModelDescriptors = MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("6ed54515-acc8-4d1e-a16c-9fd6cfe951ea")).getOwnModelDescriptors();
      SModelDescriptor modelDescriptor = ListSequence.fromList(ownModelDescriptors).findFirst(new IWhereFilter<SModelDescriptor>() {
        public boolean accept(SModelDescriptor it) {
          return eq_hadnfw_a0a0a0a0a0a2a0c0a(it.getLongName(), oldRef.getTargetSModelReference().getLongName());
        }
      });
      if (modelDescriptor != null) {
        return modelDescriptor.getSModel();
      }
    }

    return null;
  }

  public static Map<String, SNode> getRuntimeClassifiersMap() {
    synchronized (RuntimeUtils.class) {
      if (runtimeClassifiers == null) {
        runtimeClassifiers = MapSequence.fromMap(new HashMap<String, SNode>());
        for (SNode cls : SModelOperations.getNodes(getRuntimeModel(), "jetbrains.mps.baseLanguage.structure.Classifier")) {
          MapSequence.fromMap(runtimeClassifiers).put(SPropertyOperations.getString(cls, "nestedName"), cls);
        }
        ClassLoaderManager.getInstance().addReloadHandler(new ReloadAdapter() {
          public void unload() {
            synchronized (RuntimeUtils.class) {
              RuntimeUtils.runtimeClassifiers = null;
            }
            ClassLoaderManager.getInstance().removeReloadHandler(this);
          }
        });
      }
    }
    return runtimeClassifiers;
  }

  private static boolean eq_hadnfw_a0a0a0a0a0a2a0c0a(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  public static class QuotationClass_hadnfw_a0a0a0 {
    public QuotationClass_hadnfw_a0a0a0() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.baseLanguage.closures.runtime(MPS.Core/jetbrains.mps.baseLanguage.closures.runtime@java_stub)"), SNodeId.fromString("~YieldingIterator")));
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
