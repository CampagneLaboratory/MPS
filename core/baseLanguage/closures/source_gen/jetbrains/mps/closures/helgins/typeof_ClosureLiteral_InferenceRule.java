package jetbrains.mps.closures.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import java.util.LinkedList;
import jetbrains.mps.patterns.IMatchingPattern;
import jetbrains.mps.bootstrap.helgins.runtime.HUtil;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_ClosureLiteral_InferenceRule implements InferenceRule_Runtime {

  public typeof_ClosureLiteral_InferenceRule() {
  }

  public void applyRule(final SNode closure) {
    List<SNode> paramTypes = new ArrayList<SNode>();
    for(SNode param : SLinkOperations.getTargets(closure, "parameter", true)) {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(param, "type", true), "jetbrains.mps.baseLanguage.structure.WildCardType")) {
        final SNode pt_typevar_1203031819477 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable();
        {
          SNode _nodeToCheck_1029348928467 = param;
          TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getEquationManager().getRepresentator(pt_typevar_1203031819477), TypeChecker.getInstance().getRuntimeSupport().typeOf(_nodeToCheck_1029348928467, "jetbrains.mps.closures.helgins@5_0", "1215598000347", true), _nodeToCheck_1029348928467, null, "jetbrains.mps.closures.helgins@5_0", "1215598000344");
        }
        paramTypes.add(TypeChecker.getInstance().getEquationManager().getRepresentator(pt_typevar_1203031819477));
      } else
      {
        paramTypes.add(SLinkOperations.getTarget(param, "type", true));
      }
    }
    List<SNode> allRets = new ArrayList<SNode>();
    List<SNode> allYlds = new ArrayList<SNode>();
    LinkedList<SNode> allStmts = new LinkedList<SNode>();
    for(SNode c : SNodeOperations.getChildren(SLinkOperations.getTarget(closure, "body", true))) {
      if (SNodeOperations.isInstanceOf(c, "jetbrains.mps.baseLanguage.structure.ReturnStatement")) {
        allRets.add(c);
      } else
      if (SNodeOperations.isInstanceOf(c, "jetbrains.mps.closures.structure.YieldStatement")) {
        allYlds.add(c);
      } else
      if (!(SNodeOperations.isInstanceOf(c, "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock")) && !(SNodeOperations.isInstanceOf(c, "jetbrains.mps.baseLanguage.structure.IStatementListContainer"))) {
        allStmts.addLast(c);
      }
    }
    while (!(allStmts.isEmpty())) {
      SNode stmt = allStmts.removeFirst();
      if (SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.ReturnStatement")) {
        allRets.add(stmt);
      } else
      if (SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.closures.structure.YieldStatement")) {
        allYlds.add(stmt);
      } else
      {
        for(SNode c : SNodeOperations.getChildren(stmt)) {
          if (SNodeOperations.isInstanceOf(c, "jetbrains.mps.baseLanguage.structure.StatementList")) {
            for(SNode cstmt : SLinkOperations.getTargets(c, "statement", true)) {
              if (!(SNodeOperations.isInstanceOf(cstmt, "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock")) && !(SNodeOperations.isInstanceOf(cstmt, "jetbrains.mps.baseLanguage.structure.IStatementListContainer"))) {
                allStmts.addLast(cstmt);
              }
            }
          }
        }
      }
    }
    final SNode RLCS_typevar_1199621958531 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable();
    final SNode YLCS_typevar_1200831610156 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable();
    boolean returnsValue = !(allRets.isEmpty());
    boolean yieldsValue = !(allYlds.isEmpty());
    for(SNode rs : allRets) {
      {
        SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(rs, "expression", true);
        TypeChecker.getInstance().getRuntimeSupport().createGreaterThanInequation(TypeChecker.getInstance().getEquationManager().getRepresentator(RLCS_typevar_1199621958531), TypeChecker.getInstance().getRuntimeSupport().typeOf(_nodeToCheck_1029348928467, "jetbrains.mps.closures.helgins@5_0", "1215598000532", true), _nodeToCheck_1029348928467, null, "jetbrains.mps.closures.helgins@5_0", "1215598000529", false, 0);
      }
    }
    for(SNode ys : allYlds) {
      {
        SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(ys, "expression", true);
        TypeChecker.getInstance().getRuntimeSupport().createGreaterThanInequation(TypeChecker.getInstance().getEquationManager().getRepresentator(YLCS_typevar_1200831610156), TypeChecker.getInstance().getRuntimeSupport().typeOf(_nodeToCheck_1029348928467, "jetbrains.mps.closures.helgins@5_0", "1215598000545", true), _nodeToCheck_1029348928467, null, "jetbrains.mps.closures.helgins@5_0", "1215598000542", false, 0);
      }
    }
    List<SNode> stmts = SLinkOperations.getTargets(SLinkOperations.getTarget(closure, "body", true), "statement", true);
    SNode lastStmt = (stmts != null && stmts.size() > 0 ?
      stmts.get(stmts.size() - 1) :
      null
    );
    if (SNodeOperations.isInstanceOf(lastStmt, "jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
      {
        SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(lastStmt, "expression", true);
        TypeChecker.getInstance().getRuntimeSupport().createGreaterThanInequation(TypeChecker.getInstance().getEquationManager().getRepresentator(RLCS_typevar_1199621958531), TypeChecker.getInstance().getRuntimeSupport().typeOf(_nodeToCheck_1029348928467, "jetbrains.mps.closures.helgins@5_0", "1215598000588", true), _nodeToCheck_1029348928467, null, "jetbrains.mps.closures.helgins@5_0", "1215598000585", false, 0);
      }
      returnsValue = true;
    }
    if (returnsValue && yieldsValue) {
      if (!(false)) {
        TypeChecker.getInstance().reportTypeError(closure, "closure must either return or yield value", "jetbrains.mps.closures.helgins", "1200831719690");
      }
    } else
    if (returnsValue) {
      /*
        {
          IMatchingPattern pattern_ = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType");
          SNode coercedNode_ = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getEquationManager().getRepresentator(RLCS_typevar_1199621958531), pattern_);
          if (coercedNode_ != null) {
            {
              SNode _nodeToCheck_1029348928467 = closure;
              TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getEquationManager().getRepresentator(RLCS_typevar_1199621958531), coercedNode_, _nodeToCheck_1029348928467, null, "jetbrains.mps.closures.helgins@5_0", "1215598000640");
            }
          }
        }
      */
      {
        SNode _nodeToCheck_1029348928467 = closure;
        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(_nodeToCheck_1029348928467, "jetbrains.mps.closures.helgins@5_0", "1215598000645", true), new QuotationClass_().createNode(paramTypes, TypeChecker.getInstance().getEquationManager().getRepresentator(RLCS_typevar_1199621958531)), _nodeToCheck_1029348928467, null, "jetbrains.mps.closures.helgins@5_0", "1215598000643");
      }
    } else
    if (yieldsValue) {
      /*
        {
          IMatchingPattern pattern_1 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType");
          SNode coercedNode_1 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getEquationManager().getRepresentator(YLCS_typevar_1200831610156), pattern_1);
          if (coercedNode_1 != null) {
            {
              SNode _nodeToCheck_1029348928467 = closure;
              TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getEquationManager().getRepresentator(YLCS_typevar_1200831610156), coercedNode_1, _nodeToCheck_1029348928467, null, "jetbrains.mps.closures.helgins@5_0", "1215598000653");
            }
          }
        }
      */
      SNode st = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType", null);
      SLinkOperations.setTarget(st, "elementType", TypeChecker.getInstance().getEquationManager().getRepresentator(YLCS_typevar_1200831610156), true);
      {
        SNode _nodeToCheck_1029348928467 = closure;
        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(_nodeToCheck_1029348928467, "jetbrains.mps.closures.helgins@5_0", "1215598000671", true), new QuotationClass_2().createNode(paramTypes, st), _nodeToCheck_1029348928467, null, "jetbrains.mps.closures.helgins@5_0", "1215598000669");
      }
    } else
    {
      {
        SNode _nodeToCheck_1029348928467 = closure;
        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(_nodeToCheck_1029348928467, "jetbrains.mps.closures.helgins@5_0", "1215598000680", true), new QuotationClass_1().createNode(paramTypes), _nodeToCheck_1029348928467, null, "jetbrains.mps.closures.helgins@5_0", "1215598000678");
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.closures.structure.ClosureLiteral";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
