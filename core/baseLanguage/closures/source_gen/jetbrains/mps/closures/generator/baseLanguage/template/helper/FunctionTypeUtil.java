package jetbrains.mps.closures.generator.baseLanguage.template.helper;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.closures.constraints.FunctionType_Behavior;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.helgins.runtime.HUtil;
import java.util.List;
import jetbrains.mps.core.constraints.INamedConcept_Behavior;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.text.Collator;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import java.util.Comparator;

public class FunctionTypeUtil {

  public static String getRuntimeSignature(SNode ft) {
    return FunctionType_Behavior.call_getRuntimeSignature_1202756382806(ft);
  }

  public static String getAdapterName(SNode adaptable, SNode target) {
    String aname = SPropertyOperations.getString(SLinkOperations.getTarget(adaptable, "classifier", false), "name");
    int aldidx = aname.lastIndexOf(".");
    aname = (aldidx >= 0 ?
      aname.substring(aldidx + 1) :
      aname
    );
    String tname = SPropertyOperations.getString(SLinkOperations.getTarget(target, "classifier", false), "name");
    int tldidx = tname.lastIndexOf(".");
    tname = (tldidx >= 0 ?
      tname.substring(tldidx + 1) :
      tname
    );
    return aname + "_to_" + tname + "_adapter";
  }

  public static SNode getAdaptableTarget(SNode expr, ITemplateGenerator generator) {
    SNode ntype = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(expr), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), true);
    assert ntype != null;
    List<SNode> targets = FunctionTypeUtil.getAdaptableClassifierTypeTargets(ntype, generator);
    String trgFQname = (String)FunctionTypeUtil.getPrepData(expr, generator);
    SNode trg = null;
    for(SNode ct : targets) {
      if (trgFQname.equals(INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(ct, "classifier", false)))) {
        trg = ct;
        break;
      }
    }
    return trg;
  }

  public static List<SNode> getAllFunctionTypes(SModel sourceModel) {
    List<SNode> cls = SModelOperations.getNodes(sourceModel, "jetbrains.mps.closures.structure.ClosureLiteral");
    List<SNode> typesList = new ArrayList<SNode>();
    for(SNode cl : cls) {
      typesList.add(TypeChecker.getInstance().getTypeOf(cl));
    }
    List<SNode> funTypes = SModelOperations.getNodes(sourceModel, "jetbrains.mps.closures.structure.FunctionType");
    typesList.addAll(funTypes);
    Collections.sort(typesList, new FunctionTypeUtil.FunctionTypeComparator());
    SNode prev = null;
    for(Iterator it = typesList.iterator() ; it.hasNext() ; ) {
      SNode next = ((SNode)it.next());
      if (prev != null) {
        if (Collator.getInstance().compare(FunctionType_Behavior.call_getSignature_1199633062014(((SNode)prev)), FunctionType_Behavior.call_getSignature_1199633062014(((SNode)next))) == 0) {
          it.remove();
          continue;
        }
      }
      prev = next;
    }
    return typesList;
  }

  public static void addAdaptableClassifierTypeTarget(SNode adaptable, SNode target, ITemplateGenerator generator) {
    List<SNode> allAdaptable = getAllAdaptableClassifierTypes(generator);
    if (allAdaptable == null) {
      allAdaptable = new ArrayList<SNode>();
      generator.getGeneratorSessionContext().putStepObject("all_needs_adapted", allAdaptable);
    }
    if (!(allAdaptable.contains(adaptable))) {
      allAdaptable.add(adaptable);
    }
    List<SNode> trgList = (List<SNode>)generator.getGeneratorSessionContext().getStepObject("needs_adapted_" + INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(adaptable, "classifier", false)));
    if (trgList == null) {
      trgList = new ArrayList<SNode>();
      generator.getGeneratorSessionContext().putStepObject("needs_adapted_" + INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(adaptable, "classifier", false)), trgList);
    }
    boolean hasOneAlready = false;
    for(SNode ct : trgList) {
      if (INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(target, "classifier", false)).equals(INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(ct, "classifier", false)))) {
        hasOneAlready = true;
        break;
      }
    }
    if (!(hasOneAlready)) {
      SNode trg = SNodeOperations.copyNode(target);
      trgList.add(trg);
      ((SNode)trg).putUserObject("adaptable", adaptable);
    }
  }

  public static List<SNode> getAllAdaptableClassifierTypes(ITemplateGenerator generator) {
    return (List<SNode>)generator.getGeneratorSessionContext().getStepObject("all_needs_adapted");
  }

  public static List<SNode> getAdaptableClassifierTypeTargets(SNode adaptable, ITemplateGenerator generator) {
    return (List<SNode>)generator.getGeneratorSessionContext().getStepObject("needs_adapted_" + INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(adaptable, "classifier", false)));
  }

  public static void putPrepData(SNode sn, Object data, ITemplateGenerator generator) {
    generator.getGeneratorSessionContext().putStepObject("classifierType_prepdata_" + ((SNode)sn).getId(), data);
  }

  public static Object getPrepData(SNode sn, ITemplateGenerator generator) {
    return generator.getGeneratorSessionContext().getStepObject("classifierType_prepdata_" + ((SNode)sn).getId());
  }

  public static void putPostData(SNode sn, Object data, ITemplateGenerator generator) {
    generator.getGeneratorSessionContext().putStepObject("classifierType_postData_" + ((SNode)sn).getId(), data);
  }

  public static Object getPostData(SNode sn, ITemplateGenerator generator) {
    return generator.getGeneratorSessionContext().getStepObject("classifierType_postData_" + ((SNode)sn).getId());
  }

  public static class FunctionTypeComparator implements Comparator<SNode> {

    public FunctionTypeComparator() {
    }

    public int compare(SNode x, SNode y) {
      return Collator.getInstance().compare(FunctionType_Behavior.call_getSignature_1199633062014(((SNode)x)), FunctionType_Behavior.call_getSignature_1199633062014(((SNode)y)));
    }

}

}
