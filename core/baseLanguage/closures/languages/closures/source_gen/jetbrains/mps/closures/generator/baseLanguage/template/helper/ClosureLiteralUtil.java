package jetbrains.mps.closures.generator.baseLanguage.template.helper;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.ITemplateGenerator;

public class ClosureLiteralUtil {

  public static boolean hasYieldStatement(SNode cl) {
    for(SNode desc : SNodeOperations.getDescendants(cl, null, false)) {
      if(SNodeOperations.isInstanceOf(desc, "jetbrains.mps.closures.structure.YieldStatement")) {
        if(cl == SNodeOperations.getAncestor(desc, "jetbrains.mps.closures.structure.ClosureLiteral", false, false)) {
          return true;
        }
      }
    }
    return false;
  }

  public static List<SNode> collectNonFinalVariableDeclarations(SNode cl) {
    List<SNode> vrefs = new ArrayList<SNode>();
    for(SNode desc : SNodeOperations.getDescendants(cl, null, false)) {
      if(SNodeOperations.isInstanceOf(desc, "jetbrains.mps.baseLanguage.structure.VariableReference") && cl == SNodeOperations.getAncestor(desc, "jetbrains.mps.closures.structure.ClosureLiteral", false, false)) {
        SNode vd = SLinkOperations.getTarget(desc, "variableDeclaration", false);
        if(cl != SNodeOperations.getAncestor(vd, "jetbrains.mps.closures.structure.ClosureLiteral", false, false)) {
          if(!(SPropertyOperations.getBoolean(vd, "isFinal")) && (SNodeOperations.isInstanceOf(vd, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration") || SNodeOperations.isInstanceOf(vd, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"))) {
            vrefs.add(SLinkOperations.getTarget(desc, "variableDeclaration", false));
          }
        }
      }
    }
    return vrefs;
  }

  public static void addAdaptableClosureLiteralTarget(SNode literal, SNode target, ITemplateGenerator generator) {
    SNode trgCopy = SNodeOperations.copyNode(target);
    generator.getGeneratorSessionContext().putSessionObject("literal_target_" + ((SNode)literal).getId(), trgCopy);
    ((SNode)trgCopy).putUserObject("literal", literal);
  }

  public static SNode getAdaptableClosureLiteralTarget(SNode literal, ITemplateGenerator generator) {
    return (SNode)generator.getGeneratorSessionContext().getSessionObject("literal_target_" + ((SNode)literal).getId());
  }

}
