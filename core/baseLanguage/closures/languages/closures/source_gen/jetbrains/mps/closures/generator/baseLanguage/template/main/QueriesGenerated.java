package jetbrains.mps.closures.generator.baseLanguage.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.CreateRootRuleContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.closures.generator.baseLanguage.template.helper.FunctionTypeUtil;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.closures.generator.baseLanguage.template.helper.PrepStatementUtil;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.closures.generator.baseLanguage.template.helper.ClosureLiteralUtil;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.patterns.IMatchingPattern;
import jetbrains.mps.bootstrap.helgins.runtime.HUtil;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.core.constraints.BaseConcept_Behavior;
import jetbrains.mps.closures.constraints.FunctionType_Behavior;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.closures.generator.baseLanguage.template.helper.StatementListUtil;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.closures.constraints.ClassifierTypeUtil;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.generator.template.MapSrcMacroContext;
import jetbrains.mps.generator.template.WeavingMappingRuleContext;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.core.constraints.INamedConcept_Behavior;

public class QueriesGenerated {

  public static boolean createRootRule_Condition_1202760124070(final IOperationContext operationContext, final CreateRootRuleContext _context) {
    List<SNode> adapters = FunctionTypeUtil.getAllAdaptableClassifierTypes(_context.getGenerator());
    if(adapters != null && adapters.size() > 0) {
      _context.getGenerator().getGeneratorSessionContext().putSessionObject("need_weaving_class_for_ClassifierType_adapter", Boolean.TRUE);
      return true;
    }
    return false;
  }

  public static boolean createRootRule_Condition_1201781414993(final IOperationContext operationContext, final CreateRootRuleContext _context) {
    if(true) {
      return false;
    }
    List<SNode> nodes = SModelOperations.getNodes(_context.getSourceModel(), "jetbrains.mps.closures.structure.ClosureLiteral");
    return !(nodes.isEmpty());
  }

  public static boolean baseMappingRule_Condition_1201782893971(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    if(true) {
      return false;
    }
    if(_context.getGenerator().getGeneratorSessionContext().getSessionObject("done_weaving_class_for_YieldStatement") == null) {
      _context.getGenerator().getGeneratorSessionContext().putSessionObject("done_weaving_class_for_YieldStatement", Boolean.TRUE);
      return true;
    }
    return false;
  }

  public static boolean baseMappingRule_Condition_1201018816706(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201026182242(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201359295364(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201288202981(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201389225625(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201293003300(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201293028247(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201026184426(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201193354452(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1202834518311(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    if(true) {
      return false;
    }
    return PrepStatementUtil.getFlag(_context.getNode(), _context.getGenerator()) == Boolean.TRUE;
  }

  public static boolean baseMappingRule_Condition_1201194112613(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201204773236(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "initializer", true) != null);
  }

  public static boolean baseMappingRule_Condition_1201017719800(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201390750887(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201390755365(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201017688485(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201093930999(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201016704101(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return ClosureLiteralUtil.hasYieldStatement(_context.getNode());
  }

  public static boolean baseMappingRule_Condition_1201016795856(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return !(ClosureLiteralUtil.hasYieldStatement(_context.getNode()));
  }

  public static boolean baseMappingRule_Condition_1202998342220(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return _context.getGenerator().getGeneratorSessionContext().getSessionObject("remove_this_" + ((SNode)SLinkOperations.getTarget(_context.getNode(), "instance", true)).getId()) != null;
  }

  public static boolean baseMappingRule_Condition_1202998342252(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (SNode)_context.getGenerator().getGeneratorSessionContext().getSessionObject("set_this_classconcept_" + ((SNode)SLinkOperations.getTarget(_context.getNode(), "instance", true)).getId()) != null;
  }

  public static boolean baseMappingRule_Condition_1201783366634(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    if(_context.getGenerator().getGeneratorSessionContext().getSessionObject("need_weaving_class_for_ClassifierType_adapter") != null) {
      _context.getGenerator().getGeneratorSessionContext().putSessionObject("need_weaving_class_for_ClassifierType_adapter", null);
      return true;
    }
    return false;
  }

  public static boolean baseMappingRule_Condition_1201789577252(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    if(_context.getGenerator().getGeneratorSessionContext().getSessionObject("need_weaving_class_for_ClassifierType_adapter") != null) {
      _context.getGenerator().getGeneratorSessionContext().putSessionObject("need_weaving_class_for_ClassifierType_adapter", null);
      return true;
    }
    return false;
  }

  public static boolean baseMappingRule_Condition_1202817555970(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    SNode trg = FunctionTypeUtil.getAdaptableTarget(_context.getNode(), _context.getGenerator());
    SNode adaptable = (SNode)((SNode)trg).getUserObject("adaptable");
    return (adaptable != null);
  }

  public static boolean baseMappingRule_Condition_1202818663879(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    SNode trg = FunctionTypeUtil.getAdaptableTarget(_context.getNode(), _context.getGenerator());
    SNode cl = (SNode)((SNode)trg).getUserObject("literal");
    return (cl != null);
  }

  public static boolean baseMappingRule_Condition_1202818891382(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean hasPrep = FunctionTypeUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
    boolean hasPost = FunctionTypeUtil.getPostData(_context.getNode(), _context.getGenerator()) != null;
    return hasPrep && !(hasPost);
  }

  public static boolean baseMappingRule_Condition_1201782499822(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    if(true) {
      return false;
    }
    if(_context.getGenerator().getGeneratorSessionContext().getSessionObject("done_weaving_interface_for_FunctionType") == null) {
      _context.getGenerator().getGeneratorSessionContext().putSessionObject("done_weaving_interface_for_FunctionType", Boolean.TRUE);
      return true;
    }
    return false;
  }

  public static boolean baseMappingRule_Condition_1201789497558(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    if(true) {
      return false;
    }
    if(_context.getGenerator().getGeneratorSessionContext().getSessionObject("done_weaving_interface_for_FunctionType") == null) {
      _context.getGenerator().getGeneratorSessionContext().putSessionObject("done_weaving_interface_for_FunctionType", Boolean.TRUE);
      return true;
    }
    return false;
  }

  public static Object propertyMacro_GetPropertyValue_1201095804027(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201204858049(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return (String)PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
  }

  public static Object propertyMacro_GetPropertyValue_1201390868590(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201390896232(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201093988343(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return (String)PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false), _context.getGenerator());
  }

  public static Object propertyMacro_GetPropertyValue_1202998400366(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1202998412426(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1201048260874(final IOperationContext operationContext, final PropertyMacroContext _context) {
    {
      IMatchingPattern pattern_1203078442204 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1203078442186 = TypeChecker.getInstance().getRuntimeSupport().coerce(SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(_context.getNode()), "resultType", true), pattern_1203078442204);
      if(coercedNode_1203078442186 != null) {
        return BaseConcept_Behavior.call_getPresentation_1180102203531(SLinkOperations.getTarget(coercedNode_1203078442186, "elementType", true));
      }
    }
    return null;
  }

  public static Object propertyMacro_GetPropertyValue_1201019320624(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return (String)PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
  }

  public static Object propertyMacro_GetPropertyValue_1201359405039(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String varName = (String)PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return varName + "_it";
  }

  public static Object propertyMacro_GetPropertyValue_1201023446586(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201093772964(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return (String)PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variable", true), _context.getGenerator());
  }

  public static Object propertyMacro_GetPropertyValue_1201023446649(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[3];
  }

  public static Object propertyMacro_GetPropertyValue_1201023446682(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[4];
  }

  public static Object propertyMacro_GetPropertyValue_1201094822855(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[2];
  }

  public static Object propertyMacro_GetPropertyValue_1201023446713(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201023446743(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[3];
  }

  public static Object propertyMacro_GetPropertyValue_1201024123512(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201025995317(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201191004478(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201190969333(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201275380390(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201275443501(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201275469014(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[((SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true) != null) ?
      2 :
      3
    )];
  }

  public static Object propertyMacro_GetPropertyValue_1201291955078(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201291955110(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[2];
  }

  public static Object propertyMacro_GetPropertyValue_1201291955141(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[3];
  }

  public static Object propertyMacro_GetPropertyValue_1201292912731(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201292912754(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201292912793(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[2];
  }

  public static Object propertyMacro_GetPropertyValue_1201358206156(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201358877325(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String varName = (String)PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variable", true), _context.getGenerator());
    return varName + "_it";
  }

  public static Object propertyMacro_GetPropertyValue_1201358206210(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201359082835(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String varName = (String)PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variable", true), _context.getGenerator());
    return varName + "_it";
  }

  public static Object propertyMacro_GetPropertyValue_1201358206242(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[3];
  }

  public static Object propertyMacro_GetPropertyValue_1201359122203(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return (String)PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variable", true), _context.getGenerator());
  }

  public static Object propertyMacro_GetPropertyValue_1201359158800(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String varName = (String)PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variable", true), _context.getGenerator());
    return varName + "_it";
  }

  public static Object propertyMacro_GetPropertyValue_1201358206273(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[2];
  }

  public static Object propertyMacro_GetPropertyValue_1201382497207(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201382561130(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "body", true), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201382704160(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "defaultBlock", true), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201781007670(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode adaptable = (SNode)((SNode)_context.getNode()).getUserObject("adaptable");
    return FunctionTypeUtil.getAdapterName(adaptable, _context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1202752759917(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode adaptable = (SNode)((SNode)_context.getNode()).getUserObject("adaptable");
    List<SNode> mds = SLinkOperations.getTargets(SLinkOperations.getTarget(adaptable, "classifier", false), "method", true);
    return SPropertyOperations.getString(mds.get(0), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1202752698043(final IOperationContext operationContext, final PropertyMacroContext _context) {
    List<SNode> mds = SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "classifier", false), "method", true);
    return SPropertyOperations.getString(mds.get(0), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1201781007872(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode adaptable = (SNode)((SNode)_context.getNode()).getUserObject("adaptable");
    return FunctionTypeUtil.getAdapterName(adaptable, _context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1201781825100(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return FunctionType_Behavior.call_getSignature_1199633062014(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1202148938791(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "jetbrains.mps.closures.runtime.FunctionTypes." + FunctionTypeUtil.getRuntimeSignature(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1202817907518(final IOperationContext operationContext, final PropertyMacroContext _context) {
    List<SNode> mds = SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "classifier", false), "method", true);
    return SPropertyOperations.getString(mds.get(0), "name");
  }

  public static Object referenceMacro_GetReferent_1199624866931(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode ft = TypeChecker.getInstance().getTypeOf(_context.getNode());
    String rtSig = "FunctionTypes." + FunctionTypeUtil.getRuntimeSignature(ft);
    for(SNode i : SModelOperations.getNodes(SNodeOperations.getModel(SLinkOperations.getTarget(new QuotationClass_().createNode(), "classifier", false)), "jetbrains.mps.baseLanguage.structure.Interface")) {
      if(rtSig.equals(SPropertyOperations.getString(i, "name"))) {
        return i;
      }
    }
    return null;
  }

  public static Object referenceMacro_GetReferent_1201044570620(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode ft = TypeChecker.getInstance().getTypeOf(_context.getNode());
    String rtSig = "FunctionTypes." + FunctionTypeUtil.getRuntimeSignature(ft);
    for(SNode i : SModelOperations.getNodes(SNodeOperations.getModel(SLinkOperations.getTarget(new QuotationClass_1().createNode(), "classifier", false)), "jetbrains.mps.baseLanguage.structure.Interface")) {
      if(rtSig.equals(SPropertyOperations.getString(i, "name"))) {
        return i;
      }
    }
    return null;
  }

  public static Object referenceMacro_GetReferent_1202822308516(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode trg = FunctionTypeUtil.getAdaptableTarget(_context.getNode(), _context.getGenerator());
    if((trg != null)) {
      SNode cc = _context.getGenerator().findOutputNodeByInputNodeAndMappingName(trg, "classifierType_adapter");
      List<SNode> cds = SLinkOperations.getTargets(cc, "constructor", true);
      return cds.get(0);
    }
    return null;
  }

  public static Object referenceMacro_GetReferent_1202752641712(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode adaptable = (SNode)((SNode)_context.getNode()).getUserObject("adaptable");
    return SLinkOperations.getTarget(adaptable, "classifier", false);
  }

  public static Object referenceMacro_GetReferent_1202752545212(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode adaptable = (SNode)((SNode)_context.getNode()).getUserObject("adaptable");
    return SLinkOperations.getTarget(adaptable, "classifier", false);
  }

  public static Object referenceMacro_GetReferent_1202752475172(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "classifier", false);
  }

  public static Object referenceMacro_GetReferent_1202817746555(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode cc = _context.getGenerator().findOutputNodeByInputNodeAndMappingName(_context.getNode(), "classifierType_adapter");
    List<SNode> cds = SLinkOperations.getTargets(cc, "constructor", true);
    return cds.get(0);
  }

  public static Object referenceMacro_GetReferent_1202817833286(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "classifier", false);
  }

  public static boolean ifMacro_Condition_1202157718299(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode ft = TypeChecker.getInstance().getTypeOf(_context.getNode());
    return (SLinkOperations.getTarget(ft, "resultType", true) != null) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ft, "resultType", true), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static boolean ifMacro_Condition_1202157827628(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode ft = TypeChecker.getInstance().getTypeOf(_context.getNode());
    return (SLinkOperations.getTarget(ft, "resultType", true) != null) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ft, "resultType", true), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static boolean ifMacro_Condition_1201359373031(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getNode(), null, false, false), "jetbrains.mps.baseLanguage.structure.ForeachStatement");
  }

  public static boolean ifMacro_Condition_1201421585183(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> stmts = SLinkOperations.getTargets(_context.getNode(), "statement", true);
    return stmts.size() == 0 || !(SNodeOperations.isInstanceOf(stmts.get(stmts.size() - 1), "jetbrains.mps.baseLanguage.structure.BreakStatement") || SNodeOperations.isInstanceOf(stmts.get(stmts.size() - 1), "jetbrains.mps.baseLanguage.structure.ContinueStatement"));
  }

  public static boolean ifMacro_Condition_1201421814921(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> stmts = SLinkOperations.getTargets(_context.getNode(), "statement", true);
    return stmts.size() == 0 || !(SNodeOperations.isInstanceOf(stmts.get(stmts.size() - 1), "jetbrains.mps.baseLanguage.structure.BreakStatement") || SNodeOperations.isInstanceOf(stmts.get(stmts.size() - 1), "jetbrains.mps.baseLanguage.structure.ContinueStatement"));
  }

  public static boolean ifMacro_Condition_1201276700612(final IOperationContext operationContext, final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true) != null) && !(StatementListUtil.isControlStatement(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true)) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement"));
  }

  public static boolean ifMacro_Condition_1201378781869(final IOperationContext operationContext, final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true) == null) || StatementListUtil.isControlStatement(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true)) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement");
  }

  public static boolean ifMacro_Condition_1201378852034(final IOperationContext operationContext, final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true) == null) || StatementListUtil.isControlStatement(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true)) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement");
  }

  public static boolean ifMacro_Condition_1201382524702(final IOperationContext operationContext, final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "defaultBlock", true) != null);
  }

  public static SNode sourceNodeQuery_1202834560823(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    PrepStatementUtil.setFlag(_context.getNode(), _context.getGenerator(), Boolean.FALSE);
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_1201204863526(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "initializer", true);
  }

  public static SNode sourceNodeQuery_1201019808021(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "localVariableDeclaration", true);
  }

  public static SNode sourceNodeQuery_1202774454380(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return ClassifierTypeUtil.getClassifierType(_context.getNode());
  }

  public static SNode sourceNodeQuery_1199644437387(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "function", true)), "resultType", true);
  }

  public static SNode sourceNodeQuery_1199646374717(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "function", true);
  }

  public static SNode sourceNodeQuery_1199712173382(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false)), "resultType", true);
  }

  public static SNode sourceNodeQuery_1199624915150(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedReturnType_1201526153722(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static SNode sourceNodeQuery_1199625045481(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1202157763748(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedReturnType_1201526153722(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static SNode sourceNodeQuery_1202157979162(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_1201045061496(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedSequenceParameterReturnType_1201527054112(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static SNode sourceNodeQuery_1201290332323(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedSequenceParameterReturnType_1201527054112(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static SNode sourceNodeQuery_1201435446113(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedSequenceParameterReturnType_1201527054112(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static SNode sourceNodeQuery_1202157827648(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedReturnType_1201526153722(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static SNode sourceNodeQuery_1202157970840(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_1201019303193(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "type", true);
  }

  public static SNode sourceNodeQuery_1201359394958(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return ClassifierTypeUtil.getTypeCoercedToClassifierType(SLinkOperations.getTarget(_context.getNode(), "type", true));
  }

  public static SNode sourceNodeQuery_1201093791966(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "variable", true), "initializer", true);
  }

  public static SNode sourceNodeQuery_1201023446671(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_1201023446733(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "iteration", true);
  }

  public static SNode sourceNodeQuery_1201026062018(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1201275418502(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_1201279870277(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true);
  }

  public static SNode sourceNodeQuery_1201292104349(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_1201292912783(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_1201360662183(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "iterable", true);
  }

  public static SNode sourceNodeQuery_1201382468148(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1201382502829(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1202822308506(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    FunctionTypeUtil.putPostData(_context.getNode(), "done", _context.getGenerator());
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_1202818843874(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    FunctionTypeUtil.putPostData(_context.getNode(), "done", _context.getGenerator());
    return FunctionTypeUtil.getAdaptableTarget(_context.getNode(), _context.getGenerator());
  }

  public static SNode sourceNodeQuery_1201781007784(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    List<SNode> mds = SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "classifier", false), "method", true);
    SNode type = SLinkOperations.getTarget(mds.get(0), "returnType", true);
    if(SNodeOperations.isInstanceOf(type, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      List<SNode> psib = SNodeOperations.getPrevSiblings(SLinkOperations.getTarget(type, "typeVariableDeclaration", false), false);
      List<SNode> ptypes = SLinkOperations.getTargets(_context.getNode(), "parameter", true);
      return ClassifierTypeUtil.copyTypeRecursively(ptypes.get(psib.size()));
    }
    return type;
  }

  public static SNode sourceNodeQuery_1201781825089(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedReturnType_1201526153722(_context.getNode());
  }

  public static SNode sourceNodeQuery_1201863520535(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedSequenceParameterReturnType_1201527054112(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static SNode sourceNodeQuery_1202817755445(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_1202817864202(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    List<SNode> mds = SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "classifier", false), "method", true);
    return SLinkOperations.getTarget(mds.get(0), "returnType", true);
  }

  public static SNode sourceNodeQuery_1202818062914(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    SNode cl = (SNode)((SNode)_context.getNode()).getUserObject("literal");
    return SLinkOperations.getTarget(cl, "body", true);
  }

  public static List sourceNodesQuery_1199644424783(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static List sourceNodesQuery_1199712173374(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static List sourceNodesQuery_1199624932349(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> paramDecls = SLinkOperations.getTargets(_context.getNode(), "parameter", true);
    int idx = 0;
    List<SNode> res = new ArrayList<SNode>();
    for(SNode ft : FunctionType_Behavior.call_getNormalizedParameterTypes_1201526194584(TypeChecker.getInstance().getTypeOf(_context.getNode()))) {
      SNode pd = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null);
      SLinkOperations.setTarget(pd, "type", SNodeOperations.copyNode(ft), true);
      SPropertyOperations.set(pd, "name", SPropertyOperations.getString(paramDecls.get(idx), "name"));
      idx = idx + 1;
      res.add(pd);
    }
    return res;
  }

  public static List sourceNodesQuery_1202157784262(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionType_Behavior.call_getNormalizedParameterTypes_1201526194584(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static List sourceNodesQuery_1201044612684(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> paramDecls = SLinkOperations.getTargets(_context.getNode(), "parameter", true);
    int idx = 0;
    List<SNode> res = new ArrayList<SNode>();
    for(SNode ft : FunctionType_Behavior.call_getNormalizedParameterTypes_1201526194584(TypeChecker.getInstance().getTypeOf(_context.getNode()))) {
      SNode pd = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null);
      SLinkOperations.setTarget(pd, "type", SNodeOperations.copyNode(ft), true);
      SPropertyOperations.set(pd, "name", SPropertyOperations.getString(paramDecls.get(idx), "name"));
      idx = idx + 1;
      res.add(pd);
    }
    return res;
  }

  public static List sourceNodesQuery_1202157838198(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionType_Behavior.call_getNormalizedParameterTypes_1201526194584(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static List sourceNodesQuery_1201190892393(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "statement", true);
  }

  public static List sourceNodesQuery_1201187449746(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    int BEGIN = labels[0];
    int END = labels[1];
    List<SNode> results = new ArrayList<SNode>();
    List<SNode> stmts = StatementListUtil.selectStatementsUntilControlStatement(_context.getNode());
    do {
      int beginLabel = BEGIN;
      int endLabel = END;
      SNode lastStmt = null;
      SNode slist = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList", null);
      for(SNode stmt : stmts) {
        SNode tmp = SNodeOperations.copyNode(stmt);
        SLinkOperations.addChild(slist, "statement", tmp);
        PrepStatementUtil.putPrepData(tmp, PrepStatementUtil.getPrepData(stmt, _context.getGenerator()), _context.getGenerator());
        if(SNodeOperations.isInstanceOf(tmp, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")) {
          SNode lvd = SLinkOperations.getTarget(tmp, "localVariableDeclaration", true);
          PrepStatementUtil.putPrepData(lvd, PrepStatementUtil.getPrepData(SLinkOperations.getTarget(stmt, "localVariableDeclaration", true), _context.getGenerator()), _context.getGenerator());
        }
        lastStmt = stmt;
      }
      SNode cstmt = null;
      if((lastStmt != null)) {
        cstmt = SNodeOperations.getNextSibling(lastStmt);
      } else
      {
        List<SNode> allstmts = (List<SNode>)SLinkOperations.getTargets(_context.getNode(), "statement", true);
        cstmt = (allstmts.size() > 0 ?
          allstmts.get(0) :
          null
        );
      }
      stmts = null;
      if((cstmt != null)) {
        labels = (Integer[])PrepStatementUtil.getPrepData(cstmt, _context.getGenerator());
        endLabel = (labels != null ?
          labels[0] :
          -1
        );
        lastStmt = SNodeOperations.getNextSibling(cstmt);
        while((lastStmt != null)) {
          stmts = StatementListUtil.selectStatementsUntilControlStatement(_context.getNode(), lastStmt);
          if(stmts.size() == 0) {
            cstmt = lastStmt;
            lastStmt = SNodeOperations.getNextSibling(lastStmt);
          } else
          {
            labels = (Integer[])PrepStatementUtil.getPrepData(cstmt, _context.getGenerator());
            BEGIN = (labels != null ?
              labels[labels.length - 1] :
              -1
            );
            break;
          }
        }
      }
      results.add(slist);
      PrepStatementUtil.putPrepData(slist, new Integer[]{beginLabel,endLabel}, _context.getGenerator());
    } while(stmts != null && stmts.size() > 0);
    return results;
  }

  public static List sourceNodesQuery_1201382476594(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "case", true);
  }

  public static List sourceNodesQuery_1202761755981(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    SNode adaptable = (SNode)((SNode)_context.getNode()).getUserObject("adaptable");
    return SLinkOperations.getTargets(adaptable, "parameter", true);
  }

  public static List sourceNodesQuery_1202761732426(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    SNode adaptable = (SNode)((SNode)_context.getNode()).getUserObject("adaptable");
    return SLinkOperations.getTargets(adaptable, "parameter", true);
  }

  public static List sourceNodesQuery_1201781007728(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> mds = SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "classifier", false), "method", true);
    int idx = 1;
    List<SNode> ptypes = SLinkOperations.getTargets(_context.getNode(), "parameter", true);
    List<SNode> res = new ArrayList<SNode>();
    for(SNode pdecl : SLinkOperations.getTargets(mds.get(0), "parameter", true)) {
      SNode pd = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null);
      SNode ptype = SLinkOperations.getTarget(pdecl, "type", true);
      if(SNodeOperations.isInstanceOf(ptype, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
        List<SNode> psib = SNodeOperations.getPrevSiblings(SLinkOperations.getTarget(ptype, "typeVariableDeclaration", false), false);
        SLinkOperations.setTarget(pd, "type", ClassifierTypeUtil.copyTypeRecursively(ptypes.get(psib.size())), true);
      } else
      {
        SLinkOperations.setTarget(pd, "type", SNodeOperations.copyNode(ptype), true);
      }
      SPropertyOperations.set(pd, "name", "param" + idx);
      idx = idx + 1;
      res.add(pd);
    }
    return res;
  }

  public static List sourceNodesQuery_1201781007797(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> mds = SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "classifier", false), "method", true);
    int idx = 1;
    List<SNode> res = new ArrayList<SNode>();
    for(SNode pdecls : SLinkOperations.getTargets(mds.get(0), "parameter", true)) {
      SNode ref = SConceptOperations.createNewNode("jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference", null);
      SPropertyOperations.set(ref, "name", "param" + idx);
      idx = idx + 1;
      res.add(ref);
    }
    return res;
  }

  public static List sourceNodesQuery_1201781792604(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionTypeUtil.getAllAdaptableClassifierTypes(_context.getGenerator());
  }

  public static List sourceNodesQuery_1201783317579(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionTypeUtil.getAdaptableClassifierTypeTargets(_context.getNode(), _context.getGenerator());
  }

  public static List sourceNodesQuery_1202761306202(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> ptypes = SLinkOperations.getTargets(_context.getNode(), "parameter", true);
    List<SNode> result = new ArrayList<SNode>();
    for(SNode pt : ptypes) {
      result.add(ClassifierTypeUtil.copyTypeRecursively(pt));
    }
    return result;
  }

  public static List sourceNodesQuery_1201781825032(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    int idx = 1;
    List<SNode> res = new ArrayList<SNode>();
    for(SNode ft : FunctionType_Behavior.call_getNormalizedParameterTypes_1201526194584(_context.getNode())) {
      SNode pd = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null);
      SLinkOperations.setTarget(pd, "type", SNodeOperations.copyNode(ft), true);
      SPropertyOperations.set(pd, "name", "param" + idx);
      idx = idx + 1;
      res.add(pd);
    }
    return res;
  }

  public static List sourceNodesQuery_1201782654025(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionTypeUtil.getAllFunctionTypes(_context.getSourceModel());
  }

  public static List sourceNodesQuery_1202148923827(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> paramTypes = new ArrayList<SNode>();
    if((SLinkOperations.getTarget(_context.getNode(), "resultType", true) != null) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "resultType", true), "jetbrains.mps.baseLanguage.structure.VoidType"))) {
      paramTypes.add(FunctionType_Behavior.call_getNormalizedReturnType_1201526153722(_context.getNode()));
    }
    paramTypes.addAll(FunctionType_Behavior.call_getNormalizedParameterTypes_1201526194584(_context.getNode()));
    return paramTypes;
  }

  public static List sourceNodesQuery_1202817925990(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> mds = SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "classifier", false), "method", true);
    int idx = 0;
    List<SNode> ptypes = SLinkOperations.getTargets(_context.getNode(), "parameter", true);
    SNode cl = (SNode)((SNode)_context.getNode()).getUserObject("literal");
    List<SNode> litParams = SLinkOperations.getTargets(cl, "parameter", true);
    List<SNode> res = new ArrayList<SNode>();
    for(SNode pdecl : SLinkOperations.getTargets(mds.get(0), "parameter", true)) {
      SNode pd = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null);
      SNode ptype = SLinkOperations.getTarget(pdecl, "type", true);
      if(SNodeOperations.isInstanceOf(ptype, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
        List<SNode> psib = SNodeOperations.getPrevSiblings(SLinkOperations.getTarget(ptype, "typeVariableDeclaration", false), false);
        SLinkOperations.setTarget(pd, "type", ClassifierTypeUtil.copyTypeRecursively(ptypes.get(psib.size())), true);
      } else
      {
        SLinkOperations.setTarget(pd, "type", SNodeOperations.copyNode(ptype), true);
      }
      SPropertyOperations.set(pd, "name", SPropertyOperations.getString(litParams.get(idx), "name"));
      idx = idx + 1;
      res.add(pd);
    }
    return res;
  }

  public static List sourceNodesQuery_1202821929244(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> ptypes = SLinkOperations.getTargets(_context.getNode(), "parameter", true);
    List<SNode> result = new ArrayList<SNode>();
    for(SNode pt : ptypes) {
      result.add(ClassifierTypeUtil.copyTypeRecursively(pt));
    }
    return result;
  }

  public static SNode mapSrcMacro_mapper_1202998342276(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode te = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ThisExpression", null);
    SLinkOperations.setTarget(te, "classConcept", (SNode)_context.getGenerator().getGeneratorSessionContext().getSessionObject("set_this_classconcept_" + ((SNode)SLinkOperations.getTarget(_context.getNode(), "instance", true)).getId()), false);
    return te;
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201782869830(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().getOutputModel().getRootByName("_FunctionTypes");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201018804729(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_yieldIt");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201023865086(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201359280410(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201288191966(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201389219923(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201292996398(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201293019491(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201026203690(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201193348813(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201781101125(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().getOutputModel().getRootByName("_Adapters");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201789569217(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().getOutputModel().getRootByName("_Adapters");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201781946944(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().getOutputModel().getRootByName("_FunctionTypes");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201789469030(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().getOutputModel().getRootByName("_FunctionTypes");
  }

  public static void mappingScript_CodeBlock_1201011417446(final IOperationContext operationContext, final MappingScriptContext _context) {
    for(SNode cl : SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.closures.structure.ClosureLiteral")) {
      if(ClosureLiteralUtil.hasYieldStatement(cl)) {
        PrepStatementUtil.prepStatementList(SLinkOperations.getTarget(cl, "body", true), _context.getGenerator());
      }
    }
  }

  public static void mappingScript_CodeBlock_1201686683809(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> bmcs = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.BaseMethodCall");
    for(SNode bmc : bmcs) {
      List<SNode> args = SLinkOperations.getTargets(bmc, "actualArgument", true);
      List<SNode> pdecls = SLinkOperations.getTargets(SLinkOperations.getTarget(bmc, "baseMethodDeclaration", false), "parameter", true);
      if(args.size() != pdecls.size()) {
        _context.getGenerator().showInformationMessage(bmc, "Actual arguments count != parameter declarations count");
      }
      int idx = 0;
      for(SNode pdecl : pdecls) {
        SNode pdtype = SLinkOperations.getTarget(pdecl, "type", true);
        SNode pdFType = (SNodeOperations.isInstanceOf(pdtype, "jetbrains.mps.closures.structure.FunctionType") ?
          pdtype :
          null
        );
        SNode pdCType = (SNodeOperations.isInstanceOf(pdtype, "jetbrains.mps.baseLanguage.structure.ClassifierType") ?
          pdtype :
          null
        );
        if(((pdFType != null) || (pdCType != null)) && idx < args.size()) {
          SNode arg = args.get(idx);
          SNode argtype = TypeChecker.getInstance().getTypeOf(arg);
          SNode argFType = (SNodeOperations.isInstanceOf(argtype, "jetbrains.mps.closures.structure.FunctionType") ?
            argtype :
            null
          );
          SNode argCType = (SNodeOperations.isInstanceOf(argtype, "jetbrains.mps.baseLanguage.structure.ClassifierType") ?
            argtype :
            null
          );
          if((pdCType != null) && (argFType != null)) {
            if(SNodeOperations.isInstanceOf(arg, "jetbrains.mps.closures.structure.ClosureLiteral")) {
              FunctionTypeUtil.addAdaptableClosureLiteralTarget(arg, pdCType, _context.getGenerator());
            } else
            {
              FunctionTypeUtil.addAdaptableClassifierTypeTarget(ClassifierTypeUtil.getClassifierType(argFType), pdCType, _context.getGenerator());
            }
            FunctionTypeUtil.putPrepData(arg, INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(pdCType, "classifier", false)), _context.getGenerator());
          } else
          if((pdFType != null) && (argCType != null)) {
            FunctionTypeUtil.addAdaptableClassifierTypeTarget(argCType, ClassifierTypeUtil.getClassifierType(pdFType), _context.getGenerator());
            FunctionTypeUtil.putPrepData(arg, INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(ClassifierTypeUtil.getClassifierType(pdFType), "classifier", false)), _context.getGenerator());
          }
        }
        idx = idx + 1;
      }
    }
  }

  public static void mappingScript_CodeBlock_1201703119163(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> aes = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.AssignmentExpression");
    for(SNode ae : aes) {
      SNode ltype = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ae, "lValue", true));
      SNode rtype = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ae, "rValue", true));
      SNode lCType = (SNodeOperations.isInstanceOf(ltype, "jetbrains.mps.baseLanguage.structure.ClassifierType") ?
        ltype :
        null
      );
      SNode rCType = (SNodeOperations.isInstanceOf(rtype, "jetbrains.mps.baseLanguage.structure.ClassifierType") ?
        rtype :
        null
      );
      SNode lFType = (SNodeOperations.isInstanceOf(ltype, "jetbrains.mps.closures.structure.FunctionType") ?
        ltype :
        null
      );
      SNode rFType = (SNodeOperations.isInstanceOf(rtype, "jetbrains.mps.closures.structure.FunctionType") ?
        rtype :
        null
      );
      if((lCType != null) && (rFType != null)) {
        if(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ae, "rValue", true), "jetbrains.mps.closures.structure.ClosureLiteral")) {
          FunctionTypeUtil.addAdaptableClosureLiteralTarget(SLinkOperations.getTarget(ae, "rValue", true), lCType, _context.getGenerator());
        } else
        {
          FunctionTypeUtil.addAdaptableClassifierTypeTarget(ClassifierTypeUtil.getClassifierType(rFType), lCType, _context.getGenerator());
        }
        FunctionTypeUtil.putPrepData(SLinkOperations.getTarget(ae, "rValue", true), INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(lCType, "classifier", false)), _context.getGenerator());
      } else
      if((lFType != null) && (rCType != null)) {
        FunctionTypeUtil.addAdaptableClassifierTypeTarget(rCType, ClassifierTypeUtil.getClassifierType(lFType), _context.getGenerator());
        FunctionTypeUtil.putPrepData(SLinkOperations.getTarget(ae, "rValue", true), INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(ClassifierTypeUtil.getClassifierType(lFType), "classifier", false)), _context.getGenerator());
      }
    }
  }

  public static void mappingScript_CodeBlock_1201705474278(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> vds = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.VariableDeclaration");
    for(SNode vd : vds) {
      SNode vdtype = SLinkOperations.getTarget(vd, "type", true);
      SNode vdCType = (SNodeOperations.isInstanceOf(vdtype, "jetbrains.mps.baseLanguage.structure.ClassifierType") ?
        vdtype :
        null
      );
      SNode vdFType = (SNodeOperations.isInstanceOf(vdtype, "jetbrains.mps.closures.structure.FunctionType") ?
        vdtype :
        null
      );
      if((vdFType != null) || (vdCType != null)) {
        SNode inittype = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(vd, "initializer", true));
        SNode initCType = (SNodeOperations.isInstanceOf(inittype, "jetbrains.mps.baseLanguage.structure.ClassifierType") ?
          inittype :
          null
        );
        SNode initFType = (SNodeOperations.isInstanceOf(inittype, "jetbrains.mps.closures.structure.FunctionType") ?
          inittype :
          null
        );
        if((vdCType != null) && (initFType != null)) {
          if(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(vd, "initializer", true), "jetbrains.mps.closures.structure.ClosureLiteral")) {
            FunctionTypeUtil.addAdaptableClosureLiteralTarget(SLinkOperations.getTarget(vd, "initializer", true), vdCType, _context.getGenerator());
          } else
          {
            FunctionTypeUtil.addAdaptableClassifierTypeTarget(ClassifierTypeUtil.getClassifierType(initFType), vdCType, _context.getGenerator());
          }
          FunctionTypeUtil.putPrepData(SLinkOperations.getTarget(vd, "initializer", true), INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(vdCType, "classifier", false)), _context.getGenerator());
        } else
        if((vdFType != null) && (initCType != null)) {
          FunctionTypeUtil.addAdaptableClassifierTypeTarget(initCType, ClassifierTypeUtil.getClassifierType(vdFType), _context.getGenerator());
          FunctionTypeUtil.putPrepData(SLinkOperations.getTarget(vd, "initializer", true), INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(ClassifierTypeUtil.getClassifierType(vdFType), "classifier", false)), _context.getGenerator());
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_1202836874171(final IOperationContext operationContext, final MappingScriptContext _context) {
    for(SNode te : SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.ThisExpression")) {
      if(SNodeOperations.isInstanceOf(SNodeOperations.getParent(te, null, false, false), "jetbrains.mps.baseLanguage.structure.FieldReference") && (SLinkOperations.getTarget(te, "classConcept", false) == null)) {
        SNode cl = SNodeOperations.getAncestor(te, "jetbrains.mps.closures.structure.ClosureLiteral", false, false);
        SNode thisCC = SNodeOperations.getAncestor(te, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
        if((cl != null)) {
          SNodeOperations.getAncestors(cl, "jetbrains.mps.baseLanguage.structure.ClassConcept", false);
          for(SNode cc : SNodeOperations.getAncestors(cl, "jetbrains.mps.baseLanguage.structure.ClassConcept", false)) {
            if(cc == thisCC) {
              if(SNodeOperations.isInstanceOf(thisCC, "jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
                _context.getGenerator().getGeneratorSessionContext().putSessionObject("remove_this_" + ((SNode)te).getId(), thisCC);
              } else
              {
                _context.getGenerator().getGeneratorSessionContext().putSessionObject("set_this_classconcept_" + ((SNode)te).getId(), thisCC);
              }
              break;
            }
          }
        } else
        if(thisCC == null) {
          _context.getGenerator().showWarningMessage(te, "Cound not find the class concept");
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_1203003871207(final IOperationContext operationContext, final MappingScriptContext _context) {
    for(SNode cl : SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.closures.structure.ClosureLiteral")) {
      for(SNode vd : ClosureLiteralUtil.collectNonFinalVariableDeclarations(cl)) {
        SPropertyOperations.set(vd, "isFinal", "" + (true));
      }
    }
  }

}
