package closures.sandbox.control;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.closures.runtime._UnrestrictedFunctionTypes;
import jetbrains.mps.baseLanguage.closures.runtime.Result;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.baseLanguage.closures.runtime._UnrestrictedClosures;

public class ControlStatementDemo {

  public ControlStatementDemo() {
  }

  public static void bar(int howMany, _UnrestrictedFunctionTypes._void_terminate_P0_E0<? extends Integer> cls) {
    System.out.println("bar> entering");
    int _tmp_1232368702826 = 0;
    for(Result<? extends Integer, ?> __result__ = cls.invokeUnrestricted() ;  ; ) {
      switch (__result__.getOutcome()) {
        case RETURN_VALUE:
          //  fall through
        case RETURN_VOID:
          //  fall through
        case BREAK:
          return;
        case TERMINATE_VALUE:
          _tmp_1232368702826 = __result__.terminateInt();
          break;
        default:
          break;
      }
      break;
    }
    System.out.println("bar> i=" + _tmp_1232368702826);
    System.out.println("bar> leaving");
  }

  public static void withLock(Object lock, _UnrestrictedFunctionTypes._void_void_P0_E0 block) {
  }

  public static void forEachEntry(Map<String, Integer> map, _UnrestrictedFunctionTypes._void_void_P2_E0<? super String, ? super Integer> block) {
    for(IMapping<String, Integer> e : MapSequence.fromMap(map)) {
      for(Result<?, ?> __result__ = block.invokeUnrestricted(e.key(), e.value()) ;  ; ) {
        switch (__result__.getOutcome()) {
          case RETURN_VALUE:
            //  fall through
          case RETURN_VOID:
            //  fall through
          case BREAK:
            return;
          case TERMINATE_VOID:
            break;
          default:
            break;
        }
        break;
      }
    }
  }

  public static int foo() {
    System.out.println("foo> entering");
    for(_UnrestrictedClosures._void_terminate_P0_E0<Integer> __closure__ = new _UnrestrictedClosures._void_terminate_P0_E0<Integer>(new _UnrestrictedFunctionTypes._return_terminate_P0_E0 <Integer, Integer>() {

      public Result<Integer, Integer> invokeUnrestricted() {
        if (false) {
          return Result.RETURN(1);
        }
        return Result.TERMINATE(42);
      }
    }) ;  ; ) {
      bar(1, __closure__);
      Result<?, Object> __result__ = __closure__.getAndClearLastResult();
      switch (__result__.getOutcome()) {
        case RETURN_VALUE:
          return __result__.returnInt();
        case BREAK:
          break;
        default:
          break;
      }
      break;
    }
    for(_UnrestrictedClosures._void_terminate_P0_E0<Integer> __closure__ = new _UnrestrictedClosures._void_terminate_P0_E0<Integer>(new _UnrestrictedFunctionTypes._return_terminate_P0_E0 <Integer, Integer>() {

      public Result<Integer, Integer> invokeUnrestricted() {
        if (false) {
          return Result.RETURN(2);
        }
        return Result.TERMINATE(2);
      }
    }) ;  ; ) {
      bar(1, __closure__);
      Result<?, Object> __result__ = __closure__.getAndClearLastResult();
      switch (__result__.getOutcome()) {
        case RETURN_VALUE:
          return __result__.returnInt();
        case BREAK:
          break;
        default:
          break;
      }
      break;
    }
    Map<String, Integer> map = MapSequence.<String, Integer>fromKeysArray("a", "b", "c").withValues(1, 2, 3);
    for(_UnrestrictedClosures._void_void_P2_E0 __closure__ = new _UnrestrictedClosures._void_void_P2_E0(new _UnrestrictedFunctionTypes._void_void_P2_E0 <String, Integer>() {

      public Result<Object, Object> invokeUnrestricted(String k, Integer v) {
        System.out.println(k + "=>" + v);
        return Result.TERMINATE_VOID();
      }
    }) ;  ; ) {
      forEachEntry(map, __closure__);
      Result<?, Object> __result__ = __closure__.getAndClearLastResult();
      switch (__result__.getOutcome()) {
        case BREAK:
          break;
        default:
          break;
      }
      break;
    }
    System.out.println("foo> leaving");
    return -1;
  }

  public static void main(String[] args) {
    System.out.println("main> starting up");
    int res = foo();
    System.out.println("main> res = " + res);
    System.out.println("main> finishing up");
  }

}
