package jetbrains.mps.closures.test;

/*Generated by MPS */

import jetbrains.mps.closures.runtime.FunctionTypes._R;
import jetbrains.mps.closures.runtime.FunctionTypes;
import jetbrains.mps.baseLanguage.ext.collections.internal.SequenceWithSupplier;
import java.util.List;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import java.util.Iterator;
import jetbrains.mps.closures.runtime.YieldingIterator;
import jetbrains.mps.closures.runtime.FunctionTypes._void_from_T;

public class SequenceFunctionTypes_Test extends ClosuresBase_Test {

  public void test_returnSequence() throws Exception {
    _R<? extends Iterable<Integer>> fun1 = null;
    _R<? extends Iterable<Integer>> fun2 = null;
    fun1 = fun2;
    fun2 = fun1;
    fun1 = new FunctionTypes._R <Iterable<Integer>>() {

      public Iterable<Integer> invoke() {
        return new SequenceWithSupplier<Integer>(new zValueSupplier(null, null));
      }

    };
    fun1 = new FunctionTypes._R <List<Integer>>() {

      public List<Integer> invoke() {
        return ListOperations.<Integer>createList(Integer.valueOf(1));
      }

    };
    fun1 = new FunctionTypes._R <Iterable<Integer>>() {

      public Iterable<Integer> invoke() {
        return new Iterable <Integer>() {

          public Iterator<Integer> iterator() {
            return new YieldingIterator <Integer>() {

              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this.__CP__ = 1;
                      this.yield(Integer.valueOf(1));
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }

            };
          }

        };
      }

    };
    fun1 = new FunctionTypes._R <Iterable<Integer>>() {

      public Iterable<Integer> invoke() {
        return new Iterable <Integer>() {

          public Iterator<Integer> iterator() {
            return new YieldingIterator <Integer>() {

              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this.__CP__ = 1;
                      this.yield(1);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }

            };
          }

        };
      }

    };
  }

  public void test_acceptSequence() throws Exception {
    _void_from_T<? super Iterable<Integer>> fun1 = new FunctionTypes._void_from_T <Iterable<Integer>>() {

      public void invoke(Iterable<Integer> p) {
      }

    };
    _void_from_T<? super Iterable<Integer>> fun2 = new FunctionTypes._void_from_T <Iterable<Integer>>() {

      public void invoke(Iterable<Integer> p) {
      }

    };
    fun1 = fun2;
    fun2 = fun1;
  }

  public void test_resultsReturnSequence() throws Exception {
    this.assertResultsEqual(new FunctionTypes._R <Iterable<Integer>>() {

      public Iterable<Integer> invoke() {
        return new SequenceWithSupplier<Integer>(new zValueSupplier1(null, null));
      }

    }, new FunctionTypes._R <Iterable<Integer>>() {

      public Iterable<Integer> invoke() {
        return new Iterable <Integer>() {

          public Iterator<Integer> iterator() {
            return new YieldingIterator <Integer>() {

              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this.__CP__ = 3;
                      this.yield(1);
                      return true;
                    case 3:
                      this.__CP__ = 4;
                      this.yield(2);
                      return true;
                    case 4:
                      this.__CP__ = 1;
                      this.yield(3);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }

            };
          }

        };
      }

    });
  }

}
