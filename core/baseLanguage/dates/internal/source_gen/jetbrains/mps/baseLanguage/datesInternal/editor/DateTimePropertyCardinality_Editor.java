package jetbrains.mps.baseLanguage.datesInternal.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;

public class DateTimePropertyCardinality_Editor extends DefaultNodeEditor {

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection1173953901288(context, node);
  }

  public EditorCell createCollection1173953901288(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11739539012881173953901288(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createProperty1173953916540(context, node));
    editorCell.addEditorCell(this.createConstant1173953935778(context, node, ":"));
    editorCell.addEditorCell(this.createProperty1173953939170(context, node));
    return editorCell;
  }

  public EditorCell createConstant1173953935778(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11739539357781173953935778(editorCell, node, context);
    setupLabel_Constant_1173953935778_1173953935778(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createProperty1173953916540_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_property_numberOfSymbols1173953916540(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_property_numberOfSymbols_1173953916540((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty1173953916540(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("numberOfSymbols");
    provider.setNoTargetText("<no numberOfSymbols>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createProperty1173953916540_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createProperty1173953939170_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_property_meaning1173953939170(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_property_meaning_1173953939170((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty1173953939170(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("meaning");
    provider.setNoTargetText("<no meaning>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createProperty1173953939170_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }


  private static void setupBasic_Collection_11739539012881173953901288(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1173953901288");
  }

  private static void setupBasic_property_numberOfSymbols1173953916540(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_numberOfSymbols");
  }

  private static void setupBasic_Constant_11739539357781173953935778(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1173953935778");
  }

  private static void setupBasic_property_meaning1173953939170(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_meaning");
  }

  private static void setupLabel_property_numberOfSymbols_1173953916540(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1173953935778_1173953935778(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_property_meaning_1173953939170(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

}
