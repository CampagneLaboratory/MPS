package jetbrains.mps.baseLanguage.dates.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.typesystem.inference.SubtypingManager;
import java.util.List;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class DateTypeUtil {
  private static SNode dateTimeType = new _Quotations.QuotationClass_0().createNode();
  private static SNode dateTimeZoneType = new _Quotations.QuotationClass_9().createNode();
  private static SNode dateTimeWithTZType = new _Quotations.QuotationClass_12().createNode();
  private static SNode periodType = new _Quotations.QuotationClass_1().createNode();
  private static SNode durationType = new _Quotations.QuotationClass_13().createNode();
  private static SNode intType = new _Quotations.QuotationClass_2().createNode();
  private static SNode javaDateType = new _Quotations.QuotationClass_3().createNode();
  private static SNode javaCalendarType = new _Quotations.QuotationClass_4().createNode();
  private static SNode jodaAbstractInstant = new _Quotations.QuotationClass_5().createNode();
  private static Logger LOG = Logger.getLogger(DateTypeUtil.class);

  public static boolean isInstanceOfPeriod(SNode node) {
    return isInstanceOf(node, periodType);
  }

  public static boolean isInstanceOfPeriodCompare(SNode compareOperation) {
    return bothOperandsAreNotNull(compareOperation) && isInstanceOfPeriod(SLinkOperations.getTarget(compareOperation, "leftExpression", true));
  }

  public static boolean isInstanceOfDurationCompare(SNode compareOperation) {
    return bothOperandsAreNotNull(compareOperation) && isInstanceOfDuration(SLinkOperations.getTarget(compareOperation, "leftExpression", true));
  }

  public static boolean isInstanceOfDuration(SNode node) {
    return isInstanceOf(node, durationType);
  }

  public static boolean isInstanceOfDatetime(SNode node) {
    return isInstanceOf(node, dateTimeType);
  }

  public static boolean isInstanceOfTimezone(SNode node) {
    return isInstanceOf(node, dateTimeZoneType);
  }

  public static boolean isInstanceOfDatetimeWithTZ(SNode node) {
    return isInstanceOf(node, dateTimeWithTZType);
  }

  public static boolean isInstanceOfInt(SNode node) {
    return isInstanceOf(node, intType);
  }

  public static boolean isInstanceOfJavaDatePresentation(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.NullLiteral")) {
      return false;
    }
    TypeChecker tc = TypeChecker.getInstance();
    SubtypingManager sm = tc.getSubtypingManager();
    SNode actualType = tc.getTypeOf(node);
    return sm.isSubtype(actualType, javaDateType) || sm.isSubtype(actualType, javaCalendarType) || sm.isSubtype(actualType, jodaAbstractInstant);
  }

  public static boolean bothOperandsAreNotNull(SNode operation) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(operation, "leftExpression", true), "jetbrains.mps.baseLanguage.structure.NullLiteral") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(operation, "rightExpression", true), "jetbrains.mps.baseLanguage.structure.NullLiteral"));
  }

  public static boolean isInstanceOf(SNode node, SNode type) {
    if (node == null || type == null) {
      LOG.error("Null parameter to isInstanceOf()");
      return false;
    }
    try {
      return TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(node), type, false);
    } catch (Throwable thr) {
      LOG.error("Error executing isStrongSubtype(): ", thr);
    }
    return false;
  }

  public static List<SNode> findDateTimeProperties(IScope scope, SModel model) {
    return SModelOperations.getNodesIncludingImported(model, scope, "jetbrains.mps.baseLanguage.datesInternal.structure.DateTimeProperty");
  }

  public static SNode getContainingPeriod(SNode expr) {
    SNode current = expr;
    while ((current != null) && TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(current), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.dates.structure.PeriodType"), false) == null) {
      current = (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current), "jetbrains.mps.baseLanguage.structure.Expression") ?
        SNodeOperations.cast(SNodeOperations.getParent(current), "jetbrains.mps.baseLanguage.structure.Expression") :
        null
      );
    }
    return current;
  }

  public static SNode getCompareExpression(SNode expr) {
    SNode current = expr;
    while ((current != null)) {
      if (SNodeOperations.isInstanceOf(current, "jetbrains.mps.baseLanguage.structure.BinaryCompareOperation") || SNodeOperations.isInstanceOf(current, "jetbrains.mps.baseLanguage.structure.EqualsExpression") || SNodeOperations.isInstanceOf(current, "jetbrains.mps.baseLanguage.structure.NotEqualsExpression")) {
        if (isInstanceOfDatetimeWithTZ(SLinkOperations.getTarget(SNodeOperations.cast(current, "jetbrains.mps.baseLanguage.structure.BinaryOperation"), "leftExpression", true))) {
          return SNodeOperations.cast(current, "jetbrains.mps.baseLanguage.structure.BinaryOperation");
        }
        return null;
      } else {
        current = (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current), "jetbrains.mps.baseLanguage.structure.Expression") ?
          SNodeOperations.cast(SNodeOperations.getParent(current), "jetbrains.mps.baseLanguage.structure.Expression") :
          null
        );
      }
    }
    return null;
  }
}
