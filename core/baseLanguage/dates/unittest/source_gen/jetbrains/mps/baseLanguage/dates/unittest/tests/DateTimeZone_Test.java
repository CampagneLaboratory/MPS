package jetbrains.mps.baseLanguage.dates.unittest.tests;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.dates.unittest.tests.BaseTestCase;
import org.junit.Test;
import junit.framework.Assert;
import jetbrains.mps.baseLanguage.dates.runtime.DateTimeOperations;
import org.joda.time.format.DateTimeFormat;
import java.util.Locale;
import org.joda.time.DateTimeZone;
import org.joda.time.Period;

public class DateTimeZone_Test extends BaseTestCase {

  @Test()
  public void test_tokyoAndMoscowShortTime() throws Exception {
    Long current = System.currentTimeMillis();
    Assert.assertEquals(DateTimeOperations.print(current, DateTimeFormat.shortTime(), new Locale("ru", "RU", ""), DateTimeZone.forOffsetHoursMinutes(9, 0)), DateTimeOperations.print((DateTimeOperations.plus(current, Period.hours(6))), DateTimeFormat.shortTime(), new Locale("ru", "RU", ""), DateTimeZone.forOffsetHoursMinutes(3, 0)));
  }

  @Test()
  public void test_tokyoAndMoscowFullTime() throws Exception {
    Long current = System.currentTimeMillis();
    Assert.assertFalse((DateTimeOperations.print(current, DateTimeFormat.fullTime(), new Locale("ru", "RU", ""), DateTimeZone.forOffsetHoursMinutes(9, 0))).equals(DateTimeOperations.print((DateTimeOperations.plus(current, Period.hours(6))), DateTimeFormat.fullTime(), new Locale("ru", "RU", ""), DateTimeZone.forOffsetHoursMinutes(3, 0))));
  }

  @Test()
  public void test_westernHemisphereTime() throws Exception {
    Long yesterday = DateTimeOperations.minus(System.currentTimeMillis(), Period.days(1));
    Assert.assertEquals(DateTimeOperations.print(yesterday, DateTimeFormat.shortTime(), null, DateTimeZone.forOffsetHoursMinutes(5, 0)), DateTimeOperations.print((DateTimeOperations.minus(yesterday, Period.hours(2))), DateTimeFormat.shortTime(), null, DateTimeZone.forOffsetHoursMinutes(7, 0)));
  }

  @Test()
  public void test_westernHemisphereDate() throws Exception {
    Long yesterday = DateTimeOperations.minus(System.currentTimeMillis(), Period.days(1));
    Assert.assertFalse((DateTimeOperations.print(yesterday, DateTimeFormat.fullDate(), Locale.US, DateTimeZone.forOffsetHoursMinutes(5, 0))).equals(DateTimeOperations.print((DateTimeOperations.plus(yesterday, Period.hours(22))), DateTimeFormat.fullDate(), Locale.US, DateTimeZone.forOffsetHoursMinutes(7, 0))));
  }

}
