package jetbrains.mps.baseLanguage.dates.unittest.tests;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.baseLanguage.dates.runtime.DateTimeOperations;
import org.joda.time.DateTime;
import junit.framework.Assert;
import jetbrains.mps.baseLanguage.dates.runtime.CompareType;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Period;

public class Compare_Test extends TestCase {
  private static Long yesterday = DateTimeOperations.convert(new DateTime(System.currentTimeMillis()).minusDays(1));

  public void test_equals() throws Exception {
    Long now1 = System.currentTimeMillis();
    Assert.assertTrue(DateTimeOperations.compare(now1, CompareType.EQ, now1, DateTimeFieldType.secondOfMinute()));
    Assert.assertFalse(DateTimeOperations.compare(now1, CompareType.NE, now1, DateTimeFieldType.millisOfSecond()));
  }

  public void test_zoneEquals() throws Exception {
    Long now1 = System.currentTimeMillis();
    Assert.assertEquals((DateTimeOperations.convert(now1, DateTimeZone.getDefault())), DateTimeOperations.roundFloor((DateTimeOperations.convert(now1, DateTimeZone.getDefault())), DateTimeFieldType.millisOfSecond()));
  }

  public void test_greater() throws Exception {
    Long now1 = System.currentTimeMillis();
    Assert.assertFalse(DateTimeOperations.compare(now1, CompareType.GT, now1, DateTimeFieldType.millisOfSecond()));
    Assert.assertTrue(DateTimeOperations.compare(System.currentTimeMillis(), CompareType.GE, yesterday, DateTimeFieldType.dayOfMonth()));
  }

  public void test_never() throws Exception {
    Assert.assertFalse(DateTimeOperations.compare(DateTimeOperations.never(), CompareType.GE, System.currentTimeMillis(), DateTimeFieldType.millisOfSecond()));
    Assert.assertTrue(DateTimeOperations.compare(DateTimeOperations.never(), CompareType.LT, yesterday, DateTimeFieldType.secondOfMinute()));
  }

  public void test_lessOrEquals() throws Exception {
    Assert.assertTrue(DateTimeOperations.compare((DateTimeOperations.roundFloor(System.currentTimeMillis(), DateTimeFieldType.monthOfYear())), CompareType.LE, (DateTimeOperations.round(System.currentTimeMillis(), DateTimeFieldType.dayOfMonth())), DateTimeFieldType.millisOfSecond()));
  }

  public void test_min() throws Exception {
    Assert.assertTrue(DateTimeOperations.compare(Long.valueOf(Math.min(DateTimeOperations.convert(Period.hours(12)), DateTimeOperations.convert(Period.hours(24)))), CompareType.LT, DateTimeOperations.convert(Period.days(1)), DateTimeFieldType.millisOfSecond()));
  }

  public void test_max() throws Exception {
    Assert.assertFalse(DateTimeOperations.compare(Long.valueOf(Math.max(DateTimeOperations.convert(Period.days(1)), DateTimeOperations.convert(Period.days(2)))), CompareType.EQ, DateTimeOperations.convert(Period.hours(24)), DateTimeFieldType.millisOfSecond()));
  }

  public void test_plusExpression() throws Exception {
    Long d1 = System.currentTimeMillis();
    Long d2 = DateTimeOperations.plus(d1, Period.hours(5));
    Assert.assertTrue(DateTimeOperations.compare(DateTimeOperations.minus(d2, d1), CompareType.EQ, Period.hours(5)));
  }

  public void test_plusExpressionWithConvert() throws Exception {
    Long d1 = System.currentTimeMillis();
    Long d2 = DateTimeOperations.plus(d1, Period.hours(5));
    Assert.assertTrue(DateTimeOperations.compare(DateTimeOperations.convert((DateTimeOperations.minus(d2, d1))), CompareType.EQ, DateTimeOperations.convert(Period.hours(5)), DateTimeFieldType.millisOfSecond()));
  }

  public void test_plusExpressionReversed() throws Exception {
    Long d1 = System.currentTimeMillis();
    Long d2 = DateTimeOperations.plus(Period.hours(5), d1);
    Assert.assertTrue(DateTimeOperations.compare((DateTimeOperations.minus(d2, d1)), CompareType.EQ, Period.hours(5)));
  }

  public void test_minusExpression() throws Exception {
    Long d1 = System.currentTimeMillis();
    Long d2 = DateTimeOperations.minus(d1, Period.minutes(5));
    Assert.assertTrue(DateTimeOperations.compare(DateTimeOperations.minus(d1, d2), CompareType.EQ, Period.minutes(5)));
  }

  public void test_minusExpressionWithConvert() throws Exception {
    Long d1 = System.currentTimeMillis();
    Long d2 = DateTimeOperations.minus(d1, Period.minutes(5));
    Assert.assertTrue(DateTimeOperations.compare(DateTimeOperations.convert((DateTimeOperations.minus(d1, d2))), CompareType.EQ, DateTimeOperations.convert(Period.minutes(5)), DateTimeFieldType.millisOfSecond()));
  }

  public void test_asd() throws Exception {
    Long d = DateTimeOperations.plus(System.currentTimeMillis(), Period.seconds(1));
    Assert.assertTrue(DateTimeOperations.compare(System.currentTimeMillis(), CompareType.EQ, d, DateTimeFieldType.dayOfMonth()));
  }
}
