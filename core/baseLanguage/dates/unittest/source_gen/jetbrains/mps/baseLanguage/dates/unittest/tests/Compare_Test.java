package jetbrains.mps.baseLanguage.dates.unittest.tests;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.baseLanguage.dates.runtime.DateTimeOperations;
import org.joda.time.DateTime;
import org.junit.Test;
import junit.framework.Assert;
import jetbrains.mps.baseLanguage.dates.runtime.CompareType;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Period;

public class Compare_Test extends TestCase {
  private static Long yesterday = DateTimeOperations.convert(new DateTime(System.currentTimeMillis()).minusDays(1));

  @Test
  public void equals() throws Exception {
    Assert.assertTrue(DateTimeOperations.compare(System.currentTimeMillis(), CompareType.valueOf("EQ"), System.currentTimeMillis(), DateTimeFieldType.secondOfMinute()));
  }

  @Test
  public void greater() throws Exception {
    Assert.assertFalse(DateTimeOperations.compare(System.currentTimeMillis(), CompareType.valueOf("GT"), System.currentTimeMillis(), DateTimeFieldType.millisOfSecond()));
    Assert.assertTrue(DateTimeOperations.compare(System.currentTimeMillis(), CompareType.valueOf("GE"), yesterday, DateTimeFieldType.dayOfMonth()));
  }

  @Test
  public void never() throws Exception {
    Assert.assertFalse(DateTimeOperations.compare(DateTimeOperations.never(), CompareType.valueOf("GE"), System.currentTimeMillis(), DateTimeFieldType.millisOfSecond()));
    Assert.assertTrue(DateTimeOperations.compare(DateTimeOperations.never(), CompareType.valueOf("LT"), yesterday, DateTimeFieldType.secondOfMinute()));
  }

  @Test
  public void lessOrEquals() throws Exception {
    Assert.assertTrue(DateTimeOperations.compare((DateTimeOperations.roundFloor(System.currentTimeMillis(), DateTimeFieldType.monthOfYear())), CompareType.valueOf("LE"), (DateTimeOperations.round(System.currentTimeMillis(), DateTimeFieldType.dayOfMonth())), DateTimeFieldType.millisOfSecond()));
  }

  @Test
  public void min() throws Exception {
    Assert.assertTrue(DateTimeOperations.compare(Long.valueOf(Math.min(DateTimeOperations.convert(Period.hours(12)), DateTimeOperations.convert(Period.hours(24)))), CompareType.valueOf("LT"), DateTimeOperations.convert(Period.days(1)), DateTimeFieldType.millisOfSecond()));
  }

  @Test
  public void max() throws Exception {
    Assert.assertFalse(DateTimeOperations.compare(Long.valueOf(Math.max(DateTimeOperations.convert(Period.days(1)), DateTimeOperations.convert(Period.days(2)))), CompareType.valueOf("EQ"), DateTimeOperations.convert(Period.hours(24)), DateTimeFieldType.millisOfSecond()));
  }

  @Test
  public void plusExpression() throws Exception {
    Long d1 = System.currentTimeMillis();
    Long d2 = DateTimeOperations.plus(d1, Period.hours(5));
    Assert.assertTrue(DateTimeOperations.equals(DateTimeOperations.minus(d2, d1), Period.hours(5)));
  }

  @Test
  public void plusExpressionWithConvert() throws Exception {
    Long d1 = System.currentTimeMillis();
    Long d2 = DateTimeOperations.plus(d1, Period.hours(5));
    Assert.assertTrue(DateTimeOperations.compare(DateTimeOperations.convert((DateTimeOperations.minus(d2, d1))), CompareType.valueOf("EQ"), DateTimeOperations.convert(Period.hours(5)), DateTimeFieldType.millisOfSecond()));
  }

  @Test
  public void minusExpression() throws Exception {
    Long d1 = System.currentTimeMillis();
    Long d2 = DateTimeOperations.minus(d1, Period.minutes(5));
    Assert.assertTrue(DateTimeOperations.equals(DateTimeOperations.minus(d1, d2), Period.minutes(5)));
  }

  @Test
  public void minusExpressionWithConvert() throws Exception {
    Long d1 = System.currentTimeMillis();
    Long d2 = DateTimeOperations.minus(d1, Period.minutes(5));
    Assert.assertTrue(DateTimeOperations.compare(DateTimeOperations.convert((DateTimeOperations.minus(d1, d2))), CompareType.valueOf("EQ"), DateTimeOperations.convert(Period.minutes(5)), DateTimeFieldType.millisOfSecond()));
  }

  @Test
  public void asd() throws Exception {
    Long d = DateTimeOperations.plus(System.currentTimeMillis(), Period.seconds(1));
    Assert.assertTrue(DateTimeOperations.compare(System.currentTimeMillis(), CompareType.valueOf("EQ"), d, DateTimeFieldType.dayOfMonth()));
  }
}
