package jetbrains.mps.baseLanguage.dates.unittest.tests;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.baseLanguage.dates.runtime.DateTimeOperations;
import org.joda.time.DateTime;
import org.junit.Test;
import junit.framework.Assert;
import jetbrains.mps.baseLanguage.dates.runtime.CompareType;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Period;

public class Compare_Test extends TestCase {
  private static Long yesterday = DateTimeOperations.convert(new DateTime(System.currentTimeMillis()).minusDays(1));

  @Test()
  public void test_equals() throws Exception {
    Assert.assertTrue(DateTimeOperations.compare(System.currentTimeMillis(), CompareType.valueOf("EQ"), System.currentTimeMillis(), DateTimeFieldType.secondOfMinute()));
  }

  @Test()
  public void test_greater() throws Exception {
    Assert.assertFalse(System.currentTimeMillis() > System.currentTimeMillis());
    Assert.assertTrue(DateTimeOperations.compare(System.currentTimeMillis(), CompareType.valueOf("GE"), yesterday, DateTimeFieldType.dayOfMonth()));
  }

  @Test()
  public void test_never() throws Exception {
    Assert.assertFalse(Long.valueOf(0) >= System.currentTimeMillis());
    Assert.assertTrue(DateTimeOperations.compare(Long.valueOf(0), CompareType.valueOf("LT"), yesterday, DateTimeFieldType.secondOfMinute()));
  }

  @Test()
  public void test_lessOrEquals() throws Exception {
    Assert.assertTrue(DateTimeOperations.compare((DateTimeOperations.roundFloor(System.currentTimeMillis(), DateTimeFieldType.monthOfYear())), CompareType.valueOf("LE"), (DateTimeOperations.round(System.currentTimeMillis(), DateTimeFieldType.dayOfMonth())), DateTimeFieldType.millisOfSecond()));
  }

  @Test()
  public void test_min() throws Exception {
    Assert.assertTrue(Long.valueOf(Math.min(DateTimeOperations.convert(Period.hours(12)), DateTimeOperations.convert(Period.hours(24)))) < DateTimeOperations.convert(Period.days(1)));
  }

  @Test()
  public void test_max() throws Exception {
    Assert.assertFalse(Long.valueOf(Math.max(DateTimeOperations.convert(Period.days(1)), DateTimeOperations.convert(Period.days(2)))).equals(DateTimeOperations.convert(Period.hours(24))));
  }

  @Test()
  public void test_minusExpression() throws Exception {
    Long d1 = System.currentTimeMillis();
    Long d2 = DateTimeOperations.plus(d1, Period.hours(5));
    Assert.assertTrue(DateTimeOperations.equals(DateTimeOperations.minus(d2, d1), Period.hours(5)));
  }

  @Test()
  public void test_minusExpressionWithConvert() throws Exception {
    Long d1 = System.currentTimeMillis();
    Long d2 = DateTimeOperations.plus(d1, Period.hours(5));
    Assert.assertTrue(DateTimeOperations.convert((DateTimeOperations.minus(d2, d1))).equals(DateTimeOperations.convert(Period.hours(5))));
  }

}
