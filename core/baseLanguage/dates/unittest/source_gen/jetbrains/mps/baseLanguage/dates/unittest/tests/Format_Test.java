package jetbrains.mps.baseLanguage.dates.unittest.tests;

/*Generated by MPS */

import org.junit.Test;
import org.joda.time.DateTime;
import junit.framework.Assert;
import jetbrains.mps.baseLanguage.dates.runtime.DateTimeOperations;
import org.joda.time.Period;
import org.joda.time.DateTimeFieldType;
import org.joda.time.format.DateTimeFormat;
import jetbrains.mps.baseLanguage.dates.runtime.CompareType;
import org.joda.time.PeriodType;
import java.util.Locale;
import org.joda.time.DateTimeZone;

public class Format_Test extends BaseTestCase {
  @Test
  public void timeFormat() throws Exception {
    DateTime dt = new DateTime();
    Assert.assertEquals(dt.toString("HH:mm:ss"), DateTimeOperations.print(DateTimeOperations.convert(dt), _FormatTables.MAIN_FORMAT_TABLE.getFormatter("time"), null, null));
  }

  @Test
  public void jodaDateTime() throws Exception {
    Long today = DateTimeOperations.convert(new DateTime(System.currentTimeMillis()).toLocalDate().toDateTimeAtMidnight());
    Assert.assertEquals(new DateTime(today).toString("yyyy-MM-dd"), DateTimeOperations.print(today, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("date"), null, null));
  }

  @Test
  public void nowOptionalDate() throws Exception {
    Assert.assertEquals(19, DateTimeOperations.print(System.currentTimeMillis(), _FormatTables.MAIN_FORMAT_TABLE.getFormatter("date/time"), null, null).length());
  }

  @Test
  public void yesterdayOptionalDate() throws Exception {
    Long yesterday = DateTimeOperations.minus(System.currentTimeMillis(), Period.days(1));
    Assert.assertEquals(19, DateTimeOperations.print(yesterday, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("optionalDate"), null, null).length());
    Assert.assertEquals(8, DateTimeOperations.print(System.currentTimeMillis(), _FormatTables.MAIN_FORMAT_TABLE.getFormatter("optionalDate"), null, null).length());
  }

  @Test
  public void nullOptionalDate() throws Exception {
    Assert.assertEquals("-", DateTimeOperations.print((Long)null, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("optionalDate"), null, null));
  }

  @Test
  public void usDayOfWeek() throws Exception {
    Long monday = DateTimeOperations.roundFloor(System.currentTimeMillis(), DateTimeFieldType.weekOfWeekyear());
    String expected = "Monday";
    Assert.assertEquals(expected, DateTimeOperations.print(monday, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("usDayOfWeek"), null, null));
  }

  @Test
  public void predefined() throws Exception {
    Assert.assertTrue(DateTimeOperations.print(System.currentTimeMillis(), DateTimeFormat.fullDateTime(), null, null) != null);
  }

  @Test
  public void minutesAgo() throws Exception {
    Long dt = DateTimeOperations.minus(System.currentTimeMillis(), Period.minutes(27));
    String actual = DateTimeOperations.print(dt, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("offset"), null, null);
    if ((DateTimeOperations.compare(dt, CompareType.valueOf("EQ"), System.currentTimeMillis(), DateTimeFieldType.hourOfDay())) && (DateTimeOperations.equals(new Period((long)System.currentTimeMillis() - dt, PeriodType.minutes()), Period.minutes(27)))) {
      Assert.assertEquals("27 minutes ago", actual);
    }
  }

  @Test
  public void minutesAfter() throws Exception {
    Long dt = DateTimeOperations.plus(System.currentTimeMillis(), Period.minutes(27));
    String actual = DateTimeOperations.print(dt, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("offset"), null, null);
    if (DateTimeOperations.compare(dt, CompareType.valueOf("EQ"), System.currentTimeMillis(), DateTimeFieldType.hourOfDay()) && (DateTimeOperations.equals(Period.minutes(27), new Period((long)dt - System.currentTimeMillis(), PeriodType.minutes())))) {
      Assert.assertEquals("in 27 minutes", actual);
    }
  }

  @Test
  public void hoursMinutesAgo() throws Exception {
    Long dt = DateTimeOperations.minus((DateTimeOperations.minus(System.currentTimeMillis(), Period.hours(2))), Period.minutes(27));
    String actual = DateTimeOperations.print(dt, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("offset"), null, null);
    if (DateTimeOperations.compare(dt, CompareType.valueOf("EQ"), System.currentTimeMillis(), DateTimeFieldType.dayOfMonth()) && DateTimeOperations.compare(DateTimeOperations.plus(DateTimeOperations.plus(dt, Period.hours(2)), Period.minutes(27)), CompareType.valueOf("EQ"), System.currentTimeMillis(), DateTimeFieldType.minuteOfHour())) {
      Assert.assertEquals("2 hours and 27 minutes ago", actual);
    }
  }

  @Test
  public void formatForPeriod() throws Exception {
    Period p = Period.days(20);
    Long d = DateTimeOperations.convert(p);
    Assert.assertEquals(DateTimeOperations.print(p, DateTimeFormat.shortDate(), null, null), DateTimeOperations.print(d, DateTimeFormat.shortDate(), null, null));
    Assert.assertEquals(DateTimeOperations.print(DateTimeOperations.convert(p), _FormatTables.MAIN_FORMAT_TABLE.getFormatter("time"), null, null), DateTimeOperations.print(d, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("time"), null, null));
  }

  @Test
  public void fullDateForPeriod() throws Exception {
    Period p = DateTimeOperations.plus(Period.weeks(2), Period.minutes(15));
    Assert.assertEquals("Thursday, January 15, 1970", DateTimeOperations.print(p, DateTimeFormat.fullDate(), Locale.US, null));
  }

  @Test
  public void shortDatePeriod() throws Exception {
    Period p = DateTimeOperations.plus(Period.days(10), Period.seconds(10));
    Assert.assertEquals("1/11/70", DateTimeOperations.print(p, DateTimeFormat.shortDate(), Locale.US, null));
  }

  @Test
  public void ampm() throws Exception {
    Period p = DateTimeOperations.plus(Period.hours(3), Period.minutes(33));
    Assert.assertEquals("3:33 AM", DateTimeOperations.print(DateTimeOperations.convert(p), _FormatTables.MAIN_FORMAT_TABLE.getFormatter("am-pm"), null, DateTimeZone.UTC));
  }
}
