/*
 * Copyright 2003-2008 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.baseLanguage.dates.unittest.tests;

/*Generated by MPS */

import org.junit.Test;
import org.joda.time.DateTime;
import junit.framework.Assert;
import jetbrains.mps.baseLanguage.dates.runtime.DateTimeOperations;
import org.joda.time.Period;
import org.joda.time.DateTimeFieldType;
import org.joda.time.format.DateTimeFormat;
import jetbrains.mps.baseLanguage.dates.runtime.CompareType;
import org.joda.time.PeriodType;

public class Format_Test extends BaseTestCase {

  @Test()
  public void test_format1() throws Exception {
    DateTime dt = new DateTime();
    Assert.assertEquals(dt.toString("HH:mm:ss"), DateTimeOperations.print(DateTimeOperations.convert(dt), _FormatTables.MAIN_FORMAT_TABLE.getFormatter("time")));
  }

  @Test()
  public void test_format2() throws Exception {
    Long today = DateTimeOperations.convert(new DateTime(System.currentTimeMillis()).toLocalDate().toDateTimeAtMidnight());
    Assert.assertEquals(new DateTime(today).toString("yyyy-MM-dd"), DateTimeOperations.print(today, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("date")));
  }

  @Test()
  public void test_format3() throws Exception {
    Assert.assertEquals(19, DateTimeOperations.print(System.currentTimeMillis(), _FormatTables.MAIN_FORMAT_TABLE.getFormatter("date/time")).length());
  }

  @Test()
  public void test_format4() throws Exception {
    Long yesterday = DateTimeOperations.minus(System.currentTimeMillis(), Period.days(1));
    Assert.assertEquals(19, DateTimeOperations.print(yesterday, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("optionalDate")).length());
    Assert.assertEquals(8, DateTimeOperations.print(System.currentTimeMillis(), _FormatTables.MAIN_FORMAT_TABLE.getFormatter("optionalDate")).length());
  }

  @Test()
  public void test_format5() throws Exception {
    Assert.assertEquals("-", DateTimeOperations.print(null, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("optionalDate")));
  }

  @Test()
  public void test_format6() throws Exception {
    Long monday = DateTimeOperations.roundFloor(System.currentTimeMillis(), DateTimeFieldType.weekOfWeekyear());
    String expected = "Monday";
    Assert.assertEquals(expected, DateTimeOperations.print(monday, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("usDayOfWeek")));
  }

  @Test()
  public void test_predefined() throws Exception {
    Assert.assertTrue(DateTimeOperations.print(System.currentTimeMillis(), DateTimeFormat.fullDateTime()) != null);
  }

  @Test()
  public void test_minutesAgo() throws Exception {
    Long dt = DateTimeOperations.minus(System.currentTimeMillis(), Period.minutes(27));
    String actual = DateTimeOperations.print(dt, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("offset"));
    if (DateTimeOperations.compare(dt, CompareType.valueOf("EQ"), System.currentTimeMillis(), DateTimeFieldType.hourOfDay()) && DateTimeOperations.equals(DateTimeOperations.minus(System.currentTimeMillis(), dt, PeriodType.minutes()), Period.minutes(27))) {
      Assert.assertEquals("27 minutes ago", actual);
    }
  }

  @Test()
  public void test_minutesAfter() throws Exception {
    Long dt = DateTimeOperations.plus(System.currentTimeMillis(), Period.minutes(27));
    String actual = DateTimeOperations.print(dt, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("offset"));
    if (DateTimeOperations.compare(dt, CompareType.valueOf("EQ"), System.currentTimeMillis(), DateTimeFieldType.hourOfDay()) && DateTimeOperations.equals(DateTimeOperations.minus(dt, System.currentTimeMillis(), PeriodType.minutes()), Period.minutes(27))) {
      Assert.assertEquals("in 27 minutes", actual);
    }
  }

  @Test()
  public void test_hoursMinutesAgo() throws Exception {
    Long dt = DateTimeOperations.minus((DateTimeOperations.minus(System.currentTimeMillis(), Period.hours(2))), Period.minutes(27));
    String actual = DateTimeOperations.print(dt, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("offset"));
    if (DateTimeOperations.compare(dt, CompareType.valueOf("EQ"), System.currentTimeMillis(), DateTimeFieldType.dayOfMonth()) && DateTimeOperations.compare((DateTimeOperations.plus((DateTimeOperations.plus(dt, Period.hours(2))), Period.minutes(27))), CompareType.valueOf("EQ"), System.currentTimeMillis(), DateTimeFieldType.minuteOfHour())) {
      Assert.assertEquals("2 hours and 27 minutes ago", actual);
    }
  }

}
