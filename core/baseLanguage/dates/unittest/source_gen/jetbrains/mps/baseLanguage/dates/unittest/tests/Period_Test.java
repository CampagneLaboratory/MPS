package jetbrains.mps.baseLanguage.dates.unittest.tests;

/*Generated by MPS */

import junit.framework.TestCase;
import org.junit.Test;
import jetbrains.mps.baseLanguage.dates.runtime.DateTimeOperations;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Period;
import junit.framework.Assert;
import jetbrains.mps.baseLanguage.dates.runtime.CompareType;

public class Period_Test extends TestCase {

  @Test()
  public void test_plus() throws Exception {
    Long firstDayOfMonth = DateTimeOperations.roundFloor(System.currentTimeMillis(), DateTimeFieldType.monthOfYear());
    Long secondDayOfMonth = DateTimeOperations.plus(firstDayOfMonth, Period.days(1));
    Assert.assertTrue(DateTimeOperations.compare(firstDayOfMonth, CompareType.valueOf("LT"), secondDayOfMonth, DateTimeFieldType.hourOfDay()));
    Assert.assertTrue(DateTimeOperations.compare(firstDayOfMonth, CompareType.valueOf("EQ"), secondDayOfMonth, DateTimeFieldType.monthOfYear()));
  }

  @Test()
  public void test_plusAndEquals() throws Exception {
    Period p = DateTimeOperations.plus(Period.days(1), DateTimeOperations.minus(Period.months(2), DateTimeOperations.plus(Period.hours(1), Period.minutes(2))));
    Assert.assertTrue(!(DateTimeOperations.equals(p, DateTimeOperations.minus(Period.months(3), Period.days(32))) || DateTimeOperations.less(p, DateTimeOperations.minus(Period.months(3), Period.days(32)))));
  }

  @Test()
  public void test_equals() throws Exception {
    Assert.assertTrue(DateTimeOperations.equals(Period.hours(24), Period.days(1)));
  }

  @Test()
  public void test_lessOrEquals() throws Exception {
    Assert.assertTrue((DateTimeOperations.equals(Period.days(28), Period.months(1)) || DateTimeOperations.less(Period.days(28), Period.months(1))));
  }

  @Test()
  public void test_greaterOrEquals() throws Exception {
    Assert.assertTrue(!(DateTimeOperations.less(Period.days(31), Period.months(1))));
  }

  @Test()
  public void test_less() throws Exception {
    Assert.assertTrue(DateTimeOperations.less(Period.days(13), Period.weeks(2)));
  }

  @Test()
  public void test_greater() throws Exception {
    Assert.assertFalse(!(DateTimeOperations.equals(Period.days(13), Period.weeks(2)) || DateTimeOperations.less(Period.days(13), Period.weeks(2))));
  }

  @Test()
  public void test_convert() throws Exception {
    Period p = DateTimeOperations.plus(Period.minutes(1), Period.seconds(15));
    Long d = DateTimeOperations.convert(p);
    Assert.assertTrue(d == (long)75000);
  }

}
