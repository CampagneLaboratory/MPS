package jetbrains.mps.baseLanguage.dates.unittest.tests;

/*Generated by MPS */

import org.junit.Test;
import org.joda.time.DateTime;
import jetbrains.mps.baseLanguage.dates.runtime.DateTimeOperations;
import org.joda.time.DateTimeFieldType;
import junit.framework.Assert;
import org.joda.time.Period;
import jetbrains.mps.baseLanguage.dates.runtime.CompareType;
import org.joda.time.format.DateTimeFormat;
import java.util.Locale;
import org.joda.time.DateTimeZone;

public class Parse_Test extends BaseTestCase {
  @Test
  public void timeFormat() throws Exception {
    DateTime dt = new DateTime();
    Long today = DateTimeOperations.roundFloor(System.currentTimeMillis(), DateTimeFieldType.dayOfMonth());
    Assert.assertEquals(DateTimeOperations.parse(DateTimeOperations.print(DateTimeOperations.convert(dt), _FormatTables.MAIN_FORMAT_TABLE.getFormatter("time"), null, null), _FormatTables.MAIN_FORMAT_TABLE.getFormatter("time"), null, null, today), DateTimeOperations.roundFloor(DateTimeOperations.convert(dt), DateTimeFieldType.secondOfMinute()));
  }

  @Test
  public void jodaDateTime() throws Exception {
    Long today = DateTimeOperations.convert(new DateTime(System.currentTimeMillis()).toLocalDate().toDateTimeAtMidnight());
    Assert.assertEquals(DateTimeOperations.parse(DateTimeOperations.print(today, _FormatTables.MAIN_FORMAT_TABLE.getFormatter("date"), null, null), _FormatTables.MAIN_FORMAT_TABLE.getFormatter("date"), null, null, null), today);
  }

  @Test
  public void usDayOfWeek() throws Exception {
    Long monday = DateTimeOperations.roundFloor(System.currentTimeMillis(), DateTimeFieldType.weekOfWeekyear());
    Long wednesday = DateTimeOperations.plus(DateTimeOperations.roundFloor(System.currentTimeMillis(), DateTimeFieldType.weekOfWeekyear()), Period.days(2));
    Assert.assertFalse(DateTimeOperations.compare(monday, CompareType.valueOf("EQ"), wednesday, DateTimeFieldType.millisOfSecond()));
    Assert.assertEquals(DateTimeOperations.parse("Monday", _FormatTables.MAIN_FORMAT_TABLE.getFormatter("usDayOfWeek"), null, null, wednesday), monday);
  }

  @Test
  public void predefined() throws Exception {
    Long instant = System.currentTimeMillis();
    String fdt = DateTimeOperations.print(instant, DateTimeFormat.fullDateTime(), null, null);
    //  the fullDateTime is not parseable (Joda apparently can't parse abbreviated time zone)
    Assert.assertNull(DateTimeOperations.parse(fdt, DateTimeFormat.fullDateTime(), null, null, null));
    String fd = DateTimeOperations.print(instant, DateTimeFormat.fullDate(), null, null);
    Assert.assertEquals(DateTimeOperations.parse(fd, DateTimeFormat.fullDate(), null, null, null), DateTimeOperations.roundFloor(instant, DateTimeFieldType.dayOfMonth()));
  }

  @Test
  public void fullDateForPeriod() throws Exception {
    Period p = Period.weeks(2);
    //  must specify the zone!
    Assert.assertEquals(DateTimeOperations.parse("Thursday, January 15, 1970", DateTimeFormat.fullDate(), Locale.US, DateTimeZone.UTC, null), DateTimeOperations.convert(p));
  }

  @Test
  public void shortDatePeriod() throws Exception {
    Period p = Period.days(10);
    Assert.assertEquals(DateTimeOperations.parse("1/11/70", DateTimeFormat.shortDate(), Locale.US, DateTimeZone.UTC, null), DateTimeOperations.convert(p));
  }

  @Test
  public void ampm() throws Exception {
    Period p = DateTimeOperations.plus(Period.hours(3), Period.minutes(33));
    Assert.assertEquals(DateTimeOperations.parse("3:33 AM", _FormatTables.MAIN_FORMAT_TABLE.getFormatter("am-pm"), null, DateTimeZone.UTC, null), DateTimeOperations.convert(p));
  }

  @Test
  public void timezone() throws Exception {
    DateTimeZone mskid = DateTimeZone.forID("Europe/Moscow");
    Assert.assertEquals(DateTimeZone.forID("Europe/Moscow"), mskid);
    Assert.assertEquals(DateTimeZone.forID("Europe/Moscow"), mskid);
    DateTimeZone mskoffset = DateTimeZone.forOffsetMillis(10800000);
    Assert.assertEquals(DateTimeZone.forOffsetMillis(10800000), mskoffset);
  }
}
