package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public abstract class TestContainerRow implements TestStatisticsRow {

  private String text;
  private String additionalText;
  private List<TestStatisticsRow> rows = ListSequence.<TestStatisticsRow>fromArray();

  public TestContainerRow(String text, String additionalText) {
    this.text = text;
    this.additionalText = additionalText;
  }

  public String getText() {
    return this.text;
  }

  public String getAdditionalText() {
    return this.additionalText;
  }

  public long getElapsedTime() {
    long elapsedTime = 0;
    for(TestStatisticsRow row : ListSequence.fromList(this.rows)) {
      long methodTime = row.getElapsedTime();
      if (methodTime >= 0) {
        elapsedTime = elapsedTime + methodTime;
      }
    }
    return elapsedTime;
  }

  public long getUsageBefore() {
    long usageBefore = -1;
    TestStatisticsRow row = ListSequence.fromList(this.rows).first();
    if (row != null) {
      long methodUsageBefore = row.getUsageBefore();
      if (methodUsageBefore >= 0) {
        usageBefore = methodUsageBefore;
      }
    }
    return usageBefore;
  }

  public long getUsageAfter() {
    long usageAfter = -1;
    TestStatisticsRow row = ListSequence.fromList(this.rows).last();
    if (row != null) {
      long methodUsageAfter = row.getUsageAfter();
      if (methodUsageAfter >= 0) {
        usageAfter = methodUsageAfter;
      }
    }
    return usageAfter;
  }

  public long getUsageDelta() {
    long usageBefore = this.getUsageBefore();
    long usageAfter = this.getUsageAfter();
    long usageDelta = -1;
    if (usageAfter >= 0 && usageBefore >= 0) {
      usageDelta = usageAfter - usageBefore;
    }
    return usageDelta;
  }

  public int getSuccessful() {
    int count = 0;
    for(TestStatisticsRow row : ListSequence.fromList(this.rows)) {
      count = count + row.getSuccessful();
    }
    return count;
  }

  public int getErrored() {
    int count = 0;
    for(TestStatisticsRow row : ListSequence.fromList(this.rows)) {
      count = count + row.getErrored();
    }
    return count;
  }

  public int getFailed() {
    int count = 0;
    for(TestStatisticsRow row : ListSequence.fromList(this.rows)) {
      count = count + row.getFailed();
    }
    return count;
  }

  public void addRow(TestStatisticsRow row) {
    ListSequence.fromList(this.rows).addElement(row);
  }

}
