package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import jetbrains.mps.smodel.SNode;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSPsiElement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class JUnitConfigFromMethod extends BaseConfigCreator<SNode> implements Cloneable {
  private RunConfiguration myConfig;

  public JUnitConfigFromMethod() {
    super(ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class), "jetbrains.mps.baseLanguage.unitTest.plugin.DefaultJUnit_Factory");
  }

  protected RunConfiguration doCreateConfiguration(SNode node) {
    this.createConfig(node);
    return this.myConfig;
  }

  private void createConfig(final SNode parameter) {
    ITestNodeWrapper wrapper = TestNodeWrapperFactory.tryToWrap(parameter);
    if (wrapper == null || wrapper.isTestCase()) {
      return;
    }
    JUnitConfigFromMethod.this.setSourceElement(new MPSPsiElement(parameter));

    {
      JUnit_ConfigurationType configType = ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class);
      DefaultJUnit_Configuration _config = new DefaultJUnit_Configuration(JUnitConfigFromMethod.this.getContext().getProject(), findFactory(configType, "jetbrains.mps.baseLanguage.unitTest.plugin.DefaultJUnit_Factory"), "NewConfig");
      _config.setName(SPropertyOperations.getString(parameter, "name"));
      _config.getStateObject().type = JUnitRunTypes.METHOD;
      _config.getStateObject().testMethods = new ClonableList<String>(TestUtils.pointerToString(new SNodePointer(parameter)));
      JUnitConfigFromMethod.this.myConfig = _config;
    }
  }

  @Override
  public JUnitConfigFromMethod clone() {
    return ((JUnitConfigFromMethod) super.clone());
  }

  protected boolean isApplicable(final Object element) {
    return element instanceof SNode && SNodeOperations.isInstanceOf(((SNode) element), "jetbrains.mps.lang.core.structure.INamedConcept");
  }
}
