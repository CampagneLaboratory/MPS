package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTree;
import jetbrains.mps.smodel.IOperationContext;
import java.util.Map;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import java.util.LinkedHashMap;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.ide.ui.TextTreeNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class TestTree extends MPSTree {

  private IOperationContext operationContext;
  private Map<SNode, List<SNode>> tests;
  private TestNameMap<TestCaseTreeNode, TestMethodTreeNode> map;

  public TestTree() {
    this.tests = new LinkedHashMap<SNode, List<SNode>>();
    this.map = new TestNameMap<TestCaseTreeNode, TestMethodTreeNode>();
    this.rebuildLater();
  }

  public MPSTreeNode rebuild() {
    MPSTreeNode root = new TextTreeNode("Tests");
    this.map.clear();
    for(SNode testCase : Sequence.fromIterable(MapSequence.fromMap(this.tests).keySet())) {
      TestCaseTreeNode testCaseTreeNode = new TestCaseTreeNode(this.operationContext, testCase);
      root.add(testCaseTreeNode);
      this.map.put(testCase, testCaseTreeNode);
      for(SNode method : ListSequence.fromList(MapSequence.fromMap(this.tests).get(testCase))) {
        TestMethodTreeNode testMethodTreeNode = new TestMethodTreeNode(this.operationContext, method);
        testCaseTreeNode.add(testMethodTreeNode);
        this.map.put(testCase, method, testMethodTreeNode);
      }
    }
    return root;
  }

  public void setTests(IOperationContext operationContext, Map<SNode, List<SNode>> tests) {
    this.operationContext = operationContext;
    this.tests = tests;
    this.rebuildNow();
  }

  public TestCaseTreeNode get(String className) {
    return this.map.get(className);
  }

  public TestMethodTreeNode get(String className, String methodName) {
    return this.map.get(className, methodName);
  }

}
