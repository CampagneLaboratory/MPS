package jetbrains.mps.baseLanguage.unitTest.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.ClassifierType;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AssertThrows extends Statement implements MessageHolder {
  public static final String concept = "jetbrains.mps.baseLanguage.unitTest.structure.AssertThrows";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String STATEMENT = "statement";
  public static final String EXCEPTION_TYPE = "exceptionType";
  public static final String MESSAGE = "message";
  public static final String _$ATTRIBUTE = "_$attribute";

  public AssertThrows(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(AssertThrows.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(AssertThrows.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(AssertThrows.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(AssertThrows.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(AssertThrows.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(AssertThrows.VIRTUAL_PACKAGE, value);
  }

  public Statement getStatement() {
    return (Statement) this.getChild(Statement.class, AssertThrows.STATEMENT);
  }

  public void setStatement(Statement node) {
    super.setChild(AssertThrows.STATEMENT, node);
  }

  public ClassifierType getExceptionType() {
    return (ClassifierType) this.getChild(ClassifierType.class, AssertThrows.EXCEPTION_TYPE);
  }

  public void setExceptionType(ClassifierType node) {
    super.setChild(AssertThrows.EXCEPTION_TYPE, node);
  }

  public Message getMessage() {
    return (Message) this.getChild(Message.class, AssertThrows.MESSAGE);
  }

  public void setMessage(Message node) {
    super.setChild(AssertThrows.MESSAGE, node);
  }

  public int get_$attributesCount() {
    return this.getChildCount(AssertThrows._$ATTRIBUTE);
  }

  public Iterator<Attribute> _$attributes() {
    return this.children(Attribute.class, AssertThrows._$ATTRIBUTE);
  }

  public List<Attribute> get_$attributes() {
    return this.getChildren(Attribute.class, AssertThrows._$ATTRIBUTE);
  }

  public void add_$attribute(Attribute node) {
    this.addChild(AssertThrows._$ATTRIBUTE, node);
  }

  public void insert_$attribute(Attribute prev, Attribute node) {
    this.insertChild(prev, AssertThrows._$ATTRIBUTE, node);
  }

  public static AssertThrows newInstance(SModel sm, boolean init) {
    return (AssertThrows) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.unitTest.structure.AssertThrows", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AssertThrows newInstance(SModel sm) {
    return AssertThrows.newInstance(sm, false);
  }
}
