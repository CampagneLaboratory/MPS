package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.execution.api.configurations.BaseMpsRunConfiguration;
import jetbrains.mps.execution.api.settings.IPersistentConfiguration;
import jetbrains.mps.logging.Logger;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.execution.lib.JavaRunParameters_Configuration;
import com.intellij.openapi.project.Project;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;
import java.util.List;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.configurations.RunProfileState;
import com.intellij.execution.Executor;
import com.intellij.execution.runners.ExecutionEnvironment;
import com.intellij.execution.ExecutionException;
import com.intellij.openapi.options.SettingsEditor;
import com.intellij.openapi.util.JDOMExternalizable;
import com.intellij.execution.runners.ProgramRunner;
import com.intellij.execution.configurations.ConfigurationInfoProvider;
import jetbrains.mps.execution.api.settings.SettingsEditorEx;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class JUnitTests_Configuration extends BaseMpsRunConfiguration implements IPersistentConfiguration {
  private static final Logger LOG = Logger.getLogger(JUnitTests_Configuration.class);

  @NotNull
  private JUnitTests_Configuration.MyState myState = new JUnitTests_Configuration.MyState();
  private JavaRunParameters_Configuration myJavaRunParameters = new JavaRunParameters_Configuration();

  public JUnitTests_Configuration(Project project, JUnitTests_Configuration_Factory factory, String name) {
    super(project, factory, name);
  }

  public void checkConfiguration() throws RuntimeConfigurationException {
  }

  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    element.addContent(XmlSerializer.serialize(myState));
    {
      Element fieldElement = new Element("myJavaRunParameters");
      myJavaRunParameters.writeExternal(fieldElement);
      element.addContent(fieldElement);
    }
  }

  @Override
  public void readExternal(Element element) throws InvalidDataException {
    XmlSerializer.deserializeInto(myState, (Element) element.getChildren().get(0));
    {
      Element fieldElement = element.getChild("myJavaRunParameters");
      myJavaRunParameters.readExternal(fieldElement);
    }
  }

  public String getModel() {
    return myState.myModel;
  }

  public String getModule() {
    return myState.myModule;
  }

  public ClonableList<String> getTestCases() {
    return myState.myTestCases;
  }

  public ClonableList<String> getTestMethods() {
    return myState.myTestMethods;
  }

  public JUnitRunTypes getRunType() {
    return myState.myRunType;
  }

  public JavaRunParameters_Configuration getJavaRunParameters() {
    return myJavaRunParameters;
  }

  public void setModel(String value) {
    myState.myModel = value;
  }

  public void setModule(String value) {
    myState.myModule = value;
  }

  public void setTestCases(ClonableList<String> value) {
    myState.myTestCases = value;
  }

  public void setTestMethods(ClonableList<String> value) {
    myState.myTestMethods = value;
  }

  public void setRunType(JUnitRunTypes value) {
    myState.myRunType = value;
  }

  public List<ITestNodeWrapper> getTests() {
    return null;
  }

  @Override
  public JUnitTests_Configuration clone() {
    JUnitTests_Configuration clone = null;
    try {
      clone = createCloneTemplate();
      clone.myState = (JUnitTests_Configuration.MyState) myState.clone();
      clone.myJavaRunParameters = (JavaRunParameters_Configuration) myJavaRunParameters.clone();
      return clone;
    } catch (CloneNotSupportedException ex) {
      JUnitTests_Configuration.LOG.error(ex);
    }
    return clone;
  }

  @Nullable
  public RunProfileState getState(@NotNull Executor executor, @NotNull ExecutionEnvironment environment) throws ExecutionException {
    return new JUnitTests_Configuration_RunProfileState(this, executor, environment);
  }

  @Nullable
  public SettingsEditor<JDOMExternalizable> getRunnerSettingsEditor(ProgramRunner runner) {
    return null;
  }

  public JDOMExternalizable createRunnerSettings(ConfigurationInfoProvider provider) {
    return null;
  }

  public SettingsEditorEx<JUnitTests_Configuration> getConfigurationEditor() {
    return (SettingsEditorEx<JUnitTests_Configuration>) getEditor();
  }

  public JUnitTests_Configuration createCloneTemplate() {
    return (JUnitTests_Configuration) super.clone();
  }

  public SettingsEditorEx<? extends IPersistentConfiguration> getEditor() {
    return new JUnitTests_Configuration_Editor(myJavaRunParameters.getEditor());
  }

  @Override
  public boolean canExecute(String executorId) {
    return JUnitTests_Configuration_RunProfileState.canExecute(executorId);
  }

  public Object[] createMakeTask() {
    return new Object[]{ListSequence.fromList(this.getTests()).<SNode>select(new ISelector<ITestNodeWrapper, SNode>() {
      public SNode select(ITestNodeWrapper it) {
        return it.getNode();
      }
    }).toListSequence()};
  }

  public class MyState {
    public String myModel;
    public String myModule;
    public ClonableList<String> myTestCases = new ClonableList<String>();
    public ClonableList<String> myTestMethods = new ClonableList<String>();
    public JUnitRunTypes myRunType;

    public MyState() {
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
      JUnitTests_Configuration.MyState state = new JUnitTests_Configuration.MyState();
      state.myModel = myModel;
      state.myModule = myModule;
      if (myTestCases != null) {
        state.myTestCases = myTestCases.clone();
      }
      if (myTestMethods != null) {
        state.myTestMethods = myTestMethods.clone();
      }
      state.myRunType = myRunType;
      return state;
    }
  }
}
