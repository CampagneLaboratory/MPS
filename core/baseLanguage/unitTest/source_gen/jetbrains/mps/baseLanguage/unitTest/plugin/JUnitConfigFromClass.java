package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import jetbrains.mps.smodel.SNode;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSPsiElement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;

public class JUnitConfigFromClass extends BaseConfigCreator<SNode> implements Cloneable {
  private RunConfiguration myConfig;

  public JUnitConfigFromClass() {
    super(ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class), "DefaultJUnit_Factory");
  }

  protected RunConfiguration doCreateConfiguration(SNode node) {
    this.createConfig(node);
    return this.myConfig;
  }

  private void createConfig(final SNode parameter) {
    SNode testNode = SNodeOperations.cast(SNodeOperations.getAncestorWhereConceptInList(parameter, Sequence.fromIterable(TestNodeWrapperFactory.getWrappedRootConcepts()).<String>select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return INamedConcept_Behavior.call_getFqName_1213877404258(it);
      }
    }).toGenericArray(String.class), true, true), "jetbrains.mps.lang.core.structure.INamedConcept");
    if (testNode == null) {
      return;
    }

    ITestNodeWrapper wrapper = TestNodeWrapperFactory.tryToWrap(testNode);
    if (wrapper == null || Sequence.fromIterable(wrapper.getTestMethods()).isEmpty()) {
      return;
    }

    JUnitConfigFromClass.this.setSourceElement(new MPSPsiElement(testNode));

    {
      JUnit_ConfigurationType configType = ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class);
      DefaultJUnit_Configuration _config = new DefaultJUnit_Configuration(JUnitConfigFromClass.this.getContext().getProject(), findFactory(configType, "DefaultJUnit"), "NewConfig");
      _config.setName(SPropertyOperations.getString(testNode, "name"));
      _config.getStateObject().type = JUnitRunTypes.NODE;
      _config.getStateObject().testCases = new ClonableList<String>(TestUtils.pointerToString(new SNodePointer(testNode)));
      JUnitConfigFromClass.this.myConfig = _config;
    }
  }

  @Override
  public JUnitConfigFromClass clone() {
    return ((JUnitConfigFromClass) super.clone());
  }

  protected boolean isApplicable(final Object element) {
    return element instanceof SNode && SNodeOperations.isInstanceOf(((SNode) element), "jetbrains.mps.lang.core.structure.BaseConcept");
  }
}
