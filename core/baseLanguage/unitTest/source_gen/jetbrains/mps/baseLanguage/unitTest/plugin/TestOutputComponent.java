package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import javax.swing.JComponent;
import com.intellij.execution.impl.ConsoleViewImpl;
import java.util.List;
import com.intellij.openapi.project.Project;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import javax.swing.SwingUtilities;
import org.apache.commons.lang.ObjectUtils;
import jetbrains.mps.debug.StacktraceUtil;
import com.intellij.execution.ui.ConsoleViewContentType;
import com.intellij.openapi.util.Disposer;

public class TestOutputComponent implements TestView {
  private JComponent component;
  private ConsoleViewImpl consoleView;
  private List<TestOutputComponent.Message> messages;
  private String filterClass;
  private String filterMethod;
  private TestRunState state;

  public TestOutputComponent(Project project, JComponent parentComponent, ConsoleViewImpl console, TestRunState state) {
    this.messages = ListSequence.fromList(new ArrayList<TestOutputComponent.Message>());
    this.consoleView = console;
    this.component = this.consoleView.getComponent();
    this.state = state;
  }

  public void update() {
    final String test = this.state.getLoseClass();
    final String method = this.state.getLoseMethod();
    if (test != null && method != null) {
      SwingUtilities.invokeLater(new Runnable() {
        public void run() {
          TestOutputComponent.this.appendWithParameters(test, method, "\nError: couldn't find method '" + method + "' in '" + test + "'\n\n", true, false);
        }
      });
    }
  }

  public JComponent getComponent() {
    return this.component;
  }

  public String getCurrentClassName() {
    return this.state.getCurrentClass();
  }

  public String getCurrentMethodName() {
    return this.state.getCurrentMethod();
  }

  public void filter(String filterClass, String filterMethod) {
    if (!(ObjectUtils.equals(filterClass, this.filterClass)) || !(ObjectUtils.equals(filterMethod, this.filterMethod))) {
      this.filterClass = filterClass;
      this.filterMethod = filterMethod;
      this.consoleView.clear();
      for (TestOutputComponent.Message message : ListSequence.fromList(this.messages)) {
        this.append(message);
      }
    }
  }

  public void appendWithParameters(String testClass, String testMethod, String text, boolean isError, boolean isSystem) {
    TestOutputComponent.Message newMessage = new TestOutputComponent.Message(testClass, testMethod, text, isError, isSystem);
    ListSequence.fromList(this.messages).addElement(newMessage);
    this.append(newMessage);
  }

  public void append(String message, boolean error, boolean internal) {
    TestOutputComponent.Message newMessage = new TestOutputComponent.Message(this.getCurrentClassName(), this.getCurrentMethodName(), message, error, internal);
    ListSequence.fromList(this.messages).addElement(newMessage);
    this.append(newMessage);
  }

  public void clear() {
    this.messages = ListSequence.fromList(new ArrayList<TestOutputComponent.Message>());
    this.consoleView.clear();
  }

  private void append(TestOutputComponent.Message message) {
    if (message.matches(this.filterClass, this.filterMethod)) {
      if (message.isError()) {
        StacktraceUtil.appendStacktraceToConsole(this.consoleView, message.getMessage(), ConsoleViewContentType.ERROR_OUTPUT);
      } else if (message.isInternal()) {
        this.consoleView.print(message.getMessage(), ConsoleViewContentType.SYSTEM_OUTPUT);
      } else {
        this.consoleView.print(message.getMessage(), ConsoleViewContentType.NORMAL_OUTPUT);
      }
    }
  }

  public void dispose() {
    Disposer.dispose(this.consoleView);
  }

  public ConsoleViewImpl getConsole() {
    return this.consoleView;
  }

  private static class Message {
    private String testClass;
    private String testMethod;
    private String message;
    private boolean error;
    private boolean internal;

    public Message(String testClass, String testMethod, String message, boolean error, boolean internal) {
      this.testClass = testClass;
      this.testMethod = testMethod;
      this.message = message;
      this.error = error;
      this.internal = internal;
    }

    public boolean matches(String testClass, String testMethod) {
      return testClass == null || (testClass.equals(this.testClass) && (testMethod == null || testMethod.equals(this.testMethod)));
    }

    public String getMessage() {
      return this.message;
    }

    public boolean isError() {
      return this.error;
    }

    public boolean isInternal() {
      return this.internal;
    }
  }
}
