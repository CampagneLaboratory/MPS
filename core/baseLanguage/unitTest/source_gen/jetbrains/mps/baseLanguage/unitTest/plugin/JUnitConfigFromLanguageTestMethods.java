package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import java.util.List;
import jetbrains.mps.logging.Logger;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSPsiElement;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestMethod_Behavior;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.configurations.ConfigurationFactory;

public class JUnitConfigFromLanguageTestMethods extends BaseConfigCreator<List> implements Cloneable {
  private static final Logger LOG = Logger.getLogger(JUnitConfigFromLanguageTestMethods.class);

  private RunConfiguration myConfig;

  public JUnitConfigFromLanguageTestMethods() {
    super(findFactoryImpl(ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class), "DefaultJUnit"));
  }

  protected RunConfiguration doCreateConfiguration(List node) {
    this.createConfig(node);
    return this.myConfig;
  }

  private void createConfig(final List<SNode> parameter) {
    JUnitConfigFromLanguageTestMethods.this.setSourceElement(new MPSPsiElement(parameter));

    {
      JUnit_ConfigurationType configType = ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class);
      DefaultJUnit_Configuration _config = new DefaultJUnit_Configuration(JUnitConfigFromLanguageTestMethods.this.getContext().getProject(), findFactory(configType, "DefaultJUnit"), "NewConfig") {
        @Override
        public String suggestedName() {
          return "Several Test Methods";
        }
      };
      _config.setName(ITestMethod_Behavior.call_getTestName_1216136419751(Sequence.fromIterable(parameter).first()) + ",...");
      _config.getStateObject().type = JUnitRunTypes.METHOD;
      _config.getStateObject().testMethods = new ClonableList(Sequence.fromIterable(parameter).<String>select(new ISelector<SNode, String>() {
        public String select(SNode it) {
          return TestUtils.pointerToString(new SNodePointer(it));
        }
      }).toListSequence());
      JUnitConfigFromLanguageTestMethods.this.myConfig = _config;
    }
  }

  @Override
  public JUnitConfigFromLanguageTestMethods clone() {
    return ((JUnitConfigFromLanguageTestMethods) super.clone());
  }

  protected boolean isApplicable(final Object element) {
    if (!(element instanceof List)) {
      return false;
    }
    for (Object obj : (List) element) {
      if (!(obj instanceof SNode && SNodeOperations.isInstanceOf(((SNode) obj), "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod"))) {
        return false;
      }
    }
    return true;
  }

  @NotNull
  private ConfigurationFactory findFactory(ConfigurationType configurationType, String configurationName) {
    return findFactoryImpl(configurationType, configurationName);
  }

  @NotNull
  private static ConfigurationFactory findFactoryImpl(ConfigurationType configurationType, String configurationName) {
    for (ConfigurationFactory factory : Sequence.fromIterable(Sequence.fromArray(configurationType.getConfigurationFactories()))) {
      if (factory.getClass().getName().contains(configurationName)) {
        return factory;
      }
    }
    LOG.warning("Cound not find configuration factory for " + configurationName + " in type " + configurationType.getDisplayName() + ".");
    return configurationType.getConfigurationFactories()[0];
  }
}
