package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.Nls;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.project.MPSProject;

public class TestUtils {
  public static final String SEPARATOR = "#";

  public TestUtils() {
  }

  @Nullable
  public static ITestNodeWrapper getTestMethod(@Nls String caseName, @Nls final String methodName) {
    if (StringUtils.isEmpty(caseName) || StringUtils.isEmpty(methodName)) {
      return null;
    }
    ITestNodeWrapper caseNodeWrapper = getTestCase(caseName);
    if (caseNodeWrapper == null) {
      return null;
    }
    Iterable<ITestNodeWrapper> methods = caseNodeWrapper.getTestMethods();
    return Sequence.fromIterable(methods).findFirst(new IWhereFilter<ITestNodeWrapper>() {
      public boolean accept(ITestNodeWrapper it) {
        return it.getName().equals(methodName);
      }
    });
  }

  @Nullable
  public static ITestNodeWrapper getTestMethod(@Nls String fullMethodName) {
    if (StringUtils.isEmpty(fullMethodName)) {
      return null;
    }
    int separatorIndex = fullMethodName.lastIndexOf(SEPARATOR);
    if (separatorIndex < 0) {
      return null;
    }
    return TestUtils.getTestMethod(fullMethodName.substring(0, separatorIndex), fullMethodName.substring(separatorIndex + 1));
  }

  @Nullable
  public static ITestNodeWrapper getTestCase(@Nls String nodeName) {
    if (nodeName == null) {
      return null;
    }
    SNode node = SModelUtil.findNodeByFQName(nodeName, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept"), GlobalScope.getInstance());
    if (node == null) {
      return null;
    }
    return TestNodeWrapperFactory.tryToWrap(node);
  }

  @Nullable
  public static SModel getModel(@Nls String modelName) {
    if (StringUtils.isEmpty(modelName)) {
      return null;
    }
    SModelDescriptor modelDescriptor = GlobalScope.getInstance().getModelDescriptor(SModelReference.fromString(modelName));
    if (modelDescriptor == null) {
      return null;
    }
    return modelDescriptor.getSModel();
  }

  @Nullable
  public static IModule getModule(@Nls String moduleName) {
    if (StringUtils.isEmpty(moduleName)) {
      return null;
    }
    return MPSModuleRepository.getInstance().getModuleByUID(moduleName);
  }

  public static Iterable<ITestNodeWrapper> getModelTests(@NotNull SModel model) {
    return ListSequence.fromList(SModelOperations.getRoots(model, null)).select(new ISelector<SNode, ITestNodeWrapper>() {
      public ITestNodeWrapper select(SNode it) {
        return TestNodeWrapperFactory.tryToWrap(it);
      }
    }).where(new IWhereFilter<ITestNodeWrapper>() {
      public boolean accept(ITestNodeWrapper it) {
        return it != null;
      }
    });
  }

  public static Iterable<ITestNodeWrapper> getModuleTests(@NotNull final IModule module) {
    return Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModelDescriptor>() {
      public Iterable<SModelDescriptor> iterable() {
        return module.getOwnModelDescriptors();
      }
    })).translate(new ITranslator2<SModelDescriptor, ITestNodeWrapper>() {
      public Iterable<ITestNodeWrapper> translate(SModelDescriptor model) {
        return TestUtils.getModelTests(model.getSModel());
      }
    });
  }

  public static Iterable<ITestNodeWrapper> getProjectTests(@NotNull final MPSProject project) {
    return Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<IModule>() {
      public Iterable<IModule> iterable() {
        return project.getModules();
      }
    })).translate(new ITranslator2<IModule, ITestNodeWrapper>() {
      public Iterable<ITestNodeWrapper> translate(IModule module) {
        return TestUtils.getModuleTests(module);
      }
    });
  }
}
