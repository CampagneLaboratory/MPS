package jetbrains.mps.baseLanguage.unitTest.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AssertTrue extends Statement implements MessageHolder {
  public static final String concept = "jetbrains.mps.baseLanguage.unitTest.structure.AssertTrue";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String CONDITION = "condition";
  public static final String MESSAGE = "message";

  public AssertTrue(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(AssertTrue.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(AssertTrue.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(AssertTrue.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(AssertTrue.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(AssertTrue.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(AssertTrue.VIRTUAL_PACKAGE, value);
  }

  public Expression getCondition() {
    return (Expression) this.getChild(Expression.class, AssertTrue.CONDITION);
  }

  public void setCondition(Expression node) {
    super.setChild(AssertTrue.CONDITION, node);
  }

  public Message getMessage() {
    return (Message) this.getChild(Message.class, AssertTrue.MESSAGE);
  }

  public void setMessage(Message node) {
    super.setChild(AssertTrue.MESSAGE, node);
  }

  public static AssertTrue newInstance(SModel sm, boolean init) {
    return (AssertTrue) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.unitTest.structure.AssertTrue", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AssertTrue newInstance(SModel sm) {
    return AssertTrue.newInstance(sm, false);
  }
}
