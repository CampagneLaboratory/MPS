package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.plugin.BaseChooserComponent;
import java.util.List;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.workbench.dialogs.choosers.CommonChoosers;
import java.util.Collections;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelStereotype;

public class ModuleChooserComponent extends BaseChooserComponent {
  private List<IModule> checkedModules = ListSequence.fromList(new ArrayList<IModule>());

  public ModuleChooserComponent() {
    super();
    this.init(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        ModuleChooserComponent.this.collectModules();
        StringBuilder result = new StringBuilder();
        IModule module = CommonChoosers.showDialogModuleChooser(ModuleChooserComponent.this, "", ModuleChooserComponent.this.checkedModules, Collections.EMPTY_LIST);
        if (module != null) {
          result.append(module.getModuleFqName());
          ModuleChooserComponent.this.setText(result.toString());
        }
      }
    });
  }

  private void collectModules() {
    final List<IModule> modules = ListSequence.fromList(new ArrayList<IModule>());
    ListSequence.fromList(this.checkedModules).clear();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ListSequence.fromList(modules).addSequence(SetSequence.fromSet(GlobalScope.getInstance().getVisibleModules()));
        for (IModule module : modules) {
          for (SModelDescriptor descriptor : module.getOwnModelDescriptors()) {
            if (SModelStereotype.isStubModelStereotype(descriptor.getStereotype())) {
              continue;
            }
            if (ListSequence.fromList(TestRunUtil.getModelTests(descriptor.getSModel())).isNotEmpty()) {
              ListSequence.fromList(ModuleChooserComponent.this.checkedModules).addElement(module);
              break;
            }
          }
        }
      }
    });
  }
}
