package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import java.awt.event.ActionListener;
import java.util.List;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SModel;
import java.awt.event.ActionEvent;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.workbench.dialogs.choosers.CommonChoosers;

public class ModuleChooserComponent extends BaseChooserComponent {
  public ModuleChooserComponent() {
    super();
    this.init(new ActionListener() {
      private List<IModule> check(final List<IModule> modules) {
        final List<IModule> result = ListSequence.fromList(new ArrayList<IModule>());
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            for (IModule module : modules) {
              for (SModelDescriptor descriptor : module.getOwnModelDescriptors()) {
                if (ListSequence.fromList(SModelOperations.getRoots(((SModel)descriptor.getSModel()), "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase")).isNotEmpty()) {
                  ListSequence.fromList(result).addElement(module);
                }
              }
            }
          }
        });
        return result;
      }

      public void actionPerformed(ActionEvent p0) {
        final MPSProject project = ModuleChooserComponent.this.getProject();
        StringBuilder result = new StringBuilder();
        final List<IModule> modules = this.check(project.getModules());
        final List<IModule> otherModules = ListSequence.fromList(new ArrayList<IModule>());
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            ListSequence.fromList(otherModules).addSequence(SetSequence.fromSet(GlobalScope.getInstance().getVisibleModules()));
          }
        });
        IModule module = CommonChoosers.showDialogModuleChooser(ModuleChooserComponent.this, "", modules, otherModules);
        if (module != null) {
          result.append(module.getModuleFqName());
          ModuleChooserComponent.this.setText(result.toString());
        }
      }
    });
  }
}
