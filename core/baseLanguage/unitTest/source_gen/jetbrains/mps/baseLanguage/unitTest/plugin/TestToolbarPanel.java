package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import javax.swing.JPanel;
import java.awt.BorderLayout;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import javax.swing.SwingConstants;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.ToggleAction;
import com.intellij.execution.testframework.TestsUIUtil;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.ide.findusages.view.icons.Icons;
import jetbrains.mps.ide.ui.MPSTreeNode;

public class TestToolbarPanel extends JPanel {
  private TestTree tree;
  private TestOccurenceNavigator navigator;

  public TestToolbarPanel(TestTree tree, TestOccurenceNavigator navigator) {
    this.tree = tree;
    this.navigator = navigator;
    this.init();
  }

  private void init() {
    this.setLayout(new BorderLayout());
    final DefaultActionGroup actionGroup = new DefaultActionGroup();
    actionGroup.addAction(this.createHidePassedAction());
    actionGroup.addAction(this.createCollapseAllAction());
    actionGroup.addAction(this.createExpandAllAction());
    actionGroup.addAction(this.createNextOccurrenceAction());
    actionGroup.addAction(this.createPreviousOccurrenceAction());
    ActionToolbar toolbarActions = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, actionGroup, false);
    toolbarActions.setOrientation(SwingConstants.HORIZONTAL);
    this.add(toolbarActions.getComponent(), BorderLayout.LINE_START);
  }

  private AnAction createHidePassedAction() {
    return new ToggleAction("Hide Passed", "Hide passed tests", TestsUIUtil.loadIcon("hidePassed")) {
      private boolean hidden;

      public boolean isSelected(AnActionEvent p0) {
        return this.hidden;
      }

      public void setSelected(AnActionEvent p0, boolean p1) {
        this.hidden = p1;
      }
    };
  }

  private AnAction createCollapseAllAction() {
    return new AnAction("Collapse All", "Collapse all test suites", Icons.COLLAPSE_ICON) {
      public void actionPerformed(AnActionEvent p0) {
        MPSTreeNode root = TestToolbarPanel.this.tree.getRootNode();
        MPSTreeNode child = (MPSTreeNode)root.getFirstChild();
        while (child != null) {
          TestToolbarPanel.this.tree.collapseAll(child);
          child = (MPSTreeNode)child.getNextSibling();
        }
      }
    };
  }

  private AnAction createExpandAllAction() {
    return new AnAction("Expand All", "Expande all test suites", Icons.EXPAND_ICON) {
      public void actionPerformed(AnActionEvent p0) {
        TestToolbarPanel.this.tree.expandAll();
      }
    };
  }

  private AnAction createNextOccurrenceAction() {
    return new AnAction("Next Failed Test", "Navigate to the next occurrence", Icons.NEXT_ICON) {
      public void actionPerformed(AnActionEvent p0) {
        if (TestToolbarPanel.this.navigator.hasNextOccurence()) {
          TestToolbarPanel.this.navigator.goNextOccurence();
        }
      }
    };
  }

  private AnAction createPreviousOccurrenceAction() {
    return new AnAction("Previous Failed Test", "Navigate to the previous occurrence", Icons.PREVIOUS_ICON) {
      public void actionPerformed(AnActionEvent p0) {
        if (TestToolbarPanel.this.navigator.hasPreviousOccurence()) {
          TestToolbarPanel.this.navigator.goPreviousOccurence();
        }
      }
    };
  }
}
