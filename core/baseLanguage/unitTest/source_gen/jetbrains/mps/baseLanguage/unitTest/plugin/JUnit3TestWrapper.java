package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.baseLanguage.search.ClassifierAndSuperClassifiersScope;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import jetbrains.mps.smodel.search.IsInstanceCondition;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class JUnit3TestWrapper extends AbstractTestWrapper<SNode> {
  public JUnit3TestWrapper(SNode classConcept) {
    super(classConcept);
  }

  public boolean isTestCase() {
    return true;
  }

  @NonNls
  @Override
  public String getFqName() {
    return INamedConcept_Behavior.call_getFqName_1213877404258(myNode);
  }

  @NotNull
  @Override
  public Iterable<ITestNodeWrapper> getTestMethods() {
    List<SNode> methodDeclarations = (List<SNode>) new ClassifierAndSuperClassifiersScope(myNode, IClassifiersSearchScope.INSTANCE_METHOD).getNodes(new IsInstanceCondition("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
    return ListSequence.fromList(methodDeclarations).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return JUnit3MethodWrapper.isTestMethod(it);
      }
    }).select(new ISelector<SNode, ITestNodeWrapper>() {
      public ITestNodeWrapper select(SNode it) {
        return TestNodeWrapperFactory.tryToWrap(it);
      }
    }).where(new IWhereFilter<ITestNodeWrapper>() {
      public boolean accept(ITestNodeWrapper it) {
        return it != null;
      }
    });
  }
}
