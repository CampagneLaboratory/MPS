package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import jetbrains.mps.project.IModule;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSPsiElement;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.configurations.ConfigurationFactory;

public class JUnitConfigFromModule extends BaseConfigCreator<IModule> implements Cloneable {
  private RunConfiguration myConfig;

  public JUnitConfigFromModule() {
    super(ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class));
  }

  protected RunConfiguration doCreateConfiguration(IModule node) {
    this.createConfig(node);
    return this.myConfig;
  }

  private void createConfig(final IModule parameter) {
    if (Sequence.fromIterable(TestRunUtil.getModuleTests(parameter.getModuleFqName())).isEmpty()) {
      return;
    }
    final String name = parameter.getModuleFqName();
    JUnitConfigFromModule.this.setSourceElement(new MPSPsiElement(parameter));
    {
      JUnit_ConfigurationType configType = ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class);
      DefaultJUnit_Configuration _config = new DefaultJUnit_Configuration(JUnitConfigFromModule.this.getContext().getProject(), findFactory(configType, "DefaultJUnit"), "NewConfig") {
        @Override
        public String suggestedName() {
          return "Tests in '" + name + "'";
        }
      };
      _config.setName(name);
      _config.getStateObject().type = JUnitRunTypes.MODULE;
      _config.getStateObject().module = parameter.getModuleFqName();
      JUnitConfigFromModule.this.myConfig = _config;
    }
  }

  @Override
  public JUnitConfigFromModule clone() {
    return ((JUnitConfigFromModule) super.clone());
  }

  protected boolean isApplicable(final Object element) {
    return element instanceof IModule;
  }

  @Nullable
  public ConfigurationFactory findFactory(ConfigurationType configurationType, String configurationName) {
    for (ConfigurationFactory factory : Sequence.fromIterable(Sequence.fromArray(configurationType.getConfigurationFactories()))) {
      if (factory.getClass().getName().contains(configurationName)) {
        return factory;
      }
    }
    return null;
  }
}
