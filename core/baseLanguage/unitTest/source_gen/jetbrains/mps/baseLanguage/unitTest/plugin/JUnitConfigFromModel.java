package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import jetbrains.mps.smodel.SModel;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSPsiElement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class JUnitConfigFromModel extends BaseConfigCreator<SModel> implements Cloneable {
  private RunConfiguration myConfig;

  public JUnitConfigFromModel() {
    super(ContainerUtil.findInstance(Extensions.getExtensions(JUnit_ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class));
  }

  protected RunConfiguration doCreateConfiguration(SModel node) {
    this.createConfig(node);
    return this.myConfig;
  }

  private void createConfig(SModel model) {
    if (ListSequence.fromList(TestRunUtil.getModelTests(model)).isEmpty()) {
      return;
    }

    JUnitConfigFromModel.this.setSourceElement(new MPSPsiElement<SModel>(model) {    });

    {
      JUnit_ConfigurationType configType = ContainerUtil.findInstance(Extensions.getExtensions(JUnit_ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class);
      DefaultJUnit_Configuration _config = new DefaultJUnit_Configuration(JUnitConfigFromModel.this.getContext().getProject(), configType.getConfigurationFactories()[0], "NewConfig");
      _config.setName(SModelOperations.getModelName(model));
      _config.getStateObject().type = JUnitRunTypes.MODEL;
      _config.getStateObject().model = model.getLongName();
      JUnitConfigFromModel.this.myConfig = _config;
    }
  }

  @Override
  public JUnitConfigFromModel clone() {
    return ((JUnitConfigFromModel)super.clone());
  }
}
