package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import jetbrains.mps.smodel.SModel;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSPsiElement;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.configurations.ConfigurationFactory;
import com.intellij.execution.configurations.ConfigurationType;

public class JUnitConfigFromModel extends BaseConfigCreator<SModel> implements Cloneable {
  private RunConfiguration myConfig;

  public JUnitConfigFromModel() {
    super(ContainerUtil.findInstance(Extensions.getExtensions(JUnit_ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class));
  }

  protected RunConfiguration doCreateConfiguration(SModel node) {
    this.createConfig(node);
    return this.myConfig;
  }

  private void createConfig(final SModel parameter) {
    if (Sequence.fromIterable(TestRunUtil.getModelTests(parameter)).isEmpty()) {
      return;
    }
    final String name = SModelOperations.getModelName(parameter);
    JUnitConfigFromModel.this.setSourceElement(new MPSPsiElement(parameter));
    {
      JUnit_ConfigurationType configType = ContainerUtil.findInstance(Extensions.getExtensions(JUnit_ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class);
      DefaultJUnit_Configuration _config = new DefaultJUnit_Configuration(JUnitConfigFromModel.this.getContext().getProject(), findFactory(configType, "DefaultJUnit"), "NewConfig") {
        @Override
        public String suggestedName() {
          return "Tests in '" + name + "'";
        }
      };
      _config.setName(name);
      _config.getStateObject().type = JUnitRunTypes.MODEL;
      _config.getStateObject().model = parameter.getSModelFqName().toString();
      JUnitConfigFromModel.this.myConfig = _config;
    }
  }

  @Override
  public JUnitConfigFromModel clone() {
    return ((JUnitConfigFromModel) super.clone());
  }

  protected boolean isApplicable(final Object element) {
    return element instanceof SModel;
  }

  @Nullable
  public ConfigurationFactory findFactory(ConfigurationType configurationType, String configurationName) {
    for (ConfigurationFactory factory : Sequence.fromIterable(Sequence.fromArray(configurationType.getConfigurationFactories()))) {
      if (factory.getClass().getName().contains(configurationName)) {
        return factory;
      }
    }
    return null;
  }
}
