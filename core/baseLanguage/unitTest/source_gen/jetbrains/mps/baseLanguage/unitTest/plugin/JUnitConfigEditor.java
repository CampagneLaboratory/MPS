package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JLabel;
import jetbrains.mps.uiLanguage.runtime.JbRadioButton;
import javax.swing.JTextField;
import jetbrains.mps.baseLanguage.plugin.JavaConfigOptions;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.project.MPSProject;
import javax.swing.ButtonGroup;
import java.util.List;
import org.jdesktop.beansbinding.AutoBinding;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.uiLanguage.runtime.events.Events;
import jetbrains.mps.workbench.MPSDataKeys;
import com.intellij.ide.DataManager;
import java.awt.GridBagLayout;
import jetbrains.mps.baseLanguage.plugin.LayoutUtil;
import org.jdesktop.beansbinding.Property;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Bindings;
import java.awt.FlowLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.border.TitledBorder;

public class JUnitConfigEditor extends JPanel {
  public JUnitConfigEditor myThis;
  private JPanel myComponent7;
  private JLabel myTestChoose0;
  private JbRadioButton myIsModule0;
  private JbRadioButton myIsModel0;
  private JbRadioButton myIsClass0;
  private JbRadioButton myIsMethod0;
  private JPanel myComponent8;
  private JLabel myLScopeType0;
  private JTextField myComponent9;
  private MethodTestPanel myMethodPanel0;
  private JavaConfigOptions myJavaOptions0;
  private SNode myMyTestNode;
  private MPSProject myMyProject;
  private ButtonGroup myMyButtonGroup;
  private String myMyScopeType;
  private String myMyFqName;
  public List<AutoBinding> myBindings = ListSequence.fromList(new ArrayList<AutoBinding>());
  private Events myEvents = new Events(null) {
    {
    }

    public void initialize() {
    }
  };

  public JUnitConfigEditor() {
    this.myThis = this;
    JUnitConfigEditor component = this;
    myThis.setMyProject(MPSDataKeys.MPS_PROJECT.getData(DataManager.getInstance().getDataContext()));
    myThis.setMyButtonGroup(new ButtonGroup());
    component.setLayout(new GridBagLayout());
    component.add(this.createComponent8(), LayoutUtil.createFieldConstraints(0));
    component.add(this.createComponent14(), LayoutUtil.createPanelConstraints(1));
    component.add(this.createComponent18(), LayoutUtil.createPanelConstraints(2));
    this.myEvents.initialize();
    myThis.myIsModule0.setSelected(true);
  }

  public Events getEvents() {
    return this.myEvents;
  }

  public void addNotify() {
    super.addNotify();
    this.bind();
  }

  public void removeNotify() {
    this.unbind();
    super.removeNotify();
  }

  private void bind() {
    {
      Object sourceObject = myThis;
      Property sourceProperty = BeanProperty.create("myFqName");
      Object targetObject = this.myComponent9;
      Property targetProperty = BeanProperty.create("text");
      AutoBinding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, sourceObject, sourceProperty, targetObject, targetProperty);
      binding.bind();
      ListSequence.fromList(this.myBindings).addElement(binding);
    }
  }

  private void unbind() {
    for (AutoBinding binding : this.myBindings) {
      if (binding.isBound()) {
        binding.unbind();
      }
    }
  }

  private JPanel createComponent8() {
    JPanel component = new JPanel();
    this.myComponent7 = component;
    component.setLayout(new FlowLayout(FlowLayout.LEFT));
    component.add(this.createComponent9());
    component.add(this.createComponent10());
    component.add(this.createComponent11());
    component.add(this.createComponent12());
    component.add(this.createComponent13());
    return component;
  }

  private JLabel createComponent9() {
    JLabel component = new JLabel();
    this.myTestChoose0 = component;
    component.setText("Test:");
    return component;
  }

  private JbRadioButton createComponent10() {
    JbRadioButton component = new JbRadioButton();
    this.myIsModule0 = component;
    component.setText("All in Module");
    component.setSelected(true);
    component.setGroup(myThis.getMyButtonGroup());
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onSelect();
      }
    });
    return component;
  }

  private JbRadioButton createComponent11() {
    JbRadioButton component = new JbRadioButton();
    this.myIsModel0 = component;
    component.setText("All in Model");
    component.setGroup(myThis.getMyButtonGroup());
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onSelect();
      }
    });
    return component;
  }

  private JbRadioButton createComponent12() {
    JbRadioButton component = new JbRadioButton();
    this.myIsClass0 = component;
    component.setText("Class");
    component.setGroup(myThis.getMyButtonGroup());
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onSelect();
      }
    });
    return component;
  }

  private JbRadioButton createComponent13() {
    JbRadioButton component = new JbRadioButton();
    this.myIsMethod0 = component;
    component.setText("Method");
    component.setGroup(myThis.getMyButtonGroup());
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onSelect();
      }
    });
    return component;
  }

  private JPanel createComponent14() {
    JPanel component = new JPanel();
    this.myComponent8 = component;
    component.setBorder(new TitledBorder("Test"));
    component.setLayout(new GridBagLayout());
    component.add(this.createComponent15(), LayoutUtil.createLabelConstraints(0));
    component.add(this.createComponent16(), LayoutUtil.createFieldConstraints(1));
    component.add(this.createComponent17(), LayoutUtil.createPanelConstraints(2));
    return component;
  }

  private JLabel createComponent15() {
    JLabel component = new JLabel();
    this.myLScopeType0 = component;
    component.setText(myThis.getScopeType());
    return component;
  }

  private JTextField createComponent16() {
    JTextField component = new JTextField();
    this.myComponent9 = component;
    return component;
  }

  private MethodTestPanel createComponent17() {
    MethodTestPanel component = new MethodTestPanel();
    this.myMethodPanel0 = component;
    return component;
  }

  private JavaConfigOptions createComponent18() {
    JavaConfigOptions component = new JavaConfigOptions();
    this.myJavaOptions0 = component;
    return component;
  }

  public SNode getMyTestNode() {
    return this.myMyTestNode;
  }

  public MPSProject getMyProject() {
    return this.myMyProject;
  }

  public ButtonGroup getMyButtonGroup() {
    return this.myMyButtonGroup;
  }

  public String getMyScopeType() {
    return this.myMyScopeType;
  }

  public String getMyFqName() {
    return this.myMyFqName;
  }

  public void setMyTestNode(SNode newValue) {
    SNode oldValue = this.myMyTestNode;
    this.myMyTestNode = newValue;
    this.firePropertyChange("myTestNode", oldValue, newValue);
  }

  public void setMyProject(MPSProject newValue) {
    MPSProject oldValue = this.myMyProject;
    this.myMyProject = newValue;
    this.firePropertyChange("myProject", oldValue, newValue);
  }

  public void setMyButtonGroup(ButtonGroup newValue) {
    ButtonGroup oldValue = this.myMyButtonGroup;
    this.myMyButtonGroup = newValue;
    this.firePropertyChange("myButtonGroup", oldValue, newValue);
  }

  public void setMyScopeType(String newValue) {
    String oldValue = this.myMyScopeType;
    this.myMyScopeType = newValue;
    this.firePropertyChange("myScopeType", oldValue, newValue);
  }

  public void setMyFqName(String newValue) {
    String oldValue = this.myMyFqName;
    this.myMyFqName = newValue;
    this.firePropertyChange("myFqName", oldValue, newValue);
  }

  public void apply(final DefaultJUnit_Configuration config) {
  }

  public String getScopeType() {
    String type = null;
    if (myThis.myIsModule0.isSelected()) {
      type = "Module:";
    } else if (myThis.myIsModel0.isSelected()) {
      type = "Model:";
    } else if (myThis.myIsClass0.isSelected()) {
      type = "Class:";
    } else if (myThis.myIsMethod0.isSelected()) {
      type = "Class";
    }
    return type;
  }

  public void onSelect() {
    myThis.myLScopeType0.setText(myThis.getScopeType());
    myThis.myMethodPanel0.setVisible(myThis.myIsMethod0.isSelected());
  }
}
