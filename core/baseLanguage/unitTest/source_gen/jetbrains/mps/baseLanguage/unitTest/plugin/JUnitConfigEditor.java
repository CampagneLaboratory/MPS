package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JLabel;
import jetbrains.mps.uiLanguage.runtime.JbRadioButton;
import javax.swing.JTextField;
import jetbrains.mps.baseLanguage.plugin.JavaConfigOptions;
import jetbrains.mps.project.MPSProject;
import javax.swing.ButtonGroup;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.project.IModule;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import org.jdesktop.beansbinding.AutoBinding;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.uiLanguage.runtime.events.Events;
import jetbrains.mps.workbench.MPSDataKeys;
import com.intellij.ide.DataManager;
import java.awt.GridBagLayout;
import jetbrains.mps.baseLanguage.util.plugin.run.LayoutUtil;
import java.awt.FlowLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.border.TitledBorder;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestMethod_Behavior;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.baseLanguage.util.plugin.run.ConfigRunParameters;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class JUnitConfigEditor extends JPanel {
  public JUnitConfigEditor myThis;
  private JPanel myComponent8e4569kj042y;
  private JLabel myComponent8e4569kj0435;
  private JbRadioButton myIsProjecteyru7ug9b451;
  private JbRadioButton myIsModule1tugdysy72bmb;
  private JbRadioButton myIsModel8e4569kj0438;
  private JbRadioButton myIsClass8e4569kj043b;
  private JbRadioButton myIsMethod8e4569kj043e;
  private JPanel myMainPanel1tugdysy728xz;
  private JPanel myProjectPaneleyru7ug9b45i;
  private JLabel myComponenteyru7ug9b45p;
  private JTextField myComponenteyru7ug9b45w;
  private JPanel myModulePanel13t6u7j996ti;
  private JLabel myComponent1w3w19xo1bwk7;
  private ModuleChooserComponent myModuleName13t6u7j999p9;
  private JPanel myModelPanel13t6u7j996u2;
  private JLabel myComponent13t6u7j996u3;
  private ModelChooserComponent myModelName13t6u7j9991a;
  private ListPanel myTestCases3xkk62g7q7ua;
  private ListPanel myTestMethods3xkk62g7q7ue;
  private JavaConfigOptions myJavaOptions8e4569kj043h;
  private MPSProject myProject;
  private ButtonGroup myGroup;
  private SModel myModel;
  private IModule myModule;
  private List<SNode> myNodes;
  private List<SNode> myMethods;
  public List<AutoBinding> myBindings = ListSequence.fromList(new ArrayList<AutoBinding>());
  private Events myEvents = new Events(null) {
    {
    }

    public void initialize() {
    }
  };

  public JUnitConfigEditor() {
    this.myThis = this;
    JUnitConfigEditor component = this;
    myThis.setProject(MPSDataKeys.MPS_PROJECT.getData(DataManager.getInstance().getDataContext()));
    myThis.setGroup(new ButtonGroup());
    myThis.setNodes(new ArrayList<SNode>());
    myThis.setMethods(new ArrayList<SNode>());
    component.setLayout(new GridBagLayout());
    component.add(this.createComponent8e4569kj042y(), LayoutUtil.createFieldConstraints(0));
    component.add(this.createComponent1tugdysy728xz(), LayoutUtil.createPanelConstraints(1));
    component.add(this.createComponent3xkk62g7q7ua(), LayoutUtil.createPanelConstraints(1));
    component.add(this.createComponent3xkk62g7q7ue(), LayoutUtil.createPanelConstraints(1));
    component.add(this.createComponent8e4569kj043h(), LayoutUtil.createPanelConstraints(2));
    this.myEvents.initialize();
    myThis.myJavaOptions8e4569kj043h.setMakeBeforeRun(true);
    myThis.myTestCases3xkk62g7q7ua.init(myThis.getNodes(), false);
    myThis.myTestMethods3xkk62g7q7ue.init(myThis.getMethods(), true);
  }

  public Events getEvents() {
    return this.myEvents;
  }

  public void addNotify() {
    super.addNotify();
    this.bind();
  }

  public void removeNotify() {
    this.unbind();
    super.removeNotify();
  }

  private void bind() {
  }

  private void unbind() {
    for (AutoBinding binding : this.myBindings) {
      if (binding.isBound()) {
        binding.unbind();
      }
    }
  }

  private JPanel createComponent8e4569kj042y() {
    JPanel component = new JPanel();
    this.myComponent8e4569kj042y = component;
    component.setLayout(new FlowLayout(FlowLayout.LEFT));
    component.add(this.createComponent8e4569kj0435());
    component.add(this.createComponenteyru7ug9b451());
    component.add(this.createComponent1tugdysy72bmb());
    component.add(this.createComponent8e4569kj0438());
    component.add(this.createComponent8e4569kj043b());
    component.add(this.createComponent8e4569kj043e());
    return component;
  }

  private JLabel createComponent8e4569kj0435() {
    JLabel component = new JLabel();
    this.myComponent8e4569kj0435 = component;
    component.setText("Test:");
    return component;
  }

  private JbRadioButton createComponenteyru7ug9b451() {
    JbRadioButton component = new JbRadioButton();
    this.myIsProjecteyru7ug9b451 = component;
    component.setText("All in Project");
    component.setGroup(myThis.getGroup());
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onSelect();
      }
    });
    return component;
  }

  private JbRadioButton createComponent1tugdysy72bmb() {
    JbRadioButton component = new JbRadioButton();
    this.myIsModule1tugdysy72bmb = component;
    component.setText("All in Module");
    component.setGroup(myThis.getGroup());
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onSelect();
      }
    });
    return component;
  }

  private JbRadioButton createComponent8e4569kj0438() {
    JbRadioButton component = new JbRadioButton();
    this.myIsModel8e4569kj0438 = component;
    component.setText("All in Model");
    component.setGroup(myThis.getGroup());
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onSelect();
      }
    });
    return component;
  }

  private JbRadioButton createComponent8e4569kj043b() {
    JbRadioButton component = new JbRadioButton();
    this.myIsClass8e4569kj043b = component;
    component.setText("Class");
    component.setGroup(myThis.getGroup());
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onSelect();
      }
    });
    return component;
  }

  private JbRadioButton createComponent8e4569kj043e() {
    JbRadioButton component = new JbRadioButton();
    this.myIsMethod8e4569kj043e = component;
    component.setText("Method");
    component.setGroup(myThis.getGroup());
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onSelect();
      }
    });
    return component;
  }

  private JPanel createComponent1tugdysy728xz() {
    JPanel component = new JPanel();
    this.myMainPanel1tugdysy728xz = component;
    component.setBorder(new TitledBorder("Test"));
    component.setLayout(new GridBagLayout());
    component.add(this.createComponenteyru7ug9b45i(), LayoutUtil.createPanelConstraints(0));
    component.add(this.createComponent13t6u7j996ti(), LayoutUtil.createPanelConstraints(0));
    component.add(this.createComponent13t6u7j996u2(), LayoutUtil.createPanelConstraints(0));
    return component;
  }

  private JPanel createComponenteyru7ug9b45i() {
    JPanel component = new JPanel();
    this.myProjectPaneleyru7ug9b45i = component;
    component.setLayout(new GridBagLayout());
    component.add(this.createComponenteyru7ug9b45p(), LayoutUtil.createLabelConstraints(0));
    component.add(this.createComponenteyru7ug9b45w(), LayoutUtil.createPanelConstraints(1));
    return component;
  }

  private JLabel createComponenteyru7ug9b45p() {
    JLabel component = new JLabel();
    this.myComponenteyru7ug9b45p = component;
    component.setText("Project:");
    return component;
  }

  private JTextField createComponenteyru7ug9b45w() {
    JTextField component = new JTextField();
    this.myComponenteyru7ug9b45w = component;
    component.setText(myThis.getProject().getComponent(Project.class).getName());
    component.setEditable(false);
    return component;
  }

  private JPanel createComponent13t6u7j996ti() {
    JPanel component = new JPanel();
    this.myModulePanel13t6u7j996ti = component;
    component.setLayout(new GridBagLayout());
    component.add(this.createComponent1w3w19xo1bwk7(), LayoutUtil.createLabelConstraints(0));
    component.add(this.createComponent13t6u7j999p9(), LayoutUtil.createPanelConstraints(1));
    return component;
  }

  private JLabel createComponent1w3w19xo1bwk7() {
    JLabel component = new JLabel();
    this.myComponent1w3w19xo1bwk7 = component;
    component.setText("Module:");
    return component;
  }

  private ModuleChooserComponent createComponent13t6u7j999p9() {
    ModuleChooserComponent component = new ModuleChooserComponent();
    this.myModuleName13t6u7j999p9 = component;
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onModuleChange();
      }
    });
    return component;
  }

  private JPanel createComponent13t6u7j996u2() {
    JPanel component = new JPanel();
    this.myModelPanel13t6u7j996u2 = component;
    component.setLayout(new GridBagLayout());
    component.add(this.createComponent13t6u7j996u3(), LayoutUtil.createLabelConstraints(0));
    component.add(this.createComponent13t6u7j9991a(), LayoutUtil.createPanelConstraints(1));
    return component;
  }

  private JLabel createComponent13t6u7j996u3() {
    JLabel component = new JLabel();
    this.myComponent13t6u7j996u3 = component;
    component.setText("Model:");
    return component;
  }

  private ModelChooserComponent createComponent13t6u7j9991a() {
    ModelChooserComponent component = new ModelChooserComponent();
    this.myModelName13t6u7j9991a = component;
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onModelChange();
      }
    });
    return component;
  }

  private ListPanel createComponent3xkk62g7q7ua() {
    ListPanel component = new ListPanel();
    this.myTestCases3xkk62g7q7ua = component;
    component.setLayout(new GridBagLayout());
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onNodeChange();
      }
    });
    return component;
  }

  private ListPanel createComponent3xkk62g7q7ue() {
    ListPanel component = new ListPanel();
    this.myTestMethods3xkk62g7q7ue = component;
    component.setLayout(new GridBagLayout());
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onMethodChange();
      }
    });
    return component;
  }

  private JavaConfigOptions createComponent8e4569kj043h() {
    JavaConfigOptions component = new JavaConfigOptions();
    this.myJavaOptions8e4569kj043h = component;
    return component;
  }

  public MPSProject getProject() {
    return this.myProject;
  }

  public ButtonGroup getGroup() {
    return this.myGroup;
  }

  public SModel getModel() {
    return this.myModel;
  }

  public IModule getModule() {
    return this.myModule;
  }

  public List<SNode> getNodes() {
    return this.myNodes;
  }

  public List<SNode> getMethods() {
    return this.myMethods;
  }

  public void setProject(MPSProject newValue) {
    MPSProject oldValue = this.myProject;
    this.myProject = newValue;
    this.firePropertyChange("project", oldValue, newValue);
  }

  public void setGroup(ButtonGroup newValue) {
    ButtonGroup oldValue = this.myGroup;
    this.myGroup = newValue;
    this.firePropertyChange("group", oldValue, newValue);
  }

  public void setModel(SModel newValue) {
    SModel oldValue = this.myModel;
    this.myModel = newValue;
    this.firePropertyChange("model", oldValue, newValue);
  }

  public void setModule(IModule newValue) {
    IModule oldValue = this.myModule;
    this.myModule = newValue;
    this.firePropertyChange("module", oldValue, newValue);
  }

  public void setNodes(List<SNode> newValue) {
    List<SNode> oldValue = this.myNodes;
    this.myNodes = newValue;
    this.firePropertyChange("nodes", oldValue, newValue);
  }

  public void setMethods(List<SNode> newValue) {
    List<SNode> oldValue = this.myMethods;
    this.myMethods = newValue;
    this.firePropertyChange("methods", oldValue, newValue);
  }

  private void setModuleValue(final String moduleName) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        myThis.setModule(TestRunUtil.getModule(moduleName));
      }
    });
  }

  private void setModelValue(final String modelName) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        myThis.setModel(TestRunUtil.getModel(modelName));
      }
    });
  }

  private void addNodeValue(final String nodeName) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SNode testCase = TestRunUtil.getTestNode(nodeName);
        ListSequence.fromList(myThis.getNodes()).addElement(testCase);
        myThis.myTestCases3xkk62g7q7ua.addItem(testCase);
      }
    });
  }

  private void addMethodValue(final String nodeName, final String methodName) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SNode testMethod = TestRunUtil.getTestMethod(nodeName, methodName);
        ListSequence.fromList(myThis.getMethods()).addElement(testMethod);
        myThis.myTestMethods3xkk62g7q7ue.addItem(testMethod);
      }
    });
  }

  private JUnitRunTypes getType(boolean isModule, boolean isModel, boolean isTest, boolean isMethod) {
    if (isModule) {
      return JUnitRunTypes.MODULE;
    } else if (isModel) {
      return JUnitRunTypes.MODEL;
    } else if (isTest) {
      return JUnitRunTypes.NODE;
    } else if (isMethod) {
      return JUnitRunTypes.METHOD;
    }
    return JUnitRunTypes.PROJECT;
  }

  public void apply(final DefaultJUnit_Configuration config) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        if (ListSequence.fromList(myThis.getMethods()).isNotEmpty()) {
          config.getStateObject().methods = new ClonableList<String>();
          for (SNode testMethod : myThis.getMethods()) {
            config.getStateObject().methods.add(ITestMethod_Behavior.call_getTestName_1216136419751(testMethod));
          }
          config.getStateObject().method = null;
        }
        if (ListSequence.fromList(myThis.getNodes()).isNotEmpty()) {
          config.getStateObject().nodes = new ClonableList<String>();
          for (SNode testCase : myThis.getNodes()) {
            config.getStateObject().nodes.add(INamedConcept_Behavior.call_getFqName_1213877404258(testCase));
          }
          config.getStateObject().node = null;
        }
        config.getStateObject().model = (myThis.getModel() != null ?
          config.getStateObject().model = myThis.getModel().getSModelFqName().toString() :
          null
        );
        if (myThis.getModule() != null) {
          config.getStateObject().module = myThis.getModule().getModuleFqName();
          config.getStateObject().compileInMPS = myThis.getModule().isCompileInMPS();
        } else {
          config.getStateObject().module = null;
        }
        JUnitRunTypes type = myThis.getType(myThis.myIsModule1tugdysy72bmb.isSelected(), myThis.myIsModel8e4569kj0438.isSelected(), myThis.myIsClass8e4569kj043b.isSelected(), myThis.myIsMethod8e4569kj043e.isSelected());
        if (type != null) {
          config.getStateObject().type = type;
        }
      }
    });
    if (config.getStateObject().myParams == null) {
      config.getStateObject().myParams = new ConfigRunParameters();
    }
    myThis.myJavaOptions8e4569kj043h.apply(config.getStateObject().myParams);
  }

  public void reset(final DefaultJUnit_Configuration config) {
    if (config.getStateObject().type != null) {
      switch (config.getStateObject().type) {
        case METHOD:
          myThis.myIsMethod8e4569kj043e.setSelected(true);
          break;
        case NODE:
          myThis.myIsClass8e4569kj043b.setSelected(true);
          break;
        case MODEL:
          myThis.myIsModel8e4569kj0438.setSelected(true);
          break;
        case MODULE:
          myThis.myIsModule1tugdysy72bmb.setSelected(true);
          break;
        case PROJECT:
          myThis.myIsProjecteyru7ug9b451.setSelected(true);
        default:
      }
    } else {
      myThis.myIsProjecteyru7ug9b451.setSelected(true);
    }
    List<String> nodes = TestRunUtil.getValues(config.getStateObject().node, config.getStateObject().nodes);
    List<String> methods = TestRunUtil.getValues(config.getStateObject().method, config.getStateObject().methods);
    myThis.setNodes(new ArrayList<SNode>());
    myThis.setMethods(new ArrayList<SNode>());
    myThis.myTestCases3xkk62g7q7ua.clear();
    myThis.myTestMethods3xkk62g7q7ue.clear();
    for (String nodeName : nodes) {
      myThis.addNodeValue(nodeName);
      if (ListSequence.fromList(nodes).first().equals(nodeName)) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            if (ListSequence.fromList(myThis.getNodes()).isNotEmpty() && SNodeOperations.getModel(ListSequence.fromList(myThis.getNodes()).first()) != null) {
              String modelName = SNodeOperations.getModel(ListSequence.fromList(myThis.getNodes()).first()).getSModelFqName().toString();
              myThis.setModelValue(modelName);
              myThis.myModelName13t6u7j9991a.setText(modelName);
              if (SNodeOperations.getModel(ListSequence.fromList(myThis.getNodes()).first()).getModelDescriptor() != null && SNodeOperations.getModel(ListSequence.fromList(myThis.getNodes()).first()).getModelDescriptor().getModule() != null) {
                String moduleName = SNodeOperations.getModel(ListSequence.fromList(myThis.getNodes()).first()).getModelDescriptor().getModule().getModuleFqName();
                myThis.setModuleValue(moduleName);
                myThis.myModuleName13t6u7j999p9.setText(moduleName);
              }
            }
          }
        });
      }
    }
    for (int i = 0; i < ListSequence.fromList(methods).count(); i++) {
      myThis.addMethodValue(ListSequence.fromList(nodes).getElement(i), ListSequence.fromList(methods).getElement(i));
    }
    if (config.getStateObject().model != null) {
      myThis.setModelValue(config.getStateObject().model);
      if (myThis.getModel() != null && myThis.getModel().getModelDescriptor() != null && myThis.getModel().getModelDescriptor().getModule() != null) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            myThis.myModelName13t6u7j9991a.setText(config.getStateObject().model);
            String moduleName = myThis.getModel().getModelDescriptor().getModule().getModuleFqName();
            myThis.setModuleValue(moduleName);
            myThis.myModuleName13t6u7j999p9.setText(moduleName);
          }
        });
      }
    }
    if (config.getStateObject().module != null) {
      myThis.setModuleValue(config.getStateObject().module);
      myThis.myModuleName13t6u7j999p9.setText(config.getStateObject().module);
    }
    myThis.onSelect();
    myThis.myJavaOptions8e4569kj043h.reset(config.getStateObject().myParams);
  }

  public void dispose() {
    myThis.myModelName13t6u7j9991a.dispose();
    myThis.myModuleName13t6u7j999p9.dispose();
    myThis.myJavaOptions8e4569kj043h.dispose();
  }

  public void onSelect() {
    myThis.myProjectPaneleyru7ug9b45i.setVisible(false);
    myThis.myModulePanel13t6u7j996ti.setVisible(false);
    myThis.myModelPanel13t6u7j996u2.setVisible(false);
    myThis.myTestCases3xkk62g7q7ua.setVisible(false);
    myThis.myTestMethods3xkk62g7q7ue.setVisible(false);
    myThis.myMainPanel1tugdysy728xz.setVisible(true);
    if (myThis.myIsModule1tugdysy72bmb.isSelected()) {
      myThis.myModulePanel13t6u7j996ti.setVisible(true);
    } else if (myThis.myIsModel8e4569kj0438.isSelected()) {
      myThis.myModelPanel13t6u7j996u2.setVisible(true);
    } else if (myThis.myIsClass8e4569kj043b.isSelected()) {
      myThis.myTestCases3xkk62g7q7ua.setVisible(true);
      myThis.myMainPanel1tugdysy728xz.setVisible(false);
    } else if (myThis.myIsMethod8e4569kj043e.isSelected()) {
      myThis.myTestMethods3xkk62g7q7ue.setVisible(true);
      myThis.myMainPanel1tugdysy728xz.setVisible(false);
    } else if (myThis.myIsProjecteyru7ug9b451.isSelected()) {
      myThis.myProjectPaneleyru7ug9b45i.setVisible(true);
    }
  }

  public void onModelChange() {
    myThis.setModelValue(myThis.myModelName13t6u7j9991a.getText());
  }

  public void onModuleChange() {
    myThis.setModuleValue(myThis.myModuleName13t6u7j999p9.getText());
  }

  public void onNodeChange() {
    myThis.setNodes((List<SNode>) myThis.myTestCases3xkk62g7q7ua.getItems());
  }

  public void onMethodChange() {
    myThis.setMethods((List<SNode>) myThis.myTestMethods3xkk62g7q7ue.getItems());
  }
}
