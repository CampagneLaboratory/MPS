package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.project.MPSProject;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestCase_Behavior;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.IModule;
import jetbrains.mps.workbench.MPSDataKeys;
import com.intellij.ide.DataManager;

public enum JUnitRunTypes {
  METHOD() {

    public List<SNode> collect(DefaultJUnit_Configuration configuration, MPSProject project) {
      List<SNode> all = new ArrayList<SNode>();
      if (configuration.getStateObject().node != null) {
        ListSequence.fromList(all).addElement(TestRunUtil.getTestMethod(configuration.getStateObject().node, configuration.getStateObject().method));
      }
      if (configuration.getStateObject().nodes != null) {
        for (int i = 0; i < configuration.getStateObject().nodes.size(); i++) {
          ListSequence.fromList(all).addElement(TestRunUtil.getTestMethod(configuration.getStateObject().nodes.get(i), configuration.getStateObject().methods.get(i)));
        }
      }
      return all;
    }

    public String check(DefaultJUnit_Configuration configuration) {
      String errorReport = null;
      if (ListSequence.fromList(TestRunUtil.getValues(configuration.getStateObject().method, configuration.getStateObject().methods)).isEmpty()) {
        errorReport = "methods list is empty";
      } else if (!(TestRunUtil.validateMethods(configuration.getStateObject().node, configuration.getStateObject().nodes, configuration.getStateObject().method, configuration.getStateObject().methods))) {
        errorReport = "methods are not valid";
      }
      return errorReport;
    }

  },
  NODE() {

    public List<SNode> collect(DefaultJUnit_Configuration configuration, MPSProject project) {
      List<SNode> all = new ArrayList<SNode>();
      if (configuration.getStateObject().node != null) {
        SNode testNode = TestRunUtil.getTestNode(configuration.getStateObject().node);
        if (ListSequence.fromList(ITestCase_Behavior.call_getTestSet_1216130724401(testNode)).isNotEmpty()) {
          ListSequence.fromList(all).addElement(testNode);
        }
      }
      if (configuration.getStateObject().nodes != null) {
        for (int i = 0; i < configuration.getStateObject().nodes.size(); i++) {
          SNode testNode = TestRunUtil.getTestNode(configuration.getStateObject().nodes.get(i));
          if (ListSequence.fromList(ITestCase_Behavior.call_getTestSet_1216130724401(testNode)).isNotEmpty()) {
            ListSequence.fromList(all).addElement(testNode);
          }
        }
      }
      return all;
    }

    public String check(DefaultJUnit_Configuration configuration) {
      String errorReport = null;
      if (ListSequence.fromList(TestRunUtil.getValues(configuration.getStateObject().node, configuration.getStateObject().nodes)).isEmpty()) {
        errorReport = "classes list is empty";
      } else if (!(TestRunUtil.validateNodes(configuration.getStateObject().node, configuration.getStateObject().nodes))) {
        errorReport = "nodes are not valid";
      }
      return errorReport;
    }

  },
  MODEL() {

    public List<SNode> collect(DefaultJUnit_Configuration configuration, MPSProject project) {
      return Sequence.fromIterable(TestRunUtil.getModelTests(TestRunUtil.getModel(configuration.getStateObject().model))).toListSequence();
    }

    public String check(DefaultJUnit_Configuration configuration) {
      String errorReport = null;
      if (configuration.getStateObject().model == null) {
        errorReport = "model is not selected or does not exist";
      } else if (!(TestRunUtil.validateModel(configuration.getStateObject().model))) {
        errorReport = "model is not valid";
      }
      return errorReport;
    }

  },
  MODULE() {

    public List<SNode> collect(DefaultJUnit_Configuration configuration, MPSProject project) {
      return Sequence.fromIterable(TestRunUtil.getModuleTests(configuration.getStateObject().module)).toListSequence();
    }

    public String check(DefaultJUnit_Configuration configuration) {
      String errorReport = null;
      if (configuration.getStateObject().module == null) {
        errorReport = "module is not selected or does not exist";
      } else if (!(TestRunUtil.validateModule(configuration.getStateObject().module))) {
        errorReport = "module is not valid";
      }
      return errorReport;
    }

  },
  PROJECT() {

    public List<SNode> collect(DefaultJUnit_Configuration configuration, MPSProject project) {
      List<SNode> all = new ArrayList<SNode>();
      if (project != null) {
        for (IModule projectModule : project.getModules()) {
          ListSequence.fromList(all).addSequence(Sequence.fromIterable(TestRunUtil.getModuleTests(projectModule)));
        }
      }
      return all;
    }

    public String check(DefaultJUnit_Configuration configuration) {
      String errorReport = null;
      MPSProject mpsProject = MPSDataKeys.MPS_PROJECT.getData(DataManager.getInstance().getDataContext());
      if (mpsProject != null) {
        if (!(TestRunUtil.containsTest(mpsProject))) {
          errorReport = "project does not contain tests";
        }
      }
      return errorReport;
    }

  };

  JUnitRunTypes() {
  }

  public abstract List<SNode> collect(DefaultJUnit_Configuration configuration, MPSProject project);

  public abstract String check(DefaultJUnit_Configuration cofiguration);
}
