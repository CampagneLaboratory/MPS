package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.Map;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestCase_Behavior;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestMethod_Behavior;
import jetbrains.mps.baseLanguage.unitTest.runtime.TestEvent;

public class TestRunState {
  private static final Object lock = new Object();

  private TestStatisticsModel statisticsModel;
  private List<String> testMethods = ListSequence.fromList(new ArrayList<String>());
  private String curClass;
  private String curMethod;
  private String curToken;
  private String loseTest;
  private String loseMethod;
  private int totalTests = 0;
  private int completedTests = 0;
  private int defectTests = 0;
  private Set<TestView> viewList = SetSequence.fromSet(new HashSet<TestView>());
  private boolean isTerminated;

  public TestRunState(TestStatisticsModel statisticsModel) {
    this.statisticsModel = statisticsModel;
  }

  private void updateView() {
    for (TestView view : this.viewList) {
      view.update();
    }
  }

  public void addView(TestView testView) {
    SetSequence.fromSet(this.viewList).addElement(testView);
  }

  public void startTest(String className, String methodName) {
    if (className.equals(this.curClass) && methodName.equals(this.curMethod)) {
      return;
    }
    synchronized (lock) {
      this.curClass = className;
      this.curMethod = methodName;
      this.completedTests++;
      this.updateView();
    }
  }

  public void endTest() {
    synchronized (lock) {
      this.updateView();
      this.curClass = null;
      this.curMethod = null;
    }
  }

  public void defectTest() {
    synchronized (lock) {
      this.defectTests++;
      this.updateView();
    }
  }

  public void loseTest(String test, String method) {
    synchronized (lock) {
      this.loseTest = test;
      this.loseMethod = method;
      this.defectTests++;
      this.completedTests++;
      this.updateView();
      this.loseTest = null;
      this.loseMethod = null;
    }
  }

  public void terminate() {
    synchronized (lock) {
      this.isTerminated = true;
      this.updateView();
    }
  }

  public void setTests(Map<SNode, List<SNode>> tests) {
    this.statisticsModel.setTests(tests);
    for (SNode testCase : MapSequence.fromMap(tests).keySet()) {
      for (SNode testMethod : MapSequence.fromMap(tests).get(testCase)) {
        ListSequence.fromList(this.testMethods).addElement(ITestCase_Behavior.call_getClassName_1216136193905(testCase) + '.' + ITestMethod_Behavior.call_getTestName_1216136419751(testMethod));
      }
    }
    this.totalTests = ListSequence.fromList(this.testMethods).count();
  }

  public List<String> getUnusedMethods() {
    return this.testMethods;
  }

  public void completeTestEvent(TestEvent event) {
    String token = event.getToken();
    if (token.equals(TestEvent.END_TEST_PREFIX) || token.equals(TestEvent.ERROR_TEST_SUFFIX) || token.equals(TestEvent.FAILURE_TEST_SUFFIX)) {
      String testClassName = event.getTestCaseName();
      String testMethodName = event.getTestMethodName();
      String key = testClassName + '.' + testMethodName;
      synchronized (this.testMethods) {
        if (ListSequence.fromList(this.testMethods).contains(key)) {
          ListSequence.fromList(this.testMethods).removeElement(key);
        }
      }
    }
  }

  public int getTotalTests() {
    return this.totalTests;
  }

  public int getDefectTests() {
    return this.defectTests;
  }

  public int getCompletedTests() {
    return this.completedTests;
  }

  public String getCurrentClass() {
    return this.curClass;
  }

  public String getCurrentMethod() {
    return this.curMethod;
  }

  public void setToken(String token) {
    this.curToken = token;
  }

  public String getToken() {
    return this.curToken;
  }

  public String getLoseMethod() {
    return this.loseMethod;
  }

  public String getLoseClass() {
    return this.loseTest;
  }

  public boolean isTerminated() {
    return this.isTerminated;
  }

  public TestMethodRow getTestMethodRow(String className, String methodName) {
    return this.statisticsModel.getRow(className, methodName);
  }

  public void updateTestMethodRow(TestMethodRow row) {
    this.statisticsModel.updateRow(row);
  }
}
