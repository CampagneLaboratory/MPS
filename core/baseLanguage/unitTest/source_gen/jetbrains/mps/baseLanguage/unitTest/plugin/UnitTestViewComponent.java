package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import javax.swing.JPanel;
import com.intellij.openapi.Disposable;
import com.intellij.openapi.project.Project;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.IOperationContext;
import com.intellij.execution.impl.ConsoleViewImpl;
import javax.swing.JComponent;
import java.awt.BorderLayout;
import java.awt.GridBagLayout;
import com.intellij.openapi.ui.Splitter;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import com.intellij.execution.ui.ConsoleView;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionPlaces;
import javax.swing.JScrollPane;
import com.intellij.ui.components.JBScrollPane;
import javax.swing.JTable;
import java.awt.GridLayout;
import javax.swing.Icon;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.ide.icons.IconManager;
import com.intellij.execution.process.ProcessListener;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import com.intellij.openapi.actionSystem.DataProvider;
import java.awt.LayoutManager;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;
import com.intellij.execution.Location;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSLocation;

public class UnitTestViewComponent extends JPanel implements Disposable {
  private final TestRunState myTestState;
  private TestOutputComponent myOutputComponent;
  private TestTree myTreeComponent;
  private ProgressLine myProgressLineComponent;
  private TestToolbarPanel myActionToolComponent;
  private final Project myProject;
  private FailedTestOccurenceNavigator myTestNavigator;
  private final List<_FunctionTypes._void_P0_E0> myListeners = ListSequence.fromList(new ArrayList<_FunctionTypes._void_P0_E0>());

  public UnitTestViewComponent(Project project, IOperationContext context, ConsoleViewImpl console, UnitTestExecutionController model) {
    this.myProject = project;
    this.myTestState = model.getState();
    this.initComponent(console, context);
    this.addCloseListener(model.getCloseListener());
  }

  private void initComponent(ConsoleViewImpl console, IOperationContext context) {
    StatisticsTableModel statisticsModel = new StatisticsTableModel(this.myTestState);

    this.myTreeComponent = new TestTree(this.myProject, this.myTestState, context, this);
    this.myTreeComponent.addTreeSelectionListener(new TestTreeSelectionListener(this.myTreeComponent, statisticsModel, this.myOutputComponent));
    this.myTreeComponent.addMouseListener(new TestTreeRootMouseListener(this.myTreeComponent, statisticsModel, this.myOutputComponent));
    this.myActionToolComponent = new TestToolbarPanel(this.myProject, this.myTreeComponent, this.myTestNavigator);

    JComponent leftPanel = this.createTreeComponent();
    leftPanel.add(this.myActionToolComponent, BorderLayout.NORTH);

    JPanel rightPanel = new JPanel(new GridBagLayout());
    Splitter resultTabs = new Splitter(false);
    resultTabs.setFirstComponent(this.createOutputComponent(this.myProject, console));
    JComponent statistics = this.createStatisticsComponent(statisticsModel);
    resultTabs.setSecondComponent(statistics);
    JComponent stackTraceActions = this.createActionsToolbar(console);
    stackTraceActions.setMaximumSize(new Dimension(rightPanel.getWidth(), stackTraceActions.getMaximumSize().height));
    this.myProgressLineComponent = new ProgressLine(this.myTestState);
    this.myProgressLineComponent.setMinimumSize(new Dimension(0, this.myProgressLineComponent.getMinimumSize().height));

    GridBagConstraints c = new GridBagConstraints();
    rightPanel.setBorder(null);
    c.fill = GridBagConstraints.VERTICAL;
    c.anchor = GridBagConstraints.LINE_START;
    c.gridx = 0;
    c.gridy = 1;
    c.weighty = 1;
    c.weightx = 0;
    rightPanel.add(stackTraceActions, c);
    c.fill = GridBagConstraints.HORIZONTAL;
    c.gridx = 1;
    c.gridy = 0;
    c.weighty = 0;
    c.weightx = 1;
    rightPanel.add(this.myProgressLineComponent, c);
    c.fill = GridBagConstraints.BOTH;
    c.gridx = 1;
    c.gridy = 1;
    c.weighty = 1;
    c.weightx = 1;
    rightPanel.add(resultTabs, c);

    Splitter splitter = new Splitter(false);
    splitter.setProportion(0.2f);
    splitter.setFirstComponent(leftPanel);
    splitter.setSecondComponent(rightPanel);
    this.setLayout(new BorderLayout());

    this.add(splitter, BorderLayout.CENTER);

    this.myTestState.addView(this.myTreeComponent);
    this.myTestState.addView(this.myProgressLineComponent);
    this.myTestState.addView(this.myOutputComponent);
  }

  public JComponent createActionsToolbar(ConsoleView console) {
    DefaultActionGroup group = new DefaultActionGroup(console.createConsoleActions());
    ActionManager manager = ActionManager.getInstance();
    ActionToolbar toolbar = manager.createActionToolbar(ActionPlaces.UNKNOWN, group, false);
    toolbar.setLayoutPolicy(ActionToolbar.WRAP_LAYOUT_POLICY);
    return toolbar.getComponent();
  }

  private JComponent createTreeComponent() {
    UnitTestViewComponent.MyTreePanel treePanel = new UnitTestViewComponent.MyTreePanel(new BorderLayout());
    JScrollPane scrollPane = new JBScrollPane(this.myTreeComponent);
    treePanel.add(scrollPane, BorderLayout.CENTER);
    this.myTestNavigator = new FailedTestOccurenceNavigator(this.myTreeComponent);
    return treePanel;
  }

  private JComponent createOutputComponent(Project project, ConsoleViewImpl console) {
    this.myOutputComponent = new TestOutputComponent(project, this, console, this.myTestState);
    return this.myOutputComponent.getComponent();
  }

  private JComponent createStatisticsComponent(StatisticsTableModel testStatisticsModel) {
    JTable statisticsTable = new JTable(testStatisticsModel);
    statisticsTable.setDefaultRenderer(TestStatisticsRow.class, new StatisticsRowRenderer());
    JPanel tablePanel = new JPanel(new GridLayout(1, 1));
    tablePanel.add(new JBScrollPane(statisticsTable));
    return tablePanel;
  }

  public Icon getIcon(String iconName) {
    Language language = getLanguage();
    String pathToIcon = language.getDescriptorFile().getParent().getAbsolutePath() + "\\icons\\" + iconName;
    return IconManager.loadIcon(pathToIcon, true);
  }

  public ProcessListener getProcessListener() {
    return this.myProgressLineComponent.getProcessListener();
  }

  public void dispose() {
    this.myOutputComponent.dispose();
    this.myTreeComponent.dispose();
    this.invokeCloseListeners();
  }

  public void addCloseListener(_FunctionTypes._void_P0_E0 listener) {
    ListSequence.fromList(this.myListeners).addElement(listener);
  }

  public void invokeCloseListeners() {
    for (_FunctionTypes._void_P0_E0 listener : ListSequence.fromList(this.myListeners)) {
      listener.invoke();
    }
  }

  public static Language getLanguage() {
    final Wrappers._T<Language> lang = new Wrappers._T<Language>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        lang.value = Language.getLanguageFor(SNodeOperations.getModel(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.unitTest.structure.ITestCase")).getModelDescriptor());
      }
    });
    return lang.value;
  }

  public class MyTreePanel extends JPanel implements DataProvider {
    public MyTreePanel(LayoutManager manager) {
      super(manager);
    }

    @Nullable
    public Object getData(@NonNls String dataId) {
      if (dataId.equals(Location.LOCATION)) {
        MPSTreeNode currentNode = UnitTestViewComponent.this.myTreeComponent.getCurrentNode();
        if (currentNode == null) {
          return null;
        }
        return new MPSLocation(UnitTestViewComponent.this.myProject, ((ITestNodeWrapper) currentNode.getUserObject()).getNode());
      }
      return null;
    }
  }
}
