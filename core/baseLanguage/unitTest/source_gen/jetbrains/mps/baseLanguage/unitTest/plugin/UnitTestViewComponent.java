package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import javax.swing.JPanel;
import com.intellij.openapi.Disposable;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.IOperationContext;
import com.intellij.execution.impl.ConsoleViewImpl;
import java.awt.BorderLayout;
import javax.swing.JTabbedPane;
import javax.swing.JComponent;
import com.intellij.openapi.ui.Splitter;
import java.awt.Dimension;
import com.intellij.execution.ui.ConsoleView;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionPlaces;
import javax.swing.JScrollPane;
import com.intellij.openapi.project.Project;
import javax.swing.JTable;
import java.awt.GridLayout;
import javax.swing.Icon;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.util.Macros;
import jetbrains.mps.ide.icons.IconManager;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import com.intellij.openapi.actionSystem.DataProvider;
import java.awt.LayoutManager;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;
import com.intellij.execution.Location;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSLocation;

public class UnitTestViewComponent extends JPanel implements Disposable {
  private TestRunState testState;
  private TestOutputComponent outputComponent;
  private TestTree treeComponent;
  private ProgressLine progressLineComponent;
  private TestToolbarPanel actionToolComponent;
  private MPSProject project;
  private FailedTestOccurenceNavigator testNavigator;
  private List<_FunctionTypes._void_P0_E0> listeners = ListSequence.fromList(new ArrayList<_FunctionTypes._void_P0_E0>());

  public UnitTestViewComponent(MPSProject project, IOperationContext context, ConsoleViewImpl console, TestRunState runState, TestStatisticsModel statisticsModel) {
    this.project = project;
    this.testState = runState;
    this.initComponent(console, context, statisticsModel);
  }

  private void initComponent(ConsoleViewImpl console, IOperationContext context, TestStatisticsModel statisticsModel) {
    // Create test results pane 
    JPanel rightPanel = new JPanel(new BorderLayout());
    rightPanel.setBorder(null);
    JTabbedPane resultTabs = new JTabbedPane();
    this.treeComponent = new TestTree(this.project, this.testState, context, this);
    resultTabs.addTab("Output", this.getIcon("testOutput.png"), this.createOutputComponent(this.project, console));
    resultTabs.addTab("Statistics", this.getIcon("testStatistics.png"), this.createStatisticsComponent(statisticsModel));
    JComponent leftPanel = this.createTreeComponent();
    Splitter splitter = new Splitter(false);
    splitter.setProportion(0.2f);
    splitter.setFirstComponent(leftPanel);
    splitter.setSecondComponent(rightPanel);
    this.setLayout(new BorderLayout());
    JComponent stackTraceActions = this.createActionsToolbar(console);
    stackTraceActions.setMaximumSize(new Dimension(rightPanel.getWidth(), stackTraceActions.getMaximumSize().height));
    this.actionToolComponent = new TestToolbarPanel(this.project, this.treeComponent, this.testNavigator);
    this.progressLineComponent = new ProgressLine(this.testState);
    this.progressLineComponent.setMinimumSize(new Dimension(0, this.progressLineComponent.getMinimumSize().height));
    this.treeComponent.addTreeSelectionListener(new TestTreeSelectionListener(this.treeComponent, statisticsModel, this.outputComponent));
    this.treeComponent.addMouseListener(new TestTreeRootMouseListener(this.treeComponent, statisticsModel, this.outputComponent));


    leftPanel.add(this.actionToolComponent, BorderLayout.NORTH);
    rightPanel.add(stackTraceActions, BorderLayout.LINE_START);
    rightPanel.add(this.progressLineComponent, BorderLayout.NORTH);
    rightPanel.add(resultTabs, BorderLayout.CENTER);
    this.add(splitter, BorderLayout.CENTER);

    this.testState.addView(this.treeComponent);
    this.testState.addView(this.progressLineComponent);
    this.testState.addView(this.outputComponent);
  }

  public JComponent createActionsToolbar(ConsoleView console) {
    DefaultActionGroup group = new DefaultActionGroup(console.createConsoleActions());
    ActionManager manager = ActionManager.getInstance();
    ActionToolbar toolbar = manager.createActionToolbar(ActionPlaces.UNKNOWN, group, false);
    return toolbar.getComponent();
  }

  private JComponent createTreeComponent() {
    UnitTestViewComponent.MyTreePanel treePanel = new UnitTestViewComponent.MyTreePanel(new BorderLayout());
    JScrollPane scrollPane = new JScrollPane(this.treeComponent);
    treePanel.add(scrollPane, BorderLayout.CENTER);
    this.testNavigator = new FailedTestOccurenceNavigator(this.treeComponent);
    return treePanel;
  }

  private JComponent createOutputComponent(MPSProject project, ConsoleViewImpl console) {
    this.outputComponent = new TestOutputComponent(project.getComponent(Project.class), this, console, this.testState);
    return this.outputComponent.getComponent();
  }

  private JComponent createStatisticsComponent(TestStatisticsModel testStatisticsModel) {
    JTable statisticsTable = new JTable(testStatisticsModel);
    statisticsTable.setDefaultRenderer(TestStatisticsRow.class, new StatisticsRowRenderer());
    JPanel tablePanel = new JPanel(new GridLayout(1, 1));
    tablePanel.add(new JScrollPane(statisticsTable));
    return tablePanel;
  }

  public Icon getIcon(String iconName) {
    Language language = getLanguage();
    String pathToIcon = Macros.languageDescriptor().expandPath(Macros.LANGUAGE_DESCRIPTOR + "\\icons\\" + iconName, language.getDescriptorFile());
    return IconManager.loadIcon(pathToIcon, true);
  }

  public void start(ProcessHandler processHandler) {
    this.progressLineComponent.start(processHandler);
  }

  public void dispose() {
    this.outputComponent.dispose();
    this.treeComponent.dispose();
    this.invokeCloseListeners();
  }

  public void addCloseListener(_FunctionTypes._void_P0_E0 listener) {
    ListSequence.fromList(this.listeners).addElement(listener);
  }

  public void invokeCloseListeners() {
    for (_FunctionTypes._void_P0_E0 listener : ListSequence.fromList(this.listeners)) {
      listener.invoke();
    }
  }

  public static Language getLanguage() {
    final Wrappers._T<Language> lang = new Wrappers._T<Language>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        lang.value = Language.getLanguageFor(SNodeOperations.getModel(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.unitTest.structure.ITestCase")).getModelDescriptor());
      }
    });
    return lang.value;
  }

  public class MyTreePanel extends JPanel implements DataProvider {
    public MyTreePanel(LayoutManager manager) {
      super(manager);
    }

    @Nullable
    public Object getData(@NonNls String dataId) {
      if (dataId.equals(Location.LOCATION)) {
        Project project = UnitTestViewComponent.this.project.getComponent(Project.class);
        MPSTreeNode currentNode = UnitTestViewComponent.this.treeComponent.getCurrentNode();
        return new MPSLocation(project, currentNode.getUserObject());
      }
      return null;
    }
  }
}
