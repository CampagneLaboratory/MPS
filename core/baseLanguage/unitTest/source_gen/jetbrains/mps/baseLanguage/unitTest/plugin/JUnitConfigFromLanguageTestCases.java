package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import java.util.List;
import jetbrains.mps.logging.Logger;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestCase_Behavior;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSPsiElement;
import java.util.ArrayList;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.configurations.ConfigurationFactory;

public class JUnitConfigFromLanguageTestCases extends BaseConfigCreator<List> implements Cloneable {
  private static final Logger LOG = Logger.getLogger(JUnitConfigFromLanguageTestCases.class);

  private RunConfiguration myConfig;

  public JUnitConfigFromLanguageTestCases() {
    super(findFactoryImpl(ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class), "DefaultJUnit"));
  }

  protected RunConfiguration doCreateConfiguration(List node) {
    this.createConfig(node);
    return this.myConfig;
  }

  private void createConfig(final List<SNode> parameter) {
    boolean containsTest = false;
    for (SNode testCase : parameter) {
      if (ListSequence.fromList(ITestCase_Behavior.call_getTestMethods_2148145109766218395(testCase)).isNotEmpty()) {
        containsTest = true;
        break;
      }
    }
    if (!(containsTest)) {
      return;
    }

    JUnitConfigFromLanguageTestCases.this.setSourceElement(new MPSPsiElement(parameter));

    List<String> nodeNames = ListSequence.fromList(new ArrayList<String>());
    for (SNode testCase : parameter) {
      ListSequence.fromList(nodeNames).addElement(INamedConcept_Behavior.call_getFqName_1213877404258(testCase));
    }

    {
      JUnit_ConfigurationType configType = ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), JUnit_ConfigurationType.class);
      DefaultJUnit_Configuration _config = new DefaultJUnit_Configuration(JUnitConfigFromLanguageTestCases.this.getContext().getProject(), findFactory(configType, "DefaultJUnit"), "NewConfig") {
        @Override
        public String suggestedName() {
          return "Several Test Classes";
        }
      };
      _config.setName(SPropertyOperations.getString(SNodeOperations.cast(Sequence.fromIterable(parameter).first(), "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"), "name") + ",...");
      _config.getStateObject().type = JUnitRunTypes.NODE;
      _config.getStateObject().nodes = new ClonableList<String>(nodeNames);
      JUnitConfigFromLanguageTestCases.this.myConfig = _config;
    }
  }

  @Override
  public JUnitConfigFromLanguageTestCases clone() {
    return ((JUnitConfigFromLanguageTestCases) super.clone());
  }

  protected boolean isApplicable(final Object element) {
    if (!(element instanceof List)) {
      return false;
    }
    for (Object obj : (List) element) {
      if (!(obj instanceof SNode && SNodeOperations.isInstanceOf(((SNode) obj), "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))) {
        return false;
      }
    }
    return true;
  }

  @NotNull
  private ConfigurationFactory findFactory(ConfigurationType configurationType, String configurationName) {
    return findFactoryImpl(configurationType, configurationName);
  }

  @NotNull
  private static ConfigurationFactory findFactoryImpl(ConfigurationType configurationType, String configurationName) {
    for (ConfigurationFactory factory : Sequence.fromIterable(Sequence.fromArray(configurationType.getConfigurationFactories()))) {
      if (factory.getClass().getName().contains(configurationName)) {
        return factory;
      }
    }
    LOG.warning("Cound not find configuration factory for " + configurationName + " in type " + configurationType.getDisplayName() + ".");
    return configurationType.getConfigurationFactories()[0];
  }
}
