package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JList;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import java.awt.event.ActionListener;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestCase_Behavior;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestMethod_Behavior;
import jetbrains.mps.lang.core.behavior.BaseConcept_Behavior;
import jetbrains.mps.project.IModule;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.awt.BorderLayout;
import javax.swing.AbstractListModel;
import com.intellij.openapi.actionSystem.AnAction;
import jetbrains.mps.workbench.dialogs.project.components.parts.actions.ListAddAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.dialogs.choosers.CommonChoosers;
import jetbrains.mps.workbench.dialogs.project.components.parts.actions.ListRemoveAction;
import javax.swing.border.TitledBorder;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.workbench.action.ActionUtils;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import javax.swing.JScrollPane;
import javax.swing.JLabel;

public class ListPanel extends JPanel {
  private JList list;
  private List<SNode> values = new ArrayList<SNode>();
  private List<SNode> candidates;
  private boolean isTestMethods;
  private ActionListener listener;

  public ListPanel() {
  }

  private String getPresentation(final SNode value) {
    final StringBuilder sb = new StringBuilder();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        if (SNodeOperations.isInstanceOf(value, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase")) {
          sb.append(ITestCase_Behavior.call_getClassName_1216136193905(SNodeOperations.cast(value, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase")));
        } else if (SNodeOperations.isInstanceOf(value, "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod")) {
          SNode testCase = ITestMethod_Behavior.call_getTestCase_1216134500045(SNodeOperations.cast(value, "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod"));
          sb.append(ITestCase_Behavior.call_getClassName_1216136193905(testCase) + '.' + BaseConcept_Behavior.call_getPresentation_1213877396640(value));
        }
      }
    });
    return sb.toString();
  }

  private void collectCandidates() {
    final List<SNode> nodesList = new ArrayList<SNode>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (IModule module : GlobalScope.getInstance().getVisibleModules()) {
          for (SModelDescriptor descriptor : module.getOwnModelDescriptors()) {
            if (SModelStereotype.isStubModelStereotype(descriptor.getStereotype())) {
              continue;
            }
            ListSequence.fromList(nodesList).addSequence(ListSequence.fromList(TestRunUtil.getModelTests(descriptor.getSModel())));
          }
        }
      }
    });
    if (this.isTestMethods) {
      final List<SNode> methodsList = new ArrayList<SNode>();
      for (final SNode testCase : nodesList) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            ListSequence.fromList(methodsList).addSequence(ListSequence.fromList(ITestCase_Behavior.call_getTestMethods_2148145109766218395(SNodeOperations.cast(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))));
          }
        });
      }
      this.candidates = methodsList;
    } else {
      this.candidates = nodesList;
    }
  }

  public void addItem(SNode item) {
    ListSequence.fromList(this.values).addElement(item);
    this.list.updateUI();
  }

  public void addActionListener(ActionListener listener) {
    this.listener = listener;
  }

  public Object getItems() {
    return this.values;
  }

  public void clear() {
    ListSequence.fromList(this.values).removeSequence(ListSequence.fromList(this.values));
    this.list.updateUI();
  }

  public void init(List<SNode> nodes, final boolean isTestMethods) {
    this.isTestMethods = isTestMethods;
    this.setLayout(new BorderLayout());
    this.values = nodes;
    this.list = new JList(new AbstractListModel() {
      public Object getElementAt(int p0) {
        return ListPanel.this.getPresentation(ListSequence.fromList(ListPanel.this.values).getElement(p0));
      }

      public int getSize() {
        return ListSequence.fromList(ListPanel.this.values).count();
      }
    });
    AnAction add = new ListAddAction(this.list) {
      protected int doAdd(AnActionEvent p0) {
        if (ListPanel.this.candidates == null) {
          ListPanel.this.collectCandidates();
        }
        ListSequence.fromList(ListPanel.this.candidates).removeSequence(ListSequence.fromList(ListPanel.this.values));
        final SNode resultNode = (SNode) CommonChoosers.showDialogNodeChooser(ListPanel.this, ListPanel.this.candidates);
        if (resultNode == null) {
          return -1;
        }
        ListSequence.fromList(ListPanel.this.values).addElement(resultNode);
        if (ListPanel.this.listener != null) {
          ListPanel.this.listener.actionPerformed(null);
        }
        ListPanel.this.list.updateUI();
        return ListSequence.fromList(ListPanel.this.values).indexOf(resultNode);
      }
    };
    AnAction remove = new ListRemoveAction(this.list) {
      protected void doRemove(AnActionEvent p0) {
        for (Object value : ListPanel.this.list.getSelectedValues()) {
          for (SNode node : ListPanel.this.values) {
            if (ListPanel.this.getPresentation(node).equals(value)) {
              ListSequence.fromList(ListPanel.this.values).removeElement(node);
              break;
            }
          }
        }
        if (ListPanel.this.listener != null) {
          ListPanel.this.listener.actionPerformed(null);
        }
        ListPanel.this.list.updateUI();
      }
    };

    this.setBorder(new TitledBorder("Test"));

    DefaultActionGroup group = ActionUtils.groupFromActions(add, remove);
    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, false);
    this.add(toolbar.getComponent(), BorderLayout.WEST);

    JScrollPane comp = new JScrollPane(this.list);
    comp.doLayout();
    this.add(comp, BorderLayout.CENTER);

    this.add(new JLabel((this.isTestMethods ?
      "Methods" :
      "Classes"
    )), BorderLayout.PAGE_START);
    this.list.updateUI();
  }
}
