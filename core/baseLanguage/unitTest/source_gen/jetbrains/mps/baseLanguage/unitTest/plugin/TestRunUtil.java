package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestCase_Behavior;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestMethod_Behavior;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class TestRunUtil {
  public TestRunUtil() {
  }

  private static List<SNode> excludeAbstract(List<SNode> nodes) {
    List<SNode> result = new ArrayList<SNode>();
    for (SNode testCase : nodes) {
      if (SNodeOperations.isInstanceOf(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase") && SPropertyOperations.getBoolean(SNodeOperations.cast(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase"), "abstractClass")) {
        continue;
      }
      ListSequence.fromList(result).addElement(testCase);
    }
    return result;
  }

  public static SNode getTestNode(String testNodeName) {
    if (testNodeName == null) {
      return null;
    }
    SNode testCase = (SNode) SModelUtil.findNodeByFQName(testNodeName, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"), GlobalScope.getInstance());
    if ((testCase == null) || !(SNodeOperations.isInstanceOf(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase"))) {
      return testCase;
    }
    return (SPropertyOperations.getBoolean(SNodeOperations.cast(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase"), "abstractClass") ?
      null :
      testCase
    );
  }

  public static SNode getTestMethod(String testNodeName, String testMethodName) {
    if (testNodeName == null || testMethodName == null) {
      return null;
    }
    SNode test = getTestNode(testNodeName);
    if (test == null) {
      return null;
    }
    for (SNode method : ITestCase_Behavior.call_getTestMethods_2148145109766218395(test)) {
      if (ITestMethod_Behavior.call_getTestName_1216136419751(method).equals(testMethodName)) {
        return method;
      }
    }
    return null;
  }

  public static SModel getModel(String modelName) {
    if (modelName == null) {
      return null;
    }
    SModelDescriptor modelDescriptor = GlobalScope.getInstance().getModelDescriptor(SModelReference.fromString(modelName));
    if (modelDescriptor == null) {
      return null;
    }
    return modelDescriptor.getSModel();
  }

  public static List<SNode> getModelTests(SModel model) {
    List<SNode> tests = new ArrayList<SNode>();
    if (model == null) {
      return tests;
    }
    return excludeAbstract(SModelOperations.getRoots(model, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"));
  }

  public static List<SNode> getModuleTests(IModule module) {
    List<SNode> tests = new ArrayList<SNode>();
    for (SModelDescriptor modelDescriptor : module.getOwnModelDescriptors()) {
      ListSequence.fromList(tests).addSequence(ListSequence.fromList(TestRunUtil.getModelTests(modelDescriptor.getSModel())));
    }
    return tests;
  }

  public static List<SNode> getModuleTests(String moduleName) {
    List<SNode> tests = new ArrayList<SNode>();
    if (moduleName == null) {
      return tests;
    }
    IModule module = MPSModuleRepository.getInstance().getModuleByUID(moduleName);
    ListSequence.fromList(tests).addSequence(ListSequence.fromList(TestRunUtil.getModuleTests(module)));
    return excludeAbstract(tests);
  }

  public static boolean containsTest(MPSProject project) {
    for (IModule module : project.getModules()) {
      if (ListSequence.fromList(getModuleTests(module)).isNotEmpty()) {
        return true;
      }
    }
    return false;
  }

  public static IModule getModule(String moduleName) {
    if (moduleName == null) {
      return null;
    }
    for (IModule module : GlobalScope.getInstance().getVisibleModules()) {
      if (module.getModuleFqName().equals(moduleName)) {
        return module;
      }
    }
    return null;
  }

  public static List<String> getValues(String simple, List<String> collection) {
    List<String> result = ListSequence.fromList(new ArrayList<String>());
    if (simple != null) {
      ListSequence.fromList(result).addElement(simple);
    }
    if (collection != null) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(collection));
    }
    return result;
  }

  public static boolean validateMethods(String simpleNode, List<String> listNode, String simpleMethod, List<String> listMethod) {
    List<String> nodes = getValues(simpleNode, listNode);
    List<String> methods = getValues(simpleMethod, listMethod);
    if (ListSequence.fromList(nodes).count() != ListSequence.fromList(methods).count()) {
      return false;
    }
    for (int i = 0; i < ListSequence.fromList(nodes).count(); i++) {
      if ((getTestMethod(ListSequence.fromList(nodes).getElement(i), ListSequence.fromList(methods).getElement(i)) == null)) {
        return false;
      }
    }
    return true;
  }

  public static boolean validateNodes(String simple, List<String> collection) {
    List<String> nodes = getValues(simple, collection);
    for (String node : nodes) {
      if ((getTestNode(node) == null)) {
        return false;
      }
    }
    return true;
  }

  public static boolean validateModel(String model) {
    return ListSequence.fromList(getModelTests(getModel(model))).isNotEmpty();
  }

  public static boolean validateModule(String module) {
    return ListSequence.fromList(getModuleTests(module)).isNotEmpty();
  }

  public static List<SNode> excludeIgnored(List<SNode> methods) {
    List<SNode> result = new ArrayList<SNode>();
    for (SNode method : methods) {
      if (!(SNodeOperations.isInstanceOf(method, "jetbrains.mps.baseLanguage.unitTest.structure.TestMethod"))) {
        ListSequence.fromList(result).addElement(method);
        continue;
      }
      boolean isIgnored = false;
      for (SNode annotation : SLinkOperations.getTargets(SNodeOperations.cast(method, "jetbrains.mps.baseLanguage.unitTest.structure.TestMethod"), "annotation", true)) {
        if (SLinkOperations.getTarget(annotation, "annotation", false).equals(SNodeOperations.getNode("f:java_stub#org.junit(org.junit@java_stub)", "~Ignore"))) {
          isIgnored = true;
          break;
        }
      }
      if (!(isIgnored)) {
        ListSequence.fromList(result).addElement(method);
      }
    }
    return result;
  }
}
