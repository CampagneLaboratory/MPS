package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestCase_Behavior;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestMethod_Behavior;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelReference;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class TestRunUtil {
  public static final String SEPARATOR = "#";

  public TestRunUtil() {
  }

  private static Iterable<SNode> excludeAbstract(Iterable<SNode> nodes) {
    return Sequence.fromIterable(nodes).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode testCase) {
        return !(SNodeOperations.isInstanceOf(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase") && SPropertyOperations.getBoolean(SNodeOperations.cast(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase"), "abstractClass"));
      }
    });
  }

  public static SNode getTestNode(String testNodeName) {
    if (testNodeName == null) {
      return null;
    }
    SNode testCase = (SNode) SModelUtil.findNodeByFQName(testNodeName, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"), GlobalScope.getInstance());
    if ((testCase == null) || !(SNodeOperations.isInstanceOf(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase"))) {
      return testCase;
    }
    return (SPropertyOperations.getBoolean(SNodeOperations.cast(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase"), "abstractClass") ?
      null :
      testCase
    );
  }

  public static SNode getTestMethod(String testNodeName, String testMethodName) {
    if (testNodeName == null || testMethodName == null) {
      return null;
    }
    SNode test = getTestNode(testNodeName);
    if (test == null) {
      return null;
    }
    for (SNode method : ITestCase_Behavior.call_getTestMethods_2148145109766218395(test)) {
      if (ITestMethod_Behavior.call_getTestName_1216136419751(method).equals(testMethodName)) {
        return method;
      }
    }
    return null;
  }

  public static SModel getModel(String modelName) {
    if (modelName == null) {
      return null;
    }
    SModelDescriptor modelDescriptor = GlobalScope.getInstance().getModelDescriptor(SModelReference.fromString(modelName));
    if (modelDescriptor == null) {
      return null;
    }
    return modelDescriptor.getSModel();
  }

  public static Iterable<SNode> getModelTests(SModel model) {
    if (model == null) {
      return Sequence.fromIterable(Collections.<SNode>emptyList());
    }
    return ListSequence.fromList(SModelOperations.getRoots(model, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode testCase) {
        return !(SNodeOperations.isInstanceOf(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase") && SPropertyOperations.getBoolean(SNodeOperations.cast(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase"), "abstractClass"));
      }
    });
  }

  public static Iterable<SNode> getModuleTests(@NotNull final IModule module) {
    return Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModelDescriptor>() {
      public Iterable<SModelDescriptor> iterable() {
        return module.getOwnModelDescriptors();
      }
    })).translate(new ITranslator2<SModelDescriptor, SNode>() {
      public Iterable<SNode> translate(SModelDescriptor modelDescriptor) {
        return TestRunUtil.getModelTests(modelDescriptor.getSModel());
      }
    });
  }

  public static Iterable<SNode> getModuleTests(String moduleName) {
    if (moduleName == null) {
      return Sequence.fromIterable(Collections.<SNode>emptyList());
    }
    IModule module = MPSModuleRepository.getInstance().getModuleByUID(moduleName);
    if (module == null) {
      return Sequence.fromIterable(Collections.<SNode>emptyList());
    }
    return excludeAbstract(TestRunUtil.getModuleTests(module));
  }

  public static boolean containsTest(MPSProject project) {
    for (IModule module : project.getModules()) {
      if (Sequence.fromIterable(getModuleTests(module)).isNotEmpty()) {
        return true;
      }
    }
    return false;
  }

  public static IModule getModule(String moduleName) {
    if (moduleName == null) {
      return null;
    }
    for (IModule module : GlobalScope.getInstance().getVisibleModules()) {
      if (module.getModuleFqName().equals(moduleName)) {
        return module;
      }
    }
    return null;
  }

  public static boolean validateMethods(List<String> methods) {
    if (methods == null) {
      return false;
    }
    for (String methodName : ListSequence.fromList(methods)) {
      int separatorIndex = methodName.lastIndexOf(SEPARATOR);
      if ((getTestMethod(methodName.substring(0, separatorIndex), methodName.substring(separatorIndex + 1)) == null)) {
        return false;
      }
    }
    return true;
  }

  public static boolean validateNodes(List<String> collection) {
    for (String node : collection) {
      if ((getTestNode(node) == null)) {
        return false;
      }
    }
    return true;
  }

  public static boolean validateModel(String model) {
    return Sequence.fromIterable(getModelTests(getModel(model))).isNotEmpty();
  }

  public static boolean validateModule(String module) {
    return Sequence.fromIterable(getModuleTests(module)).isNotEmpty();
  }

  public static boolean isIgnored(SNode method) {
    if (SNodeOperations.isInstanceOf(method, "jetbrains.mps.baseLanguage.unitTest.structure.TestMethod")) {
      return (ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(method, "jetbrains.mps.baseLanguage.unitTest.structure.TestMethod"), "annotation", true)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SLinkOperations.getTarget(it, "annotation", false).equals(SNodeOperations.getNode("f:java_stub#org.junit(org.junit@java_stub)", "~Ignore"));
        }
      }) != null);
    }
    return false;
  }

  public static List<SNode> excludeIgnored(List<SNode> methods) {
    return ListSequence.fromList(methods).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(isIgnored(it));
      }
    }).toListSequence();
  }
}
