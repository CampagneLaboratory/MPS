package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.plugin.BaseRunner;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestable_Behavior;
import java.util.concurrent.CyclicBarrier;
import java.io.IOException;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;

public class UnitTestRunner extends BaseRunner {

  private JUnitTestViewComponent component;
  private UnitTestPreferencesComponent unitTestPreferences;

  public UnitTestRunner(UnitTestPreferencesComponent unitTestPreferences, JUnitTestViewComponent component) {
    this.component = component;
    this.unitTestPreferences = unitTestPreferences;
  }

  public void run(List<SNode> tests) {
    List<String> params = ListSequence.<String>fromArray();
    this.addJavaCommand(params);
    if (this.unitTestPreferences.useDebug) {
      this.addDebug(params, this.unitTestPreferences.debugPort, false);
    }
    ListSequence.fromList(params).addSequence(ListSequence.fromList(ITestable_Behavior.call_getVirtualMachineParameters_1216140572223(ListSequence.fromList(tests).first())));
    this.addDebugParameters(params);
    this.addClassPath(params, ListSequence.fromList(tests).first());
    ListSequence.fromList(params).addElement(ITestable_Behavior.call_getTestRunner_1216389141390(ListSequence.fromList(tests).first()).getName());
    for(SNode test : tests) {
      ListSequence.fromList(params).addSequence(ListSequence.fromList(ITestable_Behavior.call_getParametersPart_1215620460293(test)));
    }
    ProcessBuilder p = new ProcessBuilder(params);
    this.component.appendInternal(this.getCommandString(p) + "\n\n");
    try {
      Process pro = p.start();
      UnitTestRunOutputReader outReader = new UnitTestRunOutputReader(pro.getInputStream(), this.component, false);
      UnitTestRunOutputReader errReader = new UnitTestRunOutputReader(pro.getErrorStream(), this.component, true);
      CyclicBarrier barrier = new CyclicBarrier(2, outReader.getExecutor());
      outReader.setBarrier(barrier);
      errReader.setBarrier(barrier);
      outReader.start();
      errReader.start();
    } catch (IOException e) {
      Logger.getLogger(UnitTestRunner.class).error("Can't run tests", e);
    }
  }

  private void addDebugParameters(List<String> params) {
    ListSequence.fromList(params).addElement("-Xdebug");
    ListSequence.fromList(params).addElement("-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005");
  }

  public String getClasspath(SNode node) {
    StringBuffer buff = new StringBuffer();
    buff.append(super.getClasspath(node));
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.unitTest.structure.ITestable")) {
      SNode testable = (SNode)node;
      List<String> pathes = ITestable_Behavior.call_getClassPathPart_1216045139515(testable);
      for(String path : pathes) {
        buff.append(path).append(BaseRunner.ps());
      }
    }
    return buff.toString();
  }

}
