package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.BaseRunner;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.baseLanguage.util.plugin.run.ConfigRunParameters;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.intellij.execution.process.ProcessNotCreatedException;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.baseLanguage.unitTest.runtime.TestRunParameters;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestable_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.io.File;
import java.util.Set;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.LinkedHashSet;

public class UnitTestRunner extends BaseRunner {
  private static Logger LOG = Logger.getLogger(UnitTestRunner.class);

  private final ConfigRunParameters myConfigParameter;
  private ProcessBuilder myProcessBuilder;
  private final List<SNode> myTestable = new ArrayList<SNode>();

  public UnitTestRunner(List<SNode> testable, ConfigRunParameters parameters) {
    ListSequence.fromList(this.myTestable).addSequence(ListSequence.fromList(testable));
    this.myConfigParameter = parameters;
    if (parameters != null && parameters.getUseAlternativeJRE()) {
      this.setJavaHomePath(parameters.getAlternativeJRE());
    }
  }

  public Process run() throws ProcessNotCreatedException {
    return this.run(this.myTestable);
  }

  @Nullable
  public Process run(final List<SNode> tests) throws ProcessNotCreatedException {
    if (ListSequence.fromList(tests).isEmpty()) {
      return null;
    }

    final Wrappers._T<TestRunParameters> runParams = new Wrappers._T<TestRunParameters>();
    final Wrappers._T<List<SNode>> testsToRun = new Wrappers._T<List<SNode>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        runParams.value = ITestable_Behavior.call_getTestRunParameters_1216045139515(ListSequence.fromList(tests).first());
        testsToRun.value = ListSequence.fromList(tests).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return ITestable_Behavior.call_getTestRunParameters_1216045139515(it).equals(runParams.value);
          }
        }).toListSequence();
        ListSequence.fromList(tests).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            if (!(ITestable_Behavior.call_getTestRunParameters_1216045139515(it).equals(runParams.value))) {
              LOG.error("Can not execute " + it + ": run parameters does not match.");
            }
          }
        });
      }
    });
    return this.runTestWithParameters(runParams.value, testsToRun.value);
  }

  public String getCommandString() {
    if (this.myProcessBuilder == null) {
      return null;
    }
    return this.getCommandString(this.myProcessBuilder);
  }

  private Process runTestWithParameters(final TestRunParameters parameters, final List<SNode> tests) throws ProcessNotCreatedException {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        List<String> params = ListSequence.fromList(new ArrayList<String>());
        String workingDir = null;
        String programParams = null;
        String vmParams = null;
        if (UnitTestRunner.this.myConfigParameter != null) {
          workingDir = UnitTestRunner.this.myConfigParameter.getWorkingDirectory();
          programParams = UnitTestRunner.this.myConfigParameter.getProgramParameters();
          vmParams = UnitTestRunner.this.myConfigParameter.getVMParameters();
        }
        UnitTestRunner.this.addJavaCommand(params);
        ListSequence.fromList(params).addSequence(ListSequence.fromList(parameters.getVmParameters()));
        if (vmParams != null && StringUtils.isNotEmpty(vmParams)) {
          String[] paramList = UnitTestRunner.this.splitParams(vmParams);
          ListSequence.fromList(params).addSequence(Sequence.fromIterable(Sequence.fromArray(paramList)));
        }
        UnitTestRunner.this.addClassPath(params, UnitTestRunner.this.getClasspathString(tests, parameters.getClassPath()));
        ListSequence.fromList(params).addElement(parameters.getTestRunner());
        for (SNode test : ListSequence.fromList(tests)) {
          ListSequence.fromList(params).addSequence(ListSequence.fromList(ITestable_Behavior.call_getParametersPart_1215620460293(test)));
        }
        if (programParams != null && StringUtils.isNotEmpty(programParams)) {
          String[] paramList = UnitTestRunner.this.splitParams(programParams);
          ListSequence.fromList(params).addSequence(Sequence.fromIterable(Sequence.fromArray(paramList)));
        }
        UnitTestRunner.this.myProcessBuilder = new ProcessBuilder(params);
        if (workingDir != null && StringUtils.isNotEmpty(workingDir)) {
          UnitTestRunner.this.myProcessBuilder.directory(new File(workingDir));
        }
      }
    });

    try {
      return this.myProcessBuilder.start();
    } catch (Throwable e) {
      LOG.error("Can't run tests: " + e.getMessage(), e);
      throw new ProcessNotCreatedException(e.getMessage(), e, this.getCommandLine(this.myConfigParameter.getWorkingDirectory()));
    }
  }

  public String getClasspathString(List<SNode> list, List<String> addictionClassPath) {
    Set<IModule> uniqModules = SetSequence.fromSet(new HashSet<IModule>());
    for (SNode testable : list) {
      IModule module = SNodeOperations.getModel(testable).getModelDescriptor().getModule();
      SetSequence.fromSet(uniqModules).addElement(module);
    }
    Set<String> classpath = SetSequence.fromSet(new LinkedHashSet<String>());
    for (IModule module : uniqModules) {
      SetSequence.fromSet(classpath).addSequence(SetSequence.fromSet(BaseRunner.getModuleClasspath(module, true)));
    }
    ListSequence.fromList(addictionClassPath).addSequence(SetSequence.fromSet(classpath));

    StringBuffer buff = new StringBuffer();
    for (String path : addictionClassPath) {
      buff.append(path).append(BaseRunner.ps());
    }
    return buff.toString();
  }
}
