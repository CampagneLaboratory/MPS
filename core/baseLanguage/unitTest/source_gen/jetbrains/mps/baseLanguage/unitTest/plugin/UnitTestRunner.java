package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.plugin.BaseRunner;
import jetbrains.mps.baseLanguage.plugin.ConfigRunParameters;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.Map;
import jetbrains.mps.baseLanguage.unitTest.runtime.TestRunParameters;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestable_Behavior;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.ModelAccess;
import org.apache.commons.lang.StringUtils;
import java.io.File;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.concurrent.CyclicBarrier;
import jetbrains.mps.logging.Logger;

public class UnitTestRunner extends BaseRunner {
  private JUnitTestViewComponent myComponent;
  private UnitTest_PreferencesComponent unitTestPreferences;
  private Process myProcess;
  private ConfigRunParameters configParameter;

  public UnitTestRunner(UnitTest_PreferencesComponent unitTestPreferences, JUnitTestViewComponent component) {
    this.myComponent = component;
    this.unitTestPreferences = unitTestPreferences;
  }

  public void run(List<SNode> tests) {
    final Map<TestRunParameters, List<SNode>> map = MapSequence.fromMap(new LinkedHashMap<TestRunParameters, List<SNode>>(16, (float)0.75, false));
    for (SNode test : ListSequence.fromList(tests)) {
      TestRunParameters parameters = ITestable_Behavior.call_getTestRunParameters_1216045139515(test);
      if (MapSequence.fromMap(map).containsKey(parameters)) {
        ListSequence.fromList(MapSequence.fromMap(map).get(parameters)).addElement(test);
      } else {
        List<SNode> t = ListSequence.fromList(new ArrayList<SNode>());
        ListSequence.fromList(t).addElement(test);
        MapSequence.fromMap(map).put(parameters, t);
      }
    }
    final UnitTestRunner runner = this;
    Thread thread = new Thread(new Runnable() {
      public void run() {
        for (TestRunParameters key : SetSequence.fromSet(MapSequence.fromMap(map).keySet())) {
          runner.runTestWithParameters(key, MapSequence.fromMap(map).get(key));
        }
      }
    });
    thread.setDaemon(true);
    thread.start();
  }

  public Process getProcess() {
    return this.myProcess;
  }

  public void setConfigParameters(ConfigRunParameters configRunParameters) {
    this.configParameter = configRunParameters;
  }

  private void runTestWithParameters(final TestRunParameters parameters, final List<SNode> tests) {
    final List<String> params = ListSequence.fromList(new ArrayList<String>());
    String workingDir = null;
    String programParams = null;
    String vmParams = null;
    if (this.configParameter != null) {
      workingDir = this.configParameter.getWorkingDirectory();
      programParams = this.configParameter.getProgramParameters();
      vmParams = this.configParameter.getVMParameters();
    }
    this.addJavaCommand(params);
    if (this.unitTestPreferences.getStateObject().useDebug) {
      this.addDebug(params, this.unitTestPreferences.getStateObject().debugPort, false);
    }
    ListSequence.fromList(params).addSequence(ListSequence.fromList(parameters.getVmParameters()));
    if (vmParams != null) {
      ListSequence.fromList(params).addElement(vmParams);
    }
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        UnitTestRunner.this.addClassPath(params, UnitTestRunner.this.getClasspathString(ListSequence.fromList(tests).first(), parameters.getClassPath()));
      }
    });
    ListSequence.fromList(params).addElement(parameters.getTestRunner());
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (SNode test : ListSequence.fromList(tests)) {
          ListSequence.fromList(params).addSequence(ListSequence.fromList(ITestable_Behavior.call_getParametersPart_1215620460293(test)));
        }
      }
    });
    if (programParams != null) {
      ListSequence.fromList(params).addElement(programParams);
    }
    ProcessBuilder p = new ProcessBuilder(params);
    if (workingDir != null && StringUtils.isNotEmpty(workingDir)) {
      p.directory(new File(workingDir));
    }
    this.myComponent.appendInternal(this.getCommandString(p) + "\n\n");
    try {
      this.myProcess = p.start();
      final UnitTestRunOutputReader outReader = new UnitTestRunOutputReader(this.myProcess.getInputStream(), this.myComponent, false);
      final UnitTestRunOutputReader errReader = new UnitTestRunOutputReader(this.myProcess.getErrorStream(), this.myComponent, true);
      this.myComponent.addCloseListener(new _FunctionTypes._void_P0_E0() {
        public void invoke() {
          outReader.interrupt();
          errReader.interrupt();
          UnitTestRunner.this.myProcess.destroy();
        }
      });
      CyclicBarrier barrier = new CyclicBarrier(2, outReader.getExecutor());
      outReader.setBarrier(barrier);
      errReader.setBarrier(barrier);
      outReader.start();
      errReader.start();
      this.myProcess.waitFor();
    } catch (Exception e) {
      Logger.getLogger(UnitTestRunner.class).error("Can't run tests", e);
    }
  }

  public String getClasspathString(SNode node, List<String> addictionClassPath) {
    StringBuffer buff = new StringBuffer();
    buff.append(super.getClasspath(node));
    for (String path : addictionClassPath) {
      buff.append(path).append(BaseRunner.ps());
    }
    return buff.toString();
  }
}
