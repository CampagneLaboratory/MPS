package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.BaseRunner;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.baseLanguage.util.plugin.run.ConfigRunParameters;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.baseLanguage.unitTest.runtime.TestRunParameters;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestable_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.apache.commons.lang.StringUtils;
import java.io.File;
import java.util.Set;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.LinkedHashSet;

public class UnitTestRunner extends BaseRunner {
  private static Logger LOG = Logger.getLogger(UnitTestRunner.class);

  private ConfigRunParameters myConfigParameter;
  private ProcessBuilder myProcessBuilder;
  private final List<SNode> myTestable = new ArrayList<SNode>();

  public UnitTestRunner() {
    this(new ArrayList<SNode>(), null);
  }

  public UnitTestRunner(List<SNode> testable) {
    this(testable, null);
  }

  public UnitTestRunner(List<SNode> testable, ConfigRunParameters parameters) {
    ListSequence.fromList(this.myTestable).addSequence(ListSequence.fromList(testable));
    this.setConfigParameters(parameters);
  }

  public Process run() {
    final Wrappers._T<Process> process = new Wrappers._T<Process>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        process.value = UnitTestRunner.this.run(UnitTestRunner.this.myTestable);
      }
    });
    return process.value;
  }

  @Nullable
  public Process run(List<SNode> tests) {
    if (ListSequence.fromList(tests).isEmpty()) {
      return null;
    }

    final TestRunParameters runParams = ITestable_Behavior.call_getTestRunParameters_1216045139515(ListSequence.fromList(tests).first());
    Iterable<SNode> testsToRun = ListSequence.fromList(tests).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ITestable_Behavior.call_getTestRunParameters_1216045139515(it).equals(runParams);
      }
    });
    ListSequence.fromList(tests).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (!(ITestable_Behavior.call_getTestRunParameters_1216045139515(it).equals(runParams))) {
          LOG.error("Can not execute " + it + ": run parameters does not match.");
        }
      }
    });
    return this.runTestWithParameters(runParams, Sequence.fromIterable(testsToRun).toListSequence());
  }

  public void setConfigParameters(ConfigRunParameters configRunParameters) {
    this.myConfigParameter = configRunParameters;
    if (configRunParameters != null && configRunParameters.getUseAlternativeJRE()) {
      this.setJavaHomePath(configRunParameters.getAlternativeJRE());
    }
  }

  public String getCommandString() {
    if (this.myProcessBuilder == null) {
      return null;
    }
    return this.getCommandString(this.myProcessBuilder);
  }

  private Process runTestWithParameters(TestRunParameters parameters, List<SNode> tests) {
    List<String> params = ListSequence.fromList(new ArrayList<String>());
    String workingDir = null;
    String programParams = null;
    String vmParams = null;
    if (this.myConfigParameter != null) {
      workingDir = this.myConfigParameter.getWorkingDirectory();
      programParams = this.myConfigParameter.getProgramParameters();
      vmParams = this.myConfigParameter.getVMParameters();
    }
    this.addJavaCommand(params);
    ListSequence.fromList(params).addSequence(ListSequence.fromList(parameters.getVmParameters()));
    if (vmParams != null && StringUtils.isNotEmpty(vmParams)) {
      String[] paramList = this.splitParams(vmParams);
      ListSequence.fromList(params).addSequence(Sequence.fromIterable(Sequence.fromArray(paramList)));
    }
    this.addClassPath(params, this.getClasspathString(tests, parameters.getClassPath()));
    ListSequence.fromList(params).addElement(parameters.getTestRunner());
    for (SNode test : ListSequence.fromList(tests)) {
      ListSequence.fromList(params).addSequence(ListSequence.fromList(ITestable_Behavior.call_getParametersPart_1215620460293(test)));
    }
    if (programParams != null && StringUtils.isNotEmpty(programParams)) {
      String[] paramList = this.splitParams(programParams);
      ListSequence.fromList(params).addSequence(Sequence.fromIterable(Sequence.fromArray(paramList)));
    }
    this.myProcessBuilder = new ProcessBuilder(params);
    if (workingDir != null && StringUtils.isNotEmpty(workingDir)) {
      this.myProcessBuilder.directory(new File(workingDir));
    }

    try {
      Process result = this.myProcessBuilder.start();
      return result;
    } catch (Exception e) {
      Logger.getLogger(UnitTestRunner.class).error("Can't run tests", e);
      return null;
    }
  }

  public String getClasspathString(List<SNode> list, List<String> addictionClassPath) {
    Set<IModule> uniqModules = SetSequence.fromSet(new HashSet<IModule>());
    for (SNode testable : list) {
      IModule module = SNodeOperations.getModel(testable).getModelDescriptor().getModule();
      SetSequence.fromSet(uniqModules).addElement(module);
    }
    Set<String> classpath = SetSequence.fromSet(new LinkedHashSet<String>());
    for (IModule module : uniqModules) {
      SetSequence.fromSet(classpath).addSequence(SetSequence.fromSet(BaseRunner.getModuleClasspath(module, true)));
    }
    ListSequence.fromList(addictionClassPath).addSequence(SetSequence.fromSet(classpath));

    StringBuffer buff = new StringBuffer();
    for (String path : addictionClassPath) {
      buff.append(path).append(BaseRunner.ps());
    }
    return buff.toString();
  }
}
