package jetbrains.mps.baseLanguage.unitTest.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class convert_test_case_to_unittest_case_Intention extends BaseIntention implements Intention {
  public convert_test_case_to_unittest_case_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ClassConcept";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Convert to UnitTest Case";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.getConceptDeclaration(node) == SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept") && TypeChecker.getInstance().getSubtypingManager().isSubtype(SLinkOperations.getTarget(node, "superclass", true), new _Quotations.QuotationClass_1().createNode());
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode testCase = SNodeOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase");
    SPropertyOperations.set(testCase, "name", SPropertyOperations.getString(node, "name"));
    SPropertyOperations.set(testCase, "testCaseName", SPropertyOperations.getString(node, "name"));
    if ((SLinkOperations.getTarget(node, "superclass", true) != null) && SLinkOperations.getTarget(SLinkOperations.getTarget(node, "superclass", true), "classifier", false) != SLinkOperations.getTarget(new _Quotations.QuotationClass_0().createNode(), "classifier", false)) {
      SLinkOperations.setTarget(SLinkOperations.getTarget(testCase, "superclass", true), "classifier", SLinkOperations.getTarget(SLinkOperations.getTarget(node, "superclass", true), "classifier", false), false);
    }
    for (SNode m : ListSequence.fromList(SLinkOperations.getTargets(node, "method", true))) {
      if (SPropertyOperations.getString(m, "name").startsWith("test")) {
        SLinkOperations.addChild(SLinkOperations.getTarget(testCase, "testMethodList", true), "testMethod", new _Quotations.QuotationClass_2().createNode(SNodeOperations.detachNode(SLinkOperations.getTarget(m, "body", true)), SPropertyOperations.getString(m, "name").substring("test".length())));
      } else {
        SLinkOperations.addChild(testCase, "method", SNodeOperations.detachNode(m));
      }
    }
    for (SNode f : ListSequence.fromList(SLinkOperations.getTargets(node, "staticField", true))) {
      SLinkOperations.addChild(testCase, "staticField", SNodeOperations.detachNode(f));
    }
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.unitTest.intentions";
  }
}
