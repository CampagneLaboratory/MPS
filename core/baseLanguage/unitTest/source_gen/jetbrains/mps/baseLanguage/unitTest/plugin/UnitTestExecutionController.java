package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.ConfigRunParameters;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.execution.process.ProcessHandler;
import com.intellij.execution.ExecutionException;
import jetbrains.mps.runConfigurations.runtime.DefaultProcessHandler;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class UnitTestExecutionController {
  private final TestRunState myState;
  private final TestEventsDispatcher myDispatcher;
  private final ConfigRunParameters myConfigurationRunParameters;
  private final List<ITestNodeWrapper> myWhatToTest = ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
  private Process myCurrentProcess;

  public UnitTestExecutionController(final List<ITestNodeWrapper> whatToTest, ConfigRunParameters configurationRunParameters) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ListSequence.fromList(myWhatToTest).addSequence(ListSequence.fromList(whatToTest));
      }
    });
    myState = new TestRunState(myWhatToTest);
    myDispatcher = new TestEventsDispatcher(myState);
    myConfigurationRunParameters = configurationRunParameters;
  }

  public TestRunState getState() {
    return myState;
  }

  public ProcessHandler execute() throws ExecutionException {
    if (ListSequence.fromList(myWhatToTest).isEmpty()) {
      throw new ExecutionException("Nothing to test.");
    }

    UnitTestRunner testRunner = null;
    try {
      testRunner = new UnitTestRunner(myWhatToTest, myConfigurationRunParameters);
    } catch (NullPointerException npe) {
      npe.printStackTrace();
    }
    myCurrentProcess = testRunner.run();
    if (myCurrentProcess == null) {
      myState.terminate();
      return null;
    }

    return new DefaultProcessHandler(this.myCurrentProcess, testRunner.getCommandString(), new UnitTestProcessListener(myDispatcher));
  }

  public _FunctionTypes._void_P0_E0 getCloseListener() {
    final Process process = this.myCurrentProcess;
    return new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        if (process != null) {
          process.destroy();
        }
      }
    };
  }
}
