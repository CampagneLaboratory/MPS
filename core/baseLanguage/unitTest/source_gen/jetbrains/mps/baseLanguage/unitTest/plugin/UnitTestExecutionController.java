package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.ConfigRunParameters;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.intellij.execution.process.ProcessHandler;
import com.intellij.execution.process.ProcessNotCreatedException;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class UnitTestExecutionController {
  private final TestRunState myState;
  private final TestEventsDispatcher myDispatcher;
  private final ConfigRunParameters myConfigurationRunParameters;
  private final List<SNode> myWhatToTest = new ArrayList<SNode>();
  private Process myCurrentProcess;

  public UnitTestExecutionController(List<SNode> whatToTest, ConfigRunParameters configurationRunParameters) {
    ListSequence.fromList(this.myWhatToTest).addSequence(ListSequence.fromList(whatToTest));
    this.myState = new TestRunState(whatToTest);
    this.myDispatcher = new TestEventsDispatcher(this.myState);
    this.myConfigurationRunParameters = configurationRunParameters;
  }

  public TestRunState getState() {
    return this.myState;
  }

  public ProcessHandler execute() throws ProcessNotCreatedException {
    UnitTestRunner testRunner = null;
    try {
      testRunner = new UnitTestRunner(this.myWhatToTest, this.myConfigurationRunParameters);
    } catch (NullPointerException npe) {
      npe.printStackTrace();
    }
    this.myCurrentProcess = testRunner.run();
    if (this.myCurrentProcess == null) {
      this.myState.terminate();
      return null;
    }
    return new UnitTestProcessHandler(this.myDispatcher, this.myCurrentProcess, testRunner.getCommandString());
  }

  public _FunctionTypes._void_P0_E0 getCloseListener() {
    final Process process = this.myCurrentProcess;
    return new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        if (process != null) {
          process.destroy();
        }
      }
    };
  }
}
