package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import javax.swing.table.TableCellRenderer;
import javax.swing.JPanel;
import javax.swing.JLabel;
import java.awt.BorderLayout;
import java.awt.Color;
import javax.swing.SwingConstants;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Component;
import javax.swing.JTable;
import javax.swing.JComponent;
import javax.swing.UIManager;
import javax.swing.BorderFactory;

public class StatisticsRowRenderer implements TableCellRenderer {
  private JPanel textPanel;
  private JLabel text;
  private JLabel advancedText;
  private JLabel simpleField;
  private JPanel statePanel;
  private JLabel success;
  private JLabel error;
  private JLabel failure;
  private JLabel aloneSuccess;
  private JLabel aloneError;
  private JLabel aloneFailure;

  public StatisticsRowRenderer() {
    this.textPanel = new JPanel(new BorderLayout());
    this.text = new JLabel();
    this.textPanel.add(this.text, BorderLayout.WEST);
    this.advancedText = new JLabel();
    this.advancedText.setForeground(Color.GRAY);
    this.textPanel.add(this.advancedText, BorderLayout.CENTER);
    this.simpleField = new JLabel("", SwingConstants.RIGHT);
    this.success = new JLabel("", SwingConstants.RIGHT);
    Font font = this.success.getFont();
    Font boldFont = new Font(font.getName(), Font.BOLD, font.getSize());
    this.success.setForeground(new Color(0, 127, 0));
    this.success.setFont(boldFont);
    this.failure = new JLabel("", SwingConstants.RIGHT);
    this.failure.setForeground(Color.RED);
    this.failure.setFont(boldFont);
    this.error = new JLabel("", SwingConstants.RIGHT);
    this.error.setForeground(Color.RED);
    this.error.setFont(boldFont);
    this.statePanel = new JPanel(new GridLayout(1, 3));
    this.statePanel.add(this.success, BorderLayout.WEST);
    this.statePanel.add(this.failure, BorderLayout.CENTER);
    this.statePanel.add(this.error, BorderLayout.EAST);
    this.aloneSuccess = new JLabel("Passed", SwingConstants.RIGHT);
    this.aloneSuccess.setForeground(new Color(0, 127, 0));
    this.aloneSuccess.setFont(boldFont);
    this.aloneFailure = new JLabel("Failed", SwingConstants.RIGHT);
    this.aloneFailure.setForeground(Color.RED);
    this.aloneFailure.setFont(boldFont);
    this.aloneError = new JLabel("Error", SwingConstants.RIGHT);
    this.aloneError.setForeground(Color.RED);
    this.aloneError.setFont(boldFont);
  }

  public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    TestStatisticsRow rowValue = (TestStatisticsRow)value;
    JComponent result = null;
    boolean keepForeground = false;
    JComponent adjustFont = null;
    boolean container = rowValue instanceof TestContainerRow;
    switch (column) {
      case 0:
        // Test
        this.text.setText(rowValue.getText());
        String additionalText = rowValue.getAdditionalText();
        if (additionalText != null) {
          this.advancedText.setText(" (" + additionalText + ")");
        } else {
          this.advancedText.setText("");
        }
        result = this.textPanel;
        adjustFont = this.text;
        break;
      case 1:
        // Time elapsed
        result = this.setTime(rowValue.getElapsedTime());
        adjustFont = result;
        break;
      case 2:
        // Usage Delta
        result = this.setMemoryUsage(rowValue.getUsageDelta());
        adjustFont = result;
        break;
      case 3:
        // Usage Before
        result = this.setMemoryUsage(rowValue.getUsageBefore());
        adjustFont = result;
        break;
      case 4:
        // Usage After
        result = this.setMemoryUsage(rowValue.getUsageAfter());
        adjustFont = result;
        break;
      case 5:
        // Results
        int s = rowValue.getSuccessful();
        int f = rowValue.getFailed();
        int e = rowValue.getErrored();
        if (container) {
          this.success.setText((s > 0 ?
            ("P:" + s) :
            ""
          ));
          this.failure.setText((f > 0 ?
            ("F:" + f) :
            ""
          ));
          this.error.setText((e > 0 ?
            ("E:" + e) :
            ""
          ));
          result = this.statePanel;
        } else if ((s + f + e) >= 1) {
          if (s > 0) {
            result = this.aloneSuccess;
          }
          if (f > 0) {
            result = this.aloneFailure;
          }
          if (e > 0) {
            result = this.aloneError;
          }
        } else {
          this.simpleField.setText("");
          result = this.simpleField;
        }
        keepForeground = true;
        break;
      default:
    }
    result.setOpaque(true);
    if (isSelected) {
      if (!(keepForeground)) {
        result.setForeground(table.getSelectionForeground());
      }
      result.setBackground(table.getSelectionBackground());
    } else {
      if (!(keepForeground)) {
        result.setForeground(table.getForeground());
      }
      result.setBackground(table.getBackground());
    }
    if (hasFocus) {
      result.setBorder(UIManager.getBorder("Table.focusCellHighlightBorder"));
    } else {
      result.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
    }
    result.setEnabled(table.isEnabled());
    if (adjustFont != null) {
      if (container) {
        Font font = table.getFont();
        adjustFont.setFont(new Font(font.getName(), Font.BOLD, font.getSize()));
      } else {
        adjustFont.setFont(table.getFont());
      }
    }
    return result;
  }

  private JLabel setTime(long time) {
    String text = "";
    if (time >= 0) {
      text = String.format("%.3f s", time / 1000.0);
    }
    this.simpleField.setText(text);
    return this.simpleField;
  }

  private JLabel setMemoryUsage(long usage) {
    String s = String.format("%d Kb", usage / 1024);
    this.simpleField.setText(s);
    return this.simpleField;
  }
}
