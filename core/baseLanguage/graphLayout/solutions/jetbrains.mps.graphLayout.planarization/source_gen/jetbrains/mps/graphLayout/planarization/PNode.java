package jetbrains.mps.graphLayout.planarization;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.ArrayList;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import java.util.Iterator;

public class PNode extends PQNode {
  private int myHValue;
  private PQNode myHChild;
  private int myAValue;
  private PQNode myFirstAChild;
  private PQNode mySecondAChild;
  private boolean myMakeAFromH;

  public PNode() {
    super();
  }

  public PQNode makeReduction(boolean isRealPertinentRoot) {
    int numFull = 0;
    int numPartial = 0;
    int numChildren = ListSequence.fromList(getChildren()).count();
    for (PQNode node : ListSequence.fromList(getChildren())) {
      if (node.getState() == PQNode.State.FULL) {
        numFull++;
      }
      if (node.getState() == PQNode.State.PARTIAL) {
        numPartial++;
      }
    }
    if (numFull == numChildren) {
      return doP1Pattern();
    } else if (numPartial == 0) {
      return doP3Pattern();
    } else if (numPartial == 1) {
      return doP5Pattern();
    }
    return null;
  }

  public PQNode processAsPertinentRoot(List<PQNode> children, Node nextGraphNode) {
    ListSequence.fromList(this.getChildren()).removeWhere(new IWhereFilter<PQNode>() {
      public boolean accept(PQNode it) {
        return it.getState() != PQNode.State.EMPTY;
      }
    });
    children = ListSequence.fromList(children).removeWhere(new IWhereFilter<PQNode>() {
      public boolean accept(PQNode it) {
        return it.getState() == PQNode.State.EMPTY;
      }
    });
    List<PQNode> partialChildren = ListSequence.fromList(children).where(new IWhereFilter<PQNode>() {
      public boolean accept(PQNode it) {
        return it.getState() == PQNode.State.PARTIAL;
      }
    }).toListSequence();
    int numPartialChildren = ListSequence.fromList(partialChildren).count();
    PQNode newComponent = new QNode();
    PNode nextNode = new PNode();
    newComponent.addLastChild(nextNode);
    for (PQNode partialChild : ListSequence.fromList(partialChildren)) {
      SetSequence.fromSet(newComponent.getGraphNodes()).addSequence(SetSequence.fromSet(partialChild.getGraphNodes()));
    }
    List<PQNode> fullChildren = ListSequence.fromList(new ArrayList<PQNode>());
    this.addLastChild(newComponent);
    if (numPartialChildren > 2) {
      return null;
    }
    if (numPartialChildren == 0) {
      fullChildren = ListSequence.fromList(children).where(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() == PQNode.State.FULL;
        }
      }).toListSequence();
    }
    if (numPartialChildren == 1) {
      PQNode partialChild = ListSequence.fromList(partialChildren).getElement(0);
      List<PQNode> firstEmptySegment = ListSequence.fromList(new ArrayList<PQNode>());
      boolean endFirstSegment = false;
      for (PQNode child : ListSequence.fromList(partialChild.getChildren())) {
        if (child.getState() == PQNode.State.FULL) {
          endFirstSegment = true;
        } else {
          if (endFirstSegment) {
            newComponent.addLastChild(child);
          } else {
            ListSequence.fromList(firstEmptySegment).addElement(child);
          }
        }
      }
      for (PQNode child : ListSequence.fromList(firstEmptySegment).reversedList()) {
        newComponent.addFirstChild(child);
      }
      ListSequence.fromList(fullChildren).addSequence(ListSequence.fromList(partialChild.getChildren()).where(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() == PQNode.State.FULL;
        }
      }).toListSequence());
      ListSequence.fromList(fullChildren).addSequence(ListSequence.fromList(children).where(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() == PQNode.State.FULL;
        }
      }).toListSequence());
    }
    if (numPartialChildren == 2) {
      PQNode partialChild0 = ListSequence.fromList(partialChildren).getElement(0);
      List<PQNode> emptyNodes = ListSequence.fromList(partialChild0.getChildren()).where(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() == PQNode.State.EMPTY;
        }
      }).toListSequence();
      emptyNodes = ListSequence.fromList(emptyNodes).reversedList();
      for (PQNode child : ListSequence.fromList(emptyNodes)) {
        newComponent.addFirstChild(child);
      }
      PQNode partialChild1 = ListSequence.fromList(partialChildren).getElement(1);
      ((QNode) partialChild1).reverse();
      emptyNodes = ListSequence.fromList(partialChild1.getChildren()).where(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() == PQNode.State.EMPTY;
        }
      }).toListSequence();
      for (PQNode child : ListSequence.fromList(emptyNodes)) {
        newComponent.addLastChild(child);
      }
      ListSequence.fromList(fullChildren).addSequence(ListSequence.fromList(partialChild0.getChildren()).where(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() == PQNode.State.FULL;
        }
      }).toListSequence());
      ListSequence.fromList(fullChildren).addSequence(ListSequence.fromList(children).where(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() == PQNode.State.FULL;
        }
      }).toListSequence());
      ListSequence.fromList(fullChildren).addSequence(ListSequence.fromList(partialChild1.getChildren()).where(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() == PQNode.State.FULL;
        }
      }).toListSequence());
    }
    List<Edge> edgesOrder = ListSequence.fromList(new LinkedList<Edge>());
    SetSequence.fromSet(newComponent.getGraphNodes()).addSequence(SetSequence.fromSet(this.getGraphNodes()));
    for (PQNode child : ListSequence.fromList(fullChildren)) {
      SetSequence.fromSet(newComponent.getGraphNodes()).addSequence(SetSequence.fromSet(child.getGraphNodesInSubtree(edgesOrder)));
    }
    NodeWithInEdgeOrder node = null;
    for (NodeWithInEdgeOrder graphNode : SetSequence.fromSet(newComponent.getGraphNodes())) {
      if (graphNode.getNode() == nextGraphNode) {
        node = graphNode;
      }
    }
    nextNode.addGraphNode(node);
    nextNode.getGraphNode().setInEdgesOrder(edgesOrder);
    return nextNode;
  }

  /**
   * Implements P1 pattern for PQ-Tree reduction. This happens when P-Node 
   * has only full children
   */
  private PQNode doP1Pattern() {
    setState(PQNode.State.FULL);
    return this;
  }

  /**
   * Implements P3 pattern for PQ-Tree reduction. This is equal to P2 pattern
   * but for other (not a pertinent root) nodes.
   */
  public PQNode doP3Pattern() {
    PQNode newFullNode = new PNode();
    newFullNode.setState(PQNode.State.FULL);
    newFullNode.addGraphNode(this.getGraphNode());
    PQNode newEmptyNode = new PNode();
    newEmptyNode.setState(PQNode.State.EMPTY);
    newEmptyNode.addGraphNode(this.getGraphNode());
    Iterator<PQNode> nodeItr = ListSequence.fromList(getChildren()).iterator();
    while (nodeItr.hasNext()) {
      PQNode node = nodeItr.next();
      nodeItr.remove();
      if (node.getState() == PQNode.State.FULL) {
        newFullNode.addLastChild(node);
      } else {
        newEmptyNode.addLastChild(node);
      }
    }
    QNode replacement = new QNode();
    // in q-node first should go empty children, and then full children 
    replacement.addLastChild(newEmptyNode);
    replacement.addLastChild(newFullNode);
    replacement.setState(PQNode.State.PARTIAL);
    replacement.setParent(this.getParent());
    return replacement;
  }

  /**
   * Implements P5 pattern for PQ-Tree reduction. This happens when P-Node
   * has exactly one partial child and isn't pertinent root
   */
  public PQNode doP5Pattern() {
    PQNode newFullNode = new PNode();
    newFullNode.setState(PQNode.State.FULL);
    newFullNode.addGraphNode(this.getGraphNode());
    PQNode newEmptyNode = new PNode();
    newEmptyNode.setState(PQNode.State.EMPTY);
    newEmptyNode.addGraphNode(this.getGraphNode());
    QNode partialNode = null;
    Iterator<PQNode> nodeItr = ListSequence.fromList(getChildren()).iterator();
    while (nodeItr.hasNext()) {
      PQNode node = nodeItr.next();
      if (node.getState() == PQNode.State.FULL) {
        nodeItr.remove();
        newFullNode.addLastChild(node);
      }
      if (node.getState() == PQNode.State.EMPTY) {
        nodeItr.remove();
        newEmptyNode.addLastChild(node);
      }
      if (node.getState() == PQNode.State.PARTIAL) {
        partialNode = (QNode) node;
      }
    }
    // in q-node first should go empty children, and then full children 
    if (ListSequence.fromList(newFullNode.getChildren()).count() > 0) {
      partialNode.addLastChild(newFullNode);
    }
    if (ListSequence.fromList(newEmptyNode.getChildren()).count() > 0) {
      partialNode.addFirstChild(newEmptyNode);
    }
    partialNode.addGraphNode(this.getGraphNode());
    partialNode.setParent(this.getParent());
    return partialNode;
  }

  public String getType() {
    return "P";
  }

  public int getAValue() {
    return myAValue;
  }

  public void computeAValue() {
    super.computeAValue();
    if (getState() != PQNode.State.PARTIAL) {
      myAValue = 0;
      return;
    }
    List<PQNode> partialChildren = ListSequence.fromList(getChildren()).where(new IWhereFilter<PQNode>() {
      public boolean accept(PQNode it) {
        return it.getState() == PQNode.State.PARTIAL;
      }
    }).toListSequence();
    int valueFromA = 0;
    PQNode aChild = null;
    for (PQNode child : ListSequence.fromList(partialChildren)) {
      int curValue = child.getNumFullLeaves() - child.getAValue();
      if (valueFromA < curValue) {
        valueFromA = curValue;
        aChild = child;
      }
    }
    valueFromA = getNumFullLeaves() - valueFromA;
    int firstHMax = 0;
    int secondHMax = 0;
    PQNode firstHChild = null;
    PQNode secondHChild = null;
    int numPartialFullLeaves = 0;
    for (PQNode child : ListSequence.fromList(partialChildren)) {
      numPartialFullLeaves += child.getNumFullLeaves();
      int curValue = child.getNumFullLeaves() - child.getHValue();
      if (curValue > firstHMax) {
        secondHMax = firstHMax;
        secondHChild = firstHChild;
        firstHMax = curValue;
        firstHChild = child;
      } else {
        if (curValue > secondHMax) {
          secondHMax = curValue;
          secondHChild = child;
        }
      }
    }
    int valueFromH = numPartialFullLeaves - firstHMax - secondHMax;
    if (valueFromA < valueFromH) {
      myMakeAFromH = false;
      myAValue = valueFromA;
      myFirstAChild = aChild;
      mySecondAChild = null;
    } else {
      myMakeAFromH = true;
      myAValue = valueFromH;
      myFirstAChild = firstHChild;
      mySecondAChild = secondHChild;
    }
    if (myAValue > INF) {
      myAValue = INF;
    }
  }

  public void makeADeletion() {
    if (getState() == PQNode.State.FULL || getState() == PQNode.State.EMPTY) {
      return;
    } else {
      if (myMakeAFromH) {
        for (PQNode child : ListSequence.fromList(getChildren())) {
          if (child.getState() == PQNode.State.PARTIAL) {
            if (child == myFirstAChild || child == mySecondAChild) {
              child.makeHDeletion();
            } else {
              child.makeEmpty();
            }
          }
        }
      } else {
        for (PQNode child : ListSequence.fromList(getChildren())) {
          if (child == myFirstAChild) {
            child.makeADeletion();
          } else {
            child.makeEmpty();
          }
        }
      }
    }
  }

  public int getHValue() {
    return myHValue;
  }

  public void computeHValue() {
    super.computeHValue();
    if (getState() != PQNode.State.PARTIAL) {
      myHValue = 0;
      return;
    }
    if (getState() == PQNode.State.FULL || getState() == PQNode.State.EMPTY) {
      myHValue = 0;
      myHChild = null;
    } else {
      myHChild = null;
      myHValue = 0;
      int numPartialFullLeaves = 0;
      for (PQNode child : ListSequence.fromList(getChildren())) {
        if (child.getState() == PQNode.State.PARTIAL) {
          numPartialFullLeaves += child.getNumFullLeaves();
          int childHValue = child.getHValue();
          if (myHValue < child.getNumFullLeaves() - childHValue) {
            myHValue = child.getNumFullLeaves() - childHValue;
            myHChild = child;
          }
        }
      }
      myHValue = numPartialFullLeaves - myHValue;
    }
    if (myHValue > INF) {
      myHValue = INF;
    }
  }

  public void makeHDeletion() {
    if (getState() == PQNode.State.FULL || getState() == PQNode.State.EMPTY) {
      return;
    } else {
      for (PQNode child : ListSequence.fromList(getChildren())) {
        if (child.getState() == PQNode.State.PARTIAL) {
          if (child == myHChild) {
            child.makeHDeletion();
          } else {
            child.makeEmpty();
          }
        }
      }
    }
  }
}
