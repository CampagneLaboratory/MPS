package jetbrains.mps.graphLayout.planarGraph;

/*Generated by MPS */

import java.util.List;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.SetSequence;

public class EmbeddedGraph {
  private List<Face> myFaces;
  private Map<Edge, List<Face>> myEdgeToFacesMap;

  public EmbeddedGraph() {
    myFaces = ListSequence.fromList(new ArrayList<Face>());
    myEdgeToFacesMap = MapSequence.fromMap(new HashMap<Edge, List<Face>>());
  }

  public void addFace(Face face) {
    ListSequence.fromList(myFaces).addElement(face);
    for (Dart dart : ListSequence.fromList(face.getDarts())) {
      Edge edge = dart.getEdge();
      if (MapSequence.fromMap(myEdgeToFacesMap).get(edge) == null) {
        MapSequence.fromMap(myEdgeToFacesMap).put(edge, ListSequence.fromList(new ArrayList<Face>()));
      }
      ListSequence.fromList(MapSequence.fromMap(myEdgeToFacesMap).get(edge)).addElement(face);
    }
  }

  public Graph getDualGraph() {
    Graph dualGraph = new Graph();
    Map<Face, Node> faceToNodeMap = MapSequence.fromMap(new HashMap<Face, Node>());
    for (Face face : ListSequence.fromList(myFaces)) {
      MapSequence.fromMap(faceToNodeMap).put(face, dualGraph.addNode());
    }
    for (Edge edge : SetSequence.fromSet(MapSequence.fromMap(myEdgeToFacesMap).keySet())) {
      Node faceNode1 = MapSequence.fromMap(faceToNodeMap).get(ListSequence.fromList(MapSequence.fromMap(myEdgeToFacesMap).get(edge)).getElement(0));
      Node faceNode2 = MapSequence.fromMap(faceToNodeMap).get(ListSequence.fromList(MapSequence.fromMap(myEdgeToFacesMap).get(edge)).getElement(1));
      faceNode1.addEdgeTo(faceNode2);
    }
    return dualGraph;
  }
}
