package jetbrains.mps.graphLayout.planarGraph;

/*Generated by MPS */

import java.util.List;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;

public class EmbeddedGraph {
  private List<Face> myFaces;
  private Map<Edge, List<Face>> myAdjacentFacesMap;
  private Graph myGraph;
  private Face myOuterFace;

  public EmbeddedGraph(Graph graph) {
    myFaces = ListSequence.fromList(new ArrayList<Face>());
    myAdjacentFacesMap = MapSequence.fromMap(new HashMap<Edge, List<Face>>());
    myGraph = graph;
  }

  public void addFace(Face face) {
    ListSequence.fromList(myFaces).addElement(face);
    for (Dart dart : ListSequence.fromList(face.getDarts())) {
      Edge edge = dart.getEdge();
      this.adjustEdge(edge, face);
    }
  }

  private void adjustEdge(Edge edge, Face face) {
    if (MapSequence.fromMap(myAdjacentFacesMap).get(edge) == null) {
      MapSequence.fromMap(myAdjacentFacesMap).put(edge, ListSequence.fromList(new ArrayList<Face>()));
    }
    ListSequence.fromList(MapSequence.fromMap(myAdjacentFacesMap).get(edge)).addElement(face);
  }

  public void removeFace(Face face) {
    ListSequence.fromList(myFaces).removeElement(face);
    for (Dart dart : ListSequence.fromList(face.getDarts())) {
      this.unadjustEdge(dart.getEdge(), face);
    }
  }

  private void unadjustEdge(Edge edge, Face face) {
    ListSequence.fromList(MapSequence.fromMap(myAdjacentFacesMap).get(edge)).removeElement(face);
    if (ListSequence.fromList(MapSequence.fromMap(myAdjacentFacesMap).get(edge)).count() == 0) {
      MapSequence.fromMap(myAdjacentFacesMap).removeKey(edge);
    }
  }

  public void setDart(Face face, int pos, Dart dart) {
    Dart oldDart = ListSequence.fromList(face.getDarts()).getElement(pos);
    unadjustEdge(oldDart.getEdge(), face);
    ListSequence.fromList(face.getDarts()).setElement(pos, dart);
    adjustEdge(dart.getEdge(), face);
  }

  public void insertDart(Face face, int pos, Dart dart) {
    ListSequence.fromList(face.getDarts()).insertElement(pos, dart);
    adjustEdge(dart.getEdge(), face);
  }

  public List<Face> getFaces() {
    return this.myFaces;
  }

  public Map<Edge, List<Face>> getAdjacentFacesMap() {
    return this.myAdjacentFacesMap;
  }

  public Graph getGraph() {
    return this.myGraph;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    for (Face face : ListSequence.fromList(myFaces)) {
      builder.append(face + "\n");
    }
    return builder.toString();
  }

  public Face getOuterFace() {
    return this.myOuterFace;
  }

  public void setOuterFace(Face outerFace) {
    this.myOuterFace = outerFace;
  }

  public boolean isOuterFace(Face face) {
    return face == myOuterFace;
  }
}
