package jetbrains.mps.graphLayout.planarization;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.graphLayout.graph.Node;

public class Leaf extends PQNode {
  private PQTree myTree;
  private Object myData;

  public Leaf(PQTree tree) {
    myTree = tree;
    myTree.addLeaf(this);
  }

  public PQNode makeReduction(boolean isRealPertinentRoot) {
    if (getState() == null) {
      setState(PQNode.State.EMPTY);
    }
    return this;
  }

  public String getType() {
    return "L";
  }

  public Object getData() {
    return this.myData;
  }

  public void setData(Object data) {
    this.myData = data;
  }

  @Override
  public String toString(int offset) {
    String spaces = "";
    for (int i = 0; i < offset; i++) {
      spaces += " ";
    }
    return spaces + "leaf L nodes: " + getGraphNodes() + " data = " + myData + " state = " + getState() + "\n";
  }

  public PQNode processAsPertinentRoot(List<PQNode> children, Node nextGraphNode) {
    return null;
  }

  public void makeADeletion() {
  }

  public void makeHDeletion() {
  }

  public int getAValue() {
    return 0;
  }

  public int getHValue() {
    return 0;
  }

  public void computeAValue() {
  }

  public void computeHValue() {
  }
}
