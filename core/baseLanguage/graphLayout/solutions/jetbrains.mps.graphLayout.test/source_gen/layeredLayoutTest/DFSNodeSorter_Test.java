package layeredLayoutTest;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.graphLayout.graph.Graph;
import sampleGraphs.SimpleDirectedGraphs;
import jetbrains.mps.graphLayout.layeredLayout.NodeLayers;
import jetbrains.mps.graphLayout.layeredLayout.NodeLayeredOrder;
import jetbrains.mps.graphLayout.layeredLayout.DFSNodeSorter;
import junit.framework.Assert;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import sampleGraphs.GraphsForLayers;

public class DFSNodeSorter_Test extends TestCase {
  public void test_Chain() throws Exception {
    Graph chain = SimpleDirectedGraphs.chain(3);
    NodeLayers layers = new NodeLayers(chain);
    layers.set(chain.getNode(0), 0);
    layers.set(chain.getNode(1), 1);
    layers.set(chain.getNode(2), 2);
    NodeLayeredOrder order = new DFSNodeSorter().sortNodes(chain, layers);
    Assert.assertTrue(ListSequence.fromList(order.getOrder(0)).count() == 1);
    Assert.assertTrue(ListSequence.fromList(order.getOrder(1)).count() == 1);
    Assert.assertTrue(ListSequence.fromList(order.getOrder(2)).count() == 1);
    Assert.assertTrue(ListSequence.fromList(order.getOrder(0)).getElement(0) == chain.getNode(0));
    Assert.assertTrue(ListSequence.fromList(order.getOrder(1)).getElement(0) == chain.getNode(1));
    Assert.assertTrue(ListSequence.fromList(order.getOrder(2)).getElement(0) == chain.getNode(2));
  }

  public void test_simpleFourLeyers() throws Exception {
    Graph simpleGraph = GraphsForLayers.simpleFourLayersGraph();
    NodeLayers layers = new NodeLayers(simpleGraph);
    layers.set(simpleGraph.getNode(0), 0);
    layers.set(simpleGraph.getNode(1), 1);
    layers.set(simpleGraph.getNode(2), 2);
    layers.set(simpleGraph.getNode(3), 3);
    layers.set(simpleGraph.getNode(4), 1);
    NodeLayeredOrder order = new DFSNodeSorter().sortNodes(simpleGraph, layers);
    Assert.assertTrue(ListSequence.fromList(order.getOrder(0)).count() == 1);
    Assert.assertTrue(ListSequence.fromList(order.getOrder(1)).count() == 2);
    Assert.assertTrue(ListSequence.fromList(order.getOrder(2)).count() == 1);
    Assert.assertTrue(ListSequence.fromList(order.getOrder(3)).count() == 1);
    Assert.assertTrue(ListSequence.fromList(order.getOrder(0)).getElement(0) == simpleGraph.getNode(0));
    Assert.assertTrue(ListSequence.fromList(order.getOrder(1)).getElement(0) == simpleGraph.getNode(1));
    Assert.assertTrue(ListSequence.fromList(order.getOrder(1)).getElement(1) == simpleGraph.getNode(4));
    Assert.assertTrue(ListSequence.fromList(order.getOrder(2)).getElement(0) == simpleGraph.getNode(2));
    Assert.assertTrue(ListSequence.fromList(order.getOrder(3)).getElement(0) == simpleGraph.getNode(3));
  }
}
