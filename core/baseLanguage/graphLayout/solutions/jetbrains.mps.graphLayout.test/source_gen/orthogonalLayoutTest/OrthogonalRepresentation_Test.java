package orthogonalLayoutTest;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.graphLayout.graph.Graph;
import visualization.GraphIO;
import java.util.Scanner;
import jetbrains.mps.graphLayout.planarGraph.EmbeddedGraph;
import jetbrains.mps.graphLayout.planarization.PQPlanarizationFinder;
import java.util.Map;
import jetbrains.mps.graphLayout.planarGraph.Dart;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.graphLayout.flowOrthogonalLayout.OrthogonalRepresentation;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import junit.framework.Assert;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.graphLayout.flowOrthogonalLayout.EdgeLengthComputer;
import jetbrains.mps.graphLayout.graph.Edge;

public class OrthogonalRepresentation_Test extends TestCase {
  public void test_test1() throws Exception {
    String graphString = "4 4  0 1  1 2  2 3  3 0";
    Graph graph = GraphIO.scanGraph(new Scanner(graphString));
    test(graph);
  }

  public void test_test2() throws Exception {
    String graphString = "5 9  0 1  0 2  0 3  0 4  1 2  1 3  1 4  2 3  2 4";
    Graph graph = GraphIO.scanGraph(new Scanner(graphString));
    test(graph);
  }

  public void test_test3() throws Exception {
    String graphString = "9 13  0 1  0 8  1 2  1 4  2 3  2 7  3 7  3 4  3 6  4 5  4 6  5 8  7 8";
    Graph graph = GraphIO.scanGraph(new Scanner(graphString));
    test(graph);
  }

  public void test_test4() throws Exception {
    String graphString = "6 9  0 1  0 2  0 4  1 3  1 5  2 3  2 4  3 5  4 5";
    Graph graph = GraphIO.scanGraph(new Scanner(graphString));
    test(graph);
  }

  public void test_test5() throws Exception {
    String graphString = "19 28  0 1  0 2  0 4  1 8  2 3  2 9  3 4  3 5  4 6  5 6  5 10  6 7  7 8  7 13  " + "8 18  9 10  9 17  10 11  11 12  11 14  12 13  12 15  13 16  14 15  14 17  15 16  16 18  17 18";
    Graph graph = GraphIO.scanGraph(new Scanner(graphString));
    test(graph);
  }

  public void test(Graph graph) {
    EmbeddedGraph embeddedGraph = new PQPlanarizationFinder().find(graph);
    checkFullEmbedding(embeddedGraph);
    Map<Dart, Integer> bends = MapSequence.fromMap(new HashMap<Dart, Integer>());
    Map<Dart, Integer> angles = MapSequence.fromMap(new HashMap<Dart, Integer>());
    OrthogonalRepresentation.getRepresentation(embeddedGraph, bends, angles);
    OrthogonalRepresentationChecker.checkBends(graph, bends);
    OrthogonalRepresentation.replaceBendsByNodes(embeddedGraph, bends, angles);
    OrthogonalRepresentationChecker.checkBends(graph, bends);
    for (Dart bend : SetSequence.fromSet(MapSequence.fromMap(bends).keySet())) {
      Assert.assertTrue(MapSequence.fromMap(bends).get(bend) == 0);
    }
    System.out.println(embeddedGraph);
    Map<Dart, Integer> directions = OrthogonalRepresentation.getDirections(embeddedGraph, angles);
    for (final Node node : ListSequence.fromList(graph.getNodes())) {
      System.out.println("node: " + node);
      for (Dart dart : SetSequence.fromSet(MapSequence.fromMap(bends).keySet()).where(new IWhereFilter<Dart>() {
        public boolean accept(Dart it) {
          return it.getSource() == node;
        }
      })) {
        System.out.println("  -> dart " + dart + ": " + MapSequence.fromMap(angles).get(dart) + ", direction: " + getDirection(MapSequence.fromMap(directions).get(dart)));
      }
    }
    EdgeLengthComputer placer = new EdgeLengthComputer();
    placer.compute(embeddedGraph, directions);
  }

  private void checkFullEmbedding(EmbeddedGraph embeddedGraph) {
    for (Edge edge : ListSequence.fromList(embeddedGraph.getGraph().getEdges())) {
      Assert.assertTrue(MapSequence.fromMap(embeddedGraph.getAdjacentFacesMap()).containsKey(edge));
    }
  }

  private String getDirection(int direction) {
    if (direction == 0) {
      return "right";
    }
    if (direction == 1) {
      return "down";
    }
    if (direction == 2) {
      return "left";
    }
    if (direction == 3) {
      return "up";
    }
    return "error";
  }
}
