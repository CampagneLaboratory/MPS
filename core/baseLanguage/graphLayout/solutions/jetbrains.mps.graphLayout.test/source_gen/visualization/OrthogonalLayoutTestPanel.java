package visualization;

/*Generated by MPS */

import javax.swing.JPanel;
import java.awt.Dimension;
import javax.swing.JTextArea;
import jetbrains.mps.graphLayout.stOrthogonalLayout.RectOrthogonalLayouter;
import jetbrains.mps.graphLayout.graphLayout.GraphLayout;
import javax.swing.JTextField;
import java.awt.GridBagLayout;
import javax.swing.BorderFactory;
import java.awt.GridBagConstraints;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.graphLayout.graph.Graph;
import sampleGraphs.RandomGraphGenerator;
import javax.swing.JOptionPane;
import java.util.List;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.graphLayout.graph.Edge;
import java.util.Scanner;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import javax.swing.JScrollPane;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.JLabel;
import java.awt.Graphics;

public class OrthogonalLayoutTestPanel extends JPanel {
  private static Dimension FRAME_DIMENSION = new Dimension(800, 600);
  private static int DEFAULT_NODE_SIZE = 30;

  private JTextArea myTextArea;
  private OrthogonalLayoutTestPanel.MyGraphLabel myGraphLabel;
  private RectOrthogonalLayouter myLayouter;
  private LayoutPainter myPainter;
  private GraphLayout myCurrentLayout;
  private JTextField myNumEdgesField;
  private JTextField myNumNodesField;

  public OrthogonalLayoutTestPanel() {
    this.setLayout(new GridBagLayout());
    createDoLayoutButton();
    createNewGraphButton();
    createTextPanel();
    createGraphPanel();
    myLayouter = new RectOrthogonalLayouter();
    myLayouter.setEdgeDistance(15);
    myCurrentLayout = null;
    myPainter = new LayoutPainter();
  }

  private void createNewGraphButton() {
    myNumNodesField = new JTextField(10);
    myNumNodesField.setBorder(BorderFactory.createTitledBorder("nodes:"));
    myNumEdgesField = new JTextField(10);
    myNumEdgesField.setBorder(BorderFactory.createTitledBorder("edges:"));
    GridBagConstraints c = new GridBagConstraints();
    c.gridy = 0;
    c.gridx = 1;
    c.fill = GridBagConstraints.HORIZONTAL;
    this.add(myNumNodesField);
    c.gridx = 2;
    this.add(myNumEdgesField);
    c.gridy = 3;
    c.gridy = 4;
    JButton button = new JButton("generate graph!");
    button.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        try {
          int numNodes = Integer.parseInt(myNumNodesField.getText());
          int numEdges = Integer.parseInt(myNumEdgesField.getText());
          Graph g;
          g = RandomGraphGenerator.generateLayeredGraph(numNodes, numEdges);
          writeGraph(g);
        } catch (Exception e) {
          JOptionPane.showMessageDialog(OrthogonalLayoutTestPanel.this, "enter number of nodes and edges...\n" + e.toString());
        }
      }
    });
    this.add(button);
  }

  private void createDoLayoutButton() {
    JButton button = new JButton("do layout!");
    GridBagConstraints c = new GridBagConstraints();
    button.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        layoutGraph();
        myGraphLabel.repaint();
      }
    });
    c.fill = GridBagConstraints.HORIZONTAL;
    c.anchor = GridBagConstraints.FIRST_LINE_START;
    c.gridx = 0;
    c.gridy = 0;
    c.gridwidth = 1;
    c.gridheight = 1;
    this.add(button);
  }

  private void writeGraph(Graph graph) {
    int numEdges = 0;
    List<Node> nodes = graph.getNodes();
    for (Node node : ListSequence.fromList(nodes)) {
      numEdges += ListSequence.fromList(node.getOutEdges()).count();
    }
    myTextArea.setText("");
    myTextArea.append(graph.getNumNodes() + " " + numEdges + "\n");
    for (Node node : ListSequence.fromList(nodes)) {
      for (Edge edge : ListSequence.fromList(node.getOutEdges())) {
        myTextArea.append(edge.getSource().getIndex() + " " + edge.getTarget().getIndex() + "\n");
      }
    }
  }

  private void layoutGraph() {
    Scanner scanner = new Scanner(myTextArea.getText());
    Map<Node, Integer> xSize = MapSequence.fromMap(new HashMap<Node, Integer>());
    Map<Node, Integer> ySize = MapSequence.fromMap(new HashMap<Node, Integer>());
    Graph g = null;
    try {
      g = GraphIO.scanGraph(scanner);
      while (scanner.hasNextInt()) {
        Node node = g.getNode(scanner.nextInt());
        MapSequence.fromMap(xSize).put(node, scanner.nextInt());
        MapSequence.fromMap(ySize).put(node, scanner.nextInt());
      }
    } catch (IllegalArgumentException e) {
      JOptionPane.showMessageDialog(this, "something is wrong in graph...");
    }
    if (g != null) {
      for (Node node : ListSequence.fromList(g.getNodes())) {
        if (MapSequence.fromMap(xSize).get(node) == null) {
          MapSequence.fromMap(xSize).put(node, DEFAULT_NODE_SIZE);
          MapSequence.fromMap(ySize).put(node, DEFAULT_NODE_SIZE);
        }
      }
      myCurrentLayout = myLayouter.doLayout(g, xSize, ySize);
    }
  }

  private void createTextPanel() {
    myTextArea = new JTextArea(20, 20);
    myTextArea.setBorder(BorderFactory.createTitledBorder("enter graph here"));
    GridBagConstraints c = new GridBagConstraints();
    c.fill = GridBagConstraints.VERTICAL;
    c.gridheight = GridBagConstraints.REMAINDER;
    c.gridx = 0;
    c.gridy = 1;
    c.weighty = 1;
    this.add(myTextArea, c);
  }

  private void createGraphPanel() {
    myGraphLabel = new OrthogonalLayoutTestPanel.MyGraphLabel();
    myGraphLabel.setBorder(BorderFactory.createTitledBorder("graph layout"));
    GridBagConstraints c = new GridBagConstraints();
    c.fill = GridBagConstraints.BOTH;
    c.gridwidth = GridBagConstraints.REMAINDER;
    c.gridheight = GridBagConstraints.REMAINDER;
    c.gridx = 1;
    c.gridy = 1;
    c.weightx = 1;
    c.weightx = 1;
    this.add(new JScrollPane(myGraphLabel), c);
  }

  private static void create() {
    JFrame frame = new JFrame();
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.add(new OrthogonalLayoutTestPanel());
    frame.setMinimumSize(OrthogonalLayoutTestPanel.FRAME_DIMENSION);
    frame.pack();
    frame.setVisible(true);
  }

  public static void main(String[] args) {
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        create();
      }
    });
  }

  private class MyGraphLabel extends JLabel {
    public MyGraphLabel() {
      super();
    }

    @Override
    public void paintComponent(Graphics graphics) {
      if (myCurrentLayout == null) {
        graphics.drawString("no graph yet!!!", 50, 50);
      } else {
        myPainter.paint(myCurrentLayout, graphics);
      }
    }
  }
}
