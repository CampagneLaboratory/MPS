package visualization;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Scanner;
import java.io.PrintWriter;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.graphLayout.graph.Edge;

public class GraphIO {
  public static Graph scanGraph(Scanner scanner) throws IllegalArgumentException {
    try {
      Graph graph = new Graph();
      int numNodes = scanner.nextInt();
      for (int i = 0; i < numNodes; i++) {
        graph.addNode();
      }
      int numEdges = scanner.nextInt();
      for (int i = 0; i < numEdges; i++) {
        int source = scanner.nextInt();
        int target = scanner.nextInt();
        graph.getNode(source).addEdgeTo(graph.getNode(target));
      }
      return graph;
    } catch (Exception e) {
      throw new IllegalArgumentException("invalid input", e);
    }
  }

  public static void writeGraph(Graph graph, PrintWriter writer) {
    int numEdges = 0;
    for (Node node : ListSequence.fromList(graph.getNodes())) {
      numEdges += ListSequence.fromList(node.getOutEdges()).count();
    }
    writer.println(graph.getNumNodes() + " " + numEdges);
    for (Node node : ListSequence.fromList(graph.getNodes())) {
      for (Edge edge : ListSequence.fromList(node.getOutEdges())) {
        writer.println(edge.getSource().getIndex() + " " + edge.getTarget().getIndex());
      }
    }
  }
}
