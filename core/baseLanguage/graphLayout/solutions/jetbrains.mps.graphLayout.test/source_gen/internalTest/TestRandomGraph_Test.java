package internalTest;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.graphLayout.graph.Graph;
import sampleGraphs.RandomGraphGenerator;
import junit.framework.Assert;
import jetbrains.mps.graphLayout.layeredLayout.NodeLayers;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.MapSequence;

public class TestRandomGraph_Test extends TestCase {
  public void test_threeLayersGraph() throws Exception {
    int[] numInLayer = new int[3];
    numInLayer[0] = 4;
    numInLayer[1] = 2;
    numInLayer[2] = 3;
    int numEdges = 10;
    Graph g = RandomGraphGenerator.generateFixedNumLayers(numInLayer, numEdges);
    testEdges(g, getLayers(g, numInLayer));
    numEdges = 0;
    int minNumEdges = 0;
    for (int i = 0; i < numInLayer.length; i++) {
      if (i > 0) {
        minNumEdges += numInLayer[i];
      }
      for (int j = i + 1; j < numInLayer.length; j++) {
        numEdges += numInLayer[i] * numInLayer[j];
      }
    }
    try {
      RandomGraphGenerator.generateFixedNumLayers(numInLayer, numEdges + 1);
      Assert.fail();
    } catch (IllegalArgumentException e) {
      // expected exception 
    }
    try {
      RandomGraphGenerator.generateFixedNumLayers(numInLayer, minNumEdges - 1);
      Assert.fail();
    } catch (IllegalArgumentException e) {
      // expected exception 
    }
    RandomGraphGenerator.generateFixedNumLayers(numInLayer, numEdges);
    RandomGraphGenerator.generateFixedNumLayers(numInLayer, minNumEdges);
  }

  public NodeLayers getLayers(Graph g, int[] numInLayer) {
    NodeLayers layers = new NodeLayers(g);
    int cur = 0;
    for (int i = 0; i < numInLayer.length; i++) {
      for (int j = 0; j < numInLayer[i]; j++) {
        layers.set(g.getNode(cur), i);
        cur++;
      }
    }
    return layers;
  }

  public void testEdges(Graph g, NodeLayers layers) {
    Map<Node, Integer> nodeLayers = layers.getNodeLayers();
    for (Node node : ListSequence.fromList(g.getNodes())) {
      for (Edge edge : ListSequence.fromList(node.getInEdges())) {
        Assert.assertTrue(MapSequence.fromMap(nodeLayers).get(edge.getSource()) < MapSequence.fromMap(nodeLayers).get(edge.getTarget()));
      }
    }
  }
}
