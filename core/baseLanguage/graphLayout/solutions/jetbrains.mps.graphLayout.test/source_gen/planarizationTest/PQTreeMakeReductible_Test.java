package planarizationTest;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.graphLayout.planarization.PQTree;
import java.util.List;
import jetbrains.mps.graphLayout.planarization.Leaf;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.graphLayout.planarization.PQNode;
import junit.framework.Assert;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.graphLayout.planarization.PNode;
import jetbrains.mps.graphLayout.planarization.QNode;

public class PQTreeMakeReductible_Test extends TestCase {
  public void test_testQNodeH1() throws Exception {
    PQTree tree = new PQTree();
    List<Leaf> leaves = ListSequence.fromList(new ArrayList<Leaf>());
    this.createSampleTree(tree, leaves, 3, ListSequence.fromListAndArray(new ArrayList<Integer>(), 2, 1, 3));
    ListSequence.fromList(leaves).getElement(0).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(2).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(4).setState(PQNode.State.FULL);
    tree.makeReducible();
    System.out.println(tree);
    Assert.assertTrue(ListSequence.fromList(tree.getLeaves()).where(new IWhereFilter<Leaf>() {
      public boolean accept(Leaf it) {
        return it.getState() == PQNode.State.FULL;
      }
    }).count() == 3);
  }

  public void test_tesctQNodeH2() throws Exception {
    PQTree tree = new PQTree();
    List<Leaf> leaves = ListSequence.fromList(new ArrayList<Leaf>());
    this.createSampleTree(tree, leaves, 3, ListSequence.fromListAndArray(new ArrayList<Integer>(), 2, 1, 3));
    ListSequence.fromList(leaves).getElement(0).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(4).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(5).setState(PQNode.State.FULL);
    tree.makeReducible();
    System.out.println(tree);
    Assert.assertTrue(ListSequence.fromList(tree.getLeaves()).where(new IWhereFilter<Leaf>() {
      public boolean accept(Leaf it) {
        return it.getState() == PQNode.State.FULL;
      }
    }).count() == 2);
  }

  public void test_testQNodeH3() throws Exception {
    PQTree tree = new PQTree();
    List<Leaf> leaves = ListSequence.fromList(new ArrayList<Leaf>());
    this.createSampleTree(tree, leaves, 3, ListSequence.fromListAndArray(new ArrayList<Integer>(), 2, 2, 3));
    ListSequence.fromList(leaves).getElement(0).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(2).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(4).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(5).setState(PQNode.State.FULL);
    System.out.println(tree);
    System.out.println("after:");
    tree.makeReducible();
    System.out.println(tree);
    Assert.assertTrue(ListSequence.fromList(tree.getLeaves()).where(new IWhereFilter<Leaf>() {
      public boolean accept(Leaf it) {
        return it.getState() == PQNode.State.FULL;
      }
    }).count() == 3);
  }

  public void test_testQNodeH4() throws Exception {
    PQTree tree = new PQTree();
    List<Leaf> leaves = ListSequence.fromList(new ArrayList<Leaf>());
    this.createSampleTree(tree, leaves, 4, ListSequence.fromListAndArray(new ArrayList<Integer>(), 2, 1, 1, 3));
    ListSequence.fromList(leaves).getElement(0).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(1).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(3).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(5).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(6).setState(PQNode.State.FULL);
    System.out.println(tree);
    System.out.println("after:");
    tree.makeReducible();
    System.out.println(tree);
    Assert.assertTrue(ListSequence.fromList(tree.getLeaves()).where(new IWhereFilter<Leaf>() {
      public boolean accept(Leaf it) {
        return it.getState() == PQNode.State.FULL;
      }
    }).count() == 3);
  }

  public void test_testQNodeH5() throws Exception {
    PQTree tree = new PQTree();
    List<Leaf> leaves = ListSequence.fromList(new ArrayList<Leaf>());
    this.createSampleTree(tree, leaves, 5, ListSequence.fromListAndArray(new ArrayList<Integer>(), 2, 1, 1, 2, 1, 1));
    ListSequence.fromList(leaves).getElement(0).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(1).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(3).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(4).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(5).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(6).setState(PQNode.State.FULL);
    System.out.println(tree);
    System.out.println("after:");
    tree.makeReducible();
    System.out.println(tree);
    Assert.assertTrue(ListSequence.fromList(tree.getLeaves()).where(new IWhereFilter<Leaf>() {
      public boolean accept(Leaf it) {
        return it.getState() == PQNode.State.FULL;
      }
    }).count() == 4);
  }

  public void test_test1() throws Exception {
    PQTree tree = new PQTree();
    List<Leaf> leaves = ListSequence.fromList(new ArrayList<Leaf>());
    PNode root = new PNode();
    tree.setRoot(root);
    addLeavesToNode(root, 1, leaves, tree);
    QNode qNode = new QNode();
    root.addLastChild(qNode);
    addLeavesToNode(qNode, 1, leaves, tree);
    PNode pNode1 = new PNode();
    qNode.addFirstChild(pNode1);
    addLeavesToNode(pNode1, 2, leaves, tree);
    PNode pNode2 = new PNode();
    qNode.addLastChild(pNode2);
    addLeavesToNode(pNode2, 2, leaves, tree);
    makeEmpty(tree);
    ListSequence.fromList(leaves).getElement(0).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(1).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(2).setState(PQNode.State.FULL);
    ListSequence.fromList(leaves).getElement(4).setState(PQNode.State.FULL);
    System.out.println(tree);
    System.out.println("after:");
    tree.makeReducible();
    System.out.println(tree);
  }

  public void addLeavesToNode(PQNode node, int num, List<Leaf> allLeaves, PQTree tree) {
    for (int i = 0; i < num; i++) {
      Leaf cur = new Leaf(tree);
      ListSequence.fromList(allLeaves).addElement(cur);
      node.addLastChild(cur);
    }
  }

  private void createSampleTree(PQTree tree, List<Leaf> leaves, int numChildren, List<Integer> num) {
    QNode node = new QNode();
    tree.setRoot(node);
    for (int i = 0; i < numChildren; i++) {
      PNode cur = new PNode();
      addLeavesToNode(cur, ListSequence.fromList(num).getElement(i), leaves, tree);
      node.addLastChild(cur);
    }
    this.makeEmpty(tree);
  }

  private void makeEmpty(PQTree tree) {
    for (Leaf leaf : ListSequence.fromList(tree.getLeaves())) {
      leaf.setState(PQNode.State.EMPTY);
    }
  }
}
