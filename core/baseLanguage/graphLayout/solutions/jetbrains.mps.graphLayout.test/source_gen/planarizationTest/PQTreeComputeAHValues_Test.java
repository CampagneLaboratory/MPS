package planarizationTest;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.graphLayout.planarization.PQTree;
import java.util.List;
import jetbrains.mps.graphLayout.planarization.Leaf;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.graphLayout.planarization.PQNode;
import junit.framework.Assert;
import jetbrains.mps.graphLayout.planarization.PNode;
import jetbrains.mps.graphLayout.planarization.QNode;
import java.util.Set;

public class PQTreeComputeAHValues_Test extends TestCase {
  public void test_test1() throws Exception {
    PQTree tree = new PQTree();
    List<Leaf> leaves = ListSequence.fromList(new ArrayList<Leaf>());
    tree.setRoot(createSampleQNode(tree, leaves, 3, ListSequence.fromListAndArray(new ArrayList<Integer>(), 2, 1, 2)));
    computeValues(tree, SetSequence.fromSetAndArray(new HashSet<Leaf>(), ListSequence.fromList(leaves).getElement(0), ListSequence.fromList(leaves).getElement(2), ListSequence.fromList(leaves).getElement(4)));
    PQNode root = tree.getRoot();
    Assert.assertTrue(root.getAValue() == 0);
    Assert.assertTrue(root.getHValue() == 2);
  }

  public void test_test2() throws Exception {
    PQTree tree = new PQTree();
    List<Leaf> leaves = ListSequence.fromList(new ArrayList<Leaf>());
    PNode root = new PNode();
    tree.setRoot(root);
    root.setState(PQNode.State.PARTIAL);
    addLeavesToNode(root, 1, leaves, tree);
    QNode node = createSampleQNode(tree, leaves, 3, ListSequence.fromListAndArray(new ArrayList<Integer>(), 2, 1, 2));
    root.addLastChild(node);
    computeValues(tree, SetSequence.fromSetAndArray(new HashSet<Leaf>(), ListSequence.fromList(leaves).getElement(0), ListSequence.fromList(leaves).getElement(1), ListSequence.fromList(leaves).getElement(3), ListSequence.fromList(leaves).getElement(5)));
    System.out.println("a: " + root.getAValue());
    System.out.println("h: " + root.getHValue());
  }

  public void computeValues(PQTree tree, Set<Leaf> fullLeaves) {
    makeEmpty(tree);
    for (Leaf leaf : SetSequence.fromSet(fullLeaves)) {
      leaf.setState(PQNode.State.FULL);
    }
    tree.findPertinentRoot();
    PQNode root = tree.getRoot();
    root.computeHValue();
    root.computeAValue();
  }

  public void addLeavesToNode(PQNode node, int num, List<Leaf> allLeaves, PQTree tree) {
    for (int i = 0; i < num; i++) {
      Leaf cur = new Leaf(tree);
      ListSequence.fromList(allLeaves).addElement(cur);
      node.addLastChild(cur);
    }
  }

  private QNode createSampleQNode(PQTree tree, List<Leaf> leaves, int numChildren, List<Integer> num) {
    QNode node = new QNode();
    for (int i = 0; i < numChildren; i++) {
      PNode cur = new PNode();
      addLeavesToNode(cur, ListSequence.fromList(num).getElement(i), leaves, tree);
      node.addLastChild(cur);
    }
    return node;
  }

  private void makeEmpty(PQTree tree) {
    for (Leaf leaf : ListSequence.fromList(tree.getLeaves())) {
      leaf.setState(PQNode.State.EMPTY);
    }
  }
}
