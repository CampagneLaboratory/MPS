package jetbrains.mps.graphLayout.util;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public abstract class OldPQTreeNode {
  private List<OldPQTreeNode> myChildren;
  private OldPQTreeNode myParent;
  private OldPQTreeNode.State myState;

  public OldPQTreeNode() {
    myChildren = ListSequence.fromList(new ArrayList<OldPQTreeNode>());
    myState = null;
    myParent = null;
  }

  public abstract OldPQTreeNode makeReduction(boolean isPertinentRoot);

  public void setState(OldPQTreeNode.State state) {
    myState = state;
  }

  public OldPQTreeNode.State getState() {
    return myState;
  }

  public List<OldPQTreeNode> getChildren() {
    return myChildren;
  }

  public void addLastChild(OldPQTreeNode child) {
    ListSequence.fromList(myChildren).addElement(child);
    child.setParent(this);
  }

  public void addFirstChild(OldPQTreeNode child) {
    ListSequence.fromList(myChildren).insertElement(0, child);
    child.setParent(this);
  }

  public OldPQTreeNode getParent() {
    return this.myParent;
  }

  public void setParent(OldPQTreeNode parent) {
    this.myParent = parent;
  }

  public String toString(int offset) {
    StringBuilder builder = new StringBuilder();
    String spaces = "";
    for (int i = 0; i < offset; i++) {
      spaces += " ";
    }
    builder.append(spaces + "node " + getType() + " state = " + getState() + "\n");
    if (ListSequence.fromList(getChildren()).count() > 0) {
      builder.append(spaces + "children: \n");
      for (OldPQTreeNode child : ListSequence.fromList(getChildren())) {
        builder.append(child.toString(offset + 2));
      }
    }
    return builder.toString();
  }

  public OldPQTreeNode adjust() {
    if (ListSequence.fromList(getChildren()).count() == 1) {
      return ListSequence.fromList(getChildren()).getElement(0);
    }
    return this;
  }

  public abstract String getType();

  public static   enum State {
    FULL(),
    PARTIAL(),
    EMPTY();

    State() {
    }
  }
}
