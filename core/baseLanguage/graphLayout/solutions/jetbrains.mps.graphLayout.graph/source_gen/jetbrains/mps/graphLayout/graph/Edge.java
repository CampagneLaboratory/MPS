package jetbrains.mps.graphLayout.graph;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.ListSequence;

public class Edge {
  private Node mySource;
  private Node myTarget;

  public Edge(Node source, Node target) {
    mySource = source;
    myTarget = target;
  }

  public Node getSource() {
    return this.mySource;
  }

  public Node getSource(Edge.Direction dir) {
    if (dir == Edge.Direction.FRONT) {
      return getSource();
    } else {
      return getTarget();
    }
  }

  public Node getTarget(Edge.Direction dir) {
    if (dir == Edge.Direction.FRONT) {
      return getTarget();
    } else {
      return getSource();
    }
  }

  public Node getTarget() {
    return this.myTarget;
  }

  public Node getOpposite(Node node) {
    if (node == mySource) {
      return myTarget;
    }
    if (node == myTarget) {
      return mySource;
    }
    throw new RuntimeException("argument is't adjacent to this edge");
  }

  public void removeFromGraph() {
    ListSequence.fromList(mySource.getOutEdges()).removeElement(this);
    ListSequence.fromList(myTarget.getInEdges()).removeElement(this);
  }

  @Override
  public String toString() {
    return "[" + getSource().getIndex() + " -> " + getTarget().getIndex() + "]";
  }

  public static   enum Direction {
    FRONT(),
    BACK(),
    BOTH();

    Direction() {
    }
  }
}
