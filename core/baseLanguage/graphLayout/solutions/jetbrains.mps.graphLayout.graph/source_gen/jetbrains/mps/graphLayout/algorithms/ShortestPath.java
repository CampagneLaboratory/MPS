package jetbrains.mps.graphLayout.algorithms;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.graphLayout.graph.Node;
import java.util.Map;
import jetbrains.mps.graphLayout.util.NodeMap;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ShortestPath {
  public static List<Edge> getPath(Graph graph, Node source, Node target, Edge.Direction direction) {
    Map<Node, Integer> dist = new NodeMap<Integer>(graph);
    Map<Node, Edge> prev = new NodeMap<Edge>(graph);
    Queue<Node> queue = QueueSequence.fromQueue(new LinkedList<Node>());
    MapSequence.fromMap(dist).put(source, 0);
    MapSequence.fromMap(prev).put(source, null);
    QueueSequence.fromQueue(queue).addLastElement(source);
    boolean found = false;
    while (QueueSequence.fromQueue(queue).count() > 0) {
      Node cur = QueueSequence.fromQueue(queue).removeFirstElement();
      if (cur == target) {
        found = true;
        break;
      }
      for (Edge edge : ListSequence.fromList(cur.getEdges(direction))) {
        Node next = edge.getOpposite(cur);
        if (MapSequence.fromMap(dist).get(next) == null) {
          QueueSequence.fromQueue(queue).addLastElement(next);
          MapSequence.fromMap(dist).put(next, MapSequence.fromMap(dist).get(cur) + 1);
          MapSequence.fromMap(prev).put(next, edge);
        }
      }
    }
    if (!(found)) {
      return null;
    }
    List<Edge> path = ListSequence.fromList(new LinkedList<Edge>());
    Node cur = target;
    while (MapSequence.fromMap(prev).get(cur) != null) {
      ListSequence.fromList(path).insertElement(0, MapSequence.fromMap(prev).get(cur));
      cur = MapSequence.fromMap(prev).get(cur).getOpposite(cur);
    }
    return path;
  }
}
