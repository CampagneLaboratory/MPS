package jetbrains.mps.graphLayout.util;

/*Generated by MPS */

import java.awt.Rectangle;
import java.awt.Point;

public class GeomUtil {
  public static boolean insideOpenSegment(int end1, int end2, int mid) {
    return (mid - end1) * (mid - end2) < 0;
  }

  public static boolean insideClosedSegment(int end1, int end2, int mid) {
    return (mid - end1) * (mid - end2) <= 0;
  }

  public static Rectangle getRectangle(Point p1, Point p2) {
    int minX = Math.min(p1.x, p2.x);
    int minY = Math.min(p1.y, p2.y);
    int maxX = Math.max(p1.x, p2.x);
    int maxY = Math.max(p1.y, p2.y);
    return new Rectangle(minX, minY, maxX - minX, maxY - minY);
  }

  public static boolean onBorder(Point p, Rectangle rect) {
    boolean res = false;
    res |= p.x == rect.x && insideClosedSegment(rect.y, rect.y + rect.height, p.y);
    res |= p.x == rect.x + rect.height && insideClosedSegment(rect.y, rect.y + rect.height, p.y);
    res |= p.y == rect.y && insideClosedSegment(rect.x, rect.x + rect.width, p.x);
    res |= p.y == rect.y + rect.height && insideClosedSegment(rect.x, rect.x + rect.width, p.x);
    return res;
  }

  public static boolean contains(Rectangle rect, Point p) {
    return insideClosedSegment(rect.x, rect.x + rect.width, p.x) && insideClosedSegment(rect.y, rect.y + rect.height, p.y);
  }

  public static Point findOnBorder(Rectangle rect, Point p1, Point p2) {
    if (p1.x == p2.x) {
      if (insideClosedSegment(p1.y, p2.y, rect.y)) {
        return new Point(p1.x, rect.y);
      }
      if (insideClosedSegment(p1.y, p2.y, rect.y + rect.height)) {
        return new Point(p1.x, rect.y + rect.height);
      }
    }
    if (p1.y == p2.y) {
      if (insideClosedSegment(p1.x, p2.x, rect.x)) {
        return new Point(rect.x, p1.y);
      }
      if (insideClosedSegment(p1.x, p2.x, rect.x + rect.width)) {
        return new Point(rect.x + rect.width, p1.y);
      }
    }
    return null;
  }
}
