package jetbrains.mps.graphLayout.util;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Iterator;
import java.util.List;

public class OldQNode extends OldPQTreeNode {
  public OldQNode() {
  }

  public OldPQTreeNode makeReduction(boolean isPertinentRoot) {
    int numFull = 0;
    int numEmpty = 0;
    int numPartial = 0;
    for (OldPQTreeNode child : ListSequence.fromList(getChildren())) {
      if (child.getState() == OldPQTreeNode.State.FULL) {
        numFull++;
      }
      if (child.getState() == OldPQTreeNode.State.PARTIAL) {
        numPartial++;
      }
      if (child.getState() == OldPQTreeNode.State.EMPTY) {
        numEmpty++;
      }
    }
    if (numPartial == 0) {
      if (numEmpty == 0) {
        return doQ1Pattern(OldPQTreeNode.State.FULL);
      } else {
        OldPQTreeNode.State prevChildState = ListSequence.fromList(getChildren()).getElement(0).getState();
        int numDiff = 0;
        for (OldPQTreeNode child : ListSequence.fromList(getChildren())) {
          if (child.getState() != prevChildState) {
            numDiff++;
            prevChildState = child.getState();
          }
        }
        boolean isGoodPertinent = numDiff == 2 && isPertinentRoot && ListSequence.fromList(getChildren()).getElement(0).getState() == OldPQTreeNode.State.EMPTY;
        if (numDiff > 1 && !(isGoodPertinent)) {
          return null;
        }
        return doQ1Pattern(OldPQTreeNode.State.PARTIAL);
      }
    } else if (numPartial == 1) {
      Iterator<OldPQTreeNode> childItr = ListSequence.fromList(getChildren()).iterator();
      OldPQTreeNode cur = childItr.next();
      OldPQTreeNode.State firstChildState = null;
      while (cur.getState() != OldPQTreeNode.State.PARTIAL) {
        if (firstChildState == null) {
          firstChildState = cur.getState();
        }
        if (cur.getState() != firstChildState) {
          return null;
        }
        cur = childItr.next();
      }
      while (childItr.hasNext()) {
        cur = childItr.next();
        if (cur.getState() == firstChildState) {
          return null;
        }
      }
      return doQ2Pattern();
    } else if (numPartial == 2) {
      if (!(isPertinentRoot)) {
        return null;
      }
      Iterator<OldPQTreeNode> childItr = ListSequence.fromList(getChildren()).iterator();
      OldPQTreeNode cur = childItr.next();
      while (cur.getState() != OldPQTreeNode.State.PARTIAL) {
        if (cur.getState() != OldPQTreeNode.State.EMPTY) {
          return null;
        }
        cur = childItr.next();
      }
      cur = childItr.next();
      while (cur.getState() != OldPQTreeNode.State.PARTIAL) {
        if (cur.getState() != OldPQTreeNode.State.FULL) {
          return null;
        }
        cur = childItr.next();
      }
      while (childItr.hasNext()) {
        cur = childItr.next();
        if (cur.getState() != OldPQTreeNode.State.EMPTY) {
          return null;
        }
      }
      return doQ3Pattern();
    }
    return null;
  }

  /**
   * Implements Q1 pattern for PQ-Tree reduction. This happens when Q-Node
   * has no parial children
   */
  public OldPQTreeNode doQ1Pattern(OldPQTreeNode.State state) {
    setState(state);
    return this;
  }

  /**
   * Implements Q2 pattern for PQ-Tree reduction. This happens when Q-Node
   * has exactly one partial child
   */
  public OldPQTreeNode doQ2Pattern() {
    OldPQTreeNode newQNode = new OldQNode();
    newQNode.setState(OldPQTreeNode.State.PARTIAL);
    List<OldPQTreeNode> children = getChildren();
    OldPQTreeNode.State firstChildState = ListSequence.fromList(children).first().getState();
    if (firstChildState == OldPQTreeNode.State.FULL || (firstChildState == OldPQTreeNode.State.PARTIAL && ListSequence.fromList(children).last().getState() == OldPQTreeNode.State.EMPTY)) {
      children = ListSequence.fromList(children).reversedList();
    }
    for (OldPQTreeNode child : ListSequence.fromList(children)) {
      if (child.getState() == OldPQTreeNode.State.PARTIAL) {
        List<OldPQTreeNode> partialChildren = child.getChildren();
        if (ListSequence.fromList(partialChildren).first().getState() == OldPQTreeNode.State.FULL) {
          partialChildren = ListSequence.fromList(partialChildren).reversedList();
        }
        for (OldPQTreeNode partialChild : ListSequence.fromList(partialChildren)) {
          newQNode.addLastChild(partialChild);
        }
      } else {
        newQNode.addLastChild(child);
      }
    }
    return newQNode;
  }

  /**
   * Implements Q2 pattern for PQ-Tree reduction. This happens when Q-Node
   * has exactly two partial children
   */
  public OldPQTreeNode doQ3Pattern() {
    OldPQTreeNode newQNode = new OldQNode();
    newQNode.setState(OldPQTreeNode.State.PARTIAL);
    boolean firstPartial = true;
    for (OldPQTreeNode child : ListSequence.fromList(getChildren())) {
      if (child.getState() == OldPQTreeNode.State.PARTIAL) {
        List<OldPQTreeNode> partialChildren = child.getChildren();
        if (firstPartial) {
          if (ListSequence.fromList(partialChildren).first().getState() == OldPQTreeNode.State.FULL) {
            partialChildren = ListSequence.fromList(partialChildren).reversedList();
          }
        } else {
          if (ListSequence.fromList(partialChildren).first().getState() == OldPQTreeNode.State.EMPTY) {
            partialChildren = ListSequence.fromList(partialChildren).reversedList();
          }
        }
        for (OldPQTreeNode partialChild : ListSequence.fromList(partialChildren)) {
          newQNode.addLastChild(partialChild);
        }
        firstPartial = false;
      } else {
        newQNode.addLastChild(child);
      }
    }
    return newQNode;
  }

  public String getType() {
    return "Q";
  }
}
