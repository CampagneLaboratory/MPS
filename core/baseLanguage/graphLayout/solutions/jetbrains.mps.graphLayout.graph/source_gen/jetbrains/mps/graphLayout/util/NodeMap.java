package jetbrains.mps.graphLayout.util;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Set;
import java.util.Collection;

public class NodeMap<V> implements Map<Node, V> {
  private Object[] myMap;

  public NodeMap(Graph graph) {
    myMap = new Object[graph.getNumNodes()];
  }

  public Set<Map.Entry<Node, V>> entrySet() {
    throw new RuntimeException("method is not implemented");
  }

  public Collection<V> values() {
    throw new RuntimeException("method is not implemented");
  }

  public Set<Node> keySet() {
    throw new RuntimeException("method is not implemented");
  }

  public void clear() {
    throw new RuntimeException("method is not implemented");
  }

  public void putAll(Map<? extends Node, ? extends V> map) {
    throw new RuntimeException("method is not implemented");
  }

  public V remove(Object object) {
    Node node = ((Node) object);
    V value = ((V) myMap[node.getIndex()]);
    myMap[node.getIndex()] = null;
    return value;
  }

  public V put(Node node, V value) {
    myMap[node.getIndex()] = value;
    return value;
  }

  public V get(Object object) {
    Node node = ((Node) object);
    return ((V) myMap[node.getIndex()]);
  }

  public boolean containsValue(Object object) {
    throw new RuntimeException("method is not implemented");
  }

  public boolean containsKey(Object object) {
    throw new RuntimeException("method is not implemented");
  }

  public boolean isEmpty() {
    throw new RuntimeException("method is not implemented");
  }

  public int size() {
    return myMap.length;
  }
}
