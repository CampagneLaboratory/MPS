package jetbrains.mps.graphLayout.algorithms;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.graphLayout.util.NodeMap;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.MapSequence;

public class ConnectivityComponents {
  public static Map<Node, Integer> getComponents(Graph graph) {
    ConnectivityComponents.MyDfs dfs = new ConnectivityComponents.MyDfs();
    dfs.doDfs(graph);
    return dfs.getComponents();
  }

  private static class MyDfs extends Dfs {
    private Map<Node, Integer> myComponents;
    private int myCurrentComponent;

    public MyDfs() {
    }

    @Override
    public void doDfs(Graph graph) {
      myComponents = new NodeMap<Integer>(graph);
      myCurrentComponent = -1;
      super.doDfs(graph, Edge.Direction.BOTH);
    }

    @Override
    protected void preprocessRoot() {
      myCurrentComponent++;
    }

    @Override
    protected void preprocess(Node node, Edge from) {
      MapSequence.fromMap(myComponents).put(node, myCurrentComponent);
    }

    public Map<Node, Integer> getComponents() {
      return this.myComponents;
    }
  }
}
