package jetbrains.mps.graphLayout.algorithms;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.graphLayout.util.NodeMap;

public abstract class Dfs {
  public static int BEFORE = 0;
  public static int DURING = 1;
  public static int AFTER = 2;

  private Graph myGraph;
  protected Map<Node, Integer> myDfsState;
  private Edge.Direction myDirection;

  public Dfs() {
  }

  public void doDfs(Graph graph) {
    doDfs(graph, Edge.Direction.FRONT);
  }

  public void doDfs(Graph graph, Edge.Direction direction) {
    this.init(graph, direction);
    for (Node node : ListSequence.fromList(myGraph.getNodes())) {
      if (MapSequence.fromMap(myDfsState).get(node) == BEFORE) {
        preprocessRoot();
        dfs(node, null);
        postprocessRoot();
      }
    }
  }

  public void init(Graph graph, Edge.Direction direction) {
    myGraph = graph;
    myDfsState = new NodeMap<Integer>(graph);
    myDirection = direction;
    for (Node node : ListSequence.fromList(myGraph.getNodes())) {
      MapSequence.fromMap(myDfsState).put(node, BEFORE);
    }
  }

  protected void dfs(Node node, Edge from) {
    MapSequence.fromMap(myDfsState).put(node, DURING);
    preprocess(node, from);
    for (Edge edge : ListSequence.fromList(node.getEdges(myDirection))) {
      if (edge != from) {
        processEdge(edge, node);
        Node target = edge.getOpposite(node);
        if (MapSequence.fromMap(myDfsState).get(target) == BEFORE) {
          dfs(target, edge);
        }
      }
    }
    postprocess(node, from);
    MapSequence.fromMap(myDfsState).put(node, AFTER);
  }

  protected void preprocessRoot() {
  }

  protected void postprocessRoot() {
  }

  protected void preprocess(Node node, Edge from) {
  }

  protected void processEdge(Edge edge, Node source) {
  }

  protected void postprocess(Node node, Edge from) {
  }

  protected Map<Node, Integer> getDfsState() {
    return this.myDfsState;
  }

  public Graph getGraph() {
    return myGraph;
  }
}
