package jetbrains.mps.graphLayout.algorithms;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.graphLayout.graph.Edge;
import java.util.HashMap;

public abstract class Dfs {
  private Graph myGraph;
  private Map<Node, Integer> myDfsState;

  public Dfs() {
  }

  public void doDfs(Graph graph) {
    myGraph = graph;
    init();
    for (Node node : ListSequence.fromList(myGraph.getNodes())) {
      if (MapSequence.fromMap(myDfsState).get(node) == 0) {
        dfs(node);
      }
    }
  }

  private void dfs(Node node) {
    MapSequence.fromMap(myDfsState).put(node, 1);
    preprocess(node);
    for (Edge edge : ListSequence.fromList(node.getOutEdges())) {
      processEdge(edge);
      Node target = edge.getTarget();
      if (MapSequence.fromMap(myDfsState).get(target) == 0) {
        dfs(target);
      }
    }
    postprocess(node);
    MapSequence.fromMap(myDfsState).put(node, 2);
  }

  private void init() {
    myDfsState = MapSequence.fromMap(new HashMap<Node, Integer>());
    for (Node node : ListSequence.fromList(myGraph.getNodes())) {
      MapSequence.fromMap(myDfsState).put(node, 0);
    }
  }

  protected void preprocess(Node node) {
  }

  protected void processEdge(Edge edge) {
  }

  protected void postprocess(Node node) {
  }

  protected Map<Node, Integer> getDfsState() {
    return this.myDfsState;
  }
}
