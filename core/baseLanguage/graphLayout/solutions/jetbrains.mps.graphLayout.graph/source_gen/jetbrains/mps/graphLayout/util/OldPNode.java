package jetbrains.mps.graphLayout.util;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Iterator;
import java.util.List;

public class OldPNode extends OldPQTreeNode {
  public OldPNode() {
    super();
  }

  public OldPQTreeNode makeReduction(boolean isPertinentRoot) {
    int numFull = 0;
    int numEmpty = 0;
    int numPartial = 0;
    int numChildren = ListSequence.fromList(getChildren()).count();
    for (OldPQTreeNode node : ListSequence.fromList(getChildren())) {
      if (node.getState() == OldPQTreeNode.State.FULL) {
        numFull++;
      }
      if (node.getState() == OldPQTreeNode.State.PARTIAL) {
        numPartial++;
      }
      if (node.getState() == OldPQTreeNode.State.EMPTY) {
        numEmpty++;
      }
    }
    if (numFull == numChildren) {
      return doP1Pattern();
    } else if (numPartial == 0) {
      if (isPertinentRoot) {
        return doP2Pattern();
      } else {
        return doP3Pattern();
      }
    } else if (numPartial == 1) {
      if (isPertinentRoot) {
        return doP4Pattern();
      } else {
        return doP5Pattern();
      }
    } else if (numPartial == 2) {
      if (isPertinentRoot) {
        return doP6Pattern();
      }
    }
    return null;
  }

  /**
   * Implements P1 pattern for PQ-Tree reduction. This happens when P-Node 
   * has only full children
   */
  private OldPQTreeNode doP1Pattern() {
    setState(OldPQTreeNode.State.FULL);
    return this;
  }

  /**
   * Implements P2 pattern for PQ-Tree reduction. This happens when P-Node 
   * has both full and empty children, but not a partial one; P-Node must be
   * root of pertinent subtree
   */
  public OldPQTreeNode doP2Pattern() {
    OldPQTreeNode newNode = new OldPNode();
    newNode.setState(OldPQTreeNode.State.FULL);
    Iterator<OldPQTreeNode> nodeItr = ListSequence.fromList(getChildren()).iterator();
    while (nodeItr.hasNext()) {
      OldPQTreeNode node = nodeItr.next();
      if (node.getState() == OldPQTreeNode.State.FULL) {
        nodeItr.remove();
        newNode.addLastChild(node);
      }
    }
    newNode = newNode.adjust();
    addLastChild(newNode);
    setState(OldPQTreeNode.State.PARTIAL);
    return this;
  }

  /**
   * Implements P3 pattern for PQ-Tree reduction. This is equal to P2 pattern
   * but for other (not a pertinent root) nodes.
   */
  public OldPQTreeNode doP3Pattern() {
    OldPQTreeNode newFullNode = new OldPNode();
    newFullNode.setState(OldPQTreeNode.State.FULL);
    OldPQTreeNode newEmptyNode = new OldPNode();
    newEmptyNode.setState(OldPQTreeNode.State.EMPTY);
    Iterator<OldPQTreeNode> nodeItr = ListSequence.fromList(getChildren()).iterator();
    while (nodeItr.hasNext()) {
      OldPQTreeNode node = nodeItr.next();
      nodeItr.remove();
      if (node.getState() == OldPQTreeNode.State.FULL) {
        newFullNode.addLastChild(node);
      } else {
        newEmptyNode.addLastChild(node);
      }
    }
    OldQNode replacement = new OldQNode();
    newFullNode = newFullNode.adjust();
    newEmptyNode = newEmptyNode.adjust();
    replacement.addLastChild(newFullNode);
    replacement.addLastChild(newEmptyNode);
    replacement.setState(OldPQTreeNode.State.PARTIAL);
    return replacement;
  }

  /**
   * Implements P4 pattern for PQ-Tree reduction. This happens when P-Node
   * has exactly one partial child and is pertinent root 
   */
  public OldPQTreeNode doP4Pattern() {
    OldPQTreeNode newFullNode = new OldPNode();
    newFullNode.setState(OldPQTreeNode.State.FULL);
    OldQNode partialNode = null;
    Iterator<OldPQTreeNode> nodeItr = ListSequence.fromList(getChildren()).iterator();
    while (nodeItr.hasNext()) {
      OldPQTreeNode node = nodeItr.next();
      if (node.getState() == OldPQTreeNode.State.FULL) {
        nodeItr.remove();
        newFullNode.addLastChild(node);
      }
      if (node.getState() == OldPQTreeNode.State.PARTIAL) {
        partialNode = (OldQNode) node;
      }
    }
    newFullNode = newFullNode.adjust();
    if (ListSequence.fromList(partialNode.getChildren()).first().getState() == OldPQTreeNode.State.FULL) {
      partialNode.addFirstChild(newFullNode);
    } else {
      partialNode.addLastChild(newFullNode);
    }
    setState(OldPQTreeNode.State.PARTIAL);
    return this;
  }

  /**
   * Implements P5 pattern for PQ-Tree reduction. This happens when P-Node
   * has exactly one partial child and isn't pertinent root
   */
  public OldPQTreeNode doP5Pattern() {
    OldPQTreeNode newFullNode = new OldPNode();
    newFullNode.setState(OldPQTreeNode.State.FULL);
    OldPQTreeNode newEmptyNode = new OldPNode();
    newEmptyNode.setState(OldPQTreeNode.State.EMPTY);
    OldQNode partialNode = null;
    Iterator<OldPQTreeNode> nodeItr = ListSequence.fromList(getChildren()).iterator();
    while (nodeItr.hasNext()) {
      OldPQTreeNode node = nodeItr.next();
      if (node.getState() == OldPQTreeNode.State.FULL) {
        nodeItr.remove();
        newFullNode.addLastChild(node);
      }
      if (node.getState() == OldPQTreeNode.State.EMPTY) {
        nodeItr.remove();
        newEmptyNode.addLastChild(node);
      }
      if (node.getState() == OldPQTreeNode.State.PARTIAL) {
        partialNode = (OldQNode) node;
      }
    }
    newFullNode = newFullNode.adjust();
    newEmptyNode = newEmptyNode.adjust();
    if (ListSequence.fromList(partialNode.getChildren()).first().getState() == OldPQTreeNode.State.FULL) {
      partialNode.addFirstChild(newFullNode);
      partialNode.addLastChild(newEmptyNode);
    } else {
      partialNode.addLastChild(newFullNode);
      partialNode.addFirstChild(newEmptyNode);
    }
    return partialNode;
  }

  /**
   * Implements P6 pattern for PQ-Tree reduction. This happens when P-Node
   * has exactly two partial children and is partinent root
   */
  public OldPQTreeNode doP6Pattern() {
    OldPQTreeNode newFullNode = new OldPNode();
    newFullNode.setState(OldPQTreeNode.State.FULL);
    OldQNode partialNode1 = null;
    OldQNode partialNode2 = null;
    Iterator<OldPQTreeNode> nodeItr = ListSequence.fromList(getChildren()).iterator();
    while (nodeItr.hasNext()) {
      OldPQTreeNode node = nodeItr.next();
      if (node.getState() == OldPQTreeNode.State.FULL) {
        nodeItr.remove();
        newFullNode.addLastChild(node);
      }
      if (node.getState() == OldPQTreeNode.State.PARTIAL) {
        if (partialNode1 == null) {
          partialNode1 = (OldQNode) node;
        } else {
          partialNode2 = (OldQNode) node;
        }
        nodeItr.remove();
      }
    }
    newFullNode = newFullNode.adjust();
    OldQNode newQNode = new OldQNode();
    newQNode.setState(OldPQTreeNode.State.PARTIAL);
    List<OldPQTreeNode> children = partialNode1.getChildren();
    if (ListSequence.fromList(children).first().getState() == OldPQTreeNode.State.FULL) {
      children = ListSequence.fromList(children).reversedList();
    }
    for (OldPQTreeNode child : ListSequence.fromList(children)) {
      newQNode.addLastChild(child);
    }
    newQNode.addLastChild(newFullNode);
    children = partialNode2.getChildren();
    if (ListSequence.fromList(children).first().getState() == OldPQTreeNode.State.EMPTY) {
      children = ListSequence.fromList(children).reversedList();
    }
    for (OldPQTreeNode child : ListSequence.fromList(children)) {
      newQNode.addLastChild(child);
    }
    addLastChild(newQNode);
    setState(OldPQTreeNode.State.PARTIAL);
    return this;
  }

  public String getType() {
    return "P";
  }
}
