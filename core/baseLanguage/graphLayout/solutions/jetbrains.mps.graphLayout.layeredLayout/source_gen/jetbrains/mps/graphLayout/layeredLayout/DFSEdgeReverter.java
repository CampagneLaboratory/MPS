package jetbrains.mps.graphLayout.layeredLayout;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import java.util.Set;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.graphLayout.graph.Graph;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

public class DFSEdgeReverter implements IEdgeReverter {
  private Map<Node, Integer> myDfsState;
  private Set<Edge> myToRevert;

  public DFSEdgeReverter() {
  }

  private void dfs(Node node) {
    MapSequence.fromMap(myDfsState).put(node, 1);
    for (Edge edge : ListSequence.fromList(node.getOutEdges())) {
      Node target = edge.getTarget();
      Integer state = MapSequence.fromMap(myDfsState).get(target);
      if (state == 1) {
        SetSequence.fromSet(myToRevert).addElement(edge);
      }
      if (state == 0) {
        dfs(target);
      }
    }
    MapSequence.fromMap(myDfsState).put(node, 2);
  }

  public Set<Edge> RevertEdges(Graph graph) {
    myDfsState = MapSequence.fromMap(new HashMap<Node, Integer>());
    myToRevert = SetSequence.fromSet(new HashSet<Edge>());
    List<Node> nodes = graph.getNodes();
    for (Node node : ListSequence.fromList(nodes)) {
      MapSequence.fromMap(myDfsState).put(node, 0);
    }
    for (Node node : ListSequence.fromList(nodes)) {
      if (MapSequence.fromMap(myDfsState).get(node) == 0) {
        dfs(node);
      }
    }
    Set<Edge> reverted = SetSequence.fromSet(new HashSet<Edge>());
    for (Edge edge : SetSequence.fromSet(myToRevert)) {
      edge.removeFromGraph();
      SetSequence.fromSet(reverted).addElement(edge.getTarget().addEdgeTo(edge.getSource()));
    }
    return reverted;
  }
}
