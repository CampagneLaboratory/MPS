package jetbrains.mps.graphLayout.layeredLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.algorithms.Dfs;
import java.util.Set;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.MapSequence;

public class DFSEdgeReverter extends Dfs implements IEdgeReverter {
  private Set<Edge> myToRevert;

  public DFSEdgeReverter() {
  }

  public Set<Edge> revertEdges(Graph graph) {
    myToRevert = SetSequence.fromSet(new HashSet<Edge>());
    doDfs(graph);
    Set<Edge> reverted = SetSequence.fromSet(new HashSet<Edge>());
    for (Edge edge : SetSequence.fromSet(myToRevert)) {
      edge.removeFromGraph();
      SetSequence.fromSet(reverted).addElement(edge.getTarget().addEdgeTo(edge.getSource()));
    }
    return reverted;
  }

  @Override
  protected void processEdge(Edge edge) {
    Node target = edge.getTarget();
    int state = MapSequence.fromMap(getDfsState()).get(target);
    if (state == Dfs.DURING) {
      SetSequence.fromSet(myToRevert).addElement(edge);
    }
  }
}
