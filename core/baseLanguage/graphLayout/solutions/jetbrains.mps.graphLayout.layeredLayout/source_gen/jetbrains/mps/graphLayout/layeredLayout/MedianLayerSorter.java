package jetbrains.mps.graphLayout.layeredLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.graphLayout.graph.Graph;
import java.util.List;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.graphLayout.graph.Node;
import java.util.Comparator;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.ArrayList;

public class MedianLayerSorter implements IOneLayerSorter {
  public MedianLayerSorter() {
  }

  public void sortLayer(int layerToSort, NodeLayeredOrder nodeLayeredOrder, Edge.Direction dir) {
    final Graph graph = nodeLayeredOrder.getGraph();
    List<Integer> fixedLayer;
    if (dir == Edge.Direction.FRONT) {
      fixedLayer = nodeLayeredOrder.getIntOrder(layerToSort + 1);
    } else {
      fixedLayer = nodeLayeredOrder.getIntOrder(layerToSort - 1);
    }
    Map<Integer, Integer> nodesOrder = MapSequence.fromMap(new HashMap<Integer, Integer>());
    for (int i = 0; i < ListSequence.fromList(fixedLayer).count(); i++) {
      MapSequence.fromMap(nodesOrder).put(ListSequence.fromList(fixedLayer).getElement(i), i);
    }
    final Map<Integer, Integer> median = MapSequence.fromMap(new HashMap<Integer, Integer>());
    final Map<Integer, Double> barycenter = MapSequence.fromMap(new HashMap<Integer, Double>());
    List<Integer> layerOrder = nodeLayeredOrder.getIntOrder(layerToSort);
    for (int index : ListSequence.fromList(layerOrder)) {
      Node node = graph.getNode(index);
      MapSequence.fromMap(median).put(index, computeMedian(node, nodesOrder, dir));
      MapSequence.fromMap(barycenter).put(index, computeBarycenter(node, nodesOrder, dir));
    }
    layerOrder = ListSequence.fromList(layerOrder).sort(new Comparator<Integer>() {
      public int compare(Integer a, Integer b) {
        int ma = MapSequence.fromMap(median).get(a);
        int mb = MapSequence.fromMap(median).get(b);
        if (ma != mb) {
          return ma - mb;
        }
        double d = MapSequence.fromMap(barycenter).get(a) - MapSequence.fromMap(barycenter).get(b);
        if (d < 0) {
          return -1;
        }
        if (d > 0) {
          return 1;
        }
        return 0;
      }
    }, true).toListSequence();
    nodeLayeredOrder.setLayer(ListSequence.fromList(layerOrder).select(new ISelector<Integer, Node>() {
      public Node select(Integer it) {
        return graph.getNode(it);
      }
    }).toListSequence(), layerToSort);
  }

  public int computeMedian(Node node, Map<Integer, Integer> nodesOrder, Edge.Direction dir) {
    List<Integer> adjNodesOrder = ListSequence.fromList(new ArrayList<Integer>());
    for (Edge edge : ListSequence.fromList(node.getEdges(dir))) {
      ListSequence.fromList(adjNodesOrder).addElement(MapSequence.fromMap(nodesOrder).get(edge.getTarget(dir).getIndex()));
    }
    if (ListSequence.fromList(adjNodesOrder).count() == 0) {
      return -1;
    }
    adjNodesOrder = ListSequence.fromList(adjNodesOrder).sort(new ISelector<Integer, Comparable<?>>() {
      public Comparable<?> select(Integer it) {
        return it;
      }
    }, true).toListSequence();
    if (ListSequence.fromList(adjNodesOrder).count() % 2 == 1) {
      return ListSequence.fromList(adjNodesOrder).getElement(ListSequence.fromList(adjNodesOrder).count() / 2);
    } else {
      return (ListSequence.fromList(adjNodesOrder).getElement(ListSequence.fromList(adjNodesOrder).count() / 2) + ListSequence.fromList(adjNodesOrder).getElement(ListSequence.fromList(adjNodesOrder).count() / 2 - 1)) / 2;
    }
  }

  public double computeBarycenter(Node node, Map<Integer, Integer> nodesOrder, Edge.Direction dir) {
    double barycenter = 0;
    List<Edge> edges = node.getEdges(dir);
    if (ListSequence.fromList(edges).count() > 0) {
      for (Edge edge : ListSequence.fromList(edges)) {
        barycenter += MapSequence.fromMap(nodesOrder).get(edge.getTarget(dir).getIndex());
      }
      barycenter = barycenter / ListSequence.fromList(edges).count();
    }
    return barycenter;
  }
}
