package jetbrains.mps.graphLayout.layeredLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.graphLayout.graph.Edge;

public class LayerByLayerNodeSorter implements INodeSorter {
  private int myNumIterations = 51;
  private IOneLayerSorter myLayerSorter;

  public LayerByLayerNodeSorter(IOneLayerSorter layerSorter) {
    myLayerSorter = layerSorter;
  }

  public NodeLayeredOrder sortNodes(Graph graph, NodeLayers layers) {
    NodeLayeredOrder order = initialLayeringOrder(graph, layers);
    for (int iteration = 0; iteration < myNumIterations; iteration++) {
      if (iteration % 2 == 0) {
        for (int layer = 0; layer < layers.getMaxLayer(); layer++) {
          myLayerSorter.sortLayer(layer + 1, order, Edge.Direction.BACK);
        }
      } else {
        for (int layer = layers.getMaxLayer(); layer > 0; layer--) {
          myLayerSorter.sortLayer(layer - 1, order, Edge.Direction.FRONT);
        }
      }
    }
    return order;
  }

  protected NodeLayeredOrder initialLayeringOrder(Graph graph, NodeLayers layers) {
    return new DFSNodeSorter().sortNodes(graph, layers);
  }

  protected void setNumIterations(int numIterations) {
    this.myNumIterations = numIterations;
  }
}
