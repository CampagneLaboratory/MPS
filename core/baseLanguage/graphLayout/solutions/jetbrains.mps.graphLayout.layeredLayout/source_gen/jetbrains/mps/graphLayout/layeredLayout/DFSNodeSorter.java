package jetbrains.mps.graphLayout.layeredLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.HashMap;
import java.util.List;

public class DFSNodeSorter implements INodeSorter {
  private Graph myGraph;
  private NodeLayers myNodeLayers;
  private Map<Node, Integer> myDfsState;
  private NodeLayeredOrder myLayeredOrder;

  public DFSNodeSorter() {
  }

  private void dfs(Node node) {
    MapSequence.fromMap(myDfsState).put(node, 1);
    myLayeredOrder.addLast(node, myNodeLayers.get(node));
    for (Edge edge : ListSequence.fromList(node.getOutEdges())) {
      Node target = edge.getTarget();
      if (MapSequence.fromMap(myDfsState).get(target) == 0) {
        dfs(target);
      }
    }
    MapSequence.fromMap(myDfsState).put(node, 2);
  }

  public NodeLayeredOrder sortNodes(Graph graph, NodeLayers nodeLayers) {
    myGraph = graph;
    myNodeLayers = nodeLayers;
    myLayeredOrder = new NodeLayeredOrder(graph);
    myDfsState = MapSequence.fromMap(new HashMap<Node, Integer>());
    List<Node> nodes = myGraph.getNodes();
    for (Node node : ListSequence.fromList(nodes)) {
      MapSequence.fromMap(myDfsState).put(node, 0);
    }
    for (Node node : ListSequence.fromList(nodes)) {
      if (MapSequence.fromMap(myDfsState).get(node) == 0) {
        dfs(node);
      }
    }
    return myLayeredOrder;
  }
}
