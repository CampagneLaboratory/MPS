package jetbrains.mps.baseLanguage.ext.collections.samples.sequence_queries;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.ext.collections.internal.SequenceWithSupplier;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;

/* package */class Main_where_select_operations {

  /* package */static void main(String[] args) {
    final zClosureContext1 _zClosureContext1 = new zClosureContext1();
    Iterable<Integer> nums = new SequenceWithSupplier<Integer>(new zValueSupplier2(null, _zClosureContext1));
    System.out.println("from sequence of 10 numbers,");
    System.out.println("where num is even,");
    System.out.println("produce string");
    _zClosureContext1.count = 0;
    Iterable<String> strings = SequenceOperations.select(SequenceOperations.where(nums, new zPredicate(null, _zClosureContext1)), new zSelector(null, _zClosureContext1));
    System.out.println("count (before):" + _zClosureContext1.count);
    {
      ICursor<String> _zCursor1 = CursorFactory.createCursor(strings);
      try {
        while(_zCursor1.moveToNext()) {
          String s = _zCursor1.getCurrent();
          System.out.println(s);
        }
      } finally {
        _zCursor1.release();
      }
    }
    System.out.println("count (after):" + _zClosureContext1.count);
  }

}
