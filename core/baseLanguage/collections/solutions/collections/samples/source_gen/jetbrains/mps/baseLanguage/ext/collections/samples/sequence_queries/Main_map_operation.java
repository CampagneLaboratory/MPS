package jetbrains.mps.baseLanguage.ext.collections.samples.sequence_queries;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.ext.collections.internal.SequenceWithSupplier;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;

/* package */class Main_map_operation {

  /* package */static void main(String[] args) {
    final zClosureContext _zClosureContext = new zClosureContext();
    Iterable<Integer> nums = new SequenceWithSupplier<Integer>(new zValueSupplier(null, _zClosureContext));
    System.out.println("from infinite sequence take first 10 numbers,");
    System.out.println("ignore odd numbers,");
    System.out.println("map each even number to two strings");
    _zClosureContext.count = 0;
    Iterable<String> strings = SequenceOperations.map(nums, new zMapper(null, _zClosureContext));
    System.out.println("count (before):" + _zClosureContext.count);
    {
      ICursor<String> _zCursor = CursorFactory.createCursor(strings);
      try {
        while(_zCursor.moveToNext()) {
          String s = _zCursor.getCurrent();
          System.out.println(s);
        }
      } finally {
        _zCursor.release();
      }
    }
    System.out.println("count (after):" + _zClosureContext.count);
  }

}
