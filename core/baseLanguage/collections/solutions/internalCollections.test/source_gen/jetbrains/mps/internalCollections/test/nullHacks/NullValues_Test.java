/*
 * Copyright 2003-2008 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.internalCollections.test.nullHacks;

/*Generated by MPS */

import jetbrains.mps.internalCollections.test.closures.Util_Test;
import org.junit.Test;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class NullValues_Test extends Util_Test {

  @Test()
  public void test_nullValues() throws Exception {
    if (Sequence.IGNORE_NULL_VALUES) {
      Iterable<Integer> input = this.input5();
      this.assertIterableEquals(this.expectEmpty(), Sequence.fromIterable(input).select(new ISelector <Integer, Integer>() {

        public Integer select(Integer it) {
          return (Integer)null;
        }

      }));
      this.assertIterableEquals(this.expectEmpty(), Sequence.fromIterable(input).translate(new ITranslator2 <Integer, Integer>() {

        public Iterable<Integer> translate(final Integer it) {
          return new Iterable <Integer>() {

            public Iterator<Integer> iterator() {
              return new YieldingIterator <Integer>() {

                private int __CP__ = 0;

                protected boolean moveToNext() {
__loop__:
                  do {
__switch__:
                    switch (this.__CP__) {
                      case -1:
                        assert false : "Internal error";
                        return false;
                      case 2:
                        this.__CP__ = 1;
                        this.yield((Integer)null);
                        return true;
                      case 0:
                        this.__CP__ = 2;
                        break;
                      default:
                        break __loop__;
                    }
                  } while(true);
                  return false;
                }

              };
            }

          };
        }

      }));
    }
  }

  @Test()
  public void test_nullElements() throws Exception {
    if (Sequence.IGNORE_NULL_VALUES) {
      List<Integer> list5 = ListSequence.<Integer>fromArray(1, 2, 3, 4, 5);
      ListSequence.fromList(list5).addElement(null);
      this.assertIterableEquals(this.expect5(), list5);
      ListSequence.fromList(list5).removeElement(null);
      this.assertIterableEquals(this.expect5(), list5);
      ListSequence.fromList(list5).removeSequence(Sequence.fromIterable(this.input5()));
      this.assertEmptyList(list5);
      this.assertEmptyList(ListSequence.<Integer>fromArray((Integer)null));
      this.assertEmptyList(ListSequence.<Integer>fromArray(null, null));
      Integer nullvalue = null;
      this.assertEmptyList(ListSequence.<Integer>fromArray(nullvalue));
    }
  }

  private void assertEmptyList(List<Integer> emptyList) {
    this.assertIterableEquals(this.expectEmpty(), emptyList);
    ListSequence.fromList(emptyList).removeElement(null);
    this.assertIterableEquals(this.expectEmpty(), emptyList);
    ListSequence.fromList(emptyList).addElement(null);
    this.assertIterableEquals(this.expectEmpty(), emptyList);
    ListSequence.fromList(emptyList).addSequence(Sequence.fromIterable(this.input5()));
    this.assertIterableEquals(this.expect5(), emptyList);
  }

}
