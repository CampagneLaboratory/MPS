/*
 * Copyright 2003-2008 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.internalCollections.test.basicOperations;

/*Generated by MPS */

import jetbrains.mps.internalCollections.test.closures.Util_Test;
import org.junit.Test;
import jetbrains.mps.internal.collections.runtime.ISequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Arrays;

public class Chunks_Test extends Util_Test {

  @Test()
  public void test_chunkMethods() throws Exception {
    ISequence<Integer> input = Sequence.fromIterable(this.input10());
    this.assertIterableEquals(Arrays.asList(1, 2, 3), input.take(3));
    this.assertIterableEquals(Arrays.asList(8, 9, 10), input.skip(7));
    this.assertIterableEquals(Arrays.asList(1, 2, 3), input.cut(7));
    this.assertIterableEquals(Arrays.asList(8, 9, 10), input.tail(3));
    this.assertIterableEquals(Arrays.asList(5, 6, 7), input.page(4, 7));
    this.assertIterableEquals(input.skip(3).take(5), input.page(3, 8));
  }

  @Test()
  public void test_chunkOperations() throws Exception {
    Iterable<Integer> input = this.input10();
    this.assertIterableEquals(Arrays.asList(1, 2, 3), Sequence.fromIterable(input).take(3));
    this.assertIterableEquals(Arrays.asList(8, 9, 10), Sequence.fromIterable(input).skip(7));
    this.assertIterableEquals(Arrays.asList(1, 2, 3), Sequence.fromIterable(input).cut(7));
    this.assertIterableEquals(Arrays.asList(8, 9, 10), Sequence.fromIterable(input).tail(3));
    this.assertIterableEquals(Arrays.asList(5, 6, 7), Sequence.fromIterable(input).page(4, 7));
    this.assertIterableEquals(Sequence.fromIterable(input).skip(3).take(5), Sequence.fromIterable(input).page(3, 8));
  }

  @Test()
  public void test_pageOperationNoSideEffects() throws Exception {
    Iterable<Integer> input = this.input10();
    int from = 3;
    int to = 8;
    this.assertIterableEquals(Arrays.asList(5, 6, 7), Sequence.fromIterable(input).page((from = from + 1), (to = to - 1)));
  }

}
