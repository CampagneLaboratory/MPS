package jetbrains.mps.internalCollections.test.closures;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import junit.framework.Assert;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.IRightCombinator;

public class ReduceFold_Test extends Util_Test {
  public void test_reduceLeft() throws Exception {
    Iterable<Integer> in = this.input10();
    int sum = Sequence.fromIterable(in).reduceLeft(new ILeftCombinator<Integer, Integer>() {
      public Integer combine(Integer a, Integer b) {
        return a + b;
      }
    });
    Assert.assertSame(1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10, sum);
    int sub = Sequence.fromIterable(in).reduceLeft(new ILeftCombinator<Integer, Integer>() {
      public Integer combine(Integer a, Integer b) {
        return a - b;
      }
    });
    Assert.assertSame(1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10, sub);
    Iterable<Integer> single = Sequence.<Integer>singleton(42);
    Assert.assertSame(42, Sequence.fromIterable(single).reduceLeft(new ILeftCombinator<Integer, Integer>() {
      public Integer combine(Integer a, Integer b) {
        return a + b;
      }
    }));
    Iterable<Integer> empty = Sequence.fromIterable(Collections.<Integer>emptyList());
    Assert.assertNull(Sequence.fromIterable(empty).reduceLeft(new ILeftCombinator<Integer, Integer>() {
      public Integer combine(Integer a, Integer b) {
        throw new RuntimeException();
      }
    }));
  }

  public void test_reduceRight() throws Exception {
    Iterable<Integer> in = this.input10();
    int sum = Sequence.fromIterable(in).reduceRight(new IRightCombinator<Integer, Integer>() {
      public Integer combine(Integer a, Integer b) {
        return a + b;
      }
    });
    Assert.assertSame(1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10, sum);
    int sub = Sequence.fromIterable(in).reduceRight(new IRightCombinator<Integer, Integer>() {
      public Integer combine(Integer a, Integer b) {
        return a - b;
      }
    });
    Assert.assertSame(1 - (2 - (3 - (4 - (5 - (6 - (7 - (8 - (9 - 10)))))))), sub);
    Iterable<Integer> single = Sequence.<Integer>singleton(42);
    Assert.assertSame(42, Sequence.fromIterable(single).reduceRight(new IRightCombinator<Integer, Integer>() {
      public Integer combine(Integer b, Integer a) {
        return b + a;
      }
    }));
    Iterable<Integer> empty = Sequence.fromIterable(Collections.<Integer>emptyList());
    Assert.assertNull(Sequence.fromIterable(empty).reduceRight(new IRightCombinator<Integer, Integer>() {
      public Integer combine(Integer b, Integer a) {
        throw new RuntimeException();
      }
    }));
  }

  public void test_foldLeft() throws Exception {
    Iterable<Integer> in = this.input10();
    String con = Sequence.fromIterable(in).foldLeft("", new ILeftCombinator<Integer, String>() {
      public String combine(String s, Integer it) {
        return "" + s + it;
      }
    });
    Assert.assertEquals("12345678910", con);
    Iterable<Integer> single = Sequence.<Integer>singleton(42);
    Assert.assertEquals("bar42", Sequence.fromIterable(single).foldLeft("bar", new ILeftCombinator<Integer, String>() {
      public String combine(String s, Integer it) {
        return "" + s + it;
      }
    }));
    Iterable<Integer> empty = Sequence.fromIterable(Collections.<Integer>emptyList());
    Assert.assertEquals("ack", Sequence.fromIterable(empty).foldLeft("ack", new ILeftCombinator<Integer, String>() {
      public String combine(String s, Integer it) {
        throw new RuntimeException();
      }
    }));
  }

  public void test_foldRight() throws Exception {
    Iterable<Integer> in = this.input10();
    String con = Sequence.fromIterable(in).foldRight("", new IRightCombinator<Integer, String>() {
      public String combine(Integer it, String s) {
        return "" + s + it;
      }
    });
    Assert.assertEquals("10987654321", con);
    Iterable<Integer> single = Sequence.<Integer>singleton(42);
    Assert.assertEquals("bar42", Sequence.fromIterable(single).foldRight("bar", new IRightCombinator<Integer, String>() {
      public String combine(Integer it, String s) {
        return s + it;
      }
    }));
    Iterable<Integer> empty = Sequence.fromIterable(Collections.<Integer>emptyList());
    Assert.assertEquals("ack", Sequence.fromIterable(empty).foldRight("ack", new IRightCombinator<Integer, String>() {
      public String combine(Integer it, String s) {
        throw new RuntimeException();
      }
    }));
  }
}
