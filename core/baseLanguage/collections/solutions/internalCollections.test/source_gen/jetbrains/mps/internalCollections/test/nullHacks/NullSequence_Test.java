package jetbrains.mps.internalCollections.test.nullHacks;

/*Generated by MPS */

import jetbrains.mps.internalCollections.test.closures.Util_Test;
import jetbrains.mps.internal.collections.runtime.Sequence;
import junit.framework.Assert;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.ISequence;
import jetbrains.mps.internal.collections.runtime.ArrayUtils;

public class NullSequence_Test extends Util_Test {
  public void test_nullSequence() throws Exception {
    if (Sequence.USE_NULL_SEQUENCE) {
      Iterable<Integer> nullSeq = null;
      Assert.assertNull(nullSeq);
      Assert.assertNull(Sequence.<Integer>fromIterable(nullSeq).first());
      Assert.assertNull(Sequence.<Integer>fromIterable(nullSeq).last());
      Assert.assertEquals(0, Sequence.<Integer>fromIterable(nullSeq).count());
      Assert.assertEquals(0, Sequence.<Integer>fromIterable(nullSeq).count());
      List<Integer> list5 = ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(), 1, 2, 3, 4, 5);
      ListSequence.<Integer>fromList(list5).addSequence(Sequence.<Integer>fromIterable(nullSeq));
      this.assertIterableEquals(this.expect5(), list5);
      ListSequence.<Integer>fromList(list5).removeSequence(Sequence.<Integer>fromIterable(nullSeq));
      this.assertIterableEquals(this.expect5(), list5);
    }
  }

  public void test_nullCompareOperations() throws Exception {
    if (Sequence.USE_NULL_SEQUENCE) {
      Iterable<Integer> input = this.input5();
      this.assertIterableEquals(this.expect5(), Sequence.<Integer>fromIterable(input).concat(null));
      this.assertIterableEquals(this.expect5(), Sequence.<Integer>fromIterable(input).union(null));
      this.assertIterableEquals(this.expectEmpty(), Sequence.<Integer>fromIterable(input).intersect(null));
      this.assertIterableEquals(this.expect5(), Sequence.<Integer>fromIterable(input).disjunction(null));
      this.assertIterableEquals(this.expect5(), Sequence.<Integer>fromIterable(input).subtract(null));
    }
  }

  public void test_nullTranslate() throws Exception {
    if (Sequence.USE_NULL_SEQUENCE) {
      Iterable<Integer> input = this.input5();
      Iterable<String> nullSeq = Sequence.<Integer>fromIterable(input).<String>translate(new ITranslator2<Integer, String>() {
        public Iterable<String> translate(Integer it) {
          return ((ISequence<String>) null);
        }
      });
      Assert.assertEquals(0, Sequence.<String>fromIterable(nullSeq).count());
      Assert.assertEquals(0, Sequence.<String>fromIterable(nullSeq).count());
    }
  }

  public void test_nullList() throws Exception {
    if (Sequence.USE_NULL_SEQUENCE) {
      List<Integer> nullList = null;
      Assert.assertNull(nullList);
      Assert.assertNull(ListSequence.<Integer>fromList(nullList).first());
      Assert.assertNull(ListSequence.<Integer>fromList(nullList).last());
      Assert.assertNull(ListSequence.<Integer>fromList(nullList).first());
      Assert.assertNull(ListSequence.<Integer>fromList(nullList).getElement(-1));
      Assert.assertEquals(0, ListSequence.<Integer>fromList(nullList).count());
      Assert.assertEquals(0, ListSequence.<Integer>fromList(nullList).count());
    }
  }

  public void test_forEach() throws Exception {
    if (Sequence.USE_NULL_SEQUENCE) {
      for (Object foo : Sequence.emptySequence()) {
      }
    }
  }

  public void test_nullArray() throws Exception {
    int[] arr = null;
    for (int i : Sequence.<Integer>fromIterable(ArrayUtils.fromIntegerArray(arr))) {
      Assert.assertTrue(false);
    }
    Integer[] iarr = null;
    for (Integer i : Sequence.<Integer>fromIterable(Sequence.fromArray(iarr))) {
      Assert.assertTrue(false);
    }
    Object[] oarr = null;
    for (Object i : Sequence.<Object>fromIterable(Sequence.fromArray(oarr))) {
      Assert.assertTrue(false);
    }
  }
}
