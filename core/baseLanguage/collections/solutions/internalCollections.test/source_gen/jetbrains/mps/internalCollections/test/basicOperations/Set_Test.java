/*
 * Copyright 2003-2009 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.internalCollections.test.basicOperations;

/*Generated by MPS */

import jetbrains.mps.internalCollections.test.closures.Util_Test;
import org.junit.Test;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import junit.framework.Assert;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ArrayUtils;

public class Set_Test extends Util_Test {

  @Test()
  public void test_emptyCreator() throws Exception {
    Set<String> test = SetSequence.<String>fromArray();
    Assert.assertTrue(SetSequence.fromSet(test).isEmpty());
    Assert.assertFalse(SetSequence.fromSet(test).isNotEmpty());
    Assert.assertEquals(0, SetSequence.fromSet(test).count());
  }

  @Test()
  public void test_nonEmptyCreator() throws Exception {
    Set<String> test = SetSequence.<String>fromArray("A", "B", "C");
    Assert.assertFalse(SetSequence.fromSet(test).isEmpty());
    Assert.assertTrue(SetSequence.fromSet(test).isNotEmpty());
    Assert.assertEquals(3, SetSequence.fromSet(test).count());
  }

  @Test()
  public void test_clear() throws Exception {
    Set<String> test = SetSequence.<String>fromArray("A", "B", "C");
    SetSequence.fromSet(test).clear();
    Assert.assertTrue(SetSequence.fromSet(test).isEmpty());
  }

  @Test()
  public void test_add() throws Exception {
    Set<String> test = SetSequence.<String>fromArray("A", "B", "C");
    SetSequence.fromSet(test).addElement("D");
    Assert.assertEquals(4, SetSequence.fromSet(test).count());
    SetSequence.fromSet(test).addElement("E");
    Assert.assertEquals(5, SetSequence.fromSet(test).count());
    SetSequence.fromSet(test).addElement("A");
    Assert.assertEquals(5, SetSequence.fromSet(test).count());
  }

  @Test()
  public void test_addAll() throws Exception {
    Set<String> test = SetSequence.<String>fromArray("A", "B", "C");
    this.assertIterableEqualsIgnoreOrder(this.inputABC(), test);
    SetSequence.fromSet(test).addSequence(Sequence.fromIterable(this.inputABCDEF()));
    this.assertIterableEqualsIgnoreOrder(this.inputABCDEF(), test);
  }

  @Test()
  public void test_remove() throws Exception {
    Set<String> test = SetSequence.<String>fromArray("A", "B", "C", "D", "E", "F");
    SetSequence.fromSet(test).removeElement("F");
    SetSequence.fromSet(test).removeElement("D");
    SetSequence.fromSet(test).removeElement("E");
    this.assertIterableEqualsIgnoreOrder(this.inputABC(), test);
  }

  @Test()
  public void test_removeAll() throws Exception {
    Set<String> test = SetSequence.<String>fromArray("A", "B", "C");
    SetSequence.fromSet(test).removeSequence(Sequence.fromIterable(this.inputABC()));
    Assert.assertTrue(SetSequence.fromSet(test).isEmpty());
  }

  @Test()
  public void test_primitiveParameter() throws Exception {
    Set<Integer> test = SetSequence.<Integer>fromArray(1, 2, 3, 4, 5);
    this.assertIterableEqualsIgnoreOrder(this.input5(), test);
    int[] array = ArrayUtils.toIntArray(SetSequence.fromSet(test));
    Assert.assertEquals(5, array.length);
  }

}
