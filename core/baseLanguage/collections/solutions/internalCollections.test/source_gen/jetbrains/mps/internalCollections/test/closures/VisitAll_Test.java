/*
 * Copyright 2003-2009 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.internalCollections.test.closures;

/*Generated by MPS */

import org.junit.Test;
import jetbrains.mps.internal.collections.runtime.ISequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.StopIteratingException;
import java.util.Arrays;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import junit.framework.Assert;

public class VisitAll_Test extends Util_Test {

  @Test()
  public void test_visitAllMethod() throws Exception {
    ISequence<Integer> seq = Sequence.fromIterable(this.input5());
    final ArrayList<Integer> res = new ArrayList<Integer>();
    seq.visitAll(new IVisitor <Integer>() {

      public void visit(Integer i) {
        res.add(i * 2);
      }

    });
    this.assertIterableEquals(this.expectEven10(), res);
  }

  @Test()
  public void test_visitorVar() throws Exception {
    ISequence<Integer> seq = Sequence.fromIterable(this.input5());
    final ArrayList<Integer> res = new ArrayList<Integer>();
    IVisitor<Integer> visitor = new IVisitor <Integer>() {

      public void visit(Integer i) {
        res.add(i * 2);
      }

    };
    seq.visitAll(visitor);
    this.assertIterableEquals(this.expectEven10(), res);
  }

  @Test()
  public void test_visitOperation() throws Exception {
    final ArrayList<Integer> res = new ArrayList<Integer>();
    Sequence.fromIterable(this.input5()).visitAll(new IVisitor <Integer>() {

      public void visit(Integer it) {
        res.add(it * 2);
      }

    });
    this.assertIterableEquals(this.expectEven10(), res);
  }

  @Test()
  public void test_legacyForEach() throws Exception {
    final ArrayList<Integer> res = new ArrayList<Integer>();
    Sequence.fromIterable(this.input5()).visitAll(new IVisitor <Integer>() {

      public void visit(Integer it) {
        res.add(it * 2);
      }

    });
    this.assertIterableEquals(this.expectEven10(), res);
  }

  @Test()
  public void test_skipStop() throws Exception {
    final ArrayList<Integer> res = new ArrayList<Integer>();
    Sequence.fromIterable(this.input10()).visitAll(new IVisitor <Integer>() {

      public void visit(Integer it) {
__skip__:
        do {
          if (it % 2 == 1) {
            break __skip__;
          }
          res.add(it * 2);
          if (it > 5) {
            throw new StopIteratingException();
          }
        } while(false);
      }

    });
    this.assertIterableEquals(Arrays.asList(4, 8, 12), res);
    res.clear();
    Sequence.fromIterable(this.input10()).visitAll(new IVisitor <Integer>() {

      public void visit(Integer it) {
__skip__:
        do {
          if (it % 2 == 1) {
            break __skip__;
          }
          res.add(it * 2);
          if (it > 5) {
            throw new StopIteratingException();
          }
        } while(false);
      }

    });
    this.assertIterableEquals(Arrays.asList(4, 8, 12), res);
  }

  @Test()
  public void test_parameterizedAdaptation() throws Exception {
    List<String> ls = ListSequence.<String>fromArray("A", "BB", "CCC", "DDDD");
    final Wrappers._int len = new Wrappers._int(0);
    this.forEach(ls, new IVisitor <String>() {

      public void visit(String s) {
        len.value += s.length();
      }

    });
    Assert.assertEquals(10, len.value);
  }

  public void forEach(Iterable<String> seqs, IVisitor<String> visitor) {
    Sequence.fromIterable(seqs).visitAll(visitor);
  }

}
