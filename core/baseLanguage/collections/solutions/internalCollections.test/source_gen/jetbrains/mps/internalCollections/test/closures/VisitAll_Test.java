package jetbrains.mps.internalCollections.test.closures;

/*Generated by MPS */

import org.junit.Test;
import jetbrains.mps.internal.collections.runtime.ISequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.StopIteratingException;
import java.util.Arrays;

public class VisitAll_Test extends Util_Test {

  @Test()
  public void test_visitAllMethod() throws Exception {
    ISequence<Integer> seq = Sequence.fromIterable(this.input5());
    final ArrayList<Integer> res = new ArrayList<Integer>();
    seq.visitAll(new IVisitor <Integer>() {

      public void visit(Integer i) {
        res.add(i * 2);
      }

    });
    this.assertIterableEquals(this.expectEven10(), res);
  }

  @Test()
  public void test_visitorVar() throws Exception {
    ISequence<Integer> seq = Sequence.fromIterable(this.input5());
    final ArrayList<Integer> res = new ArrayList<Integer>();
    IVisitor<Integer> visitor = new IVisitor <Integer>() {

      public void visit(Integer i) {
        res.add(i * 2);
      }

    };
    seq.visitAll(visitor);
    this.assertIterableEquals(this.expectEven10(), res);
  }

  @Test()
  public void test_visitOperation() throws Exception {
    final ArrayList<Integer> res = new ArrayList<Integer>();
    Sequence.fromIterable(this.input5()).visitAll(new IVisitor <Integer>() {

      public void visit(Integer it) {
        res.add(it * 2);
      }

    });
    this.assertIterableEquals(this.expectEven10(), res);
  }

  @Test()
  public void test_legacyForEach() throws Exception {
    final ArrayList<Integer> res = new ArrayList<Integer>();
    Sequence.fromIterable(this.input5()).visitAll(new IVisitor <Integer>() {

      public void visit(Integer it) {
        res.add(it * 2);
      }

    });
    this.assertIterableEquals(this.expectEven10(), res);
  }

  @Test()
  public void test_skipStop() throws Exception {
    final ArrayList<Integer> res = new ArrayList<Integer>();
    Sequence.fromIterable(this.input10()).visitAll(new IVisitor <Integer>() {

      public void visit(Integer it) {
__skip__:
        do {
          if (it % 2 == 1) {
            break __skip__;
          }
          res.add(it * 2);
          if (it > 5) {
            throw new StopIteratingException();
          }
        } while(false);
      }

    });
    this.assertIterableEquals(Arrays.asList(4, 8, 12), res);
    res.clear();
    Sequence.fromIterable(this.input10()).visitAll(new IVisitor <Integer>() {

      public void visit(Integer it) {
__skip__:
        do {
          if (it % 2 == 1) {
            break __skip__;
          }
          res.add(it * 2);
          if (it > 5) {
            throw new StopIteratingException();
          }
        } while(false);
      }

    });
    this.assertIterableEquals(Arrays.asList(4, 8, 12), res);
  }

}
