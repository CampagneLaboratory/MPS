package jetbrains.mps.internalCollections.test.basicOperations;

/*Generated by MPS */

import jetbrains.mps.internalCollections.test.closures.Util_Test;
import org.junit.Test;
import jetbrains.mps.internal.collections.runtime.IMapSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import junit.framework.Assert;
import java.util.Arrays;
import java.util.Map;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class Map_Test extends Util_Test {

  @Test()
  public void test_mapMethod() throws Exception {
    IMapSequence<Integer, String> map = MapSequence.fromMap(new HashMap<Integer, String>());
    map.put(1, "a");
    map.put(2, "b");
    map.put(3, "c");
    Assert.assertEquals(3, map.size());
    this.assertIterableEqualsIgnoreOrder(Arrays.asList(1, 2, 3), map.keySet());
    this.assertIterableEqualsIgnoreOrder(Arrays.asList("a", "b", "c"), map.values());
  }

  @Test()
  public void test_mapInitializer() throws Exception {
    Map<Integer, String> map = MapSequence.<Integer, String>fromKeysArray(1, 2, 3).withValues("a", "b", "c");
    List<String> values = Arrays.asList("a", "b", "c");
    for(Integer i : Arrays.asList(1, 2, 3)) {
      Assert.assertTrue(MapSequence.fromMap(map).containsKey(i));
      Assert.assertEquals(values.get(i - 1), MapSequence.fromMap(map).get(i));
    }
    this.assertIterableEqualsIgnoreOrder(Arrays.asList(1, 2, 3), MapSequence.fromMap(map).keySet());
    for(Integer i : Arrays.asList(1, 2, 3)) {
      MapSequence.fromMap(map).remove(i);
    }
    for(Integer i : Arrays.asList(1, 2, 3)) {
      Assert.assertFalse(MapSequence.fromMap(map).containsKey(i));
    }
  }

  @Test()
  public void test_mapNoInitializer() throws Exception {
    Map<Integer, String> map = MapSequence.fromMap(new HashMap<Integer, String>());
    List<String> values = Arrays.asList("a", "b", "c");
    Integer idx = 1;
    for(String val : values) {
      MapSequence.fromMap(map).put(idx, val);
      idx = idx + 1;
    }
    for(Integer i : Arrays.asList(1, 2, 3)) {
      Assert.assertTrue(MapSequence.fromMap(map).containsKey(i));
      Assert.assertEquals(values.get(i - 1), MapSequence.fromMap(map).get(i));
    }
    this.assertIterableEqualsIgnoreOrder(Arrays.asList(1, 2, 3), MapSequence.fromMap(map).keySet());
  }

  @Test()
  public void test_clear() throws Exception {
    Map<Integer, String> map1 = MapSequence.<Integer, String>fromKeysArray(1, 2, 3).withValues("a", "b", "c");
    Assert.assertFalse(Sequence.fromIterable(MapSequence.fromMap(map1).keySet()).isEmpty());
    MapSequence.fromMap(map1).clear();
    Assert.assertTrue(Sequence.fromIterable(MapSequence.fromMap(map1).keySet()).isEmpty());
  }

  @Test()
  public void test_primitiveParameter() throws Exception {
    Map<Integer, Character> ascii = MapSequence.<Integer, Character>fromKeysArray(48, 49, 50).withValues('0', '1', '2');
    Assert.assertSame('1', MapSequence.fromMap(ascii).get(49));
    Iterable<Integer> keys = MapSequence.fromMap(ascii).keySet();
    for(int k : Sequence.fromIterable(keys)) {
      Assert.assertEquals(Character.valueOf((char)k), MapSequence.fromMap(ascii).get(k));
    }
  }

  @Test()
  public void test_array() throws Exception {
    Map<String, String[]> test = MapSequence.<String, String[]>fromKeysArray("foo").withValues(new String[]{"bar","baz"});
    Iterable<String> seq = MapSequence.fromMap(test).keySet();
    Assert.assertTrue(Sequence.fromIterable(seq).contains("foo"));
    String[] array = MapSequence.fromMap(test).get("foo");
    Assert.assertSame(2, array.length);
  }

  @Test()
  public void test_arrayOfString() throws Exception {
    Map<String, String[]> test = MapSequence.<String, String[]>fromKeysArray("foo").withValues(new String[]{"bar","baz"});
    Iterable<String> seq = MapSequence.fromMap(test).keySet();
    Assert.assertTrue(Sequence.fromIterable(seq).contains("foo"));
    String[] array = MapSequence.fromMap(test).get("foo");
    Assert.assertSame(2, array.length);
  }

  @Test()
  public void test_mps4050() throws Exception {
    /*
      Map<Foo, List<Bar>> mmap = MapSequence.fromMap(new HashMap<Foo, List<Bar>>());
      for(List<Bar> lst : Sequence.fromIterable(mmap.values())) {
        lst.<!TextGen not found for 'jetbrains.mps.baseLanguage.structure.AbstractOperation'!>;
      }
    */
  }

}
