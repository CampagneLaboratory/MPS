package jetbrains.mps.internalCollections.test.compareOperations;

/*Generated by MPS */

import jetbrains.mps.internalCollections.test.closures.Util_Test;
import org.junit.Test;
import jetbrains.mps.internal.collections.runtime.ISequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Arrays;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class Disjunct_Test extends Util_Test {

  @Test()
  public void test_disjunctionMethod() throws Exception {
    ISequence<Integer> input = Sequence.fromArray(1, 2, 3, 3, 3);
    ISequence<Integer> test = input.disjunction(Sequence.fromArray(1, 2, 2, 3, 3, 4));
    this.assertIterableEqualsIgnoreOrder(Arrays.asList(2, 3, 4), test);
  }

  @Test()
  public void test_discjunctOperation() throws Exception {
    Iterable<Integer> input = Arrays.asList(1, 2, 2, 3, 4, 4);
    Iterable<Integer> test = Sequence.fromIterable(input).disjunction(ListSequence.fromList(Arrays.asList(1, 2, 4, 4, 5)));
    this.assertIterableEqualsIgnoreOrder(Arrays.asList(2, 3, 5), test);
  }

  @Test()
  public void test_disjunctionEquivalence() throws Exception {
    Iterable<String> a = Arrays.asList("X", "W", "Z", "Y", "X", "Z", "X", "Y", "W");
    Iterable<String> b = Arrays.asList("V", "X", "V", "Z", "Z", "Z", "Y");
    this.assertIterableEqualsIgnoreOrder(Sequence.fromIterable(a).disjunction(Sequence.fromIterable(b)), Sequence.fromIterable(a).union(Sequence.fromIterable(b)).subtract(Sequence.fromIterable(a).intersect(Sequence.fromIterable(b))));
    this.assertIterableEqualsIgnoreOrder(Sequence.fromIterable(a).disjunction(Sequence.fromIterable(b)), Sequence.fromIterable(a).subtract(Sequence.fromIterable(b)).union(Sequence.fromIterable(b).subtract(Sequence.fromIterable(a))));
  }

}
