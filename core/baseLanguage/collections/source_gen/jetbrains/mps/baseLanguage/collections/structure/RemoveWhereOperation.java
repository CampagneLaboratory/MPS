package jetbrains.mps.baseLanguage.collections.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class RemoveWhereOperation extends InternalSequenceOperation implements IListOperation, IStackOperation, IQueueOperation, IDequeOperation {
  public static final String concept = "jetbrains.mps.baseLanguage.collections.structure.RemoveWhereOperation";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";

  public RemoveWhereOperation(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(RemoveWhereOperation.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(RemoveWhereOperation.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(RemoveWhereOperation.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(RemoveWhereOperation.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(RemoveWhereOperation.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(RemoveWhereOperation.VIRTUAL_PACKAGE, value);
  }

  public Expression getFilter() {
    return this.ensureAdapter(Expression.class, "closure", this.getClosure());
  }

  public void setFilter(Expression node) {
    this.setClosure(node);
  }


  public static RemoveWhereOperation newInstance(SModel sm, boolean init) {
    return (RemoveWhereOperation)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.RemoveWhereOperation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static RemoveWhereOperation newInstance(SModel sm) {
    return RemoveWhereOperation.newInstance(sm, false);
  }

}
