package jetbrains.mps.baseLanguage.collections.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.AbstractLoopStatement;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MultiForEachStatement extends AbstractLoopStatement {
  public static final String concept = "jetbrains.mps.baseLanguage.collections.structure.MultiForEachStatement";
  public static final String FOR_EACH = "forEach";

  public MultiForEachStatement(SNode node) {
    super(node);
  }

  public int getForEachsCount() {
    return this.getChildCount(MultiForEachStatement.FOR_EACH);
  }

  public Iterator<MultiForEachPair> forEachs() {
    return this.children(MultiForEachPair.class, MultiForEachStatement.FOR_EACH);
  }

  public List<MultiForEachPair> getForEachs() {
    return this.getChildren(MultiForEachPair.class, MultiForEachStatement.FOR_EACH);
  }

  public void addForEach(MultiForEachPair node) {
    this.addChild(MultiForEachStatement.FOR_EACH, node);
  }

  public void insertForEach(MultiForEachPair prev, MultiForEachPair node) {
    this.insertChild(prev, MultiForEachStatement.FOR_EACH, node);
  }

  public static MultiForEachStatement newInstance(SModel sm, boolean init) {
    return (MultiForEachStatement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.MultiForEachStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MultiForEachStatement newInstance(SModel sm) {
    return MultiForEachStatement.newInstance(sm, false);
  }
}
