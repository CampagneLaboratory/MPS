package jetbrains.mps.baseLanguage.collections.plugin;

/*Generated by MPS */

import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapperFactory;
import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapper;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaValue;
import jetbrains.mps.debug.evaluation.EvaluationUtils;
import jetbrains.mps.debug.evaluation.proxies.IObjectValueProxy;
import jetbrains.mps.debug.evaluation.proxies.MirrorUtil;
import jetbrains.mps.debug.evaluation.EvaluationException;
import java.util.List;
import jetbrains.mps.debug.runtime.java.programState.watchables.CustomJavaWatchable;
import java.util.ArrayList;
import jetbrains.mps.debug.evaluation.proxies.PrimitiveValueProxy;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaObjectValue;

public class ListSequenceViewer_WrapperFactory extends ValueWrapperFactory {
  public ListSequenceViewer_WrapperFactory() {
  }

  public ValueWrapper createValueWrapper(JavaValue value) {
    return new ListSequenceViewer_WrapperFactory.ListSequenceViewerWrapper(value);
  }

  @Override
  public boolean canWrapValue(JavaValue value) {
    try {
      if (!(EvaluationUtils.isInstanceOf(value.getValue().type(), "Ljetbrains/mps/internal/collections/runtime/ListSequence;", value.getValue().virtualMachine()))) {
        return false;
      }
      return canWrapValue((IObjectValueProxy) MirrorUtil.getValueProxy(value.getValue(), value.getThreadReference()));
    } catch (EvaluationException e) {
      throw new RuntimeException(e);
    }
  }

  protected boolean canWrapValue(IObjectValueProxy value) throws EvaluationException {
    return true;
  }

  public static class ListSequenceViewerWrapper extends ValueWrapper {
    public ListSequenceViewerWrapper(JavaValue value) {
      super(value);
    }

    protected List<CustomJavaWatchable> getSubvaluesImpl() {
      try {
        return getSubvaluesImpl((IObjectValueProxy) myValueProxy);
      } catch (EvaluationException e) {
        throw new RuntimeException(e);
        // todo throw something normal 
      }
    }

    protected List<CustomJavaWatchable> getSubvaluesImpl(IObjectValueProxy value) throws EvaluationException {
      List<CustomJavaWatchable> watchables = new ArrayList<CustomJavaWatchable>();

      PrimitiveValueProxy size = ((PrimitiveValueProxy) value.invokeMethod("size", "()I"));
      watchables.add(new CollectionsWatchables.MyWatchable_size(JavaObjectValue.fromJDIValue(size.getJDIValue(), getThreadReference()), "size"));

      for (IObjectValueProxy element : EvaluationUtils.<IObjectValueProxy>toIterable(value)) {
        watchables.add(new CollectionsWatchables.MyWatchable_element(JavaObjectValue.fromJDIValue(element.getJDIValue(), getThreadReference()), "element"));
      }

      return watchables;
    }
  }
}
