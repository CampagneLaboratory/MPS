package jetbrains.mps.baseLanguage.collections.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.pattern.IMatchingPattern;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class supertypesOf_ClassifierType_Iterator_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  private static SNodePointer SNODE_POINTER4 = new SNodePointer("f:java_stub#java.util(java.util@java_stub)", "~Iterator");

  /*package*/ GeneratedMatchingPattern myMatchingPattern;

  public supertypesOf_ClassifierType_Iterator_SubtypingRule() {
  }

  public SNode getSubOrSuperType(SNode iterator, TypeCheckingContext typeCheckingContext) {
    return new supertypesOf_ClassifierType_Iterator_SubtypingRule.QuotationClass_2060_0().createNode(((SNode) this.myMatchingPattern.getFieldValue("PatternVar_p")), typeCheckingContext);
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.ClassifierType";
  }

  public boolean isApplicable(SNode argument) {
    this.myMatchingPattern = new supertypesOf_ClassifierType_Iterator_SubtypingRule.Pattern_2060_0();
    return this.myMatchingPattern.match(argument);
  }

  public boolean isWeak() {
    return true;
  }

  public static class Pattern_2060_0 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ SNode PatternVar_p;

    public Pattern_2060_0() {
    }

    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_2376_0;
        nodeToMatch_2376_0 = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.structure.ClassifierType".equals(nodeToMatch_2376_0.getConceptFqName()))) {
          return false;
        }
        {
          SNode referent;
          referent = SNODE_POINTER4.getNode();
          if (nodeToMatch_2376_0.getReferent("classifier") != referent) {
            return false;
          }
        }
        {
          String childRole2376_0 = "parameter";
          if (nodeToMatch_2376_0.getChildCount(childRole2376_0) != 1) {
            return false;
          }
          {
            this.PatternVar_p = null;
            SNode childVar_2376_0 = nodeToMatch_2376_0.getChildren(childRole2376_0).get(0);
            this.PatternVar_p = childVar_2376_0;
          }
        }
      }
      return true;
    }

    public boolean hasAntiquotations() {
      return false;
    }

    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        this.PatternVar_p = (SNode) pattern.getFieldValue("PatternVar_p");
      }
    }

    public Object getFieldValue(String fieldName) {
      if ("PatternVar_p".equals(fieldName)) {
        return this.PatternVar_p;
      }
      return null;
    }
  }

  public static class QuotationClass_2060_0 {
    public QuotationClass_2060_0() {
    }

    public SNode createNode(Object parameter_2060_0, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_2060_0 = null;
      SNode quotedNode_2060_1 = null;
      {
        quotedNode_2060_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ContainerIteratorType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2060_0 = quotedNode_2060_0;
        {
          quotedNode_2060_1 = (SNode) parameter_2060_0;
          SNode quotedNode1_2060_1;
          if (_parameterValues_129834374.contains(quotedNode_2060_1)) {
            quotedNode1_2060_1 = CopyUtil.copy(quotedNode_2060_1);
          } else {
            _parameterValues_129834374.add(quotedNode_2060_1);
            quotedNode1_2060_1 = quotedNode_2060_1;
          }
          if (quotedNode1_2060_1 != null) {
            quotedNode_2060_0.addChild("elementType", HUtil.copyIfNecessary(quotedNode1_2060_1, typeCheckingContext));
          }
        }
        result = quotedNode1_2060_0;
      }
      return result;
    }

    public SNode createNode(Object parameter_2060_0) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_2060_0 = null;
      SNode quotedNode_2060_1 = null;
      {
        quotedNode_2060_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ContainerIteratorType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2060_0 = quotedNode_2060_0;
        {
          quotedNode_2060_1 = (SNode) parameter_2060_0;
          SNode quotedNode1_2060_1;
          if (_parameterValues_129834374.contains(quotedNode_2060_1)) {
            quotedNode1_2060_1 = CopyUtil.copy(quotedNode_2060_1);
          } else {
            _parameterValues_129834374.add(quotedNode_2060_1);
            quotedNode1_2060_1 = quotedNode_2060_1;
          }
          if (quotedNode1_2060_1 != null) {
            quotedNode_2060_0.addChild("elementType", HUtil.copyIfNecessary(quotedNode1_2060_1));
          }
        }
        result = quotedNode1_2060_0;
      }
      return result;
    }
  }
}
