package jetbrains.mps.baseLanguage.collections.plugin;

/*Generated by MPS */

import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapperFactory;
import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapper;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaValue;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaObjectValue;
import java.util.List;
import jetbrains.mps.debug.runtime.java.programState.watchables.CustomJavaWatchable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaPrimitiveValue;

public class ListViewer_Factory extends ValueWrapperFactory {
  public ListViewer_Factory() {
  }

  public ValueWrapper createValueWrapper(JavaValue value) {
    return new ListViewer_Factory.ListViewer_Wrapper(value);
  }

  @Override
  public boolean canWrapValue(JavaValue value) {
    if (value instanceof JavaObjectValue) {
      JavaObjectValue ov = (JavaObjectValue) value;
      return "jetbrains.mps.internal.collections.runtime.ListSequence".equals(ov.getClassFqName());
    } else {
      return false;
    }
  }

  public static class ListViewer_Wrapper extends ValueWrapper {
    public ListViewer_Wrapper(JavaValue value) {
      super(value);
    }

    public List<CustomJavaWatchable> getSubvaluesImpl() {
      JavaObjectValue ov = (JavaObjectValue) myWrappedValue;
      List<CustomJavaWatchable> result = ListSequence.fromList(new ArrayList<CustomJavaWatchable>());
      JavaObjectValue listValue = (JavaObjectValue) ov.getFieldValue("list");
      int size = (Integer) ((JavaPrimitiveValue) listValue.executeMethod("size", "()I")).getJavaValue();
      for (int index = 0; index < size; index++) {
        JavaValue v = listValue.executeMethod("get", "(I)Ljava/lang/Object;", index);
        ListSequence.fromList(result).addElement(new CollectionsWatchables.MyWatchable_element(v, "element"));
      }
      return result;
    }
  }
}
