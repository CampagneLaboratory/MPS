package jetbrains.mps.baseLanguage.collections.plugin;

/*Generated by MPS */

import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapperFactory;
import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapper;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaValue;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaObjectValue;
import java.util.List;
import jetbrains.mps.debug.runtime.java.programState.watchables.CustomJavaWatchable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaPrimitiveValue;

public class SequentialListViewer_Factory extends ValueWrapperFactory {
  public SequentialListViewer_Factory() {
  }

  public ValueWrapper createValueWrapper(JavaValue value) {
    return new SequentialListViewer_Factory.SequentialListViewer_Wrapper(value);
  }

  @Override
  public boolean canWrapValue(JavaValue value) {
    if (value instanceof JavaObjectValue) {
      JavaObjectValue ov = (JavaObjectValue) value;
      return !("jetbrains.mps.internal.collections.runtime.ListSequence".equals(ov.getClassFqName())) && ov.isInstanceOf("java.util.List");
    } else {
      return false;
    }
  }

  public static class SequentialListViewer_Wrapper extends ValueWrapper {
    public SequentialListViewer_Wrapper(JavaValue value) {
      super(value);
    }

    public List<CustomJavaWatchable> getSubvaluesImpl() {
      JavaObjectValue objectOriginalValue = (JavaObjectValue) myWrappedValue;
      List<CustomJavaWatchable> result = ListSequence.fromList(new ArrayList<CustomJavaWatchable>());

      JavaPrimitiveValue size = (JavaPrimitiveValue) objectOriginalValue.executeMethod("size", "()I");
      ListSequence.fromList(result).addElement(new CollectionsWatchables.MyWatchable_size(JavaObjectValue.tryToWrap(size), "size"));

      JavaObjectValue iterator = (JavaObjectValue) objectOriginalValue.executeMethod("iterator", "()Ljava/util/Iterator;");

      while ((Boolean) ((JavaPrimitiveValue) iterator.executeMethod("hasNext", "()Z")).getJavaValue()) {
        JavaValue value = iterator.executeMethod("next", "()Ljava/lang/Object;");
        ListSequence.fromList(result).addElement(new CollectionsWatchables.MyWatchable_element(JavaObjectValue.tryToWrap(value), "element"));
      }

      return result;
    }
  }
}
