package jetbrains.mps.baseLanguage.collections.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class supertypesOf_ISequence_class_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public supertypesOf_ISequence_class_SubtypingRule() {
  }

  public List<SNode> getSubOrSuperTypes(SNode ct, TypeCheckingContext typeCheckingContext) {
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    if (SLinkOperations.getTarget(new supertypesOf_ISequence_class_SubtypingRule.QuotationClass_4893_0().createNode(typeCheckingContext), "classifier", false) == SLinkOperations.getTarget(ct, "classifier", false)) {
      res = ListSequence.fromList(new ArrayList<SNode>());
      List<SNode> ptypes = SLinkOperations.getTargets(ct, "parameter", true);
      if (ListSequence.fromList(ptypes).count() > 0) {
        SNode elType = ListSequence.fromList(ptypes).getElement(0);
        ListSequence.fromList(res).addElement(new supertypesOf_ISequence_class_SubtypingRule.QuotationClass_4893_1().createNode(elType, typeCheckingContext));
      }
    }
    return res;
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.ClassifierType";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean isWeak() {
    return true;
  }

  public static class QuotationClass_4893_0 {
    public QuotationClass_4893_0() {
    }

    public SNode createNode(final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_4893_2 = null;
      {
        quotedNode_4893_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_4893_1 = quotedNode_4893_2;
        quotedNode1_4893_1.addReference(SReference.create("classifier", quotedNode1_4893_1, SModelReference.fromString("f:java_stub#jetbrains.mps.internal.collections.runtime(jetbrains.mps.internal.collections.runtime@java_stub)"), SNodeId.fromString("~ISequence")));
        result = quotedNode1_4893_1;
      }
      return result;
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_4893_2 = null;
      {
        quotedNode_4893_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_4893_1 = quotedNode_4893_2;
        quotedNode1_4893_1.addReference(SReference.create("classifier", quotedNode1_4893_1, SModelReference.fromString("f:java_stub#jetbrains.mps.internal.collections.runtime(jetbrains.mps.internal.collections.runtime@java_stub)"), SNodeId.fromString("~ISequence")));
        result = quotedNode1_4893_1;
      }
      return result;
    }
  }

  public static class QuotationClass_4893_1 {
    public QuotationClass_4893_1() {
    }

    public SNode createNode(Object parameter_4893_0, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_4893_0 = null;
      SNode quotedNode_4893_1 = null;
      {
        quotedNode_4893_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SequenceType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_4893_0 = quotedNode_4893_0;
        {
          quotedNode_4893_1 = (SNode) parameter_4893_0;
          SNode quotedNode1_40;
          if (_parameterValues_129834374.contains(quotedNode_4893_1)) {
            quotedNode1_40 = CopyUtil.copy(quotedNode_4893_1);
          } else {
            _parameterValues_129834374.add(quotedNode_4893_1);
            quotedNode1_40 = quotedNode_4893_1;
          }
          if (quotedNode1_40 != null) {
            quotedNode_4893_0.addChild("elementType", HUtil.copyIfNecessary(quotedNode1_40, typeCheckingContext));
          }
        }
        result = quotedNode1_4893_0;
      }
      return result;
    }

    public SNode createNode(Object parameter_4893_0) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_4893_0 = null;
      SNode quotedNode_4893_1 = null;
      {
        quotedNode_4893_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SequenceType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_4893_0 = quotedNode_4893_0;
        {
          quotedNode_4893_1 = (SNode) parameter_4893_0;
          SNode quotedNode1_40;
          if (_parameterValues_129834374.contains(quotedNode_4893_1)) {
            quotedNode1_40 = CopyUtil.copy(quotedNode_4893_1);
          } else {
            _parameterValues_129834374.add(quotedNode_4893_1);
            quotedNode1_40 = quotedNode_4893_1;
          }
          if (quotedNode1_40 != null) {
            quotedNode_4893_0.addChild("elementType", HUtil.copyIfNecessary(quotedNode1_40));
          }
        }
        result = quotedNode1_4893_0;
      }
      return result;
    }
  }
}
