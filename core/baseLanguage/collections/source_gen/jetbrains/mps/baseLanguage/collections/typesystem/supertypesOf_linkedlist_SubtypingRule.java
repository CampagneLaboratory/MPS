package jetbrains.mps.baseLanguage.collections.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class supertypesOf_linkedlist_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public supertypesOf_linkedlist_SubtypingRule() {
  }

  public List<SNode> getSubOrSuperTypes(SNode llt, TypeCheckingContext typeCheckingContext) {
    List<SNode> res = new ArrayList<SNode>();
    ListSequence.fromList(res).addElement(new _Quotations.QuotationClass_167().createNode(SLinkOperations.getTarget(llt, "elementType", true), typeCheckingContext));
    ListSequence.fromList(res).addElement(new _Quotations.QuotationClass_168().createNode(SLinkOperations.getTarget(llt, "elementType", true), typeCheckingContext));
    ListSequence.fromList(res).addElement(new _Quotations.QuotationClass_169().createNode(SLinkOperations.getTarget(llt, "elementType", true), typeCheckingContext));
    return res;
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.collections.structure.LinkedListType";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean isWeak() {
    return false;
  }
}
