package jetbrains.mps.baseLanguage.collections.scripts;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.apache.commons.lang.ObjectUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Iterator;
import jetbrains.mps.util.NameUtil;

public class ListMigrationUtil {

  public ListMigrationUtil() {
  }

  public static boolean isApplicabe(SNode node, String name, List<SNode> params) {
    if (!(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.getParent(node), "operand", true)), "jetbrains.mps.baseLanguage.collections.structure.ListType"))) {
      return false;
    }
    SNode declaration = SLinkOperations.getTarget(node, "baseMethodDeclaration", false);
    if (!(ObjectUtils.equals(SPropertyOperations.getString(declaration, "name"), name))) {
      return false;
    }
    if (SNodeOperations.getParent(declaration) != SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)", "~List") && SNodeOperations.getParent(declaration) != SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)", "~LinkedList") && SNodeOperations.getParent(declaration) != SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)", "~ArrayList")) {
      return false;
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "actualArgument", true)).count() != ListSequence.fromList(params).count()) {
      return false;
    }
    {
      SNode argument;
      SNode concept;
      Iterator<SNode> argument_iterator = SLinkOperations.getTargets(node, "actualArgument", true).iterator();
      Iterator<SNode> concept_iterator = params.iterator();
      while (true) {
        if (!(argument_iterator.hasNext())) {
          break;
        }
        if (!(concept_iterator.hasNext())) {
          break;
        }
        argument = argument_iterator.next();
        concept = concept_iterator.next();
        if (!(SNodeOperations.isInstanceOf(argument, NameUtil.nodeFQName(concept)))) {
        }
      }
    }
    return true;
  }

}
