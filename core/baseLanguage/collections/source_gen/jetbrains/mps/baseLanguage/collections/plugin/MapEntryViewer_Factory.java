package jetbrains.mps.baseLanguage.collections.plugin;

/*Generated by MPS */

import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapperFactory;
import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapper;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaValue;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaObjectValue;
import java.util.List;
import jetbrains.mps.debug.runtime.java.programState.watchables.CustomJavaWatchable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaStringValue;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaPrimitiveValue;

public class MapEntryViewer_Factory extends ValueWrapperFactory {
  public MapEntryViewer_Factory() {
  }

  public ValueWrapper createValueWrapper(JavaValue value) {
    return new MapEntryViewer_Factory.MapEntryViewer_Wrapper(value);
  }

  @Override
  public boolean canWrapValue(JavaValue value) {
    if (value instanceof JavaObjectValue) {
      JavaObjectValue ov = (JavaObjectValue) value;
      return ov.isInstanceOf("java.util.Map$Entry");
    } else {
      return false;
    }
  }

  public static class MapEntryViewer_Wrapper extends ValueWrapper {
    public MapEntryViewer_Wrapper(JavaValue value) {
      super(value);
    }

    public List<CustomJavaWatchable> getSubvaluesImpl() {
      List<CustomJavaWatchable> result = ListSequence.fromList(new ArrayList<CustomJavaWatchable>());
      JavaObjectValue ov = (JavaObjectValue) myWrappedValue;
      JavaValue key = ov.executeMethod("getKey", "()Ljava/lang/Object;");
      JavaValue value = ov.executeMethod("getValue", "()Ljava/lang/Object;");
      ListSequence.fromList(result).addElement(new CollectionsWatchables.MyWatchable_key(JavaObjectValue.tryToWrap(key), "key"));
      ListSequence.fromList(result).addElement(new CollectionsWatchables.MyWatchable_value(JavaObjectValue.tryToWrap(value), "value"));
      return result;
    }

    @Override
    public String getValuePresentation() {
      JavaObjectValue ov = (JavaObjectValue) myWrappedValue;
      JavaValue key = ov.executeMethod("getKey", "()Ljava/lang/Object;");
      JavaValue value = ov.executeMethod("getValue", "()Ljava/lang/Object;");
      String result = "[";

      if (key instanceof JavaObjectValue) {
        result = result + ((JavaStringValue) ((JavaObjectValue) key).executeMethod("toString", "()Ljava/lang/String;")).getJavaStringValue();
      } else {
        result = result + ((JavaPrimitiveValue) key).getJavaValue();
      }

      result += "] = ";

      if (value instanceof JavaObjectValue) {
        result = result + ((JavaStringValue) ((JavaObjectValue) value).executeMethod("toString", "()Ljava/lang/String;")).getJavaStringValue();
      } else {
        result = result + ((JavaPrimitiveValue) value).getJavaValue();
      }

      return result;
    }
  }
}
