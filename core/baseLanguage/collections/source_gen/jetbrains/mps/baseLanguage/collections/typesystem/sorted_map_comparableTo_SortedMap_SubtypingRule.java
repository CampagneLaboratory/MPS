package jetbrains.mps.baseLanguage.collections.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class sorted_map_comparableTo_SortedMap_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public sorted_map_comparableTo_SortedMap_SubtypingRule() {
  }

  public SNode getSubOrSuperType(SNode sortedMapType, TypeCheckingContext typeCheckingContext) {
    return new sorted_map_comparableTo_SortedMap_SubtypingRule.QuotationClass_2370_0().createNode(SLinkOperations.getTarget(sortedMapType, "keyType", true), SLinkOperations.getTarget(sortedMapType, "valueType", true), typeCheckingContext);
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.collections.structure.SortedMapType";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean isWeak() {
    return true;
  }

  public static class QuotationClass_2370_0 {
    public QuotationClass_2370_0() {
    }

    public SNode createNode(Object parameter_2370_0, Object parameter_2370_1, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_279 = null;
      SNode quotedNode_280 = null;
      SNode quotedNode_281 = null;
      {
        quotedNode_279 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_279 = quotedNode_279;
        quotedNode1_279.addReference(SReference.create("classifier", quotedNode1_279, SModelReference.fromString("f:java_stub#java.util(java.util@java_stub)"), SNodeId.fromString("~SortedMap")));
        {
          quotedNode_280 = (SNode) parameter_2370_0;
          SNode quotedNode1_280;
          if (_parameterValues_129834374.contains(quotedNode_280)) {
            quotedNode1_280 = CopyUtil.copy(quotedNode_280);
          } else {
            _parameterValues_129834374.add(quotedNode_280);
            quotedNode1_280 = quotedNode_280;
          }
          if (quotedNode1_280 != null) {
            quotedNode_279.addChild("parameter", HUtil.copyIfNecessary(quotedNode1_280, typeCheckingContext));
          }
        }
        {
          quotedNode_281 = (SNode) parameter_2370_1;
          SNode quotedNode1_281;
          if (_parameterValues_129834374.contains(quotedNode_281)) {
            quotedNode1_281 = CopyUtil.copy(quotedNode_281);
          } else {
            _parameterValues_129834374.add(quotedNode_281);
            quotedNode1_281 = quotedNode_281;
          }
          if (quotedNode1_281 != null) {
            quotedNode_279.addChild("parameter", HUtil.copyIfNecessary(quotedNode1_281, typeCheckingContext));
          }
        }
        result = quotedNode1_279;
      }
      return result;
    }

    public SNode createNode(Object parameter_2370_0, Object parameter_2370_1) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_279 = null;
      SNode quotedNode_280 = null;
      SNode quotedNode_281 = null;
      {
        quotedNode_279 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_279 = quotedNode_279;
        quotedNode1_279.addReference(SReference.create("classifier", quotedNode1_279, SModelReference.fromString("f:java_stub#java.util(java.util@java_stub)"), SNodeId.fromString("~SortedMap")));
        {
          quotedNode_280 = (SNode) parameter_2370_0;
          SNode quotedNode1_280;
          if (_parameterValues_129834374.contains(quotedNode_280)) {
            quotedNode1_280 = CopyUtil.copy(quotedNode_280);
          } else {
            _parameterValues_129834374.add(quotedNode_280);
            quotedNode1_280 = quotedNode_280;
          }
          if (quotedNode1_280 != null) {
            quotedNode_279.addChild("parameter", HUtil.copyIfNecessary(quotedNode1_280));
          }
        }
        {
          quotedNode_281 = (SNode) parameter_2370_1;
          SNode quotedNode1_281;
          if (_parameterValues_129834374.contains(quotedNode_281)) {
            quotedNode1_281 = CopyUtil.copy(quotedNode_281);
          } else {
            _parameterValues_129834374.add(quotedNode_281);
            quotedNode1_281 = quotedNode_281;
          }
          if (quotedNode1_281 != null) {
            quotedNode_279.addChild("parameter", HUtil.copyIfNecessary(quotedNode1_281));
          }
        }
        result = quotedNode1_279;
      }
      return result;
    }
  }
}
