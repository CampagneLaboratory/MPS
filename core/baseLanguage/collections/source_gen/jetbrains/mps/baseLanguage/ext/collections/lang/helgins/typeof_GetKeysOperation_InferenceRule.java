package jetbrains.mps.baseLanguage.ext.collections.lang.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.baseLanguage.constraints.IOperation_Behavior;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_GetKeysOperation_InferenceRule implements InferenceRule_Runtime {

  public  typeof_GetKeysOperation_InferenceRule() {
  }

  public void applyRule(final SNode getKeysOperation) {
    final SNode KEY_typevar_1201874360962 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);
    final SNode VALUE_typevar_1201874371667 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);
    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(IOperation_Behavior.call_getOperand_1197028596169(getKeysOperation), "jetbrains.mps.baseLanguage.ext.collections.lang.helgins", "1201874356659", true), new QuotationClass_58().createNode(TypeChecker.getInstance().getEquationManager().getRepresentator(KEY_typevar_1201874360962), TypeChecker.getInstance().getEquationManager().getRepresentator(VALUE_typevar_1201874371667)), IOperation_Behavior.call_getOperand_1197028596169(getKeysOperation), null, "jetbrains.mps.baseLanguage.ext.collections.lang.helgins", "1201874387564", false);
    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(getKeysOperation, "jetbrains.mps.baseLanguage.ext.collections.lang.helgins", "1201874348006", true), new QuotationClass_59().createNode(TypeChecker.getInstance().getEquationManager().getRepresentator(KEY_typevar_1201874360962)), getKeysOperation, null, "jetbrains.mps.baseLanguage.ext.collections.lang.helgins", "1201874414202");
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.ext.collections.lang.structure.GetKeysOperation";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
