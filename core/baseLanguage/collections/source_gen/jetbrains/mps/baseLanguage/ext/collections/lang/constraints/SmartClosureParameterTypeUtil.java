package jetbrains.mps.baseLanguage.ext.collections.lang.constraints;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.dependencies.InferenceMethod;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.helgins.inference.TypeCheckingContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.baseLanguage.behavior.IOperation_Behavior;

public class SmartClosureParameterTypeUtil {

  @InferenceMethod()
  public static void equateInputType(TypeCheckingContext typeCheckingContext, SNode scpd, SNode InputType) {
    SNode vabs = SNodeOperations.getAncestorWhereConceptInList(scpd, new String[]{"jetbrains.mps.baseLanguage.structure.VariableDeclaration","jetbrains.mps.baseLanguage.structure.AssignmentExpression","jetbrains.mps.baseLanguage.structure.IMethodCall","jetbrains.mps.baseLanguage.structure.DotExpression"}, false, false);
    if (SNodeOperations.isInstanceOf(vabs, "jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
      {
        SNode _nodeToCheck_1029348928467 = scpd;
        BaseIntentionProvider intentionProvider = null;
        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(vabs, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.ext.collections.lang.constraints)", "1206111346115", true), InputType, _nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.ext.collections.lang.constraints)", "1206111352089", intentionProvider);
      }
    } else
    if (SNodeOperations.isInstanceOf(vabs, "jetbrains.mps.baseLanguage.structure.AssignmentExpression")) {
      {
        SNode _nodeToCheck_1029348928467 = scpd;
        BaseIntentionProvider intentionProvider = null;
        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(vabs, "lValue", true), "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.ext.collections.lang.constraints)", "1206111371042", true), InputType, _nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.ext.collections.lang.constraints)", "1206111366159", intentionProvider);
      }
    } else
    if (SNodeOperations.isInstanceOf(vabs, "jetbrains.mps.baseLanguage.structure.IMethodCall") && SNodeOperations.getParent(SNodeOperations.getParent(scpd)) == vabs) {
      List<SNode> paramDecls = SLinkOperations.getTargets(SLinkOperations.getTarget(vabs, "baseMethodDeclaration", false), "parameter", true);
      SNode pd = paramDecls.get(SNodeOperations.getIndexInParent(SNodeOperations.getParent(scpd)));
      SNode ptype = SLinkOperations.getTarget(pd, "type", true);
      if (SNodeOperations.isInstanceOf(ptype, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
        {
          SNode _nodeToCheck_1029348928467 = scpd;
          BaseIntentionProvider intentionProvider = null;
          TypeChecker.getInstance().getRuntimeSupport().createEquation(InputType, ptype, _nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.ext.collections.lang.constraints)", "1206111460144", intentionProvider);
        }
      }
    } else
    if (SNodeOperations.isInstanceOf(vabs, "jetbrains.mps.baseLanguage.structure.DotExpression")) {
      {
        SNode _nodeToCheck_1029348928467 = scpd;
        BaseIntentionProvider intentionProvider = null;
        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(vabs, "operand", true), "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.ext.collections.lang.constraints)", "1206111474860", true), InputType, _nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.ext.collections.lang.constraints)", "1206111479241", intentionProvider);
      }
    }
  }

  @InferenceMethod()
  public static void equateResolveType(TypeCheckingContext typeCheckingContext, SNode scpd, SNode InputType) {
    SNode bmc = SNodeOperations.getAncestorWhereConceptInList(scpd, new String[]{"jetbrains.mps.baseLanguage.structure.IMethodCall"}, false, false);
    if (SNodeOperations.isInstanceOf(bmc, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
      {
        SNode _nodeToCheck_1029348928467 = scpd;
        BaseIntentionProvider intentionProvider = null;
        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(IOperation_Behavior.call_getOperand_1213877410070(bmc), "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.ext.collections.lang.constraints)", "1204110524611", true), InputType, _nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.ext.collections.lang.constraints)", "1206111787726", intentionProvider);
      }
    } else
    if (SNodeOperations.isInstanceOf(bmc, "jetbrains.mps.baseLanguage.structure.NewExpression")) {
      {
        SNode _nodeToCheck_1029348928467 = scpd;
        BaseIntentionProvider intentionProvider = null;
        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(bmc, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.ext.collections.lang.constraints)", "1219273747138", true), InputType, _nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.ext.collections.lang.constraints)", "1219273747134", intentionProvider);
      }
    } else
    if (SNodeOperations.isInstanceOf(bmc, "jetbrains.mps.baseLanguage.structure.ClassCreator")) {
      {
        SNode _nodeToCheck_1029348928467 = scpd;
        BaseIntentionProvider intentionProvider = null;
        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(bmc, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.ext.collections.lang.constraints)", "1219273765216", true), InputType, _nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.ext.collections.lang.constraints)", "1219273765212", intentionProvider);
      }
    }
  }

  public static boolean hasResolveType(SNode scpd) {
    SNode bmc = SNodeOperations.getAncestorWhereConceptInList(scpd, new String[]{"jetbrains.mps.baseLanguage.structure.IMethodCall"}, false, false);
    return SNodeOperations.isInstanceOf(bmc, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation") || SNodeOperations.isInstanceOf(bmc, "jetbrains.mps.baseLanguage.structure.NewExpression");
  }

}
