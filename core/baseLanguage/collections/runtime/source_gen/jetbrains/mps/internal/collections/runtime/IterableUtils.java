package jetbrains.mps.internal.collections.runtime;

/*Generated by MPS */

import java.util.Iterator;
import java.util.NoSuchElementException;

public class IterableUtils {
  public IterableUtils() {
  }

  public static <E> void visitAll(Iterable<E> seq, IVisitor<E> visitor) {
    for (Iterator<E> it = seq.iterator(); it.hasNext();) {
      try {
        visitor.visit(it.next());
      } catch (StopIteratingException stop) {
        break;
      }
    }
  }

  public static <E> boolean contains(Iterable<E> seq, E e) {
    return IterableUtils.indexOf(seq, e) >= 0;
  }

  public static <E> int indexOf(Iterable<E> seq, E e) {
    int index = 0;
    for (Iterator<E> it = seq.iterator(); it.hasNext(); index++) {
      if (IterableUtils.eq(it.next(), e)) {
        return index;
      }
    }
    return -1;
  }

  public static <E> int count(Iterable<E> seq) {
    int count = 0;
    for (Iterator<E> it = seq.iterator(); it.hasNext(); it.next()) {
      count++;
    }
    return count;
  }

  public static <E> boolean isEmpty(Iterable<E> seq) {
    return !((seq.iterator().hasNext()));
  }

  public static <E> boolean isNotEmpty(Iterable<E> seq) {
    return seq.iterator().hasNext();
  }

  public static <E> E first(Iterable<E> seq) {
    Iterator<E> it = seq.iterator();
    if (it.hasNext()) {
      return it.next();
    }
    if (Sequence.NULL_WHEN_EMPTY) {
      return null;
    }
    throw new NoSuchElementException("Empty iterator");
  }

  public static <E> E last(Iterable<E> seq) {
    E last = null;
    boolean hasLast = false;
    Iterator<E> it = seq.iterator();
    if (Sequence.NULL_WHEN_EMPTY) {
      if (!(it.hasNext())) {
        return null;
      }
    }
    while (it.hasNext()) {
      last = it.next();
      hasLast = true;
    }
    if (hasLast) {
      return last;
    }
    throw new NoSuchElementException("Empty iterator");
  }

  public static String join(Iterable<? extends String> seq, String delimiter) {
    StringBuilder sb = new StringBuilder();
    String sep = "";
    for (Iterator<? extends String> it = seq.iterator(); it.hasNext();) {
      sb.append(sep).append(it.next());
      sep = delimiter;
    }
    return sb.toString();
  }

  public static <T> T reduceLeft(Iterable<T> seq, ILeftCombinator<T, T> combinator) {
    Iterator<T> it = seq.iterator();
    if (!(it.hasNext())) {
      if (Sequence.NULL_WHEN_EMPTY) {
        return null;
      }
      throw new NoSuchElementException("Empty iterator");
    }
    T left = it.next();
    while (it.hasNext()) {
      left = combinator.combine(left, it.next());
    }
    return left;
  }

  public static <T> T reduceRight(Iterable<T> revSeq, IRightCombinator<T, T> combinator) {
    Iterator<T> it = revSeq.iterator();
    if (!(it.hasNext())) {
      if (Sequence.NULL_WHEN_EMPTY) {
        return null;
      }
      throw new NoSuchElementException("Empty iterator");
    }
    T right = it.next();
    while (it.hasNext()) {
      right = combinator.combine(it.next(), right);
    }
    return right;
  }

  public static <T, S> S foldLeft(Iterable<T> seq, S seed, ILeftCombinator<T, S> combinator) {
    S s = seed;
    for (Iterator<T> it = seq.iterator(); it.hasNext();) {
      s = combinator.combine(s, it.next());
    }
    return s;
  }

  public static <T, S> S foldRight(Iterable<T> revSeq, S seed, IRightCombinator<T, S> combinator) {
    S s = seed;
    for (Iterator<T> it = revSeq.iterator(); it.hasNext();) {
      s = combinator.combine(it.next(), s);
    }
    return s;
  }

  private static boolean eq(Object a, Object b) {
    return (a == b) || (((a != null) ?
      a.equals(b) :
      false
    ));
  }
}
