package jetbrains.mps.internal.collections.runtime.impl;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.ITranslator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.StopIteratingException;
import jetbrains.mps.internal.collections.runtime.ISequence;

public class TranslatingSequence<U, V> extends AbstractChainedSequence<U, V> implements Iterable<V> {
  private final ITranslator<? super U, V> translator;

  public TranslatingSequence(Iterable<U> input, ITranslator<? super U, V> translator) {
    super(input);
    if (translator == null) {
      throw new NullPointerException();
    }
    this.translator = translator;
  }

  public Iterator<V> iterator() {
    return new TranslatingSequence.TranslatingIterator();
  }

  private class TranslatingIterator implements Iterator<V> {
    private Iterator<U> inputIt;
    private Iterator<V> transIt;
    private HasNextState hasNext = HasNextState.UNKNOWN;
    private V next;

    private TranslatingIterator() {
    }

    public boolean hasNext() {
      if (hasNext.unknown()) {
        init();
        moveToNext();
      }
      return hasNext.hasNext();
    }

    public V next() {
      if (hasNext.unknown()) {
        init();
        moveToNext();
      }
      if (!((hasNext.hasNext()))) {
        throw new NoSuchElementException();
      }
      V tmp = next;
      moveToNext();
      return tmp;
    }

    public void remove() {
      throw new UnsupportedOperationException();
    }

    private void init() {
      this.inputIt = getInput().iterator();
    }

    private void moveToNext() {
      this.hasNext = HasNextState.AT_END;
      this.next = null;
      do {
        try {
          if (transIt != null && transIt.hasNext()) {
            V tmp = transIt.next();
            if (Sequence.IGNORE_NULL_VALUES) {
              if (tmp == null) {
                continue;
              }
            }
            this.next = tmp;
            this.hasNext = HasNextState.HAS_NEXT;
            break;
          }
        } catch (StopIteratingException stop) {
          break;
        }
        if (inputIt.hasNext()) {
          try {
            ISequence<V> transSeq = translator.translate(inputIt.next());
            if (Sequence.USE_NULL_SEQUENCE) {
              if (transSeq == null) {
                transSeq = NullSequence.instance();
              }
            }
            this.transIt = transSeq.toIterable().iterator();
          } catch (StopIteratingException illegal) {
            throw new IllegalStateException(illegal);
          }
        } else {
          break;
        }
      } while (true);
    }
  }
}
