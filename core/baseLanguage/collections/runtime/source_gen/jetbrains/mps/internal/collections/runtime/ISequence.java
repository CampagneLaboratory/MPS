package jetbrains.mps.internal.collections.runtime;

/*Generated by MPS */

import java.util.Comparator;

public interface ISequence<T> extends Iterable<T>, IEnumerable<T> {
  public ISequence<T> where(IWhereFilter<T> filter);
  public T findFirst(IWhereFilter<T> filter);
  public T findLast(IWhereFilter<T> filter);
  public boolean any(IWhereFilter<T> filter);
  public boolean all(IWhereFilter<T> filter);
  public <U> ISequence<U> translate(ITranslator<T, U> translator);
  public <U> ISequence<U> translate(ITranslator2<T, U> translator);
  public <U> ISequence<U> select(ISelector<T, U> selector);
  public ISequence<T> sort(ISelector<T, Comparable<?>> selector, boolean ascending);
  public ISequence<T> alsoSort(ISelector<T, Comparable<?>> selector, boolean ascending);
  public ISequence<T> sort(Comparator<T> comparator, boolean ascending);
  public ISequence<T> distinct();
  public void visitAll(IVisitor<T> visitor);
  public ISequence<T> take(int length);
  public ISequence<T> skip(int length);
  public ISequence<T> cut(int length);
  public ISequence<T> tail(int length);
  public ISequence<T> page(int skip, int skipplustake);
  public ISequence<T> concat(ISequence<T> that);
  public ISequence<T> intersect(ISequence<T> that);
  public ISequence<T> subtract(ISequence<T> that);
  public ISequence<T> union(ISequence<T> that);
  public ISequence<T> disjunction(ISequence<T> that);
  public ISequence<T> reverse();
  public boolean contains(T t);
  public boolean containsSequence(ISequence<T> that);
  public int indexOf(T t);
  public int count();
  public boolean isEmpty();
  public boolean isNotEmpty();
  public T first();
  public T last();
  public T reduceLeft(ILeftCombinator<T, T> comb);
  public T reduceRight(IRightCombinator<T, T> comb);
  public <S> S foldLeft(S seed, ILeftCombinator<T, S> comb);
  public <S> S foldRight(S seed, IRightCombinator<T, S> comb);
  public Iterable<T> toIterable();
  public IListSequence<T> toListSequence();
  public T[] toGenericArray();
  public T[] toGenericArray(Class<T> runtimeClass);
}
