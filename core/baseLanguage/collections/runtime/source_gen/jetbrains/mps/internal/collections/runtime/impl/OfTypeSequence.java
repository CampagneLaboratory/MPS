package jetbrains.mps.internal.collections.runtime.impl;

/*Generated by MPS */

import java.util.Iterator;
import java.util.NoSuchElementException;

public class OfTypeSequence<U, V> extends AbstractChainedSequence<U, V> implements Iterable<V> {
  private Class<V> requestedType;

  public OfTypeSequence(Iterable<U> input, Class<V> reqType) {
    super(input);
    this.requestedType = reqType;
  }

  public Iterator<V> iterator() {
    return new OfTypeSequence.OfTypeIterator();
  }

  private boolean isOfType(U input) {
    return requestedType.isInstance(input);
  }

  private V cast(U input) {
    if (requestedType.isInstance(input)) {
      return requestedType.cast(input);
    }
    return null;
  }

  private class OfTypeIterator implements Iterator<V> {
    private Iterator<U> inputIterator = null;
    private HasNextState hasNext = HasNextState.UNKNOWN;
    private V next;

    private OfTypeIterator() {
    }

    public boolean hasNext() {
      if (inputIterator == null) {
        init();
      }
      if (hasNext.unknown()) {
        moveToNext();
      }
      return hasNext.hasNext();
    }

    public V next() {
      if (inputIterator == null) {
        init();
      }
      if (hasNext.unknown()) {
        moveToNext();
      }
      if (!(hasNext.hasNext())) {
        throw new NoSuchElementException();
      }
      return this.clearNext();
    }

    public void remove() {
      throw new UnsupportedOperationException();
    }

    private void init() {
      this.inputIterator = getInput().iterator();
    }

    private void moveToNext() {
      this.hasNext = HasNextState.AT_END;
      this.next = null;
      while (inputIterator.hasNext()) {
        U tmp = inputIterator.next();
        if (!(isOfType(tmp))) {
          continue;
        }
        this.hasNext = HasNextState.HAS_NEXT;
        this.next = cast(tmp);
        break;
      }
    }

    private V clearNext() {
      V tmp = next;
      this.next = null;
      this.hasNext = HasNextState.UNKNOWN;
      return tmp;
    }
  }
}
