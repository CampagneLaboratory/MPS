package jetbrains.mps.baseLanguage.constructors.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CustomConstructorUsage extends Expression {
  public static final String concept = "jetbrains.mps.baseLanguage.constructors.structure.CustomConstructorUsage";
  public static final String CUSTOM_CONSTRUCTOR = "customConstructor";
  public static final String ELEMENT = "element";

  public CustomConstructorUsage(SNode node) {
    super(node);
  }

  public CustomConstructor getCustomConstructor() {
    return (CustomConstructor) this.getReferent(CustomConstructor.class, CustomConstructorUsage.CUSTOM_CONSTRUCTOR);
  }

  public void setCustomConstructor(CustomConstructor node) {
    super.setReferent(CustomConstructorUsage.CUSTOM_CONSTRUCTOR, node);
  }

  public int getElementsCount() {
    return this.getChildCount(CustomConstructorUsage.ELEMENT);
  }

  public Iterator<Expression> elements() {
    return this.children(Expression.class, CustomConstructorUsage.ELEMENT);
  }

  public List<Expression> getElements() {
    return this.getChildren(Expression.class, CustomConstructorUsage.ELEMENT);
  }

  public void addElement(Expression node) {
    this.addChild(CustomConstructorUsage.ELEMENT, node);
  }

  public void insertElement(Expression prev, Expression node) {
    this.insertChild(prev, CustomConstructorUsage.ELEMENT, node);
  }

  public static CustomConstructorUsage newInstance(SModel sm, boolean init) {
    return (CustomConstructorUsage) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.constructors.structure.CustomConstructorUsage", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CustomConstructorUsage newInstance(SModel sm) {
    return CustomConstructorUsage.newInstance(sm, false);
  }
}
