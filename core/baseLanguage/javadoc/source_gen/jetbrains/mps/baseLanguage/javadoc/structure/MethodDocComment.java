package jetbrains.mps.baseLanguage.javadoc.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MethodDocComment extends BaseDocComment {
  public static final String concept = "jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment";
  public static final String RETURN = "return";
  public static final String PARAM = "param";
  public static final String THROWS_TAG = "throwsTag";

  public MethodDocComment(SNode node) {
    super(node);
  }

  public ReturnBlockDocTag getReturn() {
    return (ReturnBlockDocTag) this.getChild(ReturnBlockDocTag.class, MethodDocComment.RETURN);
  }

  public void setReturn(ReturnBlockDocTag node) {
    super.setChild(MethodDocComment.RETURN, node);
  }

  public int getParamsCount() {
    return this.getChildCount(MethodDocComment.PARAM);
  }

  public Iterator<ParameterBlockDocTag> params() {
    return this.children(ParameterBlockDocTag.class, MethodDocComment.PARAM);
  }

  public List<ParameterBlockDocTag> getParams() {
    return this.getChildren(ParameterBlockDocTag.class, MethodDocComment.PARAM);
  }

  public void addParam(ParameterBlockDocTag node) {
    this.addChild(MethodDocComment.PARAM, node);
  }

  public void insertParam(ParameterBlockDocTag prev, ParameterBlockDocTag node) {
    this.insertChild(prev, MethodDocComment.PARAM, node);
  }

  public int getThrowsTagsCount() {
    return this.getChildCount(MethodDocComment.THROWS_TAG);
  }

  public Iterator<ThrowsBlockDocTag> throwsTags() {
    return this.children(ThrowsBlockDocTag.class, MethodDocComment.THROWS_TAG);
  }

  public List<ThrowsBlockDocTag> getThrowsTags() {
    return this.getChildren(ThrowsBlockDocTag.class, MethodDocComment.THROWS_TAG);
  }

  public void addThrowsTag(ThrowsBlockDocTag node) {
    this.addChild(MethodDocComment.THROWS_TAG, node);
  }

  public void insertThrowsTag(ThrowsBlockDocTag prev, ThrowsBlockDocTag node) {
    this.insertChild(prev, MethodDocComment.THROWS_TAG, node);
  }

  public static MethodDocComment newInstance(SModel sm, boolean init) {
    return (MethodDocComment) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MethodDocComment newInstance(SModel sm) {
    return MethodDocComment.newInstance(sm, false);
  }
}
