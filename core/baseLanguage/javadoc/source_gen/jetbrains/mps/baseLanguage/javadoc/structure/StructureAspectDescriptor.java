package jetbrains.mps.baseLanguage.javadoc.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import java.util.Arrays;
import com.google.common.collect.ImmutableList;
import java.util.Set;
import java.util.List;
import java.util.HashSet;
import jetbrains.mps.smodel.structure.ConceptRegistry;
import java.util.Collections;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  private static String[] stringSwitchCases_1htk8d_a0a0a = new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.AuthorBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment", "jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference", "jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment", "jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.CodeInlineDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.CodeSnippet", "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine", "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart", "jetbrains.mps.baseLanguage.javadoc.structure.DeprecatedBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.DocMethodParameterReference", "jetbrains.mps.baseLanguage.javadoc.structure.DocTypeParameterReference", "jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment", "jetbrains.mps.baseLanguage.javadoc.structure.FieldDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement", "jetbrains.mps.baseLanguage.javadoc.structure.InheritDocInlineDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart", "jetbrains.mps.baseLanguage.javadoc.structure.LinkInlineDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment", "jetbrains.mps.baseLanguage.javadoc.structure.MethodDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.ParameterBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.ReturnBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.SeeBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.SinceBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.StaticFieldDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart", "jetbrains.mps.baseLanguage.javadoc.structure.ThrowsBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.ValueInlineDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.VersionBlockDocTag"};

  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {
      case 0:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.AuthorBlockDocTag", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 1:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 2:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment", new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"});
      case 3:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 4:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 5:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 6:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 7:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment"}, new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"});
      case 8:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocReference", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 9:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.CodeInlineDocTag", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 10:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.CodeSnippet", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.CommentLine"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.CommentLine"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 11:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.CommentLine", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 12:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 13:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.DeprecatedBlockDocTag", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 14:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.DocMethodParameterReference", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 15:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.DocTypeParameterReference", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 16:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment"}, new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"});
      case 17:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocReference", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 18:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 19:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.InheritDocInlineDocTag", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 20:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 21:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.LinkInlineDocTag", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 22:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment"}, new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"});
      case 23:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocReference", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 24:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.ParameterBlockDocTag", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 25:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.ReturnBlockDocTag", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 26:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.SeeBlockDocTag", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 27:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.SinceBlockDocTag", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 28:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.StaticFieldDocReference", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 29:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 30:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.ThrowsBlockDocTag", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 31:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.ValueInlineDocTag", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 32:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.VersionBlockDocTag", new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      default:
        return null;
    }
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private Set<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String[] parents, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, ancestorsInLanguage, ancestorsNotInLanguage);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static Set<String> getAncestors(String conceptFqName, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      Set<String> result = new HashSet(ancestorsInLanguage.length + 1);

      result.add(conceptFqName);
      for (String ancestor : ancestorsInLanguage) {
        result.add(ancestor);
      }

      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : ancestorsNotInLanguage) {
        if (!(result.contains(parent))) {
          result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
        }
      }

      return Collections.unmodifiableSet(result);
    }
  }
}
