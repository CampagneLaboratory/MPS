package jetbrains.mps.internalCollections.test.basicOperations;

/*Generated by MPS */

import jetbrains.mps.internalCollections.test.closures.Util_Test;
import org.junit.Test;
import jetbrains.mps.internal.collections.runtime.IMapSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import junit.framework.Assert;
import java.util.Arrays;
import java.util.Map;
import java.util.List;

public class Map_Test extends Util_Test {

  @Test()
  public void test_mapMethod() throws Exception {
    IMapSequence<Integer, String> map = MapSequence.fromMap(new HashMap<Integer, String>());
    map.put(1, "a");
    map.put(2, "b");
    map.put(3, "c");
    Assert.assertEquals(3, map.size());
    this.assertIterableEqualsIgnoreOrder(Arrays.asList(1, 2, 3), map.keySet());
    this.assertIterableEqualsIgnoreOrder(Arrays.asList("a", "b", "c"), map.values());
  }

  @Test()
  public void test_mapInitializer() throws Exception {
    Map<Integer, String> map = MapSequence.<Integer, String>fromKeysArray(1, 2, 3).withValues("a", "b", "c");
    List<String> values = Arrays.asList("a", "b", "c");
    for(Integer i : Arrays.asList(1, 2, 3)) {
      Assert.assertTrue(MapSequence.fromMap(map).containsKey(i));
      Assert.assertEquals(values.get(i - 1), MapSequence.fromMap(map).get(i));
    }
    this.assertIterableEqualsIgnoreOrder(Arrays.asList(1, 2, 3), MapSequence.fromMap(map).keySet());
    for(Integer i : Arrays.asList(1, 2, 3)) {
      MapSequence.fromMap(map).remove(i);
    }
    for(Integer i : Arrays.asList(1, 2, 3)) {
      Assert.assertFalse(MapSequence.fromMap(map).containsKey(i));
    }
  }

  @Test()
  public void test_mapNoInitializer() throws Exception {
    Map<Integer, String> map = MapSequence.fromMap(new HashMap<Integer, String>());
    List<String> values = Arrays.asList("a", "b", "c");
    Integer idx = 1;
    for(String val : values) {
      MapSequence.fromMap(map).put(idx, val);
      idx = idx + 1;
    }
    for(Integer i : Arrays.asList(1, 2, 3)) {
      Assert.assertTrue(MapSequence.fromMap(map).containsKey(i));
      Assert.assertEquals(values.get(i - 1), MapSequence.fromMap(map).get(i));
    }
    this.assertIterableEqualsIgnoreOrder(Arrays.asList(1, 2, 3), MapSequence.fromMap(map).keySet());
  }

}
