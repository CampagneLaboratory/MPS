package jetbrains.mps.internalCollections.test.closures;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Arrays;

public class Sort_Test extends Util_Test {

  public void test_sortMethod() throws Exception {
    Sequence<String> input = Sequence.fromArray("Z", "YY", "XXX", "WWWW");
    Sequence<String> test = input.sort(new ISelector <String, Comparable<?>>() {

      public Comparable<?> select(String it) {
        return it.length();
      }

    }, false);
    this.assertIterableEquals(Sequence.fromArray("WWWW", "XXX", "YY", "Z"), test);
  }

  public void test_toComparableVar() throws Exception {
    Sequence<String> input = Sequence.fromArray("Z", "YY", "XXX", "WWWW");
    ISelector<String, Comparable<?>> tocomp = new ISelector <String, Comparable<?>>() {

      public Comparable<?> select(String it) {
        return it.length();
      }

    };
    Sequence<String> test = input.sort(tocomp, false);
    this.assertIterableEquals(Sequence.fromArray("WWWW", "XXX", "YY", "Z"), test);
    this.assertIterableEquals(input, test.sort(tocomp, true));
  }

  public void test_sortOperationInternal() throws Exception {
    Iterable<String> input = Arrays.asList("Z", "YY", "XXX", "WWWW");
    Iterable<String> test = Sequence.fromIterable(input).sort(new ISelector <String, Comparable<?>>() {

      public Comparable<?> select(String it) {
        return it.length();
      }

    }, false);
    this.assertIterableEquals(Arrays.asList("WWWW", "XXX", "YY", "Z"), test);
    this.assertIterableEquals(input, Sequence.fromIterable(test).sort(new ISelector <String, Comparable<?>>() {

      public Comparable<?> select(String it) {
        return it.length();
      }

    }, true));
  }

}
