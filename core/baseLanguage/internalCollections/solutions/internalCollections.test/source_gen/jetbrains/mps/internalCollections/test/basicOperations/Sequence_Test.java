package jetbrains.mps.internalCollections.test.basicOperations;

/*Generated by MPS */

import jetbrains.mps.internalCollections.test.closures.Util_Test;
import jetbrains.mps.internal.collections.runtime.Sequence;
import junit.framework.Assert;
import java.util.Collections;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;

public class Sequence_Test extends Util_Test {

  public void test_sequenceMethods() throws Exception {
    Sequence<Integer> input = Sequence.fromIterable(this.input5());
    Assert.assertEquals(((Integer)1), input.first());
    Assert.assertEquals(((Integer)5), input.last());
    Assert.assertEquals(5, input.count());
    for(Integer i : this.input5()) {
      Assert.assertEquals(true, input.contains(i));
      Assert.assertEquals(i - 1, input.indexOf(i));
    }
    Assert.assertEquals(false, input.contains(-1));
    Assert.assertEquals(false, input.isEmpty());
    Assert.assertEquals(true, input.isNotEmpty());
    Assert.assertEquals(true, Sequence.fromIterable(Collections.emptyList()).isEmpty());
    Assert.assertEquals(false, Sequence.fromIterable(Collections.emptyList()).isNotEmpty());
  }

  public void test_sequenceOperations() throws Exception {
    Iterable<Integer> input = this.input5();
    Assert.assertEquals(((Integer)1), SequenceOperations.getFirst(input));
    Assert.assertEquals(((Integer)5), SequenceOperations.getLast(input));
    Assert.assertEquals(5, SequenceOperations.count(input));
    for(Integer i : this.input5()) {
      Assert.assertEquals(true, SequenceOperations.contains(input, i));
      Assert.assertEquals(i - 1, SequenceOperations.indexOf(input, i));
    }
    Assert.assertEquals(false, SequenceOperations.contains(input, -1));
    Assert.assertEquals(false, SequenceOperations.isEmpty(input));
    Assert.assertEquals(true, !(SequenceOperations.isEmpty(input)));
    Assert.assertEquals(true, SequenceOperations.isEmpty(this.inputEmpty()));
    Assert.assertEquals(false, !(SequenceOperations.isEmpty(this.inputEmpty())));
  }

}
