package jetbrains.mps.internalCollections.test.basicOperations;

/*Generated by MPS */

import jetbrains.mps.internalCollections.test.closures.Util_Test;
import jetbrains.mps.internal.collections.runtime.ISequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Arrays;

public class Chunks_Test extends Util_Test {

  public void test_chunkMethods() throws Exception {
    ISequence<Integer> input = Sequence.fromIterable(this.input10());
    this.assertIterableEquals(Arrays.asList(1, 2, 3), input.take(3));
    this.assertIterableEquals(Arrays.asList(8, 9, 10), input.skip(7));
    this.assertIterableEquals(Arrays.asList(1, 2, 3), input.cut(7));
    this.assertIterableEquals(Arrays.asList(8, 9, 10), input.tail(3));
    this.assertIterableEquals(Arrays.asList(5, 6, 7), input.page(4, 7));
    this.assertIterableEquals(input.skip(3).take(5), input.page(3, 8));
  }

  public void test_chunkOperations() throws Exception {
    Iterable<Integer> input = this.input10();
    this.assertIterableEquals(Arrays.asList(1, 2, 3), Sequence.fromIterable(input).take(3));
    this.assertIterableEquals(Arrays.asList(8, 9, 10), Sequence.fromIterable(input).skip(7));
    this.assertIterableEquals(Arrays.asList(1, 2, 3), Sequence.fromIterable(input).cut(7));
    this.assertIterableEquals(Arrays.asList(8, 9, 10), Sequence.fromIterable(input).tail(3));
    this.assertIterableEquals(Arrays.asList(5, 6, 7), Sequence.fromIterable(input).page(4, 7));
    this.assertIterableEquals(Sequence.fromIterable(input).skip(3).take(5), Sequence.fromIterable(input).page(3, 8));
  }

  public void test_pageOperationNoSideEffects() throws Exception {
    Iterable<Integer> input = this.input10();
    int from = 3;
    int to = 8;
    this.assertIterableEquals(Arrays.asList(5, 6, 7), Sequence.fromIterable(input).page((from = from + 1), (to = to - 1)));
  }

}
