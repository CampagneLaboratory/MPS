package jetbrains.mps.internalCollections.test.closures;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Arrays;

public class SelectTest_Test extends Util_Test {

  public void test_selectMethod() throws Exception {
    Sequence<Integer> seq = Sequence.fromIterable(this.input5());
    Sequence<Integer> test = seq.select(new ISelector <Integer, Integer>() {

      public Integer select(Integer it) {
        return (it % 2 == 1 ?
          it * 2 :
          it * 3
        );
      }

    });
    this.assertIterableEquals(Arrays.asList(2, 6, 6, 12, 10), test.toIterable());
  }

  public void test_selectMethod2() throws Exception {
    int a = Character.valueOf('a').charValue();
    Iterable<Integer> input = Arrays.asList(a, a + 1, a + 2, a + 3, a + 4);
    Sequence<Integer> seq = Sequence.fromIterable(input);
    Sequence<String> test = seq.select(new ISelector <Integer, String>() {

      public String select(Integer it) {
        return Character.valueOf((char)it.intValue()).toString();
      }

    });
    this.assertIterableEquals(Arrays.asList("a", "b", "c", "d", "e"), test.toIterable());
  }

  public void test_selectorVar() throws Exception {
    Sequence<Integer> seq = Sequence.fromIterable(this.input5());
    ISelector<Integer, Integer> selector = new ISelector <Integer, Integer>() {

      public Integer select(Integer it) {
        return (it % 2 == 1 ?
          it * 2 :
          it * 3
        );
      }

    };
    Sequence<Integer> test = seq.select(selector);
    this.assertIterableEquals(Arrays.asList(2, 6, 6, 12, 10), test.toIterable());
  }

}
