package jetbrains.mps.baseLanguage.money.generator.baseLanguage.template.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class Util {

  public static boolean isPlusMinusExpressionMoneyExpression(SNode expr) {
    SNode rtype = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(expr, "rightExpression", true));
    SNode ltype = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(expr, "leftExpression", true));
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(ltype, new QuotationClass_1().createNode()) && TypeChecker.getInstance().getSubtypingManager().isSubtype(rtype, new QuotationClass_0().createNode())) {
      return true;
    }
    return false;
  }

  public static boolean isMulDivExpressionMoneyExpression(SNode expr) {
    SNode rtype = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(expr, "rightExpression", true));
    SNode ltype = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(expr, "leftExpression", true));
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(ltype, new QuotationClass_3().createNode()) && TypeChecker.getInstance().getSubtypingManager().isSubtype(rtype, new QuotationClass_2().createNode())) {
      return true;
    }
    return false;
  }

}
 