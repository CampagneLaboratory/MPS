package jetbrains.accounting.money.actions;

/*Generated by MPS */

import java.util.List;

import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.RTActionsBuilderContext;

import java.util.ArrayList;

import jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.action.AbstractRTransformHintSubstituteAction;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;

public class QueriesGenerated {

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1187360495057(final IOperationContext operationContext, final RTActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      AbstractConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), _context.getSourceNode()) {

        public SNode doSubstitute(String pattern) {
          if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), "jetbrains.accounting.money.structure.MoneyType")) {
            SNode mgcmc = SModelOperations.createNewNode(_context.getModel(), "jetbrains.accounting.money.structure.MoneyGetCurrencyMethodCall", null);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(), mgcmc);
            SLinkOperations.setTarget(mgcmc, "instance", _context.getSourceNode(), true);
            return mgcmc;
          }
          return _context.getSourceNode();
        }

        public String getMatchingText(String pattern) {
          return ". currency";
        }

        public String getDescriptionText(String pattern) {
          return "get currency";
        }

      });
    }
    {
      AbstractConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), _context.getSourceNode()) {

        public SNode doSubstitute(String pattern) {
          if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), "jetbrains.accounting.money.structure.MoneyType")) {
            SNode mgcmc = SModelOperations.createNewNode(_context.getModel(), "jetbrains.accounting.money.structure.MoneyIsZeroMethodCall", null);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(), mgcmc);
            SLinkOperations.setTarget(mgcmc, "instance", _context.getSourceNode(), true);
            return mgcmc;
          }
          return _context.getSourceNode();
        }

        public String getMatchingText(String pattern) {
          return ". isZero";
        }

        public String getDescriptionText(String pattern) {
          return "compare to zero";
        }

      });
    }
    {
      AbstractConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), _context.getSourceNode()) {

        public SNode doSubstitute(String pattern) {
          if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), "jetbrains.accounting.money.structure.MoneyType")) {
            SNode mgcmc = SModelOperations.createNewNode(_context.getModel(), "jetbrains.accounting.money.structure.MoneyGetAmountMethodCall", null);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(), mgcmc);
            SLinkOperations.setTarget(mgcmc, "instance", _context.getSourceNode(), true);
            return mgcmc;
          }
          return _context.getSourceNode();
        }

        public String getMatchingText(String pattern) {
          return ". amount";
        }

        public String getDescriptionText(String pattern) {
          return "get amount";
        }

      });
    }
    return result;
  }

}
