package jetbrains.mps.generator.impl.tests;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import junit.framework.Assert;
import jetbrains.mps.lang.test.matcher.NodesMatcher;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.impl.cache.FileSwapOwner;
import java.io.IOException;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.LinkedHashMap;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.test.matcher.NodeDifference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IMapping;

@MPSLaunch
public class FileSwapOwnerTests_Test extends BaseTransformationTest {
  @Test
  public void test_justWrite() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:a8dd08c8-d222-4842-87dd-546039cb1959(jetbrains.mps.generator.impl.tests@tests)");
    this.runTest("jetbrains.mps.generator.impl.tests.FileSwapOwnerTests_Test$TestBody", "test_justWrite", true);
  }

  @Test
  public void test_stringUserObjects() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:a8dd08c8-d222-4842-87dd-546039cb1959(jetbrains.mps.generator.impl.tests@tests)");
    this.runTest("jetbrains.mps.generator.impl.tests.FileSwapOwnerTests_Test$TestBody", "test_stringUserObjects", true);
  }

  @Test
  public void test_intUserObjects() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:a8dd08c8-d222-4842-87dd-546039cb1959(jetbrains.mps.generator.impl.tests@tests)");
    this.runTest("jetbrains.mps.generator.impl.tests.FileSwapOwnerTests_Test$TestBody", "test_intUserObjects", true);
  }

  @Test
  public void test_charUserObjects() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:a8dd08c8-d222-4842-87dd-546039cb1959(jetbrains.mps.generator.impl.tests@tests)");
    this.runTest("jetbrains.mps.generator.impl.tests.FileSwapOwnerTests_Test$TestBody", "test_charUserObjects", true);
  }

  @Test
  public void test_numberUserObjects() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:a8dd08c8-d222-4842-87dd-546039cb1959(jetbrains.mps.generator.impl.tests@tests)");
    this.runTest("jetbrains.mps.generator.impl.tests.FileSwapOwnerTests_Test$TestBody", "test_numberUserObjects", true);
  }

  @Test
  public void test_booleanUserObjects() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:a8dd08c8-d222-4842-87dd-546039cb1959(jetbrains.mps.generator.impl.tests@tests)");
    this.runTest("jetbrains.mps.generator.impl.tests.FileSwapOwnerTests_Test$TestBody", "test_booleanUserObjects", true);
  }

  @Test
  public void test_mpsUserObjects() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:a8dd08c8-d222-4842-87dd-546039cb1959(jetbrains.mps.generator.impl.tests@tests)");
    this.runTest("jetbrains.mps.generator.impl.tests.FileSwapOwnerTests_Test$TestBody", "test_mpsUserObjects", true);
  }

  @Test
  public void test_baseLanguageStructure() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:a8dd08c8-d222-4842-87dd-546039cb1959(jetbrains.mps.generator.impl.tests@tests)");
    this.runTest("jetbrains.mps.generator.impl.tests.FileSwapOwnerTests_Test$TestBody", "test_baseLanguageStructure", true);
  }

  @Test
  public void test_testOverloadedOperatorsSandbox() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:a8dd08c8-d222-4842-87dd-546039cb1959(jetbrains.mps.generator.impl.tests@tests)");
    this.runTest("jetbrains.mps.generator.impl.tests.FileSwapOwnerTests_Test$TestBody", "test_testOverloadedOperatorsSandbox", true);
  }

  @Test
  public void test_testSkipNodesWhileSaving() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:a8dd08c8-d222-4842-87dd-546039cb1959(jetbrains.mps.generator.impl.tests@tests)");
    this.runTest("jetbrains.mps.generator.impl.tests.FileSwapOwnerTests_Test$TestBody", "test_testSkipNodesWhileSaving", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_justWrite() throws Exception {
      this.addNodeById("1732396662099564446");
      try {
        Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")), ListSequence.fromListAndArray(new ArrayList<SNode>(), FileSwapOwner.writeAndReadNode(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")))));
      } catch (IOException e) {
        e.printStackTrace();
        org.junit.Assert.fail(e.getMessage());
      }
    }

    public void test_stringUserObjects() throws Exception {
      this.addNodeById("1732396662099564446");
      Map<Object, Object> userObjects = MapSequence.fromMap(new HashMap<Object, Object>());
      MapSequence.fromMap(userObjects).put("1", "1");
      MapSequence.fromMap(userObjects).put("2", "2");
      this.testUserObjectsSaving(userObjects);
    }

    public void test_intUserObjects() throws Exception {
      this.addNodeById("1732396662099564446");
      Map<Object, Object> userObjects = MapSequence.fromMap(new LinkedHashMap<Object, Object>(16, (float) 0.75, false));
      MapSequence.fromMap(userObjects).put(2, "2");
      MapSequence.fromMap(userObjects).put("3", 3);
      MapSequence.fromMap(userObjects).put(4, 4);
      this.testUserObjectsSaving(userObjects);
    }

    public void test_charUserObjects() throws Exception {
      this.addNodeById("1732396662099564446");
      Map<Object, Object> userObjects = MapSequence.fromMap(new LinkedHashMap<Object, Object>(16, (float) 0.75, false));
      MapSequence.fromMap(userObjects).put('1', '1');
      MapSequence.fromMap(userObjects).put('2', '2');
      MapSequence.fromMap(userObjects).put('3', '3');
      this.testUserObjectsSaving(userObjects);
    }

    public void test_numberUserObjects() throws Exception {
      this.addNodeById("1732396662099564446");
      Map<Object, Object> userObjects = MapSequence.fromMap(new LinkedHashMap<Object, Object>(16, (float) 0.75, false));
      MapSequence.fromMap(userObjects).put(0.5, 0.5);
      MapSequence.fromMap(userObjects).put(((float) 1.5), ((float) 1.5));
      MapSequence.fromMap(userObjects).put(((byte) 2), ((byte) 2));
      MapSequence.fromMap(userObjects).put(((short) 3), ((short) 3));
      MapSequence.fromMap(userObjects).put(Long.MAX_VALUE, Long.MAX_VALUE);
      this.testUserObjectsSaving(userObjects);
    }

    public void test_booleanUserObjects() throws Exception {
      this.addNodeById("1732396662099564446");
      Map<Object, Object> userObjects = MapSequence.fromMap(new LinkedHashMap<Object, Object>(16, (float) 0.75, false));
      MapSequence.fromMap(userObjects).put(false, false);
      MapSequence.fromMap(userObjects).put(false, true);
      MapSequence.fromMap(userObjects).put(true, false);
      MapSequence.fromMap(userObjects).put(true, true);
      this.testUserObjectsSaving(userObjects);
    }

    public void test_mpsUserObjects() throws Exception {
      this.addNodeById("1732396662099564446");
      Map<Object, Object> userObjects = MapSequence.fromMap(new LinkedHashMap<Object, Object>(16, (float) 0.75, false));
      MapSequence.fromMap(userObjects).put(new SNodePointer(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")), new SNodePointer(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")));
      MapSequence.fromMap(userObjects).put(SNodeOperations.getModel(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")).getSModelReference(), SModelRepository.getInstance().getModelDescriptor(new SModelReference("java.lang", "java_stub")).getSModel().getSModelReference());
      MapSequence.fromMap(userObjects).put(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement").getSNodeId(), new SNodePointer(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")));
      MapSequence.fromMap(userObjects).put(SNodeOperations.getModel(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")).getSModelId(), SNodeOperations.getModel(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")).getSModelReference());
      this.testUserObjectsSaving(userObjects);
    }

    public void test_baseLanguageStructure() throws Exception {
      this.addNodeById("1732396662099564446");
      SModel sampleModel = SModelRepository.getInstance().getModelDescriptor(new SModelReference("jetbrains.mps.baseLanguage.structure", "")).getSModel();
      SModel resultModel = FileSwapOwner.writeAndReadModel(sampleModel);

      ArrayList<NodeDifference> matchNodes = NodesMatcher.matchNodes(SModelOperations.getRoots(sampleModel, null), SModelOperations.getRoots(resultModel, null));
      Assert.assertNull(matchNodes);
    }

    public void test_testOverloadedOperatorsSandbox() throws Exception {
      this.addNodeById("1732396662099564446");
      SModel sampleModel = SModelRepository.getInstance().getModelDescriptor(new SModelReference("jetbrains.mps.baseLanguage.overloadedOerators.sandbox.test", "")).getSModel();
      SModel resultModel = FileSwapOwner.writeAndReadModel(sampleModel);

      ArrayList<NodeDifference> matchNodes = NodesMatcher.matchNodes(SModelOperations.getRoots(sampleModel, null), SModelOperations.getRoots(resultModel, null));
      Assert.assertNull(matchNodes);
    }

    public void test_testSkipNodesWhileSaving() throws Exception {
      this.addNodeById("1732396662099564446");
      Map<Object, Object> userObjects = MapSequence.fromMap(new LinkedHashMap<Object, Object>(16, (float) 0.75, false));
      MapSequence.fromMap(userObjects).put("1", "1");
      MapSequence.fromMap(userObjects).put(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"), SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"));
      MapSequence.fromMap(userObjects).put("2", "2");

      Map<Object, Object> userObjectsToSkip = MapSequence.fromMap(new LinkedHashMap<Object, Object>(16, (float) 0.75, false));
      MapSequence.fromMap(userObjectsToSkip).put(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"), SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"));

      this.testUserObjectsSaving(userObjects, userObjectsToSkip);
    }

    public void testUserObjectsSaving(Map<Object, Object> userObjects, Map<Object, Object> userObjectsToLoose) {
      SNode var1732396662099564454 = this.getNodeById("1732396662099564449");
      try {

        for (IMapping<Object, Object> object : MapSequence.fromMap(userObjects)) {
          SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement").putUserObject(object.key(), object.value());
        }

        SNode readNode = FileSwapOwner.writeAndReadNode(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"));
        Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")), ListSequence.fromListAndArray(new ArrayList<SNode>(), readNode)));

        for (IMapping<Object, Object> object : MapSequence.fromMap(userObjects)) {
          if (MapSequence.fromMap(userObjectsToLoose).contains(object)) {
            Assert.assertNull("User object " + object + " should have been lost.", readNode.getUserObject(object.key()));
          } else {
            Assert.assertEquals("User object " + object + " was lost.", object.value(), readNode.getUserObject(object.key()));
          }
        }

      } catch (IOException e) {
        e.printStackTrace();
        org.junit.Assert.fail(e.getMessage());
      }
    }

    public void testUserObjectsSaving(Map<Object, Object> userObjects) {
      this.testUserObjectsSaving(userObjects, MapSequence.fromMap(new HashMap<Object, Object>()));
    }
  }
}
