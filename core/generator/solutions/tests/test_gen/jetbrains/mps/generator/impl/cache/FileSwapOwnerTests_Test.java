package jetbrains.mps.generator.impl.cache;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import junit.framework.Assert;
import jetbrains.mps.lang.test.matcher.NodesMatcher;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.io.IOException;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.IMapping;
import java.util.LinkedHashMap;

@MPSLaunch
public class FileSwapOwnerTests_Test extends BaseTransformationTest {
  @Test
  public void test_justWrite() throws Throwable {
    this.initTest("${mps_home}/MPS.ipr", "r:a8dd08c8-d222-4842-87dd-546039cb1959(jetbrains.mps.generator.impl.cache@tests)");
    this.runTest("jetbrains.mps.generator.impl.cache.FileSwapOwnerTests_Test$TestBody", "test_justWrite", true);
  }

  @Test
  public void test_stringUserObjects() throws Throwable {
    this.initTest("${mps_home}/MPS.ipr", "r:a8dd08c8-d222-4842-87dd-546039cb1959(jetbrains.mps.generator.impl.cache@tests)");
    this.runTest("jetbrains.mps.generator.impl.cache.FileSwapOwnerTests_Test$TestBody", "test_stringUserObjects", true);
  }

  @Test
  public void test_allUserObjects() throws Throwable {
    this.initTest("${mps_home}/MPS.ipr", "r:a8dd08c8-d222-4842-87dd-546039cb1959(jetbrains.mps.generator.impl.cache@tests)");
    this.runTest("jetbrains.mps.generator.impl.cache.FileSwapOwnerTests_Test$TestBody", "test_allUserObjects", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_justWrite() throws Exception {
      this.addNodeById("1732396662099564446");
      try {
        Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")), ListSequence.fromListAndArray(new ArrayList<SNode>(), FileSwapOwner.writeAndReadNode(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")))));
      } catch (IOException e) {
        e.printStackTrace();
        org.junit.Assert.fail(e.getMessage());
      }
    }

    public void test_stringUserObjects() throws Exception {
      this.addNodeById("1732396662099564446");
      try {
        Map<Object, Object> userObjects = MapSequence.fromMap(new HashMap<Object, Object>());
        MapSequence.fromMap(userObjects).put("1", "1");
        MapSequence.fromMap(userObjects).put("2", "2");

        for (IMapping<Object, Object> object : MapSequence.fromMap(userObjects)) {
          SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement").putUserObject(object.key(), object.value());
        }

        SNode readNode = FileSwapOwner.writeAndReadNode(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"));
        Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")), ListSequence.fromListAndArray(new ArrayList<SNode>(), readNode)));

        for (IMapping<Object, Object> object : MapSequence.fromMap(userObjects)) {
          Assert.assertEquals("User object " + object + " was lost.", object.value(), readNode.getUserObject(object.key()));
        }

      } catch (IOException e) {
        e.printStackTrace();
        org.junit.Assert.fail(e.getMessage());
      }
    }

    public void test_allUserObjects() throws Exception {
      this.addNodeById("1732396662099564446");
      // to fix this test; implement somehow saving user objects 
      try {
        Map<Object, Object> userObjects = MapSequence.fromMap(new LinkedHashMap<Object, Object>(16, (float) 0.75, false));
        MapSequence.fromMap(userObjects).put("1", "1");
        MapSequence.fromMap(userObjects).put(2, "2");
        MapSequence.fromMap(userObjects).put("3", 3);
        MapSequence.fromMap(userObjects).put(4, 4);

        for (IMapping<Object, Object> object : MapSequence.fromMap(userObjects)) {
          SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement").putUserObject(object.key(), object.value());
        }

        SNode readNode = FileSwapOwner.writeAndReadNode(SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"));
        Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById("1732396662099564449"), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")), ListSequence.fromListAndArray(new ArrayList<SNode>(), readNode)));

        for (IMapping<Object, Object> object : MapSequence.fromMap(userObjects)) {
          Assert.assertEquals("User object " + object + " was lost.", object.value(), readNode.getUserObject(object.key()));
        }

      } catch (IOException e) {
        e.printStackTrace();
        org.junit.Assert.fail(e.getMessage());
      }
    }
  }
}
