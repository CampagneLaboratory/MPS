package jetbrains.mps.traceInfo.test;

/*Generated by MPS */

import org.junit.Test;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.SNode;
import junit.framework.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.traceInfo.TraceInfoUtil;
import jetbrains.mps.project.Project;
import jetbrains.mps.TestMain;
import java.io.File;
import jetbrains.mps.util.PathManager;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.ThreadUtils;
import com.intellij.ide.IdeEventQueue;
import org.junit.BeforeClass;
import jetbrains.mps.ide.IdeMain;

public class TraceInfoTest {
  public TraceInfoTest() {
  }

  @Test
  public void ifTest() {
    invokeTest(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        SNode node = getErrorLocation(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            TestClass.ifTest();
          }
        });
        Assert.assertTrue("Node " + node.getSNodeId().toString() + " is of concept " + SNodeOperations.getConceptDeclaration(node), SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.IfStatement"));
      }
    });
  }

  @Test
  public void forTest() {
    invokeTest(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        SNode node = getErrorLocation(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            TestClass.forTest();
          }
        });
        Assert.assertTrue("Node " + node.getSNodeId().toString() + " is of concept " + SNodeOperations.getConceptDeclaration(node), SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ForStatement"));
      }
    });
  }

  @Test
  public void blockStatementTest() {
    invokeTest(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        SNode node = getErrorLocation(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            TestClass.blockStatementTest();
          }
        });
        Assert.assertTrue("Node " + node.getSNodeId().toString() + " is of concept " + SNodeOperations.getConceptDeclaration(node), SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ThrowStatement"));
      }
    });
  }

  @Test
  public void foreachTest() {
    invokeTest(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        try {
          TestClass.foreachTest();
        } catch (Throwable t) {
          StackTraceElement stackTraceElement = t.getStackTrace()[0];
          SNode node = TraceInfoUtil.getVar(stackTraceElement.getClassName(), stackTraceElement.getFileName(), stackTraceElement.getLineNumber(), "it");
          Assert.assertTrue("Node " + node + " for variable it.", (node != null) && SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.collections.structure.ForEachVariable"));
        }
      }
    });
  }

  @Test
  public void generatedForeachTest() {
    invokeTest(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        try {
          TestClass.generatedForeachTest();
        } catch (Throwable t) {
          StackTraceElement stackTraceElement = t.getStackTrace()[0];
          SNode node = TraceInfoUtil.getVar(stackTraceElement.getClassName(), stackTraceElement.getFileName(), stackTraceElement.getLineNumber(), "it_gen");
          Assert.assertTrue("Node " + node + " for variable it_gen.", (node != null) && SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.collections.structure.ForEachVariable"));
        }
      }
    });
  }

  private void invokeTest(final _FunctionTypes._void_P0_E0 test) {
    Project project = TestMain.loadProject(new File(PathManager.getHomePath() + "/core/kernel/traceinfo/traceInfo.mpr"));
    try {
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          test.invoke();
        }
      });
    } finally {
      cleanup(project);
    }
  }

  private SNode getErrorLocation(_FunctionTypes._void_P0_E0 method) {
    try {
      method.invoke();
    } catch (Throwable t) {
      StackTraceElement stackTraceElement = t.getStackTrace()[0];
      SNode node = TraceInfoUtil.getJavaNode(stackTraceElement.getClassName(), stackTraceElement.getFileName(), stackTraceElement.getLineNumber());
      // <node> 
      return node;
    }
    return null;
  }

  private void cleanup(final Project p) {
    ModelAccess.instance().flushEventQueue();
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        p.dispose();
        IdeEventQueue.getInstance().flushQueue();
        System.gc();
      }
    });
  }

  @BeforeClass
  public static void init() {
    IdeMain.setTestMode(IdeMain.TestMode.CORE_TEST);
    TestMain.configureMPS();
  }
}
