package jetbrains.mps.generator.traceInfo;

/*Generated by MPS */

import jetbrains.mps.components.CoreComponent;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelFqName;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.traceInfo.DebugInfo;
import jetbrains.mps.traceInfo.PositionInfo;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.Set;
import jetbrains.mps.traceInfo.DebugInfoRoot;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class TraceInfoUtilComponent implements CoreComponent {
  private static TraceInfoUtilComponent INSTANCE;
  public static String DEFAULT_MAPPER = "jetbrains.mps.generator.traceInfo";

  public TraceInfoUtilComponent() {
  }

  public void init() {
    if (INSTANCE != null) {
      throw new IllegalStateException("Double initialization!");
    }
    INSTANCE = this;
  }

  public void dispose() {
    INSTANCE = null;
  }

  public String modelFqNameFromUnitName(String unitName) {
    int lastDot = unitName.lastIndexOf(".");
    return ((lastDot == -1 ?
      "" :
      unitName.substring(0, lastDot)
    ));
  }

  public Iterable<SModelDescriptor> getCandidateModels(String unitName) {
    final String modelFqName = modelFqNameFromUnitName(unitName);
    return Sequence.fromIterable(Sequence.fromArray(SModelStereotype.values)).where(new IWhereFilter<String>() {
      public boolean accept(String it) {
        return !(SModelStereotype.isStubModelStereotype(it));
      }
    }).select(new ISelector<String, SModelDescriptor>() {
      public SModelDescriptor select(String stereotype) {
        return SModelRepository.getInstance().getModelDescriptor(new SModelFqName(modelFqName, stereotype));
      }
    }).where(new IWhereFilter<SModelDescriptor>() {
      public boolean accept(SModelDescriptor it) {
        return it != null;
      }
    });
  }

  @Nullable
  public <T> T findInTraceInfo(@NonNls String unitName, _FunctionTypes._return_P2_E0<? extends T, ? super DebugInfo, ? super SModelDescriptor> getter) {
    for (SModelDescriptor descriptor : Sequence.fromIterable(TraceInfoUtilComponent.getInstance().getCandidateModels(unitName))) {
      final DebugInfo info = TraceInfoCache.getInstance().get(descriptor);
      if (info == null) {
        continue;
      }
      T result = getter.invoke(info, descriptor);
      if (result != null) {
        return result;
      }
    }
    return null;
  }

  public <T extends PositionInfo> List<SNode> getAllNodes(@NonNls String unitName, final String file, final int lineNumber, final _FunctionTypes._return_P1_E0<? extends Set<T>, ? super DebugInfoRoot> positionsGetter) {
    return findInTraceInfo(unitName, new _FunctionTypes._return_P2_E0<List<SNode>, DebugInfo, SModelDescriptor>() {
      public List<SNode> invoke(DebugInfo debugInfo, SModelDescriptor descriptor) {
        List<T> infoForPosition = debugInfo.getInfoForPosition(file, lineNumber, new _FunctionTypes._return_P1_E0<Set<T>, DebugInfoRoot>() {
          public Set<T> invoke(DebugInfoRoot root) {
            return positionsGetter.invoke(root);
          }
        });
        List<SNode> nodes = ListSequence.fromList(new ArrayList<SNode>());
        if (ListSequence.fromList(infoForPosition).isEmpty()) {
          return null;
        }
        for (T info : infoForPosition) {
          SNode node = DebugInfo.findNode(info);
          if (node != null) {
            nodes.add(node);
          }
        }
        if (ListSequence.fromList(nodes).isEmpty()) {
          return null;
        }
        return nodes;
      }
    });
  }

  public static TraceInfoUtilComponent getInstance() {
    return INSTANCE;
  }
}
