package jetbrains.mps.generator.traceInfo;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.traceInfo.DebugInfo;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.traceInfo.UnitPositionInfo;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.traceInfo.TraceablePositionInfo;
import java.util.List;
import jetbrains.mps.traceInfo.DebugInfoRoot;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class TraceDown {
  public TraceDown() {
  }

  @NotNull
  public static Iterable<String> unitNames(SNode node) {
    SModel model = node.getModel();
    DebugInfo debugInfo = TraceInfoCache.getInstance().get(model);
    if (debugInfo == null) {
      return Sequence.fromIterable(Collections.<String>emptyList());
    }
    return ListSequence.fromList(debugInfo.getUnitsForNode(node)).select(new ISelector<UnitPositionInfo, String>() {
      public String select(UnitPositionInfo it) {
        return it.getUnitName();
      }
    });
  }

  public static String anyUnitName(SNode node) {
    Iterable<String> unitNames = unitNames(node);
    if (Sequence.fromIterable(unitNames).isEmpty()) {
      return null;
    }
    return Sequence.fromIterable(unitNames).first();
  }

  public static String unitNameWithPosition(SNode node, _FunctionTypes._return_P1_E0<? extends Boolean, ? super TraceablePositionInfo> positionMatcher) {
    SModel model = node.getModel();
    DebugInfo debugInfo = TraceInfoCache.getInstance().get(model);
    if (debugInfo == null) {
      return null;
    }

    List<UnitPositionInfo> unitsForNode = debugInfo.getUnitsForNode(node);

    DebugInfoRoot infoRoot = debugInfo.getRootInfo(SNodeOperations.getContainingRoot(node));
    for (final TraceablePositionInfo position : SetSequence.fromSet(infoRoot.getPositions())) {
      if (positionMatcher.invoke(position)) {
        UnitPositionInfo unit = ListSequence.fromList(unitsForNode).findFirst(new IWhereFilter<UnitPositionInfo>() {
          public boolean accept(UnitPositionInfo it) {
            return it.contains(position.getFileName(), position.getStartLine());
          }
        });
        if (unit != null) {
          return unit.getUnitName();
        }
      }
    }
    return null;
  }

  public static boolean isTraceable(@NotNull final SNode node, @NotNull DebugInfo info) {
    DebugInfoRoot rootInfo = info.getRootInfo(SNodeOperations.getContainingRoot(node));
    if (rootInfo == null) {
      return false;
    }
    return SetSequence.fromSet(rootInfo.getPositions()).findFirst(new IWhereFilter<TraceablePositionInfo>() {
      public boolean accept(TraceablePositionInfo it) {
        return eq_mk0t6b_a0a0a0a0a0a2a4(it.getNodeId(), node.getNodeId().toString());
      }
    }) != null;
  }

  public static boolean isTraceable(@NotNull SNode node) {
    DebugInfo info = TraceInfoCache.getInstance().get(SNodeOperations.getModel(node));
    if (info == null) {
      return false;
    }
    return isTraceable(node, info);
  }

  private static boolean eq_mk0t6b_a0a0a0a0a0a2a4(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
