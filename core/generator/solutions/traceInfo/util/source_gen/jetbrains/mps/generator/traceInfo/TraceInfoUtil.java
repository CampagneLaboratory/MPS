package jetbrains.mps.generator.traceInfo;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.util.Mapper2;
import jetbrains.mps.traceInfo.DebugInfo;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.traceInfo.UnitPositionInfo;
import jetbrains.mps.traceInfo.PositionInfo;
import java.util.List;
import jetbrains.mps.util.Mapper;
import jetbrains.mps.traceInfo.DebugInfoRoot;
import java.util.Set;
import jetbrains.mps.traceInfo.TraceablePositionInfo;
import jetbrains.mps.traceInfo.ScopePositionInfo;

public class TraceInfoUtil {
  public TraceInfoUtil() {
  }

  @Nullable
  @Deprecated
  public static <T> T findInDebugInfo(@NotNull String unitName, @NotNull final Mapper2<? super DebugInfo, ? super SModelDescriptor, ? extends T> nodeGetter) {
    return TraceInfoUtilComponent.getInstance().findInTraceInfo(unitName, new _FunctionTypes._return_P2_E0<T, DebugInfo, SModelDescriptor>() {
      public T invoke(DebugInfo info, SModelDescriptor descriptor) {
        return (T) nodeGetter.value(info, descriptor);
      }
    });
  }

  @Nullable
  public static String getUnitName(@NotNull String className, final String file, final int position) {
    return TraceInfoUtilComponent.getInstance().findInTraceInfo(className, new _FunctionTypes._return_P2_E0<String, DebugInfo, SModelDescriptor>() {
      public String invoke(DebugInfo info, SModelDescriptor descriptor) {
        return info.getUnitNameForLine(file, position);
      }
    });
  }

  @Nullable
  public static SNode getUnitNode(@NonNls String className, final String file, final int position) {
    return TraceInfoUtilComponent.getInstance().findInTraceInfo(className, new _FunctionTypes._return_P2_E0<SNode, DebugInfo, SModelDescriptor>() {
      public SNode invoke(DebugInfo info, SModelDescriptor descriptor) {
        return info.getUnitNodeForLine(file, position, descriptor.getSModel());
      }
    });
  }

  @Nullable
  public static SNode getNode(@NonNls String className, final String file, final int position) {
    return TraceInfoUtilComponent.getInstance().findInTraceInfo(className, new _FunctionTypes._return_P2_E0<SNode, DebugInfo, SModelDescriptor>() {
      public SNode invoke(DebugInfo info, SModelDescriptor descriptor) {
        return info.getNodeForLine(file, position, descriptor.getSModel());
      }
    });
  }

  @Nullable
  public static SNodePointer getNodePointer(@NonNls final String className, final String file, final int position) {
    return ModelAccess.instance().runReadAction(new Computable<SNodePointer>() {
      public SNodePointer compute() {
        SNode node = getNode(className, file, position);
        if (node == null) {
          return null;
        }
        return new SNodePointer(node);
      }
    });
  }

  @Nullable
  public static SNode getVar(@NonNls String className, final String file, final int position, @NonNls final String varName) {
    return TraceInfoUtilComponent.getInstance().findInTraceInfo(className, new _FunctionTypes._return_P2_E0<SNode, DebugInfo, SModelDescriptor>() {
      public SNode invoke(DebugInfo info, SModelDescriptor descriptor) {
        return info.getVarForLine(file, position, descriptor.getSModel(), varName);
      }
    });
  }

  public static String getUnitName(SNode node) {
    SModel model = node.getModel();
    DebugInfo debugInfo = TraceInfoCache.getInstance().get(model.getModelDescriptor());
    if (debugInfo == null) {
      return null;
    }
    UnitPositionInfo unitForNode = debugInfo.getUnitForNode(node.getId());
    if (unitForNode != null) {
      return unitForNode.getUnitName();
    }
    return null;
  }

  @Nullable
  public static <T extends PositionInfo> List<SNode> getAllNodes(@NotNull final String className, final String file, final int position, final Mapper<DebugInfoRoot, ? extends Set<T>> positionsGetter) {
    return ModelAccess.instance().runReadAction(new Computable<List<SNode>>() {
      public List<SNode> compute() {
        return TraceInfoUtilComponent.getInstance().getAllNodes(className, file, position, new _FunctionTypes._return_P1_E0<Set<T>, DebugInfoRoot>() {
          public Set<T> invoke(DebugInfoRoot info) {
            return positionsGetter.value(info);
          }
        });
      }
    });
  }

  @Nullable
  public static List<SNode> getAllTraceableNodes(@NotNull String className, final String file, final int position) {
    return TraceInfoUtil.getAllNodes(className, file, position, new Mapper<DebugInfoRoot, Set<TraceablePositionInfo>>() {
      @Override
      public Set<TraceablePositionInfo> value(DebugInfoRoot key) {
        return key.getPositions();
      }
    });
  }

  @Nullable
  public static List<SNode> getAllScopeNodes(@NotNull String className, final String file, final int position) {
    return TraceInfoUtil.getAllNodes(className, file, position, new Mapper<DebugInfoRoot, Set<ScopePositionInfo>>() {
      @Override
      public Set<ScopePositionInfo> value(DebugInfoRoot key) {
        return key.getScopePositions();
      }
    });
  }

  @Nullable
  public static List<SNode> getAllUnitNodes(@NotNull String className, final String file, final int position) {
    return TraceInfoUtil.getAllNodes(className, file, position, new Mapper<DebugInfoRoot, Set<UnitPositionInfo>>() {
      @Override
      public Set<UnitPositionInfo> value(DebugInfoRoot key) {
        return key.getUnitPositions();
      }
    });
  }
}
