package jetbrains.mps.generator.impl;

/*Generated by MPS */

import java.util.Set;
import java.util.HashSet;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import java.util.ArrayList;
import java.util.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public final class GeneratorUtilEx {
  private static final Set<String> TemplateLangElements = new HashSet<String>();
  static {
    TemplateLangElements.add(RuleUtil.concept_ReferenceMacro);
    TemplateLangElements.add(RuleUtil.concept_PropertyMacro);
    TemplateLangElements.add(RuleUtil.concept_TemplateFragment);
    TemplateLangElements.add(RuleUtil.concept_RootTemplateAnnotation);
  }
  public static boolean isTemplateLanguageElement(SNode n) {
    return isTemplateLanguageElement(n.getConcept().getQualifiedName());
  }
  public static boolean isTemplateLanguageElement(String conceptQualifiedName) {
    if (!(conceptQualifiedName.startsWith("jetbrains.mps.lang.generator"))) {
      // optimization 
      return false;
    }
    return RuleUtil.isNodeMacro(conceptQualifiedName) || TemplateLangElements.contains(conceptQualifiedName);
  }
  public static String getMappingName_NodeMacro(SNode node, String defaultValue) {
    SNode mappingLabel = SLinkOperations.getTarget(node, "mappingLabel", false);
    String mappingName = (mappingLabel != null ? SPropertyOperations.getString(mappingLabel, "name") : null);
    if (mappingName == null) {
      return defaultValue;
    }
    return mappingName;
  }
  public static String getMappingName_TemplateFragment(SNode node, String defaultValue) {
    SNode ld = SLinkOperations.getTarget(node, "labelDeclaration", false);
    if (ld == null) {
      return defaultValue;
    }
    String v = SPropertyOperations.getString(ld, "name");
    return (v == null ? defaultValue : v);
  }
  public static String getPatternVariableName(SNode ref) {
    return BehaviorReflection.invokeVirtual(String.class, ref, "virtual_getVariableName_2902001550281937661", new Object[]{});
  }
  public static List<SNode> getTemplateFragments(@NotNull SNode template) {
    List<SNode> templateFragments = new ArrayList<SNode>();
    LinkedList<SNode> queue = new LinkedList<SNode>();
    queue.addFirst(template);
    final SNode conceptTemplateFragment = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateFragment");
    while (!(queue.isEmpty())) {
      SNode subnode = queue.removeFirst();
      // do not look for TemplateFragments in subnode's children as TFs couldn't be nested 
      boolean tfFound = false;
      for (SNode attr : SLinkOperations.getTargets(subnode, "smodelAttribute", true)) {
        if (SNodeOperations.getConceptDeclaration(attr) == conceptTemplateFragment) {
          templateFragments.add((SNode) attr);
          tfFound = true;
          break;
        }
      }
      if (!(tfFound)) {
        queue.addAll(SNodeOperations.getChildren(subnode));
      }
    }
    return templateFragments;
  }
  public static void dispatchRuleConsequence(@NotNull SNode ruleConsequence, @NotNull GeneratorUtilEx.ConsequenceDispatch dispatch) {
    if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.TemplateDeclarationReference")) {
      dispatch.templateDeclarationReference(ruleConsequence);
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence")) {
      dispatch.inlineTemplateWithContext(ruleConsequence);
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence")) {
      dispatch.inlineTemplate(ruleConsequence);
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineSwitch_RuleConsequence")) {
      dispatch.inlineSwitch(ruleConsequence);
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.WeaveEach_RuleConsequence")) {
      dispatch.weaveEach(ruleConsequence);
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.AbandonInput_RuleConsequence")) {
      dispatch.abandonInput(ruleConsequence);
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.DismissTopMappingRule")) {
      dispatch.dismissTopRule(ruleConsequence);
    } else {
      dispatch.unknown(ruleConsequence);
    }
  }
  public static String getGeneratorMessage_text(SNode generatorMessage) {
    return SPropertyOperations.getString(generatorMessage, "messageText");
  }
  public static DismissTopMappingRuleException.MessageType getGeneratorMessage_kind(SNode generatorMessage) {
    if (generatorMessage == null) {
      // this is how it used to be, although to me default to warn/info might be better 
      return null;
    }
    if (SPropertyOperations.hasValue(generatorMessage, "messageType", "error", "info")) {
      return DismissTopMappingRuleException.MessageType.error;
    } else
    if (SPropertyOperations.hasValue(generatorMessage, "messageType", "warning", "info")) {
      return DismissTopMappingRuleException.MessageType.warning;
    } else {
      return DismissTopMappingRuleException.MessageType.info;
    }
  }
  public static interface ConsequenceDispatch {
    public void inlineSwitch(SNode ruleConsequence);
    public void inlineTemplateWithContext(SNode ruleConsequence);
    public void inlineTemplate(SNode ruleConsequence);
    public void templateDeclarationReference(SNode ruleConsequence);
    public void weaveEach(SNode ruleConsequence);
    public void abandonInput(SNode ruleConsequence);
    public void dismissTopRule(SNode ruleConsequence);
    public void unknown(SNode ruleConsequence);
  }
}
