package jetbrains.mps.generator.impl;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import org.apache.log4j.LogManager;
import java.util.Set;
import java.util.HashSet;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import java.util.ArrayList;
import java.util.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;

public class GeneratorUtilEx {
  private static final Logger LOG = Logger.wrap(LogManager.getLogger(GeneratorUtilEx.class));
  public static final String link_BaseConcept_attrs = "smodelAttribute";

  private static final Set<String> TemplateLangElements = new HashSet<String>();
  static {
    TemplateLangElements.add(RuleUtil.concept_ReferenceMacro);
    TemplateLangElements.add(RuleUtil.concept_PropertyMacro);
    TemplateLangElements.add("jetbrains.mps.lang.generator.structure.TemplateFragment");
    TemplateLangElements.add("jetbrains.mps.lang.generator.structure.RootTemplateAnnotation");
  }

  public GeneratorUtilEx() {
  }

  public static boolean isTemplateLanguageElement(SNode n) {
    String conceptFQName = n.getConcept().getQualifiedName();
    if (!(conceptFQName.startsWith("jetbrains.mps.lang.generator"))) {
      // optimization 
      return false;
    }
    return RuleUtil.isNodeMacro(n) || TemplateLangElements.contains(conceptFQName);
  }

  public static String getMappingName(SNode node, String defaultValue) {
    SNode mappingLabel = null;

    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.BaseMappingRule")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.BaseMappingRule"), "labelDeclaration", false);
    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.NodeMacro")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.NodeMacro"), "mappingLabel", false);
    } else
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.CreateRootRule")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.CreateRootRule"), "label", false);
    } else
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.TemplateFragment")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.TemplateFragment"), "labelDeclaration", false);
    } else
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule"), "labelDeclaration", false);
    } else {
      LOG.errorWithTrace("unexpected input " + jetbrains.mps.util.SNodeOperations.getDebugText(node));
    }
    String mappingName = (mappingLabel != null ?
      SPropertyOperations.getString(mappingLabel, "name") :
      null
    );
    if (mappingName == null) {
      return defaultValue;
    }
    return mappingName;
  }

  public static String getMappingName_NodeMacro(SNode node, String defaultValue) {
    SNode mappingLabel = SLinkOperations.getTarget(node, "mappingLabel", false);
    String mappingName = (mappingLabel != null ?
      SPropertyOperations.getString(mappingLabel, "name") :
      null
    );
    if (mappingName == null) {
      return defaultValue;
    }
    return mappingName;
  }

  public static String getMappingName_TemplateFragment(SNode node, String defaultValue) {
    SNode ld = SLinkOperations.getTarget(node, "labelDeclaration", false);
    if (ld == null) {
      return defaultValue;
    }
    String v = SPropertyOperations.getString(ld, "name");
    return (v == null ?
      defaultValue :
      v
    );
  }

  public static String getPatternVariableName(SNode ref) {
    return BehaviorReflection.invokeVirtual(String.class, ref, "virtual_getVariableName_2902001550281937661", new Object[]{});
  }

  public static List<SNode> getTemplateFragments(@NotNull SNode template) {
    List<SNode> templateFragments = new ArrayList<SNode>();
    LinkedList<SNode> queue = new LinkedList<SNode>();
    queue.addFirst(template);
    final SNode conceptTemplateFragment = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateFragment");
    while (!(queue.isEmpty())) {
      SNode subnode = queue.removeFirst();
      // do not look for TemplateFragments in subnode's children as TFs couldn't be nested 
      boolean tfFound = false;
      for (SNode attr : SLinkOperations.getTargets(subnode, "smodelAttribute", true)) {
        if (SNodeOperations.getConceptDeclaration(attr) == conceptTemplateFragment) {
          templateFragments.add((SNode) attr);
          tfFound = true;
          break;
        }
      }
      if (!(tfFound)) {
        queue.addAll(SNodeOperations.getChildren(subnode));
      }
    }
    return templateFragments;
  }

  public static boolean checkIfOneOrMaryAdjacentFragments(List<SNode> fragments, SNode templateContainer, SNode inputNode, SNode ruleNode, ITemplateGenerator generator) {
    if (fragments.isEmpty()) {
      generator.showErrorMessage(inputNode, templateContainer, ruleNode, "couldn't process template: no template fragments found");
      return false;
    }
    if (fragments.size() > 1) {
      SNode templateNode = SNodeOperations.getParent(fragments.get(0));
      SNode parent = SNodeOperations.getParent(templateNode);
      String role = templateNode.getRoleInParent();
      for (SNode fragment : fragments) {
        templateNode = SNodeOperations.getParent(fragment);
        if (!((parent == SNodeOperations.getParent(templateNode) && role.equals(templateNode.getRoleInParent())))) {
          generator.showErrorMessage(inputNode, templateContainer, ruleNode, "couldn't process template: all template fragments must reside in the same parent node");
          return false;
        }
      }
    }
    return true;
  }

  public static void dispatchRuleConsequence(@NotNull SNode ruleConsequence, @NotNull GeneratorUtilEx.ConsequenceDispatch dispatch) {
    if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.TemplateDeclarationReference")) {
      dispatch.templateDeclarationReference(ruleConsequence);
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence")) {
      dispatch.inlineTemplateWithContext(ruleConsequence);
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence")) {
      dispatch.inlineTemplate(ruleConsequence);
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineSwitch_RuleConsequence")) {
      dispatch.inlineSwitch(ruleConsequence);
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.WeaveEach_RuleConsequence")) {
      dispatch.weaveEach(ruleConsequence);
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.AbandonInput_RuleConsequence")) {
      dispatch.abandonInput(ruleConsequence);
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.DismissTopMappingRule")) {
      dispatch.dismissTopRule(ruleConsequence);
    } else {
      dispatch.unknown(ruleConsequence);
    }
  }



  public static DismissTopMappingRuleException.MessageType processGeneratorMessage(SNode message, SNode inputNode, SNode templateNode, SNode ruleNode, ITemplateGenerator generator) {
    DismissTopMappingRuleException.MessageType messageType = null;
    if (message != null) {
      String text = SPropertyOperations.getString(message, "messageText");
      if (SPropertyOperations.hasValue(message, "messageType", "error", "info")) {
        messageType = DismissTopMappingRuleException.MessageType.error;
        generator.showErrorMessage(inputNode, templateNode, ruleNode, text);
      } else
      if (SPropertyOperations.hasValue(message, "messageType", "warning", "info")) {
        messageType = DismissTopMappingRuleException.MessageType.warning;
        generator.getLogger().warning(inputNode, text);
      } else {
        messageType = DismissTopMappingRuleException.MessageType.info;
        generator.getLogger().info(inputNode, text);
      }
    }
    return messageType;
  }

  public static String getGeneratorMessage_text(SNode generatorMessage) {
    return SPropertyOperations.getString(generatorMessage, "messageText");
  }

  public static DismissTopMappingRuleException.MessageType getGeneratorMessage_kind(SNode generatorMessage) {
    if (generatorMessage == null) {
      // this is how it used to be, although to me default to warn/info might be better 
      return null;
    }
    if (SPropertyOperations.hasValue(generatorMessage, "messageType", "error", "info")) {
      return DismissTopMappingRuleException.MessageType.error;
    } else
    if (SPropertyOperations.hasValue(generatorMessage, "messageType", "warning", "info")) {
      return DismissTopMappingRuleException.MessageType.warning;
    } else {
      return DismissTopMappingRuleException.MessageType.info;
    }
  }



  public static SNode getReferenceMacro(SNode node, String linkRole) {
    return AttributeOperations.getAttribute(node, new IAttributeDescriptor.LinkAttribute("jetbrains.mps.lang.generator.structure.ReferenceMacro", linkRole));
  }

  public static interface ConsequenceDispatch {
    public void inlineSwitch(SNode ruleConsequence);
    public void inlineTemplateWithContext(SNode ruleConsequence);
    public void inlineTemplate(SNode ruleConsequence);
    public void templateDeclarationReference(SNode ruleConsequence);
    public void weaveEach(SNode ruleConsequence);
    public void abandonInput(SNode ruleConsequence);
    public void dismissTopRule(SNode ruleConsequence);
    public void unknown(SNode ruleConsequence);
  }
}
