package jetbrains.mps.generator.impl;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import org.apache.log4j.LogManager;
import java.util.Set;
import java.util.HashSet;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import java.util.ArrayList;
import java.util.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.util.Pair;
import jetbrains.mps.generator.runtime.TemplateContext;
import jetbrains.mps.generator.runtime.TemplateExecutionEnvironment;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;

public class GeneratorUtilEx {
  private static final Logger LOG = Logger.wrap(LogManager.getLogger(GeneratorUtilEx.class));
  public static final String link_BaseConcept_attrs = "smodelAttribute";

  private static final Set<String> TemplateLangElements = new HashSet<String>();
  static {
    TemplateLangElements.add(RuleUtil.concept_ReferenceMacro);
    TemplateLangElements.add(RuleUtil.concept_PropertyMacro);
    TemplateLangElements.add("jetbrains.mps.lang.generator.structure.TemplateFragment");
    TemplateLangElements.add("jetbrains.mps.lang.generator.structure.RootTemplateAnnotation");
  }

  public GeneratorUtilEx() {
  }

  public static boolean isTemplateLanguageElement(SNode n) {
    String conceptFQName = n.getConcept().getQualifiedName();
    if (!(conceptFQName.startsWith("jetbrains.mps.lang.generator"))) {
      // optimization 
      return false;
    }
    return RuleUtil.isNodeMacro(n) || TemplateLangElements.contains(conceptFQName);
  }

  public static String getMappingName(SNode node, String defaultValue) {
    SNode mappingLabel = null;

    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.BaseMappingRule")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.BaseMappingRule"), "labelDeclaration", false);
    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.NodeMacro")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.NodeMacro"), "mappingLabel", false);
    } else
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.CreateRootRule")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.CreateRootRule"), "label", false);
    } else
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.TemplateFragment")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.TemplateFragment"), "labelDeclaration", false);
    } else
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule"), "labelDeclaration", false);
    } else {
      LOG.errorWithTrace("unexpected input " + jetbrains.mps.util.SNodeOperations.getDebugText(node));
    }
    String mappingName = (mappingLabel != null ?
      SPropertyOperations.getString(mappingLabel, "name") :
      null
    );
    if (mappingName == null) {
      return defaultValue;
    }
    return mappingName;
  }

  public static String getMappingName_NodeMacro(SNode node, String defaultValue) {
    SNode mappingLabel = SLinkOperations.getTarget(node, "mappingLabel", false);
    String mappingName = (mappingLabel != null ?
      SPropertyOperations.getString(mappingLabel, "name") :
      null
    );
    if (mappingName == null) {
      return defaultValue;
    }
    return mappingName;
  }

  public static String getMappingName_TemplateFragment(SNode node, String defaultValue) {
    SNode ld = SLinkOperations.getTarget(node, "labelDeclaration", false);
    if (ld == null) {
      return defaultValue;
    }
    String v = SPropertyOperations.getString(ld, "name");
    return (v == null ?
      defaultValue :
      v
    );
  }

  public static String getPatternVariableName(SNode ref) {
    return BehaviorReflection.invokeVirtual(String.class, ref, "virtual_getVariableName_2902001550281937661", new Object[]{});
  }

  public static List<SNode> getTemplateFragments(@NotNull SNode template) {
    List<SNode> templateFragments = new ArrayList<SNode>();
    LinkedList<SNode> queue = new LinkedList<SNode>(SNodeOperations.getChildren(template));
    final SNode conceptTemplateFragment = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateFragment");
    while (!(queue.isEmpty())) {
      SNode subnode = queue.removeFirst();
      // do not look for TemplateFragments in subnode's children as TFs couldn't be nested 
      boolean tfFound = false;
      for (SNode attr : SLinkOperations.getTargets(subnode, "smodelAttribute", true)) {
        if (SNodeOperations.getConceptDeclaration(attr) == conceptTemplateFragment) {
          templateFragments.add((SNode) attr);
          tfFound = true;
          break;
        }
      }
      if (!(tfFound)) {
        queue.addAll(SNodeOperations.getChildren(subnode));
      }
    }
    return templateFragments;
  }

  public static boolean checkIfOneOrMaryAdjacentFragments(List<SNode> fragments, SNode templateContainer, SNode inputNode, SNode ruleNode, ITemplateGenerator generator) {
    if (fragments.isEmpty()) {
      generator.showErrorMessage(inputNode, templateContainer, ruleNode, "couldn't process template: no template fragments found");
      return false;
    }
    if (fragments.size() > 1) {
      SNode templateNode = SNodeOperations.getParent(fragments.get(0));
      SNode parent = SNodeOperations.getParent(templateNode);
      String role = templateNode.getRoleInParent();
      for (SNode fragment : fragments) {
        templateNode = SNodeOperations.getParent(fragment);
        if (!((parent == SNodeOperations.getParent(templateNode) && role.equals(templateNode.getRoleInParent())))) {
          generator.showErrorMessage(inputNode, templateContainer, ruleNode, "couldn't process template: all template fragments must reside in the same parent node");
          return false;
        }
      }
    }
    return true;
  }

  public static List<Pair<SNode, String>> getTemplateNodesFromRuleConsequence(SNode ruleConsequence, TemplateContext context, SNode ruleNode, TemplateExecutionEnvironment env) throws DismissTopMappingRuleException, AbandonRuleInputException, GenerationFailureException {
    final ITemplateGenerator generator = env.getGenerator();
    if (ruleConsequence == null) {
      generator.showErrorMessage(context.getInput(), null, ruleNode, "no rule consequence");
      return null;
    }
    env.getTracer().pushRuleConsequence(new SNodePointer(ruleConsequence));
    if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.TemplateDeclarationReference") || SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence")) {
      SNode templateContainer;
      if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.TemplateDeclarationReference")) {
        templateContainer = SLinkOperations.getTarget(SNodeOperations.cast(ruleConsequence, "jetbrains.mps.lang.generator.structure.TemplateDeclarationReference"), "template", false);
      } else {
        templateContainer = ruleConsequence;
      }
      if (templateContainer == null) {
        generator.showErrorMessage(context.getInput(), ruleConsequence, ruleNode, "error processing template consequence: no 'template'");
        return null;
      }
      List<SNode> fragments = getTemplateFragments(templateContainer);
      if (GeneratorUtilEx.checkIfOneOrMaryAdjacentFragments(fragments, templateContainer, context.getInput(), ruleNode, generator)) {
        List<Pair<SNode, String>> result = new ArrayList<Pair<SNode, String>>(fragments.size());
        for (SNode fragment : fragments) {
          result.add(new Pair<SNode, String>(SNodeOperations.getParent(fragment), getMappingName_TemplateFragment(fragment, null)));
        }
        return result;
      }
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence")) {
      SNode templateNode = SLinkOperations.getTarget(SNodeOperations.cast(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence"), "templateNode", true);
      if (templateNode != null) {
        return Collections.singletonList(new Pair<SNode, String>(templateNode, null));
      } else {
        generator.showErrorMessage(context.getInput(), null, ruleConsequence, "no template node");
      }
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineSwitch_RuleConsequence")) {
      SNode inlineSwitch = SNodeOperations.cast(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineSwitch_RuleConsequence");
      for (SNode switchCase : SLinkOperations.getTargets(inlineSwitch, "case", true)) {
        if (env.getQueryExecutor().checkCondition(SLinkOperations.getTarget(switchCase, "conditionFunction", true), true, context, switchCase)) {
          return GeneratorUtilEx.getTemplateNodesFromRuleConsequence(SLinkOperations.getTarget(switchCase, "caseConsequence", true), context, switchCase, env);
        }
      }
      SNode defaultConsequence = SLinkOperations.getTarget(inlineSwitch, "defaultConsequence", true);
      if (defaultConsequence == null) {
        generator.showErrorMessage(context.getInput(), null, inlineSwitch, "no default consequence in switch");
      } else {
        return GeneratorUtilEx.getTemplateNodesFromRuleConsequence(defaultConsequence, context, defaultConsequence, env);
      }
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.DismissTopMappingRule")) {
      SNode message = SLinkOperations.getTarget(SNodeOperations.cast(ruleConsequence, "jetbrains.mps.lang.generator.structure.DismissTopMappingRule"), "generatorMessage", true);
      DismissTopMappingRuleException.MessageType messageType = processGeneratorMessage(message, context.getInput(), null, ruleNode, generator);
      throw new DismissTopMappingRuleException(messageType);
    } else if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.AbandonInput_RuleConsequence")) {
      throw new AbandonRuleInputException();
    } else {
      generator.showErrorMessage(context.getInput(), null, ruleConsequence, "unsupported rule consequence");
    }
    return null;
  }



  public static DismissTopMappingRuleException.MessageType processGeneratorMessage(SNode message, SNode inputNode, SNode templateNode, SNode ruleNode, ITemplateGenerator generator) {
    DismissTopMappingRuleException.MessageType messageType = null;
    if (message != null) {
      String text = SPropertyOperations.getString(message, "messageText");
      if (SPropertyOperations.hasValue(message, "messageType", "error", "info")) {
        messageType = DismissTopMappingRuleException.MessageType.error;
        generator.showErrorMessage(inputNode, templateNode, ruleNode, text);
      } else
      if (SPropertyOperations.hasValue(message, "messageType", "warning", "info")) {
        messageType = DismissTopMappingRuleException.MessageType.warning;
        generator.getLogger().warning(inputNode, text);
      } else {
        messageType = DismissTopMappingRuleException.MessageType.info;
        generator.getLogger().info(inputNode, text);
      }
    }
    return messageType;

  }
}
