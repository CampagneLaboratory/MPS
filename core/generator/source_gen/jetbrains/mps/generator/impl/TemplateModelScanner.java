package jetbrains.mps.generator.impl;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class TemplateModelScanner {
  private final SModel myTemplateModel;
  private final Set<String> myTargetLanguages;
  private final Set<String> myQueryLanguages;
  private final SNode concept_IfMacro = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.IfMacro");
  private final SNode concept_NodeMacro = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.NodeMacro");
  private final SNode concept_PropertyMacro = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.PropertyMacro");
  private final SNode concept_ReferenceMacro = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.ReferenceMacro");
  private final SNode concept_TemplateFragment = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateFragment");
  private final SNode concept_RootTemplateAnnotation = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.RootTemplateAnnotation");
  private final SNode concept_rc_InlineTemplateWithContext = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence");
  private final SNode concept_rc_InlineTemplate = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence");
  private final SNode concept_rule_PatternReduction = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule");

  public TemplateModelScanner(SModel model) {
    myTargetLanguages = SetSequence.fromSet(new LinkedHashSet<String>());
    myQueryLanguages = SetSequence.fromSet(new LinkedHashSet<String>());
    myTemplateModel = model;
  }

  public void scan() {
    for (SNode root : myTemplateModel.getRootNodes()) {
      if (safeIsInstanceOf(root, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.MappingConfiguration"))) {
        scanControlNode(root);
      } else if (safeIsInstanceOf(root, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateSwitch"))) {
        scanControlNode(SNodeOperations.cast(root, "jetbrains.mps.lang.generator.structure.TemplateSwitch"));
      } else if (safeIsInstanceOf(root, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateDeclaration"))) {
        scanTemplateContextNode(SLinkOperations.getTarget(SNodeOperations.cast(root, "jetbrains.mps.lang.generator.structure.TemplateDeclaration"), "contentNode", true));
        for (SNode n : SLinkOperations.getTargets(SNodeOperations.cast(root, "jetbrains.mps.lang.generator.structure.TemplateDeclaration"), "parameter", true)) {
          scanControlNode(n);
        }
      } else if (safeIsInstanceOf(root, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.MappingScript"))) {
        scanQueryNode(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(root, "jetbrains.mps.lang.generator.structure.MappingScript"), "codeBlock", true), "body", true));
      } else {
        if ((safeNodeAttribute(root, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.RootTemplateAnnotation")) != null)) {
          scanTemplateNode(root);
        }
      }
    }
    SetSequence.fromSet(myTargetLanguages).removeElement("jetbrains.mps.lang.generator");
    if (myTemplateModel.getRootNodes().iterator().hasNext()) {
      SetSequence.fromSet(myQueryLanguages).addElement("jetbrains.mps.lang.generator");
    }
  }

  protected void scanTemplateNode(SNode node) {
    if ((node == null)) {
      return;
    }
    SetSequence.fromSet(myTargetLanguages).addElement(node.getConcept().getLanguage().getQualifiedName());
    for (SNode n : node.getChildren()) {
      if (safeIsInstanceOf(n, concept_IfMacro)) {
        if (SLinkOperations.getTarget(SNodeOperations.cast(n, "jetbrains.mps.lang.generator.structure.IfMacro"), "alternativeConsequence", true) != null) {
          scanControlNode(SLinkOperations.getTarget(SNodeOperations.cast(n, "jetbrains.mps.lang.generator.structure.IfMacro"), "alternativeConsequence", true));
        }
        scanQueryNode(SLinkOperations.getTarget(SNodeOperations.cast(n, "jetbrains.mps.lang.generator.structure.IfMacro"), "conditionFunction", true));
      } else if (safeIsInstanceOf(n, concept_NodeMacro) || safeIsInstanceOf(n, concept_RootTemplateAnnotation) || safeIsInstanceOf(n, concept_PropertyMacro) || safeIsInstanceOf(n, concept_ReferenceMacro) || safeIsInstanceOf(n, concept_TemplateFragment)) {
        scanQueryNode(n);
      } else {
        scanTemplateNode(n);
      }
    }
  }

  private void scanTemplateContextNode(SNode node) {
    if ((node == null)) {
      return;
    }
    if ((safeNodeAttribute(node, concept_TemplateFragment) != null)) {
      scanTemplateNode(node);
      return;
    }
    for (SNode n : node.getChildren()) {
      scanTemplateContextNode(n);
    }
  }

  private void scanControlNode(SNode node) {
    if (safeIsInstanceOf(node, concept_rc_InlineTemplateWithContext)) {
      scanTemplateContextNode(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence"), "contentNode", true));
    } else if (safeIsInstanceOf(node, concept_rc_InlineTemplate)) {
      scanTemplateNode(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence"), "templateNode", true));
    } else if (safeIsInstanceOf(node, concept_rule_PatternReduction)) {
      // ignore pattern 
      SetSequence.fromSet(myQueryLanguages).addElement("jetbrains.mps.lang.pattern");
      scanControlNode(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule"), "ruleConsequence", true));
      scanQueryNode(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule"), "conditionFunction", true));
    } else {
      if ("jetbrains.mps.lang.generator".equals(node.getConcept().getLanguage().getQualifiedName())) {
        for (SNode child : node.getChildren()) {
          scanControlNode(child);
        }
      } else {
        scanQueryNode(node);
      }
    }
  }

  private void scanQueryNode(SNode node) {
    if ((node == null)) {
      return;
    }
    for (SNode n : SNodeUtil.getDescendants(node, null, true)) {
      SetSequence.fromSet(myQueryLanguages).addElement(n.getConcept().getLanguage().getQualifiedName());
    }
  }

  public Set<String> getTargetLanguages() {
    return myTargetLanguages;
  }

  public Set<String> getQueryLanguages() {
    return myQueryLanguages;
  }

  private boolean safeIsInstanceOf(SNode node, SNode concept) {
    // as this class executed before ALL generation process we cannot use isInstanceOf operation here 
    // so isInstanceOf limited only to generator language concepts 
    // todo: extending generator macroses impossible anymore, is it ok? 
    if (eq_8grp5z_a0d0u(node.getConcept().getLanguage().getQualifiedName(), "jetbrains.mps.lang.generator")) {
      return SNodeOperations.isInstanceOf(node, NameUtil.nodeFQName(concept));
    } else {
      return false;
    }
  }

  private SNode safeNodeAttribute(SNode node, final SNode attribute) {
    // todo: basically for this we need everything castable to BaseConcept 
    return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.BaseConcept"), "smodelAttribute", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return safeIsInstanceOf(it, attribute);
      }
    });
  }

  private static boolean eq_8grp5z_a0d0u(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
