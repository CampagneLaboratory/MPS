package jetbrains.mps.generator.impl;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class TemplateModelScanner {
  private SModel myTemplateModel;
  private Set<String> myTargetLanguages;
  private Set<String> myQueryLanguages;

  public TemplateModelScanner(SModel model) {
    myTargetLanguages = SetSequence.fromSet(new LinkedHashSet<String>());
    myQueryLanguages = SetSequence.fromSet(new LinkedHashSet<String>());
    myTemplateModel = model;
  }

  public void scan() {
    for (SNode root : myTemplateModel.roots()) {
      if (SNodeOperations.isInstanceOf(root, "jetbrains.mps.lang.generator.structure.MappingConfiguration")) {
        scanControlNode(root);
      } else if (SNodeOperations.isInstanceOf(root, "jetbrains.mps.lang.generator.structure.TemplateSwitch")) {
        scanControlNode(SNodeOperations.cast(root, "jetbrains.mps.lang.generator.structure.TemplateSwitch"));
      } else if (SNodeOperations.isInstanceOf(root, "jetbrains.mps.lang.generator.structure.TemplateDeclaration")) {
        scanTemplateContextNode(SLinkOperations.getTarget(SNodeOperations.cast(root, "jetbrains.mps.lang.generator.structure.TemplateDeclaration"), "contentNode", true));
        for (SNode n : SLinkOperations.getTargets(SNodeOperations.cast(root, "jetbrains.mps.lang.generator.structure.TemplateDeclaration"), "parameter", true)) {
          scanControlNode(n);
        }
      } else if (SNodeOperations.isInstanceOf(root, "jetbrains.mps.lang.generator.structure.MappingScript")) {
        scanQueryNode(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(root, "jetbrains.mps.lang.generator.structure.MappingScript"), "codeBlock", true), "body", true));
      } else if (SNodeOperations.isInstanceOf(root, "jetbrains.mps.lang.generator.structure.GeneratorDescriptor")) {
        // internal root 
      } else {
        if (AttributeOperations.getAttribute(root, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.RootTemplateAnnotation"))) != null) {
          scanTemplateNode(root);
        }
      }
    }
    SetSequence.fromSet(myTargetLanguages).removeElement("jetbrains.mps.lang.generator");
    if (myTemplateModel.rootsCount() > 0) {
      SetSequence.fromSet(myQueryLanguages).addElement("jetbrains.mps.lang.generator");
    }
  }

  protected void scanTemplateNode(SNode node) {
    if ((node == null)) {
      return;
    }
    SetSequence.fromSet(myTargetLanguages).addElement(node.getConcept().getLanguage().getPresentation());
    for (SNode n : jetbrains.mps.util.SNodeOperations.getChildren(node)) {
      if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.IfMacro")) {
        if (SLinkOperations.getTarget(SNodeOperations.cast(n, "jetbrains.mps.lang.generator.structure.IfMacro"), "alternativeConsequence", true) != null) {
          scanControlNode(SLinkOperations.getTarget(SNodeOperations.cast(n, "jetbrains.mps.lang.generator.structure.IfMacro"), "alternativeConsequence", true));
        }
        scanQueryNode(SLinkOperations.getTarget(SNodeOperations.cast(n, "jetbrains.mps.lang.generator.structure.IfMacro"), "conditionFunction", true));
      } else if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.NodeMacro") || SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.RootTemplateAnnotation") || SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.PropertyMacro") || SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.ReferenceMacro") || SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.TemplateFragment")) {
        scanQueryNode(n);
      } else {
        scanTemplateNode(n);
      }
    }
  }

  private void scanTemplateContextNode(SNode node) {
    if ((node == null)) {
      return;
    }
    if (AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateFragment"))) != null) {
      scanTemplateNode(node);
      return;
    }
    for (SNode n : jetbrains.mps.util.SNodeOperations.getChildren(node)) {
      scanTemplateContextNode(n);
    }
  }

  private void scanControlNode(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence")) {
      scanTemplateContextNode(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence"), "contentNode", true));
    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence")) {
      scanTemplateNode(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence"), "templateNode", true));
    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule")) {
      // ignore pattern 
      SetSequence.fromSet(myQueryLanguages).addElement("jetbrains.mps.lang.pattern");
      scanControlNode(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule"), "ruleConsequence", true));
      scanQueryNode(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule"), "conditionFunction", true));
    } else {
      if ("jetbrains.mps.lang.generator".equals(node.getConcept().getLanguage().getPresentation())) {
        for (SNode child : jetbrains.mps.util.SNodeOperations.getChildren(node)) {
          scanControlNode(child);
        }
      } else {
        scanQueryNode(node);
      }
    }
  }

  private void scanQueryNode(SNode node) {
    if ((node == null)) {
      return;
    }
    for (SNode n : jetbrains.mps.util.SNodeOperations.getDescendants(node, null, true)) {
      SetSequence.fromSet(myQueryLanguages).addElement(n.getConcept().getLanguage().getPresentation());
    }
  }

  public Set<String> getTargetLanguages() {
    return myTargetLanguages;
  }

  public Set<String> getQueryLanguages() {
    return myQueryLanguages;
  }
}
