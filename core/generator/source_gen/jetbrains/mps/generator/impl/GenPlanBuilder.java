package jetbrains.mps.generator.impl;

/*Generated by MPS */

import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.generator.ModelGenerationPlan;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.runtime.TemplateMappingConfiguration;
import jetbrains.mps.smodel.language.LanguageRuntime;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import jetbrains.mps.smodel.language.GeneratorRuntime;
import jetbrains.mps.generator.runtime.TemplateModule;
import jetbrains.mps.generator.runtime.TemplateModel;
import jetbrains.mps.generator.RigidGenerationPlan;

public class GenPlanBuilder {
  private final LanguageRegistry myLanguageRegistry;

  public GenPlanBuilder(LanguageRegistry languageRegistry) {
    myLanguageRegistry = languageRegistry;
  }

  public ModelGenerationPlan create(SNode plan) {
    List<ModelGenerationPlan.Step> steps = new ArrayList<ModelGenerationPlan.Step>();
    for (SNode stepNode : SLinkOperations.getChildren(plan, MetaAdapterFactory.getContainmentLink(0x7ab1a6fa0a114b95L, 0x9e4875f363d6cb00L, 0x19443180a20717fbL, 0x19443180a2071807L, "steps"))) {
      if (SNodeOperations.isInstanceOf(stepNode, MetaAdapterFactory.getConcept(0x7ab1a6fa0a114b95L, 0x9e4875f363d6cb00L, 0x19443180a2071801L, "jetbrains.mps.lang.generator.plan.structure.Checkpoint"))) {
        steps.add(new ModelGenerationPlan.Checkpoint(SPropertyOperations.getString(SNodeOperations.as(stepNode, MetaAdapterFactory.getConcept(0x7ab1a6fa0a114b95L, 0x9e4875f363d6cb00L, 0x19443180a2071801L, "jetbrains.mps.lang.generator.plan.structure.Checkpoint")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"))));
      } else if (SNodeOperations.isInstanceOf(stepNode, MetaAdapterFactory.getConcept(0x7ab1a6fa0a114b95L, 0x9e4875f363d6cb00L, 0x19443180a2071802L, "jetbrains.mps.lang.generator.plan.structure.Transform"))) {
        SNode trStep = SNodeOperations.as(stepNode, MetaAdapterFactory.getConcept(0x7ab1a6fa0a114b95L, 0x9e4875f363d6cb00L, 0x19443180a2071802L, "jetbrains.mps.lang.generator.plan.structure.Transform"));
        ArrayList<TemplateMappingConfiguration> mc = new ArrayList<TemplateMappingConfiguration>();
        for (SNode lid : SLinkOperations.getChildren(trStep, MetaAdapterFactory.getContainmentLink(0x7ab1a6fa0a114b95L, 0x9e4875f363d6cb00L, 0x19443180a2071802L, 0x28dd6d5a7549fa8dL, "languages"))) {
          LanguageRuntime lr = myLanguageRegistry.getLanguage(((SLanguage) BHReflection.invoke(lid, SMethodTrimmedId.create("getLanguage", null, "34EJa6aIcyj"))));
          if (lr == null) {
            continue;
          }
          for (GeneratorRuntime gr : lr.getGenerators()) {
            if (!(gr instanceof TemplateModule)) {
              continue;
            }
            for (TemplateModel tm : ((TemplateModule) gr).getModels()) {
              mc.addAll(tm.getConfigurations());
            }
          }
        }
        steps.add(new ModelGenerationPlan.Transform(mc));
      }
    }
    return new RigidGenerationPlan(steps);
  }
}
