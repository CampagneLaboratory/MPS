package jetbrains.mps.generator.impl;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.AttributesRolesUtil;

public class RuleUtil {
  public RuleUtil() {
  }

  private static String getMappingLabelName(SNode mappingLabelDeclaration) {
    if (mappingLabelDeclaration == null) {
      return null;
    }
    String result = SPropertyOperations.getString(mappingLabelDeclaration, "name");
    return (result.length() == 0 ?
      null :
      result
    );
  }

  public static String getCreateRootRuleLabel(SNode rule) {
    return getMappingLabelName(SLinkOperations.getTarget(rule, "label", false));
  }

  public static String getTemplateFragmentLabel(SNode templateFragment) {
    return getMappingLabelName(SLinkOperations.getTarget(templateFragment, "labelDeclaration", false));
  }

  public static String getNodeMacroLabel(SNode nodeMacro) {
    return getMappingLabelName(SLinkOperations.getTarget(nodeMacro, "mappingLabel", false));
  }

  public static String getPatternReductionRuleLabel(SNode patternRule) {
    return getMappingLabelName(SLinkOperations.getTarget(patternRule, "labelDeclaration", false));
  }

  public static String getBaseRuleLabel(SNode rule) {
    return getMappingLabelName(SLinkOperations.getTarget(rule, "labelDeclaration", false));
  }

  public static SNode getBaseRuleApplicableConcept(SNode rule) {
    return SLinkOperations.getTarget(rule, "applicableConcept", false);
  }

  public static boolean getBaseRuleApplyToConceptInheritors(SNode rule) {
    return SPropertyOperations.getBoolean(rule, "applyToConceptInheritors");
  }

  public static SNode getBaseRuleCondition(SNode rule) {
    return SLinkOperations.getTarget(rule, "conditionFunction", true);
  }

  public static SNode getCreateRootRuleCondition(SNode rule) {
    return SLinkOperations.getTarget(rule, "conditionFunction", true);
  }

  public static SNode getCreateRootRuleTemplateNode(SNode rule) {
    return SLinkOperations.getTarget(rule, "templateNode", false);
  }

  public static SNode getReductionRuleConsequence(SNode reductionRule) {
    return SLinkOperations.getTarget(reductionRule, "ruleConsequence", true);
  }

  public static SNode getDropRuleCondition(SNode rule) {
    return SLinkOperations.getTarget(rule, "conditionFunction", true);
  }

  public static SNode getDropRuleApplicableConcept(SNode rule) {
    return SLinkOperations.getTarget(rule, "applicableConcept", false);
  }

  public static SNode getRootRuleTemplateNode(SNode rule) {
    return SLinkOperations.getTarget(rule, "template", false);
  }

  public static boolean getRootRuleKeepSourceRoot(SNode rule) {
    return SPropertyOperations.hasValue(rule, "keepSourceRoot", "true", null);
  }

  public static SNode getSwitchModifiedSwitch(SNode switchNode) {
    return SLinkOperations.getTarget(switchNode, "modifiedSwitch", false);
  }

  public static SNode getSwitchDefaultConsequence(SNode switchNode) {
    return SLinkOperations.getTarget(switchNode, "defaultConsequence", true);
  }

  public static SNode getPatternReductionRuleConsequence(SNode reductionRule) {
    return SLinkOperations.getTarget(reductionRule, "ruleConsequence", true);
  }

  public static SNode getMapSrc_PostMapperFunction(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.MapSrcNodeMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.MapSrcNodeMacro"), "postMapperFunction", true);
    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.MapSrcListMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.MapSrcListMacro"), "postMapperFunction", true);
    }
    return null;
  }

  public static SNode getMapSrc_MapperFunction(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.MapSrcNodeMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.MapSrcNodeMacro"), "mapperFunction", true);
    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.MapSrcListMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.MapSrcListMacro"), "mapperFunction", true);
    }
    return null;
  }

  public static SNode getPatternReductionRulePatternNode(SNode reductionRule) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(reductionRule, "pattern", true), "patternNode", true);
  }

  public static String[] getTemplateDeclarationParameterNames(SNode templateDeclaration) {
    List<SNode> params = SLinkOperations.getTargets(templateDeclaration, "parameter", true);
    String[] result = new String[ListSequence.fromList(params).count()];
    for (int i = 0; i < result.length; i++) {
      SNode param = ListSequence.fromList(params).getElement(i);
      if (param == null) {
        return null;
      }
      result[i] = SPropertyOperations.getString(param, "name");
      if (result[i] == null) {
        return null;
      }
    }
    return result;
  }

  public static SNode getIfMacro_ConditionFunction(SNode macro) {
    return SLinkOperations.getTarget(macro, "conditionFunction", true);
  }

  public static SNode getReferenceMacro_GetReferent(SNode macro) {
    return SLinkOperations.getTarget(macro, "referentFunction", true);
  }

  public static SNode getPropertyMacro_ValueFunction(SNode macro) {
    return SLinkOperations.getTarget(macro, "propertyValueFunction", true);
  }

  public static SNode getTemplateFragment_ContextNodeQuery(SNode tf) {
    return SLinkOperations.getTarget(tf, "contextNodeQuery", true);
  }

  public static SNode getTemplateFragmentByAnnotatedNode(SNode node) {
    return SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromAttributeRole("templateFragment"), true);
  }
}
