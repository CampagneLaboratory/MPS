package jetbrains.mps.generator.impl;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public final class RuleUtil {
  public static final String concept_AbstractMacro = "jetbrains.mps.lang.generator.structure.AbstractMacro";
  public static final String concept_ITemplateCall = "jetbrains.mps.lang.generator.structure.ITemplateCall";
  public static final String concept_NodeMacro = "jetbrains.mps.lang.generator.structure.NodeMacro";
  public static final String concept_IfMacro = "jetbrains.mps.lang.generator.structure.IfMacro";
  public static final String concept_SourceSubstituteMacro = "jetbrains.mps.lang.generator.structure.SourceSubstituteMacro";
  public static final String concept_CopySrcNodeMacro = "jetbrains.mps.lang.generator.structure.CopySrcNodeMacro";
  public static final String concept_CopySrcListMacro = "jetbrains.mps.lang.generator.structure.CopySrcListMacro";
  public static final String concept_IncludeMacro = "jetbrains.mps.lang.generator.structure.IncludeMacro";
  public static final String concept_LoopMacro = "jetbrains.mps.lang.generator.structure.LoopMacro";
  public static final String concept_LabelMacro = "jetbrains.mps.lang.generator.structure.LabelMacro";
  public static final String concept_VarMacro = "jetbrains.mps.lang.generator.structure.VarMacro";
  public static final String concept_InsertMacro = "jetbrains.mps.lang.generator.structure.InsertMacro";
  public static final String concept_WeaveMacro = "jetbrains.mps.lang.generator.structure.WeaveMacro";
  public static final String concept_MapSrcNodeMacro = "jetbrains.mps.lang.generator.structure.MapSrcNodeMacro";
  public static final String concept_MapSrcListMacro = "jetbrains.mps.lang.generator.structure.MapSrcListMacro";
  public static final String concept_SwitchMacro = "jetbrains.mps.lang.generator.structure.SwitchMacro";
  public static final String concept_TemplateCallMacro = "jetbrains.mps.lang.generator.structure.TemplateCallMacro";
  public static final String concept_PropertyMacro = "jetbrains.mps.lang.generator.structure.PropertyMacro";
  public static final String concept_ReferenceMacro = "jetbrains.mps.lang.generator.structure.ReferenceMacro";
  public static final String concept_TraceMacro = "jetbrains.mps.lang.generator.structure.TraceMacro";
  public static final String concept_BaseMappingRule = "jetbrains.mps.lang.generator.structure.BaseMappingRule";
  public static final String concept_Reduction_MappingRule = "jetbrains.mps.lang.generator.structure.Reduction_MappingRule";
  public static final String concept_Root_MappingRule = "jetbrains.mps.lang.generator.structure.Root_MappingRule";
  public static final String concept_Weaving_MappingRule = "jetbrains.mps.lang.generator.structure.Weaving_MappingRule";
  public static final String concept_TemplateSwitch = "jetbrains.mps.lang.generator.structure.TemplateSwitch";
  public static final String concept_PatternReduction_MappingRule = "jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule";
  public static final String concept_CreateRootRule = "jetbrains.mps.lang.generator.structure.CreateRootRule";
  public static final String concept_DropRootRule = "jetbrains.mps.lang.generator.structure.DropRootRule";
  public static final String concept_MappingScriptReference = "jetbrains.mps.lang.generator.structure.MappingScriptReference";
  public static final String concept_TemplateDeclarationReference = "jetbrains.mps.lang.generator.structure.TemplateDeclarationReference";
  public static final String concept_TemplateDeclaration = "jetbrains.mps.lang.generator.structure.TemplateDeclaration";
  public static final String concept_WeaveEach_RuleConsequence = "jetbrains.mps.lang.generator.structure.WeaveEach_RuleConsequence";
  public static final String concept_MappingConfiguration = "jetbrains.mps.lang.generator.structure.MappingConfiguration";
  public static final String concept_TemplateArgumentPatternRef = "jetbrains.mps.lang.generator.structure.TemplateArgumentPatternRef";
  public static final String concept_TemplateArgumentQueryExpression = "jetbrains.mps.lang.generator.structure.TemplateArgumentQueryExpression";
  public static final String concept_TemplateArgumentParameterExpression = "jetbrains.mps.lang.generator.structure.TemplateArgumentParameterExpression";
  public static final String concept_TemplateArgumentVarRefExpression = "jetbrains.mps.lang.generator.structure.TemplateArgumentVariableRefExpression";
  public static final String concept_TemplateSwitchMacro = "jetbrains.mps.lang.generator.structure.TemplateSwitchMacro";
  public static final String concept_TemplateQueryBase = "jetbrains.mps.lang.generator.structure.TemplateQueryBase";
  public static final String concept_TemplateFragment = "jetbrains.mps.lang.generator.structure.TemplateFragment";
  public static final String concept_RootTemplateAnnotation = "jetbrains.mps.lang.generator.structure.RootTemplateAnnotation";
  public static final String concept_InlineTemplate_RuleConsequence = "jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence";
  public static final String concept_MappingScript = "jetbrains.mps.lang.generator.structure.MappingScript";
  public static final String link_MappingConfiguration_preMappingScript = "preMappingScript";
  public static final String link_TemplateSwitch_modifiedSwitch = "modifiedSwitch";
  public static final String link_BaseConcept_attrs_name = "smodelAttribute";
  public static final SContainmentLink link_BaseConcept_attrs = MetaAdapterFactory.getContainmentLink(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x47bf8397520e5942L, "smodelAttribute");
  public static final String concept_ExportMacro = "jetbrains.mps.lang.generator.structure.ExportMacro";

  public static final String concept_AbstractConceptDeclaration = "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration";
  public static final String concept_ConceptDeclaration = "jetbrains.mps.lang.structure.structure.ConceptDeclaration";

  private static final String concept_ModelNewNodeOp = "jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation";
  private static final String concept_ModelNewRootOp = "jetbrains.mps.lang.smodel.structure.Model_CreateNewRootNodeOperation";
  private static final String concept_InsertNewNextOp = "jetbrains.mps.lang.smodel.structure.Node_InsertNewNextSiblingOperation";
  private static final String concept_InsertNextOp = "jetbrains.mps.lang.smodel.structure.Node_InsertNextSiblingOperation";
  private static final String concept_InsertNewPrevOp = "jetbrains.mps.lang.smodel.structure.Node_InsertNewPrevSiblingOperation";
  private static final String concept_InsertPrevOp = "jetbrains.mps.lang.smodel.structure.Node_InsertPrevSiblingOperation";
  private static final String concept_ReplaceNewOp = "jetbrains.mps.lang.smodel.structure.Node_ReplaceWithAnotherOperation";
  private static final String concept_ReplaceOp = "jetbrains.mps.lang.smodel.structure.Node_ReplaceWithNewOperation";

  /**
   * Alternative to isInstanceOf check in isNodeMacro: supported node macros are known at generation time,
   * no reason to perform dynamic check where static check is possible.
   * Plain NodeMacro, although abstract, is included as there were usages of abstract $$ macro to add a label
   */
  private static final Set<String> NodeMacroConcepts = SetSequence.fromSet(new HashSet<String>());
  static {
    NodeMacroConcepts.add(concept_IfMacro);
    NodeMacroConcepts.add(concept_InsertMacro);
    NodeMacroConcepts.add(concept_LabelMacro);
    NodeMacroConcepts.add(concept_CopySrcListMacro);
    NodeMacroConcepts.add(concept_CopySrcNodeMacro);
    NodeMacroConcepts.add(concept_IncludeMacro);
    NodeMacroConcepts.add(concept_LoopMacro);
    NodeMacroConcepts.add(concept_MapSrcListMacro);
    NodeMacroConcepts.add(concept_MapSrcNodeMacro);
    NodeMacroConcepts.add(concept_SwitchMacro);
    NodeMacroConcepts.add(concept_TemplateCallMacro);
    NodeMacroConcepts.add(concept_TemplateSwitchMacro);
    NodeMacroConcepts.add(concept_TraceMacro);
    NodeMacroConcepts.add(concept_VarMacro);
    NodeMacroConcepts.add(concept_WeaveMacro);
    NodeMacroConcepts.add(concept_NodeMacro);
    NodeMacroConcepts.add(concept_ExportMacro);
  }
  /**
   * Set of operations that might alter model (insertion of new nodes, replacement)
   */
  private static final Set<String> ModelChangeOperations = SetSequence.fromSet(new HashSet<String>());
  {
    ModelChangeOperations.add(concept_AbstractConceptDeclaration);
    ModelChangeOperations.add(concept_ModelNewRootOp);
    ModelChangeOperations.add(concept_InsertNewNextOp);
    ModelChangeOperations.add(concept_InsertNewPrevOp);
    ModelChangeOperations.add(concept_InsertNextOp);
    ModelChangeOperations.add(concept_InsertPrevOp);
    ModelChangeOperations.add(concept_ReplaceNewOp);
    ModelChangeOperations.add(concept_ReplaceOp);
  }
  public static boolean isNodeMacro(SNode n) {
    return isNodeMacro(n.getConcept().getQualifiedName());
  }
  public static boolean isNodeMacro(String conceptQualifiedName) {
    return NodeMacroConcepts.contains(conceptQualifiedName);
  }
  private static String getMappingLabelName(SNode mappingLabelDeclaration) {
    if (mappingLabelDeclaration == null) {
      return null;
    }
    String result = SPropertyOperations.getString(mappingLabelDeclaration, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
    return (result.length() == 0 ? null : result);
  }
  public static String getCreateRootRuleLabel(SNode rule) {
    return getMappingLabelName(SLinkOperations.getTarget(rule, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fbbd5854aL, 0x1179c9e8cacL, "label")));
  }
  public static String getTemplateFragmentLabel(SNode templateFragment) {
    return getMappingLabelName(SLinkOperations.getTarget(templateFragment, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff1b29b76cL, 0x1179c366b2fL, "labelDeclaration")));
  }
  public static String getNodeMacroLabel(SNode nodeMacro) {
    return getMappingLabelName(SLinkOperations.getTarget(nodeMacro, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfd47ed6742L, 0x1179bf24befL, "mappingLabel")));
  }
  public static String getPatternReductionRuleLabel(SNode patternRule) {
    return getMappingLabelName(SLinkOperations.getTarget(patternRule, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x190d31fe6a12ebb4L, 0x190d31fe6a12ebbaL, "labelDeclaration")));
  }
  public static String getBaseRuleLabel(SNode rule) {
    return getMappingLabelName(SLinkOperations.getTarget(rule, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fc0b64647L, 0x1179c430cc8L, "labelDeclaration")));
  }
  public static SNode getBaseRuleApplicableConcept(SNode rule) {
    return SLinkOperations.getTarget(rule, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fc0b64647L, 0x10fc0b6e730L, "applicableConcept"));
  }
  public static boolean getBaseRuleApplyToConceptInheritors(SNode rule) {
    return SPropertyOperations.getBoolean(rule, MetaAdapterFactory.getProperty(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fc0b64647L, 0x10fc6d8f674L, "applyToConceptInheritors"));
  }
  public static SNode getBaseRuleCondition(SNode rule) {
    return SLinkOperations.getTarget(rule, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fc0b64647L, 0x10fc0b719bdL, "conditionFunction"));
  }
  public static SNode getCreateRootRuleCondition(SNode rule) {
    return SLinkOperations.getTarget(rule, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fbbd5854aL, 0x10fbbd5854cL, "conditionFunction"));
  }
  public static SNode getCreateRootRuleTemplateNode(SNode rule) {
    return SLinkOperations.getTarget(rule, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fbbd5854aL, 0x10fbbd5854dL, "templateNode"));
  }
  public static SNode getReductionRuleConsequence(SNode reductionRule) {
    return SLinkOperations.getTarget(reductionRule, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fca296532L, 0x11055ee07edL, "ruleConsequence"));
  }
  public static SNode getDropRuleCondition(SNode rule) {
    return SLinkOperations.getTarget(rule, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11c0acf58efL, 0x11c0ad314d7L, "conditionFunction"));
  }
  public static SNode getDropRuleApplicableConcept(SNode rule) {
    return SLinkOperations.getTarget(rule, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11c0acf58efL, 0x11c0ad36598L, "applicableConcept"));
  }
  public static SNode getRootRuleTemplateNode(SNode rule) {
    return SLinkOperations.getTarget(rule, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fd54746dbL, 0x10fd54746ddL, "template"));
  }
  public static boolean getRootRuleKeepSourceRoot(SNode rule) {
    return SPropertyOperations.hasValue(rule, MetaAdapterFactory.getProperty(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fd54746dbL, 0x11243d5018aL, "keepSourceRoot"), "true", null);
  }
  public static SNode getSwitchModifiedSwitch(SNode switchNode) {
    return SLinkOperations.getTarget(switchNode, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313ed7688L, 0x1031947e414L, "modifiedSwitch"));
  }
  public static SNode getSwitchDefaultConsequence(SNode switchNode) {
    return SLinkOperations.getTarget(switchNode, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313ed7688L, 0x11013877b73L, "defaultConsequence"));
  }
  public static SNode getSwitch_NullInputMessage(SNode switch_) {
    return SLinkOperations.getTarget(switch_, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313ed7688L, 0x11d88828be1L, "nullInputMessage"));
  }
  public static SNode getPatternReductionRuleConsequence(SNode reductionRule) {
    return SLinkOperations.getTarget(reductionRule, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x190d31fe6a12ebb4L, 0x190d31fe6a12ebb8L, "ruleConsequence"));
  }
  public static SNode getMapSrc_PostMapperFunction(SNode node) {
    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, "jetbrains.mps.lang.generator.structure.MapSrcNodeMacro"))) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, "jetbrains.mps.lang.generator.structure.MapSrcNodeMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, 0x11d455be680L, "postMapperFunction"));
    } else if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x107ce4fbf98L, "jetbrains.mps.lang.generator.structure.MapSrcListMacro"))) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x107ce4fbf98L, "jetbrains.mps.lang.generator.structure.MapSrcListMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x107ce4fbf98L, 0x11d4561610fL, "postMapperFunction"));
    }
    return null;
  }
  public static SNode getMapSrc_MapperFunction(SNode node) {
    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, "jetbrains.mps.lang.generator.structure.MapSrcNodeMacro"))) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, "jetbrains.mps.lang.generator.structure.MapSrcNodeMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, 0x11094b2b653L, "mapperFunction"));
    } else if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x107ce4fbf98L, "jetbrains.mps.lang.generator.structure.MapSrcListMacro"))) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x107ce4fbf98L, "jetbrains.mps.lang.generator.structure.MapSrcListMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x107ce4fbf98L, 0x1109d5f7af9L, "mapperFunction"));
    }
    return null;
  }
  public static SNode getPatternReductionRulePatternNode(SNode reductionRule) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(reductionRule, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x190d31fe6a12ebb4L, 0x190d31fe6a13891aL, "pattern")), MetaAdapterFactory.getContainmentLink(0xd4615e3bd6714ba9L, 0xaf012b78369b0ba7L, 0x108a9cb4791L, 0x108a9cb4792L, "patternNode"));
  }
  public static String[] getTemplateDeclarationParameterNames(SNode template) {
    List<SNode> params = SLinkOperations.getChildren(template, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xda3dc6e5137e9b1L, 0xda3dc6e5137ea56L, "parameter"));
    String[] result = new String[ListSequence.fromList(params).count()];
    for (int i = 0; i < result.length; i++) {
      SNode param = ListSequence.fromList(params).getElement(i);
      if (param == null) {
        return null;
      }
      result[i] = SPropertyOperations.getString(param, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
      if (result[i] == null) {
        return null;
      }
    }
    return result;
  }
  public static SNode getIfMacro_ConditionFunction(SNode macro) {
    return SLinkOperations.getTarget(macro, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1047c1472deL, 0x10feeff8ac3L, "conditionFunction"));
  }
  public static SNode getIfMacro_AlternativeConsequence(SNode macro) {
    return SLinkOperations.getTarget(macro, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1047c1472deL, 0x1163aea5803L, "alternativeConsequence"));
  }
  public static SNode getReferenceMacro_GetReferent(SNode macro) {
    return SLinkOperations.getTarget(macro, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfd7f44d616L, 0x10fe489d9feL, "referentFunction"));
  }
  public static SNode getPropertyMacro_ValueFunction(SNode macro) {
    return SLinkOperations.getTarget(macro, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfd47e9f6f0L, 0x10fe3b4023fL, "propertyValueFunction"));
  }
  public static SNode getTemplateFragment_ContextNodeQuery(SNode tf) {
    return SLinkOperations.getTarget(tf, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff1b29b76cL, 0x113c239350bL, "contextNodeQuery"));
  }
  public static SNode getMappingScriptReference_Script(SNode ref) {
    return SLinkOperations.getTarget(ref, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x116597b27aaL, 0x116597b663aL, "mappingScript"));
  }
  public static SNode getSwitchMacro_TemplateSwitch(SNode macro) {
    return SLinkOperations.getTarget(macro, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313f84dd6L, 0x10313f93662L, "templateSwitch"));
  }
  public static SNode getTemplateSwitchMacro_TemplateSwitch(SNode macro) {
    return SNodeOperations.cast(SLinkOperations.getTarget(macro, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x17e941d108ce3120L, 0x17e941d108ce3173L, "template")), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313ed7688L, "jetbrains.mps.lang.generator.structure.TemplateSwitch"));
  }
  public static SNode getIncludeMacro_Template(SNode macro) {
    return SLinkOperations.getTarget(macro, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11621ab7715L, 0x11621b434a7L, "includeTemplate"));
  }
  public static SNode getCallMacro_Template(SNode macro) {
    return SNodeOperations.cast(SLinkOperations.getTarget(macro, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x17e941d108ce3120L, 0x17e941d108ce3173L, "template")), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfe43cb41d0L, "jetbrains.mps.lang.generator.structure.TemplateDeclaration"));
  }
  public static SNode getWeaving_ContextNodeQuery(SNode rule) {
    return SLinkOperations.getTarget(rule, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fc0d8c573L, 0x113d0a12fc5L, "contextNodeQuery"));
  }
  public static SNode getWeaving_Consequence(SNode rule) {
    return SLinkOperations.getTarget(rule, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fc0d8c573L, 0x1104fd38a1cL, "ruleConsequence"));
  }
  public static SNode getTemplateFragmentByAnnotatedNode(SNode node) {
    return AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.generator.structure.TemplateFragment"));
  }
  public static SNode getTemplateDeclarationReference_Template(SNode ref) {
    return SNodeOperations.cast(SLinkOperations.getTarget(ref, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x17e941d108ce3120L, 0x17e941d108ce3173L, "template")), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfe43cb41d0L, "jetbrains.mps.lang.generator.structure.TemplateDeclaration"));
  }
  public static SNode getInlineTemplate_templateNode(SNode ruleConsequence) {
    return SLinkOperations.getTarget(ruleConsequence, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x112103dd1e8L, 0x112103ebf76L, "templateNode"));
  }
  public static SNode getInlineTemplateWithContext_contentNode(SNode ruleConsequence) {
    return SLinkOperations.getTarget(ruleConsequence, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x7b85dded0be53d6cL, 0x7b85dded0be53d6fL, "contentNode"));
  }
  public static List<SNode> getInlineSwitch_case(SNode ruleConsequence) {
    return SLinkOperations.getChildren(ruleConsequence, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11644fa2edeL, 0x11644fe0e06L, "case"));
  }
  public static SNode getInlineSwitch_caseCondition(SNode inlineSwitchCase) {
    return SLinkOperations.getTarget(inlineSwitchCase, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11644fdbf49L, 0x11645011ba5L, "conditionFunction"));
  }
  public static SNode getInlineSwitch_caseConsequence(SNode inlineSwitchCase) {
    return SLinkOperations.getTarget(inlineSwitchCase, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11644fdbf49L, 0x11645018abcL, "caseConsequence"));
  }
  public static SNode getInlineSwitch_defaultConsequence(SNode ruleConsequence) {
    return SLinkOperations.getTarget(ruleConsequence, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11644fa2edeL, 0x11644fb7f64L, "defaultConsequence"));
  }
  public static SNode getWeaveEach_Template(SNode weaveEach) {
    return SLinkOperations.getTarget(weaveEach, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1104fcac3b1L, 0x1104fcbaec2L, "template"));
  }
  public static SNode getWeaveEach_SourceNodesQuery(SNode weaveEach) {
    return SLinkOperations.getTarget(weaveEach, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1104fcac3b1L, 0x1104fccff43L, "sourceNodesQuery"));
  }
  public static boolean getMappingConfiguration_TopPrio(SNode mapping) {
    return SPropertyOperations.getBoolean(mapping, MetaAdapterFactory.getProperty(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff0bea0475L, 0x113e48b50faL, "topPriorityGroup"));
  }
  public static SNode getTemplateDeclaration_ContentNode(SNode decl) {
    return SLinkOperations.getTarget(decl, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfe43cb41d0L, 0xfe43de823bL, "contentNode"));
  }
  public static SNode getSourceNodesQuery(SNode node) {
    if (node == null) {
      return null;
    }
    String conceptFqName = node.getConcept().getQualifiedName();
    if (conceptFqName.equals("jetbrains.mps.lang.generator.structure.LoopMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1047ce009c3L, "jetbrains.mps.lang.generator.structure.LoopMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1047ce009c3L, 0x10fef5e42d7L, "sourceNodesQuery"));
    } else if (conceptFqName.equals("jetbrains.mps.lang.generator.structure.CopySrcListMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1038b0c2cc7L, "jetbrains.mps.lang.generator.structure.CopySrcListMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1038b0c2cc7L, 0x11002d48f34L, "sourceNodesQuery"));
    } else if (conceptFqName.equals("jetbrains.mps.lang.generator.structure.MapSrcListMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x107ce4fbf98L, "jetbrains.mps.lang.generator.structure.MapSrcListMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x107ce4fbf98L, 0x11003977640L, "sourceNodesQuery"));
    } else if (conceptFqName.equals("jetbrains.mps.lang.generator.structure.WeaveMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x300c02df884235d3L, "jetbrains.mps.lang.generator.structure.WeaveMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x300c02df884235d3L, 0x300c02df884261ebL, "nodesToWeaveQuery"));
    }
    return null;
  }
  public static SNode getWeaveMacro_Consequence(SNode weaveMacro) {
    return SLinkOperations.getTarget(weaveMacro, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x300c02df884235d3L, 0x300c02df884261edL, "ruleConsequence"));
  }
  public static SNode getSourceNodeQuery(SNode node) {
    if (node == null) {
      return null;
    }
    String conceptFqName = node.getConcept().getQualifiedName();
    if (conceptFqName.equals("jetbrains.mps.lang.generator.structure.CopySrcNodeMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10389b50fefL, "jetbrains.mps.lang.generator.structure.CopySrcNodeMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10389b50fefL, 0x10ff3aea96eL, "sourceNodeQuery"));
    } else if (conceptFqName.equals("jetbrains.mps.lang.generator.structure.MapSrcNodeMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, "jetbrains.mps.lang.generator.structure.MapSrcNodeMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, 0x11003064fa9L, "sourceNodeQuery"));
    } else if (conceptFqName.equals("jetbrains.mps.lang.generator.structure.SwitchMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313f84dd6L, "jetbrains.mps.lang.generator.structure.SwitchMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313f84dd6L, 0x11008e5fed8L, "sourceNodeQuery"));
    } else if (conceptFqName.equals("jetbrains.mps.lang.generator.structure.IncludeMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11621ab7715L, "jetbrains.mps.lang.generator.structure.IncludeMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11621ab7715L, 0x11621abebb5L, "sourceNodeQuery"));
    } else if (conceptFqName.equals("jetbrains.mps.lang.generator.structure.TemplateCallMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x14f7f8a311b8f14fL, "jetbrains.mps.lang.generator.structure.TemplateCallMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x14f7f8a311b8f14fL, 0x14f7f8a311b93f35L, "sourceNodeQuery"));
    } else if (conceptFqName.equals("jetbrains.mps.lang.generator.structure.TraceMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x2b456582595e739bL, "jetbrains.mps.lang.generator.structure.TraceMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x2b456582595e739bL, 0x2b456582595e73d1L, "sourceNodeQuery"));
    } else if (conceptFqName.equals("jetbrains.mps.lang.generator.structure.TemplateSwitchMacro")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xda3dc6e51747593L, "jetbrains.mps.lang.generator.structure.TemplateSwitchMacro")), MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xda3dc6e51747593L, 0xda3dc6e5174759eL, "sourceNodeQuery"));
    }
    return null;
  }
  public static List<SNode> getTemplateCall_Arguments(SNode macro) {
    return SLinkOperations.getChildren(macro, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x17e941d108ce3120L, 0x17e941d108ce3125L, "actualArgument"));

  }
  public static SNode getTemplateCall_Template(SNode macro) {
    return SLinkOperations.getTarget(macro, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x17e941d108ce3120L, 0x17e941d108ce3173L, "template"));
  }
  public static Object evaluateBaseLanguageExpression(SNode expr) {
    if (SNodeOperations.isInstanceOf(expr, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b201L, "jetbrains.mps.baseLanguage.structure.BooleanConstant"))) {
      return SPropertyOperations.getBoolean(SNodeOperations.cast(expr, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b201L, "jetbrains.mps.baseLanguage.structure.BooleanConstant")), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b201L, 0xf8cc56b202L, "value"));
    } else if (SNodeOperations.isInstanceOf(expr, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, "jetbrains.mps.baseLanguage.structure.IntegerConstant"))) {
      return SPropertyOperations.getInteger(SNodeOperations.cast(expr, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, "jetbrains.mps.baseLanguage.structure.IntegerConstant")), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"));
    } else if (SNodeOperations.isInstanceOf(expr, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, "jetbrains.mps.baseLanguage.structure.StringLiteral"))) {
      return SPropertyOperations.getString(SNodeOperations.cast(expr, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, "jetbrains.mps.baseLanguage.structure.StringLiteral")), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"));
    } else if (SNodeOperations.isInstanceOf(expr, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940cd6167L, "jetbrains.mps.baseLanguage.structure.NullLiteral"))) {
      return null;
    }
    throw new IllegalArgumentException();
  }
  public static SNode getTemplateArgumentQueryExpression_Query(SNode expr) {
    return SLinkOperations.getTarget(expr, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x380132d742e8ccb0L, 0x380132d742e94e82L, "query"));
  }
  public static SNode getTemplateArgumentParameterExpression_Parameter(SNode expr) {
    return SLinkOperations.getTarget(expr, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x457655815a794e79L, 0x457655815a794e7aL, "parameter"));
  }
  public static SNode getTemplateArgumentVarRef_VarMacro(SNode expr) {
    return SLinkOperations.getTarget(expr, MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x3d6f2506d88aa028L, 0x25c655ce6e80fddaL, "varmacro"));
  }
  public static boolean getMappingScript_IsPreProcess(SNode script) {
    return SPropertyOperations.hasValue(script, MetaAdapterFactory.getProperty(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1165958fcd6L, 0x1165f0cf1aaL, "scriptKind"), "pre_processing", "post_processing");
  }
  public static boolean getMappingScript_ModifiesModel(SNode script) {
    return SPropertyOperations.getBoolean(script, MetaAdapterFactory.getProperty(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1165958fcd6L, 0x1165f0d3f2fL, "modifiesModel"));
  }
  public static SNode getMappingScript_CodeBlock(SNode script) {
    return SLinkOperations.getTarget(script, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1165958fcd6L, 0x116596b2f70L, "codeBlock"));
  }
  public static SNode getInsertMacro_Query(SNode macro) {
    return SLinkOperations.getTarget(macro, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1231e32ff7a958ceL, 0x1231e32ff7a9efcdL, "createNodeQuery"));
  }
  public static SNode getMappingConfiguration_IsApplicable(SNode mapping) {
    return SLinkOperations.getTarget(mapping, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff0bea0475L, 0x6cab949e66d5b3bbL, "condition"));
  }
  public static String getVarMacro_Name(SNode macro) {
    return BehaviorReflection.invokeNonVirtual(String.class, macro, "jetbrains.mps.lang.generator.structure.VarMacro", "call_getName_2721957369897649366", new Object[]{});
  }
  public static SNode getVarMacro_Query(SNode macro) {
    return SLinkOperations.getTarget(macro, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x45991daad6a3d34eL, 0x45991daad6a644d4L, "value"));
  }
  public static SNode getDismissTopRule_message(SNode dismissTopRuleConsequence) {
    return SLinkOperations.getTarget(dismissTopRuleConsequence, MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11013931abdL, 0x11055b6dd7bL, "generatorMessage"));
  }
  public static Iterable<String> getModelChangeOperations() {
    return ModelChangeOperations;
  }
}
