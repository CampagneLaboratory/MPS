package jetbrains.mps.generator.info;

/*Generated by MPS */

import jetbrains.mps.components.CoreComponent;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.generator.impl.dependencies.GenerationDependenciesCache;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.generator.impl.dependencies.GenerationDependencies;
import jetbrains.mps.generator.impl.dependencies.GenerationRootDependencies;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;

public class GeneratedFilesInfoComponent implements CoreComponent {
  private static Logger LOG = Logger.getLogger(GeneratedFilesInfoComponent.class);
  private static GeneratedFilesInfoComponent INSTANCE;

  public GeneratedFilesInfoComponent() {
  }

  public void init() {
    if (INSTANCE != null) {
      throw new IllegalStateException("double initialization");
    }
    INSTANCE = this;
  }

  public void dispose() {
    INSTANCE = null;
  }

  public GeneratedFilesInfo lookupCacheInfo(String cachesOuputPath) {
    String redir = GenerationDependenciesCache.getInstance().findCachesPathRedirect(cachesOuputPath);
    IFile generatedCache = FileSystem.getInstance().getFileByPath((redir != null ?
      redir :
      cachesOuputPath
    )).getDescendant("generated");
    GenerationDependencies gd = GenerationDependenciesCache.getInstance().lookup(generatedCache);
    return (gd != null ?
      new GeneratedFilesInfoComponent.MyGeneratedCacheInfo(gd) :
      null
    );
  }

  public static GeneratedFilesInfoComponent getInstance() {
    return INSTANCE;
  }

  public class MyGeneratedCacheInfo implements GeneratedFilesInfo {
    private GenerationDependencies myDependencies;

    public MyGeneratedCacheInfo(GenerationDependencies gd) {
      this.myDependencies = gd;
    }

    public Iterable<String> listGenerated(IFile dir) {
      Iterable<GenerationRootDependencies> rootDependencies = myDependencies.getRootDependencies();
      return Sequence.fromIterable(rootDependencies).translate(new ITranslator2<GenerationRootDependencies, String>() {
        public Iterable<String> translate(GenerationRootDependencies it) {
          return it.getFiles();
        }
      });
    }
  }
}
