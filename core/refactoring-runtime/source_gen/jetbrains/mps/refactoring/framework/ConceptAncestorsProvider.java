package jetbrains.mps.refactoring.framework;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.smodel.SNode;
import java.util.HashSet;
import jetbrains.mps.lang.structure.structure.ConceptDeclaration;
import jetbrains.mps.lang.structure.structure.InterfaceConceptReference;
import jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration;

public class ConceptAncestorsProvider implements IDescendantsProvider {
  public ConceptAncestorsProvider() {
  }

  public Set<SNode> getDescendants(SNode nodeAdapter) {
    Set<SNode> result = new HashSet<SNode>();
    if (nodeAdapter.getAdapter() instanceof ConceptDeclaration) {
      ConceptDeclaration conceptDeclaration = (ConceptDeclaration) nodeAdapter.getAdapter();
      ConceptDeclaration parent = conceptDeclaration.getExtends();
      if (parent != null) {
        result.add(parent.getNode());
      }
      for (InterfaceConceptReference interfaceConceptReference : conceptDeclaration.getImplementses()) {
        result.add(interfaceConceptReference.getIntfc().getNode());
      }
    }
    if (nodeAdapter.getAdapter() instanceof InterfaceConceptDeclaration) {
      InterfaceConceptDeclaration interfaceConceptDeclaration = (InterfaceConceptDeclaration) nodeAdapter.getAdapter();
      for (InterfaceConceptReference interfaceConceptReference : interfaceConceptDeclaration.getExtendses()) {
        result.add(interfaceConceptReference.getIntfc().getNode());
      }
    }
    return result;
  }
}
