package jetbrains.mps.make.facets;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx2;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.smodel.resources.TResource;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import java.util.Set;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.project.SModuleOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.make.MPSCompilationResult;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.make.ModuleMaker;
import jetbrains.mps.messages.IMessage;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.MPSCore;
import jetbrains.mps.internal.make.runtime.java.IdeaJavaCompiler;
import jetbrains.mps.project.Project;
import jetbrains.mps.smodel.resources.FResource;
import jetbrains.mps.compiler.JavaCompiler;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.compiler.CompilationResultAdapter;
import org.eclipse.jdt.internal.compiler.CompilationResult;
import org.eclipse.jdt.core.compiler.CategorizedProblem;
import jetbrains.mps.reloading.CompositeClassPathItem;
import jetbrains.mps.project.facets.JavaModuleOperations;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.compiler.IClassesData;
import jetbrains.mps.smodel.resources.CResource;
import java.util.Map;
import jetbrains.mps.make.script.IPropertiesPool;

public class JavaCompile_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("jetbrains.mps.make.facets.JavaCompile");

  public JavaCompile_Facet() {
    ListSequence.fromList(targets).addElement(new JavaCompile_Facet.Target_compile());
    ListSequence.fromList(targets).addElement(new JavaCompile_Facet.Target_auxCompile());
    ListSequence.fromList(targets).addElement(new JavaCompile_Facet.Target_compileToMemory());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.resources.Binaries")});
  }

  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("jetbrains.mps.make.facets.Make")});
  }

  public Iterable<IFacet.Name> extended() {
    return null;
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public IPropertiesPersistence propertiesPersistence() {
    return new JavaCompile_Facet.TargetProperties();
  }

  public static class Target_compile implements ITargetEx2 {
    private static Class<? extends IResource>[] EXPECTED_INPUT = (Class<? extends IResource>[]) new Class[]{TResource.class};
    private static Class<? extends IResource>[] EXPECTED_OUTPUT = (Class<? extends IResource>[]) new Class[]{};
    private ITarget.Name name = new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compile");

    public Target_compile() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_wf1ya0_a0a = null;
          final Iterable<TResource> input = (Iterable<TResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              if (Boolean.TRUE.equals(pa.global().properties(Target_compile.this.getName(), JavaCompile_Facet.Target_compile.Parameters.class).skipCompilation())) {
                _output_wf1ya0_a0a = Sequence.fromIterable(_output_wf1ya0_a0a).concat(Sequence.fromIterable(input));
                return new IResult.SUCCESS(_output_wf1ya0_a0a);
              }
              pa.global().properties(Target_compile.this.getName(), JavaCompile_Facet.Target_compile.Parameters.class).compiledAnything(false);
              final Set<SModule> toCompile = SetSequence.fromSetWithValues(new HashSet<SModule>(), Sequence.fromIterable(input).select(new ISelector<TResource, SModule>() {
                public SModule select(TResource it) {
                  return it.module();
                }
              }).where(new IWhereFilter<SModule>() {
                public boolean accept(SModule it) {
                  return SModuleOperations.isCompileInMps(it);
                }
              }).distinct());
              if ((int) SetSequence.fromSet(toCompile).count() == 0) {
                return new IResult.SUCCESS(_output_wf1ya0_a0a);
              }
              final Wrappers._T<MPSCompilationResult> cr = new Wrappers._T<MPSCompilationResult>();
              ModelAccess.instance().runReadAction(new Runnable() {
                public void run() {
                  cr.value = new ModuleMaker().make(toCompile, progressMonitor);
                }
              });
              if (cr.value != null) {
                pa.global().properties(Target_compile.this.getName(), JavaCompile_Facet.Target_compile.Parameters.class).compiledAnything(pa.global().properties(Target_compile.this.getName(), JavaCompile_Facet.Target_compile.Parameters.class).compiledAnything() || cr.value.isCompiledAnything());
                for (IMessage msg : cr.value.getMessages()) {
                  monitor.reportFeedback(new IFeedback.MESSAGE(msg));
                }
              }
              if (cr.value == null || !(cr.value.isOk())) {
                if (cr.value != null) {
                  if (cr.value.getErrors() > 0) {
                    monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(cr.value)));
                  } else if (cr.value.getWarnings() > 0) {
                    monitor.reportFeedback(new IFeedback.WARNING(String.valueOf(cr.value)));
                  } else {
                    monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf(cr.value)));
                  }
                }
                return new IResult.FAILURE(_output_wf1ya0_a0a);
              }

              for (TResource tres : Sequence.fromIterable(input)) {
                if (tres.module() == null) {
                  return new IResult.FAILURE(_output_wf1ya0_a0a);
                }
                if (cr.value.getChangedModules().contains(tres.module())) {
                  _output_wf1ya0_a0a = Sequence.fromIterable(_output_wf1ya0_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(tres)));
                }
              }
            default:
              return new IResult.SUCCESS(_output_wf1ya0_a0a);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen"), new ITarget.Name("jetbrains.mps.lang.resources.Binaries.copyBinaries")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.make.facets.Make.make")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean isOptional() {
      return false;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return true;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      return Sequence.fromArray(EXPECTED_INPUT);
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._2) t).assign((Tuples._2) copyFrom);
      }
      return t;
    }

    public int workEstimate() {
      return 300;
    }

    public static class Parameters extends MultiTuple._2<Boolean, Boolean> {
      public Parameters() {
        super();
      }

      public Parameters(Boolean compiledAnything, Boolean skipCompilation) {
        super(compiledAnything, skipCompilation);
      }

      public Boolean compiledAnything(Boolean value) {
        return super._0(value);
      }

      public Boolean skipCompilation(Boolean value) {
        return super._1(value);
      }

      public Boolean compiledAnything() {
        return super._0();
      }

      public Boolean skipCompilation() {
        return super._1();
      }

      @SuppressWarnings(value = "unchecked")
      public JavaCompile_Facet.Target_compile.Parameters assignFrom(Tuples._2<Boolean, Boolean> from) {
        return (JavaCompile_Facet.Target_compile.Parameters) super.assign(from);
      }
    }
  }

  public static class Target_auxCompile implements ITargetEx2 {
    private static Class<? extends IResource>[] EXPECTED_INPUT = (Class<? extends IResource>[]) new Class[]{TResource.class};
    private static Class<? extends IResource>[] EXPECTED_OUTPUT = (Class<? extends IResource>[]) new Class[]{};
    private ITarget.Name name = new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.auxCompile");

    public Target_auxCompile() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_wf1ya0_a0b = null;
          final Iterable<TResource> input = (Iterable<TResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              if (Boolean.TRUE.equals(pa.global().properties(new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compile"), JavaCompile_Facet.Target_compile.Parameters.class).skipCompilation())) {
                _output_wf1ya0_a0b = Sequence.fromIterable(_output_wf1ya0_a0b).concat(Sequence.fromIterable(input));
                return new IResult.SUCCESS(_output_wf1ya0_a0b);
              }
              if (pa.global().properties(Target_auxCompile.this.getName(), JavaCompile_Facet.Target_auxCompile.Parameters.class).skipAuxCompile() != null && pa.global().properties(Target_auxCompile.this.getName(), JavaCompile_Facet.Target_auxCompile.Parameters.class).skipAuxCompile()) {
                return new IResult.SUCCESS(_output_wf1ya0_a0b);
              }
              if (Sequence.fromIterable(input).any(new IWhereFilter<TResource>() {
                public boolean accept(TResource it) {
                  return it.module() == null;
                }
              })) {
                return new IResult.FAILURE(_output_wf1ya0_a0b);
              }

              // collect modules to compile 
              Iterable<TResource> toCompile = Sequence.fromIterable(input).where(new IWhereFilter<TResource>() {
                public boolean accept(TResource it) {
                  return SModuleOperations.isCompileInIdea(it.module());
                }
              });

              // compile modules 
              if (Sequence.fromIterable(toCompile).isEmpty()) {
                return new IResult.SUCCESS(_output_wf1ya0_a0b);
              }
              if (MPSCore.getInstance().isTestMode()) {
                return new IResult.FAILURE(_output_wf1ya0_a0b);
              }

              IdeaJavaCompiler compiler = pa.global().properties(Target_auxCompile.this.getName(), JavaCompile_Facet.Target_auxCompile.Parameters.class).project().getComponent(IdeaJavaCompiler.class);
              if (compiler == null || !(compiler.isValid())) {
                monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("IntelliJ IDEA is required for compilation")));
                return new IResult.FAILURE(_output_wf1ya0_a0b);
              }

              monitor.currentProgress().beginWork("Compiling in IntelliJ IDEA", 1, monitor.currentProgress().workLeft());

              monitor.currentProgress().advanceWork("Compiling in IntelliJ IDEA", 1);
              MPSCompilationResult cr = compiler.compileModules(Sequence.fromIterable(toCompile).select(new ISelector<TResource, SModule>() {
                public SModule select(TResource it) {
                  return it.module();
                }
              }).toGenericArray(SModule.class));

              // analyse results 
              if (cr != null) {
                for (IMessage msg : cr.getMessages()) {
                  monitor.reportFeedback(new IFeedback.MESSAGE(msg));
                }
              }
              if (cr == null || !(cr.isOk())) {
                if (cr != null) {
                  if (cr.getErrors() > 0) {
                    monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(cr)));
                  } else if (cr.getWarnings() > 0) {
                    monitor.reportFeedback(new IFeedback.WARNING(String.valueOf(cr)));
                  } else {
                    monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf(cr)));
                  }
                }
                return new IResult.FAILURE(_output_wf1ya0_a0b);
              }

              monitor.currentProgress().finishWork("Compiling in IntelliJ IDEA");
            default:
              return new IResult.SUCCESS(_output_wf1ya0_a0b);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.make.facets.Make.make")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean isOptional() {
      return false;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return true;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      return Sequence.fromArray(EXPECTED_INPUT);
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._2) t).assign((Tuples._2) copyFrom);
      }
      return t;
    }

    public int workEstimate() {
      return 100;
    }

    public static class Parameters extends MultiTuple._2<Project, Boolean> {
      public Parameters() {
        super();
      }

      public Parameters(Project project, Boolean skipAuxCompile) {
        super(project, skipAuxCompile);
      }

      public Project project(Project value) {
        return super._0(value);
      }

      public Boolean skipAuxCompile(Boolean value) {
        return super._1(value);
      }

      public Project project() {
        return super._0();
      }

      public Boolean skipAuxCompile() {
        return super._1();
      }

      @SuppressWarnings(value = "unchecked")
      public JavaCompile_Facet.Target_auxCompile.Parameters assignFrom(Tuples._2<Project, Boolean> from) {
        return (JavaCompile_Facet.Target_auxCompile.Parameters) super.assign(from);
      }
    }
  }

  public static class Target_compileToMemory implements ITargetEx2 {
    private static Class<? extends IResource>[] EXPECTED_INPUT = (Class<? extends IResource>[]) new Class[]{FResource.class};
    private static Class<? extends IResource>[] EXPECTED_OUTPUT = (Class<? extends IResource>[]) new Class[]{};
    private ITarget.Name name = new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compileToMemory");

    public Target_compileToMemory() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_wf1ya0_a0c = null;
          final Iterable<FResource> input = (Iterable<FResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              final JavaCompiler jc = new JavaCompiler();
              final Set<SModule> modules = SetSequence.fromSet(new HashSet<SModule>());
              for (FResource fres : Sequence.fromIterable(input)) {
                MapSequence.fromMap(fres.contents()).visitAll(new IVisitor<IMapping<String, Object>>() {
                  public void visit(IMapping<String, Object> m) {
                    jc.addSourceFile("", m.key(), m.value());
                  }
                });
                if (fres.module() != null) {
                  SetSequence.fromSet(modules).addElement(fres.module());
                }
              }
              pa.global().properties(Target_compileToMemory.this.getName(), JavaCompile_Facet.Target_compileToMemory.Parameters.class).errors(false);
              jc.addCompilationResultListener(new CompilationResultAdapter() {
                @Override
                public void onCompilationResult(CompilationResult cr) {
                  if (cr.hasErrors()) {
                    pa.global().properties(Target_compileToMemory.this.getName(), JavaCompile_Facet.Target_compileToMemory.Parameters.class).errors(true);
                    CategorizedProblem[] categorizedProblems = cr.getErrors();
                    for (int i = 0; i < 3 && i < categorizedProblems.length; i++) {
                      monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(String.valueOf(categorizedProblems[i]))));
                    }
                  }
                }
              });
              final Wrappers._T<CompositeClassPathItem> ccp = new Wrappers._T<CompositeClassPathItem>();
              ModelAccess.instance().runReadAction(new Runnable() {
                public void run() {
                  ccp.value = JavaModuleOperations.createClassPathItem(JavaModuleOperations.collectCompileClasspath(modules, true), "JavaCompile_Facet");
                  Sequence.fromIterable(pa.global().properties(Target_compileToMemory.this.getName(), JavaCompile_Facet.Target_compileToMemory.Parameters.class).classPath()).visitAll(new IVisitor<IClassPathItem>() {
                    public void visit(IClassPathItem cpi) {
                      ccp.value.add(cpi);
                    }
                  });
                }
              });
              jc.compile(ccp.value);
              if ((boolean) pa.global().properties(Target_compileToMemory.this.getName(), JavaCompile_Facet.Target_compileToMemory.Parameters.class).errors()) {
                return new IResult.FAILURE(_output_wf1ya0_a0c);
              }
              IClassesData function = new IClassesData() {
                public ClassLoader getClassLoader(ClassLoader parent) {
                  return jc.getClassLoader(parent);
                }
              };
              _output_wf1ya0_a0c = Sequence.fromIterable(_output_wf1ya0_a0c).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new CResource(function))));
            default:
              return new IResult.SUCCESS(_output_wf1ya0_a0c);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGenToMemory")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return null;
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean isOptional() {
      return false;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return true;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      return Sequence.fromArray(EXPECTED_INPUT);
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._2) t).assign((Tuples._2) copyFrom);
      }
      return t;
    }

    public int workEstimate() {
      return 200;
    }

    public static class Parameters extends MultiTuple._2<Iterable<IClassPathItem>, Boolean> {
      public Parameters() {
        super();
      }

      public Parameters(Iterable<IClassPathItem> classPath, Boolean errors) {
        super(classPath, errors);
      }

      public Iterable<IClassPathItem> classPath(Iterable<IClassPathItem> value) {
        return super._0(value);
      }

      public Boolean errors(Boolean value) {
        return super._1(value);
      }

      public Iterable<IClassPathItem> classPath() {
        return super._0();
      }

      public Boolean errors() {
        return super._1();
      }

      @SuppressWarnings(value = "unchecked")
      public JavaCompile_Facet.Target_compileToMemory.Parameters assignFrom(Tuples._2<Iterable<IClassPathItem>, Boolean> from) {
        return (JavaCompile_Facet.Target_compileToMemory.Parameters) super.assign(from);
      }
    }
  }

  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }

    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compile");
        if (properties.hasProperties(name)) {
          JavaCompile_Facet.Target_compile.Parameters props = properties.properties(name, JavaCompile_Facet.Target_compile.Parameters.class);
          MapSequence.fromMap(store).put("jetbrains.mps.make.facets.JavaCompile.compile.compiledAnything", String.valueOf(props.compiledAnything()));
          MapSequence.fromMap(store).put("jetbrains.mps.make.facets.JavaCompile.compile.skipCompilation", String.valueOf(props.skipCompilation()));
        }
      }
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.auxCompile");
        if (properties.hasProperties(name)) {
          JavaCompile_Facet.Target_auxCompile.Parameters props = properties.properties(name, JavaCompile_Facet.Target_auxCompile.Parameters.class);
          MapSequence.fromMap(store).put("jetbrains.mps.make.facets.JavaCompile.auxCompile.project", null);
          MapSequence.fromMap(store).put("jetbrains.mps.make.facets.JavaCompile.auxCompile.skipAuxCompile", String.valueOf(props.skipAuxCompile()));
        }
      }
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compileToMemory");
        if (properties.hasProperties(name)) {
          JavaCompile_Facet.Target_compileToMemory.Parameters props = properties.properties(name, JavaCompile_Facet.Target_compileToMemory.Parameters.class);
          MapSequence.fromMap(store).put("jetbrains.mps.make.facets.JavaCompile.compileToMemory.classPath", null);
          MapSequence.fromMap(store).put("jetbrains.mps.make.facets.JavaCompile.compileToMemory.errors", String.valueOf((boolean) props.errors()));
        }
      }
    }

    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compile");
          JavaCompile_Facet.Target_compile.Parameters props = properties.properties(name, JavaCompile_Facet.Target_compile.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.make.facets.JavaCompile.compile.compiledAnything")) {
            props.compiledAnything(Boolean.valueOf(MapSequence.fromMap(store).get("jetbrains.mps.make.facets.JavaCompile.compile.compiledAnything")));
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.make.facets.JavaCompile.compile.skipCompilation")) {
            props.skipCompilation(Boolean.valueOf(MapSequence.fromMap(store).get("jetbrains.mps.make.facets.JavaCompile.compile.skipCompilation")));
          }
        }
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.auxCompile");
          JavaCompile_Facet.Target_auxCompile.Parameters props = properties.properties(name, JavaCompile_Facet.Target_auxCompile.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.make.facets.JavaCompile.auxCompile.project")) {
            props.project(null);
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.make.facets.JavaCompile.auxCompile.skipAuxCompile")) {
            props.skipAuxCompile(Boolean.valueOf(MapSequence.fromMap(store).get("jetbrains.mps.make.facets.JavaCompile.auxCompile.skipAuxCompile")));
          }
        }
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compileToMemory");
          JavaCompile_Facet.Target_compileToMemory.Parameters props = properties.properties(name, JavaCompile_Facet.Target_compileToMemory.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.make.facets.JavaCompile.compileToMemory.classPath")) {
            props.classPath(null);
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.make.facets.JavaCompile.compileToMemory.errors")) {
            props.errors(Boolean.valueOf(MapSequence.fromMap(store).get("jetbrains.mps.make.facets.JavaCompile.compileToMemory.errors")));
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }
}
