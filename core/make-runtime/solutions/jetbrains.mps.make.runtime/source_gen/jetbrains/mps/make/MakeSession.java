package jetbrains.mps.make;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.project.Project;
import jetbrains.mps.messages.IMessageHandler;
import jetbrains.mps.util.annotation.ToRemove;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.script.ScriptBuilder;

public class MakeSession {
  private IOperationContext context;
  private final Project myProject;
  private final IMessageHandler myMessageHandler;
  private final boolean myIsCleanMake;
  private final boolean myIsSticky;
  /**
   * 
   * 

   * @deprecated use constructor with {@link jetbrains.mps.project.Project } instead
   */
  @Deprecated
  @ToRemove(version = 3.2)
  public MakeSession(IOperationContext context) {
    this(context, null, true);
  }
  /**
   * 
   * 

   * @deprecated use constructor with {@link jetbrains.mps.project.Project } instead
   */
  @Deprecated
  @ToRemove(version = 3.2)
  public MakeSession(IOperationContext context, IMessageHandler messageHandler, boolean cleanMake) {
    this(context, messageHandler, cleanMake, false);
  }
  /**
   * 
   * 

   * @deprecated use constructor with {@link jetbrains.mps.project.Project } instead
   */
  @Deprecated
  @ToRemove(version = 3.2)
  public MakeSession(IOperationContext context, IMessageHandler messageHandler, boolean cleanMake, boolean sticky) {
    this.context = context;
    myProject = context.getProject();
    this.myMessageHandler = messageHandler;
    this.myIsCleanMake = cleanMake;
    this.myIsSticky = sticky;
  }
  public MakeSession(@NotNull Project mpsProject, @Nullable IMessageHandler messageHandler, boolean cleanMake) {
    myProject = mpsProject;
    this.myMessageHandler = (messageHandler == null ? IMessageHandler.NULL_HANDLER : messageHandler);
    this.myIsCleanMake = cleanMake;
    this.myIsSticky = false;
  }
  /**
   * 
   * 

   * @deprecated use {@link jetbrains.mps.make.MakeSession#getProject() }
   */
  @Deprecated
  public IOperationContext getContext() {
    return (context == null ? new ProjectOperationContext(myProject) : context);
  }
  @NotNull
  public Project getProject() {
    return myProject;
  }
  @NotNull
  public IMessageHandler getMessageHandler() {
    return myMessageHandler;
  }
  public boolean isCleanMake() {
    return myIsCleanMake;
  }
  /**
   * 
   * 

   * @deprecated according to Fedor, obsolete functionality
   */
  @Deprecated
  @ToRemove(version = 3.2)
  public boolean isSticky() {
    return myIsSticky;
  }
  public void doExecute(Runnable scriptRunnable) {
    scriptRunnable.run();
  }
  public IScript toScript(ScriptBuilder scriptBuilder) {
    return scriptBuilder.toScript();
  }
}
