package jetbrains.mps.make;

/*Generated by MPS */

import java.util.concurrent.Future;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.script.IScriptController;

public interface IMakeService {
  public boolean openNewSession(MakeSession session);
  public void closeSession(MakeSession session);
  public boolean isSessionActive();
  public Future<IResult> make(MakeSession session, Iterable<? extends IResource> resources);
  public Future<IResult> make(MakeSession session, Iterable<? extends IResource> resources, IScript script);
  public Future<IResult> make(MakeSession session, Iterable<? extends IResource> resources, IScript script, IScriptController controller);
  public void addListener(IMakeNotificationListener listener);
  public void removeListener(IMakeNotificationListener listener);
  @Deprecated
  public Future<IResult> make(Iterable<? extends IResource> resources);
  @Deprecated
  public Future<IResult> make(Iterable<? extends IResource> resources, IScript script);
  @Deprecated
  public Future<IResult> make(Iterable<? extends IResource> resources, IScript script, IScriptController controller);
  public static class INSTANCE {
    private static IMakeService Component;
    private static EmptyMakeService emptyComponent = new EmptyMakeService();

    private INSTANCE() {
    }

    public static IMakeService get() {
      if (Component == null) {
        return emptyComponent;
      }
      return Component;
    }

    public static void set(IMakeService service) {
      Component = service;
    }
  }

}
