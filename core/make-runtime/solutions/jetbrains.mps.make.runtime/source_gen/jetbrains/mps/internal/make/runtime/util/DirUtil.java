package jetbrains.mps.internal.make.runtime.util;

/*Generated by MPS */

import java.util.regex.Pattern;
import java.util.Arrays;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.regex.Matcher;
import java.io.File;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;

public class DirUtil {
  private static Pattern URL = Pattern.compile("[a-zA-Z]://(.*)");
  private static final char SLASH_CHAR = '/';
  private static final String SLASH = "/";

  public static int findPrefix(String path, String[] sortedDirs) {
    String dir = asDir(straighten(urlToPath(path)));
    int idx = Arrays.binarySearch(sortedDirs, dir);
    idx = (idx < 0 ?
      -1 - idx :
      idx
    );
    if (idx < sortedDirs.length && startsWith(dir, sortedDirs[idx])) {
      return idx;
    }
    return -1;
  }

  public static String[] sortDirs(Iterable<String> dirPaths) {
    return Sequence.fromIterable(dirPaths).select(new ISelector<String, String>() {
      public String select(String p) {
        return asDir(straighten(urlToPath(p)));
      }
    }).sort(new ISelector<String, Comparable<?>>() {
      public Comparable<?> select(String p) {
        return p;
      }
    }, true).toGenericArray(String.class);
  }

  public static String asDir(String path) {
    return (path.endsWith(SLASH) ?
      path :
      path + SLASH
    );
  }

  public static String urlToPath(String maybeUrl) {
    Matcher m = URL.matcher(maybeUrl);
    return (m.matches() ?
      m.group(1) :
      maybeUrl
    );
  }

  public static String straighten(String syspath) {
    return syspath.replace(File.separatorChar, SLASH_CHAR);
  }

  public static boolean startsWith(String path, String prefix) {
    return path.startsWith(prefix) && (path.length() == prefix.length() || prefix.endsWith(SLASH) || path.charAt(prefix.length()) == SLASH_CHAR);
  }

  public static boolean same(String path1, String path2) {
    if (path1.equals(path2)) {
      return true;
    }
    if (path1.length() == path2.length()) {
      return false;
    }
    if (path1.length() > path2.length()) {
      {
        Tuples._2<String, String> _tmp_rkp2iv_a0c0g = MultiTuple.<String,String>from(path2, path1);
        path1 = _tmp_rkp2iv_a0c0g._0();
        path2 = _tmp_rkp2iv_a0c0g._1();
      }
    }
    return path2.startsWith(path1) && path2.charAt(path1.length()) == SLASH_CHAR && (path2.length() - path1.length() == 1);
  }
}
