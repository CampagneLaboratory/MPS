package jetbrains.mps.internal.make.runtime.java;

/*Generated by MPS */

import jetbrains.mps.generator.generationTypes.StreamHandler;
import jetbrains.mps.smodel.SModelDescriptor;
import java.util.Set;
import jetbrains.mps.vfs.IFile;
import java.util.HashSet;
import jetbrains.mps.internal.make.runtime.util.FilesDelta;
import jetbrains.mps.generator.fileGenerator.FileGenerationUtil;
import org.jdom.Element;
import jetbrains.mps.make.delta.IDelta;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.DefaultSModelDescriptor;

public class JavaStreamHandler implements StreamHandler {
  private final SModelDescriptor myModelDescriptor;
  private final Set<IFile> mySavedFiles = new HashSet<IFile>();
  private FileProcessor myProcessor = new FileProcessor();
  private FilesDelta myOutputFileDelta;
  private FilesDelta myCachesFileDelta;
  private IFile myModelOutputDir;
  private IFile myModelCacheOutputDir;

  public JavaStreamHandler(SModelDescriptor modelDescriptor, IFile outputDir, IFile cachesOutputDir) {
    myModelDescriptor = modelDescriptor;
    IFile overriddenOutputDir = getOverriddenOutputDir(modelDescriptor);
    IFile defaultOutputDir = FileGenerationUtil.getDefaultOutputDir(myModelDescriptor, outputDir);
    this.myModelOutputDir = (overriddenOutputDir != null ?
      overriddenOutputDir :
      defaultOutputDir
    );
    this.myModelCacheOutputDir = FileGenerationUtil.getDefaultOutputDir(myModelDescriptor, cachesOutputDir);

    this.myOutputFileDelta = (overriddenOutputDir != null ?
      new FilesDelta(myModelOutputDir, defaultOutputDir) :
      new FilesDelta(myModelOutputDir)
    );
    this.myCachesFileDelta = new FilesDelta(myModelCacheOutputDir);
  }

  public void saveStream(String name, String content, boolean isCache) {
    IFile file = getFile(name, isCache);
    myProcessor.saveContent(file, content);
    mySavedFiles.add(file);
    getDelta(isCache).written(file);
  }

  public void saveStream(String name, Element content, boolean isCache) {
    IFile file = getFile(name, isCache);
    myProcessor.saveContent(file, content);
    mySavedFiles.add(file);
    getDelta(isCache).written(file);
  }

  public void saveStream(String name, byte[] content, boolean isCache) {
    IFile file = getFile(name, isCache);
    myProcessor.saveContent(file, content);
    mySavedFiles.add(file);
    getDelta(isCache).written(file);
  }

  public boolean touch(String name, boolean isCache) {
    IFile file = getFile(name, isCache);
    mySavedFiles.add(file);
    getDelta(isCache).kept(file);
    return file.exists();
  }

  public void flush() {
    myProcessor.flushChanges();
  }

  public Iterable<IDelta> delta() {
    return Sequence.fromArray(new IDelta[]{myOutputFileDelta, myCachesFileDelta});
  }

  public void dispose() {
    myProcessor.invalidateModel(myModelDescriptor);
  }

  private IFile getFile(String name, boolean isCache) {

    IFile outputDir = (isCache ?
      myModelCacheOutputDir :
      myModelOutputDir
    );
    return outputDir.getDescendant(name);
  }

  private IFile getOverriddenOutputDir(SModelDescriptor md) {
    if (md instanceof DefaultSModelDescriptor) {
      boolean useModelFolder = Boolean.parseBoolean(((DefaultSModelDescriptor) md).getSModelHeader().getOptionalProperty("useModelFolderForGeneration"));
      if (useModelFolder) {
        IFile file = ((DefaultSModelDescriptor) md).getSource().getFile();
        return file.getParent();
      }
    }
    return null;
  }

  private FilesDelta getDelta(boolean isCache) {
    return ((isCache ?
      myCachesFileDelta :
      myOutputFileDelta
    ));
  }
}
