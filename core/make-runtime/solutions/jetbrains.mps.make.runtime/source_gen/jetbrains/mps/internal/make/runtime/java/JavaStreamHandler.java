package jetbrains.mps.internal.make.runtime.java;

/*Generated by MPS */

import jetbrains.mps.generator.generationTypes.StreamHandler;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.Set;
import jetbrains.mps.vfs.IFile;
import java.util.HashSet;
import jetbrains.mps.internal.make.runtime.util.FilesDelta;
import jetbrains.mps.generator.fileGenerator.FileGenerationUtil;
import org.jdom.Element;
import jetbrains.mps.make.delta.IDelta;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.extapi.model.GeneratableSModel;
import org.jetbrains.mps.openapi.persistence.DataSource;
import jetbrains.mps.extapi.persistence.FileDataSource;

public class JavaStreamHandler implements StreamHandler {
  private final SModel myModel;
  private final Set<IFile> mySavedFiles = new HashSet<IFile>();
  private FileProcessor myProcessor = new FileProcessor();
  private FilesDelta myOutputFileDelta;
  private FilesDelta myCachesFileDelta;
  private IFile myModelOutputDir;
  private IFile myModelCacheOutputDir;

  public JavaStreamHandler(SModel model, IFile outputDir, IFile cachesOutputDir) {
    myModel = model;
    IFile overriddenOutputDir = getOverriddenOutputDir(model);
    IFile defaultOutputDir = FileGenerationUtil.getDefaultOutputDir(myModel, outputDir);
    this.myModelOutputDir = (overriddenOutputDir != null ? overriddenOutputDir : defaultOutputDir);
    this.myModelCacheOutputDir = FileGenerationUtil.getDefaultOutputDir(myModel, cachesOutputDir);

    this.myOutputFileDelta = new FilesDelta(myModelOutputDir, myModelCacheOutputDir);
    this.myCachesFileDelta = new FilesDelta(myModelCacheOutputDir);
  }

  @Override
  public void saveStream(String name, String content, boolean isCache) {
    IFile file = getFile(name, isCache);
    mySavedFiles.add(file);
    if (myProcessor.saveContent(file, content)) {
      getDelta(isCache).written(file);
    } else {
      getDelta(isCache).kept(file);
    }
  }

  @Override
  public void saveStream(String name, Element content, boolean isCache) {
    IFile file = getFile(name, isCache);
    mySavedFiles.add(file);
    if (myProcessor.saveContent(file, content)) {
      getDelta(isCache).written(file);
    } else {
      getDelta(isCache).kept(file);
    }
  }

  @Override
  public void saveStream(String name, byte[] content, boolean isCache) {
    IFile file = getFile(name, isCache);
    mySavedFiles.add(file);
    if (myProcessor.saveContent(file, content)) {
      getDelta(isCache).written(file);
    } else {
      getDelta(isCache).kept(file);
    }
  }

  @Override
  public boolean touch(String name, boolean isCache) {
    IFile file = getFile(name, isCache);
    mySavedFiles.add(file);
    getDelta(isCache).kept(file);
    return file.exists();
  }

  public void flush() {
    myProcessor.flushChanges();
  }

  public Iterable<IDelta> delta() {
    return Sequence.fromArray(new IDelta[]{myOutputFileDelta, myCachesFileDelta});
  }

  @Override
  public void dispose() {
    myProcessor.invalidateModel(myModel);
  }

  private IFile getFile(String name, boolean isCache) {

    IFile outputDir = (isCache ? myModelCacheOutputDir : myModelOutputDir);
    return outputDir.getDescendant(name);
  }

  private IFile getOverriddenOutputDir(SModel md) {
    if (md instanceof GeneratableSModel) {
      boolean useModelFolder = ((GeneratableSModel) md).isGenerateIntoModelFolder();
      DataSource source = md.getSource();
      if (useModelFolder && source instanceof FileDataSource) {
        IFile file = ((FileDataSource) source).getFile();
        return file.getParent();
      }
    }
    return null;
  }

  private FilesDelta getDelta(boolean isCache) {
    return ((isCache ? myCachesFileDelta : myOutputFileDelta));
  }

  public int calcApproximateSize_internal() {
    return myProcessor.calcApproximateSize();
  }
}
