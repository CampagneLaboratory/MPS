package jetbrains.mps.internal.make.runtime.backports;

/*Generated by MPS */

import jetbrains.mps.progress.ProgressMonitorBase;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.progress.SubProgressKind;

public class JobProgressMonitorAdapter extends ProgressMonitorBase {
  private static final int WORK_AMOUNT = 10000;

  private IJobMonitor myJobMonitor;
  private String myName;
  private String myStep;
  private boolean myCalledSetTitleInternal = false;

  public JobProgressMonitorAdapter(IJobMonitor monitor) {
    myJobMonitor = monitor;
  }

  protected void update(double frac) {
    if (myName != null) {
      double currFrac = 1. - (double) myJobMonitor.currentProgress().workLeft() / WORK_AMOUNT;
      myJobMonitor.currentProgress().advanceWork(myName, (int) (WORK_AMOUNT * (Math.max(0., frac - currFrac))), myStep);
    }
  }

  protected void setStepInternal(String step) {
    myStep = step;
  }

  protected void setTitleInternal(String text) {
    if ("".equals(text)) {
      return;
    }
    myName = text;
  }

  protected void startInternal(String text) {
    myJobMonitor.currentProgress().beginWork(text, WORK_AMOUNT, 0);
  }

  protected void doneInternal() {
    myJobMonitor.currentProgress().finishWork(myName);
  }

  @Override
  protected ProgressMonitorBase.SubProgressMonitor subTaskInternal(int work, SubProgressKind kind) {
    return new JobProgressMonitorAdapter.SubProgressMonitor(this, work, kind);
  }

  @Override
  public void done() {
    super.done();
    myName = null;
  }

  public boolean isCanceled() {
    return myJobMonitor.stopRequested();
  }

  public void cancel() {
  }

  protected class SubProgressMonitor extends ProgressMonitorBase.SubProgressMonitor {
    private SubProgressMonitor(ProgressMonitorBase parent, int work, SubProgressKind kind) {
      super(parent, work, kind);
    }

    @Override
    protected void doneInternal() {
      JobProgressMonitorAdapter.this.doneInternal();
    }

    @Override
    protected void startInternal(String name) {
      JobProgressMonitorAdapter.this.startInternal(name);
    }
  }
}
