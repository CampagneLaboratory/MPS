package jetbrains.mps.internal.make.runtime.backports;

/*Generated by MPS */

import jetbrains.mps.progress.ProgressMonitorBase;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.progress.SubProgressKind;

public class JobProgressMonitorAdapter extends ProgressMonitorBase {
  private static final int WORK_AMOUNT = 10000;
  private IJobMonitor myJobMonitor;
  private String myName;
  private String myTitle;
  private String myStep;
  private boolean myCalledSetTitleInternal = false;

  public JobProgressMonitorAdapter(IJobMonitor monitor) {
    myJobMonitor = monitor;
  }

  @Override
  protected void update(double frac) {
    if (myName != null) {
      double currFrac = 1. - (double) myJobMonitor.currentProgress().workLeft() / WORK_AMOUNT;
      myJobMonitor.currentProgress().advanceWork(myName, (int) (WORK_AMOUNT * (Math.max(0., frac - currFrac))), this.comment());
    }
  }

  @Override
  protected void setTitleInternal(String text) {
    if ((text == null || text.length() == 0)) {
      return;
    }
    int idx = text.indexOf(" :: ");
    if (idx >= 0) {
      text = text.substring(idx + 4);
    }
    myTitle = text;
  }

  @Override
  protected void setStepInternal(String step) {
    myStep = step;
    if (myName != null) {
      myJobMonitor.currentProgress().advanceWork(myName, 0, comment());
    }
  }

  @Override
  protected void startInternal(String text) {
    if ((text == null || text.length() == 0)) {
      return;
    }
    this.myName = text;
    myJobMonitor.currentProgress().beginWork(text, WORK_AMOUNT, 0);
  }

  @Override
  protected void doneInternal(String text) {
    if ((text == null || text.length() == 0)) {
      return;
    }
    myJobMonitor.currentProgress().finishWork(text);
  }

  private String comment() {
    String currsubtitle = ((myTitle == null || myTitle.length() == 0) || myTitle.startsWith(myName) ?
      "" :
      myTitle
    );
    String currstep = ((myStep != null && myStep.length() > 0) ?
      myStep :
      ""
    );
    return ((currsubtitle == null || currsubtitle.length() == 0) ?
      currstep :
      currsubtitle + (((currstep == null || currstep.length() == 0) ?
        "" :
        " " + currstep
      ))
    );
  }

  @Override
  protected ProgressMonitorBase.SubProgressMonitor subTaskInternal(int work, SubProgressKind kind) {
    return new JobProgressMonitorAdapter.SubProgressMonitor(this, getTaskName(), work, kind);
  }

  @Override
  public void done() {
    super.done();
  }

  @Override
  public boolean isCanceled() {
    return myJobMonitor.stopRequested();
  }

  @Override
  public void cancel() {
  }

  protected class SubProgressMonitor extends ProgressMonitorBase.SubProgressMonitor {
    private String myParentTask;

    private SubProgressMonitor(ProgressMonitorBase parent, String parentTask, int work, SubProgressKind kind) {
      super(parent, work, kind);
      this.myParentTask = parentTask;
    }

    @Override
    protected void doneInternal(String text) {
      if (!((text == null || text.length() == 0)) && (myParentTask == null || myParentTask.length() == 0)) {
        JobProgressMonitorAdapter.this.doneInternal(text);
      }
    }

    @Override
    protected void startInternal(String text) {
      if (!((text == null || text.length() == 0)) && (myParentTask == null || myParentTask.length() == 0)) {
        JobProgressMonitorAdapter.this.startInternal(text);
      }
    }

    @Override
    protected ProgressMonitorBase.SubProgressMonitor subTaskInternal(int work, SubProgressKind kind) {
      return new JobProgressMonitorAdapter.SubProgressMonitor(this, getTaskName(), work, kind);
    }
  }
}
