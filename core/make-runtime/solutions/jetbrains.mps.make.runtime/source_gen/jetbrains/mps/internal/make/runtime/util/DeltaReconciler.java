package jetbrains.mps.internal.make.runtime.util;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.make.delta.IDelta;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;

public class DeltaReconciler {
  private List<DeltaReconciler.DeltaContainer> topContainer = ListSequence.fromList(new ArrayList<DeltaReconciler.DeltaContainer>());

  public DeltaReconciler() {
  }

  public DeltaReconciler(Iterable<IDelta> toReconcile) {
    addAll(toReconcile);
  }

  public void addDelta(IDelta delta) {
    insert(delta, topContainer);
  }

  public final void addAll(Iterable<IDelta> toReconcile) {
    Sequence.fromIterable(toReconcile).visitAll(new IVisitor<IDelta>() {
      public void visit(IDelta d) {
        insert(d, topContainer);
      }
    });
  }

  public void reconcileAll() {
    ListSequence.fromList(topContainer).visitAll(new IVisitor<DeltaReconciler.DeltaContainer>() {
      public void visit(DeltaReconciler.DeltaContainer dc) {
        dc.mergeContent().reconcile();
      }
    });
  }

  private static void insert(final IDelta delta, List<DeltaReconciler.DeltaContainer> into) {
    if (!(ListSequence.fromList(into).any(new IWhereFilter<DeltaReconciler.DeltaContainer>() {
      public boolean accept(DeltaReconciler.DeltaContainer dc) {
        return dc.tryInsert(delta);
      }
    }))) {
      ListSequence.fromList(into).addElement(new DeltaReconciler.DeltaContainer(delta));
    }
  }

  private static class DeltaContainer {
    private IDelta delta;
    private List<DeltaReconciler.DeltaContainer> content = ListSequence.fromList(new ArrayList<DeltaReconciler.DeltaContainer>());

    public DeltaContainer(IDelta delta) {
      this.delta = delta;
    }

    public boolean tryInsert(IDelta delta) {
      if (delta.contains(this.delta)) {
        insert(this.delta, this.content);
        this.delta = delta;
      } else if (this.delta.contains(delta)) {
        insert(delta, content);
      } else {
        return false;
      }
      return true;
    }

    public IDelta mergeContent() {
      return ListSequence.fromList(content).foldLeft(this.delta, new ILeftCombinator<DeltaReconciler.DeltaContainer, IDelta>() {
        public IDelta combine(IDelta d, DeltaReconciler.DeltaContainer dc) {
          return d.merge(dc.mergeContent());
        }
      });
    }
  }
}
