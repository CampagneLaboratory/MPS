package jetbrains.mps.internal.make.runtime.util;

/*Generated by MPS */

import java.util.Map;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IRightCombinator;
import java.util.ArrayList;

public class DeltaReconciler {
  private Map<IDelta.Key, List<IDelta>> delta = MapSequence.fromMap(new HashMap<IDelta.Key, List<IDelta>>());

  public DeltaReconciler() {
  }

  public DeltaReconciler(Iterable<IDelta> toReconcile) {
    addAll(toReconcile);
  }

  public void addDelta(IDelta d) {
    ListSequence.fromList(deltaList(d.key())).addElement(d);
  }

  public final void addAll(Iterable<IDelta> toReconcile) {
    Sequence.fromIterable(toReconcile).visitAll(new IVisitor<IDelta>() {
      public void visit(IDelta d) {
        ListSequence.fromList(deltaList(d.key())).addElement(d);
      }
    });
  }

  public void reconcileAll() {
    for (List<IDelta> deltaList : MapSequence.fromMap(delta).values()) {
      assert ListSequence.fromList(deltaList).isNotEmpty();
      ListSequence.fromList(deltaList).reduceRight(new IRightCombinator<IDelta, IDelta>() {
        public IDelta combine(IDelta a, IDelta b) {
          return b.merge(a);
        }
      }).reconcile();
    }
  }

  private List<IDelta> deltaList(IDelta.Key key) {
    if (MapSequence.fromMap(delta).containsKey(key)) {
      return MapSequence.fromMap(delta).get(key);
    }
    for (IDelta.Key k : MapSequence.fromMap(delta).keySet()) {
      if (key.contains(k)) {
        List<IDelta> ld = MapSequence.fromMap(delta).removeKey(k);
        MapSequence.fromMap(delta).put(key, ld);
        return ld;
      } else if (k.contains(key)) {
        return MapSequence.fromMap(delta).get(k);
      }
    }
    List<IDelta> ld = ListSequence.fromList(new ArrayList<IDelta>());
    MapSequence.fromMap(delta).put(key, ld);
    return ld;
  }
}
