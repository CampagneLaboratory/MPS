package jetbrains.mps.internal.make.runtime.util;

/*Generated by MPS */

import jetbrains.mps.vfs.IFile;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;

public class FilesDelta implements IDelta {
  private IFile dir;
  private Map<IFile, IDelta.Status> files = MapSequence.fromMap(new HashMap<IFile, IDelta.Status>());

  public FilesDelta(IFile dir) {
    this.dir = dir;
  }

  private FilesDelta(FilesDelta copyFrom) {
    copy(copyFrom);
  }

  public void written(IFile file) {
    MapSequence.fromMap(files).put(file, IDelta.Status.WRITTEN);
  }

  public void kept(IFile file) {
    MapSequence.fromMap(files).put(file, IDelta.Status.KEPT);
  }

  public void deleted(IFile file) {
    MapSequence.fromMap(files).put(file, IDelta.Status.DELETED);
  }

  public void reconcile() {
    for (IFile file : dir.list()) {
      if (!(MapSequence.fromMap(files).containsKey(file)) || MapSequence.fromMap(files).get(file) == IDelta.Status.DELETED) {
        file.delete();
      }
    }
  }

  public IDelta merge(IDelta previous) {
    if (!(previous instanceof FilesDelta)) {
      throw new IllegalArgumentException();
    }
    return new FilesDelta((FilesDelta) previous).copy(this);
  }

  private FilesDelta copy(FilesDelta copyFrom) {
    MapSequence.fromMap(files).putAll(copyFrom.files);
    return this;
  }

  public Object key() {
    return dir;
  }
}
