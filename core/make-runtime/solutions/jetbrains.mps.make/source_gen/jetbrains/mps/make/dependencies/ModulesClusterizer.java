package jetbrains.mps.make.dependencies;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.smodel.resources.MResource;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.IListSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.generator.runtime.TemplateModule;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.smodel.Generator;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.generator.impl.plan.ModelContentUtil;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import jetbrains.mps.project.dependency.modules.LanguageDependenciesManager;
import jetbrains.mps.smodel.language.LanguageRuntime;
import jetbrains.mps.smodel.language.LanguageRegistry;
import java.util.Collection;

public class ModulesClusterizer {
  private static Logger LOG = LogManager.getLogger(ModulesCluster.class);

  public ModulesClusterizer() {
  }

  public Iterable<? extends Iterable<? extends IResource>> clusterize(Iterable<IResource> res) {
    final Iterable<MResource> mres = Sequence.fromIterable(res).where(new IWhereFilter<IResource>() {
      public boolean accept(IResource r) {
        return r instanceof MResource;
      }
    }).select(new ISelector<IResource, MResource>() {
      public MResource select(IResource r) {
        return ((MResource) r);
      }
    }).toListSequence();
    Iterable<SModule> mods = Sequence.fromIterable(mres).select(new ISelector<MResource, SModule>() {
      public SModule select(MResource r) {
        return r.module();
      }
    });
    List<IResource> rest = Sequence.fromIterable(res).subtract(Sequence.fromIterable(mres)).toListSequence();
    ModulesCluster clst = new ModulesCluster(mods);
    clst.collectRequired(mods);
    Iterable<? extends Iterable<? extends IResource>> toBuild = Sequence.fromIterable(clst.buildOrder()).select(new ISelector<Iterable<SModule>, IListSequence<MResource>>() {
      public IListSequence<MResource> select(final Iterable<SModule> cl) {
        return Sequence.fromIterable(mres).where(new IWhereFilter<MResource>() {
          public boolean accept(MResource r) {
            return Sequence.fromIterable(cl).contains(r.module());
          }
        }).toListSequence();
      }
    });
    Iterable<? extends Iterable<IResource>> seq = (ListSequence.fromList(rest).isNotEmpty() ?
      Sequence.<List<IResource>>singleton(rest) :
      null
    );

    List<Iterable<? extends IResource>> result = ListSequence.fromList(new ArrayList<Iterable<? extends IResource>>());
    ListSequence.fromList(result).addSequence(Sequence.fromIterable(toBuild));
    ListSequence.fromList(result).addSequence(Sequence.fromIterable(seq));
    return result;
  }



  public Iterable<String> allUsedLangNamespaces(Iterable<? extends IResource> cluster) {
    Iterable<MResource> mres = Sequence.fromIterable(cluster).where(new IWhereFilter<IResource>() {
      public boolean accept(IResource r) {
        return r instanceof MResource;
      }
    }).select(new ISelector<IResource, MResource>() {
      public MResource select(IResource r) {
        return ((MResource) r);
      }
    }).toListSequence();
    Iterable<SModule> mods = Sequence.fromIterable(mres).select(new ISelector<MResource, SModule>() {
      public SModule select(MResource r) {
        return r.module();
      }
    });
    return allNamespaces(mods);
  }

  private Iterable<String> allNamespaces(Iterable<SModule> modules) {
    final Set<String> namespaces = SetSequence.fromSet(new HashSet<String>());
    Set<TemplateModule> seen = SetSequence.fromSet(new HashSet<TemplateModule>());
    Queue<String> nsq = QueueSequence.fromQueue(new LinkedList<String>());
    for (SModule mod : modules) {
      if (mod instanceof Generator) {
        Iterable<SModel> genModels = mod.getModels();
        QueueSequence.fromQueue(nsq).addSequence(Sequence.fromIterable(genModels).translate(new ITranslator2<SModel, String>() {
          public Iterable<String> translate(SModel smd) {
            return ModelContentUtil.getUsedLanguageNamespaces(smd, false);
          }
        }).where(new IWhereFilter<String>() {
          public boolean accept(String ns) {
            return !(SetSequence.fromSet(namespaces).contains(ns));
          }
        }));
      } else {
        Set<Language> langs = SetSequence.fromSet(new HashSet<Language>());
        for (Language l : CollectionSequence.fromCollection(new GlobalModuleDependenciesManager(mod).getUsedLanguages())) {
          SetSequence.fromSet(langs).addSequence(SetSequence.fromSet(LanguageDependenciesManager.getAllExtendedLanguages(l)));
        }
        QueueSequence.fromQueue(nsq).addSequence(SetSequence.fromSet(langs).select(new ISelector<Language, String>() {
          public String select(Language lang) {
            return lang.getModuleDescriptor().getNamespace();
          }
        }).where(new IWhereFilter<String>() {
          public boolean accept(String ns) {
            return !(SetSequence.fromSet(namespaces).contains(ns));
          }
        }));
      }
      while (QueueSequence.fromQueue(nsq).isNotEmpty()) {
        String ns = QueueSequence.fromQueue(nsq).removeFirstElement();
        LanguageRuntime lr = LanguageRegistry.getInstance().getLanguage(ns);
        if (lr == null) {
          LOG.debug("language not found for namespace " + ns);
          continue;
        }
        if (!(SetSequence.fromSet(namespaces).contains(ns))) {
          SetSequence.fromSet(namespaces).addElement(ns);
          Collection<TemplateModule> gens = lr.getGenerators();
          if (gens != null) {
            for (TemplateModule tm : gens) {
              if (tm == null) {
                continue;
              }
              if (!(SetSequence.fromSet(seen).contains(tm))) {
                QueueSequence.fromQueue(nsq).addSequence(CollectionSequence.fromCollection(tm.getUsedLanguages()));
                SetSequence.fromSet(seen).addElement(tm);
              }
            }
          }
        }
      }
    }
    return SetSequence.fromSet(namespaces).toListSequence();
  }
}
