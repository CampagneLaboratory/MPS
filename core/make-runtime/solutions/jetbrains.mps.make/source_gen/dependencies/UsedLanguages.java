package dependencies;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import jetbrains.mps.project.IModule;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.language.LanguageRuntime;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.generator.runtime.TemplateModule;

public class UsedLanguages {
  private static Logger LOG = Logger.getLogger(ModulesCluster.class);

  public UsedLanguages() {
  }

  public static Iterable<String> allNamespaces(Iterable<IModule> modules) {
    Set<String> namespaces = SetSequence.fromSet(new HashSet<String>());
    Queue<String> nsq = QueueSequence.fromQueue(new LinkedList<String>());
    for (IModule mod : modules) {
      Iterable<Language> langs = mod.getDependenciesManager().getAllUsedLanguages();
      QueueSequence.fromQueue(nsq).addSequence(Sequence.fromIterable(langs).<String>select(new ISelector<Language, String>() {
        public String select(Language it) {
          return it.getModuleDescriptor().getNamespace();
        }
      }));
      while (QueueSequence.fromQueue(nsq).isNotEmpty()) {
        String ns = QueueSequence.fromQueue(nsq).removeFirstElement();
        LanguageRuntime lr = LanguageRegistry.getInstance().getLanguage(ns);
        if (lr == null) {
          LOG.debug("language not found for namespace " + ns);
          continue;
        }
        if (!(SetSequence.fromSet(namespaces).contains(ns))) {
          SetSequence.fromSet(namespaces).addElement(ns);
          for (TemplateModule tm : lr.getGenerators()) {
            QueueSequence.fromQueue(nsq).addSequence(Sequence.fromIterable(tm.getUsedLanguages()));
          }
        }
      }
    }
    return namespaces;
  }
}
