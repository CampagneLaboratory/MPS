package jetbrains.mps.build.ant.generation.workers;

/*Generated by MPS */

import jetbrains.mps.build.ant.WhatToDo;
import org.apache.tools.ant.ProjectComponent;
import jetbrains.mps.build.ant.MpsWorker;
import jetbrains.mps.build.ant.Environment;
import java.util.Map;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.IMapping;
import java.util.List;
import java.util.LinkedHashSet;
import jetbrains.mps.project.IModule;
import java.util.Collections;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.reloading.ClassLoaderManager;
import jetbrains.mps.progress.EmptyProgressMonitor;

public class ChunksGeneratorWorker extends GeneratorWorker {
  public ChunksGeneratorWorker(WhatToDo whatToDo) {
    super(whatToDo);
  }

  public ChunksGeneratorWorker(WhatToDo whatToDo, ProjectComponent component) {
    super(whatToDo, component);
  }

  public ChunksGeneratorWorker(WhatToDo whatToDo, MpsWorker.AntLogger logger) {
    super(whatToDo, logger);
  }

  @Override
  public void work() {
    // todo setup correct environment in the first place 
    Environment environment = new Environment();
    Map<String, File> libraries = MapSequence.fromMap(new LinkedHashMap<String, File>(16, (float) 0.75, false));
    for (String jar : ListSequence.fromList(myWhatToDo.getLibraryJars())) {
      MapSequence.fromMap(libraries).put(jar, new File(jar));
    }
    for (Map.Entry<String, File> entry : SetSequence.fromSet(myWhatToDo.getLibraries().entrySet())) {
      MapSequence.fromMap(libraries).put(entry.getKey(), entry.getValue());
    }
    environment.init(myWhatToDo.getMacro(), false, libraries, myWhatToDo.getLogLevel(), new MpsWorker.MyMessageHandlerAppender());
    setEnvironment(environment);

    setupEnvironment();
    setGenerationProperties();
    boolean doneSomething = false;

    Project project = createDummyProject();

    for (IMapping<List<String>, Boolean> chunk : MapSequence.fromMap(myWhatToDo.getChunks())) {
      List<String> modulePaths = chunk.key();
      LinkedHashSet<IModule> modules = new LinkedHashSet<IModule>();
      for (String modulePath : ListSequence.fromList(modulePaths)) {
        processModuleFile(new File(modulePath), modules);
      }
      Boolean bootstrap = chunk.value();
      if (bootstrap) {
        warning("Found bootstrap chunk " + chunk.key() + ". Generation may be impossible.");
      }
      MpsWorker.ObjectsToProcess go = new MpsWorker.ObjectsToProcess(Collections.EMPTY_SET, modules, Collections.EMPTY_SET);
      if (go.hasAnythingToGenerate()) {
        generate(project, go);
        doneSomething = true;

        ModelAccess.instance().runWriteAction(new Runnable() {
          public void run() {
            ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
          }
        });
      }
    }

    if (!(doneSomething)) {
      error("Could not find anything to generate.");
    }

    dispose();
    showStatistic();
  }

  public static void main(String[] args) {
    MpsWorker mpsWorker = new ChunksGeneratorWorker(WhatToDo.fromDumpInFile(new File(args[0])), new MpsWorker.SystemOutLogger());
    mpsWorker.workFromMain();
  }
}
