package jetbrains.mps.build.ant.generation;

/*Generated by MPS */

import jetbrains.mps.build.ant.MpsLoadTask;
import jetbrains.mps.build.ant.MpsWorker;
import jetbrains.mps.build.ant.generation.workers.ChunksGeneratorWorker;
import jetbrains.mps.build.ant.LibraryDataType;
import java.io.File;
import java.util.Set;
import java.util.LinkedHashSet;
import org.apache.tools.ant.BuildException;

public class GenerateChunksTask extends MpsLoadTask {
  {
    myWhatToDo.putProperty(STRICT_MODE, Boolean.toString(true));
    myWhatToDo.putProperty(PARALLEL_MODE, Boolean.toString(false));
  }

  public static final String STRICT_MODE = "STRICT_MODE";
  public static final String PARALLEL_MODE = "PARALLEL_MODE";

  public GenerateChunksTask() {
  }

  protected Class<? extends MpsWorker> getWorkerClass() {
    return ChunksGeneratorWorker.class;
  }

  public void addConfiguredChunk(Chunk chunk) {
    myWhatToDo.addChunk(chunk.getModules(), chunk.getBootstrap());
  }

  public void addConfiguredLibrary(LibraryDataType jar) {
    File file = jar.getFile();
    if (file != null) {
      myWhatToDo.addLibraryJar(file.getAbsolutePath());
    }
  }

  public void setStrictMode(boolean strictMode) {
    myWhatToDo.putProperty(STRICT_MODE, Boolean.toString(strictMode));
  }

  protected boolean getStrictMode() {
    return Boolean.parseBoolean(myWhatToDo.getProperty(STRICT_MODE));
  }

  public void setParallelMode(boolean parallelMode) {
    myWhatToDo.putProperty(PARALLEL_MODE, Boolean.toString(parallelMode));
  }

  protected boolean getParallelMode() {
    return Boolean.parseBoolean(myWhatToDo.getProperty(PARALLEL_MODE));
  }

  @Override
  protected void checkMpsHome() {
    // do not check: there is no mps_home for us 
  }

  @Override
  protected Set<File> calculateClassPath() {
    Set<File> classPath = new LinkedHashSet<File>();
    // todo property names turn into a pumpkin in 3.0 
    String mpsHome = getProject().getProperty("artifacts.buildMPS");
    String pluginHome = getProject().getProperty("artifacts.buildPlugin");
    String ideaHome = getProject().getProperty("artifacts.IDEA");
    String mpsCoreHome = getProject().getProperty("artifacts.buildCore");
    String mpsWorkbenchHome = getProject().getProperty("artifacts.buildWorkbench");

    if ((mpsHome != null && mpsHome.length() > 0)) {
      // buildMPS 
      gatherAllClassesAndJarsUnder(new File(mpsHome, "lib"), classPath);
    } else if ((pluginHome != null && pluginHome.length() > 0) && (ideaHome != null && ideaHome.length() > 0)) {
      // buildPlugin + IDEA 
      gatherAllClassesAndJarsUnder(new File(ideaHome, "lib"), classPath);
      gatherAllClassesAndJarsUnder(new File(pluginHome, "mps-core/lib"), classPath);
    } else if ((mpsCoreHome != null && mpsCoreHome.length() > 0) && (ideaHome != null && ideaHome.length() > 0)) {
      // buildCore + IDEA (in 2.5 this is in our scripts only) 
      gatherAllClassesAndJarsUnder(new File(ideaHome, "lib"), classPath);
      gatherAllClassesAndJarsUnder(new File(mpsCoreHome, "mps-core/lib"), classPath);
      if ((mpsWorkbenchHome != null && mpsWorkbenchHome.length() > 0)) {
        gatherAllClassesAndJarsUnder(new File(mpsWorkbenchHome, "lib"), classPath);
      }
      // fixme layout changes is 3.0 
    } else {
      throw new BuildException("Dependency on MPS build scripts is required to generate MPS modules.");
    }

    return classPath;
  }
}
