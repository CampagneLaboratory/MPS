package jetbrains.mps.analyzers.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SNodePointer;

public class ApplicableNodeReference_applicableNode_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {
  public ApplicableNodeReference_applicableNode_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.analyzers.structure.ApplicableNodeReference", "applicableNode", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.analyzers.structure.ApplicableNodeReference", "applicableNode");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    List<SNode> result = new ArrayList<SNode>();
    SNode rule = SNodeOperations.getAncestor(_context.getEnclosingNode(), "jetbrains.mps.analyzers.structure.Rule", true, false);
    if (rule != null && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(rule, "condition", true), "jetbrains.mps.analyzers.structure.ConceptCondition")) {
      ListSequence.fromList(result).addElement(SNodeOperations.cast(SLinkOperations.getTarget(rule, "condition", true), "jetbrains.mps.analyzers.structure.ConceptCondition"));
    }
    return result;
  }

  public SNodePointer getSearchScopeValidatorNodePointer() {
    return new SNodePointer("r:73c9a355-2bf0-4466-8a7d-8b8d8a945cd4(jetbrains.mps.analyzers.constraints)", "4943044633102057777");
  }
}
