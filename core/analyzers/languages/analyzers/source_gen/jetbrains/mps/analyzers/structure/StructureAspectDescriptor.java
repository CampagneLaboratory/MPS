package jetbrains.mps.analyzers.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.ConceptRegistry;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    int hash = conceptFqName.hashCode();
    if (hash == 2015249080) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.Analyzer", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == 562521404) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.Instruction", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == -518857640) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.AnalyzerMergeFunction", "jetbrains.mps.baseLanguage.structure.ConceptFunction");
    }
    if (hash == -2017044109) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.AnalyzerParameterProgram", "jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter");
    }
    if (hash == 1845992993) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.AnalyzerMergeParameterInput", "jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter");
    }
    if (hash == -974038684) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.AnalyzerInitialFunction", "jetbrains.mps.baseLanguage.structure.ConceptFunction");
    }
    if (hash == -1524729697) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.AnalyzerFunFunction", "jetbrains.mps.baseLanguage.structure.ConceptFunction");
    }
    if (hash == 246362447) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.AnalyzerFunParameterProgramState", "jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter");
    }
    if (hash == -1245140696) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.AnalyzerFunParameterInput", "jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter");
    }
    if (hash == -1649923535) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.AnalysisDirection", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -1803639220) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.ForwardDirection", "jetbrains.mps.analyzers.structure.AnalysisDirection");
    }
    if (hash == -805582582) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.BackwardDirection", "jetbrains.mps.analyzers.structure.AnalysisDirection");
    }
    if (hash == -946169913) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.AnalyzerFunctionResultType", "jetbrains.mps.baseLanguage.structure.Type");
    }
    if (hash == 1055221262) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.Rule", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == -853438003) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.InstructionParameter", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == -665745686) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.ApplicableCondition", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == 571631485) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.PatternCondition", "jetbrains.mps.analyzers.structure.ApplicableCondition");
    }
    if (hash == -1580899223) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.EmitInstruction", "jetbrains.mps.lang.pattern.structure.ActionStatement");
    }
    if (hash == 561913199) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.InstructionReference", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -1843468067) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.RuleReference", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == 2019025762) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.AnalyzerRunnerType", "jetbrains.mps.baseLanguage.structure.Type");
    }
    if (hash == -1382799965) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.AnalyzerRunnerAnalyzeOperation", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation");
    }
    if (hash == -338765052) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.AnalyzerRunnerCreator", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    if (hash == -1192849397) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.IsOperation", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    if (hash == 95620005) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.ConceptCondition", "jetbrains.mps.analyzers.structure.ApplicableCondition", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == 4779448) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.ApplicableNodeReference", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    if (hash == 530223091) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.InsertBeforePosition", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -805464172) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.InsertPosition", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -1807174758) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.analyzers.structure.InsertAfterPosition", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    return null;
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private ImmutableSet<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String... parents) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, parents);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static ImmutableSet<String> getAncestors(String conceptFqName, String... parents) {
      List<String> result = new ArrayList();

      result.add(conceptFqName);
      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : parents) {
        result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
      }
      return ImmutableSet.copyOf(result);
    }
  }
}
