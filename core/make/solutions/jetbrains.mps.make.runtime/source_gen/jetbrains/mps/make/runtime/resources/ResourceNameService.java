package jetbrains.mps.make.runtime.resources;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ITranslator2;

public class ResourceNameService {
  private List<IResourceProvider> providers = ListSequence.fromList(new ArrayList<IResourceProvider>());

  public ResourceNameService() {
  }

  public Iterable<IResource> rootResources() {
    return ListSequence.fromList(providers).translate(new ITranslator2<IResourceProvider, IResource>() {
      public Iterable<IResource> translate(IResourceProvider pro) {
        return pro.rootResources();
      }
    });
  }

  public IResource resolve(ResourceName resourceName) throws ResourceNotFoundException {
    for (IResourceProvider pro : ListSequence.fromList(providers)) {
      if (pro.owns(resourceName)) {
        return pro.resolve(resourceName);
      }
    }
    throw new ResourceNotFoundException("not found " + resourceName);
  }

  public void registerProvider(IResourceProvider provider) {
    ListSequence.fromList(providers).addElement(provider);
  }

  public void unregisterProvider(IResourceProvider provider) {
    ListSequence.fromList(providers).removeElement(provider);
  }
}
