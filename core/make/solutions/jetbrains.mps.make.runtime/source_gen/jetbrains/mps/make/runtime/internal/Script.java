package jetbrains.mps.make.runtime.internal;

/*Generated by MPS */

import jetbrains.mps.make.runtime.IScript;
import jetbrains.mps.make.runtime.ITarget;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.make.runtime.IMonitor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Collections;

public class Script implements IScript {
  private ITarget defaultTarget;
  private List<ITarget> targets;
  private Script.State state = Script.State.UNKNOWN;

  public Script(Iterable<ITarget> targets, ITarget defaultTarget) {
    this.targets = ListSequence.fromListWithValues(new ArrayList<ITarget>(), targets);
    this.defaultTarget = defaultTarget;
  }

  public void validate(IMonitor monit) {
    this.state = Script.State.VALID;
  }

  public boolean isValid() {
    return Script.State.VALID == state;
  }

  public ITarget getTarget(final ITarget.Name name) {
    return ListSequence.fromList(targets).findFirst(new IWhereFilter<ITarget>() {
      public boolean accept(ITarget t) {
        return t.getName().equals(name);
      }
    });
  }

  public ITarget getDefault() {
    return defaultTarget;
  }

  public Iterable<ITarget> allTargets() {
    return Collections.unmodifiableList(targets);
  }

  public IScript.Result execute(ITarget trg, IMonitor monit) {
    if (!(ListSequence.fromList(targets).contains(trg))) {
      throw new IllegalArgumentException("unknown target");
    }
    if (!(isValid())) {
      WorkflowEngine.LOG.error("attempt to execute invalid script");
      throw new IllegalStateException("invalid script");
    }
    return null;
  }

  protected void invalidate() {
    this.state = Script.State.UNKNOWN;
  }

  protected static   enum State {
    UNKNOWN(),
    VALID(),
    INVALID();

    State() {
    }
  }
}
