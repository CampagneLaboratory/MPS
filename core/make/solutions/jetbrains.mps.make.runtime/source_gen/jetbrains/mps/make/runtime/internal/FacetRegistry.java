package jetbrains.mps.make.runtime.internal;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.make.runtime.IFacet;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Collections;

public class FacetRegistry {
  private static FacetRegistry INSTANCE = new FacetRegistry();

  private Map<IFacet.Name, IFacet> facetMap = MapSequence.fromMap(new HashMap<IFacet.Name, IFacet>());

  private FacetRegistry() {
  }

  public void register(IFacet facet) {
    if (MapSequence.fromMap(facetMap).containsKey(facet.getName())) {
      throw new IllegalArgumentException("already registered");
    }
    MapSequence.fromMap(facetMap).put(facet.getName(), facet);
  }

  public void unregister(IFacet facet) {
    if (!(MapSequence.fromMap(facetMap).containsKey(facet.getName()))) {
      throw new IllegalArgumentException("not registered");
    }
    MapSequence.fromMap(facetMap).removeKey(facet.getName());
  }

  public IFacet lookup(IFacet.Name name) {
    return MapSequence.fromMap(facetMap).get(name);
  }

  public Map<IFacet.Name, IFacet> allFacets() {
    return Collections.unmodifiableMap(facetMap);
  }

  public static FacetRegistry getInstance() {
    if (INSTANCE == null) {
      WorkflowEngine.LOG.fatal("not initialized");
      throw new IllegalStateException("not initialized");
    }
    return INSTANCE;
  }
}
