package jetbrains.mps.make.sandbox.sample;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IMonitor;

public class GenerateSpecial_Facet implements IFacet {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("GenerateSpecial");

  public GenerateSpecial_Facet() {
    ListSequence.fromList(targets).addElement(new GenerateSpecial_Facet.Target_i03q2a_a());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return null;
  }

  public Iterable<IFacet.Name> required() {
    return null;
  }

  public Iterable<IFacet.Name> extended() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("Generate")});
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public static class Target_i03q2a_a implements ITarget {
    private ITarget.Name name = new ITarget.Name("GenerateSpecialTarget");

    public Target_i03q2a_a() {
    }

    public IJob createJob() {
      return new IJob() {
        public IResult execute(Iterable<IResource> input, IMonitor monitor) {
          Iterable<IResource> _output_i03q2a_a0a = null;
          switch (0) {
            case 0:
              switch (monitor.<what_Option>relayQuery(new DOH_Query())) {
                case ABORT_i03q2a_a0a0a:
                case IGNORE_i03q2a_c0a0a:
                case RETRY_i03q2a_b0a0a:
                default:
              }
            default:
              return new IResult.SUCCESS(_output_i03q2a_a0a);
          }
        }
      };
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return null;
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return null;
    }

    public ITarget.Name getName() {
      return name;
    }
  }
}
