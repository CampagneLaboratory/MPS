package jetbrains.mps.make.unittest;

/*Generated by MPS */

import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.make.runtime.script.TargetRange;
import jetbrains.mps.internal.make.runtime.script.Script;
import junit.framework.Assert;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IResource;
import org.jmock.Expectations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class Execute_Test extends MockTestCase {
  public void test_single() throws Exception {
    final ITarget make = Mockups.target(context, "make");
    Mockups.allowing(context, make);

    TargetRange tr = new TargetRange();
    tr.addTarget(make);

    Script sc = new Script(tr, new ITarget.Name("make"));
    sc.validate();
    Assert.assertTrue(sc.isValid());

    IResult res = sc.execute(Mockups.monitor(context, "mon"));
    Assert.assertNotNull(res);
    Assert.assertTrue(res.isSucessful());
    Assert.assertNotNull(res.output());
    Assert.assertTrue(Sequence.fromIterable(res.output()).isEmpty());
  }

  public void test_resources() throws Exception {
    final ITarget make = Mockups.target(context, "make");
    final ITarget res = Mockups.target(context, "res");
    final IResource resA = Mockups.resource(context, "resA");
    final IResource resB = Mockups.resource(context, "resB");
    final IResult result = Mockups.result(context, "result", true);
    context.checking(new Expectations() {
      {
        atLeast(1).of(res).before();
        will(returnValue(Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("make")})));
        exactly(1).of(res).createJob();
        will(returnValue(Mockups.job(context, "resjob", new _FunctionTypes._return_P0_E0<IResult>() {
          public IResult invoke() {
            return result;
          }
        })));
        atLeast(1).of(result).output();
        will(returnValue(ListSequence.fromListAndArray(new ArrayList<IResource>(), resA, resB)));
      }
    });
    Mockups.allowing(context, res);
    Mockups.allowing(context, make);
    Mockups.allowing(context, result);

    TargetRange tr = new TargetRange();
    tr.addTarget(make);
    tr.addRelated(ListSequence.fromListAndArray(new ArrayList<ITarget>(), res));

    Script sc = new Script(tr, new ITarget.Name("make"));
    sc.validate();
    Assert.assertTrue(sc.isValid());

    IResult r = sc.execute(Mockups.monitor(context, "mon"));
    Assert.assertNotNull(r);
    Assert.assertTrue(r.isSucessful());
    Iterable<IResource> out = r.output();
    System.out.println("R: [" + IterableUtils.join(Sequence.fromIterable(out).select(new ISelector<IResource, String>() {
      public String select(IResource it) {
        return String.valueOf(it);
      }
    }), ", ") + "]");
    Assert.assertTrue(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<IResource>(), resA, resB)).disjunction(Sequence.fromIterable(out)).isEmpty());
  }

  public void test_bar() throws Exception {
    final ITarget make = Mockups.target(context, "make");
    final ITarget gen = Mockups.target(context, "gen");
    final ITarget text = Mockups.target(context, "text");
    context.checking(new Expectations() {
      {
        atLeast(1).of(gen).before();
        will(returnValue(Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("make")})));
        atLeast(1).of(text).after();
        will(returnValue(Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("gen")})));
        atLeast(1).of(text).before();
        will(returnValue(Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("make")})));
      }
    });
    Mockups.allowing(context, gen);
    Mockups.allowing(context, text);
    Mockups.allowing(context, make);

    TargetRange tr = new TargetRange();
    tr.addTarget(make);
    tr.addRelated(ListSequence.fromListAndArray(new ArrayList<ITarget>(), gen, text));

    Script sc = new Script(tr, new ITarget.Name("make"));
    sc.validate();
    Assert.assertTrue(sc.isValid());

    IResult res = sc.execute(Mockups.monitor(context, "mon"));
    Assert.assertNotNull(res);
  }
}
