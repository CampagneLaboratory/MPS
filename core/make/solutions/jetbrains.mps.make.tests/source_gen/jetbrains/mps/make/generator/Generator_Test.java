package jetbrains.mps.make.generator;

/*Generated by MPS */

import jetbrains.mps.make.unittest.MockTestCase;
import jetbrains.mps.internal.make.runtime.script.ScriptBuilder;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.facet.IFacet;
import jetbrains.mps.make.facet.ITarget;
import junit.framework.Assert;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.unittest.Mockups;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.script.IMonitor;
import org.jmock.Expectations;
import jetbrains.mps.make.script.IQuery;
import org.hamcrest.BaseMatcher;
import org.hamcrest.Description;
import org.jmock.api.Action;
import org.jmock.api.Invocation;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import jetbrains.mps.make.facet.FacetRegistry;

public class Generator_Test extends MockTestCase {
  private Object manifest;

  public void test_buildScript() throws Exception {
    ScriptBuilder scb = new ScriptBuilder();
    IScript scr = scb.withFacet(new IFacet.Name("Maker")).withFacet(new IFacet.Name("Generator")).withTarget(new ITarget.Name("Make")).toScript();
    Assert.assertTrue(scr.isValid());
    ITarget dt = scr.defaultTarget();
    Assert.assertNotNull(dt);
    Assert.assertEquals(new ITarget.Name("Make"), dt.getName());
    IResult res = scr.execute(Mockups.monitor(context, "mon"));
    Assert.assertNotNull(res);
    Assert.assertTrue(res.isSucessful());
    Assert.assertTrue(Sequence.fromIterable(res.output()).isEmpty());
  }

  public void test_queryOk() throws Exception {
    ScriptBuilder scb = new ScriptBuilder();
    IScript scr = scb.withFacet(new IFacet.Name("Maker")).withFacet(new IFacet.Name("Generator")).withFacet(new IFacet.Name("TextGen")).withTarget(new ITarget.Name("Make")).toScript();
    Assert.assertTrue(scr.isValid());
    ITarget dt = scr.defaultTarget();
    Assert.assertNotNull(dt);
    Assert.assertEquals(new ITarget.Name("Make"), dt.getName());
    final IMonitor mon = Mockups.monitor(context, "mon");
    context.checking(new Expectations() {
      {
        final IQuery[] query = new IQuery[1];
        exactly(1).of(mon).relayQuery(with(new BaseMatcher<IQuery>() {
          public boolean matches(Object o) {
            if (o instanceof IQuery) {
              query[0] = (IQuery) o;
              return true;
            }
            return false;
          }

          public void describeTo(Description p0) {
          }
        }));
        will(new Action() {
          public Object invoke(Invocation invocation) throws Throwable {
            return Sequence.fromIterable(query[0].options()).first();
          }

          public void describeTo(Description description) {
          }
        });
      }
    });
    IResult res = scr.execute(mon);
    Assert.assertNotNull(res);
    Assert.assertTrue(res.isSucessful());
    Assert.assertTrue(Sequence.fromIterable(res.output()).isEmpty());
  }

  public void test_queryStop() throws Exception {
    ScriptBuilder scb = new ScriptBuilder();
    IScript scr = scb.withFacet(new IFacet.Name("Maker")).withFacet(new IFacet.Name("Generator")).withFacet(new IFacet.Name("TextGen")).withTarget(new ITarget.Name("Make")).toScript();
    Assert.assertTrue(scr.isValid());
    ITarget dt = scr.defaultTarget();
    Assert.assertNotNull(dt);
    Assert.assertEquals(new ITarget.Name("Make"), dt.getName());
    final IMonitor mon = Mockups.monitor(context, "mon");
    context.checking(new Expectations() {
      {
        final IQuery[] query = new IQuery[1];
        exactly(1).of(mon).relayQuery(with(new BaseMatcher<IQuery>() {
          public boolean matches(Object o) {
            if (o instanceof IQuery) {
              query[0] = (IQuery) o;
              return true;
            }
            return false;
          }

          public void describeTo(Description p0) {
          }
        }));
        will(new Action() {
          public Object invoke(Invocation invocation) throws Throwable {
            return Sequence.fromIterable(query[0].options()).last();
          }

          public void describeTo(Description description) {
          }
        });
      }
    });
    IResult res = scr.execute(mon);
    Assert.assertNotNull(res);
    Assert.assertFalse(res.isSucessful());
    Assert.assertTrue(Sequence.fromIterable(res.output()).isEmpty());
  }

  @Override
  protected void setUp() throws Exception {
    super.setUp();
    Class<?> mf = Class.forName(Generator_Test.class.getPackage().getName() + ".FacetManifest");
    Constructor<?> ctor = mf.getConstructor();
    Object inst = ctor.newInstance();
    this.manifest = inst;
    Method mth = mf.getMethod("registerFacets", FacetRegistry.class);
    mth.invoke(inst, FacetRegistry.getInstance());
  }

  @Override
  protected void tearDown() throws Exception {
    Class<?> mf = Class.forName(Generator_Test.class.getPackage().getName() + ".FacetManifest");
    Method mth = mf.getMethod("unRegisterFacets", FacetRegistry.class);
    mth.invoke(manifest, FacetRegistry.getInstance());
    super.tearDown();
  }
}
