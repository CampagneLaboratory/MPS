package jetbrains.mps.make.unittest;

/*Generated by MPS */

import jetbrains.mps.make.runtime.IFacet;
import jetbrains.mps.make.runtime.script.ScriptBuilder;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.make.runtime.ITarget;
import jetbrains.mps.make.runtime.IScript;
import junit.framework.Assert;
import jetbrains.mps.make.runtime.internal.FacetRegistry;
import org.jmock.Expectations;

public class ScriptBuilder_Test extends MockTestCase {
  private IFacet[] facets;

  public void test_buildScript() throws Exception {
    ScriptBuilder scb = new ScriptBuilder();
    scb.withFacets(Sequence.fromIterable(Sequence.fromArray(facets)).select(new ISelector<IFacet, IFacet.Name>() {
      public IFacet.Name select(IFacet f) {
        return f.getName();
      }
    }));
    scb.withTarget(new ITarget.Name("make"));
    IScript sc = scb.toScript();
    Assert.assertNotNull(sc);
  }

  @Override
  protected void tearDown() throws Exception {
    for (IFacet fn : Sequence.fromIterable(Sequence.fromArray(facets))) {
      FacetRegistry.getInstance().unregister(fn);
    }
    super.tearDown();
  }

  @Override
  protected void setUp() throws Exception {
    super.setUp();
    final IFacet fmake = Mockups.facet(context, "Make");
    final IFacet fgen = Mockups.facet(context, "Gen");
    final ITarget tgen = Mockups.target(context, "gen", new ITarget.Name("gen"));
    final IFacet ftextgen = Mockups.facet(context, "Textgen");
    final ITarget ttextgen = Mockups.target(context, "textgen", new ITarget.Name("textgen"));
    context.checking(new Expectations() {
      {
        atLeast(1).of(fgen).required();
        will(returnValue(Sequence.fromArray(new IFacet.Name[]{fmake.getName()})));
        atLeast(1).of(fgen).targets();
        will(returnValue(Sequence.fromArray(new ITarget[]{tgen})));
        atLeast(1).of(ftextgen).required();
        will(returnValue(Sequence.fromArray(new IFacet.Name[]{fmake.getName(), fgen.getName()})));
        atLeast(1).of(ftextgen).targets();
        will(returnValue(Sequence.fromArray(new ITarget[]{ttextgen})));
      }
    });
    FacetRegistry.getInstance().register(fmake);
    FacetRegistry.getInstance().register(fgen);
    FacetRegistry.getInstance().register(ftextgen);
    Mockups.allowing(context, fmake);
    Mockups.allowing(context, fgen);
    Mockups.allowing(context, ftextgen);
    this.facets = new IFacet[]{fmake, fgen, ftextgen};
    Mockups.allowing(context, tgen);
    Mockups.allowing(context, ttextgen);
  }
}
