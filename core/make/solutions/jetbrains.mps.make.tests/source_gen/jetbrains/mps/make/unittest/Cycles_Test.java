package jetbrains.mps.make.unittest;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.make.runtime.internal.util.CycleDetector;
import junit.framework.Assert;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import java.util.ArrayList;

public class Cycles_Test extends TestCase {
  public void test_primitive() throws Exception {
    Graph<String> graph = new Graph<String>();
    CycleDetector<String> cd = graph.getCycleDetector();
    graph.addEdges("A", "B");
    Assert.assertTrue(ListSequence.fromList(cd.findCycles(graph.getVertices())).isEmpty());
    graph.addEdges("B", "A");
    List<List<String>> cycles = cd.findCycles(graph.getVertices());
    Assert.assertSame(1, ListSequence.fromList(cycles).count());
    Assert.assertEquals(ListSequence.fromListAndArray(new ArrayList<String>(), "A", "B"), ListSequence.fromList(cycles).getElement(0));
  }

  public void test_oneCycle() throws Exception {
    Graph<String> graph = new Graph<String>();
    CycleDetector<String> cd = graph.getCycleDetector();
    graph.addEdges("A", "B", "C");
    graph.addEdges("B", "D", "E");
    graph.addEdges("D", "C");
    graph.addEdges("C", "B", "E");
    List<List<String>> cycles = cd.findCycles(graph.getVertices());
    Assert.assertSame(1, ListSequence.fromList(cycles).count());
    Assert.assertSame(3, ListSequence.fromList(ListSequence.fromList(cycles).getElement(0)).count());
    Assert.assertTrue(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(), "B", "C", "D")).disjunction(ListSequence.fromList(ListSequence.fromList(cycles).getElement(0))).isEmpty());
  }

  public void test_fourCycles() throws Exception {
    Graph<String> graph = new Graph<String>();
    CycleDetector<String> cd = graph.getCycleDetector();
    graph.addEdges("A", "B");
    graph.addEdges("B", "C", "F", "E");
    graph.addEdges("C", "D", "G");
    graph.addEdges("D", "C", "H");
    graph.addEdges("E", "A", "F");
    graph.addEdges("F", "G");
    graph.addEdges("G", "F", "H");
    List<List<String>> cycles = cd.findCycles(graph.getVertices());
    Assert.assertSame(3, ListSequence.fromList(cycles).count());
    System.out.println("Cycles: " + cycles);
  }
}
