package jetbrains.mps.make.unittest;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.make.runtime.internal.util.GraphAnalyzer;
import junit.framework.Assert;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class Cycles_Test extends TestCase {
  public void test_primitive() throws Exception {
    Graph<String> graph = new Graph<String>();
    GraphAnalyzer<String> cd = graph.getCycleDetector();
    graph.addEdges("A", "B");
    Assert.assertTrue(ListSequence.fromList(cd.findCycles(graph.getVertices())).isEmpty());
    Assert.assertEquals(ListSequence.fromListAndArray(new ArrayList<String>(), "A", "B"), cd.topologicalSort(graph.getVertices()));
    graph.addEdges("B", "A");
    List<List<String>> cycles = cd.findCycles(graph.getVertices());
    Assert.assertSame(1, ListSequence.fromList(cycles).count());
    Assert.assertEquals(ListSequence.fromListAndArray(new ArrayList<String>(), "A", "B"), ListSequence.fromList(cycles).getElement(0));
  }

  public void test_oneCycle() throws Exception {
    Graph<String> graph = new Graph<String>();
    GraphAnalyzer<String> cd = graph.getCycleDetector();
    graph.addEdges("A", "B", "C");
    graph.addEdges("B", "D", "E");
    graph.addEdges("D", "C");
    graph.addEdges("C", "B", "E");
    List<List<String>> cycles = cd.findCycles(graph.getVertices());
    Assert.assertSame(1, ListSequence.fromList(cycles).count());
    Assert.assertSame(3, ListSequence.fromList(ListSequence.fromList(cycles).getElement(0)).count());
    Assert.assertTrue(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(), "B", "C", "D")).disjunction(ListSequence.fromList(ListSequence.fromList(cycles).getElement(0))).isEmpty());
  }

  public void test_linear() throws Exception {
    Graph<String> graph = new Graph<String>();
    GraphAnalyzer<String> cd = graph.getCycleDetector();
    graph.addEdges("A", "B");
    graph.addEdges("B", "C");
    graph.addEdges("C", "D");
    List<List<String>> cycles = cd.findCycles(Sequence.fromIterable(graph.getVertices()).sort(new ISelector<String, Comparable<?>>() {
      public Comparable<?> select(String it) {
        return it;
      }
    }, false));
    Assert.assertSame(0, ListSequence.fromList(cycles).count());
    cycles = cd.findCycles(graph.getVertices());
    Assert.assertSame(0, ListSequence.fromList(cycles).count());
    cycles = cd.findCycles(Sequence.fromIterable(graph.getVertices()).sort(new ISelector<String, Comparable<?>>() {
      public Comparable<?> select(String it) {
        return ((Object) it).hashCode();
      }
    }, true));
    Assert.assertSame(0, ListSequence.fromList(cycles).count());
  }

  public void test_fourCycles() throws Exception {
    Graph<String> graph = new Graph<String>();
    GraphAnalyzer<String> cd = graph.getCycleDetector();
    graph.addEdges("A", "B");
    graph.addEdges("B", "C", "F", "E");
    graph.addEdges("C", "D", "G");
    graph.addEdges("D", "C", "H");
    graph.addEdges("E", "A", "F");
    graph.addEdges("F", "G");
    graph.addEdges("G", "F", "H", "I", "J");
    graph.addEdges("H", "I");
    graph.addEdges("I", "G", "K");
    List<List<String>> cycles = cd.findCycles(graph.getVertices());
    Assert.assertSame(3, ListSequence.fromList(cycles).count());
    Assert.assertTrue(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(), "A", "B", "E")).disjunction(ListSequence.fromList(ListSequence.fromList(cycles).getElement(0))).isEmpty());
    Assert.assertTrue(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(), "D", "C")).disjunction(ListSequence.fromList(ListSequence.fromList(cycles).getElement(1))).isEmpty());
    Assert.assertTrue(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(), "G", "I", "F", "H")).disjunction(ListSequence.fromList(ListSequence.fromList(cycles).getElement(2))).isEmpty());
  }

  public void test_topoSort() throws Exception {
    Graph<String> graph = new Graph<String>();
    GraphAnalyzer<String> cd = graph.getCycleDetector();
    graph.addEdges("A", "B", "C", "H", "I");
    graph.addEdges("B", "C", "D", "E", "G");
    graph.addEdges("C", "D", "G", "K");
    graph.addEdges("D", "E", "H");
    graph.addEdges("E", "F");
    graph.addEdges("F", "G");
    graph.addEdges("G", "H", "I", "J");
    graph.addEdges("H", "I");
    graph.addEdges("I", "K", "J");
    List<List<String>> cycles = cd.findCycles(graph.getVertices());
    Assert.assertSame(0, ListSequence.fromList(cycles).count());
    Assert.assertEquals(ListSequence.fromListAndArray(new ArrayList<String>(), "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K"), cd.topologicalSort(graph.getVertices()));
    Assert.assertEquals(ListSequence.fromListAndArray(new ArrayList<String>(), "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K"), cd.topologicalSort(Sequence.fromIterable(graph.getVertices()).sort(new ISelector<String, Comparable<?>>() {
      public Comparable<?> select(String v) {
        return v;
      }
    }, false)));

  }
}
