package jetbrains.mps.make.script.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;

public enum DependencyQualifier {
  after("after", "STRONGLY_AFTER"),
  not_before("not before", "NOT_BEFORE"),
  not_after("not after", "NOT_AFTER"),
  before("before", "STRONGLY_BEFORE");

  private String myName;
  private String myValue;

  DependencyQualifier(String name, String value) {
    this.myName = name;
    this.myValue = value;
  }

  public String getName() {
    return this.myName;
  }

  public String getValueAsString() {
    return this.myValue;
  }

  public String getValue() {
    return this.myValue;
  }

  public static List<DependencyQualifier> getConstants() {
    List<DependencyQualifier> list = ListSequence.fromList(new LinkedList<DependencyQualifier>());
    ListSequence.fromList(list).addElement(DependencyQualifier.after);
    ListSequence.fromList(list).addElement(DependencyQualifier.not_before);
    ListSequence.fromList(list).addElement(DependencyQualifier.not_after);
    ListSequence.fromList(list).addElement(DependencyQualifier.before);
    return list;
  }

  public static DependencyQualifier getDefault() {
    return DependencyQualifier.after;
  }

  public static DependencyQualifier parseValue(String value) {
    if (value == null) {
      return DependencyQualifier.getDefault();
    }
    if (value.equals(DependencyQualifier.after.getValueAsString())) {
      return DependencyQualifier.after;
    }
    if (value.equals(DependencyQualifier.not_before.getValueAsString())) {
      return DependencyQualifier.not_before;
    }
    if (value.equals(DependencyQualifier.not_after.getValueAsString())) {
      return DependencyQualifier.not_after;
    }
    if (value.equals(DependencyQualifier.before.getValueAsString())) {
      return DependencyQualifier.before;
    }
    return DependencyQualifier.getDefault();
  }
}
