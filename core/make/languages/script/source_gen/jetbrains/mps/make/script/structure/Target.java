package jetbrains.mps.make.script.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Target extends BaseConcept {
  public static final String concept = "jetbrains.mps.make.script.structure.Target";
  public static final String DEPENDENCY = "dependency";
  public static final String TASK_LIST = "taskList";

  public Target(SNode node) {
    super(node);
  }

  public int getDependenciesCount() {
    return this.getChildCount(Target.DEPENDENCY);
  }

  public Iterator<Dependency> dependencies() {
    return this.children(Dependency.class, Target.DEPENDENCY);
  }

  public List<Dependency> getDependencies() {
    return this.getChildren(Dependency.class, Target.DEPENDENCY);
  }

  public void addDependency(Dependency node) {
    this.addChild(Target.DEPENDENCY, node);
  }

  public void insertDependency(Dependency prev, Dependency node) {
    this.insertChild(prev, Target.DEPENDENCY, node);
  }

  public int getTaskListsCount() {
    return this.getChildCount(Target.TASK_LIST);
  }

  public Iterator<TaskList> taskLists() {
    return this.children(TaskList.class, Target.TASK_LIST);
  }

  public List<TaskList> getTaskLists() {
    return this.getChildren(TaskList.class, Target.TASK_LIST);
  }

  public void addTaskList(TaskList node) {
    this.addChild(Target.TASK_LIST, node);
  }

  public void insertTaskList(TaskList prev, TaskList node) {
    this.insertChild(prev, Target.TASK_LIST, node);
  }

  public static Target newInstance(SModel sm, boolean init) {
    return (Target) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.make.script.structure.Target", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Target newInstance(SModel sm) {
    return Target.newInstance(sm, false);
  }
}
