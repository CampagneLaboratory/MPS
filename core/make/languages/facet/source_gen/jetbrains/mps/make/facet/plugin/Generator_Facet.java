package jetbrains.mps.make.facet.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IMonitor;
import jetbrains.mps.make.script.IVariablesPool;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import com.intellij.openapi.project.Project;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import com.intellij.openapi.project.DumbService;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ide.generator.GenerationSettings;
import jetbrains.mps.ide.generator.GeneratorCacheComponent;
import jetbrains.mps.generator.IGenerationTracer;
import jetbrains.mps.lang.generator.plugin.debug.GenerationTracer;
import jetbrains.mps.generator.NullGenerationTracer;
import jetbrains.mps.generator.GenerationOptions;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.ide.messages.MessagesViewTool;
import com.intellij.ide.IdeEventQueue;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.intellij.openapi.progress.Progressive;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.generator.GeneratorManager;
import jetbrains.mps.ide.messages.DefaultMessageHandler;

public class Generator_Facet implements IFacet {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("Generator");

  public Generator_Facet() {
    ListSequence.fromList(targets).addElement(new Generator_Facet.Target_ixz87t_a());
    ListSequence.fromList(targets).addElement(new Generator_Facet.Target_ixz87t_b());
    ListSequence.fromList(targets).addElement(new Generator_Facet.Target_ixz87t_c());
    ListSequence.fromList(targets).addElement(new Generator_Facet.Target_ixz87t_d());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return null;
  }

  public Iterable<IFacet.Name> required() {
    return null;
  }

  public Iterable<IFacet.Name> extended() {
    return null;
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public static class Target_ixz87t_a implements ITarget {
    private ITarget.Name name = new ITarget.Name("Parameters");

    public Target_ixz87t_a() {
    }

    public IJob createJob() {
      return new IJob() {
        public IResult execute(final Iterable<IResource> input, final IMonitor monitor, final IVariablesPool pool) {
          Iterable<IResource> _output_ixz87t_a0a = null;
          switch (0) {
            case 0:
              if (pool.<Generator_Facet.Target_ixz87t_a.Variables>variables(Target_ixz87t_a.this.getName(), Generator_Facet.Target_ixz87t_a.Variables.class).project() == null) {
                Logger.getLogger("jetbrains.mps.make.Generator").error("project is null");
                return new IResult.FAILURE(_output_ixz87t_a0a);
              }
            default:
              return new IResult.SUCCESS(_output_ixz87t_a0a);
          }
        }
      };
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return null;
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return null;
    }

    public ITarget.Name getName() {
      return name;
    }

    public <T> T createVariables(Class<T> cls) {
      return cls.cast(new Variables());
    }

    public static class Variables extends MultiTuple._1<Project> {
      public Variables() {
        super();
      }

      public Variables(Project project) {
        super(project);
      }

      public Project project(Project value) {
        return super._0(value);
      }

      public Project project() {
        return super._0();
      }

      @SuppressWarnings(value = "unchecked")
      public Generator_Facet.Target_ixz87t_a.Variables assignFrom(Tuples._1<Project> from) {
        return (Generator_Facet.Target_ixz87t_a.Variables) super.assign(from);
      }
    }
  }

  public static class Target_ixz87t_b implements ITarget {
    private ITarget.Name name = new ITarget.Name("CheckDumbMode");

    public Target_ixz87t_b() {
    }

    public IJob createJob() {
      return new IJob() {
        public IResult execute(final Iterable<IResource> input, final IMonitor monitor, final IVariablesPool pool) {
          Iterable<IResource> _output_ixz87t_a0b = null;
          switch (0) {
            case 0:
              if (DumbService.getInstance(pool.<Generator_Facet.Target_ixz87t_a.Variables>variables(new ITarget.Name("Parameters"), Generator_Facet.Target_ixz87t_a.Variables.class).project()).isDumb()) {
                DumbService.getInstance(pool.<Generator_Facet.Target_ixz87t_a.Variables>variables(new ITarget.Name("Parameters"), Generator_Facet.Target_ixz87t_a.Variables.class).project()).showDumbModeNotification("Generation is not available until indices are built.");
                return new IResult.FAILURE(_output_ixz87t_a0b);
              }
            default:
              return new IResult.SUCCESS(_output_ixz87t_a0b);
          }
        }
      };
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("Parameters")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return null;
    }

    public ITarget.Name getName() {
      return name;
    }

    public <T> T createVariables(Class<T> cls) {
      return null;
    }
  }

  public static class Target_ixz87t_c implements ITarget {
    private ITarget.Name name = new ITarget.Name("ConfigureGenerator");

    public Target_ixz87t_c() {
    }

    public IJob createJob() {
      return new IJob() {
        public IResult execute(final Iterable<IResource> input, final IMonitor monitor, final IVariablesPool pool) {
          Iterable<IResource> _output_ixz87t_a0c = null;
          switch (0) {
            case 0:
              GenerationSettings settings = GenerationSettings.getInstance();
              if (settings.isSaveTransientModels()) {
                switch (monitor.<SaveTransient_Option>relayQuery(new SaveTransientModels_Query())) {
                  case SAVE_ixz87t_a0a0c:
                    pool.<Generator_Facet.Target_ixz87t_c.Variables>variables(Target_ixz87t_c.this.getName(), Generator_Facet.Target_ixz87t_c.Variables.class).saveTransient(true);
                    break;
                  case DONT_SAVE_ixz87t_b0a0c:
                    pool.<Generator_Facet.Target_ixz87t_c.Variables>variables(Target_ixz87t_c.this.getName(), Generator_Facet.Target_ixz87t_c.Variables.class).saveTransient(false);
                    break;
                  case BUGGER_OFF_ixz87t_c0a0c:
                    monitor.<rrr_Option>relayQuery(new WontAskAgain_Query());
                    pool.<Generator_Facet.Target_ixz87t_c.Variables>variables(Target_ixz87t_c.this.getName(), Generator_Facet.Target_ixz87t_c.Variables.class).saveTransient(false);
                    settings.setSaveTransientModels(false);
                    break;
                  default:
                    return new IResult.FAILURE(_output_ixz87t_a0c);
                }
                GenerationStrategy strategy = null;
                if (settings.isIncremental()) {
                  strategy = new GenerationStrategy((settings.isIncrementalUseCache() ?
                    GeneratorCacheComponent.getInstance().getCache() :
                    null
                  ));
                }
                IGenerationTracer tracer = (pool.<Generator_Facet.Target_ixz87t_c.Variables>variables(Target_ixz87t_c.this.getName(), Generator_Facet.Target_ixz87t_c.Variables.class).saveTransient() ?
                  pool.<Generator_Facet.Target_ixz87t_a.Variables>variables(new ITarget.Name("Parameters"), Generator_Facet.Target_ixz87t_a.Variables.class).project().getComponent(GenerationTracer.class) :
                  new NullGenerationTracer()
                );
                pool.<Generator_Facet.Target_ixz87t_c.Variables>variables(Target_ixz87t_c.this.getName(), Generator_Facet.Target_ixz87t_c.Variables.class).generationOptions(GenerationOptions.getDefaults().saveTransientModels(pool.<Generator_Facet.Target_ixz87t_c.Variables>variables(Target_ixz87t_c.this.getName(), Generator_Facet.Target_ixz87t_c.Variables.class).saveTransient()).strictMode(settings.isStrictMode()).incremental(strategy).generateInParallel(settings.isParallelGenerator(), settings.getNumberOfParallelThreads()).tracing(settings.getPerformanceTracingLevel(), tracer).reporting(settings.isShowInfo(), settings.isShowWarnings(), settings.isKeepModelsWithWarnings(), settings.getNumberOfModelsToKeep()));
                return new IResult.SUCCESS(_output_ixz87t_a0c);
              }
            default:
              return new IResult.SUCCESS(_output_ixz87t_a0c);
          }
        }
      };
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("Parameters"), new ITarget.Name("CheckDumbMode")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return null;
    }

    public ITarget.Name getName() {
      return name;
    }

    public <T> T createVariables(Class<T> cls) {
      return cls.cast(new Variables());
    }

    public static class Variables extends MultiTuple._3<Boolean, GenerationStrategy, GenerationOptions.OptionsBuilder> {
      public Variables() {
        super();
      }

      public Variables(Boolean saveTransient, GenerationStrategy generationStrategy, GenerationOptions.OptionsBuilder generationOptions) {
        super(saveTransient, generationStrategy, generationOptions);
      }

      public Boolean saveTransient(Boolean value) {
        return super._0(value);
      }

      public GenerationStrategy generationStrategy(GenerationStrategy value) {
        return super._1(value);
      }

      public GenerationOptions.OptionsBuilder generationOptions(GenerationOptions.OptionsBuilder value) {
        return super._2(value);
      }

      public Boolean saveTransient() {
        return super._0();
      }

      public GenerationStrategy generationStrategy() {
        return super._1();
      }

      public GenerationOptions.OptionsBuilder generationOptions() {
        return super._2();
      }

      @SuppressWarnings(value = "unchecked")
      public Generator_Facet.Target_ixz87t_c.Variables assignFrom(Tuples._3<Boolean, GenerationStrategy, GenerationOptions.OptionsBuilder> from) {
        return (Generator_Facet.Target_ixz87t_c.Variables) super.assign(from);
      }
    }
  }

  public static class Target_ixz87t_d implements ITarget {
    private ITarget.Name name = new ITarget.Name("GenerateFiles");

    public Target_ixz87t_d() {
    }

    public IJob createJob() {
      return new IJob() {
        public IResult execute(final Iterable<IResource> input, final IMonitor monitor, final IVariablesPool pool) {
          Iterable<IResource> _output_ixz87t_a0d = null;
          switch (0) {
            case 0:
              if (pool.<Generator_Facet.Target_ixz87t_d.Variables>variables(Target_ixz87t_d.this.getName(), Generator_Facet.Target_ixz87t_d.Variables.class).options() == null) {
                Logger.getLogger("jetbrains.mps.make.Generator").error("no options");
                return new IResult.FAILURE(_output_ixz87t_a0d);
              }
              ModelAccess.instance().runWriteActionInCommand(new Runnable() {
                public void run() {
                  SModelRepository.getInstance().saveAll();
                }
              });
              MessagesViewTool mvt = pool.<Generator_Facet.Target_ixz87t_a.Variables>variables(new ITarget.Name("Parameters"), Generator_Facet.Target_ixz87t_a.Variables.class).project().getComponent(MessagesViewTool.class);
              if (mvt != null) {
                mvt.openToolLater(false);
              }
              IdeEventQueue.getInstance().flushQueue();
              final Wrappers._boolean generationOk = new Wrappers._boolean();
              ModelAccess.instance().runWriteActionWithProgressSynchronously(new Progressive() {
                public void run(ProgressIndicator ind) {
                  GeneratorManager gm = pool.<Generator_Facet.Target_ixz87t_a.Variables>variables(new ITarget.Name("Parameters"), Generator_Facet.Target_ixz87t_a.Variables.class).project().getComponent(GeneratorManager.class);
                  if (!(pool.<Generator_Facet.Target_ixz87t_c.Variables>variables(new ITarget.Name("ConfigureGenerator"), Generator_Facet.Target_ixz87t_c.Variables.class).saveTransient())) {
                    pool.<Generator_Facet.Target_ixz87t_a.Variables>variables(new ITarget.Name("Parameters"), Generator_Facet.Target_ixz87t_a.Variables.class).project().getComponent(GenerationTracer.class).discardTracing();
                  }
                  generationOk.value = gm.generateModels(null, null, null, ind, new DefaultMessageHandler(pool.<Generator_Facet.Target_ixz87t_a.Variables>variables(new ITarget.Name("Parameters"), Generator_Facet.Target_ixz87t_a.Variables.class).project()), pool.<Generator_Facet.Target_ixz87t_d.Variables>variables(Target_ixz87t_d.this.getName(), Generator_Facet.Target_ixz87t_d.Variables.class).options());
                }
              }, "Generation", true, pool.<Generator_Facet.Target_ixz87t_a.Variables>variables(new ITarget.Name("Parameters"), Generator_Facet.Target_ixz87t_a.Variables.class).project());
              if (!(generationOk.value)) {
                return new IResult.FAILURE(_output_ixz87t_a0d);
              }
            default:
              return new IResult.SUCCESS(_output_ixz87t_a0d);
          }
        }
      };
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("ConfigureGenerator"), new ITarget.Name("Parameters")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return null;
    }

    public ITarget.Name getName() {
      return name;
    }

    public <T> T createVariables(Class<T> cls) {
      return cls.cast(new Variables());
    }

    public static class Variables extends MultiTuple._1<GenerationOptions> {
      public Variables() {
        super();
      }

      public Variables(GenerationOptions options) {
        super(options);
      }

      public GenerationOptions options(GenerationOptions value) {
        return super._0(value);
      }

      public GenerationOptions options() {
        return super._0();
      }

      @SuppressWarnings(value = "unchecked")
      public Generator_Facet.Target_ixz87t_d.Variables assignFrom(Tuples._1<GenerationOptions> from) {
        return (Generator_Facet.Target_ixz87t_d.Variables) super.assign(from);
      }
    }
  }
}
