package jetbrains.mps.make.facet.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.IOperationContext;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.internal.make.runtime.script.ScriptBuilder;
import jetbrains.mps.internal.make.runtime.script.UIQueryRelayStrategy;
import jetbrains.mps.internal.make.runtime.script.LoggingProgressStrategy;
import jetbrains.mps.internal.make.runtime.script.LoggingFeedbackStrategy;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.script.IProgress;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.make.script.IOption;
import jetbrains.mps.make.script.IQuery;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.facet.IFacet;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.make.script.IParametersPool;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import com.intellij.openapi.project.Project;
import jetbrains.mps.make.script.IMonitors;
import com.intellij.ide.IdeEventQueue;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.progress.Progressive;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.ide.actions.ModelCheckerTool_Tool;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;

public class MakeModel_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(MakeModel_Action.class);

  private IOperationContext context;
  private List<SModelDescriptor> models;

  public MakeModel_Action() {
    super("_Make", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "MakeModel", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.context = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.context == null) {
      return false;
    }
    this.models = event.getData(MPSDataKeys.MODELS);
    return true;
  }

  protected void cleanup() {
    super.cleanup();
    this.context = null;
    this.models = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      ScriptBuilder scb = new ScriptBuilder();
      final UIQueryRelayStrategy relayStrat = new UIQueryRelayStrategy();
      final LoggingProgressStrategy logStrat = new LoggingProgressStrategy();
      final LoggingFeedbackStrategy feedbackStrat = new LoggingFeedbackStrategy();
      final IJobMonitor jmon = new IJobMonitor() {
        public boolean pleaseStop() {
          return false;
        }

        public IProgress currentProgress() {
          return logStrat.currentProgress();
        }
      };
      final IConfigMonitor cmon = new IConfigMonitor() {
        public <T extends IOption> T relayQuery(IQuery<T> query) {
          return relayStrat.relayQuery(query, MakeModel_Action.this.context);
        }
      };
      final IScript scr = scb.withFacets(new IFacet.Name("Generator"), new IFacet.Name("TextGen"), new IFacet.Name("JavaCompilator"), new IFacet.Name("Make")).withTarget(new ITarget.Name("make")).withInit(new _FunctionTypes._void_P1_E0<IParametersPool>() {
        public void invoke(IParametersPool pool) {
          Tuples._3<Project, IOperationContext, Iterable<SModelDescriptor>> vars = (Tuples._3<Project, IOperationContext, Iterable<SModelDescriptor>>) pool.parameters(new ITarget.Name("Parameters"), Object.class);
          vars._0(MakeModel_Action.this.context.getProject());
          vars._1(MakeModel_Action.this.context);
          vars._2(MakeModel_Action.this.models);
        }
      }).withMonitors(new IMonitors.Stub(cmon, jmon) {
        @Override
        public void runJobWithMonitor(final _FunctionTypes._void_P1_E0<? super IJobMonitor> code) {
          IdeEventQueue.getInstance().flushQueue();
          ModelAccess.instance().runWriteActionWithProgressSynchronously(new Progressive() {
            public void run(ProgressIndicator realInd) {
              code.invoke(jmon);
            }
          }, "Script", true, MakeModel_Action.this.context.getProject());
        }
      }).toScript();
      if (!(scr.isValid())) {
        return;
      }

      // save all before launching the script 
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          SModelRepository.getInstance().saveAll();
        }
      });

      final Wrappers._T<IResult> res = new Wrappers._T<IResult>();

      ModelCheckerTool_Tool mct = MakeModel_Action.this.context.getProject().getComponent(ProjectPluginManager.class).getTool(ModelCheckerTool_Tool.class);
      if (mct.checkModelsBeforeGenerationIfNeeded(MakeModel_Action.this.context, MakeModel_Action.this.models, new Runnable() {
        public void run() {
          res.value = scr.execute();
        }
      })) {
        //  this is insanity! really call this _again_? 
        new _FunctionTypes._return_P0_E0<IResult>() {
          public IResult invoke() {
            return res.value = scr.execute();
          }
        }.invoke();
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "MakeModel", t);
    }
  }
}
