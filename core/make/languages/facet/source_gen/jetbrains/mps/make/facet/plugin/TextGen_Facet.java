package jetbrains.mps.make.facet.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IMonitor;
import jetbrains.mps.make.script.IVariablesPool;
import jetbrains.mps.internal.make.runtime.java.FileProcessor;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.internal.make.runtime.java.JavaStreamHandler;
import jetbrains.mps.generator.ModelGenerationStatusManager;
import jetbrains.mps.baseLanguage.textGen.BLDependenciesCache;
import jetbrains.mps.generator.traceInfo.TraceInfoCache;
import jetbrains.mps.generator.impl.dependencies.GenerationDependenciesCache;
import jetbrains.mps.generator.generationTypes.TextGenerator;

public class TextGen_Facet implements IFacet {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("TextGen");

  public TextGen_Facet() {
    ListSequence.fromList(targets).addElement(new TextGen_Facet.Target_21gswx_a());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return null;
  }

  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("Generator"), new IFacet.Name("Make")});
  }

  public Iterable<IFacet.Name> extended() {
    return null;
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public static class Target_21gswx_a implements ITarget {
    private ITarget.Name name = new ITarget.Name("TextGen");

    public Target_21gswx_a() {
    }

    public IJob createJob() {
      return new IJob() {
        public IResult execute(final Iterable<IResource> input, final IMonitor monitor, final IVariablesPool pool) {
          Iterable<IResource> _output_21gswx_a0a = null;
          switch (0) {
            case 0:
              FileProcessor fileProc = new FileProcessor();
              for (IResource resource : input) {
                GResource gr = (GResource) resource;
                if (!(gr.data.status().isOk())) {
                  Logger.getLogger("jetbrains.mps.make.TextGen").error("Generation was not OK");
                  return new IResult.FAILURE(_output_21gswx_a0a);
                }
                IFile targetDir = FileSystem.getInstance().getFileByPath(gr.data.module().getOutputFor(gr.data.model()));
                JavaStreamHandler javaStreamHandler = new JavaStreamHandler(gr.data.model(), targetDir, fileProc);
                try {
                  ModelGenerationStatusManager mgsm = ModelGenerationStatusManager.getInstance();
                  BLDependenciesCache bldc = BLDependenciesCache.getInstance();
                  TraceInfoCache tic = TraceInfoCache.getInstance();
                  GenerationDependenciesCache gdc = GenerationDependenciesCache.getInstance();
                  if (mgsm == null || bldc == null || tic == null || gdc == null) {
                    Logger.getLogger("jetbrains.mps.make.TextGen").error("Something's wrong" + mgsm + bldc + tic + gdc);
                  }
                  if (!(new TextGenerator(javaStreamHandler, mgsm.getCacheGenerator(), bldc.getGenerator(), tic.getGenerator(), gdc.getGenerator()).handleOutput(pool.<Generator_Facet.Target_ixz87t_a.Variables>variables(new ITarget.Name("Parameters"), Generator_Facet.Target_ixz87t_a.Variables.class).operationContext(), gr.data.status()))) {
                    Logger.getLogger("jetbrains.mps.make.TextGen").error("TextGenerator returned false");
                    return new IResult.FAILURE(_output_21gswx_a0a);
                  }
                  _output_21gswx_a0a = Sequence.fromIterable(_output_21gswx_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(gr)));
                } finally {
                  javaStreamHandler.dispose();
                }
              }
              fileProc.saveGeneratedFiles();
              Logger.getLogger("jetbrains.mps.make.TextGen").error("TextGen completed");
            default:
              return new IResult.SUCCESS(_output_21gswx_a0a);
          }
        }
      };
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("GenerateFiles"), new ITarget.Name("Parameters")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("make")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public <T> T createVariables(Class<T> cls) {
      return null;
    }
  }
}
