package jetbrains.mps.make.facet.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class FacetDeclaration_Behavior {
  public static void init(SNode thisNode) {
  }

  public static Iterable<SNode> call_allExtends_7854369758457864780(SNode thisNode) {
    Set<SNode> result = SetSequence.fromSet(new LinkedHashSet<SNode>());
    Queue<SNode> queue = QueueSequence.fromQueueAndArray(new LinkedList<SNode>(), thisNode);
    while (QueueSequence.fromQueue(queue).isNotEmpty()) {
      SNode fd = QueueSequence.fromQueue(queue).removeFirstElement();
      if (!(SetSequence.fromSet(result).contains(fd))) {
        SetSequence.fromSet(result).addElement(fd);
        QueueSequence.fromQueue(queue).addSequence(ListSequence.fromList(SLinkOperations.getTargets(fd, "extended", true)).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, "facet", false);
          }
        }));
      }
    }
    return result;
  }

  public static Iterable<SNode> call_allRelated_8351679702044331818(SNode thisNode) {
    Set<SNode> result = SetSequence.fromSet(new LinkedHashSet<SNode>());
    Queue<SNode> queue = QueueSequence.fromQueueAndArray(new LinkedList<SNode>(), thisNode);
    while (QueueSequence.fromQueue(queue).isNotEmpty()) {
      SNode fd = QueueSequence.fromQueue(queue).removeFirstElement();
      if (!(SetSequence.fromSet(result).contains(fd))) {
        SetSequence.fromSet(result).addElement(fd);
        QueueSequence.fromQueue(queue).addSequence(ListSequence.fromList(SLinkOperations.getTargets(fd, "required", true)).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, "facet", false);
          }
        }));
        QueueSequence.fromQueue(queue).addSequence(ListSequence.fromList(SLinkOperations.getTargets(fd, "optional", true)).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, "facet", false);
          }
        }));
      }
    }
    return result;
  }
}
