package jetbrains.mps.debug.apiLang.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class SplitTraceInfoAndDebugInfo_MigrationScript extends BaseMigrationScript {
  public SplitTraceInfoAndDebugInfo_MigrationScript(IOperationContext operationContext) {
    super("Split Trace Info And Debug Info");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Split Trace Info And Debug Info";
      }

      public String getAdditionalInfo() {
        return "Split Trace Info And Debug Info";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.plugin.structure.DebugInfoInitializer";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return ListSequence.fromList(SLinkOperations.getTargets(node, "conceptsToDebug", true)).isNotEmpty();
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode debugInfoProvider = SConceptOperations.createNewNode("jetbrains.mps.debug.apiLang.structure.DebugInfoProvider", null);
        SModelOperations.addRootNode(SNodeOperations.getModel(node), debugInfoProvider);
        for (SNode conceptToDebug : ListSequence.fromList(SLinkOperations.getTargets(node, "conceptsToDebug", true))) {
          ListSequence.fromList(SLinkOperations.getTargets(debugInfoProvider, "breakpointableConcepts", true)).addElement(new SplitTraceInfoAndDebugInfo_MigrationScript.QuotationClass_f4zljy_a0a0a0c0e0a0a0b0a().createNode(SLinkOperations.getTarget(SLinkOperations.getTarget(conceptToDebug, "createBreakpoint", true), "body", true), SLinkOperations.getTarget(conceptToDebug, "declaration", false), SLinkOperations.getTarget(conceptToDebug, "declaration", false)));
          SNodeOperations.deleteNode(SLinkOperations.getTarget(conceptToDebug, "createBreakpoint", true));
        }
        for (SNode projectRef : ListSequence.fromList(SNodeOperations.getDescendants(debugInfoProvider, "jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_Debug_Project", false, new String[]{}))) {
          SNodeOperations.replaceWithAnother(projectRef, SConceptOperations.createNewNode("jetbrains.mps.debug.apiLang.structure.ConceptFunctionParameter_Debug_Project", null));
        }
        for (SNode nodeRef : ListSequence.fromList(SNodeOperations.getDescendants(debugInfoProvider, "jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_DebuggableNode", false, new String[]{}))) {
          SNodeOperations.replaceWithAnother(nodeRef, SConceptOperations.createNewNode("jetbrains.mps.debug.apiLang.structure.ConceptFunctionParameter_DebuggableNode", null));
        }

      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }

  public static class QuotationClass_f4zljy_a0a0a0c0e0a0a0b0a {
    public QuotationClass_f4zljy_a0a0a0c0e0a0a0b0a() {
    }

    public SNode createNode(Object parameter_9, Object parameter_10, Object parameter_11) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.debug.apiLang.structure.BreakpointableNodeItem", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_5 = quotedNode_1;
        quotedNode1_5.setReferent("declaration", (SNode) parameter_10);
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.debug.apiLang.structure.ConceptFunction_CreateBreakpoint", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_6 = quotedNode_2;
          {
            quotedNode_4 = (SNode) parameter_9;
            SNode quotedNode1_7;
            if (_parameterValues_129834374.contains(quotedNode_4)) {
              quotedNode1_7 = CopyUtil.copy(quotedNode_4);
            } else {
              _parameterValues_129834374.add(quotedNode_4);
              quotedNode1_7 = quotedNode_4;
            }
            if (quotedNode1_7 != null) {
              quotedNode_2.addChild("body", HUtil.copyIfNecessary(quotedNode1_7));
            }
          }
          quotedNode_1.addChild("createBreakpoint", quotedNode1_6);
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.debug.apiLang.structure.ConceptDeclarationReference", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_8 = quotedNode_3;
          quotedNode1_8.setReferent("conceptDeclaration", (SNode) parameter_11);
          quotedNode_1.addChild("conceptsToCreateBreakpoint", quotedNode1_8);
        }
        result = quotedNode1_5;
      }
      return result;
    }
  }
}
