package jetbrains.mps.kernel.model;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.project.AbstractModule;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.module.ReloadableModule;
import org.jetbrains.mps.openapi.module.SearchScope;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.extapi.model.SModelBase;
import jetbrains.mps.smodel.SModelOperations;

/**
 * Methods of this class shall be invoked within command/model write lock
 */
public class MissingDependenciesFixer {
  private final SModel myModel;

  public MissingDependenciesFixer(@NotNull SModel modelDescriptor) {
    myModel = modelDescriptor;
  }

  public void fixModuleDependencies() {
    fixDependencies(false);
  }

  public void fixAllDependencies() {
    fixDependencies(true);
  }

  private void fixDependencies(boolean fixImplicit) {
    SRepository repository = myModel.getRepository();
    assert repository != null;
    AbstractModule module = (AbstractModule) myModel.getModule();
    assert module != null;

    List<SModelReference> existingImports = getExistingImports(fixImplicit);
    fixImports(module, existingImports);
    if (module instanceof ReloadableModule) {
      ((ReloadableModule) module).reload();
    }
  }

  private void fixImports(@NotNull AbstractModule module, List<SModelReference> importsToAdd) {
    SRepository repository = module.getRepository();
    SearchScope moduleScope = module.getScope();
    for (SModelReference modelImport : importsToAdd) {
      if (moduleScope.resolve(modelImport) != null) {
        continue;
      }
      SModel sm = modelImport.resolve(repository);
      if (sm == null) {
        continue;
      }
      SModule anotherModule = sm.getModule();
      if (anotherModule == null || anotherModule == module) {
        continue;
      }
      module.addDependency(anotherModule.getModuleReference(), false);
    }
  }

  private List<SModelReference> getExistingImports(boolean implicit) {
    List<SModelReference> models = ListSequence.fromList(new ArrayList<SModelReference>());

    if (implicit) {
      if (myModel instanceof SModelBase) {
        for (jetbrains.mps.smodel.SModel.ImportElement impElem : SModelOperations.getAllImportElements(((SModelBase) myModel).getSModel())) {
          ListSequence.fromList(models).addElement(impElem.getModelReference());
        }
      }
    } else {
      ListSequence.fromList(models).addSequence(ListSequence.fromList(SModelOperations.getImportedModelUIDs(myModel)));
    }
    return models;
  }

}
