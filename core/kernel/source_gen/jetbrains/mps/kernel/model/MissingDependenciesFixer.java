package jetbrains.mps.kernel.model;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.Set;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.classloading.ClassLoaderManager;
import java.util.Arrays;
import jetbrains.mps.progress.EmptyProgressMonitor;
import org.jetbrains.mps.openapi.module.SearchScope;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.smodel.SModelRepository;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.util.CollectionUtil;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ScopeOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.DevKit;

public class MissingDependenciesFixer {
  private static Logger LOG = Logger.getLogger(MissingDependenciesFixer.class);

  private SModel myModel;

  public MissingDependenciesFixer(SModel modelDescriptor) {
    myModel = modelDescriptor;
  }



  @Deprecated
  public void fix() {
    fixDependencies(myModel);
  }



  @Deprecated
  public void fix(final boolean reload) {
    fixDependencies(myModel);
  }



  public static void fixDependencies(final SModel model) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        AbstractModule module = (AbstractModule) model.getModule();
        if (module == null) {
          LOG.error("Module is null: " + model.getReference().toString());
          return;
        }
        SRepository repository = module.getRepository();
        if (repository == null) {
          LOG.error("Repository is null: " + model.getReference().toString());
          return;
        }

        Set<SModule> unloadedModules = ClassLoaderManager.getInstance().unloadClasses(Arrays.asList(module), new EmptyProgressMonitor());

        SearchScope moduleScope = module.getModuleScope();
        for (SModelReference modelImport : SModelOperations.getImportedModelUIDs(model)) {
          if (moduleScope.resolve(modelImport) != null) {
            continue;
          }
          SModel sm = modelImport.resolve(repository);
          if (sm == null) {
            sm = (modelImport.getModelName() != null ?
              SModelRepository.getInstance().getModelDescriptor(modelImport.getModelName()) :
              null
            );
            if (sm == null) {
              continue;
            }
          }
          SModule anotherModule = sm.getModule();
          if (anotherModule == null || anotherModule == module) {
            continue;
          }
          module.addDependency(anotherModule.getModuleReference(), false);
        }
        for (SModuleReference namespace : CollectionUtil.union(((SModelInternal) model).importedLanguages(), ((SModelInternal) model).engagedOnGenerationLanguages())) {
          if (moduleScope.resolve(namespace) instanceof Language) {
            continue;
          }
          Language lang = ScopeOperations.resolveModule(GlobalScope.getInstance(), namespace, Language.class);
          if (lang == null) {
            continue;
          }
          SModuleReference ref = ModuleReference.fromString(namespace.toString());
          module.addUsedLanguage(ref);
        }
        for (SModuleReference devKitNamespace : ((SModelInternal) model).importedDevkits()) {
          if (moduleScope.resolve(devKitNamespace) instanceof DevKit) {
            continue;
          }
          DevKit devKit = ScopeOperations.resolveModule(GlobalScope.getInstance(), devKitNamespace, DevKit.class);
          if (devKit == null) {
            continue;
          }
          SModuleReference ref = ModuleReference.fromString(devKitNamespace.toString());
          module.addUsedDevkit(ref);
        }

        ClassLoaderManager.getInstance().loadClasses(unloadedModules, new EmptyProgressMonitor());
      }
    });
  }
}
