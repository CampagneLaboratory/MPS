package jetbrains.mps.kernel.model;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.classloading.ClassLoaderManager;
import java.util.Collections;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.smodel.SModelRepository;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.util.CollectionUtil;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ScopeOperations;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.extapi.model.SModelBase;
import jetbrains.mps.smodel.SModelOperations;

public class MissingDependenciesFixer {
  private SModel myModel;

  public MissingDependenciesFixer(SModel modelDescriptor) {
    myModel = modelDescriptor;
  }

  public void fixModuleDependencies() {
    fixDependencies(false);
  }

  public void fixAllDependencies() {
    fixDependencies(true);
  }

  private void fixDependencies(final boolean fixImplicit) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        AbstractModule module = (AbstractModule) myModel.getModule();
        assert module != null;
        SRepository repository = module.getRepository();
        assert repository != null;


        List<SModelReference> existingImports = getExistingImports(fixImplicit);
        fixImports(module, existingImports);
        fixLangs(module);
        fixDevKits(module);
        ClassLoaderManager.getInstance().reloadModules(Collections.singleton(module));
      }
    });
  }

  private void fixImports(@NotNull AbstractModule module, List<SModelReference> importsToAdd) {
    SRepository repository = module.getRepository();
    SearchScope moduleScope = module.getScope();
    for (SModelReference modelImport : importsToAdd) {
      if (moduleScope.resolve(modelImport) != null) {
        continue;
      }
      SModel sm = modelImport.resolve(repository);
      if (sm == null) {
        sm = (modelImport.getModelName() != null ? SModelRepository.getInstance().getModelDescriptor(modelImport.getModelName()) : null);
        if (sm == null) {
          continue;
        }
      }
      SModule anotherModule = sm.getModule();
      if (anotherModule == null || anotherModule == module) {
        continue;
      }
      module.addDependency(anotherModule.getModuleReference(), false);
    }
  }

  private void fixLangs(@NotNull AbstractModule module) {
    SearchScope moduleScope = module.getScope();
    for (SModuleReference namespace : CollectionUtil.union(((SModelInternal) myModel).importedLanguages(), ((SModelInternal) myModel).engagedOnGenerationLanguages())) {
      if (moduleScope.resolve(namespace) instanceof Language) {
        continue;
      }
      Language lang = ScopeOperations.resolveModule(GlobalScope.getInstance(), namespace, Language.class);
      if (lang == null) {
        continue;
      }
      SModuleReference ref = PersistenceFacade.getInstance().createModuleReference(namespace.toString());
      module.addUsedLanguage(ref);
    }
  }

  private void fixDevKits(@NotNull AbstractModule module) {
    SearchScope moduleScope = module.getScope();
    for (SModuleReference devKitNamespace : ((SModelInternal) myModel).importedDevkits()) {
      if (moduleScope.resolve(devKitNamespace) instanceof DevKit) {
        continue;
      }
      DevKit devKit = ScopeOperations.resolveModule(GlobalScope.getInstance(), devKitNamespace, DevKit.class);
      if (devKit == null) {
        continue;
      }
      SModuleReference ref = PersistenceFacade.getInstance().createModuleReference(devKitNamespace.toString());
      module.addUsedDevkit(ref);
    }
  }

  private List<SModelReference> getExistingImports(boolean implicit) {
    List<SModelReference> models = ListSequence.fromList(new ArrayList<SModelReference>());

    if (implicit) {
      if (myModel instanceof SModelBase) {
        for (jetbrains.mps.smodel.SModel.ImportElement impElem : SModelOperations.getAllImportElements(((SModelBase) myModel).getSModel())) {
          ListSequence.fromList(models).addElement(impElem.getModelReference());
        }
      }
    } else {
      ListSequence.fromList(models).addSequence(ListSequence.fromList(SModelOperations.getImportedModelUIDs(myModel)));
    }
    return models;
  }

}
