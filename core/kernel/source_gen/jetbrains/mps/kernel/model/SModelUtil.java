package jetbrains.mps.kernel.model;

/*Generated by MPS */

import com.intellij.openapi.util.Computable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.nodeEditor.NodeReadAccessCaster;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.annotations.NotNull;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class SModelUtil {
  private static Logger LOG = Logger.getLogger(SModelUtil.class);
  private static Map<String, SNode> myFQNameToConcepDecl = new HashMap<String, SNode>();
  private static Map<String, Language> myConceptToLanguage = new HashMap<String, Language>();

  public static void invalidateCaches() {
    myFQNameToConcepDecl.clear();
    myConceptToLanguage.clear();
  }

  public static SNode findConceptDeclaration(final String conceptFQName, final IScope scope) {
    SNode cd = myFQNameToConcepDecl.get(conceptFQName);
    if (cd != null) {
      return cd;
    }
    if (conceptFQName.equals("jetbrains.mps.smodel.structure.ModelPersistence$UnknownSNode")) {
      return null;
    }
    return NodeReadAccessCaster.runReadTransparentAction(new Computable <SNode>() {

      public SNode compute() {
        String languageNamespace = NameUtil.namespaceFromConceptFQName(conceptFQName);
        Language language = scope.getLanguage(languageNamespace);
        if (language == null) {
          return null;
        }
        String conceptName = NameUtil.shortNameFromLongName(conceptFQName);
        AbstractConceptDeclaration resultAdapter = language.findConceptDeclaration(conceptName);
        SNode result = (resultAdapter == null ?
          null :
          ((SNode)resultAdapter.getNode())
        );
        myFQNameToConcepDecl.put(conceptFQName, result);
        return result;
      }
    });
  }

  public static SNode getConceptLinkTarget(SNode link) {
    if (SNodeOperations.isInstanceOf(link, "jetbrains.mps.lang.structure.structure.ReferenceConceptLink")) {
      return SLinkOperations.getTarget(((SNode)link), "target", false);
    }
    return SLinkOperations.getTarget(((SNode)link), "target", true);
  }

  public static SNode getBaseConcept() {
    return SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept");
  }

  public static Language getDeclaringLanguage(String conceptFQName, @NotNull() IScope scope) {
    Language l = myConceptToLanguage.get(conceptFQName);
    if (l != null) {
      return l;
    }
    String languageNamespace = NameUtil.namespaceFromConceptFQName(conceptFQName);
    if (languageNamespace == null) {
      return null;
    }
    l = scope.getLanguage(languageNamespace);
    if (l != null) {
      myConceptToLanguage.put(conceptFQName, l);
    }
    return l;
  }

  public static SNode getGenuineLinkDeclaration(SNode linkDeclaration) {
    while (linkDeclaration != null && SLinkOperations.getTarget(linkDeclaration, "specializedLink", false) != null) {
      linkDeclaration = SLinkOperations.getTarget(linkDeclaration, "specializedLink", false);
    }
    return linkDeclaration;
  }

  public static List<SNode> getDirectInterfacesAndTheirSupers(SNode concept) {
    Set<SNode> result = SetSequence.<SNode>fromArray();
    for(SNode superConcept : ListSequence.fromList(getDirectSuperConcepts(concept))) {
      if (SNodeOperations.isInstanceOf(superConcept, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration") && !(SetSequence.fromSet(result).contains(superConcept))) {
        for(AbstractConceptDeclaration adapter : ListSequence.fromList(new ConceptAndSuperConceptsScope(((AbstractConceptDeclaration)SNodeOperations.getAdapter(superConcept))).getConcepts())) {
          SetSequence.fromSet(result).addElement(adapter.getNode());
        }
      }
    }
    return ListSequence.<SNode>fromArray();
  }

  public static List<SNode> getDirectSuperConcepts(SNode concept) {
    List<SNode> result = ListSequence.<SNode>fromArray();
    if (SNodeOperations.isInstanceOf(concept, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
      SNode conceptDecl = (SNode)concept;
      SNode extended = SLinkOperations.getTarget(conceptDecl, "extends", false);
      if (extended != null) {
        ListSequence.fromList(result).addElement(extended);
      }
      for(SNode ref : ListSequence.fromList(SLinkOperations.getTargets(conceptDecl, "implements", true))) {
        if (SLinkOperations.getTarget(ref, "intfc", false) != null) {
          ListSequence.fromList(result).addElement(SLinkOperations.getTarget(ref, "intfc", false));
        }
      }
    } else
    {
      SNode intConceptDecl = (SNode)concept;
      for(SNode ref : ListSequence.fromList(SLinkOperations.getTargets(intConceptDecl, "extends", true))) {
        if (SLinkOperations.getTarget(ref, "intfc", false) != null) {
          ListSequence.fromList(result).addElement(SLinkOperations.getTarget(ref, "intfc", false));
        }
      }
    }
    return result;
  }

}
