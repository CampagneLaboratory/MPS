package jetbrains.mps.reloading;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.progress.SubProgressKind;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.logging.Logger;

public class ReloadSession {
  private final Set<IReloadListener> myReloadListeners;
  private boolean myReloaded = false;
  private Set<IFileProcessor> myFileProcessors = SetSequence.fromSet(new HashSet<IFileProcessor>());

  public ReloadSession(Set<IReloadListener> reloadListeners, Set<IFileProcessor> processors) {
    myReloadListeners = SetSequence.fromSetWithValues(new HashSet<IReloadListener>(), reloadListeners);
    myFileProcessors = SetSequence.fromSetWithValues(new HashSet<IFileProcessor>(), processors);
  }



  public ReloadSession(Set<IReloadListener> reloadListeners) {
    this(reloadListeners, null);
  }

  public void addProcessor(IFileProcessor processor) {
    SetSequence.fromSet(myFileProcessors).addElement(processor);
  }



  public IFileProcessor[] getProcessors() {
    return SetSequence.fromSet(myFileProcessors).toGenericArray(IFileProcessor.class);
  }

  public boolean isEmpty() {
    for (IFileProcessor p : getProcessors()) {
      if (!(p.isEmpty())) {
        return false;
      }
    }
    return true;

  }

  public void doReload(final ProgressMonitor monitor) {
    assert !(myReloaded) : "Contract: do not call doReload twice on one reload session";
    myReloaded = true;

    monitor.start("Reloading ...", 2);
    fireReloadStarted();
    try {
      ModelAccess.instance().runWriteAction(new Runnable() {
        public void run() {
          int work = 1;
          for (IFileProcessor fileProcessor : getProcessors()) {
            fileProcessor.update(monitor.subTask(work++, SubProgressKind.REPLACING));
          }

          if (ClassLoaderManager.getInstance().isReloadRequested()) {
            monitor.subTask(1, SubProgressKind.REPLACING).start("Reloading classes... Please wait.", 1);
            ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
          }
        }
      });
    } finally {
      LOG.info("Reload finished.");
      monitor.done();
      fireReloadFinished();
    }
  }

  private void fireReloadStarted() {
    for (IReloadListener l : myReloadListeners) {
      l.reloadStarted();
    }
  }

  private void fireReloadFinished() {
    for (IReloadListener l : myReloadListeners) {
      l.reloadFinished();
    }
  }

  private static Logger LOG = Logger.getLogger(ReloadSession.class);
}
