package jetbrains.mps.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.ModelAccess;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.apiadapter.SConceptNodeAdapter;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.project.GlobalScope;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SNodeBase;

public class SNodeOperations {
  public SNodeOperations() {
  }

  public static boolean isAncestor(SNode ancestor, SNode node) {
    ModelAccess.assertLegalRead();
    if (ancestor == node) {
      return true;
    }
    SNode parentOfChild = node.getParent();
    if (parentOfChild == null) {
      return false;
    }
    return isAncestor(ancestor, parentOfChild);
  }

  public static List<SNode> getChildren(SNode node, boolean includeAttributes) {
    List<SNode> children = ((List<SNode>) node.getChildren());
    if (includeAttributes) {
      return (children);
    }
    List<SNode> res = new ArrayList<SNode>();
    for (SNode child : children) {
      if (child != null && AttributeOperations.isAttribute(child)) {
        res.add(child);
      }
    }
    return res;
  }

  /**
   * todo rewrite via ISNode methods
   */
  public static Iterable<SNode> getDescendants(SNode node, Condition<SNode> cond, boolean includeFirst) {
    return ((Iterable) ((jetbrains.mps.smodel.SNode) node).getDescendantsIterable(((Condition) cond), includeFirst));
  }

  public static SNode findParent(SNode node, Condition<SNode> condition) {
    SNode parent = node.getParent();
    while (parent != null) {
      if (condition.met(parent)) {
        return parent;
      }
      parent = parent.getParent();
    }
    return null;
  }

  public static Map<String, String> getProperties(SNode node) {
    final Map<String, String> result = new HashMap<String, String>();
    node.visitProperties(new SNode.PropertyVisitor() {
      public boolean visitProperty(String name, String value) {
        result.put(name, value);
        return true;
      }
    });
    return result;
  }

  public static List<SNode> getDescendants(SNode node, Condition<SNode> condition) {
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    collectDescendants(node, res, condition);
    return res;
  }

  private static void collectDescendants(SNode node, final List<SNode> list, final Condition<SNode> condition) {
    node.visitChildren(new SNode.ChildVisitor() {
      public boolean visitChild(String role, SNode child) {
        if (condition == null || condition.met(child)) {
          ListSequence.fromList(list).addElement(child);
        }
        collectDescendants(child, list, condition);
        return true;
      }
    });
  }

  /**
   * todo rewrite the code using this
   */
  public static SConcept getConcept(String name) {
    return new SConceptNodeAdapter(((jetbrains.mps.smodel.SNode) SModelUtil.findConceptDeclaration(name, GlobalScope.getInstance())));
  }

  /**
   * todo rewrite the code using this
   */
  public static Set<String> getChildRoles(SNode n) {
    final Set<String> res = SetSequence.fromSet(new HashSet<String>());
    n.visitChildren(new SNode.ChildVisitor() {
      public boolean visitChild(String role, SNode child) {
        SetSequence.fromSet(res).addElement(role);
        return true;
      }
    });
    return res;
  }

  /**
   * todo rewrite the code using this
   */
  public static Set<SReference> getReferences(SNode n) {
    final Set<SReference> res = SetSequence.fromSet(new HashSet<SReference>());
    n.visitReferences(new SNode.ReferenceVisitor() {
      public boolean visitReference(String role, org.jetbrains.mps.openapi.model.SReference reference) {
        SetSequence.fromSet(res).addElement(((SReference) reference));
        return true;
      }
    });
    return res;
  }

  /**
   * todo rewrite the code using this
   */
  public static List<SNode> getChildren(SNode n) {
    final List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    n.visitChildren(new SNode.ChildVisitor() {
      public boolean visitChild(String role, SNode child) {
        ListSequence.fromList(res).addElement(child);
        return true;
      }
    });
    return res;
  }

  /**
   * todo rewrite the code using this
   */
  public static Set<String> getReferenceRoles(SNode n) {
    final Set<String> res = SetSequence.fromSet(new HashSet<String>());
    n.visitReferences(new SNode.ReferenceVisitor() {
      public boolean visitReference(String role, org.jetbrains.mps.openapi.model.SReference ref) {
        SetSequence.fromSet(res).addElement(role);
        return true;
      }
    });
    return res;
  }

  /**
   * todo rewrite the code via snode methods
   */
  public static void insertChild(SNode parent, String role, SNode child, SNode anchor, boolean before) {
    ((jetbrains.mps.smodel.SNode) parent).insertChild(((SNodeBase) anchor), role, ((jetbrains.mps.smodel.SNode) child), before);
  }

  /**
   * todo KILL IT! should be node.getModel!=null
   * todo after killing it, correct migration script to return model!=null instead
   */
  @Deprecated
  public static boolean isRegistered(SNode node) {
    return ((jetbrains.mps.smodel.SNode) node).isRegistered();
  }

  /**
   * todo KILL IT! should not be used since nodes are not passed between read actions
   * todo after killing it, correct migration script to return false instead
   */
  @Deprecated
  public static boolean isDisposed(SNode node) {
    return ((jetbrains.mps.smodel.SNode) node).isDisposed();
  }

  /**
   * todo KILL IT! should be node.getTopMostAncestor
   * todo after killing it, correct migration script getTopMostAncestor
   */
  @Deprecated
  public static jetbrains.mps.smodel.SNode getContainingRoot(SNode node) {
    return ((jetbrains.mps.smodel.SNode) node).getContainingRoot();
  }

  /**
   * this is an utility method common to all nodes but needed only for our debug purposes, so we don't put it into SNode
   */
  public static String getDebugText(SNode node) {
    return ((jetbrains.mps.smodel.SNode) node).getDebugText();
  }

  /**
   * This will be replaced by getting resolve info from a reference in a context containing it
   */
  public static String getResolveInfo(SNode n) {
    return ((jetbrains.mps.smodel.SNode) n).getResolveInfo();
  }
}
