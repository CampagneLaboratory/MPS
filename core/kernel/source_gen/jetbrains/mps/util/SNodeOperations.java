package jetbrains.mps.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.SReference;
import java.util.LinkedList;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import java.util.Iterator;
import java.util.Queue;
import org.jetbrains.annotations.Nullable;

public class SNodeOperations {
  public SNodeOperations() {
  }

  public static boolean isAncestor(SNode ancestor, SNode node) {
    if (ancestor == node) {
      return true;
    }
    SNode parentOfChild = node.getParent();
    if (parentOfChild == null) {
      return false;
    }
    return isAncestor(ancestor, parentOfChild);
  }

  public static List<jetbrains.mps.smodel.SNode> getChildren(SNode node, boolean includeAttributes) {
    List<jetbrains.mps.smodel.SNode> res = new ArrayList<jetbrains.mps.smodel.SNode>();
    for (SNode child : node.getChildren()) {
      if (child != null && AttributeOperations.isAttribute(child)) {
        res.add(((jetbrains.mps.smodel.SNode) child));
      }
    }
    return res;
  }

  public static Iterable<jetbrains.mps.smodel.SNode> getDescendants(SNode node, Condition<jetbrains.mps.smodel.SNode> cond, boolean includeFirst) {
    return new SNodeOperations.DescendantsIterable(node, cond, includeFirst);
  }

  public static SNode findParent(SNode node, Condition<jetbrains.mps.smodel.SNode> condition) {
    jetbrains.mps.smodel.SNode parent = ((jetbrains.mps.smodel.SNode) node.getParent());
    while (parent != null) {
      if (condition.met(parent)) {
        return ((jetbrains.mps.smodel.SNode) parent);
      }
      parent = ((jetbrains.mps.smodel.SNode) parent.getParent());
    }
    return null;
  }

  public static Map<String, String> getProperties(SNode node) {
    Map<String, String> result = new HashMap<String, String>();
    for (String name : Sequence.fromIterable(node.getPropertyNames())) {
      result.put(name, node.getProperty(name));
    }
    return result;
  }

  public static List<jetbrains.mps.smodel.SNode> getDescendants(SNode node, Condition<jetbrains.mps.smodel.SNode> condition) {
    List<jetbrains.mps.smodel.SNode> res = ListSequence.fromList(new ArrayList<jetbrains.mps.smodel.SNode>());
    collectDescendants(node, res, condition);
    return res;
  }

  private static void collectDescendants(SNode node, List<jetbrains.mps.smodel.SNode> list, Condition<jetbrains.mps.smodel.SNode> condition) {
    for (SNode child : Sequence.fromIterable(node.getChildren())) {
      if (condition == null || condition == Condition.TRUE_CONDITION || (child instanceof jetbrains.mps.smodel.SNode && condition.met(((jetbrains.mps.smodel.SNode) child)))) {
        ListSequence.fromList(list).addElement(((jetbrains.mps.smodel.SNode) child));
      }
      collectDescendants(child, list, condition);
    }
  }

  /**
   * todo rewrite the code using this
   */
  public static SConcept getConcept(String name) {
    return SConceptRepository.getInstance().getConcept(name);
  }

  /**
   * todo rewrite the code using this
   */
  public static Set<String> getChildRoles(SNode n) {
    Set<String> res = SetSequence.fromSet(new HashSet<String>());
    for (SNode child : Sequence.fromIterable(n.getChildren())) {
      SetSequence.fromSet(res).addElement(child.getRoleInParent());
    }
    return res;
  }

  /**
   * todo rewrite the code using this
   */
  public static List<SReference> getReferences(SNode n) {
    List<SReference> res = new LinkedList<SReference>();
    for (org.jetbrains.mps.openapi.model.SReference ref : Sequence.fromIterable(n.getReferences())) {
      res.add(((SReference) ref));
    }
    return res;
  }

  /**
   * todo rewrite the code using this
   */
  public static List<jetbrains.mps.smodel.SNode> getChildren(SNode n) {
    List<jetbrains.mps.smodel.SNode> res = ListSequence.fromList(new ArrayList<jetbrains.mps.smodel.SNode>());
    for (SNode child : Sequence.fromIterable(n.getChildren())) {
      ListSequence.fromList(res).addElement((jetbrains.mps.smodel.SNode) child);
    }
    return res;
  }

  /**
   * todo rewrite the code using this
   */
  public static Set<String> getReferenceRoles(SNode n) {
    Set<String> res = SetSequence.fromSet(new HashSet<String>());
    for (org.jetbrains.mps.openapi.model.SReference ref : Sequence.fromIterable(n.getReferences())) {
      SetSequence.fromSet(res).addElement(ref.getRole());
    }
    return res;
  }

  /**
   * todo rewrite the code using this
   */
  public static boolean isRoot(SNode n) {
    SModel model = ((jetbrains.mps.smodel.SNode) n).getModel();
    return model != null && model.isRoot(((jetbrains.mps.smodel.SNode) n));
  }

  /**
   * todo rewrite the code via snode methods
   */
  public static void insertChild(SNode parent, String role, SNode child, SNode anchor, boolean before) {
    if (before) {
      parent.insertChild(role, child, parent.getPrevChild(anchor));
    } else {
      parent.insertChild(role, child, anchor);
    }
  }

  /**
   * todo KILL IT! should not be used since nodes are not passed between read actions
   * todo after killing it, correct migration script to return false instead
   */
  @Deprecated
  public static boolean isDisposed(SNode node) {
    return ((jetbrains.mps.smodel.SNode) node).isDisposed();
  }

  /**
   * this is an utility method common to all nodes but needed only for our debug purposes, so we don't put it into SNode
   */
  public static String getDebugText(SNode node) {
    return org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(((jetbrains.mps.smodel.SNode) node));
  }

  /**
   * This will be replaced by getting resolve info from a reference in a context containing it
   */
  public static String getResolveInfo(SNode n) {
    return ((jetbrains.mps.smodel.SNode) n).getResolveInfo();
  }

  public static void copyProperties(SNode from, final SNode to) {
    for (String name : Sequence.fromIterable(from.getPropertyNames())) {
      to.setProperty(name, from.getProperty(name));
    }
  }

  public static Language getLanguage(SNode node) {
    return ModuleRepositoryFacade.getInstance().getModule(node.getConcept().getLanguage().getPresentation(), Language.class);
  }

  public static void copyUserObjects(SNode from, final SNode to) {
    for (Object key : Sequence.fromIterable(from.getUserObjectKeys())) {
      to.putUserObject(key, from.getUserObject(key));
    }
  }

  private static class DescendantsIterable implements Iterator<jetbrains.mps.smodel.SNode>, Iterable<jetbrains.mps.smodel.SNode> {
    private Condition<jetbrains.mps.smodel.SNode> condition;
    private Queue<SNode> queue = new LinkedList<SNode>();
    private SNode current;

    /*package*/ DescendantsIterable(SNode original, @Nullable Condition<jetbrains.mps.smodel.SNode> condition, boolean includeFirst) {
      this.condition = condition;
      current = original;
      if (current != null) {
        for (SNode child : current.getChildren()) {
          queue.offer(child);
        }
      }
      if (!(includeFirst)) {
        current = nextInternal();
      }
      while (current != null && condition != null && !(current instanceof jetbrains.mps.smodel.SNode && condition.met(((jetbrains.mps.smodel.SNode) current)))) {
        current = nextInternal();
      }
    }

    public boolean hasNext() {
      return current != null;
    }

    public jetbrains.mps.smodel.SNode next() {
      SNode result = current;
      do {
        current = nextInternal();
      } while (current != null && condition != null && !(current instanceof jetbrains.mps.smodel.SNode && condition.met(((jetbrains.mps.smodel.SNode) current))));
      return ((jetbrains.mps.smodel.SNode) result);
    }

    public void remove() {
      throw new UnsupportedOperationException();
    }

    private SNode nextInternal() {
      SNode next = queue.poll();
      if (next == null) {
        return null;
      }
      for (SNode child : next.getChildren()) {
        queue.offer(child);
      }
      return next;
    }

    public Iterator<jetbrains.mps.smodel.SNode> iterator() {
      return this;
    }
  }
}
