package jetbrains.mps.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.adapter.structure.concept.SAbstractConceptAdapter;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import org.jetbrains.mps.util.Condition;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import java.util.Map;
import java.util.LinkedHashMap;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SReference;
import java.util.LinkedList;
import java.util.Iterator;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.extapi.model.GeneratableSModel;

public class SNodeOperations {
  public SNodeOperations() {
  }
  /**
   * FIXME what on earth this method is supposed to tell?
   */
  public static boolean isUnknown(SNode node) {
    ConceptDescriptor cd = ((SAbstractConceptAdapter) node.getConcept()).getConceptDescriptor();
    return cd == null;
  }
  public static boolean isAncestor(SNode ancestor, SNode node) {
    if (ancestor == node) {
      return true;
    }
    SNode parentOfChild = node.getParent();
    if (parentOfChild == null) {
      return false;
    }
    return isAncestor(ancestor, parentOfChild);
  }
  public static List<SNode> getChildren(SNode node, boolean includeAttributes) {
    List<SNode> res = new ArrayList<SNode>();
    for (SNode child : node.getChildren()) {
      if (child != null && (includeAttributes || !(AttributeOperations.isAttribute(child)))) {
        res.add(((SNode) child));
      }
    }
    return res;
  }
  @Deprecated
  public static Iterable<SNode> getDescendants(SNode node, Condition<SNode> cond, boolean includeFirst) {
    // Deprecated: instead of this method, use openapi.model.SNodeUtil.getDescendants() directly 
    return SNodeUtil.getDescendants(node, cond, includeFirst);
  }
  public static SNode findParent(SNode node, Condition<SNode> condition) {
    SNode parent = ((SNode) node.getParent());
    while (parent != null) {
      if (condition.met(parent)) {
        return ((SNode) parent);
      }
      parent = ((SNode) parent.getParent());
    }
    return null;
  }
  public static Map<String, String> getProperties(SNode node) {
    Map<String, String> result = new LinkedHashMap<String, String>();
    for (String name : node.getPropertyNames()) {
      result.put(name, node.getProperty(name));
    }
    return result;
  }
  @Deprecated
  public static List<SNode> getDescendants(SNode node, Condition<SNode> condition) {
    // Deprecated: use openapi.model.SNodeUtil.getDescendants() instead 
    return IterableUtil.asList(SNodeUtil.getDescendants(node, condition, false));
  }
  /**
   * todo rewrite the code using this
   */
  public static SAbstractConcept getConcept(String name) {
    return SConceptRepository.getInstance().getInstanceConcept(name);
  }
  /**
   * todo rewrite the code using this
   */
  public static Set<String> getChildRoles(SNode n) {
    Set<String> res = SetSequence.fromSet(new HashSet<String>());
    for (SNode child : Sequence.fromIterable(n.getChildren())) {
      SetSequence.fromSet(res).addElement(child.getRoleInParent());
    }
    return res;
  }
  /**
   * todo rewrite the code using this
   */
  public static List<SReference> getReferences(SNode n) {
    List<SReference> res = new LinkedList<SReference>();
    for (SReference ref : Sequence.fromIterable(n.getReferences())) {
      res.add(ref);
    }
    return res;
  }
  /**
   * todo rewrite the code using this
   */
  public static List<SNode> getChildren(SNode n) {
    return IterableUtil.asList(n.getChildren());
  }
  /**
   * todo rewrite the code using this
   */
  public static Set<String> getReferenceRoles(SNode n) {
    Set<String> res = SetSequence.fromSet(new HashSet<String>());
    for (SReference ref : Sequence.fromIterable(n.getReferences())) {
      SetSequence.fromSet(res).addElement(ref.getRole());
    }
    return res;
  }
  /**
   * todo rewrite the code using this
   */
  public static boolean isRoot(SNode n) {
    return n.getModel() != null && n.getParent() == null;
  }
  /**
   * todo rewrite the code via snode methods
   */
  public static void insertChild(SNode parent, String role, SNode child, SNode anchor, boolean before) {
    if (before) {
      parent.insertChildBefore(role, child, anchor);
    } else {
      insertChild(parent, role, child, anchor);
    }
  }
  /**
   * todo rewrite the code via snode methods
   */
  public static void insertChild(SNode parent, String role, SNode child, SNode anchor) {
    if (anchor != null) {
      parent.insertChildBefore(role, child, ((jetbrains.mps.smodel.SNode) anchor).treeNext());
      return;
    }
    Iterator<? extends SNode> it = parent.getChildren().iterator();
    parent.insertChildBefore(role, child, (it.hasNext() ? it.next() : null));
  }
  /**
   * todo KILL IT! should not be used since nodes are not passed between read actions
   * todo after killing it, correct migration script to return false instead
   */
  @Deprecated
  public static boolean isDisposed(SNode node) {
    return !(SNodeUtil.isAccessible(node, MPSModuleRepository.getInstance()));
  }
  /**
   * this is an utility method common to all nodes but needed only for our debug purposes, so we don't put it into SNode
   */
  public static String getDebugText(SNode node) {
    String roleText = "";
    if (node.getModel() != null) {
      SNode parent = node.getParent();
      roleText = (parent == null ? "[root]" : "[" + node.getContainmentLink().getRoleName() + "]");
    }
    String nameText = null;
    String modelName;
    try {
      if (node.getConcept().isSubConceptOf(jetbrains.mps.smodel.SNodeUtil.concept_LinkDeclaration)) {
        String role = SNodeAccessUtil.getProperty(node, jetbrains.mps.smodel.SNodeUtil.propertyName_LinkDeclaration_role);
        if ((role != null && role.length() > 0)) {
          nameText = '\"' + role + '\"';
        } else {
          nameText = "<no ref>";
        }
      } else if (node.getConcept().isSubConceptOf(jetbrains.mps.smodel.SNodeUtil.concept_INamedConcept)) {
        String name = SNodeAccessUtil.getProperty(node, jetbrains.mps.smodel.SNodeUtil.propertyName_INamedConcept_name);
        if ((name != null && name.length() > 0)) {
          nameText = '\"' + name + '\"';
        } else {
          nameText = "<no name>";
        }
      }
      nameText = nameText + "[" + node.getNodeId() + "]";
      SModel model = node.getModel();
      modelName = (model != null ? model.getModelName() : "<no model>");
    } catch (Exception e) {
      nameText = "<??name??>";
      modelName = "<??model??>";
    }
    return roleText + " " + node.getConcept().getName() + " " + nameText + " in " + modelName;
  }
  public static Set<String> getChildRoles(SNode n, boolean includeAttributeRoles) {
    final Set<String> augend = new HashSet<String>();
    for (SNode child : n.getChildren()) {
      if (includeAttributeRoles || !((AttributeOperations.isAttribute(child)))) {
        augend.add(child.getRoleInParent());
      }
    }
    return augend;
  }
  public static SNode getChild(SNode node, String role) {
    Iterable<? extends SNode> children = node.getChildren(role);
    if (!(children.iterator().hasNext())) {
      return null;
    }
    return children.iterator().next();
  }
  /**
   * This will be replaced by getting resolve info from a reference in a context containing it
   */
  public static String getResolveInfo(SNode n) {
    String resolveInfo = jetbrains.mps.smodel.SNodeUtil.getResolveInfo(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.as(n, "jetbrains.mps.lang.core.structure.IResolveInfo"));
    if (resolveInfo != null) {
      return resolveInfo;
    }
    return SPropertyOperations.getString(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.as(n, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
  }
  public static void copyProperties(SNode from, final SNode to) {
    for (String name : from.getPropertyNames()) {
      to.setProperty(name, from.getProperty(name));
    }
  }
  public static Language getLanguage(SNode node) {
    final SLanguage language = node.getConcept().getLanguage();
    if (language == null) {
      return null;
    }
    return ModuleRepositoryFacade.getInstance().getModule(language.getQualifiedName(), Language.class);
  }
  public static void copyUserObjects(SNode from, final SNode to) {
    for (Object key : from.getUserObjectKeys()) {
      to.putUserObject(key, from.getUserObject(key));
    }
  }
  public static SModel getModelFromNodeReference(SNodeReference ref) {
    SModelReference mr = ref.getModelReference();
    if (mr == null) {
      return null;
    }
    return SModelRepository.getInstance().getModelDescriptor(mr);
  }
  public static SNode getTargetNodeSilently(SReference ref) {
    try {
      jetbrains.mps.smodel.SReference.disableLogging();
      return ref.getTargetNode();
    } finally {
      jetbrains.mps.smodel.SReference.enableLogging();
    }
  }
  public static String getModelStereotype(SModel model) {
    return SModelStereotype.getStereotype(model);
  }
  public static String getModelLongName(SModel model) {
    return NameUtil.getModelLongName(model);
  }
  public static List<SModuleReference> getUsedLanguages(SModel model) {
    Iterable<SModuleReference> languages = ((SModelInternal) model).importedLanguages();
    return Sequence.fromIterable(languages).toListSequence();
  }
  public static boolean isModelDisposed(SModel model) {
    return ((SModelInternal) model).getDisposedStacktrace() != null;
  }
  public static int nodesCount(SModel model) {
    return IterableUtil.asCollection(SNodeUtil.getDescendants(model)).size();
  }
  public static boolean isRegistered(SModel model) {
    return model.getRepository() != null;
  }
  public static boolean isGeneratable(SModel model) {
    // I wonder why this method doesn't reside in SModelOperations 
    return model instanceof GeneratableSModel && ((GeneratableSModel) model).isGeneratable();
  }
}
