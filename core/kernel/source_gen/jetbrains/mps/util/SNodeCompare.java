package jetbrains.mps.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.SReference;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.DynamicReference;
import java.util.Set;
import java.util.HashSet;
import java.util.List;

public class SNodeCompare {
  private SNodeCompare() {
  }

  private static boolean nodePropertiesEquals(SNode a, SNode b) {
    Map<String, String> aMap = (Map<String, String>) SNodeOperations.getProperties(a);
    Map<String, String> bMap = (Map<String, String>) SNodeOperations.getProperties(b);
    for (String p : SetSequence.fromSet(MapSequence.fromMap(aMap).keySet()).union(SetSequence.fromSet(MapSequence.fromMap(bMap).keySet()))) {
      if (neq_acety0_a0a0c0b(MapSequence.fromMap(aMap).get(p), MapSequence.fromMap(bMap).get(p))) {
        return false;
      }
    }
    return true;
  }

  private static boolean nodeReferencesEquals(SNode a, SNode b) {
    final Map<String, SReference> aMap = MapSequence.fromMap(new HashMap<String, SReference>());
    final Map<String, SReference> bMap = MapSequence.fromMap(new HashMap<String, SReference>());
    Sequence.fromIterable(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getReferences((SNode) a)).visitAll(new IVisitor<SReference>() {
      public void visit(SReference ref) {
        MapSequence.fromMap(aMap).put(SLinkOperations.getRole(ref), ref);
      }
    });
    Sequence.fromIterable(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getReferences((SNode) b)).visitAll(new IVisitor<SReference>() {
      public void visit(SReference ref) {
        MapSequence.fromMap(bMap).put(SLinkOperations.getRole(ref), ref);
      }
    });

    for (String r : SetSequence.fromSet(MapSequence.fromMap(aMap).keySet()).union(SetSequence.fromSet(MapSequence.fromMap(bMap).keySet()))) {
      SReference aRef = a.getReference(r);
      SReference bRef = b.getReference(r);
      if (aRef == null || bRef == null) {
        // cannot be both null 
        return false;
      }

      if (neq_acety0_a0e0f0c(aRef.getTargetSModelReference(), bRef.getTargetSModelReference())) {
        return false;
      }
      if (neq_acety0_a0f0f0c(aRef.getResolveInfo(), bRef.getResolveInfo())) {
        return false;
      }
      if (aRef instanceof DynamicReference || bRef instanceof DynamicReference) {
        if (aRef instanceof DynamicReference && bRef instanceof DynamicReference) {
          // both dynamic, ok 
        } else {
          // dynamic and static 
          return false;
        }
      } else {
        // both static 
        if (neq_acety0_a0b0a6a5a2(aRef.getTargetNodeId(), bRef.getTargetNodeId())) {
          return false;
        }
      }
    }
    return true;
  }

  private static boolean nodeChildrenEquals(SNode a, SNode b) {
    Set<String> roles = SetSequence.fromSetWithValues(new HashSet<String>(), a.getChildRoles(true));
    SetSequence.fromSet(roles).addSequence(SetSequence.fromSet(b.getChildRoles(true)));
    for (String r : SetSequence.fromSet(roles)) {
      List<SNode> aChildren = a.getChildren(r);
      List<SNode> bChildren = b.getChildren(r);
      if (aChildren.size() != bChildren.size()) {
        return false;
      }
      for (int i = 0; i < aChildren.size(); i++) {
        if (!(nodeEquals(aChildren.get(i), bChildren.get(i)))) {
          return false;
        }
      }
    }
    return true;
  }

  public static boolean nodeEquals(SNode a, SNode b) {
    return eq_acety0_a0a0a0a0e(a.getConcept().getId(), b.getConcept().getId()) && eq_acety0_a0a0a0a0e_0(a.getSNodeId(), b.getSNodeId()) && nodePropertiesEquals(a, b) && nodeReferencesEquals(a, b) && nodeChildrenEquals(a, b);
  }

  private static boolean neq_acety0_a0a0c0b(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean neq_acety0_a0e0f0c(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean neq_acety0_a0f0f0c(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean neq_acety0_a0b0a6a5a2(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean eq_acety0_a0a0a0a0e(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_acety0_a0a0a0a0e_0(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
