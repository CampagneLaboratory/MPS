package jetbrains.mps.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.SReference;
import java.util.List;

public class SNodeCompare {
  private SNodeCompare() {
  }

  private static boolean nodePropertiesEquals(SNode a, SNode b) {
    Set<String> names = SetSequence.fromSetWithValues(new HashSet<String>(), a.getPropertyNames());
    SetSequence.fromSet(names).addSequence(SetSequence.fromSet(b.getPropertyNames()));
    for (String p : SetSequence.fromSet(names)) {
      if (neq_acety0_a0a0c0a(a.getProperty(p), b.getProperty(p))) {
        return false;
      }
    }
    return true;
  }

  private static boolean nodeReferencesEquals(SNode a, SNode b) {
    Set<String> roles = SetSequence.fromSetWithValues(new HashSet<String>(), a.getReferenceRoles());
    SetSequence.fromSet(roles).addSequence(SetSequence.fromSet(b.getReferenceRoles()));
    for (String r : SetSequence.fromSet(roles)) {
      SReference aRef = a.getReference(r);
      SReference bRef = b.getReference(r);
      if (neq_acety0_a0c0c0b(aRef.getTargetSModelReference(), bRef.getTargetSModelReference())) {
        return false;
      }
      if (neq_acety0_a0d0c0b(aRef.getTargetNodeId(), bRef.getTargetNodeId())) {
        return false;
      }
      if (neq_acety0_a0e0c0b(aRef.getResolveInfo(), bRef.getResolveInfo())) {
        return false;
      }
    }
    return true;
  }

  private static boolean nodeChildrenEquals(SNode a, SNode b) {
    Set<String> roles = SetSequence.fromSetWithValues(new HashSet<String>(), a.getChildRoles());
    SetSequence.fromSet(roles).addSequence(SetSequence.fromSet(b.getChildRoles()));
    for (String r : SetSequence.fromSet(roles)) {
      List<SNode> aChildren = a.getChildren(r);
      List<SNode> bChildren = b.getChildren(r);
      if (aChildren.size() != bChildren.size()) {
        return false;
      }
      for (int i = 0; i < aChildren.size(); i++) {
        if (!(nodeEquals(aChildren.get(i), bChildren.get(i)))) {
          return false;
        }
      }
    }
    return true;
  }

  public static boolean nodeEquals(SNode a, SNode b) {
    return eq_acety0_a0a0a0a0d_0(a.getConceptFqName(), b.getConceptFqName()) && eq_acety0_a0a0a0a0d(a.getSNodeId(), b.getSNodeId()) && nodePropertiesEquals(a, b) && nodeReferencesEquals(a, b) && nodeChildrenEquals(a, b);
  }

  private static boolean neq_acety0_a0a0c0a(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean neq_acety0_a0c0c0b(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean neq_acety0_a0d0c0b(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean neq_acety0_a0e0c0b(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean eq_acety0_a0a0a0a0d(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_acety0_a0a0a0a0d_0(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
