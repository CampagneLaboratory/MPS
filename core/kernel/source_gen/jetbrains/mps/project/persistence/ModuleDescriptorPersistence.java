package jetbrains.mps.project.persistence;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import org.jdom.Element;
import jetbrains.mps.util.xml.XmlUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Collection;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.util.MacroHelper;
import jetbrains.mps.project.structure.model.ModelRootManager;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.util.FileUtil;
import java.util.UUID;
import java.io.InputStreamReader;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.io.IOException;

public class ModuleDescriptorPersistence {
  private static final String HEADER_PATTERN = ".*<(language|dev-kit|solution)[^>]+(namespace|name)=\\\"([^\"]+)\\\"[^>]+uuid=\\\"([^\"]+)\\\".*";
  protected static Log log = LogFactory.getLog(ModuleDescriptorPersistence.class);

  private ModuleDescriptorPersistence() {
  }

  public static void loadDependencies(ModuleDescriptor descriptor, Element root) {
    descriptor.getDependencies().addAll(loadDependenciesList(XmlUtil.first(root, "dependencies")));

    descriptor.getUsedLanguages().addAll(Sequence.fromIterable(XmlUtil.children(XmlUtil.first(root, "usedLanguages"), "usedLanguage")).select(new ISelector<Element, ModuleReference>() {
      public ModuleReference select(Element ul) {
        return ModuleReference.fromString(ul.getText());
      }
    }).toListSequence());

    descriptor.getUsedDevkits().addAll(Sequence.fromIterable(XmlUtil.children(XmlUtil.first(root, "usedDevKits"), "usedDevKit")).select(new ISelector<Element, ModuleReference>() {
      public ModuleReference select(Element udk) {
        return ModuleReference.fromString(udk.getText());
      }
    }).toListSequence());

    if (descriptor instanceof LanguageDescriptor) {
      LanguageDescriptor ld = (LanguageDescriptor) descriptor;
      Element runtimeXML = XmlUtil.first(root, "runtime");
      if (runtimeXML != null) {
        for (Dependency dep : ListSequence.fromList(loadDependenciesList(runtimeXML))) {
          ld.getRuntimeModules().add(dep.getModuleRef());
        }
      }
    }
  }

  public static void saveDependencies(Element result, ModuleDescriptor descriptor) {
    if (!(descriptor.getDependencies().isEmpty())) {
      Element dependencies = new Element("dependencies");
      saveDependencyList(dependencies, descriptor.getDependencies());
      result.addContent(dependencies);
    }

    if (!(descriptor.getUsedLanguages().isEmpty())) {
      Element usedLanguages = new Element("usedLanguages");
      for (ModuleReference langRef : CollectionSequence.fromCollection(descriptor.getUsedLanguages())) {
        XmlUtil.tagWithText(usedLanguages, "usedLanguage", langRef.toString());
      }
      result.addContent(usedLanguages);
    }
    if (!(descriptor.getUsedDevkits().isEmpty())) {
      Element usedDevKits = new Element("usedDevKits");
      for (ModuleReference dkRef : CollectionSequence.fromCollection(descriptor.getUsedDevkits())) {
        XmlUtil.tagWithText(usedDevKits, "usedDevKit", dkRef.toString());
      }
      result.addContent(usedDevKits);
    }

    if (descriptor instanceof LanguageDescriptor) {
      LanguageDescriptor ld = ((LanguageDescriptor) descriptor);
      if (!(ld.getRuntimeModules().isEmpty())) {
        Element runtime = new Element("runtime");
        Set<ModuleReference> runtimeModules = ld.getRuntimeModules();
        saveDependencyList(runtime, SetSequence.fromSet(runtimeModules).select(new ISelector<ModuleReference, Dependency>() {
          public Dependency select(ModuleReference it) {
            return new Dependency(it, false);
          }
        }).toListSequence());
        result.addContent(runtime);
      }
    }
  }

  public static List<Dependency> loadDependenciesList(Element depElement) {
    return Sequence.fromIterable(XmlUtil.children(depElement, "dependency")).select(new ISelector<Element, Dependency>() {
      public Dependency select(final Element d) {
        return new _FunctionTypes._return_P0_E0<Dependency>() {
          public Dependency invoke() {
            final Dependency result_dxyzb6_a0a0a0a0a0a2 = new Dependency();
            final ModuleReference result_dxyzb6_a0a0a0a0a0a0a2 = ModuleReference.fromString(d.getText());
            result_dxyzb6_a0a0a0a0a0a2.setModuleRef(result_dxyzb6_a0a0a0a0a0a0a2);
            final boolean result_dxyzb6_a1a0a0a0a0a0a2 = XmlUtil.booleanWithDefault(d, "reexport", true);
            result_dxyzb6_a0a0a0a0a0a2.setReexport(result_dxyzb6_a1a0a0a0a0a0a2);
            return result_dxyzb6_a0a0a0a0a0a2;
          }
        }.invoke();
      }
    }).toListSequence();
  }

  private static void saveDependencyList(Element result, Collection<Dependency> dependencies) {
    for (Dependency md : CollectionSequence.fromCollection(dependencies)) {
      XmlUtil.tagWithAttributeAndText(result, "dependency", "reexport", Boolean.toString(md.isReexport()), md.getModuleRef().toString());
    }
  }

  public static List<ModelRoot> loadModelRoots(Iterable<Element> modelRootElements, final MacroHelper macroHelper) {
    return Sequence.fromIterable(modelRootElements).select(new ISelector<Element, ModelRoot>() {
      public ModelRoot select(Element mre) {
        return loadModelRoot(mre, macroHelper);
      }
    }).toListSequence();
  }

  private static ModelRoot loadModelRoot(final Element modelRootElement, final MacroHelper macroHelper) {
    return new _FunctionTypes._return_P0_E0<ModelRoot>() {
      public ModelRoot invoke() {
        final ModelRoot result_dxyzb6_a0a0a5 = new ModelRoot();
        String pathName = modelRootElement.getAttributeValue("path");
        if (pathName == null) {
          // left for compatibility 
          pathName = XmlUtil.stringWithDefault(modelRootElement, "rootPath", "");
        }
        final String result_dxyzb6_a2a0a0a5 = macroHelper.expandPath(pathName);
        result_dxyzb6_a0a0a5.setPath(result_dxyzb6_a2a0a0a5);
        Element manager = XmlUtil.first(modelRootElement, "manager");
        if (manager != null) {
          final ModelRootManager result_dxyzb6_a0a4a0a0a5 = new ModelRootManager();
          final String result_dxyzb6_a0a0a4a0a0a5 = XmlUtil.stringWithDefault(manager, "moduleId", "");
          result_dxyzb6_a0a4a0a0a5.setModuleId(result_dxyzb6_a0a0a4a0a0a5);
          final String result_dxyzb6_a1a0a4a0a0a5 = XmlUtil.stringWithDefault(manager, "className", "");
          result_dxyzb6_a0a4a0a0a5.setClassName(result_dxyzb6_a1a0a4a0a0a5);
          result_dxyzb6_a0a0a5.setManager(result_dxyzb6_a0a4a0a0a5);
        }
        return result_dxyzb6_a0a0a5;
      }
    }.invoke();
  }

  public static List<ModelRoot> loadStubModelEntries(Element stubModelEntriesElement, final MacroHelper macroHelper) {
    return Sequence.fromIterable(XmlUtil.children(stubModelEntriesElement, "stubModelEntry")).select(new ISelector<Element, ModelRoot>() {
      public ModelRoot select(Element mre) {
        return loadModelEntry(mre, macroHelper);
      }
    }).toListSequence();
  }

  private static ModelRoot loadModelEntry(final Element modelRootElement, final MacroHelper macroHelper) {
    return new _FunctionTypes._return_P0_E0<ModelRoot>() {
      public ModelRoot invoke() {
        final ModelRoot result_dxyzb6_a0a0a7 = new ModelRoot();
        final String result_dxyzb6_a0a0a0a7 = macroHelper.expandPath(modelRootElement.getAttributeValue("path"));
        result_dxyzb6_a0a0a7.setPath(result_dxyzb6_a0a0a0a7);
        Element manager = XmlUtil.first(modelRootElement, "manager");
        final ModelRootManager result_dxyzb6_a2a0a0a7 = new ModelRootManager();
        final String result_dxyzb6_a0a2a0a0a7 = XmlUtil.stringWithDefault(manager, "moduleId", "");
        result_dxyzb6_a2a0a0a7.setModuleId(result_dxyzb6_a0a2a0a0a7);
        final String result_dxyzb6_a1a2a0a0a7 = XmlUtil.stringWithDefault(manager, "className", "");
        result_dxyzb6_a2a0a0a7.setClassName(result_dxyzb6_a1a2a0a0a7);
        result_dxyzb6_a0a0a7.setManager(result_dxyzb6_a2a0a0a7);
        return result_dxyzb6_a0a0a7;
      }
    }.invoke();
  }

  public static void saveModelRoots(Element result, Collection<ModelRoot> modelRoots, MacroHelper macroHelper) {
    for (ModelRoot root : CollectionSequence.fromCollection(modelRoots)) {
      Element modelRoot = new Element("modelRoot");
      modelRoot.setAttribute("path", macroHelper.shrinkPath((root.getPath() == null ?
        "" :
        root.getPath()
      )));
      if (root.getManager() != null) {
        XmlUtil.tagWithAttributes(modelRoot, "manager", "moduleId", root.getManager().getModuleId(), "className", root.getManager().getClassName());
      }
      result.addContent(modelRoot);
    }
  }

  public static void saveStubModelEntries(Element result, Collection<ModelRoot> modelRoots, MacroHelper macroHelper) {
    for (ModelRoot root : CollectionSequence.fromCollection(modelRoots)) {
      Element stubModelEntry = new Element("stubModelEntry");
      stubModelEntry.setAttribute("path", macroHelper.shrinkPath((root.getPath() == null ?
        "" :
        root.getPath()
      )));
      XmlUtil.tagWithAttributes(stubModelEntry, "manager", "moduleId", root.getManager().getModuleId(), "className", root.getManager().getClassName());
      result.addContent(stubModelEntry);
    }
  }

  public static void setTimestamp(ModuleDescriptor descriptor, IFile file) {
    descriptor.setTimestamp(Long.toString(file.lastModified()));
  }

  public static void loadBrokenModule(ModuleDescriptor md, IFile file, ModuleReadException exception) {
    md.setNamespace(FileUtil.getNameWithoutExtension(file.getName()));
    md.setUUID(UUID.randomUUID().toString());

    InputStreamReader r = null;
    try {
      r = new InputStreamReader(file.openInputStream(), FileUtil.DEFAULT_CHARSET);
      char[] buf = new char[1024];
      int readChars = r.read(buf);
      if (readChars >= 0) {
        String s = new String(buf, 0, readChars);
        Pattern pattern = Pattern.compile(HEADER_PATTERN);
        for (String line : s.split("\n")) {
          Matcher m = pattern.matcher(line);
          if (m.matches()) {
            md.setNamespace(m.group(3));
            md.setUUID(m.group(4));
          }
        }
      }
    } catch (IOException e) {
      if (log.isErrorEnabled()) {
        log.error("", e);
      }
    } finally {
      FileUtil.closeFileSafe(r);
    }
    setTimestamp(md, file);
    md.setLoadException((exception.getCause() == null ?
      exception :
      exception.getCause()
    ));
  }
}
