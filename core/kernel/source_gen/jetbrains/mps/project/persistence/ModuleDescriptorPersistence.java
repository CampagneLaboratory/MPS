package jetbrains.mps.project.persistence;

/*Generated by MPS */

import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import org.jdom.Element;
import jetbrains.mps.util.xml.XmlUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Collection;
import jetbrains.mps.project.structure.model.ModelRootDescriptor;
import org.jetbrains.mps.openapi.persistence.Memento;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.persistence.PersistenceRegistry;
import jetbrains.mps.smodel.LanguageID;
import jetbrains.mps.persistence.MementoImpl;
import jetbrains.mps.project.structure.ProjectStructureModelRoot;
import jetbrains.mps.util.MacroHelper;
import java.util.ArrayList;
import jetbrains.mps.project.structure.modules.ModuleFacetDescriptor;
import org.jdom.Attribute;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.vfs.IFile;
import java.util.UUID;
import java.io.InputStreamReader;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.io.IOException;
import jetbrains.mps.project.structure.model.ModelRootManager;
import jetbrains.mps.logging.Logger;

public class ModuleDescriptorPersistence {
  private static final String HEADER_PATTERN = ".*<(language|dev-kit|solution)[^>]+(namespace|name)=\\\"([^\"]+)\\\"[^>]+uuid=\\\"([^\"]+)\\\".*";

  private ModuleDescriptorPersistence() {
  }

  public static void loadDependencies(ModuleDescriptor descriptor, Element root) {
    descriptor.getDependencies().addAll(loadDependenciesList(XmlUtil.first(root, "dependencies")));

    descriptor.getUsedLanguages().addAll(Sequence.fromIterable(XmlUtil.children(XmlUtil.first(root, "usedLanguages"), "usedLanguage")).select(new ISelector<Element, ModuleReference>() {
      public ModuleReference select(Element ul) {
        return ModuleReference.fromString(ul.getText());
      }
    }).toListSequence());

    descriptor.getUsedDevkits().addAll(Sequence.fromIterable(XmlUtil.children(XmlUtil.first(root, "usedDevKits"), "usedDevKit")).select(new ISelector<Element, ModuleReference>() {
      public ModuleReference select(Element udk) {
        return ModuleReference.fromString(udk.getText());
      }
    }).toListSequence());

    if (descriptor instanceof LanguageDescriptor) {
      LanguageDescriptor ld = (LanguageDescriptor) descriptor;
      Element runtimeXML = XmlUtil.first(root, "runtime");
      if (runtimeXML != null) {
        for (Dependency dep : ListSequence.fromList(loadDependenciesList(runtimeXML))) {
          ld.getRuntimeModules().add(dep.getModuleRef());
        }
      }
    }
  }

  public static void saveDependencies(Element result, ModuleDescriptor descriptor) {
    if (!(descriptor.getDependencies().isEmpty())) {
      Element dependencies = new Element("dependencies");
      saveDependencyList(dependencies, descriptor.getDependencies());
      result.addContent(dependencies);
    }

    if (!(descriptor.getUsedLanguages().isEmpty())) {
      Element usedLanguages = new Element("usedLanguages");
      for (ModuleReference langRef : CollectionSequence.fromCollection(descriptor.getUsedLanguages())) {
        XmlUtil.tagWithText(usedLanguages, "usedLanguage", langRef.toString());
      }
      result.addContent(usedLanguages);
    }
    if (!(descriptor.getUsedDevkits().isEmpty())) {
      Element usedDevKits = new Element("usedDevKits");
      for (ModuleReference dkRef : CollectionSequence.fromCollection(descriptor.getUsedDevkits())) {
        XmlUtil.tagWithText(usedDevKits, "usedDevKit", dkRef.toString());
      }
      result.addContent(usedDevKits);
    }

    if (descriptor instanceof LanguageDescriptor) {
      LanguageDescriptor ld = ((LanguageDescriptor) descriptor);
      if (!(ld.getRuntimeModules().isEmpty())) {
        Element runtime = new Element("runtime");
        Set<ModuleReference> runtimeModules = ld.getRuntimeModules();
        saveDependencyList(runtime, SetSequence.fromSet(runtimeModules).select(new ISelector<ModuleReference, Dependency>() {
          public Dependency select(ModuleReference it) {
            return new Dependency(it, false);
          }
        }).toListSequence());
        result.addContent(runtime);
      }
    }
  }

  public static List<Dependency> loadDependenciesList(Element depElement) {
    return Sequence.fromIterable(XmlUtil.children(depElement, "dependency")).select(new ISelector<Element, Dependency>() {
      public Dependency select(final Element d) {
        return new _FunctionTypes._return_P0_E0<Dependency>() {
          public Dependency invoke() {
            final Dependency result_dxyzb6_a0a0a0a0a0a4 = new Dependency();
            final ModuleReference result_dxyzb6_a0a0a0a0a0a0a4 = ModuleReference.fromString(d.getText());
            result_dxyzb6_a0a0a0a0a0a4.setModuleRef(result_dxyzb6_a0a0a0a0a0a0a4);
            final boolean result_dxyzb6_a1a0a0a0a0a0a4 = XmlUtil.booleanWithDefault(d, "reexport", true);
            result_dxyzb6_a0a0a0a0a0a4.setReexport(result_dxyzb6_a1a0a0a0a0a0a4);
            return result_dxyzb6_a0a0a0a0a0a4;
          }
        }.invoke();
      }
    }).toListSequence();
  }

  private static void saveDependencyList(Element result, Collection<Dependency> dependencies) {
    for (Dependency md : CollectionSequence.fromCollection(dependencies)) {
      XmlUtil.tagWithAttributeAndText(result, "dependency", "reexport", Boolean.toString(md.isReexport()), md.getModuleRef().toString());
    }
  }

  public static ModelRootDescriptor createDescriptor(String type, Memento m, @Nullable String moduleContentRoot, ModelRootDescriptor[] cache) {
    if (type != null) {
      return new ModelRootDescriptor(type, m);
    }

    // temporary code for migrating old model roots, type == null 
    Memento manager = m.getChild("manager");
    if (manager == null) {
      String path = FileUtil.stripLastSlashes(m.get("path"));
      return mergeFileBasedModelRoot(path, PersistenceRegistry.DEFAULT_MODEL_ROOT, moduleContentRoot, 0, cache);
    } else if (matches(manager, LanguageID.JAVA_MANAGER)) {
      // TODO use JavaClassStubConstants.STUB_TYPE 
      String path = m.get("path");
      m = new MementoImpl();
      m.put("path", path);
      return new ModelRootDescriptor(PersistenceRegistry.JAVA_CLASSES_ROOT, m);
    } else if ("jetbrains.mps.lang.project.stubs.ProjectStubs".equals(manager.get("className")) && "86ef8290-12bb-4ca7-947f-093788f263a9".equals(manager.get("moduleId"))) {
      String path = FileUtil.stripLastSlashes(m.get("path"));
      return mergeFileBasedModelRoot(path, ProjectStructureModelRoot.TYPE, moduleContentRoot, 1, cache);
    } else {
      return new ModelRootDescriptor(PersistenceRegistry.OBSOLETE_MODEL_ROOT, m);
    }
  }

  private static ModelRootDescriptor mergeFileBasedModelRoot(String path, String type, @Nullable String moduleContentRoot, int cacheIndex, ModelRootDescriptor[] cache) {
    if (moduleContentRoot != null && (path.startsWith(moduleContentRoot + "/") || path.equals(moduleContentRoot))) {
      String relPath = path.substring(moduleContentRoot.length());
      while (relPath.startsWith("/")) {
        relPath = relPath.substring(1);
      }
      ModelRootDescriptor result = null;
      Memento m;
      if (cache[cacheIndex] == null) {
        m = new MementoImpl();
        m.put("contentPath", moduleContentRoot);
        cache[cacheIndex] = new ModelRootDescriptor(type, m);
        result = cache[cacheIndex];
      } else {
        m = cache[cacheIndex].getMemento();
      }
      Memento sr = m.createChild("sourceRoot");
      sr.put("location", (relPath.isEmpty() ?
        "." :
        relPath
      ));
      return result;
    }

    Memento m = new MementoImpl();
    m.put("contentPath", path);
    Memento sourceRoot = m.createChild("sourceRoot");
    sourceRoot.put("location", ".");
    return new ModelRootDescriptor(type, m);
  }



  public static List<ModelRootDescriptor> loadModelRoots(Iterable<Element> modelRootElements, String moduleContentRoot, MacroHelper macroHelper) {
    List<ModelRootDescriptor> result = ListSequence.fromList(new ArrayList<ModelRootDescriptor>());
    ModelRootDescriptor[] cache = new ModelRootDescriptor[2];
    for (Element element : modelRootElements) {
      Memento m = new MementoImpl();
      readMemento(m, element, macroHelper);
      String type = element.getAttributeValue("type");
      ModelRootDescriptor descriptor = createDescriptor(type, m, moduleContentRoot, cache);
      if (descriptor != null) {
        ListSequence.fromList(result).addElement(descriptor);
      }
    }
    return result;
  }

  public static List<ModuleFacetDescriptor> loadFacets(Iterable<Element> facetElements, MacroHelper macroHelper) {
    List<ModuleFacetDescriptor> result = ListSequence.fromList(new ArrayList<ModuleFacetDescriptor>());
    for (Element element : facetElements) {
      Memento m = new MementoImpl();
      readMemento(m, element, macroHelper);
      String type = element.getAttributeValue("type");
      if (type != null) {
        ListSequence.fromList(result).addElement(new ModuleFacetDescriptor(type, m));
      }
    }
    return result;
  }

  public static void readMemento(Memento memento, Element element, final MacroHelper macroHelper) {
    for (Attribute attr : (List<Attribute>) element.getAttributes()) {
      String name = attr.getName();
      memento.put(name, (isPathAttribute(name) ?
        macroHelper.expandPath(attr.getValue()) :
        attr.getValue()
      ));
    }
    for (Element elem : (List<Element>) element.getChildren()) {
      Memento child = memento.createChild(elem.getName());
      readMemento(child, elem, macroHelper);
    }
  }

  public static void writeMemento(Memento memento, Element element, final MacroHelper macroHelper) {
    for (String key : memento.getKeys()) {
      element.setAttribute(key, (isPathAttribute(key) ?
        macroHelper.shrinkPath(memento.get(key)) :
        memento.get(key)
      ));
    }
    for (Memento childMemento : memento.getChildren()) {
      Element child = new Element(childMemento.getType());
      writeMemento(childMemento, child, macroHelper);
      element.addContent(child);
    }
  }

  private static boolean isPathAttribute(String name) {
    return name.equals("path") || name.endsWith("Path");
  }

  public static List<String> loadStubModelEntries(Element stubModelEntriesElement, final MacroHelper macroHelper) {
    return Sequence.fromIterable(XmlUtil.children(stubModelEntriesElement, "stubModelEntry")).select(new ISelector<Element, String>() {
      public String select(Element mre) {
        return loadStubModelEntry(mre, macroHelper);
      }
    }).where(new IWhereFilter<String>() {
      public boolean accept(String it) {
        return it != null;
      }
    }).toListSequence();
  }

  private static String loadStubModelEntry(Element modelRootElement, MacroHelper macroHelper) {
    Element manager = XmlUtil.first(modelRootElement, "manager");
    if (manager != null) {
      String className = XmlUtil.stringWithDefault(manager, "className", "");
      if (!("jetbrains.mps.baseLanguage.stubs.JavaStubs".equals(className))) {
        return null;
      }
    }
    return macroHelper.expandPath(modelRootElement.getAttributeValue("path"));
  }

  public static void saveFacets(Element result, Collection<ModuleFacetDescriptor> facets, MacroHelper macroHelper) {
    for (ModuleFacetDescriptor facet : CollectionSequence.fromCollection(facets)) {
      Memento memento = facet.getMemento();
      Element facetElement = new Element("facet");
      writeMemento(memento, facetElement, macroHelper);
      String type = facet.getType();
      facetElement.setAttribute("type", type);
      result.addContent(facetElement);
    }
  }



  public static void saveModelRoots(Element result, Collection<ModelRootDescriptor> modelRoots, MacroHelper macroHelper) {
    for (ModelRootDescriptor root : CollectionSequence.fromCollection(modelRoots)) {
      Memento memento = root.getMemento();
      Element modelRoot = new Element("modelRoot");
      writeMemento(memento, modelRoot, macroHelper);
      String type = root.getType();
      if ((type != null && type.length() > 0) && !("obsolete".equals(type))) {
        modelRoot.setAttribute("type", type);
      } else {
        modelRoot.removeAttribute("type");
      }
      result.addContent(modelRoot);
    }
  }

  public static void saveStubModelEntries(Element result, Collection<String> entries, MacroHelper macroHelper) {
    for (String root : CollectionSequence.fromCollection(entries)) {
      Element stubModelEntry = new Element("stubModelEntry");
      stubModelEntry.setAttribute("path", macroHelper.shrinkPath((root == null ?
        "" :
        root
      )));
      result.addContent(stubModelEntry);
    }
  }

  public static void setTimestamp(ModuleDescriptor descriptor, IFile file) {
    descriptor.setTimestamp(Long.toString(file.lastModified()));
  }

  public static void loadBrokenModule(ModuleDescriptor md, IFile file, ModuleReadException exception) {
    md.setNamespace(FileUtil.getNameWithoutExtension(file.getName()));
    md.setUUID(UUID.randomUUID().toString());

    InputStreamReader r = null;
    try {
      r = new InputStreamReader(file.openInputStream(), FileUtil.DEFAULT_CHARSET);
      char[] buf = new char[1024];
      int readChars = r.read(buf);
      if (readChars >= 0) {
        String s = new String(buf, 0, readChars);
        Pattern pattern = Pattern.compile(HEADER_PATTERN);
        for (String line : s.split("\n")) {
          Matcher m = pattern.matcher(line);
          if (m.matches()) {
            md.setNamespace(m.group(3));
            md.setUUID(m.group(4));
          }
        }
      }
    } catch (IOException e) {
      LOG.error("", e);
    } finally {
      FileUtil.closeFileSafe(r);
    }
    setTimestamp(md, file);
    md.setLoadException((exception.getCause() == null ?
      exception :
      exception.getCause()
    ));
  }

  private static boolean matches(Memento manager, ModelRootManager mrm) {
    return mrm.getClassName().equals(manager.get("className")) && mrm.getModuleId().equals(manager.get("moduleId"));
  }


  private static Logger LOG = Logger.getLogger(ModuleDescriptorPersistence.class);
}
