package jetbrains.mps.project.persistence;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.util.MacroHelper;
import org.jdom.Document;
import jetbrains.mps.util.JDOMUtil;
import org.jdom.Element;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.smodel.LanguageID;
import java.util.List;
import jetbrains.mps.project.structure.model.ModelRootManager;
import jetbrains.mps.project.structure.modules.GeneratorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.structure.modules.StubSolution;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.io.OutputStream;

public class LanguageDescriptorPersistence {
  protected static Log log = LogFactory.getLog(LanguageDescriptorPersistence.class);

  private LanguageDescriptorPersistence() {
  }

  public static LanguageDescriptor loadLanguageDescriptor(final IFile file, final MacroHelper macroHelper) {
    LanguageDescriptor descriptor;

    try {
      Document document = JDOMUtil.loadDocument(file);
      final Element languageElement = document.getRootElement();

      descriptor = new _FunctionTypes._return_P0_E0<LanguageDescriptor>() {
        public LanguageDescriptor invoke() {
          final LanguageDescriptor result_v3r4p8_a0a0d0c0a = new LanguageDescriptor();
          final String result_v3r4p8_a0a0a0d0c0a = languageElement.getAttributeValue("namespace");
          result_v3r4p8_a0a0d0c0a.setNamespace(result_v3r4p8_a0a0a0d0c0a);
          String uuidValue = languageElement.getAttributeValue("uuid");
          if (uuidValue != null) {
            final String result_v3r4p8_a0a2a0a0d0c0a = uuidValue;
            result_v3r4p8_a0a0d0c0a.setUUID(result_v3r4p8_a0a2a0a0d0c0a);
          }

          String genOutput = languageElement.getAttributeValue("generatorOutputPath");
          if (genOutput != null) {
            final String result_v3r4p8_a0a5a0a0d0c0a = macroHelper.expandPath(genOutput);
            result_v3r4p8_a0a0d0c0a.setGenPath(result_v3r4p8_a0a5a0a0d0c0a);
          }

          Element modelsTag = jetbrains.mps.project.persistence.JDOMUtil.first(languageElement, "models");
          if (modelsTag != null) {
            result_v3r4p8_a0a0d0c0a.getModelRoots().addAll(ModuleDescriptorPersistence.loadModelRoots(jetbrains.mps.project.persistence.JDOMUtil.children(modelsTag, "modelRoot"), macroHelper));
          } else {
            // old - for backwards compatibility 
            result_v3r4p8_a0a0d0c0a.getModelRoots().addAll(ModuleDescriptorPersistence.loadModelRoots(jetbrains.mps.project.persistence.JDOMUtil.children(languageElement, "modelRoot"), macroHelper));
          }

          ModuleDescriptorPersistence.loadDependencies(result_v3r4p8_a0a0d0c0a, languageElement);
          for (Element extendedLanguage : Sequence.fromIterable(jetbrains.mps.project.persistence.JDOMUtil.children(jetbrains.mps.project.persistence.JDOMUtil.first(languageElement, "extendedLanguages"), "extendedLanguage"))) {
            result_v3r4p8_a0a0d0c0a.getExtendedLanguages().add(ModuleReference.fromString(extendedLanguage.getText()));
          }

          Element autoImports = jetbrains.mps.project.persistence.JDOMUtil.first(languageElement, "accessoryModels");
          if (autoImports == null) {
            // deprecated name 
            autoImports = jetbrains.mps.project.persistence.JDOMUtil.first(languageElement, "library");
          }
          for (Element modelElement : Sequence.fromIterable(jetbrains.mps.project.persistence.JDOMUtil.children(autoImports, "model"))) {
            result_v3r4p8_a0a0d0c0a.getAccessoryModels().add(SModelReference.fromString(modelElement.getAttributeValue("modelUID")));
          }

          for (Element generatorElement : Sequence.fromIterable(jetbrains.mps.project.persistence.JDOMUtil.children(jetbrains.mps.project.persistence.JDOMUtil.first(languageElement, "generators"), "generator"))) {
            result_v3r4p8_a0a0d0c0a.getGenerators().add(GeneratorDescriptorPersistence.loadGeneratorDescriptor(generatorElement, file, macroHelper));
          }

          for (Element entryElement : Sequence.fromIterable(jetbrains.mps.project.persistence.JDOMUtil.children(jetbrains.mps.project.persistence.JDOMUtil.first(languageElement, "classPath"), "entry")).concat(Sequence.fromIterable(jetbrains.mps.project.persistence.JDOMUtil.children(jetbrains.mps.project.persistence.JDOMUtil.first(languageElement, "runtimeClassPath"), "entry")))) {
            // runtimeClassPath was left for compatibility 
            ModelRoot entry = new ModelRoot();
            entry.setPath(macroHelper.expandPath(entryElement.getAttributeValue("path")));
            entry.setManager(LanguageID.JAVA_MANAGER);
            result_v3r4p8_a0a0d0c0a.getStubModelEntries().add(entry);
          }

          Element stubModelEntries = jetbrains.mps.project.persistence.JDOMUtil.first(languageElement, "stubModelEntries");
          if (stubModelEntries != null) {
            List<ModelRoot> roots = ModuleDescriptorPersistence.loadStubModelEntries(stubModelEntries, macroHelper);
            result_v3r4p8_a0a0d0c0a.getStubModelEntries().addAll(roots);
          }

          for (Element entryElement : Sequence.fromIterable(jetbrains.mps.project.persistence.JDOMUtil.children(jetbrains.mps.project.persistence.JDOMUtil.first(languageElement, "languageRuntimeClassPath"), "entry"))) {
            ModelRoot entry = new ModelRoot();
            entry.setPath(macroHelper.expandPath(entryElement.getAttributeValue("path")));
            entry.setManager(LanguageID.JAVA_MANAGER);
            result_v3r4p8_a0a0d0c0a.getRuntimeStubModels().add(entry);
          }

          Element runtimeStubModels = jetbrains.mps.project.persistence.JDOMUtil.first(languageElement, "runtimeStubModels");
          if (runtimeStubModels != null) {
            for (Element entryElement : Sequence.fromIterable(jetbrains.mps.project.persistence.JDOMUtil.children(runtimeStubModels, "stubModelEntry"))) {
              final ModelRoot result_v3r4p8_a0a0a72a0a0d0c0a = new ModelRoot();
              final String result_v3r4p8_a0a0a0a72a0a0d0c0a = macroHelper.expandPath(entryElement.getAttributeValue("path"));
              result_v3r4p8_a0a0a72a0a0d0c0a.setPath(result_v3r4p8_a0a0a0a72a0a0d0c0a);
              final ModelRootManager result_v3r4p8_a1a0a0a72a0a0d0c0a = new ModelRootManager();
              Element manager = jetbrains.mps.project.persistence.JDOMUtil.first(entryElement, "manager");
              final String result_v3r4p8_a1a1a0a0a72a0a0d0c0a = jetbrains.mps.project.persistence.JDOMUtil.stringWithDefault(manager, "moduleId", "");
              result_v3r4p8_a1a0a0a72a0a0d0c0a.setModuleId(result_v3r4p8_a1a1a0a0a72a0a0d0c0a);
              final String result_v3r4p8_a2a1a0a0a72a0a0d0c0a = jetbrains.mps.project.persistence.JDOMUtil.stringWithDefault(manager, "className", "");
              result_v3r4p8_a1a0a0a72a0a0d0c0a.setClassName(result_v3r4p8_a2a1a0a0a72a0a0d0c0a);
              result_v3r4p8_a0a0a72a0a0d0c0a.setManager(result_v3r4p8_a1a0a0a72a0a0d0c0a);
              result_v3r4p8_a0a0d0c0a.getRuntimeStubModels().add(result_v3r4p8_a0a0a72a0a0d0c0a);
            }
            for (GeneratorDescriptor gd : ListSequence.fromList(result_v3r4p8_a0a0d0c0a.getGenerators())) {
              gd.getModelRoots().addAll(result_v3r4p8_a0a0d0c0a.getRuntimeStubModels());
            }
          }

          Element stubSolutions = jetbrains.mps.project.persistence.JDOMUtil.first(languageElement, "stubSolutions");
          if (stubSolutions != null) {
            for (Element solutionElement : Sequence.fromIterable(jetbrains.mps.project.persistence.JDOMUtil.children(stubSolutions, "stubSolution"))) {
              final StubSolution result_v3r4p8_a0a0a03a0a0d0c0a = new StubSolution();
              final String result_v3r4p8_a0a0a0a03a0a0d0c0a = jetbrains.mps.project.persistence.JDOMUtil.stringWithDefault(solutionElement, "moduleName", "");
              result_v3r4p8_a0a0a03a0a0d0c0a.setName(result_v3r4p8_a0a0a0a03a0a0d0c0a);
              final ModuleId result_v3r4p8_a1a0a0a03a0a0d0c0a = ModuleId.fromString(jetbrains.mps.project.persistence.JDOMUtil.stringWithDefault(solutionElement, "moduleId", ""));
              result_v3r4p8_a0a0a03a0a0d0c0a.setId(result_v3r4p8_a1a0a0a03a0a0d0c0a);
              result_v3r4p8_a0a0d0c0a.getStubSolutions().add(result_v3r4p8_a0a0a03a0a0d0c0a);
            }
          }

          for (Element entryElement : Sequence.fromIterable(jetbrains.mps.project.persistence.JDOMUtil.children(jetbrains.mps.project.persistence.JDOMUtil.first(languageElement, "sourcePath"), "source"))) {
            result_v3r4p8_a0a0d0c0a.getSourcePaths().add(macroHelper.expandPath(entryElement.getAttributeValue("path")));
          }
          return result_v3r4p8_a0a0d0c0a;
        }
      }.invoke();
    } catch (Exception e) {
      throw new ModuleReadException(e);
    }

    ModuleDescriptorPersistence.setTimestamp(descriptor, file);
    return descriptor;
  }

  public static void saveLanguageDescriptor(IFile file, LanguageDescriptor descriptor, MacroHelper macroHelper) {
    if (file.isReadOnly()) {
      if (log.isErrorEnabled()) {
        log.error("Cant't save " + file.getPath());
      }
      return;
    }

    Element languageElement = new Element("language");
    languageElement.setAttribute("namespace", descriptor.getNamespace());
    String uuid = descriptor.getUUID();
    if (uuid != null) {
      languageElement.setAttribute("uuid", uuid);
    }
    if (descriptor.getGenPath() != null) {
      languageElement.setAttribute("generatorOutputPath", macroHelper.shrinkPath(descriptor.getGenPath()));
    }

    Element models = new Element("models");
    ModuleDescriptorPersistence.saveModelRoots(models, descriptor.getModelRoots(), macroHelper);
    languageElement.addContent(models);

    Element accessoryModels = new Element("accessoryModels");
    for (SModelReference model : SetSequence.fromSet(descriptor.getAccessoryModels())) {
      jetbrains.mps.project.persistence.JDOMUtil.tagWithAttribute(accessoryModels, "model", "modelUID", model.toString());
    }
    languageElement.addContent(accessoryModels);


    Element generators = new Element("generators");
    for (GeneratorDescriptor generatorDescriptor : ListSequence.fromList(descriptor.getGenerators())) {
      GeneratorDescriptorPersistence.saveGeneratorDescriptor(generators, generatorDescriptor, macroHelper);
    }
    languageElement.addContent(generators);

    if (!(descriptor.getStubModelEntries().isEmpty())) {
      Element stubModelEntries = new Element("stubModelEntries");
      ModuleDescriptorPersistence.saveStubModelEntries(stubModelEntries, descriptor.getStubModelEntries(), macroHelper);
      languageElement.addContent(stubModelEntries);
    }


    if (!(descriptor.getRuntimeStubModels().isEmpty())) {

      Element runtimeStubModels = new Element("runtimeStubModels");
      for (ModelRoot entry : SetSequence.fromSet(descriptor.getRuntimeStubModels())) {
        Element stubModelEntry = new Element("stubModelEntry");
        stubModelEntry.setAttribute("path", macroHelper.shrinkPath(entry.getPath()));
        jetbrains.mps.project.persistence.JDOMUtil.tagWithAttributes(stubModelEntry, "manager", "moduleId", entry.getManager().getModuleId(), "className", entry.getManager().getClassName());
        runtimeStubModels.addContent(stubModelEntry);
      }
      languageElement.addContent(runtimeStubModels);
    }

    if (!(descriptor.getStubSolutions().isEmpty())) {
      Element stubSolutions = new Element("stubSolutions");
      for (StubSolution entry : SetSequence.fromSet(descriptor.getStubSolutions())) {
        jetbrains.mps.project.persistence.JDOMUtil.tagWithAttributes(stubSolutions, "stubSolution", "moduleName", entry.getName(), "moduleId", entry.getId().toString());
      }
      languageElement.addContent(stubSolutions);
    }

    Element sourcePath = new Element("sourcePath");
    for (String p : CollectionSequence.fromCollection(descriptor.getSourcePaths())) {
      jetbrains.mps.project.persistence.JDOMUtil.tagWithAttribute(sourcePath, "source", "path", macroHelper.shrinkPath(p));
    }
    languageElement.addContent(sourcePath);

    ModuleDescriptorPersistence.saveDependencies(languageElement, descriptor);

    Element extendedLanguages = new Element("extendedLanguages");
    for (ModuleReference ref : SetSequence.fromSet(descriptor.getExtendedLanguages())) {
      jetbrains.mps.project.persistence.JDOMUtil.tagWithText(extendedLanguages, "extendedLanguage", ref.toString());
    }
    languageElement.addContent(extendedLanguages);

    try {
      OutputStream os = file.openOutputStream();
      JDOMUtil.writeDocument(new Document(languageElement), os);
    } catch (Exception e) {
      if (log.isErrorEnabled()) {
        log.error("", e);
      }
    }
    ModuleDescriptorPersistence.setTimestamp(descriptor, file);
  }
}
