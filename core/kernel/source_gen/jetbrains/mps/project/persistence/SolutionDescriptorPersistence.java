package jetbrains.mps.project.persistence;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.util.Macros;
import org.jdom.Document;
import jetbrains.mps.util.JDOMUtil;
import org.jdom.Element;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.xmlQuery.runtime.AttributeUtils;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.structure.modules.ClassPathEntry;
import java.io.OutputStream;

public class SolutionDescriptorPersistence {
  protected static Log log = LogFactory.getLog(SolutionDescriptorPersistence.class);

  public static SolutionDescriptor loadSolutionDescriptor(final IFile file) {
    final Macros macros = Macros.solutionDescriptor();
    SolutionDescriptor descriptor;
    try {
      Document document = JDOMUtil.loadDocument(file);
      Element rootElement = document.getRootElement();
      final Element solutionElement = (Element) rootElement;

      assert solutionElement != null;

      descriptor = new _FunctionTypes._return_P0_E0<SolutionDescriptor>() {
        public SolutionDescriptor invoke() {
          SolutionDescriptor result_3591_0 = new SolutionDescriptor();
          String result_3591_1 = solutionElement.getAttributeValue("name");
          result_3591_0.setNamespace(result_3591_1);

          if (solutionElement.getAttributeValue("uuid") != null) {
            String result_3591_2 = solutionElement.getAttributeValue("uuid");
            result_3591_0.setUUID(result_3591_2);
          }

          boolean result_3591_3 = AttributeUtils.booleanWithDefault(solutionElement.getAttributeValue("extenallyVisible"), true);
          result_3591_0.setExternallyVisible(result_3591_3);
          boolean result_3591_4 = AttributeUtils.booleanWithDefault(solutionElement.getAttributeValue("dontLoadClasses"), false);
          result_3591_0.setDontLoadClasses(result_3591_4);
          boolean result_3591_5 = AttributeUtils.booleanWithDefault(solutionElement.getAttributeValue("compileInMPS"), false);
          result_3591_0.setCompileInMPS(result_3591_5);
          boolean result_3591_6 = AttributeUtils.booleanWithDefault(solutionElement.getAttributeValue("java-stubs-enabled"), true);
          result_3591_0.setEnableJavaStubs(result_3591_6);

          if (StringUtils.isNotEmpty(solutionElement.getAttributeValue("generatorOutputPath"))) {
            String result_3591_7 = macros.expandPath(solutionElement.getAttributeValue("generatorOutputPath"), file);
            result_3591_0.setOutputPath(result_3591_7);
          }

          result_3591_0.getModelRoots().addAll(ModuleDescriptorPersistence.loadModelRoots(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "models")).first(), "modelRoot"), file, macros));

          ModuleDescriptorPersistence.loadDependencies(result_3591_0, solutionElement);
          for (Element entryElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "classPath")).first(), "entry")).concat(ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "runtimeClassPath")).first(), "entry")))) {
            // runtime classpath left for compatibility 
            ClassPathEntry result_3591_8 = new ClassPathEntry();
            String result_3591_9 = macros.expandPath(entryElement.getAttributeValue("path"), file);
            result_3591_8.setPath(result_3591_9);
            boolean result_3591_10 = AttributeUtils.booleanWithDefault(entryElement.getAttributeValue("include"), false);
            result_3591_8.setIncludedInVCS(result_3591_10);
            result_3591_0.getClassPaths().add(result_3591_8);
          }

          for (Element entryElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "sourcePath")).first(), "source"))) {
            result_3591_0.getSourcePaths().add(macros.expandPath(entryElement.getAttributeValue("path"), file));
          }
          return result_3591_0;
        }
      }.invoke();
    } catch (Exception e) {
      throw new ModuleReadException(e);
    }
    ModuleDescriptorPersistence.setTimestamp(descriptor, file, false);
    return descriptor;
  }

  public static void saveSolutionDescriptor(final IFile file, final SolutionDescriptor descriptor) {
    if (file.isReadOnly()) {
      if (log.isErrorEnabled()) {
        log.error("Can't save " + file.getPath());
      }
      return;
    }

    final Macros macros = Macros.solutionDescriptor();
    Element solElem = new _FunctionTypes._return_P0_E0<Element>() {
      public Element invoke() {
        Element result_3591_11 = new Element("solution");
        if (descriptor.getNamespace() != null) {
          String result_3591_12 = descriptor.getNamespace();
          result_3591_11.setAttribute("name", "" + result_3591_12);
        }
        if (descriptor.getUUID() != null) {
          String result_3591_13 = descriptor.getUUID();
          result_3591_11.setAttribute("uuid", "" + result_3591_13);
        }
        boolean result_3591_14 = descriptor.isExternallyVisible();
        result_3591_11.setAttribute("extenallyVisible", "" + result_3591_14);
        if (descriptor.isDontLoadClasses()) {
          boolean result_3591_15 = true;
          result_3591_11.setAttribute("dontLoadClasses", "" + result_3591_15);
        }
        boolean result_3591_16 = descriptor.getCompileInMPS();
        result_3591_11.setAttribute("compileInMPS", "" + result_3591_16);
        boolean result_3591_17 = descriptor.getEnableJavaStubs();
        result_3591_11.setAttribute("java-stubs-enabled", "" + result_3591_17);
        if (descriptor.getOutputPath() != null) {
          String result_3591_18 = macros.shrinkPath(descriptor.getOutputPath(), file);
          result_3591_11.setAttribute("generatorOutputPath", "" + result_3591_18);
        }

        Element result_3591_19 = new Element("models");
        ModuleDescriptorPersistence.saveModelRoots(result_3591_19, descriptor.getModelRoots(), file, macros);
        result_3591_11.addContent(result_3591_19);

        Element result_3591_20 = new Element("classPath");
        for (ClassPathEntry entry : ListSequence.fromList(descriptor.getClassPaths())) {
          Element result_3591_21 = new Element("entry");
          String result_3591_22 = macros.shrinkPath(entry.getPath(), file);
          result_3591_21.setAttribute("path", "" + result_3591_22);
          boolean result_3591_23 = entry.isIncludedInVCS();
          result_3591_21.setAttribute("include", "" + result_3591_23);
          result_3591_20.addContent(result_3591_21);
        }
        result_3591_11.addContent(result_3591_20);

        Element result_3591_24 = new Element("sourcePath");
        for (String p : ListSequence.fromList(descriptor.getSourcePaths())) {
          Element result_3591_25 = new Element("source");
          String result_3591_26 = macros.shrinkPath(p, file);
          result_3591_25.setAttribute("path", "" + result_3591_26);
          result_3591_24.addContent(result_3591_25);
        }
        result_3591_11.addContent(result_3591_24);

        ModuleDescriptorPersistence.saveDependencies(result_3591_11, descriptor);
        return result_3591_11;
      }
    }.invoke();

    try {
      OutputStream os = file.openOutputStream();
      JDOMUtil.writeDocument(new Document(solElem), os);
    } catch (Exception e) {
      if (log.isErrorEnabled()) {
        log.error("", e);
      }
    }

    ModuleDescriptorPersistence.setTimestamp(descriptor, file, true);
  }
}
