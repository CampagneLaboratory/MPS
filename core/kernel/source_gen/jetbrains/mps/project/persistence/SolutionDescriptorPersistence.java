package jetbrains.mps.project.persistence;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.util.MacroHelper;
import org.jdom.Document;
import jetbrains.mps.util.JDOMUtil;
import org.jdom.Element;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.xmlQuery.runtime.AttributeUtils;
import jetbrains.mps.project.structure.modules.SolutionKind;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.smodel.LanguageID;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.io.OutputStream;

public class SolutionDescriptorPersistence {
  protected static Log log = LogFactory.getLog(SolutionDescriptorPersistence.class);

  private SolutionDescriptorPersistence() {
  }

  public static SolutionDescriptor loadSolutionDescriptor(IFile file, final MacroHelper macroHelper) {
    SolutionDescriptor descriptor;
    try {
      Document document = JDOMUtil.loadDocument(file);
      Element rootElement = document.getRootElement();
      final Element solutionElement = (Element) rootElement;

      assert solutionElement != null;

      descriptor = new _FunctionTypes._return_P0_E0<SolutionDescriptor>() {
        public SolutionDescriptor invoke() {
          final SolutionDescriptor result_8ckma3_a0a0g0b0a = new SolutionDescriptor();
          final String result_8ckma3_a0a0a0g0b0a = solutionElement.getAttributeValue("name");
          result_8ckma3_a0a0g0b0a.setNamespace(result_8ckma3_a0a0a0g0b0a);

          if (solutionElement.getAttributeValue("uuid") != null) {
            final String result_8ckma3_a0a2a0a0g0b0a = solutionElement.getAttributeValue("uuid");
            result_8ckma3_a0a0g0b0a.setUUID(result_8ckma3_a0a2a0a0g0b0a);
          }
          if (AttributeUtils.stringWithDefault(solutionElement.getAttributeValue("pluginKind"), "") != null && AttributeUtils.stringWithDefault(solutionElement.getAttributeValue("pluginKind"), "").length() > 0) {
            final SolutionKind result_8ckma3_a0a3a0a0g0b0a = SolutionKind.valueOf(AttributeUtils.stringWithDefault(solutionElement.getAttributeValue("pluginKind"), ""));
            result_8ckma3_a0a0g0b0a.setKind(result_8ckma3_a0a3a0a0g0b0a);
          }

          final boolean result_8ckma3_a5a0a0g0b0a = AttributeUtils.booleanWithDefault(solutionElement.getAttributeValue("compileInMPS"), false);
          result_8ckma3_a0a0g0b0a.setCompileInMPS(result_8ckma3_a5a0a0g0b0a);

          if (isNotEmpty_8ckma3_a0k0a0a0a0g0b0a(solutionElement.getAttributeValue("generatorOutputPath"))) {
            final String result_8ckma3_a0a7a0a0g0b0a = macroHelper.expandPath(solutionElement.getAttributeValue("generatorOutputPath"));
            result_8ckma3_a0a0g0b0a.setOutputPath(result_8ckma3_a0a7a0a0g0b0a);
          }

          result_8ckma3_a0a0g0b0a.getModelRoots().addAll(ModuleDescriptorPersistence.loadModelRoots(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "models")).first(), "modelRoot"), macroHelper));

          if (ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "stubModelEntries")).isNotEmpty()) {
            List<ModelRoot> roots = ModuleDescriptorPersistence.loadStubModelEntries(AttributeUtils.elementChildren(solutionElement, "stubModelEntries"), macroHelper);
            result_8ckma3_a0a0g0b0a.getStubModelEntries().addAll(roots);
          }

          ModuleDescriptorPersistence.loadDependencies(result_8ckma3_a0a0g0b0a, solutionElement);
          for (Element entryElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "classPath")).first(), "entry")).concat(ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "runtimeClassPath")).first(), "entry")))) {
            // runtime classpath left for compatibility 
            ModelRoot entry = new ModelRoot();
            entry.setPath(macroHelper.expandPath(entryElement.getAttributeValue("path")));
            entry.setManager(LanguageID.JAVA_MANAGER);
            result_8ckma3_a0a0g0b0a.getStubModelEntries().add(entry);
          }

          for (Element entryElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "sourcePath")).first(), "source"))) {
            result_8ckma3_a0a0g0b0a.getSourcePaths().add(macroHelper.expandPath(entryElement.getAttributeValue("path")));
          }
          return result_8ckma3_a0a0g0b0a;
        }
      }.invoke();
    } catch (Exception e) {
      throw new ModuleReadException(e);
    }
    ModuleDescriptorPersistence.setTimestamp(descriptor, file);
    return descriptor;
  }

  public static void saveSolutionDescriptor(IFile file, final SolutionDescriptor descriptor, final MacroHelper macroHelper) {
    if (file.isReadOnly()) {
      if (log.isErrorEnabled()) {
        log.error("Can't save " + file.getPath());
      }
      return;
    }

    Element solElem = new _FunctionTypes._return_P0_E0<Element>() {
      public Element invoke() {
        final Element result_8ckma3_a0a0c0b = new Element("solution");
        if (descriptor.getNamespace() != null) {
          final String result_8ckma3_a0a0a0a0c0b = descriptor.getNamespace();
          result_8ckma3_a0a0c0b.setAttribute("name", "" + result_8ckma3_a0a0a0a0c0b);
        }
        if (descriptor.getUUID() != null) {
          final String result_8ckma3_a0a1a0a0c0b = descriptor.getUUID();
          result_8ckma3_a0a0c0b.setAttribute("uuid", "" + result_8ckma3_a0a1a0a0c0b);
        }
        if (descriptor.getKind() != SolutionKind.NONE) {
          final String result_8ckma3_a0a2a0a0c0b = descriptor.getKind().name();
          result_8ckma3_a0a0c0b.setAttribute("pluginKind", "" + result_8ckma3_a0a2a0a0c0b);
        }
        final boolean result_8ckma3_a3a0a0c0b = descriptor.getCompileInMPS();
        result_8ckma3_a0a0c0b.setAttribute("compileInMPS", "" + result_8ckma3_a3a0a0c0b);
        if (descriptor.getOutputPath() != null) {
          final String result_8ckma3_a0a4a0a0c0b = macroHelper.shrinkPath(descriptor.getOutputPath());
          result_8ckma3_a0a0c0b.setAttribute("generatorOutputPath", "" + result_8ckma3_a0a4a0a0c0b);
        }

        final Element result_8ckma3_a6a0a0c0b = new Element("models");
        ModuleDescriptorPersistence.saveModelRoots(result_8ckma3_a6a0a0c0b, descriptor.getModelRoots(), macroHelper);
        result_8ckma3_a0a0c0b.addContent(result_8ckma3_a6a0a0c0b);

        if (!(descriptor.getStubModelEntries().isEmpty())) {
          final Element result_8ckma3_a0a8a0a0c0b = new Element("stubModelEntries");
          ModuleDescriptorPersistence.saveStubModelEntries(result_8ckma3_a0a8a0a0c0b, descriptor.getStubModelEntries(), macroHelper);
          result_8ckma3_a0a0c0b.addContent(result_8ckma3_a0a8a0a0c0b);
        }


        final Element result_8ckma3_a11a0a0c0b = new Element("sourcePath");
        for (String p : CollectionSequence.fromCollection(descriptor.getSourcePaths())) {
          final Element result_8ckma3_a0a0a11a0a0c0b = new Element("source");
          final String result_8ckma3_a0a0a0a11a0a0c0b = macroHelper.shrinkPath(p);
          result_8ckma3_a0a0a11a0a0c0b.setAttribute("path", "" + result_8ckma3_a0a0a0a11a0a0c0b);
          result_8ckma3_a11a0a0c0b.addContent(result_8ckma3_a0a0a11a0a0c0b);
        }
        result_8ckma3_a0a0c0b.addContent(result_8ckma3_a11a0a0c0b);

        ModuleDescriptorPersistence.saveDependencies(result_8ckma3_a0a0c0b, descriptor);
        return result_8ckma3_a0a0c0b;
      }
    }.invoke();

    try {
      OutputStream os = file.openOutputStream();
      JDOMUtil.writeDocument(new Document(solElem), os);
    } catch (Exception e) {
      if (log.isErrorEnabled()) {
        log.error("", e);
      }
    }

    ModuleDescriptorPersistence.setTimestamp(descriptor, file);
  }

  public static boolean isNotEmpty_8ckma3_a0k0a0a0a0g0b0a(String str) {
    return str != null && str.length() > 0;
  }
}
