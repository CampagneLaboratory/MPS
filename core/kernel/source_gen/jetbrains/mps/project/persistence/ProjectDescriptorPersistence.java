package jetbrains.mps.project.persistence;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jdom.Element;
import jetbrains.mps.project.structure.project.ProjectDescriptor;
import java.io.File;
import jetbrains.mps.util.Macros;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.project.structure.project.Path;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.structure.project.testconfigurations.BaseTestConfiguration;
import jetbrains.mps.project.structure.project.testconfigurations.ModelsTestConfiguration;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.project.structure.project.testconfigurations.ModuleTestConfiguration;
import java.io.FileOutputStream;
import org.jdom.Document;
import jetbrains.mps.util.JDOMUtil;
import jetbrains.mps.xmlQuery.runtime.AttributeUtils;
import jetbrains.mps.project.structure.modules.ModuleReference;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class ProjectDescriptorPersistence {
  protected static Log log = LogFactory.getLog(ProjectDescriptorPersistence.class);

  public static Element saveProjectDescriptorToElement(final ProjectDescriptor descriptor, final File file) {
    final Macros macros = Macros.projectDescriptor();
    return new _FunctionTypes._return_P0_E0<Element>() {
      public Element invoke() {
        Element result_9913_0 = new Element("project");
        Element result_9913_1 = new Element("projectSolutions");
        for (Path solutionPath : ListSequence.fromList(descriptor.getSolutions())) {
          Element result_9913_2 = new Element("solutionPath");
          if (solutionPath.getPath() != null) {
            String result_9913_3 = macros.shrinkPath(solutionPath.getPath(), file);
            result_9913_2.setAttribute("path", "" + result_9913_3);
          }
          if (solutionPath.getMPSFolder() != null) {
            String result_9913_4 = solutionPath.getMPSFolder();
            result_9913_2.setAttribute("folder", "" + result_9913_4);
          }
          result_9913_1.addContent(result_9913_2);
        }
        result_9913_0.addContent(result_9913_1);

        Element result_9913_5 = new Element("projectLanguages");
        for (Path languagePath : ListSequence.fromList(descriptor.getLanguages())) {
          Element result_9913_6 = new Element("languagePath");
          if (languagePath.getPath() != null) {
            String result_9913_7 = macros.shrinkPath(languagePath.getPath(), file);
            result_9913_6.setAttribute("path", "" + result_9913_7);
          }
          if (languagePath.getMPSFolder() != null) {
            String result_9913_8 = languagePath.getMPSFolder();
            result_9913_6.setAttribute("folder", "" + result_9913_8);
          }
          result_9913_5.addContent(result_9913_6);
        }
        result_9913_0.addContent(result_9913_5);

        Element result_9913_9 = new Element("projectDevkits");
        for (Path devkitPath : ListSequence.fromList(descriptor.getDevkits())) {
          Element result_9913_10 = new Element("devkitPath");
          if (devkitPath.getPath() != null) {
            String result_9913_11 = macros.shrinkPath(devkitPath.getPath(), file);
            result_9913_10.setAttribute("path", "" + result_9913_11);
          }
          if (devkitPath.getMPSFolder() != null) {
            String result_9913_12 = devkitPath.getMPSFolder();
            result_9913_10.setAttribute("folder", "" + result_9913_12);
          }
          result_9913_9.addContent(result_9913_10);
        }
        result_9913_0.addContent(result_9913_9);

        Element result_9913_13 = new Element("genConfs");
        for (BaseTestConfiguration tc : ListSequence.fromList(descriptor.getTestConfigurations())) {
          if (tc instanceof ModelsTestConfiguration) {
            ModelsTestConfiguration mgc = (ModelsTestConfiguration)tc;
            Element result_9913_14 = new Element("genConfModels");
            if (mgc.getName() != null) {
              String result_9913_15 = mgc.getName();
              result_9913_14.setAttribute("name", "" + result_9913_15);
            }
            Element result_9913_16 = new Element("models");
            for (SModelReference m : ListSequence.fromList(mgc.getModels())) {
              Element result_9913_17 = new Element("model");
              String result_9913_18 = m.toString();
              result_9913_17.setAttribute("modelRef", "" + result_9913_18);
              result_9913_16.addContent(result_9913_17);
            }
            result_9913_14.addContent(result_9913_16);
            result_9913_13.addContent(result_9913_14);
          }
          if (tc instanceof ModuleTestConfiguration) {
            ModuleTestConfiguration sgc = (ModuleTestConfiguration)tc;
            Element result_9913_19 = new Element("genConfModule");
            if (sgc.getName() != null) {
              String result_9913_20 = sgc.getName();
              result_9913_19.setAttribute("name", "" + result_9913_20);
            }

            if (sgc.getModuleRef() != null) {
              String result_9913_21 = sgc.getModuleRef().toString();
              result_9913_19.setAttribute("moduleRef", "" + result_9913_21);
            }
            result_9913_13.addContent(result_9913_19);
          }
        }
        result_9913_0.addContent(result_9913_13);
        return result_9913_0;
      }
    }.invoke();
  }

  public static void saveProjectDescriptor(ProjectDescriptor descriptor, File file) {
    Element projectElement = saveProjectDescriptorToElement(descriptor, file);

    try {
      FileOutputStream os = new FileOutputStream(file);
      Document doc = new Document(projectElement);
      JDOMUtil.writeDocument(doc, os);
    } catch (Exception e) {
      if (log.isErrorEnabled()) {
        log.error("", e);
      }
    }
  }

  public static void loadProjectDescriptorFromElement(ProjectDescriptor descriptor, File file, Element root) {
    Macros macros = Macros.projectDescriptor();
    ProjectDescriptor result_9913_22 = descriptor;
    String result_9913_23 = file.getName();
    result_9913_22.setName(result_9913_23);

    if (root == null) {
      return;
    }

    // project solutions 
    for (Element solutionElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root, "projectSolutions")).first(), "solutionPath"))) {
      Path solutionPath = new Path();
      Path result_9913_24 = solutionPath;
      String result_9913_25 = macros.expandPath(solutionElement.getAttributeValue("path"), file);
      result_9913_24.setPath(result_9913_25);
      String result_9913_26 = solutionElement.getAttributeValue("folder");
      result_9913_24.setMPSFolder(result_9913_26);
      result_9913_22.getSolutions().add(solutionPath);
    }

    // project languages 
    for (Element languageElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root, "projectLanguages")).first(), "languagePath")).concat(ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root, "projectLanguages")).first(), "projectLanguage")))) {
      Path languagePath = new Path();
      Path result_9913_27 = languagePath;
      String result_9913_28 = macros.expandPath(languageElement.getAttributeValue("path"), file);
      result_9913_27.setPath(result_9913_28);
      String result_9913_29 = languageElement.getAttributeValue("folder");
      result_9913_27.setMPSFolder(result_9913_29);
      result_9913_22.getLanguages().add(languagePath);
    }

    // project devkits 
    for (Element languageElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root, "projectDevkits")).first(), "devkitPath"))) {
      Path devkitPath = new Path();
      Path result_9913_30 = devkitPath;
      String result_9913_31 = macros.expandPath(languageElement.getAttributeValue("path"), file);
      result_9913_30.setPath(result_9913_31);
      String result_9913_32 = languageElement.getAttributeValue("folder");
      result_9913_30.setMPSFolder(result_9913_32);
      result_9913_22.getDevkits().add(devkitPath);
    }

    for (Element e : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root, "genConfs")).first(), "genConfModels"))) {
      ModelsTestConfiguration tc = new ModelsTestConfiguration();
      tc.setName(e.getAttributeValue("name"));
      for (Element me : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(e, "models")).first(), "model"))) {
        tc.addModel(SModelReference.fromString(me.getAttributeValue("modelRef")));
      }
      result_9913_22.getTestConfigurations().add(tc);
    }
    for (Element e : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root, "genConfs")).first(), "genConfModule"))) {
      ModuleTestConfiguration tc = new ModuleTestConfiguration();
      tc.setName(e.getAttributeValue("name"));
      if (e.getAttributeValue("moduleRef") != null) {
        tc.setModuleRef(ModuleReference.fromString(e.getAttributeValue("moduleRef")));
        result_9913_22.getTestConfigurations().add(tc);
      }
    }
  }

  public static void loadProjectDescriptor(ProjectDescriptor descriptor, final File file) {
    if (file == null) {
      descriptor.setName("Dummy project");
      return;
    }

    if (!(file.exists())) {
      descriptor.setName(file.getName());
      return;
    }

    try {
      Document document = JDOMUtil.loadDocument(file);
      List<Element> components = ListSequence.fromListWithValues(new ArrayList<Element>(), ((List<Element>)document.getRootElement().getChildren("component")));
      Element projectElement = ((Element)ListSequence.fromList(components).findFirst(new IWhereFilter<Element>() {
        public boolean accept(Element it) {
          return it.getAttributeValue("name").equals("MPSProject");
        }
      }));

      loadProjectDescriptorFromElement(descriptor, file, projectElement);
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}
