package jetbrains.mps.project.persistence;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jdom.Element;
import jetbrains.mps.project.structure.project.ProjectDescriptor;
import java.io.File;
import jetbrains.mps.util.Macros;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.project.structure.project.Path;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.structure.project.testconfigurations.BaseTestConfiguration;
import jetbrains.mps.project.structure.project.testconfigurations.ModelsTestConfiguration;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.project.structure.project.testconfigurations.ModuleTestConfiguration;
import java.io.FileOutputStream;
import org.jdom.Document;
import jetbrains.mps.util.JDOMUtil;
import jetbrains.mps.xmlQuery.runtime.AttributeUtils;
import jetbrains.mps.project.structure.modules.ModuleReference;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class ProjectDescriptorPersistence {
  protected static Log log = LogFactory.getLog(ProjectDescriptorPersistence.class);

  public static Element saveProjectDescriptorToElement(final ProjectDescriptor descriptor, final File file) {
    final Macros macros = Macros.projectDescriptor();
    return new _FunctionTypes._return_P0_E0<Element>() {
      public Element invoke() {
        final Element result_jnk9az_a0a1a0 = new Element("project");
        final Element result_jnk9az_a0a0a1a0 = new Element("projectSolutions");
        for (Path solutionPath : ListSequence.fromList(descriptor.getSolutions())) {
          final Element result_jnk9az_a0a0a0a0a1a0 = new Element("solutionPath");
          if (solutionPath.getPath() != null) {
            final String result_jnk9az_a0a0a0a0a0a0a1a0 = macros.shrinkPath(solutionPath.getPath(), file);
            result_jnk9az_a0a0a0a0a1a0.setAttribute("path", "" + result_jnk9az_a0a0a0a0a0a0a1a0);
          }
          if (solutionPath.getMPSFolder() != null) {
            final String result_jnk9az_a0a1a0a0a0a0a1a0 = solutionPath.getMPSFolder();
            result_jnk9az_a0a0a0a0a1a0.setAttribute("folder", "" + result_jnk9az_a0a1a0a0a0a0a1a0);
          }
          result_jnk9az_a0a0a1a0.addContent(result_jnk9az_a0a0a0a0a1a0);
        }
        result_jnk9az_a0a1a0.addContent(result_jnk9az_a0a0a1a0);

        final Element result_jnk9az_a2a0a1a0 = new Element("projectLanguages");
        for (Path languagePath : ListSequence.fromList(descriptor.getLanguages())) {
          final Element result_jnk9az_a0a0a2a0a1a0 = new Element("languagePath");
          if (languagePath.getPath() != null) {
            final String result_jnk9az_a0a0a0a0a2a0a1a0 = macros.shrinkPath(languagePath.getPath(), file);
            result_jnk9az_a0a0a2a0a1a0.setAttribute("path", "" + result_jnk9az_a0a0a0a0a2a0a1a0);
          }
          if (languagePath.getMPSFolder() != null) {
            final String result_jnk9az_a0a1a0a0a2a0a1a0 = languagePath.getMPSFolder();
            result_jnk9az_a0a0a2a0a1a0.setAttribute("folder", "" + result_jnk9az_a0a1a0a0a2a0a1a0);
          }
          result_jnk9az_a2a0a1a0.addContent(result_jnk9az_a0a0a2a0a1a0);
        }
        result_jnk9az_a0a1a0.addContent(result_jnk9az_a2a0a1a0);

        final Element result_jnk9az_a4a0a1a0 = new Element("projectDevkits");
        for (Path devkitPath : ListSequence.fromList(descriptor.getDevkits())) {
          final Element result_jnk9az_a0a0a4a0a1a0 = new Element("devkitPath");
          if (devkitPath.getPath() != null) {
            final String result_jnk9az_a0a0a0a0a4a0a1a0 = macros.shrinkPath(devkitPath.getPath(), file);
            result_jnk9az_a0a0a4a0a1a0.setAttribute("path", "" + result_jnk9az_a0a0a0a0a4a0a1a0);
          }
          if (devkitPath.getMPSFolder() != null) {
            final String result_jnk9az_a0a1a0a0a4a0a1a0 = devkitPath.getMPSFolder();
            result_jnk9az_a0a0a4a0a1a0.setAttribute("folder", "" + result_jnk9az_a0a1a0a0a4a0a1a0);
          }
          result_jnk9az_a4a0a1a0.addContent(result_jnk9az_a0a0a4a0a1a0);
        }
        result_jnk9az_a0a1a0.addContent(result_jnk9az_a4a0a1a0);

        final Element result_jnk9az_a6a0a1a0 = new Element("genConfs");
        for (BaseTestConfiguration tc : ListSequence.fromList(descriptor.getTestConfigurations())) {
          if (tc instanceof ModelsTestConfiguration) {
            ModelsTestConfiguration mgc = (ModelsTestConfiguration) tc;
            final Element result_jnk9az_a1a0a0a6a0a1a0 = new Element("genConfModels");
            if (mgc.getName() != null) {
              final String result_jnk9az_a0a0a1a0a0a6a0a1a0 = mgc.getName();
              result_jnk9az_a1a0a0a6a0a1a0.setAttribute("name", "" + result_jnk9az_a0a0a1a0a0a6a0a1a0);
            }
            final Element result_jnk9az_a1a1a0a0a6a0a1a0 = new Element("models");
            for (SModelReference m : ListSequence.fromList(mgc.getModels())) {
              final Element result_jnk9az_a0a0a1a1a0a0a6a0a1a0 = new Element("model");
              final String result_jnk9az_a0a0a0a1a1a0a0a6a0a1a0 = m.toString();
              result_jnk9az_a0a0a1a1a0a0a6a0a1a0.setAttribute("modelRef", "" + result_jnk9az_a0a0a0a1a1a0a0a6a0a1a0);
              result_jnk9az_a1a1a0a0a6a0a1a0.addContent(result_jnk9az_a0a0a1a1a0a0a6a0a1a0);
            }
            result_jnk9az_a1a0a0a6a0a1a0.addContent(result_jnk9az_a1a1a0a0a6a0a1a0);
            result_jnk9az_a6a0a1a0.addContent(result_jnk9az_a1a0a0a6a0a1a0);
          }
          if (tc instanceof ModuleTestConfiguration) {
            ModuleTestConfiguration sgc = (ModuleTestConfiguration) tc;
            final Element result_jnk9az_a1a1a0a6a0a1a0 = new Element("genConfModule");
            if (sgc.getName() != null) {
              final String result_jnk9az_a0a0a1a1a0a6a0a1a0 = sgc.getName();
              result_jnk9az_a1a1a0a6a0a1a0.setAttribute("name", "" + result_jnk9az_a0a0a1a1a0a6a0a1a0);
            }

            if (sgc.getModuleRef() != null) {
              final String result_jnk9az_a0a2a1a1a0a6a0a1a0 = sgc.getModuleRef().toString();
              result_jnk9az_a1a1a0a6a0a1a0.setAttribute("moduleRef", "" + result_jnk9az_a0a2a1a1a0a6a0a1a0);
            }
            result_jnk9az_a6a0a1a0.addContent(result_jnk9az_a1a1a0a6a0a1a0);
          }
        }
        result_jnk9az_a0a1a0.addContent(result_jnk9az_a6a0a1a0);
        return result_jnk9az_a0a1a0;
      }
    }.invoke();
  }

  public static void saveProjectDescriptor(ProjectDescriptor descriptor, File file) {
    Element projectElement = saveProjectDescriptorToElement(descriptor, file);

    try {
      FileOutputStream os = new FileOutputStream(file);
      Document doc = new Document(projectElement);
      JDOMUtil.writeDocument(doc, os);
    } catch (Exception e) {
      if (log.isErrorEnabled()) {
        log.error("", e);
      }
    }
  }

  public static void loadProjectDescriptorFromElement(ProjectDescriptor descriptor, File file, Element root) {
    Macros macros = Macros.projectDescriptor();
    ProjectDescriptor result_jnk9az_a1a2 = descriptor;
    final String result_jnk9az_a0a1a2 = file.getName();
    result_jnk9az_a1a2.setName(result_jnk9az_a0a1a2);

    if (root == null) {
      return;
    }

    // project solutions 
    for (Element solutionElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root, "projectSolutions")).first(), "solutionPath"))) {
      Path solutionPath = new Path();
      Path result_jnk9az_a1a5a1a2 = solutionPath;
      final String result_jnk9az_a0a1a5a1a2 = macros.expandPath(solutionElement.getAttributeValue("path"), file);
      result_jnk9az_a1a5a1a2.setPath(result_jnk9az_a0a1a5a1a2);
      final String result_jnk9az_a1a1a5a1a2 = solutionElement.getAttributeValue("folder");
      result_jnk9az_a1a5a1a2.setMPSFolder(result_jnk9az_a1a1a5a1a2);
      result_jnk9az_a1a2.getSolutions().add(solutionPath);
    }

    // project languages 
    for (Element languageElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root, "projectLanguages")).first(), "languagePath")).concat(ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root, "projectLanguages")).first(), "projectLanguage")))) {
      Path languagePath = new Path();
      Path result_jnk9az_a1a8a1a2 = languagePath;
      final String result_jnk9az_a0a1a8a1a2 = macros.expandPath(languageElement.getAttributeValue("path"), file);
      result_jnk9az_a1a8a1a2.setPath(result_jnk9az_a0a1a8a1a2);
      final String result_jnk9az_a1a1a8a1a2 = languageElement.getAttributeValue("folder");
      result_jnk9az_a1a8a1a2.setMPSFolder(result_jnk9az_a1a1a8a1a2);
      result_jnk9az_a1a2.getLanguages().add(languagePath);
    }

    // project devkits 
    for (Element languageElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root, "projectDevkits")).first(), "devkitPath"))) {
      Path devkitPath = new Path();
      Path result_jnk9az_a1a11a1a2 = devkitPath;
      final String result_jnk9az_a0a1a11a1a2 = macros.expandPath(languageElement.getAttributeValue("path"), file);
      result_jnk9az_a1a11a1a2.setPath(result_jnk9az_a0a1a11a1a2);
      final String result_jnk9az_a1a1a11a1a2 = languageElement.getAttributeValue("folder");
      result_jnk9az_a1a11a1a2.setMPSFolder(result_jnk9az_a1a1a11a1a2);
      result_jnk9az_a1a2.getDevkits().add(devkitPath);
    }

    for (Element e : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root, "genConfs")).first(), "genConfModels"))) {
      ModelsTestConfiguration tc = new ModelsTestConfiguration();
      tc.setName(e.getAttributeValue("name"));
      for (Element me : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(e, "models")).first(), "model"))) {
        tc.addModel(SModelReference.fromString(me.getAttributeValue("modelRef")));
      }
      result_jnk9az_a1a2.getTestConfigurations().add(tc);
    }
    for (Element e : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root, "genConfs")).first(), "genConfModule"))) {
      ModuleTestConfiguration tc = new ModuleTestConfiguration();
      tc.setName(e.getAttributeValue("name"));
      if (e.getAttributeValue("moduleRef") != null) {
        tc.setModuleRef(ModuleReference.fromString(e.getAttributeValue("moduleRef")));
        result_jnk9az_a1a2.getTestConfigurations().add(tc);
      }
    }
  }

  public static void loadProjectDescriptor(ProjectDescriptor descriptor, final File file) {
    if (file == null) {
      descriptor.setName("Dummy project");
      return;
    }

    if (!(file.exists())) {
      descriptor.setName(file.getName());
      return;
    }

    try {
      Document document = JDOMUtil.loadDocument(file);
      List<Element> components = ListSequence.fromListWithValues(new ArrayList<Element>(), ((List<Element>) document.getRootElement().getChildren("component")));
      Element projectElement = ((Element) ListSequence.fromList(components).findFirst(new IWhereFilter<Element>() {
        public boolean accept(Element it) {
          return it.getAttributeValue("name").equals("MPSProject");
        }
      }));

      loadProjectDescriptorFromElement(descriptor, file, projectElement);
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}
