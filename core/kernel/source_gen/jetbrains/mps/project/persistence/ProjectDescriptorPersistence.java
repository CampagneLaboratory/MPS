package jetbrains.mps.project.persistence;

/*Generated by MPS */

import org.jdom.Element;
import jetbrains.mps.project.structure.project.ProjectDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.util.MacroHelper;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.project.structure.project.Path;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.util.xml.XmlUtil;
import jetbrains.mps.project.structure.project.testconfigurations.BaseTestConfiguration;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.structure.project.testconfigurations.ModelsTestConfiguration;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.project.structure.project.testconfigurations.ModuleTestConfiguration;
import java.io.OutputStream;
import org.jdom.Document;
import jetbrains.mps.util.JDOMUtil;
import org.apache.log4j.Priority;
import java.util.List;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ProjectDescriptorPersistence {
  private ProjectDescriptorPersistence() {
  }

  public static Element saveProjectDescriptorToElement(ProjectDescriptor descriptor, IFile file) {
    final MacroHelper macroHelper = MacrosFactory.forProjectFile(file);
    Element project = new Element("project");

    Element projectModules = new Element("projectModules");
    for (Path path : Sequence.fromIterable(((Iterable<Path>) descriptor.getModules())).sort(new ISelector<Path, String>() {
      public String select(Path p) {
        return macroHelper.shrinkPath(p.getPath());
      }
    }, true)) {
      XmlUtil.tagWithAttributes(projectModules, "modulePath", "path", macroHelper.shrinkPath(path.getPath()), "folder", (path.getMPSFolder() != null ?
        path.getMPSFolder() :
        ""
      ));
    }
    project.addContent(projectModules);

    Element genConfs = new Element("genConfs");
    for (BaseTestConfiguration tc : ListSequence.fromList(descriptor.getTestConfigurations())) {
      if (tc instanceof ModelsTestConfiguration) {
        ModelsTestConfiguration mgc = (ModelsTestConfiguration) tc;
        Element genConfModels = new Element("genConfModels");
        if (mgc.getName() != null) {
          genConfModels.setAttribute("name", mgc.getName());
        }
        Element models = new Element("models");
        for (SModelReference m : ListSequence.fromList(mgc.getModels())) {
          XmlUtil.tagWithAttribute(models, "model", "modelRef", m.toString());
        }
        genConfModels.addContent(models);
        genConfs.addContent(genConfModels);
      }
      if (tc instanceof ModuleTestConfiguration) {
        ModuleTestConfiguration sgc = (ModuleTestConfiguration) tc;
        Element genConfModule = new Element("genConfModule");
        if (sgc.getName() != null) {
          genConfModule.setAttribute("name", sgc.getName());
        }
        if (sgc.getModuleRef() != null) {
          genConfModule.setAttribute("moduleRef", sgc.getModuleRef().toString());
        }
        genConfs.addContent(genConfModule);
      }
    }

    project.addContent(genConfs);
    return project;
  }

  public static void saveProjectDescriptor(ProjectDescriptor descriptor, IFile file) {
    Element projectElement = saveProjectDescriptorToElement(descriptor, file);

    try {
      OutputStream os = file.openOutputStream();
      Document doc = new Document(projectElement);
      JDOMUtil.writeDocument(doc, os);
    } catch (Exception e) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("", e);
      }
    }
  }

  public static void loadProjectDescriptorFromElement(ProjectDescriptor descriptor, IFile file, Element root) {
    MacroHelper macros = MacrosFactory.forProjectFile(file);
    ProjectDescriptor result_jnk9az_a1a3 = descriptor;
    final String result_jnk9az_a0a1a3 = file.getName();
    result_jnk9az_a1a3.setName(result_jnk9az_a0a1a3);

    if (root == null) {
      return;
    }

    List<Element> moduleList = ListSequence.fromList(new ArrayList<Element>());
    ListSequence.fromList(moduleList).addSequence(Sequence.fromIterable(XmlUtil.children(XmlUtil.first(root, "projectSolutions"), "solutionPath")));
    ListSequence.fromList(moduleList).addSequence(Sequence.fromIterable(XmlUtil.children(XmlUtil.first(root, "projectLanguages"), "languagePath")));
    ListSequence.fromList(moduleList).addSequence(Sequence.fromIterable(XmlUtil.children(XmlUtil.first(root, "projectDevkits"), "devkitPath")));
    ListSequence.fromList(moduleList).addSequence(Sequence.fromIterable(XmlUtil.children(XmlUtil.first(root, "projectModules"), "modulePath")));
    for (Element moduleElement : ListSequence.fromList(moduleList)) {
      Path modulePath = new Path();
      Path result_jnk9az_a1a9a1a3 = modulePath;
      final String result_jnk9az_a0a1a9a1a3 = macros.expandPath(moduleElement.getAttributeValue("path"));
      result_jnk9az_a1a9a1a3.setPath(result_jnk9az_a0a1a9a1a3);
      final String result_jnk9az_a1a1a9a1a3 = moduleElement.getAttributeValue("folder");
      result_jnk9az_a1a9a1a3.setMPSFolder(result_jnk9az_a1a1a9a1a3);
      result_jnk9az_a1a3.addModule(modulePath);
    }

    for (Element e : Sequence.fromIterable(XmlUtil.children(XmlUtil.first(root, "genConfs"), "genConfModels"))) {
      ModelsTestConfiguration tc = new ModelsTestConfiguration();
      tc.setName(e.getAttributeValue("name"));
      for (Element me : Sequence.fromIterable(XmlUtil.children(XmlUtil.first(e, "models"), "model"))) {
        tc.addModel(PersistenceFacade.getInstance().createModelReference(me.getAttributeValue("modelRef")));
      }
      result_jnk9az_a1a3.getTestConfigurations().add(tc);
    }

    for (Element e : Sequence.fromIterable(XmlUtil.children(XmlUtil.first(root, "genConfs"), "genConfModule"))) {
      ModuleTestConfiguration tc = new ModuleTestConfiguration();
      tc.setName(e.getAttributeValue("name"));
      String moduleRef = e.getAttributeValue("moduleRef");
      if (moduleRef != null) {
        tc.setModuleRef(ModuleReference.fromString(moduleRef));
        result_jnk9az_a1a3.getTestConfigurations().add(tc);
      }
    }
  }

  public static void loadProjectDescriptor(ProjectDescriptor descriptor, final IFile file) {
    if (file == null) {
      descriptor.setName("Dummy project");
      return;
    }

    if (!(file.exists())) {
      descriptor.setName(file.getName());
      return;
    }

    try {
      Document document = JDOMUtil.loadDocument(file);
      List<Element> components = ListSequence.fromListWithValues(new ArrayList<Element>(), ((List<Element>) document.getRootElement().getChildren("component")));
      Element projectElement = ListSequence.fromList(components).findFirst(new IWhereFilter<Element>() {
        public boolean accept(Element it) {
          return it.getAttributeValue("name").equals("MPSProject");
        }
      });

      loadProjectDescriptorFromElement(descriptor, file, projectElement);
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  protected static Logger LOG = LogManager.getLogger(ProjectDescriptorPersistence.class);
}
