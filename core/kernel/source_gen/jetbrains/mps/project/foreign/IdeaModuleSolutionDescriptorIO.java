package jetbrains.mps.project.foreign;

/*Generated by MPS */

import jetbrains.mps.project.io.DescriptorIO;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.project.io.DescriptorIOException;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.project.structure.modules.ModuleReference;
import java.io.IOException;
import org.jdom.JDOMException;
import org.jdom.Element;

public class IdeaModuleSolutionDescriptorIO implements DescriptorIO<SolutionDescriptor> {
  public IdeaModuleSolutionDescriptorIO() {
  }

  public SolutionDescriptor readFromFile(final IFile file) throws DescriptorIOException {
    final MPSFacetConfiguration mpsConf = this.readMPSFacetConf(file);
    if (mpsConf == null) {
      return null;
    }
    final MacroExpander mex = new ModuleMacroExpander(null, file);
    SolutionDescriptor sd;
    sd = new _FunctionTypes._return_P0_E0<SolutionDescriptor>() {
      public SolutionDescriptor invoke() {
        final SolutionDescriptor result_56japk_a0a0e0a = new SolutionDescriptor();
        // TODO: namespace 
        final String result_56japk_a1a0a0e0a = file.getName();
        result_56japk_a0a0e0a.setNamespace(result_56japk_a1a0a0e0a);

        final String result_56japk_a3a0a0e0a = mpsConf.getUUID();
        result_56japk_a0a0e0a.setUUID(result_56japk_a3a0a0e0a);

        // TODO: pluginKind 

        final boolean result_56japk_a7a0a0e0a = true;
        result_56japk_a0a0e0a.setCompileInMPS(result_56japk_a7a0a0e0a);

        final boolean result_56japk_a9a0a0e0a = mpsConf.getUseTransientOutputFolder();
        result_56japk_a0a0e0a.setUseTransientOutput(result_56japk_a9a0a0e0a);

        final String result_56japk_a11a0a0e0a = mex.expandMacros(mpsConf.getGeneratorOutputPath());
        result_56japk_a0a0e0a.setOutputPath(result_56japk_a11a0a0e0a);

        if (mpsConf.getModelRoots() != null) {
          for (ModelRoot mrp : mpsConf.getModelRoots()) {
            // TODO: model root manager 
            mrp.setPath(mex.expandMacros(mrp.getPath()));
            result_56japk_a0a0e0a.getModelRoots().add(mrp);
          }

        }

        // TODO: stub model entries 

        // TODO: dependencies 
        if (mpsConf.getUsedLanguages() != null) {
          for (String usedLang : mpsConf.getUsedLanguages()) {
            result_56japk_a0a0e0a.getUsedLanguages().add(ModuleReference.fromString(usedLang));
          }
        }

        // TODO: devkits 

        // TODO : class paths 

        // TODO: source paths 
        return result_56japk_a0a0e0a;
      }
    }.invoke();
    sd.setTimestamp(Long.toString(file.lastModified()));
    return sd;
  }

  private MPSFacetConfiguration readMPSFacetConf(IFile file) throws DescriptorIOException {
    try {
      IdeaModuleConfiguration imc = IdeaModuleConfiguration.readFile(file);
      return imc.getMPSFacetConfiguration();
    } catch (FacetConfigurationFormatException e) {
      throw new DescriptorIOException(e);
    } catch (IOException e) {
      throw new DescriptorIOException(e);
    } catch (JDOMException e) {
      throw new DescriptorIOException(e);
    }
  }

  public void writeToFile(SolutionDescriptor t, IFile file) {
    throw new UnsupportedOperationException();
  }

  public SolutionDescriptor readFromXml(Element element, IFile anchorFile) {
    throw new UnsupportedOperationException();
  }

  public void writeToXml(SolutionDescriptor t, Element element, IFile anchorFile) {
    throw new UnsupportedOperationException();
  }
}
