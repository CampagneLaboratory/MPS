package jetbrains.mps.project.foreign;

/*Generated by MPS */

import org.jdom.Element;
import java.util.Map;
import java.lang.reflect.Method;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.lang.reflect.Modifier;
import jetbrains.mps.xmlQuery.runtime.AttributeUtils;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.ArrayList;

public class MPSFacetConfiguration {
  private String myUUID;
  private String myGeneratorOutputPath;
  private String[] myModelRootPaths;
  private boolean myUseModuleSourceFolder;
  private String[] myUsedLanguages;

  public MPSFacetConfiguration() {
  }

  public void readFromXml(Element config) throws FacetConfigurationFormatException {
    Map<String, Method> props = MapSequence.fromMap(new HashMap<String, Method>());
    for (Method mth : MPSFacetConfiguration.class.getMethods()) {
      if (mth.getName().startsWith("set") && Modifier.isPublic(mth.getModifiers()) && mth.getParameterTypes().length == 1) {
        MapSequence.fromMap(props).put(mth.getName().substring(3), mth);
      }
    }
    for (Element ch : AttributeUtils.elementChildren(config, "option")) {
      Method pr = MapSequence.fromMap(props).get(NameUtil.capitalize(ch.getAttributeValue("name")));
      if (pr != null) {
        Object value;
        if (pr.getParameterTypes()[0].isArray()) {
          value = readArray(ListSequence.fromList(AttributeUtils.elementChildren(ch, "array")).first());
        } else if (pr.getParameterTypes()[0].isPrimitive()) {
          value = Boolean.valueOf(ch.getAttributeValue("value"));
        } else {
          value = ch.getAttributeValue("value");
        }
        setPropertyValue(pr, value);
      }
    }
    MapSequence.fromMap(props).clear();
  }

  private void setPropertyValue(Method pr, Object value) throws FacetConfigurationFormatException {
    try {
      pr.invoke(this, value);
    } catch (InvocationTargetException e) {
      throw new FacetConfigurationFormatException(e);
    } catch (IllegalAccessException e) {
      throw new FacetConfigurationFormatException(e);
    } catch (IllegalArgumentException e) {
      throw new FacetConfigurationFormatException(e);
    }
  }

  private String[] readArray(Element array) {
    List<String> res = ListSequence.fromList(new ArrayList<String>());
    for (Element o : AttributeUtils.elementChildren(array, "option")) {
      ListSequence.fromList(res).addElement(o.getAttributeValue("value"));
    }
    return ListSequence.fromList(res).toGenericArray(String.class);
  }

  public String getUUID() {
    return this.myUUID;
  }

  public void setUUID(String value) {
    this.myUUID = value;
  }

  public String getGeneratorOutputPath() {
    return this.myGeneratorOutputPath;
  }

  public void setGeneratorOutputPath(String value) {
    this.myGeneratorOutputPath = value;
  }

  public String[] getModelRootPaths() {
    return this.myModelRootPaths;
  }

  public void setModelRootPaths(String[] value) {
    this.myModelRootPaths = value;
  }

  public boolean getUseModuleSourceFolder() {
    return this.myUseModuleSourceFolder;
  }

  public void setUseModuleSourceFolder(boolean value) {
    this.myUseModuleSourceFolder = value;
  }

  public String[] getUsedLanguages() {
    return this.myUsedLanguages;
  }

  public void setUsedLanguages(String[] value) {
    this.myUsedLanguages = value;
  }
}
