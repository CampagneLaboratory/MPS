package jetbrains.mps.project.structure.stub;

/*Generated by MPS */

import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.project.structure.modules.GeneratorDescriptor;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import jetbrains.mps.project.structure.modules.DevkitDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ProjectStructureBuilder {
  private ModuleDescriptor mySource;
  private SNode myTarget;

  public ProjectStructureBuilder(ModuleDescriptor descriptor) {
    mySource = descriptor;
  }

  public SNode convert(SModel model) {
    if (mySource instanceof LanguageDescriptor) {
      SNode result = SModelOperations.createNewRootNode(model, "jetbrains.mps.lang.project.structure.Language", null);
      processLanguage(result);
      myTarget = result;
    } else if (mySource instanceof GeneratorDescriptor) {
      SNode result = SModelOperations.createNewRootNode(model, "jetbrains.mps.lang.project.structure.Generator", null);

      myTarget = result;
    } else if (mySource instanceof SolutionDescriptor) {
      SNode result = SModelOperations.createNewRootNode(model, "jetbrains.mps.lang.project.structure.Solution", null);

      myTarget = result;
    } else if (mySource instanceof DevkitDescriptor) {
      SNode result = SModelOperations.createNewRootNode(model, "jetbrains.mps.lang.project.structure.DevKit", null);

      myTarget = result;
    }
    return myTarget;
  }

  private void processLanguage(SNode lang) {
    processModule(lang);
  }

  private void processGenerator(SNode generator) {
    processModule(generator);
  }

  private void processSolution(SNode solution) {
    processModule(solution);
  }

  private void processDevKit(SNode devkit) {
    processModule(devkit);
  }

  private void processModule(SNode module) {
    SPropertyOperations.set(module, "uuid", mySource.getUUID());
    SPropertyOperations.set(module, "namespace", mySource.getNamespace());
    SPropertyOperations.set(module, "compileInMPS", "" + mySource.getCompileInMPS());

    for (Dependency mdep : mySource.getDependencies()) {
      SNode dep = SModelOperations.createNewNode(SNodeOperations.getModel(module), "jetbrains.mps.lang.project.structure.ModuleDependency", null);
      SPropertyOperations.set(dep, "reexport", "" + mdep.isReexport());
      ModuleReference mref = mdep.getModuleRef();
      // TODO FIXME add dynamic reference 
      SLinkOperations.getTargets(module, "dependency", true).add(dep);
    }
  }
}
