package jetbrains.mps.smodel;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.adapter.ids.SContainmentLinkId;
import jetbrains.mps.smodel.adapter.ids.SPropertyId;
import jetbrains.mps.smodel.adapter.ids.SReferenceLinkId;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.model.SNode;

import java.util.List;

public class SNodeUtil {
  public static final String concept_IResolveInfo = "jetbrains.mps.lang.core.structure.IResolveInfo";
  public static final SConceptId conceptId_IResolveInfo = SConceptId.deserialize("ceab5195-25ea-4f22-9b92-103b95ca8c0c/1196978630214");
  public static final String concept_INamedConcept = "jetbrains.mps.lang.core.structure.INamedConcept";
  public static final SConceptId conceptId_INamedConcept = SConceptId.deserialize("ceab5195-25ea-4f22-9b92-103b95ca8c0c/1169194658468");
  public static final String concept_BaseConcept = "jetbrains.mps.lang.core.structure.BaseConcept";
  public static final SConceptId conceptId_BaseConcept = SConceptId.deserialize("ceab5195-25ea-4f22-9b92-103b95ca8c0c/1133920641626");
  public static final String concept_AbstractConceptDeclaration = "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration";
  public static final SConceptId conceptId_AbstractConceptDeclaration = SConceptId.deserialize("c72da2b9-7cce-4447-8389-f407dc1158b7/1169125787135");
  public static final String concept_ConceptDeclaration = "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
  public static final SConceptId conceptId_ConceptDeclaration = SConceptId.deserialize("c72da2b9-7cce-4447-8389-f407dc1158b7/1071489090640");
  public static final String concept_InterfaceConceptDeclaration = "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration";
  public static final SConceptId conceptId_InterfaceConceptDeclaration = SConceptId.deserialize("c72da2b9-7cce-4447-8389-f407dc1158b7/1169125989551");
  public static final String concept_LinkDeclaration = "jetbrains.mps.lang.structure.structure.LinkDeclaration";
  public static final SConceptId conceptId_LinkDeclaration = SConceptId.deserialize("c72da2b9-7cce-4447-8389-f407dc1158b7/1071489288298");
  public static final String concept_InterfacePart = "jetbrains.mps.lang.core.structure.InterfacePart";
  public static final SConceptId conceptId_InterfacePart = SConceptId.deserialize("ceab5195-25ea-4f22-9b92-103b95ca8c0c/1319728274784973096");
  public static final String concept_ImplementationPart = "jetbrains.mps.lang.core.structure.ImplementationPart";
  public static final SConceptId conceptId_ImplementationPart = SConceptId.deserialize("ceab5195-25ea-4f22-9b92-103b95ca8c0c/1319728274783077719");
  public static final String concept_ImplementationWithStubPart = "jetbrains.mps.lang.core.structure.ImplementationWithStubPart";
  public static final SConceptId conceptId_ImplementationWithStubPart = SConceptId.deserialize("ceab5195-25ea-4f22-9b92-103b95ca8c0c/6999738288738427190");

  public static final String link_ConceptDeclaration_extends = "extends";
  public static final SReferenceLinkId
      linkId_ConceptDeclaration_extends = SReferenceLinkId.deserialize("c72da2b9-7cce-4447-8389-f407dc1158b7/1071489090640/1071489389519");
  public static final String link_ConceptDeclaration_implements = "implements";
  public static final SContainmentLinkId
      linkId_ConceptDeclaration_implements = SContainmentLinkId.deserialize("c72da2b9-7cce-4447-8389-f407dc1158b7/1071489090640/1169129564478");
  public static final String link_AbstractConceptDeclaration_linkDeclaration = "linkDeclaration";
  public static final SContainmentLinkId
      linkId_AbstractConceptDeclaration_linkDeclaration = SContainmentLinkId.deserialize("c72da2b9-7cce-4447-8389-f407dc1158b7/1169125787135/1071489727083");
  public static final String link_AbstractConceptDeclaration_propertyDeclaration = "propertyDeclaration";
  public static final SContainmentLinkId linkId_AbstractConceptDeclaration_propertyDeclaration = SContainmentLinkId.deserialize(
      "c72da2b9-7cce-4447-8389-f407dc1158b7/1169125787135/1071489727084");

  public static final String property_AbstractConceptDeclaration_abstract = "abstract";
  public static final SPropertyId
      propertyId_AbstractConceptDeclaration_abstract = SPropertyId.deserialize("c72da2b9-7cce-4447-8389-f407dc1158b7/1169125787135/4628067390765956802");
  public static final String property_INamedConcept_name = "name";
  public static final SPropertyId propertyId_INamedConcept_name = SPropertyId.deserialize("ceab5195-25ea-4f22-9b92-103b95ca8c0c/1169194658468/1169194664001");
  public static final String property_LinkDeclaration_role = "role";
  public static final SPropertyId
      propertyId_LinkDeclaration_role = SPropertyId.deserialize("c72da2b9-7cce-4447-8389-f407dc1158b7/1071489288298/1071599776563");
  public static final String property_LinkDeclaration_metaClass = "metaClass";
  public static final SPropertyId
      propertyId_LinkDeclaration_metaClass = SPropertyId.deserialize("c72da2b9-7cce-4447-8389-f407dc1158b7/1071489288298/1071599937831");
  public static final String property_IResolveInfo_resolveInfo = "resolveInfo";
  public static final SPropertyId
      propertyId_IResolveInfo_resolveInfo = SPropertyId.deserialize("ceab5195-25ea-4f22-9b92-103b95ca8c0c/1196978630214/1196978656277");
  public static final String property_BaseConcept_virtualPackage = "virtualPackage";
  public static final SPropertyId
      propertyId_BaseConcept_virtualPackage = SPropertyId.deserialize("ceab5195-25ea-4f22-9b92-103b95ca8c0c/1133920641626/1193676396447");
  public static final String property_BaseConcept_alias = "alias";
  public static final SPropertyId propertyId_BaseConcept_alias = SPropertyId.deserialize("ceab5195-25ea-4f22-9b92-103b95ca8c0c/1133920641626/1156235010670");
  public static final String property_BaseConcept_shortDescription = "shortDescription";
  public static final SPropertyId
      propertyId_BaseConcept_shortDescription = SPropertyId.deserialize("ceab5195-25ea-4f22-9b92-103b95ca8c0c/1133920641626/1156234966388");
  public static final String link_BaseConcept_smodelAttribute = "smodelAttribute";
  public static final SContainmentLinkId
      linkId_BaseConcept_smodelAttribute = SContainmentLinkId.deserialize("ceab5195-25ea-4f22-9b92-103b95ca8c0c/1133920641626/5169995583184591170");
  public SNodeUtil() {
  }
  public static String getPresentation(SNode node) {
    try {
      return BehaviorReflection.invokeVirtual(String.class, node, "virtual_getPresentation_1213877396640", new Object[]{});
    } catch (Throwable t) {
      return node.getName();
    }
  }
  public static String getDetailedPresentation(SNode node) {
    return BehaviorReflection.invokeVirtual(String.class, node, "virtual_getDetailedPresentation_2354269628709769373", new Object[]{});
  }
  public static boolean isDefaultSubstitutable(SNode node) {
    return BehaviorReflection.invokeNonVirtual(Boolean.TYPE, node, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", "call_isDefaultSubstitutable_7429110134803670673", new Object[]{});
  }
  public static List<SNode> findAllAspects(SNode node) {
    return BehaviorReflection.invokeNonVirtual((Class<List<SNode>>) ((Class) Object.class), node, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", "call_findAllAspects_7754459869734028917", new Object[]{});
  }
  public static int getMetaLevel(SNode node) {
    return BehaviorReflection.invokeVirtual(Integer.TYPE, node, "virtual_getMetaLevel_3981318653438234726", new Object[]{});
  }
  public static String getConceptDeclarationAlias(SNode conceptDeclaration) {
    return SPropertyOperations.getString(conceptDeclaration, "alias");
  }
  public static boolean isInstanceOfConceptDeclaration(SNode node) {
    if (node == null) {
      return false;
    }
    return node.getConcept().getQualifiedName().equals("jetbrains.mps.lang.structure.structure.ConceptDeclaration");
  }
  public static boolean isInstanceOfInterfaceConceptDeclaration(SNode node) {
    if (node == null) {
      return false;
    }
    return node.getConcept().getQualifiedName().equals("jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration");
  }
  public static boolean isInstanceOfAbstractConceptDeclaration(SNode node) {
    if (node == null) {
      return false;
    }
    String conceptFqName = node.getConcept().getQualifiedName();
    return conceptFqName.equals("jetbrains.mps.lang.structure.structure.ConceptDeclaration") || conceptFqName.equals("jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration") || conceptFqName.equals("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration");
  }
  public static boolean getConceptDeclaration_IsRootable(SNode concept) {
    return SPropertyOperations.getBoolean(concept, "rootable");
  }
  public static SNode getConceptDeclaration_Extends(SNode concept) {
    return SLinkOperations.getTarget(concept, "extends", false);
  }
  public static Iterable<SNode> getConceptDeclaration_Implements(SNode concept) {
    return ListSequence.fromList(SLinkOperations.getTargets(concept, "implements", true)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "intfc", false);
      }
    });
  }
  public static Iterable<SNode> getConceptDeclaration_ImplementsReferenceNodes(SNode concept) {
    return SLinkOperations.getTargets(concept, "implements", true);
  }
  public static Iterable<SNode> getConcept_LinkDeclarations(SNode concept) {
    return SLinkOperations.getTargets(concept, "linkDeclaration", true);
  }
  public static Iterable<SNode> getConcept_PropertyDeclarations(SNode concept) {
    return SLinkOperations.getTargets(concept, "propertyDeclaration", true);
  }
  public static Iterable<SNode> getInterfaceConceptDeclaration_Extends(SNode concept) {
    return ListSequence.fromList(SLinkOperations.getTargets(concept, "extends", true)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "intfc", false);
      }
    });
  }
  public static Iterable<SNode> getInterfaceConceptDeclaration_ExtendsReferenceNodes(SNode concept) {
    return SLinkOperations.getTargets(concept, "extends", true);
  }
  public static String getNodeShortDescription(SNode node) {
    return SPropertyOperations.getString(node, "shortDescription");
  }
  public static String getConceptShortDescription(SNode concept) {
    return SPropertyOperations.getString(concept, "conceptShortDescription");
  }
  public static String getConceptAlias(SNode concept) {
    return SPropertyOperations.getString(concept, "conceptAlias");
  }
  public static String getResolveInfo(SNode node) {
    return SPropertyOperations.getString(node, "resolveInfo");
  }
  public static boolean isInstanceOfLinkDeclaration(SNode node) {
    if (node == null) {
      return false;
    }
    String conceptFqName = node.getConcept().getQualifiedName();
    return conceptFqName.equals("jetbrains.mps.lang.structure.structure.LinkDeclaration");
  }
  public static boolean isInstanceOfPropertyDeclaration(SNode node) {
    if (node == null) {
      return false;
    }
    String conceptFqName = node.getConcept().getQualifiedName();
    return conceptFqName.equals("jetbrains.mps.lang.structure.structure.PropertyDeclaration");
  }
  public static SNode getPropertyDeclaration_DataType(SNode decl) {
    return SLinkOperations.getTarget(decl, "dataType", false);
  }
  public static boolean isInstanceOfPrimitiveDataTypeDeclaration(SNode node) {
    if (node == null) {
      return false;
    }
    String conceptFqName = node.getConcept().getQualifiedName();
    return conceptFqName.equals("jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration");
  }
  public static boolean isInstanceOfEnumerationDataTypeDeclaration(SNode node) {
    if (node == null) {
      return false;
    }
    String conceptFqName = node.getConcept().getQualifiedName();
    return conceptFqName.equals("jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration");
  }
  public static boolean getLinkDeclaration_IsReference(SNode link) {
    return SPropertyOperations.hasValue(link, "metaClass", "reference", "reference");
  }
  public static boolean getLinkDeclaration_IsExactlyOneMultiplicity(SNode link) {
    return SPropertyOperations.hasValue(link, "sourceCardinality", "1", "0..1");
  }
  public static boolean getLinkDeclaration_IsAtLeastOneMultiplicity(SNode link) {
    return SPropertyOperations.hasValue(link, "sourceCardinality", "1", "0..1") || SPropertyOperations.hasValue(link, "sourceCardinality", "1..n", "0..1");
  }
  public static boolean getLinkDeclaration_IsSingular(SNode link) {
    return BehaviorReflection.invokeNonVirtual(Boolean.TYPE, link, "jetbrains.mps.lang.structure.structure.LinkDeclaration", "call_isSingular_1213877254557", new Object[]{});
  }
  public static boolean hasReferenceMacro(SNode node, String role) {
    return (AttributeOperations.getAttribute(node, new IAttributeDescriptor.LinkAttribute("jetbrains.mps.lang.generator.structure.ReferenceMacro", role)) != null);
  }
}
