package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SLink;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.language.SProperty;
import java.util.List;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.kernel.model.SModelUtil;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.project.GlobalScope;

public class SConceptNodeAdapterBase implements SAbstractConcept {
  private String myConceptName;
  private SNodePointer myConcept;

  public SConceptNodeAdapterBase(String conceptName) {
    myConceptName = conceptName;
  }

  @Override
  public String getQualifiedName() {
    return myConceptName;
  }

  @Override
  public String getName() {
    return NameUtil.shortNameFromLongName(myConceptName);
  }

  @Override
  public String getConceptId() {
    return myConceptName;
  }

  @Override
  public SLink findLink(String role) {
    SNode ld = new ConceptAndSuperConceptsScope(getConcept().resolve(MPSModuleRepository.getInstance())).getLinkDeclarationByRole(role);
    return (ld == null ?
      null :
      new SLinkNodeAdapter(SNodeOperations.cast(ld, "jetbrains.mps.lang.structure.structure.LinkDeclaration"))
    );
  }

  @Override
  public Iterable<SLink> getLinks() {
    return ListSequence.fromList(SLinkOperations.getTargets(((SNode) getConcept().resolve(MPSModuleRepository.getInstance())), "linkDeclaration", true)).select(new ISelector<SNode, SLink>() {
      public SLink select(SNode it) {
        return ((SLink) new SLinkNodeAdapter(it));
      }
    });
  }

  @Override
  public SProperty findProperty(final String name) {
    SNode prop = ListSequence.fromList((List<SNode>) SModelSearchUtil.getPropertyDeclarations(getConcept().resolve(MPSModuleRepository.getInstance()))).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_vein7o_a0a0a0a0a0a0a8(SPropertyOperations.getString(it, "name"), name);
      }
    });
    return (prop == null ?
      null :
      new SPropertyNodeAdapter(prop)
    );
  }

  @Override
  public Iterable<SProperty> getProperties() {
    return ListSequence.fromList(SLinkOperations.getTargets(((SNode) getConcept().resolve(MPSModuleRepository.getInstance())), "propertyDeclaration", true)).select(new ISelector<SNode, SProperty>() {
      public SProperty select(SNode it) {
        return ((SProperty) new SPropertyNodeAdapter(it));
      }
    });
  }

  @Override
  public boolean isSubConceptOf(SAbstractConcept concept) {
    if (!(concept instanceof SConceptNodeAdapterBase)) {
      throw new IllegalArgumentException("not supported");
    }

    return SModelUtil.isAssignableConcept(myConceptName, ((SConceptNodeAdapterBase) concept).myConceptName);
  }

  @Override
  public SLanguage getLanguage() {
    String language = NameUtil.namespaceFromConceptFQName(myConceptName);
    return new SLanguageLanguageAdapter(language);
  }

  public SNodePointer getConcept() {
    if (myConcept == null) {
      myConcept = new SNodePointer(SModelUtil.findConceptDeclaration(myConceptName, GlobalScope.getInstance()));
    }
    return myConcept;
  }

  public void internalSetId(String id) {
    myConceptName = id;
  }

  private static boolean eq_vein7o_a0a0a0a0a0a0a8(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
