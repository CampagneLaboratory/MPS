package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.smodel.ids.SLanguageId;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRuntime;
import jetbrains.mps.smodel.language.LanguageRegistry;
import java.util.Collections;

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.LanguageAspect;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SEnumeration;
import org.jetbrains.mps.openapi.module.SModuleReference;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.project.dependency.modules.LanguageDependenciesManager;
import org.jetbrains.mps.openapi.module.SDependency;
import org.jetbrains.mps.openapi.module.SDependencyScope;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.module.SModule;

public class SLanguageAdapter implements SLanguage {
  private String myLanguageFqName;

  private SLanguageId myLanguage;

  public SLanguageAdapter(@NotNull SLanguageId language) {
    this.myLanguage = language;
  }

  public SLanguageAdapter(@NotNull String language) {
    this.myLanguageFqName = language;
  }

  public SLanguageId getId() {
    fillBothIds();
    return myLanguage;
  }

  @Override
  public String getQualifiedName() {
    fillBothIds();
    // todo here we should obtain name from a concept node, but since we now having code which doesn't work by id and therefore obtains the name 
    // todo frequently, we get a huge slowdown if obtaining name from a node here 
    // todo in 3.2, it is supposed that we either remove most accesses to this method or we'll return conceptName here and clear it in all languageIds when renaming language in IDE 
    return myLanguageFqName;
  }

  @Override
  public Iterable<SAbstractConcept> getConcepts() {
    fillBothIds();
    LanguageRuntime runtime = LanguageRegistry.getInstance().getLanguage(new SLanguageAdapter(myLanguage));
    if (runtime == null) {
      return Collections.<SAbstractConcept>emptySet();
    }

    // TODO rewrite using LanguageRuntime 
    Iterable<SNode> roots = (Iterable<SNode>) LanguageAspect.STRUCTURE.get(getSourceModule()).getRootNodes();
    List<SAbstractConcept> c = ListSequence.fromList(new ArrayList<SAbstractConcept>());
    ListSequence.fromList(c).addSequence(Sequence.fromIterable(roots).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.structure.structure.ConceptDeclaration");
      }
    }).select(new ISelector<SNode, SConcept>() {
      public SConcept select(SNode it) {
        return ((SConcept) SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(it)));
      }
    }));
    ListSequence.fromList(c).addSequence(Sequence.fromIterable(roots).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration");
      }
    }).select(new ISelector<SNode, SInterfaceConceptAdapter>() {
      public SInterfaceConceptAdapter select(SNode it) {
        return new SInterfaceConceptAdapter(IdHelper.getConceptId((jetbrains.mps.smodel.SNode) it));
      }
    }));
    return c;
  }

  public Iterable<SEnumeration> getEnumerations() {
    // TODO rewrite using LanguageRuntime 
    Iterable<SNode> roots = (Iterable<SNode>) LanguageAspect.STRUCTURE.get(getSourceModule()).getRootNodes();
    List<SEnumeration> c = ListSequence.fromList(new ArrayList<SEnumeration>());
    ListSequence.fromList(c).addSequence(Sequence.fromIterable(roots).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration");
      }
    }).select(new ISelector<SNode, SEnumeration>() {
      public SEnumeration select(SNode it) {
        return SConceptRepository.getInstance().getEnumeration(NameUtil.nodeFQName(it));
      }
    }));
    return c;
  }

  @Override
  public Iterable<SModuleReference> getLanguageRuntimes() {
    Set<SModuleReference> runtimes = new HashSet<SModuleReference>();
    Language sourceModule = getSourceModule();
    assert sourceModule != null;
    for (Language language : SetSequence.fromSet(LanguageDependenciesManager.getAllExtendedLanguages(sourceModule))) {
      runtimes.addAll(language.getRuntimeModulesReferences());
      for (SDependency dep : language.getDeclaredDependencies()) {
        if (dep.getScope() == SDependencyScope.GENERATES_INTO) {
          Language generatesIntoLang = as_c5k5j6_a0a0a0a1a3a61(dep.getTarget(), Language.class);
          runtimes.addAll(generatesIntoLang.getRuntimeModulesReferences());
        }
      }
    }
    return runtimes;
  }

  @Override
  public Language getSourceModule() {
    fillBothIds();
    return (Language) IdHelper.getModuleReference(myLanguage).resolve(MPSModuleRepository.getInstance());

  }
  private void fillBothIds() {
    if (myLanguageFqName != null && myLanguage != null) {
      return;
    }
    if (myLanguage == null) {
      myLanguage = IdHelper.getLanguageId(ModuleRepositoryFacade.getInstance().getModule(myLanguageFqName, Language.class));
      assert myLanguage != null;
    } else {
      SModule module = ModuleRepositoryFacade.getInstance().getModule(IdHelper.getModuleReference(myLanguage));
      if (module != null) {
        myLanguageFqName = module.getModuleName();
      } else {
        myLanguageFqName = MPSModuleRepository.getInstance().getDebugRegistry().getLanguageName(new SLanguageAdapter(myLanguage));
      }
    }
  }
  @Override
  public int hashCode() {
    if (myLanguage == null) {
      return myLanguageFqName.hashCode();
    } else {
      return myLanguage.hashCode();
    }
  }
  @Override
  public boolean equals(Object object) {
    if (!((object instanceof SLanguageAdapter))) {
      return false;
    }
    if (myLanguage == null) {
      return myLanguageFqName.equals(((SLanguageAdapter) object).myLanguageFqName);
    } else {
      return myLanguage.equals(((SLanguageAdapter) object).myLanguage);
    }
  }
  public int getLanguageVersion() {
    return getSourceModule().getLanguageVersion();
  }
  private static <T> T as_c5k5j6_a0a0a0a1a3a61(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
