package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRuntime;
import jetbrains.mps.smodel.language.LanguageRegistry;
import java.util.Collections;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.LanguageAspect;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SEnumeration;
import org.jetbrains.mps.openapi.module.SModuleReference;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;

public class SLanguageAdapter implements SLanguage {
  private String myLanguage;

  public SLanguageAdapter(@NotNull String language) {
    this.myLanguage = language;
  }

  @Override
  public String getQualifiedName() {
    return myLanguage;
  }

  @Override
  public Iterable<SAbstractConcept> getConcepts() {
    LanguageRuntime runtime = LanguageRegistry.getInstance().getLanguage(myLanguage);
    if (runtime == null) {
      return Collections.emptySet();
    }

    // TODO rewrite using LanguageRuntime 
    Iterable<SNode> roots = (Iterable<SNode>) LanguageAspect.STRUCTURE.get(getSourceModule()).getRootNodes();
    List<SAbstractConcept> c = ListSequence.fromList(new ArrayList<SAbstractConcept>());
    ListSequence.fromList(c).addSequence(Sequence.fromIterable(roots).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.structure.structure.ConceptDeclaration");
      }
    }).select(new ISelector<SNode, SConcept>() {
      public SConcept select(SNode it) {
        return ((SConcept) SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(it)));
      }
    }));
    ListSequence.fromList(c).addSequence(Sequence.fromIterable(roots).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration");
      }
    }).select(new ISelector<SNode, SInterfaceConceptAdapter>() {
      public SInterfaceConceptAdapter select(SNode it) {
        return new SInterfaceConceptAdapter(NameUtil.nodeFQName(it));
      }
    }));
    return c;
  }

  public Iterable<SEnumeration> getEnumerations() {
    // TODO rewrite using LanguageRuntime 
    Iterable<SNode> roots = (Iterable<SNode>) LanguageAspect.STRUCTURE.get(getSourceModule()).getRootNodes();
    List<SEnumeration> c = ListSequence.fromList(new ArrayList<SEnumeration>());
    ListSequence.fromList(c).addSequence(Sequence.fromIterable(roots).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration");
      }
    }).select(new ISelector<SNode, SEnumeration>() {
      public SEnumeration select(SNode it) {
        return SConceptRepository.getInstance().getEnumeration(NameUtil.nodeFQName(it));
      }
    }));
    return c;

  }

  @Override
  public Iterable<SModuleReference> getLanguageRuntimes() {
    Set<SModuleReference> runtimes = new HashSet<SModuleReference>();
    Language sourceModule = getSourceModule();
    assert sourceModule != null;
    for (Language language : SetSequence.fromSet(sourceModule.getAllExtendedLanguages())) {
      runtimes.addAll(language.getRuntimeModulesReferences());
    }
    return runtimes;
  }

  @Override
  public Language getSourceModule() {
    return (Language) ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference(myLanguage));
  }

  @Override
  public int hashCode() {
    return myLanguage.hashCode();
  }

  @Override
  public boolean equals(Object object) {
    return object instanceof SLanguageAdapter && myLanguage.equals(((SLanguageAdapter) object).myLanguage);
  }
}
