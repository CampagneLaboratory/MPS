package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.SNodePointer;

public class SInterfaceConceptNodeAdapter extends SConceptNodeAdapterBase implements SInterfaceConcept {
  public SInterfaceConceptNodeAdapter(@NotNull String conceptName) {
    super(conceptName);
  }

  @Override
  public Iterable<SInterfaceConcept> getSuperInterfaces() {
    return ListSequence.fromList(SLinkOperations.getTargets(((SNode) (getConcept().resolve(MPSModuleRepository.getInstance()))), "extends", true)).select(new ISelector<SNode, SInterfaceConcept>() {
      public SInterfaceConcept select(SNode it) {
        return ((SInterfaceConcept) new SInterfaceConceptNodeAdapter(NameUtil.nodeFQName(it)));
      }
    });
  }

  @Override
  public SNodePointer getConcept() {
    return super.getConcept();
  }
}
