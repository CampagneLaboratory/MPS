package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.smodel.DebugRegistryImpl;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.SConceptIdImpl;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SAbstractLink;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.smodel.runtime.illegal.IllegalConceptDescriptor;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SConceptId;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SLanguage;
import java.util.HashSet;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class SAbstractConceptAdapter implements SAbstractConcept {
  protected SConceptId myConceptId;
  protected String myConceptName;

  @Deprecated
  public SAbstractConceptAdapter(@NotNull String conceptName) {
    myConceptName = conceptName;
  }

  public SAbstractConceptAdapter(@NotNull SConceptId conceptId) {
    myConceptId = conceptId;
  }



  @Override
  public String getQualifiedName() {
    return myConceptName==null?MPSModuleRepository.getInstance().getDebugRegistry().getConceptName(myConceptId):myConceptName;
  }



  @Override
  public String getName() {
    return NameUtil.shortNameFromLongName(getQualifiedName());
  }



  @Override
  public SAbstractLink getLink(String role) {
    ConceptDescriptor d = myConceptName==null?ConceptRegistry.getInstance().getConceptDescriptor(myConceptId):ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return null;
    }

    if (d.hasChild(role)) {
      return myConceptName==null?new SContainmentLinkAdapter(myConceptId, role):new SContainmentLinkAdapter(myConceptName, role);
    } else if (d.hasReference(role)) {
      return myConceptName==null?new SReferenceLinkAdapter(myConceptId, role):new SReferenceLinkAdapter(myConceptName, role);
    }
    return null;
  }



  @Override
  public Iterable<SAbstractLink> getLinks() {
    ConceptDescriptor d = myConceptName==null?ConceptRegistry.getInstance().getConceptDescriptor(myConceptId):ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return Collections.emptyList();
    }

    Iterable<SAbstractLink> seq = SetSequence.fromSet(((Set<String>) d.getChildrenNames())).select(new ISelector<String, SAbstractLink>() {
      public SAbstractLink select(String it) {
        return (SAbstractLink) (myConceptName == null ? new SContainmentLinkAdapter(myConceptId, it) : new SContainmentLinkAdapter(myConceptName, it));
      }
    });
    return Sequence.fromIterable(seq).concat(SetSequence.fromSet(((Set<String>) d.getReferenceNames())).select(new ISelector<String, SReferenceLinkAdapter>() {
      public SReferenceLinkAdapter select(String it) {
        return myConceptName==null?new SReferenceLinkAdapter(myConceptId, it):new SReferenceLinkAdapter(myConceptName, it);
      }
    }));
  }



  @Override
  public SProperty getProperty(String name) {
    ConceptDescriptor d = myConceptName==null?ConceptRegistry.getInstance().getConceptDescriptor(myConceptId):ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return null;
    }

    return (d.hasProperty(name) ? (myConceptName==null?new SPropertyAdapter(myConceptId, name):new SPropertyAdapter(myConceptName, name)) : null);
  }



  @Override
  public Iterable<SProperty> getProperties() {
    ConceptDescriptor d = myConceptName==null?ConceptRegistry.getInstance().getConceptDescriptor(myConceptId):ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return Collections.emptyList();
    }

    return SetSequence.fromSet(((Set<String>) d.getPropertyNames())).select(new ISelector<String, SProperty>() {
      public SProperty select(String it) {
        return (SProperty) (myConceptName==null?new SPropertyAdapter(myConceptId, it):new SPropertyAdapter(myConceptName, it));
      }
    });
  }



  @Override
  public boolean isSubConceptOf(SAbstractConcept concept) {
    // todo: hack, need for working node attributes on nodes of not generated concepts 
    // todo: remove 
    if ("jetbrains.mps.lang.core.structure.BaseConcept".equals(concept.getQualifiedName())) {
      return true;
    }

    ConceptDescriptor d = myConceptName==null?ConceptRegistry.getInstance().getConceptDescriptor(myConceptId):ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return false;
    }

    return d.isAssignableTo(concept.getQualifiedName());
  }



  @Override
  public SLanguage getLanguage() {
    return myConceptName==null?new SLanguageAdapter(myConceptId.getLanguageId()):new SLanguageAdapter(NameUtil.namespaceFromConceptFQName(myConceptName));
  }



  @Override
  public int hashCode() {
    return myConceptName==null?myConceptId.hashCode():myConceptName.hashCode();
  }

  @Override
  public boolean equals(Object o) {
    if (o == null || o.getClass() != getClass()) {
      return false;
    }
    if (myConceptName==null) {
      return myConceptId.equals(((SAbstractConceptAdapter) o).myConceptId);
    } else {
      return myConceptName.equals(((SAbstractConceptAdapter) o).myConceptName);
    }
  }

  private static final Set<String> reportedLanguages = new HashSet<String>();


  protected void illegalConceptDescriptorWarning() {
    String languageName = myConceptName==null?getLanguage().getQualifiedName():NameUtil.namespaceFromConceptFQName(myConceptName);
    // report each language only once 
    if (reportedLanguages.contains(languageName)) {
      return;
    }
    reportedLanguages.add(languageName);
    if (LOG.isEnabledFor(Level.WARN)) {
      LOG.warn("No concept found for id " + myConceptId + ". Please check the language " + languageName + " is built and compiled.", new Throwable());
    }
  }

  protected static Logger LOG = LogManager.getLogger(SAbstractConceptAdapter.class);
}
