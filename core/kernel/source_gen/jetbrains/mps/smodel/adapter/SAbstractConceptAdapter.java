package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.smodel.ids.SConceptId;
import jetbrains.mps.smodel.ids.SPropertyId;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.language.LanguageRuntime;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.smodel.runtime.illegal.IllegalConceptDescriptor;
import java.util.Collections;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SAbstractLink;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SLanguage;
import java.util.HashSet;
import org.apache.log4j.Level;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.SNodeId;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class SAbstractConceptAdapter implements SAbstractConcept {
  protected SConceptId myConceptId;

  public SAbstractConceptAdapter(@NotNull SConceptId conceptId) {
    myConceptId = conceptId;
  }

  public SConceptId getId() {
    return myConceptId;
  }

  @Override
  public String getQualifiedName() {
    return MPSModuleRepository.getInstance().getDR
  }

  @Override
  public String getName() {
    return NameUtil.shortNameFromLongName(getQualifiedName());
  }

  @Override
  public Iterable<SReferenceLink> getReferences() {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(getQualifiedName());
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return Collections.emptyList();
    }

    final ConceptAndSuperConceptsScope scope = new ConceptAndSuperConceptsScope(getConceptDeclarationNode());
    return SetSequence.fromSet(((Set<String>) d.getReferenceNames())).select(new ISelector<String, SReferenceLink>() {
      public SReferenceLink select(String it) {
        SNode linkNode = scope.getLinkDeclarationByRole(it);
        if (linkNode == null) {
          return null;
        }
        return ((SReferenceLink) new SReferenceLinkAdapter(IdHelper.getRefRoleId((jetbrains.mps.smodel.SNode) linkNode)));
      }
    });
  }

  @Override
  public Iterable<SContainmentLink> getChildren() {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(getQualifiedName());
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return Collections.emptyList();
    }
    final ConceptAndSuperConceptsScope scope = new ConceptAndSuperConceptsScope(getConceptDeclarationNode());
    return SetSequence.fromSet(((Set<String>) d.getChildrenNames())).select(new ISelector<String, SContainmentLink>() {
      public SContainmentLink select(String it) {
        SNode linkNode = scope.getLinkDeclarationByRole(it);
        if (linkNode == null) {
          return null;
        }
        return ((SContainmentLink) new SContainmentLinkAdapter(IdHelper.getNodeRoleId((jetbrains.mps.smodel.SNode) linkNode)));
      }
    });
  }

  @Override
  @Deprecated
  public SAbstractLink getLink(String role) {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(getQualifiedName());
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return null;
    }
    SNode linkNode = new ConceptAndSuperConceptsScope(getConceptDeclarationNode()).getLinkDeclarationByRole(role);
    if (linkNode == null) {
      return null;
    }
    if (d.hasChild(role)) {
      return new SContainmentLinkAdapter(IdHelper.getNodeRoleId((jetbrains.mps.smodel.SNode) linkNode));
    } else
    if (d.hasReference(role)) {
      return new SReferenceLinkAdapter(IdHelper.getRefRoleId((jetbrains.mps.smodel.SNode) linkNode));
    }
    return null;
  }

  @Override
  public Iterable<SAbstractLink> getLinks() {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return Collections.<SAbstractLink>emptyList();
    }
    final ConceptAndSuperConceptsScope scope = new ConceptAndSuperConceptsScope(getConceptDeclarationNode());

    Iterable<SAbstractLink> seq = SetSequence.fromSet(((Set<String>) d.getChildrenNames())).select(new ISelector<String, SAbstractLink>() {
      public SAbstractLink select(String it) {
        SNode linkNode = scope.getLinkDeclarationByRole(it);
        if (linkNode == null) {
          return null;
        }
        return (SAbstractLink) new SContainmentLinkAdapter(IdHelper.getNodeRoleId((jetbrains.mps.smodel.SNode) linkNode));
      }
    });
    Sequence.fromIterable(seq).concat(SetSequence.fromSet(((Set<String>) d.getReferenceNames())).select(new ISelector<String, SAbstractLink>() {
      public SAbstractLink select(String it) {
        SNode linkNode = scope.getLinkDeclarationByRole(it);
        if (linkNode == null) {
          return null;
        }
        return ((SAbstractLink) new SReferenceLinkAdapter(IdHelper.getRefRoleId((jetbrains.mps.smodel.SNode) linkNode)));
      }
    }));
    return seq;
  }

  @Override
  @Deprecated
  public SProperty getProperty(String name) {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(getQualifiedName());
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return null;
    }
    final ConceptAndSuperConceptsScope scope = new ConceptAndSuperConceptsScope(getConceptDeclarationNode());
    SNode propNode = scope.getPropertyDeclarationByName(name);
    if (!(d.hasProperty(name))) {
      return null;
    }
    SPropertyId id = IdHelper.getPropId((jetbrains.mps.smodel.SNode) propNode);
    return new SPropertyAdapter(id);
  }

  @Override
  public Iterable<SProperty> getProperties() {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return Collections.<SProperty>emptyList();
    }

    final ConceptAndSuperConceptsScope scope = new ConceptAndSuperConceptsScope(getConceptDeclarationNode());

    return SetSequence.fromSet(((Set<String>) d.getPropertyNames())).select(new ISelector<String, SProperty>() {
      public SProperty select(String it) {
        SNode propNode = scope.getPropertyDeclarationByName(it);
        if (propNode == null) {
          return null;
        }
        return ((SProperty) new SPropertyAdapter(IdHelper.getPropId((jetbrains.mps.smodel.SNode) propNode)));
      }
    });
  }

  @Override
  public boolean isSubConceptOf(SAbstractConcept concept) {
    // todo: hack, need for working node attributes on nodes of not generated concepts  
    // todo: remove  
    if ("jetbrains.mps.lang.core.structure.BaseConcept".equals(concept.getQualifiedName())) {
      return true;
    }
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(getQualifiedName());
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return false;
    }
    return d.isAssignableTo(concept.getQualifiedName());
  }

  @Override
  public SLanguage getLanguage() {
    return new SLanguageAdapter(myConceptId.getLanguageId());
  }

  @Override
  public int hashCode() {
    return myConceptId.hashCode();
  }

  @Override
  public boolean equals(Object o) {
    if (o == null || (!(o instanceof SAbstractConcept))) {
      return false;
    }
    if (o instanceof SAbstractConceptAdapter) {
      return myConceptId.equals(((SAbstractConceptAdapter) o).myConceptId);
    } else if (o instanceof SAbstractConceptAdapterByName){
      return myConceptId.equals(((SAbstractConceptAdapterByName) o).getConceptId());
    }
    throw new IllegalArgumentException(o.getClass().getName());
  }

  private static final Set<String> reportedLanguages = new HashSet<String>();

  protected void illegalConceptDescriptorWarning() {
    String languageName = getLanguage().getQualifiedName();
    // report each language only once  
    if (reportedLanguages.contains(languageName)) {
      return;
    }
    reportedLanguages.add(languageName);
    if (LOG.isEnabledFor(Level.WARN)) {
      LOG.warn("No concept found for id " + myConceptId.serialize() + ". Please check the language " + languageName + " is built and compiled.");
    }
  }

  @Nullable
  @Override
  public SNode getConceptDeclarationNode() {
    SModuleReference moduleRef = IdHelper.getModuleReference(myConceptId.getLanguageId());
    SModule module = moduleRef.resolve(MPSModuleRepository.getInstance());
    if (!((module instanceof Language))) {
      return null;
    }
    SModel strucModel = LanguageAspect.STRUCTURE.get(((Language) module));
    if (strucModel == null) {
      return null;
    }
    return strucModel.getNode(new SNodeId.Regular(myConceptId.getConceptId()));
  }

  protected ConceptDescriptor getConceptDescriptor(){
    return ConceptRegistry.getInstance().getConceptDescriptor(getQualifiedName());
  }

  protected static Logger LOG = LogManager.getLogger(SAbstractConceptAdapter.class);
}
