package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SAbstractLink;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.smodel.runtime.illegal.IllegalConceptDescriptor;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.kernel.model.SModelUtil;
import org.jetbrains.mps.openapi.language.SLanguage;

public class SAbstractConceptAdapter implements SAbstractConcept {
  protected String myConceptName;


  public SAbstractConceptAdapter(String conceptName) {
    myConceptName = conceptName;
  }



  @Override
  public String getQualifiedName() {
    return myConceptName;
  }



  @Override
  public String getName() {
    return NameUtil.shortNameFromLongName(myConceptName);
  }



  @Override
  public SAbstractLink getLink(String role) {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      return null;
    }

    if (d.hasChild(role)) {
      return new SContainmentLinkAdapter(myConceptName, role);
    } else if (d.hasReference(role)) {
      return new SReferenceLinkAdapter(myConceptName, role);
    }
    return null;
  }



  @Override
  public Iterable<SAbstractLink> getLinks() {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      return Collections.emptyList();
    }

    Iterable<SAbstractLink> seq = SetSequence.fromSet(((Set<String>) d.getChildrenNames())).select(new ISelector<String, SAbstractLink>() {
      public SAbstractLink select(String it) {
        return (SAbstractLink) new SContainmentLinkAdapter(myConceptName, it);
      }
    });
    return Sequence.fromIterable(seq).concat(SetSequence.fromSet(((Set<String>) d.getReferenceNames())).select(new ISelector<String, SReferenceLinkAdapter>() {
      public SReferenceLinkAdapter select(String it) {
        return new SReferenceLinkAdapter(myConceptName, it);
      }
    }));
  }



  @Override
  public SProperty getProperty(String name) {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      return null;
    }

    return (d.hasProperty(name) ?
      new SPropertyAdapter(myConceptName, name) :
      null
    );
  }



  @Override
  public Iterable<SProperty> getProperties() {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      return Collections.emptyList();
    }

    return SetSequence.fromSet(((Set<String>) d.getPropertyNames())).select(new ISelector<String, SProperty>() {
      public SProperty select(String it) {
        return (SProperty) new SPropertyAdapter(myConceptName, it);
      }
    });
  }



  @Override
  public boolean isSubConceptOf(SAbstractConcept concept) {
    return SModelUtil.isAssignableConcept(myConceptName, concept.getQualifiedName());
  }



  @Override
  public SLanguage getLanguage() {
    return new SLanguageAdapter(NameUtil.namespaceFromConceptFQName(myConceptName));
  }
}
