package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.smodel.DebugRegistry;
import jetbrains.mps.smodel.adapter.idconvert.MetaIdByDeclaration;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.adapter.ids.SContainmentLinkId;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;
import jetbrains.mps.smodel.adapter.ids.SPropertyId;
import jetbrains.mps.smodel.adapter.ids.SReferenceLinkId;
import jetbrains.mps.util.Pair;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.smodel.runtime.illegal.IllegalConceptDescriptor;

import java.util.ArrayList;
import java.util.Collections;

import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;
import jetbrains.mps.internal.collections.runtime.SetSequence;

import java.util.Set;

import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SAbstractLink;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SLanguage;

import java.util.HashSet;

import org.apache.log4j.Level;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.SNodeId;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class SAbstractConceptAdapter extends SBaseConceptAdapter {
  protected static Logger LOG = LogManager.getLogger(SAbstractConceptAdapter.class);

  protected SConceptId myConceptId;
  protected String myFqName;

  public SAbstractConceptAdapter(@NotNull SConceptId conceptId, @NotNull String fqname) {
    myConceptId = conceptId;
    myFqName = fqname;
  }

  public SConceptId getId() {
    return myConceptId;
  }

  @Override
  public String getQualifiedName() {
    return getConceptDescriptor(myConceptId).getConceptFqName();
  }

  @Override
  public String getName() {
    return NameUtil.shortNameFromLongName(getQualifiedName());
  }

  public boolean isSameConcept(SBaseConceptAdapter c2) {
    if (c2 instanceof SAbstractConceptAdapterByName) {
      return myFqName.equals(((SAbstractConceptAdapterByName) c2).getQualifiedName());
    } else if (c2 instanceof SAbstractConceptAdapter) {
      return myConceptId.equals(((SAbstractConceptAdapter) c2).myConceptId);
    } else {
      throw new IllegalArgumentException(c2.getClass().getSimpleName());
    }
  }

  @Override
  public Iterable<SReferenceLink> getReferences() {
    ConceptDescriptor d = getConceptDescriptor(myConceptId);
    if (d instanceof IllegalConceptDescriptor) return Collections.emptyList();

    Set<Pair<SReferenceLinkId, String>> refDescrs = new HashSet<Pair<SReferenceLinkId, String>>();
    for (SReferenceLinkId rid : d.getReferenceIds()) {
      refDescrs.add(new Pair<SReferenceLinkId, String>(rid, d.getRefName(rid)));
    }

    for (SConceptId ii : d.getParentIds()) {
      ConceptDescriptor id = getConceptDescriptor(ii);
      for (SReferenceLinkId rid : id.getReferenceIds()) {
        refDescrs.add(new Pair<SReferenceLinkId, String>(rid, id.getRefName(rid)));
      }
    }

    ArrayList<SReferenceLink> result = new ArrayList<SReferenceLink>();
    for (Pair<SReferenceLinkId, String> e : refDescrs) {
      result.add(new SReferenceLinkAdapter(e.o1, e.o2));
    }
    return result;
  }

  @Override
  public Iterable<SContainmentLink> getChildren() {
    ConceptDescriptor d = getConceptDescriptor(myConceptId);
    if (d instanceof IllegalConceptDescriptor) return Collections.emptyList();

    Set<Pair<SContainmentLinkId, String>> linkDescrs = new HashSet<Pair<SContainmentLinkId, String>>();
    for (SReferenceLinkId rid : d.getChildRoleIds()) {
      linkDescrs.add(new Pair<SReferenceLinkId, String>(rid, d.getChildRoleName(rid)));
    }

    for (SConceptId ii : d.getParentIds()) {
      ConceptDescriptor id = getConceptDescriptor(ii);
      for (SReferenceLinkId rid : id.getChildRoleIds()) {
        linkDescrs.add(new Pair<SContainmentLinkId, String>(rid, id.getChildRoleName(rid)));
      }
    }

    ArrayList<SContainmentLink> result = new ArrayList<SContainmentLink>();
    for (Pair<SContainmentLinkId, String> e : linkDescrs) {
      result.add(new SContainmentLinkAdapter(e.o1, e.o2));
    }
    return result;
  }

  @Override
  @Deprecated
  public SAbstractLink getLink(String role) {
    throw new UnsupportedOperationException();
  }

  @Override
  public Iterable<SAbstractLink> getLinks() {
    throw new UnsupportedOperationException();
  }

  @Override
  @Deprecated
  public SProperty getProperty(String name) {
    throw new UnsupportedOperationException();
  }

  @Override
  public Iterable<SProperty> getProperties() {
    ConceptDescriptor d = getConceptDescriptor(myConceptId);
    if (d instanceof IllegalConceptDescriptor) return Collections.emptyList();

    Set<Pair<SPropertyId, String>> propDescrs = new HashSet<Pair<SPropertyId, String>>();
    for (SPropertyId rid : d.getPropertyIds()) {
      propDescrs.add(new Pair<SPropertyId, String>(rid, d.getPropertyName(rid)));
    }

    for (SConceptId ii : d.getParentIds()) {
      ConceptDescriptor id = getConceptDescriptor(ii);
      for (SPropertyId rid : id.getPropertyIds()) {
        propDescrs.add(new Pair<SPropertyId, String>(rid, id.getPropertyName(rid)));
      }
    }

    ArrayList<SProperty> result = new ArrayList<SProperty>();
    for (Pair<SPropertyId, String> e : propDescrs) {
      result.add(new SPropertyAdapter(e.o1, e.o2));
    }
    return result;
  }

  @Override
  public boolean isSubConceptOf(SAbstractConcept concept) {
    // todo: hack, need for working node attributes on nodes of not generated concepts  
    // todo: remove  
    if ("jetbrains.mps.lang.core.structure.BaseConcept".equals(concept.getQualifiedName())) return true;

    ConceptDescriptor d = getConceptDescriptor(myConceptId);
    if (d instanceof IllegalConceptDescriptor) return false;

    return d.isAssignableTo(concept.getQualifiedName());
  }

  @Override
  public SLanguage getLanguage() {
    return new SLanguageAdapter(myConceptId.getLanguageId(), NameUtil.namespaceFromConceptFQName(myFqName));
  }

  @Nullable
  @Override
  public SNode getConceptDeclarationNode() {
    Language lang = new SLanguageAdapter(myConceptId.getLanguageId(), NameUtil.namespaceFromConceptFQName(myFqName)).getSourceModule();
    if (lang==null) return null;

    SModel strucModel = LanguageAspect.STRUCTURE.get(lang);
    if (strucModel == null) return null;

    return strucModel.getNode(new SNodeId.Regular(myConceptId.getConceptId()));
  }

  //------- getConceptDescriptor stuff ------

  private static final Set<SLanguageId> reportedLanguages = new HashSet<SLanguageId>();

  protected static ConceptDescriptor getConceptDescriptor(SConceptId id) {
    ConceptDescriptor res = ConceptRegistry.getInstance().getConceptDescriptor(id);
    if (res instanceof IllegalConceptDescriptor) {
      SLanguageId languageId = id.getLanguageId();
      // report each language only once
      if (reportedLanguages.contains(languageId)) return res;

      reportedLanguages.add(languageId);
      if (LOG.isEnabledFor(Level.WARN)) {
        LOG.warn("No concept found for id " + DebugRegistry.getInstance().getConceptName(id) + ". Please check the language " + DebugRegistry.getInstance().getLanguageName(languageId) + " is built and compiled.");
      }
    }
    return res;
  }
}
