package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.smodel.DebugInfoUtil;
import jetbrains.mps.smodel.DebugRegistryImpl;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SNodeId.Regular;
import jetbrains.mps.smodel.SNodeUtil;
import jetbrains.mps.smodel.language.LangUtil;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SAbstractLink;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.smodel.runtime.illegal.IllegalConceptDescriptor;

import java.util.Collections;

import jetbrains.mps.internal.collections.runtime.SetSequence;

import java.util.Set;

import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SAbstractLinkId;
import org.jetbrains.mps.openapi.language.SConceptId;
import org.jetbrains.mps.openapi.language.SConceptUtil;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SLanguage;

import java.util.HashSet;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.language.SPropertyId;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.module.SModuleReference;

public class SAbstractConceptAdapter implements SAbstractConcept {
  protected SConceptId myConceptId;
  protected String myConceptName;

  @Deprecated
  public SAbstractConceptAdapter(@NotNull String conceptName) {
    myConceptName = conceptName;
    SNode concept = SModelUtil.findConceptDeclaration(conceptName);
    if (concept != null) {
      myConceptId = LangUtil.getConceptId(concept);
    }
  }

  public SAbstractConceptAdapter(@NotNull SConceptId conceptId) {
    myConceptId = conceptId;
  }

  @Override
  public SConceptId getId() {
    return myConceptId;
  }

  @Override
  public String getQualifiedName() {
    return myConceptId != null ? DebugInfoUtil.getConceptFqName(myConceptId) : myConceptName;
  }


  @Override
  public String getName() {
    return NameUtil.shortNameFromLongName(getQualifiedName());
  }


  @Override
  @Deprecated
  public SAbstractLink getLink(String role) {
    ConceptDescriptor d = myConceptId != null ? ConceptRegistry.getInstance().getConceptDescriptor(myConceptId) :
        ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return null;
    }

    SAbstractLinkId id = ((DebugRegistryImpl) MPSModuleRepository.getInstance().getDebugRegistry()).getLinkId(myConceptId, role);
    if (d.hasChild(role)) {
      return myConceptId != null ? new SContainmentLinkAdapter(id) : new SContainmentLinkAdapter(myConceptName, role,
          (org.jetbrains.mps.openapi.language.SContainmentLinkId) id);
    } else if (d.hasReference(role)) {
      return myConceptId != null ? new SReferenceLinkAdapter(id) : new SReferenceLinkAdapter(myConceptName, role,
          (org.jetbrains.mps.openapi.language.SReferenceLinkId) id);
    }
    return null;
  }

  @Override
  public SAbstractLink getLink(SAbstractLinkId id) {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(myConceptId);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return null;
    }

    String role = ((DebugRegistryImpl) MPSModuleRepository.getInstance().getDebugRegistry()).getLinkName(id);
    if (d.hasChild(role)) {
      return new SContainmentLinkAdapter(((SAbstractLinkId) id));
    } else if (d.hasReference(role)) {
      return new SReferenceLinkAdapter(((SAbstractLinkId) id));
    }
    return null;
  }


  @Override
  public Iterable<SAbstractLink> getLinks() {
    ConceptDescriptor d = myConceptId != null ? ConceptRegistry.getInstance().getConceptDescriptor(myConceptId) :
        ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return Collections.emptyList();
    }

    Iterable<SAbstractLink> seq = SetSequence.fromSet(((Set<String>) d.getChildrenNames())).select(new ISelector<String, SAbstractLink>() {
      public SAbstractLink select(String it) {
        SAbstractLinkId id = ((DebugRegistryImpl) MPSModuleRepository.getInstance().getDebugRegistry()).getLinkId(myConceptId, it);
        if (myConceptId != null) {
          return (SAbstractLink) new SContainmentLinkAdapter(id);
        } else {
          return (SAbstractLink) (new SContainmentLinkAdapter(myConceptName, it, (org.jetbrains.mps.openapi.language.SContainmentLinkId) id));
        }
      }
    });
    return Sequence.fromIterable(seq).concat(SetSequence.fromSet(((Set<String>) d.getReferenceNames())).select(new ISelector<String, SReferenceLinkAdapter>() {
      public SReferenceLinkAdapter select(String it) {
        SAbstractLinkId id = ((DebugRegistryImpl) MPSModuleRepository.getInstance().getDebugRegistry()).getLinkId(myConceptId, it);
        if (myConceptId != null) {
          return new SReferenceLinkAdapter(id);
        } else {
          return new SReferenceLinkAdapter(myConceptName, it, (org.jetbrains.mps.openapi.language.SReferenceLinkId) id);
        }
      }
    }));
  }


  @Override
  public SProperty getProperty(SPropertyId id) {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(myConceptId);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return null;
    }

    String name = ((DebugRegistryImpl) MPSModuleRepository.getInstance().getDebugRegistry()).getPropertyName(id);
    return (d.hasProperty(name) ? new SPropertyAdapter(((SPropertyId) id)) : null);
  }

  @Override
  @Deprecated
  public SProperty getProperty(String name) {
    ConceptDescriptor d = myConceptId != null ? ConceptRegistry.getInstance().getConceptDescriptor(myConceptId) :
        ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return null;
    }

    if (myConceptId != null) {
      SPropertyId pid = ((DebugRegistryImpl) MPSModuleRepository.getInstance().getDebugRegistry()).getPropertyId(myConceptId, name);
      return (d.hasProperty(name) ? new SPropertyAdapter(pid) : null);
    } else {
      return (d.hasProperty(name) ? new SPropertyAdapter(myConceptName, name) : null);
    }
  }


  @Override
  public Iterable<SProperty> getProperties() {
    ConceptDescriptor d = myConceptId != null ? ConceptRegistry.getInstance().getConceptDescriptor(myConceptId) :
        ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return Collections.emptyList();
    }

    return SetSequence.fromSet(((Set<String>) d.getPropertyNames())).select(new ISelector<String, SProperty>() {
      public SProperty select(String it) {
        if (myConceptId != null) {
          SPropertyId id = ((DebugRegistryImpl) MPSModuleRepository.getInstance().getDebugRegistry()).getPropertyId(myConceptId, it);
          return (SProperty) new SPropertyAdapter(id);
        } else {
          return (SProperty) (new SPropertyAdapter(myConceptName, it));
        }
      }
    });
  }


  @Override
  public boolean isSubConceptOf(SAbstractConcept concept) {
    // todo: hack, need for working node attributes on nodes of not generated concepts 
    // todo: remove 
    if ("jetbrains.mps.lang.core.structure.BaseConcept".equals(concept.getQualifiedName())) {
      return true;
    }

    ConceptDescriptor d = myConceptId != null ? ConceptRegistry.getInstance().getConceptDescriptor(myConceptId) :
        ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return false;
    }

    return d.isAssignableTo(concept.getQualifiedName());
  }


  @Override
  public SLanguage getLanguage() {
    return myConceptId != null ? new SLanguageAdapter(myConceptId.getLanguageId()) : new SLanguageAdapter(NameUtil.namespaceFromConceptFQName(myConceptName));
  }


  @Override
  public int hashCode() {
    return myConceptId != null ? myConceptId.hashCode() : myConceptName.hashCode();
  }

  @Override
  public boolean equals(Object o) {
    if (o == null || o.getClass() != getClass()) {
      return false;
    }
    if (myConceptId != null) {
      return myConceptId.equals(((SAbstractConceptAdapter) o).myConceptId);
    } else {
      return myConceptName.equals(((SAbstractConceptAdapter) o).myConceptName);
    }
  }

  private static final Set<String> reportedLanguages = new HashSet<String>();


  protected void illegalConceptDescriptorWarning() {
    String languageName = myConceptId != null ? getLanguage().getQualifiedName() : NameUtil.namespaceFromConceptFQName(myConceptName);
    // report each language only once 
    if (reportedLanguages.contains(languageName)) {
      return;
    }
    reportedLanguages.add(languageName);
    if (LOG.isEnabledFor(Level.WARN)) {
      LOG.warn("No concept found for id " + myConceptId + ". Please check the language " + languageName + " is built and compiled.", new Throwable());
    }
  }

  @Nullable
  @Override
  public SNode getConceptDeclarationNode() {
    SModuleReference moduleRef = LangUtil.getModuleReference(myConceptId.getLanguageId());
    SModule module = moduleRef.resolve(MPSModuleRepository.getInstance());
    if (!(module instanceof Language)) return null;
    SModel strucModel = LanguageAspect.STRUCTURE.get(((Language) module));
    if (strucModel == null) return null;
    return strucModel.getNode(new Regular(myConceptId.getConceptId()));
  }

  protected static Logger LOG = LogManager.getLogger(SAbstractConceptAdapter.class);
}
