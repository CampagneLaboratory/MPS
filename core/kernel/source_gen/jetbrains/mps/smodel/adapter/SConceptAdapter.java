package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.smodel.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.smodel.runtime.illegal.IllegalConceptDescriptor;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

public class SConceptAdapter extends SAbstractConceptAdapter implements SConcept {
  public SConceptAdapter(@NotNull SConceptId conceptId) {
    super(conceptId);
  }

  public SConceptAdapter(@NotNull String concept) {
    super(concept);
  }

  @Override
  public SConcept getSuperConcept() {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(getQualifiedName());
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return null;
    }

    String superConcept = d.getSuperConcept();
    if (superConcept == null) {
      return null;
    }
    return new SConceptAdapter(superConcept);
  }

  @Override
  public Iterable<SInterfaceConcept> getSuperInterfaces() {
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(getQualifiedName());
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return Collections.emptyList();
    }
    List<SInterfaceConcept> res = new ArrayList<SInterfaceConcept>();
    for (String name : d.getParentsNames()) {
      if (name.equals(d.getSuperConcept())) {
        continue;
      }
      res.add(new SInterfaceConceptAdapter(name));
    }
    return res;
  }
}
