package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.smodel.DebugInfoUtil;
import jetbrains.mps.smodel.DebugRegistryImpl;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.smodel.runtime.illegal.IllegalConceptDescriptor;
import org.jetbrains.mps.openapi.language.SConceptId;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class SConceptAdapter extends SAbstractConceptAdapter implements SConcept {
  public SConceptAdapter(@NotNull SConceptId id) {
    super(id);
  }

  @Deprecated
  public SConceptAdapter(@NotNull String concept) {
    super(concept);
  }

  @Override
  public SConcept getSuperConcept() {
    ConceptDescriptor d = myConceptId != null ? ConceptRegistry.getInstance().getConceptDescriptor(myConceptId) :
        ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return null;
    }

    String superConcept = d.getSuperConcept();
    if (superConcept == null) return null;
    if (myConceptId == null) return new SConceptAdapter(superConcept);
    return new SConceptAdapter(DebugInfoUtil.getConceptId(superConcept));
  }

  @Override
  public Iterable<SInterfaceConcept> getSuperInterfaces() {
    ConceptDescriptor d = myConceptId  != null ? ConceptRegistry.getInstance().getConceptDescriptor(myConceptId) :
        ConceptRegistry.getInstance().getConceptDescriptor(myConceptName);
    if (d instanceof IllegalConceptDescriptor) {
      illegalConceptDescriptorWarning();
      return Collections.emptyList();
    }

    List<SInterfaceConcept> res = new ArrayList<SInterfaceConcept>();
    for (String name : d.getParentsNames()) {
      SAbstractConcept resolved = myConceptId == null ? SConceptRepository.getInstance().getConcept(name) :
          SConceptRepository.getInstance().getConcept(DebugInfoUtil.getConceptId(name));
      if (resolved instanceof SInterfaceConcept) {
        res.add((SInterfaceConcept) resolved);
      }
    }
    return res;
  }
}
