package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.model.SNode;

public class SConceptNodeAdapter extends SConceptNodeAdapterBase implements SConcept {
  public SConceptNodeAdapter(@NotNull String concept) {
    super(concept);
  }

  public SConcept getSuperConcept() {
    return SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SLinkOperations.getTarget(getConcept(), "extends", false)));
  }

  public Iterable<SInterfaceConcept> getSuperInterfaces() {
    return ListSequence.fromList(SLinkOperations.getTargets(getConcept(), "implements", true)).select(new ISelector<SNode, SInterfaceConcept>() {
      public SInterfaceConcept select(SNode it) {
        return ((SInterfaceConcept) new SInterfaceConceptNodeAdapter(NameUtil.nodeFQName(it)));
      }
    });
  }

  public SNode getConcept() {
    return ((SNode) super.getConcept());
  }
}
