package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.IdUtil;
import jetbrains.mps.smodel.DebugRegistryImpl;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.SNodeId.Regular;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SConceptId;
import org.jetbrains.mps.openapi.language.SDataType;
import org.jetbrains.mps.openapi.language.SPrimitiveDataType;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SPropertyId;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;

public class SPropertyAdapter implements SProperty {
  private SPropertyId myPropertyId;
  private String conceptName;
  private String propertyName;


  @Deprecated
  public SPropertyAdapter(String conceptName, String name) {
    this.conceptName = conceptName;
    this.propertyName = name;
  }


  public SPropertyAdapter(SPropertyId propertyId) {
    this.myPropertyId = propertyId;
  }


  @Override
  public SPropertyId getId() {
    fillBothIds();
    return myPropertyId;
  }

  @Override
  public String getName() {
    fillBothIds();
    return getPropertyNode().getName();
  }

  @Override
  public SDataType getType() {
    // TODO reimplement using ConceptDescriptor 
    SNode propertyNode = getPropertyNode();
    if (propertyNode == null) {
      return null;
    }

    SNode dataType = SLinkOperations.getTarget(propertyNode, "dataType", false);
    if (dataType == null) {
      return null;
    }
    if (SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration")) {
      SNode pdt = SNodeOperations.cast(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration");
      return new SPrimitiveDataTypeAdapter(
          (BehaviorReflection.invokeNonVirtual(Boolean.TYPE, pdt, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration",
              "call_isBoolean_1220268791641", new Object[]{}) ? SPrimitiveDataType.BOOL :
              ((BehaviorReflection.invokeNonVirtual(Boolean.TYPE, pdt, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration",
                  "call_isInteger_1220268780075", new Object[]{}) ? SPrimitiveDataType.INT : SPrimitiveDataType.STRING))));
    }
    return new SDataTypeAdapter();
  }

  @Override
  public boolean isValid(String string) {
    // TODO implement 
    return true;
  }

  protected final SNode getPropertyNode() {
    fillBothIds();
    SConceptAdapter adapter = new SConceptAdapter(myPropertyId.getConceptId());
    SModel model = adapter.getConceptDeclarationNode().getModel();
    return model.getNode(new Regular(myPropertyId.getPropertyId()));
  }

  public void fillBothIds() {
    if (myPropertyId != null && propertyName != null) return;
    if (myPropertyId == null) {
      SNode concept = SModelUtil.findConceptDeclaration(conceptName);
      SConceptId cid = IdHelper.getConceptId((jetbrains.mps.smodel.SNode) concept);
      final ConceptAndSuperConceptsScope scope = new ConceptAndSuperConceptsScope(concept);
      SNode propNode = scope.getPropertyDeclarationByName(propertyName);
      myPropertyId = new SPropertyId(cid, IdHelper.getNodeId((jetbrains.mps.smodel.SNode) propNode));
    } else {
      //there might be an interface declaring this property, but this code still works well
      SConceptAdapter adapter = new SConceptAdapter(myPropertyId.getConceptId());
      conceptName = adapter.getQualifiedName();
      SModel model = adapter.getConceptDeclarationNode().getModel();
      propertyName = model.getNode(new Regular(myPropertyId.getPropertyId())).getName();
    }
  }
}
