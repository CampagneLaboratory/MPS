package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.SPropertyIdImpl;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;
import org.jetbrains.mps.openapi.language.SDataType;
import org.jetbrains.mps.openapi.language.SPrimitiveDataType;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SPropertyId;
import org.jetbrains.mps.openapi.model.SNode;

public class SPropertyAdapter implements SProperty {
  private SPropertyIdImpl myPropertyId;
  private String conceptName;
  private String propertyName;


  @Deprecated
  public SPropertyAdapter(String conceptName, String name) {
    this.conceptName = conceptName;
    this.propertyName = name;
  }


  public SPropertyAdapter(SPropertyIdImpl propertyId) {
    this.myPropertyId = propertyId;
  }


  @Override
  public SPropertyId getId() {
    return myPropertyId;
  }

  @Override
  public String getName() {
    return propertyName == null ? MPSModuleRepository.getInstance().getDebugRegistry().getPropertyName(myPropertyId) : propertyName;
  }

  @Override
  public SDataType getType() {
    // TODO reimplement using ConceptDescriptor 
    SNode propertyNode = getPropertyNode();
    if (propertyNode == null) {
      return null;
    }

    SNode dataType = SLinkOperations.getTarget(propertyNode, "dataType", false);
    if (dataType == null) {
      return null;
    }
    if (SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration")) {
      SNode pdt = SNodeOperations.cast(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration");
      return new SPrimitiveDataTypeAdapter(
          (BehaviorReflection.invokeNonVirtual(Boolean.TYPE, pdt, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration",
              "call_isBoolean_1220268791641", new Object[]{}) ? SPrimitiveDataType.BOOL :
              ((BehaviorReflection.invokeNonVirtual(Boolean.TYPE, pdt, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration",
                  "call_isInteger_1220268780075", new Object[]{}) ? SPrimitiveDataType.INT : SPrimitiveDataType.STRING))));
    }
    return new SDataTypeAdapter();
  }

  @Override
  public boolean isValid(String string) {
    // TODO implement 
    return true;
  }

  protected final SNode getPropertyNode() {
    SNode concept;
    String name;

    if (conceptName == null) {
      concept = SModelUtil.findConceptDeclaration(MPSModuleRepository.getInstance().getDebugRegistry().getConceptName(myPropertyId.getConceptId()));
      name = getName();
    } else{
      concept = SModelUtil.findConceptDeclaration(conceptName);
      name = propertyName;
    }

    if ((concept == null)) {
      return null;
    }
    return (SNode) new ConceptAndSuperConceptsScope(concept).getPropertyDeclarationByName(name);
  }


}
