package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.ids.SAbstractLinkId;
import jetbrains.mps.smodel.ids.SConceptId;
import jetbrains.mps.smodel.ids.SContainmentLinkId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SAbstractLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.language.ConceptRegistry;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;

public class SContainmentLinkAdapter  implements SContainmentLink {
  protected SContainmentLinkId myRoleId;

  public SContainmentLinkAdapter(SContainmentLinkId roleId) {
    super(null, null);
    myRoleId = roleId;
  }


  @Override
  public String getRole() {
    fillBothIds();
    // todo here we should obtain name from a concept node, but since we now having code which doesn't work by id and therefore obtains the name
    // todo frequently, we get a huge slowdown if obtaining name from a node here
    // todo in 3.2, it is supposed that we either remove most accesses to this method or we'll return role here and clear it in all concepts when renaming role in IDE
    return role;
  }

  @Override
  public boolean isOptional() {
    // TODO reimplement using ConceptDescriptor
    SNode link = getLinkNode();
    if (link == null) {
      return true;
    }
    return SPropertyOperations.hasValue(link, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(link, "sourceCardinality", "0..n", "0..1");
  }

  @Override
  public SAbstractConcept getTargetConcept() {
    // TODO reimplement using ConceptDescriptor
    SNode link = getLinkNode();
    if (link == null) {
      return null;
    }
    SNode t = SLinkOperations.getTarget(link, "target", false);
    SConceptId id = IdHelper.getConceptId((jetbrains.mps.smodel.SNode) t);
    boolean isConcept = t.getConcept().getQualifiedName().equals("jetbrains.mps.lang.structure.structure.ConceptDeclaration");
    return (isConcept ? new SConceptAdapter(id) : new SInterfaceConceptAdapter(id));
  }

  public SAbstractLinkId getRoleId() {
    fillBothIds();
    return myRoleId;
  }

  @Override
  public boolean isReference() {
    return false;
  }

  @Override
  public boolean isMultiple() {
    fillBothIds();
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(conceptName);
    return d.isMultipleChild(role);
  }

  public boolean isUnordered() {
    fillBothIds();
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(conceptName);
    return d.isUnorderedChild(role);
  }

  @Override
  public SNode getLinkNode() {
    if (!(fillBothIds())) {
      return null;
    }
    SConceptAdapter adapter = new SConceptAdapter(getRoleId().getConceptId());
    SModel model = adapter.getConceptDeclarationNode().getModel();
    return ((SNode) model.getNode(new SNodeId.Regular(myRoleId.getContainmentLinkId())));
  }

  public boolean fillBothIds() {
    if (myRoleId != null && role != null) {
      return true;
    }
    if (myRoleId == null) {
      SNode concept = SModelUtil.findConceptDeclaration(conceptName);
      SConceptId cid = IdHelper.getConceptId((jetbrains.mps.smodel.SNode) concept);
      final ConceptAndSuperConceptsScope scope = new ConceptAndSuperConceptsScope(concept);
      SNode linkNode = scope.getLinkDeclarationByRole(role);
      myRoleId = new SContainmentLinkId(cid, IdHelper.getNodeId((jetbrains.mps.smodel.SNode) linkNode));
    } else {
      SAbstractConceptAdapter adapter = new SAbstractConceptAdapter(myRoleId.getConceptId());
      conceptName = adapter.getQualifiedName();
      SNode node = adapter.getConceptDeclarationNode();
      if (node == null) {
        return false;
      }
      role = node.getModel().getNode(new SNodeId.Regular(myRoleId.getContainmentLinkId())).getProperty("role");
    }
    return true;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SContainmentLinkAdapter that = (SContainmentLinkAdapter) o;
    if (myRoleId != null) {
      return myRoleId.equals(that.myRoleId);
    } else {
      String my = "" + conceptName + "#" + role;
      String theirs = "" + that.conceptName + "#" + that.role;
      return my.equals(theirs);
    }
  }

  @Override
  public int hashCode() {
    if (myRoleId != null) {
      return myRoleId.hashCode();
    } else {
      return ("" + conceptName + "#" + role).hashCode();
    }
  }
}
