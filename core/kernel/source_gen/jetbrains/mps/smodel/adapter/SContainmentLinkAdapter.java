package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SAbstractLink;
import org.jetbrains.mps.openapi.language.SConceptId111;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.language.ConceptRegistry;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;

public class SContainmentLinkAdapter extends SAbstractLinkAdapter implements SContainmentLink {
  protected SContainmentLink myRoleId;

  public SContainmentLinkAdapter(String conceptName, String role) {
    super(conceptName, role);
  }

  public SContainmentLinkAdapter(SContainmentLink roleId) {
    super(null, null);
    myRoleId = roleId;
  }

  @Override
  public SAbstractLink getRoleId() {
    fillBothIds();
    return myRoleId;
  }

  @Override
  public boolean isReference() {
    return false;
  }

  @Override
  public boolean isMultiple() {
    fillBothIds();
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(conceptName);
    return d.isMultipleChild(role);
  }

  public boolean isUnordered() {
    fillBothIds();
    ConceptDescriptor d = ConceptRegistry.getInstance().getConceptDescriptor(conceptName);
    return d.isUnorderedChild(role);
  }

  @Override
  public SNode getLinkNode() {
    if (!(fillBothIds())) {
      return null;
    }
    SConceptAdapter adapter = new SConceptAdapter(getRoleId().getConcept());
    SModel model = adapter.getConceptDeclarationNode().getModel();
    return ((SNode) model.getNode(new SNodeId.Regular(myRoleId.getContainmentLinkId())));
  }

  public boolean fillBothIds() {
    if (myRoleId != null && role != null) {
      return true;
    }
    if (myRoleId == null) {
      SNode concept = SModelUtil.findConceptDeclaration(conceptName);
      SConceptId111 cid = IdHelper.getConceptId((jetbrains.mps.smodel.SNode) concept);
      final ConceptAndSuperConceptsScope scope = new ConceptAndSuperConceptsScope(concept);
      SNode linkNode = scope.getLinkDeclarationByRole(role);
      myRoleId = new SContainmentLink(cid, IdHelper.getNodeId((jetbrains.mps.smodel.SNode) linkNode));
    } else {
      SAbstractConceptAdapter adapter = new SAbstractConceptAdapter(myRoleId.getConceptId());
      conceptName = adapter.getQualifiedName();
      SNode node = adapter.getConceptDeclarationNode();
      if (node == null) {
        return false;
      }
      role = node.getModel().getNode(new SNodeId.Regular(myRoleId.getContainmentLinkId())).getProperty("role");
    }
    return true;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SContainmentLinkAdapter that = (SContainmentLinkAdapter) o;
    if (myRoleId != null) {
      return myRoleId.equals(that.myRoleId);
    } else {
      String my = "" + conceptName + "#" + role;
      String theirs = "" + that.conceptName + "#" + that.role;
      return my.equals(theirs);
    }
  }

  @Override
  public int hashCode() {
    if (myRoleId != null) {
      return myRoleId.hashCode();
    } else {
      return ("" + conceptName + "#" + role).hashCode();
    }
  }
}
