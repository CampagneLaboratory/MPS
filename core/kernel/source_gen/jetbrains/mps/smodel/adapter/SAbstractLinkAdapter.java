package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SAbstractLink;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;

public abstract class SAbstractLinkAdapter implements SAbstractLink {
  protected String conceptName;
  protected String role;


  public SAbstractLinkAdapter(String conceptName, String role) {
    this.conceptName = conceptName;
    this.role = role;
  }

  @Override
  public String getRole() {
    return role;
  }

  @Override
  public boolean isOptional() {
    // TODO reimplement using ConceptDescriptor 
    SNode link = getLinkNode();
    if (link == null) {
      return true;
    }
    return SPropertyOperations.hasValue(link, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(link, "sourceCardinality", "0..n", "0..1");
  }

  @Override
  public SAbstractConcept getTargetConcept() {
    // TODO reimplement using ConceptDescriptor 
    SNode link = getLinkNode();
    if (link == null) {
      return null;
    }
    SNode t = SLinkOperations.getTarget(link, "target", false);
    return (SNodeOperations.isInstanceOf(t, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration") ?
      new SInterfaceConceptAdapter(NameUtil.nodeFQName(t)) :
      SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(t))
    );
  }



  protected final SNode getLinkNode() {
    SNode concept = SModelUtil.findConceptDeclaration(conceptName, GlobalScope.getInstance());
    if ((concept == null)) {
      return null;
    }
    SNode link = (SNode) new ConceptAndSuperConceptsScope(concept).getLinkDeclarationByRole(role);
    return SModelUtil.getGenuineLinkDeclaration(link);
  }
}
