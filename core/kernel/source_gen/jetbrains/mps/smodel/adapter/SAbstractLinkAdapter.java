package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.smodel.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public abstract class SAbstractLinkAdapter implements SAbstractLink {
  protected String conceptName;
  protected String role;

  public SAbstractLinkAdapter(String conceptName, String role) {
    this.conceptName = conceptName;
    this.role = role;
  }

  @Override
  public String getRole() {
    fillBothIds();
    // todo here we should obtain name from a concept node, but since we now having code which doesn't work by id and therefore obtains the name 
    // todo frequently, we get a huge slowdown if obtaining name from a node here 
    // todo in 3.2, it is supposed that we either remove most accesses to this method or we'll return role here and clear it in all concepts when renaming role in IDE 
    return role;
  }

  @Override
  public boolean isOptional() {
    // TODO reimplement using ConceptDescriptor 
    SNode link = getLinkNode();
    if (link == null) {
      return true;
    }
    return SPropertyOperations.hasValue(link, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(link, "sourceCardinality", "0..n", "0..1");
  }

  @Override
  public SAbstractConcept getTargetConcept() {
    // TODO reimplement using ConceptDescriptor 
    SNode link = getLinkNode();
    if (link == null) {
      return null;
    }
    SNode t = SLinkOperations.getTarget(link, "target", false);
    SConceptId id = IdHelper.getConceptId((jetbrains.mps.smodel.SNode) t);
    boolean isConcept = t.getConcept().getQualifiedName().equals("jetbrains.mps.lang.structure.structure.ConceptDeclaration");
    return (isConcept ? new SConceptAdapter(id) : new SInterfaceConceptAdapter(id));
  }

  public abstract SNode getLinkNode();

  protected abstract boolean fillBothIds();
}
