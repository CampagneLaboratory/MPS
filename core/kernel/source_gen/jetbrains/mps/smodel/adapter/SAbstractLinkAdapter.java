package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.IdUtil;
import jetbrains.mps.smodel.DebugRegistryImpl;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.SNodeId.Regular;
import jetbrains.mps.smodel.SNodeUtil;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SAbstractLink;
import org.jetbrains.mps.openapi.language.SAbstractLinkId;
import org.jetbrains.mps.openapi.language.SConceptId;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import org.jetbrains.mps.openapi.language.SContainmentLinkId;
import org.jetbrains.mps.openapi.language.SPropertyId;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;

public abstract class SAbstractLinkAdapter implements SAbstractLink {
  protected String conceptName;
  protected String role;

  @Deprecated
  public SAbstractLinkAdapter(String conceptName, String role) {
    this.conceptName = conceptName;
    this.role = role;
  }

  @Override
  @Deprecated
  public String getRole() {
    return getLinkNode().getProperty("role");
  }

  @Override
  public boolean isOptional() {
    // TODO reimplement using ConceptDescriptor 
    SNode link = getLinkNode();
    if (link == null) {
      return true;
    }
    return SPropertyOperations.hasValue(link, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(link, "sourceCardinality", "0..n", "0..1");
  }

  @Override
  public SAbstractConcept getTargetConcept() {
    // TODO reimplement using ConceptDescriptor 
    SNode link = getLinkNode();
    if (link == null) {
      return null;
    }
    SNode t = SLinkOperations.getTarget(link, "target", false);
    SConceptId id = IdHelper.getConceptId((jetbrains.mps.smodel.SNode) t);
    boolean isConcept = t.getConcept().getQualifiedName().equals(SNodeUtil.concept_ConceptDeclaration);
    return isConcept ? new SConceptAdapter(id) : new SInterfaceConceptAdapter(id);
  }

  public abstract SNode getLinkNode();
}
