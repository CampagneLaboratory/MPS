package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.smodel.SNodeId.Regular;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;
import org.jetbrains.mps.openapi.language.SAbstractLinkId;
import org.jetbrains.mps.openapi.language.SConceptId;
import org.jetbrains.mps.openapi.language.SContainmentLinkId;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SReferenceLinkId;
import org.jetbrains.mps.openapi.language.SScope;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.scope.Scope;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.annotations.NotNull;

public class SReferenceLinkAdapter extends SAbstractLinkAdapter implements SReferenceLink {
  protected SReferenceLinkId myRoleId;

  @Deprecated
  public SReferenceLinkAdapter(String conceptName, String role) {
    super(conceptName, role);
  }

  public SReferenceLinkAdapter(SReferenceLinkId roleId) {
    super(null,null);
    myRoleId = roleId;
  }


  @Override
  public SAbstractLinkId getRoleId() {
    fillBothIds();
    return myRoleId;
  }

  @Override
  public boolean isReference() {
    return true;
  }



  @Override
  public boolean isMultiple() {
    return false;
  }



  public SScope getScope(SNode referenceNode) {
    // TODO scope = ModelConstraints.getReferenceDescriptor(conceptId, role).getScope()
    Scope scope = null;
    if (scope != null) {
      return new SReferenceLinkAdapter.SScopeAdapter(scope, referenceNode);
    }
    return null;
  }

  public SScope getScope(SNode contextNode, @Nullable SContainmentLink link, int index) {
    // TODO scope = ModelConstraints.getReferenceDescriptor(conceptId, role, contextNode, link.role(), index).getScope()
    Scope scope = null;
    if (scope != null) {
      return new SReferenceLinkAdapter.SScopeAdapter(scope, contextNode);
    }
    return null;
  }


  @Override
  public SNode getLinkNode() {
    fillBothIds();
    SConceptAdapter adapter = new SConceptAdapter(getRoleId().getConceptId());
    SModel model = adapter.getConceptDeclarationNode().getModel();
    return model.getNode(new Regular(myRoleId.getReferenceLinkId()));
  }

  public void fillBothIds() {
    if (myRoleId != null && role != null) return;
    if (myRoleId == null) {
      SNode concept = SModelUtil.findConceptDeclaration(conceptName);
      SConceptId cid = IdHelper.getConceptId((jetbrains.mps.smodel.SNode) concept);
      final ConceptAndSuperConceptsScope scope = new ConceptAndSuperConceptsScope(concept);
      SNode linkNode = scope.getLinkDeclarationByRole(role);
      myRoleId = new SReferenceLinkId(cid, IdHelper.getNodeId((jetbrains.mps.smodel.SNode) linkNode));
    } else {
      //there might be an interface declaring this link, but this code still works well
      SConceptAdapter adapter = new SConceptAdapter(myRoleId.getConceptId());
      conceptName = adapter.getQualifiedName();
      SModel model = adapter.getConceptDeclarationNode().getModel();
      role = model.getNode(new Regular(myRoleId.getReferenceLinkId())).getProperty("role");
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;

    SReferenceLinkAdapter that = (SReferenceLinkAdapter) o;

    if (myRoleId != null) {
      return myRoleId.equals(that.myRoleId);
    } else {
      String my = "" + conceptName + "#" + role;
      String theirs = "" + that.conceptName + "#" + that.role;
      return my.equals(theirs);
    }
  }

  @Override
  public int hashCode() {
    if (myRoleId != null) {
      return myRoleId.hashCode();
    } else {
      return ("" + conceptName + "#" + role).hashCode();
    }
  }

  private static class SScopeAdapter implements SScope {
    private final SNode myContextNode;
    private final Scope myScope;


    private SScopeAdapter(@NotNull Scope scope, @NotNull SNode contextNode) {
      myScope = scope;
      myContextNode = contextNode;
    }



    public Iterable<SNode> getAvailableElements(@Nullable String prefix) {
      return myScope.getAvailableElements(prefix);
    }

    public boolean contains(SNode node) {
      return myScope.contains(node);
    }

    @Nullable
    public SNode resolve(@NotNull String string) {
      return myScope.resolve(myContextNode, string);
    }

    @Nullable
    public String getReferenceText(@NotNull SNode node) {
      return myScope.getReferenceText(myContextNode, node);
    }
  }
}
