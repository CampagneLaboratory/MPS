package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SAbstractLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SScope;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.scope.Scope;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;
import org.jetbrains.annotations.NotNull;

public class SReferenceLinkAdapter extends SAbstractLinkAdapter implements SReferenceLink {
  protected SReferenceLink myRoleId;

  public SReferenceLinkAdapter(String conceptName, String role) {
    super(conceptName, role);
  }

  public SReferenceLinkAdapter(SReferenceLink roleId) {
    super(null, null);
    myRoleId = roleId;
  }

  @Override
  public SAbstractLink getRoleId() {
    fillBothIds();
    return myRoleId;
  }

  @Override
  public boolean isReference() {
    return true;
  }

  @Override
  public boolean isMultiple() {
    return false;
  }

  public SScope getScope(SNode referenceNode) {
    // TODO scope = ModelConstraints.getReferenceDescriptor(conceptName, role).getScope() 
    Scope scope = null;
    if (scope != null) {
      return new SReferenceLinkAdapter.SScopeAdapter(scope, referenceNode);
    }
    return null;
  }
  public SScope getScope(SNode contextNode, @Nullable SContainmentLink link, int index) {
    // TODO scope = ModelConstraints.getReferenceDescriptor(conceptName, role, contextNode, link.role(), index).getScope() 
    Scope scope = null;
    if (scope != null) {
      return new SReferenceLinkAdapter.SScopeAdapter(scope, contextNode);
    }
    return null;
  }

  public SNode getLinkNode() {
    if (!(fillBothIds())) {
      return null;
    }
    SConceptAdapter adapter = new SConceptAdapter(getRoleId().getConcept());
    SModel model = adapter.getConceptDeclarationNode().getModel();
    return ((SNode) model.getNode(new SNodeId.Regular(myRoleId.getReferenceLinkId())));
  }

  public boolean fillBothIds() {
    if (myRoleId != null && role != null) {
      return true;
    }
    if (myRoleId == null) {
      SNode concept = SModelUtil.findConceptDeclaration(conceptName);
      SConcept cid = IdHelper.getConceptId((jetbrains.mps.smodel.SNode) concept);
      final ConceptAndSuperConceptsScope scope = new ConceptAndSuperConceptsScope(concept);
      SNode linkNode = scope.getLinkDeclarationByRole(role);
      myRoleId = new SReferenceLink(cid, IdHelper.getNodeId((jetbrains.mps.smodel.SNode) linkNode));
    } else {
      SAbstractConceptAdapter adapter = new SAbstractConceptAdapter(myRoleId.getConcept());
      conceptName = adapter.getQualifiedName();
      SNode node = adapter.getConceptDeclarationNode();
      if (node == null) {
        return false;
      }
      role = node.getModel().getNode(new SNodeId.Regular(myRoleId.getReferenceLinkId())).getProperty("role");
    }
    return true;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SReferenceLinkAdapter that = (SReferenceLinkAdapter) o;
    if (myRoleId != null) {
      return myRoleId.equals(that.myRoleId);
    } else {
      String my = "" + conceptName + "#" + role;
      String theirs = "" + that.conceptName + "#" + that.role;
      return my.equals(theirs);
    }
  }

  @Override
  public int hashCode() {
    if (myRoleId != null) {
      return myRoleId.hashCode();
    } else {
      return ("" + conceptName + "#" + role).hashCode();
    }
  }

  private static class SScopeAdapter implements SScope {
    private final SNode myContextNode;
    private final Scope myScope;

    private SScopeAdapter(@NotNull Scope scope, @NotNull SNode contextNode) {
      myScope = scope;
      myContextNode = contextNode;
    }

    public Iterable<SNode> getAvailableElements(@Nullable String prefix) {
      return myScope.getAvailableElements(prefix);
    }
    public boolean contains(SNode node) {
      return myScope.contains(node);
    }
    @Nullable
    public SNode resolve(@NotNull String string) {
      return myScope.resolve(myContextNode, string);
    }
    @Nullable
    public String getReferenceText(@NotNull SNode node) {
      return myScope.getReferenceText(myContextNode, node);
    }
  }
}
