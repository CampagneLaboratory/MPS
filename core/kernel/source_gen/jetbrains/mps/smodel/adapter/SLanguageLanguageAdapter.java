package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.smodel.Language;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.LanguageAspect;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.module.SModule;

public class SLanguageLanguageAdapter implements SLanguage {
  private Language myLanguage;

  public SLanguageLanguageAdapter(@NotNull Language language) {
    this.myLanguage = language;
  }

  @Override
  public String getPresentation() {
    return myLanguage.getModuleFqName();
  }

  @Override
  public Iterable<SAbstractConcept> getConcepts() {
    Iterable<SNode> roots = (Iterable<SNode>) LanguageAspect.STRUCTURE.get(myLanguage).getSModel().getRootNodes();
    List<SAbstractConcept> c = ListSequence.fromList(new ArrayList<SAbstractConcept>());
    ListSequence.fromList(c).addSequence(Sequence.fromIterable(roots).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.structure.structure.ConceptDeclaration");
      }
    }).select(new ISelector<SNode, SConcept>() {
      public SConcept select(SNode it) {
        return SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(it));
      }
    }));
    ListSequence.fromList(c).addSequence(Sequence.fromIterable(roots).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration");
      }
    }).select(new ISelector<SNode, SInterfaceConceptNodeAdapter>() {
      public SInterfaceConceptNodeAdapter select(SNode it) {
        return new SInterfaceConceptNodeAdapter(NameUtil.nodeFQName(it));
      }
    }));
    return c;
  }

  @Override
  public Iterable<SModuleReference> getLanguageRuntimes() {
    return null;
  }

  @Override
  public SModule getModule() {
    return myLanguage;
  }
}
