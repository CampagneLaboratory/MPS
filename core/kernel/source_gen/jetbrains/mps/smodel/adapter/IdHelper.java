package jetbrains.mps.smodel.adapter;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.ids.SConceptId;
import jetbrains.mps.smodel.ids.SContainmentLinkId;
import jetbrains.mps.smodel.ids.SLanguageId;
import jetbrains.mps.smodel.ids.SPropertyId;
import jetbrains.mps.smodel.ids.SReferenceLinkId;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.module.SModuleId;
import jetbrains.mps.project.ModuleId;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.project.structure.modules.ModuleReference;

/**
 * This allows to convert source-level (non-published code) ids to structure-level ids (published code ids)
 * DebugRegistry must not be used inside of this class. Only straightforward conversions are allowed
 */
public class IdHelper {
  public static long getNodeId(SNode node) {
    return ((SNodeId.Regular) node.getNodeId()).getId();
  }

  public static SLanguageId getLanguageId(Language l) {
    return getLanguageId(l.getModuleReference().getModuleId());
  }

  public static SLanguageId getLanguageId(SModuleId moduleId) {
    assert moduleId instanceof ModuleId.Regular;
    return new SLanguageId(((ModuleId.Regular) moduleId).getUUID());
  }

  public static SModuleReference getModuleReference(SLanguageId id) {
    return new ModuleReference(null, ModuleId.regular(id.getId()));
  }

  public static SConceptId getConceptId(SNode c) {
    org.jetbrains.mps.openapi.model.SNodeId nodeId = c.getNodeId();
    assert nodeId instanceof SNodeId.Regular;
    long id = ((SNodeId.Regular) nodeId).getId();
    return new SConceptId(getLanguageId(((Language) c.getModel().getModule())), id);
  }

  public static SContainmentLinkId getNodeRoleId(SNode c) {
    org.jetbrains.mps.openapi.model.SNodeId nodeId = c.getNodeId();
    assert nodeId instanceof SNodeId.Regular;
    long id = ((SNodeId.Regular) nodeId).getId();
    return new SContainmentLinkId(getConceptId(c.getContainingRoot()), id);
  }

  public static SReferenceLinkId getRefRoleId(SNode c) {
    org.jetbrains.mps.openapi.model.SNodeId nodeId = c.getNodeId();
    assert nodeId instanceof SNodeId.Regular;
    long id = ((SNodeId.Regular) nodeId).getId();
    return new SReferenceLinkId(getConceptId(c.getContainingRoot()), id);
  }

  public static SPropertyId getPropId(SNode c) {
    org.jetbrains.mps.openapi.model.SNodeId nodeId = c.getNodeId();
    assert nodeId instanceof SNodeId.Regular;
    long id = ((SNodeId.Regular) nodeId).getId();
    return new SPropertyId(getConceptId(c.getContainingRoot()), id);
  }
}
