package jetbrains.mps.smodel.apiadapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class SLanguageLanguageAdapter implements SLanguage {
  private Language myLanguage;

  public SLanguageLanguageAdapter(Language language) {
    this.myLanguage = language;
  }

  public String getPresentation() {
    return myLanguage.getModuleFqName();
  }

  public Iterable<SAbstractConcept> getConcepts() {
    Iterable<SNode> roots = LanguageAspect.STRUCTURE.get(myLanguage).getSModel().roots();
    Iterable<SConceptNodeAdapter> c = Sequence.fromIterable(roots).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.structure.structure.ConceptDeclaration");
      }
    }).select(new ISelector<SNode, SConceptNodeAdapter>() {
      public SConceptNodeAdapter select(SNode it) {
        return new SConceptNodeAdapter(SNodeOperations.cast(it, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
      }
    });
    Iterable<SInterfaceConceptNodeAdapter> ci = Sequence.fromIterable(roots).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration");
      }
    }).select(new ISelector<SNode, SInterfaceConceptNodeAdapter>() {
      public SInterfaceConceptNodeAdapter select(SNode it) {
        return new SInterfaceConceptNodeAdapter(SNodeOperations.cast(it, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration"));
      }
    });
    return Sequence.fromIterable(c).union(Sequence.fromIterable(ci));
  }
}
