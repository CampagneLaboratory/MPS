package jetbrains.mps.smodel.apiadapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SLink;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.project.GlobalScope;

public class SConceptNodeAdapterBase implements SAbstractConcept {
  private String myConceptName;
  private SNode myConcept;

  public SConceptNodeAdapterBase(String conceptName) {
    myConceptName = conceptName;
  }

  public String getName() {
    return NameUtil.shortNameFromLongName(myConceptName);
  }

  public String getId() {
    return myConceptName;
  }

  public SLink findLink(final String name) {
    SNode link = ListSequence.fromList((List<SNode>) SModelSearchUtil.getLinkDeclarations(getConcept())).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_vein7o_a0a0a0a0a0a0a2(SPropertyOperations.getString(it, "role"), name);
      }
    });
    return (link == null ?
      null :
      new SLinkNodeAdapter(link)
    );
  }

  public Iterable<SLink> getLinks() {
    return ListSequence.fromList(SLinkOperations.getTargets(getConcept(), "linkDeclaration", true)).select(new ISelector<SNode, SLink>() {
      public SLink select(SNode it) {
        return ((SLink) new SLinkNodeAdapter(it));
      }
    });
  }

  public SProperty findProperty(final String name) {
    SNode prop = ListSequence.fromList((List<SNode>) SModelSearchUtil.getPropertyDeclarations(getConcept())).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_vein7o_a0a0a0a0a0a0a4(SPropertyOperations.getString(it, "name"), name);
      }
    });
    return (prop == null ?
      null :
      new SPropertyNodeAdapter(prop)
    );
  }

  public Iterable<SProperty> getProperties() {
    return ListSequence.fromList(SLinkOperations.getTargets(getConcept(), "propertyDeclaration", true)).select(new ISelector<SNode, SProperty>() {
      public SProperty select(SNode it) {
        return ((SProperty) new SPropertyNodeAdapter(it));
      }
    });
  }

  public boolean isSubConceptOf(SConcept concept) {
    SNode c;
    if (concept instanceof SConceptNodeAdapter) {
      c = ((SConceptNodeAdapter) concept).getConcept();
    } else if (concept instanceof SInterfaceConceptNodeAdapter) {
      c = ((SInterfaceConceptNodeAdapter) concept).getConcept();
    } else {
      throw new IllegalArgumentException("not supported");
    }

    return SConceptOperations.isSubConceptOf(((SNode) getConcept()), NameUtil.nodeFQName(c));
  }

  public SLanguage getLanguage() {
    return new SLanguageLanguageAdapter(((Language) SNodeOperations.getModel(getConcept()).getModelDescriptor().getModule()));
  }

  public SNode getConcept() {
    if (myConcept == null) {
      myConcept = SModelUtil.findConceptDeclaration(myConceptName, GlobalScope.getInstance());
    }
    return myConcept;
  }

  private static boolean eq_vein7o_a0a0a0a0a0a0a2(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_vein7o_a0a0a0a0a0a0a4(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
