package jetbrains.mps.smodel.apiadapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SLink;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class SInterfaceConceptNodeAdapter implements SInterfaceConcept {
  private SNode myIConcept;

  public SInterfaceConceptNodeAdapter(@NotNull SNode iconcept) {
    this.myIConcept = iconcept;
  }

  public Iterable<SInterfaceConcept> getSuperInterfaces() {
    return ListSequence.fromList(SLinkOperations.getTargets(myIConcept, "extends", true)).select(new ISelector<SNode, SInterfaceConcept>() {
      public SInterfaceConcept select(SNode it) {
        return ((SInterfaceConcept) new SInterfaceConceptNodeAdapter(it));
      }
    });
  }

  public String getName() {
    return SPropertyOperations.getString(myIConcept, "name");
  }

  public String getQualifiedName() {
    return NameUtil.nodeFQName(myIConcept);
  }

  public SLink getLink(final String name) {
    return new SLinkNodeAdapter(ListSequence.fromList(SLinkOperations.getTargets(myIConcept, "linkDeclaration", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_lmck5_a0a0a0a0a0a0a0d(SPropertyOperations.getString(it, "role"), name);
      }
    }));
  }

  public Iterable<SLink> getLinks() {
    return ListSequence.fromList(SLinkOperations.getTargets(myIConcept, "linkDeclaration", true)).select(new ISelector<SNode, SLink>() {
      public SLink select(SNode it) {
        return ((SLink) new SLinkNodeAdapter(it));
      }
    });
  }

  public SProperty getProperty(final String name) {
    return new SPropertyNodeAdapter(ListSequence.fromList(SLinkOperations.getTargets(myIConcept, "propertyDeclaration", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_lmck5_a0a0a0a0a0a0a0f(SPropertyOperations.getString(it, "name"), name);
      }
    }));
  }

  public Iterable<SProperty> getProperties() {
    return ListSequence.fromList(SLinkOperations.getTargets(myIConcept, "propertyDeclaration", true)).select(new ISelector<SNode, SProperty>() {
      public SProperty select(SNode it) {
        return ((SProperty) new SPropertyNodeAdapter(it));
      }
    });
  }

  public boolean isSubConceptOf(SConcept concept) {
    SNode c;
    if (concept instanceof SConceptNodeAdapter) {
      c = ((SConceptNodeAdapter) concept).getConcept();
    } else if (concept instanceof SInterfaceConceptNodeAdapter) {
      c = ((SInterfaceConceptNodeAdapter) concept).getIConcept();
    } else {
      throw new IllegalArgumentException("not supported");
    }

    return SConceptOperations.isSubConceptOf(((SNode) myIConcept), NameUtil.nodeFQName(c));
  }

  public SLanguage getLanguage() {
    return new SLanguageLanguageAdapter(((Language) SNodeOperations.getModel(myIConcept).getModelDescriptor().getModule()));
  }

  public SNode getIConcept() {
    return myIConcept;
  }

  private static boolean eq_lmck5_a0a0a0a0a0a0a0d(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_lmck5_a0a0a0a0a0a0a0f(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
