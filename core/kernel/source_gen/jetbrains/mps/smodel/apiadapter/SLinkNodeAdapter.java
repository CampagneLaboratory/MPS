package jetbrains.mps.smodel.apiadapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SLink;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.kernel.model.SModelUtil;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SLinkScopeProvider;

public class SLinkNodeAdapter implements SLink {
  private SNode myNode;

  public SLinkNodeAdapter(@NotNull SNode node) {
    myNode = node;
  }

  public String getRole() {
    return SPropertyOperations.getString(myNode, "role");
  }

  public boolean isReference() {
    return SPropertyOperations.hasValue(myNode, "metaClass", "reference", "reference");
  }

  public boolean isMultiple() {
    SNode genuineLink = SModelUtil.getGenuineLinkDeclaration(myNode);
    return SPropertyOperations.hasValue(genuineLink, "sourceCardinality", "0..n", "0..1") || SPropertyOperations.hasValue(genuineLink, "sourceCardinality", "1..n", "0..1");
  }

  public boolean isOptional() {
    SNode genuineLink = SModelUtil.getGenuineLinkDeclaration(myNode);
    return SPropertyOperations.hasValue(genuineLink, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(genuineLink, "sourceCardinality", "0..n", "0..1");
  }

  public SAbstractConcept getTargetConcept() {
    SNode t = SLinkOperations.getTarget(myNode, "target", false);
    return (SNodeOperations.isInstanceOf(t, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration") ?
      new SInterfaceConceptNodeAdapter(NameUtil.nodeFQName(t)) :
      new SConceptNodeAdapter(NameUtil.nodeFQName(t))
    );
  }

  public SLinkScopeProvider getScopeProvider() {
    // todo 
    return null;
  }
}
