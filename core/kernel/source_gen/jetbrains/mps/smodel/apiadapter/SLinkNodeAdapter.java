package jetbrains.mps.smodel.apiadapter;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SLink;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.structure.behavior.LinkDeclaration_Behavior;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.scope.SLinkScopeProvider;
import org.jetbrains.mps.openapi.language.scope.SScopePlace;

public class SLinkNodeAdapter implements SLink {
  private SNode myNode;

  public SLinkNodeAdapter(SNode node) {
    myNode = node;
  }

  public String getRole() {
    return SPropertyOperations.getString(myNode, "role");
  }

  public boolean isReference() {
    return SPropertyOperations.hasValue(myNode, "metaClass", "reference", "reference");
  }

  public boolean isMultiple() {
    return !(LinkDeclaration_Behavior.call_isSingular_1213877254557(myNode));
  }

  public boolean isOptional() {
    return !(LinkDeclaration_Behavior.call_isAtLeastOneCardinality_3386205146660812199(myNode));
  }

  public SAbstractConcept getTargetConcept() {
    SNode t = SLinkOperations.getTarget(myNode, "target", false);
    return (SNodeOperations.isInstanceOf(t, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration") ?
      new SInterfaceConceptNodeAdapter(SNodeOperations.cast(t, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration")) :
      new SConceptNodeAdapter(SNodeOperations.cast(t, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"))
    );
  }

  public SLinkScopeProvider getScopeProvider(SScopePlace place) {
    // todo 
    return null;
  }
}
