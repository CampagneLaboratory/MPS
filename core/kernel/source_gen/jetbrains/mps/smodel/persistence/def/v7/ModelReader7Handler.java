package jetbrains.mps.smodel.persistence.def.v7;

/*Generated by MPS */

import jetbrains.mps.xmlQuery.runtime.XMLSAXHandler;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.Stack;
import org.xml.sax.Locator;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.smodel.SModelHeader;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.refactoring.ModelLinkMap;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.xmlQuery.runtime.AttributeUtils;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.refactoring.StructureModificationProcessor;
import jetbrains.mps.xmlQuery.runtime.BreakParseSAXException;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.util.Pair;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.StaticReference;

public class ModelReader7Handler extends XMLSAXHandler<ModelLoadResult> {
  private static String[] EMPTY_ARRAY = new String[0];
  protected static Log log = LogFactory.getLog(ModelReader7Handler.class);

  private ModelReader7Handler.ModelElementHandler modelhandler = new ModelReader7Handler.ModelElementHandler();
  private ModelReader7Handler.PersistenceElementHandler persistencehandler = new ModelReader7Handler.PersistenceElementHandler();
  private ModelReader7Handler.Module_referenceElementHandler module_referencehandler = new ModelReader7Handler.Module_referenceElementHandler();
  private ModelReader7Handler.ImportElementHandler importhandler = new ModelReader7Handler.ImportElementHandler();
  private ModelReader7Handler.RootsElementHandler rootshandler = new ModelReader7Handler.RootsElementHandler();
  private ModelReader7Handler.RootContentElementHandler rootContenthandler = new ModelReader7Handler.RootContentElementHandler();
  private ModelReader7Handler.NodeElementHandler nodehandler = new ModelReader7Handler.NodeElementHandler();
  private ModelReader7Handler.PropertyElementHandler propertyhandler = new ModelReader7Handler.PropertyElementHandler();
  private ModelReader7Handler.LinkElementHandler linkhandler = new ModelReader7Handler.LinkElementHandler();
  private Stack<ModelReader7Handler.ElementHandler> myHandlersStack = new Stack<ModelReader7Handler.ElementHandler>();
  private Stack<Object> myValues = new Stack<Object>();
  private Locator myLocator;
  private ModelLoadResult myResult;
  private ModelLoadingState fieldtoState;
  private SModelHeader fieldheader;
  private SModel fieldmodel;
  private ReadHelper fieldhelper;
  private ModelLinkMap fieldlinkMap;

  public ModelReader7Handler(ModelLoadingState toState, SModelHeader header) {
    fieldtoState = toState;
    fieldheader = header;
  }

  public ModelLoadResult getResult() {
    return myResult;
  }

  @Override
  public void setDocumentLocator(Locator locator) {
    myLocator = locator;
  }

  @Override
  public void characters(char[] array, int start, int len) throws SAXException {
    ModelReader7Handler.ElementHandler current = (myHandlersStack.empty() ?
      (ModelReader7Handler.ElementHandler) null :
      myHandlersStack.peek()
    );
    if (current != null) {
      current.handleText(myValues.peek(), new String(array, start, len));
    }
  }

  @Override
  public void endElement(String uri, String localName, String qName) throws SAXException {
    ModelReader7Handler.ElementHandler current = myHandlersStack.pop();
    Object childValue = myValues.pop();
    if (current != null) {
      current.validate(childValue);
      if (myHandlersStack.empty()) {
        myResult = (ModelLoadResult) childValue;
      } else {
        myHandlersStack.peek().handleChild(myValues.peek(), qName, childValue);
      }
    }
  }

  @Override
  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    ModelReader7Handler.ElementHandler current = (myHandlersStack.empty() ?
      (ModelReader7Handler.ElementHandler) null :
      myHandlersStack.peek()
    );
    if (current == null) {
      // root 
      current = modelhandler;
    } else {
      current = current.createChild(qName);
    }

    // check required 
    for (String attr : current.requiredAttributes()) {
      if (attributes.getValue(attr) == null) {
        throw new SAXParseException("attribute " + attr + " is absent", null);
      }
    }

    Object result = current.createObject(attributes);
    if (myHandlersStack.empty()) {
      myResult = (ModelLoadResult) result;
    }

    // handle attributes 
    for (int i = 0; i < attributes.getLength(); i++) {
      String name = attributes.getQName(i);
      String value = attributes.getValue(i);
      current.handleAttribute(result, name, value);
    }
    myHandlersStack.push(current);
    myValues.push(result);
  }

  private class ElementHandler {
    private ElementHandler() {
    }

    protected Object createObject(Attributes attrs) {
      return null;
    }

    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
    }

    protected ModelReader7Handler.ElementHandler createChild(String tagName) throws SAXException {
      throw new SAXParseException("unknown tag: " + tagName, null);
    }

    protected void handleChild(Object resultObject, String tagName, Object value) throws SAXException {
      throw new SAXParseException("unknown child: " + tagName, null);
    }

    protected void handleText(Object resultObject, String value) throws SAXException {
      if (value.trim().length() == 0) {
        return;
      }
      throw new SAXParseException("text is not accepted", null);
    }

    protected String[] requiredAttributes() {
      return ModelReader7Handler.EMPTY_ARRAY;
    }

    protected void validate(Object resultObject) throws SAXException {
    }
  }

  public class ModelElementHandler extends ModelReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"modelUID"};

    public ModelElementHandler() {
    }

    @Override
    protected ModelLoadResult createObject(Attributes attrs) {
      fieldmodel = new SModel(SModelReference.fromString(attrs.getValue("modelUID")));
      fieldmodel.setPersistenceVersion(7);
      fieldmodel.getSModelHeader().updateDefaults(fieldheader);
      fieldhelper = new ReadHelper(fieldmodel.getSModelReference());
      fieldlinkMap = new ModelLinkMap(fieldmodel);
      return new ModelLoadResult(fieldmodel, ModelLoadingState.NOT_LOADED);
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      ModelLoadResult result = (ModelLoadResult) resultObject;
      if ("modelUID".equals(name)) {
        return;
      }
      if ("version".equals(name)) {
        fieldmodel.getSModelHeader().setVersion(AttributeUtils.integerWithDefault(value, -1));
        return;
      }
      if ("doNotGenerate".equals(name)) {
        fieldmodel.getSModelHeader().setDoNotGenerate(AttributeUtils.booleanWithDefault(value, false));
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }

    @Override
    protected ModelReader7Handler.ElementHandler createChild(String tagName) throws SAXException {
      if ("persistence".equals(tagName)) {
        return persistencehandler;
      }
      if ("language".equals(tagName)) {
        return module_referencehandler;
      }
      if ("language-engaged-on-generation".equals(tagName)) {
        return module_referencehandler;
      }
      if ("devkit".equals(tagName)) {
        return module_referencehandler;
      }
      if ("import".equals(tagName)) {
        return importhandler;
      }
      if ("roots".equals(tagName)) {
        return rootshandler;
      }
      if ("root".equals(tagName)) {
        return rootContenthandler;
      }
      return super.createChild(tagName);
    }

    @Override
    protected void handleChild(Object resultObject, String tagName, Object value) throws SAXException {
      ModelLoadResult result = (ModelLoadResult) resultObject;
      if ("persistence".equals(tagName)) {
        return;
      }
      if ("language".equals(tagName)) {
        ModuleReference child = (ModuleReference) value;
        fieldmodel.addLanguage(child);
        return;
      }
      if ("language-engaged-on-generation".equals(tagName)) {
        ModuleReference child = (ModuleReference) value;
        fieldmodel.addEngagedOnGenerationLanguage(child);
        return;
      }
      if ("devkit".equals(tagName)) {
        ModuleReference child = (ModuleReference) value;
        fieldmodel.addDevKit(child);
        return;
      }
      if ("import".equals(tagName)) {
        String[] child = (String[]) value;
        fieldhelper.addImportToModel(fieldmodel, child[0], child[1], Integer.parseInt(child[2]), child[3] != null);
        return;
      }
      if ("roots".equals(tagName)) {
        Object child = (Object) value;
        if (fieldtoState == ModelLoadingState.ROOTS_LOADED && !(StructureModificationProcessor.hasRefactoringsToPlay(fieldmodel))) {
          result.setState(ModelLoadingState.ROOTS_LOADED);
          throw new BreakParseSAXException();
        }
        return;
      }
      if ("root".equals(tagName)) {
        return;
      }
      super.handleChild(resultObject, tagName, value);
    }

    @Override
    protected void validate(Object resultObject) throws SAXException {
      if (!(validateInternal((ModelLoadResult) resultObject))) {
        throw new SAXParseException("missing tags", null);
      }
    }

    private boolean validateInternal(ModelLoadResult result) throws SAXException {
      new StructureModificationProcessor(fieldlinkMap, fieldmodel).updateModelOnLoad();
      fieldlinkMap.fillRoleIdsComponent();
      result.setState(ModelLoadingState.FULLY_LOADED);
      return true;
    }
  }

  public class PersistenceElementHandler extends ModelReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"version"};

    public PersistenceElementHandler() {
    }

    @Override
    protected Integer createObject(Attributes attrs) {
      return Integer.parseInt(attrs.getValue("version"));
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Integer result = (Integer) resultObject;
      if ("version".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class Module_referenceElementHandler extends ModelReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"namespace"};

    public Module_referenceElementHandler() {
    }

    @Override
    protected ModuleReference createObject(Attributes attrs) {
      return ModuleReference.fromString(attrs.getValue("namespace"));
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      ModuleReference result = (ModuleReference) resultObject;
      if ("namespace".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class ImportElementHandler extends ModelReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"index", "version", "modelUID"};

    public ImportElementHandler() {
    }

    @Override
    protected String[] createObject(Attributes attrs) {
      return new String[]{attrs.getValue("index"), attrs.getValue("modelUID"), attrs.getValue("version"), null};
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String[] result = (String[]) resultObject;
      if ("index".equals(name)) {
        return;
      }
      if ("version".equals(name)) {
        return;
      }
      if ("modelUID".equals(name)) {
        return;
      }
      if ("implicit".equals(name)) {
        result[3] = value;
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class RootsElementHandler extends ModelReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};

    public RootsElementHandler() {
    }

    @Override
    protected ModelReader7Handler.ElementHandler createChild(String tagName) throws SAXException {
      if ("node".equals(tagName)) {
        return nodehandler;
      }
      return super.createChild(tagName);
    }

    @Override
    protected void handleChild(Object resultObject, String tagName, Object value) throws SAXException {
      Object result = (Object) resultObject;
      if ("node".equals(tagName)) {
        SNode child = (SNode) value;
        if (child != null) {
          fieldmodel.addRoot(child);
        }
        return;
      }
      super.handleChild(resultObject, tagName, value);
    }
  }

  public class RootContentElementHandler extends ModelReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"id"};

    public RootContentElementHandler() {
    }

    @Override
    protected SNode createObject(Attributes attrs) {
      return fieldmodel.getNodeById(attrs.getValue("id"));
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      SNode result = (SNode) resultObject;
      if ("id".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }

    @Override
    protected ModelReader7Handler.ElementHandler createChild(String tagName) throws SAXException {
      if ("node".equals(tagName)) {
        return nodehandler;
      }
      return super.createChild(tagName);
    }

    @Override
    protected void handleChild(Object resultObject, String tagName, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      if ("node".equals(tagName)) {
        SNode child = (SNode) value;
        if (child != null) {
          result.addChild(child.getRole(), child);
        }
        return;
      }
      super.handleChild(resultObject, tagName, value);
    }
  }

  public class NodeElementHandler extends ModelReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"type"};

    public NodeElementHandler() {
    }

    @Override
    protected SNode createObject(Attributes attrs) {
      return new SNode(null, fieldhelper.readType(attrs.getValue("type")));
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      SNode result = (SNode) resultObject;
      if ("type".equals(name)) {
        return;
      }
      if ("typeId".equals(name)) {
        fieldlinkMap.addTypeLocation(fieldhelper.readLinkId(value), result);
        return;
      }
      if ("role".equals(name)) {
        result.setRoleInParent(fieldhelper.readRole(value));
        return;
      }
      if ("roleId".equals(name)) {
        fieldlinkMap.addRoleLocation(fieldhelper.readLinkId(value), result);
        return;
      }
      if ("id".equals(name)) {
        SNodeId id = SNodeId.fromString(value);
        if (id == null) {
          throw new SAXParseException("bad node ID", null);
        }
        result.setId(id);
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }

    @Override
    protected ModelReader7Handler.ElementHandler createChild(String tagName) throws SAXException {
      if ("property".equals(tagName)) {
        return propertyhandler;
      }
      if ("link".equals(tagName)) {
        return linkhandler;
      }
      if ("node".equals(tagName)) {
        return nodehandler;
      }
      return super.createChild(tagName);
    }

    @Override
    protected void handleChild(Object resultObject, String tagName, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      if ("property".equals(tagName)) {
        String[] child = (String[]) value;
        if (child[1] != null) {
          result.setProperty(fieldhelper.readName(child[0]), child[1], false);
          fieldlinkMap.addNameLocation(fieldhelper.readLinkId(child[2]), result, child[0]);
        }
        return;
      }
      if ("link".equals(tagName)) {
        String[] child = (String[]) value;
        Pair<Boolean, SNodePointer> pptr = fieldhelper.readLink_internal(child[1]);
        SNodePointer ptr = pptr.o2;
        if (ptr == null || ptr.getModelReference() == null) {
          if (log.isErrorEnabled()) {
            log.error("couldn't create reference '" + child[0] + "' from " + child[1]);
          }
          return;
        }
        StaticReference ref = new StaticReference(fieldhelper.readRole(child[0]), result, ptr.getModelReference(), ptr.getNodeId(), child[2]);
        fieldlinkMap.addTargetLocation(ptr, ref);

        result.setReference(ref.getRole(), ref);
        fieldlinkMap.addRoleLocation(fieldhelper.readLinkId(child[3]), ref);
        return;
      }
      if ("node".equals(tagName)) {
        SNode child = (SNode) value;
        result.addChild(child.getRole(), child);
        return;
      }
      super.handleChild(resultObject, tagName, value);
    }
  }

  public class PropertyElementHandler extends ModelReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"name"};

    public PropertyElementHandler() {
    }

    @Override
    protected String[] createObject(Attributes attrs) {
      return new String[]{attrs.getValue("name"), null, null};
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String[] result = (String[]) resultObject;
      if ("name".equals(name)) {
        return;
      }
      if ("nameId".equals(name)) {
        result[2] = value;
        return;
      }
      if ("value".equals(name)) {
        result[1] = value;
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class LinkElementHandler extends ModelReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"role", "targetNodeId"};

    public LinkElementHandler() {
    }

    @Override
    protected String[] createObject(Attributes attrs) {
      return new String[]{attrs.getValue("role"), attrs.getValue("targetNodeId"), null, null};
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String[] result = (String[]) resultObject;
      if ("role".equals(name)) {
        return;
      }
      if ("roleId".equals(name)) {
        result[3] = value;
        return;
      }
      if ("targetNodeId".equals(name)) {
        return;
      }
      if ("resolveInfo".equals(name)) {
        result[2] = value;
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
}
