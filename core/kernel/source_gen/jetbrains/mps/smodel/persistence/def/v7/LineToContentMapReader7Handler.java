package jetbrains.mps.smodel.persistence.def.v7;

/*Generated by MPS */

import org.xml.sax.helpers.DefaultHandler;
import java.util.Stack;
import org.xml.sax.Locator;
import java.util.List;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.internal.collections.runtime.backports.Deque;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.DequeSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;

public class LineToContentMapReader7Handler extends DefaultHandler {
  private static String[] EMPTY_ARRAY = new String[0];

  private LineToContentMapReader7Handler.modelElementHandler modelhandler = new LineToContentMapReader7Handler.modelElementHandler();
  private LineToContentMapReader7Handler.rootsElementHandler rootshandler = new LineToContentMapReader7Handler.rootsElementHandler();
  private LineToContentMapReader7Handler.rootContentElementHandler rootContenthandler = new LineToContentMapReader7Handler.rootContentElementHandler();
  private LineToContentMapReader7Handler.nodeElementHandler nodehandler = new LineToContentMapReader7Handler.nodeElementHandler();
  private LineToContentMapReader7Handler.propertyElementHandler propertyhandler = new LineToContentMapReader7Handler.propertyElementHandler();
  private LineToContentMapReader7Handler.linkElementHandler linkhandler = new LineToContentMapReader7Handler.linkElementHandler();
  private Stack<LineToContentMapReader7Handler.ElementHandler> myHandlersStack = new Stack<LineToContentMapReader7Handler.ElementHandler>();
  private Stack<Object> myValues = new Stack<Object>();
  private Locator myLocator;
  private List<SNodeId> myResult;
  private VersionUtil fieldhelper;
  private Deque<SNodeId> fieldnodeIdStack;
  private List<SNodeId> fieldlineToIdMap;
  private boolean fieldnodeEnded;

  public LineToContentMapReader7Handler() {
  }

  public List<SNodeId> getResult() {
    return myResult;
  }

  @Override
  public void setDocumentLocator(Locator locator) {
    myLocator = locator;
  }

  @Override
  public void characters(char[] array, int start, int len) throws SAXException {
    globalHandleText(myValues.firstElement(), new String(array, start, len));
    LineToContentMapReader7Handler.ElementHandler current = (myHandlersStack.empty() ?
      (LineToContentMapReader7Handler.ElementHandler) null :
      myHandlersStack.peek()
    );
    if (current != null) {
      current.handleText(myValues.peek(), new String(array, start, len));
    }
  }

  @Override
  public void endElement(String uri, String localName, String qName) throws SAXException {
    LineToContentMapReader7Handler.ElementHandler current = myHandlersStack.pop();
    Object childValue = myValues.pop();
    if (current != null) {
      current.validate(childValue);
      if (myHandlersStack.empty()) {
        myResult = (List<SNodeId>) childValue;
      } else {
        myHandlersStack.peek().handleChild(myValues.peek(), qName, childValue);
      }
    }
  }

  @Override
  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    LineToContentMapReader7Handler.ElementHandler current = (myHandlersStack.empty() ?
      (LineToContentMapReader7Handler.ElementHandler) null :
      myHandlersStack.peek()
    );
    if (current == null) {
      // root 
      current = modelhandler;
    } else {
      current = current.createChild(qName);
    }

    // check required 
    for (String attr : current.requiredAttributes()) {
      if (attributes.getValue(attr) == null) {
        throw new SAXParseException("attribute " + attr + " is absent", null);
      }
    }

    Object result = current.createObject(attributes);
    if (myHandlersStack.empty()) {
      myResult = (List<SNodeId>) result;
    }

    // handle attributes 
    for (int i = 0; i < attributes.getLength(); i++) {
      String name = attributes.getQName(i);
      String value = attributes.getValue(i);
      current.handleAttribute(result, name, value);
    }
    myHandlersStack.push(current);
    myValues.push(result);
  }

  public void globalHandleText(Object resultObject, String value) {
    List<SNodeId> result = (List<SNodeId>) resultObject;
    for (int i = 0; i < StringUtils.countMatches(value, "\n"); i++) {
      int line = myLocator.getLineNumber() - 1;
      while (line > ListSequence.fromList(fieldlineToIdMap).count()) {
        ListSequence.fromList(fieldlineToIdMap).addElement(DequeSequence.fromDeque(fieldnodeIdStack).peekElement());
        if (fieldnodeEnded) {
          DequeSequence.fromDeque(fieldnodeIdStack).popElement();
          fieldnodeEnded = false;
        }
      }
    }
  }

  private class ElementHandler {
    private ElementHandler() {
    }

    protected Object createObject(Attributes attrs) {
      return null;
    }

    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
    }

    protected LineToContentMapReader7Handler.ElementHandler createChild(String tagName) throws SAXException {
      throw new SAXParseException("unknown tag: " + tagName, null);
    }

    protected void handleChild(Object resultObject, String tagName, Object value) throws SAXException {
      throw new SAXParseException("unknown child: " + tagName, null);
    }

    protected void handleText(Object resultObject, String value) throws SAXException {
      if (value.trim().length() == 0) {
        return;
      }
      throw new SAXParseException("text is not accepted", null);
    }

    protected String[] requiredAttributes() {
      return LineToContentMapReader7Handler.EMPTY_ARRAY;
    }

    protected void validate(Object resultObject) throws SAXException {
    }
  }

  public class modelElementHandler extends LineToContentMapReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};

    public modelElementHandler() {
    }

    @Override
    protected List<SNodeId> createObject(Attributes attrs) {
      fieldnodeIdStack = DequeSequence.fromDeque(new LinkedList<SNodeId>());
      fieldlineToIdMap = ListSequence.fromList(new ArrayList<SNodeId>());
      fieldnodeEnded = false;
      return fieldlineToIdMap;
    }

    @Override
    protected LineToContentMapReader7Handler.ElementHandler createChild(String tagName) throws SAXException {
      if ("roots".equals(tagName)) {
        return rootshandler;
      }
      if ("root".equals(tagName)) {
        return rootContenthandler;
      }
      return super.createChild(tagName);
    }

    @Override
    protected void handleChild(Object resultObject, String tagName, Object value) throws SAXException {
      List<SNodeId> result = (List<SNodeId>) resultObject;
      if ("roots".equals(tagName)) {
        return;
      }
      if ("root".equals(tagName)) {
        return;
      }
      super.handleChild(resultObject, tagName, value);
    }
  }

  public class rootsElementHandler extends LineToContentMapReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};

    public rootsElementHandler() {
    }

    @Override
    protected LineToContentMapReader7Handler.ElementHandler createChild(String tagName) throws SAXException {
      if ("node".equals(tagName)) {
        return nodehandler;
      }
      return super.createChild(tagName);
    }

    @Override
    protected void handleChild(Object resultObject, String tagName, Object value) throws SAXException {
      Object result = (Object) resultObject;
      if ("node".equals(tagName)) {
        SNode child = (SNode) value;
        if (child != null) {
          fieldnodeEnded = true;
        }
        return;
      }
      super.handleChild(resultObject, tagName, value);
    }
  }

  public class rootContentElementHandler extends LineToContentMapReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};

    public rootContentElementHandler() {
    }

    @Override
    protected LineToContentMapReader7Handler.ElementHandler createChild(String tagName) throws SAXException {
      if ("node".equals(tagName)) {
        return nodehandler;
      }
      return super.createChild(tagName);
    }

    @Override
    protected void handleChild(Object resultObject, String tagName, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      if ("node".equals(tagName)) {
        SNode child = (SNode) value;
        if (child != null) {
          fieldnodeEnded = true;
        }
        return;
      }
      super.handleChild(resultObject, tagName, value);
    }
  }

  public class nodeElementHandler extends LineToContentMapReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{};

    public nodeElementHandler() {
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      SNode result = (SNode) resultObject;
      if ("id".equals(name)) {
        SNodeId id = SNodeId.fromString(value);
        DequeSequence.fromDeque(fieldnodeIdStack).pushElement(id);
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }

    @Override
    protected LineToContentMapReader7Handler.ElementHandler createChild(String tagName) throws SAXException {
      if ("property".equals(tagName)) {
        return propertyhandler;
      }
      if ("link".equals(tagName)) {
        return linkhandler;
      }
      if ("node".equals(tagName)) {
        return nodehandler;
      }
      return super.createChild(tagName);
    }

    @Override
    protected void handleChild(Object resultObject, String tagName, Object value) throws SAXException {
      SNode result = (SNode) resultObject;
      if ("property".equals(tagName)) {
        String child = (String) value;
        if (child != null) {
          // TODO save property 
        }
        return;
      }
      if ("link".equals(tagName)) {
        String child = (String) value;
        if (child != null) {
          // TODO save reference 
        }
        return;
      }
      if ("node".equals(tagName)) {
        SNode child = (SNode) value;
        fieldnodeEnded = true;
        return;
      }
      super.handleChild(resultObject, tagName, value);
    }
  }

  public class propertyElementHandler extends LineToContentMapReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"name"};

    public propertyElementHandler() {
    }

    @Override
    protected String createObject(Attributes attrs) {
      return attrs.getValue("name");
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String result = (String) resultObject;
      if ("name".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }

  public class linkElementHandler extends LineToContentMapReader7Handler.ElementHandler {
    private String[] requiredAttributes = new String[]{"role"};

    public linkElementHandler() {
    }

    @Override
    protected String createObject(Attributes attrs) {
      return attrs.getValue("role");
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      String result = (String) resultObject;
      if ("role".equals(name)) {
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
}
