package jetbrains.mps.smodel.persistence.def.v7;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.smodel.SNodePointer;
import java.util.List;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.DynamicReference;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.StaticReference;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.HackSNodeUtil;

public class StructureModificationInfo {
  private Map<SNodePointer, List<StructureModificationInfo.ReferenceLocator>> myPtrMap;
  private Map<SModelReference, List<DynamicReference>> myDynRefMap;

  public StructureModificationInfo() {
    myPtrMap = MapSequence.fromMap(new HashMap<SNodePointer, List<StructureModificationInfo.ReferenceLocator>>());
    myDynRefMap = MapSequence.fromMap(new HashMap<SModelReference, List<DynamicReference>>());
  }

  private void addReferenceLocator(SNodePointer ptr, StructureModificationInfo.ReferenceLocator locator) {
    if (ptr == null) {
      return;
    }
    List<StructureModificationInfo.ReferenceLocator> list = MapSequence.fromMap(myPtrMap).get(ptr);
    if (list == null) {
      MapSequence.fromMap(myPtrMap).put(ptr, list = ListSequence.fromList(new ArrayList<StructureModificationInfo.ReferenceLocator>()));
    }
    ListSequence.fromList(list).addElement(locator);
  }

  public void addTypeLocation(SNodePointer ptr, SNode node) {
    addReferenceLocator(ptr, new StructureModificationInfo.NodeType(node));
  }

  public void addReferenceLocation(SNodePointer ptr, StaticReference ref) {
    addReferenceLocator(ptr, new StructureModificationInfo.ReferenceTarget(ref));
  }

  public void addLinkLocation(SNodePointer ptr, SReference ref) {
    addReferenceLocator(ptr, new StructureModificationInfo.ReferenceRole(ref));
  }

  public void addLinkLocation(SNodePointer ptr, SNode node) {
    addReferenceLocator(ptr, new StructureModificationInfo.NodeRole(node));
  }

  public void addNameLocation(SNodePointer ptr, SNode node, String name) {
    addReferenceLocator(ptr, new StructureModificationInfo.PropertyName(node, name));
  }

  public void addDynamicReference(SModelReference model, DynamicReference ref) {
    List<DynamicReference> list = MapSequence.fromMap(myDynRefMap).get(model);
    if (list == null) {
      MapSequence.fromMap(myDynRefMap).put(model, list = ListSequence.fromList(new ArrayList<DynamicReference>()));
    }
    ListSequence.fromList(list).addElement(ref);
  }

  public static interface ReferenceLocator {
    public void update(SNodePointer newRef, String info);
  }

  public class ReferenceTarget implements StructureModificationInfo.ReferenceLocator {
    private StaticReference myReference;

    public ReferenceTarget(StaticReference reference) {
      myReference = reference;
    }

    public void update(SNodePointer newRef, String info) {
      myReference.setTargetSModelReference(newRef.getModelReference());
      myReference.setTargetNodeId(newRef.getNodeId());
      // resolve info? 
    }
  }

  public class NodeType implements StructureModificationInfo.ReferenceLocator {
    private SNode myNode;

    public NodeType(SNode node) {
      myNode = node;
    }

    public void update(SNodePointer newRef, String type) {
      HackSNodeUtil.setConceptFqName(myNode, type);
    }
  }

  public class ReferenceRole implements StructureModificationInfo.ReferenceLocator {
    private SReference myReference;

    public ReferenceRole(SReference reference) {
      myReference = reference;
    }

    public void update(SNodePointer newRef, String role) {
      // todo: rename correspondent link attribute roles if exist 
      myReference.setRole(role);
    }
  }

  public class NodeRole implements StructureModificationInfo.ReferenceLocator {
    private SNode myNode;

    public NodeRole(SNode node) {
      myNode = node;
    }

    public void update(SNodePointer newRef, String role) {
      // todo: rename correspondent link attribute roles 
      myNode.setRoleInParent(role);
    }
  }

  public class PropertyName implements StructureModificationInfo.ReferenceLocator {
    private SNode myNode;
    private String myName;

    public PropertyName(SNode node, String name) {
      myNode = node;
      myName = name;
    }

    public void update(SNodePointer newRef, String name) {
      // todo: rename correspondent property attribute roles 
      String value = myNode.getPersistentProperty(myName);
      myNode.setProperty(myName, null, false);
      myName = name;
      myNode.setProperty(myName, value, false);
    }
  }
}
