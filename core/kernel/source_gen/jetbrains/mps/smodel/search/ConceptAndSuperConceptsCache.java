package jetbrains.mps.smodel.search;

/*Generated by MPS */

import jetbrains.mps.cache.AbstractCache;
import jetbrains.mps.cache.KeyProducer;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.cache.CachesManager;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.HashSet;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.structure.modules.ModuleReference;
import java.util.List;

/**
 * * Should be thread safe.
 */
/*package*/ class ConceptAndSuperConceptsCache extends AbstractCache {
  private static final KeyProducer keyProducer = new KeyProducer();
  private static final Logger LOG = Logger.getLogger(ConceptAndSuperConceptsCache.class);
  private static final CachesManager.CacheCreator<SNode> CREATOR = new CachesManager.CacheCreator<SNode>() {
    @Override
    public AbstractCache create(Object key, SNode element) {
      return new ConceptAndSuperConceptsCache(key, element);
    }
  };
  @NotNull
  private SNode myTopConcept;

  protected ConceptAndSuperConceptsCache(Object key, SNode topConcept) {
    super(key);
    myTopConcept = topConcept;
  }

  @Override
  public Set<SModel> getDependsOnModels(Object element) {
    Set<SModel> dependsOnModel = new HashSet<SModel>();
    for (SNode concept : getConcepts()) {
      //  http://youtrack.jetbrains.net/issue/MPS-8362 
      //  http://youtrack.jetbrains.net/issue/MPS-8556 
      SModel descriptor = concept.getContainingModel();
      if (descriptor == null) {
        LOG.error(getAssertionMessage(element, concept));
      } else {
        dependsOnModel.add(descriptor);
      }
    }
    return dependsOnModel;
  }

  private String getAssertionMessage(Object element, SNode concept) {
    String conceptFQName = NameUtil.nodeFQName(concept);
    GlobalScope scope = GlobalScope.getInstance();
    SNode conceptFromModelUtil = SModelUtil.findConceptDeclaration(conceptFQName, scope);
    String languageFqName = NameUtil.namespaceFromConceptFQName(conceptFQName);
    String conceptName = NameUtil.shortNameFromLongName(conceptFQName);
    Language language = scope.getLanguage(new ModuleReference(languageFqName));
    SNode conceptFromScope = null;
    if (language != null) {
      conceptFromScope = language.findConceptDeclaration(conceptName);
    }
    return "Model descriptor is null for concept: " + concept + "(" + System.identityHashCode(concept) + ")  same concept from SModelUtil_new: " + conceptFromModelUtil + "(" + System.identityHashCode(conceptFromModelUtil) + ") same concept from Scope:" + conceptFromScope + "(" + System.identityHashCode(conceptFromScope) + "), element: " + element + "(" + System.identityHashCode(element) + "), myTopConcept: " + myTopConcept + "(" + System.identityHashCode(element) + ")";
  }

  @NotNull
  public SNode getTopConcept() {
    return myTopConcept;
  }

  public SNode[] getConcepts() {
    Datasets.ConceptsDataSet dataSet = (Datasets.ConceptsDataSet) getDataSet(Datasets.ConceptsDataSet.ID, Datasets.CONCEPTS_CACHE_CREATOR);
    return dataSet.getConcepts();
  }

  public SNode getPropertyDeclarationByName(String name) {
    Datasets.PropertyDeclarationsDataSet dataSet = (Datasets.PropertyDeclarationsDataSet) getDataSet(Datasets.PropertyDeclarationsDataSet.ID, Datasets.PROPDECL_CACHE_CREATOR);
    return dataSet.getPropertyDeclarationByName(name);
  }

  public List<SNode> getPropertyDeclarations() {
    Datasets.PropertyDeclarationsDataSet dataSet = (Datasets.PropertyDeclarationsDataSet) getDataSet(Datasets.PropertyDeclarationsDataSet.ID, Datasets.PROPDECL_CACHE_CREATOR);
    return dataSet.getPropertyDeclarations();
  }

  public SNode getLinkDeclarationByRole(String role) {
    Datasets.LinkDeclarationsDataSet dataSet = (Datasets.LinkDeclarationsDataSet) getDataSet(Datasets.LinkDeclarationsDataSet.ID, Datasets.LINKDECL_CACHE_CREATOR);
    return dataSet.getLinkDeclarationByRole(role);
  }

  public SNode getMostSpecificLinkDeclarationByRole(String role) {
    Datasets.LinkDeclarationsDataSet dataSet = (Datasets.LinkDeclarationsDataSet) getDataSet(Datasets.LinkDeclarationsDataSet.ID, Datasets.LINKDECL_CACHE_CREATOR);
    return dataSet.getMostSpecificLinkDeclarationByRole(role);
  }

  public List<SNode> getLinkDeclarationsExcludingOverridden() {
    Datasets.LinkDeclarationsDataSet dataSet = (Datasets.LinkDeclarationsDataSet) getDataSet(Datasets.LinkDeclarationsDataSet.ID, Datasets.LINKDECL_CACHE_CREATOR);
    return dataSet.getLinkDeclarationsExcludingOverridden();
  }

  public SNode getConceptPropertyByName(String name) {
    Datasets.ConceptPropertiesDataSet dataSet = (Datasets.ConceptPropertiesDataSet) getDataSet(Datasets.ConceptPropertiesDataSet.ID, Datasets.CONCEPTPROPS_CACHE_CREATOR);
    return dataSet.getConceptPropertyByName(name);
  }

  public static ConceptAndSuperConceptsCache getInstance(SNode topConcept) {
    if (topConcept == null) {
      return null;
    }
    Object key = keyProducer.createKey(topConcept);
    return (ConceptAndSuperConceptsCache) CachesManager.getInstance().getCache(key, topConcept, CREATOR);
  }
}
