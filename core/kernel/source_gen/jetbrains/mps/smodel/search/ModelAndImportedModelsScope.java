package jetbrains.mps.smodel.search;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import java.util.ArrayList;
import jetbrains.mps.smodel.SModelOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.util.Condition;
import org.jetbrains.mps.openapi.model.util.NodesIterable;

public class ModelAndImportedModelsScope extends AbstractSearchScope {
  private static final Logger LOG = Logger.getLogger(ModelAndImportedModelsScope.class);
  private SModel myModel;
  private boolean myRootsOnly;
  private IScope myScope;
  private List<SModelDescriptor> myModels;

  public ModelAndImportedModelsScope(SModel model, boolean rootsOnly, IScope scope) {
    myModel = model;
    myRootsOnly = rootsOnly;
    myScope = scope;
  }

  @NotNull
  public List<SModelDescriptor> getModels() {
    if (myModels == null) {
      if (myModel == null) {
        myModels = new ArrayList<SModelDescriptor>(1);
      } else {
        myModels = SModelOperations.allImportedModels(myModel, myScope);
        myModels.add(0, myModel.getModelDescriptor());
      }
    }
    return myModels;
  }

  @NotNull
  @Override
  public List<SNode> getNodes(Condition<SNode> condition) {
    List<? extends org.jetbrains.mps.openapi.model.SModel> models = getModels();
    List<SNode> result = new ArrayList<SNode>();
    if (myRootsOnly) {
      for (org.jetbrains.mps.openapi.model.SModel model : models) {
        for (SNode root : model.getRootNodes()) {
          if (condition.met(root)) {
            result.add(root);
          }
        }
      }
    } else {
      for (org.jetbrains.mps.openapi.model.SModel model : models) {
        try {
          if (model == null) {
            continue;
          }
          SModel md = ((SModelDescriptor) model).getSModel();
          if (condition instanceof IsInstanceCondition) {
            IsInstanceCondition isInstance = (IsInstanceCondition) condition;
            result.addAll(md.getFastNodeFinder().getNodes(isInstance.getConceptFqName(), true));
          } else {
            for (SNode node : new NodesIterable(md)) {
              if (condition.met(node)) {
                result.add(node);
              }
            }
          }
        } catch (Throwable t) {
          LOG.error("error collecting nodes form model " + model, t);
        }
      }
    }
    return result;
  }
}
