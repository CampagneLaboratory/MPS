package jetbrains.mps.smodel.search;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.util.Condition;
import jetbrains.mps.scope.Scope;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.apache.commons.lang.StringUtils;

@Deprecated
public 
/**
 * @Deprecated
 */
interface ISearchScope {
  @NotNull
  public List<SNode> getNodes(Condition<SNode> condition);
  public boolean isInScope(SNode node);
  @NotNull
  public List<SNode> getNodes();
  public IReferenceInfoResolver getReferenceInfoResolver(SNode referenceNode, SNode targetConcept);
  public static class Adapter extends Scope {
    private final ISearchScope searchScope;
    private final SNode sourceNode;
    private final String role;
    @Nullable
    private final SReference reference;

    public Adapter(ISearchScope searchScope, SNode sourceNode, String role, SReference reference) {
      this.searchScope = searchScope;
      this.sourceNode = sourceNode;
      this.role = role;
      this.reference = reference;
    }

    public SNode resolve(SNode anchor, String refText) {
      SNode link = new ConceptAndSuperConceptsScope(SNodeOperations.getConceptDeclaration(sourceNode)).getMostSpecificLinkDeclarationByRole(role);
      if (link == null) {
        return null;
      }

      IReferenceInfoResolver infoResolver = searchScope.getReferenceInfoResolver(sourceNode, SLinkOperations.getTarget(SNodeOperations.cast(link, "jetbrains.mps.lang.structure.structure.LinkDeclaration"), "target", false));
      if (infoResolver == null) {
        return null;
      }

      return infoResolver.resolve(refText, (reference != null ?
        reference.getTargetSModelReference() :
        null
      ));
    }

    public List<SNode> getAvailableElements(final String prefix) {
      if (StringUtils.isEmpty(prefix)) {
        return searchScope.getNodes();
      }
      return searchScope.getNodes(new Condition<SNode>() {
        public boolean met(SNode p0) {
          if (p0 == null) {
            return false;
          }
          String presentation = getReferenceText(null, p0);
          return presentation != null && presentation.startsWith(prefix);
        }
      });
    }

    public String getReferenceText(SNode anchor, SNode target) {
      String resolveInfo = target.getResolveInfo();
      if (StringUtils.isNotEmpty(resolveInfo)) {
        return resolveInfo;
      }
      return target.getPresentation();
    }

    public ISearchScope getSearchScope() {
      return searchScope;
    }
  }

}
