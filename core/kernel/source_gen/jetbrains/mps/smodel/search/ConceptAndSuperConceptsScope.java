package jetbrains.mps.smodel.search;

/*Generated by MPS */

import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import org.jetbrains.annotations.Nullable;
import java.util.List;
import java.util.Collections;
import java.util.ArrayList;
import jetbrains.mps.lang.structure.structure.PropertyDeclaration;
import jetbrains.mps.nodeEditor.NodeReadAccessCasterInEditor;
import com.intellij.openapi.util.Computable;
import jetbrains.mps.lang.structure.structure.LinkDeclaration;
import jetbrains.mps.lang.structure.structure.ConceptProperty;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.util.Condition;
import jetbrains.mps.smodel.INodeAdapter;

public class ConceptAndSuperConceptsScope extends AbstractSearchScope {
  private AbstractConceptDeclaration myTopConcept;

  public ConceptAndSuperConceptsScope(@Nullable AbstractConceptDeclaration topConcept) {
    myTopConcept = topConcept;
  }

  public List<AbstractConceptDeclaration> getConcepts() {
    if (myTopConcept == null) {
      return Collections.emptyList();
    }
    return new ArrayList(ConceptAndSuperConceptsCache.getInstance(myTopConcept).getConcepts());
  }

  public PropertyDeclaration getPropertyDeclarationByName(final String name) {
    if (myTopConcept == null) {
      return null;
    }
    return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<PropertyDeclaration>() {
      public PropertyDeclaration compute() {
        return ConceptAndSuperConceptsCache.getInstance(myTopConcept).getPropertyDeclarationByName(name);
      }
    });
  }

  public List<PropertyDeclaration> getPropertyDeclarations() {
    if (myTopConcept == null) {
      return Collections.emptyList();
    }
    return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<List<PropertyDeclaration>>() {
      public List<PropertyDeclaration> compute() {
        return ConceptAndSuperConceptsCache.getInstance(myTopConcept).getPropertyDeclarations();
      }
    });
  }

  public LinkDeclaration getLinkDeclarationByRole(final String role) {
    if (myTopConcept == null) {
      return null;
    }
    return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<LinkDeclaration>() {
      public LinkDeclaration compute() {
        return ConceptAndSuperConceptsCache.getInstance(myTopConcept).getLinkDeclarationByRole(role);
      }
    });
  }

  public LinkDeclaration getMostSpecificLinkDeclarationByRole(final String role) {
    if (myTopConcept == null) {
      return null;
    }
    return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<LinkDeclaration>() {
      public LinkDeclaration compute() {
        return ConceptAndSuperConceptsCache.getInstance(myTopConcept).getMostSpecificLinkDeclarationByRole(role);
      }
    });
  }

  public List<LinkDeclaration> getLinkDeclarationsExcludingOverridden() {
    if (myTopConcept == null) {
      return Collections.emptyList();
    }
    return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<List<LinkDeclaration>>() {
      public List<LinkDeclaration> compute() {
        return ConceptAndSuperConceptsCache.getInstance(myTopConcept).getLinkDeclarationsExcludingOverridden();
      }
    });
  }

  public ConceptProperty getConceptPropertyByName(final String name) {
    if (myTopConcept == null) {
      return null;
    }
    return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<ConceptProperty>() {
      public ConceptProperty compute() {
        return ConceptAndSuperConceptsCache.getInstance(myTopConcept).getConceptPropertyByName(name);
      }
    });
  }

  @NotNull
  public List<SNode> getNodes(Condition<SNode> condition) {
    if (myTopConcept == null) {
      return Collections.emptyList();
    }
    List<SNode> result = new ArrayList<SNode>();
    for (INodeAdapter node : getConcepts()) {
      if (node == null) {
        continue;
      }
      if (condition.met(node.getNode())) {
        result.add(node.getNode());
      }
      result.addAll(node.getNode().getDescendants(condition));
    }
    return result;
  }
}
