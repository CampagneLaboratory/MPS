package jetbrains.mps.checkers;

/*Generated by MPS */

import jetbrains.mps.components.CoreComponent;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

public class CheckersComponent implements CoreComponent {
  private static CheckersComponent INSTANCE;
  private List<INodeChecker> myCheckers;
  private LanguageChecker myLanguageChecker;
  public CheckersComponent() {
    myLanguageChecker = new LanguageChecker();
    myCheckers = ListSequence.fromList(new LinkedList<INodeChecker>());
  }
  @NonNls
  @NotNull
  public String getComponentName() {
    return "Checkers";
  }
  @Override
  public void init() {
    if (INSTANCE != null) {
      throw new IllegalStateException("double initialization");
    }

    INSTANCE = this;
    ListSequence.fromList(myCheckers).addElement(myLanguageChecker);
  }
  @Override
  public void dispose() {
    ListSequence.fromList(myCheckers).removeElement(myLanguageChecker);
    INSTANCE = null;
  }
  public void addChecker(INodeChecker checker) {
    ListSequence.fromList(myCheckers).addElement(checker);
  }
  public void removeChecker(INodeChecker checker) {
    ListSequence.fromList(myCheckers).removeElement(checker);
  }
  public List<INodeChecker> getCheckers() {
    return myCheckers;
  }
  public static CheckersComponent getInstance() {
    return INSTANCE;
  }
}
