package jetbrains.mps.resolve;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;

/*package*/ class ResolveResult extends AbstractResolveResult {
  private SNode mySmartRefConcept;
  private SNode myTargetNode;

  public ResolveResult(SNode sourceNode, SNode targetNode, String role, SNode smartRefConcept) {
    super(sourceNode, role);
    myTargetNode = targetNode;
    mySmartRefConcept = smartRefConcept;
  }

  public SNode getTargetNode() {
    return myTargetNode;
  }

  public boolean isNewTargetFromSameModel(@NotNull SModelReference reference) {
    return myTargetNode != null && myTargetNode.getModel() != null && reference.getSModelFqName().equals(myTargetNode.getModel().getSModelFqName());
  }

  public void setTarget() {
    if (mySmartRefConcept == null) {
      getSourceNode().setReferent(getRole(), myTargetNode, false);
    } else {
      SNode parent = SNodeOperations.getParent(getSourceNode());
      if (parent != null) {
        SNode newNode = SModelUtil_new.instantiateConceptDeclaration(mySmartRefConcept, SNodeOperations.getModel(getSourceNode()));
        newNode.setReferent(getRole(), myTargetNode);
        parent.replaceChild(getSourceNode(), newNode);
      }
    }
  }
}
