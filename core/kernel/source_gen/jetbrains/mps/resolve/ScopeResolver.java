package jetbrains.mps.resolve;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import jetbrains.mps.util.Computable;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.constraints.ModelConstraintsUtil;
import jetbrains.mps.scope.ErrorScope;
import jetbrains.mps.util.NameUtil;

public class ScopeResolver implements IResolver {
  private static final Logger LOG = Logger.getLogger(ScopeResolver.class);

  public ScopeResolver() {
  }

  public ResolveResult resolve(final SReference reference, final SNode sourceNode, final IOperationContext operationContext) {
    SNode linkDeclaration = ((SNode) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.getConceptDeclaration(sourceNode), "call_findLinkDeclaration_1213877394467", new Class[]{SNode.class, String.class}, reference.getRole()));
    if (linkDeclaration == null) {
      return null;
    }
    final SNode referentConcept = SLinkOperations.getTarget(linkDeclaration, "target", false);
    return TypeContextManager.getInstance().runResolveAction(new Computable<ResolveResult>() {
      @Override
      public ResolveResult compute() {
        Scope refScope = ModelConstraintsUtil.getScope(reference, operationContext);
        if (refScope instanceof ErrorScope) {
          LOG.error("Couldn't create referent search scope : " + ((ErrorScope) refScope).getMessage());
          return null;
        }
        SNode result = null;
        String resolveInfo = reference.getResolveInfo();
        for (SNode node : refScope.getAvailableElements(null)) {
          if (!(SNodeOperations.isInstanceOf(node, NameUtil.nodeFQName(referentConcept)))) {
            continue;
          }
          if (resolveInfo != null && (resolveInfo.equals(node.getName()) || resolveInfo.equals(node.getProperty("nestedName")))) {
            if (result == null) {
              result = node;
            } else {
              // ambiguity 
              return null;
            }
          }
        }
        return (result != null ?
          new ResolveResult(sourceNode, result, reference.getRole(), null) :
          null
        );
      }
    });
  }
}
