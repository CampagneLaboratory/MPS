package jetbrains.mps.scope;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.SModelReference;
import java.util.List;

public class DelegatingScope extends Scope {
  protected Scope wrapped;

  public DelegatingScope(Scope wrapped) {
    this.wrapped = wrapped;
  }

  public SNode resolve(SNode contextNode, String refText) {
    return wrapped.resolve(contextNode, refText);
  }

  public SNode resolve(SNode contextNode, @NotNull String refText, @Nullable SModelReference targetModelReference) {
    return wrapped.resolve(contextNode, refText, targetModelReference);
  }

  public List<SNode> getAvailableElements(@Nullable String prefix) {
    return wrapped.getAvailableElements(prefix);
  }

  public String getReferenceText(SNode contextNode, SNode node) {
    return wrapped.getReferenceText(contextNode, node);
  }

  @Override
  public boolean contains(SNode node) {
    return wrapped.contains(node);
  }
}
