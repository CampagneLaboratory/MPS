package jetbrains.mps.scope;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IScope;
import java.util.Collection;
import jetbrains.mps.smodel.SModelDescriptor;
import java.util.List;
import java.util.Collections;
import jetbrains.mps.smodel.SModelOperations;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.SNodeOperations;
import org.jetbrains.mps.openapi.model.util.NodesIterable;
import org.jetbrains.annotations.Nullable;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ModelPlusImportedScope extends Scope {
  private final SModel myModel;
  private final boolean myRootsOnly;
  private final IScope myModuleScope;
  private final String myTargetConcept;
  private Collection<SModelDescriptor> myModels;

  public ModelPlusImportedScope(SModel model, boolean rootsOnly, IScope moduleScope, String targetConcept) {
    this.myModel = model;
    this.myRootsOnly = rootsOnly;
    this.myModuleScope = moduleScope;
    this.myTargetConcept = targetConcept;
  }

  public Collection<SModelDescriptor> getModels() {
    if (myModels == null) {
      List<SModelDescriptor> imported;
      if (myModel == null) {
        imported = Collections.emptyList();
      } else {
        imported = SModelOperations.allImportedModels(myModel, myModuleScope);
        imported.add(0, myModel.getModelDescriptor());
      }
      myModels = imported;
    }
    return myModels;
  }

  @Override
  public boolean contains(SNode node) {
    return SNodeUtil.isInstanceOf(node, SConceptRepository.getInstance().getConcept(myTargetConcept)) && (!(myRootsOnly) || SNodeOperations.isRoot(node)) && getModels().contains(node.getModel().getModelDescriptor());
  }

  @Override
  public SNode resolve(SNode contextNode, String refText) {
    Collection<SModelDescriptor> models = getModels();
    SNode result = null;
    for (SModelDescriptor model : models) {
      if (model == null) {
        continue;
      }
      Iterable<SNode> nodes;
      String conceptToCheck;

      if (myRootsOnly) {
        nodes = model.getSModel().getRootNodes();
        conceptToCheck = myTargetConcept;
      } else if (myTargetConcept != null) {
        nodes = SNodeOperations.getModelFastFinder(model.getSModel()).getNodes(myTargetConcept, true);
        conceptToCheck = null;
      } else {
        nodes = ((Iterable) new NodesIterable(model.getSModel()));
        conceptToCheck = null;
      }

      for (SNode node : nodes) {
        if (conceptToCheck != null && !(SNodeUtil.isInstanceOf(node, SConceptRepository.getInstance().getConcept(conceptToCheck)))) {
          continue;
        }
        String nodeRefText = getReferenceText(null, node);
        if (nodeRefText == null || !(nodeRefText.equals(refText))) {
          continue;
        }

        if (result == null) {
          result = node;
        } else {
          // ambiguity 
          return null;
        }
      }
    }
    return result;
  }

  @Override
  public Iterable<SNode> getAvailableElements(@Nullable String prefix) {
    Collection<SModelDescriptor> models = getModels();
    List<SNode> result = new ArrayList<SNode>();
    for (SModelDescriptor model : models) {
      if (model == null) {
        continue;
      }
      Iterable<SNode> nodes;
      String conceptToCheck;

      if (myRootsOnly) {
        nodes = model.getSModel().getRootNodes();
        conceptToCheck = myTargetConcept;
      } else if (myTargetConcept != null) {
        nodes = SNodeOperations.getModelFastFinder(model.getSModel()).getNodes(myTargetConcept, true);
        conceptToCheck = null;
      } else {
        nodes = ((Iterable) new NodesIterable(model.getSModel()));
        conceptToCheck = null;
      }

      for (SNode node : nodes) {
        if (conceptToCheck != null && !(SNodeUtil.isInstanceOf(node, SConceptRepository.getInstance().getConcept(conceptToCheck)))) {
          continue;
        }
        if ((prefix != null && prefix.length() > 0)) {
          String refText = getReferenceText(null, node);
          if (refText == null || !(refText.startsWith(prefix))) {
            continue;
          }
        }
        ListSequence.fromList(result).addElement(node);
      }
    }
    return result;
  }

  @Override
  public String getReferenceText(SNode contextNode, SNode node) {
    String resolveInfo = SNodeOperations.getResolveInfo(node);
    if ((resolveInfo != null && resolveInfo.length() > 0)) {
      return resolveInfo;
    }
    return node.getPresentation();
  }
}
