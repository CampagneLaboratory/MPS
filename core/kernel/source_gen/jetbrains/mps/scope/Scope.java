package jetbrains.mps.scope;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public abstract class Scope {
  public Scope() {
  }

  /**
   * Returns all available elements in the scope.
   * 
   * @param prefix (if not null) filters out elements whose reference text doesn't start with prefix
   * @return list of nodes in the scope
   */
  public abstract Iterable<SNode> getAvailableElements(@Nullable String prefix);

  /**
   * Returns <tt>true</tt> if this scope contains the specified element.
   * 
   * Invariant: contains(node) == getAvailableElements(null).contains(node)
   * 
   * @param node element to check presence for
   * @return <tt>true</tt> if this scope contains the specified element
   */
  public boolean contains(SNode node) {
    return Sequence.fromIterable(getAvailableElements(null)).contains(node);
  }

  /**
   * Resolves element by reference text.
   * 
   * Invariant: getReferenceText(contextNode, resolve(contextNode, refText)) == refText
   * 
   * @param contextNode source node for the reference, or its nearest parent node (if source node is unavailable)
   * @param refText reference text
   * @return resolved element when reference text unambiguously identifies element, null otherwise
   */
  @Nullable
  public abstract SNode resolve(SNode contextNode, @NotNull String refText);

  @Nullable
  public SNode resolve(SNode contextNode, @NotNull String refText, @Nullable SModelReference targetModelReference) {
    return resolve(contextNode, refText);
  }

  /**
   * Creates textual reference for scope element. If element has no textual representation
   * for the reference, returns null.
   * 
   * Invariant: resolve(contextNode, getReferenceText(contextNode, node)) == node
   * 
   * @param contextNode source node for the reference, or its nearest parent node (if source node is unavailable)
   * @param node element from the current scope (contains(node) == true)
   * @return reference text for the node element in the current scope
   */
  @Nullable
  public abstract String getReferenceText(SNode contextNode, @NotNull SNode node);

  /**
   * Get scope for existing node.
   */
  public static Scope getScope(SNode node, SNode fromChild, SNode kind) {
    SNode curr = node;
    SNode prev = fromChild;
    while (curr != null) {
      if (SNodeOperations.isInstanceOf(curr, "jetbrains.mps.lang.core.structure.ScopeProvider")) {
        Scope scope = ((Scope) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(curr, "jetbrains.mps.lang.core.structure.ScopeProvider"), "virtual_getScope_3734116213129936182", new Class[]{SNode.class, SNode.class, SNode.class}, kind, prev));
        if (scope != null) {
          return scope;
        }
      }
      prev = curr;
      curr = parent(curr);
    }
    return null;
  }

  /**
   * Get scope for smart reference, when node doesn't exist yet
   */
  public static Scope getScope(SNode node, String role, int index, SNode kind) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.ScopeProvider")) {
      Scope scope = ((Scope) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.ScopeProvider"), "virtual_getScope_7722139651431880752", new Class[]{SNode.class, SNode.class, String.class, Integer.TYPE}, kind, role, index));
      if (scope != null) {
        return scope;
      }
    }
    return getScope(parent(node), node, kind);
  }

  public static SNode parent(SNode n) {
    if (SNodeOperations.isAttribute(n)) {
      if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.core.structure.NodeAttribute")) {
        SNode next = SNodeOperations.getPrevSibling(n);
        while (next != null) {
          if (SNodeOperations.isInstanceOf(next, "jetbrains.mps.lang.core.structure.NodeAttribute")) {
            return next;
          }
          next = SNodeOperations.getPrevSibling(next);
        }
        n = SNodeOperations.getParent(n);
        return (n == null ?
          null :
          SNodeOperations.getParent(n)
        );
      }
      return SNodeOperations.getParent(n);
    }
    SNode lastAttr = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(n, "jetbrains.mps.lang.core.structure.BaseConcept"), "smodelAttribute", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.core.structure.NodeAttribute");
      }
    }).last();
    if ((lastAttr != null)) {
      return lastAttr;
    }

    return SNodeOperations.getParent(n);
  }
}
