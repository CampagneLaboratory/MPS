package jetbrains.mps.scope;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public abstract class Scope {
  public Scope() {
  }

  public abstract SNode resolve(SNode anchor, String refText);

  public abstract List<SNode> getAvailableElements(String prefix);

  public abstract String getReferenceText(SNode anchor, SNode target);

  /**
   * * 
   */
  public static Scope getScope(SNode node, SNode fromChild, SNode kind) {
    SNode curr = node;
    SNode prev = fromChild;
    while (curr != null) {
      if (SNodeOperations.isInstanceOf(curr, "jetbrains.mps.lang.core.structure.ScopeProvider")) {
        Scope scope = ((Scope) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(SNodeOperations.cast(curr, "jetbrains.mps.lang.core.structure.ScopeProvider"), "jetbrains.mps.lang.core.structure.ScopeProvider"), "virtual_getScope_3734116213129936182", new Class[]{SNode.class, SNode.class, SNode.class}, kind, prev));
        if (scope != null) {
          return scope;
        }
      }
      prev = curr;
      curr = parent(curr);
    }
    return null;
  }

  /**
   * * get scope for smart reference, when node doesn't exist yet
   */
  public static Scope getScope(SNode node, String role, int index, SNode kind) {
    // TODO 
    return getScope(node, null, kind);
  }

  public static SNode parent(SNode n) {
    if (SNodeOperations.isAttribute(n)) {
      if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.core.structure.NodeAttribute")) {
        SNode next = SNodeOperations.getPrevSibling(n);
        while (next != null) {
          if (SNodeOperations.isInstanceOf(next, "jetbrains.mps.lang.core.structure.NodeAttribute")) {
            return next;
          }
          next = SNodeOperations.getPrevSibling(next);
        }
        n = SNodeOperations.getParent(n);
        return (n == null ?
          null :
          SNodeOperations.getParent(n)
        );
      }
      return SNodeOperations.getParent(n);
    }
    SNode lastAttr = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(n, "jetbrains.mps.lang.core.structure.BaseConcept"), "smodelAttribute", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.core.structure.NodeAttribute");
      }
    }).last();
    if ((lastAttr != null)) {
      return lastAttr;
    }

    return SNodeOperations.getParent(n);
  }
}
