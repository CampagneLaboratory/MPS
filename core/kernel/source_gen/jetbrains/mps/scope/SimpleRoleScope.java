package jetbrains.mps.scope;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.kernel.model.SModelUtil;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public abstract class SimpleRoleScope extends Scope {
  private final SNode node;
  private final SNode link;
  private final String conceptFqName;

  public SimpleRoleScope(SNode node, SNode link, String conceptFqName) {
    this.node = node;
    this.link = link;
    this.conceptFqName = conceptFqName;
  }

  public SimpleRoleScope(SNode node, SNode link) {
    this.node = node;
    this.link = link;
    this.conceptFqName = null;
  }

  public SNode resolve(SNode anchor, String refText) {
    SNode result = null;
    for (SNode n : SNodeOperations.getChildren(node, link)) {
      if (this.conceptFqName != null && !(SModelUtil.isAssignableConcept(n.getConceptFqName(), conceptFqName))) {
        continue;
      }
      String name = getName(n);
      if (name.equals(refText)) {
        if (result == null) {
          result = n;
        } else {
          return null;
        }
      }
    }
    return result;
  }

  public List<SNode> getAvailableElements(String prefix) {
    List<SNode> result = new ArrayList<SNode>();
    for (SNode n : SNodeOperations.getChildren(node, link)) {
      if (this.conceptFqName != null && !(SModelUtil.isAssignableConcept(n.getConceptFqName(), conceptFqName))) {
        continue;
      }
      String name = getName(n);
      if (prefix == null || name.startsWith(prefix)) {
        ListSequence.fromList(result).addElement(n);
      }
    }
    return result;
  }

  public String getReferenceText(SNode anchor, SNode target) {
    if (target == null || SNodeOperations.getParent(target) != node) {
      return null;
    }
    if (this.conceptFqName != null && !(SModelUtil.isAssignableConcept(target.getConceptFqName(), conceptFqName))) {
      return null;
    }

    String result = getName(target);
    for (SNode n : SNodeOperations.getChildren(node, link)) {
      if (n == target) {
        continue;
      }
      if (this.conceptFqName != null && !(SModelUtil.isAssignableConcept(n.getConceptFqName(), conceptFqName))) {
        continue;
      }
      String name = getName(n);
      if (name.equals(result)) {
        // ambiguity 
        return null;
      }
    }
    return result;
  }

  public abstract String getName(SNode child);
}
