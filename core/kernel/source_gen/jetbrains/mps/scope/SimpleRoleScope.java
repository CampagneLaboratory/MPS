package jetbrains.mps.scope;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.kernel.model.SModelUtil;
import org.jetbrains.annotations.Nullable;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public abstract class SimpleRoleScope extends Scope {
  private final SNode myNode;
  private final SNode myLink;
  private final String conceptFqName;

  public SimpleRoleScope(SNode node, SNode link, String conceptFqName) {
    this.myNode = node;
    this.myLink = link;
    this.conceptFqName = conceptFqName;
  }

  public SimpleRoleScope(SNode node, SNode link) {
    this.myNode = node;
    this.myLink = link;
    this.conceptFqName = null;
  }

  public SNode resolve(SNode contextNode, String refText) {
    SNode result = null;
    for (SNode n : SNodeOperations.getChildren(myNode, myLink)) {
      if (this.conceptFqName != null && !(SModelUtil.isAssignableConcept(n.getConcept().getConceptId(), conceptFqName))) {
        continue;
      }
      String name = getName(n);
      if (name.equals(refText)) {
        if (result == null) {
          result = n;
        } else {
          return null;
        }
      }
    }
    return result;
  }

  public Iterable<SNode> getAvailableElements(@Nullable String prefix) {
    List<SNode> result = new ArrayList<SNode>();
    for (SNode n : SNodeOperations.getChildren(myNode, myLink)) {
      if (this.conceptFqName != null && !(SModelUtil.isAssignableConcept(n.getConcept().getConceptId(), conceptFqName))) {
        continue;
      }
      String name = getName(n);
      if (prefix == null || name.startsWith(prefix)) {
        ListSequence.fromList(result).addElement(n);
      }
    }
    return result;
  }

  public String getReferenceText(SNode contextNode, SNode node) {
    if (node == null || SNodeOperations.getParent(node) != myNode) {
      return null;
    }
    if (this.conceptFqName != null && !(SModelUtil.isAssignableConcept(node.getConcept().getConceptId(), conceptFqName))) {
      return null;
    }

    String result = getName(node);
    for (SNode n : SNodeOperations.getChildren(myNode, myLink)) {
      if (n == node) {
        continue;
      }
      if (this.conceptFqName != null && !(SModelUtil.isAssignableConcept(n.getConcept().getConceptId(), conceptFqName))) {
        continue;
      }
      String name = getName(n);
      if (name.equals(result)) {
        // ambiguity 
        return null;
      }
    }
    return result;
  }

  public abstract String getName(SNode child);

  public static SimpleRoleScope forNamedElements(SNode node, SNode linkDeclaration) {
    return new SimpleRoleScope(node, linkDeclaration) {
      public String getName(SNode child) {
        return SPropertyOperations.getString(SNodeOperations.cast(child, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
      }
    };
  }
}
