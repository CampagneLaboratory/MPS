package jetbrains.mps.datatransfer;

/*Generated by MPS */

import jetbrains.mps.cleanup.CleanupManager;
import jetbrains.mps.cleanup.CleanupListener;
import jetbrains.mps.smodel.Language;
import org.apache.log4j.Logger;
import jetbrains.mps.classloading.ClassLoaderManager;

public abstract class AbstractManager {
  private final CleanupManager myCleanupManager;
  private final CleanupListener myCleanupListener = new CleanupListener() {
    @Override
    public void performCleanup() {
      AbstractManager.this.clearCaches();
    }
  };

  public AbstractManager(final CleanupManager cleanupManager) {
    myCleanupManager = cleanupManager;
  }

  public void init() {
    myCleanupManager.addCleanupListener(myCleanupListener);
  }

  public void dispose() {
    myCleanupManager.removeCleanupListener(myCleanupListener);
  }

  public abstract void clearCaches();

  protected static class Descriptor<T> {
    private String myClassName;
    private Language myLanguage;
    private T myInstance;
    private boolean myWasInitialized;
    private Logger myLog;
    public Descriptor(String className, Language language, Logger log) {
      assert className != null;
      myClassName = className;
      assert language != null;
      myLanguage = language;
      assert log != null;
      myLog = log;
    }
    public T getInstance() {
      if (!(myWasInitialized)) {
        Class postProcessorClass = ClassLoaderManager.getInstance().getClass(myLanguage, myClassName);
        if (postProcessorClass != null) {
          try {
            myInstance = (T) postProcessorClass.newInstance();
          } catch (Throwable t) {
            myLog.error(null, t);
          }
        } else {
          myLog.warn("Class not found (probably code for corresponding model should be regenerated): " + myClassName);
        }
        myWasInitialized = true;
      }
      return myInstance;
    }
  }
}
