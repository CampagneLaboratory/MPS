package jetbrains.mps.datatransfer;

/*Generated by MPS */

import jetbrains.mps.reloading.ClassLoaderManager;
import jetbrains.mps.reloading.ReloadAdapter;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.logging.Logger;

public abstract class AbstractManager {
  private AbstractManager.ReloadListener myReloadListener = new AbstractManager.ReloadListener();

  public void init() {
    ClassLoaderManager.getInstance().addReloadHandler(myReloadListener);
  }

  public void dispose() {
    ClassLoaderManager.getInstance().removeReloadHandler(myReloadListener);
  }

  public abstract void clearCaches();

  private class ReloadListener extends ReloadAdapter {
    public ReloadListener() {
    }

    @Override
    public void onReload() {
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          AbstractManager.this.clearCaches();
        }
      });
    }
  }

  protected static class Descriptor<T> {
    private String myClassName;
    private Language myLanguage;
    private T myInstance;
    private boolean myWasInitialized;
    private Logger myLog;

    public Descriptor(String className, Language language, Logger log) {
      assert className != null;
      myClassName = className;
      assert language != null;
      myLanguage = language;
      assert log != null;
      myLog = log;
    }

    public T getInstance() {
      if (!(myWasInitialized)) {
        Class postProcessorClass = myLanguage.getClass(myClassName);
        if (postProcessorClass != null) {
          try {
            myInstance = (T) postProcessorClass.newInstance();
          } catch (InstantiationException ex) {
            myLog.error(ex);
          } catch (IllegalAccessException ex) {
            myLog.error(ex);
          }
        } else {
          myLog.warning("Class not found (probably code for corresponding model should be regenerated): " + myClassName);
        }
        myWasInitialized = true;
      }
      return myInstance;
    }
  }
}
