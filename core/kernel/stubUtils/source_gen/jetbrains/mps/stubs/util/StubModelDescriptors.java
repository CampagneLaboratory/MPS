package jetbrains.mps.stubs.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Set;
import jetbrains.mps.stubs.BaseStubModelDescriptor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import org.jetbrains.mps.openapi.persistence.DataSource;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.descriptor.source.StubModelDataSource;
import jetbrains.mps.smodel.SModelFqName;
import org.jetbrains.mps.openapi.model.SModelId;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.LanguageID;
import jetbrains.mps.project.StubModelsResolver;
import jetbrains.mps.project.structure.modules.ModuleReference;

public abstract class StubModelDescriptors {
  private String stubStereotype;
  private Iterable<String> paths;
  private SModule module;

  public StubModelDescriptors(String stereotype, String mr, SModule module) {
    this(stereotype, Sequence.<String>singleton(mr), module);
  }

  public StubModelDescriptors(String stereotype, Iterable<String> roots, SModule module) {
    this.stubStereotype = stereotype;
    this.paths = roots;
    this.module = module;
  }

  public Set<BaseStubModelDescriptor> getDescriptors(_FunctionTypes._return_P1_E0<? extends PathItem, ? super String> getPathItem) {
    Set<BaseStubModelDescriptor> result = SetSequence.fromSet(new HashSet<BaseStubModelDescriptor>());
    for (String path : paths) {
      collectDescriptors(path, "", getPathItem, result);
    }
    return result;
  }

  private void collectDescriptors(String path, String prefix, _FunctionTypes._return_P1_E0<? extends PathItem, ? super String> getPathItem, Set<BaseStubModelDescriptor> result) {
    PathItem pi = getPathItem.invoke(path);
    for (String subpkg : ListSequence.fromList(pi.subpackages(prefix))) {
      if (ListSequence.fromList(pi.resources(subpkg)).isNotEmpty()) {
        SModelReference smref = smodelRefWithId(subpkg);
        SModelDescriptor descById = SModelRepository.getInstance().getModelDescriptor(smref);
        if (descById != null) {
          assert descById.getModule() == module;
          SetSequence.fromSet(result).addElement(((BaseStubModelDescriptor) descById));
          DataSource dataSource = ((BaseStubModelDescriptor) descById).getSource();
          if (dataSource instanceof MultiRootModelDataSource) {
            ((MultiRootModelDataSource) dataSource).addRoot(path);
          }
        } else {
          BaseStubModelDescriptor desc = new BaseStubModelDescriptor(smref, createStubsSource(path), module);
          SModelRepository.getInstance().registerModelDescriptor(desc, (IModule) module);
          SetSequence.fromSet(result).addElement(desc);
        }
      }
      collectDescriptors(path, subpkg, getPathItem, result);
    }
  }

  public abstract StubModelDataSource createStubsSource(String path);

  public SModelReference smodelRefWithId(String pkg) {
    SModelFqName fqname = new SModelFqName(module.getModuleName(), pkg, stubStereotype);
    SModelId modelId = jetbrains.mps.smodel.SModelId.foreign(stubStereotype, module.getModuleReference().getModuleId().toString(), pkg);
    return new SModelReference(fqname, modelId);
  }

  public SModelReference smodelRefWithFqName(String pkg) {
    return SModelReference.fromString(pkg + "@" + stubStereotype);
  }

  public SModelReference javaStubRef(String pkg) {
    String stereo = SModelStereotype.getStubStereotypeForId(LanguageID.JAVA);
    Set<SModelReference> models = StubModelsResolver.getInstance().resolveModel(module, new SModelFqName(pkg, stereo), null);
    SModelReference mr = (models.isEmpty() ?
      null :
      models.iterator().next()
    );
    ModuleReference moduleRef = (mr == null ?
      null :
      SModelRepository.getInstance().getModelDescriptor(mr).getModule().getModuleReference()
    );

    String mfq = "MPS.Workbench";
    String muid = "86441d7a-e194-42da-81a5-2161ec62a379";

    if (moduleRef != null) {
      mfq = moduleRef.getModuleFqName();
      muid = moduleRef.getModuleId().toString();
    }
    SModelFqName fqname = new SModelFqName(mfq, pkg, stereo);
    SModelId modelId = jetbrains.mps.smodel.SModelId.foreign(stereo, muid, pkg);
    return new SModelReference(fqname, modelId);
  }
}
