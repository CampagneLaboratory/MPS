package jetbrains.mps.stubs.util;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.stubs.BaseStubModelDescriptor;
import jetbrains.mps.smodel.persistence.IModelRootManager;
import jetbrains.mps.stubs.StubLocation;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.smodel.SModelId;
import jetbrains.mps.smodel.SModelStereotype;

public class StubModelDescriptors {
  private String stubStereotype;

  public StubModelDescriptors(String stereotype) {
    this.stubStereotype = stereotype;
  }

  public Set<BaseStubModelDescriptor> getDescriptors(IModelRootManager mrm, StubLocation loc, _FunctionTypes._return_P1_E0<? extends PathItem, ? super String> getPathItem) {
    Set<BaseStubModelDescriptor> result = SetSequence.fromSet(new HashSet<BaseStubModelDescriptor>());
    collectDescriptors(mrm, loc, getPathItem, result);
    return result;
  }

  private void collectDescriptors(IModelRootManager mrm, StubLocation loc, _FunctionTypes._return_P1_E0<? extends PathItem, ? super String> getPathItem, Set<BaseStubModelDescriptor> result) {
    String pkg = loc.getPrefix();
    PathItem pi = getPathItem.invoke(loc.getPath());
    for (String subpkg : ListSequence.fromList(pi.subpackages(pkg))) {
      if (ListSequence.fromList(pi.resources(subpkg)).isNotEmpty()) {
        SModelReference smref = smodelRefWithId(subpkg);
        SModelReference smref2 = smodelRefWithFqName(subpkg);
        SModelDescriptor descById = SModelRepository.getInstance().getModelDescriptor(smref);
        SModelDescriptor descByFqName = SModelRepository.getInstance().getModelDescriptor(smref2);
        if (descById != null && descByFqName != null) {
          SModelRepository.getInstance().addOwnerForDescriptor(descByFqName, loc.getModule());
          SetSequence.fromSet(result).addElement(((BaseStubModelDescriptor) descByFqName));
        } else {
          BaseStubModelDescriptor desc = new BaseStubModelDescriptor(mrm, null, smref);
          SetSequence.fromSet(result).addElement(desc);
        }
      }
      collectDescriptors(mrm, new StubLocation(loc.getPath(), subpkg, loc.getModule()), getPathItem, result);
    }
  }

  public SModelReference smodelRefWithId(String pkg) {
    SModelFqName fqname = new SModelFqName(pkg, stubStereotype);
    SModelId modelId = SModelId.foreign(stubStereotype, pkg);
    return new SModelReference(fqname, modelId);
  }

  public SModelReference smodelRefWithFqName(String pkg) {
    return SModelReference.fromString(pkg + "@" + stubStereotype);
  }

  public SModelReference javaStubRef(String pkg) {
    String stereo = SModelStereotype.getStubStereotypeForId("java");
    SModelFqName fqname = new SModelFqName(pkg, stereo);
    SModelId modelId = SModelId.foreign(stereo, pkg);
    return new SModelReference(fqname, modelId);
  }
}
