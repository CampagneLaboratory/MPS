package jetbrains.mps.stubs.util;

/*Generated by MPS */

import jetbrains.mps.util.annotation.ImmutableObject;
import jetbrains.mps.smodel.descriptor.source.FileBasedModelDataSource;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.project.structure.modules.ModuleReference;
import java.util.Collection;
import java.util.Collections;
import jetbrains.mps.smodel.persistence.def.DescriptorLoadResult;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.nodeidmap.ForeignNodeIdMap;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.library.ModulesMiner;
import jetbrains.mps.project.structure.stub.ProjectStructureBuilder;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.project.SModelRoot;
import jetbrains.mps.internal.collections.runtime.ISelector;

@ImmutableObject
public class FileStubSource extends FileBasedModelDataSource {
  private final IFile myFile;
  private SModelReference ref;

  public FileStubSource(ModuleReference origin, IFile file, SModelReference ref) {
    super(origin);
    myFile = file;
    this.ref = ref;
  }

  public Collection<String> getFilesToListen() {
    return Collections.singleton(myFile.getPath());
  }

  public long getTimestamp() {
    return 0;
  }

  public DescriptorLoadResult loadDescriptor(IModule module, SModelFqName name) {
    DescriptorLoadResult result = new DescriptorLoadResult();
    result.setUID(ref.getSModelId().toString());
    return result;
  }

  public ModelLoadResult loadSModel(IModule module, SModelDescriptor descriptor, ModelLoadingState state) {
    SModel model = new SModel(descriptor.getSModelReference(), new ForeignNodeIdMap());
    final ModuleDescriptor moduleDesc = ModulesMiner.getInstance().loadModuleDescriptor(myFile);
    new ProjectStructureBuilder(moduleDesc, myFile, model) {
      public Iterable<SModelReference> loadReferences(SNode m, final ModuleDescriptor d) {
        return Sequence.fromIterable(((Iterable<ModelRoot>) d.getModelRoots())).translate(new ITranslator2<ModelRoot, SModelReference>() {
          public Iterable<SModelReference> translate(ModelRoot it) {
            return loadModels(it, d);
          }
        });
      }
    }.convert();

    ModuleReference lang = MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("86ef8290-12bb-4ca7-947f-093788f263a9")).getModuleReference();
    model.addLanguage(lang);
    module.addUsedLanguage(lang);
    return new ModelLoadResult(model, ModelLoadingState.FULLY_LOADED);
  }

  public boolean saveModel(SModelDescriptor descriptor) {
    throw new UnsupportedOperationException();
  }

  private Iterable<SModelReference> loadModels(ModelRoot root, ModuleDescriptor md) {
    try {
      SModelRoot sroot = new SModelRoot(root);
      IModule module = MPSModuleRepository.getInstance().getModule(md.getModuleReference());
      Iterable<SModelDescriptor> mds = sroot.getManager().load(root, module);
      return Sequence.fromIterable(mds).select(new ISelector<SModelDescriptor, SModelReference>() {
        public SModelReference select(SModelDescriptor it) {
          return it.getSModelReference();
        }
      });
    } catch (Exception e) {
      return Collections.emptySet();
    }
  }

  public boolean hasModel(SModelDescriptor descriptor) {
    return myFile != null && myFile.exists();
  }
}
