package jetbrains.mps.stubs.util;

/*Generated by MPS */

import jetbrains.mps.util.annotation.ImmutableObject;
import jetbrains.mps.extapi.persistence.FileDataSource;
import jetbrains.mps.smodel.descriptor.source.StubModelDataSource;
import jetbrains.mps.vfs.IFile;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.nodeidmap.ForeignNodeIdMap;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.library.ModulesMiner;
import jetbrains.mps.project.structure.stub.ProjectStructureBuilder;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.structure.model.ModelRootDescriptor;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.persistence.ModelRootFactory;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.extapi.persistence.ModelRootBase;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Collections;

@ImmutableObject
public class FileStubSource extends FileDataSource implements StubModelDataSource {
  public FileStubSource(IFile file, ModelRoot modelRoot, SModelReference ref) {
    super(file, modelRoot);
  }

  @Override
  public SModel loadSModel(IModule module, SModelDescriptor descriptor) {
    SModel model = new SModel(descriptor.getSModelReference(), new ForeignNodeIdMap());
    final ModuleDescriptor moduleDesc = ModulesMiner.getInstance().loadModuleDescriptor(getFile());
    new ProjectStructureBuilder(moduleDesc, getFile(), model) {
      @Override
      public Iterable<org.jetbrains.mps.openapi.model.SModelReference> loadReferences(SNode m, final ModuleDescriptor d) {
        return Sequence.fromIterable(((Iterable<ModelRootDescriptor>) d.getModelRootDescriptors())).translate(new ITranslator2<ModelRootDescriptor, org.jetbrains.mps.openapi.model.SModelReference>() {
          public Iterable<org.jetbrains.mps.openapi.model.SModelReference> translate(ModelRootDescriptor it) {
            return loadModels(it, d);
          }
        });
      }
    }.convert();

    ModuleReference lang = MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("86ef8290-12bb-4ca7-947f-093788f263a9")).getModuleReference();
    model.addLanguage(lang);
    module.addUsedLanguage(lang);
    return model;
  }

  private Iterable<org.jetbrains.mps.openapi.model.SModelReference> loadModels(ModelRootDescriptor root, ModuleDescriptor md) {
    try {
      SModule module = ModuleRepositoryFacade.getInstance().getModule(md.getModuleReference());
      ModelRootFactory modelRootFactory = PersistenceFacade.getInstance().getModelRootFactory(root.getType());
      ModelRoot created = modelRootFactory.create();
      created.load(root.getMemento());
      ((ModelRootBase) created).setModule(module);
      Iterable<org.jetbrains.mps.openapi.model.SModel> mds = ((ModelRootBase) created).loadModels();
      return Sequence.fromIterable(mds).select(new ISelector<org.jetbrains.mps.openapi.model.SModel, org.jetbrains.mps.openapi.model.SModelReference>() {
        public org.jetbrains.mps.openapi.model.SModelReference select(org.jetbrains.mps.openapi.model.SModel it) {
          return (org.jetbrains.mps.openapi.model.SModelReference) it.getReference();
        }
      });
    } catch (Exception e) {
      return Collections.emptySet();
    }
  }

  @Override
  public boolean hasModel(SModelDescriptor descriptor) {
    return getFile() != null && getFile().exists();
  }
}
