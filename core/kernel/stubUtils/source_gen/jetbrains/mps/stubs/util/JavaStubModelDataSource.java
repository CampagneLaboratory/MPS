package jetbrains.mps.stubs.util;

/*Generated by MPS */

import jetbrains.mps.smodel.descriptor.source.StubModelDataSource;
import jetbrains.mps.findUsages.fastfind.FastFindSupportProvider;
import jetbrains.mps.project.structure.modules.ModuleReference;
import java.util.Set;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.nodeidmap.ForeignNodeIdMap;
import jetbrains.mps.reloading.CompositeClassPathItem;
import jetbrains.mps.baseLanguage.javastub.ASMModelLoader;
import java.util.Collection;
import jetbrains.mps.smodel.descriptor.NodeDescriptor;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.reloading.ClassPathFactory;
import java.io.File;
import java.io.IOException;
import jetbrains.mps.findUsages.fastfind.FastFindSupport;
import jetbrains.mps.findUsages.fastfind.FastFindSupportRegistry;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import jetbrains.mps.smodel.LanguageID;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.stubs.javastub.classpath.ClassifierKind;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class JavaStubModelDataSource extends StubModelDataSource implements FastFindSupportProvider {
  public static final String FAST_FIND_ID = "java_stubs";

  private boolean skipPrivate;

  public JavaStubModelDataSource(ModuleReference origin, boolean skipPrivate) {
    super(origin);
    this.skipPrivate = skipPrivate;
  }

  protected Set<Language> getLanguagesToImport() {
    Set<String> moduleIds = SetSequence.fromSet(new HashSet<String>());
    SetSequence.fromSet(moduleIds).addElement(MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("f3061a53-9226-4cc5-a443-f952ceaf5816")).getModuleReference().getModuleId().toString());
    Iterable<Language> languages = SetSequence.fromSet(moduleIds).select(new ISelector<String, Language>() {
      public Language select(String it) {
        return ((Language) MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString(it)));
      }
    });
    return SetSequence.fromSetWithValues(new HashSet<Language>(), languages);
  }

  @Override
  public ModelLoadResult loadSModel(IModule module, SModelDescriptor descriptor, ModelLoadingState targetState) {
    SModel model = new SModel(descriptor.getSModelReference(), new ForeignNodeIdMap());
    for (Language l : getLanguagesToImport()) {
      model.addLanguage(l.getModuleReference());
      module.addUsedLanguage(l.getModuleReference());
    }
    CompositeClassPathItem cp = this.createClassPath(descriptor);
    new ASMModelLoader(module, cp, model, skipPrivate).updateModel();
    return new ModelLoadResult(model, ModelLoadingState.FULLY_LOADED);
  }

  public Collection<NodeDescriptor> getNodeDescriptors(SModelDescriptor model) {
    IClassPathItem item = createClassPath(model);
    if (item == null) {
      return new HashSet<NodeDescriptor>();
    }
    HashSet res = new HashSet();
    iterateClassPath(model.getModule().getModuleReference(), item, res, model.getLongName());
    return res;
  }

  private CompositeClassPathItem createClassPath(SModelDescriptor descriptor) {
    CompositeClassPathItem cp = new CompositeClassPathItem();
    for (String dir : getStubPaths()) {
      try {
        if (dir.indexOf("!") != -1) {
          cp.add(ClassPathFactory.getInstance().createFromPath(dir.substring(0, dir.indexOf("!")), this.getClass().getName()));
        } else {
          String name = descriptor.getSModelReference().getLongName().replace('.', File.separatorChar);

          // dirty hack for current problems with path separators 
          String dirCorrected = dir.replace('/', File.separatorChar);
          dirCorrected = dirCorrected.replace('\\', File.separatorChar);
          assert dirCorrected.contains(name) : "Strange dir for model: model " + name + "; dir = " + dir;

          int index = dirCorrected.indexOf(name);
          dir = dir.substring(0, index);
          cp.add(ClassPathFactory.getInstance().createFromPath(dir, this.getClass().getName()));
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    return cp;
  }

  public FastFindSupport getFastFindSupport() {
    return FastFindSupportRegistry.getInstance().getFastFindSupport(FAST_FIND_ID);
  }

  public static void iterateClassPath(final ModuleReference module, final IClassPathItem item, Set<NodeDescriptor> result, final String pName) {
    final SModelReference model = StubHelper.uidForPackageInStubs(pName, LanguageID.JAVA, module, false);
    for (final String cls : item.getRootClasses(pName)) {
      result.add(new NodeDescriptor() {
        public String getName() {
          return cls;
        }

        public SNode getConcept() {
          ClassifierKind kind = item.getClassifierKind(("".equals(pName) ?
            cls :
            pName + "." + cls
          ));
          if (kind == ClassifierKind.CLASS) {
            return SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept");
          }
          if (kind == ClassifierKind.INTERFACE) {
            return SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Interface");
          }
          if (kind == ClassifierKind.ANNOTATIONS) {
            return SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Annotation");
          }
          if (kind == ClassifierKind.ENUM) {
            return SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.EnumClass");
          }
          return SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept");
        }

        public SModelReference getModelReference() {
          return model;
        }
      });
    }
    for (String subpack : item.getSubpackages(pName)) {
      iterateClassPath(module, item, result, subpack);
    }
  }
}
