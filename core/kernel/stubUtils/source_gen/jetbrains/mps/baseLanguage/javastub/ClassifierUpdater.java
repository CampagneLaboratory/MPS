package jetbrains.mps.baseLanguage.javastub;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.javastub.asm.ASMClass;
import jetbrains.mps.stubs.javastub.classpath.ClassifierKind;
import org.jetbrains.mps.openapi.model.SNodeId;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.javastub.asm.ASMTypeVariable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.javastub.asm.ASMFormalTypeParameter;
import jetbrains.mps.baseLanguage.javastub.asm.ASMType;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.javastub.asm.ASMMethod;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.javastub.asm.ASMAnnotation;
import jetbrains.mps.baseLanguage.javastub.asm.ASMField;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.util.List;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.javastub.asm.ASMClassType;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.baseLanguage.javastub.asm.ASMPrimitiveType;
import jetbrains.mps.baseLanguage.javastub.asm.ASMEnumValue;
import org.apache.log4j.Level;
import jetbrains.mps.baseLanguage.javastub.asm.ASMArrayType;
import jetbrains.mps.baseLanguage.javastub.asm.ASMVarArgType;
import jetbrains.mps.baseLanguage.javastub.asm.ASMParameterizedType;
import jetbrains.mps.baseLanguage.javastub.asm.ASMExtendsType;
import jetbrains.mps.baseLanguage.javastub.asm.ASMSuperType;
import jetbrains.mps.baseLanguage.javastub.asm.ASMUnboundedType;
import java.util.ArrayList;
import jetbrains.mps.util.NodeNameUtil;
import org.jetbrains.mps.openapi.model.SReference;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class ClassifierUpdater {
  private SNode myClassifier;
  private final boolean mySkipPrivate;
  private final SReferenceHandler myHandler;
  private final ASMClass myParsedClass;

  public ClassifierUpdater(ASMClass asmClass, boolean skipPrivate, SReferenceHandler handler) {
    mySkipPrivate = skipPrivate;
    myHandler = handler;
    myParsedClass = asmClass;
  }

  public SNode create(String fqName) {
    ClassifierKind kind = myParsedClass.getClassifierKind();
    if (kind == null) {
      return null;
    }
    final SNodeId nodeId = ASMNodeId.createId(fqName);
    final String shortName = NameUtil.shortNameFromLongName(fqName.replace('$', '.'));
    SModel fakeModel = null;
    switch (kind) {
      case CLASS:
        SNode c = SModelOperations.createNewNode(fakeModel, nodeId, "jetbrains.mps.baseLanguage.structure.ClassConcept");
        prepare(c, shortName);
        initClass(c);
        return c;
      case INTERFACE:
        SNode i = SModelOperations.createNewNode(fakeModel, nodeId, "jetbrains.mps.baseLanguage.structure.Interface");
        prepare(i, shortName);
        initInterface(i);
        return i;
      case ENUM:
        SNode e = SModelOperations.createNewNode(fakeModel, nodeId, "jetbrains.mps.baseLanguage.structure.EnumClass");
        prepare(e, shortName);
        initClass(e);
        return e;
      case ANNOTATIONS:
        SNode a = SModelOperations.createNewNode(fakeModel, nodeId, "jetbrains.mps.baseLanguage.structure.Annotation");
        prepare(a, shortName);
        initAnnotation(a);
        return a;
      default:
        return null;
    }
  }

  private void prepare(SNode clsfr, String name) {
    SPropertyOperations.set(clsfr, "name", name);
    myClassifier = clsfr;
  }

  private void initAnnotation(SNode annotation) {
    updateAnnotationMethods(annotation);
    updateAnnotations(annotation);
    updateVisibility();
  }

  private void initClass(SNode cls) {
    SPropertyOperations.set(cls, "abstractClass", "" + (myParsedClass.isAbstract()));
    SPropertyOperations.set(cls, "isDeprecated", "" + (myParsedClass.isDeprecated()));
    SPropertyOperations.set(cls, "isFinal", "" + (myParsedClass.isFinal()));

    updateAnnotations(cls);
    updateTypeVariables(cls);
    updateExtendsAndImplements(cls);
    updateInstanceFields(cls);
    updateStaticFields(cls);
    updateConstructors(cls);
    updateInstanceMethods(cls);
    updateStaticMethods(cls);
    updateVisibility();
  }

  private void initInterface(SNode intfc) {
    SPropertyOperations.set(intfc, "isDeprecated", "" + (myParsedClass.isDeprecated()));
    updateAnnotations(intfc);
    updateTypeVariables(intfc);
    updateExtendsForInterface(intfc);
    updateStaticFields(intfc);
    updateInstanceMethods(intfc);
    updateVisibility();
  }

  private void updateVisibility() {
    SLinkOperations.setTarget(myClassifier, "visibility", (myParsedClass.isPublic() ? _quotation_createNode_ol94f8_a0a0a01() : null), true);
  }



  private void updateTypeVariables(SNode result) {
    for (ASMTypeVariable tv : myParsedClass.getTypeParameters()) {
      SNode tvd = _quotation_createNode_ol94f8_a0a0a0m(tv.getName());
      ListSequence.fromList(SLinkOperations.getTargets(result, "typeVariableDeclaration", true)).addElement(tvd);
      if (tv instanceof ASMFormalTypeParameter) {
        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;
        if (tp.getClassBound() != null) {
          SLinkOperations.setTarget(tvd, "bound", getTypeByASMType(tp.getClassBound(), null, result), true);
        }
        for (ASMType act : tp.getInterfaceBounds()) {
          ListSequence.fromList(SLinkOperations.getTargets(tvd, "auxBounds", true)).addElement(SNodeOperations.cast(getTypeByASMType(act, null, result), "jetbrains.mps.baseLanguage.structure.ClassifierType"));
        }
      }
    }
  }

  private void updateTypeVariables(ASMMethod method, SNode result, SNode cls) {
    Map<ASMTypeVariable, SNode> typeVars = MapSequence.fromMap(new HashMap<ASMTypeVariable, SNode>());
    for (ASMTypeVariable tv : method.getTypeParameters()) {
      SNode tvd = _quotation_createNode_ol94f8_a0a0b0n(tv.getName());
      ListSequence.fromList(SLinkOperations.getTargets(result, "typeVariableDeclaration", true)).addElement(tvd);
      MapSequence.fromMap(typeVars).put(tv, tvd);
    }
    for (ASMTypeVariable tv : method.getTypeParameters()) {
      SNode tvd = MapSequence.fromMap(typeVars).get(tv);
      if (tv instanceof ASMFormalTypeParameter) {
        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;
        if (tp.getClassBound() != null) {
          SLinkOperations.setTarget(tvd, "bound", getTypeByASMType(tp.getClassBound(), result, cls), true);
        }
        for (ASMType act : tp.getInterfaceBounds()) {
          ListSequence.fromList(SLinkOperations.getTargets(tvd, "auxBounds", true)).addElement(SNodeOperations.cast(getTypeByASMType(act, result, cls), "jetbrains.mps.baseLanguage.structure.ClassifierType"));
        }
      }
    }
  }

  private SNode findTypeVariableDeclaration(SNode genDecl, final String name) {
    return ListSequence.fromList(SLinkOperations.getTargets(genDecl, "typeVariableDeclaration", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_ol94f8_a0a0a0a0a0a0a41(SPropertyOperations.getString(it, "name"), name);
      }
    }).first();
  }

  private SNode createTypeVariableReference(SNode genDecl, String name) {
    return _quotation_createNode_ol94f8_a0a51(findTypeVariableDeclaration(genDecl, name));
  }

  private void updateAnnotations(SNode cls) {
    for (ASMAnnotation annotation : myParsedClass.getAnnotations()) {
      ListSequence.fromList(SLinkOperations.getTargets(cls, "annotation", true)).addElement(createAnnotation(annotation));
    }
  }

  private void updateExtendsForInterface(SNode intfc) {
    for (ASMType type : myParsedClass.getGenericInterfaces()) {
      ListSequence.fromList(SLinkOperations.getTargets(intfc, "extendedInterface", true)).addElement(SNodeOperations.cast(getTypeByASMType(type, null, intfc), "jetbrains.mps.baseLanguage.structure.ClassifierType"));
    }
  }

  private void updateExtendsAndImplements(SNode cls) {
    ASMType refSuperclass = myParsedClass.getGenericSuperclass();
    if (refSuperclass != null) {
      SLinkOperations.setTarget(cls, "superclass", SNodeOperations.cast(getTypeByASMType(refSuperclass, null, cls), "jetbrains.mps.baseLanguage.structure.ClassifierType"), true);
    }
    for (ASMType type : myParsedClass.getGenericInterfaces()) {
      ListSequence.fromList(SLinkOperations.getTargets(cls, "implementedInterface", true)).addElement(SNodeOperations.cast(getTypeByASMType(type, null, cls), "jetbrains.mps.baseLanguage.structure.ClassifierType"));
    }
  }

  private void updateInstanceFields(SNode cls) {
    for (ASMField field : myParsedClass.getDeclaredFields()) {
      if (field.isPrivate() && mySkipPrivate) {
        continue;
      }
      if (field.isStatic()) {
        continue;
      }
      if (field.isCompilerGenerated()) {
        continue;
      }
      SNode decl = _quotation_createNode_ol94f8_a0d0a0t(null, ASMNodeId.createId(myParsedClass, field), createVisibility(field), getTypeByASMType(field.getGenericType(), null, cls), field.getName());
      SPropertyOperations.set(decl, "isDeprecated", "" + (field.isDeprecated()));
      for (ASMAnnotation annotation : field.getAnnotations()) {
        ListSequence.fromList(SLinkOperations.getTargets(decl, "annotation", true)).addElement(createAnnotation(annotation));
      }

      ListSequence.fromList(SLinkOperations.getTargets(cls, "member", true)).addElement(decl);
    }
  }

  private void updateStaticFields(SNode cls) {
    for (ASMField field : myParsedClass.getDeclaredFields()) {
      if (field.isPrivate() && mySkipPrivate) {
        continue;
      }
      if (!(field.isStatic())) {
        continue;
      }
      if (field.isCompilerGenerated()) {
        continue;
      }
      if (field.isEnumConstant()) {
        SNode enumClass = SNodeOperations.cast(cls, "jetbrains.mps.baseLanguage.structure.EnumClass");
        SNode ecd = _quotation_createNode_ol94f8_a0b0d0a0u(null, ASMNodeId.createId(myParsedClass, field), field.getName());

        ListSequence.fromList(SLinkOperations.getTargets(enumClass, "enumConstant", true)).addElement(ecd);
      } else {
        SNode decl = _quotation_createNode_ol94f8_a0a0a3a0a02(null, ASMNodeId.createId(myParsedClass, field), createVisibility(field), getTypeByASMType(field.getGenericType(), null, cls), field.getName());
        SPropertyOperations.set(decl, "isDeprecated", "" + (field.isDeprecated()));
        for (ASMAnnotation annotation : field.getAnnotations()) {
          ListSequence.fromList(SLinkOperations.getTargets(decl, "annotation", true)).addElement(createAnnotation(annotation));
        }
        if (field.isFinal()) {
          SPropertyOperations.set(decl, "isFinal", "" + (true));
          if (field.hasValue()) {
            Object value = field.getValue();
            if (value instanceof Integer) {
              SLinkOperations.setTarget(decl, "initializer", _quotation_createNode_ol94f8_a0a0b0b0d0a3a0a02(value.toString()), true);
            } else if (value instanceof String) {
              SLinkOperations.setTarget(decl, "initializer", _quotation_createNode_ol94f8_a0a0a1a1a3a0d0a0u((String) value), true);
            }
          }
        }

        ListSequence.fromList(SLinkOperations.getTargets(cls, "member", true)).addElement(decl);
      }
    }
  }

  private void updateAnnotationMethods(final SNode annotation) {
    for (ASMMethod m : myParsedClass.getDeclaredMethods()) {
      SNode md = _quotation_createNode_ol94f8_a0a0a0v(null, ASMNodeId.createAnnotationMethodId(myParsedClass.getFqName(), m.getName()), getTypeByASMType(m.getGenericReturnType(), null, annotation), m.getName());
      SLinkOperations.setTarget(md, "visibility", _quotation_createNode_ol94f8_a0b0a0v(), true);
      if (m.getAnnotationDefault() != null) {
        SLinkOperations.setTarget(md, "defaultValue", getAnnotationValue(m.getAnnotationDefault()), true);
      }

      ListSequence.fromList(SLinkOperations.getTargets(annotation, "method", true)).addElement(md);
    }
  }

  private void updateConstructors(final SNode cls) {
    for (ASMMethod c : myParsedClass.getDeclaredConstructors()) {
      if (c.isSynthetic()) {
        continue;
      }
      if (c.isPrivate() && mySkipPrivate) {
        continue;
      }

      SNode constructor = _quotation_createNode_ol94f8_a0d0a0w(null, ASMNodeId.createId(myParsedClass, c), createVisibility(c), SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StubStatementList", null), SPropertyOperations.getString(cls, "name"));
      SPropertyOperations.set(constructor, "isDeprecated", "" + (c.isDeprecated()));
      for (ASMTypeVariable tv : c.getTypeParameters()) {
        ListSequence.fromList(SLinkOperations.getTargets(constructor, "typeVariableDeclaration", true)).addElement(_quotation_createNode_ol94f8_a0a0a5a0a22(tv.getName()));
      }
      {
        ASMType pt;
        String pn;
        List<ASMAnnotation> pa;
        Iterator<ASMType> pt_iterator = ListSequence.fromList(c.getGenericParameterTypes()).iterator();
        Iterator<String> pn_iterator = ListSequence.fromList(c.getParameterNames()).iterator();
        Iterator<List<ASMAnnotation>> pa_iterator = ListSequence.fromList(c.getParameterAnnotations()).iterator();
        while (true) {
          if (!(pt_iterator.hasNext())) {
            break;
          }
          if (!(pn_iterator.hasNext())) {
            break;
          }
          if (!(pa_iterator.hasNext())) {
            break;
          }
          pt = pt_iterator.next();
          pn = pn_iterator.next();
          pa = pa_iterator.next();
          {
            if (!(SPropertyOperations.getBoolean(cls, "isStatic")) && c.getGenericParameterTypes().get(0) == pt) {
              continue;
            }

            SNode pd = _quotation_createNode_ol94f8_a0c0g0g0g0a0w(getTypeByASMType(pt, constructor, cls), pn);
            addAnnotationsToParameter(pd, pa);
            ListSequence.fromList(SLinkOperations.getTargets(constructor, "parameter", true)).addElement(pd);
          }
        }
      }
      for (ASMAnnotation annotation : c.getAnnotations()) {
        ListSequence.fromList(SLinkOperations.getTargets(constructor, "annotation", true)).addElement(createAnnotation(annotation));
      }
      for (ASMType exception : c.getExceptionTypes()) {
        ListSequence.fromList(SLinkOperations.getTargets(constructor, "throwsItem", true)).addElement(getTypeByASMType(exception, constructor, cls));
      }

      ListSequence.fromList(SLinkOperations.getTargets(cls, "member", true)).addElement(constructor);
    }
  }

  private void updateInstanceMethods(SNode cls) {
    for (ASMMethod m : myParsedClass.getDeclaredMethods()) {
      if (m.isPrivate() && mySkipPrivate) {
        continue;
      }
      if (m.isStatic()) {
        continue;
      }
      if (m.isBridge()) {
        continue;
      }
      if (m.isCompilerGenerated()) {
        continue;
      }

      SNode md = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null);
      ((jetbrains.mps.smodel.SNode) md).setId(ASMNodeId.createId(myParsedClass, m));
      SPropertyOperations.set(md, "isAbstract", "" + (m.isAbstract()));
      SLinkOperations.setTarget(md, "visibility", createVisibility(m), true);
      this.updateBaseMethod(m, md, cls);

      ListSequence.fromList(SLinkOperations.getTargets(cls, "member", true)).addElement(md);
    }
  }

  private void updateStaticMethods(SNode cls) {
    for (ASMMethod m : myParsedClass.getDeclaredMethods()) {
      if (m.isPrivate() && mySkipPrivate) {
        continue;
      }
      if (!(m.isStatic())) {
        continue;
      }
      if (m.isCompilerGenerated()) {
        continue;
      }
      if (SNodeOperations.isInstanceOf(cls, "jetbrains.mps.baseLanguage.structure.EnumClass") && isGeneratedEnumMethod(m)) {
        continue;
      }

      SNode md = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration", null);
      ((jetbrains.mps.smodel.SNode) md).setId(ASMNodeId.createId(myParsedClass, m));
      SLinkOperations.setTarget(md, "visibility", createVisibility(m), true);
      updateBaseMethod(m, md, cls);

      ListSequence.fromList(SLinkOperations.getTargets(cls, "member", true)).addElement(md);
    }
  }

  private void updateBaseMethod(ASMMethod m, SNode md, SNode cls) {
    SPropertyOperations.set(md, "name", m.getName());
    SLinkOperations.setTarget(md, "body", _quotation_createNode_ol94f8_a0b0z(), true);
    SPropertyOperations.set(md, "isFinal", "" + (m.isFinal()));
    SPropertyOperations.set(md, "isDeprecated", "" + (m.isDeprecated()));
    updateTypeVariables(m, md, cls);
    SLinkOperations.setTarget(md, "returnType", getTypeByASMType(m.getGenericReturnType(), md, cls), true);
    {
      ASMType pt;
      String pn;
      List<ASMAnnotation> pa;
      Iterator<ASMType> pt_iterator = ListSequence.fromList(m.getGenericParameterTypes()).iterator();
      Iterator<String> pn_iterator = ListSequence.fromList(m.getParameterNames()).iterator();
      Iterator<List<ASMAnnotation>> pa_iterator = ListSequence.fromList(m.getParameterAnnotations()).iterator();
      while (true) {
        if (!(pt_iterator.hasNext())) {
          break;
        }
        if (!(pn_iterator.hasNext())) {
          break;
        }
        if (!(pa_iterator.hasNext())) {
          break;
        }
        pt = pt_iterator.next();
        pn = pn_iterator.next();
        pa = pa_iterator.next();
        {
          SNode pd = _quotation_createNode_ol94f8_a0a0g0g0g0z(getTypeByASMType(pt, md, cls), pn);
          addAnnotationsToParameter(pd, pa);
          ListSequence.fromList(SLinkOperations.getTargets(md, "parameter", true)).addElement(pd);
        }
      }
    }
    for (ASMType exception : m.getExceptionTypes()) {
      ListSequence.fromList(SLinkOperations.getTargets(md, "throwsItem", true)).addElement(getTypeByASMType(exception, md, cls));
    }
    for (ASMAnnotation annotation : m.getAnnotations()) {
      ListSequence.fromList(SLinkOperations.getTargets(md, "annotation", true)).addElement(createAnnotation(annotation));
    }
  }

  private boolean isGeneratedEnumMethod(ASMMethod m) {
    if (m.getName().equals("values") && m.getParameterTypes().isEmpty()) {
      return true;
    }
    if (m.getName().equals("valueOf") && m.getParameterTypes().size() == 1 && m.getParameterTypes().get(0) instanceof ASMClassType) {
      ASMClassType type = (ASMClassType) m.getParameterTypes().get(0);
      return type.getName().equals("java.lang.String");
    }
    return false;
  }

  protected SNode createVisibility(ASMMethod m) {
    if (m.isPublic()) {
      return _quotation_createNode_ol94f8_a0a0a72();
    }
    if (m.isPrivate()) {
      return _quotation_createNode_ol94f8_a0a1a72();
    }
    if (m.isProtected()) {
      return _quotation_createNode_ol94f8_a0a2a72();
    }
    return null;
  }

  protected SNode createVisibility(ASMField f) {
    if (f.isPublic()) {
      return _quotation_createNode_ol94f8_a0a0a82();
    }
    if (f.isPrivate()) {
      return _quotation_createNode_ol94f8_a0a1a82();
    }
    if (f.isProtected()) {
      return _quotation_createNode_ol94f8_a0a2a82();
    }
    return null;
  }

  private void addAnnotationsToParameter(SNode pd, List<ASMAnnotation> anns) {
    ListSequence.fromList(SLinkOperations.getTargets(pd, "annotation", true)).addSequence(ListSequence.fromList(anns).select(new ISelector<ASMAnnotation, SNode>() {
      public SNode select(ASMAnnotation it) {
        return createAnnotation(it);
      }
    }));
  }

  private SNode createAnnotation(ASMAnnotation annotation) {
    SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AnnotationInstance", null);
    ASMClassType c = (ASMClassType) annotation.getType();
    addClassifierReference(result, "annotation", c);
    Map<String, Object> values = ((Map<String, Object>) annotation.getValues());
    for (String key : MapSequence.fromMap(values).keySet()) {
      SNode value = _quotation_createNode_ol94f8_a0a0e0eb(getAnnotationValue(MapSequence.fromMap(values).get(key)));
      addAnnotationMethodReference(value, "key", c, key);
      ListSequence.fromList(SLinkOperations.getTargets(result, "value", true)).addElement(value);
    }
    return result;
  }

  private SNode getAnnotationValue(Object value) {
    if (value instanceof Integer) {
      return _quotation_createNode_ol94f8_a0a0a13(value.toString());
    }
    if (value instanceof Byte) {
      return _quotation_createNode_ol94f8_a0a1a13(value.toString());
    }
    if (value instanceof Short) {
      return _quotation_createNode_ol94f8_a0a2a13(value.toString());
    }
    if (value instanceof Boolean) {
      return _quotation_createNode_ol94f8_a0a3a13(value.toString());
    }
    if (value instanceof Character) {
      return _quotation_createNode_ol94f8_a0a4a13(value.toString());
    }
    if (value instanceof Long) {
      return _quotation_createNode_ol94f8_a0a5a13(value.toString() + "L");
    }
    if (value instanceof Float) {
      return _quotation_createNode_ol94f8_a0a6a13(value.toString());
    }
    if (value instanceof Double) {
      return _quotation_createNode_ol94f8_a0a7a13(value.toString());
    }
    if (value instanceof String) {
      return _quotation_createNode_ol94f8_a0a8a13(value.toString());
    }
    if (value instanceof ASMAnnotation) {
      return _quotation_createNode_ol94f8_a0a9a13(createAnnotation((ASMAnnotation) value));
    }
    if (value instanceof ASMPrimitiveType) {
      return _quotation_createNode_ol94f8_a0a01a13(SNodeOperations.cast(getTypeByASMType((ASMPrimitiveType) value, null, null), "jetbrains.mps.baseLanguage.structure.PrimitiveType"));
    }
    if (value instanceof List) {
      List<Object> list = (List<Object>) value;
      return _quotation_createNode_ol94f8_a1a11a13(ListSequence.fromList(list).select(new ISelector<Object, SNode>() {
        public SNode select(Object it) {
          return getAnnotationValue(it);
        }
      }).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (it != null);
        }
      }).toListSequence());
    }
    if (value instanceof ASMEnumValue) {
      ASMEnumValue enumValue = (ASMEnumValue) value;
      ASMClassType c = (ASMClassType) enumValue.getType();
      SNode res = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumConstantReference", null);
      addClassifierReference(res, "enumClass", c);
      addEnumConstReference(res, "enumConstantDeclaration", enumValue);
      return res;
    }
    if (value instanceof ASMClassType) {
      SNode res = _quotation_createNode_ol94f8_a0a0n0fb();
      addClassifierReference(res, "classifier", (ASMClassType) value);
      return res;
    }
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("couldn't create annotation value from " + ((value == null ? "" : value.getClass().getName())) + " : " + value);
    }
    return null;
  }

  private SNode getTypeByASMType(ASMType type, SNode method, SNode classifier) {
    if (type == ASMPrimitiveType.BOOLEAN) {
      return _quotation_createNode_ol94f8_a0a0a23();
    }
    if (type == ASMPrimitiveType.BYTE) {
      return _quotation_createNode_ol94f8_a0a1a23();
    }
    if (type == ASMPrimitiveType.SHORT) {
      return _quotation_createNode_ol94f8_a0a2a23();
    }
    if (type == ASMPrimitiveType.INT) {
      return _quotation_createNode_ol94f8_a0a3a23();
    }
    if (type == ASMPrimitiveType.LONG) {
      return _quotation_createNode_ol94f8_a0a4a23();
    }
    if (type == ASMPrimitiveType.FLOAT) {
      return _quotation_createNode_ol94f8_a0a5a23();
    }
    if (type == ASMPrimitiveType.DOUBLE) {
      return _quotation_createNode_ol94f8_a0a6a23();
    }
    if (type == ASMPrimitiveType.VOID) {
      return _quotation_createNode_ol94f8_a0a7a23();
    }
    if (type == ASMPrimitiveType.CHAR) {
      return _quotation_createNode_ol94f8_a0a8a23();
    }
    if (type instanceof ASMArrayType) {
      return _quotation_createNode_ol94f8_a0a9a23(getTypeByASMType(((ASMArrayType) type).getElementType(), method, classifier));
    }
    if (type instanceof ASMVarArgType) {
      return _quotation_createNode_ol94f8_a0a01a23(getTypeByASMType(((ASMVarArgType) type).getElementType(), method, classifier));
    }
    if (type instanceof ASMTypeVariable) {
      ASMTypeVariable tv = (ASMTypeVariable) type;
      if (method != null && findTypeVariableDeclaration(method, tv.getName()) != null) {
        return createTypeVariableReference(method, tv.getName());
      } else
      if (findTypeVariableDeclaration(classifier, tv.getName()) != null) {
        return createTypeVariableReference(classifier, tv.getName());
      } else {
        return getTypeByASMType(ASMClassType.OBJECT, method, classifier);
      }
    }
    if (type instanceof ASMClassType) {
      ASMClassType c = (ASMClassType) type;
      SNode classifierType = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
      addClassifierReference(classifierType, "classifier", c);
      return classifierType;
    }
    if (type instanceof ASMParameterizedType) {
      ASMParameterizedType pt = (ASMParameterizedType) type;
      SNode rawType = SNodeOperations.cast(getTypeByASMType(pt.getRawType(), method, classifier), "jetbrains.mps.baseLanguage.structure.ClassifierType");
      addTypeParameters(pt.getActualTypeArguments(), method, classifier, rawType);
      return rawType;
    }
    if (type instanceof ASMExtendsType) {
      ASMExtendsType e = (ASMExtendsType) type;
      if (e.getBound() instanceof ASMClassType) {
        ASMClassType ct = (ASMClassType) e.getBound();
        if (ct.getName().equals("java.lang.Object")) {
          return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.WildCardType", null);
        }
      }
      return _quotation_createNode_ol94f8_a2a41a23(getTypeByASMType(e.getBound(), method, classifier));
    }
    if (type instanceof ASMSuperType) {
      ASMSuperType e = (ASMSuperType) type;
      return _quotation_createNode_ol94f8_a1a51a23(getTypeByASMType(e.getBound(), method, classifier));
    }
    if (type instanceof ASMUnboundedType) {
      return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.WildCardType", null);
    }
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("Can't convert type " + type + " class : ");
    }
    return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Type", null);
  }

  private void addTypeParameters(List<? extends ASMType> typeParameters, SNode method, SNode classifier, SNode result) {
    List<SNode> toAdd = new ArrayList<SNode>();
    for (ASMType tv : typeParameters) {
      SNode type = getTypeByASMType(tv, method, classifier);
      if (type == null) {
        toAdd.clear();
        break;
      }
      toAdd.add(type);
    }
    ListSequence.fromList(SLinkOperations.getTargets(result, "parameter", true)).addSequence(ListSequence.fromList(toAdd));
  }

  private void addClassifierReference(SNode sourceNode, String role, ASMClassType clsType) {
    if (sourceNode.getReferenceTarget(role) != null) {
      return;
    }

    String pack = NodeNameUtil.getNamespace(clsType.getName());
    String resolve = NameUtil.shortNameFromLongName(clsType.getName());
    resolve = resolve.replaceAll("\\$", ".");
    SNodeId nodeId = ASMNodeId.createId(clsType.getName());
    SReference ref = myHandler.createSReference(sourceNode, pack, nodeId, role, resolve, SNodeOperations.getContainingRoot(myClassifier).getPresentation());
    sourceNode.setReference(ref.getRole(), ref);
  }

  private void addAnnotationMethodReference(SNode sourceNode, String role, ASMClassType annotationType, String method) {
    if (sourceNode.getReferenceTarget(role) != null) {
      return;
    }

    String pack = NodeNameUtil.getNamespace(annotationType.getName());
    SNodeId nodeId = ASMNodeId.createAnnotationMethodId(annotationType.getName(), method);
    String resolve = method;
    SReference ref = myHandler.createSReference(sourceNode, pack, nodeId, role, resolve, SNodeOperations.getContainingRoot(myClassifier).getPresentation());
    sourceNode.setReference(ref.getRole(), ref);
  }

  private void addEnumConstReference(SNode sourceNode, String role, ASMEnumValue enumValue) {
    if (sourceNode.getReferenceTarget(role) != null) {
      return;
    }

    ASMClassType classType = (ASMClassType) enumValue.getType();
    String pack = NodeNameUtil.getNamespace(classType.getName());
    String resolve = NameUtil.shortNameFromLongName(classType.getName());
    resolve = resolve.replaceAll("\\$", ".");
    SNodeId nodeId = ASMNodeId.createFieldId(classType.getName(), enumValue.getConstant());
    SReference ref = myHandler.createSReference(sourceNode, pack, nodeId, role, resolve, SNodeOperations.getContainingRoot(myClassifier).getPresentation());

    sourceNode.setReference(ref.getRole(), ref);
  }

  public boolean isSkipPrivate() {
    return mySkipPrivate;
  }

  protected static Logger LOG = LogManager.getLogger(ClassifierUpdater.class);

  private static SNode _quotation_createNode_ol94f8_a0a0a01() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0a0m(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "name", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0b0n(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "name", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a51(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TypeVariableReference", null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "typeVariableDeclaration", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0d0a0t(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4, Object parameter_5) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration", (SModel) parameter_1, (SNodeId) parameter_2, false);
    SNodeAccessUtil.setProperty(quotedNode_6, "name", (String) parameter_5);
    quotedNode_7 = (SNode) parameter_3;
    if (quotedNode_7 != null) {
      quotedNode_6.addChild("visibility", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_8 = (SNode) parameter_4;
    if (quotedNode_8 != null) {
      quotedNode_6.addChild("type", HUtil.copyIfNecessary(quotedNode_8));
    }
    return quotedNode_6;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0a3a0a02(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4, Object parameter_5) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration", (SModel) parameter_1, (SNodeId) parameter_2, false);
    SNodeAccessUtil.setProperty(quotedNode_6, "name", (String) parameter_5);
    quotedNode_7 = (SNode) parameter_3;
    if (quotedNode_7 != null) {
      quotedNode_6.addChild("visibility", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_8 = (SNode) parameter_4;
    if (quotedNode_8 != null) {
      quotedNode_6.addChild("type", HUtil.copyIfNecessary(quotedNode_8));
    }
    return quotedNode_6;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0b0b0d0a3a0a02(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0a1a1a3a0d0a0u(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0b0d0a0u(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration", (SModel) parameter_1, (SNodeId) parameter_2, false);
    SNodeAccessUtil.setProperty(quotedNode_4, "name", (String) parameter_3);
    return quotedNode_4;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0a0v(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration", (SModel) parameter_1, (SNodeId) parameter_2, false);
    SNodeAccessUtil.setProperty(quotedNode_5, "name", (String) parameter_4);
    quotedNode_6 = (SNode) parameter_3;
    if (quotedNode_6 != null) {
      quotedNode_5.addChild("returnType", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", (SModel) parameter_1, (SNodeId) parameter_2, false);
    quotedNode_5.addChild("visibility", quotedNode_7);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", (SModel) parameter_1, (SNodeId) parameter_2, false);
    quotedNode_5.addChild("body", quotedNode_8);
    return quotedNode_5;
  }

  private static SNode _quotation_createNode_ol94f8_a0b0a0v() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0d0a0w(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4, Object parameter_5) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration", (SModel) parameter_1, (SNodeId) parameter_2, false);
    SNodeAccessUtil.setProperty(quotedNode_6, "name", (String) parameter_5);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VoidType", (SModel) parameter_1, (SNodeId) parameter_2, false);
    quotedNode_6.addChild("returnType", quotedNode_7);
    quotedNode_8 = (SNode) parameter_3;
    if (quotedNode_8 != null) {
      quotedNode_6.addChild("visibility", HUtil.copyIfNecessary(quotedNode_8));
    }
    quotedNode_9 = (SNode) parameter_4;
    if (quotedNode_9 != null) {
      quotedNode_6.addChild("body", HUtil.copyIfNecessary(quotedNode_9));
    }
    return quotedNode_6;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0a5a0a22(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "name", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0c0g0g0g0a0w(Object parameter_1, Object parameter_2) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_3, "name", (String) parameter_2);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_3.addChild("type", HUtil.copyIfNecessary(quotedNode_4));
    }
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_ol94f8_a0b0z() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StubStatementList", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0g0g0g0z(Object parameter_1, Object parameter_2) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_3, "name", (String) parameter_2);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_3.addChild("type", HUtil.copyIfNecessary(quotedNode_4));
    }
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0a72() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a1a72() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PrivateVisibility", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a2a72() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ProtectedVisibility", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0a82() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a1a82() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PrivateVisibility", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a2a82() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ProtectedVisibility", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0e0eb(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue", null, null, false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("value", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0a13(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a1a13(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a2a13(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a3a13(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a4a13(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CharConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "charConstant", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a5a13(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LongLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a6a13(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatingPointConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a7a13(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatingPointConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a8a13(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a9a13(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = (SNode) parameter_1;
    if (quotedNode_2 != null) {
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a01a13(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression", null, null, false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("primitiveType", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a1a11a13(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayLiteral", null, null, false);
    {
      List<SNode> nodes = (List<SNode>) parameter_1;
      for (SNode child : nodes) {
        quotedNode_2.addChild("item", HUtil.copyIfNecessary(child));
      }
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0n0fb() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression", null, null, false);
    quotedNode_1.setReference("classifier", jetbrains.mps.smodel.SReference.create("classifier", quotedNode_1, facade.createModelReference("r:eafb5d8e-2952-4826-b4ad-be2b9011f598(jetbrains.mps.baseLanguage.javastub.asm)"), facade.createNodeId("7241381882860002170")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a0a23() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanType", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a1a23() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ByteType", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a2a23() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ShortType", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a3a23() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a4a23() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LongType", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a5a23() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatType", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a6a23() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DoubleType", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a7a23() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VoidType", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a8a23() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CharType", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_ol94f8_a0a9a23(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayType", null, null, false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("componentType", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a0a01a23(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableArityType", null, null, false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("componentType", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a2a41a23(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.UpperBoundType", null, null, false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("bound", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ol94f8_a1a51a23(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LowerBoundType", null, null, false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("bound", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static boolean eq_ol94f8_a0a0a0a0a0a0a41(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
