/*
 * Copyright 2003-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.baseLanguage.javastub;

/*Generated by MPS */

import jetbrains.mps.reloading.ClassBytesProvider;
import jetbrains.mps.reloading.AbstractClassPathItem;
import org.objectweb.asm.ClassReader;
import jetbrains.mps.baseLanguage.javastub.asm.ASMClass;
import jetbrains.mps.stubs.javastub.classpath.ClassifierKind;
import org.objectweb.asm.tree.InnerClassNode;
import org.objectweb.asm.Opcodes;

public class CacheClassifierLoader {
  private ClassBytesProvider myCpItem;
  private CacheClassifierUpdater myUpdater;

  public CacheClassifierLoader(ClassBytesProvider cpItem, CacheClassifierUpdater updater) {
    myCpItem = cpItem;
    myUpdater = updater;
  }

  public void getClassifier(String pack, String name) {
    if (AbstractClassPathItem.isAnonymous(name)) {
      return;
    }

    String cp = ((pack.length() == 0) ?
      "" :
      pack + "."
    );
    byte[] code = myCpItem.getClass(cp + name);
    if (code == null) {
      return;
    }
    ClassReader reader = new ClassReader(code);
    ASMClass ac = new ASMClass(reader);
    myUpdater.updateClassifier(ClassifierKind.getClassifierKind(reader), ac);
  }
}
