package jetbrains.mps.baseLanguage.javastub;

/*Generated by MPS */

import jetbrains.mps.reloading.ClassBytesProvider;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.reloading.AbstractClassPathItem;
import org.jetbrains.asm4.ClassReader;
import jetbrains.mps.baseLanguage.javastub.asm.ASMClass;
import org.jetbrains.asm4.tree.InnerClassNode;
import org.jetbrains.asm4.Opcodes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.stubs.javastub.classpath.ClassifierKind;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;

public class ClassifierLoader {
  private ClassBytesProvider myCpItem;
  private ClassifierUpdater myUpdater;

  public ClassifierLoader(ClassBytesProvider cpItem, ClassifierUpdater updater) {
    myCpItem = cpItem;
    myUpdater = updater;
  }

  public void getClassifier(String pack, String name, _FunctionTypes._void_P1_E0<? super SNode> adder) {
    if (AbstractClassPathItem.isAnonymous(name)) {
      return;
    }

    String cp = ((pack.length() == 0) ? "" : pack + ".");
    byte[] code = myCpItem.getClass(cp + name);
    if (code == null) {
      return;
    }
    ClassReader reader = new ClassReader(code);
    ASMClass ac = new ASMClass(reader);
    SNode res = createClassifierForClass(name, reader);
    adder.invoke(res);
    myUpdater.updateClassifier(res, ac);
    updateInnerClassifiers(pack, ac, res);
  }

  private void updateInnerClassifiers(String pack, ASMClass ac, final SNode cls) {
    for (InnerClassNode cn : ac.getInnerClasses()) {
      if ((cn.access & Opcodes.ACC_SYNTHETIC) != 0) {
        continue;
      }

      boolean isPrivate = (cn.access & Opcodes.ACC_PRIVATE) != 0;
      if (isPrivate && myUpdater.isSkipPrivate()) {
        continue;
      }

      String name = cn.name;
      if (name == null) {
        continue;
      }
      if (!(name.startsWith(ac.getName() + "$"))) {
        continue;
      }

      int index = name.lastIndexOf("/");
      if (index != -1) {
        name = name.substring(index + 1);
      }

      final boolean isStatic = (cn.access & Opcodes.ACC_STATIC) != 0;
      getClassifier(pack, name, new _FunctionTypes._void_P1_E0<SNode>() {
        public void invoke(SNode n) {
          SPropertyOperations.set(SNodeOperations.cast(n, "jetbrains.mps.baseLanguage.structure.Classifier"), "nonStatic", "" + (!(isStatic)));
          ListSequence.fromList(SLinkOperations.getTargets(cls, "member", true)).addElement(n);
        }
      });
    }
  }

  private SNode createClassifierForClass(String fqName, ClassReader reader) {
    SNode result = null;
    ClassifierKind kind = ClassifierKind.getClassifierKind(reader);
    if (kind == null) {
      return null;
    }
    if (kind == ClassifierKind.CLASS) {
      result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassConcept", null);
    } else if (kind == ClassifierKind.INTERFACE) {
      result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Interface", null);
    } else if (kind == ClassifierKind.ANNOTATIONS) {
      result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Annotation", null);
    } else if (kind == ClassifierKind.ENUM) {
      result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumClass", null);
    } else if (kind == ClassifierKind.UNKNOWN) {
      return null;
    }
    SPropertyOperations.set(result, "name", NameUtil.shortNameFromLongName(fqName.replace('$', '.')));
    ((jetbrains.mps.smodel.SNode) result).setId(ASMNodeId.createId(fqName));
    return result;
  }
}
