package jetbrains.mps.baseLanguage.javastub;

/*Generated by MPS */

import jetbrains.mps.reloading.ClassBytesProvider;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.reloading.AbstractClassPathItem;
import jetbrains.mps.baseLanguage.javastub.asm.ASMClass;
import org.jetbrains.asm4.ClassReader;
import org.jetbrains.asm4.tree.InnerClassNode;
import org.jetbrains.asm4.Opcodes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.stubs.javastub.classpath.ClassifierKind;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class ClassifierLoader {
  private final ClassBytesProvider myCpItem;
  private final SReferenceHandler myReferenceFactory;
  private final boolean mySkipPrivate;

  public ClassifierLoader(ClassBytesProvider cpItem, SReferenceHandler refFactory, boolean skipPrivate) {
    myCpItem = cpItem;
    myReferenceFactory = refFactory;
    mySkipPrivate = skipPrivate;
  }

  public void getClassifier(String pack, String name, _FunctionTypes._void_P1_E0<? super SNode> adder) {
    if (AbstractClassPathItem.isAnonymous(name)) {
      return;
    }

    final String fqName = ((pack.length() == 0) ? name : pack + '.' + name);
    byte[] code = myCpItem.getClass(fqName);
    if (code == null) {
      return;
    }
    ASMClass ac = new ASMClass(new ClassReader(code));
    SNode res = new ClassifierUpdater(ac, mySkipPrivate, myReferenceFactory).create(name);
    if (res != null) {
      adder.invoke(res);
      updateInnerClassifiers(pack, ac, res);
    }
  }

  private void updateInnerClassifiers(String pack, ASMClass ac, final SNode cls) {
    for (InnerClassNode cn : ac.getInnerClasses()) {
      if ((cn.access & Opcodes.ACC_SYNTHETIC) != 0) {
        continue;
      }

      boolean isPrivate = (cn.access & Opcodes.ACC_PRIVATE) != 0;
      if (isPrivate && mySkipPrivate) {
        continue;
      }

      String name = cn.name;
      if (name == null) {
        continue;
      }
      if (!(name.startsWith(ac.getName() + '$'))) {
        continue;
      }

      int index = name.lastIndexOf('/');
      if (index != -1) {
        name = name.substring(index + 1);
      }

      final boolean isStatic = (cn.access & Opcodes.ACC_STATIC) != 0;
      getClassifier(pack, name, new _FunctionTypes._void_P1_E0<SNode>() {
        public void invoke(SNode n) {
          SPropertyOperations.set(n, "nonStatic", "" + (!(isStatic)));
          ListSequence.fromList(SLinkOperations.getTargets(cls, "member", true)).addElement(n);
        }
      });
    }
  }

  private SNode createClassifierForClass(String fqName, ASMClass reader) {
    SNode result = null;
    ClassifierKind kind = reader.getClassifierKind();
    if (kind == null) {
      return null;
    }
    SNodeId nodeId = ASMNodeId.createId(fqName);
    SModel fakeModel = null;
    switch (kind) {
      case CLASS:
        SNode n = SModelOperations.createNewNode(fakeModel, nodeId, "jetbrains.mps.baseLanguage.structure.ClassConcept");
        return n;
      case INTERFACE:
        return SModelOperations.createNewNode(fakeModel, nodeId, "jetbrains.mps.baseLanguage.structure.Interface");
      case ENUM:
        return SModelOperations.createNewNode(fakeModel, nodeId, "jetbrains.mps.baseLanguage.structure.EnumClass");
      case ANNOTATIONS:
        return SModelOperations.createNewNode(fakeModel, nodeId, "jetbrains.mps.baseLanguage.structure.Annotation");
      default:
        return null;
    }
  }
}
