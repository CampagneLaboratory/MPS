package jetbrains.mps.baseLanguage.javastub;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.baseLanguage.javastub.asm.ASMClass;
import org.jetbrains.org.objectweb.asm.ClassReader;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.ArrayList;
import org.jetbrains.org.objectweb.asm.tree.InnerClassNode;
import org.jetbrains.org.objectweb.asm.Opcodes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.InputStream;
import jetbrains.mps.util.ReadUtil;
import java.io.IOException;

public class ClassifierLoader {
  private final SReferenceHandler myReferenceFactory;
  private final boolean mySkipPrivate;
  public ClassifierLoader(SReferenceHandler refFactory, boolean skipPrivate) {
    myReferenceFactory = refFactory;
    mySkipPrivate = skipPrivate;
  }
  public SNode getClassifier(IFile file) {
    byte[] code = readClass(file);
    if (code == null) {
      return null;
    }
    ASMClass ac = new ASMClass(new ClassReader(code));
    SNode res = new ClassifierUpdater(ac, mySkipPrivate, myReferenceFactory).create(getClassName(file));
    if (res != null && !(ac.getInnerClasses().isEmpty())) {
      List<SNode> innerClassifiers = updateInnerClassifiers(file, ac);
      ListSequence.fromList(SLinkOperations.getChildren(res, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).addSequence(ListSequence.fromList(innerClassifiers));
    }
    return res;
  }
  private List<SNode> updateInnerClassifiers(IFile file, ASMClass ac) {
    List<SNode> rv = ListSequence.fromList(new ArrayList<SNode>());
    String outerName = ac.getName();
    IFile parent = file.getParent();
    for (InnerClassNode cn : ac.getInnerClasses()) {
      String name = cn.name;
      if (name == null) {
        // I doubt this could ever happen 
        continue;
      }
      if (cn.innerName == null) {
        // JVM spec, 4.7.6, inner_name_index - anonymous classes have no inner name 
        continue;
      }
      if ((cn.access & Opcodes.ACC_SYNTHETIC) != 0) {
        continue;
      }

      boolean isPrivate = (cn.access & Opcodes.ACC_PRIVATE) != 0;
      if (isPrivate && mySkipPrivate) {
        continue;
      }

      if (!(outerName.equals(cn.outerName))) {
        continue;
      }

      int index = name.lastIndexOf('/');
      if (index != -1) {
        name = name.substring(index + 1);
      }

      boolean isStatic = (cn.access & Opcodes.ACC_STATIC) != 0;

      SNode inner = getClassifier(parent.getDescendant(name + ".class"));
      SPropertyOperations.set(inner, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x73c6d8a8c021f99L, "nonStatic"), "" + (!(isStatic)));
      ListSequence.fromList(rv).addElement(inner);
    }
    return rv;
  }

  public byte[] readClass(IFile file) {
    try {
      byte[] result = null;
      InputStream inp = null;
      try {
        inp = file.openInputStream();
        result = ReadUtil.read(inp);
      } finally {
        if (inp != null) {
          inp.close();
        }
      }
      return result;
    } catch (IOException e) {
      return null;
    }
  }

  public static String getClassName(IFile file) {
    String name = file.getName();
    return name.substring(0, name.indexOf("."));
  }
}
