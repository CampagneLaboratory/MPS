package jetbrains.mps.baseLanguage.javastub;

/*Generated by MPS */

import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModel;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeId;
import java.util.Set;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.DynamicReference;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.project.StubModelsResolver;

public class SReferenceCreator implements SReferenceHandler {
  private IModule module;
  private SModel model;

  public SReferenceCreator(IModule module, SModel model) {
    this.module = module;
    this.model = model;
  }

  public SReference createSReference(SNode source, String pack, SNodeId targetNodeId, String role, String resolveInfo, String rootPresentation) {
    if (pack.equals(model.getLongName())) {
      SNode nodeInSameModel = model.getNodeById(targetNodeId);
      if (nodeInSameModel != null) {
        return jetbrains.mps.smodel.SReference.create(role, source, model.getSModelReference(), targetNodeId, resolveInfo);
      }
    }

    Set<SModelReference> models = getModelReferencesFor(pack, rootPresentation);

    if (SetSequence.fromSet(models).isEmpty()) {
      return jetbrains.mps.smodel.SReference.create(role, source, null, targetNodeId, resolveInfo);
    }

    if (SetSequence.fromSet(models).count() > 1) {
      for (SModelReference m : models) {
        model.addModelImport(m, false);
      }
      return new DynamicReference(role, source, new SModelReference(pack, model.getStereotype()), resolveInfo);
    }

    ModuleReference moduleRef = SModelRepository.getInstance().getModelDescriptor(SetSequence.fromSet(models).first()).getModule().getModuleReference();
    SModelReference ref = StubHelper.uidForPackageInStubs(new SModelFqName(pack, model.getStereotype()), moduleRef, false);
    model.addModelImport(SetSequence.fromSet(models).first(), false);
    return jetbrains.mps.smodel.SReference.create(role, source, ref, targetNodeId, resolveInfo);
  }

  private Set<SModelReference> getModelReferencesFor(String pack, String rootPresentation) {
    return StubModelsResolver.getInstance().resolveModel(module, new SModelFqName(pack, model.getStereotype()), null);
  }
}
