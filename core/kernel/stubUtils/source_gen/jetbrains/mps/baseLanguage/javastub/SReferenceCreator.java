package jetbrains.mps.baseLanguage.javastub;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.DynamicReference;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import jetbrains.mps.project.AuxilaryRuntimeModel;
import jetbrains.mps.project.StubModelsResolver;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.MPSCore;

public class SReferenceCreator implements SReferenceHandler {
  private static Set<Tuples._2<String, String>> reported = SetSequence.fromSet(new HashSet<Tuples._2<String, String>>());
  protected static Log log = LogFactory.getLog(SReferenceCreator.class);

  private IModule module;
  private SModel model;

  public SReferenceCreator(IModule module, SModel model) {
    this.module = module;
    this.model = model;
  }

  public SReference createSReference(SNode source, SNodeId targetNodeId, String role, String resolveInfo, String rootPresentation) {
    if (model.getLongName().equals(model.getLongName())) {
      SNode nodeInSameModel = model.getNodeById(targetNodeId);
      if (nodeInSameModel != null) {
        return SReference.create(role, source, model.getSModelReference(), targetNodeId, resolveInfo);
      }
    }

    Set<SModelReference> models = getModelReferencesFor(rootPresentation);

    if (SetSequence.fromSet(models).isEmpty()) {
      return SReference.create(role, source, null, targetNodeId, resolveInfo);
    }

    if (SetSequence.fromSet(models).count() > 1) {
      for (SModelReference model : models) {
        SNodeOperations.getModel(source).addModelImport(model, false);
      }
      return new DynamicReference(role, source, model.getSModelReference(), resolveInfo);
    }

    ModuleReference moduleRef = SModelRepository.getInstance().getModelDescriptor(SetSequence.fromSet(models).first()).getModule().getModuleReference();
    SModelReference ref = StubHelper.uidForPackageInStubs(this.model.getSModelFqName(), moduleRef, false);
    assert !(AuxilaryRuntimeModel.isAuxModel(SNodeOperations.getModel(source)));
    SNodeOperations.getModel(source).addModelImport(SetSequence.fromSet(models).first(), false);
    return SReference.create(role, source, ref, targetNodeId, resolveInfo);
  }

  private Set<SModelReference> getModelReferencesFor(String rootPresentation) {
    Set<SModelReference> models = StubModelsResolver.getInstance().resolveModel(module, model.getSModelFqName(), null);

    if (SetSequence.fromSet(models).isEmpty()) {
      String moduleName = module.getModuleFqName();
      Tuples._2<String, String> p = MultiTuple.<String,String>from(model.getLongName(), moduleName);
      if (!(SetSequence.fromSet(reported).contains(p))) {
        SetSequence.fromSet(reported).addElement(p);
        if (!(MPSCore.getInstance().isTestMode())) {
          if (log.isWarnEnabled()) {
            log.warn("no module found for: " + model.getLongName() + " in " + moduleName + "(referenced from " + model.getLongName() + "/" + rootPresentation + ")");
          }
        }
      }
    }
    return models;
  }
}
