package jetbrains.mps.baseLanguage.javastub;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeId;
import java.util.Collection;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.SModelLegacy;
import jetbrains.mps.smodel.DynamicReference;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;

public class SReferenceCreator implements SReferenceHandler {
  private final StubModelsResolver myModuleDeps;
  private final SModel model;
  private final String modelLongName;
  public SReferenceCreator(SModule module, SModel model) {
    myModuleDeps = new StubModelsResolver(module);
    this.model = model;
    modelLongName = NameUtil.getModelLongName(model.getReference().getModelName());
  }
  @Override
  public SReference createSReference(SNode source, String pack, SNodeId targetNodeId, String role, String resolveInfo, String rootPresentation) {
    if (pack.equals(modelLongName)) {
      SNode nodeInSameModel = model.getNode(targetNodeId);
      if (nodeInSameModel != null) {
        return jetbrains.mps.smodel.SReference.create(role, source, model.getReference(), targetNodeId, resolveInfo);
      }
    }

    Collection<org.jetbrains.mps.openapi.model.SModel> possibleModels = myModuleDeps.resolveModel(
        SModelStereotype.withStereotype(pack, SModelStereotype.JAVA_STUB));

    if (possibleModels.isEmpty()) {
      return jetbrains.mps.smodel.SReference.create(role, source, null, targetNodeId, resolveInfo);
    }

    for (org.jetbrains.mps.openapi.model.SModel m : possibleModels) {
      if (m == model) {
        continue;
      }
      new SModelLegacy(model).addModelImport(m.getReference(), false);
    }

    if (possibleModels.size() > 1) {
      return DynamicReference.createDynamicReference(role, source, pack, resolveInfo);
    }

    // only one possible model 
    org.jetbrains.mps.openapi.model.SModel targetModel = possibleModels.iterator().next();
    SModuleReference targetModule = targetModel.getModule().getModuleReference();
    // FIXME first we look up a model with JAVA_STUB stereotype, then we construct a model reference using StubHelper and implicit JAVA_STUB. What for? 
    SModelReference targetModelStubReference = StubHelper.uidForPackageInStubs(targetModule, pack);

    return jetbrains.mps.smodel.SReference.create(role, source, targetModelStubReference, targetNodeId, resolveInfo);
  }
}
