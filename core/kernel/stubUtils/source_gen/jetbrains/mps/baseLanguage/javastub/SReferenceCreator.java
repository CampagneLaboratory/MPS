package jetbrains.mps.baseLanguage.javastub;

/*Generated by MPS */

import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.LanguageID;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeId;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.project.StubModelsResolver;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.DynamicReference;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.smodel.SModelRepository;

public class SReferenceCreator implements SReferenceHandler {
  private static final String JAVA_STUB_STEREOTYPE = SModelStereotype.getStubStereotypeForId(LanguageID.JAVA);
  private final SModule module;
  private final SModel model;
  private final String modelLongName;

  public SReferenceCreator(SModule module, SModel model) {
    this.module = module;
    this.model = model;
    modelLongName = NameUtil.getModelLongName(model.getReference().getModelName());
  }

  @Override
  public SReference createSReference(SNode source, String pack, SNodeId targetNodeId, String role, String resolveInfo, String rootPresentation) {
    if (pack.equals(modelLongName)) {
      SNode nodeInSameModel = model.getNode(targetNodeId);
      if (nodeInSameModel != null) {
        return jetbrains.mps.smodel.SReference.create(role, source, model.getReference(), targetNodeId, resolveInfo);
      }
    }

    Set<SModelReference> possibleModels = StubModelsResolver.getInstance().resolveModel(module, new SModelFqName(pack, JAVA_STUB_STEREOTYPE).toString(), null);

    SModelReference modelRef = StubHelper.uidForPackageInStubs(module.getModuleReference(), pack);

    if (SetSequence.fromSet(possibleModels).isEmpty()) {
      return jetbrains.mps.smodel.SReference.create(role, source, modelRef, targetNodeId, resolveInfo);
    }

    for (SModelReference m : possibleModels) {
      (model).addModelImport(m, false);
    }

    if (SetSequence.fromSet(possibleModels).count() > 1) {
      return new DynamicReference(role, source, modelRef, resolveInfo);
    }

    // only one possible model 
    SModelReference targetModel = SetSequence.fromSet(possibleModels).first();
    SModuleReference targetModule = SModelRepository.getInstance().getModelDescriptor(targetModel).getModule().getModuleReference();

    SModelReference targetModelStubReference = StubHelper.uidForPackageInStubs(targetModule, pack);

    return jetbrains.mps.smodel.SReference.create(role, source, targetModelStubReference, targetNodeId, resolveInfo);
  }
}
