<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<components xmlns:xi="http://www.w3.org/2001/XInclude"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.w3.org/2001/XInclude
   http://www.w3.org/2001/XInclude.xsd">

    <application-components>
        <component>
            <implementation-class>com.intellij.openapi.components.impl.ServiceManagerImpl</implementation-class>
        </component>
        <component>
            <interface-class>com.intellij.openapi.project.impl.ProjectStoreClassProvider</interface-class>
            <implementation-class>com.intellij.openapi.components.impl.stores.PlatformProjectStoreClassProvider
            </implementation-class>
        </component>
        <component>
            <interface-class>com.intellij.openapi.project.ProjectManager</interface-class>
            <implementation-class>com.intellij.openapi.project.impl.ProjectManagerImpl</implementation-class>
        </component>
        <component>
            <interface-class>com.intellij.psi.statistics.StatisticsManager</interface-class>
            <implementation-class>com.intellij.psi.statistics.impl.StatisticsManagerImpl</implementation-class>
        </component>
        <component>
            <interface-class>com.intellij.find.FindSettings</interface-class>
            <implementation-class>com.intellij.find.impl.FindSettingsImpl</implementation-class>
        </component>

        <component>
            <implementation-class>com.intellij.util.indexing.FileBasedIndex</implementation-class>
        </component>

        <component>
            <interface-class>com.intellij.psi.impl.PsiManagerConfiguration</interface-class>
            <implementation-class>com.intellij.psi.impl.PsiManagerConfiguration</implementation-class>
        </component>
    </application-components>

    <project-components>
        <component>
            <implementation-class>com.intellij.openapi.components.impl.ServiceManagerImpl</implementation-class>
        </component>
        <component>
            <interface-class>com.intellij.openapi.vcs.impl.VcsPathPresenter</interface-class>
            <implementation-class>jetbrains.mps.vcs.ModuleVcsPathPresenter</implementation-class>
        </component>
        <component>
            <implementation-class>jetbrains.mps.vcs.MPSVCSManager</implementation-class>
        </component>
        <component>
            <implementation-class>jetbrains.mps.vcs.VcsRootsManager</implementation-class>
        </component>
        <component>
            <implementation-class>jetbrains.mps.workbench.dialogs.project.properties.project.ProjectPropertiesPerfsPage
            </implementation-class>
        </component>
        <component>
            <implementation-class>jetbrains.mps.vcs.ui.ChangesNotificator</implementation-class>
        </component>
        <component>
            <interface-class>com.intellij.codeInsight.highlighting.HighlightManager</interface-class>
            <implementation-class>com.intellij.codeInsight.highlighting.HighlightManagerImpl</implementation-class>
            <skipForDummyProject/>
        </component>
    </project-components>

    <application-components>
        <component>
            <implementation-class>jetbrains.mps.vcs.ExcludedFileIndexApplicationComponent</implementation-class>
        </component>
        <component>
            <implementation-class>jetbrains.mps.vcs.GlobalClassPathIndex</implementation-class>
        </component>
        <component>
            <implementation-class>jetbrains.mps.vcs.SuspiciousModelIndex</implementation-class>
        </component>
    </application-components>

    <xi:include href="/componentSets/Platform.xml" xpointer="xpointer(/components/*)"/>
    <xi:include href="/componentSets/UICore.xml" xpointer="xpointer(/components/*)"/>
    <xi:include href="/componentSets/WindowManagement.xml" xpointer="xpointer(/components/*)"/>
    <xi:include href="/componentSets/Editor.xml" xpointer="xpointer(/components/*)"/>
    <xi:include href="/componentSets/VCS.xml" xpointer="xpointer(/components/*)"/>
    <xi:include href="/componentSets/Execution.xml" xpointer="xpointer(/components/*)"/>    

    <application-components>
        <component>
            <interface-class>com.intellij.openapi.fileEditor.impl.text.TextEditorProvider</interface-class>
            <implementation-class>com.intellij.openapi.fileEditor.impl.text.TextEditorProvider</implementation-class>
        </component>

        <component>
            <interface-class>com.intellij.ide.util.ModuleRendererFactory</interface-class>
            <implementation-class>com.intellij.ide.util.PlatformModuleRendererFactory</implementation-class>
        </component>

        <component>
            <implementation-class>com.intellij.platform.PlatformProjectStarter</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.smodel.SModelRepository</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.smodel.MPSModuleRepository</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.smodel.constraints.ModelConstraintsManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.reloading.ClassLoaderManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.library.LibraryManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.smodel.GarbageCollector</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.smodel.SModelUtil_new</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.cache.CachesManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.smodel.GlobalSModelEventsManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.smodel.CommandEventsManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.project.MPSProjects</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.smodel.behaviour.BehaviorManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.project.AuxilaryRuntimeModel</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.nodeEditor.LanguagesKeymapManager</implementation-class>
        </component>

        <component>
            <interface-class>jetbrains.mps.findUsages.FindUsagesManager</interface-class>
            <implementation-class>jetbrains.mps.findUsages.ProxyFindUsagesManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.workbench.actions.goTo.index.GoToRootNodeSettings</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.intentions.IntentionsManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.datatransfer.PasteWrappersManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.lang.dataFlow.DataFlowManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.findusages.FindersManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.findusages.UsagesViewTracker</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.messages.NavigationManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.util.QueryMethodGenerated</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.dialogs.DialogDimensionsSettings</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.progress.TaskProgressSettings</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.nodeEditor.CaretBlinker</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.nodeEditor.EditorSettings</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.nodeEditor.EditorsFinderManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.generator.ModelGenerationStatusManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.smodel.BackgroundModelLoader</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.typesystem.inference.TypeChecker</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.typesystem.inference.NodeTypesComponentsRepository
            </implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.typesystem.integration.TypesystemPreferencesComponent
            </implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.MPSAdapter</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.workbench.nodesFs.MPSNodesVirtualFileSystem</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.workbench.languagesFs.MPSLanguagesVirtualFileSystem
            </implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.workbench.editors.MPSFileNodeEditorProvider</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.workbench.editors.MPSLanguageEditorProvider</implementation-class>
        </component>

        <component>
            <interface-class>com.intellij.ide.RecentProjectsManagerBase</interface-class>
            <implementation-class>jetbrains.mps.workbench.recent.RecentMPSProjectsManager</implementation-class>
        </component>

        <component>
            <interface-class>com.intellij.ide.IconProvider</interface-class>
            <implementation-class>jetbrains.mps.workbench.editors.MPSIconProvider</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.lang.generator.plugin.RootTemplateAnnotator</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.cleanup.CleanupManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.watching.ModelChangesWatcher</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.fileTypes.MPSFileTypesManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.plugins.applicationplugins.ApplicationPluginManager
            </implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.vcs.ApplicationLevelVcsManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.blame.dialog.BlameDialogComponent</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.smodel.LanguageHierarchyCache</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.generator.GenerationSettings</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.build.SamplesExtractor</implementation-class>
        </component>
    </application-components>

    <project-components>
        <component>
            <interface-class>com.intellij.openapi.fileEditor.FileEditorManager</interface-class>
            <implementation-class>com.intellij.openapi.fileEditor.impl.FileEditorManagerImpl</implementation-class>
            <headless-implementation-class>com.intellij.testFramework.TestEditorManagerImpl
            </headless-implementation-class>
            <option name="workspace" value="true"/>
            <skipForDummyProject/>
        </component>

        <component>
            <interface-class>com.intellij.history.LocalHistory</interface-class>
            <implementation-class>com.intellij.history.DeafLocalHistory</implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <interface-class>com.intellij.packageDependencies.DependencyValidationManager</interface-class>
            <implementation-class>com.intellij.packageDependencies.DependencyValidationManagerImpl
            </implementation-class>
        </component>


        <component>
            <implementation-class>com.intellij.platform.PlatformVcsDetector</implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <interface-class>com.intellij.psi.search.scope.packageSet.NamedScopeManager</interface-class>
            <implementation-class>com.intellij.psi.search.scope.packageSet.NamedScopeManager</implementation-class>
        </component>

        <component>
            <interface-class>com.intellij.psi.PsiManager</interface-class>
            <implementation-class>jetbrains.mps.workbench.psi.NullPsiManager</implementation-class>
        </component>

        <component>
            <interface-class>com.intellij.psi.PsiDocumentManager</interface-class>
            <implementation-class>jetbrains.mps.workbench.psi.NullPsiDocumentManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.findusages.view.optionseditor.DefaultSearchOptionsComponent
            </implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.findusages.view.UsagesViewTool</implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.messages.MessagesViewTool</implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.workbench.output.OutputViewTool</implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.classpath.ClassPathViewerTool</implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.lang.generator.plugin.debug.GenerationTracerViewTool
            </implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.hierarchy.HierarchyViewTool</implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.nodeEditor.bookmark.BookmarksTool</implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.refactoring.NewRefactoringView</implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.hierarchy.BaseLanguageHierarchyViewTool</implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.typesystem.uiActions.SupertypesViewTool</implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.typesystem.uiActions.TypecheckerStateView</implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.MPSProjectHolder</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.library.ProjectLibraryManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.workbench.editors.MPSEditorOpener</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.nodeEditor.bookmark.BookmarkManager</implementation-class>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.generator.GeneratorManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.nodeEditor.Highlighter</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.lang.generator.plugin.debug.GenerationTracer</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.nodeEditor.EditorManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.generator.TransientModelsModule</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.plugins.projectplugins.FileGeneratorManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.plugins.projectplugins.ProjectPluginManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.runconfigs.RunConfigInitializer</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.runconfigs.RunConfigManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.plugin.MPSProjectIDEHandler</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.workbench.editors.MPSEditorWarningsManager</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.lang.script.plugin.migrationtool.MigrationScriptsTool
            </implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.dependency.DependencyViewer</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.nodeEditor.cellExplorer.CellExplorerView</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.workbench.search.SearchHistoryComponent</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.nodeEditor.InspectorTool</implementation-class>
        </component>

        <!--project view tool-->
        <component>
            <interface-class>com.intellij.ide.projectView.ProjectView</interface-class>
            <implementation-class>com.intellij.ide.projectView.impl.ProjectViewImpl</implementation-class>
            <option name="workspace" value="true"/>
            <skipForDummyProject/>
        </component>

        <!--project view tool tabs-->

        <component>
            <implementation-class>jetbrains.mps.ide.projectPane.ProjectPane</implementation-class>
            <option name="workspace" value="true"/>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.projectPane.fileSystem.BaseDirectoryProjectView
            </implementation-class>
            <option name="workspace" value="true"/>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.ide.projectPane.fileSystem.VCSRootsProjectView</implementation-class>
            <option name="workspace" value="true"/>
            <skipForDummyProject/>
        </component>

        <component>
            <implementation-class>jetbrains.mps.plugin.PluginStateMonitor</implementation-class>
        </component>

        <component>
            <implementation-class>com.intellij.util.indexing.FileBasedIndexProjectHandler</implementation-class>
        </component>

        <component>
            <interface-class>com.intellij.openapi.roots.impl.DirectoryIndex</interface-class>
            <implementation-class>com.intellij.openapi.roots.impl.DirectoryIndexImpl</implementation-class>
        </component>

        <component>
            <interface-class>com.intellij.openapi.roots.ProjectRootManager</interface-class>
            <implementation-class>com.intellij.openapi.roots.impl.ProjectRootManagerImpl</implementation-class>
        </component>

        <component>
            <interface-class>com.intellij.openapi.module.ModuleManager</interface-class>
            <implementation-class>com.intellij.openapi.module.impl.ModuleManagerImpl</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.findUsages.caches.MPSFileBasedIndexProjectHandler</implementation-class>
        </component>

        <component>
            <implementation-class>jetbrains.mps.make.StartupModuleMaker</implementation-class>
        </component>
    </project-components>


</components>
