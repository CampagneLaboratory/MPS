/*
 * Copyright 2003-2010 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.baseLanguage.stubs.util;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import jetbrains.mps.project.IModule;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.project.StubPath;
import jetbrains.mps.smodel.LanguageID;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.vfs.IFile;

import java.util.Collection;

public class ASMModelLoader {
  private static final Logger LOG = Logger.getLogger(ASMModelLoader.class);

  private final IFile myClassDir;
  private final SModel myModel;
  private final IModule myModule;
  private final boolean mySkipPrivate;
  private final String myLanguageId;

  public ASMModelLoader(IModule module, IFile classDir, SModel model) {
    // during fix of MPS-10626 would be changed to true 
    // but do not touch it before that 
    this(module, classDir, model, LanguageID.JAVA, false);
  }

  public ASMModelLoader(IModule module, IFile classDir, SModel model, String languageId, boolean skipPrivate) {
    assert classDir.getPath().replace('/','.').replace('\\','.').endsWith(model.getLongName()); //this can be removed later
    myModule = module;
    myClassDir = classDir;
    myModel = model;
    myLanguageId = languageId;
    mySkipPrivate = skipPrivate;
  }

  public void updateModel() {
    try {
      ClassifierLoader loader = new ClassifierLoader(myModule, myModel, myClassDir, new ClassifierUpdater(myLanguageId, mySkipPrivate));
      for (IFile file : myClassDir.getChildren()) {
        String filename = file.getName();
        if (!filename.endsWith(MPSExtentions.DOT_CLASSFILE)) continue;

        String name = myModel.getLongName()+'.'+ filename.substring(0, filename.length()-MPSExtentions.DOT_CLASSFILE.length());
        if (myModel.getNodeById(ASMNodeId.createId(name)) != null) continue;

        loader.loadRootClassifier(name);
      }
    } catch (Exception e) {
      LOG.error("Exception", e);
    }
  }
}
