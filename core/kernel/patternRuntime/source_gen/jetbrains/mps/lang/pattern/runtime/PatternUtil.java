package jetbrains.mps.lang.pattern.runtime;

/*Generated by MPS */

import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;
import java.util.Iterator;

public class PatternUtil {
  public PatternUtil() {
  }

  public static boolean matchReferentWithNode(SNodePointer pointer, SNode node) {
    if (pointer == null || node == null || node.getModel() == null) {
      return false;
    }
    SModelReference sModelReference1 = pointer.getModelReference();
    SModelReference sModelReference2 = node.getModel().getSModelReference();
    if (sModelReference1 == null || sModelReference2 == null || !(sModelReference1.equals(sModelReference2))) {
      return false;
    }
    SNodeId id1 = pointer.getNodeId();
    SNodeId id2 = node.getNodeId();
    if (id1 == null || id2 == null || !(id1.equals(id2))) {
      return false;
    }
    return true;
  }

  public static boolean hasNChildren(org.jetbrains.mps.openapi.model.SNode parent, String role, int num) {
    Iterator<? extends org.jetbrains.mps.openapi.model.SNode> it = parent.getChildren(role).iterator();
    for (int i = 0; i < num; i++) {
      if (!(it.hasNext())) {
        return false;
      }
      it.next();
    }
    return !(it.hasNext());
  }
}
