package jetbrains.mps.lang.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.framework.StructuralProgramBuilder;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;
import jetbrains.mps.lang.dataFlow.framework.instructions.EndTryInstruction;

public class MPSProgramBuilder extends StructuralProgramBuilder<SNode> {
  private DataFlowManager myDataFlowManager;
  private boolean myMayBeUnreachable = false;
  public MPSProgramBuilder(DataFlowManager dataFlowManager) {
    this.myDataFlowManager = dataFlowManager;
  }
  @Override
  protected void doBuild(SNode node) {
    if (node == null) {
      return;
    }
    SNode snode = node;
    for (SAbstractConcept concept : SConceptOperations.getAllSuperConcepts(SNodeOperations.getConcept(snode), true)) {
      DataFlowBuilder builder = this.myDataFlowManager.getBuilderFor(concept.getQualifiedName());
      if (builder != null) {
        builder.build(null, new DataFlowBuilderContext(snode, MPSProgramBuilder.this));
        break;
      }
    }
  }
  public void emitMayBeUnreachable(Runnable r) {
    boolean oldMayBeUnreachable = this.myMayBeUnreachable;
    this.myMayBeUnreachable = true;
    try {
      r.run();
    } finally {
      this.myMayBeUnreachable = oldMayBeUnreachable;
    }
  }
  @Override
  protected void onInstructionEmitted(Instruction instruction) {
    super.onInstructionEmitted(instruction);
    if (this.myMayBeUnreachable || instruction instanceof EndTryInstruction) {
      instruction.putUserObject(DataFlow.MAY_BE_UNREACHABLE, true);
    }
  }
}
