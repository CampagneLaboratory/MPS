package jetbrains.mps.debug;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jdom.Element;
import org.jdom.DataConversionException;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;

public class ScopePositionInfo extends PositionInfo {
  private static String VAR_INFO = "varInfo";

  private Map<String, VarInfo> myVars = MapSequence.fromMap(new HashMap<String, VarInfo>());

  public ScopePositionInfo() {
  }

  public ScopePositionInfo(Element element) throws DataConversionException {
    super(element);
    for (Object varInfoElement_ : element.getChildren(VAR_INFO)) {
      Element varInfoElement = (Element) varInfoElement_;
      VarInfo varInfo = new VarInfo(varInfoElement);
      MapSequence.fromMap(this.myVars).put(varInfo.getVarName(), varInfo);
    }
  }

  @Override
  public void saveTo(Element element) {
    super.saveTo(element);
    for (VarInfo varInfo : MapSequence.fromMap(this.myVars).values()) {
      Element child = new Element(VAR_INFO);
      varInfo.saveTo(child);
      element.addContent(child);
    }
  }

  public SNode getVarNode(String varName, SModel model) {
    VarInfo varInfo = MapSequence.fromMap(this.myVars).get(varName);
    if (varInfo == null) {
      return null;
    }
    return model.getNodeById(varInfo.getNodeId());
  }

  public void addVarInfo(SNode node) {
    VarInfo varInfo = new VarInfo();
    varInfo.setNodeId(node.getId());
    varInfo.setVarName(node.getName());
    MapSequence.fromMap(this.myVars).put(varInfo.getVarName(), varInfo);
  }
}
