package jetbrains.mps.debug;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.TreeSet;
import jetbrains.mps.smodel.SModel;
import org.jdom.Element;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import org.apache.commons.lang.ObjectUtils;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jdom.DataConversionException;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.smodel.SModelDescriptor;
import java.io.File;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class DebugInfo {
  private static final String DEBUG_INFO = "debugInfo";
  private static final String NODE_INFO = "nodeInfo";
  private static Logger LOG = Logger.getLogger(DebugInfo.class);

  private Set<PositionInfo> myPositions = SetSequence.fromSet(new TreeSet<PositionInfo>());
  private SModel myModel;

  public DebugInfo() {
  }

  public void addPosition(PositionInfo position) {
    SetSequence.fromSet(this.myPositions).addElement(position);
  }

  public Element toXml() {
    Element root = new Element(DEBUG_INFO);
    for (PositionInfo position : this.myPositions) {
      Element e = new Element(NODE_INFO);
      position.saveTo(e);
      root.addContent(e);
    }
    return root;
  }

  public List<SNode> getNodesForLine(String str, SModel model) {
    List<SNode> result = new ArrayList<SNode>();
    for (PositionInfo element : this.myPositions) {
      if (ObjectUtils.equals(element.getFileAndLine(), str)) {
        String nodeId = element.getNodeId();
        SNode node = model.getNodeById(nodeId);
        ListSequence.fromList(result).addElement(node);
      }
    }
    return result;
  }

  public SNode getNodeForLine(String file, int line, SModel model) {
    List<PositionInfo> resultList = ListSequence.fromList(new ArrayList<PositionInfo>());
    for (PositionInfo element : this.myPositions) {
      if (ObjectUtils.equals(element.getFileName(), file) && element.getStartLine() <= line && line <= element.getEndLine()) {
        ListSequence.fromList(resultList).addElement(element);
      }
    }
    if (ListSequence.fromList(resultList).isEmpty()) {
      return null;
    }
    resultList = ListSequence.fromList(resultList).sort(new ISelector<PositionInfo, Comparable<?>>() {
      public Comparable<?> select(PositionInfo it) {
        return it;
      }
    }, false).toListSequence();
    Iterable<PositionInfo> sorted = ListSequence.fromList(resultList).sort(new ISelector<PositionInfo, Comparable<?>>() {
      public Comparable<?> select(PositionInfo it) {
        return it.getEndLine() - it.getStartLine();
      }
    }, true);
    String nodeId = Sequence.fromIterable(sorted).first().getNodeId();
    return model.getNodeById(nodeId);
  }

  public PositionInfo getPositionForNode(String nodeId) {
    for (PositionInfo positionInfo : this.myPositions) {
      if (ObjectUtils.equals(positionInfo.getNodeId(), nodeId)) {
        return positionInfo;
      }
    }
    return null;
  }

  public SModel getModel() {
    return this.myModel;
  }

  public void setModel(SModel model) {
    this.myModel = model;
  }

  public static DebugInfo fromXml(Element element) {
    Element root = element;
    DebugInfo result = new DebugInfo();
    try {
      for (Element e : ((List<Element>)root.getChildren(NODE_INFO))) {
        result.addPosition(new PositionInfo(e));
      }
    } catch (DataConversionException e) {
      throw new RuntimeException(e);
    }
    return result;
  }

  public static IFile getDebugFileOfModel(String outputDir, SModelDescriptor model) {
    String modelName = model.getLongName().replace(".", File.separator);
    String debugPath = modelName.substring(0, modelName.length()) + File.separator + ".debug";
    return FileSystem.getFile(outputDir + File.separator + debugPath);
  }

  public static boolean isNodeSutable(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Statement") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.FieldDeclaration") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
  }
}
