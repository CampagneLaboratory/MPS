package jetbrains.mps.make.runtime.internal;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import java.util.Map;
import jetbrains.mps.make.runtime.IFacet;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Set;
import jetbrains.mps.make.runtime.ITarget;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.make.runtime.resources.ResourcePool;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Collections;

public class ScriptBuilder {
  private static Logger LOG = Logger.getLogger(ScriptBuilder.class);

  private Map<IFacet.Name, IFacet> facetsView = MapSequence.fromMap(new HashMap<IFacet.Name, IFacet>());
  private Set<ITarget.Name> targets = SetSequence.fromSet(new HashSet<ITarget.Name>());
  private ITarget.Name defaultTarget;
  private ResourcePool pool;

  public ScriptBuilder() {
  }

  public ScriptBuilder withFacets(Iterable<IFacet.Name> facetNames) {
    for (IFacet.Name fn : Sequence.fromIterable(facetNames)) {
      IFacet fct = FacetRegistry.getInstance().lookup(fn);
      if (fct != null) {
        MapSequence.fromMap(facetsView).put(fn, fct);
      } else {
        LOG.error("facet not found: " + fn);
      }
    }
    return this;
  }

  public ScriptBuilder withTarget(ITarget.Name targetName) {
    SetSequence.fromSet(targets).addElement(targetName);
    return this;
  }

  public ScriptBuilder withDefault(ITarget.Name targetName) {
    SetSequence.fromSet(targets).addElement(targetName);
    this.defaultTarget = targetName;
    return this;
  }

  public ScriptBuilder withResourcePool(ResourcePool pool) {
    this.pool = pool;
    return this;
  }

  public Script toScript() {
    List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
    Map<ITarget.Name, ITarget> targetsMap = MapSequence.fromMap(new HashMap<ITarget.Name, ITarget>());
    Map<IFacet.Name, IFacet> fview = Collections.unmodifiableMap(facetsView);
    Map<IFacet.Name, IFacet> required = MapSequence.fromMap(new HashMap<IFacet.Name, IFacet>());
    Map<IFacet.Name, IFacet> optional = MapSequence.fromMap(new HashMap<IFacet.Name, IFacet>());
    for (IFacet fct : Sequence.fromIterable(MapSequence.fromMap(fview).values())) {
      this.collectRequired(fct.extended(), required);
      this.collectRequired(fct.required(), required);
      this.collectOptional(fct.optional(), optional);
      for (ITarget trg : Sequence.fromIterable(fct.targets(fview))) {
        if (MapSequence.fromMap(targetsMap).containsKey(trg.getName())) {
          LOG.error("duplicate target: " + trg.getName());
        } else {
          ListSequence.fromList(targets).addElement(trg);
          MapSequence.fromMap(targetsMap).put(trg.getName(), trg);
        }
      }
    }
    return new Script(targets, MapSequence.fromMap(targetsMap).get(defaultTarget));
  }

  private void collectRequired(Iterable<IFacet.Name> facets, Map<IFacet.Name, IFacet> required) {
    for (IFacet.Name req : Sequence.fromIterable(facets)) {
      IFacet f = FacetRegistry.getInstance().lookup(req);
      if (f == null) {
        LOG.error("not found required facet: " + req);
      } else {
        MapSequence.fromMap(required).put(req, f);
      }
    }
  }

  private void collectOptional(Iterable<IFacet.Name> facets, Map<IFacet.Name, IFacet> optional) {
    for (IFacet.Name opt : Sequence.fromIterable(facets)) {
      IFacet f = FacetRegistry.getInstance().lookup(opt);
      if (f == null) {
        LOG.debug("not found optional facet: " + opt);
      } else {
        MapSequence.fromMap(optional).put(opt, f);
      }
    }
  }
}
