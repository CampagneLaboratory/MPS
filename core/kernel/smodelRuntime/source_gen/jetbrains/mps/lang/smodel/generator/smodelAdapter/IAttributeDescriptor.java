package jetbrains.mps.lang.smodel.generator.smodelAdapter;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public interface IAttributeDescriptor {
  public boolean match(@NotNull SNode attribute);
  public void update(@NotNull SNode attribute);

  public static class AttributeDescriptor implements IAttributeDescriptor {
    protected SNode myAttributeDeclaration;

    public AttributeDescriptor(SNode attributeDeclaration) {
      myAttributeDeclaration = attributeDeclaration;
    }

    @Override
    public boolean match(@NotNull SNode attribute) {
      return myAttributeDeclaration == null || SNodeOperations.isInstanceOf(attribute, NameUtil.nodeFQName(myAttributeDeclaration));
    }

    @Override
    public void update(@NotNull SNode attribute) {
    }
  }

  public static class AllAttributes extends IAttributeDescriptor.AttributeDescriptor {
    public AllAttributes() {
      super(null);
    }
  }

  public static class NodeAttribute extends IAttributeDescriptor.AttributeDescriptor {
    public NodeAttribute(@NotNull SNode attributeDeclaration) {
      super(attributeDeclaration);
    }
  }

  public static class LinkAttribute extends IAttributeDescriptor.AttributeDescriptor {
    private String myLinkRole;

    public LinkAttribute(@NotNull SNode attributeDeclaration, String linkRole) {
      super(attributeDeclaration);
      myLinkRole = linkRole;
    }

    @Override
    public boolean match(@NotNull SNode attribute) {
      return super.match(attribute) && (myLinkRole == null || myLinkRole.equals(SNodeAccessUtil.getProperty(attribute, "linkRole")));
    }

    @Override
    public void update(@NotNull SNode attribute) {
      SNodeAccessUtil.setProperty(attribute, "linkRole", myLinkRole);
    }
  }

  public static class PropertyAttribute extends IAttributeDescriptor.AttributeDescriptor {
    private String myPropertyName;

    public PropertyAttribute(@NotNull SNode attributeDeclaration, String propertyName) {
      super(attributeDeclaration);
      myPropertyName = propertyName;
    }

    @Override
    public boolean match(@NotNull SNode attribute) {
      return super.match(attribute) && (myPropertyName == null || myPropertyName.equals(SNodeAccessUtil.getProperty(attribute, "propertyName")));
    }

    @Override
    public void update(@NotNull SNode attribute) {
      SNodeAccessUtil.setProperty(attribute, "propertyName", myPropertyName);
    }
  }
}
