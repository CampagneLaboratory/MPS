package jetbrains.mps.lang.smodel.generator.smodelAdapter;

/*Generated by MPS */

import jetbrains.mps.util.annotation.ToRemove;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.kernel.model.SModelUtil;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.smodel.SNodeUtil;
import java.util.Collections;
import java.util.ArrayList;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.HashSet;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModelOperations;
import org.jetbrains.mps.openapi.language.SLanguage;
import java.util.Set;
import jetbrains.mps.smodel.LanguageHierarchyCache;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.MetaAdapterByDeclaration;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public final class SConceptOperations {
  private SConceptOperations() {
  }
  @Deprecated
  @ToRemove(version = 3.2)
  public static boolean isExactly(SNode conceptDeclarationNode, String conceptFqName) {
    if (conceptDeclarationNode == null) {
      return false;
    }
    return NameUtil.nodeFQName(conceptDeclarationNode).equals(conceptFqName);
  }
  public static boolean isExactly(SAbstractConcept concept1, SAbstractConcept concept2) {
    if (concept1 == null) {
      return false;
    }
    return concept1.equals(concept2);
  }
  @Deprecated
  public static boolean isAssignableFrom(SNode conceptDeclarationNode, SNode fromConceptDeclarationNode) {
    if (conceptDeclarationNode == null || fromConceptDeclarationNode == null) {
      return false;
    }
    return SModelUtil.isAssignableConcept(NameUtil.nodeFQName(fromConceptDeclarationNode), NameUtil.nodeFQName(conceptDeclarationNode));
  }
  public static boolean isSuperConceptOf(SNode superConcept, String subConceptFQName) {
    if (superConcept == null) {
      return false;
    }
    String superConceptFQName = NameUtil.nodeFQName(superConcept);
    return SModelUtil.isAssignableConcept(subConceptFQName, superConceptFQName);
  }
  @Deprecated
  @ToRemove(version = 3.2)
  public static boolean isSubConceptOf(SNode subConcept, String superConceptFQName) {
    if (subConcept == null) {
      return false;
    }
    String subConceptFQName = NameUtil.nodeFQName(subConcept);
    return SModelUtil.isAssignableConcept(subConceptFQName, superConceptFQName);
  }
  public static boolean isSubConceptOf(SAbstractConcept subConcept, SAbstractConcept superConcept) {
    if (subConcept == null || superConcept == null) {
      return false;
    }
    return subConcept.isSubConceptOf(superConcept);
  }
  public static SNode findConceptDeclaration(@NotNull String conceptFqName) {
    return SModelUtil.findConceptDeclaration(conceptFqName);
  }
  @Deprecated
  public static List<SNode> getDirectSuperConcepts(SNode conceptDeclarationNode) {
    return getDirectSuperConcepts(conceptDeclarationNode, false);
  }
  @Deprecated
  @ToRemove(version = 3.2)
  public static List<SNode> getDirectSuperConcepts(SNode conceptDeclarationNode, boolean inclusion) {
    if (conceptDeclarationNode == null || !(SNodeUtil.isInstanceOfAbstractConceptDeclaration(conceptDeclarationNode))) {
      return Collections.emptyList();
    }
    List<SNode> result = (List<SNode>) SModelUtil.getDirectSuperConcepts((SNode) conceptDeclarationNode);
    if (inclusion) {
      result = new ArrayList<SNode>(result);
      result.add(0, conceptDeclarationNode);
    }
    return Collections.unmodifiableList(result);
  }
  public static List<SAbstractConcept> getDirectSuperConcepts(SAbstractConcept concept, boolean inclusion) {
    if (concept == null) {
      return Collections.<SAbstractConcept>emptyList();
    }
    List<SAbstractConcept> result = SModelUtil.getDirectSuperConcepts(concept);
    if (inclusion) {
      result = new ArrayList<SAbstractConcept>(result);
      result.add(0, concept);
    }
    return Collections.unmodifiableList(result);
  }
  @Deprecated
  @ToRemove(version = 3.2)
  public static List<SNode> getAllSuperConcepts(SNode conceptDeclarationNode, boolean inclusion) {
    if (conceptDeclarationNode == null) {
      return new ArrayList<SNode>();
    }
    List<SNode> result = SModelUtil_new.getConceptAndSuperConcepts(conceptDeclarationNode);
    if (!(inclusion)) {
      result = new ArrayList<SNode>(result);
      result.remove(conceptDeclarationNode);
    }
    return result;
  }
  public static List<SAbstractConcept> getAllSuperConcepts(SAbstractConcept concept, boolean inclusion) {
    if (concept == null) {
      return Collections.<SAbstractConcept>emptyList();
    }
    List<SAbstractConcept> result = SModelUtil.getConceptAndAllSuperConcepts(concept);
    if (!(inclusion)) {
      result = new ArrayList<SAbstractConcept>(result);
      result.remove(concept);
    }
    return Collections.unmodifiableList(result);
  }
  @Deprecated
  public static List<SNode> getConceptHierarchy(SNode conceptDeclarationNode) {
    if (conceptDeclarationNode == null) {
      return new ArrayList<SNode>();
    }
    return SModelUtil_new.getConceptAndSuperConcepts(conceptDeclarationNode);
  }
  @Deprecated
  @ToRemove(version = 3.2)
  public static List<SNode> getAllSubConcepts(SNode conceptDeclarationNode, SModel model) {
    return getAllSubConcepts(conceptDeclarationNode, new HashSet<Language>(SModelOperations.getLanguages(model)));
  }
  public static List<SAbstractConcept> getAllSubConcepts(SAbstractConcept conceptDeclarationNode, SModel model) {
    return getAllSubConcepts(conceptDeclarationNode, new HashSet<SLanguage>(SModelOperations.getSLanguages(model)));
  }
  @Deprecated
  @ToRemove(version = 3.2)
  public static List<SNode> getAllSubConcepts(SNode conceptDeclarationNode, Set<Language> availableLanguages) {
    if (conceptDeclarationNode == null) {
      return new ArrayList<SNode>();
    }
    Set<String> descendants = LanguageHierarchyCache.getInstance().getAllDescendantsOfConcept(NameUtil.nodeFQName(conceptDeclarationNode));
    List<SNode> result = new ArrayList<SNode>();
    for (String descendant : descendants) {
      SNode declaration = SModelUtil.findConceptDeclaration(descendant);
      Language lang = SModelUtil.getDeclaringLanguage(declaration);
      if (SetSequence.fromSet(availableLanguages).contains(lang)) {
        result.add(declaration);
      }
    }
    return result;
  }
  public static List<SAbstractConcept> getAllSubConcepts(SAbstractConcept concept, Set<SLanguage> availableLanguages) {
    if (concept == null) {
      return new ArrayList<SAbstractConcept>();
    }
    Set<String> descendants = LanguageHierarchyCache.getInstance().getAllDescendantsOfConcept(concept.getName());
    List<SAbstractConcept> result = new ArrayList<SAbstractConcept>();
    for (String descendant : descendants) {
      SConcept declaration = MetaAdapterByDeclaration.getConcept((jetbrains.mps.smodel.SNode) SModelUtil.findConceptDeclaration(descendant));
      SLanguage lang = declaration.getLanguage();
      if (SetSequence.fromSet(availableLanguages).contains(lang)) {
        result.add(declaration);
      }
    }
    return result;
  }
  public static List<SNode> findConceptInstances(SNode conceptDeclarationNode, SearchScope scope) {
    if (conceptDeclarationNode == null) {
      return new ArrayList<SNode>();
    }
    if (scope == null) {
      scope = GlobalScope.getInstance();
    }
    String cId = NameUtil.nodeFQName(conceptDeclarationNode);
    SAbstractConcept concept = SConceptRepository.getInstance().getConcept(cId);
    Set<SNode> usages = FindUsagesFacade.getInstance().findInstances(scope, Collections.singleton(concept), false, new EmptyProgressMonitor());
    return ListSequence.fromListWithValues(new ArrayList<SNode>(), usages);
  }
  @Deprecated
  @ToRemove(version = 3.2)
  public static SNode createNewNode(String conceptFqName) {
    return jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.createNewNode(null, conceptFqName);
  }
  public static SNode createNewNode(SConcept concept) {
    return jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.createNewNode(null, null, concept);
  }
  @Deprecated
  public static jetbrains.mps.smodel.SNode createNewNode(String conceptFqName, SNode prototypeNode) {
    return ((jetbrains.mps.smodel.SNode) jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.createNewNode(null, conceptFqName));
  }
}
