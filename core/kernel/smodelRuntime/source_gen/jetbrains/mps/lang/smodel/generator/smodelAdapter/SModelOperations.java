package jetbrains.mps.lang.smodel.generator.smodelAdapter;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.ArrayList;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.util.Condition;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.util.ConditionalIterable;
import jetbrains.mps.smodel.IScope;
import java.util.Collections;
import jetbrains.mps.kernel.model.SModelUtil;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.util.NodesIterable;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.smodel.search.IsInstanceCondition;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.model.SNodeId;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.structure.ProjectStructureModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class SModelOperations {
  public SModelOperations() {
  }

  public static List<SNode> getRoots(SModel model, final String conceptFqName) {
    if (model == null) {
      return new ArrayList<SNode>();
    }
    if (conceptFqName == null) {
      ArrayList<SNode> result = new ArrayList<SNode>();
      for (SNode root : model.getRootNodes()) {
        result.add(root);
      }
      return result;
    }
    GlobalScope scope = GlobalScope.getInstance();
    List<SNode> list = new ArrayList<SNode>();
    Condition<SNode> cond = new Condition<SNode>() {
      @Override
      public boolean met(SNode node) {
        return SNodeUtil.isInstanceOf(node, SNodeOperations.getConcept(conceptFqName));
      }
    };
    Iterable<SNode> iterable = new ConditionalIterable<SNode>(model.getRootNodes(), cond);
    for (SNode node : iterable) {
      list.add(node);
    }
    return list;
  }

  public static List<SNode> getRootsIncludingImported(SModel model, IScope scope, String conceptFqName) {
    if (model == null) {
      return Collections.emptyList();
    }
    if (conceptFqName == null) {
      return allNodesIncludingImported(model, scope, true, null);
    }
    SNode concept = SModelUtil.findConceptDeclaration(conceptFqName, scope);
    if (concept == null) {
      return Collections.emptyList();
    }

    return allNodesIncludingImported(model, scope, true, concept);
  }

  public static List<SNode> getNodesIncludingImported(SModel model, IScope scope, String conceptFqName) {
    if (model == null) {
      return Collections.emptyList();
    }
    if (conceptFqName == null) {
      return allNodesIncludingImported(model, scope, false, null);
    }
    final SNode concept = SModelUtil.findConceptDeclaration(conceptFqName, scope);
    if (concept == null) {
      return Collections.emptyList();
    }
    return allNodesIncludingImported(model, scope, false, concept);
  }

  private static List<SNode> allNodesIncludingImported(SModel sModel, IScope scope, boolean roots, @Nullable SNode concept) {
    List<SModel> modelsList = new ArrayList<SModel>();
    modelsList.add(sModel);
    List<SModel> modelDescriptors = jetbrains.mps.smodel.SModelOperations.allImportedModels(sModel, scope);
    for (SModel descriptor : modelDescriptors) {
      modelsList.add(descriptor);
    }
    List<SNode> resultNodes = new ArrayList<SNode>();
    for (SModel aModel : modelsList) {
      Iterable<? extends SNode> nodes = (roots ?
        aModel.getRootNodes() :
        new NodesIterable(aModel)
      );
      if (concept == null) {
        resultNodes.addAll(IterableUtil.asList(nodes));
      } else if (roots) {
        resultNodes.addAll(IterableUtil.asList(new ConditionalIterable(nodes, new IsInstanceCondition(concept))));
      } else {
        resultNodes.addAll(IterableUtil.asList(((SModelInternal) aModel).getFastNodeFinder().getNodes(NameUtil.nodeFQName(concept), true)));
      }
    }
    return resultNodes;
  }

  public static List<SNode> getNodes(SModel model, final String conceptFqName) {
    if (model == null) {
      return new ArrayList<SNode>();
    }
    if (conceptFqName != null) {
      return ((SModelInternal) model).getFastNodeFinder().getNodes(conceptFqName, true);
    }
    List<SNode> result = new ArrayList<SNode>();
    for (SNode node : new NodesIterable(model)) {
      result.add(node);
    }
    return result;
  }

  public static jetbrains.mps.smodel.SNode createNewNode(SModel model, String conceptFqName) {
    return createNewNode(model, null, conceptFqName);
  }

  public static jetbrains.mps.smodel.SNode createNewNode(SModel model, SNodeId id, String conceptFqName) {
    if (conceptFqName == null) {
      return null;
    }
    SNode nodeConcept = SModelUtil.findConceptDeclaration(conceptFqName, GlobalScope.getInstance());
    if (jetbrains.mps.smodel.SNodeUtil.isInstanceOfInterfaceConceptDeclaration(nodeConcept)) {
      jetbrains.mps.smodel.SNode node = new jetbrains.mps.smodel.SNode(conceptFqName);
      if (id != null) {
        ((jetbrains.mps.smodel.SNode) node).setId(id);
      }
      return node;
    }
    SNode result = SModelUtil_new.instantiateConceptDeclaration(conceptFqName, model, id, GlobalScope.getInstance(), false);
    if (result == null) {
      return null;
    }
    BehaviorManager.getInstance().initNode(result);
    return ((jetbrains.mps.smodel.SNode) result);
  }

  @Deprecated
  public static jetbrains.mps.smodel.SNode createNewNode(SModel model, String conceptFqName, SNode prototypeNode) {
    return createNewNode(model, conceptFqName);
  }

  public static jetbrains.mps.smodel.SNode createNewRootNode(SModel model, String conceptFqName, SNode prototypeNode) {
    jetbrains.mps.smodel.SNode newNode = createNewNode(model, conceptFqName);
    model.addRootNode(newNode);
    return newNode;
  }

  public static SNode addRootNode(SModel model, SNode node) {
    if (model != null && node != null) {
      model.addRootNode(node);
    }
    return node;
  }

  public static String getModelName(SModel model) {
    if (model == null) {
      return null;
    }
    return SNodeOperations.getModelLongName(model);
  }

  public static SNode getModuleStub(SModel model) {
    final IModule module = model.getModule();
    if (module instanceof Generator) {
      Language lang = ((Generator) module).getSourceLanguage();
      SModel m = ProjectStructureModule.getInstance().getModelByModule(lang);
      if (m == null) {
        return null;
      }
      SNode l = ListSequence.fromList(SModelOperations.getRoots(m, "jetbrains.mps.lang.project.structure.Language")).first();
      return (l == null ?
        null :
        ListSequence.fromList(SLinkOperations.getTargets(l, "generator", true)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return eq_kkj9n5_a0a0a0a0a0a4a1a21(SPropertyOperations.getString(it, "uuid"), module.getModuleReference().getModuleId().toString());
          }
        })
      );
    } else {
      SModel m = ProjectStructureModule.getInstance().getModelByModule(module);
      return (m == null ?
        null :
        ListSequence.fromList(SModelOperations.getRoots(m, "jetbrains.mps.lang.project.structure.Module")).first()
      );
    }
  }

  private static boolean eq_kkj9n5_a0a0a0a0a0a4a1a21(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
