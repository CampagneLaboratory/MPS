package jetbrains.mps.smodel.resources;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.make.delta.IDelta;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.make.resources.IResourceWithProperties;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.make.resources.IPropertiesIO;

public class TResource extends DResource implements Tuples._3<Iterable<IDelta>, IModule, SModelDescriptor>, ITResource, IResourceWithProperties {
  private MultiTuple._2<IModule, SModelDescriptor> tuple;

  public TResource() {
    super();
  }

  public TResource(Iterable<IDelta> delta, IModule module, SModelDescriptor modelDescriptor) {
    super(delta);
    this.tuple = new MultiTuple._2<IModule, SModelDescriptor>(module, modelDescriptor);
  }

  public IModule module(IModule value) {
    return this._1(value);
  }

  public SModelDescriptor modelDescriptor(SModelDescriptor value) {
    return this._2(value);
  }

  public IModule module() {
    return this._1();
  }

  public SModelDescriptor modelDescriptor() {
    return this._2();
  }

  public IModule _1(IModule module) {
    return tuple._0();
  }

  public SModelDescriptor _2(SModelDescriptor modelDescriptor) {
    return tuple._1();
  }

  public IModule _1() {
    return tuple._0();
  }

  public SModelDescriptor _2() {
    return tuple._1();
  }

  public Tuples._2<Iterable<IDelta>, IModule> assign(Tuples._2<? extends Iterable<IDelta>, ? extends IModule> from) {
    super.assign(from);
    tuple.assign(from._1());
    return this;
  }

  public Tuples._3<Iterable<IDelta>, IModule, SModelDescriptor> assign(Tuples._3<? extends Iterable<IDelta>, ? extends IModule, ? extends SModelDescriptor> from) {
    super.assign(from);
    tuple.assign(from._1(), from._2());
    return this;
  }

  @SuppressWarnings(value = "unchecked")
  public TResource assignFrom(Tuples._2<IModule, SModelDescriptor> from) {
    return (TResource) super.assign(from);
  }

  public String describe() {
    return null;
  }

  public IPropertiesIO getProperties() {
    return new FlatFilePropertiesIO(this.module().getDescriptorFile());
  }
}
