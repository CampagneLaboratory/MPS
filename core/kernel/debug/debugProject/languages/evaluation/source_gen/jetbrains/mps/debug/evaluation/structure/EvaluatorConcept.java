package jetbrains.mps.debug.evaluation.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.ClassifierType;
import jetbrains.mps.baseLanguage.structure.BlockStatement;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class EvaluatorConcept extends BaseConcept {
  public static final String concept = "jetbrains.mps.debug.evaluation.structure.EvaluatorConcept";
  public static final String IS_RUNTIME = "isRuntime";
  public static final String THIS_TYPE = "thisType";
  public static final String EVALUATED_STATEMENT = "evaluatedStatement";
  public static final String VARIABLES = "variables";

  public EvaluatorConcept(SNode node) {
    super(node);
  }

  public boolean getIsRuntime() {
    return this.getBooleanProperty(EvaluatorConcept.IS_RUNTIME);
  }

  public void setIsRuntime(boolean value) {
    this.setBooleanProperty(EvaluatorConcept.IS_RUNTIME, value);
  }

  public ClassifierType getThisType() {
    return (ClassifierType) this.getChild(ClassifierType.class, EvaluatorConcept.THIS_TYPE);
  }

  public void setThisType(ClassifierType node) {
    super.setChild(EvaluatorConcept.THIS_TYPE, node);
  }

  public BlockStatement getEvaluatedStatement() {
    return (BlockStatement) this.getChild(BlockStatement.class, EvaluatorConcept.EVALUATED_STATEMENT);
  }

  public void setEvaluatedStatement(BlockStatement node) {
    super.setChild(EvaluatorConcept.EVALUATED_STATEMENT, node);
  }

  public int getVariablesesCount() {
    return this.getChildCount(EvaluatorConcept.VARIABLES);
  }

  public Iterator<LowLevelVariable> variableses() {
    return this.children(LowLevelVariable.class, EvaluatorConcept.VARIABLES);
  }

  public List<LowLevelVariable> getVariableses() {
    return this.getChildren(LowLevelVariable.class, EvaluatorConcept.VARIABLES);
  }

  public void addVariables(LowLevelVariable node) {
    this.addChild(EvaluatorConcept.VARIABLES, node);
  }

  public void insertVariables(LowLevelVariable prev, LowLevelVariable node) {
    this.insertChild(prev, EvaluatorConcept.VARIABLES, node);
  }

  public static EvaluatorConcept newInstance(SModel sm, boolean init) {
    return (EvaluatorConcept) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.debug.evaluation.structure.EvaluatorConcept", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static EvaluatorConcept newInstance(SModel sm) {
    return EvaluatorConcept.newInstance(sm, false);
  }
}
