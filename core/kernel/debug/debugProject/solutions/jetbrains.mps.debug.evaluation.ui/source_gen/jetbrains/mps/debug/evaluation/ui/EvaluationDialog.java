package jetbrains.mps.debug.evaluation.ui;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import jetbrains.mps.logging.Logger;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.embeddableEditor.EmbeddableEditor;
import java.util.Set;
import jetbrains.mps.smodel.Language;
import java.util.HashSet;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.debug.runtime.DebugSession;
import java.util.Map;
import java.util.List;
import com.sun.jdi.LocalVariable;
import java.util.HashMap;
import java.awt.Dimension;
import com.sun.jdi.StackFrame;
import com.sun.jdi.Location;
import jetbrains.mps.debug.info.StacktraceUtil;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.project.ModuleContext;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import javax.swing.JScrollPane;
import javax.swing.JComponent;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.ide.embeddableEditor.GenerationResult;
import jetbrains.mps.debug.evaluation.Evaluator;
import jetbrains.mps.debug.evaluation.ValueProxy;
import jetbrains.mps.ide.ui.MPSTree;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.ide.ui.TextTreeNode;
import jetbrains.mps.debug.integration.ui.nodes.CalculatedValueTreeNode;

public class EvaluationDialog extends BaseDialog {
  private static final Logger LOG = Logger.getLogger(EvaluationDialog.class);

  private JPanel myPanel = new JPanel(new BorderLayout());
  private IOperationContext myContext;
  private EvaluationAuxModule myAuxModule;
  private EvaluationDialog.MyTree myTree;
  private EmbeddableEditor myEditor;
  private Set<Language> myLanguages = new HashSet<Language>();
  private SNode myNode;
  private DebugSession.UiState myUiState;
  private Map<SNode, List<LocalVariable>> myNodesToVarsMap = new HashMap<SNode, List<LocalVariable>>();

  public EvaluationDialog(final IOperationContext context, DebugSession.UiState uiState) {
    super(context.getMainFrame(), "Evaluate");
    this.myContext = context;
    this.myUiState = uiState;
    this.setSize(new Dimension(500, 500));
    this.setModal(false);
    StackFrame stackFrame = uiState.getStackFrame();
    if (stackFrame != null) {
      try {
        for (LocalVariable localVariable : stackFrame.visibleVariables()) {
          Location location = stackFrame.location();
          SNode snode = StacktraceUtil.getNodeOrVar(location.declaringType().name(), location.sourceName(), location.lineNumber(), localVariable.name());
          if (snode != null) {
            List<LocalVariable> varsList = this.myNodesToVarsMap.get(snode);
            if (varsList == null) {
              varsList = new ArrayList<LocalVariable>();
              this.myNodesToVarsMap.put(snode, varsList);
            }
            varsList.add(localVariable);
          }
        }
      } catch (Throwable t) {
        LOG.error(t);
        // todo show bubble or dialog 
        return;
      }
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SNode evaluatorConcept = SConceptOperations.createNewNode("jetbrains.mps.debug.evaluation.structure.EvaluatorConcept", null);
        SPropertyOperations.set(evaluatorConcept, "isRuntime", "" + true);
        EvaluationDialog.this.myNode = evaluatorConcept;
        EvaluationDialog.this.myAuxModule = new EvaluationAuxModule(EvaluationDialog.this.myContext.getProject());
        EvaluationDialog.this.myAuxModule.setInvocationContext(EvaluationDialog.this.myContext.getModule());
        EvaluationDialog.this.myEditor = new EmbeddableEditor(new ModuleContext(EvaluationDialog.this.myAuxModule, EvaluationDialog.this.myAuxModule.getMPSProject()), EvaluationDialog.this.myAuxModule, EvaluationDialog.this.myNode);
        Language evalLang = MPSModuleRepository.getInstance().getLanguage("jetbrains.mps.debug.evaluation");
        EvaluationDialog.this.myLanguages.add(evalLang);
        SLinkOperations.setNewChild(evaluatorConcept, "evaluatedExpression", "jetbrains.mps.baseLanguage.structure.NullLiteral");
        for (SNode varSNode : EvaluationDialog.this.myNodesToVarsMap.keySet()) {
          SNode varNode = varSNode;
          SNode highLevelVariable = SLinkOperations.addNewChild(evaluatorConcept, "variables", "jetbrains.mps.debug.evaluation.structure.HighLevelVariable");
          SLinkOperations.setTarget(highLevelVariable, "variable", SNodeOperations.copyNode(varNode), true);
          SLinkOperations.setTarget(highLevelVariable, "deducedType", SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(varNode)), true);
          Language l = varSNode.getNodeLanguage();
          EvaluationDialog.this.myLanguages.add(l);
        }
      }
    });
    for (Language language : this.myLanguages) {
      this.myEditor.addLanguage(language);
    }
    this.myPanel.add(this.myEditor.getComponenet(), BorderLayout.NORTH);
    this.myTree = new EvaluationDialog.MyTree();
    this.myPanel.add(new JScrollPane(this.myTree), BorderLayout.CENTER);
  }

  protected JComponent getMainComponent() {
    return this.myPanel;
  }

  @BaseDialog.Button(position = 0, name = "Evaluate", mnemonic = 'E', defaultButton = true)
  public void buttonFind() {
    try {
      Set<IClassPathItem> classpaths = new HashSet<IClassPathItem>();
      for (Language language : this.myLanguages) {
        IClassPathItem item = language.getClassPathItem();
        classpaths.add(item);
      }
      final GenerationResult generationResult = this.myEditor.generate(classpaths);
      String fqName = generationResult.getModelDescriptor().getLongName() + ".EvaluatorInstance";
      ClassLoader loader = generationResult.getLoader(this.myUiState.getClass().getClassLoader());
      Class<?> aClass = Class.forName(fqName, true, loader);
      Evaluator evaluator = (Evaluator) aClass.getConstructor(DebugSession.UiState.class).newInstance(this.myUiState);
      ValueProxy resultProxy = evaluator.evaluate();
      this.myTree.setResultProxy(resultProxy);
      this.myTree.rebuildNow();
    } catch (Throwable t) {
      t.printStackTrace();
    }
  }

  @BaseDialog.Button(position = 1, name = "Cancel", mnemonic = 'C', defaultButton = false)
  public void buttonCancel() {
    this.myEditor.disposeEditor();
    this.myAuxModule.dispose();
    this.dispose();
  }

  private static class MyTree extends MPSTree {
    private ValueProxy myValueProxy;

    public MyTree() {
      super();
      this.rebuildNow();
    }

    public void setResultProxy(ValueProxy valueProxy) {
      this.myValueProxy = valueProxy;
    }

    @Override
    protected MPSTreeNode rebuild() {
      MPSTreeNode rootTreeNode = new TextTreeNode("Evaluation Result");
      if (this.myValueProxy != null) {
        rootTreeNode.add(new CalculatedValueTreeNode(this.myValueProxy.getJDIValue()));
      }
      this.setRootVisible(false);
      this.setShowsRootHandles(true);
      return rootTreeNode;
    }
  }
}
