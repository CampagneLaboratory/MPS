package jetbrains.mps.debug.evaluation.ui;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import jetbrains.mps.logging.Logger;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.JTabbedPane;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.embeddableEditor.EmbeddableEditor;
import jetbrains.mps.debug.runtime.JavaUiState;
import jetbrains.mps.debug.runtime.DebugSession;
import java.awt.Dimension;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.ModuleContext;
import jetbrains.mps.smodel.Language;
import javax.swing.JScrollPane;
import javax.swing.JComponent;
import jetbrains.mps.debug.evaluation.ValueProxy;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import jetbrains.mps.ide.ui.MPSTree;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.ide.ui.TextTreeNode;
import jetbrains.mps.debug.api.integration.ui.WatchableNode;
import jetbrains.mps.debug.runtime.java.programState.CalculatedValue;

public class EvaluationDialog extends BaseDialog {
  private static final Logger LOG = Logger.getLogger(EvaluationDialog.class);

  private JPanel myPanel = new JPanel(new BorderLayout());
  private JTabbedPane myTabbedPane = new JTabbedPane();
  private final IOperationContext myContext;
  private EvaluationDialog.MyTree myTree;
  private EmbeddableEditor myEditor;
  private EmbeddableEditor myResultEditor;
  private final EvaluationData myEvaluationData;

  public EvaluationDialog(final IOperationContext context, JavaUiState uiState, DebugSession debugSession) {
    super(context.getMainFrame(), "Evaluate");
    this.myContext = context;
    this.setSize(new Dimension(500, 500));
    this.setModal(false);

    this.myEvaluationData = new EvaluationData(context, uiState, debugSession);
    myEvaluationData.addGenerationListener(new _FunctionTypes._void_P1_E0<SNode>() {
      public void invoke(SNode result) {
        EvaluationDialog.this.updateGenerationResultTab(result);
      }
    });

    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        EvaluationDialog.this.myEditor = new EmbeddableEditor(new ModuleContext(EvaluationDialog.this.myEvaluationData.getModule(), EvaluationDialog.this.myEvaluationData.getModule().getMPSProject()), EvaluationDialog.this.myEvaluationData.getModule(), EvaluationDialog.this.myEvaluationData.getRootToShow(), myEvaluationData.getNodeToShow(), true);
        myEvaluationData.setModel(myEditor.getModel());

        for (Language language : EvaluationDialog.this.myEvaluationData.getRequiredLanguages()) {
          EvaluationDialog.this.myEditor.addLanguage(language);
        }
      }
    });

    this.myPanel.add(this.myEditor.getComponenet(), BorderLayout.NORTH);
    this.myTree = new EvaluationDialog.MyTree();
    this.myPanel.add(new JScrollPane(this.myTree), BorderLayout.CENTER);
    this.myTabbedPane.addTab("Main", myPanel);
  }

  protected JComponent getMainComponent() {
    return this.myTabbedPane;
  }

  @BaseDialog.Button(position = 0, name = "Evaluate", mnemonic = 'E', defaultButton = true)
  public void buttonEvaluate() {
    try {
      ValueProxy evaluatedValue = myEvaluationData.evaluate();
      if (evaluatedValue != null) {
        myTree.setResultProxy(evaluatedValue);
      } else {
        myTree.setUnsuccessful("Evaluation returned null.");
      }
    } catch (BaseEvaluationException e) {
      myTree.setUnsuccessful(e.getMessage());
      LOG.error(e);
    }
    myTree.rebuildLater();
  }

  @BaseDialog.Button(position = 1, name = "Cancel", mnemonic = 'C', defaultButton = false)
  public void buttonCancel() {
    this.myEditor.disposeEditor();
    this.myEvaluationData.getModule().dispose();
    this.dispose();
  }

  public void updateGenerationResultTab(final SNode generatedResult) {
    ApplicationManager.getApplication().invokeLater(new Runnable() {
      public void run() {
        if (EvaluationDialog.this.myResultEditor == null) {
          ModelAccess.instance().runWriteActionInCommand(new Runnable() {
            public void run() {
              EvaluationDialog.this.myResultEditor = new EmbeddableEditor(new ModuleContext(myEvaluationData.getModule(), myEvaluationData.getModule().getMPSProject()), myEvaluationData.getModule(), generatedResult, generatedResult, false);
            }
          });
          EvaluationDialog.this.myTabbedPane.add("Generated Result", EvaluationDialog.this.myResultEditor.getComponenet());
          EvaluationDialog.this.myTabbedPane.validate();
        } else {
          ModelAccess.instance().runReadAction(new Runnable() {
            public void run() {
              EvaluationDialog.this.myResultEditor.setNode(generatedResult);
            }
          });
        }
      }
    }, ModalityState.NON_MODAL);
  }

  private static class MyTree extends MPSTree {
    private ValueProxy myValueProxy;
    private boolean myIsSuccessful = true;
    private String myErrorText = "";

    public MyTree() {
      super();
      this.rebuildNow();
    }

    public void setResultProxy(ValueProxy valueProxy) {
      this.myValueProxy = valueProxy;
      this.myIsSuccessful = true;
      myErrorText = "";
    }

    public void setUnsuccessful(String errorText) {
      this.myIsSuccessful = false;
      this.myValueProxy = null;
      myErrorText = errorText;
    }

    @Override
    protected MPSTreeNode rebuild() {
      MPSTreeNode rootTreeNode = new TextTreeNode("Evaluation Result");
      if (this.myValueProxy != null && this.myIsSuccessful) {
        rootTreeNode.add(new WatchableNode(new CalculatedValue(this.myValueProxy.getJDIValue())));
      }
      if (!(this.myIsSuccessful)) {
        rootTreeNode.add(new TextTreeNode(myErrorText));
        // todo set error icon 
      }
      this.setRootVisible(false);
      this.setShowsRootHandles(true);
      return rootTreeNode;
    }
  }
}
