package jetbrains.mps.debug.evaluation.ui;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.stubs.JavaStubs;
import jetbrains.mps.stubs.StubLocation;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.reloading.ClassPathFactory;
import jetbrains.mps.stubs.javastub.ASMModelLoader;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import jetbrains.mps.baseLanguage.structure.Visibility;
import jetbrains.mps.stubs.javastub.asm.ASMMethod;
import jetbrains.mps.baseLanguage.structure.PublicVisibility;
import jetbrains.mps.stubs.javastub.asm.ASMField;

public class AllMembersJavaStubs extends JavaStubs {
  public static final String DEBUG_JAVA_ID = "debugger_java";

  public AllMembersJavaStubs() {
  }

  protected String getLanguageId() {
    return DEBUG_JAVA_ID;
  }

  @Override
  protected void updateModel(StubLocation location, SModel model) {
    IClassPathItem item = ClassPathFactory.getInstance().createFromPath(location.getPath());
    if (item == null) {
      return;
    }
    new ASMModelLoader(item, model, false) {
      @Override
      public SModelReference getModelReferenceFor(String packageName) {
        return StubHelper.uidForPackageInStubs(packageName);
      }

      @Override
      protected Visibility createVisibility(ASMMethod m, SModel model) {
        if (m.isPublic() || m.isPrivate() || m.isProtected()) {
          return PublicVisibility.newInstance(model);
        }
        return null;
      }

      @Override
      protected Visibility createVisibility(ASMField f, SModel model) {
        if (f.isPublic() || f.isPrivate() || f.isProtected()) {
          return PublicVisibility.newInstance(model);
        }
        return null;
      }
    }.updateModel();
  }
}
