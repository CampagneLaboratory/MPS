package jetbrains.mps.debug.evaluation.transform;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.AttributesRolesUtil;

public class Transformator {
  private final SModel myModel;
  private final SNode myWhatToEvaluate;

  public Transformator(SNode evaluator) {
    myModel = SNodeOperations.getModel(evaluator);

    SNode evaluateMethod = ListSequence.fromList(SNodeOperations.getDescendants(evaluator, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", false, new String[]{})).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals("evaluate");
      }
    });
    myWhatToEvaluate = ListSequence.fromList(SModelOperations.getNodes(myModel, "jetbrains.mps.baseLanguage.structure.ClassConcept")).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode root) {
        return ListSequence.fromList(SNodeOperations.getDescendants(root, null, false, new String[]{})).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode node) {
            return (SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromAttributeRole("toEvaluateAnnotation"), true) != null);
          }
        });
      }
    }).first();
    if (!(myWhatToEvaluate.isDescendantOf(evaluateMethod, false))) {
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(evaluateMethod, "body", true), "statement", true)).addElement(SNodeOperations.cast(myWhatToEvaluate, "jetbrains.mps.baseLanguage.structure.Statement"));
    }
  }

  public Transformator(SNode whatToEvaluate, boolean dummy) {
    // method was created for test purposes only 
    myModel = SNodeOperations.getModel(whatToEvaluate);
    myWhatToEvaluate = whatToEvaluate;
  }

  public void transform() {
    TransformationUtil.preprocess(myWhatToEvaluate);

    TransformationUtil.replaceConstructors(myWhatToEvaluate);
    TransformationUtil.replaceThis(myWhatToEvaluate);
    TransformationUtil.replaceSuper(myWhatToEvaluate);
    TransformationUtil.replaceLowLevelVariableReferences(myWhatToEvaluate);
    TransformationUtil.replaceAssignments(myWhatToEvaluate);
    TransformationUtil.replaceClassExpressions(myWhatToEvaluate);
    TransformationUtil.replaceLocalMemberReferences(myWhatToEvaluate);
    TransformationUtil.wrapMemberReferencesInCycle(myWhatToEvaluate);
    TransformationUtil.replaceInstanceof(myWhatToEvaluate);

    TransformationUtil.postprocess(myWhatToEvaluate);

    TransformationUtil.wrapReturn(SNodeOperations.getAncestor(myWhatToEvaluate, "jetbrains.mps.baseLanguage.structure.IMethodLike", false, false));
  }
}
