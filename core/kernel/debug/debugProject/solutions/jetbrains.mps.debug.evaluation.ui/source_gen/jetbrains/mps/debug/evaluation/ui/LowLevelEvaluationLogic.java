package jetbrains.mps.debug.evaluation.ui;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import jetbrains.mps.baseLanguage.search.AbstractClassifiersScope;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.debug.runtime.JavaUiState;
import jetbrains.mps.debug.runtime.DebugSession;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.baseLanguage.search.ReachableClassifiersScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.AttributesRolesUtil;
import jetbrains.mps.debug.runtime.java.programState.JavaStackFrame;
import com.sun.jdi.StackFrame;
import java.util.List;
import com.sun.jdi.LocalVariable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.sun.jdi.ClassNotLoadedException;
import com.sun.jdi.AbsentInformationException;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.reloading.EachClassPathItemVisitor;
import jetbrains.mps.reloading.JarFileClassPathItem;
import jetbrains.mps.reloading.FileClassPathItem;
import jetbrains.mps.stubs.StubReloadManager;
import com.sun.jdi.Type;
import com.sun.jdi.PrimitiveType;
import com.sun.jdi.BooleanType;
import com.sun.jdi.ByteType;
import com.sun.jdi.ShortType;
import com.sun.jdi.LongType;
import com.sun.jdi.IntegerType;
import com.sun.jdi.DoubleType;
import com.sun.jdi.FloatType;
import com.sun.jdi.CharType;
import com.sun.jdi.ArrayType;
import com.sun.jdi.Location;
import jetbrains.mps.debug.info.StacktraceUtil;
import org.jetbrains.annotations.Nullable;
import com.sun.jdi.ObjectReference;
import jetbrains.mps.util.Condition;
import jetbrains.mps.debug.DebugInfoManager;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class LowLevelEvaluationLogic extends AbstractEvaluationLogic {
  private static final Logger LOG = Logger.getLogger(LowLevelEvaluationLogic.class);

  private final AbstractClassifiersScope myScope;

  public LowLevelEvaluationLogic(@NotNull final IOperationContext context, @NotNull JavaUiState state, @NotNull DebugSession debugSession) {
    super(context, state, debugSession);

    final Wrappers._T<AbstractClassifiersScope> scope = new Wrappers._T<AbstractClassifiersScope>();

    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        // creating scope 
        scope.value = new ReachableClassifiersScope(SNodeOperations.getModel(getLocationNode()), IClassifiersSearchScope.CLASSIFFIER, context.getScope());
      }
    });
    myScope = scope.value;

    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SLinkOperations.setNewChild(myEvaluator, "evaluatedStatement", "jetbrains.mps.baseLanguage.structure.BlockStatement");
        SLinkOperations.setNewChild(SLinkOperations.getTarget(myEvaluator, "evaluatedStatement", true), AttributesRolesUtil.childRoleFromAttributeRole("toEvaluateAnnotation"), "jetbrains.mps.debug.evaluation.structure.ToEvaluateAnnotation");

        JavaStackFrame javaStackFrame = myUiState.getStackFrame();
        if (javaStackFrame != null) {
          StackFrame stackFrame = javaStackFrame.getStackFrame();
          if (stackFrame != null) {
            try {

              // create vars 
              List<LocalVariable> variables = stackFrame.visibleVariables();
              for (LocalVariable variable : ListSequence.fromList(variables)) {
                try {
                  SNode lowLevelVarNode = SConceptOperations.createNewNode("jetbrains.mps.debug.evaluation.structure.LowLevelVariable", null);
                  SPropertyOperations.set(lowLevelVarNode, "name", ((LocalVariable) variable).name());
                  SLinkOperations.setTarget(lowLevelVarNode, "type", getMpsTypeFromJdiType(((LocalVariable) variable).type()), true);
                  ListSequence.fromList(SLinkOperations.getTargets(myEvaluator, "variables", true)).addElement(lowLevelVarNode);
                } catch (ClassNotLoadedException cne) {
                  LOG.error(cne);
                }

              }

              // create static context type 
              // <node> 
              // create this 
              // <node> 
            } catch (AbsentInformationException e) {
              LOG.error(e);
            }

          }
        }
      }
    });

    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        // add classpath to module to be able to see classes in evaluation 
        IClassPathItem cpItem = getLocationModel().getModelDescriptor().getModule().getClassPathItem();
        cpItem.accept(new EachClassPathItemVisitor() {
          @Override
          public void visit(JarFileClassPathItem item) {
            getModule().addStubPath(item.getFile().getAbsolutePath());
          }

          @Override
          public void visit(FileClassPathItem item) {
            getModule().addStubPath(item.getClassPath());
          }
        });

        StubReloadManager.getInstance().reload();
      }
    });
  }

  @NotNull
  private SNode getMpsTypeFromJdiType(Type type) throws ClassNotLoadedException {
    // TODO generics 
    if (type instanceof PrimitiveType) {
      if (type instanceof BooleanType) {
        return new LowLevelEvaluationLogic.QuotationClass_qka7a1_a0a0a0b0a().createNode();
      }
      if (type instanceof ByteType) {
        return new LowLevelEvaluationLogic.QuotationClass_qka7a1_a0a0b0b0a().createNode();
      }
      if (type instanceof ShortType) {
        return new LowLevelEvaluationLogic.QuotationClass_qka7a1_a0a0c0b0a().createNode();
      }
      if (type instanceof LongType) {
        return new LowLevelEvaluationLogic.QuotationClass_qka7a1_a0a0d0b0a().createNode();
      }
      if (type instanceof IntegerType) {
        return new LowLevelEvaluationLogic.QuotationClass_qka7a1_a0a0e0b0a().createNode();
      }
      if (type instanceof DoubleType) {
        return new LowLevelEvaluationLogic.QuotationClass_qka7a1_a0a0f0b0a().createNode();
      }
      if (type instanceof FloatType) {
        return new LowLevelEvaluationLogic.QuotationClass_qka7a1_a0a0g0b0a().createNode();
      }
      if (type instanceof CharType) {
        return new LowLevelEvaluationLogic.QuotationClass_qka7a1_a0a0h0b0a().createNode();
      }
    } else if (type instanceof ArrayType) {
      return new LowLevelEvaluationLogic.QuotationClass_qka7a1_a0a0a1a0().createNode(getMpsTypeFromJdiType(((ArrayType) type).componentType()));
    }
    return createClassifierType(type.name());
  }

  public SNode createStaticContextType() {
    JavaStackFrame frame = myUiState.getStackFrame();
    if (frame != null) {
      Location location = frame.getLocation().getLocation();
      try {
        final String unitType = StacktraceUtil.getUnitName(location.declaringType().name(), location.sourceName(), location.lineNumber());
        if (unitType == null) {
          return null;
        }
        return this.createClassifierType(unitType);
      } catch (AbsentInformationException e) {
        LOG.error(e);
      }
    }
    return null;
  }

  @Nullable
  public SNode createThisClassifierType() {
    ObjectReference thisObject = myUiState.getThisObject();
    if (thisObject == null) {
      return null;
    }

    return createStaticContextType();
  }

  private SNode createClassifierType(final String unitFqName) {
    // TODO this is totally wrong. What if we want a class which exists in generated code, but does not in MPS? 
    List<SNode> classifiers = myScope.getNodes(new Condition<SNode>() {
      public boolean met(SNode node) {
        if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
          return false;
        }

        String nodesUnitName = DebugInfoManager.getInstance().getUnitName(node);
        if (StringUtils.isEmpty(nodesUnitName)) {
          return false;
        }
        return nodesUnitName.equals(unitFqName);
      }
    });
    if (classifiers.isEmpty()) {
      return null;
    }
    SNode classifierType = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    SLinkOperations.setTarget(classifierType, "classifier", SNodeOperations.cast(classifiers.get(0), "jetbrains.mps.baseLanguage.structure.Classifier"), false);
    return classifierType;
  }

  @NotNull
  public SNode getNodeToShow() {
    return myEvaluator;
  }

  @NotNull
  public SNode getRootToShow() {
    return myEvaluator;
  }

  @Override
  public void setModel(SModelDescriptor model) {
    super.setModel(model);

    SModelReference stubReference = StubHelper.uidForPackageInStubs(getLocationModel().getSModelFqName().toString());
    model.getSModel().addImportedModel(stubReference);
  }

  public static class QuotationClass_qka7a1_a0a0a0b0a {
    public QuotationClass_qka7a1_a0a0a0b0a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_qka7a1_a0a0b0b0a {
    public QuotationClass_qka7a1_a0a0b0b0a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ByteType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_qka7a1_a0a0c0b0a {
    public QuotationClass_qka7a1_a0a0c0b0a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ShortType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_qka7a1_a0a0d0b0a {
    public QuotationClass_qka7a1_a0a0d0b0a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LongType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_qka7a1_a0a0e0b0a {
    public QuotationClass_qka7a1_a0a0e0b0a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_qka7a1_a0a0f0b0a {
    public QuotationClass_qka7a1_a0a0f0b0a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DoubleType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_qka7a1_a0a0g0b0a {
    public QuotationClass_qka7a1_a0a0g0b0a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_qka7a1_a0a0h0b0a {
    public QuotationClass_qka7a1_a0a0h0b0a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CharType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_qka7a1_a0a0a1a0 {
    public QuotationClass_qka7a1_a0a0a1a0() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = CopyUtil.copy(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("componentType", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }
}
