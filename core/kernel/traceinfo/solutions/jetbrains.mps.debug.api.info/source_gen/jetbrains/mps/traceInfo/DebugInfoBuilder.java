package jetbrains.mps.traceInfo;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelDescriptor;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.generator.TransientSModel;
import jetbrains.mps.generator.template.TracingUtil;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class DebugInfoBuilder {
  private final DebugInfo myDebugInfo = new DebugInfo();

  public DebugInfoBuilder() {
  }

  public void addTraceablePosition(SNode inputNode, SModelDescriptor inputModel, String fileName, TraceablePositionInfo positionInfo) {
    positionInfo.setNodeId(inputNode.getNodeId().toString());
    positionInfo.setFileName(fileName);
    SNode topmostAncestor = inputNode.getTopmostAncestor();
    myDebugInfo.addPosition(positionInfo, topmostAncestor);
  }

  public void addScopePosition(SNode inputNode, SModelDescriptor inputModel, String fileName, ScopePositionInfo positionInfo) {
    positionInfo.setNodeId(inputNode.getNodeId().toString());
    positionInfo.setFileName(fileName);
    Map<SNode, VarInfo> varMap = positionInfo.getTempVarInfoMap();
    for (SNode varNode : varMap.keySet()) {
      SNode originalVar = getOriginalInputNodeForNearestParent(varNode);
      VarInfo varInfo = varMap.get(varNode);
      if (originalVar != null && !((originalVar.isDisposed()))) {
        varInfo.setNodeId(originalVar.getNodeId().toString());
      } else {
        positionInfo.removeVarInfo(varInfo);
      }
    }
    positionInfo.clearTempVarInfoMap();
    myDebugInfo.addScopePosition(positionInfo, inputNode.getTopmostAncestor());
  }

  public void addUnitPosition(SNode inputNode, SModelDescriptor inputModel, String fileName, UnitPositionInfo positionInfo) {
    positionInfo.setFileName(fileName);
    SNode topmostAncestor = null;
    if (inputNode != null && !((inputNode.isDisposed()))) {
      positionInfo.setNodeId(inputNode.getNodeId().toString());
      topmostAncestor = inputNode.getTopmostAncestor();
    }
    myDebugInfo.addUnitPosition(positionInfo, topmostAncestor);
  }

  public DebugInfo getDebugInfo() {
    return myDebugInfo;
  }

  public void fillDebugInfo(String fileName, Map<SNode, TraceablePositionInfo> positions, Map<SNode, ScopePositionInfo> scopePositions, Map<SNode, UnitPositionInfo> unitPositions, SModelDescriptor originalInputModel) {
    if (positions == null && scopePositions == null && unitPositions == null) {
      return;
    }
    if (positions != null) {
      for (SNode out : MapSequence.fromMap(positions).keySet()) {
        SNode input = getOriginalInputNodeForNearestParent(out);
        if (input != null && !((input.isDisposed()))) {
          addTraceablePosition(input, originalInputModel, fileName, MapSequence.fromMap(positions).get(out));
        }
      }
    }
    if (scopePositions != null) {
      for (SNode out : MapSequence.fromMap(scopePositions).keySet()) {
        SNode input = getOriginalInputNodeForNearestParent(out);
        if (input != null && !((input.isDisposed()))) {
          addScopePosition(input, originalInputModel, fileName, MapSequence.fromMap(scopePositions).get(out));
        }
      }
    }
    if (unitPositions != null) {
      for (SNode out : MapSequence.fromMap(unitPositions).keySet()) {
        SNode input = getOriginalInputNodeForNearestParent(out);
        addUnitPosition(input, originalInputModel, fileName, MapSequence.fromMap(unitPositions).get(out));
      }
    }
  }

  private static SNode getOriginalInputNodeForNearestParent(SNode output) {
    while (output != null) {
      SNode input = output;
      while (input != null && !((input.isDisposed())) && (input.getModel() instanceof TransientSModel)) {
        input = TracingUtil.getInputNode(input);
      }
      SNode node = input;
      if (node != null) {
        return node;
      }
      output = output.getParent();
    }
    return null;
  }

  public static void completeDebugInfoFromCache(@NotNull DebugInfo cachedDebugInfo, @NotNull DebugInfo generatedDebugInfo, Iterable<SNode> unchangedRoots) {
    for (SNode root : Sequence.fromIterable(unchangedRoots)) {
      DebugInfoRoot cachedRootInfo = cachedDebugInfo.getRootInfo(root);
      if (cachedRootInfo != null) {
        generatedDebugInfo.putRootInfo(cachedRootInfo);
      }
    }
  }
}
