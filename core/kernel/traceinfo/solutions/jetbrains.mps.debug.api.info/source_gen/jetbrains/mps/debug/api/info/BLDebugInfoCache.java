package jetbrains.mps.debug.api.info;

/*Generated by MPS */

import jetbrains.mps.generator.fileGenerator.BaseModelCache;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.generator.fileGenerator.FileGenerationManager;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.fileGenerator.CacheGenerationContext;
import java.io.File;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.generator.fileGenerator.FileGenerationUtil;
import java.io.OutputStream;
import org.jdom.Element;
import jetbrains.mps.util.JDOMUtil;
import org.jdom.Document;
import java.io.IOException;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.reloading.ClassLoaderManager;
import java.io.InputStream;
import org.jdom.JDOMException;
import jetbrains.mps.project.IModule;
import jetbrains.mps.vfs.FileSystem;
import com.intellij.openapi.application.ApplicationManager;

public class BLDebugInfoCache extends BaseModelCache<DebugInfo> {
  private static final Logger LOG = Logger.getLogger(BLDebugInfoCache.class);
  public static final String TRACE_FILE_NAME = "trace.info";

  public BLDebugInfoCache(FileGenerationManager fileGeneratorManager) {
    super(fileGeneratorManager);
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return "BL Debug Info Cache";
  }

  protected String getCacheFileName() {
    return TRACE_FILE_NAME;
  }

  protected DebugInfo generateCache(CacheGenerationContext ctx) {
    return ctx.getDebugInfo();
  }

  protected File saveCache(@NotNull DebugInfo debugInfo, SModelDescriptor model) {
    IFile defaultOutputDir = FileGenerationUtil.getDefaultOutputDir(model, getOutputDirForWriting(model.getModule(), model.getModule().getOutputFor(model)));
    check_xy6085_a1a3(defaultOutputDir);
    IFile cacheFile = check_xy6085_a0c0d(defaultOutputDir, TRACE_FILE_NAME);
    if (cacheFile == null) {
      return null;
    }

    OutputStream os = null;
    try {
      os = cacheFile.openOutputStream();
      Element element = debugInfo.toXml();
      JDOMUtil.writeDocument(new Document(element), os);
    } catch (IOException e) {
      LOG.error(e);
    } finally {
      if (os != null) {
        try {
          os.close();
        } catch (IOException e) {
          LOG.error(e);
        }
      }
    }

    return cacheFile.toFile();
  }

  @Nullable
  protected DebugInfo readCache(SModelDescriptor descriptor) {
    ClassLoader classLoader = ClassLoaderManager.getInstance().getClassLoaderFor(descriptor.getModule());
    InputStream stream = check_xy6085_a0b0e(classLoader, descriptor, TRACE_FILE_NAME);
    if (stream == null) {
      return null;
    }
    try {
      Document document = JDOMUtil.loadDocument(stream);
      return DebugInfo.fromXml(document.getRootElement());
    } catch (IOException e) {
      LOG.error(e);
    } catch (JDOMException e) {
      LOG.error(e);
    }
    return null;
  }

  private static IFile getOutputDirForWriting(IModule module, String outputPath) {
    if (outputPath == null) {
      return null;
    }

    if (module.isPackaged()) {
      LOG.assertLog(false, "Can not generate trace info for a packaged module.");
    }

    return FileSystem.getFile(outputPath);
  }

  public static BLDebugInfoCache getInstance() {
    return ApplicationManager.getApplication().getComponent(BLDebugInfoCache.class);
  }

  private static Boolean check_xy6085_a1a3(IFile p) {
    if (null == p) {
      return null;
    }
    return p.mkdirs();
  }

  private static IFile check_xy6085_a0c0d(IFile p, String TRACE_FILE_NAME) {
    if (null == p) {
      return null;
    }
    return p.child(TRACE_FILE_NAME);
  }

  private static InputStream check_xy6085_a0b0e(ClassLoader p, SModelDescriptor descriptor, String TRACE_FILE_NAME) {
    if (null == p) {
      return null;
    }
    return p.getResourceAsStream(descriptor.getLongName().replace(".", "/") + "/" + TRACE_FILE_NAME);
  }
}
