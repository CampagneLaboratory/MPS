package jetbrains.mps.traceInfo;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.util.annotation.ToRemove;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.annotations.NotNull;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.LinkedHashMap;
import org.jdom.Element;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jdom.DataConversionException;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public class DebugInfo {
  private static final String ROOT = "root";
  private static final String DEBUG_INFO = "debugInfo";
  private static final String ROOT_ID_ATTR = "nodeId";
  private static final String MODEL_ID_ATTR = "modelId";
  private static final Tuples._2<String, String> UNSPECIFIED = MultiTuple.<String,String>from((String) null, (String) null);
  private Map<Tuples._2<String, String>, DebugInfoRoot> myRoots = MapSequence.fromMap(new HashMap<Tuples._2<String, String>, DebugInfoRoot>());

  /*package*/ DebugInfo() {
  }

  private DebugInfoRoot getOrCreateDebugInfoRoot(SNode rootNode) {
    Tuples._2<String, String> tuple = tupleFrom(rootNode);
    DebugInfoRoot infoRoot = MapSequence.fromMap(myRoots).get(tuple);
    if (infoRoot == null) {
      infoRoot = new DebugInfoRoot(tuple._0(), tuple._1());
      MapSequence.fromMap(myRoots).put(tuple, infoRoot);
    }
    return infoRoot;
  }

  /*package*/ void addPosition(TraceablePositionInfo position, SNode containingRoot) {
    getOrCreateDebugInfoRoot(containingRoot).addPosition(position);
  }

  /*package*/ void addScopePosition(ScopePositionInfo position, SNode containingRoot) {
    getOrCreateDebugInfoRoot(containingRoot).addScopePosition(position);
  }

  /*package*/ void addUnitPosition(UnitPositionInfo unitPosition, SNode containingRoot) {
    getOrCreateDebugInfoRoot(containingRoot).addUnitPosition(unitPosition);
  }

  public DebugInfoRoot getRootInfo(@Nullable SNode root) {
    return MapSequence.fromMap(myRoots).get(tupleFrom(root));
  }

  public DebugInfoRoot getRootInfo(@Nullable SNodePointer root) {
    return MapSequence.fromMap(myRoots).get(tupleFrom(root));
  }

  /*package*/ void putRootInfo(DebugInfoRoot root) {
    MapSequence.fromMap(myRoots).put(MultiTuple.<String,String>from(root.getRootId(), root.getModelId()), root);
  }

  /**
   * Use method getPositionForNode(node): we can not identify a node by id only anymore.
   */
  @Nullable
  @Deprecated
  @ToRemove(version = 3.0)
  public TraceablePositionInfo getPositionForNode(String nodeId) {
    // used in mbeddr 
    for (TraceablePositionInfo element : Sequence.fromIterable(MapSequence.fromMap(myRoots).values()).translate(new ITranslator2<DebugInfoRoot, TraceablePositionInfo>() {
      public Iterable<TraceablePositionInfo> translate(DebugInfoRoot it) {
        return it.getPositions();
      }
    })) {
      if (eq_exfyrk_a0a0b0h(element.getNodeId(), nodeId)) {
        return element;
      }
    }
    return null;
  }

  @Nullable
  public TraceablePositionInfo getPositionForNode(final SNode node) {
    // used in mbeddr 
    DebugInfoRoot root = MapSequence.fromMap(myRoots).get(tupleFrom(SNodeOperations.getContainingRoot(node)));
    if (root == null) {
      return null;
    }
    return SetSequence.fromSet(root.getPositions()).findFirst(new IWhereFilter<TraceablePositionInfo>() {
      public boolean accept(TraceablePositionInfo it) {
        return eq_exfyrk_a0a0a0a0a0d0i(it.getNodeId(), node.getSNodeId().toString());
      }
    });
  }

  /**
   * Its impossible to identify node only by id, since there are nodes from other models here => need model id as well
   */
  @Deprecated
  @NotNull
  public Set<TraceablePositionInfo> getPositions(final String rootId) {
    // for mbeddr 
    return SetSequence.fromSetWithValues(new HashSet<TraceablePositionInfo>(), SetSequence.fromSet(MapSequence.fromMap(myRoots).keySet()).where(new IWhereFilter<Tuples._2<String, String>>() {
      public boolean accept(Tuples._2<String, String> it) {
        return eq_exfyrk_a0a0a0a0a0b0b0j(it._0(), rootId);
      }
    }).translate(new ITranslator2<Tuples._2<String, String>, TraceablePositionInfo>() {
      public Iterable<TraceablePositionInfo> translate(Tuples._2<String, String> it) {
        return MapSequence.fromMap(myRoots).get(it).getPositions();
      }
    }));
  }

  public Set<TraceablePositionInfo> getPositions(SNode rootNode) {
    // for mbeddr 
    assert (SNodeOperations.getParent(rootNode) == null);
    DebugInfoRoot root = MapSequence.fromMap(myRoots).get(tupleFrom(rootNode));
    if (root == null) {
      return SetSequence.fromSet(new HashSet<TraceablePositionInfo>());
    }
    return root.getPositions();
  }

  @NotNull
  public List<UnitPositionInfo> getUnitsForNode(SNode node) {
    final Tuples._2<String, String> tuple = tupleFrom(node);
    DebugInfoRoot debugInfoRoot = MapSequence.fromMap(myRoots).get(tupleFrom(SNodeOperations.getContainingRoot(node)));
    if (debugInfoRoot != null) {
      return SetSequence.fromSet(debugInfoRoot.getUnitPositions()).sort(new ISelector<UnitPositionInfo, Integer>() {
        public Integer select(UnitPositionInfo position) {
          return position.getStartLine();
        }
      }, false).where(new IWhereFilter<UnitPositionInfo>() {
        public boolean accept(UnitPositionInfo it) {
          return eq_exfyrk_a0a0a0a0a0a0a2a11(it.getNodeId(), tuple._0());
        }
      }).toListSequence();
    }
    return ListSequence.fromList(new ArrayList<UnitPositionInfo>());
  }

  @NotNull
  public <T extends PositionInfo> List<T> getInfoForPosition(final String file, int line, final _FunctionTypes._return_P1_E0<? extends Set<T>, ? super DebugInfoRoot> getAllPositionsForRoot) {
    List<T> resultList = ListSequence.fromList(new ArrayList<T>());
    for (T element : Sequence.fromIterable(MapSequence.fromMap(myRoots).values()).where(new IWhereFilter<DebugInfoRoot>() {
      public boolean accept(DebugInfoRoot it) {
        return SetSequence.fromSet(it.getFileNames()).contains(file);
      }
    }).translate(new ITranslator2<DebugInfoRoot, T>() {
      public Iterable<T> translate(DebugInfoRoot it) {
        return getAllPositionsForRoot.invoke(it);
      }
    })) {
      if (element.isPositionInside(file, line)) {
        ListSequence.fromList(resultList).addElement(element);
      }
    }
    return ListSequence.fromList(resultList).sort(new ISelector<T, Integer>() {
      public Integer select(T it) {
        return it.getStartLine();
      }
    }, false).toListSequence();
  }

  @NotNull
  public <T extends PositionInfo> Map<DebugInfoRoot, List<T>> getRootToInfoForPosition(final String file, int line, _FunctionTypes._return_P1_E0<? extends Set<T>, ? super DebugInfoRoot> getAllPositionsForRoot) {
    Map<DebugInfoRoot, List<T>> result = MapSequence.fromMap(new LinkedHashMap<DebugInfoRoot, List<T>>(16, (float) 0.75, false));
    for (DebugInfoRoot root : Sequence.fromIterable(MapSequence.fromMap(myRoots).values()).where(new IWhereFilter<DebugInfoRoot>() {
      public boolean accept(DebugInfoRoot it) {
        return SetSequence.fromSet(it.getFileNames()).contains(file);
      }
    })) {
      List<T> list = MapSequence.fromMap(result).get(root);
      for (T element : SetSequence.fromSet(getAllPositionsForRoot.invoke(root))) {
        if (element.isPositionInside(file, line)) {
          if (list == null) {
            list = ListSequence.fromList(new ArrayList<T>());
            MapSequence.fromMap(result).put(root, list);
          }
          ListSequence.fromList(list).addElement(element);
        }
      }
      if (list != null) {
        MapSequence.fromMap(result).put(root, ListSequence.fromList(list).sort(new ISelector<T, Integer>() {
          public Integer select(T it) {
            return it.getStartLine();
          }
        }, false).toListSequence());
      }
    }
    return result;
  }

  @NotNull
  public List<TraceablePositionInfo> getTraceableInfoForPosition(String file, int line) {
    return getInfoForPosition(file, line, new _FunctionTypes._return_P1_E0<Set<TraceablePositionInfo>, DebugInfoRoot>() {
      public Set<TraceablePositionInfo> invoke(DebugInfoRoot root) {
        return root.getPositions();
      }
    });
  }

  @NotNull
  public List<ScopePositionInfo> getScopeInfoForPosition(String file, int line) {
    return getInfoForPosition(file, line, new _FunctionTypes._return_P1_E0<Set<ScopePositionInfo>, DebugInfoRoot>() {
      public Set<ScopePositionInfo> invoke(DebugInfoRoot root) {
        return root.getScopePositions();
      }
    });
  }

  @NotNull
  public List<UnitPositionInfo> getUnitInfoForPosition(String file, int line) {
    return getInfoForPosition(file, line, new _FunctionTypes._return_P1_E0<Set<UnitPositionInfo>, DebugInfoRoot>() {
      public Set<UnitPositionInfo> invoke(DebugInfoRoot root) {
        return root.getUnitPositions();
      }
    });
  }

  /*package*/ Iterable<DebugInfoRoot> getRoots() {
    return MapSequence.fromMap(myRoots).values();
  }

  public Element toXml() {
    Element element = new Element(DebugInfo.DEBUG_INFO);
    if (myRoots != null) {
      Iterable<Tuples._2<String, String>> sorted = SetSequence.fromSet(MapSequence.fromMap(myRoots).keySet()).sort(new ISelector<Tuples._2<String, String>, String>() {
        public String select(Tuples._2<String, String> it) {
          return it._0();
        }
      }, true);
      for (Tuples._2<String, String> id : sorted) {
        DebugInfoRoot dir = MapSequence.fromMap(myRoots).get(id);
        if (isEmpty_exfyrk_a0b0b0b0s(id._0())) {
          dir.toXml(element);
        } else {
          Element e = new Element(DebugInfo.ROOT);
          e.setAttribute(DebugInfo.ROOT_ID_ATTR, id._0());
          e.setAttribute(DebugInfo.MODEL_ID_ATTR, id._1());
          dir.toXml(e);
          element.addContent(e);
        }
      }
    }
    return element;
  }

  public static DebugInfo fromXml(Element root, SModelDescriptor descriptor) {
    DebugInfo info = new DebugInfo();
    try {
      DebugInfoRoot unspecified = DebugInfoRoot.fromXml(root, null, null);
      if (unspecified != null) {
        MapSequence.fromMap(info.myRoots).put(UNSPECIFIED, unspecified);
      }

      for (Element re : ((List<Element>) root.getChildren(DebugInfo.ROOT))) {
        String rootId = re.getAttributeValue(DebugInfo.ROOT_ID_ATTR);
        String modelId = re.getAttributeValue(DebugInfo.MODEL_ID_ATTR);
        if ((modelId == null || modelId.length() == 0)) {
          modelId = descriptor.getSModelReference().toString();
        }
        MapSequence.fromMap(info.myRoots).put(MultiTuple.<String,String>from(rootId, modelId), DebugInfoRoot.fromXml(re, rootId, modelId));
      }
    } catch (DataConversionException e) {
      throw new RuntimeException(e);
    }
    return info;
  }

  @NotNull
  public static Tuples._2<String, String> tupleFrom(@Nullable SNode node) {
    if (node == null) {
      return UNSPECIFIED;
    }
    return tupleFrom(new SNodePointer(node));
  }

  @NotNull
  public static Tuples._2<String, String> tupleFrom(@Nullable SNodePointer node) {
    if (node == null) {
      return UNSPECIFIED;
    }
    return MultiTuple.<String,String>from(node.getNodeId().toString(), node.getModelReference().toString());
  }

  @Nullable
  public static SNode nodeFrom(@NotNull Tuples._2<String, String> tuple) {
    SNodePointer nodePointer = nodePointerFrom(tuple);
    if (nodePointer == null) {
      return null;
    }
    return nodePointer.getNode();
  }

  @Nullable
  public static SNodePointer nodePointerFrom(@NotNull Tuples._2<String, String> tuple) {
    if (isEmpty_exfyrk_a0a0a4_0(tuple._0()) || isEmpty_exfyrk_a0a0a4(tuple._1())) {
      return null;
    }
    return new SNodePointer(SModelReference.fromString(tuple._1()), SNodeId.fromString(tuple._0()));
  }

  private static boolean eq_exfyrk_a0a0b0h(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_exfyrk_a0a0a0a0a0d0i(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_exfyrk_a0a0a0a0a0b0b0j(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_exfyrk_a0a0a0a0a0a0a2a11(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  public static boolean isEmpty_exfyrk_a0b0b0b0s(String str) {
    return str == null || str.length() == 0;
  }

  public static boolean isEmpty_exfyrk_a0a0a4(String str) {
    return str == null || str.length() == 0;
  }

  public static boolean isEmpty_exfyrk_a0a0a4_0(String str) {
    return str == null || str.length() == 0;
  }
}
