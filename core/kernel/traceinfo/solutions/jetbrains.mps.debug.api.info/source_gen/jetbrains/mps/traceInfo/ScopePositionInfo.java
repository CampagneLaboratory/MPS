package jetbrains.mps.traceInfo;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.SortedMapSequence;
import java.util.TreeMap;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import org.jdom.Element;
import org.jdom.DataConversionException;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;

public class ScopePositionInfo extends PositionInfo {
  private static String VAR_INFO = "varInfo";
  protected static Log log = LogFactory.getLog(ScopePositionInfo.class);

  private Map<String, VarInfo> myVars = SortedMapSequence.fromMap(new TreeMap<String, VarInfo>());
  private Map<SNode, VarInfo> myTempNodeToVarMap = MapSequence.fromMap(new HashMap<SNode, VarInfo>());

  public ScopePositionInfo() {
  }

  public ScopePositionInfo(@NotNull Element element) throws DataConversionException {
    super(element);
    for (Object varInfoElement_ : element.getChildren(ScopePositionInfo.VAR_INFO)) {
      Element varInfoElement = (Element) varInfoElement_;
      VarInfo varInfo = new VarInfo(varInfoElement);
      MapSequence.fromMap(myVars).put(varInfo.getVarName(), varInfo);
    }
  }

  @Override
  protected void saveTo(Element element) {
    super.saveTo(element);
    for (VarInfo varInfo : MapSequence.fromMap(myVars).values()) {
      Element child = new Element(ScopePositionInfo.VAR_INFO);
      varInfo.saveTo(child);
      element.addContent(child);
    }
  }

  public SNode getVarNode(String varName) {
    VarInfo varInfo = MapSequence.fromMap(myVars).get(varName);
    if (varInfo == null) {
      return null;
    }
    return DebugInfo.nodeFrom(MultiTuple.<String,String>from(varInfo.getNodeId(), getModelId()));
  }

  public void addVarInfo(@NotNull SNode node) {
    String varName = node.getName();
    if (varName != null) {
      VarInfo varInfo = new VarInfo();
      varInfo.setVarName(varName);
      MapSequence.fromMap(myTempNodeToVarMap).put(node, varInfo);
      MapSequence.fromMap(myVars).put(varInfo.getVarName(), varInfo);
    } else {
      if (log.isWarnEnabled()) {
        log.warn("variable name is null for node " + node.getNodeId().toString());
      }
    }
  }

  /*package*/ Map<SNode, VarInfo> getTempVarInfoMap() {
    return myTempNodeToVarMap;
  }

  /*package*/ void clearTempVarInfoMap() {
    MapSequence.fromMap(myTempNodeToVarMap).clear();
  }

  /*package*/ void removeVarInfo(VarInfo varInfo) {
    MapSequence.fromMap(myVars).removeKey(varInfo.getVarName());
  }

  @Override
  public int compareTo(PositionInfo p) {
    return super.compareTo(p);
  }
}
