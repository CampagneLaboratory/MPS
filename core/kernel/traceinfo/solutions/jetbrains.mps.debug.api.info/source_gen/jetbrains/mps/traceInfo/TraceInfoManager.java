package jetbrains.mps.traceInfo;

/*Generated by MPS */

import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.components.ApplicationComponent;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.util.Mapper;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.*;

public class TraceInfoManager implements ApplicationComponent {
  private static final Logger LOG = Logger.getLogger(TraceInfoManager.class);

  private final Map<String, Mapper<SNode, String>> myTraceableConcepts = new HashMap<String, Mapper<SNode, String>>();
  private final Map<String, Mapper<SNode, List<SNode>>> myScopeConceptsAndGetters = new HashMap<String, Mapper<SNode, List<SNode>>>();
  private final Map<String, Mapper<SNode, String>> myUnitConceptsToUnitNameGetters = new LinkedHashMap<String, Mapper<SNode, String>>();

  public TraceInfoManager() {
  }

  public boolean isTraceableNode(SNode node) {
    for (String concept : myTraceableConcepts.keySet()) {
      if (SNodeOperations.isInstanceOf(node, concept)) {
        return true;
      }
    }
    return false;
  }

  public boolean isScopeNode(SNode node) {
    for (String concept : myScopeConceptsAndGetters.keySet()) {
      if (SNodeOperations.isInstanceOf(node, concept)) {
        return true;
      }
    }
    return false;
  }

  public boolean isUnitNode(SNode node) {
    for (String concept : myUnitConceptsToUnitNameGetters.keySet()) {
      if (SNodeOperations.isInstanceOf(node, concept)) {
        return true;
      }
    }
    return false;
  }

  public List<SNode> getVarsInScope(SNode scopeNode) {
    for (String concept : myScopeConceptsAndGetters.keySet()) {
      if (SNodeOperations.isInstanceOf(scopeNode, concept)) {
        return myScopeConceptsAndGetters.get(concept).value(scopeNode);
      }
    }
    return new ArrayList<SNode>(0);
  }

  @Nullable
  public String getUnitName(SNode unitNode) {
    for (String concept : myUnitConceptsToUnitNameGetters.keySet()) {
      if (SNodeOperations.isInstanceOf(unitNode, concept)) {
        Mapper<SNode, String> mapper = myUnitConceptsToUnitNameGetters.get(concept);
        if (mapper == null) {
          return null;
        }
        return mapper.value(unitNode);
      }
    }
    return null;
  }

  @Nullable
  public String getPropertyString(SNode traceableNode) {
    for (String concept : myTraceableConcepts.keySet()) {
      if (SNodeOperations.isInstanceOf(traceableNode, concept)) {
        Mapper<SNode, String> mapper = myTraceableConcepts.get(concept);
        if (mapper == null) {
          continue;
        }
        try {
          return mapper.value(traceableNode);
        } catch (Throwable t) {
          return null;
          // todo this is temporary fix
          // see http://buildserver/viewLog.html?buildId=851611&tab=buildLog&buildTypeId=bt157&all=true
        }
      }
    }
    return null;
  }

  public void addTraceableConcept(String fqName) {
    myTraceableConcepts.put(fqName, null);
  }

  public void addTraceableConcept(String fqName, Mapper<SNode, String> propertyGetter) {
    myTraceableConcepts.put(fqName, propertyGetter);
  }

  public void removeTraceableConcept(String fqName) {
    myTraceableConcepts.remove(fqName);
  }

  public void addScopeConcept(String fqName, Mapper<SNode, List<SNode>> varsGetter) {
    myScopeConceptsAndGetters.put(fqName, varsGetter);
  }

  public void removeScopeConcept(String fqName) {
    Mapper<SNode, List<SNode>> result = myScopeConceptsAndGetters.remove(fqName);
    LOG.assertLog(result != null, "No scope concept named " + fqName);
  }

  public void addUnitConcept(String fqName, Mapper<SNode, String> nameGetter) {
    myUnitConceptsToUnitNameGetters.put(fqName, nameGetter);
  }

  public void removeUnitConcept(String fqName) {
    Mapper<SNode, String> result = myUnitConceptsToUnitNameGetters.remove(fqName);
    LOG.assertLog(result != null, "No unit concept named " + fqName);
  }

  @NotNull
  public String getComponentName() {
    return "Trace Info Manager";
  }

  public void initComponent() {
  }

  public void disposeComponent() {
  }

  public static TraceInfoManager getInstance() {
    return ApplicationManager.getApplication().getComponent(TraceInfoManager.class);
  }
}
