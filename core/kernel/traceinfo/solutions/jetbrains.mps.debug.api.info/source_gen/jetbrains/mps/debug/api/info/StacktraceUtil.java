package jetbrains.mps.debug.api.info;

/*Generated by MPS */

import com.intellij.execution.ui.ConsoleView;
import com.intellij.execution.ui.ConsoleViewContentType;
import com.intellij.execution.filters.Filter;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.smodel.SNode;
import com.intellij.execution.filters.HyperlinkInfo;
import com.intellij.openapi.project.Project;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.workbench.editors.MPSEditorOpener;
import com.intellij.execution.impl.ConsoleViewImpl;
import org.jetbrains.annotations.Nullable;

public class StacktraceUtil {
  private static String STRING_START = "at ";

  @Deprecated
  public static void appendStacktraceToConsole(ConsoleView consoleView, String text, ConsoleViewContentType type) {
    // would be removed 
    consoleView.print(text, type);
  }

  private static Filter.Result tryToParseLine(String line, int offset) {
    if (!(StringUtils.trim(line).startsWith(STRING_START))) {
      return null;
    }

    int start = line.indexOf(STRING_START) + STRING_START.length();
    String tmpStr = line.substring(start);
    int parenIndex = tmpStr.indexOf("(");
    if (parenIndex == -1) {
      return null;
    }

    String methodName = tmpStr.substring(0, parenIndex);
    int closingParenIndex = tmpStr.indexOf(")");
    if (closingParenIndex == -1) {
      return null;
    }

    String position = tmpStr.substring(parenIndex + 1, closingParenIndex);
    final SNode nodeToShow = DebugInfoUtil.getNodes(methodName, position);
    if (nodeToShow == null) {
      return null;
    }

    return new Filter.Result(start + parenIndex + 1 + offset, start + closingParenIndex + offset, new HyperlinkInfo() {
      public void navigate(Project p0) {
        StacktraceUtil.showNode(p0, nodeToShow);
      }
    });
  }

  private static void showNode(Project p, SNode node) {
    ProjectOperationContext operationContext = ProjectOperationContext.get(p);
    MPSEditorOpener opener = p.getComponent(MPSEditorOpener.class);
    opener.editNode(node, operationContext);
  }

  public static ConsoleViewImpl createConsoleView(Project project) {
    ConsoleViewImpl result = new ConsoleViewImpl(project, false);
    result.addMessageFilter(new StacktraceUtil.StackTraceFilter());
    return result;
  }

  public static class StackTraceFilter implements Filter {
    public StackTraceFilter() {
    }

    @Nullable
    public Filter.Result applyFilter(String line, int length) {
      return tryToParseLine(line, length - line.length());
    }
  }
}
