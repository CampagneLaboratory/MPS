package jetbrains.mps.traceInfo;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jdom.Element;
import org.jdom.DataConversionException;
import jetbrains.mps.util.InternUtil;
import org.jetbrains.annotations.NonNls;
import org.jdom.Attribute;

public abstract class PositionInfo implements Comparable<PositionInfo> {
  private static String FILE_NAME = "fileName";
  private static String START_LINE = "startLine";
  private static String START_POSITION = "startPosition";
  private static String END_LINE = "endLine";
  private static String END_POSITION = "endPosition";
  private static String NODE_ID = "nodeId";

  private String myFileName;
  @Nullable
  private String myNodeId;
  private int myStartLine;
  private int myStartPosition;
  private int myEndLine;
  private int myEndPosition;
  @Nullable
  private String myCachedModelId;

  public PositionInfo() {
  }

  public PositionInfo(@NotNull Element element) throws DataConversionException {
    myNodeId = InternUtil.intern(check_1myh1n_a0a0a1(element.getAttribute(NODE_ID)));
    myFileName = InternUtil.intern(check_1myh1n_a0a1a1(element.getAttribute(FILE_NAME)));
    myStartLine = element.getAttribute(PositionInfo.START_LINE).getIntValue();
    myStartPosition = element.getAttribute(PositionInfo.START_POSITION).getIntValue();
    myEndLine = element.getAttribute(PositionInfo.END_LINE).getIntValue();
    myEndPosition = element.getAttribute(PositionInfo.END_POSITION).getIntValue();
  }

  @Nullable
  public String getFileName() {
    return myFileName;
  }

  @Nullable
  public String getNodeId() {
    return myNodeId;
  }

  @Nullable
  public String getModelId() {
    return myCachedModelId;
  }

  public int getStartLine() {
    return myStartLine;
  }

  public int getStartPosition() {
    return myStartPosition;
  }

  public int getEndLine() {
    return myEndLine;
  }

  public int getEndPosition() {
    return myEndPosition;
  }

  public void setFileName(String fileName) {
    myFileName = InternUtil.intern(fileName);
  }

  public void setNodeId(@NonNls String nodeId) {
    myNodeId = InternUtil.intern(nodeId);
  }

  /*package*/ void setCachedModelId(@NonNls String modelId) {
    myCachedModelId = InternUtil.intern(modelId);
  }

  public void setStartLine(int startLine) {
    myStartLine = startLine;
  }

  public void setStartPosition(int startPosition) {
    myStartPosition = startPosition;
  }

  public void setEndLine(int endLine) {
    myEndLine = endLine;
  }

  public void setEndPosition(int endPosition) {
    myEndPosition = endPosition;
  }

  public int getLineDistance() {
    return myEndLine - myStartLine;
  }

  public void saveTo(Element element) {
    if (myNodeId != null) {
      element.setAttribute(PositionInfo.NODE_ID, myNodeId);
    }
    element.setAttribute(PositionInfo.FILE_NAME, myFileName);
    element.setAttribute(PositionInfo.START_LINE, Integer.toString(myStartLine));
    element.setAttribute(PositionInfo.START_POSITION, Integer.toString(myStartPosition));
    element.setAttribute(PositionInfo.END_LINE, Integer.toString(myEndLine));
    element.setAttribute(PositionInfo.END_POSITION, Integer.toString(myEndPosition));
  }

  public String toString() {
    return myFileName + "(" + myStartLine + ":" + myStartPosition + " " + myEndLine + ":" + myEndPosition + ")";
  }

  public int compareTo(PositionInfo p) {
    if (getLineDistance() == p.getLineDistance()) {
      if (myStartLine == p.myStartLine) {
        if (myStartPosition == p.myStartPosition) {
          if (myEndPosition == p.myEndPosition) {
            if (myNodeId == null) {
              if (p.myNodeId == null) {
                return 0;
              }
              return -1;
            }
            if (p.myNodeId == null) {
              return 1;
            }
            return myNodeId.compareTo(p.myNodeId);
          } else {
            return myEndPosition - p.myEndPosition;
          }
        } else {
          return myStartPosition - p.myStartPosition;
        }
      } else {
        return myStartLine - p.myStartLine;
      }
    } else {
      return getLineDistance() - p.getLineDistance();
    }
  }

  public boolean isOccupyTheSameSpace(PositionInfo p) {
    return (eq_1myh1n_a0a0a0a0s(myStartLine, p.myStartLine)) && (eq_1myh1n_a0a0a0a0s_0(myEndLine, p.myEndLine)) && (eq_1myh1n_a0a0a0a81(myStartPosition, p.myStartPosition)) && (eq_1myh1n_a0a0a0s(myEndPosition, p.myEndPosition));
  }

  public boolean isPositionInside(String file, int line) {
    return eq_1myh1n_a0a0a0t(myFileName, file) && myStartLine <= line && line <= myEndLine;
  }

  public void fillFrom(PositionInfo position) {
    myNodeId = position.myNodeId;
    myCachedModelId = position.myCachedModelId;
    myFileName = position.myFileName;
    myStartLine = position.myStartLine;
    myStartPosition = position.myStartPosition;
    myEndLine = position.myEndLine;
    myEndPosition = position.myEndPosition;
  }

  private static String check_1myh1n_a0a0a1(Attribute checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getValue();
    }
    return null;
  }

  private static String check_1myh1n_a0a1a1(Attribute checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getValue();
    }
    return null;
  }

  private static boolean eq_1myh1n_a0a0a0a0s(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_1myh1n_a0a0a0a0s_0(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_1myh1n_a0a0a0a81(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_1myh1n_a0a0a0s(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_1myh1n_a0a0a0t(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
