package jetbrains.mps.traceInfo;

/*Generated by MPS */

import org.jetbrains.annotations.Nls;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.TreeSet;
import java.util.HashSet;
import org.jdom.Element;
import java.util.Comparator;
import org.jdom.DataConversionException;
import java.util.List;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.smodel.SModelDescriptor;
import java.io.File;
import jetbrains.mps.vfs.FileSystem;

public class DebugInfoRoot {
  private static final String NODE_INFO = "nodeInfo";
  private static final String SCOPE_INFO = "scopeInfo";
  private static final String UNIT_INFO = "unitInfo";

  private final String myRootId;
  @Nls
  private final String myModelId;
  private final Set<TraceablePositionInfo> myPositions = SetSequence.fromSet(new TreeSet<TraceablePositionInfo>());
  private final Set<ScopePositionInfo> myScopePositions = SetSequence.fromSet(new TreeSet<ScopePositionInfo>());
  private final Set<UnitPositionInfo> myUnitPositions = SetSequence.fromSet(new TreeSet<UnitPositionInfo>());
  private final Set<String> myFileNames = SetSequence.fromSet(new HashSet<String>());

  public DebugInfoRoot(String rootId, String modelId) {
    myRootId = rootId;
    myModelId = modelId;
  }

  public void addPosition(TraceablePositionInfo position) {
    SetSequence.fromSet(myFileNames).addElement(position.getFileName());
    SetSequence.fromSet(myPositions).addElement(position);
    position.setCachedModelId(myModelId);
  }

  public void addScopePosition(ScopePositionInfo position) {
    SetSequence.fromSet(myFileNames).addElement(position.getFileName());
    SetSequence.fromSet(myScopePositions).addElement(position);
    position.setCachedModelId(myModelId);
  }

  public void addUnitPosition(UnitPositionInfo unitPosition) {
    SetSequence.fromSet(myFileNames).addElement(unitPosition.getFileName());
    SetSequence.fromSet(myUnitPositions).addElement(unitPosition);
    unitPosition.setCachedModelId(myModelId);
  }

  public String getRootId() {
    return myRootId;
  }

  /*package*/ String getModelId() {
    return myModelId;
  }

  public Set<TraceablePositionInfo> getPositions() {
    return myPositions;
  }

  public Set<ScopePositionInfo> getScopePositions() {
    return myScopePositions;
  }

  public Set<UnitPositionInfo> getUnitPositions() {
    return myUnitPositions;
  }

  public Set<String> getFileNames() {
    return myFileNames;
  }

  public void toXml(Element container) {
    for (PositionInfo position : SetSequence.fromSet(myPositions).toListSequence().sort(new Comparator<TraceablePositionInfo>() {
      public int compare(TraceablePositionInfo a, TraceablePositionInfo b) {
        return a.compareTo(b);
      }
    }, true)) {
      Element e = new Element(DebugInfoRoot.NODE_INFO);
      position.saveTo(e);
      container.addContent(e);
    }
    for (ScopePositionInfo position : SetSequence.fromSet(myScopePositions).toListSequence().sort(new Comparator<ScopePositionInfo>() {
      public int compare(ScopePositionInfo a, ScopePositionInfo b) {
        return a.compareTo(b);
      }
    }, true)) {
      Element e = new Element(DebugInfoRoot.SCOPE_INFO);
      position.saveTo(e);
      container.addContent(e);
    }
    for (UnitPositionInfo position : SetSequence.fromSet(myUnitPositions).toListSequence().sort(new Comparator<UnitPositionInfo>() {
      public int compare(UnitPositionInfo a, UnitPositionInfo b) {
        return a.compareTo(b);
      }
    }, true)) {
      Element e = new Element(DebugInfoRoot.UNIT_INFO);
      position.saveTo(e);
      container.addContent(e);
    }
  }

  public static DebugInfoRoot fromXml(Element element, String id, String modelId) throws DataConversionException {
    Element root = element;
    DebugInfoRoot result = new DebugInfoRoot(id, modelId);
    for (Element e : ((List<Element>) root.getChildren(DebugInfoRoot.NODE_INFO))) {
      result.addPosition(new TraceablePositionInfo(e));
    }
    for (Element e : ((List<Element>) root.getChildren(DebugInfoRoot.SCOPE_INFO))) {
      result.addScopePosition(new ScopePositionInfo(e));
    }
    for (Element e : ((List<Element>) root.getChildren(DebugInfoRoot.UNIT_INFO))) {
      result.addUnitPosition(new UnitPositionInfo(e));
    }
    return result;
  }

  public static IFile getDebugFileOfModel(String outputDir, SModelDescriptor model) {
    String modelName = model.getLongName().replace(".", File.separator);
    String debugPath = modelName.substring(0, modelName.length()) + File.separator + ".debug";
    return FileSystem.getInstance().getFileByPath(outputDir + File.separator + debugPath);
  }
}
