package jetbrains.mps.traceInfo.testWeavingGenerated.data.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class RootConcept extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.RootConcept";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String WEAVE = "weave";
  public static final String WEAVE_EACH = "weaveEach";
  public static final String WEAVE_MANY = "weaveMany";
  public static final String WEAVE_EACH_MANY = "weaveEachMany";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public RootConcept(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(RootConcept.NAME);
  }

  public void setName(String value) {
    this.setProperty(RootConcept.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(RootConcept.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(RootConcept.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(RootConcept.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(RootConcept.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(RootConcept.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(RootConcept.VIRTUAL_PACKAGE, value);
  }

  public int getWeavesCount() {
    return this.getChildCount(RootConcept.WEAVE);
  }

  public Iterator<ChildConceptWeave> weaves() {
    return this.children(ChildConceptWeave.class, RootConcept.WEAVE);
  }

  public List<ChildConceptWeave> getWeaves() {
    return this.getChildren(ChildConceptWeave.class, RootConcept.WEAVE);
  }

  public void addWeave(ChildConceptWeave node) {
    this.addChild(RootConcept.WEAVE, node);
  }

  public void insertWeave(ChildConceptWeave prev, ChildConceptWeave node) {
    this.insertChild(prev, RootConcept.WEAVE, node);
  }

  public int getWeaveEachsCount() {
    return this.getChildCount(RootConcept.WEAVE_EACH);
  }

  public Iterator<ChildConceptWeaveEach> weaveEachs() {
    return this.children(ChildConceptWeaveEach.class, RootConcept.WEAVE_EACH);
  }

  public List<ChildConceptWeaveEach> getWeaveEachs() {
    return this.getChildren(ChildConceptWeaveEach.class, RootConcept.WEAVE_EACH);
  }

  public void addWeaveEach(ChildConceptWeaveEach node) {
    this.addChild(RootConcept.WEAVE_EACH, node);
  }

  public void insertWeaveEach(ChildConceptWeaveEach prev, ChildConceptWeaveEach node) {
    this.insertChild(prev, RootConcept.WEAVE_EACH, node);
  }

  public int getWeaveManiesCount() {
    return this.getChildCount(RootConcept.WEAVE_MANY);
  }

  public Iterator<ChildConceptWeaveMany> weaveManies() {
    return this.children(ChildConceptWeaveMany.class, RootConcept.WEAVE_MANY);
  }

  public List<ChildConceptWeaveMany> getWeaveManies() {
    return this.getChildren(ChildConceptWeaveMany.class, RootConcept.WEAVE_MANY);
  }

  public void addWeaveMany(ChildConceptWeaveMany node) {
    this.addChild(RootConcept.WEAVE_MANY, node);
  }

  public void insertWeaveMany(ChildConceptWeaveMany prev, ChildConceptWeaveMany node) {
    this.insertChild(prev, RootConcept.WEAVE_MANY, node);
  }

  public int getWeaveEachManiesCount() {
    return this.getChildCount(RootConcept.WEAVE_EACH_MANY);
  }

  public Iterator<ChildConceptWeaveEachMany> weaveEachManies() {
    return this.children(ChildConceptWeaveEachMany.class, RootConcept.WEAVE_EACH_MANY);
  }

  public List<ChildConceptWeaveEachMany> getWeaveEachManies() {
    return this.getChildren(ChildConceptWeaveEachMany.class, RootConcept.WEAVE_EACH_MANY);
  }

  public void addWeaveEachMany(ChildConceptWeaveEachMany node) {
    this.addChild(RootConcept.WEAVE_EACH_MANY, node);
  }

  public void insertWeaveEachMany(ChildConceptWeaveEachMany prev, ChildConceptWeaveEachMany node) {
    this.insertChild(prev, RootConcept.WEAVE_EACH_MANY, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(RootConcept.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, RootConcept.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, RootConcept.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(RootConcept.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, RootConcept.SMODEL_ATTRIBUTE, node);
  }

  public static RootConcept newInstance(SModel sm, boolean init) {
    return (RootConcept) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.RootConcept", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static RootConcept newInstance(SModel sm) {
    return RootConcept.newInstance(sm, false);
  }
}
