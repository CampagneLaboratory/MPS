package jetbrains.mps.traceInfo;

/*Generated by MPS */

import java.util.SortedMap;
import jetbrains.mps.internal.collections.runtime.SortedMapSequence;
import java.util.TreeMap;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import org.jdom.Element;
import org.jdom.DataConversionException;
import org.jetbrains.annotations.Nls;
import org.apache.log4j.Level;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.IMapping;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ScopePositionInfo extends PositionInfo {
  private static String VAR_INFO = "varInfo";
  private SortedMap<String, VarInfo> myNamesToVars = SortedMapSequence.fromMap(new TreeMap<String, VarInfo>());
  private Map<SNode, VarInfo> myTempNodeToVarMap = MapSequence.fromMap(new HashMap<SNode, VarInfo>());

  public ScopePositionInfo() {
  }

  public ScopePositionInfo(@NotNull Element element) throws DataConversionException {
    super(element);
    for (Object varInfoElement_ : element.getChildren(ScopePositionInfo.VAR_INFO)) {
      Element varInfoElement = (Element) varInfoElement_;
      VarInfo varInfo = new VarInfo(varInfoElement);
      SortedMapSequence.fromMap(myNamesToVars).put(varInfo.getVarName(), varInfo);
    }
  }

  @Override
  protected void saveTo(Element element) {
    super.saveTo(element);
    for (VarInfo varInfo : SortedMapSequence.fromMap(myNamesToVars).values()) {
      Element child = new Element(ScopePositionInfo.VAR_INFO);
      varInfo.saveTo(child);
      element.addContent(child);
    }
  }

  @Nls
  public String getVarId(String varName) {
    return check_azb46d_a0a6(SortedMapSequence.fromMap(myNamesToVars).get(varName));
  }

  public void addVarInfo(@NotNull SNode node) {
    String varName = node.getName();
    if (varName != null) {
      VarInfo varInfo = new VarInfo();
      varInfo.setVarName(varName);
      MapSequence.fromMap(myTempNodeToVarMap).put(node, varInfo);
      SortedMapSequence.fromMap(myNamesToVars).put(varInfo.getVarName(), varInfo);
    } else {
      if (LOG.isEnabledFor(Level.WARN)) {
        LOG.warn("variable name is null for node " + node.getNodeId().toString());
      }
    }
  }

  /*package*/ Map<SNode, VarInfo> getTempVarInfoMap() {
    return myTempNodeToVarMap;
  }

  /*package*/ void clearTempVarInfoMap() {
    MapSequence.fromMap(myTempNodeToVarMap).clear();
  }

  /*package*/ void removeVarInfo(VarInfo varInfo) {
    SortedMapSequence.fromMap(myNamesToVars).removeKey(varInfo.getVarName());
  }

  @Override
  public int compareTo(PositionInfo p) {
    int result = super.compareTo(p);
    if (result != 0) {
      return result;
    }
    if (SortedMapSequence.fromMap(myNamesToVars).count() == SortedMapSequence.fromMap(((ScopePositionInfo) p).myNamesToVars).count()) {
      Iterator<IMapping<String, VarInfo>> vars = SortedMapSequence.fromMap(myNamesToVars).iterator();
      Iterator<IMapping<String, VarInfo>> theirvars = SortedMapSequence.fromMap(((ScopePositionInfo) p).myNamesToVars).iterator();
      while (vars.hasNext()) {
        IMapping<String, VarInfo> first = vars.next();
        IMapping<String, VarInfo> theirfirst = theirvars.next();
        int compare = compare(first, theirfirst);
        if (compare != 0) {
          return compare;
        }
      }
      return 0;
    }
    return SortedMapSequence.fromMap(myNamesToVars).count() - SortedMapSequence.fromMap(((ScopePositionInfo) p).myNamesToVars).count();
  }

  public int compare(IMapping<String, VarInfo> mapping1, IMapping<String, VarInfo> mapping2) {
    if (mapping1.key() == null) {
      if (mapping2.key() != null) {
        return 1;
      }
    } else {
      if (mapping2.key() == null) {
        return -1;
      }
      int compareTo = mapping1.key().compareTo(mapping2.key());
      if (compareTo != 0) {
        return compareTo;
      }
    }

    String id1 = mapping1.value().getNodeId();
    String id2 = mapping2.value().getNodeId();
    if (id1 == null) {
      if (id2 == null) {
        return 0;
      }
      return -1;
    }
    if (id2 == null) {
      return 1;
    }
    return id1.compareTo(id2);
  }

  protected static Logger LOG = LogManager.getLogger(ScopePositionInfo.class);

  private static String check_azb46d_a0a6(VarInfo checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getNodeId();
    }
    return null;
  }
}
