package jetbrains.mps.traceInfo;

/*Generated by MPS */

import jetbrains.mps.generator.TransientModelsModule;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.Map;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.generator.TransientSModel;
import jetbrains.mps.generator.template.TracingUtil;
import org.jetbrains.annotations.NotNull;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class DebugInfoBuilder {
  private final DebugInfo myDebugInfo = new DebugInfo();

  public DebugInfoBuilder() {
  }

  public void addTraceablePosition(SNode inputNode, SModel inputModel, String fileName, TraceablePositionInfo positionInfo) {
    positionInfo.setNodeId(inputNode.getNodeId().toString());
    positionInfo.setFileName(fileName);
    SNode topmostAncestor = inputNode.getContainingRoot();
    myDebugInfo.addPosition(positionInfo, topmostAncestor);
  }

  public void addScopePosition(SNode inputNode, SModel inputModel, String fileName, ScopePositionInfo positionInfo) {
    positionInfo.setNodeId(inputNode.getNodeId().toString());
    positionInfo.setFileName(fileName);
    Map<SNode, VarInfo> varMap = positionInfo.getTempVarInfoMap();
    for (SNode varNode : varMap.keySet()) {
      SNode originalVar = getOriginalInputNodeForNearestParent(varNode);
      VarInfo varInfo = varMap.get(varNode);
      if (originalVar != null && !((SNodeOperations.isDisposed(originalVar)))) {
        varInfo.setNodeId(originalVar.getNodeId().toString());
      } else {
        positionInfo.removeVarInfo(varInfo);
      }
    }
    positionInfo.clearTempVarInfoMap();
    myDebugInfo.addScopePosition(positionInfo, inputNode.getContainingRoot());
  }

  public void addUnitPosition(SNode inputNode, SModel inputModel, String fileName, UnitPositionInfo positionInfo) {
    positionInfo.setFileName(fileName);
    SNode topmostAncestor = null;
    if (inputNode != null && !((SNodeOperations.isDisposed(inputNode)))) {
      positionInfo.setNodeId(inputNode.getNodeId().toString());
      topmostAncestor = inputNode.getContainingRoot();
    }
    myDebugInfo.addUnitPosition(positionInfo, topmostAncestor);
  }

  public DebugInfo getDebugInfo() {
    return myDebugInfo;
  }

  public void fillDebugInfo(String fileName, Map<SNode, TraceablePositionInfo> positions, Map<SNode, ScopePositionInfo> scopePositions, Map<SNode, UnitPositionInfo> unitPositions, SModel originalInputModel) {
    if (positions == null && scopePositions == null && unitPositions == null) {
      return;
    }
    if (positions != null) {
      for (SNode out : MapSequence.fromMap(positions).keySet()) {
        SNode input = getOriginalInputNodeForNearestParent(out);
        if (input != null && !((SNodeOperations.isDisposed(input)))) {
          addTraceablePosition(input, originalInputModel, fileName, MapSequence.fromMap(positions).get(out));
        }
      }
    }
    if (scopePositions != null) {
      for (SNode out : MapSequence.fromMap(scopePositions).keySet()) {
        SNode input = getOriginalInputNodeForNearestParent(out);
        if (input != null && !((SNodeOperations.isDisposed(input)))) {
          addScopePosition(input, originalInputModel, fileName, MapSequence.fromMap(scopePositions).get(out));
        }
      }
    }
    if (unitPositions != null) {
      for (SNode out : MapSequence.fromMap(unitPositions).keySet()) {
        SNode input = getOriginalInputNodeForNearestParent(out);
        addUnitPosition(input, originalInputModel, fileName, MapSequence.fromMap(unitPositions).get(out));
      }
    }
  }

  private static SNode getOriginalInputNodeForNearestParent(SNode output) {
    while (output != null) {
      SNode input = output;
      while (input != null && !((SNodeOperations.isDisposed(input))) && (input.getModel() .getModule() instanceof TransientModelsModule)) {
        input = TracingUtil.getInputNode(input);
      }
      SNode node = input;
      if (node != null) {
        return node;
      }
      output = output.getParent();
    }
    return null;
  }

  public static void completeDebugInfoFromCache(@NotNull DebugInfo cachedDebugInfo, @NotNull DebugInfo generatedDebugInfo, Iterable<String> unchangedFiles) {
    Set<String> files = SetSequence.fromSetWithValues(new HashSet<String>(), unchangedFiles);
    for (DebugInfoRoot cachedRoot : Sequence.fromIterable(cachedDebugInfo.getRoots())) {
      DebugInfoRoot generatedRoot = generatedDebugInfo.getRootInfo(cachedRoot.getNodeRef());
      if (generatedRoot == null) {
        generatedRoot = new DebugInfoRoot(cachedRoot.getNodeRef());
        generatedDebugInfo.putRootInfo(generatedRoot);
      }
      for (TraceablePositionInfo position : SetSequence.fromSet(cachedRoot.getPositions())) {
        if (SetSequence.fromSet(files).contains(position.getFileName())) {
          generatedRoot.addPosition(position);
        }
      }
      for (ScopePositionInfo position : SetSequence.fromSet(cachedRoot.getScopePositions())) {
        if (SetSequence.fromSet(files).contains(position.getFileName())) {
          generatedRoot.addScopePosition(position);
        }
      }
      for (UnitPositionInfo position : SetSequence.fromSet(cachedRoot.getUnitPositions())) {
        if (SetSequence.fromSet(files).contains(position.getFileName())) {
          generatedRoot.addUnitPosition(position);
        }
      }
    }
  }
}
