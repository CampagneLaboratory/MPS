package jetbrains.mps.debug.api.info;

/*Generated by MPS */

import com.intellij.execution.impl.ConsoleViewImpl;
import com.intellij.execution.ui.ConsoleViewContentType;
import com.intellij.execution.filters.Filter;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.smodel.SNode;
import com.intellij.execution.filters.HyperlinkInfo;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.workbench.editors.MPSEditorOpener;

public class StacktraceUtil {
  private static String STRING_START = "at ";

  public static void appendStacktraceToConsole(ConsoleViewImpl consoleView, String text, ConsoleViewContentType type) {
    consoleView.print(text, type);
  }

  private static Filter.Result tryToParseLine(String line, int offset) {
    if (!(StringUtils.trim(line).startsWith(STRING_START))) {
      return null;
    }

    int start = line.indexOf(STRING_START) + STRING_START.length();
    String tmpStr = line.substring(start);
    int parenIndex = tmpStr.indexOf("(");
    if (parenIndex == -1) {
      return null;
    }

    String methodName = tmpStr.substring(0, parenIndex);
    int closingParenIndex = tmpStr.indexOf(")");
    if (closingParenIndex == -1) {
      return null;
    }

    String position = tmpStr.substring(parenIndex + 1, closingParenIndex);
    final SNode nodeToShow = getNodes(methodName, position);
    if (nodeToShow == null) {
      return null;
    }

    return new Filter.Result(start + parenIndex + 1 + offset, start + closingParenIndex + offset, new HyperlinkInfo() {
      public void navigate(Project p0) {
        StacktraceUtil.showNode(p0, nodeToShow);
      }
    });
  }

  @Nullable
  private static <T> T findInDebugInfo(@NotNull String className, @NotNull final _FunctionTypes._return_P2_E0<? extends T, ? super DebugInfo, ? super SModelDescriptor> nodeGetter) {
    int lastDot = className.lastIndexOf(".");
    String pkg = (lastDot == -1 ?
      "" :
      className.substring(0, lastDot)
    );
    for (String stereotype : Sequence.fromIterable(Sequence.fromArray(SModelStereotype.values))) {
      final SModelDescriptor descriptor = SModelRepository.getInstance().getModelDescriptor(new SModelFqName(pkg, stereotype));
      if (descriptor == null) {
        continue;
      }
      if (SModelStereotype.isStubModelStereotype(descriptor.getStereotype())) {
        continue;
      }

      final DebugInfo info = BLDebugInfoCache.getInstance().get(descriptor);
      if (info == null) {
        continue;
      }

      final Wrappers._T<T> result = new Wrappers._T<T>();
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          result.value = nodeGetter.invoke(info, descriptor);
        }
      });

      if (result.value != null) {
        return result.value;
      }
    }

    return null;
  }

  @Nullable
  public static String getUnitName(@NotNull String className, final String file, final int position) {
    return findInDebugInfo(className, new _FunctionTypes._return_P2_E0<String, DebugInfo, SModelDescriptor>() {
      public String invoke(DebugInfo info, SModelDescriptor descriptor) {
        return info.getUnitNameForLine(file, position);
      }
    });
  }

  @Nullable
  public static SNode getUnitNode(@NotNull String className, final String file, final int position) {
    return findInDebugInfo(className, new _FunctionTypes._return_P2_E0<SNode, DebugInfo, SModelDescriptor>() {
      public SNode invoke(DebugInfo result, SModelDescriptor descriptor) {
        return result.getUnitNodeForLine(file, position, descriptor.getSModel());
      }
    });
  }

  @Nullable
  public static SNode getNode(@NotNull String className, final String file, final int position) {
    return findInDebugInfo(className, new _FunctionTypes._return_P2_E0<SNode, DebugInfo, SModelDescriptor>() {
      public SNode invoke(DebugInfo result, SModelDescriptor descriptor) {
        return result.getNodeForLine(file, position, descriptor.getSModel());
      }
    });
  }

  @Nullable
  public static SNode getVar(@NotNull String className, final String file, final int position, @NotNull final String varName) {
    return findInDebugInfo(className, new _FunctionTypes._return_P2_E0<SNode, DebugInfo, SModelDescriptor>() {
      public SNode invoke(DebugInfo result, SModelDescriptor descriptor) {
        return result.getVarForLine(file, position, descriptor.getSModel(), varName);
      }
    });
  }

  private static SNode getNodes(String stacktraceLine, String position) {
    int lastDot = stacktraceLine.lastIndexOf(".");
    String pkg = (lastDot == -1 ?
      "" :
      stacktraceLine.substring(0, lastDot)
    );
    String[] split = position.split(":");
    if (split.length >= 2) {
      return getNode(pkg, split[0], Integer.parseInt(split[1]));
    }
    return null;
  }

  public static String getGeneratedFileName(SNode node) {
    SNode snode = ((SNode) node);
    SModel model = snode.getModel();
    DebugInfo debugInfo = BLDebugInfoCache.getInstance().get(model.getModelDescriptor());
    if (debugInfo == null) {
      return null;
    }
    PositionInfo positionInfo = debugInfo.getPositionForNode(snode.getId());
    if (positionInfo == null) {
      return null;
    }
    return model.getLongName() + "." + positionInfo.getFileName();
  }

  private static void showNode(Project p, SNode node) {
    ProjectOperationContext operationContext = ProjectOperationContext.get(p);
    MPSEditorOpener opener = p.getComponent(MPSEditorOpener.class);
    opener.editNode(node, operationContext);
  }

  public static ConsoleViewImpl createConsoleView(Project project) {
    ConsoleViewImpl result = new ConsoleViewImpl(project, false);
    result.addMessageFilter(new StacktraceUtil.StackTraceFilter());
    return result;
  }

  public static class StackTraceFilter implements Filter {
    public StackTraceFilter() {
    }

    @Nullable
    public Filter.Result applyFilter(String line, int length) {
      return tryToParseLine(line, length - line.length());
    }
  }
}
