package jetbrains.mps.smodel.persistence.def.v0;

import jetbrains.mps.externalResolve.ExternalResolveInfoParser;
import jetbrains.mps.externalResolve.ExternalResolver;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SNodeId;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * Igor Alshannikov
 * Oct 18, 2007
 */
public class ERI2IDConverter {
  private static final Logger LOG = Logger.getLogger(ERI2IDConverter.class);

  public static SNodeId convert(SNode sourceNode, String role, String extResolveInfo) {
    try {
      String nodeId = ourERI2IdMap.get(extResolveInfo);
      if (nodeId != null) {
        return SNodeId.fromString(nodeId);
      }

      String memType = ExternalResolveInfoParser.getMemberType(extResolveInfo);
      if (ExternalResolver.CLASSIFIER.equals(memType)) {
        String className = ExternalResolver.getHumanFriendlyString(extResolveInfo);
        return SNodeId.fromString("~" + className);
      }

      if (ExternalResolver.ENUM_CONST.equals(memType) ||
              ExternalResolver.FIELD.equals(memType) ||
              ExternalResolver.STATIC_FIELD.equals(memType)) {
        String clsResolveInfo = ExternalResolveInfoParser.getMembersClassifierResolveInfo(extResolveInfo, memType);
        String className = ExternalResolver.getHumanFriendlyString(clsResolveInfo);
        String memberName = ExternalResolver.getHumanFriendlyString(extResolveInfo);
        return SNodeId.fromString("~" + className + "." + memberName);
      }
    } catch (Exception e) {
      //
    }
//    LOG.error("couldn't convert reference '" + role + "' ERI=" + extResolveInfo, sourceNode);
    return null;
  }


  public static final Map<String, String> ourERI2IdMap = new HashMap<String, String>();
  public static final Set<String> ourUsedERISet = new HashSet<String>();

  // ERI -> id
  static {
    ourERI2IdMap.put("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]addClosingParenthesis((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Expression]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~ParenthesisUtil.addClosingParenthesis(jetbrains.mps.baseLanguage.structure.Expression,boolean,jetbrains.mps.nodeEditor.EditorContext):void");
    ourERI2IdMap.put("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]moveParenthesisToTheRight((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ParenthesizedExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~ParenthesisUtil.moveParenthesisToTheRight(jetbrains.mps.baseLanguage.structure.ParenthesizedExpression,jetbrains.mps.nodeEditor.EditorContext):void");
    ourERI2IdMap.put("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]moveParenthesisToTheLeft((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ParenthesizedExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~ParenthesisUtil.moveParenthesisToTheLeft(jetbrains.mps.baseLanguage.structure.ParenthesizedExpression,jetbrains.mps.nodeEditor.EditorContext):void");
    ourERI2IdMap.put("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]moveParenthesisToTheLeftInside((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ParenthesizedExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~ParenthesisUtil.moveParenthesisToTheLeftInside(jetbrains.mps.baseLanguage.structure.ParenthesizedExpression,jetbrains.mps.nodeEditor.EditorContext):void");
    ourERI2IdMap.put("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]moveParenthesisToTheRightInside((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ParenthesizedExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~ParenthesisUtil.moveParenthesisToTheRightInside(jetbrains.mps.baseLanguage.structure.ParenthesizedExpression,jetbrains.mps.nodeEditor.EditorContext):void");
    ourERI2IdMap.put("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]checkOperationWRTPriority((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~ParenthesisUtil.checkOperationWRTPriority(jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("static method ([Classifier]PresentationManager).([StaticMethodDeclaration]toString_1((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~PresentationManager.toString_1(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]CheckPermission_AnnotationLink).([StaticMethodDeclaration]setCheckPermission((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CheckPermissionAnnotation])))", "~CheckPermission_AnnotationLink.setCheckPermission(jetbrains.mps.core.structure.BaseConcept,jetbrains.mps.webr.userManagement.structure.CheckPermissionAnnotation):void");
    ourERI2IdMap.put("static method ([Classifier]CheckPermission_AnnotationLink).([StaticMethodDeclaration]getCheckPermission((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept])))", "~CheckPermission_AnnotationLink.getCheckPermission(jetbrains.mps.core.structure.BaseConcept):jetbrains.mps.webr.userManagement.structure.CheckPermissionAnnotation");
    ourERI2IdMap.put("method ([Classifier]AbstractDateTime).([InstanceMethodDeclaration]toCalendar((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale])))", "~AbstractDateTime.toCalendar(java.util.Locale):java.util.Calendar");
    ourERI2IdMap.put("constructor [Classifier]Date[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long))", "~Date.<init>(long)");
    ourERI2IdMap.put("constructor [Classifier]Text[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~Text.<init>(java.lang.String)");
    ourERI2IdMap.put("method ([Classifier]DevKit).([InstanceMethodDeclaration]getName())", "~DevKit.getName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]FileItem).([InstanceMethodDeclaration]getString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~FileItem.getString(java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]FileUploadBase).([InstanceMethodDeclaration]setSizeMax((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))", "~FileUploadBase.setSizeMax(long):void");
    ourERI2IdMap.put("method ([Classifier]FileUploadBase).([InstanceMethodDeclaration]setHeaderEncoding((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~FileUploadBase.setHeaderEncoding(java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]FileUploadBase).([StaticMethodDeclaration]isMultipartContent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest])))", "~FileUploadBase.isMultipartContent(javax.servlet.http.HttpServletRequest):boolean");
    ourERI2IdMap.put("constructor [Classifier]NotificationTemplateCallHandler[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextBuilder]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Map$Entry, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [Object]>]]))", "~NotificationTemplateCallHandler.<init>(webr.framework.textBuilder.TextBuilder,java.util.Map$Entry[])");
    ourERI2IdMap.put("method ([Classifier]NotificationTemplateCallHandler).([InstanceMethodDeclaration]render())", "~NotificationTemplateCallHandler.render():java.lang.String");
    ourERI2IdMap.put("constructor [Classifier]MapEntry[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any))", "~MapEntry.<init>(java.lang.Object,java.lang.Object)");
    ourERI2IdMap.put("method ([Classifier]ITraversal).([InstanceMethodDeclaration]yieldValue((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))", "~ITraversal.yieldValue(java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]ITraversal).([InstanceMethodDeclaration]stopCursor())", "~ITraversal.stopCursor():void");
    ourERI2IdMap.put("static method ([Classifier]CursorFactory).([StaticMethodDeclaration]createCursor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~CursorFactory.createCursor(java.lang.Iterable):jetbrains.mps.baseLanguage.ext.collections.internal.ICursor");
    ourERI2IdMap.put("method ([Classifier]ICursor).([InstanceMethodDeclaration]moveToNext())", "~ICursor.moveToNext():boolean");
    ourERI2IdMap.put("method ([Classifier]ICursor).([InstanceMethodDeclaration]getCurrent())", "~ICursor.getCurrent():java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]ICursor).([InstanceMethodDeclaration]release())", "~ICursor.release():void");
    ourERI2IdMap.put("constructor [Classifier]SequenceWithSupplier[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IValuesSupplier, <any_>]))", "~SequenceWithSupplier.<init>(jetbrains.mps.baseLanguage.ext.collections.internal.IValuesSupplier)");
    ourERI2IdMap.put("method ([Classifier]HostToBaseUrlConfiguration).([InstanceMethodDeclaration]setDefaultBaseUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~HostToBaseUrlConfiguration.setDefaultBaseUrl(java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]MatchingUtil).([StaticMethodDeclaration]matchNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~MatchingUtil.matchNodes(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("static method ([Classifier]PatternAddingUtil).([StaticMethodDeclaration]isPatternApplicable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~PatternAddingUtil.isPatternApplicable(jetbrains.mps.nodeEditor.EditorContext):boolean");
    ourERI2IdMap.put("static method ([Classifier]PatternAddingUtil).([StaticMethodDeclaration]addVariablePattern((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~PatternAddingUtil.addVariablePattern(jetbrains.mps.nodeEditor.EditorContext):void");
    ourERI2IdMap.put("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getName())", "~TraversalAxis.getName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getValue())", "~TraversalAxis.getValue():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]getConstants())", "~TraversalAxis.getConstants():java.util.List");
    ourERI2IdMap.put("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]parseValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TraversalAxis.parseValue(java.lang.String):jetbrains.mps.ypath.structure.TraversalAxis");
    ourERI2IdMap.put("method ([Classifier]ServletResponse).([InstanceMethodDeclaration]getOutputStream())", "~ServletResponse.getOutputStream():javax.servlet.ServletOutputStream");
    ourERI2IdMap.put("method ([Classifier]ServletResponse).([InstanceMethodDeclaration]setCharacterEncoding((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ServletResponse.setCharacterEncoding(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]ServletResponse).([InstanceMethodDeclaration]setContentType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ServletResponse.setContentType(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]GenericServlet).([InstanceMethodDeclaration]init((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ServletConfig])))", "~GenericServlet.init(javax.servlet.ServletConfig):void");
    ourERI2IdMap.put("method ([Classifier]ServletRequestWrapper).([InstanceMethodDeclaration]getParameterMap())", "~ServletRequestWrapper.getParameterMap():java.util.Map");
    ourERI2IdMap.put("method ([Classifier]ServletRequest).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ServletRequest.getAttribute(java.lang.String):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]ServletRequest).([InstanceMethodDeclaration]getInputStream())", "~ServletRequest.getInputStream():javax.servlet.ServletInputStream");
    ourERI2IdMap.put("method ([Classifier]ServletRequest).([InstanceMethodDeclaration]getParameter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ServletRequest.getParameter(java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]ServletRequest).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~ServletRequest.setAttribute(java.lang.String,java.lang.Object):void");
    ourERI2IdMap.put("constructor [Classifier]String[ConstructorDeclaration] ()", "~String.<init>()");
    ourERI2IdMap.put("constructor [Classifier]QueryParameter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))", "~QueryParameter.<init>(java.lang.String,java.lang.Object)");
    ourERI2IdMap.put("static method ([Classifier]ImageIO).([StaticMethodDeclaration]getImageWritersByMIMEType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ImageIO.getImageWritersByMIMEType(java.lang.String):java.util.Iterator");
    ourERI2IdMap.put("static method ([Classifier]ImageIO).([StaticMethodDeclaration]read((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File])))", "~ImageIO.read(java.io.File):java.awt.image.BufferedImage");
    ourERI2IdMap.put("static method ([Classifier]ImageIO).([StaticMethodDeclaration]write((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RenderedImage]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [OutputStream])))", "~ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream):boolean");
    ourERI2IdMap.put("method ([Classifier]ImageWriter).([InstanceMethodDeclaration]getOriginatingProvider())", "~ImageWriter.getOriginatingProvider():javax.imageio.spi.ImageWriterSpi");
    ourERI2IdMap.put("method ([Classifier]ImageWriter).([InstanceMethodDeclaration]dispose())", "~ImageWriter.dispose():void");
    ourERI2IdMap.put("constructor [Classifier]ByteArrayOutputStream[ConstructorDeclaration] ()", "~ByteArrayOutputStream.<init>()");
    ourERI2IdMap.put("method ([Classifier]ByteArrayOutputStream).([InstanceMethodDeclaration]toByteArray())", "~ByteArrayOutputStream.toByteArray():byte[]");
    ourERI2IdMap.put("constructor [Classifier]InputStreamReader[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InputStream]))", "~InputStreamReader.<init>(java.io.InputStream)");
    ourERI2IdMap.put("constructor [Classifier]InputStreamReader[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InputStream]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~InputStreamReader.<init>(java.io.InputStream,java.lang.String)");
    ourERI2IdMap.put("method ([Classifier]InputStreamReader).([InstanceMethodDeclaration]read())", "~InputStreamReader.read():int");
    ourERI2IdMap.put("method ([Classifier]OutputStream).([InstanceMethodDeclaration]write((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_])))", "~OutputStream.write(byte[]):void");
    ourERI2IdMap.put("constructor [Classifier]ByteArrayInputStream[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_]))", "~ByteArrayInputStream.<init>(byte[])");
    ourERI2IdMap.put("method ([Classifier]PrintStream).([InstanceMethodDeclaration]print((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~PrintStream.print(java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println())", "~PrintStream.println():void");
    ourERI2IdMap.put("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~PrintStream.println(boolean):void");
    ourERI2IdMap.put("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~PrintStream.println(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~PrintStream.println(java.lang.Object):void");
    ourERI2IdMap.put("constructor [Classifier]BufferedReader[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Reader]))", "~BufferedReader.<init>(java.io.Reader)");
    ourERI2IdMap.put("method ([Classifier]BufferedReader).([InstanceMethodDeclaration]readLine())", "~BufferedReader.readLine():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]InputStream).([InstanceMethodDeclaration]read())", "~InputStream.read():int");
    ourERI2IdMap.put("method ([Classifier]InputStream).([InstanceMethodDeclaration]reset())", "~InputStream.reset():void");
    ourERI2IdMap.put("constructor [Classifier]StringReader[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~StringReader.<init>(java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]StringWriter[ConstructorDeclaration] ()", "~StringWriter.<init>()");
    ourERI2IdMap.put("method ([Classifier]StringWriter).([InstanceMethodDeclaration]getBuffer())", "~StringWriter.getBuffer():java.lang.StringBuffer");
    ourERI2IdMap.put("constructor [Classifier]File[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~File.<init>(java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]File[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~File.<init>(java.io.File,java.lang.String)");
    ourERI2IdMap.put("method ([Classifier]File).([InstanceMethodDeclaration]getName())", "~File.getName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]File).([InstanceMethodDeclaration]getParentFile())", "~File.getParentFile():java.io.File");
    ourERI2IdMap.put("method ([Classifier]File).([InstanceMethodDeclaration]getAbsolutePath())", "~File.getAbsolutePath():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]File).([InstanceMethodDeclaration]exists())", "~File.exists():boolean");
    ourERI2IdMap.put("method ([Classifier]File).([InstanceMethodDeclaration]isDirectory())", "~File.isDirectory():boolean");
    ourERI2IdMap.put("method ([Classifier]File).([InstanceMethodDeclaration]isFile())", "~File.isFile():boolean");
    ourERI2IdMap.put("method ([Classifier]File).([InstanceMethodDeclaration]length())", "~File.length():long");
    ourERI2IdMap.put("method ([Classifier]File).([InstanceMethodDeclaration]listFiles())", "~File.listFiles():java.io.File[]");
    ourERI2IdMap.put("static method ([Classifier]File).([StaticMethodDeclaration]createTempFile((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~File.createTempFile(java.lang.String,java.lang.String):java.io.File");
    ourERI2IdMap.put("constructor [Classifier]FileOutputStream[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File]))", "~FileOutputStream.<init>(java.io.File)");
    ourERI2IdMap.put("method ([Classifier]FileOutputStream).([InstanceMethodDeclaration]write((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_])))", "~FileOutputStream.write(byte[]):void");
    ourERI2IdMap.put("method ([Classifier]FileOutputStream).([InstanceMethodDeclaration]close())", "~FileOutputStream.close():void");
    ourERI2IdMap.put("constructor [Classifier]BigDecimal[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~BigDecimal.<init>(java.lang.String)");
    ourERI2IdMap.put("method ([Classifier]MethodInvoker).([InstanceMethodDeclaration]setTargetObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~MethodInvoker.setTargetObject(java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]MethodInvoker).([InstanceMethodDeclaration]setTargetMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~MethodInvoker.setTargetMethod(java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]EditorNavigationUtil).([StaticMethodDeclaration]navigateTo((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~EditorNavigationUtil.navigateTo(jetbrains.mps.smodel.SNode,jetbrains.mps.nodeEditor.EditorContext):void");
    ourERI2IdMap.put("method ([Classifier]FileClassPathItem).([InstanceMethodDeclaration]getClassPath())", "~FileClassPathItem.getClassPath():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]CompositeClassPathItem).([InstanceMethodDeclaration]getChildren())", "~CompositeClassPathItem.getChildren():java.util.List");
    ourERI2IdMap.put("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]forName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~ReflectionUtil.forName(jetbrains.mps.smodel.SNode):java.lang.Class");
    ourERI2IdMap.put("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]getMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Class]])))", "~ReflectionUtil.getMethod(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.Class[]):java.lang.reflect.Method");
    ourERI2IdMap.put("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]staticInvoke((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Method]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))", "~ReflectionUtil.staticInvoke(java.lang.reflect.Method,java.lang.Object[]):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]invoke((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Method]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))", "~ReflectionUtil.invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]getEnum((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ReflectionUtil.getEnum(jetbrains.mps.smodel.SNode,java.lang.String):java.lang.Enum");
    ourERI2IdMap.put("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]getConstant((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ReflectionUtil.getConstant(jetbrains.mps.smodel.SNode,java.lang.String):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]ClassLoaderManager).([InstanceMethodDeclaration]getClassPathItem())", "~ClassLoaderManager.getClassPathItem():jetbrains.mps.reloading.IClassPathItem");
    ourERI2IdMap.put("static method ([Classifier]ClassLoaderManager).([StaticMethodDeclaration]getInstance())", "~ClassLoaderManager.getInstance():jetbrains.mps.reloading.ClassLoaderManager");
    ourERI2IdMap.put("method ([Classifier]Document).([InstanceMethodDeclaration]getRootElement())", "~Document.getRootElement():webr.xml.structure.BaseElement");
    ourERI2IdMap.put("static method ([Classifier]ServiceLocator).([StaticMethodDeclaration]getBean((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ServiceLocator.getBean(java.lang.String):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]ServiceLocator).([StaticMethodDeclaration]close())", "~ServiceLocator.close():void");
    ourERI2IdMap.put("static method ([Classifier]ServiceLocator).([StaticMethodDeclaration]init((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]])))", "~ServiceLocator.init(java.lang.String[]):void");
    ourERI2IdMap.put("constructor [Classifier]IllegalStateException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~IllegalStateException.<init>(java.lang.String)");
    ourERI2IdMap.put("static method ([Classifier]RegexpOperations).([StaticMethodDeclaration]replace((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Pattern]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Replacer])))", "~RegexpOperations.replace(java.lang.String,java.util.regex.Pattern,jetbrains.mps.regexp.runtime.Replacer):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]RegexpOperations).([StaticMethodDeclaration]split((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Pattern])))", "~RegexpOperations.split(java.lang.String,java.util.regex.Pattern):java.util.List");
    ourERI2IdMap.put("method ([Classifier]CompareType).([InstanceMethodDeclaration]getName())", "~CompareType.getName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]CompareType).([InstanceMethodDeclaration]getValueAsString())", "~CompareType.getValueAsString():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]CompareType).([InstanceMethodDeclaration]getValue())", "~CompareType.getValue():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]CompareType).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~CompareType.valueOf(java.lang.String):jetbrains.mps.baseLanguage.ext.dates.lang.structure.CompareType");
    ourERI2IdMap.put("static method ([Classifier]CompareType).([StaticMethodDeclaration]getConstants())", "~CompareType.getConstants():java.util.List");
    ourERI2IdMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~EntityMetaDataImpl.setType(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setSuperType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~EntityMetaDataImpl.setSuperType(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setDestructor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DestructorRef])))", "~EntityMetaDataImpl.setDestructor(com.jetbrains.teamsys.database.DestructorRef):void");
    ourERI2IdMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setInitializer((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Runnable])))", "~EntityMetaDataImpl.setInitializer(java.lang.Runnable):void");
    ourERI2IdMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setHistory((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EntityMetaDataImpl.setHistory(boolean):void");
    ourERI2IdMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setHistoryIgnoredFields((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>])))", "~EntityMetaDataImpl.setHistoryIgnoredFields(java.util.Set):void");
    ourERI2IdMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setRemoveOrphan((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EntityMetaDataImpl.setRemoveOrphan(boolean):void");
    ourERI2IdMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setAssociationEnds((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [AssociationEndMetaData]>])))", "~EntityMetaDataImpl.setAssociationEnds(java.util.Set):void");
    ourERI2IdMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setUniqueProperties((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>])))", "~EntityMetaDataImpl.setUniqueProperties(java.util.Set):void");
    ourERI2IdMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setRequiredProperties((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>])))", "~EntityMetaDataImpl.setRequiredProperties(java.util.Set):void");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]remove((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~EntityOperations.remove(com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getHistory((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~EntityOperations.getHistory(com.jetbrains.teamsys.database.Entity):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getVersion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~EntityOperations.getVersion(com.jetbrains.teamsys.database.Entity):int");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getPreviousVersion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~EntityOperations.getPreviousVersion(com.jetbrains.teamsys.database.Entity):com.jetbrains.teamsys.database.Entity");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getNextVersion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~EntityOperations.getNextVersion(com.jetbrains.teamsys.database.Entity):com.jetbrains.teamsys.database.Entity");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~EntityOperations.equals(com.jetbrains.teamsys.database.Entity,java.lang.Object):boolean");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]cast((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~EntityOperations.cast(java.lang.Object,java.lang.String):com.jetbrains.teamsys.database.Entity");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]instanceOfType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~EntityOperations.instanceOfType(java.lang.Object,java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]instanceOfDiscriminator((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~EntityOperations.instanceOfDiscriminator(java.lang.Object,java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~EntityOperations.getElement(java.lang.Iterable,int):com.jetbrains.teamsys.database.Entity");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getSize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))", "~EntityOperations.getSize(java.lang.Iterable):int");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]skip((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~EntityOperations.skip(java.lang.Iterable,int):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]sort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparator, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EntityOperations.sort(com.jetbrains.teamsys.database.TransientStoreSession,java.lang.String,java.lang.String,java.lang.Iterable,java.util.Comparator,boolean):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]sort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparator, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EntityOperations.sort(com.jetbrains.teamsys.database.TransientStoreSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable,java.util.Comparator,boolean):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]distinct((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))", "~EntityOperations.distinct(com.jetbrains.teamsys.database.TransientStoreSession,java.lang.Iterable):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]intersect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))", "~EntityOperations.intersect(com.jetbrains.teamsys.database.TransientStoreSession,java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]union((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))", "~EntityOperations.union(com.jetbrains.teamsys.database.TransientStoreSession,java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]exclude((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))", "~EntityOperations.exclude(com.jetbrains.teamsys.database.TransientStoreSession,java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]TransientStoreUtil).([StaticMethodDeclaration]commit((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession])))", "~TransientStoreUtil.commit(com.jetbrains.teamsys.database.TransientStoreSession):void");
    ourERI2IdMap.put("static method ([Classifier]TransientStoreUtil).([StaticMethodDeclaration]suspend((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession])))", "~TransientStoreUtil.suspend(com.jetbrains.teamsys.database.TransientStoreSession):void");
    ourERI2IdMap.put("static method ([Classifier]TransientStoreUtil).([StaticMethodDeclaration]abort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession])))", "~TransientStoreUtil.abort(java.lang.Throwable,com.jetbrains.teamsys.database.TransientStoreSession):void");
    ourERI2IdMap.put("static method ([Classifier]TransientStoreUtil).([StaticMethodDeclaration]abortIfOpened((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession])))", "~TransientStoreUtil.abortIfOpened(com.jetbrains.teamsys.database.TransientStoreSession):void");
    ourERI2IdMap.put("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~AssociationEndMetaDataImpl.setName(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setCardinality((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AssociationEndCardinality])))", "~AssociationEndMetaDataImpl.setCardinality(com.jetbrains.teamsys.database.AssociationEndCardinality):void");
    ourERI2IdMap.put("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setAssociationMetaData((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AssociationMetaData])))", "~AssociationEndMetaDataImpl.setAssociationMetaData(com.jetbrains.teamsys.database.AssociationMetaData):void");
    ourERI2IdMap.put("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setAssociationEndType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AssociationEndType])))", "~AssociationEndMetaDataImpl.setAssociationEndType(com.jetbrains.teamsys.database.AssociationEndType):void");
    ourERI2IdMap.put("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setCascadeDelete((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~AssociationEndMetaDataImpl.setCascadeDelete(boolean):void");
    ourERI2IdMap.put("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setClearOnDelete((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~AssociationEndMetaDataImpl.setClearOnDelete(boolean):void");
    ourERI2IdMap.put("method ([Classifier]ModelMetaDataImpl).([InstanceMethodDeclaration]setEntityMetaDatas((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [EntityMetaData]>])))", "~ModelMetaDataImpl.setEntityMetaDatas(java.util.Set):void");
    ourERI2IdMap.put("method ([Classifier]ModelMetaDataImpl).([InstanceMethodDeclaration]init())", "~ModelMetaDataImpl.init():void");
    ourERI2IdMap.put("method ([Classifier]AssociationMetaDataImpl).([InstanceMethodDeclaration]setType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AssociationType])))", "~AssociationMetaDataImpl.setType(com.jetbrains.teamsys.database.AssociationType):void");
    ourERI2IdMap.put("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]setPersistentStore((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityStore])))", "~TransientEntityStoreImpl.setPersistentStore(com.jetbrains.teamsys.database.EntityStore):void");
    ourERI2IdMap.put("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]setAbortSessionsOnClose((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TransientEntityStoreImpl.setAbortSessionsOnClose(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]setAttachToCurrentOnBeginIfExists((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TransientEntityStoreImpl.setAttachToCurrentOnBeginIfExists(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]setResumeOnBeginIfExists((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TransientEntityStoreImpl.setResumeOnBeginIfExists(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]close())", "~TransientEntityStoreImpl.close():void");
    ourERI2IdMap.put("method ([Classifier]Severity).([InstanceMethodDeclaration]getValueAsString())", "~Severity.getValueAsString():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]Severity).([StaticMethodDeclaration]getConstants())", "~Severity.getConstants():java.util.List");
    ourERI2IdMap.put("constructor [Classifier]NodeListIterableAdapter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeList]))", "~NodeListIterableAdapter.<init>(org.w3c.dom.NodeList)");
    ourERI2IdMap.put("constructor [Classifier]NamedNodeMapIterableAdapter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NamedNodeMap]))", "~NamedNodeMapIterableAdapter.<init>(org.w3c.dom.NamedNodeMap)");
    ourERI2IdMap.put("constructor [Classifier]ChainedIterable[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Iterable, <any_>]]))", "~ChainedIterable.<init>(java.lang.Iterable[])");
    ourERI2IdMap.put("method ([Classifier]EditorCellModel).([InstanceMethodDeclaration]getSelectable())", "~EditorCellModel.getSelectable():jetbrains.mps.bootstrap.editorLanguage.structure._YesNoDefault_Enum");
    ourERI2IdMap.put("method ([Classifier]CellActionId).([InstanceMethodDeclaration]getName())", "~CellActionId.getName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]CellActionId).([InstanceMethodDeclaration]getValue())", "~CellActionId.getValue():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]CellActionId).([StaticMethodDeclaration]getConstants())", "~CellActionId.getConstants():java.util.List");
    ourERI2IdMap.put("static method ([Classifier]PersistentClassUtils).([StaticMethodDeclaration]isPersistentClassOrEnumExpr((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~PersistentClassUtils.isPersistentClassOrEnumExpr(jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("method ([Classifier]IFeatureDesign).([InstanceMethodDeclaration]getParameters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~IFeatureDesign.getParameters(jetbrains.mps.smodel.SNode):java.lang.Iterable");
    ourERI2IdMap.put("method ([Classifier]IFeatureDesign).([InstanceMethodDeclaration]getTargetType((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~IFeatureDesign.getTargetType(java.lang.Object,jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]IFeatureDesign).([InstanceMethodDeclaration]parameterToString((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))", "~IFeatureDesign.parameterToString(java.lang.Object):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]HelginsJudgement_AnnotationLink).([StaticMethodDeclaration]setHelginsJudgement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HelginsJudgement])))", "~HelginsJudgement_AnnotationLink.setHelginsJudgement(jetbrains.mps.core.structure.BaseConcept,jetbrains.mps.bootstrap.helgins.structure.HelginsJudgement):void");
    ourERI2IdMap.put("static method ([Classifier]ReferenceAntiquotation_AnnotationLink).([StaticMethodDeclaration]setReferenceAntiquotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ReferenceAntiquotation])))", "~ReferenceAntiquotation_AnnotationLink.setReferenceAntiquotation(jetbrains.mps.core.structure.BaseConcept,java.lang.String,jetbrains.mps.bootstrap.helgins.structure.ReferenceAntiquotation):void");
    ourERI2IdMap.put("static method ([Classifier]ReferenceAntiquotation_AnnotationLink).([StaticMethodDeclaration]getReferenceAntiquotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ReferenceAntiquotation_AnnotationLink.getReferenceAntiquotation(jetbrains.mps.core.structure.BaseConcept,java.lang.String):jetbrains.mps.bootstrap.helgins.structure.ReferenceAntiquotation");
    ourERI2IdMap.put("static method ([Classifier]Antiquotation_AnnotationLink).([StaticMethodDeclaration]getAntiquotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept])))", "~Antiquotation_AnnotationLink.getAntiquotation(jetbrains.mps.core.structure.BaseConcept):jetbrains.mps.bootstrap.helgins.structure.Antiquotation");
    ourERI2IdMap.put("method ([Classifier]AbstractAntiquotation).([InstanceMethodDeclaration]getExpression())", "~AbstractAntiquotation.getExpression():jetbrains.mps.baseLanguage.structure.Expression");
    ourERI2IdMap.put("static method ([Classifier]Format).([StaticMethodDeclaration]getPrettyFormat())", "~Format.getPrettyFormat():org.jdom.output.Format");
    ourERI2IdMap.put("constructor [Classifier]XMLOutputter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Format]))", "~XMLOutputter.<init>(org.jdom.output.Format)");
    ourERI2IdMap.put("method ([Classifier]XMLOutputter).([InstanceMethodDeclaration]output((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Element]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Writer])))", "~XMLOutputter.output(org.jdom.Element,java.io.Writer):void");
    ourERI2IdMap.put("method ([Classifier]LinkDeclaration).([InstanceMethodDeclaration]getTarget())", "~LinkDeclaration.getTarget():jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration");
    ourERI2IdMap.put("method ([Classifier]LinkDeclaration).([InstanceMethodDeclaration]getMetaClass())", "~LinkDeclaration.getMetaClass():jetbrains.mps.bootstrap.structureLanguage.structure.LinkMetaclass");
    ourERI2IdMap.put("method ([Classifier]LinkDeclaration).([InstanceMethodDeclaration]setMetaClass((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkMetaclass])))", "~LinkDeclaration.setMetaClass(jetbrains.mps.bootstrap.structureLanguage.structure.LinkMetaclass):void");
    ourERI2IdMap.put("method ([Classifier]Cardinality).([InstanceMethodDeclaration]getName())", "~Cardinality.getName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]Cardinality).([InstanceMethodDeclaration]getValueAsString())", "~Cardinality.getValueAsString():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]Cardinality).([StaticMethodDeclaration]getConstants())", "~Cardinality.getConstants():java.util.List");
    ourERI2IdMap.put("static method ([Classifier]Inline_AnnotationLink).([StaticMethodDeclaration]setInline((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseMethodDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InlineAnnotation])))", "~Inline_AnnotationLink.setInline(jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration,jetbrains.mps.baseLanguage.ext.util.structure.InlineAnnotation):void");
    ourERI2IdMap.put("static method ([Classifier]Inline_AnnotationLink).([StaticMethodDeclaration]getInline((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseMethodDeclaration])))", "~Inline_AnnotationLink.getInline(jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration):jetbrains.mps.baseLanguage.ext.util.structure.InlineAnnotation");
    ourERI2IdMap.put("static method ([Classifier]EntityFieldHandler).([StaticMethodDeclaration]create((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityId]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~EntityFieldHandler.create(com.jetbrains.teamsys.database.EntityId,java.lang.String):com.jetbrains.teamsys.database.exceptions.EntityFieldHandler");
    ourERI2IdMap.put("method ([Classifier]DataIntegrityViolationException).([InstanceMethodDeclaration]relatesTo((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientEntity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~DataIntegrityViolationException.relatesTo(com.jetbrains.teamsys.database.TransientEntity,java.lang.Object):boolean");
    ourERI2IdMap.put("method ([Classifier]IFilter).([InstanceMethodDeclaration]accept((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))", "~IFilter.accept(java.lang.Object):boolean");
    ourERI2IdMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]From((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TreePath, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~TreeTraversalFactory.From(java.lang.Object,jetbrains.mps.ypath.runtime.TreePath):jetbrains.mps.ypath.runtime.ITreeTraversal");
    ourERI2IdMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Traverse((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITreeTraversal, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TraversalAxis])))", "~TreeTraversalFactory.Traverse(jetbrains.mps.ypath.runtime.ITreeTraversal,jetbrains.mps.ypath.runtime.TraversalAxis):jetbrains.mps.ypath.runtime.ITreeTraversal");
    ourERI2IdMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Filter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITreeTraversal, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IFilter, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~TreeTraversalFactory.Filter(jetbrains.mps.ypath.runtime.ITreeTraversal,jetbrains.mps.ypath.runtime.IFilter):jetbrains.mps.ypath.runtime.ITreeTraversal");
    ourERI2IdMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Axis((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TreeTraversalFactory.Axis(java.lang.String):jetbrains.mps.ypath.runtime.TraversalAxis");
    ourERI2IdMap.put("constructor [Classifier]TreePath[ConstructorDeclaration] ()", "~TreePath.<init>()");
    ourERI2IdMap.put("method ([Classifier]TreePath).([InstanceMethodDeclaration]registerFeature((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IFeatureDescriptor, <any_>])))", "~TreePath.registerFeature(jetbrains.mps.ypath.runtime.IFeatureDescriptor):void");
    ourERI2IdMap.put("method ([Classifier]TreePath).([InstanceMethodDeclaration]startTraversal((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))", "~TreePath.startTraversal(java.lang.Object):jetbrains.mps.ypath.runtime.ITreeTraversal");
    ourERI2IdMap.put("constructor [Classifier]CompositeFilter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [IFilter, <any_>]]))", "~CompositeFilter.<init>(jetbrains.mps.ypath.runtime.IFilter[])");
    ourERI2IdMap.put("method ([Classifier]ITreeTraversal).([InstanceMethodDeclaration]getTreePath())", "~ITreeTraversal.getTreePath():jetbrains.mps.ypath.runtime.ITreePath");
    ourERI2IdMap.put("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getName())", "~TraversalAxis.getName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getValue())", "~TraversalAxis.getValue():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]getConstants())", "~TraversalAxis.getConstants():java.util.List");
    ourERI2IdMap.put("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]parseValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TraversalAxis.parseValue(java.lang.String):jetbrains.mps.ypath.runtime.TraversalAxis");
    ourERI2IdMap.put("static method ([Classifier]PathUtil).([StaticMethodDeclaration]getPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~PathUtil.getPath(jetbrains.mps.smodel.SNode,java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]ExpressionTextUtil).([StaticMethodDeclaration]getExpressionText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~ExpressionTextUtil.getExpressionText(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]VariableNameUtil).([StaticMethodDeclaration]getSingularName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~VariableNameUtil.getSingularName(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("constructor [Classifier]TreePath[ConstructorDeclaration] ()", "~TreePath.<init>()");
    ourERI2IdMap.put("method ([Classifier]Log).([InstanceMethodDeclaration]debug((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable])))", "~Log.debug(java.lang.Object,java.lang.Throwable):void");
    ourERI2IdMap.put("method ([Classifier]Log).([InstanceMethodDeclaration]isDebugEnabled())", "~Log.isDebugEnabled():boolean");
    ourERI2IdMap.put("static method ([Classifier]LogFactory).([StaticMethodDeclaration]getLog((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class])))", "~LogFactory.getLog(java.lang.Class):org.apache.commons.logging.Log");
    ourERI2IdMap.put("constructor [Classifier]InstanceMethodCall_InstanceMethodScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ClassifierType]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InstanceMethodCall]))", "~InstanceMethodCall_InstanceMethodScope.<init>(jetbrains.mps.baseLanguage.structure.ClassifierType,jetbrains.mps.baseLanguage.structure.InstanceMethodCall)");
    ourERI2IdMap.put("constructor [Classifier]SuperMethodCall_InstanceMethodScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SuperMethodCall]))", "~SuperMethodCall_InstanceMethodScope.<init>(jetbrains.mps.baseLanguage.structure.Classifier,jetbrains.mps.baseLanguage.structure.SuperMethodCall)");
    ourERI2IdMap.put("constructor [Classifier]NewExpression_ClassConstructorScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NewExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))", "~NewExpression_ClassConstructorScope.<init>(jetbrains.mps.baseLanguage.structure.NewExpression,jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope)");
    ourERI2IdMap.put("constructor [Classifier]StaticMethodCall_StaticMethodScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ClassConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [StaticMethodCall]))", "~StaticMethodCall_StaticMethodScope.<init>(jetbrains.mps.baseLanguage.structure.ClassConcept,jetbrains.mps.baseLanguage.structure.StaticMethodCall)");
    ourERI2IdMap.put("constructor [Classifier]StaticMethodCall_StaticMethodScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ClassConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LocalStaticMethodCall]))", "~StaticMethodCall_StaticMethodScope.<init>(jetbrains.mps.baseLanguage.structure.ClassConcept,jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall)");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getNodeOperation_ConceptList_concepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeOperation])))", "~_QueriesUtil.getNodeOperation_ConceptList_concepts(jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]get_SConceptPropertyAccess_GetMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SConceptPropertyAccess]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~_QueriesUtil.get_SConceptPropertyAccess_GetMethod(jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptPropertyAccess,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]get_SPropertyAccess_simple_getterMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SPropertyAccess]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~_QueriesUtil.get_SPropertyAccess_simple_getterMethod(jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]get_SPropertyAccess_enum_getterMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SPropertyAccess]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~_QueriesUtil.get_SPropertyAccess_enum_getterMethod(jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]get_SPropertyAccess_enum_defaultValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~_QueriesUtil.get_SPropertyAccess_enum_defaultValue(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationHasParm_Inclusion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~_QueriesUtil.operationHasParm_Inclusion(jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationHasParm_Root((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~_QueriesUtil.operationHasParm_Root(jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationHasParm_Concept((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~_QueriesUtil.operationHasParm_Concept(jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationHasParm_ConceptExpression((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~_QueriesUtil.operationHasParm_ConceptExpression(jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationGetParm_Concept_conceptFqName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~_QueriesUtil.operationGetParm_Concept_conceptFqName(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationGetParm_ConceptExpression_conceptExpression((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~_QueriesUtil.operationGetParm_ConceptExpression_conceptExpression(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]EntityIterable).([InstanceMethodDeclaration]intersect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable])))", "~EntityIterable.intersect(com.jetbrains.teamsys.database.EntityIterable):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("method ([Classifier]EntityIterable).([InstanceMethodDeclaration]union((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable])))", "~EntityIterable.union(com.jetbrains.teamsys.database.EntityIterable):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("method ([Classifier]EntityIterable).([InstanceMethodDeclaration]minus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable])))", "~EntityIterable.minus(com.jetbrains.teamsys.database.EntityIterable):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]createPersistentEntityIterableWrapper((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable])))", "~TransientStoreSession.createPersistentEntityIterableWrapper(com.jetbrains.teamsys.database.EntityIterable):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]suspend())", "~TransientStoreSession.suspend():void");
    ourERI2IdMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]intermediateCommit())", "~TransientStoreSession.intermediateCommit():void");
    ourERI2IdMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]intermediateAbort())", "~TransientStoreSession.intermediateAbort():void");
    ourERI2IdMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]getId())", "~TransientStoreSession.getId():java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]addSessionLocalEntity((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~TransientStoreSession.addSessionLocalEntity(java.lang.String,com.jetbrains.teamsys.database.Entity):com.jetbrains.teamsys.database.Entity");
    ourERI2IdMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]getSessionLocalEntity((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TransientStoreSession.getSessionLocalEntity(java.lang.String):com.jetbrains.teamsys.database.TransientEntity");
    ourERI2IdMap.put("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]beginSession((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~TransientEntityStore.beginSession(java.lang.String,java.lang.Object):com.jetbrains.teamsys.database.TransientStoreSession");
    ourERI2IdMap.put("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]isSessionExists((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~TransientEntityStore.isSessionExists(java.lang.Object):boolean");
    ourERI2IdMap.put("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]resumeSession((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~TransientEntityStore.resumeSession(java.lang.Object):com.jetbrains.teamsys.database.TransientStoreSession");
    ourERI2IdMap.put("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]setModelMetaData((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ModelMetaData])))", "~TransientEntityStore.setModelMetaData(com.jetbrains.teamsys.database.ModelMetaData):void");
    ourERI2IdMap.put("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]addListener((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSessionListener])))", "~TransientEntityStore.addListener(com.jetbrains.teamsys.database.TransientStoreSessionListener):void");
    ourERI2IdMap.put("method ([Classifier]EntityMetaData).([InstanceMethodDeclaration]getInitializer())", "~EntityMetaData.getInitializer():java.lang.Runnable");
    ourERI2IdMap.put("method ([Classifier]StoreTransaction).([InstanceMethodDeclaration]commit())", "~StoreTransaction.commit():void");
    ourERI2IdMap.put("method ([Classifier]StoreTransaction).([InstanceMethodDeclaration]abort())", "~StoreTransaction.abort():void");
    ourERI2IdMap.put("method ([Classifier]ModelMetaData).([InstanceMethodDeclaration]getEntitiesMetaData())", "~ModelMetaData.getEntitiesMetaData():java.lang.Iterable");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]close())", "~BerkeleyDbEntityStore.close():void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]setBackupOnShutdown((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~BerkeleyDbEntityStore.setBackupOnShutdown(boolean):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]setBackupPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BerkeleyDbEntityStore.setBackupPath(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]getBackupPath())", "~BerkeleyDbEntityStore.getBackupPath():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]setStableSort((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~BerkeleyDbEntityStore.setStableSort(boolean):void");
    ourERI2IdMap.put("method ([Classifier]EntityStore).([InstanceMethodDeclaration]getThreadSession())", "~EntityStore.getThreadSession():com.jetbrains.teamsys.database.StoreSession");
    ourERI2IdMap.put("method ([Classifier]TransientEntity).([InstanceMethodDeclaration]isNew())", "~TransientEntity.isNew():boolean");
    ourERI2IdMap.put("method ([Classifier]TransientEntity).([InstanceMethodDeclaration]getRealType())", "~TransientEntity.getRealType():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TransientEntity).([InstanceMethodDeclaration]hasChanges())", "~TransientEntity.hasChanges():boolean");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setFileHandleCacheSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BerkeleyDbStoreConfig.setFileHandleCacheSize(int):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setLogIteratorReadSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BerkeleyDbStoreConfig.setLogIteratorReadSize(int):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setFairLatchers((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~BerkeleyDbStoreConfig.setFairLatchers(boolean):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setLockTimeout((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BerkeleyDbStoreConfig.setLockTimeout(int):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setMinUtilization((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BerkeleyDbStoreConfig.setMinUtilization(int):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCleanerLockTimeout((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BerkeleyDbStoreConfig.setCleanerLockTimeout(int):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCleanerDeadlockRetry((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BerkeleyDbStoreConfig.setCleanerDeadlockRetry(int):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCleanerThreads((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BerkeleyDbStoreConfig.setCleanerThreads(int):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCleanerlookAheadCacheSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BerkeleyDbStoreConfig.setCleanerlookAheadCacheSize(int):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCompressorLockTimeout((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BerkeleyDbStoreConfig.setCompressorLockTimeout(int):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCompressorDeadlockRetry((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BerkeleyDbStoreConfig.setCompressorDeadlockRetry(int):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setLoggingConsoleHandlerOn((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BerkeleyDbStoreConfig.setLoggingConsoleHandlerOn(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setLoggingLevel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BerkeleyDbStoreConfig.setLoggingLevel(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setWriteNoSync((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~BerkeleyDbStoreConfig.setWriteNoSync(boolean):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setMaxSimutaneousTxns((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BerkeleyDbStoreConfig.setMaxSimutaneousTxns(int):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setEntitiesCacheSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BerkeleyDbStoreConfig.setEntitiesCacheSize(int):void");
    ourERI2IdMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setEntityIterableCacheSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BerkeleyDbStoreConfig.setEntityIterableCacheSize(int):void");
    ourERI2IdMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]newEntity((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~StoreSession.newEntity(java.lang.String):com.jetbrains.teamsys.database.Entity");
    ourERI2IdMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]getEntityTypes())", "~StoreSession.getEntityTypes():java.util.List");
    ourERI2IdMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]getAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~StoreSession.getAll(java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]find((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable])))", "~StoreSession.find(java.lang.String,java.lang.String,java.lang.Comparable):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]find((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable])))", "~StoreSession.find(java.lang.String,java.lang.String,java.lang.Comparable,java.lang.Comparable):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]startsWith((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~StoreSession.startsWith(java.lang.String,java.lang.String,java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]findLinks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~StoreSession.findLinks(java.lang.String,com.jetbrains.teamsys.database.Entity,java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]findLinks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~StoreSession.findLinks(java.lang.String,com.jetbrains.teamsys.database.EntityIterable,java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]clearHistory((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~StoreSession.clearHistory(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]EntityId).([InstanceMethodDeclaration]toString())", "~EntityId.toString():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getStore())", "~Entity.getStore():com.jetbrains.teamsys.database.EntityStore");
    ourERI2IdMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getId())", "~Entity.getId():com.jetbrains.teamsys.database.EntityId");
    ourERI2IdMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getType())", "~Entity.getType():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getVersion())", "~Entity.getVersion():int");
    ourERI2IdMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Entity.getProperty(java.lang.String):java.lang.Comparable");
    ourERI2IdMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getPropertyNames())", "~Entity.getPropertyNames():java.util.List");
    ourERI2IdMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getLinks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Entity.getLinks(java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getLinkNames())", "~Entity.getLinkNames():java.util.List");
    ourERI2IdMap.put("method ([Classifier]GenerationPlans).([InstanceMethodDeclaration]getPlans())", "~GenerationPlans.getPlans():java.util.Collection");
    ourERI2IdMap.put("constructor [Classifier]SecurityViolationException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~SecurityViolationException.<init>(java.lang.String)");
    ourERI2IdMap.put("static method ([Classifier]ScriptNameUtil).([StaticMethodDeclaration]getClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~ScriptNameUtil.getClassName(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]ScriptNameUtil).([StaticMethodDeclaration]getMigrationScriptClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~ScriptNameUtil.getMigrationScriptClassName(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TypeConvertManager).([InstanceMethodDeclaration]setTypeConverters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [TypeConverter]>])))", "~TypeConvertManager.setTypeConverters(java.util.List):void");
    ourERI2IdMap.put("method ([Classifier]TypeConvertManager).([InstanceMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~TypeConvertManager.toString(java.lang.Object):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TypeConvertManager).([InstanceMethodDeclaration]fromString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TypeConvertManager.fromString(java.lang.String,java.lang.String):java.lang.Object");
    ourERI2IdMap.put("constructor [Classifier]FixedClassConverter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class]))", "~FixedClassConverter.<init>(java.lang.Class)");
    ourERI2IdMap.put("constructor [Classifier]VisibleClassifiersScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))", "~VisibleClassifiersScope.<init>(jetbrains.mps.smodel.SModel,int,jetbrains.mps.smodel.IScope)");
    ourERI2IdMap.put("constructor [Classifier]ClassifierAndSuperClassifiersScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))", "~ClassifierAndSuperClassifiersScope.<init>(jetbrains.mps.baseLanguage.structure.Classifier,int)");
    ourERI2IdMap.put("method ([Classifier]IClassifiersSearchScope).([InstanceMethodDeclaration]getClassifierNodes())", "~IClassifiersSearchScope.getClassifierNodes():java.util.List");
    ourERI2IdMap.put("constructor [Classifier]VisibleClassifierMembersScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))", "~VisibleClassifierMembersScope.<init>(jetbrains.mps.baseLanguage.structure.Classifier,jetbrains.mps.smodel.SNode,int)");
    ourERI2IdMap.put("constructor [Classifier]LocalVariablesScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))", "~LocalVariablesScope.<init>(jetbrains.mps.smodel.SNode)");
    ourERI2IdMap.put("constructor [Classifier]ByteArrayOutputStream[ConstructorDeclaration] ()", "~ByteArrayOutputStream.<init>()");
    ourERI2IdMap.put("method ([Classifier]ByteArrayOutputStream).([InstanceMethodDeclaration]toByteArray())", "~ByteArrayOutputStream.toByteArray():byte[]");
    ourERI2IdMap.put("method ([Classifier]BaseParameterException).([InstanceMethodDeclaration]getParameterName())", "~BaseParameterException.getParameterName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]BaseParameterException).([InstanceMethodDeclaration]getParameterType())", "~BaseParameterException.getParameterType():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]BaseParameterException).([InstanceMethodDeclaration]getValueAsString())", "~BaseParameterException.getValueAsString():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]getTemplatePath())", "~TemplateComponent.getTemplatePath():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]getFullLabeledInputName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TemplateComponent.getFullLabeledInputName(java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]getTemplateVariables())", "~TemplateComponent.getTemplateVariables():java.util.Map");
    ourERI2IdMap.put("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]containsForm())", "~TemplateComponent.containsForm():boolean");
    ourERI2IdMap.put("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]containsFileInput())", "~TemplateComponent.containsFileInput():boolean");
    ourERI2IdMap.put("method ([Classifier]TemplateActionController).([InstanceMethodDeclaration]getActionVariables())", "~TemplateActionController.getActionVariables():java.util.Map");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertTrue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~Assert.assertTrue(java.lang.String,boolean):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertTrue((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~Assert.assertTrue(boolean):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertFalse((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~Assert.assertFalse(boolean):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]fail((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Assert.fail(java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~Assert.assertEquals(java.lang.Object,java.lang.Object):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertNull((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~Assert.assertNull(java.lang.Object):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertSame((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~Assert.assertSame(java.lang.Object,java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]RequestProcessorContainer).([InstanceMethodDeclaration]setRequestProcessors((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [RequestProcessor]>])))", "~RequestProcessorContainer.setRequestProcessors(java.util.List):void");
    ourERI2IdMap.put("method ([Classifier]RequestProcessor).([InstanceMethodDeclaration]isApplicable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RequestUri])))", "~RequestProcessor.isApplicable(webr.framework.url.RequestUri):boolean");
    ourERI2IdMap.put("method ([Classifier]RequestProcessor).([InstanceMethodDeclaration]processRequest((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RequestUri])))", "~RequestProcessor.processRequest(webr.framework.url.RequestUri):webr.framework.runtime.response.ResponseAction");
    ourERI2IdMap.put("method ([Classifier]Document).([InstanceMethodDeclaration]getRootElement())", "~Document.getRootElement():jetbrains.mps.xml.structure.Element");
    ourERI2IdMap.put("method ([Classifier]ImageReaderWriterSpi).([InstanceMethodDeclaration]getFormatNames())", "~ImageReaderWriterSpi.getFormatNames():java.lang.String[]");
    ourERI2IdMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]getChildren())", "~Node.getChildren():java.util.Set");
    ourERI2IdMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getSourceModel())", "~ITemplateGenerator.getSourceModel():jetbrains.mps.smodel.SModel");
    ourERI2IdMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getTargetModel())", "~ITemplateGenerator.getTargetModel():jetbrains.mps.smodel.SModel");
    ourERI2IdMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]findOutputNodeByInputNodeAndMappingName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ITemplateGenerator.findOutputNodeByInputNodeAndMappingName(jetbrains.mps.smodel.SNode,java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]findCopiedOutputNodeForInputNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~ITemplateGenerator.findCopiedOutputNodeForInputNode(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getCurrentBuilder())", "~ITemplateGenerator.getCurrentBuilder():jetbrains.mps.generator.template.INodeBuilder");
    ourERI2IdMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]showErrorMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ITemplateGenerator.showErrorMessage(jetbrains.mps.smodel.SNode,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]showErrorMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ITemplateGenerator.showErrorMessage(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]showErrorMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ITemplateGenerator.showErrorMessage(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getGeneratorSessionContext())", "~ITemplateGenerator.getGeneratorSessionContext():jetbrains.mps.generator.GenerationSessionContext");
    ourERI2IdMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getScope())", "~ITemplateGenerator.getScope():jetbrains.mps.smodel.IScope");
    ourERI2IdMap.put("method ([Classifier]INodeBuilder).([InstanceMethodDeclaration]getTargetNode())", "~INodeBuilder.getTargetNode():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]INodeBuilder).([InstanceMethodDeclaration]findChildBuilder((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <jetbrains.mps.baseLanguage.types.classifier [INodeBuilder]>])))", "~INodeBuilder.findChildBuilder(jetbrains.mps.util.Condition):jetbrains.mps.generator.template.INodeBuilder");
    ourERI2IdMap.put("method ([Classifier]INodeBuilder).([InstanceMethodDeclaration]findSubSourceNodeForParentMapping((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~INodeBuilder.findSubSourceNodeForParentMapping(java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]ThreadPoolTaskExecutor).([InstanceMethodDeclaration]setCorePoolSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~ThreadPoolTaskExecutor.setCorePoolSize(int):void");
    ourERI2IdMap.put("method ([Classifier]ThreadPoolTaskExecutor).([InstanceMethodDeclaration]setMaxPoolSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~ThreadPoolTaskExecutor.setMaxPoolSize(int):void");
    ourERI2IdMap.put("static method ([Classifier]MessageDigestUtil).([StaticMethodDeclaration]sha256((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~MessageDigestUtil.sha256(java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]ErrorMessageManager$Severity).([InstanceMethodDeclaration]getStyleClass())", "~ErrorMessageManager$Severity.getStyleClass():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getEventName())", "~ControllerOperations.getEventName():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getEventParameter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~ControllerOperations.getEventParameter(java.lang.String,java.lang.Class):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getLabeledInputValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~ControllerOperations.getLabeledInputValue(java.lang.String,java.lang.Class):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getEventSource())", "~ControllerOperations.getEventSource():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getTransactionId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ControllerOperations.getTransactionId(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getTransactionId())", "~ControllerOperations.getTransactionId():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRedirectResponseAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ControllerOperations.getRedirectResponseAction(java.lang.String):webr.framework.runtime.response.ResponseAction");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRedirectBackResponseAction())", "~ControllerOperations.getRedirectBackResponseAction():webr.framework.runtime.response.ResponseAction");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRedirectSelfResponseAction())", "~ControllerOperations.getRedirectSelfResponseAction():webr.framework.runtime.response.ResponseAction");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRedirectToRootResponseAction())", "~ControllerOperations.getRedirectToRootResponseAction():webr.framework.runtime.response.ResponseAction");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getDefaultResponseAction())", "~ControllerOperations.getDefaultResponseAction():webr.framework.runtime.response.ResponseAction");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getHtmlRenderResponseAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TemplateComponent]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))", "~ControllerOperations.getHtmlRenderResponseAction(jetbrains.mps.webr.runtime.templateComponent.TemplateComponent,webr.framework.textBuilder.TBuilderContext):webr.framework.runtime.response.ResponseAction");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getHeartBeatResponseAction())", "~ControllerOperations.getHeartBeatResponseAction():webr.framework.runtime.response.ResponseAction");
    ourERI2IdMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRefreshResponseAction((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [TemplateComponent]])))", "~ControllerOperations.getRefreshResponseAction(jetbrains.mps.webr.runtime.templateComponent.TemplateComponent[]):webr.framework.runtime.response.ResponseAction");
    ourERI2IdMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]setRequest((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest])))", "~BaseApplication.setRequest(javax.servlet.http.HttpServletRequest):void");
    ourERI2IdMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getRequest())", "~BaseApplication.getRequest():javax.servlet.http.HttpServletRequest");
    ourERI2IdMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getSessionField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseApplication.getSessionField(java.lang.String):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]setSessionField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~BaseApplication.setSessionField(java.lang.String,java.lang.Object):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getCookieField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseApplication.getCookieField(java.lang.String,java.lang.String):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getCookieField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~BaseApplication.getCookieField(java.lang.String,java.lang.Class):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]setCookieField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~BaseApplication.setCookieField(java.lang.String,java.lang.Object):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getCurrentWindowId())", "~BaseApplication.getCurrentWindowId():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]setCurrentWindowId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseApplication.setCurrentWindowId(java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]ErrorMessageManager).([StaticMethodDeclaration]addMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Serializable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ErrorMessageManager$Severity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ErrorMessageManager.addMessage(java.io.Serializable,webr.framework.controller.ErrorMessageManager$Severity,java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]ErrorMessageManager).([StaticMethodDeclaration]isEmpty())", "~ErrorMessageManager.isEmpty():boolean");
    ourERI2IdMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setRequestProcessors((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [RequestProcessor]>])))", "~CentralManager.setRequestProcessors(java.lang.Iterable):void");
    ourERI2IdMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setTypeConvertManager((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TypeConvertManager])))", "~CentralManager.setTypeConvertManager(jetbrains.mps.webr.runtime.converter.TypeConvertManager):void");
    ourERI2IdMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setDefaultControllerName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~CentralManager.setDefaultControllerName(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setDefaultActionNames((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [String]>])))", "~CentralManager.setDefaultActionNames(java.util.Map):void");
    ourERI2IdMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]toIdString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~CentralManager.toIdString(java.lang.Object):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setApplicationName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~CentralManager.setApplicationName(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setAppicationVersion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~CentralManager.setAppicationVersion(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setFreemarkerConfiguration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Configuration])))", "~CentralManager.setFreemarkerConfiguration(freemarker.template.Configuration):void");
    ourERI2IdMap.put("constructor [Classifier]XmlTemplateCallHandler[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextBuilder]))", "~XmlTemplateCallHandler.<init>(webr.framework.textBuilder.TextBuilder)");
    ourERI2IdMap.put("method ([Classifier]XmlTemplateCallHandler).([InstanceMethodDeclaration]putTemplateArgument((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~XmlTemplateCallHandler.putTemplateArgument(java.lang.String,java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]XmlTemplateCallHandler).([InstanceMethodDeclaration]getResponseAction())", "~XmlTemplateCallHandler.getResponseAction():webr.framework.runtime.response.ResponseAction");
    ourERI2IdMap.put("method ([Classifier]RefNodeListHandler).([InstanceMethodDeclaration]getLinkDeclaration())", "~RefNodeListHandler.getLinkDeclaration():jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration");
    ourERI2IdMap.put("method ([Classifier]RefNodeListHandler).([InstanceMethodDeclaration]createNodeCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~RefNodeListHandler.createNodeCell(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode):jetbrains.mps.nodeEditor.EditorCell");
    ourERI2IdMap.put("method ([Classifier]RefNodeListHandler).([InstanceMethodDeclaration]createEmptyCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~RefNodeListHandler.createEmptyCell(jetbrains.mps.nodeEditor.EditorContext):jetbrains.mps.nodeEditor.EditorCell");
    ourERI2IdMap.put("constructor [Classifier]AggregationCellContext[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration]))", "~AggregationCellContext.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration)");
    ourERI2IdMap.put("constructor [Classifier]RefNodeListHandlerElementKeyMap[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractCellListHandler]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~RefNodeListHandlerElementKeyMap.<init>(jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler,java.lang.String)");
    ourERI2IdMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]propertyMacro_CellMenuPart_PropertyPostfixHints_generatedClass_name((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~Queries.propertyMacro_CellMenuPart_PropertyPostfixHints_generatedClass_name(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]conceptEditorClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptEditorDeclaration])))", "~_QueriesUtil.conceptEditorClassName(jetbrains.mps.bootstrap.editorLanguage.structure.ConceptEditorDeclaration):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]actionMapClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellActionMapDeclaration])))", "~_QueriesUtil.actionMapClassName(jetbrains.mps.bootstrap.editorLanguage.structure.CellActionMapDeclaration):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]actionMapActionClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellActionMapItem])))", "~_QueriesUtil.actionMapActionClassName(jetbrains.mps.bootstrap.editorLanguage.structure.CellActionMapItem):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil_new).([StaticMethodDeclaration]_getCellName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellModel])))", "~_QueriesUtil_new._getCellName(jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil_new).([StaticMethodDeclaration]createColorFieldReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~_QueriesUtil_new.createColorFieldReference(java.lang.String,jetbrains.mps.smodel.IScope):jetbrains.mps.baseLanguage.structure.StaticFieldReference");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil_new).([StaticMethodDeclaration]createFontStyleFieldReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~_QueriesUtil_new.createFontStyleFieldReference(java.lang.String,jetbrains.mps.smodel.IScope):jetbrains.mps.baseLanguage.structure.StaticFieldReference");
    ourERI2IdMap.put("static method ([Classifier]NodePresentationUtil).([StaticMethodDeclaration]descriptionText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~NodePresentationUtil.descriptionText(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]NodePresentationUtil).([StaticMethodDeclaration]getAliasOrConceptName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~NodePresentationUtil.getAliasOrConceptName(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]NodePresentationUtil).([StaticMethodDeclaration]getRoleInParentOrConceptName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~NodePresentationUtil.getRoleInParentOrConceptName(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]CopyUtil).([StaticMethodDeclaration]copy((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))", "~CopyUtil.copy(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SModel):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]PropertySupport).([StaticMethodDeclaration]isString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PrimitiveDataTypeDeclaration])))", "~PropertySupport.isString(jetbrains.mps.bootstrap.structureLanguage.structure.PrimitiveDataTypeDeclaration):boolean");
    ourERI2IdMap.put("static method ([Classifier]PropertySupport).([StaticMethodDeclaration]isInteger((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PrimitiveDataTypeDeclaration])))", "~PropertySupport.isInteger(jetbrains.mps.bootstrap.structureLanguage.structure.PrimitiveDataTypeDeclaration):boolean");
    ourERI2IdMap.put("static method ([Classifier]PropertySupport).([StaticMethodDeclaration]isBoolean((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PrimitiveDataTypeDeclaration])))", "~PropertySupport.isBoolean(jetbrains.mps.bootstrap.structureLanguage.structure.PrimitiveDataTypeDeclaration):boolean");
    ourERI2IdMap.put("method ([Classifier]MPSModuleRepository).([InstanceMethodDeclaration]getModuleByUID((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~MPSModuleRepository.getModuleByUID(java.lang.String):jetbrains.mps.project.IModule");
    ourERI2IdMap.put("method ([Classifier]MPSModuleRepository).([InstanceMethodDeclaration]getAllLanguages())", "~MPSModuleRepository.getAllLanguages():java.util.List");
    ourERI2IdMap.put("method ([Classifier]MPSModuleRepository).([InstanceMethodDeclaration]getAllModules())", "~MPSModuleRepository.getAllModules():java.util.List");
    ourERI2IdMap.put("static method ([Classifier]MPSModuleRepository).([StaticMethodDeclaration]getInstance())", "~MPSModuleRepository.getInstance():jetbrains.mps.smodel.MPSModuleRepository");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getNode())", "~BaseAdapter.getNode():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getParent())", "~BaseAdapter.getParent():jetbrains.mps.smodel.INodeAdapter");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]hasConceptProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~BaseAdapter.hasConceptProperty(java.lang.String,jetbrains.mps.smodel.IScope):boolean");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseAdapter.getProperty(java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseAdapter.setProperty(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getBooleanProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseAdapter.getBooleanProperty(java.lang.String):boolean");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setBooleanProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~BaseAdapter.setBooleanProperty(java.lang.String,boolean):void");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getIntegerProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseAdapter.getIntegerProperty(java.lang.String):int");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setIntegerProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~BaseAdapter.setIntegerProperty(java.lang.String,int):void");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))", "~BaseAdapter.setChild(java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseAdapter.getChild(java.lang.String):jetbrains.mps.smodel.INodeAdapter");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getChildCount((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseAdapter.getChildCount(java.lang.String):int");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseAdapter.getReferent(java.lang.String):jetbrains.mps.smodel.INodeAdapter");
    ourERI2IdMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))", "~BaseAdapter.setReferent(java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
    ourERI2IdMap.put("static method ([Classifier]BaseAdapter).([StaticMethodDeclaration]toNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <? extends jetbrains.mps.baseLanguage.types.classifier [INodeAdapter]>])))", "~BaseAdapter.toNodes(java.util.List):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]BaseAdapter).([StaticMethodDeclaration]fromNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~BaseAdapter.fromNode(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.INodeAdapter");
    ourERI2IdMap.put("static method ([Classifier]BaseAdapter).([StaticMethodDeclaration]fromAdapter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))", "~BaseAdapter.fromAdapter(jetbrains.mps.smodel.INodeAdapter):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]BaseAdapter).([StaticMethodDeclaration]isInstance((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <? extends jetbrains.mps.baseLanguage.types.classifier [INodeAdapter]>])))", "~BaseAdapter.isInstance(jetbrains.mps.smodel.SNode,java.lang.Class):boolean");
    ourERI2IdMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]getTargetModelUID())", "~SReference.getTargetModelUID():jetbrains.mps.smodel.SModelUID");
    ourERI2IdMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]setTargetModelUID((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelUID])))", "~SReference.setTargetModelUID(jetbrains.mps.smodel.SModelUID):void");
    ourERI2IdMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]setTargetNodeId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SReference.setTargetNodeId(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]getRole())", "~SReference.getRole():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]getSourceNode())", "~SReference.getSourceNode():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]getTargetNode())", "~SReference.getTargetNode():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]getTargetNodeId())", "~SReference.getTargetNodeId():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]SReference).([StaticMethodDeclaration]create((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelUID]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeId])))", "~SReference.create(java.lang.String,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SModelUID,jetbrains.mps.smodel.SNodeId):jetbrains.mps.smodel.SReference");
    ourERI2IdMap.put("method ([Classifier]SModelUID).([InstanceMethodDeclaration]toString())", "~SModelUID.toString():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SModelUID).([InstanceMethodDeclaration]getLongName())", "~SModelUID.getLongName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SModelUID).([InstanceMethodDeclaration]getNamespace())", "~SModelUID.getNamespace():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SModelUID).([InstanceMethodDeclaration]getStereotype())", "~SModelUID.getStereotype():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]SModelUID).([StaticMethodDeclaration]fromString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SModelUID.fromString(java.lang.String):jetbrains.mps.smodel.SModelUID");
    ourERI2IdMap.put("method ([Classifier]Generator).([InstanceMethodDeclaration]getOwnTemplateModels())", "~Generator.getOwnTemplateModels():java.util.List");
    ourERI2IdMap.put("method ([Classifier]Generator).([InstanceMethodDeclaration]getOwnMappings())", "~Generator.getOwnMappings():java.util.List");
    ourERI2IdMap.put("method ([Classifier]Generator).([InstanceMethodDeclaration]getAlias())", "~Generator.getAlias():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]Generator).([InstanceMethodDeclaration]getModuleUID())", "~Generator.getModuleUID():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]Generator).([InstanceMethodDeclaration]getGeneratorDescriptor())", "~Generator.getGeneratorDescriptor():jetbrains.mps.projectLanguage.structure.GeneratorDescriptor");
    ourERI2IdMap.put("static method ([Classifier]AttributesRolesUtil).([StaticMethodDeclaration]childRoleFromAttributeRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~AttributesRolesUtil.childRoleFromAttributeRole(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]AttributesRolesUtil).([StaticMethodDeclaration]getLinkRoleFromLinkAttributeRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~AttributesRolesUtil.getLinkRoleFromLinkAttributeRole(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]AttributesRolesUtil).([StaticMethodDeclaration]getPropertyNameFromPropertyAttributeRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~AttributesRolesUtil.getPropertyNameFromPropertyAttributeRole(java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getUID())", "~SModel.getUID():jetbrains.mps.smodel.SModelUID");
    ourERI2IdMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getShortName())", "~SModel.getShortName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getStereotype())", "~SModel.getStereotype():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getLongName())", "~SModel.getLongName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getRootsAdapters())", "~SModel.getRootsAdapters():java.util.List");
    ourERI2IdMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getRootsAdapters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SModel.getRootsAdapters(java.lang.Class):java.util.List");
    ourERI2IdMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]addRoot((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SModel.addRoot(jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getModelDescriptor())", "~SModel.getModelDescriptor():jetbrains.mps.smodel.SModelDescriptor");
    ourERI2IdMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getLanguages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~SModel.getLanguages(jetbrains.mps.smodel.IScope):java.util.List");
    ourERI2IdMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]allImportedModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~SModel.allImportedModels(jetbrains.mps.smodel.IScope):java.util.List");
    ourERI2IdMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]toString())", "~SModel.toString():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getNodeById((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SModel.getNodeById(java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]allAdaptersIncludingImported((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SModel.allAdaptersIncludingImported(jetbrains.mps.smodel.IScope,java.lang.Class):java.util.List");
    ourERI2IdMap.put("method ([Classifier]Language$LanguageAspectStatus).([InstanceMethodDeclaration]getLanguage())", "~Language$LanguageAspectStatus.getLanguage():jetbrains.mps.smodel.Language");
    ourERI2IdMap.put("method ([Classifier]Language$LanguageAspectStatus).([InstanceMethodDeclaration]getAspectKind())", "~Language$LanguageAspectStatus.getAspectKind():jetbrains.mps.smodel.Language$LanguageAspectStatus$AspectKind");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]findConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~SModelUtil_new.findConceptDeclaration(java.lang.String,jetbrains.mps.smodel.IScope):jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]findNodeByFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~SModelUtil_new.findNodeByFQName(java.lang.String,java.lang.Class,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.BaseAdapter");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getBaseConcept())", "~SModelUtil_new.getBaseConcept():jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]isAssignableConcept((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration])))", "~SModelUtil_new.isAssignableConcept(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration):boolean");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]isAssignableConcept((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SModelUtil_new.isAssignableConcept(java.lang.String,java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getGenuineLinkDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration])))", "~SModelUtil_new.getGenuineLinkDeclaration(jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration):jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getGenuineLinkRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration])))", "~SModelUtil_new.getGenuineLinkRole(jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getGenuineLinkSourceCardinality((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration])))", "~SModelUtil_new.getGenuineLinkSourceCardinality(jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration):jetbrains.mps.bootstrap.structureLanguage.structure.Cardinality");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]instantiateConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))", "~SModelUtil_new.instantiateConceptDeclaration(jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration,jetbrains.mps.smodel.SModel):jetbrains.mps.smodel.INodeAdapter");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]instantiateConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SModelUtil_new.instantiateConceptDeclaration(jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration,jetbrains.mps.smodel.SModel,boolean):jetbrains.mps.smodel.INodeAdapter");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]instantiateConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SModelUtil_new.instantiateConceptDeclaration(java.lang.String,jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope,boolean):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getAdapterClassConceptForConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~SModelUtil_new.getAdapterClassConceptForConceptDeclaration(jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration,jetbrains.mps.smodel.IScope):jetbrains.mps.baseLanguage.structure.ClassConcept");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getDeclaringLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~SModelUtil_new.getDeclaringLanguage(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.Language");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getSubconcepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~SModelUtil_new.getSubconcepts(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]findLinkDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SModelUtil_new.findLinkDeclaration(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,java.lang.String):jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration");
    ourERI2IdMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getStringConceptProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SModelUtil_new.getStringConceptProperty(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getSModel())", "~SModelDescriptor.getSModel():jetbrains.mps.smodel.SModel");
    ourERI2IdMap.put("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getModelUID())", "~SModelDescriptor.getModelUID():jetbrains.mps.smodel.SModelUID");
    ourERI2IdMap.put("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getName())", "~SModelDescriptor.getName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getLongName())", "~SModelDescriptor.getLongName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getStereotype())", "~SModelDescriptor.getStereotype():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]findUsages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SModelDescriptor.findUsages(jetbrains.mps.smodel.SNode):java.util.Set");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getNode())", "~INodeAdapter.getNode():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]addChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))", "~INodeAdapter.addChild(java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]insertChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))", "~INodeAdapter.insertChild(jetbrains.mps.smodel.INodeAdapter,java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getChildren((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~INodeAdapter.getChildren(java.lang.String):java.util.List");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]children((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~INodeAdapter.children(java.lang.String):java.util.Iterator");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~INodeAdapter.getAttribute(java.lang.String):jetbrains.mps.smodel.INodeAdapter");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getAttributes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~INodeAdapter.getAttributes(java.lang.String):java.util.List");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))", "~INodeAdapter.setAttribute(java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]addAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))", "~INodeAdapter.addAttribute(java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~INodeAdapter.getPropertyAttribute(java.lang.String,java.lang.String):jetbrains.mps.smodel.INodeAdapter");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getPropertyAttributes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~INodeAdapter.getPropertyAttributes(java.lang.String,java.lang.String):java.util.List");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]setPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))", "~INodeAdapter.setPropertyAttribute(java.lang.String,java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]addPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))", "~INodeAdapter.addPropertyAttribute(java.lang.String,java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getLinkAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~INodeAdapter.getLinkAttribute(java.lang.String,java.lang.String):jetbrains.mps.smodel.INodeAdapter");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]setLinkAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))", "~INodeAdapter.setLinkAttribute(java.lang.String,java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]addLinkAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))", "~INodeAdapter.addLinkAttribute(java.lang.String,java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
    ourERI2IdMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getLinkAttributes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~INodeAdapter.getLinkAttributes(java.lang.String,java.lang.String):java.util.List");
    ourERI2IdMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]getModelDescriptor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelUID])))", "~IScope.getModelDescriptor(jetbrains.mps.smodel.SModelUID):jetbrains.mps.smodel.SModelDescriptor");
    ourERI2IdMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]getModelDescriptors())", "~IScope.getModelDescriptors():java.util.List");
    ourERI2IdMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]getLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~IScope.getLanguage(java.lang.String):jetbrains.mps.smodel.Language");
    ourERI2IdMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]isVisibleLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~IScope.isVisibleLanguage(java.lang.String):boolean");
    ourERI2IdMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]getVisibleLanguages())", "~IScope.getVisibleLanguages():java.util.List");
    ourERI2IdMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]getVisibleDevkits())", "~IScope.getVisibleDevkits():java.util.List");
    ourERI2IdMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]isVisibleDevKit((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~IScope.isVisibleDevKit(java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]SNodeId).([StaticMethodDeclaration]fromString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNodeId.fromString(java.lang.String):jetbrains.mps.smodel.SNodeId");
    ourERI2IdMap.put("method ([Classifier]IOperationContext).([InstanceMethodDeclaration]getProject())", "~IOperationContext.getProject():jetbrains.mps.project.MPSProject");
    ourERI2IdMap.put("method ([Classifier]IOperationContext).([InstanceMethodDeclaration]getModule())", "~IOperationContext.getModule():jetbrains.mps.project.IModule");
    ourERI2IdMap.put("method ([Classifier]IOperationContext).([InstanceMethodDeclaration]getScope())", "~IOperationContext.getScope():jetbrains.mps.smodel.IScope");
    ourERI2IdMap.put("method ([Classifier]IOperationContext).([InstanceMethodDeclaration]getComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~IOperationContext.getComponent(java.lang.Class):java.lang.Object");
    ourERI2IdMap.put("constructor [Classifier]SNodePointer[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~SNodePointer.<init>(java.lang.String,java.lang.String)");
    ourERI2IdMap.put("method ([Classifier]SNodePointer).([InstanceMethodDeclaration]getNode())", "~SNodePointer.getNode():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]changeModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))", "~SNode.changeModel(jetbrains.mps.smodel.SModel):void");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]isRoot())", "~SNode.isRoot():boolean");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getModel())", "~SNode.getModel():jetbrains.mps.smodel.SModel");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildRoles())", "~SNode.getChildRoles():java.util.Set");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getReferenceRoles())", "~SNode.getReferenceRoles():java.util.Set");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]replaceChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNode.replaceChild(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getUserObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~SNode.getUserObject(java.lang.Object):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]putUserObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~SNode.putUserObject(java.lang.Object,java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getName())", "~SNode.getName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getRole_())", "~SNode.getRole_():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getAttribute())", "~SNode.getAttribute():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNode.setAttribute(jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getAllAttributes())", "~SNode.getAllAttributes():java.util.List");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNode.getAttribute(java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]setPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNode.setPropertyAttribute(java.lang.String,jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNode.getPropertyAttribute(java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getLinkAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNode.getLinkAttribute(java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getPropertyNames())", "~SNode.getPropertyNames():java.util.Set");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]hasProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNode.hasProperty(java.lang.String):boolean");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNode.getProperty(java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]setProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNode.setProperty(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getParent())", "~SNode.getParent():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNode.getChild(java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]removeChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNode.removeChild(jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]addChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNode.addChild(java.lang.String,jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildCount((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNode.getChildCount(java.lang.String):int");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getIndexOfChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNode.getIndexOfChild(jetbrains.mps.smodel.SNode):int");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildren())", "~SNode.getChildren():java.util.List");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildCount())", "~SNode.getChildCount():int");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildren((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNode.getChildren(java.lang.String):java.util.List");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getReferences())", "~SNode.getReferences():java.util.List");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]setReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNode.setReferent(java.lang.String,jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SReference");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNode.getReferent(java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]addReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SReference])))", "~SNode.addReference(jetbrains.mps.smodel.SReference):void");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getDebugText())", "~SNode.getDebugText():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getId())", "~SNode.getId():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getSNodeId())", "~SNode.getSNodeId():jetbrains.mps.smodel.SNodeId");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]toString())", "~SNode.toString():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getConceptFqName())", "~SNode.getConceptFqName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]setConceptFqName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNode.setConceptFqName(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]isInstanceOfConcept((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNode.isInstanceOfConcept(java.lang.String):boolean");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getConceptDeclarationAdapter())", "~SNode.getConceptDeclarationAdapter():jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~SNode.getLanguage(jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.Language");
    ourERI2IdMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getAdapter())", "~SNode.getAdapter():jetbrains.mps.smodel.BaseAdapter");
    ourERI2IdMap.put("method ([Classifier]Language).([InstanceMethodDeclaration]getNamespace())", "~Language.getNamespace():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]Language).([InstanceMethodDeclaration]getStructureModelDescriptor())", "~Language.getStructureModelDescriptor():jetbrains.mps.smodel.SModelDescriptor");
    ourERI2IdMap.put("method ([Classifier]Language).([InstanceMethodDeclaration]getConstraintsModelDescriptor())", "~Language.getConstraintsModelDescriptor():jetbrains.mps.smodel.SModelDescriptor");
    ourERI2IdMap.put("method ([Classifier]Language).([InstanceMethodDeclaration]getEditorModelDescriptor())", "~Language.getEditorModelDescriptor():jetbrains.mps.smodel.SModelDescriptor");
    ourERI2IdMap.put("static method ([Classifier]Language).([StaticMethodDeclaration]getLanguageForLanguageAspect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelDescriptor])))", "~Language.getLanguageForLanguageAspect(jetbrains.mps.smodel.SModelDescriptor):jetbrains.mps.smodel.Language");
    ourERI2IdMap.put("static method ([Classifier]Language).([StaticMethodDeclaration]getLanguageAspectStatus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelDescriptor])))", "~Language.getLanguageAspectStatus(jetbrains.mps.smodel.SModelDescriptor):jetbrains.mps.smodel.Language$LanguageAspectStatus");
    ourERI2IdMap.put("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isSimple((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))", "~DataTypeUtil.isSimple(jetbrains.mps.bootstrap.structureLanguage.structure.DataTypeDeclaration):boolean");
    ourERI2IdMap.put("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isEnum((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))", "~DataTypeUtil.isEnum(jetbrains.mps.bootstrap.structureLanguage.structure.DataTypeDeclaration):boolean");
    ourERI2IdMap.put("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isSimpleString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))", "~DataTypeUtil.isSimpleString(jetbrains.mps.bootstrap.structureLanguage.structure.DataTypeDeclaration):boolean");
    ourERI2IdMap.put("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isSimpleInteger((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))", "~DataTypeUtil.isSimpleInteger(jetbrains.mps.bootstrap.structureLanguage.structure.DataTypeDeclaration):boolean");
    ourERI2IdMap.put("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isSimpleBoolean((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))", "~DataTypeUtil.isSimpleBoolean(jetbrains.mps.bootstrap.structureLanguage.structure.DataTypeDeclaration):boolean");
    ourERI2IdMap.put("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]getDefaultMember((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EnumerationDataTypeDeclaration])))", "~DataTypeUtil.getDefaultMember(jetbrains.mps.bootstrap.structureLanguage.structure.EnumerationDataTypeDeclaration):jetbrains.mps.bootstrap.structureLanguage.structure.EnumerationMemberDeclaration");
    ourERI2IdMap.put("method ([Classifier]BehaviorManager).([InstanceMethodDeclaration]invoke((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Class]>]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))", "~BehaviorManager.invoke(java.lang.Class,jetbrains.mps.smodel.SNode,java.lang.String,java.util.List,java.lang.Object[]):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]BehaviorManager).([StaticMethodDeclaration]getInstance())", "~BehaviorManager.getInstance():jetbrains.mps.smodel.behaviour.BehaviorManager");
    ourERI2IdMap.put("static method ([Classifier]GeneratedQueriesOpener).([StaticMethodDeclaration]openQueryMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~GeneratedQueriesOpener.openQueryMethod(jetbrains.mps.smodel.IOperationContext,jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("method ([Classifier]RequestUri).([InstanceMethodDeclaration]getControllerName())", "~RequestUri.getControllerName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]RequestUri).([InstanceMethodDeclaration]getActionName())", "~RequestUri.getActionName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]RequestUri).([InstanceMethodDeclaration]getTail())", "~RequestUri.getTail():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]HostToBaseUrlConfiguration).([InstanceMethodDeclaration]setHostToBaseUrlMapping((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [String]>])))", "~HostToBaseUrlConfiguration.setHostToBaseUrlMapping(java.util.Map):void");
    ourERI2IdMap.put("method ([Classifier]HostToBaseUrlConfiguration).([InstanceMethodDeclaration]setDefaultBaseUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~HostToBaseUrlConfiguration.setDefaultBaseUrl(java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getActionUrl((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~UrlUtil.getActionUrl(boolean,java.lang.String,java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getXmlActionUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~UrlUtil.getXmlActionUrl(java.lang.String,java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getActionUrl((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [QueryParameter]])))", "~UrlUtil.getActionUrl(boolean,java.lang.String,java.lang.String,boolean,jetbrains.mps.webr.runtime.uri.QueryParameter[]):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getStylesheetUri((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))", "~UrlUtil.getStylesheetUri(java.lang.String,webr.framework.textBuilder.TBuilderContext):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getClasspathResourceUri((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))", "~UrlUtil.getClasspathResourceUri(java.lang.String,webr.framework.textBuilder.TBuilderContext):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getPersistentFileUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Integer]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Integer])))", "~UrlUtil.getPersistentFileUrl(com.jetbrains.teamsys.database.Entity,webr.framework.textBuilder.TBuilderContext,java.lang.Integer,java.lang.Integer):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getRootURI())", "~UrlUtil.getRootURI():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getEventParameters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [QueryParameter]])))", "~UrlUtil.getEventParameters(webr.framework.textBuilder.TBuilderContext,java.lang.String,jetbrains.mps.webr.runtime.uri.QueryParameter[]):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getHandlerUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))", "~UrlUtil.getHandlerUrl(webr.framework.textBuilder.TBuilderContext):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]EditorCellTags).([StaticMethodDeclaration]getOpeningText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellModel])))", "~EditorCellTags.getOpeningText(jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]EditorCellTags).([StaticMethodDeclaration]getClosingText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellModel])))", "~EditorCellTags.getClosingText(jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]_EditorUtil).([StaticMethodDeclaration]grayIfNotSelectable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~_EditorUtil.grayIfNotSelectable(jetbrains.mps.smodel.SNode):java.awt.Color");
    ourERI2IdMap.put("constructor [Classifier]SelectImageFileButton[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellModel_Image]))", "~SelectImageFileButton.<init>(jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Image)");
    ourERI2IdMap.put("method ([Classifier]RemoteTomcatHandler).([InstanceMethodDeclaration]setBaseUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~RemoteTomcatHandler.setBaseUrl(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]LocalTomcatHandler).([InstanceMethodDeclaration]setPort((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~LocalTomcatHandler.setPort(int):void");
    ourERI2IdMap.put("method ([Classifier]LocalTomcatHandler).([InstanceMethodDeclaration]setTomcatManager((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TomcatManager])))", "~LocalTomcatHandler.setTomcatManager(jetbrains.mps.webr.webUnit.tomcat.TomcatManager):void");
    ourERI2IdMap.put("static method ([Classifier]FindOperations).([StaticMethodDeclaration]findConceptInstances((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ScriptContext])))", "~FindOperations.findConceptInstances(java.lang.String,jetbrains.mps.ide.scriptLanguage.runtime.ScriptContext):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]FindOperations).([StaticMethodDeclaration]findUsages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ScriptContext])))", "~FindOperations.findUsages(jetbrains.mps.smodel.SNode,jetbrains.mps.ide.scriptLanguage.runtime.ScriptContext):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]FindOperations).([StaticMethodDeclaration]updateReferences((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ScriptContext])))", "~FindOperations.updateReferences(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.ide.scriptLanguage.runtime.ScriptContext):void");
    ourERI2IdMap.put("method ([Classifier]ScriptContext).([InstanceMethodDeclaration]getActionContext())", "~ScriptContext.getActionContext():jetbrains.mps.ide.action.ActionContext");
    ourERI2IdMap.put("method ([Classifier]BaseMigrationScript).([InstanceMethodDeclaration]addRefactoring((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IRefactoring])))", "~BaseMigrationScript.addRefactoring(jetbrains.mps.refactoring.IRefactoring):void");
    ourERI2IdMap.put("static method ([Classifier]ShowOperations).([StaticMethodDeclaration]showNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [SNode]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ScriptContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ShowOperations.showNodes(java.lang.Iterable,jetbrains.mps.ide.scriptLanguage.runtime.ScriptContext,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]FormatTableManagerImpl).([InstanceMethodDeclaration]setFormatTables((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [BaseFormatTable]>])))", "~FormatTableManagerImpl.setFormatTables(java.util.List):void");
    ourERI2IdMap.put("method ([Classifier]BaseFormatTable).([InstanceMethodDeclaration]getFormatter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseFormatTable.getFormatter(java.lang.String):org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("method ([Classifier]FormatTableManager).([InstanceMethodDeclaration]getFormatTable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~FormatTableManager.getFormatTable(java.lang.String):jetbrains.mps.baseLanguage.ext.dates.table.BaseFormatTable");
    ourERI2IdMap.put("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getHeader((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~HttpServletRequest.getHeader(java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getMethod())", "~HttpServletRequest.getMethod():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getQueryString())", "~HttpServletRequest.getQueryString():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getRequestURL())", "~HttpServletRequest.getRequestURL():java.lang.StringBuffer");
    ourERI2IdMap.put("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getSession())", "~HttpServletRequest.getSession():javax.servlet.http.HttpSession");
    ourERI2IdMap.put("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]sendError((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~HttpServletResponse.sendError(int,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]sendError((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~HttpServletResponse.sendError(int):void");
    ourERI2IdMap.put("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]sendRedirect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~HttpServletResponse.sendRedirect(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]setHeader((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~HttpServletResponse.setHeader(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]addHeader((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~HttpServletResponse.addHeader(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]HttpSession).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~HttpSession.getAttribute(java.lang.String):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]HttpSession).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~HttpSession.setAttribute(java.lang.String,java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]HttpSession).([InstanceMethodDeclaration]invalidate())", "~HttpSession.invalidate():void");
    ourERI2IdMap.put("constructor [Classifier]ClassConcept[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))", "~ClassConcept.<init>(jetbrains.mps.smodel.SNode)");
    ourERI2IdMap.put("method ([Classifier]StatementList).([InstanceMethodDeclaration]getStatements())", "~StatementList.getStatements():java.util.List");
    ourERI2IdMap.put("constructor [Classifier]MappingRuleTemplateNodeSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))", "~MappingRuleTemplateNodeSearchScope.<init>(jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope)");
    ourERI2IdMap.put("static method ([Classifier]HyperlinkUtil).([StaticMethodDeclaration]getHyperlinkComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~HyperlinkUtil.getHyperlinkComponent(java.lang.String):javax.swing.JComponent");
    ourERI2IdMap.put("method ([Classifier]Document).([InstanceMethodDeclaration]getRootElement())", "~Document.getRootElement():org.jdom.Element");
    ourERI2IdMap.put("constructor [Classifier]Text[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~Text.<init>(java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]Element[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~Element.<init>(java.lang.String)");
    ourERI2IdMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]addContent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection])))", "~Element.addContent(java.util.Collection):org.jdom.Element");
    ourERI2IdMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]addContent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Content])))", "~Element.addContent(org.jdom.Content):org.jdom.Element");
    ourERI2IdMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]clone())", "~Element.clone():java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]getChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Element.getChild(java.lang.String):org.jdom.Element");
    ourERI2IdMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]getText())", "~Element.getText():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]AssociationSemantics).([StaticMethodDeclaration]getToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~AssociationSemantics.getToOne(com.jetbrains.teamsys.database.Entity,java.lang.String):com.jetbrains.teamsys.database.Entity");
    ourERI2IdMap.put("static method ([Classifier]AssociationSemantics).([StaticMethodDeclaration]getToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~AssociationSemantics.getToMany(com.jetbrains.teamsys.database.Entity,java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("static method ([Classifier]AssociationSemantics).([StaticMethodDeclaration]getToManyPersistentIterable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~AssociationSemantics.getToManyPersistentIterable(com.jetbrains.teamsys.database.Entity,java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("static method ([Classifier]AssociationSemantics).([StaticMethodDeclaration]getToManySize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~AssociationSemantics.getToManySize(com.jetbrains.teamsys.database.Entity,java.lang.String):long");
    ourERI2IdMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]setOneToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~UndirectedAssociationSemantics.setOneToOne(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]createOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~UndirectedAssociationSemantics.createOneToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]removeOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~UndirectedAssociationSemantics.removeOneToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]clearOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~UndirectedAssociationSemantics.clearOneToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]setManyToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~UndirectedAssociationSemantics.setManyToOne(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]createManyToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~UndirectedAssociationSemantics.createManyToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]removeManyToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~UndirectedAssociationSemantics.removeManyToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]clearManyToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~UndirectedAssociationSemantics.clearManyToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]setOneToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~AggregationAssociationSemantics.setOneToOne(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]createOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~AggregationAssociationSemantics.createOneToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]removeOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~AggregationAssociationSemantics.removeOneToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]clearOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~AggregationAssociationSemantics.clearOneToMany(com.jetbrains.teamsys.database.Entity,java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]setManyToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~AggregationAssociationSemantics.setManyToOne(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]DirectedAssociationSemantics).([StaticMethodDeclaration]setToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~DirectedAssociationSemantics.setToOne(com.jetbrains.teamsys.database.Entity,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]DirectedAssociationSemantics).([StaticMethodDeclaration]createToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~DirectedAssociationSemantics.createToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]DirectedAssociationSemantics).([StaticMethodDeclaration]removeToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))", "~DirectedAssociationSemantics.removeToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
    ourERI2IdMap.put("static method ([Classifier]DirectedAssociationSemantics).([StaticMethodDeclaration]clearToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~DirectedAssociationSemantics.clearToMany(com.jetbrains.teamsys.database.Entity,java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~PrimitiveAssociationSemantics.get(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.Object):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]set((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable])))", "~PrimitiveAssociationSemantics.set(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.Comparable):void");
    ourERI2IdMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]set((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class])))", "~PrimitiveAssociationSemantics.set(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.Comparable,java.lang.Class):void");
    ourERI2IdMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]setHashed((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~PrimitiveAssociationSemantics.setHashed(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]getBlob((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~PrimitiveAssociationSemantics.getBlob(com.jetbrains.teamsys.database.Entity,java.lang.String):java.io.InputStream");
    ourERI2IdMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]getBlobAsString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~PrimitiveAssociationSemantics.getBlobAsString(com.jetbrains.teamsys.database.Entity,java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]setBlob((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~PrimitiveAssociationSemantics.setBlob(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]nodeSubstituteActionsBuilder_Precondition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeSubstituteActionsBuilder])))", "~ActionQueryMethodName.nodeSubstituteActionsBuilder_Precondition(jetbrains.mps.bootstrap.actionsLanguage.structure.NodeSubstituteActionsBuilder):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]rTransformHintSubstituteActionsBuilder_Precondition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RTransformHintSubstituteActionsBuilder])))", "~ActionQueryMethodName.rTransformHintSubstituteActionsBuilder_Precondition(jetbrains.mps.bootstrap.actionsLanguage.structure.RTransformHintSubstituteActionsBuilder):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]nodeFactory_NodeSetupFunction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeFactory])))", "~ActionQueryMethodName.nodeFactory_NodeSetupFunction(jetbrains.mps.bootstrap.actionsLanguage.structure.NodeFactory):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]nodeFactory_SubstituteActionBuilder((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeSubstituteActionsBuilder])))", "~ActionQueryMethodName.nodeFactory_SubstituteActionBuilder(jetbrains.mps.bootstrap.actionsLanguage.structure.NodeSubstituteActionsBuilder):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]nodeFactory_RightTransformActionBuilder((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RTransformHintSubstituteActionsBuilder])))", "~ActionQueryMethodName.nodeFactory_RightTransformActionBuilder(jetbrains.mps.bootstrap.actionsLanguage.structure.RTransformHintSubstituteActionsBuilder):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]INodeSubstituteAction).([InstanceMethodDeclaration]getParameterObject())", "~INodeSubstituteAction.getParameterObject():java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]AbstractNodeSubstituteAction).([InstanceMethodDeclaration]getParameterObject())", "~AbstractNodeSubstituteAction.getParameterObject():java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]ChildSubstituteActionsHelper).([StaticMethodDeclaration]createDefaultActions((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IChildNodeSetter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~ChildSubstituteActionsHelper.createDefaultActions(jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.action.IChildNodeSetter,jetbrains.mps.smodel.IScope):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]NodeFactoryManager).([StaticMethodDeclaration]createNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~NodeFactoryManager.createNode(jetbrains.mps.smodel.SNode,jetbrains.mps.nodeEditor.EditorContext,java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]ModelActions).([StaticMethodDeclaration]createChildSubstituteActions((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IChildNodeSetter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~ModelActions.createChildSubstituteActions(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,jetbrains.mps.smodel.action.IChildNodeSetter,jetbrains.mps.smodel.IOperationContext):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]ModelActions).([StaticMethodDeclaration]createRightTransformHintSubstituteActions((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~ModelActions.createRightTransformHintSubstituteActions(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.IOperationContext):java.util.List");
    ourERI2IdMap.put("method ([Classifier]IChildNodeSetter).([InstanceMethodDeclaration]execute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~IChildNodeSetter.execute(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("constructor [Classifier]CellMenuPart_ReplaceNode_replacementConcept_SearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]))", "~CellMenuPart_ReplaceNode_replacementConcept_SearchScope.<init>(jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration)");
    ourERI2IdMap.put("method ([Classifier]LuceneTextIndexManager).([InstanceMethodDeclaration]close())", "~LuceneTextIndexManager.close():void");
    ourERI2IdMap.put("method ([Classifier]TextIndexMetaDataImpl).([InstanceMethodDeclaration]addEntityMetaData((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexEntityMetaData])))", "~TextIndexMetaDataImpl.addEntityMetaData(java.lang.String,com.jetbrains.teamsys.textindex.TextIndexEntityMetaData):void");
    ourERI2IdMap.put("constructor [Classifier]TextIndexEntityMetaDataImpl[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~TextIndexEntityMetaDataImpl.<init>(java.lang.String)");
    ourERI2IdMap.put("method ([Classifier]TextIndexEntityMetaDataImpl).([InstanceMethodDeclaration]addTextExtractor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [FieldTextExtractor])))", "~TextIndexEntityMetaDataImpl.addTextExtractor(java.lang.String,com.jetbrains.teamsys.textindex.FieldTextExtractor):void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]clearIndex())", "~TextIndexManager.clearIndex():void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]queueUnindexedDocuments())", "~TextIndexManager.queueUnindexedDocuments():void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]searchFor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TextIndexManager.searchFor(java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]searchFor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TextIndexManager.searchFor(java.lang.String,java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
    ourERI2IdMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]waitForPendingDocs())", "~TextIndexManager.waitForPendingDocs():void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]suspendIndexing())", "~TextIndexManager.suspendIndexing():void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]resumeIndexing())", "~TextIndexManager.resumeIndexing():void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]setUseRussianStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TextIndexManager.setUseRussianStemmer(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]setUseGermanStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TextIndexManager.setUseGermanStemmer(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]init())", "~TextIndexManagerBase.init():void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseFrenchStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TextIndexManagerBase.setUseFrenchStemmer(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseSpanishStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TextIndexManagerBase.setUseSpanishStemmer(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUsePortugueseStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TextIndexManagerBase.setUsePortugueseStemmer(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseItalianStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TextIndexManagerBase.setUseItalianStemmer(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseDutchStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TextIndexManagerBase.setUseDutchStemmer(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseFinishStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TextIndexManagerBase.setUseFinishStemmer(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseSwedishStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TextIndexManagerBase.setUseSwedishStemmer(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseNorwegianStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TextIndexManagerBase.setUseNorwegianStemmer(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseDanishStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TextIndexManagerBase.setUseDanishStemmer(boolean):void");
    ourERI2IdMap.put("constructor [Classifier]TextIndexEntityStoreChangesListener[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexMetaData]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]))", "~TextIndexEntityStoreChangesListener.<init>(com.jetbrains.teamsys.textindex.TextIndexMetaData,com.jetbrains.teamsys.textindex.TextIndexManager)");
    ourERI2IdMap.put("static method ([Classifier]TextIndexOperations).([StaticMethodDeclaration]search((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))", "~TextIndexOperations.search(com.jetbrains.teamsys.database.TransientStoreSession,com.jetbrains.teamsys.textindex.TextIndexManager,java.lang.String,java.lang.Iterable):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]TextIndexOperations).([StaticMethodDeclaration]search((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))", "~TextIndexOperations.search(com.jetbrains.teamsys.database.TransientStoreSession,com.jetbrains.teamsys.textindex.TextIndexManager,java.lang.String,java.lang.String,java.lang.Iterable):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]TextIndexOperations).([StaticMethodDeclaration]search((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TextIndexOperations.search(com.jetbrains.teamsys.database.TransientStoreSession,com.jetbrains.teamsys.textindex.TextIndexManager,java.lang.String,java.lang.String):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]TextIndexOperations).([StaticMethodDeclaration]search((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TextIndexOperations.search(com.jetbrains.teamsys.database.TransientStoreSession,com.jetbrains.teamsys.textindex.TextIndexManager,java.lang.String,java.lang.String,java.lang.String):java.lang.Iterable");
    ourERI2IdMap.put("method ([Classifier]ThreadPoolTaskExecutor).([InstanceMethodDeclaration]setCorePoolSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~ThreadPoolTaskExecutor.setCorePoolSize(int):void");
    ourERI2IdMap.put("method ([Classifier]ThreadPoolTaskExecutor).([InstanceMethodDeclaration]setMaxPoolSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~ThreadPoolTaskExecutor.setMaxPoolSize(int):void");
    ourERI2IdMap.put("constructor [Classifier]CellProviderWithRole[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]))", "~CellProviderWithRole.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.nodeEditor.EditorContext)");
    ourERI2IdMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~CellProviderWithRole.setRole(java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]getRoleAttribute())", "~CellProviderWithRole.getRoleAttribute():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]getRoleAttributeClass())", "~CellProviderWithRole.getRoleAttributeClass():java.lang.Class");
    ourERI2IdMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]createDefaultSubstituteInfo())", "~CellProviderWithRole.createDefaultSubstituteInfo():jetbrains.mps.nodeEditor.cellMenu.INodeSubstituteInfo");
    ourERI2IdMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setNoTargetText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~CellProviderWithRole.setNoTargetText(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setReadOnly((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~CellProviderWithRole.setReadOnly(boolean):void");
    ourERI2IdMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setAllowsEmptyTarget((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~CellProviderWithRole.setAllowsEmptyTarget(boolean):void");
    ourERI2IdMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setAuxiliaryCellProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractCellProvider])))", "~CellProviderWithRole.setAuxiliaryCellProvider(jetbrains.mps.nodeEditor.AbstractCellProvider):void");
    ourERI2IdMap.put("constructor [Classifier]AbstractCellListHandler[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]))", "~AbstractCellListHandler.<init>(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.nodeEditor.EditorContext)");
    ourERI2IdMap.put("method ([Classifier]AbstractCellListHandler).([InstanceMethodDeclaration]getOwner())", "~AbstractCellListHandler.getOwner():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]AbstractCellListHandler).([InstanceMethodDeclaration]getElementRole())", "~AbstractCellListHandler.getElementRole():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]AbstractCellListHandler).([InstanceMethodDeclaration]createSeparatorCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~AbstractCellListHandler.createSeparatorCell(jetbrains.mps.nodeEditor.EditorContext):jetbrains.mps.nodeEditor.EditorCell");
    ourERI2IdMap.put("method ([Classifier]AbstractCellListHandler).([InstanceMethodDeclaration]createCells((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellLayout]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~AbstractCellListHandler.createCells(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.nodeEditor.CellLayout,boolean):jetbrains.mps.nodeEditor.EditorCell_Collection");
    ourERI2IdMap.put("static method ([Classifier]Webquery).([StaticMethodDeclaration]query((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [WQParameter]])))", "~Webquery.query(java.lang.String,java.lang.String,jetbrains.mps.webquery.runtime.WQParameter[]):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]Webquery).([StaticMethodDeclaration]param((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Webquery.param(java.lang.String,java.lang.String):jetbrains.mps.webquery.runtime.WQParameter");
    ourERI2IdMap.put("method ([Classifier]CronTrigger).([InstanceMethodDeclaration]setCronExpression((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~CronTrigger.setCronExpression(java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]IOUtils).([StaticMethodDeclaration]copyLarge((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InputStream]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [OutputStream])))", "~IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream):long");
    ourERI2IdMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getInputStream())", "~DiskFileItem.getInputStream():java.io.InputStream");
    ourERI2IdMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getContentType())", "~DiskFileItem.getContentType():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getName())", "~DiskFileItem.getName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]isInMemory())", "~DiskFileItem.isInMemory():boolean");
    ourERI2IdMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getSize())", "~DiskFileItem.getSize():long");
    ourERI2IdMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getFieldName())", "~DiskFileItem.getFieldName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]isFormField())", "~DiskFileItem.isFormField():boolean");
    ourERI2IdMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getStoreLocation())", "~DiskFileItem.getStoreLocation():java.io.File");
    ourERI2IdMap.put("constructor [Classifier]DiskFileItemFactory[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File]))", "~DiskFileItemFactory.<init>(int,java.io.File)");
    ourERI2IdMap.put("static method ([Classifier]PeriodTypeHackUtil).([StaticMethodDeclaration]isInstanceOfPeriod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~PeriodTypeHackUtil.isInstanceOfPeriod(jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("method ([Classifier]MPSProject).([InstanceMethodDeclaration]getProjectLanguages())", "~MPSProject.getProjectLanguages():java.util.List");
    ourERI2IdMap.put("method ([Classifier]MPSProject).([InstanceMethodDeclaration]getProjectSolutions())", "~MPSProject.getProjectSolutions():java.util.List");
    ourERI2IdMap.put("method ([Classifier]MPSProject).([InstanceMethodDeclaration]getComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~MPSProject.getComponent(java.lang.Class):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]GlobalScope).([StaticMethodDeclaration]getInstance())", "~GlobalScope.getInstance():jetbrains.mps.project.GlobalScope");
    ourERI2IdMap.put("method ([Classifier]AbstractModule).([InstanceMethodDeclaration]getDescriptorFile())", "~AbstractModule.getDescriptorFile():java.io.File");
    ourERI2IdMap.put("method ([Classifier]AbstractModule).([InstanceMethodDeclaration]getScope())", "~AbstractModule.getScope():jetbrains.mps.smodel.IScope");
    ourERI2IdMap.put("method ([Classifier]IModule).([InstanceMethodDeclaration]getOwnModelDescriptors())", "~IModule.getOwnModelDescriptors():java.util.List");
    ourERI2IdMap.put("method ([Classifier]IModule).([InstanceMethodDeclaration]getNonDefaultModelRoots())", "~IModule.getNonDefaultModelRoots():java.util.List");
    ourERI2IdMap.put("method ([Classifier]IModule).([InstanceMethodDeclaration]getDescriptorFile())", "~IModule.getDescriptorFile():java.io.File");
    ourERI2IdMap.put("method ([Classifier]DevKit).([InstanceMethodDeclaration]getName())", "~DevKit.getName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]Solution).([InstanceMethodDeclaration]getModuleUID())", "~Solution.getModuleUID():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]setFrom((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~MimeMessageHelper.setFrom(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]addTo((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~MimeMessageHelper.addTo(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]addCc((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~MimeMessageHelper.addCc(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]addBcc((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~MimeMessageHelper.addBcc(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]setSubject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~MimeMessageHelper.setSubject(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]setText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~MimeMessageHelper.setText(java.lang.String,boolean):void");
    ourERI2IdMap.put("method ([Classifier]JavaMailSenderImpl).([InstanceMethodDeclaration]setHost((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~JavaMailSenderImpl.setHost(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]JavaMailSenderImpl).([InstanceMethodDeclaration]setDefaultEncoding((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~JavaMailSenderImpl.setDefaultEncoding(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]AbstractEntityStoreAwareTestCase).([InstanceMethodDeclaration]setRemoveStoreOnTearsDown((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~AbstractEntityStoreAwareTestCase.setRemoveStoreOnTearsDown(boolean):void");
    ourERI2IdMap.put("method ([Classifier]AbstractEntityStoreAwareTestCase).([InstanceMethodDeclaration]setUp())", "~AbstractEntityStoreAwareTestCase.setUp():void");
    ourERI2IdMap.put("method ([Classifier]AbstractEntityStoreAwareTestCase).([InstanceMethodDeclaration]tearDown())", "~AbstractEntityStoreAwareTestCase.tearDown():void");
    ourERI2IdMap.put("static method ([Classifier]StringBuilderSpinAllocator).([StaticMethodDeclaration]alloc())", "~StringBuilderSpinAllocator.alloc():java.lang.StringBuilder");
    ourERI2IdMap.put("static method ([Classifier]StringBuilderSpinAllocator).([StaticMethodDeclaration]dispose((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [StringBuilder])))", "~StringBuilderSpinAllocator.dispose(java.lang.StringBuilder):void");
    ourERI2IdMap.put("constructor [Classifier]LightByteArrayOutputStream[ConstructorDeclaration] ()", "~LightByteArrayOutputStream.<init>()");
    ourERI2IdMap.put("constructor [Classifier]IllegalStateException[ConstructorDeclaration] ()", "~IllegalStateException.<init>()");
    ourERI2IdMap.put("constructor [Classifier]IllegalStateException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~IllegalStateException.<init>(java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]RootTemplate[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))", "~RootTemplate.<init>(jetbrains.mps.smodel.SNode)");
    ourERI2IdMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]createRootRule_Condition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateFunctionMethodName.createRootRule_Condition(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]ifMacro_Condition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateFunctionMethodName.ifMacro_Condition(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]baseMappingRule_Condition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateFunctionMethodName.baseMappingRule_Condition(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]propertyMacro_GetPropertyValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateFunctionMethodName.propertyMacro_GetPropertyValue(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]referenceMacro_GetReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateFunctionMethodName.referenceMacro_GetReferent(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]sourceSubstituteMacro_SourceNodesQuery((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateFunctionMethodName.sourceSubstituteMacro_SourceNodesQuery(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]sourceSubstituteMacro_SourceNodeQuery((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateFunctionMethodName.sourceSubstituteMacro_SourceNodeQuery(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]templateFragment_ContextNodeQuery((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateFunctionMethodName.templateFragment_ContextNodeQuery(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]weaving_MappingRule_ContextNodeQuery((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateFunctionMethodName.weaving_MappingRule_ContextNodeQuery(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]mapSrcMacro_MapperFunction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateFunctionMethodName.mapSrcMacro_MapperFunction(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("constructor [Classifier]NodeListIterableAdapter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeList]))", "~NodeListIterableAdapter.<init>(org.w3c.dom.NodeList)");
    ourERI2IdMap.put("constructor [Classifier]NamedNodeMapIterableAdapter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NamedNodeMap]))", "~NamedNodeMapIterableAdapter.<init>(org.w3c.dom.NamedNodeMap)");
    ourERI2IdMap.put("constructor [Classifier]ChainedIterable[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Iterable, <any_>]]))", "~ChainedIterable.<init>(java.lang.Iterable[])");
    ourERI2IdMap.put("static method ([Classifier]BaseConcept).([StaticMethodDeclaration]newInstance((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~BaseConcept.newInstance(jetbrains.mps.smodel.SModel,boolean):jetbrains.mps.core.structure.BaseConcept");
    ourERI2IdMap.put("static method ([Classifier]BaseConcept).([StaticMethodDeclaration]newInstance((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))", "~BaseConcept.newInstance(jetbrains.mps.smodel.SModel):jetbrains.mps.core.structure.BaseConcept");
    ourERI2IdMap.put("static method ([Classifier]HUtil).([StaticMethodDeclaration]copyIfNecessary((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))", "~HUtil.copyIfNecessary(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SModel):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]HUtil).([StaticMethodDeclaration]createMatchingPatternByConceptFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~HUtil.createMatchingPatternByConceptFQName(java.lang.String):jetbrains.mps.patterns.IMatchingPattern");
    ourERI2IdMap.put("constructor [Classifier]AbstractSubtypingRule_Runtime[ConstructorDeclaration] ()", "~AbstractSubtypingRule_Runtime.<init>()");
    ourERI2IdMap.put("method ([Classifier]ComparisonRule_Runtime).([InstanceMethodDeclaration]getApplicableConceptFQName1())", "~ComparisonRule_Runtime.getApplicableConceptFQName1():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]typeOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~RuntimeSupport.typeOf(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createNewRuntimeTypesVariable((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~RuntimeSupport.createNewRuntimeTypesVariable(boolean):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createEquation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~RuntimeSupport.createEquation(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createLessThanInequation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~RuntimeSupport.createLessThanInequation(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createLessThanInequationStrong((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~RuntimeSupport.createLessThanInequationStrong(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createGreaterThanInequation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~RuntimeSupport.createGreaterThanInequation(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createComparableEquation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~RuntimeSupport.createComparableEquation(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createComparableEquationStrong((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~RuntimeSupport.createComparableEquationStrong(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]givetype((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~RuntimeSupport.givetype(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]whenConcrete((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Runnable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~RuntimeSupport.whenConcrete(jetbrains.mps.smodel.SNode,java.lang.Runnable,java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]hasEffect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~RuntimeSupport.hasEffect(jetbrains.mps.smodel.SNode,java.lang.Object):boolean");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]addEffect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~RuntimeSupport.addEffect(jetbrains.mps.smodel.SNode,java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]coerce((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IMatchingPattern]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~RuntimeSupport.coerce(jetbrains.mps.smodel.SNode,jetbrains.mps.patterns.IMatchingPattern,boolean):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]coerce((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IMatchingPattern])))", "~RuntimeSupport.coerce(jetbrains.mps.smodel.SNode,jetbrains.mps.patterns.IMatchingPattern):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]XhtmlSchemaUtil).([StaticMethodDeclaration]findXhtmlSchema((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~XhtmlSchemaUtil.findXhtmlSchema(jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("constructor [Classifier]TypeVarScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))", "~TypeVarScope.<init>(jetbrains.mps.smodel.SNode)");
    ourERI2IdMap.put("method ([Classifier]IFilter).([InstanceMethodDeclaration]accept((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))", "~IFilter.accept(java.lang.Object):boolean");
    ourERI2IdMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]From((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TreePath, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~TreeTraversalFactory.From(java.lang.Object,ypath.util.TreePath):ypath.util.ITreeTraversal");
    ourERI2IdMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Traverse((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITreeTraversal, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TraversalAxis])))", "~TreeTraversalFactory.Traverse(ypath.util.ITreeTraversal,ypath.util.TraversalAxis):ypath.util.ITreeTraversal");
    ourERI2IdMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Filter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITreeTraversal, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IFilter, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~TreeTraversalFactory.Filter(ypath.util.ITreeTraversal,ypath.util.IFilter):ypath.util.ITreeTraversal");
    ourERI2IdMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Axis((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TreeTraversalFactory.Axis(java.lang.String):ypath.util.TraversalAxis");
    ourERI2IdMap.put("constructor [Classifier]TreePath[ConstructorDeclaration] ()", "~TreePath.<init>()");
    ourERI2IdMap.put("method ([Classifier]TreePath).([InstanceMethodDeclaration]registerFeature((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IFeatureDescriptor, <any_>])))", "~TreePath.registerFeature(ypath.util.IFeatureDescriptor):void");
    ourERI2IdMap.put("method ([Classifier]TreePath).([InstanceMethodDeclaration]startTraversal((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))", "~TreePath.startTraversal(java.lang.Object):ypath.util.ITreeTraversal");
    ourERI2IdMap.put("constructor [Classifier]CompositeFilter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [IFilter, <any_>]]))", "~CompositeFilter.<init>(ypath.util.IFilter[])");
    ourERI2IdMap.put("method ([Classifier]ITreeTraversal).([InstanceMethodDeclaration]getTreePath())", "~ITreeTraversal.getTreePath():ypath.util.ITreePath");
    ourERI2IdMap.put("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getName())", "~TraversalAxis.getName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getValue())", "~TraversalAxis.getValue():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]getConstants())", "~TraversalAxis.getConstants():java.util.List");
    ourERI2IdMap.put("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]parseValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TraversalAxis.parseValue(java.lang.String):ypath.util.TraversalAxis");
    ourERI2IdMap.put("constructor [Classifier]DOMSource[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))", "~DOMSource.<init>(org.w3c.dom.Node)");
    ourERI2IdMap.put("method ([Classifier]EditorCell_Label).([InstanceMethodDeclaration]setDefaultText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~EditorCell_Label.setDefaultText(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell_Label).([InstanceMethodDeclaration]getTextLine())", "~EditorCell_Label.getTextLine():jetbrains.mps.nodeEditor.TextLine");
    ourERI2IdMap.put("method ([Classifier]EditorCell_Label).([InstanceMethodDeclaration]getNullTextLine())", "~EditorCell_Label.getNullTextLine():jetbrains.mps.nodeEditor.TextLine");
    ourERI2IdMap.put("method ([Classifier]EditorCell_Label).([InstanceMethodDeclaration]setEditable((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EditorCell_Label.setEditable(boolean):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setSelectable((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EditorCell.setSelectable(boolean):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setUnderlined((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EditorCell.setUnderlined(boolean):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]getEditorContext())", "~EditorCell.getEditorContext():jetbrains.mps.nodeEditor.EditorContext");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]getSNode())", "~EditorCell.getSNode():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setSubstituteInfo((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeSubstituteInfo])))", "~EditorCell.setSubstituteInfo(jetbrains.mps.nodeEditor.cellMenu.INodeSubstituteInfo):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]getSubstituteInfo())", "~EditorCell.getSubstituteInfo():jetbrains.mps.nodeEditor.cellMenu.INodeSubstituteInfo");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellAction])))", "~EditorCell.setAction(java.lang.String,jetbrains.mps.nodeEditor.EditorCellAction):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]addKeyMap((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellKeyMap])))", "~EditorCell.addKeyMap(jetbrains.mps.nodeEditor.EditorCellKeyMap):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setDrawBorder((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EditorCell.setDrawBorder(boolean):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setDrawBrackets((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EditorCell.setDrawBrackets(boolean):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setBracketsColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))", "~EditorCell.setBracketsColor(java.awt.Color):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setFontSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~EditorCell.setFontSize(int):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setFontType((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~EditorCell.setFontType(int):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setLayoutConstraint((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~EditorCell.setLayoutConstraint(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]putUserObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~EditorCell.putUserObject(java.lang.Object,java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]getUserObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~EditorCell.getUserObject(java.lang.Object):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setCellBackgroundColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))", "~EditorCell.setCellBackgroundColor(java.awt.Color):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setRightTransformAnchorTag((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~EditorCell.setRightTransformAnchorTag(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]PropertyAccessor).([InstanceMethodDeclaration]getPropertyName())", "~PropertyAccessor.getPropertyName():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]CreateFromUsageUtil).([StaticMethodDeclaration]isApplicable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~CreateFromUsageUtil.isApplicable(jetbrains.mps.nodeEditor.EditorContext):boolean");
    ourERI2IdMap.put("static method ([Classifier]CreateFromUsageUtil).([StaticMethodDeclaration]getText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~CreateFromUsageUtil.getText(jetbrains.mps.nodeEditor.EditorContext):java.lang.String");
    ourERI2IdMap.put("constructor [Classifier]EditorCellKeyMap[ConstructorDeclaration] ()", "~EditorCellKeyMap.<init>()");
    ourERI2IdMap.put("method ([Classifier]EditorCellKeyMap).([InstanceMethodDeclaration]putAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellKeyMapAction])))", "~EditorCellKeyMap.putAction(java.lang.String,java.lang.String,jetbrains.mps.nodeEditor.EditorCellKeyMapAction):void");
    ourERI2IdMap.put("method ([Classifier]EditorCellKeyMap).([InstanceMethodDeclaration]setApplicableToEveryModel((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EditorCellKeyMap.setApplicableToEveryModel(boolean):void");
    ourERI2IdMap.put("static method ([Classifier]EditorCellKeyMap).([StaticMethodDeclaration]getVirtualKeycodes())", "~EditorCellKeyMap.getVirtualKeycodes():java.util.List");
    ourERI2IdMap.put("static method ([Classifier]EditorCellKeyMap).([StaticMethodDeclaration]isValidModifiers((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~EditorCellKeyMap.isValidModifiers(java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]EditorCellKeyMap).([StaticMethodDeclaration]isValidKeycode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~EditorCellKeyMap.isValidKeycode(java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]EditorCell_Component).([StaticMethodDeclaration]createComponentCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JComponent]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~EditorCell_Component.createComponentCell(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode,javax.swing.JComponent,java.lang.String):jetbrains.mps.nodeEditor.EditorCell");
    ourERI2IdMap.put("constructor [Classifier]EditorCell_Error[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~EditorCell_Error.<init>(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode,java.lang.String)");
    ourERI2IdMap.put("method ([Classifier]EditorManager).([InstanceMethodDeclaration]getCurrentAttributedPropertyCell())", "~EditorManager.getCurrentAttributedPropertyCell():jetbrains.mps.nodeEditor.EditorCell");
    ourERI2IdMap.put("method ([Classifier]EditorManager).([InstanceMethodDeclaration]getCurrentAttributedLinkCell())", "~EditorManager.getCurrentAttributedLinkCell():jetbrains.mps.nodeEditor.EditorCell");
    ourERI2IdMap.put("method ([Classifier]EditorManager).([InstanceMethodDeclaration]getCurrentAttributedNodeCell())", "~EditorManager.getCurrentAttributedNodeCell():jetbrains.mps.nodeEditor.EditorCell");
    ourERI2IdMap.put("method ([Classifier]EditorManager).([InstanceMethodDeclaration]createRoleAttributeCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))", "~EditorManager.createRoleAttributeCell(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode,java.lang.Class,jetbrains.mps.nodeEditor.EditorCell):jetbrains.mps.nodeEditor.EditorCell");
    ourERI2IdMap.put("static method ([Classifier]EditorManager).([StaticMethodDeclaration]getInstanceFromContext((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~EditorManager.getInstanceFromContext(jetbrains.mps.smodel.IOperationContext):jetbrains.mps.nodeEditor.EditorManager");
    ourERI2IdMap.put("constructor [Classifier]CellLayout_Horizontal[ConstructorDeclaration] ()", "~CellLayout_Horizontal.<init>()");
    ourERI2IdMap.put("method ([Classifier]EditorCell_Basic).([InstanceMethodDeclaration]setSelectable((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EditorCell_Basic.setSelectable(boolean):void");
    ourERI2IdMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getNodeEditorComponent())", "~EditorContext.getNodeEditorComponent():jetbrains.mps.nodeEditor.AbstractEditorComponent");
    ourERI2IdMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getSelectedCell())", "~EditorContext.getSelectedCell():jetbrains.mps.nodeEditor.EditorCell");
    ourERI2IdMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getScope())", "~EditorContext.getScope():jetbrains.mps.smodel.IScope");
    ourERI2IdMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getSelectedNode())", "~EditorContext.getSelectedNode():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getOperationContext())", "~EditorContext.getOperationContext():jetbrains.mps.smodel.IOperationContext");
    ourERI2IdMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]selectLater((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~EditorContext.selectLater(jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]selectAndSetCaretLater((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~EditorContext.selectAndSetCaretLater(jetbrains.mps.smodel.SNode,int):void");
    ourERI2IdMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getContextCell())", "~EditorContext.getContextCell():jetbrains.mps.nodeEditor.EditorCell");
    ourERI2IdMap.put("method ([Classifier]EditorCellKeyMapAction).([InstanceMethodDeclaration]setCaretPolicy((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~EditorCellKeyMapAction.setCaretPolicy(int):void");
    ourERI2IdMap.put("method ([Classifier]EditorCellKeyMapAction).([InstanceMethodDeclaration]setShownInPopupMenu((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EditorCellKeyMapAction.setShownInPopupMenu(boolean):void");
    ourERI2IdMap.put("method ([Classifier]EditorCellKeyMapAction).([InstanceMethodDeclaration]getSelectedNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~EditorCellKeyMapAction.getSelectedNodes(jetbrains.mps.nodeEditor.EditorContext):java.util.List");
    ourERI2IdMap.put("constructor [Classifier]DefaultChildSubstituteInfo[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]))", "~DefaultChildSubstituteInfo.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration,jetbrains.mps.nodeEditor.EditorContext)");
    ourERI2IdMap.put("method ([Classifier]EditorCell_Property).([InstanceMethodDeclaration]getModelAccessor())", "~EditorCell_Property.getModelAccessor():jetbrains.mps.nodeEditor.ModelAccessor");
    ourERI2IdMap.put("static method ([Classifier]EditorCell_Property).([StaticMethodDeclaration]create((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ModelAccessor]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~EditorCell_Property.create(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.nodeEditor.ModelAccessor,jetbrains.mps.smodel.SNode):jetbrains.mps.nodeEditor.EditorCell_Property");
    ourERI2IdMap.put("constructor [Classifier]EditorCell_Constant[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~EditorCell_Constant.<init>(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode,java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]AbstractCellProvider[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))", "~AbstractCellProvider.<init>(jetbrains.mps.smodel.SNode)");
    ourERI2IdMap.put("method ([Classifier]AbstractCellProvider).([InstanceMethodDeclaration]getSNode())", "~AbstractCellProvider.getSNode():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]AbstractCellProvider).([InstanceMethodDeclaration]getCellContext())", "~AbstractCellProvider.getCellContext():jetbrains.mps.nodeEditor.cellMenu.ICellContext");
    ourERI2IdMap.put("method ([Classifier]AbstractCellProvider).([InstanceMethodDeclaration]createEditorCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~AbstractCellProvider.createEditorCell(jetbrains.mps.nodeEditor.EditorContext):jetbrains.mps.nodeEditor.EditorCell");
    ourERI2IdMap.put("method ([Classifier]EditorCell_Image).([InstanceMethodDeclaration]setDescent((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~EditorCell_Image.setDescent(int):void");
    ourERI2IdMap.put("static method ([Classifier]EditorCell_Image).([StaticMethodDeclaration]createImageCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~EditorCell_Image.createImageCell(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode,java.lang.String):jetbrains.mps.nodeEditor.EditorCell_Image");
    ourERI2IdMap.put("constructor [Classifier]CellAction_Empty[ConstructorDeclaration] ()", "~CellAction_Empty.<init>()");
    ourERI2IdMap.put("method ([Classifier]TextLine).([InstanceMethodDeclaration]setTextColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))", "~TextLine.setTextColor(java.awt.Color):void");
    ourERI2IdMap.put("method ([Classifier]TextLine).([InstanceMethodDeclaration]setTextBackgroundColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))", "~TextLine.setTextBackgroundColor(java.awt.Color):void");
    ourERI2IdMap.put("method ([Classifier]TextLine).([InstanceMethodDeclaration]setSelectedTextBackgroundColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))", "~TextLine.setSelectedTextBackgroundColor(java.awt.Color):void");
    ourERI2IdMap.put("method ([Classifier]TextLine).([InstanceMethodDeclaration]getCaretPosition())", "~TextLine.getCaretPosition():int");
    ourERI2IdMap.put("constructor [Classifier]CellAction_DeleteNode[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))", "~CellAction_DeleteNode.<init>(jetbrains.mps.smodel.SNode)");
    ourERI2IdMap.put("method ([Classifier]EditorCell_Collection).([InstanceMethodDeclaration]setGridLayout((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EditorCell_Collection.setGridLayout(boolean):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell_Collection).([InstanceMethodDeclaration]addEditorCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))", "~EditorCell_Collection.addEditorCell(jetbrains.mps.nodeEditor.EditorCell):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell_Collection).([InstanceMethodDeclaration]setCanBeFolded((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EditorCell_Collection.setCanBeFolded(boolean):void");
    ourERI2IdMap.put("method ([Classifier]EditorCell_Collection).([InstanceMethodDeclaration]setUsesBraces((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~EditorCell_Collection.setUsesBraces(boolean):void");
    ourERI2IdMap.put("static method ([Classifier]EditorCell_Collection).([StaticMethodDeclaration]createVertical((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~EditorCell_Collection.createVertical(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode):jetbrains.mps.nodeEditor.EditorCell_Collection");
    ourERI2IdMap.put("static method ([Classifier]EditorCell_Collection).([StaticMethodDeclaration]createHorizontal((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~EditorCell_Collection.createHorizontal(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode):jetbrains.mps.nodeEditor.EditorCell_Collection");
    ourERI2IdMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]getBinaryOperationType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~Queries.getBinaryOperationType(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]getBinaryOperationType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~Queries.getBinaryOperationType(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,boolean):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]CellMenuUtil).([StaticMethodDeclaration]getEditedFeature((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~CellMenuUtil.getEditedFeature(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]CellMenuUtil).([StaticMethodDeclaration]getEditedAggregationLink((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellMenuPart_Abstract])))", "~CellMenuUtil.getEditedAggregationLink(jetbrains.mps.bootstrap.editorLanguage.structure.CellMenuPart_Abstract):jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration");
    ourERI2IdMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]CustomExpression_check_LinkDeclaration_reference_isCardinality_1((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))", "~Queries.CustomExpression_check_LinkDeclaration_reference_isCardinality_1(java.lang.Object[]):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]CustomExpression_check_LinkDeclaration_aggragation_target_isConcreteConcept((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))", "~Queries.CustomExpression_check_LinkDeclaration_aggragation_target_isConcreteConcept(java.lang.Object[]):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]Runnable).([InstanceMethodDeclaration]run())", "~Runnable.run():void");
    ourERI2IdMap.put("static method ([Classifier]Math).([StaticMethodDeclaration]max((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))", "~Math.max(long,long):long");
    ourERI2IdMap.put("static method ([Classifier]Math).([StaticMethodDeclaration]min((jetbrains.mps.baseLanguage.types.double/jetbrains.mps.baseLanguage.types.double), (jetbrains.mps.baseLanguage.types.double/jetbrains.mps.baseLanguage.types.double)))", "~Math.min(double,double):double");
    ourERI2IdMap.put("static method ([Classifier]Short).([StaticMethodDeclaration]parseShort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Short.parseShort(java.lang.String):short");
    ourERI2IdMap.put("method ([Classifier]Comparable).([InstanceMethodDeclaration]compareTo((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))", "~Comparable.compareTo(java.lang.Object):int");
    ourERI2IdMap.put("method ([Classifier]Thread).([InstanceMethodDeclaration]getContextClassLoader())", "~Thread.getContextClassLoader():java.lang.ClassLoader");
    ourERI2IdMap.put("static method ([Classifier]Thread).([StaticMethodDeclaration]currentThread())", "~Thread.currentThread():java.lang.Thread");
    ourERI2IdMap.put("static method ([Classifier]Thread).([StaticMethodDeclaration]yield())", "~Thread.yield():void");
    ourERI2IdMap.put("static method ([Classifier]Thread).([StaticMethodDeclaration]sleep((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))", "~Thread.sleep(long):void");
    ourERI2IdMap.put("static method ([Classifier]Long).([StaticMethodDeclaration]parseLong((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Long.parseLong(java.lang.String,int):long");
    ourERI2IdMap.put("static method ([Classifier]Long).([StaticMethodDeclaration]parseLong((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Long.parseLong(java.lang.String):long");
    ourERI2IdMap.put("static method ([Classifier]Byte).([StaticMethodDeclaration]parseByte((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Byte.parseByte(java.lang.String):byte");
    ourERI2IdMap.put("method ([Classifier]Class).([InstanceMethodDeclaration]newInstance())", "~Class.newInstance():java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]Class).([InstanceMethodDeclaration]getName())", "~Class.getName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]Class).([InstanceMethodDeclaration]isEnum())", "~Class.isEnum():boolean");
    ourERI2IdMap.put("static method ([Classifier]Class).([StaticMethodDeclaration]forName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Class.forName(java.lang.String):java.lang.Class");
    ourERI2IdMap.put("static method ([Classifier]Class).([StaticMethodDeclaration]forName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ClassLoader])))", "~Class.forName(java.lang.String,boolean,java.lang.ClassLoader):java.lang.Class");
    ourERI2IdMap.put("constructor [Classifier]IndexOutOfBoundsException[ConstructorDeclaration] ()", "~IndexOutOfBoundsException.<init>()");
    ourERI2IdMap.put("method ([Classifier]Throwable).([InstanceMethodDeclaration]getMessage())", "~Throwable.getMessage():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]Throwable).([InstanceMethodDeclaration]getLocalizedMessage())", "~Throwable.getLocalizedMessage():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]Throwable).([InstanceMethodDeclaration]printStackTrace())", "~Throwable.printStackTrace():void");
    ourERI2IdMap.put("static method ([Classifier]Double).([StaticMethodDeclaration]parseDouble((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Double.parseDouble(java.lang.String):double");
    ourERI2IdMap.put("constructor [Classifier]Object[ConstructorDeclaration] ()", "~Object.<init>()");
    ourERI2IdMap.put("method ([Classifier]Object).([InstanceMethodDeclaration]getClass())", "~Object.getClass():java.lang.Class");
    ourERI2IdMap.put("method ([Classifier]Object).([InstanceMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~Object.equals(java.lang.Object):boolean");
    ourERI2IdMap.put("method ([Classifier]Object).([InstanceMethodDeclaration]toString())", "~Object.toString():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]Float).([StaticMethodDeclaration]parseFloat((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Float.parseFloat(java.lang.String):float");
    ourERI2IdMap.put("constructor [Classifier]IllegalStateException[ConstructorDeclaration] ()", "~IllegalStateException.<init>()");
    ourERI2IdMap.put("constructor [Classifier]IllegalStateException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~IllegalStateException.<init>(java.lang.String)");
    ourERI2IdMap.put("static method ([Classifier]Character).([StaticMethodDeclaration]toUpperCase((jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char)))", "~Character.toUpperCase(char):char");
    ourERI2IdMap.put("constructor [Classifier]IllegalAccessError[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~IllegalAccessError.<init>(java.lang.String)");
    ourERI2IdMap.put("static method ([Classifier]Enum).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Enum.valueOf(java.lang.Class,java.lang.String):java.lang.Enum");
    ourERI2IdMap.put("constructor [Classifier]StringBuilder[ConstructorDeclaration] ()", "~StringBuilder.<init>()");
    ourERI2IdMap.put("constructor [Classifier]StringBuilder[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~StringBuilder.<init>(java.lang.String)");
    ourERI2IdMap.put("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~StringBuilder.append(java.lang.String):java.lang.StringBuilder");
    ourERI2IdMap.put("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))", "~StringBuilder.append(java.lang.CharSequence):java.lang.StringBuilder");
    ourERI2IdMap.put("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char)))", "~StringBuilder.append(char):java.lang.StringBuilder");
    ourERI2IdMap.put("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]toString())", "~StringBuilder.toString():java.lang.String");
    ourERI2IdMap.put("constructor [Classifier]RuntimeException[ConstructorDeclaration] ()", "~RuntimeException.<init>()");
    ourERI2IdMap.put("constructor [Classifier]RuntimeException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~RuntimeException.<init>(java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]RuntimeException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable]))", "~RuntimeException.<init>(java.lang.String,java.lang.Throwable)");
    ourERI2IdMap.put("constructor [Classifier]RuntimeException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable]))", "~RuntimeException.<init>(java.lang.Throwable)");
    ourERI2IdMap.put("constructor [Classifier]UnsupportedOperationException[ConstructorDeclaration] ()", "~UnsupportedOperationException.<init>()");
    ourERI2IdMap.put("constructor [Classifier]UnsupportedOperationException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~UnsupportedOperationException.<init>(java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]String[ConstructorDeclaration] ()", "~String.<init>()");
    ourERI2IdMap.put("constructor [Classifier]String[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~String.<init>(java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]String[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_]))", "~String.<init>(byte[])");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]length())", "~String.length():int");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]charAt((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~String.charAt(int):char");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]getBytes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~String.getBytes(java.lang.String):byte[]");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]getBytes())", "~String.getBytes():byte[]");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~String.equals(java.lang.Object):boolean");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]equalsIgnoreCase((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~String.equalsIgnoreCase(java.lang.String):boolean");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]startsWith((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~String.startsWith(java.lang.String):boolean");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]endsWith((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~String.endsWith(java.lang.String):boolean");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]indexOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~String.indexOf(java.lang.String):int");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]lastIndexOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~String.lastIndexOf(java.lang.String):int");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]substring((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~String.substring(int):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]substring((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~String.substring(int,int):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]replace((jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char), (jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char)))", "~String.replace(char,char):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]matches((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~String.matches(java.lang.String):boolean");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))", "~String.contains(java.lang.CharSequence):boolean");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]replaceAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~String.replaceAll(java.lang.String,java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]split((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~String.split(java.lang.String):java.lang.String[]");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]toLowerCase())", "~String.toLowerCase():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]String).([InstanceMethodDeclaration]toString())", "~String.toString():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]String).([StaticMethodDeclaration]format((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))", "~String.format(java.lang.String,java.lang.Object[]):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~String.valueOf(java.lang.Object):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~String.valueOf(boolean):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char)))", "~String.valueOf(char):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~String.valueOf(int):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))", "~String.valueOf(long):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.float/jetbrains.mps.baseLanguage.types.float)))", "~String.valueOf(float):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.double/jetbrains.mps.baseLanguage.types.double)))", "~String.valueOf(double):java.lang.String");
    ourERI2IdMap.put("constructor [Classifier]Exception[ConstructorDeclaration] ()", "~Exception.<init>()");
    ourERI2IdMap.put("constructor [Classifier]IllegalArgumentException[ConstructorDeclaration] ()", "~IllegalArgumentException.<init>()");
    ourERI2IdMap.put("constructor [Classifier]IllegalArgumentException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~IllegalArgumentException.<init>(java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]IllegalArgumentException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable]))", "~IllegalArgumentException.<init>(java.lang.Throwable)");
    ourERI2IdMap.put("method ([Classifier]Iterable).([InstanceMethodDeclaration]iterator())", "~Iterable.iterator():java.util.Iterator");
    ourERI2IdMap.put("static method ([Classifier]System).([StaticMethodDeclaration]currentTimeMillis())", "~System.currentTimeMillis():long");
    ourERI2IdMap.put("static method ([Classifier]System).([StaticMethodDeclaration]getProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~System.getProperty(java.lang.String):java.lang.String");
    ourERI2IdMap.put("constructor [Classifier]Boolean[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))", "~Boolean.<init>(boolean)");
    ourERI2IdMap.put("method ([Classifier]Boolean).([InstanceMethodDeclaration]booleanValue())", "~Boolean.booleanValue():boolean");
    ourERI2IdMap.put("method ([Classifier]Boolean).([InstanceMethodDeclaration]toString())", "~Boolean.toString():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]Boolean).([InstanceMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~Boolean.equals(java.lang.Object):boolean");
    ourERI2IdMap.put("static method ([Classifier]Boolean).([StaticMethodDeclaration]parseBoolean((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Boolean.parseBoolean(java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]Boolean).([StaticMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~Boolean.toString(boolean):java.lang.String");
    ourERI2IdMap.put("constructor [Classifier]NullPointerException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~NullPointerException.<init>(java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]StringBuffer[ConstructorDeclaration] ()", "~StringBuffer.<init>()");
    ourERI2IdMap.put("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~StringBuffer.append(java.lang.Object):java.lang.StringBuffer");
    ourERI2IdMap.put("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~StringBuffer.append(java.lang.String):java.lang.StringBuffer");
    ourERI2IdMap.put("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))", "~StringBuffer.append(java.lang.CharSequence):java.lang.StringBuffer");
    ourERI2IdMap.put("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]toString())", "~StringBuffer.toString():java.lang.String");
    ourERI2IdMap.put("constructor [Classifier]Integer[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))", "~Integer.<init>(int)");
    ourERI2IdMap.put("static method ([Classifier]Integer).([StaticMethodDeclaration]parseInt((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Integer.parseInt(java.lang.String,int):int");
    ourERI2IdMap.put("static method ([Classifier]Integer).([StaticMethodDeclaration]parseInt((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Integer.parseInt(java.lang.String):int");
    ourERI2IdMap.put("method ([Classifier]Appendable).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))", "~Appendable.append(java.lang.CharSequence):java.lang.Appendable");
    ourERI2IdMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]createList((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))", "~ListOperations.createList(java.lang.Object[]):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]addElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~ListOperations.addElement(java.util.List,java.lang.Object):void");
    ourERI2IdMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]removeElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~ListOperations.removeElement(java.util.List,java.lang.Object):void");
    ourERI2IdMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]addAllElements((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~ListOperations.addAllElements(java.util.List,java.lang.Iterable):void");
    ourERI2IdMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]removeAllElements((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~ListOperations.removeAllElements(java.util.List,java.lang.Iterable):void");
    ourERI2IdMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]getElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~ListOperations.getElement(java.util.List,int):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]indexOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~ListOperations.indexOf(java.util.List,java.lang.Object):int");
    ourERI2IdMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]reverse((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~ListOperations.reverse(java.util.List):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]getFirst((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.getFirst(java.lang.Iterable):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]getLast((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.getLast(java.lang.Iterable):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]isEmpty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.isEmpty(java.lang.Iterable):boolean");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]toList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.toList(java.lang.Iterable):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]toArray((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.toArray(java.lang.Iterable,java.lang.Class):java.lang.Object[]");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]select((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ISelector, <jetbrains.mps.baseLanguage.types.classifier [Object], jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.select(java.lang.Iterable,jetbrains.mps.baseLanguage.ext.collections.internal.query.ISelector):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]where((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IPredicate, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.where(java.lang.Iterable,jetbrains.mps.baseLanguage.ext.collections.internal.query.IPredicate):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]map((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IMapper, <jetbrains.mps.baseLanguage.types.classifier [Object], jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.map(java.lang.Iterable,jetbrains.mps.baseLanguage.ext.collections.internal.query.IMapper):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]forEach((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IForEach, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.forEach(java.lang.Iterable,jetbrains.mps.baseLanguage.ext.collections.internal.query.IForEach):void");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]sort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparator, <? super jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SequenceOperations.sort(java.lang.Iterable,java.util.Comparator,boolean):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]union((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.union(java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]concat((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.concat(java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]intersect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.intersect(java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]exclude((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.exclude(java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~SequenceOperations.contains(java.lang.Iterable,java.lang.Object):boolean");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]skip((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))", "~SequenceOperations.skip(java.lang.Iterable,long):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]take((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))", "~SequenceOperations.take(java.lang.Iterable,long):java.lang.Iterable");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]getSize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.getSize(java.lang.Iterable):int");
    ourERI2IdMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]distinct((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SequenceOperations.distinct(java.lang.Iterable):java.util.Set");
    ourERI2IdMap.put("method ([Classifier]Condition).([InstanceMethodDeclaration]met((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))", "~Condition.met(java.lang.Object):boolean");
    ourERI2IdMap.put("static method ([Classifier]FileUtil).([StaticMethodDeclaration]getCanonicalPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File])))", "~FileUtil.getCanonicalPath(java.io.File):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]CollectionUtil).([StaticMethodDeclaration]mapToString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~CollectionUtil.mapToString(java.util.List):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]CollectionUtil).([StaticMethodDeclaration]mapToString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~CollectionUtil.mapToString(java.util.Collection):java.util.List");
    ourERI2IdMap.put("constructor [Classifier]AndCondition[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <any_>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <any_>]))", "~AndCondition.<init>(jetbrains.mps.util.Condition,jetbrains.mps.util.Condition)");
    ourERI2IdMap.put("method ([Classifier]Macros).([InstanceMethodDeclaration]expandPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File])))", "~Macros.expandPath(java.lang.String,java.io.File):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]Macros).([StaticMethodDeclaration]languageDescriptor())", "~Macros.languageDescriptor():jetbrains.mps.util.Macros");
    ourERI2IdMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]capitalize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~NameUtil.capitalize(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]decapitalize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~NameUtil.decapitalize(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]pluralize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~NameUtil.pluralize(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]toConstantName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~NameUtil.toConstantName(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]splitByCamels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~NameUtil.splitByCamels(java.lang.String):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]shortNameFromLongName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~NameUtil.shortNameFromLongName(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]namespaceFromLongName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~NameUtil.namespaceFromLongName(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]nodeFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~NameUtil.nodeFQName(jetbrains.mps.smodel.SNode):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]nodeFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))", "~NameUtil.nodeFQName(jetbrains.mps.smodel.INodeAdapter):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]toValidIdentifier((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~NameUtil.toValidIdentifier(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]toValidCamelIdentifier((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~NameUtil.toValidCamelIdentifier(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]pathFromNamespace((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~NameUtil.pathFromNamespace(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]stripQuotes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~NameUtil.stripQuotes(java.lang.String,java.lang.String,java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]Calculable).([InstanceMethodDeclaration]calculate())", "~Calculable.calculate():java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]AsPattern_AnnotationLink).([StaticMethodDeclaration]setAsPattern((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AsPattern])))", "~AsPattern_AnnotationLink.setAsPattern(jetbrains.mps.core.structure.BaseConcept,jetbrains.mps.patterns.structure.AsPattern):void");
    ourERI2IdMap.put("static method ([Classifier]AsPattern_AnnotationLink).([StaticMethodDeclaration]getAsPattern((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept])))", "~AsPattern_AnnotationLink.getAsPattern(jetbrains.mps.core.structure.BaseConcept):jetbrains.mps.patterns.structure.AsPattern");
    ourERI2IdMap.put("constructor [Classifier]Color[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))", "~Color.<init>(int,int,int)");
    ourERI2IdMap.put("method ([Classifier]Graphics).([InstanceMethodDeclaration]drawImage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Image]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ImageObserver])))", "~Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver):boolean");
    ourERI2IdMap.put("constructor [Classifier]StreamResult[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [OutputStream]))", "~StreamResult.<init>(java.io.OutputStream)");
    ourERI2IdMap.put("static method ([Classifier]HtmlStringUtil).([StaticMethodDeclaration]html((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~HtmlStringUtil.html(java.lang.Object):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]HtmlStringUtil).([StaticMethodDeclaration]stringLiteral((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~HtmlStringUtil.stringLiteral(java.lang.Object):java.lang.String");
    ourERI2IdMap.put("constructor [Classifier]AssertionFailedError[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~AssertionFailedError.<init>(java.lang.String)");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertTrue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~Assert.assertTrue(java.lang.String,boolean):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertTrue((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~Assert.assertTrue(boolean):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertFalse((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~Assert.assertFalse(boolean):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]fail((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Assert.fail(java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~Assert.assertEquals(java.lang.Object,java.lang.Object):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Assert.assertEquals(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))", "~Assert.assertEquals(long,long):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Assert.assertEquals(java.lang.String,int,int):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Assert.assertEquals(int,int):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertNull((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~Assert.assertNull(java.lang.Object):void");
    ourERI2IdMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertSame((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~Assert.assertSame(java.lang.Object,java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]TBuffer).([InstanceMethodDeclaration]getText())", "~TBuffer.getText():java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]TBuilderContextFactory).([StaticMethodDeclaration]getLocalBuilderContext())", "~TBuilderContextFactory.getLocalBuilderContext():webr.framework.textBuilder.TBuilderContext");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getCurrentTemplateComponent())", "~TBuilderContext.getCurrentTemplateComponent():jetbrains.mps.webr.runtime.templateComponent.TemplateComponent");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]pushCurrentTemplateComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TemplateComponent])))", "~TBuilderContext.pushCurrentTemplateComponent(jetbrains.mps.webr.runtime.templateComponent.TemplateComponent):void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]popCurrentTemplateComponent())", "~TBuilderContext.popCurrentTemplateComponent():jetbrains.mps.webr.runtime.templateComponent.TemplateComponent");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getCurrentTemplateName())", "~TBuilderContext.getCurrentTemplateName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]setCurrentTemplateName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TBuilderContext.setCurrentTemplateName(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getCurrentLayoutName())", "~TBuilderContext.getCurrentLayoutName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]setCurrentLayoutName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TBuilderContext.setCurrentLayoutName(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]pushOldChildrenTemplateComponents((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [TemplateComponent]>])))", "~TBuilderContext.pushOldChildrenTemplateComponents(java.util.Map):void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]popOldChildrenTemplateComponents())", "~TBuilderContext.popOldChildrenTemplateComponents():java.util.Map");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getOldChildTemplateComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TBuilderContext.getOldChildTemplateComponent(java.lang.String):jetbrains.mps.webr.runtime.templateComponent.TemplateComponent");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getNonLayoutRootTemplateComponent())", "~TBuilderContext.getNonLayoutRootTemplateComponent():jetbrains.mps.webr.runtime.templateComponent.TemplateComponent");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]setTemplateStylesheetPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TBuilderContext.setTemplateStylesheetPath(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]hasTemplateStylesheet())", "~TBuilderContext.hasTemplateStylesheet():boolean");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getTemplateStylesheetPath())", "~TBuilderContext.getTemplateStylesheetPath():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getRssLinkEntries())", "~TBuilderContext.getRssLinkEntries():java.util.List");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]isFirstScriptLink((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TBuilderContext.isFirstScriptLink(java.lang.String):boolean");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]isFirstScriptOnceElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TBuilderContext.isFirstScriptOnceElement(java.lang.String):boolean");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]setWindowId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TBuilderContext.setWindowId(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TBuilderContext.getId(java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getCurrentId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TBuilderContext.getCurrentId(java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]initBuffer())", "~TBuilderContext.initBuffer():void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getBuffer())", "~TBuilderContext.getBuffer():webr.framework.textBuilder.TBuffer");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]saveBuffer())", "~TBuilderContext.saveBuffer():void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]restoreBuffer((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HtmlStringUtil$EscapeKind])))", "~TBuilderContext.restoreBuffer(webr.framework.function.HtmlStringUtil$EscapeKind):void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TBuilderContext.append(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]appendIndent())", "~TBuilderContext.appendIndent():void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]appendNewLine())", "~TBuilderContext.appendNewLine():void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]increaseIndent())", "~TBuilderContext.increaseIndent():void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]decreaseIndent())", "~TBuilderContext.decreaseIndent():void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]suspendRenderingUnless((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~TBuilderContext.suspendRenderingUnless(boolean):void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]resumeRendering())", "~TBuilderContext.resumeRendering():void");
    ourERI2IdMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]render((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextBuilder]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~TBuilderContext.render(webr.framework.textBuilder.TextBuilder,java.util.Map):void");
    ourERI2IdMap.put("constructor [Classifier]PopulateParameters[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest]))", "~PopulateParameters.<init>(javax.servlet.http.HttpServletRequest)");
    ourERI2IdMap.put("method ([Classifier]PopulateParameters).([InstanceMethodDeclaration]hasParameter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~PopulateParameters.hasParameter(java.lang.String):boolean");
    ourERI2IdMap.put("method ([Classifier]PopulateParameters).([InstanceMethodDeclaration]hasParameters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~PopulateParameters.hasParameters(java.lang.String):boolean");
    ourERI2IdMap.put("method ([Classifier]TextBuilder).([InstanceMethodDeclaration]getText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))", "~TextBuilder.getText(java.util.Map,webr.framework.textBuilder.TBuilderContext):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]RssLinkEntry).([InstanceMethodDeclaration]getHref())", "~RssLinkEntry.getHref():java.lang.String");
    ourERI2IdMap.put("constructor [Classifier]ParameterSpec[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))", "~ParameterSpec.<init>(java.lang.String,java.lang.Object)");
    ourERI2IdMap.put("constructor [Classifier]AbstractTemplates[ConstructorDeclaration] ()", "~AbstractTemplates.<init>()");
    ourERI2IdMap.put("constructor [Classifier]ParametersMap[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [ParameterSpec]]))", "~ParametersMap.<init>(transform.util.ParameterSpec[])");
    ourERI2IdMap.put("method ([Classifier]TextBlock).([InstanceMethodDeclaration]getHelpText())", "~TextBlock.getHelpText():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TextBlock).([InstanceMethodDeclaration]getSurroundPattern())", "~TextBlock.getSurroundPattern():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]TextBlock).([InstanceMethodDeclaration]getIconPath())", "~TextBlock.getIconPath():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]RegexpHighlighter).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Pattern]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))", "~RegexpHighlighter.add(java.util.regex.Pattern,java.awt.Color):void");
    ourERI2IdMap.put("method ([Classifier]RegexpHighlighter).([InstanceMethodDeclaration]addKeyWord((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~RegexpHighlighter.addKeyWord(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]MediaWikiProcessor).([InstanceMethodDeclaration]getLinkFor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~MediaWikiProcessor.getLinkFor(java.lang.String):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]WikiManager).([InstanceMethodDeclaration]getBlocks())", "~WikiManager.getBlocks():java.util.List");
    ourERI2IdMap.put("method ([Classifier]WikiManager).([InstanceMethodDeclaration]setBlocks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [TextBlock]>])))", "~WikiManager.setBlocks(java.util.List):void");
    ourERI2IdMap.put("method ([Classifier]WikiManager).([InstanceMethodDeclaration]setHiglighters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [RegexpHighlighter]>])))", "~WikiManager.setHiglighters(java.util.List):void");
    ourERI2IdMap.put("method ([Classifier]WikiManager).([InstanceMethodDeclaration]setWikiLinkHandlers((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [WikiLinkHandler]>])))", "~WikiManager.setWikiLinkHandlers(java.util.List):void");
    ourERI2IdMap.put("method ([Classifier]WikiManager).([InstanceMethodDeclaration]process((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~WikiManager.process(java.lang.String):java.lang.String");
    ourERI2IdMap.put("constructor [Classifier]IllegalArgumentException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~IllegalArgumentException.<init>(java.lang.String)");
    ourERI2IdMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]getRoots((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SModelOperations.getRoots(jetbrains.mps.smodel.SModel,java.lang.String):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]getRootsIncludingImported((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SModelOperations.getRootsIncludingImported(jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope,java.lang.String):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]getNodesIncludingImported((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SModelOperations.getNodesIncludingImported(jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope,java.lang.String):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]getNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SModelOperations.getNodes(jetbrains.mps.smodel.SModel,java.lang.String):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]createNewNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SModelOperations.createNewNode(jetbrains.mps.smodel.SModel,java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]createNewNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SModelOperations.createNewNode(jetbrains.mps.smodel.SModel,java.lang.String,jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]createNewRootNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SModelOperations.createNewRootNode(jetbrains.mps.smodel.SModel,java.lang.String,jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]set((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SPropertyOperations.set(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]getString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SPropertyOperations.getString(jetbrains.mps.smodel.SNode,java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]hasValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SPropertyOperations.hasValue(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]getString_def((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SPropertyOperations.getString_def(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]hasValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SPropertyOperations.hasValue(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String,java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]SConceptPropertyOperations).([StaticMethodDeclaration]getString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SConceptPropertyOperations.getString(jetbrains.mps.smodel.SNode,java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAdapter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNodeOperations.getAdapter(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.INodeAdapter");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]copyNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNodeOperations.copyNode(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getContainingRoot((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNodeOperations.getContainingRoot(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getParent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SNodeOperations.getParent(jetbrains.mps.smodel.SNode,java.lang.String,boolean,boolean):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAncestor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SNodeOperations.getAncestor(jetbrains.mps.smodel.SNode,java.lang.String,boolean,boolean):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAncestorWhereConceptInList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SNodeOperations.getAncestorWhereConceptInList(jetbrains.mps.smodel.SNode,java.lang.String[],boolean,boolean):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAncestors((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SNodeOperations.getAncestors(jetbrains.mps.smodel.SNode,java.lang.String,boolean):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAncestorsWhereConceptInList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SNodeOperations.getAncestorsWhereConceptInList(jetbrains.mps.smodel.SNode,java.lang.String[],boolean):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getDescendants((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SNodeOperations.getDescendants(jetbrains.mps.smodel.SNode,java.lang.String,boolean):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getDescendantsWhereConceptInList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SNodeOperations.getDescendantsWhereConceptInList(jetbrains.mps.smodel.SNode,java.lang.String[],boolean):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getChildren((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNodeOperations.getChildren(jetbrains.mps.smodel.SNode):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNodeOperations.getModel(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SModel");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]isInstanceOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNodeOperations.isInstanceOf(jetbrains.mps.smodel.SNode,java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getNextSibling((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNodeOperations.getNextSibling(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getPrevSibling((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNodeOperations.getPrevSibling(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getPrevSiblings((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SNodeOperations.getPrevSiblings(jetbrains.mps.smodel.SNode,boolean):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getNextSiblings((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SNodeOperations.getNextSiblings(jetbrains.mps.smodel.SNode,boolean):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAllSiblings((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SNodeOperations.getAllSiblings(jetbrains.mps.smodel.SNode,boolean):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]insertNewNextSiblingChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNodeOperations.insertNewNextSiblingChild(jetbrains.mps.smodel.SNode,java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]insertNewPrevSiblingChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNodeOperations.insertNewPrevSiblingChild(jetbrains.mps.smodel.SNode,java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]insertNextSiblingChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNodeOperations.insertNextSiblingChild(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]insertPrevSiblingChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNodeOperations.insertPrevSiblingChild(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]replaceWithNewChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNodeOperations.replaceWithNewChild(jetbrains.mps.smodel.SNode,java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]replaceWithAnother((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNodeOperations.replaceWithAnother(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]deleteNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNodeOperations.deleteNode(jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]hasRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SNodeOperations.hasRole(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNodeOperations.getConceptDeclaration(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getIndexInParent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SNodeOperations.getIndexInParent(jetbrains.mps.smodel.SNode):int");
    ourERI2IdMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]isExactly((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SConceptOperations.isExactly(jetbrains.mps.smodel.SNode,java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]isAssignableFrom((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SConceptOperations.isAssignableFrom(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]isSuperConceptOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SConceptOperations.isSuperConceptOf(jetbrains.mps.smodel.SNode,java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]isSubConceptOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SConceptOperations.isSubConceptOf(jetbrains.mps.smodel.SNode,java.lang.String):boolean");
    ourERI2IdMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]findConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SConceptOperations.findConceptDeclaration(java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]getDirectSuperConcepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SConceptOperations.getDirectSuperConcepts(jetbrains.mps.smodel.SNode):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]getAllSuperConcepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SConceptOperations.getAllSuperConcepts(jetbrains.mps.smodel.SNode):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]getConceptHierarchy((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SConceptOperations.getConceptHierarchy(jetbrains.mps.smodel.SNode):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]getAllSubConcepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~SConceptOperations.getAllSubConcepts(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]findConceptInstances((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~SConceptOperations.findConceptInstances(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]createNewNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SConceptOperations.createNewNode(java.lang.String,jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]getTarget((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SLinkOperations.getTarget(jetbrains.mps.smodel.SNode,java.lang.String,boolean):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]setTarget((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SLinkOperations.setTarget(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode,boolean):void");
    ourERI2IdMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]setNewChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SLinkOperations.setNewChild(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]getTargets((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SLinkOperations.getTargets(jetbrains.mps.smodel.SNode,java.lang.String,boolean):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]addNewChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SLinkOperations.addNewChild(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]addChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SLinkOperations.addChild(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]addAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [SNode]>])))", "~SLinkOperations.addAll(jetbrains.mps.smodel.SNode,java.lang.String,java.util.List):void");
    ourERI2IdMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]insertChildFirst((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SLinkOperations.insertChildFirst(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]deleteChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SLinkOperations.deleteChild(jetbrains.mps.smodel.SNode,java.lang.String):void");
    ourERI2IdMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]getCount((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SLinkOperations.getCount(jetbrains.mps.smodel.SNode,java.lang.String):int");
    ourERI2IdMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]getConceptLinkTargets((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SLinkOperations.getConceptLinkTargets(jetbrains.mps.smodel.SNode,java.lang.String):java.util.List");
    ourERI2IdMap.put("method ([Classifier]PropertyPlaceholderConfigurer).([InstanceMethodDeclaration]setSearchSystemEnvironment((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~PropertyPlaceholderConfigurer.setSearchSystemEnvironment(boolean):void");
    ourERI2IdMap.put("static method ([Classifier]ReferenceAntiquotation_AnnotationLink).([StaticMethodDeclaration]setReferenceAntiquotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ReferenceAntiquotation])))", "~ReferenceAntiquotation_AnnotationLink.setReferenceAntiquotation(jetbrains.mps.core.structure.BaseConcept,java.lang.String,jetbrains.mps.quotation.structure.ReferenceAntiquotation):void");
    ourERI2IdMap.put("static method ([Classifier]ReferenceAntiquotation_AnnotationLink).([StaticMethodDeclaration]getReferenceAntiquotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ReferenceAntiquotation_AnnotationLink.getReferenceAntiquotation(jetbrains.mps.core.structure.BaseConcept,java.lang.String):jetbrains.mps.quotation.structure.ReferenceAntiquotation");
    ourERI2IdMap.put("static method ([Classifier]MarshallUtil).([StaticMethodDeclaration]marshall((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~MarshallUtil.marshall(java.lang.Object):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]MarshallUtil).([StaticMethodDeclaration]getNodeOrModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~MarshallUtil.getNodeOrModel(java.lang.String):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]MarshallUtil).([StaticMethodDeclaration]getNodeId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~MarshallUtil.getNodeId(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]MarshallUtil).([StaticMethodDeclaration]getModelUID((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~MarshallUtil.getModelUID(java.lang.String):java.lang.String");
    ourERI2IdMap.put("constructor [Classifier]ChooseRefactoringInputDataDialog[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ILoggableRefactoring]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ActionContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [IChooseComponent]>]))", "~ChooseRefactoringInputDataDialog.<init>(jetbrains.mps.refactoring.framework.ILoggableRefactoring,jetbrains.mps.ide.action.ActionContext,java.util.List)");
    ourERI2IdMap.put("method ([Classifier]ChooseRefactoringInputDataDialog).([InstanceMethodDeclaration]getResult())", "~ChooseRefactoringInputDataDialog.getResult():java.util.Map");
    ourERI2IdMap.put("constructor [Classifier]TransientStoreSessionListenerImpl[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RuleEngine]))", "~TransientStoreSessionListenerImpl.<init>(jetbrains.mps.businessRules.runtime.RuleEngine)");
    ourERI2IdMap.put("static method ([Classifier]RegexpProcessor).([StaticMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Regexp])))", "~RegexpProcessor.toString(jetbrains.mps.regexp.structure.Regexp):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]RegexpProcessor).([StaticMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Regexp]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [MatchParensRegexp]>])))", "~RegexpProcessor.toString(jetbrains.mps.regexp.structure.Regexp,java.util.List):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]SecurityNavigatorImpl).([InstanceMethodDeclaration]setOnLoginAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Runnable])))", "~SecurityNavigatorImpl.setOnLoginAction(java.lang.Runnable):void");
    ourERI2IdMap.put("method ([Classifier]NodeList).([InstanceMethodDeclaration]size())", "~NodeList.size():int");
    ourERI2IdMap.put("method ([Classifier]NodeList).([InstanceMethodDeclaration]elementAt((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~NodeList.elementAt(int):org.htmlparser.Node");
    ourERI2IdMap.put("method ([Classifier]ISearchScope).([InstanceMethodDeclaration]getNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <jetbrains.mps.baseLanguage.types.classifier [SNode]>])))", "~ISearchScope.getNodes(jetbrains.mps.util.Condition):java.util.List");
    ourERI2IdMap.put("method ([Classifier]ISearchScope).([InstanceMethodDeclaration]getAdapters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~ISearchScope.getAdapters(java.lang.Class):java.util.List");
    ourERI2IdMap.put("method ([Classifier]ISearchScope).([InstanceMethodDeclaration]getNodes())", "~ISearchScope.getNodes():java.util.List");
    ourERI2IdMap.put("constructor [Classifier]IsInstanceCondition[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]))", "~IsInstanceCondition.<init>(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration)");
    ourERI2IdMap.put("constructor [Classifier]SubnodesSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))", "~SubnodesSearchScope.<init>(jetbrains.mps.smodel.SNode)");
    ourERI2IdMap.put("method ([Classifier]SubnodesSearchScope).([InstanceMethodDeclaration]getNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <jetbrains.mps.baseLanguage.types.classifier [SNode]>])))", "~SubnodesSearchScope.getNodes(jetbrains.mps.util.Condition):java.util.List");
    ourERI2IdMap.put("constructor [Classifier]ConceptAndSuperConceptsScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]))", "~ConceptAndSuperConceptsScope.<init>(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration)");
    ourERI2IdMap.put("method ([Classifier]AbstractSearchScope).([InstanceMethodDeclaration]getNodes())", "~AbstractSearchScope.getNodes():java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]createModelAndImportedModelsScope((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~SModelSearchUtil_new.createModelAndImportedModelsScope(jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.search.ISearchScope");
    ourERI2IdMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]createModelAndImportedModelsScope((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~SModelSearchUtil_new.createModelAndImportedModelsScope(jetbrains.mps.smodel.SModel,boolean,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.search.ISearchScope");
    ourERI2IdMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]getLinkDeclarationsExcludingOverridden((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration])))", "~SModelSearchUtil_new.getLinkDeclarationsExcludingOverridden(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]getAggregationLinkDeclarationsExcludingOverridden((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration])))", "~SModelSearchUtil_new.getAggregationLinkDeclarationsExcludingOverridden(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]getReferenceLinkDeclarationsExcludingOverridden((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration])))", "~SModelSearchUtil_new.getReferenceLinkDeclarationsExcludingOverridden(jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]getPropertyDeclarationsExcludingOverridden((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration])))", "~SModelSearchUtil_new.getPropertyDeclarationsExcludingOverridden(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]findPropertyDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SModelSearchUtil_new.findPropertyDeclaration(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,java.lang.String):jetbrains.mps.bootstrap.structureLanguage.structure.PropertyDeclaration");
    ourERI2IdMap.put("constructor [Classifier]SimpleSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List]))", "~SimpleSearchScope.<init>(java.util.List)");
    ourERI2IdMap.put("constructor [Classifier]SimpleSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))", "~SimpleSearchScope.<init>(jetbrains.mps.smodel.SNode)");
    ourERI2IdMap.put("constructor [Classifier]ModelNodesSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]))", "~ModelNodesSearchScope.<init>(jetbrains.mps.smodel.SModel)");
    ourERI2IdMap.put("constructor [Classifier]EmptySearchScope[ConstructorDeclaration] ()", "~EmptySearchScope.<init>()");
    ourERI2IdMap.put("method ([Classifier]InputStream).([InstanceMethodDeclaration]read())", "~InputStream.read():int");
    ourERI2IdMap.put("constructor [Classifier]Command[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~Command.<init>(java.lang.String,java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]State[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~State.<init>(java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]StateMachine[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [State]))", "~StateMachine.<init>(gothic.model.State)");
    ourERI2IdMap.put("constructor [Classifier]Event[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~Event.<init>(java.lang.String,java.lang.String)");
    ourERI2IdMap.put("static method ([Classifier]JOptionPane).([StaticMethodDeclaration]showMessageDialog((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Component]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int):void");
    ourERI2IdMap.put("static method ([Classifier]JOptionPane).([StaticMethodDeclaration]showConfirmDialog((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Component]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int):int");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]extendedConcept_generatedClass((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.extendedConcept_generatedClass(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]extendedInterfaceConcept_generatedInterface((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.extendedInterfaceConcept_generatedInterface(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]SubtypingManager).([InstanceMethodDeclaration]isSubtype((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SubtypingManager.isSubtype(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("method ([Classifier]SubtypingManager).([InstanceMethodDeclaration]isSubtype((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SubtypingManager.isSubtype(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,boolean,boolean):boolean");
    ourERI2IdMap.put("method ([Classifier]SubtypingManager).([InstanceMethodDeclaration]collectImmediateSupertypes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~SubtypingManager.collectImmediateSupertypes(jetbrains.mps.smodel.SNode):jetbrains.mps.helgins.inference.util.StructuralNodeSet");
    ourERI2IdMap.put("method ([Classifier]EquationManager).([InstanceMethodDeclaration]getRepresentator((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~EquationManager.getRepresentator(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getEquationManager())", "~TypeChecker.getEquationManager():jetbrains.mps.helgins.inference.EquationManager");
    ourERI2IdMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getSubtypingManager())", "~TypeChecker.getSubtypingManager():jetbrains.mps.helgins.inference.SubtypingManager");
    ourERI2IdMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getRuntimeSupport())", "~TypeChecker.getRuntimeSupport():jetbrains.mps.bootstrap.helgins.runtime.RuntimeSupport");
    ourERI2IdMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]reportTypeError((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~TypeChecker.reportTypeError(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]hackTypeOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TypeChecker.hackTypeOf(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getTypeOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TypeChecker.getTypeOf(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getRuntimeTypesModel())", "~TypeChecker.getRuntimeTypesModel():jetbrains.mps.smodel.SModel");
    ourERI2IdMap.put("static method ([Classifier]TypeChecker).([StaticMethodDeclaration]getInstance())", "~TypeChecker.getInstance():jetbrains.mps.helgins.inference.TypeChecker");
    ourERI2IdMap.put("static method ([Classifier]PathUtil).([StaticMethodDeclaration]showSelectPathDialog((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SelectionMode])))", "~PathUtil.showSelectPathDialog(jetbrains.mps.nodeEditor.EditorContext,java.lang.String,jetbrains.mps.projectLanguage.editor.SelectionMode):void");
    ourERI2IdMap.put("constructor [Classifier]SelectPathButton[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SelectionMode]))", "~SelectPathButton.<init>(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.projectLanguage.editor.SelectionMode)");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getProjectPluginClassNames((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.getProjectPluginClassNames(jetbrains.mps.smodel.IOperationContext):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getModelRootManagerClassNames((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.getModelRootManagerClassNames(jetbrains.mps.smodel.IOperationContext):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getNamePrefixesForNewModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.getNamePrefixesForNewModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getLanguageNamesToAddToModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~_QueriesUtil.getLanguageNamesToAddToModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getLanguageNamesToAddToModelEngagedOnGenerationLanguages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~_QueriesUtil.getLanguageNamesToAddToModelEngagedOnGenerationLanguages(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getModelUIDsToImportToModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~_QueriesUtil.getModelUIDsToImportToModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getGeneratorsToReferFromGenerator((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~_QueriesUtil.getGeneratorsToReferFromGenerator(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getTemplatesModelDescriptor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [GeneratorDescriptor])))", "~_QueriesUtil.getTemplatesModelDescriptor(java.lang.String,jetbrains.mps.projectLanguage.structure.GeneratorDescriptor):jetbrains.mps.smodel.SModelDescriptor");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getCanonicalPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~_QueriesUtil.getCanonicalPath(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageStructureModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.createLanguageStructureModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleStructureModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.getVisibleStructureModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageEditorModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.createLanguageEditorModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleEditorModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.getVisibleEditorModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageConstraintsModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.createLanguageConstraintsModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleConstraintsModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.getVisibleConstraintsModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageActionsModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.createLanguageActionsModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleActionsModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.getVisibleActionsModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageScriptsModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.createLanguageScriptsModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleScriptsModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.getVisibleScriptsModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageDocumentationModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.createLanguageDocumentationModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleDocumentationModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.getVisibleDocumentationModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageHelginsTypesystemModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.createLanguageHelginsTypesystemModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleHelginsTypesystemModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.getVisibleHelginsTypesystemModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageAccessoryModelModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.createLanguageAccessoryModelModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleAccessoryModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))", "~_QueriesUtil.getVisibleAccessoryModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
    ourERI2IdMap.put("constructor [Classifier]ServletFileUpload[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [FileItemFactory]))", "~ServletFileUpload.<init>(org.apache.commons.fileupload.FileItemFactory)");
    ourERI2IdMap.put("method ([Classifier]ServletFileUpload).([InstanceMethodDeclaration]parseRequest((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest])))", "~ServletFileUpload.parseRequest(javax.servlet.http.HttpServletRequest):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]ServletFileUpload).([StaticMethodDeclaration]isMultipartContent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest])))", "~ServletFileUpload.isMultipartContent(javax.servlet.http.HttpServletRequest):boolean");
    ourERI2IdMap.put("constructor [Classifier]Stack[ConstructorDeclaration] ()", "~Stack.<init>()");
    ourERI2IdMap.put("static method ([Classifier]PredefinedFormats).([StaticMethodDeclaration]rssDate())", "~PredefinedFormats.rssDate():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("static method ([Classifier]PredefinedFormats).([StaticMethodDeclaration]defaultFormat())", "~PredefinedFormats.defaultFormat():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("static method ([Classifier]CompareType).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~CompareType.valueOf(java.lang.String):jetbrains.mps.baseLanguage.ext.dates.CompareType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]print((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFormatter])))", "~DateTimeOperations.print(java.lang.Long,org.joda.time.format.DateTimeFormatter):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]print((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFormatter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale])))", "~DateTimeOperations.print(java.lang.Long,org.joda.time.format.DateTimeFormatter,java.util.Locale):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]convert((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTime])))", "~DateTimeOperations.convert(org.joda.time.DateTime):java.lang.Long");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]convert((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Calendar])))", "~DateTimeOperations.convert(java.util.Calendar):java.lang.Long");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]compare((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CompareType]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))", "~DateTimeOperations.compare(java.lang.Long,jetbrains.mps.baseLanguage.ext.dates.CompareType,java.lang.Long,org.joda.time.DateTimeFieldType):boolean");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]roundFloor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))", "~DateTimeOperations.roundFloor(java.lang.Long,org.joda.time.DateTimeFieldType):java.lang.Long");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]roundCeiling((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))", "~DateTimeOperations.roundCeiling(java.lang.Long,org.joda.time.DateTimeFieldType):java.lang.Long");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]round((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))", "~DateTimeOperations.round(java.lang.Long,org.joda.time.DateTimeFieldType):java.lang.Long");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))", "~DateTimeOperations.get(java.lang.Long,org.joda.time.DateTimeFieldType):java.lang.Integer");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]with((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~DateTimeOperations.with(java.lang.Long,org.joda.time.DateTimeFieldType,int):java.lang.Long");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]plus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period])))", "~DateTimeOperations.plus(java.lang.Long,org.joda.time.Period):java.lang.Long");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]minus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period])))", "~DateTimeOperations.minus(java.lang.Long,org.joda.time.Period):java.lang.Long");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]minus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PeriodType])))", "~DateTimeOperations.minus(java.lang.Long,java.lang.Long,org.joda.time.PeriodType):org.joda.time.Period");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]absMinus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PeriodType])))", "~DateTimeOperations.absMinus(java.lang.Long,java.lang.Long,org.joda.time.PeriodType):org.joda.time.Period");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period])))", "~DateTimeOperations.equals(org.joda.time.Period,org.joda.time.Period):boolean");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]less((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period])))", "~DateTimeOperations.less(org.joda.time.Period,org.joda.time.Period):boolean");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]isNull((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))", "~DateTimeOperations.isNull(long):boolean");
    ourERI2IdMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]isNotNull((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))", "~DateTimeOperations.isNotNull(long):boolean");
    ourERI2IdMap.put("method ([Classifier]InlineDateFormatter).([InstanceMethodDeclaration]createFormatter())", "~InlineDateFormatter.createFormatter():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("constructor [Classifier]OffsetDateTimePrinter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [DurationFieldType]]))", "~OffsetDateTimePrinter.<init>(org.joda.time.DurationFieldType[])");
    ourERI2IdMap.put("constructor [Classifier]FixedLocaleDateTimeFormatter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFormatter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))", "~FixedLocaleDateTimeFormatter.<init>(org.joda.time.format.DateTimeFormatter,java.util.Locale)");
    ourERI2IdMap.put("constructor [Classifier]ClassConcept[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))", "~ClassConcept.<init>(jetbrains.mps.smodel.SNode)");
    ourERI2IdMap.put("method ([Classifier]LocalVariableDeclarationStatement).([InstanceMethodDeclaration]getLocalVariableDeclaration())", "~LocalVariableDeclarationStatement.getLocalVariableDeclaration():jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
    ourERI2IdMap.put("method ([Classifier]StatementList).([InstanceMethodDeclaration]getStatements())", "~StatementList.getStatements():java.util.List");
    ourERI2IdMap.put("method ([Classifier]Classifier).([InstanceMethodDeclaration]getMethods())", "~Classifier.getMethods():java.util.List");
    ourERI2IdMap.put("constructor [Classifier]Interface[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))", "~Interface.<init>(jetbrains.mps.smodel.SNode)");
    ourERI2IdMap.put("method ([Classifier]BaseMethodDeclaration).([InstanceMethodDeclaration]getBody())", "~BaseMethodDeclaration.getBody():jetbrains.mps.baseLanguage.structure.StatementList");
    ourERI2IdMap.put("method ([Classifier]BaseMethodDeclaration).([InstanceMethodDeclaration]getParameters())", "~BaseMethodDeclaration.getParameters():java.util.List");
    ourERI2IdMap.put("method ([Classifier]RulesSelectorImpl).([InstanceMethodDeclaration]setRulePackages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [RulePackage]>])))", "~RulesSelectorImpl.setRulePackages(java.util.List):void");
    ourERI2IdMap.put("method ([Classifier]RuleJobImpl).([InstanceMethodDeclaration]setRuleEngine((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RuleEngine])))", "~RuleJobImpl.setRuleEngine(jetbrains.mps.businessRules.runtime.RuleEngine):void");
    ourERI2IdMap.put("method ([Classifier]RuleJobImpl).([InstanceMethodDeclaration]setRule((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Rule])))", "~RuleJobImpl.setRule(jetbrains.mps.businessRules.runtime.Rule):void");
    ourERI2IdMap.put("method ([Classifier]RuleEngineImpl).([InstanceMethodDeclaration]setRuleSelector((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RulesSelector])))", "~RuleEngineImpl.setRuleSelector(jetbrains.mps.businessRules.runtime.RulesSelector):void");
    ourERI2IdMap.put("method ([Classifier]RuleEngineImpl).([InstanceMethodDeclaration]close())", "~RuleEngineImpl.close():void");
    ourERI2IdMap.put("method ([Classifier]AbstractInstantWhenImpl).([InstanceMethodDeclaration]fieldsChanged((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]])))", "~AbstractInstantWhenImpl.fieldsChanged(java.util.Set,java.lang.String[]):boolean");
    ourERI2IdMap.put("method ([Classifier]AbstractInstantWhenImpl).([InstanceMethodDeclaration]thereAreChangesExcepting((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]])))", "~AbstractInstantWhenImpl.thereAreChangesExcepting(java.util.Set,java.lang.String[]):boolean");
    ourERI2IdMap.put("static method ([Classifier]CssReferentUtil).([StaticMethodDeclaration]getSearchScope((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~CssReferentUtil.getSearchScope(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.search.ISearchScope");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_ForEachVariableReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ForEachVariableReference]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.resolve_ForEachVariableReference(jetbrains.mps.baseLanguage.ext.collections.lang.structure.ForEachVariableReference,jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]MethodInvokingJobDetailFactoryBean).([InstanceMethodDeclaration]setConcurrent((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~MethodInvokingJobDetailFactoryBean.setConcurrent(boolean):void");
    ourERI2IdMap.put("method ([Classifier]CronTriggerBean).([InstanceMethodDeclaration]setJobDetail((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JobDetail])))", "~CronTriggerBean.setJobDetail(org.quartz.JobDetail):void");
    ourERI2IdMap.put("method ([Classifier]SchedulerFactoryBean).([InstanceMethodDeclaration]setTriggers((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Trigger]])))", "~SchedulerFactoryBean.setTriggers(org.quartz.Trigger[]):void");
    ourERI2IdMap.put("method ([Classifier]SchedulerFactoryBean).([InstanceMethodDeclaration]setStartupDelay((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~SchedulerFactoryBean.setStartupDelay(int):void");
    ourERI2IdMap.put("method ([Classifier]SchedulerFactoryBean).([InstanceMethodDeclaration]setWaitForJobsToCompleteOnShutdown((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~SchedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(boolean):void");
    ourERI2IdMap.put("method ([Classifier]SimpleMailMessage).([InstanceMethodDeclaration]setFrom((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~SimpleMailMessage.setFrom(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]TomcatManagerImpl).([InstanceMethodDeclaration]setTomcatPathProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TomcatPathProvider])))", "~TomcatManagerImpl.setTomcatPathProvider(jetbrains.mps.webr.webUnit.tomcat.TomcatPathProvider):void");
    ourERI2IdMap.put("method ([Classifier]TomcatManagerImpl).([InstanceMethodDeclaration]setTomcatOutputHandlers((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [TomcatOutputHandler]>])))", "~TomcatManagerImpl.setTomcatOutputHandlers(java.util.List):void");
    ourERI2IdMap.put("constructor [Classifier]ConceptDeclarationExtendedConceptSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))", "~ConceptDeclarationExtendedConceptSearchScope.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope)");
    ourERI2IdMap.put("constructor [Classifier]ReferenceConceptLinkTargetSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))", "~ReferenceConceptLinkTargetSearchScope.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope)");
    ourERI2IdMap.put("constructor [Classifier]BufferedImage[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ColorModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [WritableRaster]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Hashtable]))", "~BufferedImage.<init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)");
    ourERI2IdMap.put("method ([Classifier]BufferedImage).([InstanceMethodDeclaration]getColorModel())", "~BufferedImage.getColorModel():java.awt.image.ColorModel");
    ourERI2IdMap.put("method ([Classifier]BufferedImage).([InstanceMethodDeclaration]getWidth())", "~BufferedImage.getWidth():int");
    ourERI2IdMap.put("method ([Classifier]BufferedImage).([InstanceMethodDeclaration]getHeight())", "~BufferedImage.getHeight():int");
    ourERI2IdMap.put("method ([Classifier]BufferedImage).([InstanceMethodDeclaration]createGraphics())", "~BufferedImage.createGraphics():java.awt.Graphics2D");
    ourERI2IdMap.put("method ([Classifier]ColorModel).([InstanceMethodDeclaration]createCompatibleWritableRaster((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~ColorModel.createCompatibleWritableRaster(int,int):java.awt.image.WritableRaster");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_ConceptFunctionParm_to_MethodParameterReference_by_Alias((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.resolve_ConceptFunctionParm_to_MethodParameterReference_by_Alias(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]RecordManager).([InstanceMethodDeclaration]toIdString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~RecordManager.toIdString(java.lang.Object):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]RecordManager).([InstanceMethodDeclaration]isRecordClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~RecordManager.isRecordClassName(java.lang.String):boolean");
    ourERI2IdMap.put("method ([Classifier]RecordManager).([InstanceMethodDeclaration]toRecord((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~RecordManager.toRecord(java.lang.String):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]Iterator).([InstanceMethodDeclaration]hasNext())", "~Iterator.hasNext():boolean");
    ourERI2IdMap.put("method ([Classifier]Iterator).([InstanceMethodDeclaration]next())", "~Iterator.next():java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]Iterator).([InstanceMethodDeclaration]remove())", "~Iterator.remove():void");
    ourERI2IdMap.put("static method ([Classifier]Arrays).([StaticMethodDeclaration]asList((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))", "~Arrays.asList(java.lang.Object[]):java.util.List");
    ourERI2IdMap.put("constructor [Classifier]ArrayList[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))", "~ArrayList.<init>(int)");
    ourERI2IdMap.put("constructor [Classifier]ArrayList[ConstructorDeclaration] ()", "~ArrayList.<init>()");
    ourERI2IdMap.put("constructor [Classifier]ArrayList[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>]))", "~ArrayList.<init>(java.util.Collection)");
    ourERI2IdMap.put("constructor [Classifier]Locale[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~Locale.<init>(java.lang.String,java.lang.String,java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]LinkedHashSet[ConstructorDeclaration] ()", "~LinkedHashSet.<init>()");
    ourERI2IdMap.put("constructor [Classifier]Stack[ConstructorDeclaration] ()", "~Stack.<init>()");
    ourERI2IdMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]size())", "~Set.size():int");
    ourERI2IdMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]isEmpty())", "~Set.isEmpty():boolean");
    ourERI2IdMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~Set.contains(java.lang.Object):boolean");
    ourERI2IdMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]iterator())", "~Set.iterator():java.util.Iterator");
    ourERI2IdMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))", "~Set.add(java.lang.Object):boolean");
    ourERI2IdMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]remove((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~Set.remove(java.lang.Object):boolean");
    ourERI2IdMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]addAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>])))", "~Set.addAll(java.util.Collection):boolean");
    ourERI2IdMap.put("static method ([Classifier]Collections).([StaticMethodDeclaration]emptyList())", "~Collections.emptyList():java.util.List");
    ourERI2IdMap.put("static method ([Classifier]Collections).([StaticMethodDeclaration]emptyMap())", "~Collections.emptyMap():java.util.Map");
    ourERI2IdMap.put("static method ([Classifier]Collections).([StaticMethodDeclaration]enumeration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~Collections.enumeration(java.util.Collection):java.util.Enumeration");
    ourERI2IdMap.put("method ([Classifier]List).([InstanceMethodDeclaration]size())", "~List.size():int");
    ourERI2IdMap.put("method ([Classifier]List).([InstanceMethodDeclaration]isEmpty())", "~List.isEmpty():boolean");
    ourERI2IdMap.put("method ([Classifier]List).([InstanceMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~List.contains(java.lang.Object):boolean");
    ourERI2IdMap.put("method ([Classifier]List).([InstanceMethodDeclaration]iterator())", "~List.iterator():java.util.Iterator");
    ourERI2IdMap.put("method ([Classifier]List).([InstanceMethodDeclaration]toArray((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))", "~List.toArray(java.lang.Object[]):java.lang.Object[]");
    ourERI2IdMap.put("method ([Classifier]List).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))", "~List.add(java.lang.Object):boolean");
    ourERI2IdMap.put("method ([Classifier]List).([InstanceMethodDeclaration]addAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>])))", "~List.addAll(java.util.Collection):boolean");
    ourERI2IdMap.put("method ([Classifier]List).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~List.get(int):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]List).([InstanceMethodDeclaration]indexOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~List.indexOf(java.lang.Object):int");
    ourERI2IdMap.put("constructor [Classifier]Date[ConstructorDeclaration] ()", "~Date.<init>()");
    ourERI2IdMap.put("constructor [Classifier]Date[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long))", "~Date.<init>(long)");
    ourERI2IdMap.put("constructor [Classifier]Date[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~Date.<init>(java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]HashMap[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.float/jetbrains.mps.baseLanguage.types.float))", "~HashMap.<init>(int,float)");
    ourERI2IdMap.put("constructor [Classifier]HashMap[ConstructorDeclaration] ()", "~HashMap.<init>()");
    ourERI2IdMap.put("method ([Classifier]HashMap).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~HashMap.get(java.lang.Object):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]HashMap).([InstanceMethodDeclaration]put((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))", "~HashMap.put(java.lang.Object,java.lang.Object):java.lang.Object");
    ourERI2IdMap.put("constructor [Classifier]LinkedList[ConstructorDeclaration] ()", "~LinkedList.<init>()");
    ourERI2IdMap.put("method ([Classifier]AbstractList).([InstanceMethodDeclaration]iterator())", "~AbstractList.iterator():java.util.Iterator");
    ourERI2IdMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]containsKey((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~Map.containsKey(java.lang.Object):boolean");
    ourERI2IdMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~Map.get(java.lang.Object):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]put((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))", "~Map.put(java.lang.Object,java.lang.Object):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]remove((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~Map.remove(java.lang.Object):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]putAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <? extends jetbrains.mps.baseLanguage.types.any, ? extends jetbrains.mps.baseLanguage.types.any>])))", "~Map.putAll(java.util.Map):void");
    ourERI2IdMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]keySet())", "~Map.keySet():java.util.Set");
    ourERI2IdMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]values())", "~Map.values():java.util.Collection");
    ourERI2IdMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]entrySet())", "~Map.entrySet():java.util.Set");
    ourERI2IdMap.put("constructor [Classifier]ListResourceBundle[ConstructorDeclaration] ()", "~ListResourceBundle.<init>()");
    ourERI2IdMap.put("method ([Classifier]Map$Entry).([InstanceMethodDeclaration]getKey())", "~Map$Entry.getKey():java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]Map$Entry).([InstanceMethodDeclaration]getValue())", "~Map$Entry.getValue():java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]AbstractCollection).([InstanceMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~AbstractCollection.contains(java.lang.Object):boolean");
    ourERI2IdMap.put("method ([Classifier]AbstractCollection).([InstanceMethodDeclaration]addAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>])))", "~AbstractCollection.addAll(java.util.Collection):boolean");
    ourERI2IdMap.put("constructor [Classifier]HashSet[ConstructorDeclaration] ()", "~HashSet.<init>()");
    ourERI2IdMap.put("constructor [Classifier]HashSet[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>]))", "~HashSet.<init>(java.util.Collection)");
    ourERI2IdMap.put("method ([Classifier]AbstractCellMenuComponent).([InstanceMethodDeclaration]createActions((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ICellContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~AbstractCellMenuComponent.createActions(jetbrains.mps.nodeEditor.cellMenu.ICellContext,jetbrains.mps.nodeEditor.EditorContext):java.util.List");
    ourERI2IdMap.put("method ([Classifier]JabberService).([InstanceMethodDeclaration]send((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~JabberService.send(java.lang.String[],java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setTaskExecutor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TaskExecutor])))", "~JabberServiceImpl.setTaskExecutor(org.springframework.core.task.TaskExecutor):void");
    ourERI2IdMap.put("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setHost((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~JabberServiceImpl.setHost(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setPort((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~JabberServiceImpl.setPort(int):void");
    ourERI2IdMap.put("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setUser((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~JabberServiceImpl.setUser(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setPassword((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~JabberServiceImpl.setPassword(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]MailingService).([InstanceMethodDeclaration]createMimeMessageHelper())", "~MailingService.createMimeMessageHelper():org.springframework.mail.javamail.MimeMessageHelper");
    ourERI2IdMap.put("method ([Classifier]MailingService).([InstanceMethodDeclaration]send((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [MimeMessageHelper]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [String]>])))", "~MailingService.send(org.springframework.mail.javamail.MimeMessageHelper,java.util.Map):void");
    ourERI2IdMap.put("method ([Classifier]MailingServiceImpl).([InstanceMethodDeclaration]setMailSender((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JavaMailSender])))", "~MailingServiceImpl.setMailSender(org.springframework.mail.javamail.JavaMailSender):void");
    ourERI2IdMap.put("method ([Classifier]MailingServiceImpl).([InstanceMethodDeclaration]setTemplateMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SimpleMailMessage])))", "~MailingServiceImpl.setTemplateMessage(org.springframework.mail.SimpleMailMessage):void");
    ourERI2IdMap.put("method ([Classifier]MailingServiceImpl).([InstanceMethodDeclaration]setTaskExecutor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TaskExecutor])))", "~MailingServiceImpl.setTaskExecutor(org.springframework.core.task.TaskExecutor):void");
    ourERI2IdMap.put("static method ([Classifier]StringBuilderSpinAllocator).([StaticMethodDeclaration]alloc())", "~StringBuilderSpinAllocator.alloc():java.lang.StringBuilder");
    ourERI2IdMap.put("static method ([Classifier]StringBuilderSpinAllocator).([StaticMethodDeclaration]dispose((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [StringBuilder])))", "~StringBuilderSpinAllocator.dispose(java.lang.StringBuilder):void");
    ourERI2IdMap.put("method ([Classifier]IMatchingPattern).([InstanceMethodDeclaration]match((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~IMatchingPattern.match(jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("constructor [Classifier]DefaultMatchingPattern[ConstructorDeclaration] ()", "~DefaultMatchingPattern.<init>()");
    ourERI2IdMap.put("constructor [Classifier]BasicCellContext[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))", "~BasicCellContext.<init>(jetbrains.mps.smodel.SNode)");
    ourERI2IdMap.put("constructor [Classifier]CompositeSubstituteInfo[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ICellContext]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [ISubstituteInfoPart]]))", "~CompositeSubstituteInfo.<init>(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.nodeEditor.cellMenu.ICellContext,jetbrains.mps.nodeEditor.cellMenu.ISubstituteInfoPart[])");
    ourERI2IdMap.put("static method ([Classifier]PeriodType).([StaticMethodDeclaration]minutes())", "~PeriodType.minutes():org.joda.time.PeriodType");
    ourERI2IdMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]millis())", "~DurationFieldType.millis():org.joda.time.DurationFieldType");
    ourERI2IdMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]seconds())", "~DurationFieldType.seconds():org.joda.time.DurationFieldType");
    ourERI2IdMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]minutes())", "~DurationFieldType.minutes():org.joda.time.DurationFieldType");
    ourERI2IdMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]hours())", "~DurationFieldType.hours():org.joda.time.DurationFieldType");
    ourERI2IdMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]halfdays())", "~DurationFieldType.halfdays():org.joda.time.DurationFieldType");
    ourERI2IdMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]days())", "~DurationFieldType.days():org.joda.time.DurationFieldType");
    ourERI2IdMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]weeks())", "~DurationFieldType.weeks():org.joda.time.DurationFieldType");
    ourERI2IdMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]months())", "~DurationFieldType.months():org.joda.time.DurationFieldType");
    ourERI2IdMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]years())", "~DurationFieldType.years():org.joda.time.DurationFieldType");
    ourERI2IdMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]centuries())", "~DurationFieldType.centuries():org.joda.time.DurationFieldType");
    ourERI2IdMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]eras())", "~DurationFieldType.eras():org.joda.time.DurationFieldType");
    ourERI2IdMap.put("constructor [Classifier]DateTime[ConstructorDeclaration] ()", "~DateTime.<init>()");
    ourERI2IdMap.put("constructor [Classifier]DateTime[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long))", "~DateTime.<init>(long)");
    ourERI2IdMap.put("constructor [Classifier]Period[ConstructorDeclaration] ()", "~Period.<init>()");
    ourERI2IdMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]years((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Period.years(int):org.joda.time.Period");
    ourERI2IdMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]months((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Period.months(int):org.joda.time.Period");
    ourERI2IdMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]weeks((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Period.weeks(int):org.joda.time.Period");
    ourERI2IdMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]days((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Period.days(int):org.joda.time.Period");
    ourERI2IdMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]hours((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Period.hours(int):org.joda.time.Period");
    ourERI2IdMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]minutes((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Period.minutes(int):org.joda.time.Period");
    ourERI2IdMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]seconds((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Period.seconds(int):org.joda.time.Period");
    ourERI2IdMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]millis((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Period.millis(int):org.joda.time.Period");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]millisOfSecond())", "~DateTimeFieldType.millisOfSecond():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]secondOfMinute())", "~DateTimeFieldType.secondOfMinute():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]minuteOfHour())", "~DateTimeFieldType.minuteOfHour():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]hourOfDay())", "~DateTimeFieldType.hourOfDay():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]clockhourOfDay())", "~DateTimeFieldType.clockhourOfDay():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]hourOfHalfday())", "~DateTimeFieldType.hourOfHalfday():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]clockhourOfHalfday())", "~DateTimeFieldType.clockhourOfHalfday():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]dayOfWeek())", "~DateTimeFieldType.dayOfWeek():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]dayOfMonth())", "~DateTimeFieldType.dayOfMonth():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]dayOfYear())", "~DateTimeFieldType.dayOfYear():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]weekOfWeekyear())", "~DateTimeFieldType.weekOfWeekyear():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]monthOfYear())", "~DateTimeFieldType.monthOfYear():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]yearOfEra())", "~DateTimeFieldType.yearOfEra():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]yearOfCentury())", "~DateTimeFieldType.yearOfCentury():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]centuryOfEra())", "~DateTimeFieldType.centuryOfEra():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]era())", "~DateTimeFieldType.era():org.joda.time.DateTimeFieldType");
    ourERI2IdMap.put("constructor [Classifier]NullAdaptiveProgressMonitor[ConstructorDeclaration] ()", "~NullAdaptiveProgressMonitor.<init>()");
    ourERI2IdMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodePropertyGetter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodePropertyGetter])))", "~ModelConstraintsManager.registerNodePropertyGetter(java.lang.String,java.lang.String,jetbrains.mps.smodel.constraints.INodePropertyGetter):void");
    ourERI2IdMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodePropertyGetter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ModelConstraintsManager.unRegisterNodePropertyGetter(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodePropertySetter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodePropertySetter])))", "~ModelConstraintsManager.registerNodePropertySetter(java.lang.String,java.lang.String,jetbrains.mps.smodel.constraints.INodePropertySetter):void");
    ourERI2IdMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodePropertySetter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ModelConstraintsManager.unRegisterNodePropertySetter(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodeReferentSetEventHandler((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeReferentSetEventHandler])))", "~ModelConstraintsManager.registerNodeReferentSetEventHandler(java.lang.String,java.lang.String,jetbrains.mps.smodel.constraints.INodeReferentSetEventHandler):void");
    ourERI2IdMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodeReferentSetEventHandler((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ModelConstraintsManager.unRegisterNodeReferentSetEventHandler(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodeReferentSearchScopeProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeReferentSearchScopeProvider])))", "~ModelConstraintsManager.registerNodeReferentSearchScopeProvider(java.lang.String,java.lang.String,jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider):void");
    ourERI2IdMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodeReferentSearchScopeProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ModelConstraintsManager.unRegisterNodeReferentSearchScopeProvider(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodeDefaultSearchScopeProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeReferentSearchScopeProvider])))", "~ModelConstraintsManager.registerNodeDefaultSearchScopeProvider(java.lang.String,jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider):void");
    ourERI2IdMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodeDefaultSearchScopeProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~ModelConstraintsManager.unRegisterNodeDefaultSearchScopeProvider(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]SearchScopeStatus).([InstanceMethodDeclaration]getSearchScope())", "~SearchScopeStatus.getSearchScope():jetbrains.mps.smodel.search.ISearchScope");
    ourERI2IdMap.put("static method ([Classifier]ModelConstraintsUtil).([StaticMethodDeclaration]getSearchScope((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~ModelConstraintsUtil.getSearchScope(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,java.lang.String,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.constraints.SearchScopeStatus");
    ourERI2IdMap.put("constructor [Classifier]Job[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JobProcessor]))", "~Job.<init>(com.jetbrains.teamsys.core.execution.JobProcessor)");
    ourERI2IdMap.put("method ([Classifier]Job).([InstanceMethodDeclaration]getProcessor())", "~Job.getProcessor():com.jetbrains.teamsys.core.execution.JobProcessor");
    ourERI2IdMap.put("constructor [Classifier]DecoratorJob[ConstructorDeclaration] ()", "~DecoratorJob.<init>()");
    ourERI2IdMap.put("method ([Classifier]DecoratorJob).([InstanceMethodDeclaration]executeDecorated())", "~DecoratorJob.executeDecorated():void");
    ourERI2IdMap.put("constructor [Classifier]JobProcessor[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~JobProcessor.<init>(java.lang.String)");
    ourERI2IdMap.put("method ([Classifier]JobProcessor).([InstanceMethodDeclaration]start())", "~JobProcessor.start():void");
    ourERI2IdMap.put("method ([Classifier]JobProcessor).([InstanceMethodDeclaration]waitUntilFinished())", "~JobProcessor.waitUntilFinished():void");
    ourERI2IdMap.put("method ([Classifier]JobProcessor).([InstanceMethodDeclaration]queueFinish())", "~JobProcessor.queueFinish():boolean");
    ourERI2IdMap.put("method ([Classifier]JobProcessor).([InstanceMethodDeclaration]setExceptionHandler((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JobProcessorExceptionHandler])))", "~JobProcessor.setExceptionHandler(com.jetbrains.teamsys.core.execution.JobProcessorExceptionHandler):void");
    ourERI2IdMap.put("static method ([Classifier]EditorUtil).([StaticMethodDeclaration]createSelectIconButton((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))", "~EditorUtil.createSelectIconButton(jetbrains.mps.smodel.SNode,jetbrains.mps.nodeEditor.EditorContext):javax.swing.JComponent");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getTextExpression((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~_QueriesUtil.getTextExpression(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getType())", "~Entity.getType():int");
    ourERI2IdMap.put("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]getInvocationContext())", "~GenerationSessionContext.getInvocationContext():jetbrains.mps.smodel.IOperationContext");
    ourERI2IdMap.put("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]putTransientObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~GenerationSessionContext.putTransientObject(java.lang.Object,java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]getTransientObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~GenerationSessionContext.getTransientObject(java.lang.Object):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]putSessionObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~GenerationSessionContext.putSessionObject(java.lang.Object,java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]getSessionObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~GenerationSessionContext.getSessionObject(java.lang.Object):java.lang.Object");
    ourERI2IdMap.put("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]createUniqueName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~GenerationSessionContext.createUniqueName(java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]JavaNameUtil).([StaticMethodDeclaration]fqClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~JavaNameUtil.fqClassName(jetbrains.mps.smodel.SModel,java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]JavaNameUtil).([StaticMethodDeclaration]fqClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~JavaNameUtil.fqClassName(jetbrains.mps.smodel.SNode,java.lang.String):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]JavaModelUtil_new).([StaticMethodDeclaration]findMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]])))", "~JavaModelUtil_new.findMethod(jetbrains.mps.baseLanguage.structure.Classifier,java.lang.String,java.lang.String[]):jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    ourERI2IdMap.put("static method ([Classifier]JavaModelUtil_new).([StaticMethodDeclaration]createType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))", "~JavaModelUtil_new.createType(jetbrains.mps.baseLanguage.structure.Classifier,jetbrains.mps.smodel.SModel):jetbrains.mps.baseLanguage.structure.ClassifierType");
    ourERI2IdMap.put("static method ([Classifier]JavaModelUtil_new).([StaticMethodDeclaration]findClassifier((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class])))", "~JavaModelUtil_new.findClassifier(java.lang.Class):jetbrains.mps.baseLanguage.structure.Classifier");
    ourERI2IdMap.put("method ([Classifier]EditorsPane).([InstanceMethodDeclaration]getCurrentEditor())", "~EditorsPane.getCurrentEditor():jetbrains.mps.ide.IEditor");
    ourERI2IdMap.put("method ([Classifier]IEditor).([InstanceMethodDeclaration]getEditorContext())", "~IEditor.getEditorContext():jetbrains.mps.nodeEditor.EditorContext");
    ourERI2IdMap.put("method ([Classifier]BaseDialog).([InstanceMethodDeclaration]showDialog())", "~BaseDialog.showDialog():void");
    ourERI2IdMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]getParent())", "~Node.getParent():org.htmlparser.Node");
    ourERI2IdMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]getChildren())", "~Node.getChildren():org.htmlparser.util.NodeList");
    ourERI2IdMap.put("method ([Classifier]Tag).([InstanceMethodDeclaration]getTagName())", "~Tag.getTagName():java.lang.String");
    ourERI2IdMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]doAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseWebTestCase.doAction(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]checkTemplate((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseWebTestCase.checkTemplate(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]checkLayout((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseWebTestCase.checkLayout(java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]checkInputField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~BaseWebTestCase.checkInputField(java.lang.String,java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]setTextInput((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseWebTestCase.setTextInput(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]setSelectInput((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseWebTestCase.setSelectInput(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]setCheckboxInput((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))", "~BaseWebTestCase.setCheckboxInput(java.lang.String,boolean):void");
    ourERI2IdMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]doClickButton((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseWebTestCase.doClickButton(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]doClickLink((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~BaseWebTestCase.doClickLink(java.lang.String,java.lang.String):void");
    ourERI2IdMap.put("constructor [Classifier]FreemarkerResponse[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~FreemarkerResponse.<init>(java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]ResourceResponse[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))", "~ResourceResponse.<init>(java.lang.String)");
    ourERI2IdMap.put("constructor [Classifier]SAXBuilder[ConstructorDeclaration] ()", "~SAXBuilder.<init>()");
    ourERI2IdMap.put("method ([Classifier]SAXBuilder).([InstanceMethodDeclaration]build((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Reader])))", "~SAXBuilder.build(java.io.Reader):org.jdom.Document");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]find_EnclosingContextOwner_ClosureContext_generatedClass((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.find_EnclosingContextOwner_ClosureContext_generatedClass(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]find_ContextOwner_ClosureContext_generatedClass((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.find_ContextOwner_ClosureContext_generatedClass(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]find_ContextOwner_ClosureContext_generatedClass_constructor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.find_ContextOwner_ClosureContext_generatedClass_constructor(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]find_Closure_generatedClosureAdapter_constructor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.find_Closure_generatedClosureAdapter_constructor(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_ClosureParameterReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.resolve_ClosureParameterReference(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_MethodParm_CopyOfParm((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.resolve_MethodParm_CopyOfParm(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_VariableDeclStmt_Variable_ClosureContext_generatedField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.resolve_VariableDeclStmt_Variable_ClosureContext_generatedField(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_VariableReference_Variable_ClosureContext_generatedField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.resolve_VariableReference_Variable_ClosureContext_generatedField(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getList_ContextOwner_ifMethod_ParmsUsedInClosure((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.getList_ContextOwner_ifMethod_ParmsUsedInClosure(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getList_ContextOwner_VariablesUsedInClosure((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.getList_ContextOwner_VariablesUsedInClosure(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):java.util.List");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getString_VariableDeclaration_nameInClosureContext((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.getString_VariableDeclaration_nameInClosureContext(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):java.lang.String");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]create_closureContextObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.create_closureContextObject(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]create_enclosingClassObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~_QueriesUtil.create_enclosingClassObject(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]ClosuresUtil).([StaticMethodDeclaration]isClosureContextOwner((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~ClosuresUtil.isClosureContextOwner(jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("static method ([Classifier]ClosuresUtil).([StaticMethodDeclaration]findEnclosingClosureContextOwner((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~ClosuresUtil.findEnclosingClosureContextOwner(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("static method ([Classifier]ClosuresUtil).([StaticMethodDeclaration]isVariableUsedInClosure((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [VariableDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~ClosuresUtil.isVariableUsedInClosure(jetbrains.mps.smodel.SNode,jetbrains.mps.baseLanguage.structure.VariableDeclaration,jetbrains.mps.generator.template.ITemplateGenerator):boolean");
    ourERI2IdMap.put("static method ([Classifier]ClosuresUtil).([StaticMethodDeclaration]hasVariablesUsedInClosure((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))", "~ClosuresUtil.hasVariablesUsedInClosure(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):boolean");
    ourERI2IdMap.put("static method ([Classifier]Base64).([StaticMethodDeclaration]decodeBase64((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_])))", "~Base64.decodeBase64(byte[]):byte[]");
    ourERI2IdMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]canAddRootTemplateAnnotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateLanguageUtil.canAddRootTemplateAnnotation(jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]addRootTemplateAnnotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateLanguageUtil.addRootTemplateAnnotation(jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]isInsideTemplateFragment((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateLanguageUtil.isInsideTemplateFragment(jetbrains.mps.smodel.SNode):boolean");
    ourERI2IdMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]switchTemplateFragment((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateLanguageUtil.switchTemplateFragment(jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]switchNodeMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))", "~TemplateLanguageUtil.switchNodeMacro(jetbrains.mps.smodel.SNode):void");
    ourERI2IdMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]canSwitchReferenceMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))", "~TemplateLanguageUtil.canSwitchReferenceMacro(jetbrains.mps.nodeEditor.EditorCell):boolean");
    ourERI2IdMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]switchReferenceMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))", "~TemplateLanguageUtil.switchReferenceMacro(jetbrains.mps.nodeEditor.EditorCell):void");
    ourERI2IdMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]canSwitchPropertyMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))", "~TemplateLanguageUtil.canSwitchPropertyMacro(jetbrains.mps.nodeEditor.EditorCell):boolean");
    ourERI2IdMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]switchPropertyMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))", "~TemplateLanguageUtil.switchPropertyMacro(jetbrains.mps.nodeEditor.EditorCell,jetbrains.mps.smodel.IScope):void");
    ourERI2IdMap.put("method ([Classifier]Matcher).([InstanceMethodDeclaration]group((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Matcher.group(int):java.lang.String");
    ourERI2IdMap.put("method ([Classifier]Matcher).([InstanceMethodDeclaration]matches())", "~Matcher.matches():boolean");
    ourERI2IdMap.put("method ([Classifier]Matcher).([InstanceMethodDeclaration]find())", "~Matcher.find():boolean");
    ourERI2IdMap.put("method ([Classifier]Pattern).([InstanceMethodDeclaration]matcher((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))", "~Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher");
    ourERI2IdMap.put("static method ([Classifier]Pattern).([StaticMethodDeclaration]compile((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~Pattern.compile(java.lang.String):java.util.regex.Pattern");
    ourERI2IdMap.put("static method ([Classifier]Pattern).([StaticMethodDeclaration]compile((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~Pattern.compile(java.lang.String,int):java.util.regex.Pattern");
    ourERI2IdMap.put("static method ([Classifier]SModelLanguageUtil).([StaticMethodDeclaration]findNodeOperationParameter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeOperation]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~SModelLanguageUtil.findNodeOperationParameter(jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation,java.lang.Class):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]SModelLanguageUtil).([StaticMethodDeclaration]getLinkTargetConceptForLinkOperation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeOperation])))", "~SModelLanguageUtil.getLinkTargetConceptForLinkOperation(jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation):jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration");
    ourERI2IdMap.put("static method ([Classifier]SModelLanguageUtil).([StaticMethodDeclaration]getDatatypeFromLeft_SPropertyAccess((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeOperation])))", "~SModelLanguageUtil.getDatatypeFromLeft_SPropertyAccess(jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation):jetbrains.mps.bootstrap.structureLanguage.structure.DataTypeDeclaration");
    ourERI2IdMap.put("constructor [Classifier]ActionContext[ConstructorDeclaration] ()", "~ActionContext.<init>()");
    ourERI2IdMap.put("method ([Classifier]ActionContext).([InstanceMethodDeclaration]getNode())", "~ActionContext.getNode():jetbrains.mps.smodel.SNode");
    ourERI2IdMap.put("method ([Classifier]ActionContext).([InstanceMethodDeclaration]getScope())", "~ActionContext.getScope():jetbrains.mps.smodel.IScope");
    ourERI2IdMap.put("method ([Classifier]ActionContext).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))", "~ActionContext.get(java.lang.Class):java.lang.Object");
    ourERI2IdMap.put("static method ([Classifier]RuleEngineUtil).([StaticMethodDeclaration]processRulesAsync((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RuleEngine]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set])))", "~RuleEngineUtil.processRulesAsync(jetbrains.mps.businessRules.runtime.RuleEngine,java.util.Set):void");
    ourERI2IdMap.put("static method ([Classifier]RuleEngineUtil).([StaticMethodDeclaration]processRulesSync((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RuleEngine]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set])))", "~RuleEngineUtil.processRulesSync(jetbrains.mps.businessRules.runtime.RuleEngine,java.util.Set):void");
    ourERI2IdMap.put("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]setMaxIterations((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))", "~RuleEngine.setMaxIterations(int):void");
    ourERI2IdMap.put("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]setAsyncExecutor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Executor])))", "~RuleEngine.setAsyncExecutor(java.util.concurrent.Executor):void");
    ourERI2IdMap.put("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]setExecutor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Executor])))", "~RuleEngine.setExecutor(java.util.concurrent.Executor):void");
    ourERI2IdMap.put("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]addIgnoreThread())", "~RuleEngine.addIgnoreThread():void");
    ourERI2IdMap.put("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]removeIgnoreThread())", "~RuleEngine.removeIgnoreThread():void");
    ourERI2IdMap.put("method ([Classifier]WorkingMemory).([InstanceMethodDeclaration]assertFact((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~WorkingMemory.assertFact(java.lang.Object):void");
    ourERI2IdMap.put("method ([Classifier]WorkingMemory).([InstanceMethodDeclaration]assertFacts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set])))", "~WorkingMemory.assertFacts(java.util.Set):void");
    ourERI2IdMap.put("method ([Classifier]WorkingMemory).([InstanceMethodDeclaration]retractFact((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))", "~WorkingMemory.retractFact(java.lang.Object):void");
    ourERI2IdMap.put("constructor [Classifier]DateTimeFormatterBuilder[ConstructorDeclaration] ()", "~DateTimeFormatterBuilder.<init>()");
    ourERI2IdMap.put("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]toFormatter())", "~DateTimeFormatterBuilder.toFormatter():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFormatter])))", "~DateTimeFormatterBuilder.append(org.joda.time.format.DateTimeFormatter):org.joda.time.format.DateTimeFormatterBuilder");
    ourERI2IdMap.put("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimePrinter])))", "~DateTimeFormatterBuilder.append(org.joda.time.format.DateTimePrinter):org.joda.time.format.DateTimeFormatterBuilder");
    ourERI2IdMap.put("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimePrinter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeParser])))", "~DateTimeFormatterBuilder.append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser):org.joda.time.format.DateTimeFormatterBuilder");
    ourERI2IdMap.put("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]appendLiteral((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~DateTimeFormatterBuilder.appendLiteral(java.lang.String):org.joda.time.format.DateTimeFormatterBuilder");
    ourERI2IdMap.put("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]appendPattern((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))", "~DateTimeFormatterBuilder.appendPattern(java.lang.String):org.joda.time.format.DateTimeFormatterBuilder");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]shortDate())", "~DateTimeFormat.shortDate():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]shortTime())", "~DateTimeFormat.shortTime():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]shortDateTime())", "~DateTimeFormat.shortDateTime():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]mediumDate())", "~DateTimeFormat.mediumDate():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]mediumTime())", "~DateTimeFormat.mediumTime():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]mediumDateTime())", "~DateTimeFormat.mediumDateTime():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]longDate())", "~DateTimeFormat.longDate():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]longTime())", "~DateTimeFormat.longTime():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]longDateTime())", "~DateTimeFormat.longDateTime():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]fullDate())", "~DateTimeFormat.fullDate():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]fullTime())", "~DateTimeFormat.fullTime():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]fullDateTime())", "~DateTimeFormat.fullDateTime():org.joda.time.format.DateTimeFormatter");
    ourERI2IdMap.put("constructor [Classifier]DateTimeFormatter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimePrinter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeParser]))", "~DateTimeFormatter.<init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)");
    ourERI2IdMap.put("method ([Classifier]DateTimeFormatter).([InstanceMethodDeclaration]getPrinter())", "~DateTimeFormatter.getPrinter():org.joda.time.format.DateTimePrinter");
  }


  // used ERI
  static {
    ourUsedERISet.add("method ([Classifier]IOperationContext).([InstanceMethodDeclaration]getComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("[Classifier]FixedLocaleDateTimeFormatter");
    ourUsedERISet.add("method ([Classifier]ClassLoaderManager).([InstanceMethodDeclaration]getClassPathItem())");
    ourUsedERISet.add("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]getBlobAsString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static field ([Classifier]RegexpHighlighter).([StaticFieldDeclaration]STRING : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color]))");
    ourUsedERISet.add("method ([Classifier]Document).([InstanceMethodDeclaration]createAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Attr]))");
    ourUsedERISet.add("method ([Classifier]EditorCell_Label).([InstanceMethodDeclaration]getNullTextLine())");
    ourUsedERISet.add("method ([Classifier]RemoteTomcatHandler).([InstanceMethodDeclaration]setBaseUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]CellMenuUtil).([StaticMethodDeclaration]getEditedFeature((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAllSiblings((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]findUsages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]initBuffer())");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]setCurrentLayoutName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]INodeBuilder).([InstanceMethodDeclaration]getTargetNode() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("[Classifier]PrimaryReplaceChildMenuCellMenuPart");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getParent())");
    ourUsedERISet.add("static method ([Classifier]Queries).([StaticMethodDeclaration]CustomExpression_check_LinkDeclaration_reference_isCardinality_1((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))");
    ourUsedERISet.add("method ([Classifier]Document).([InstanceMethodDeclaration]getRootElement())");
    ourUsedERISet.add("[Classifier]Rule_Runtime");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]addPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))");
    ourUsedERISet.add("static method ([Classifier]EditorUtil).([StaticMethodDeclaration]createSelectIconButton((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("constructor [Classifier]SuperMethodCall_InstanceMethodScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SuperMethodCall]))");
    ourUsedERISet.add("method ([Classifier]IModule).([InstanceMethodDeclaration]getNonDefaultModelRoots())");
    ourUsedERISet.add("method ([Classifier]IClassifiersSearchScope).([InstanceMethodDeclaration]getClassifierNodes())");
    ourUsedERISet.add("method ([Classifier]Boolean).([InstanceMethodDeclaration]toString() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("constructor [Classifier]RootTemplate[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("[Classifier]ComparisonRule");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]isInstanceOfConcept((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildren((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]IScope).([InstanceMethodDeclaration]getModelDescriptors())");
    ourUsedERISet.add("static field ([Classifier]BaseConcept).([StaticFieldDeclaration]CPR_Short_description : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]TransientEntity).([InstanceMethodDeclaration]getRealType())");
    ourUsedERISet.add("[Classifier]EditorCell_Constant");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setMaxSimutaneousTxns((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]AbstractSearchScope).([InstanceMethodDeclaration]getNodes())");
    ourUsedERISet.add("method ([Classifier]AbstractTemplates).([InstanceMethodDeclaration]registerTemplate((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplate, <any_, any_, any_>])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAncestorsWhereConceptInList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]ICursor).([InstanceMethodDeclaration]release())");
    ourUsedERISet.add("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]removeManyToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("constructor [Classifier]CellMenuPart_ReplaceNode_replacementConcept_SearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]))");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]listFiles())");
    ourUsedERISet.add("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]setCheckboxInput((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getAdapter())");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]replaceChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))");
    ourUsedERISet.add("[Classifier]BaseWebTestCase");
    ourUsedERISet.add("method ([Classifier]HostToBaseUrlConfiguration).([InstanceMethodDeclaration]setHostToBaseUrlMapping((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [String]>])))");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]indexOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRedirectBackResponseAction())");
    ourUsedERISet.add("method ([Classifier]EditorCell_Property).([InstanceMethodDeclaration]getModelAccessor())");
    ourUsedERISet.add("method ([Classifier]FormatTableManager).([InstanceMethodDeclaration]getFormatTable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Iterable).([InstanceMethodDeclaration]iterator())");
    ourUsedERISet.add("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]mediumDateTime())");
    ourUsedERISet.add("static field ([Classifier]Long).([StaticFieldDeclaration]MIN_VALUE : (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long))");
    ourUsedERISet.add("method ([Classifier]NodeList).([InstanceMethodDeclaration]size() : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setRequestProcessors((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [RequestProcessor]>])))");
    ourUsedERISet.add("method ([Classifier]Map).([InstanceMethodDeclaration]keySet())");
    ourUsedERISet.add("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getCookieField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getValue())");
    ourUsedERISet.add("method ([Classifier]TypeConvertManager).([InstanceMethodDeclaration]fromString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]TextBlock");
    ourUsedERISet.add("[Classifier]Character");
    ourUsedERISet.add("[Classifier]Content");
    ourUsedERISet.add("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodePropertySetter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]DefaultNodeEditor");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]getLanguages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]setOneToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("static method ([Classifier]EditorCellKeyMap).([StaticMethodDeclaration]isValidModifiers((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static field ([Classifier]Color).([StaticFieldDeclaration]white : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color]))");
    ourUsedERISet.add("[Classifier]Set");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]insertNewNextSiblingChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Locale");
    ourUsedERISet.add("[Classifier]Stack");
    ourUsedERISet.add("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]setAsyncExecutor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Executor])))");
    ourUsedERISet.add("static field ([Classifier]UrlConstants).([StaticFieldDeclaration]RESOURCES : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]Object).([InstanceMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])) : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]rTransformHintSubstituteActionsBuilder_Precondition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RTransformHintSubstituteActionsBuilder])))");
    ourUsedERISet.add("method ([Classifier]ModelMetaData).([InstanceMethodDeclaration]getEntitiesMetaData())");
    ourUsedERISet.add("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isSimpleString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))");
    ourUsedERISet.add("method ([Classifier]RefNodeListHandler).([InstanceMethodDeclaration]createNodeCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]Object).([InstanceMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]size())");
    ourUsedERISet.add("method ([Classifier]TemplateActionController).([InstanceMethodDeclaration]getActionVariables())");
    ourUsedERISet.add("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setDestructor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DestructorRef])))");
    ourUsedERISet.add("method ([Classifier]Language$LanguageAspectStatus).([InstanceMethodDeclaration]getLanguage())");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]toArray((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("static field ([Classifier]AbstractCellListHandler).([StaticFieldDeclaration]ELEMENT_CELL_ACTIONS_SET : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]children((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]hasTemplateStylesheet())");
    ourUsedERISet.add("static field ([Classifier]SModelStereotype).([StaticFieldDeclaration]INTERNAL : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getIndexOfChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]toString() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]Boolean[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]minus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PeriodType])))");
    ourUsedERISet.add("method ([Classifier]TreePath).([InstanceMethodDeclaration]startTraversal((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))");
    ourUsedERISet.add("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseDutchStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static method ([Classifier]Period).([StaticMethodDeclaration]minutes((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]setRequest((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest])))");
    ourUsedERISet.add("method ([Classifier]INodeBuilder).([InstanceMethodDeclaration]findChildBuilder((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <jetbrains.mps.baseLanguage.types.classifier [INodeBuilder]>])))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]substring((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]setSelectInput((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Entity");
    ourUsedERISet.add("method ([Classifier]ServletResponse).([InstanceMethodDeclaration]getOutputStream())");
    ourUsedERISet.add("static method ([Classifier]HelginsJudgement_AnnotationLink).([StaticMethodDeclaration]setHelginsJudgement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HelginsJudgement])))");
    ourUsedERISet.add("method ([Classifier]BufferedReader).([InstanceMethodDeclaration]readLine())");
    ourUsedERISet.add("method ([Classifier]NodeList).([InstanceMethodDeclaration]toHtml() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]IFeatureDesign");
    ourUsedERISet.add("constructor [Classifier]DateTimeFormatterBuilder[ConstructorDeclaration] ()");
    ourUsedERISet.add("[Classifier]Comparator");
    ourUsedERISet.add("method ([Classifier]ITransformation).([InstanceMethodDeclaration]output((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("[Classifier]ArrayList");
    ourUsedERISet.add("constructor [Classifier]Job[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JobProcessor]))");
    ourUsedERISet.add("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]getRoleAttribute())");
    ourUsedERISet.add("[Classifier]EditorCellAction");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]getSNode())");
    ourUsedERISet.add("static field ([Classifier]JOptionPane).([StaticFieldDeclaration]INFORMATION_MESSAGE : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("[Classifier]NodeFactoryManager");
    ourUsedERISet.add("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]fullDateTime())");
    ourUsedERISet.add("method ([Classifier]EntityIterable).([InstanceMethodDeclaration]union((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable])))");
    ourUsedERISet.add("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]getDefaultMember((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EnumerationDataTypeDeclaration])))");
    ourUsedERISet.add("method ([Classifier]StatementList).([InstanceMethodDeclaration]getStatements())");
    ourUsedERISet.add("method ([Classifier]WorkingMemory).([InstanceMethodDeclaration]assertFacts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set])))");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertTrue((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static method ([Classifier]Queries).([StaticMethodDeclaration]getBinaryOperationType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCleanerThreads((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("[Classifier]ClassCastException");
    ourUsedERISet.add("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodeReferentSearchScopeProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]clockhourOfDay())");
    ourUsedERISet.add("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]hasValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]EditorCell_Collection).([StaticMethodDeclaration]createHorizontal((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]ParserConfigurationException");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]setConceptFqName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Log).([InstanceMethodDeclaration]debug((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable])))");
    ourUsedERISet.add("[Classifier]CellActionId");
    ourUsedERISet.add("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getPersistentFileUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Integer]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Integer])))");
    ourUsedERISet.add("constructor [Classifier]AbstractCellProvider[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]centuries())");
    ourUsedERISet.add("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]setTarget((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]Then");
    ourUsedERISet.add("method ([Classifier]IScope).([InstanceMethodDeclaration]getLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]TransientStoreUtil).([StaticMethodDeclaration]commit((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession])))");
    ourUsedERISet.add("constructor [Classifier]ParametersMap[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [ParameterSpec]]))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAdapter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_ForEachVariableReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ForEachVariableReference]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]extendedConcept_generatedClass((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("[Classifier]IOperationContext");
    ourUsedERISet.add("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]waitForPendingDocs())");
    ourUsedERISet.add("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]setNewChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]FileOutputStream");
    ourUsedERISet.add("method ([Classifier]NotificationTemplateCallHandler).([InstanceMethodDeclaration]render())");
    ourUsedERISet.add("[Classifier]ModelMetaData");
    ourUsedERISet.add("[Classifier]Event");
    ourUsedERISet.add("method ([Classifier]Generator).([InstanceMethodDeclaration]getModuleUID())");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]ITALIAN : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("[Classifier]BehaviorManager");
    ourUsedERISet.add("[Classifier]IOException");
    ourUsedERISet.add("method ([Classifier]FileUploadBase).([InstanceMethodDeclaration]setHeaderEncoding((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]AggregationAssociationSemantics");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRedirectToRootResponseAction())");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_MODIFIERS_CTRL : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getReferenceRoles())");
    ourUsedERISet.add("[Classifier]BaseScript");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createEquation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]InstantWhenType");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_MODIFIERS_ANY : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]isAssignableConcept((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration])))");
    ourUsedERISet.add("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]containsFileInput())");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]skip((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]getSubstituteInfo())");
    ourUsedERISet.add("static method ([Classifier]ScriptNameUtil).([StaticMethodDeclaration]getClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]RuleEngine");
    ourUsedERISet.add("method ([Classifier]EditorCell_Label).([InstanceMethodDeclaration]getTextLine())");
    ourUsedERISet.add("static method ([Classifier]PatternAddingUtil).([StaticMethodDeclaration]isPatternApplicable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageEditorModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("enum const ([Classifier]TraversalAxis).([EnumConstantDeclaration]FOLLOWING_SIBLINGS)");
    ourUsedERISet.add("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getXmlActionUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]TextLine).([InstanceMethodDeclaration]setTextColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]length())");
    ourUsedERISet.add("[Classifier]IFeatureDescriptor");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil_new).([StaticMethodDeclaration]_getCellName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellModel])))");
    ourUsedERISet.add("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]nodeFactory_RightTransformActionBuilder((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RTransformHintSubstituteActionsBuilder])))");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_MODIFIERS_CTRL_ALT_SHIFT : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]Antiquotation");
    ourUsedERISet.add("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]setAttachToCurrentOnBeginIfExists((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]Object).([InstanceMethodDeclaration]toString())");
    ourUsedERISet.add("method ([Classifier]ActionContext).([InstanceMethodDeclaration]getNode())");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getAttribute())");
    ourUsedERISet.add("[Classifier]StringWriter");
    ourUsedERISet.add("[Classifier]EntityRemovedException");
    ourUsedERISet.add("static field ([Classifier]HttpServletResponse).([StaticFieldDeclaration]SC_NOT_FOUND : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("[Classifier]PrimitiveAssociationSemantics");
    ourUsedERISet.add("[Classifier]TransientStoreSession");
    ourUsedERISet.add("static field ([ClassConcept]System).([StaticFieldDeclaration]out : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PrintStream]))");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]concat((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getNonLayoutRootTemplateComponent())");
    ourUsedERISet.add("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setRemoveOrphan((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("enum const ([Classifier]_YesNoDefault_Enum).([EnumConstantDeclaration]no)");
    ourUsedERISet.add("static field ([Classifier]Boolean).([StaticFieldDeclaration]TRUE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Boolean]))");
    ourUsedERISet.add("[Classifier]GlobalScope");
    ourUsedERISet.add("static field ([Classifier]NodeMacro_AnnotationLink).([StaticFieldDeclaration]NODE_MACRO : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]ErrorMessageManager$Severity");
    ourUsedERISet.add("[Classifier]Calculable");
    ourUsedERISet.add("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]minutes())");
    ourUsedERISet.add("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]staticInvoke((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Method]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))");
    ourUsedERISet.add("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getRootURI())");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getUserObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]RuleEngineImpl).([InstanceMethodDeclaration]close())");
    ourUsedERISet.add("[Classifier]UrlConstants");
    ourUsedERISet.add("[Classifier]Queries");
    ourUsedERISet.add("constructor [Classifier]DiskFileItemFactory[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File]))");
    ourUsedERISet.add("[Classifier]DiskFileItem");
    ourUsedERISet.add("method ([Classifier]Set).([InstanceMethodDeclaration]remove((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("[Classifier]ThreadPoolTaskExecutor");
    ourUsedERISet.add("[Classifier]SchedulerFactoryBean");
    ourUsedERISet.add("method ([ClassConcept]PrintStream).([InstanceMethodDeclaration]print((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("[Classifier]PresentationManager");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createGreaterThanInequation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SimpleMailMessage).([InstanceMethodDeclaration]setFrom((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]UnsupportedOperationException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]SchedulerFactoryBean).([InstanceMethodDeclaration]setTriggers((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Trigger]])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]conceptEditorClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptEditorDeclaration])))");
    ourUsedERISet.add("static field ([Classifier]Byte).([StaticFieldDeclaration]MAX_VALUE : (jetbrains.mps.baseLanguage.types.byte/jetbrains.mps.baseLanguage.types.byte))");
    ourUsedERISet.add("[Classifier]ServiceLocatorAdapter");
    ourUsedERISet.add("[Classifier]ClassConcept");
    ourUsedERISet.add("[Classifier]AbstractCellListHandler");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]CANADA_FRENCH : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("static method ([Classifier]JavaModelUtil_new).([StaticMethodDeclaration]findMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]])))");
    ourUsedERISet.add("static method ([Classifier]Integer).([StaticMethodDeclaration]parseInt((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]MailingService).([InstanceMethodDeclaration]send((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [MimeMessageHelper]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [String]>])))");
    ourUsedERISet.add("method ([Classifier]Set).([InstanceMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("[Classifier]Primitives");
    ourUsedERISet.add("constructor [Classifier]ModelNodesSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]))");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getAdapterClassConceptForConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]createOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("[Classifier]IOUtils");
    ourUsedERISet.add("static method ([Classifier]Period).([StaticMethodDeclaration]weeks((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("[Classifier]QueriesUtil");
    ourUsedERISet.add("[Classifier]InstanceMethodDeclaration");
    ourUsedERISet.add("enum const ([Classifier]IFeatureDescriptor$Type).([EnumConstantDeclaration]SEQUENCE)");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getNode())");
    ourUsedERISet.add("method ([Classifier]ServletResponse).([InstanceMethodDeclaration]setContentType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createLessThanInequation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]EditorContext).([InstanceMethodDeclaration]selectAndSetCaretLater((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setPort((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static method ([Classifier]Antiquotation_AnnotationLink).([StaticMethodDeclaration]getAntiquotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]find_ContextOwner_ClosureContext_generatedClass((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("[Classifier]Format");
    ourUsedERISet.add("static method ([Classifier]MarshallUtil).([StaticMethodDeclaration]getNodeId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]BigDecimal[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]select((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ISelector, <jetbrains.mps.baseLanguage.types.classifier [Object], jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("[Classifier]ClosuresMappingId");
    ourUsedERISet.add("[Classifier]QueryMethodIdEditor");
    ourUsedERISet.add("static method ([Classifier]ImageIO).([StaticMethodDeclaration]read((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File])))");
    ourUsedERISet.add("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getTypeOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static field ([Classifier]EditorCell).([StaticFieldDeclaration]CELL_ID : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))");
    ourUsedERISet.add("method ([Classifier]StoreSession).([InstanceMethodDeclaration]clearHistory((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]CellMenuUtil");
    ourUsedERISet.add("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]close())");
    ourUsedERISet.add("[Classifier]ReferenceAntiquotation");
    ourUsedERISet.add("[Classifier]Executor");
    ourUsedERISet.add("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]putSessionObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("enum const ([Classifier]TraversalAxis).([EnumConstantDeclaration]ANCESTORS)");
    ourUsedERISet.add("[Classifier]IFilter");
    ourUsedERISet.add("[Classifier]HashMap");
    ourUsedERISet.add("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]shortDateTime())");
    ourUsedERISet.add("[Classifier]Attr");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setEntityIterableCacheSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static field ([Classifier]GenConstants).([StaticFieldDeclaration]HEIGHT_PARAMETER : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("constructor [Classifier]Interface[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("[Classifier]ISearchScope");
    ourUsedERISet.add("constructor [Classifier]SelectImageFileButton[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellModel_Image]))");
    ourUsedERISet.add("[Classifier]SModelDescriptor");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]getChildren())");
    ourUsedERISet.add("static field ([Classifier]MPSColors).([StaticFieldDeclaration]DARK_BLUE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color]))");
    ourUsedERISet.add("static method ([Classifier]ServiceLocator).([StaticMethodDeclaration]close())");
    ourUsedERISet.add("[Classifier]PropertyPlaceholderConfigurer");
    ourUsedERISet.add("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]getTarget((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]Attr).([InstanceMethodDeclaration]getValue() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("method ([Classifier]AbstractCellProvider).([InstanceMethodDeclaration]getCellContext())");
    ourUsedERISet.add("[Classifier]LanguageDescriptor");
    ourUsedERISet.add("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]isSuperConceptOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static field ([Classifier]System).([StaticFieldDeclaration]err : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PrintStream]))");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]ITALY : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]fail((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellAction])))");
    ourUsedERISet.add("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]init())");
    ourUsedERISet.add("[Classifier]BaseApplication");
    ourUsedERISet.add("static method ([Classifier]XMLAssert).([StaticMethodDeclaration]assertXMLEqual((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Diff]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]baseMappingRule_Condition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]ICursor).([InstanceMethodDeclaration]moveToNext())");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageConstraintsModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("[Classifier]TransientEntity");
    ourUsedERISet.add("static field ([Classifier]GenConstants).([StaticFieldDeclaration]TEMPLATE_NAME : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]ListOperations).([StaticMethodDeclaration]createList((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))");
    ourUsedERISet.add("constructor [Classifier]SNodePointer[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]BaseAdapter).([StaticMethodDeclaration]fromAdapter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))");
    ourUsedERISet.add("static method ([Classifier]Class).([StaticMethodDeclaration]forName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ClassLoader])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleActionsModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [StringBuffer]))");
    ourUsedERISet.add("[Classifier]AbstractCellMenuPart_Generic_Group");
    ourUsedERISet.add("static method ([Classifier]ClassLoaderManager).([StaticMethodDeclaration]getInstance())");
    ourUsedERISet.add("[Classifier]KeyEvent");
    ourUsedERISet.add("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]reportTypeError((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Cardinality");
    ourUsedERISet.add("constructor [Classifier]DateTime[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long))");
    ourUsedERISet.add("method ([Classifier]Set).([InstanceMethodDeclaration]iterator())");
    ourUsedERISet.add("method ([Classifier]Entity).([InstanceMethodDeclaration]getPropertyNames())");
    ourUsedERISet.add("constructor [Classifier]RuntimeException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable]))");
    ourUsedERISet.add("[Classifier]ConceptLinkDeclaration");
    ourUsedERISet.add("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]addChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]suspendRenderingUnless((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("constructor [Classifier]StateChartViewer[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [StateMachine]))");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]with((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]Job).([InstanceMethodDeclaration]getProcessor())");
    ourUsedERISet.add("[Classifier]Enumeration");
    ourUsedERISet.add("constructor [Classifier]ResourceResponse[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]RuleEngineImpl).([InstanceMethodDeclaration]setRuleSelector((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RulesSelector])))");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]union((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]getRootsAdapters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]StoreSession).([InstanceMethodDeclaration]findLinks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]PropertyAttributeConcept");
    ourUsedERISet.add("[Classifier]NameUtil");
    ourUsedERISet.add("[Classifier]JOptionPane");
    ourUsedERISet.add("static field ([Classifier]RootTemplateAnnotation_AnnotationLink).([StaticFieldDeclaration]ROOT_TEMPLATE_ANNOTATION : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]VariableDeclaration");
    ourUsedERISet.add("static field ([Classifier]HttpServletResponse).([StaticFieldDeclaration]SC_FORBIDDEN : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildCount())");
    ourUsedERISet.add("static field ([Classifier]UrlConstants).([StaticFieldDeclaration]PERSISTENT_FILE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getAllAttributes())");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]getNodeValue() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]PropertyAccessor).([InstanceMethodDeclaration]getPropertyName())");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]getLast((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]IScope).([InstanceMethodDeclaration]getModelDescriptor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelUID])))");
    ourUsedERISet.add("constructor [Classifier]DecoratorJob[ConstructorDeclaration] ()");
    ourUsedERISet.add("static method ([Classifier]SModelLanguageUtil).([StaticMethodDeclaration]getDatatypeFromLeft_SPropertyAccess((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeOperation])))");
    ourUsedERISet.add("method ([Classifier]Map).([InstanceMethodDeclaration]putAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <? extends jetbrains.mps.baseLanguage.types.any, ? extends jetbrains.mps.baseLanguage.types.any>])))");
    ourUsedERISet.add("method ([Classifier]Boolean).([InstanceMethodDeclaration]toString())");
    ourUsedERISet.add("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setAssociationEnds((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [AssociationEndMetaData]>])))");
    ourUsedERISet.add("method ([Classifier]AbstractEntityStoreAwareTestCase).([InstanceMethodDeclaration]setRemoveStoreOnTearsDown((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]appendLiteral((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]StringWriter[ConstructorDeclaration] ()");
    ourUsedERISet.add("[Classifier]TextBuilder");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]millisOfSecond())");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setEntitiesCacheSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static field ([Classifier]Primitives).([StaticFieldDeclaration]BOOLEAN_TYPE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static field ([Classifier]IClassifiersSearchScope).([StaticFieldDeclaration]CLASS : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("enum const ([Classifier]TraversalAxis).([EnumConstantDeclaration]CHILDREN)");
    ourUsedERISet.add("[Classifier]HttpServletResponse");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)) : (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any))");
    ourUsedERISet.add("[Classifier]ListOperations");
    ourUsedERISet.add("method ([Classifier]IScope).([InstanceMethodDeclaration]isVisibleDevKit((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationGetParm_ConceptExpression_conceptExpression((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static field ([Classifier]GenConstants).([StaticFieldDeclaration]FILE_PARAMETER : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]toFormatter())");
    ourUsedERISet.add("enum const ([Classifier]InstantWhenType).([EnumConstantDeclaration]DNQ_AFTER_FLUSH)");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setSubstituteInfo((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeSubstituteInfo])))");
    ourUsedERISet.add("static method ([Classifier]BaseAdapter).([StaticMethodDeclaration]toNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <? extends jetbrains.mps.baseLanguage.types.classifier [INodeAdapter]>])))");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setUnderlined((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static field ([Classifier]Boolean).([StaticFieldDeclaration]FALSE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Boolean]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]BaseAdapter).([StaticMethodDeclaration]isInstance((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <? extends jetbrains.mps.baseLanguage.types.classifier [INodeAdapter]>])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_VariableDeclStmt_Variable_ClosureContext_generatedField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("[Classifier]State");
    ourUsedERISet.add("method ([Classifier]BaseFormatTable).([InstanceMethodDeclaration]getFormatter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("enum const ([Classifier]TraversalAxis).([EnumConstantDeclaration]PRECEDING_SIBLINGS_SELF)");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]exclude((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))");
    ourUsedERISet.add("[Classifier]OperationParm_ConceptList");
    ourUsedERISet.add("static method ([Classifier]File).([StaticMethodDeclaration]createTempFile((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Map).([InstanceMethodDeclaration]entrySet())");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_MethodParm_CopyOfParm((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("[Classifier]RuleEngineImpl");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setFairLatchers((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static method ([Classifier]TransientStoreUtil).([StaticMethodDeclaration]abortIfOpened((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession])))");
    ourUsedERISet.add("static method ([Classifier]ClosuresUtil).([StaticMethodDeclaration]isClosureContextOwner((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getDeclaringLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static method ([Classifier]SConceptPropertyOperations).([StaticMethodDeclaration]getString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getVersion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("method ([Classifier]EntityIterable).([InstanceMethodDeclaration]minus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable])))");
    ourUsedERISet.add("[Classifier]StatementList");
    ourUsedERISet.add("[Classifier]AbstractConceptDeclaration");
    ourUsedERISet.add("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]setCookieField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]Element).([InstanceMethodDeclaration]clone())");
    ourUsedERISet.add("method ([Classifier]TextBlock).([InstanceMethodDeclaration]getHelpText())");
    ourUsedERISet.add("method ([Classifier]INodeSubstituteAction).([InstanceMethodDeclaration]getParameterObject())");
    ourUsedERISet.add("[Classifier]Color");
    ourUsedERISet.add("static method ([Classifier]VariableNameUtil).([StaticMethodDeclaration]getSingularName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]getString_def((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRedirectSelfResponseAction())");
    ourUsedERISet.add("static field ([Classifier]_ScriptConstants).([StaticFieldDeclaration]USE_JS_LOAD : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]exists())");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_MODIFIERS_CTRL_SHIFT : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]Annotation_AnnotationLink).([StaticMethodDeclaration]getAnnotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Simple1])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Annotator]))");
    ourUsedERISet.add("static method ([Classifier]ReferenceAntiquotation_AnnotationLink).([StaticMethodDeclaration]setReferenceAntiquotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ReferenceAntiquotation])))");
    ourUsedERISet.add("[Classifier]ConditionalDateTimePrinter");
    ourUsedERISet.add("[Classifier]DataTypeDeclaration");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]instanceOfDiscriminator((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]EditorCell_Label).([InstanceMethodDeclaration]setDefaultText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]FileItemFactory");
    ourUsedERISet.add("static method ([Classifier]Resolver).([StaticMethodDeclaration]resolve((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SReference]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])) : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("method ([Classifier]Language).([InstanceMethodDeclaration]getNamespace())");
    ourUsedERISet.add("[Classifier]SConceptPropertyOperations");
    ourUsedERISet.add("method ([Classifier]JobProcessor).([InstanceMethodDeclaration]queueFinish())");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]compare((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CompareType]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))");
    ourUsedERISet.add("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]showErrorMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getHtmlRenderResponseAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TemplateComponent]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))");
    ourUsedERISet.add("static method ([Classifier]PropertySupport).([StaticMethodDeclaration]isBoolean((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PrimitiveDataTypeDeclaration])))");
    ourUsedERISet.add("[Classifier]TransientStoreUtil");
    ourUsedERISet.add("static method ([Classifier]Format).([StaticMethodDeclaration]getPrettyFormat())");
    ourUsedERISet.add("[Classifier]MPSColors");
    ourUsedERISet.add("method ([Classifier]AbstractModule).([InstanceMethodDeclaration]getDescriptorFile())");
    ourUsedERISet.add("constructor [Classifier]TransientStoreSessionListenerImpl[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RuleEngine]))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]SearchScopeStatus).([InstanceMethodDeclaration]getSearchScope())");
    ourUsedERISet.add("enum const ([Classifier]ErrorMessageManager$Severity).([EnumConstantDeclaration]ERROR)");
    ourUsedERISet.add("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getContentType())");
    ourUsedERISet.add("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getClasspathResourceUri((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))");
    ourUsedERISet.add("static method ([Classifier]MessageDigestUtil).([StaticMethodDeclaration]sha256((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static field ([Classifier]EditorCell).([StaticFieldDeclaration]ATTRACTS_FOCUS_POLICY : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))");
    ourUsedERISet.add("[Classifier]DateTimeFormat");
    ourUsedERISet.add("method ([Classifier]CronTrigger).([InstanceMethodDeclaration]setCronExpression((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Tag).([InstanceMethodDeclaration]getTagName())");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getName() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("constructor [Classifier]LinkedHashSet[ConstructorDeclaration] ()");
    ourUsedERISet.add("[Classifier]INodeReferentSetEventHandler");
    ourUsedERISet.add("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]getReferenceLinkDeclarationsExcludingOverridden((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]find_ContextOwner_ClosureContext_generatedClass_constructor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("method ([Classifier]Generator).([InstanceMethodDeclaration]getAlias())");
    ourUsedERISet.add("static method ([Classifier]ClosuresUtil).([StaticMethodDeclaration]findEnclosingClosureContextOwner((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static field ([Classifier]UrlConstants).([StaticFieldDeclaration]EVENTS : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getEventParameter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("constructor [Classifier]XMLOutputter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Format]))");
    ourUsedERISet.add("method ([Classifier]TextLine).([InstanceMethodDeclaration]setSelectedTextBackgroundColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))");
    ourUsedERISet.add("method ([Classifier]JabberService).([InstanceMethodDeclaration]send((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getChildCount((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]FileUtil");
    ourUsedERISet.add("method ([Classifier]AbstractList).([InstanceMethodDeclaration]iterator())");
    ourUsedERISet.add("method ([Classifier]TextLine).([InstanceMethodDeclaration]getCaretPosition())");
    ourUsedERISet.add("static method ([Classifier]ListOperations).([StaticMethodDeclaration]addAllElements((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]AbstractCellListHandler).([InstanceMethodDeclaration]getOwner())");
    ourUsedERISet.add("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]longDateTime())");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]sourceSubstituteMacro_SourceNodeQuery((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]ClosuresUtil).([StaticMethodDeclaration]hasVariablesUsedInClosure((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("[Classifier]SupertypingRule_Runtime");
    ourUsedERISet.add("[Classifier]String");
    ourUsedERISet.add("static method ([Classifier]PredefinedFormats).([StaticMethodDeclaration]rssDate())");
    ourUsedERISet.add("enum const ([Classifier]TraversalAxis).([EnumConstantDeclaration]SELF_ANCESTORS)");
    ourUsedERISet.add("[Classifier]ListAntiquotation");
    ourUsedERISet.add("static method ([Classifier]NodeFactoryManager).([StaticMethodDeclaration]createNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]PropertySupport");
    ourUsedERISet.add("method ([Classifier]Calculable).([InstanceMethodDeclaration]calculate())");
    ourUsedERISet.add("[Classifier]DevKitPath");
    ourUsedERISet.add("constructor [Classifier]ReferenceConceptLinkTargetSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))");
    ourUsedERISet.add("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]doClickLink((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]NullPointerException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]sourceSubstituteMacro_SourceNodesQuery((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Entity).([InstanceMethodDeclaration]getStore())");
    ourUsedERISet.add("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]insertChildFirst((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]RuleJobImpl).([InstanceMethodDeclaration]setRule((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Rule])))");
    ourUsedERISet.add("[Classifier]EditorCell_Image");
    ourUsedERISet.add("[Classifier]MatchParensRegexp");
    ourUsedERISet.add("method ([Classifier]Language).([InstanceMethodDeclaration]getStructureModelDescriptor())");
    ourUsedERISet.add("static method ([Classifier]Arrays).([StaticMethodDeclaration]asList((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]))");
    ourUsedERISet.add("method ([Classifier]CronTriggerBean).([InstanceMethodDeclaration]setJobDetail((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JobDetail])))");
    ourUsedERISet.add("constructor [Classifier]StringBuffer[ConstructorDeclaration] ()");
    ourUsedERISet.add("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]isSubConceptOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]EditorCell_Collection");
    ourUsedERISet.add("[Classifier]Exception");
    ourUsedERISet.add("static method ([Classifier]Float).([StaticMethodDeclaration]parseFloat((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]AttributesRolesUtil");
    ourUsedERISet.add("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getCookieField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]ComparisonRule_Runtime");
    ourUsedERISet.add("method ([Classifier]Boolean).([InstanceMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getLinkAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]AndCondition[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <any_>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <any_>]))");
    ourUsedERISet.add("[Classifier]IChooseComponent");
    ourUsedERISet.add("[Classifier]Job");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCompressorDeadlockRetry((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static field ([Classifier]IClassifiersSearchScope).([StaticFieldDeclaration]ENUM_CONSTANT : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]restoreBuffer((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HtmlStringUtil$EscapeKind])))");
    ourUsedERISet.add("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]ifMacro_Condition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]AttributesRolesUtil).([StaticMethodDeclaration]getLinkRoleFromLinkAttributeRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]isFirstScriptOnceElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]changeModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))");
    ourUsedERISet.add("static field ([Classifier]EditorCell).([StaticFieldDeclaration]METAINFO_LINK_DECLARATION : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]UK : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("static field ([Classifier]BaseConcept).([StaticFieldDeclaration]CPR_Abstract : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]addTo((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]setSessionField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("[Classifier]Solution");
    ourUsedERISet.add("[Classifier]RefNodeListHandler");
    ourUsedERISet.add("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]isInsideTemplateFragment((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("enum const ([Classifier]HtmlStringUtil$EscapeKind).([EnumConstantDeclaration]SINGLE_LINE_AND_DOUBLE_TO_SINGLE_QUOTES)");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]getNodeName() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]nodeFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]ModelMetaDataImpl).([InstanceMethodDeclaration]init())");
    ourUsedERISet.add("constructor [Classifier]ConceptDeclarationExtendedConceptSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))");
    ourUsedERISet.add("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]searchFor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]SModelLanguageUtil).([StaticMethodDeclaration]findNodeOperationParameter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeOperation]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]resumeIndexing())");
    ourUsedERISet.add("[Classifier]EditorsPane");
    ourUsedERISet.add("method ([Classifier]Language$LanguageAspectStatus).([InstanceMethodDeclaration]getAspectKind())");
    ourUsedERISet.add("[Classifier]CollectionUtil");
    ourUsedERISet.add("method ([Classifier]CellActionId).([InstanceMethodDeclaration]getValue())");
    ourUsedERISet.add("[Classifier]LocalTomcatHandler");
    ourUsedERISet.add("static field ([Classifier]Pattern).([StaticFieldDeclaration]MULTILINE : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("constructor [Classifier]ListResourceBundle[ConstructorDeclaration] ()");
    ourUsedERISet.add("static method ([Classifier]Period).([StaticMethodDeclaration]days((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("[Classifier]LinkAttributeConcept");
    ourUsedERISet.add("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]setBlob((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]ListOperations).([StaticMethodDeclaration]getElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]getParentFile())");
    ourUsedERISet.add("[Classifier]Date");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]yearOfEra())");
    ourUsedERISet.add("static method ([Classifier]XhtmlSchemaUtil).([StaticMethodDeclaration]findXhtmlSchema((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_MODIFIERS_NONE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]shortDate())");
    ourUsedERISet.add("static method ([Classifier]FindOperations).([StaticMethodDeclaration]updateReferences((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ScriptContext])))");
    ourUsedERISet.add("enum const ([Classifier]TraversalAxis).([EnumConstantDeclaration]PRECEDING_SIBLINGS)");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]appendIndent())");
    ourUsedERISet.add("method ([Classifier]NamedNodeMap).([InstanceMethodDeclaration]removeNamedItem((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))");
    ourUsedERISet.add("[Classifier]System");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getGenuineLinkDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration])))");
    ourUsedERISet.add("constructor [Classifier]IllegalArgumentException[ConstructorDeclaration] ()");
    ourUsedERISet.add("static field ([Classifier]GenConstants).([StaticFieldDeclaration]POSTPONED_EXCEPTION : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static field ([Classifier]SModelStereotype).([StaticFieldDeclaration]TEMPLATES : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]Math");
    ourUsedERISet.add("static method ([Classifier]SModelUID).([StaticMethodDeclaration]fromString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]IModule).([InstanceMethodDeclaration]getDescriptorFile())");
    ourUsedERISet.add("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]setResumeOnBeginIfExists((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]NamedNodeMap).([InstanceMethodDeclaration]item((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]popOldChildrenTemplateComponents())");
    ourUsedERISet.add("constructor [Classifier]StringBuilder[ConstructorDeclaration] ()");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_MODIFIERS_SHIFT : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]EditorCell_Property");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]decapitalize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Map$Entry).([InstanceMethodDeclaration]getValue())");
    ourUsedERISet.add("[Classifier]AbstractCellMenuPart_ReplaceChild_CustomChildConcept");
    ourUsedERISet.add("method ([Classifier]SReference).([InstanceMethodDeclaration]setTargetNodeId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]IllegalArgumentException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable]))");
    ourUsedERISet.add("[Classifier]SubtypingRule");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getStylesheetUri((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))");
    ourUsedERISet.add("constructor [Classifier]ArrayList[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("static method ([Classifier]PredefinedFormats).([StaticMethodDeclaration]defaultFormat())");
    ourUsedERISet.add("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getStereotype())");
    ourUsedERISet.add("constructor [Classifier]Object[ConstructorDeclaration] ()");
    ourUsedERISet.add("static method ([Classifier]Period).([StaticMethodDeclaration]seconds((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static method ([Classifier]DirectedAssociationSemantics).([StaticMethodDeclaration]removeToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("[Classifier]SModelSearchUtil_new");
    ourUsedERISet.add("[Interface]Appendable");
    ourUsedERISet.add("method ([Classifier]IOperationContext).([InstanceMethodDeclaration]getModule())");
    ourUsedERISet.add("static method ([Classifier]StringBuilderSpinAllocator).([StaticMethodDeclaration]alloc())");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]getEditorContext())");
    ourUsedERISet.add("method ([Classifier]DocumentBuilder).([InstanceMethodDeclaration]newDocument() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Document]))");
    ourUsedERISet.add("[Classifier]TypeChecker");
    ourUsedERISet.add("[Classifier]UnsupportedEncodingException");
    ourUsedERISet.add("[Classifier]JobProcessorExceptionHandler");
    ourUsedERISet.add("method ([Classifier]InputStream).([InstanceMethodDeclaration]read())");
    ourUsedERISet.add("[Classifier]Serializable");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setLogIteratorReadSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]FileOutputStream).([InstanceMethodDeclaration]close())");
    ourUsedERISet.add("method ([Classifier]IFeatureDesign).([InstanceMethodDeclaration]getParameters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("constructor [Classifier]ByteArrayInputStream[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_]))");
    ourUsedERISet.add("constructor [Classifier]Date[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long))");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]setStableSort((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]AbstractMigrationRefactoring");
    ourUsedERISet.add("method ([Classifier]PropertyPlaceholderConfigurer).([InstanceMethodDeclaration]setSearchSystemEnvironment((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]LinkDeclaration).([InstanceMethodDeclaration]getTarget())");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getLinkAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]VersionMismatchException");
    ourUsedERISet.add("constructor [Classifier]CompositeFilter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [IFilter, <any_>]]))");
    ourUsedERISet.add("constructor [Classifier]SAXBuilder[ConstructorDeclaration] ()");
    ourUsedERISet.add("[Classifier]ConceptDeclarationRTransformHintSubstituteAction");
    ourUsedERISet.add("static method ([Classifier]FileUploadBase).([StaticMethodDeclaration]isMultipartContent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest])))");
    ourUsedERISet.add("[Classifier]XmlTemplateCallHandler");
    ourUsedERISet.add("method ([Classifier]SAXBuilder).([InstanceMethodDeclaration]build((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Reader])))");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]TRADITIONAL_CHINESE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("[Classifier]CellActionMapItem");
    ourUsedERISet.add("method ([Classifier]IScope).([InstanceMethodDeclaration]getVisibleLanguages())");
    ourUsedERISet.add("static method ([Classifier]DirectedAssociationSemantics).([StaticMethodDeclaration]createToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("[Classifier]DateTimeFormatterBuilder");
    ourUsedERISet.add("[Classifier]EntityIterable");
    ourUsedERISet.add("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]getCount((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]CellAction_DeleteNode[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("constructor [Classifier]DateTime[ConstructorDeclaration] ()");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]addRoot((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]toString())");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]capitalize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimePrinter])))");
    ourUsedERISet.add("method ([Classifier]AbstractCollection).([InstanceMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("[Classifier]RuleJobImpl");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]convert((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Calendar])))");
    ourUsedERISet.add("static field ([Classifier]Integer).([StaticFieldDeclaration]MAX_VALUE : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]addHeader((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]addAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [SNode]>])))");
    ourUsedERISet.add("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseFrenchStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]TAIWAN : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("[Classifier]SimpleMailMessage");
    ourUsedERISet.add("constructor [Classifier]QueryParameter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))");
    ourUsedERISet.add("static field ([Classifier]GenConstants).([StaticFieldDeclaration]HEART_BEAT_EVENT : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]LogFactory).([StaticMethodDeclaration]getLog((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class])))");
    ourUsedERISet.add("[Classifier]Method");
    ourUsedERISet.add("[Classifier]GenerationSessionContext");
    ourUsedERISet.add("[Classifier]XhtmlSchemaUtil");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]SIMPLIFIED_CHINESE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]endsWith((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Graphics2D");
    ourUsedERISet.add("method ([Classifier]XmlTemplateCallHandler).([InstanceMethodDeclaration]getResponseAction())");
    ourUsedERISet.add("method ([Classifier]NodeList).([InstanceMethodDeclaration]elementAt((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))");
    ourUsedERISet.add("[Classifier]TBuilderContextFactory");
    ourUsedERISet.add("[ClassConcept]String");
    ourUsedERISet.add("[Classifier]Annotation_AnnotationLink");
    ourUsedERISet.add("[Classifier]AssociationSemantics");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getCurrentId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]moveParenthesisToTheRightInside((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ParenthesizedExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("method ([Classifier]ICursor).([InstanceMethodDeclaration]getCurrent())");
    ourUsedERISet.add("[Classifier]GenerationPlans");
    ourUsedERISet.add("method ([Classifier]RequestProcessor).([InstanceMethodDeclaration]isApplicable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RequestUri])))");
    ourUsedERISet.add("method ([Classifier]IScope).([InstanceMethodDeclaration]getVisibleDevkits())");
    ourUsedERISet.add("method ([Classifier]OutputStream).([InstanceMethodDeclaration]write((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_])))");
    ourUsedERISet.add("static method ([Classifier]Collections).([StaticMethodDeclaration]singletonList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]))");
    ourUsedERISet.add("constructor [Classifier]ArrayList[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>]))");
    ourUsedERISet.add("[Classifier]PropertyAccessor");
    ourUsedERISet.add("method ([Classifier]SReference).([InstanceMethodDeclaration]getTargetModelUID())");
    ourUsedERISet.add("[Classifier]RegexpProcessor");
    ourUsedERISet.add("[Classifier]AbstractMaker");
    ourUsedERISet.add("[Classifier]Generator");
    ourUsedERISet.add("constructor [Classifier]TextIndexEntityStoreChangesListener[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexMetaData]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]))");
    ourUsedERISet.add("method ([Classifier]Set).([InstanceMethodDeclaration]containsAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection])) : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("[Classifier]AbstractCellMenuComponent");
    ourUsedERISet.add("constructor [Classifier]NullAdaptiveProgressMonitor[ConstructorDeclaration] ()");
    ourUsedERISet.add("method ([Classifier]AbstractTemplates).([InstanceMethodDeclaration]createTransformation((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITransformation, <any_, any_, any_>]))");
    ourUsedERISet.add("[Classifier]GenConstants");
    ourUsedERISet.add("static method ([Classifier]ListOperations).([StaticMethodDeclaration]reverse((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("[Classifier]FormatTableManager");
    ourUsedERISet.add("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]addNewChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getConceptDeclarationAdapter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]))");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]roundFloor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))");
    ourUsedERISet.add("[Classifier]Deprecated");
    ourUsedERISet.add("[Classifier]TypeConverter");
    ourUsedERISet.add("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isEnum((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))");
    ourUsedERISet.add("static method ([Classifier]Long).([StaticMethodDeclaration]parseLong((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]ListOperations).([StaticMethodDeclaration]removeElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("[Classifier]_YesNoDefault_Enum");
    ourUsedERISet.add("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseFinishStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]toLowerCase())");
    ourUsedERISet.add("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.float/jetbrains.mps.baseLanguage.types.float)))");
    ourUsedERISet.add("static method ([Classifier]System).([StaticMethodDeclaration]getProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]MapEntry[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any))");
    ourUsedERISet.add("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]createDefaultSubstituteInfo())");
    ourUsedERISet.add("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setDefaultControllerName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]RuntimeException[ConstructorDeclaration] ()");
    ourUsedERISet.add("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getEventParameters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [QueryParameter]])))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getPropertyNames())");
    ourUsedERISet.add("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]millis())");
    ourUsedERISet.add("static field ([Classifier]ClassPathEntry).([StaticFieldDeclaration]PATH : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getName())");
    ourUsedERISet.add("enum const ([Classifier]IFeatureDescriptor$Type).([EnumConstantDeclaration]LIST)");
    ourUsedERISet.add("[Classifier]EntityMetaData");
    ourUsedERISet.add("[Classifier]ITreePath");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))");
    ourUsedERISet.add("method ([Classifier]GenerationPlans).([InstanceMethodDeclaration]getPlans())");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]print((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFormatter])))");
    ourUsedERISet.add("[Classifier]_QueriesUtil");
    ourUsedERISet.add("static method ([Classifier]SModelUtil).([StaticMethodDeclaration]getConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]))");
    ourUsedERISet.add("method ([Classifier]BufferedImage).([InstanceMethodDeclaration]getHeight())");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]replaceWithNewChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]getRootsAdapters())");
    ourUsedERISet.add("static field ([Classifier]EditorCell).([StaticFieldDeclaration]FIRST_EDITABLE_CELL : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))");
    ourUsedERISet.add("[Classifier]UrlUtil");
    ourUsedERISet.add("method ([Classifier]TextIndexEntityMetaDataImpl).([InstanceMethodDeclaration]addTextExtractor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [FieldTextExtractor])))");
    ourUsedERISet.add("method ([Classifier]Runnable).([InstanceMethodDeclaration]run())");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getRssLinkEntries())");
    ourUsedERISet.add("method ([Classifier]MethodInvoker).([InstanceMethodDeclaration]setTargetObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("[Classifier]LanguagePath");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleConstraintsModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("[Classifier]EditorCellKeyMapAction");
    ourUsedERISet.add("method ([Classifier]SModelUID).([InstanceMethodDeclaration]toString())");
    ourUsedERISet.add("constructor [Classifier]AssertionFailedError[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodePropertySetter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodePropertySetter])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getProjectPluginClassNames((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]length())");
    ourUsedERISet.add("method ([Classifier]Stack).([InstanceMethodDeclaration]pop() : (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any))");
    ourUsedERISet.add("constructor [Classifier]InstanceMethodCall_InstanceMethodScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ClassifierType]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InstanceMethodCall]))");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]KOREA : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getQueryString())");
    ourUsedERISet.add("method ([Classifier]Entity).([InstanceMethodDeclaration]getId())");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]union((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getDescendantsWhereConceptInList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]WikiLinkHandler");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getStringConceptProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]StoreTransaction).([InstanceMethodDeclaration]commit())");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRefreshResponseAction((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [TemplateComponent]])))");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setFileHandleCacheSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("constructor [Classifier]CellProviderWithRole[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]))");
    ourUsedERISet.add("constructor [Classifier]Integer[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("[Classifier]Annotator");
    ourUsedERISet.add("constructor [Classifier]String[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_]))");
    ourUsedERISet.add("method ([Classifier]AssociationMetaDataImpl).([InstanceMethodDeclaration]setType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AssociationType])))");
    ourUsedERISet.add("static field ([Classifier]DevKitPath).([StaticFieldDeclaration]PATH : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageAccessoryModelModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("method ([Classifier]AbstractCellProvider).([InstanceMethodDeclaration]getSNode())");
    ourUsedERISet.add("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]beginSession((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("[Classifier]CursorFactory");
    ourUsedERISet.add("method ([Classifier]AbstractCellListHandler).([InstanceMethodDeclaration]getElementRole())");
    ourUsedERISet.add("[Classifier]Rule");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]hasEffect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]Arrays).([StaticMethodDeclaration]asList((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))");
    ourUsedERISet.add("method ([Classifier]RequestUri).([InstanceMethodDeclaration]getControllerName())");
    ourUsedERISet.add("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]addBcc((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SubtypingManager).([InstanceMethodDeclaration]isSubtype((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]indexOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageScriptsModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("method ([Classifier]DocumentBuilderFactory).([InstanceMethodDeclaration]newDocumentBuilder() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DocumentBuilder]))");
    ourUsedERISet.add("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]getNodesIncludingImported((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]EditorManager).([StaticMethodDeclaration]getInstanceFromContext((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("constructor [Classifier]EditorCell_Constant[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getScope())");
    ourUsedERISet.add("[Classifier]Annotator2");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getPreviousVersion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("[Classifier]ResponseAction");
    ourUsedERISet.add("method ([Classifier]LocalDate).([InstanceMethodDeclaration]toDateTimeAtMidnight() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTime]))");
    ourUsedERISet.add("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]getConstants())");
    ourUsedERISet.add("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setAppicationVersion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_MODIFIERS_CTRL_ALT : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]Pattern).([InstanceMethodDeclaration]matcher((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))");
    ourUsedERISet.add("[Classifier]JabberService");
    ourUsedERISet.add("[Classifier]DataIntegrityViolationException");
    ourUsedERISet.add("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setPassword((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]Collections).([StaticMethodDeclaration]emptyList())");
    ourUsedERISet.add("constructor [Classifier]String[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]Condition");
    ourUsedERISet.add("constructor [Classifier]AbstractCellListHandler[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]))");
    ourUsedERISet.add("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]OperationParm_Concept");
    ourUsedERISet.add("constructor [Classifier]RuntimeException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable]))");
    ourUsedERISet.add("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]getFullLabeledInputName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]weaving_MappingRule_ContextNodeQuery((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]JavaNameUtil");
    ourUsedERISet.add("method ([Classifier]Iterator).([InstanceMethodDeclaration]hasNext())");
    ourUsedERISet.add("method ([Classifier]FileUploadBase).([InstanceMethodDeclaration]setSizeMax((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]getChildNodes() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeList]))");
    ourUsedERISet.add("static field ([Classifier]ServletConstants).([StaticFieldDeclaration]ENCODING : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("constructor [Classifier]DefaultChildSubstituteInfo[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]))");
    ourUsedERISet.add("[Classifier]DateTimeFormatter");
    ourUsedERISet.add("method ([Classifier]EditorCell_Collection).([InstanceMethodDeclaration]setGridLayout((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]DataTypeUtil");
    ourUsedERISet.add("static method ([Classifier]Cardinality).([StaticMethodDeclaration]getConstants())");
    ourUsedERISet.add("method ([Classifier]Entity).([InstanceMethodDeclaration]getType())");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]getParent())");
    ourUsedERISet.add("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]createNewNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]ITreeTraversal).([InstanceMethodDeclaration]getTreePath())");
    ourUsedERISet.add("method ([Classifier]Throwable).([InstanceMethodDeclaration]getMessage())");
    ourUsedERISet.add("static field ([Classifier]DotDateTimeOperation).([StaticFieldDeclaration]CPR_OperationName : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]BaseAdapter).([StaticMethodDeclaration]fromNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getGenuineLinkRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration])))");
    ourUsedERISet.add("method ([Classifier]RulesSelectorImpl).([InstanceMethodDeclaration]setRulePackages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [RulePackage]>])))");
    ourUsedERISet.add("[Classifier]IClassifiersSearchScope");
    ourUsedERISet.add("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]toString())");
    ourUsedERISet.add("method ([Classifier]StoreSession).([InstanceMethodDeclaration]find((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable])))");
    ourUsedERISet.add("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]canSwitchPropertyMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))");
    ourUsedERISet.add("static method ([Classifier]Webquery).([StaticMethodDeclaration]param((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]BaseAdapter");
    ourUsedERISet.add("[Classifier]_ExtAllJsConstants");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getRole_())");
    ourUsedERISet.add("[Classifier]RulesSelectorImpl");
    ourUsedERISet.add("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]propertyMacro_GetPropertyValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]ErrorMessageManager");
    ourUsedERISet.add("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Throwable");
    ourUsedERISet.add("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setInitializer((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Runnable])))");
    ourUsedERISet.add("[Classifier]Webquery");
    ourUsedERISet.add("[Classifier]ISelector");
    ourUsedERISet.add("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getTargetModel())");
    ourUsedERISet.add("[Classifier]LabeledInputException");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getDefaultResponseAction())");
    ourUsedERISet.add("method ([Classifier]TextBuilder).([InstanceMethodDeclaration]getText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))");
    ourUsedERISet.add("[Classifier]ClassPathEntry");
    ourUsedERISet.add("static method ([Classifier]ServiceLocator).([StaticMethodDeclaration]init((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]])))");
    ourUsedERISet.add("static method ([Classifier]ErrorMessageManager).([StaticMethodDeclaration]isEmpty())");
    ourUsedERISet.add("[Classifier]EditorCellTags");
    ourUsedERISet.add("[Classifier]Matcher");
    ourUsedERISet.add("constructor [Classifier]File[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]Throwable).([InstanceMethodDeclaration]getLocalizedMessage())");
    ourUsedERISet.add("method ([Classifier]Attr).([InstanceMethodDeclaration]setValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("constructor [Classifier]VisibleClassifierMembersScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]setHeader((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]ModelAccessor");
    ourUsedERISet.add("method ([Classifier]EntityIterable).([InstanceMethodDeclaration]intersect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable])))");
    ourUsedERISet.add("enum const ([Classifier]LinkMetaclass).([EnumConstantDeclaration]reference)");
    ourUsedERISet.add("[Classifier]AbstractList");
    ourUsedERISet.add("method ([Classifier]TextBlock).([InstanceMethodDeclaration]getIconPath())");
    ourUsedERISet.add("constructor [Classifier]AbstractSubtypingRule_Runtime[ConstructorDeclaration] ()");
    ourUsedERISet.add("method ([Classifier]EditorCell_Collection).([InstanceMethodDeclaration]setUsesBraces((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]addReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SReference])))");
    ourUsedERISet.add("[Classifier]AbstractCellMenuPart_ReplaceNode_Group");
    ourUsedERISet.add("[Classifier]INodePropertySetter");
    ourUsedERISet.add("[Classifier]CheckPermission_AnnotationLink");
    ourUsedERISet.add("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]isSessionExists((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("[Classifier]Period");
    ourUsedERISet.add("method ([Classifier]SchedulerFactoryBean).([InstanceMethodDeclaration]setStartupDelay((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getFieldName())");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_VariableReference_Variable_ClosureContext_generatedField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("[Classifier]TemplateActionController");
    ourUsedERISet.add("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]setSubject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]IllegalStateException");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setRightTransformAnchorTag((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]listFiles() : (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [File]]))");
    ourUsedERISet.add("[Classifier]IMatchingPattern");
    ourUsedERISet.add("[Classifier]Double");
    ourUsedERISet.add("method ([Classifier]DateTime).([InstanceMethodDeclaration]minusDays((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTime]))");
    ourUsedERISet.add("static field ([Classifier]Color).([StaticFieldDeclaration]black : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color]))");
    ourUsedERISet.add("static method ([Classifier]HyperlinkUtil).([StaticMethodDeclaration]getHyperlinkComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]centuryOfEra())");
    ourUsedERISet.add("[Classifier]ColorModel");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getBaseConcept())");
    ourUsedERISet.add("constructor [Classifier]ByteArrayOutputStream[ConstructorDeclaration] ()");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getReferences())");
    ourUsedERISet.add("method ([Classifier]RuleJobImpl).([InstanceMethodDeclaration]setRuleEngine((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RuleEngine])))");
    ourUsedERISet.add("[Classifier]FieldTextExtractor");
    ourUsedERISet.add("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getSession())");
    ourUsedERISet.add("[Classifier]IForEach");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]instanceOfType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]String).([StaticMethodDeclaration]format((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))");
    ourUsedERISet.add("constructor [Classifier]IllegalArgumentException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]ITraversal).([InstanceMethodDeclaration]stopCursor())");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]pushCurrentTemplateComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TemplateComponent])))");
    ourUsedERISet.add("[Classifier]JDOMException");
    ourUsedERISet.add("[Classifier]AbstractChildNodeSetter");
    ourUsedERISet.add("static field ([Classifier]EditorCellAction).([StaticFieldDeclaration]DELETE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getGeneratorSessionContext())");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getEventSource())");
    ourUsedERISet.add("[Classifier]DocumentBuilderFactory");
    ourUsedERISet.add("static method ([Classifier]EditorCellTags).([StaticMethodDeclaration]getOpeningText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellModel])))");
    ourUsedERISet.add("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setUser((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]Locale[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getEventName())");
    ourUsedERISet.add("constructor [Classifier]StreamResult[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [OutputStream]))");
    ourUsedERISet.add("static method ([Classifier]Long).([StaticMethodDeclaration]parseLong((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static method ([Classifier]QueriesUtil).([StaticMethodDeclaration]findMatchingTemplates((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [SNode]>]))");
    ourUsedERISet.add("constructor [Classifier]Annotator2[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]))");
    ourUsedERISet.add("method ([Classifier]EquationManager).([InstanceMethodDeclaration]getRepresentator((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]EditorsPane).([InstanceMethodDeclaration]getCurrentEditor())");
    ourUsedERISet.add("[Classifier]LocalVariableDeclarationStatement");
    ourUsedERISet.add("[Classifier]Inline_AnnotationLink");
    ourUsedERISet.add("[Classifier]EditorUtil");
    ourUsedERISet.add("static method ([Classifier]CheckPermission_AnnotationLink).([StaticMethodDeclaration]setCheckPermission((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CheckPermissionAnnotation])))");
    ourUsedERISet.add("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]longDate())");
    ourUsedERISet.add("constructor [Classifier]TypeVarScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]addSessionLocalEntity((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("[Classifier]INodeAdapter");
    ourUsedERISet.add("method ([Classifier]ModelMetaDataImpl).([InstanceMethodDeclaration]setEntityMetaDatas((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [EntityMetaData]>])))");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]toHtml() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCleanerDeadlockRetry((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static method ([Classifier]DirectedAssociationSemantics).([StaticMethodDeclaration]clearToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]RequestProcessor");
    ourUsedERISet.add("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Filter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITreeTraversal, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IFilter, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("[Classifier]SModelOperations");
    ourUsedERISet.add("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]parseValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]ServletResponse).([InstanceMethodDeclaration]setCharacterEncoding((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]AbstractCellMenuPart_ReplaceNode_CustomNodeConcept");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationHasParm_ConceptExpression((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]AsPattern_AnnotationLink).([StaticMethodDeclaration]setAsPattern((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AsPattern])))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]hasRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Base64");
    ourUsedERISet.add("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char)))");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]setPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationHasParm_Inclusion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]ScriptNameUtil).([StaticMethodDeclaration]getMigrationScriptClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static field ([Classifier]SModelStereotype).([StaticFieldDeclaration]JAVA_STUB : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]HttpServletRequest");
    ourUsedERISet.add("static method ([Classifier]MarshallUtil).([StaticMethodDeclaration]marshall((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getHistory((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("static method ([Classifier]ErrorMessageManager).([StaticMethodDeclaration]addMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Serializable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ErrorMessageManager$Severity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Throwable).([InstanceMethodDeclaration]printStackTrace() : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("enum const ([Classifier]ErrorMessageManager$Severity).([EnumConstantDeclaration]INFO)");
    ourUsedERISet.add("method ([Classifier]EditorCellKeyMapAction).([InstanceMethodDeclaration]setCaretPolicy((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]intermediateAbort())");
    ourUsedERISet.add("[Classifier]INodeBuilder");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationHasParm_Concept((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]addIgnoreThread())");
    ourUsedERISet.add("method ([Classifier]RegexpHighlighter).([InstanceMethodDeclaration]addKeyWord((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getPrevSiblings((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]HelginsJudgement_AnnotationLink");
    ourUsedERISet.add("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]checkLayout((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Language$LanguageAspectStatus$AspectKind");
    ourUsedERISet.add("method ([Classifier]BaseMethodDeclaration).([InstanceMethodDeclaration]getParameters())");
    ourUsedERISet.add("[Classifier]Document");
    ourUsedERISet.add("method ([Classifier]MPSModuleRepository).([InstanceMethodDeclaration]getModuleByUID((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]PopulateParameters).([InstanceMethodDeclaration]hasParameter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))");
    ourUsedERISet.add("static method ([Classifier]TransientStoreUtil).([StaticMethodDeclaration]abort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession])))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]setProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Log).([InstanceMethodDeclaration]isDebugEnabled())");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]findNodeByFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static method ([Classifier]GeneratedQueriesOpener).([StaticMethodDeclaration]openQueryMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]isInMemory())");
    ourUsedERISet.add("[Classifier]EntityOperations");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getNextVersion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("[Classifier]BerkeleyDbStoreConfig");
    ourUsedERISet.add("method ([Classifier]Stack).([InstanceMethodDeclaration]push((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)) : (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any))");
    ourUsedERISet.add("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]checkInputField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]IScope).([InstanceMethodDeclaration]isVisibleLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Element).([InstanceMethodDeclaration]addContent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getGeneratorsToReferFromGenerator((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("constructor [Classifier]ArrayList[ConstructorDeclaration] ()");
    ourUsedERISet.add("[Classifier]DefaultReferenceSubstituteInfo");
    ourUsedERISet.add("method ([Classifier]DecoratorJob).([InstanceMethodDeclaration]executeDecorated())");
    ourUsedERISet.add("static method ([Classifier]EditorCell_Image).([StaticMethodDeclaration]createImageCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]ITemplate");
    ourUsedERISet.add("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]nodeFactory_SubstituteActionBuilder((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeSubstituteActionsBuilder])))");
    ourUsedERISet.add("method ([Classifier]IEditor).([InstanceMethodDeclaration]getEditorContext())");
    ourUsedERISet.add("static method ([Classifier]MarshallUtil).([StaticMethodDeclaration]getNodeOrModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]addRoot((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]getBlob((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]Class).([StaticMethodDeclaration]forName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class]))");
    ourUsedERISet.add("[Classifier]IAdaptiveProgressMonitor");
    ourUsedERISet.add("[Classifier]SModelUID");
    ourUsedERISet.add("constructor [Classifier]VisibleClassifiersScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))");
    ourUsedERISet.add("method ([Classifier]Generator).([InstanceMethodDeclaration]getOwnMappings())");
    ourUsedERISet.add("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getSourceModel())");
    ourUsedERISet.add("method ([Classifier]JobProcessor).([InstanceMethodDeclaration]start())");
    ourUsedERISet.add("method ([Classifier]SubtypingManager).([InstanceMethodDeclaration]collectImmediateSupertypes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]NodeList).([InstanceMethodDeclaration]size())");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getTemplatesModelDescriptor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [GeneratorDescriptor])))");
    ourUsedERISet.add("method ([Classifier]EditorCellKeyMap).([InstanceMethodDeclaration]setApplicableToEveryModel((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]StringBuffer");
    ourUsedERISet.add("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]createNewRootNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]TypeChecker).([StaticMethodDeclaration]getInstance())");
    ourUsedERISet.add("[Classifier]XMLOutputter");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]pushOldChildrenTemplateComponents((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [TemplateComponent]>])))");
    ourUsedERISet.add("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]getTemplatePath())");
    ourUsedERISet.add("static method ([Classifier]Period).([StaticMethodDeclaration]years((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getBooleanProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]HtmlStringUtil).([StaticMethodDeclaration]stringLiteral((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]nodeFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]popCurrentTemplateComponent())");
    ourUsedERISet.add("[Classifier]Node");
    ourUsedERISet.add("method ([Classifier]Graphics).([InstanceMethodDeclaration]drawImage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Image]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ImageObserver])))");
    ourUsedERISet.add("[ClassConcept]Resolver");
    ourUsedERISet.add("constructor [Classifier]FunctionParamsScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("constructor [Classifier]UnsupportedOperationException[ConstructorDeclaration] ()");
    ourUsedERISet.add("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]setManyToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]GERMANY : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("method ([Classifier]ByteArrayOutputStream).([InstanceMethodDeclaration]toByteArray())");
    ourUsedERISet.add("static method ([Classifier]System).([StaticMethodDeclaration]currentTimeMillis())");
    ourUsedERISet.add("static method ([Classifier]Inline_AnnotationLink).([StaticMethodDeclaration]getInline((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseMethodDeclaration])))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getChildren((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getContextCell())");
    ourUsedERISet.add("[Classifier]Classifier");
    ourUsedERISet.add("[Classifier]WritableRaster");
    ourUsedERISet.add("static field ([Classifier]Collections).([StaticFieldDeclaration]EMPTY_LIST : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List]))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]saveBuffer())");
    ourUsedERISet.add("[Classifier]ITransformation");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getParent())");
    ourUsedERISet.add("constructor [Classifier]HashMap[ConstructorDeclaration] ()");
    ourUsedERISet.add("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]setManyToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("static field ([Classifier]Pattern).([StaticFieldDeclaration]CASE_INSENSITIVE : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("[Classifier]TomcatManagerImpl");
    ourUsedERISet.add("method ([Classifier]Document).([InstanceMethodDeclaration]createElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Element]))");
    ourUsedERISet.add("enum const ([Classifier]HtmlStringUtil$EscapeKind).([EnumConstantDeclaration]ESCAPE_HTML)");
    ourUsedERISet.add("static field ([Classifier]IClassifiersSearchScope).([StaticFieldDeclaration]ANNOTATION : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("method ([Classifier]BehaviorManager).([InstanceMethodDeclaration]invoke((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Class]>]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))");
    ourUsedERISet.add("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]setMaxIterations((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]getConceptHierarchy((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]isInstanceOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]addChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]ByteArrayOutputStream");
    ourUsedERISet.add("[Classifier]SReference");
    ourUsedERISet.add("method ([Classifier]MPSProject).([InstanceMethodDeclaration]getProjectLanguages())");
    ourUsedERISet.add("method ([Classifier]RecordManager).([InstanceMethodDeclaration]toRecord((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]HashSet[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>]))");
    ourUsedERISet.add("method ([Classifier]Matcher).([InstanceMethodDeclaration]find())");
    ourUsedERISet.add("[Classifier]RemoteTomcatHandler");
    ourUsedERISet.add("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]setFrom((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]halfdays())");
    ourUsedERISet.add("constructor [Classifier]SimpleSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("[Classifier]AssociationEndMetaDataImpl");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("[Classifier]SNodeId");
    ourUsedERISet.add("method ([Classifier]Comparable).([InstanceMethodDeclaration]compareTo((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))");
    ourUsedERISet.add("static method ([Classifier]AsPattern_AnnotationLink).([StaticMethodDeclaration]getAsPattern((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept])))");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setLoggingLevel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_CODE_DIGIT : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getPrevSibling((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getGeneratorSessionContext() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [GenerationSessionContext]))");
    ourUsedERISet.add("constructor [Classifier]SecurityViolationException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]startsWith((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("method ([Classifier]AbstractEntityStoreAwareTestCase).([InstanceMethodDeclaration]tearDown())");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getString_VariableDeclaration_nameInClosureContext((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("static method ([Classifier]Queries).([StaticMethodDeclaration]propertyMacro_CellMenuPart_PropertyPostfixHints_generatedClass_name((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("method ([Classifier]NamedNodeMap).([InstanceMethodDeclaration]getLength() : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]pluralize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]addClosingParenthesis((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Expression]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("static method ([Classifier]SModelLanguageUtil).([StaticMethodDeclaration]getLinkTargetConceptForLinkOperation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeOperation])))");
    ourUsedERISet.add("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isSimpleBoolean((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))");
    ourUsedERISet.add("[Classifier]List");
    ourUsedERISet.add("method ([Classifier]INodeBuilder).([InstanceMethodDeclaration]getTargetNode())");
    ourUsedERISet.add("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodeDefaultSearchScopeProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeReferentSearchScopeProvider])))");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]getPath() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])) : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("static method ([Classifier]PresentationManager).([StaticMethodDeclaration]toString_1((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println())");
    ourUsedERISet.add("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]set((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class])))");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getAttributes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SecurityNavigatorImpl).([InstanceMethodDeclaration]setOnLoginAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Runnable])))");
    ourUsedERISet.add("method ([Classifier]Set).([InstanceMethodDeclaration]clear() : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]removeOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]createManyToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("static method ([Classifier]HtmlStringUtil).([StaticMethodDeclaration]html((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]SubnodesSearchScope).([InstanceMethodDeclaration]getNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <jetbrains.mps.baseLanguage.types.classifier [SNode]>])))");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]plus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period])))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]length() : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]showErrorMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]intersect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageActionsModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("method ([Classifier]InlineDateFormatter).([InstanceMethodDeclaration]createFormatter())");
    ourUsedERISet.add("method ([Classifier]RssLinkEntry).([InstanceMethodDeclaration]getHref())");
    ourUsedERISet.add("enum const ([Classifier]Cardinality).([EnumConstantDeclaration]_1)");
    ourUsedERISet.add("method ([Classifier]Generator).([InstanceMethodDeclaration]getGeneratorDescriptor())");
    ourUsedERISet.add("method ([Classifier]RequestProcessorContainer).([InstanceMethodDeclaration]setRequestProcessors((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [RequestProcessor]>])))");
    ourUsedERISet.add("[Classifier]SLinkOperations");
    ourUsedERISet.add("[Classifier]TestCase");
    ourUsedERISet.add("constructor [Classifier]VarSetDeclarationSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("method ([Classifier]EditorCellKeyMapAction).([InstanceMethodDeclaration]getSelectedNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("method ([Classifier]SModelUID).([InstanceMethodDeclaration]getStereotype())");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUsePortugueseStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static method ([Classifier]JOptionPane).([StaticMethodDeclaration]showConfirmDialog((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Component]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]LocalVariableDeclarationStatement).([InstanceMethodDeclaration]getLocalVariableDeclaration())");
    ourUsedERISet.add("[Classifier]IFeatureDescriptor$Type");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]isFirstScriptLink((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]INodeSubstituteAction");
    ourUsedERISet.add("constructor [Classifier]File[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]Thread");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setDrawBorder((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]insertNewPrevSiblingChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]isAssignableFrom((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]toArray((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))");
    ourUsedERISet.add("method ([Classifier]AbstractMaker).([InstanceMethodDeclaration]createTransformation((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITransformation, <any_, any_, any_>]))");
    ourUsedERISet.add("constructor [Classifier]InputStreamReader[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InputStream]))");
    ourUsedERISet.add("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]findCopiedOutputNodeForInputNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]Calendar).([StaticMethodDeclaration]getInstance() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Calendar]))");
    ourUsedERISet.add("method ([Classifier]Entity).([InstanceMethodDeclaration]getVersion())");
    ourUsedERISet.add("method ([Classifier]Set).([InstanceMethodDeclaration]size())");
    ourUsedERISet.add("method ([Classifier]AbstractCollection).([InstanceMethodDeclaration]addAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>])))");
    ourUsedERISet.add("constructor [Classifier]MappingRuleTemplateNodeSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))");
    ourUsedERISet.add("[Classifier]EditorContext");
    ourUsedERISet.add("method ([Classifier]IOperationContext).([InstanceMethodDeclaration]getScope())");
    ourUsedERISet.add("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getSessionField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]SimpleSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [SNode]>]))");
    ourUsedERISet.add("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseSwedishStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]EnumerationMemberDeclaration");
    ourUsedERISet.add("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]setCurrentWindowId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]RegexpOperations).([StaticMethodDeclaration]replace((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Pattern]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Replacer])))");
    ourUsedERISet.add("static method ([Classifier]PeriodTypeHackUtil).([StaticMethodDeclaration]isInstanceOfPeriod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]WikiManager).([InstanceMethodDeclaration]setHiglighters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [RegexpHighlighter]>])))");
    ourUsedERISet.add("[Classifier]Arrays");
    ourUsedERISet.add("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]toString())");
    ourUsedERISet.add("method ([Classifier]LinkDeclaration).([InstanceMethodDeclaration]getMetaClass())");
    ourUsedERISet.add("static method ([Classifier]EditorCellKeyMap).([StaticMethodDeclaration]isValidKeycode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]lastIndexOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]createOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]switchNodeMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]KOREAN : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getParent() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseNorwegianStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]Command");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]GERMAN : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getSize())");
    ourUsedERISet.add("method ([Classifier]DateTime).([InstanceMethodDeclaration]toLocalDate() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LocalDate]))");
    ourUsedERISet.add("method ([Classifier]Object).([InstanceMethodDeclaration]notifyAll() : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("constructor [Classifier]Annotator[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]))");
    ourUsedERISet.add("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getLongName())");
    ourUsedERISet.add("method ([Classifier]IFeatureDesign).([InstanceMethodDeclaration]getTargetType((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]CollectionUtil).([StaticMethodDeclaration]mapToString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]RequestUri).([InstanceMethodDeclaration]getTail())");
    ourUsedERISet.add("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]findPropertyDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]IOUtils).([StaticMethodDeclaration]copyLarge((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InputStream]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [OutputStream])))");
    ourUsedERISet.add("method ([Classifier]IFilter).([InstanceMethodDeclaration]accept((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))");
    ourUsedERISet.add("static method ([Classifier]Thread).([StaticMethodDeclaration]currentThread())");
    ourUsedERISet.add("static method ([Classifier]CreateFromUsageUtil).([StaticMethodDeclaration]getText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("method ([Classifier]TomcatManagerImpl).([InstanceMethodDeclaration]setTomcatPathProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TomcatPathProvider])))");
    ourUsedERISet.add("[Classifier]ImageWriter");
    ourUsedERISet.add("[Classifier]JComponent");
    ourUsedERISet.add("method ([Classifier]Class).([InstanceMethodDeclaration]getName())");
    ourUsedERISet.add("constructor [Classifier]CompositeSubstituteInfo[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ICellContext]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [ISubstituteInfoPart]]))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getCurrentTemplateName())");
    ourUsedERISet.add("[Classifier]PredefinedSymbolClassDeclaration");
    ourUsedERISet.add("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]clearIndex())");
    ourUsedERISet.add("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getLinkAttributes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]EditorManager).([InstanceMethodDeclaration]getCurrentAttributedPropertyCell())");
    ourUsedERISet.add("static field ([Classifier]IClassifiersSearchScope).([StaticFieldDeclaration]INSTANCE_FIELD : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("[Classifier]DevKit");
    ourUsedERISet.add("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]addRootTemplateAnnotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]Annotation_AnnotationLink).([StaticMethodDeclaration]setAnnotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Simple1]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Annotator])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("[Classifier]DestructorRef");
    ourUsedERISet.add("[Classifier]Calendar");
    ourUsedERISet.add("[Classifier]StoreSession");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]toString() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]ModelConstraintsUtil");
    ourUsedERISet.add("method ([Classifier]PrintStream).([InstanceMethodDeclaration]print((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("[Classifier]CellProviderWithRole");
    ourUsedERISet.add("[Classifier]Assert");
    ourUsedERISet.add("[Classifier]HtmlStringUtil");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getCurrentTemplateComponent())");
    ourUsedERISet.add("static field ([Classifier]LanguageDescriptor).([StaticFieldDeclaration]LANGUAGE_GEN_PATH : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]Cardinality).([InstanceMethodDeclaration]getValueAsString())");
    ourUsedERISet.add("static method ([Classifier]Boolean).([StaticMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]AbstractCellProvider).([InstanceMethodDeclaration]createEditorCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("[Classifier]AbstractTemplates");
    ourUsedERISet.add("[Classifier]ReferenceAntiquotation_AnnotationLink");
    ourUsedERISet.add("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]setUseRussianStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]Object).([InstanceMethodDeclaration]toString() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]Enum");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]allImportedModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]getUID())");
    ourUsedERISet.add("method ([Classifier]TransientEntity).([InstanceMethodDeclaration]isNew())");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setFontType((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setSuperType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Throwable).([InstanceMethodDeclaration]printStackTrace())");
    ourUsedERISet.add("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getCurrentWindowId())");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]substring((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]EditorContext).([InstanceMethodDeclaration]selectLater((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]ImageIO");
    ourUsedERISet.add("static method ([Classifier]Short).([StaticMethodDeclaration]parseShort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("constructor [Classifier]SequenceWithSupplier[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IValuesSupplier, <any_>]))");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]getFirst((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("constructor [Classifier]LightByteArrayOutputStream[ConstructorDeclaration] ()");
    ourUsedERISet.add("[Classifier]MethodInvokingJobDetailFactoryBean");
    ourUsedERISet.add("[Classifier]IZeroTransformation");
    ourUsedERISet.add("[Classifier]EditorCell_Component");
    ourUsedERISet.add("static method ([Classifier]Annotation2_AnnotationLink).([StaticMethodDeclaration]getAnnotation2((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Simple1])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Annotator2]))");
    ourUsedERISet.add("[Classifier]AbstractMap");
    ourUsedERISet.add("[Classifier]JarFileClassPathItem");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]addLinkAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))");
    ourUsedERISet.add("[Classifier]AbstractRule");
    ourUsedERISet.add("static field ([Classifier]GenConstants).([StaticFieldDeclaration]EVENT_NAME_PREFIX : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]ImageIO).([StaticMethodDeclaration]write((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RenderedImage]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [OutputStream])))");
    ourUsedERISet.add("static method ([Classifier]Inline_AnnotationLink).([StaticMethodDeclaration]setInline((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseMethodDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InlineAnnotation])))");
    ourUsedERISet.add("method ([Classifier]Vector).([InstanceMethodDeclaration]isEmpty() : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("enum const ([Classifier]InstantWhenType).([EnumConstantDeclaration]NOT_DNQ)");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]removeIgnoreThread())");
    ourUsedERISet.add("method ([Classifier]AbstractModule).([InstanceMethodDeclaration]getScope())");
    ourUsedERISet.add("[Classifier]ISubtypingRule_Runtime");
    ourUsedERISet.add("[Classifier]EntityFieldHandler");
    ourUsedERISet.add("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]deleteChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]ITransformation).([InstanceMethodDeclaration]getTemplates() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplates, <any_, any_, any_>]))");
    ourUsedERISet.add("method ([Classifier]StoreSession).([InstanceMethodDeclaration]newEntity((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getSModel() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]))");
    ourUsedERISet.add("method ([Classifier]RefNodeListHandler).([InstanceMethodDeclaration]getLinkDeclaration())");
    ourUsedERISet.add("static field ([Classifier]UrlConstants).([StaticFieldDeclaration]REST : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]EditorCell_Component).([StaticMethodDeclaration]createComponentCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JComponent]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Remark");
    ourUsedERISet.add("static method ([Classifier]ExpressionTextUtil).([StaticMethodDeclaration]getExpressionText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]TomcatHandler");
    ourUsedERISet.add("[Classifier]RecordManager");
    ourUsedERISet.add("static method ([Classifier]AssociationSemantics).([StaticMethodDeclaration]getToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]allAdaptersIncludingImported((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("[Classifier]Macros");
    ourUsedERISet.add("method ([Classifier]TransformerFactory).([InstanceMethodDeclaration]newTransformer() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Transformer]))");
    ourUsedERISet.add("method ([Classifier]ServletRequest).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Priority");
    ourUsedERISet.add("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]toString() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]Tag).([InstanceMethodDeclaration]getTagName() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]hashCode() : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("method ([Classifier]ITransformation).([InstanceMethodDeclaration]getContext() : (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any))");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]setBackupOnShutdown((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]XMLAssert");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]monthOfYear())");
    ourUsedERISet.add("constructor [Classifier]ParameterSpec[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))");
    ourUsedERISet.add("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]addListener((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSessionListener])))");
    ourUsedERISet.add("method ([Classifier]Map).([InstanceMethodDeclaration]put((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)) : (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any))");
    ourUsedERISet.add("method ([Classifier]ITransformation).([InstanceMethodDeclaration]appendChild((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setDrawBrackets((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]ActionContext).([InstanceMethodDeclaration]getScope())");
    ourUsedERISet.add("method ([Classifier]ServletFileUpload).([InstanceMethodDeclaration]parseRequest((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest])))");
    ourUsedERISet.add("method ([Classifier]Iterator).([InstanceMethodDeclaration]remove())");
    ourUsedERISet.add("method ([Classifier]Matcher).([InstanceMethodDeclaration]group((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]deleteNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]NodeList).([InstanceMethodDeclaration]elementAt((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("[Classifier]RegexpHighlighter");
    ourUsedERISet.add("[Classifier]LogFactory");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]addKeyMap((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellKeyMap])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]create_enclosingClassObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("[Classifier]AbstractRTransformHintSubstituteAction");
    ourUsedERISet.add("method ([Classifier]JobProcessor).([InstanceMethodDeclaration]waitUntilFinished())");
    ourUsedERISet.add("method ([Classifier]MailingServiceImpl).([InstanceMethodDeclaration]setTaskExecutor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TaskExecutor])))");
    ourUsedERISet.add("[Classifier]NodePresentationUtil");
    ourUsedERISet.add("method ([Classifier]Collection).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)) : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("constructor [Classifier]BufferedImage[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ColorModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [WritableRaster]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Hashtable]))");
    ourUsedERISet.add("static method ([Classifier]EditorCell_Collection).([StaticMethodDeclaration]createVertical((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]hasConceptProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]getRoleAttributeClass())");
    ourUsedERISet.add("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]templateFragment_ContextNodeQuery((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]JavaMailSenderImpl).([InstanceMethodDeclaration]setDefaultEncoding((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]StoreSession).([InstanceMethodDeclaration]find((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable])))");
    ourUsedERISet.add("[Classifier]EditorCell");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getParent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("constructor [Classifier]Date[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getId())");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]findConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("constructor [Classifier]SelectPathButton[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SelectionMode]))");
    ourUsedERISet.add("[Classifier]QueryParameter");
    ourUsedERISet.add("enum const ([Classifier]LinkMetaclass).([EnumConstantDeclaration]aggregation)");
    ourUsedERISet.add("method ([Classifier]MediaWikiProcessor).([InstanceMethodDeclaration]getLinkFor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Map$Entry");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]US : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]insertBefore((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildren())");
    ourUsedERISet.add("method ([Classifier]MPSModuleRepository).([InstanceMethodDeclaration]getAllModules())");
    ourUsedERISet.add("[Classifier]TreePath");
    ourUsedERISet.add("constructor [Classifier]TreePath[ConstructorDeclaration] ()");
    ourUsedERISet.add("constructor [Classifier]EditorCell_Error[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setTypeConvertManager((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TypeConvertManager])))");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]JAPANESE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("[Classifier]NodeList");
    ourUsedERISet.add("static method ([Classifier]Math).([StaticMethodDeclaration]max((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))");
    ourUsedERISet.add("enum const ([Classifier]SelectionMode).([EnumConstantDeclaration]DIRECTORIES)");
    ourUsedERISet.add("method ([Classifier]TextLine).([InstanceMethodDeclaration]setTextBackgroundColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))");
    ourUsedERISet.add("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]hasValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]TokenFactory");
    ourUsedERISet.add("static method ([Classifier]PeriodType).([StaticMethodDeclaration]minutes())");
    ourUsedERISet.add("[Classifier]PrimaryReferentMenuCellMenuPart");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]IClassPathItem");
    ourUsedERISet.add("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]getTransientObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]ServiceLocator).([StaticMethodDeclaration]getBean((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]DataIntegrityViolationException).([InstanceMethodDeclaration]relatesTo((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientEntity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]moveParenthesisToTheRight((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ParenthesizedExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]insertChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))");
    ourUsedERISet.add("static field ([Classifier]SolutionPath).([StaticFieldDeclaration]PATH : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]splitByCamels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]getBytes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))");
    ourUsedERISet.add("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]getTargets((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [SNode]>]))");
    ourUsedERISet.add("method ([Classifier]Cardinality).([InstanceMethodDeclaration]getName())");
    ourUsedERISet.add("static method ([Classifier]BehaviorManager).([StaticMethodDeclaration]getInstance())");
    ourUsedERISet.add("[Classifier]PersistentClassUtils");
    ourUsedERISet.add("enum const ([Classifier]HtmlStringUtil$EscapeKind).([EnumConstantDeclaration]SINGLE_LINE)");
    ourUsedERISet.add("static field ([Classifier]Root).([StaticFieldDeclaration]PATH : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("constructor [Classifier]State[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]Map).([InstanceMethodDeclaration]put((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))");
    ourUsedERISet.add("static method ([Classifier]NodePresentationUtil).([StaticMethodDeclaration]getRoleInParentOrConceptName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]PeriodType");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]getParentFile() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File]))");
    ourUsedERISet.add("method ([Classifier]Integer).([InstanceMethodDeclaration]intValue() : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("[Classifier]ClosuresUtil");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getTemplateStylesheetPath())");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]split((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]HashMap).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("[Classifier]ServletConstants");
    ourUsedERISet.add("[Classifier]TransientStoreSessionListener");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getSNodeId())");
    ourUsedERISet.add("static method ([Classifier]RuleEngineUtil).([StaticMethodDeclaration]processRulesAsync((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RuleEngine]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set])))");
    ourUsedERISet.add("static method ([Classifier]RegexpOperations).([StaticMethodDeclaration]split((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Pattern])))");
    ourUsedERISet.add("[Classifier]TextIndexOperations");
    ourUsedERISet.add("static method ([Classifier]TextIndexOperations).([StaticMethodDeclaration]search((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))");
    ourUsedERISet.add("method ([Classifier]EditorCell_Collection).([InstanceMethodDeclaration]setCanBeFolded((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getTransactionId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]JavaMailSender");
    ourUsedERISet.add("constructor [Classifier]Color[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("static method ([Classifier]Math).([StaticMethodDeclaration]min((jetbrains.mps.baseLanguage.types.double/jetbrains.mps.baseLanguage.types.double), (jetbrains.mps.baseLanguage.types.double/jetbrains.mps.baseLanguage.types.double)))");
    ourUsedERISet.add("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setApplicationName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static field ([Classifier]_ExtAllJsConstants).([StaticFieldDeclaration]USE_EXT_ALL_JS : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("method ([Classifier]AbstractAntiquotation).([InstanceMethodDeclaration]getExpression())");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]PropertyPatternVariableDeclaration");
    ourUsedERISet.add("method ([Classifier]AbstractCellListHandler).([InstanceMethodDeclaration]createSeparatorCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("method ([Classifier]EntityStore).([InstanceMethodDeclaration]getThreadSession())");
    ourUsedERISet.add("[ClassConcept]Short");
    ourUsedERISet.add("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseDanishStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static method ([Classifier]CursorFactory).([StaticMethodDeclaration]createCursor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil_new).([StaticMethodDeclaration]createFontStyleFieldReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("[Classifier]SModel");
    ourUsedERISet.add("[Classifier]IScope");
    ourUsedERISet.add("method ([Classifier]AbstractCellMenuComponent).([InstanceMethodDeclaration]createActions((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ICellContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]EditorCell_Basic).([InstanceMethodDeclaration]setSelectable((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("constructor [Classifier]ChainedIterable[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Iterable, <any_>]]))");
    ourUsedERISet.add("constructor [Classifier]EditorCellKeyMap[ConstructorDeclaration] ()");
    ourUsedERISet.add("static method ([Classifier]Period).([StaticMethodDeclaration]months((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setBooleanProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]Log");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_CODE_SPACE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]FRENCH : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]sendError((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]StoreTransaction).([InstanceMethodDeclaration]abort())");
    ourUsedERISet.add("[Classifier]Boolean");
    ourUsedERISet.add("method ([Classifier]ServletRequest).([InstanceMethodDeclaration]getInputStream())");
    ourUsedERISet.add("[Classifier]DefaultChildNodeSubstituteAction");
    ourUsedERISet.add("method ([Classifier]ITraversal).([InstanceMethodDeclaration]yieldValue((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))");
    ourUsedERISet.add("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]mediumTime())");
    ourUsedERISet.add("[Classifier]JabberServiceImpl");
    ourUsedERISet.add("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getRuntimeTypesModel())");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setLoggingConsoleHandlerOn((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]CompositeClassPathItem).([InstanceMethodDeclaration]getChildren())");
    ourUsedERISet.add("[Classifier]LinkedList");
    ourUsedERISet.add("static method ([Classifier]Boolean).([StaticMethodDeclaration]parseBoolean((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]MatchingUtil).([StaticMethodDeclaration]matchNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]remove((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("[Classifier]IChildBinder");
    ourUsedERISet.add("method ([Classifier]DocumentBuilder).([InstanceMethodDeclaration]parse((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Document]))");
    ourUsedERISet.add("method ([Classifier]Appendable).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))");
    ourUsedERISet.add("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]isFormField())");
    ourUsedERISet.add("[Classifier]Antiquotation_AnnotationLink");
    ourUsedERISet.add("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println() : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("constructor [Classifier]Element[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]getAbsolutePath())");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getList_ContextOwner_VariablesUsedInClosure((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Traverse((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITreeTraversal, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TraversalAxis])))");
    ourUsedERISet.add("static method ([Classifier]Webquery).([StaticMethodDeclaration]query((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [WQParameter]])))");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getGenuineLinkSourceCardinality((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration])))");
    ourUsedERISet.add("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodePropertyGetter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]MailingServiceImpl");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))");
    ourUsedERISet.add("method ([Classifier]ISearchScope).([InstanceMethodDeclaration]getNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <jetbrains.mps.baseLanguage.types.classifier [SNode]>])))");
    ourUsedERISet.add("constructor [Classifier]IllegalAccessError[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static field ([Classifier]IClassifiersSearchScope).([StaticFieldDeclaration]STATIC_FIELD : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("method ([Classifier]ServletRequestWrapper).([InstanceMethodDeclaration]getParameterMap())");
    ourUsedERISet.add("method ([Classifier]FileItem).([InstanceMethodDeclaration]getString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]StringBuilder");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]find_Closure_generatedClosureAdapter_constructor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]findNodeBuilderForSource((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeBuilder]))");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]TypeConvertManager");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]getBytes())");
    ourUsedERISet.add("[Classifier]CronTriggerBean");
    ourUsedERISet.add("method ([Classifier]DateTimeFormatter).([InstanceMethodDeclaration]getPrinter())");
    ourUsedERISet.add("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]moveParenthesisToTheLeft((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ParenthesizedExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("method ([Classifier]ChooseRefactoringInputDataDialog).([InstanceMethodDeclaration]getResult())");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getConceptFqName())");
    ourUsedERISet.add("static method ([Classifier]JavaModelUtil_new).([StaticMethodDeclaration]findClassifier((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class])))");
    ourUsedERISet.add("[Classifier]StringBuilderSpinAllocator");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleStructureModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("static method ([Classifier]_EditorUtil).([StaticMethodDeclaration]grayIfNotSelectable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static field ([Classifier]EditorCell).([StaticFieldDeclaration]ROLE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))");
    ourUsedERISet.add("[Classifier]BaseConcept");
    ourUsedERISet.add("[Classifier]ITraversal");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]setLinkAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))");
    ourUsedERISet.add("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseSpanishStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]set((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]BaseParameterException).([InstanceMethodDeclaration]getValueAsString())");
    ourUsedERISet.add("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]getMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Class]])))");
    ourUsedERISet.add("[Classifier]AttributeConcept");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]endsWith((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]createUniqueName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("constructor [Classifier]StateMachine[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [State]))");
    ourUsedERISet.add("constructor [Classifier]ClassConcept[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]addChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))");
    ourUsedERISet.add("static method ([Classifier]ModelActions).([StaticMethodDeclaration]createRightTransformHintSubstituteActions((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("method ([Classifier]CharSequence).([InstanceMethodDeclaration]charAt((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)) : (jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char))");
    ourUsedERISet.add("method ([Classifier]ColorModel).([InstanceMethodDeclaration]createCompatibleWritableRaster((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("[Classifier]LogOutputHandler");
    ourUsedERISet.add("[Classifier]BaseMigrationScript");
    ourUsedERISet.add("[Classifier]DateTimeFieldType");
    ourUsedERISet.add("[Classifier]INodeReferentSearchScopeProvider");
    ourUsedERISet.add("static field ([Classifier]Primitives).([StaticFieldDeclaration]INTEGER_TYPE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]SReference).([InstanceMethodDeclaration]getRole())");
    ourUsedERISet.add("constructor [Classifier]Date[ConstructorDeclaration] ()");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]addAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>])) : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("[Classifier]Comparable");
    ourUsedERISet.add("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]findConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]createPersistentEntityIterableWrapper((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable])))");
    ourUsedERISet.add("[Classifier]TemplateFunctionMethodName");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]queueUnindexedDocuments())");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]coerce((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IMatchingPattern]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]AbstractInstant");
    ourUsedERISet.add("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]getTargets((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]JAPAN : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]roundCeiling((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))");
    ourUsedERISet.add("[Classifier]DurationFieldType");
    ourUsedERISet.add("constructor [Classifier]LocalVariablesScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("[Classifier]ScriptNameUtil");
    ourUsedERISet.add("method ([Classifier]Class).([InstanceMethodDeclaration]isEnum())");
    ourUsedERISet.add("[Classifier]StaticFieldReference");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]getBackupPath())");
    ourUsedERISet.add("method ([Classifier]Map).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("[Classifier]DotDateTimeOperation");
    ourUsedERISet.add("static method ([Classifier]StringBuilderSpinAllocator).([StaticMethodDeclaration]dispose((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [StringBuilder])))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]matches((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]Class).([StaticMethodDeclaration]forName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertFalse((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]NodeMacro_AnnotationLink");
    ourUsedERISet.add("[Classifier]InlineDateFormatter");
    ourUsedERISet.add("method ([Classifier]Cardinality).([InstanceMethodDeclaration]getValueAsString() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]years())");
    ourUsedERISet.add("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]setAbortSessionsOnClose((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]IMapper");
    ourUsedERISet.add("static field ([Classifier]GenConstants).([StaticFieldDeclaration]EVENT_SOURCE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]LinkDeclaration).([InstanceMethodDeclaration]setMetaClass((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkMetaclass])))");
    ourUsedERISet.add("static field ([Classifier]JOptionPane).([StaticFieldDeclaration]YES_OPTION : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]findConceptInstances((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("method ([Classifier]ITransformation).([InstanceMethodDeclaration]addContent((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IContentClosure, <any_, any_, any_>])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]clearOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]TransientEntityStore");
    ourUsedERISet.add("[Classifier]PatternAddingUtil");
    ourUsedERISet.add("method ([Classifier]HttpSession).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]getDirectSuperConcepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]NodeList).([InstanceMethodDeclaration]item((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))");
    ourUsedERISet.add("[Classifier]Integer");
    ourUsedERISet.add("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]setOneToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))");
    ourUsedERISet.add("static field ([Classifier]SolutionDescriptor).([StaticFieldDeclaration]GENERATOR_OUTPUT_PATH : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getTransactionId())");
    ourUsedERISet.add("method ([Classifier]GenericServlet).([InstanceMethodDeclaration]init((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ServletConfig])))");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]isDirectory() : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]switchTemplateFragment((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]SNode");
    ourUsedERISet.add("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]getTemplateVariables())");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]FRANCE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]getChildren() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeList]))");
    ourUsedERISet.add("method ([Classifier]EditorManager).([InstanceMethodDeclaration]getCurrentAttributedLinkCell())");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]instantiateConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("constructor [Classifier]SNode[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]increaseIndent())");
    ourUsedERISet.add("[Classifier]FileClassPathItem");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getIndexInParent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]StringWriter).([InstanceMethodDeclaration]getBuffer())");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]take((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))");
    ourUsedERISet.add("constructor [Classifier]JobProcessor[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildRoles())");
    ourUsedERISet.add("[Classifier]TextLine");
    ourUsedERISet.add("method ([Classifier]EditorManager).([InstanceMethodDeclaration]createRoleAttributeCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]substring((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]Integer).([StaticMethodDeclaration]parseInt((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("[Classifier]Transformer");
    ourUsedERISet.add("[Classifier]AbstractInstantWhenImpl");
    ourUsedERISet.add("constructor [Classifier]SimpleSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List]))");
    ourUsedERISet.add("method ([Classifier]AbstractInstantWhenImpl).([InstanceMethodDeclaration]thereAreChangesExcepting((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]])))");
    ourUsedERISet.add("static field ([Classifier]ClosuresMappingId).([StaticFieldDeclaration]CLOSURE__ADAPTER_CLASS : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getOperationContext())");
    ourUsedERISet.add("static method ([Classifier]BaseConcept).([StaticMethodDeclaration]newInstance((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))");
    ourUsedERISet.add("[Classifier]WorkingMemory");
    ourUsedERISet.add("method ([Classifier]IMatchingPattern).([InstanceMethodDeclaration]match((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setLayoutConstraint((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Condition).([InstanceMethodDeclaration]met((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))");
    ourUsedERISet.add("method ([Classifier]CompareType).([InstanceMethodDeclaration]getValue())");
    ourUsedERISet.add("constructor [Classifier]StaticMethodCall_StaticMethodScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ClassConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [StaticMethodCall]))");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]getStereotype())");
    ourUsedERISet.add("method ([Classifier]Macros).([InstanceMethodDeclaration]expandPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File])))");
    ourUsedERISet.add("method ([Classifier]LuceneTextIndexManager).([InstanceMethodDeclaration]close())");
    ourUsedERISet.add("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getMethod())");
    ourUsedERISet.add("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getActionUrl((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]isEmpty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("[Classifier]FindOperations");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_CODE_LETTER_OR_DIGIT : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("constructor [Classifier]NamedNodeMapIterableAdapter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NamedNodeMap]))");
    ourUsedERISet.add("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setReadOnly((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static method ([Classifier]JavaNameUtil).([StaticMethodDeclaration]fqClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]PropertySupport).([StaticMethodDeclaration]isString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PrimitiveDataTypeDeclaration])))");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_CODE_CHAR : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]TBuffer).([InstanceMethodDeclaration]getText())");
    ourUsedERISet.add("[Classifier]Tag");
    ourUsedERISet.add("[Classifier]ClassLoaderManager");
    ourUsedERISet.add("method ([Classifier]EditorCell_Image).([InstanceMethodDeclaration]setDescent((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("[Classifier]SearchScopeStatus");
    ourUsedERISet.add("static field ([Classifier]IClassifiersSearchScope).([StaticFieldDeclaration]STATIC_MEMBER : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]insertNextSiblingChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getNode() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("[Classifier]ICellContext");
    ourUsedERISet.add("method ([Classifier]NodeList).([InstanceMethodDeclaration]getLength() : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("[Classifier]MimeMessageHelper");
    ourUsedERISet.add("static method ([Classifier]ReferenceAntiquotation_AnnotationLink).([StaticMethodDeclaration]getReferenceAntiquotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setLockTimeout((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]getUserObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]StoreSession).([InstanceMethodDeclaration]startsWith((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]RecordManager).([InstanceMethodDeclaration]toIdString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("enum const ([Classifier]SelectionMode).([EnumConstantDeclaration]FILES)");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]replaceChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]MailingServiceImpl).([InstanceMethodDeclaration]setTemplateMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SimpleMailMessage])))");
    ourUsedERISet.add("constructor [Classifier]LinkedList[ConstructorDeclaration] ()");
    ourUsedERISet.add("static field ([Classifier]GenConstants).([StaticFieldDeclaration]CHEKBOX_NAME_SUFFIX : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]seconds())");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]equalsIgnoreCase((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]JavaMailSenderImpl");
    ourUsedERISet.add("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]referenceMacro_GetReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]MethodInvokingJobDetailFactoryBean).([InstanceMethodDeclaration]setConcurrent((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]StringWriter).([InstanceMethodDeclaration]getBuffer() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [StringBuffer]))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_ClosureParameterReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("[Classifier]CharSequence");
    ourUsedERISet.add("[Classifier]ChooseRefactoringInputDataDialog");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]distinct((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]Object).([InstanceMethodDeclaration]clone() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))");
    ourUsedERISet.add("[Classifier]Byte");
    ourUsedERISet.add("method ([Classifier]Entity).([InstanceMethodDeclaration]getLinks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [StringBuilder]))");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createComparableEquation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static field ([Classifier]IClassifiersSearchScope).([StaticFieldDeclaration]STATIC_METHOD : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isSimpleInteger((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))");
    ourUsedERISet.add("constructor [Classifier]FreemarkerResponse[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]PersistentClassUtils).([StaticMethodDeclaration]isPersistentClassOrEnumExpr((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleScriptsModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]insertPrevSiblingChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getActionUrl((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [QueryParameter]])))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]appendNewLine())");
    ourUsedERISet.add("static method ([Classifier]ClosuresUtil).([StaticMethodDeclaration]isVariableUsedInClosure((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [VariableDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]findLinkDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]CompareType).([StaticMethodDeclaration]getConstants())");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]getAttributes() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NamedNodeMap]))");
    ourUsedERISet.add("[Classifier]Pattern");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period])))");
    ourUsedERISet.add("[Classifier]AsPattern");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setBracketsColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))");
    ourUsedERISet.add("static method ([Classifier]Pattern).([StaticMethodDeclaration]compile((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Axis((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]ActionContext");
    ourUsedERISet.add("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setDefaultActionNames((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [String]>])))");
    ourUsedERISet.add("[Classifier]HyperlinkUtil");
    ourUsedERISet.add("constructor [Classifier]StaticMethodCall_StaticMethodScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ClassConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LocalStaticMethodCall]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]setReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]InputStreamReader).([InstanceMethodDeclaration]read())");
    ourUsedERISet.add("method ([Classifier]InputStream).([InstanceMethodDeclaration]reset())");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]removeChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("[Classifier]SolutionDescriptor");
    ourUsedERISet.add("[Classifier]LinkDeclaration");
    ourUsedERISet.add("static method ([Classifier]GlobalScope).([StaticMethodDeclaration]getInstance())");
    ourUsedERISet.add("[Classifier]SConceptOperations");
    ourUsedERISet.add("[Classifier]EntityStore");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getDescendants((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]NotNull");
    ourUsedERISet.add("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setHistory((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]isDirectory())");
    ourUsedERISet.add("method ([Classifier]DevKit).([InstanceMethodDeclaration]getName())");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getCanonicalPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]EntityId).([InstanceMethodDeclaration]toString())");
    ourUsedERISet.add("[Classifier]TextIndexManager");
    ourUsedERISet.add("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setHistoryIgnoredFields((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>])))");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]addEffect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]nodeFactory_NodeSetupFunction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeFactory])))");
    ourUsedERISet.add("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]checkTemplate((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]EditorManager).([InstanceMethodDeclaration]getCurrentAttributedNodeCell())");
    ourUsedERISet.add("[Classifier]Map");
    ourUsedERISet.add("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]longTime())");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]startsWith((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]AssociationMetaDataImpl");
    ourUsedERISet.add("static field ([Classifier]Long).([StaticFieldDeclaration]MAX_VALUE : (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long))");
    ourUsedERISet.add("constructor [Classifier]IllegalStateException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]Annotation2_AnnotationLink).([StaticMethodDeclaration]setAnnotation2((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Simple1]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Annotator2])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("[Classifier]ListPattern");
    ourUsedERISet.add("[Classifier]IStyle");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]actionMapActionClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellActionMapItem])))");
    ourUsedERISet.add("method ([Classifier]CompareType).([InstanceMethodDeclaration]getValueAsString())");
    ourUsedERISet.add("[Classifier]DocumentBuilder");
    ourUsedERISet.add("method ([Classifier]INodeBuilder).([InstanceMethodDeclaration]findSubSourceNodeForParentMapping((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]Stack[ConstructorDeclaration] ()");
    ourUsedERISet.add("[ClassConcept]AbstractStringBuilder");
    ourUsedERISet.add("method ([Classifier]ITemplates).([InstanceMethodDeclaration]selectorByName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateSelector, <any_, any_, any_>]))");
    ourUsedERISet.add("method ([Classifier]IOperationContext).([InstanceMethodDeclaration]getScope() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))");
    ourUsedERISet.add("static method ([Classifier]Severity).([StaticMethodDeclaration]getConstants())");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))");
    ourUsedERISet.add("constructor [Classifier]DateTimeFormatter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimePrinter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeParser]))");
    ourUsedERISet.add("method ([Classifier]RecordManager).([InstanceMethodDeclaration]isRecordClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]CssReferentUtil");
    ourUsedERISet.add("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getSModel())");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getLanguageNamesToAddToModelEngagedOnGenerationLanguages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]less((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period])))");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]clockhourOfHalfday())");
    ourUsedERISet.add("constructor [Classifier]NewExpression_ClassConstructorScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NewExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))");
    ourUsedERISet.add("method ([Classifier]Transformer).([InstanceMethodDeclaration]transform((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Source]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Result])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getContainingRoot((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]Classifier).([InstanceMethodDeclaration]getMethods())");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCleanerlookAheadCacheSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("[Classifier]EntityMetaDataImpl");
    ourUsedERISet.add("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseItalianStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setAllowsEmptyTarget((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]Language$LanguageAspectStatus");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getNamePrefixesForNewModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("static field ([Classifier]RegexpHighlighter).([StaticFieldDeclaration]COMMENT : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color]))");
    ourUsedERISet.add("[Classifier]DatabaseConfiguration");
    ourUsedERISet.add("static field ([Classifier]EditorCell).([StaticFieldDeclaration]ATTRACTS_FOCUS : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))");
    ourUsedERISet.add("method ([Classifier]SReference).([InstanceMethodDeclaration]getTargetNode())");
    ourUsedERISet.add("static method ([Classifier]Base64).([StaticMethodDeclaration]decodeBase64((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_])))");
    ourUsedERISet.add("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]createModelAndImportedModelsScope((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static method ([Classifier]TextIndexOperations).([StaticMethodDeclaration]search((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageStructureModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("[Classifier]EditorCell_Label");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getDebugText())");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]isFile())");
    ourUsedERISet.add("constructor [Classifier]HashMap[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.float/jetbrains.mps.baseLanguage.types.float))");
    ourUsedERISet.add("[Classifier]RegexpDeclaration");
    ourUsedERISet.add("method ([Classifier]ImageReaderWriterSpi).([InstanceMethodDeclaration]getFormatNames())");
    ourUsedERISet.add("[Classifier]Language");
    ourUsedERISet.add("method ([Classifier]FileClassPathItem).([InstanceMethodDeclaration]getClassPath())");
    ourUsedERISet.add("static method ([Classifier]EditorNavigationUtil).([StaticMethodDeclaration]navigateTo((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]mediumDate())");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getList_ContextOwner_ifMethod_ParmsUsedInClosure((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("method ([Classifier]Solution).([InstanceMethodDeclaration]getModuleUID())");
    ourUsedERISet.add("[Classifier]IModule");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]sort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparator, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]getPropertyDeclarationsExcludingOverridden((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration])))");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]whenConcrete((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Runnable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getConceptDeclarationAdapter())");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]instantiateConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))");
    ourUsedERISet.add("method ([Classifier]RequestUri).([InstanceMethodDeclaration]getActionName())");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]toConstantName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)) : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("static method ([Classifier]Collections).([StaticMethodDeclaration]emptyMap())");
    ourUsedERISet.add("[Classifier]ParenthesisUtil");
    ourUsedERISet.add("constructor [Classifier]CellAction_Empty[ConstructorDeclaration] ()");
    ourUsedERISet.add("static field ([Classifier]GenConstants).([StaticFieldDeclaration]LAYOUT_NAME : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]SModelStereotype");
    ourUsedERISet.add("[Classifier]Replacer");
    ourUsedERISet.add("constructor [Classifier]CellLayout_Horizontal[ConstructorDeclaration] ()");
    ourUsedERISet.add("[Classifier]NamedEventParameterReferenceDeclaration");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]cast((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]SModelLanguageUtil");
    ourUsedERISet.add("[Classifier]ModelMetaDataImpl");
    ourUsedERISet.add("method ([Classifier]Element).([InstanceMethodDeclaration]setAttributeNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Attr])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Attr]))");
    ourUsedERISet.add("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]sendError((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setNoTargetText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]IValuesSupplier");
    ourUsedERISet.add("constructor [Classifier]DOMSource[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))");
    ourUsedERISet.add("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setRequiredProperties((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>])))");
    ourUsedERISet.add("[Classifier]StateMachine");
    ourUsedERISet.add("method ([Classifier]NamedNodeMap).([InstanceMethodDeclaration]setNamedItem((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))");
    ourUsedERISet.add("[Classifier]ChildSubstituteActionsHelper");
    ourUsedERISet.add("method ([Classifier]LocalTomcatHandler).([InstanceMethodDeclaration]setTomcatManager((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TomcatManager])))");
    ourUsedERISet.add("[Classifier]File");
    ourUsedERISet.add("[Classifier]AbstractCellMenuPart_ReplaceChild_Item");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getNodeOperation_ConceptList_concepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeOperation])))");
    ourUsedERISet.add("[Classifier]When");
    ourUsedERISet.add("static method ([Classifier]Byte).([StaticMethodDeclaration]parseByte((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]Macros).([StaticMethodDeclaration]languageDescriptor())");
    ourUsedERISet.add("[Classifier]InferenceRule_Runtime");
    ourUsedERISet.add("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]getString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]ShowOperations).([StaticMethodDeclaration]showNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [SNode]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ScriptContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SNodePointer).([InstanceMethodDeclaration]getNode())");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]yearOfCentury())");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRedirectResponseAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]TraversalAxis");
    ourUsedERISet.add("[Classifier]VariableNameUtil");
    ourUsedERISet.add("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]checkOperationWRTPriority((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]MpsTomcatPathProvider");
    ourUsedERISet.add("method ([Classifier]IChildNodeSetter).([InstanceMethodDeclaration]execute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]getRootsIncludingImported((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Configuration");
    ourUsedERISet.add("[Classifier]AbstractCellMenuPart_ReplaceChild_Group");
    ourUsedERISet.add("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char)))");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]isNull((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageHelginsTypesystemModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("constructor [Classifier]IndexOutOfBoundsException[ConstructorDeclaration] ()");
    ourUsedERISet.add("[Classifier]AsPattern_AnnotationLink");
    ourUsedERISet.add("method ([Classifier]TextIndexMetaDataImpl).([InstanceMethodDeclaration]addEntityMetaData((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexEntityMetaData])))");
    ourUsedERISet.add("static method ([Classifier]DocumentBuilderFactory).([StaticMethodDeclaration]newInstance() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DocumentBuilderFactory]))");
    ourUsedERISet.add("method ([Classifier]Class).([InstanceMethodDeclaration]newInstance())");
    ourUsedERISet.add("method ([Classifier]BaseMigrationScript).([InstanceMethodDeclaration]addRefactoring((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IRefactoring])))");
    ourUsedERISet.add("static method ([Classifier]RegexpProcessor).([StaticMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Regexp])))");
    ourUsedERISet.add("constructor [Classifier]FileOutputStream[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getModel() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]))");
    ourUsedERISet.add("[Classifier]MatchingUtil");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]round((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]CHINA : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]setModelMetaData((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ModelMetaData])))");
    ourUsedERISet.add("[Classifier]TemplateComponent");
    ourUsedERISet.add("[Classifier]EnumerationDataTypeDeclaration");
    ourUsedERISet.add("[ClassConcept]Boolean");
    ourUsedERISet.add("[Classifier]IfStatement");
    ourUsedERISet.add("method ([Classifier]BaseMethodDeclaration).([InstanceMethodDeclaration]getBody())");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleEditorModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("static method ([Classifier]CellActionId).([StaticMethodDeclaration]getConstants())");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]size() : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("method ([Classifier]Language).([InstanceMethodDeclaration]getConstraintsModelDescriptor())");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getChildren((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Object).([InstanceMethodDeclaration]getClass())");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]TextBlock).([InstanceMethodDeclaration]getSurroundPattern())");
    ourUsedERISet.add("[Classifier]BigDecimal");
    ourUsedERISet.add("static method ([Classifier]Integer).([StaticMethodDeclaration]parseInt((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]Element).([InstanceMethodDeclaration]getText())");
    ourUsedERISet.add("[Classifier]RegexpOperations");
    ourUsedERISet.add("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setUniqueProperties((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>])))");
    ourUsedERISet.add("constructor [Classifier]Period[ConstructorDeclaration] ()");
    ourUsedERISet.add("[Classifier]PatternVariableDeclaration");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getHeartBeatResponseAction())");
    ourUsedERISet.add("[Classifier]TransformerFactory");
    ourUsedERISet.add("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setAssociationMetaData((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AssociationMetaData])))");
    ourUsedERISet.add("static method ([Classifier]ImageIO).([StaticMethodDeclaration]getImageWritersByMIMEType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCleanerLockTimeout((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]where((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IPredicate, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]setTemplateStylesheetPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]ScriptContext).([InstanceMethodDeclaration]getActionContext())");
    ourUsedERISet.add("[Classifier]DefaultMatchingPattern");
    ourUsedERISet.add("[Classifier]SNodeOperations");
    ourUsedERISet.add("[Classifier]CopyUtil");
    ourUsedERISet.add("[Classifier]AbstractCellMenuPart_PropertyPostfixHints");
    ourUsedERISet.add("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]switchPropertyMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("method ([Classifier]LocalTomcatHandler).([InstanceMethodDeclaration]setPort((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]showErrorMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]WikiManager");
    ourUsedERISet.add("[Classifier]AbstractEntityStoreAwareTestCase");
    ourUsedERISet.add("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]clearOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createNewRuntimeTypesVariable((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_MODIFIERS_ALT_SHIFT : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]Collections).([StaticMethodDeclaration]enumeration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]getNodeById((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]ClassifierAndSuperClassifiersScope");
    ourUsedERISet.add("static method ([Classifier]EditorCellTags).([StaticMethodDeclaration]getClosingText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellModel])))");
    ourUsedERISet.add("method ([Classifier]ComparisonRule_Runtime).([InstanceMethodDeclaration]getApplicableConceptFQName1())");
    ourUsedERISet.add("[Classifier]SupertypingRule");
    ourUsedERISet.add("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]hours())");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]shortNameFromLongName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleDocumentationModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("[Classifier]ITreeTraversal");
    ourUsedERISet.add("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodeReferentSetEventHandler((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertTrue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createLessThanInequationStrong((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]nodeFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))");
    ourUsedERISet.add("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]findOutputNodeByInputNodeAndMappingName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]AbstractSubtypingRule_Runtime");
    ourUsedERISet.add("method ([Classifier]TypeConvertManager).([InstanceMethodDeclaration]setTypeConverters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [TypeConverter]>])))");
    ourUsedERISet.add("[Classifier]PredefinedFormats");
    ourUsedERISet.add("static method ([Classifier]NodePresentationUtil).([StaticMethodDeclaration]getAliasOrConceptName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]putTransientObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]toValidCamelIdentifier((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]minus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period])))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]setWindowId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]AssociationSemantics).([StaticMethodDeclaration]getToManySize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]HashSet[ConstructorDeclaration] ()");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCompressorLockTimeout((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]render((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextBuilder]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]Language).([InstanceMethodDeclaration]getEditorModelDescriptor())");
    ourUsedERISet.add("enum const ([Classifier]HtmlStringUtil$EscapeKind).([EnumConstantDeclaration]DOUBLE_TO_SINGLE_QUOTES)");
    ourUsedERISet.add("method ([Classifier]RegexpHighlighter).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Pattern]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))");
    ourUsedERISet.add("[Classifier]InputStreamReader");
    ourUsedERISet.add("method ([Classifier]PopulateParameters).([InstanceMethodDeclaration]hasParameters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SReference).([InstanceMethodDeclaration]getTargetNodeId())");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]getEnum((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]setTextInput((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]CellMenuUtil).([StaticMethodDeclaration]getEditedAggregationLink((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellMenuPart_Abstract])))");
    ourUsedERISet.add("static method ([Classifier]MarshallUtil).([StaticMethodDeclaration]getModelUID((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]toList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("[Classifier]CompositeClassPathItem");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationHasParm_Root((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getModel())");
    ourUsedERISet.add("[Classifier]ConceptPropertyDeclaration");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getNode())");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setIntegerProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getInputStream())");
    ourUsedERISet.add("static field ([Classifier]HttpServletResponse).([StaticFieldDeclaration]SC_INTERNAL_SERVER_ERROR : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])) : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("method ([Classifier]WikiManager).([InstanceMethodDeclaration]process((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static field ([Classifier]Pattern).([StaticFieldDeclaration]DOTALL : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]removeChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getIntegerProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]MethodInvoker).([InstanceMethodDeclaration]setTargetMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]getAggregationLinkDeclarationsExcludingOverridden((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration])))");
    ourUsedERISet.add("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]setPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]setText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]IOperationContext).([InstanceMethodDeclaration]getProject())");
    ourUsedERISet.add("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setCascadeDelete((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static field ([Classifier]IClassifiersSearchScope).([StaticFieldDeclaration]CLASSIFFIER : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("constructor [Classifier]ClassifierAndSuperClassifiersScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("method ([Classifier]Object).([InstanceMethodDeclaration]getClass() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>]))");
    ourUsedERISet.add("enum const ([Classifier]TraversalAxis).([EnumConstantDeclaration]DESCENDANTS)");
    ourUsedERISet.add("[Classifier]TreeTraversalFactory");
    ourUsedERISet.add("constructor [Classifier]Exception[ConstructorDeclaration] ()");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertNull((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("constructor [Classifier]XmlTemplateCallHandler[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextBuilder]))");
    ourUsedERISet.add("static method ([Classifier]FindOperations).([StaticMethodDeclaration]findConceptInstances((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ScriptContext])))");
    ourUsedERISet.add("method ([Classifier]SReference).([InstanceMethodDeclaration]setTargetModelUID((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelUID])))");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]isFile() : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]replaceAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]createNewNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]MPSProject).([InstanceMethodDeclaration]getComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]iterator())");
    ourUsedERISet.add("[Classifier]Resolver");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]addAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationGetParm_Concept_conceptFqName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]OnScheduleWhen");
    ourUsedERISet.add("[Classifier]HttpSession");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]forEach((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IForEach, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getModelUID())");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]charAt((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)) : (jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char))");
    ourUsedERISet.add("[Classifier]Simple1");
    ourUsedERISet.add("method ([Classifier]TomcatManagerImpl).([InstanceMethodDeclaration]setTomcatOutputHandlers((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [TomcatOutputHandler]>])))");
    ourUsedERISet.add("[Classifier]BufferedImage");
    ourUsedERISet.add("constructor [Classifier]PopulateParameters[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest]))");
    ourUsedERISet.add("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]getLinkDeclarationsExcludingOverridden((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration])))");
    ourUsedERISet.add("method ([Classifier]AbstractDateTime).([InstanceMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getName())");
    ourUsedERISet.add("constructor [Classifier]BasicCellContext[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("[Classifier]SModelUtil");
    ourUsedERISet.add("method ([Classifier]TreePath).([InstanceMethodDeclaration]registerFeature((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IFeatureDescriptor, <any_>])))");
    ourUsedERISet.add("static method ([Classifier]ListOperations).([StaticMethodDeclaration]indexOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]setHashed((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]getBytes() : (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_]))");
    ourUsedERISet.add("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]createModelAndImportedModelsScope((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getSelectedNode())");
    ourUsedERISet.add("[Classifier]MailingService");
    ourUsedERISet.add("[Classifier]ControllerOperations");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]substring((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]set((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable])))");
    ourUsedERISet.add("method ([Classifier]EntityMetaData).([InstanceMethodDeclaration]getInitializer())");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getOldChildTemplateComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]ServletFileUpload");
    ourUsedERISet.add("static method ([Classifier]AttributesRolesUtil).([StaticMethodDeclaration]getPropertyNameFromPropertyAttributeRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]XmlTemplateCallHandler).([InstanceMethodDeclaration]putTemplateArgument((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]JavaModelUtil_new).([StaticMethodDeclaration]createType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))");
    ourUsedERISet.add("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]createUniqueName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]BaseConcept).([StaticMethodDeclaration]newInstance((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static method ([Classifier]HUtil).([StaticMethodDeclaration]copyIfNecessary((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))");
    ourUsedERISet.add("[Classifier]HostToBaseUrlConfiguration");
    ourUsedERISet.add("[Classifier]RuleEngineUtil");
    ourUsedERISet.add("method ([Classifier]ServletRequest).([InstanceMethodDeclaration]getParameter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]ISubstituteInfoPart");
    ourUsedERISet.add("[Classifier]PropertyDeclaration");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getNextSibling((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]BufferedImage).([InstanceMethodDeclaration]createGraphics())");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]resumeRendering())");
    ourUsedERISet.add("[Classifier]InferenceRule");
    ourUsedERISet.add("[Classifier]LinkedHashSet");
    ourUsedERISet.add("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]intermediateCommit())");
    ourUsedERISet.add("[Classifier]INodeFactories");
    ourUsedERISet.add("method ([Classifier]SModelUID).([InstanceMethodDeclaration]getNamespace())");
    ourUsedERISet.add("enum const ([Classifier]SelectionMode).([EnumConstantDeclaration]FILES_AND_DIRECTORIES)");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]givetype((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]OffsetDateTimePrinter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [DurationFieldType]]))");
    ourUsedERISet.add("method ([Classifier]MPSProject).([InstanceMethodDeclaration]getProjectSolutions())");
    ourUsedERISet.add("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static field ([Classifier]SModelStereotype).([StaticFieldDeclaration]values : (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]]))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getCurrentLayoutName())");
    ourUsedERISet.add("static method ([Classifier]TransformerFactory).([StaticMethodDeclaration]newInstance() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransformerFactory]))");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]CANADA : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("[Classifier]Result");
    ourUsedERISet.add("static method ([Classifier]Pattern).([StaticMethodDeclaration]compile((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]ITransformation).([InstanceMethodDeclaration]applyTemplates((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <any_>])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <any_>]))");
    ourUsedERISet.add("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setClearOnDelete((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getSubtypingManager())");
    ourUsedERISet.add("[Classifier]IChildNodeSetter");
    ourUsedERISet.add("[Classifier]Float");
    ourUsedERISet.add("static field ([Classifier]MPSColors).([StaticFieldDeclaration]DARK_MAGENTA : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color]))");
    ourUsedERISet.add("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setHost((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]getSessionLocalEntity((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]TextIndexOperations).([StaticMethodDeclaration]search((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]SequenceOperations");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))");
    ourUsedERISet.add("method ([Classifier]CentralManager).([InstanceMethodDeclaration]toIdString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]Double).([StaticMethodDeclaration]parseDouble((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static field ([Classifier]IClassifiersSearchScope).([StaticFieldDeclaration]INTERFACE : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("[Classifier]ScriptContext");
    ourUsedERISet.add("method ([Classifier]Entity).([InstanceMethodDeclaration]getProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]addAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]typeOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]putUserObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]FileUtil).([StaticMethodDeclaration]getCanonicalPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File])))");
    ourUsedERISet.add("method ([Classifier]BufferedImage).([InstanceMethodDeclaration]getColorModel())");
    ourUsedERISet.add("static method ([Classifier]AttributesRolesUtil).([StaticMethodDeclaration]childRoleFromAttributeRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]absMinus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PeriodType])))");
    ourUsedERISet.add("static field ([Classifier]System).([StaticFieldDeclaration]out : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PrintStream]))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]charAt((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("[Classifier]DateTimeOperations");
    ourUsedERISet.add("[Classifier]Severity");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]removeChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))");
    ourUsedERISet.add("method ([Classifier]Element).([InstanceMethodDeclaration]getElementsByTagName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeList]))");
    ourUsedERISet.add("method ([Classifier]Map$Entry).([InstanceMethodDeclaration]getKey())");
    ourUsedERISet.add("method ([Classifier]PrintStream).([InstanceMethodDeclaration]print((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]skip((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("enum const ([Classifier]TraversalAxis).([EnumConstantDeclaration]SELF_FOLLOWING_SIBLINGS)");
    ourUsedERISet.add("[Classifier]Object");
    ourUsedERISet.add("method ([Classifier]SModelUID).([InstanceMethodDeclaration]getLongName())");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]stripQuotes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]BufferedImage).([InstanceMethodDeclaration]getWidth())");
    ourUsedERISet.add("[Classifier]PeriodTypeHackUtil");
    ourUsedERISet.add("static field ([Classifier]IClassifiersSearchScope).([StaticFieldDeclaration]INSTANCE_METHOD : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]sort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparator, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]ITemplateGenerator");
    ourUsedERISet.add("method ([Classifier]TransientEntity).([InstanceMethodDeclaration]hasChanges())");
    ourUsedERISet.add("[Classifier]TextIndexEntityMetaDataImpl");
    ourUsedERISet.add("static method ([Classifier]TransientStoreUtil).([StaticMethodDeclaration]suspend((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession])))");
    ourUsedERISet.add("constructor [Classifier]Command[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]getAllSuperConcepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]EntityRemovedInDatabaseException");
    ourUsedERISet.add("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]getId())");
    ourUsedERISet.add("[Classifier]UndirectedAssociationSemantics");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]hourOfDay())");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]get_SPropertyAccess_enum_getterMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SPropertyAccess]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("method ([Classifier]Boolean).([InstanceMethodDeclaration]booleanValue() : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getId() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("constructor [Classifier]IllegalStateException[ConstructorDeclaration] ()");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getSize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))");
    ourUsedERISet.add("[Classifier]ConstraintsValidationException");
    ourUsedERISet.add("enum const ([Classifier]SelectionMode).([EnumConstantDeclaration]LANGUAGE_ROOTS)");
    ourUsedERISet.add("static method ([Classifier]DirectedAssociationSemantics).([StaticMethodDeclaration]setToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]eras())");
    ourUsedERISet.add("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]fullDate())");
    ourUsedERISet.add("static method ([Classifier]EntityFieldHandler).([StaticMethodDeclaration]create((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityId]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]Period).([StaticMethodDeclaration]millis((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getStoreLocation())");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]toString())");
    ourUsedERISet.add("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getPropertyAttributes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Element).([InstanceMethodDeclaration]addContent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Content])))");
    ourUsedERISet.add("constructor [Classifier]DefaultMatchingPattern[ConstructorDeclaration] ()");
    ourUsedERISet.add("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodeReferentSearchScopeProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeReferentSearchScopeProvider])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]create_closureContextObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("constructor [Classifier]NodeListIterableAdapter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeList]))");
    ourUsedERISet.add("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getSelectedNode() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("method ([Classifier]ISearchScope).([InstanceMethodDeclaration]getAdapters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("static method ([Classifier]Thread).([StaticMethodDeclaration]yield())");
    ourUsedERISet.add("method ([Classifier]Thread).([InstanceMethodDeclaration]getContextClassLoader())");
    ourUsedERISet.add("method ([Classifier]ThreadPoolTaskExecutor).([InstanceMethodDeclaration]setCorePoolSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("[Classifier]HttpServletRequestWrapper");
    ourUsedERISet.add("[Classifier]PopulateParameters");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]PRC : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getModelRootManagerClassNames((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("method ([Classifier]IFeatureDesign).([InstanceMethodDeclaration]parameterToString((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))");
    ourUsedERISet.add("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]setPersistentStore((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityStore])))");
    ourUsedERISet.add("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]weeks())");
    ourUsedERISet.add("[Classifier]IModelConstraints");
    ourUsedERISet.add("method ([Classifier]JobProcessor).([InstanceMethodDeclaration]setExceptionHandler((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JobProcessorExceptionHandler])))");
    ourUsedERISet.add("method ([Classifier]RefNodeListHandler).([InstanceMethodDeclaration]createEmptyCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("[Classifier]InputStream");
    ourUsedERISet.add("constructor [Classifier]String[ConstructorDeclaration] ()");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]hasProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Element).([InstanceMethodDeclaration]getTagName() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]getSize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("[Classifier]JavaModelUtil_new");
    ourUsedERISet.add("[Classifier]EditorNavigationUtil");
    ourUsedERISet.add("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]months())");
    ourUsedERISet.add("static method ([Classifier]SModelUtil).([StaticMethodDeclaration]allChildren((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]))");
    ourUsedERISet.add("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]getConceptLinkTargets((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]CHINESE : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]invoke((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Method]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))");
    ourUsedERISet.add("constructor [Classifier]EmptySearchScope[ConstructorDeclaration] ()");
    ourUsedERISet.add("[Classifier]SecurityViolationException");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]dayOfYear())");
    ourUsedERISet.add("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodeReferentSetEventHandler((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeReferentSetEventHandler])))");
    ourUsedERISet.add("[Classifier]Iterator");
    ourUsedERISet.add("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractStringBuilder]))");
    ourUsedERISet.add("[Classifier]JsCommandResponse");
    ourUsedERISet.add("[Classifier]WQParser");
    ourUsedERISet.add("[Classifier]NamedNodeMap");
    ourUsedERISet.add("[Classifier]INodePropertyGetter");
    ourUsedERISet.add("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodeDefaultSearchScopeProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getRequestURL())");
    ourUsedERISet.add("[Classifier]EditorCell_Error");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]minuteOfHour())");
    ourUsedERISet.add("static method ([Classifier]SNodeId).([StaticMethodDeclaration]fromString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("enum const ([Classifier]SelectionMode).([EnumConstantDeclaration]MODULE_ROOTS)");
    ourUsedERISet.add("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]getRoots((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]LinkPatternVariableDeclaration");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_ConceptFunctionParm_to_MethodParameterReference_by_Alias((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("method ([Classifier]StoreSession).([InstanceMethodDeclaration]getAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SubtypingManager).([InstanceMethodDeclaration]isSubtype((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]RequestUri");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setWriteNoSync((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]Generator).([InstanceMethodDeclaration]getOwnTemplateModels())");
    ourUsedERISet.add("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]nodeSubstituteActionsBuilder_Precondition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeSubstituteActionsBuilder])))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAncestor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]Iterable");
    ourUsedERISet.add("method ([Classifier]HttpSession).([InstanceMethodDeclaration]invalidate())");
    ourUsedERISet.add("static method ([Classifier]CheckPermission_AnnotationLink).([StaticMethodDeclaration]getCheckPermission((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept])))");
    ourUsedERISet.add("method ([Classifier]WikiManager).([InstanceMethodDeclaration]getBlocks())");
    ourUsedERISet.add("[Classifier]Class");
    ourUsedERISet.add("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getCurrentBuilder())");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]moveParenthesisToTheLeftInside((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ParenthesizedExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]sort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparator, <? super jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]hackTypeOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]CommandKind");
    ourUsedERISet.add("constructor [Classifier]Text[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]Source");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_CODE_LETTER : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]ModelActions");
    ourUsedERISet.add("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]searchFor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAncestors((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]BufferedReader");
    ourUsedERISet.add("[Classifier]SelectionMode");
    ourUsedERISet.add("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]getNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]ListOperations).([StaticMethodDeclaration]addElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]RuleEngineUtil).([StaticMethodDeclaration]processRulesSync((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RuleEngine]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set])))");
    ourUsedERISet.add("[Classifier]SolutionPath");
    ourUsedERISet.add("[Classifier]DirectedAssociationSemantics");
    ourUsedERISet.add("method ([Classifier]AbstractMaker).([InstanceMethodDeclaration]registerMakerTemplate((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplate, <any_, any_, any_>])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("static method ([Classifier]Language).([StaticMethodDeclaration]getLanguageAspectStatus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelDescriptor])))");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]putUserObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]addLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("method ([Classifier]Map).([InstanceMethodDeclaration]remove((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]NodePresentationUtil).([StaticMethodDeclaration]descriptionText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]Enum).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getRuntimeSupport())");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]weekOfWeekyear())");
    ourUsedERISet.add("enum const ([Classifier]TraversalAxis).([EnumConstantDeclaration]SELF_DESCENDANTS)");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]appendChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))");
    ourUsedERISet.add("[Classifier]DecoratorJob");
    ourUsedERISet.add("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]addCc((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]SubtypingRule_Runtime");
    ourUsedERISet.add("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]sendRedirect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]AbstractCellMenuPart_PropertyValues");
    ourUsedERISet.add("[Classifier]FileUploadException");
    ourUsedERISet.add("method ([Classifier]ITransformation).([InstanceMethodDeclaration]getNodeFactories() : (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any))");
    ourUsedERISet.add("constructor [Classifier]FixedClassConverter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class]))");
    ourUsedERISet.add("[Classifier]ILoggableRefactoring");
    ourUsedERISet.add("static method ([Classifier]Integer).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Integer]))");
    ourUsedERISet.add("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getEquationManager())");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]EditorCellModel).([InstanceMethodDeclaration]getSelectable())");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setFontSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertSame((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]get_SPropertyAccess_simple_getterMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SPropertyAccess]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleAccessoryModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("method ([Classifier]Set).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)) : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]find_EnclosingContextOwner_ClosureContext_generatedClass((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("method ([Classifier]HostToBaseUrlConfiguration).([InstanceMethodDeclaration]setDefaultBaseUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]toLowerCase() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getHandlerUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))");
    ourUsedERISet.add("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]switchReferenceMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))");
    ourUsedERISet.add("method ([Classifier]ThreadPoolTaskExecutor).([InstanceMethodDeclaration]setMaxPoolSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]ImageWriter).([InstanceMethodDeclaration]dispose())");
    ourUsedERISet.add("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setTaskExecutor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TaskExecutor])))");
    ourUsedERISet.add("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setFreemarkerConfiguration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Configuration])))");
    ourUsedERISet.add("method ([Classifier]Set).([InstanceMethodDeclaration]addAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>])))");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])) : (jetbrains.mps.baseLanguage.types.void/jetbrains.mps.baseLanguage.types.void))");
    ourUsedERISet.add("[Classifier]AbstractCellMenuPart_Generic_Item");
    ourUsedERISet.add("[Classifier]IRootTemplate");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]decreaseIndent())");
    ourUsedERISet.add("static method ([Classifier]AssociationSemantics).([StaticMethodDeclaration]getToManyPersistentIterable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]findOutputNodeByInputNodeAndMappingName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("method ([Classifier]Map).([InstanceMethodDeclaration]values())");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setSelectable((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]ServletRequest).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]findNodeByFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))");
    ourUsedERISet.add("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.double/jetbrains.mps.baseLanguage.types.double)))");
    ourUsedERISet.add("[Classifier]EnterableState");
    ourUsedERISet.add("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))");
    ourUsedERISet.add("[Classifier]Collections");
    ourUsedERISet.add("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]distinct((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))");
    ourUsedERISet.add("method ([Classifier]CellActionId).([InstanceMethodDeclaration]getName())");
    ourUsedERISet.add("constructor [Classifier]Event[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]CssReferentUtil).([StaticMethodDeclaration]getSearchScope((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("[Classifier]RequestProcessorContainer");
    ourUsedERISet.add("method ([Classifier]AbstractCellListHandler).([InstanceMethodDeclaration]createCells((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellLayout]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]TransientEntityStoreImpl");
    ourUsedERISet.add("[Classifier]_QueriesUtil_new");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]dayOfMonth())");
    ourUsedERISet.add("static method ([Classifier]Period).([StaticMethodDeclaration]hours((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static method ([Classifier]BaseAdapter).([StaticMethodDeclaration]fromAdapter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseAdapter])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getScope())");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("constructor [Classifier]BufferedReader[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Reader]))");
    ourUsedERISet.add("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setAssociationEndType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AssociationEndType])))");
    ourUsedERISet.add("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]From((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TreePath, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("[Classifier]BaseFormatTable");
    ourUsedERISet.add("method ([Classifier]WikiManager).([InstanceMethodDeclaration]setWikiLinkHandlers((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [WikiLinkHandler]>])))");
    ourUsedERISet.add("[Classifier]Annotation2_AnnotationLink");
    ourUsedERISet.add("[Classifier]LinkMetaclass");
    ourUsedERISet.add("[Classifier]Collection");
    ourUsedERISet.add("static method ([Classifier]Character).([StaticMethodDeclaration]toUpperCase((jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char)))");
    ourUsedERISet.add("method ([Classifier]CompareType).([InstanceMethodDeclaration]getName())");
    ourUsedERISet.add("constructor [Classifier]TextIndexEntityMetaDataImpl[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setAuxiliaryCellProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractCellProvider])))");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]getShortName())");
    ourUsedERISet.add("method ([Classifier]Boolean).([InstanceMethodDeclaration]booleanValue())");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getSubconcepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("constructor [Classifier]StringReader[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]Attr).([InstanceMethodDeclaration]getName() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]hourOfHalfday())");
    ourUsedERISet.add("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("method ([Classifier]BaseParameterException).([InstanceMethodDeclaration]getParameterName())");
    ourUsedERISet.add("[Classifier]TemplateLanguageUtil");
    ourUsedERISet.add("[Classifier]MediaWikiProcessor");
    ourUsedERISet.add("[Classifier]ExpressionTextUtil");
    ourUsedERISet.add("[Classifier]CreateFromUsageUtil");
    ourUsedERISet.add("method ([Classifier]Map).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])) : (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any))");
    ourUsedERISet.add("static method ([Classifier]CreateFromUsageUtil).([StaticMethodDeclaration]isApplicable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]isEmpty() : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("static method ([Classifier]PatternAddingUtil).([StaticMethodDeclaration]addVariablePattern((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))");
    ourUsedERISet.add("[Classifier]RuntimeException");
    ourUsedERISet.add("[Classifier]FixedClassConverter");
    ourUsedERISet.add("[Classifier]FieldDeclaration");
    ourUsedERISet.add("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]resumeSession((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]TBuilderContextFactory).([StaticMethodDeclaration]getLocalBuilderContext())");
    ourUsedERISet.add("static method ([Classifier]WQParser).([StaticMethodDeclaration]parse((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))");
    ourUsedERISet.add("static method ([Classifier]CompareType).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]StringBuilder[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]toString())");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMapAction).([StaticFieldDeclaration]CARET_AT_ANY_POSITION : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]exclude((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]EditorCellKeyMap).([InstanceMethodDeclaration]putAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellKeyMapAction])))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]isRoot())");
    ourUsedERISet.add("method ([Classifier]Element).([InstanceMethodDeclaration]getChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]doClickButton((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static field ([Classifier]EditorCellKeyMap).([StaticFieldDeclaration]KEY_MODIFIERS_ALT : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("constructor [Classifier]IsInstanceCondition[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]))");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]getModelDescriptor())");
    ourUsedERISet.add("[Classifier]BerkeleyDbEntityStore");
    ourUsedERISet.add("static method ([Classifier]ServletFileUpload).([StaticMethodDeclaration]isMultipartContent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest])))");
    ourUsedERISet.add("enum const ([Classifier]Language$LanguageAspectStatus$AspectKind).([EnumConstantDeclaration]STRUCTURE)");
    ourUsedERISet.add("method ([Classifier]ImageWriter).([InstanceMethodDeclaration]getOriginatingProvider())");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil_new).([StaticMethodDeclaration]createColorFieldReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static method ([Classifier]FindOperations).([StaticMethodDeclaration]findUsages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ScriptContext])))");
    ourUsedERISet.add("[Classifier]ServiceLocator");
    ourUsedERISet.add("[Classifier]ICursor");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createComparableEquationStrong((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]EditorCellKeyMap).([StaticMethodDeclaration]getVirtualKeycodes())");
    ourUsedERISet.add("constructor [Classifier]ConceptAndSuperConceptsScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]))");
    ourUsedERISet.add("static method ([Classifier]ModelActions).([StaticMethodDeclaration]createChildSubstituteActions((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IChildNodeSetter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("method ([Classifier]Matcher).([InstanceMethodDeclaration]matches())");
    ourUsedERISet.add("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]doAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]AbstractTemplates[ConstructorDeclaration] ()");
    ourUsedERISet.add("method ([Classifier]SchedulerFactoryBean).([InstanceMethodDeclaration]setWaitForJobsToCompleteOnShutdown((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]TBuilderContext");
    ourUsedERISet.add("[Classifier]DNQRecordManager");
    ourUsedERISet.add("constructor [Classifier]FixedLocaleDateTimeFormatter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFormatter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("constructor [Classifier]NotificationTemplateCallHandler[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextBuilder]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Map$Entry, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [Object]>]]))");
    ourUsedERISet.add("constructor [Classifier]ActionContext[ConstructorDeclaration] ()");
    ourUsedERISet.add("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getName())");
    ourUsedERISet.add("method ([Classifier]EditorCell_Collection).([InstanceMethodDeclaration]addEditorCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))");
    ourUsedERISet.add("[Classifier]Root");
    ourUsedERISet.add("method ([Classifier]Severity).([InstanceMethodDeclaration]getValueAsString())");
    ourUsedERISet.add("[Classifier]JobProcessor");
    ourUsedERISet.add("[Classifier]AbstractCollection");
    ourUsedERISet.add("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]canSwitchReferenceMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))");
    ourUsedERISet.add("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getNodeEditorComponent())");
    ourUsedERISet.add("static method ([Classifier]HUtil).([StaticMethodDeclaration]createMatchingPatternByConceptFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]DateTimePrinter");
    ourUsedERISet.add("constructor [Classifier]ServletFileUpload[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [FileItemFactory]))");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]secondOfMinute())");
    ourUsedERISet.add("[Classifier]ModelConstraintsManager");
    ourUsedERISet.add("method ([Classifier]MailingService).([InstanceMethodDeclaration]createMimeMessageHelper())");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleHelginsTypesystemModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]forName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]getConstant((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]getParent() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))");
    ourUsedERISet.add("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]suspend())");
    ourUsedERISet.add("static field ([Classifier]UrlConstants).([StaticFieldDeclaration]CLASSPATH : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]PathUtil");
    ourUsedERISet.add("method ([Classifier]AbstractNodeSubstituteAction).([InstanceMethodDeclaration]getParameterObject())");
    ourUsedERISet.add("[Classifier]_ScriptConstants");
    ourUsedERISet.add("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]createNewNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setCellBackgroundColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))");
    ourUsedERISet.add("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]coerce((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IMatchingPattern])))");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]print((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFormatter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale])))");
    ourUsedERISet.add("[Classifier]MPSModuleRepository");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setMinUtilization((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("[Classifier]TextIndexMetaData");
    ourUsedERISet.add("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]isExactly((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("constructor [Classifier]ChooseRefactoringInputDataDialog[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ILoggableRefactoring]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ActionContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [IChooseComponent]>]))");
    ourUsedERISet.add("[Classifier]ReflectionUtil");
    ourUsedERISet.add("constructor [Classifier]SubnodesSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getTextExpression((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("constructor [Classifier]InputStreamReader[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InputStream]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]RootTemplateAnnotation_AnnotationLink");
    ourUsedERISet.add("static method ([Classifier]ListOperations).([StaticMethodDeclaration]removeAllElements((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getHeader((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]replaceWithAnother((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getLanguageNamesToAddToModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]get_SConceptPropertyAccess_GetMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SConceptPropertyAccess]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("method ([Classifier]MPSModuleRepository).([InstanceMethodDeclaration]getAllLanguages())");
    ourUsedERISet.add("[Classifier]TextIndexMetaDataImpl");
    ourUsedERISet.add("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]appendPattern((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]ErrorMessageManager$Severity).([InstanceMethodDeclaration]getStyleClass())");
    ourUsedERISet.add("static method ([Classifier]ChildSubstituteActionsHelper).([StaticMethodDeclaration]createDefaultActions((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IChildNodeSetter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]namespaceFromLongName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Long");
    ourUsedERISet.add("method ([Classifier]WorkingMemory).([InstanceMethodDeclaration]assertFact((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]FormatTableManagerImpl).([InstanceMethodDeclaration]setFormatTables((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [BaseFormatTable]>])))");
    ourUsedERISet.add("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]setExecutor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Executor])))");
    ourUsedERISet.add("constructor [Classifier]RuntimeException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]getAllSubConcepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]setBackupPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]suspendIndexing())");
    ourUsedERISet.add("method ([Classifier]Set).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))");
    ourUsedERISet.add("[Classifier]IContentClosure");
    ourUsedERISet.add("static field ([Classifier]Locale).([StaticFieldDeclaration]ENGLISH : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))");
    ourUsedERISet.add("static method ([Classifier]Queries).([StaticMethodDeclaration]CustomExpression_check_LinkDeclaration_aggragation_target_isConcreteConcept((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]WorkingMemory).([InstanceMethodDeclaration]retractFact((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodePropertyGetter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodePropertyGetter])))");
    ourUsedERISet.add("[Classifier]Runnable");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]extendedInterfaceConcept_generatedInterface((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))");
    ourUsedERISet.add("method ([Classifier]Set).([InstanceMethodDeclaration]isEmpty())");
    ourUsedERISet.add("static method ([Classifier]ModelConstraintsUtil).([StaticMethodDeclaration]getSearchScope((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]mapSrcMacro_MapperFunction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]close())");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]getName())");
    ourUsedERISet.add("[Classifier]MessageDigestUtil");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]convert((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTime])))");
    ourUsedERISet.add("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]removeOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]intersect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]BaseDialog).([InstanceMethodDeclaration]showDialog())");
    ourUsedERISet.add("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getRequest())");
    ourUsedERISet.add("method ([Classifier]IModule).([InstanceMethodDeclaration]getOwnModelDescriptors())");
    ourUsedERISet.add("method ([Classifier]Map).([InstanceMethodDeclaration]containsKey((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isSimple((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAncestorWhereConceptInList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]ISearchScope).([InstanceMethodDeclaration]getNodes())");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]replace((jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char), (jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char)))");
    ourUsedERISet.add("[Classifier]SubtypingManager");
    ourUsedERISet.add("[Classifier]HtmlStringUtil$EscapeKind");
    ourUsedERISet.add("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getLabeledInputValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]HttpSession).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]EditorManager");
    ourUsedERISet.add("enum const ([Classifier]CommandKind).([EnumConstantDeclaration]GENERATION)");
    ourUsedERISet.add("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]canAddRootTemplateAnnotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]Entity).([InstanceMethodDeclaration]getLinkNames())");
    ourUsedERISet.add("static method ([Classifier]Language).([StaticMethodDeclaration]getLanguageForLanguageAspect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelDescriptor])))");
    ourUsedERISet.add("method ([Classifier]StoreSession).([InstanceMethodDeclaration]findLinks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Short");
    ourUsedERISet.add("method ([Classifier]SReference).([InstanceMethodDeclaration]getSourceNode())");
    ourUsedERISet.add("[Classifier]Element");
    ourUsedERISet.add("static method ([Classifier]PathUtil).([StaticMethodDeclaration]getPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]AbstractInstantWhenImpl).([InstanceMethodDeclaration]fieldsChanged((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]])))");
    ourUsedERISet.add("static method ([Classifier]Thread).([StaticMethodDeclaration]sleep((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))");
    ourUsedERISet.add("[Classifier]_EditorUtil");
    ourUsedERISet.add("[Classifier]ActionQueryMethodName");
    ourUsedERISet.add("[Classifier]EditorCellKeyMap");
    ourUsedERISet.add("method ([Classifier]EditorCellKeyMapAction).([InstanceMethodDeclaration]setShownInPopupMenu((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]getInvocationContext())");
    ourUsedERISet.add("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getName())");
    ourUsedERISet.add("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]getSessionObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("static method ([Classifier]CopyUtil).([StaticMethodDeclaration]copy((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))");
    ourUsedERISet.add("[Classifier]IHelginsDescriptor");
    ourUsedERISet.add("method ([Classifier]TypeConvertManager).([InstanceMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))");
    ourUsedERISet.add("method ([Classifier]StoreSession).([InstanceMethodDeclaration]getEntityTypes())");
    ourUsedERISet.add("[Classifier]IPredicate");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]actionMapClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellActionMapDeclaration])))");
    ourUsedERISet.add("static field ([Classifier]RegexpHighlighter).([StaticFieldDeclaration]NUMBER : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color]))");
    ourUsedERISet.add("[Classifier]GeneratedQueriesOpener");
    ourUsedERISet.add("[Classifier]DateTime");
    ourUsedERISet.add("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimePrinter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeParser])))");
    ourUsedERISet.add("[Classifier]ClassNotFoundException");
    ourUsedERISet.add("static method ([Classifier]TextIndexOperations).([StaticMethodDeclaration]search((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))");
    ourUsedERISet.add("method ([Classifier]RequestProcessor).([InstanceMethodDeclaration]processRequest((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RequestUri])))");
    ourUsedERISet.add("method ([Classifier]JavaMailSenderImpl).([InstanceMethodDeclaration]setHost((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]map((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IMapper, <jetbrains.mps.baseLanguage.types.classifier [Object], jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("method ([Classifier]IZeroTransformation).([InstanceMethodDeclaration]make() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <any_>]))");
    ourUsedERISet.add("method ([Classifier]XMLOutputter).([InstanceMethodDeclaration]output((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Element]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Writer])))");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]dayOfWeek())");
    ourUsedERISet.add("method ([Classifier]Node).([InstanceMethodDeclaration]getParentNode() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))");
    ourUsedERISet.add("method ([Classifier]AbstractDateTime).([InstanceMethodDeclaration]toCalendar((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]get_SPropertyAccess_enum_defaultValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("method ([Classifier]HashMap).([InstanceMethodDeclaration]put((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))");
    ourUsedERISet.add("static method ([Classifier]EditorCell_Property).([StaticMethodDeclaration]create((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ModelAccessor]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]JOptionPane).([StaticMethodDeclaration]showMessageDialog((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Component]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))");
    ourUsedERISet.add("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]clearManyToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]setCurrentTemplateName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]createRootRule_Condition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]isAssignableConcept((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]AbstractEntityStoreAwareTestCase).([InstanceMethodDeclaration]setUp())");
    ourUsedERISet.add("method ([Classifier]SModel).([InstanceMethodDeclaration]getLongName())");
    ourUsedERISet.add("static method ([Classifier]JavaNameUtil).([StaticMethodDeclaration]fqClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]BaseParameterException).([InstanceMethodDeclaration]getParameterType())");
    ourUsedERISet.add("[Classifier]CompareType");
    ourUsedERISet.add("[Classifier]RulePackage");
    ourUsedERISet.add("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]days())");
    ourUsedERISet.add("static field ([Classifier]GenConstants).([StaticFieldDeclaration]WIDTH_PARAMETER : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getModelUIDsToImportToModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))");
    ourUsedERISet.add("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]isNotNull((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))");
    ourUsedERISet.add("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]fullTime())");
    ourUsedERISet.add("[Classifier]SModelUtil_new");
    ourUsedERISet.add("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getSelectedCell())");
    ourUsedERISet.add("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setCardinality((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AssociationEndCardinality])))");
    ourUsedERISet.add("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageDocumentationModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))");
    ourUsedERISet.add("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]containsForm())");
    ourUsedERISet.add("method ([Classifier]FileOutputStream).([InstanceMethodDeclaration]write((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_])))");
    ourUsedERISet.add("[Classifier]ArrayType");
    ourUsedERISet.add("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]setUseGermanStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]SAXBuilder");
    ourUsedERISet.add("static method ([Classifier]RegexpProcessor).([StaticMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Regexp]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [MatchParensRegexp]>])))");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]pathFromNamespace((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]Text");
    ourUsedERISet.add("[Classifier]BerkeleyDbTextIndexManager");
    ourUsedERISet.add("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))");
    ourUsedERISet.add("enum const ([Classifier]InstantWhenType).([EnumConstantDeclaration]DNQ_BEFORE_FLUSH)");
    ourUsedERISet.add("method ([Classifier]EditorCell_Label).([InstanceMethodDeclaration]setEditable((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]CentralManager");
    ourUsedERISet.add("static method ([Classifier]SReference).([StaticMethodDeclaration]create((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelUID]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeId])))");
    ourUsedERISet.add("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]instantiateConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]MainServlet");
    ourUsedERISet.add("[Classifier]SPropertyOperations");
    ourUsedERISet.add("[Classifier]HUtil");
    ourUsedERISet.add("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]era())");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getNextSiblings((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("[Classifier]DefaultSimpleSubstituteAction");
    ourUsedERISet.add("method ([Classifier]ActionContext).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))");
    ourUsedERISet.add("[Classifier]AbstractCellProvider");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]isEmpty())");
    ourUsedERISet.add("method ([Classifier]WikiManager).([InstanceMethodDeclaration]setBlocks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [TextBlock]>])))");
    ourUsedERISet.add("[Classifier]ShowOperations");
    ourUsedERISet.add("static method ([Classifier]AssociationSemantics).([StaticMethodDeclaration]getToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("method ([Classifier]File).([InstanceMethodDeclaration]getName() : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildCount((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("[Classifier]SubnodesSearchScope");
    ourUsedERISet.add("method ([Classifier]String).([InstanceMethodDeclaration]matches((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))");
    ourUsedERISet.add("[Classifier]FormatTableManagerImpl");
    ourUsedERISet.add("static field ([Classifier]JOptionPane).([StaticFieldDeclaration]YES_NO_OPTION : (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))");
    ourUsedERISet.add("static method ([Classifier]PropertySupport).([StaticMethodDeclaration]isInteger((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PrimitiveDataTypeDeclaration])))");
    ourUsedERISet.add("[Classifier]Error");
    ourUsedERISet.add("constructor [Classifier]RefNodeListHandlerElementKeyMap[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractCellListHandler]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("static method ([Classifier]PathUtil).([StaticMethodDeclaration]showSelectPathDialog((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SelectionMode])))");
    ourUsedERISet.add("method ([Classifier]MailingServiceImpl).([InstanceMethodDeclaration]setMailSender((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JavaMailSender])))");
    ourUsedERISet.add("method ([Classifier]Iterator).([InstanceMethodDeclaration]next())");
    ourUsedERISet.add("static method ([Classifier]Queries).([StaticMethodDeclaration]getBinaryOperationType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))");
    ourUsedERISet.add("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]copyNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))");
    ourUsedERISet.add("constructor [Classifier]AggregationCellContext[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration]))");
    ourUsedERISet.add("[Classifier]ServletException");
    ourUsedERISet.add("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFormatter])))");
    ourUsedERISet.add("static method ([Classifier]MPSModuleRepository).([StaticMethodDeclaration]getInstance())");
    ourUsedERISet.add("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getBuffer())");
    ourUsedERISet.add("[Classifier]MarshallUtil");
    ourUsedERISet.add("static method ([Classifier]NameUtil).([StaticMethodDeclaration]toValidIdentifier((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))");
    ourUsedERISet.add("static method ([Classifier]JavaNameUtil).([StaticMethodDeclaration]fqClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])) : (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))");
    ourUsedERISet.add("[Classifier]ConceptDeclaration");
    ourUsedERISet.add("method ([Classifier]List).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))");
    ourUsedERISet.add("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]shortTime())");
  }
}
