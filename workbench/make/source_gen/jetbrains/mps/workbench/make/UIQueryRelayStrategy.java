package jetbrains.mps.workbench.make;

/*Generated by MPS */

import jetbrains.mps.make.script.IOption;
import jetbrains.mps.make.script.IQuery;
import jetbrains.mps.smodel.IOperationContext;
import javax.swing.SwingUtilities;
import java.lang.reflect.InvocationTargetException;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import javax.swing.JOptionPane;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class UIQueryRelayStrategy {
  private UIQueryRelayStrategy.DialogListener dialogListener;

  public UIQueryRelayStrategy(UIQueryRelayStrategy.DialogListener dialogListener) {
    this.dialogListener = dialogListener;
  }

  public <T extends IOption> T relayQuery(IQuery<T> query, IOperationContext context) {
    if (dialogListener != null) {
      try {
        SwingUtilities.invokeAndWait(new Runnable() {
          public void run() {
            dialogListener.beforeDialogShown();
          }
        });
      } catch (InterruptedException ignore) {
      } catch (InvocationTargetException ignore) {
      }
    }
    String[] options = Sequence.fromIterable(query.options()).<String>select(new ISelector<T, String>() {
      public String select(T o) {
        return o.getText();
      }
    }).toGenericArray(String.class);
    int res = JOptionPane.showOptionDialog(context.getMainFrame(), query.getText(), query.getName().toString(), JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, null);
    if (res == JOptionPane.CLOSED_OPTION) {
      return query.voidOption();
    }
    return ListSequence.fromList(Sequence.fromIterable(query.options()).toListSequence()).getElement(res);
  }

  public static interface DialogListener {
    public void beforeDialogShown();
  }
}
