package jetbrains.mps.workbench.make;

/*Generated by MPS */

import jetbrains.mps.make.script.IOption;
import jetbrains.mps.make.script.IQuery;
import jetbrains.mps.smodel.IOperationContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.ThreadUtils;
import com.intellij.openapi.ui.Messages;

public class UIQueryRelayStrategy {
  public UIQueryRelayStrategy() {
  }

  public <T extends IOption> T relayQuery(final IQuery<T> query, final IOperationContext context) {
    List<T> optList = Sequence.<T>fromIterable(query.options()).toListSequence();
    final String[] options = ListSequence.<T>fromList(optList).<String>select(new ISelector<T, String>() {
      public String select(T o) {
        return o.getText();
      }
    }).toGenericArray(String.class);
    final int defopt = ListSequence.<T>fromList(optList).indexOf(query.defaultOption());
    final Wrappers._int res = new Wrappers._int(-1);
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        res.value = Messages.showDialog(context.getProject(), query.getText(), query.getTitle(), options, defopt, defopt, Messages.getQuestionIcon());
      }
    });
    if (res.value < 0) {
      return query.voidOption();
    }
    return ListSequence.<T>fromList(optList).getElement(res.value);
  }

  public static interface DialogListener {
    public void beforeDialogShown();
  }
}
