package jetbrains.mps.workbench.make;

/*Generated by MPS */

import jetbrains.mps.make.IMakeService;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ide.messages.MessagesViewTool;
import jetbrains.mps.messages.Message;
import jetbrains.mps.messages.MessageKind;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.intellij.openapi.wm.IdeFrame;
import com.intellij.openapi.wm.WindowManager;
import jetbrains.mps.internal.make.runtime.backports.ProgressIndicatorProgressStrategy;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.script.IProgress;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.internal.make.runtime.script.LoggingFeedbackStrategy;
import jetbrains.mps.make.script.IOption;
import jetbrains.mps.make.script.IQuery;
import jetbrains.mps.internal.make.runtime.script.UIQueryRelayStrategy;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.make.script.IMonitors;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.intellij.ide.IdeEventQueue;
import com.intellij.openapi.progress.Progressive;
import jetbrains.mps.internal.make.runtime.backports.JobMonitorProgressIndicator;
import jetbrains.mps.make.script.IParametersPool;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import com.intellij.openapi.project.Project;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.make.script.ScriptBuilder;
import jetbrains.mps.make.facet.IFacet;

public class WorkbenchMakeService implements IMakeService {
  private IOperationContext context;
  private boolean cleanMake;
  private IConfigMonitor configMon;

  public WorkbenchMakeService(IOperationContext context, boolean cleanMake) {
    this(context, null, cleanMake);
  }

  public WorkbenchMakeService(IOperationContext context, IConfigMonitor cmon, boolean cleanMake) {
    this.context = context;
    this.cleanMake = cleanMake;
    this.configMon = cmon;
  }

  public IResult make(Iterable<? extends IResource> resources) {
    return doMake(resources, WorkbenchMakeService.defaultMakeScript(), new IMakeService.Executor() {
      public void doExecute(Runnable runnable) {
        runnable.run();
      }
    });
  }

  public IResult make(Iterable<? extends IResource> resources, IScript script) {
    return doMake(resources, script, new IMakeService.Executor() {
      public void doExecute(Runnable runnable) {
        runnable.run();
      }
    });
  }

  public IResult make(Iterable<? extends IResource> resources, IScript script, IMakeService.Executor executor) {
    return doMake(resources, script, executor);
  }

  public IResult make(Iterable<? extends IResource> resources, IMakeService.Executor executor) {
    return doMake(resources, WorkbenchMakeService.defaultMakeScript(), executor);
  }

  private IResult doMake(final Iterable<? extends IResource> inputRes, IScript script, IMakeService.Executor executor) {
    if (Sequence.fromIterable(inputRes).isEmpty()) {
      if (cleanMake) {
        String msg = "Rebuild aborted";
        context.getProject().getComponent(MessagesViewTool.class).add(new Message(MessageKind.ERROR, msg + ": nothing to do."));
        this.displayInfo(msg);
        return new IResult.FAILURE(null);
      } else {
        this.displayInfo("Everything up to date");
        return new IResult.SUCCESS(null);
      }
    }

    final IScript scr = this.completeScript(script);

    if (!(scr.isValid())) {
      String msg = ((cleanMake ?
        "Rebuild" :
        "Make"
      )) + " failed";

      context.getProject().getComponent(MessagesViewTool.class).add(new Message(MessageKind.ERROR, msg + ". Invalid script."));
      this.displayInfo(msg);
      return new IResult.FAILURE(null);
    }

    // save all before launching the script 
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SModelRepository.getInstance().saveAll();
      }
    });

    final Wrappers._T<IResult> res = new Wrappers._T<IResult>();
    executor.doExecute(new Runnable() {
      public void run() {
        res.value = scr.execute(inputRes);
      }
    });

    if (res.value == null) {
      String msg = ((cleanMake ?
        "Rebuild" :
        "Make"
      )) + " aborted";
      this.displayInfo(msg);
    } else if (!(res.value.isSucessful())) {
      String msg = ((cleanMake ?
        "Rebuild" :
        "Make"
      )) + " failed";
      context.getProject().getComponent(MessagesViewTool.class).add(new Message(MessageKind.ERROR, msg + ". See previous messages for details."));
      this.displayInfo(msg);
    } else {
      String msg = ((cleanMake ?
        "Rebuild" :
        "Make"
      )) + " successful";
      this.displayInfo(msg);
    }
    return res.value;
  }

  private void displayInfo(String info) {
    IdeFrame frame = WindowManager.getInstance().getIdeFrame(context.getProject());
    if (frame != null) {
      frame.getStatusBar().setInfo(info);
    }
  }

  private IScript completeScript(IScript scr) {
    final ProgressIndicatorProgressStrategy progStrat = new ProgressIndicatorProgressStrategy();
    final IJobMonitor jmon = new IJobMonitor() {
      public boolean stopRequested() {
        return (progStrat.getProgressIndicator() != null ?
          progStrat.getProgressIndicator().isCanceled() :
          false
        );
      }

      public IProgress currentProgress() {
        return progStrat.currentProgress();
      }

      public void reportFeedback(IFeedback fdbk) {
        new LoggingFeedbackStrategy().reportFeedback(fdbk);
      }
    };
    final IConfigMonitor cmon = (configMon != null ?
      configMon :
      new IConfigMonitor() {
        public <T extends IOption> T relayQuery(IQuery<T> query) {
          return new UIQueryRelayStrategy().relayQuery(query, WorkbenchMakeService.this.context);
        }
      }
    );

    final Wrappers._T<ProgressIndicator> pind = new Wrappers._T<ProgressIndicator>(null);
    final IMonitors mons = new IMonitors.Stub(cmon, jmon) {
      @Override
      public void runJobWithMonitor(final _FunctionTypes._void_P1_E0<? super IJobMonitor> code) {
        IdeEventQueue.getInstance().flushQueue();
        ModelAccess.instance().runWriteActionWithProgressSynchronously(new Progressive() {
          public void run(ProgressIndicator realInd) {
            progStrat.setProgressIndicator(realInd);
            pind.value = new JobMonitorProgressIndicator(jmon);
            code.invoke(jmon);
          }
        }, (cleanMake ?
          "Rebuild" :
          "Make"
        ), true, WorkbenchMakeService.this.context.getProject());
      }
    };

    final _FunctionTypes._return_P0_E0<? extends ProgressIndicator> pindGet = new _FunctionTypes._return_P0_E0<ProgressIndicator>() {
      public ProgressIndicator invoke() {
        return pind.value;
      }
    };
    final _FunctionTypes._void_P1_E0<? super IParametersPool> init = new _FunctionTypes._void_P1_E0<IParametersPool>() {
      public void invoke(IParametersPool pool) {
        Tuples._4<Project, IOperationContext, Boolean, _FunctionTypes._return_P0_E0<? extends ProgressIndicator>> vars = (Tuples._4<Project, IOperationContext, Boolean, _FunctionTypes._return_P0_E0<? extends ProgressIndicator>>) pool.parameters(new ITarget.Name("checkParameters"), Object.class);
        vars._0(WorkbenchMakeService.this.context.getProject());
        vars._1(WorkbenchMakeService.this.context);
        vars._2(WorkbenchMakeService.this.cleanMake);
        vars._3(pindGet);
      }
    };
    return new IScript.StubBoss(scr) {
      @Override
      public void init(IParametersPool ppool) {
        init.invoke(ppool);
        super.init(ppool);
      }

      @Override
      public IMonitors monitors() {
        return mons;
      }
    };
  }

  public static IScript defaultMakeScript() {
    return new ScriptBuilder().withFacets(new IFacet.Name("GenerateResources"), new IFacet.Name("Generate"), new IFacet.Name("TextGen"), new IFacet.Name("JavaCompile"), new IFacet.Name("Make")).withTarget(new ITarget.Name("make")).toScript();
  }
}
