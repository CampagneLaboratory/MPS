package jetbrains.mps.workbench.make;

/*Generated by MPS */

import jetbrains.mps.make.IMakeService;
import jetbrains.mps.smodel.IOperationContext;
import com.intellij.openapi.progress.ProgressIndicator;
import java.util.concurrent.Future;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.script.IScriptController;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.make.runtime.util.FutureValue;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import dependencies.ModulesClusterizer;
import jetbrains.mps.internal.collections.runtime.ISelector;
import javax.swing.SwingUtilities;
import com.intellij.ide.IdeEventQueue;
import com.intellij.openapi.progress.ProgressManager;
import jetbrains.mps.messages.Message;
import jetbrains.mps.messages.MessageKind;
import com.intellij.openapi.wm.IdeFrame;
import com.intellij.openapi.wm.WindowManager;
import jetbrains.mps.messages.IMessageHandler;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.make.script.IOption;
import jetbrains.mps.make.script.IQuery;
import jetbrains.mps.internal.make.runtime.script.UIQueryRelayStrategy;
import jetbrains.mps.internal.make.runtime.backports.ProgressIndicatorProgressStrategy;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.script.IProgress;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.make.runtime.backports.JobMonitorProgressIndicator;
import jetbrains.mps.make.script.IParametersPool;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import com.intellij.openapi.project.Project;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.ide.generator.GenerationSettings;
import jetbrains.mps.make.script.ScriptBuilder;
import jetbrains.mps.make.facet.IFacet;
import jetbrains.mps.ide.messages.MessagesViewTool;
import jetbrains.mps.messages.IMessage;
import com.intellij.openapi.progress.Task;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicReference;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.make.runtime.backports.ProgressIndicatorDelegate;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.CancellationException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class WorkbenchMakeService implements IMakeService {
  private IOperationContext context;
  private boolean cleanMake;
  private ProgressIndicator progInd;

  public WorkbenchMakeService(IOperationContext context, boolean cleanMake) {
    this.context = context;
    this.cleanMake = cleanMake;
  }

  public Future<IResult> make(Iterable<? extends IResource> resources) {
    return doMake(resources, WorkbenchMakeService.defaultMakeScript(), null);
  }

  public Future<IResult> make(Iterable<? extends IResource> resources, IScript script) {
    return doMake(resources, script, null);
  }

  public Future<IResult> make(Iterable<? extends IResource> resources, IScript script, IScriptController ctl) {
    return doMake(resources, script, ctl);
  }

  protected void doExecute(Runnable scriptRunnable) {
    scriptRunnable.run();
  }

  private Future<IResult> doMake(final Iterable<? extends IResource> inputRes, final IScript script, IScriptController controller) {
    String scrName = ((cleanMake ?
      "Rebuild" :
      "Make"
    ));
    WorkbenchMakeService.MessageHandler mh = new WorkbenchMakeService.MessageHandler("Make");
    mh.clear();

    if (Sequence.fromIterable(inputRes).isEmpty()) {
      if (cleanMake) {
        String msg = scrName + " aborted: nothing to do";
        this.showError(mh, msg);
        this.displayInfo(msg);
        return new FutureValue(new IResult.FAILURE(null));
      } else {
        this.displayInfo("Everything up to date");
        return new FutureValue(new IResult.SUCCESS(null));
      }
    }


    if (!(script.isValid())) {
      String msg = scrName + " failed";
      showError(mh, msg + ". Invalid script.");
      this.displayInfo(msg);
      return new FutureValue(new IResult.FAILURE(null));
    }

    final Wrappers._T<Iterable<? extends Iterable<IResource>>> clInput = new Wrappers._T<Iterable<? extends Iterable<IResource>>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        clInput.value = new ModulesClusterizer().clusterize(Sequence.fromIterable(inputRes).<IResource>select(new ISelector<IResource, IResource>() {
          public IResource select(IResource r) {
            return (IResource) r;
          }
        }));
      }
    });
    IScriptController ctl = this.completeController(scrName, mh, controller);
    final WorkbenchMakeService.MakeTask task = new WorkbenchMakeService.MakeTask(context.getProject(), scrName, script, scrName, clInput.value, ctl, mh);
    doExecute(new Runnable() {
      public void run() {
        SwingUtilities.invokeLater(new Runnable() {
          public void run() {
            IdeEventQueue.getInstance().flushQueue();
            ProgressManager.getInstance().run(task);
            IdeEventQueue.getInstance().flushQueue();
          }
        });
      }
    });

    return task;
  }

  private void showError(WorkbenchMakeService.MessageHandler mh, String msg) {
    mh.handle(new Message(MessageKind.ERROR, msg));
  }

  private void displayInfo(String info) {
    IdeFrame frame = WindowManager.getInstance().getIdeFrame(context.getProject());
    if (frame != null) {
      frame.getStatusBar().setInfo(info);
    }
  }

  private IScriptController completeController(final String scrName, final IMessageHandler mh, final IScriptController ctl) {
    final Wrappers._T<IConfigMonitor> cmon2delegate = new Wrappers._T<IConfigMonitor>(null);
    final IConfigMonitor cmon = new IConfigMonitor.Stub() {
      public <T extends IOption> T relayQuery(IQuery<T> query) {
        T opt = null;
        if (cmon2delegate.value != null) {
          opt = cmon2delegate.value.relayQuery(query);
        }
        return (opt != null ?
          opt :
          new UIQueryRelayStrategy().relayQuery(query, WorkbenchMakeService.this.context)
        );
      }
    };
    final ProgressIndicatorProgressStrategy progStrat = new ProgressIndicatorProgressStrategy();
    final IJobMonitor jmon = new IJobMonitor() {
      public boolean stopRequested() {
        return (progStrat.getProgressIndicator() != null ?
          progStrat.getProgressIndicator().isCanceled() :
          false
        );
      }

      public IProgress currentProgress() {
        return progStrat.currentProgress();
      }

      public void reportFeedback(IFeedback fdbk) {
        new UIFeedbackStrategy(mh).reportFeedback(fdbk);
      }
    };

    final Wrappers._T<ProgressIndicator> pind = new Wrappers._T<ProgressIndicator>(null);
    return new IScriptController() {
      public void runConfigWithMonitor(final _FunctionTypes._void_P1_E0<? super IConfigMonitor> code) {
        if (ctl != null) {
          ctl.runConfigWithMonitor(new _FunctionTypes._void_P1_E0<IConfigMonitor>() {
            public void invoke(IConfigMonitor c) {
              try {
                cmon2delegate.value = c;
                code.invoke(cmon);
              } finally {
                cmon2delegate.value = null;
              }
            }
          });
        } else {
          code.invoke(cmon);
        }
      }

      public void runJobWithMonitor(_FunctionTypes._void_P1_E0<? super IJobMonitor> code) {
        try {
          progStrat.setProgressIndicator(progInd);
          pind.value = new JobMonitorProgressIndicator(jmon);
          code.invoke(jmon);
        } catch (Throwable e) {
          e.printStackTrace();
          jmon.reportFeedback(new IFeedback.ERROR(e.getMessage()));
        }
      }

      public void setup(IParametersPool pool) {
        Tuples._4<Project, IOperationContext, Boolean, _FunctionTypes._return_P0_E0<? extends ProgressIndicator>> vars = (Tuples._4<Project, IOperationContext, Boolean, _FunctionTypes._return_P0_E0<? extends ProgressIndicator>>) pool.parameters(new ITarget.Name("checkParameters"), Object.class);
        if (vars != null) {
          vars._0(WorkbenchMakeService.this.context.getProject());
          vars._1(WorkbenchMakeService.this.context);
          vars._2(WorkbenchMakeService.this.cleanMake);
          vars._3(new _FunctionTypes._return_P0_E0<ProgressIndicator>() {
            public ProgressIndicator invoke() {
              return pind.value;
            }
          });
        }

        Tuples._2<_FunctionTypes._return_P1_E0<? extends IFile, ? super String>, Boolean> tparams = (Tuples._2<_FunctionTypes._return_P1_E0<? extends IFile, ? super String>, Boolean>) pool.parameters(new ITarget.Name("textGen"), Object.class);
        if (tparams != null) {
          tparams._1(GenerationSettings.getInstance().isFailOnMissingTextGen());
        }

        if (ctl != null) {
          ctl.setup(pool);
        }
      }
    };
  }

  public static IScript defaultMakeScript() {
    return new ScriptBuilder().withFacets(new IFacet.Name("Binaries"), new IFacet.Name("Generate"), new IFacet.Name("TextGen"), new IFacet.Name("JavaCompile"), new IFacet.Name("ReloadClasses"), new IFacet.Name("Make")).withFinalTarget(new ITarget.Name("make")).toScript();
  }

  private class MessageHandler implements IMessageHandler {
    private String name;
    private MessagesViewTool mvt;

    public MessageHandler(String name) {
      this.name = name;
      this.mvt = context.getProject().getComponent(MessagesViewTool.class);
    }

    public void clear() {
      this.mvt.clear(name);
    }

    public void handle(IMessage message) {
      this.mvt.add(message, name);
    }
  }

  private class MakeTask extends Task.Backgroundable implements Future<IResult> {
    private CountDownLatch myLatch = new CountDownLatch(1);
    private AtomicReference<WorkbenchMakeService.TaskState> myState = new AtomicReference<WorkbenchMakeService.TaskState>(WorkbenchMakeService.TaskState.NOT_STARTED);
    private final IScript myScript;
    private final String myScrName;
    private final Iterable<? extends Iterable<IResource>> myClInput;
    private IResult myResult = null;
    private final IScriptController myController;
    private final WorkbenchMakeService.MessageHandler myMessageHandler;

    public MakeTask(@Nullable Project project, @NotNull String title, IScript script, String scrName, Iterable<? extends Iterable<IResource>> clInput, IScriptController ctl, WorkbenchMakeService.MessageHandler mh) {
      super(project, title, true, DEAF);
      this.myScript = script;
      this.myScrName = scrName;
      this.myClInput = clInput;
      this.myController = ctl;
      this.myMessageHandler = mh;
    }

    public void run(@NotNull ProgressIndicator pi) {
      if (myState.compareAndSet(WorkbenchMakeService.TaskState.NOT_STARTED, WorkbenchMakeService.TaskState.RUNNING)) {
        pi.pushState();
        try {
          // The progress indicator appears only after 300ms 
          Thread.sleep(400);
        } catch (InterruptedException ignore) {
        }
        final int clsize = Sequence.fromIterable(this.myClInput).count();
        if (clsize == 0) {
          return;
        }
        final double clfrac = (1.0 / clsize);
        final int[] idx = new int[]{0};
        progInd = new ProgressIndicatorDelegate(pi) {
          @Override
          public void setFraction(double d) {
            getDelegate().setFraction((idx[0] + d) * clfrac);
          }

          @Override
          public void setText2(String string) {
          }
        };
        for (Iterable<IResource> cl : this.myClInput) {
          pi.setText2((idx[0] + 1) + "/" + clsize + " " + IterableUtils.join(Sequence.fromIterable(cl).<String>select(new ISelector<IResource, String>() {
            public String select(IResource r) {
              return ((IResource) r).describe();
            }
          }), ","));
          this.myResult = this.myScript.execute(this.myController, cl);
          if (!(this.myResult.isSucessful()) || progInd.isCanceled()) {
            break;
          }
          idx[0]++;
        }
        pi.popState();
        this.myState.set(WorkbenchMakeService.TaskState.INDETERMINATE);
      }
    }

    @Override
    public void onSuccess() {
      reconcile();
    }

    @Override
    public void onCancel() {
      this.myResult = null;
      reconcile();
    }

    public boolean cancel(boolean b) {
      return false;
    }

    public boolean isCancelled() {
      return myState.get() == WorkbenchMakeService.TaskState.CANCELLED;
    }

    public boolean isDone() {
      return myState.get() != WorkbenchMakeService.TaskState.NOT_STARTED && myState.get() != WorkbenchMakeService.TaskState.RUNNING;
    }

    public IResult get() throws InterruptedException, ExecutionException {
      myLatch.await();
      if (myState.get() == WorkbenchMakeService.TaskState.CANCELLED) {
        throw new CancellationException();
      }
      return myResult;
    }

    public IResult get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
      myLatch.await(timeout, unit);
      if (myState.get() == WorkbenchMakeService.TaskState.CANCELLED) {
        throw new CancellationException();
      }
      return myResult;
    }

    private void reconcile() {
      if (this.myResult == null) {
        String msg = this.myScrName + " aborted";
        WorkbenchMakeService.this.displayInfo(msg);
        this.myState.set(WorkbenchMakeService.TaskState.CANCELLED);
      } else if (!(this.myResult.isSucessful())) {
        String msg = this.myScrName + " failed";
        showError(this.myMessageHandler, msg + ". See previous messages for details.");
        WorkbenchMakeService.this.displayInfo(msg);
        this.myState.set(WorkbenchMakeService.TaskState.DONE);
      } else {
        String msg = this.myScrName + " successful";
        WorkbenchMakeService.this.displayInfo(msg);
        this.myState.set(WorkbenchMakeService.TaskState.DONE);
      }
      myLatch.countDown();
    }
  }

  public static   enum TaskState {
    NOT_STARTED(),
    RUNNING(),
    DONE(),
    CANCELLED(),
    INDETERMINATE();

    TaskState() {
    }
  }
}
