package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import com.intellij.ui.components.JBScrollPane;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.ide.ThreadUtils;
import javax.swing.tree.TreePath;
import jetbrains.mps.ide.hierarchy.AbstractHierarchyTree;
import jetbrains.mps.refactoring.framework.ConceptAncestorsProvider;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.HashSet;

public class NodeHierarchyChooser extends JBScrollPane {
  private NodeHierarchyChooser.MyHierarchyTree myTree;
  public NodeHierarchyChooser(final SNode node) {
    super();
    this.myTree = new NodeHierarchyChooser.MyHierarchyTree();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        NodeHierarchyChooser.this.myTree.setHierarchyNode(SNodeOperations.getNodeAncestor(node, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"), false, false));
      }
    });
    this.setViewportView(this.myTree);
    ThreadUtils.runInUIThreadNoWait(new Runnable() {
      public void run() {
        NodeHierarchyChooser.this.myTree.rebuildNow();
      }
    });
  }
  public Object getSelectedObject() {
    TreePath path = myTree.getSelectionPath();
    if (path == null) {
      return null;
    }
    return myTree.getSelectionPath().getLastPathComponent();
  }
  public static class MyHierarchyTree extends AbstractHierarchyTree {
    private ConceptAncestorsProvider ancestorsProvider;
    public MyHierarchyTree() {
      super(null, "jetbrains.mps.lang.core.structure.BaseConcept", false);
    }
    public void setHierarchyNode(SNode node) {
      this.myHierarchyNode = node;
    }
    @Override
    protected Set<SNode> getDescendants(SNode node, Set<SNode> visited) {
      this.ancestorsProvider = new ConceptAncestorsProvider();
      Set<SNode> descendants = this.ancestorsProvider.getDescendants(node);
      SetSequence.fromSet(descendants).removeSequence(SetSequence.fromSet(descendants).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.getModel(it).isReadOnly();
        }
      }));
      return descendants;
    }
    @Override
    protected SNode getParent(SNode node) {
      return null;
    }
    @Override
    protected Set<SNode> getParents(SNode node, Set<SNode> visited) {
      return new HashSet<SNode>();
    }
    @Override
    protected String noNodeString() {
      return "no node";
    }
  }
}
