package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import jetbrains.mps.ide.platform.refactoring.RefactoringDialog;
import com.intellij.refactoring.RefactoringBundle;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.hierarchy.ChildHierarchyTreeNode;
import javax.swing.JOptionPane;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;

public class MoveUpDialog extends RefactoringDialog {
  private static String REFACTORING_NAME = RefactoringBundle.message("move.title");
  private SNode myTarget;
  private NodeHierarchyChooser myPanel;
  private SNode myConcept;
  private String myNodeType;
  public MoveUpDialog(@NotNull Project project, SNode target, String nodeType) {
    super(project, true);
    this.myTarget = target;
    this.myNodeType = nodeType;
    init();
    setTitle(REFACTORING_NAME + " " + nodeType);

  }
  @Override
  protected void doRefactoringAction() {
    Object treeNode = this.myPanel.getSelectedObject();
    if (treeNode == null || !(treeNode instanceof ChildHierarchyTreeNode)) {
      JOptionPane.showMessageDialog(this.myPanel, "Choose Concept or Interface", this.myNodeType + " can't be moved", JOptionPane.INFORMATION_MESSAGE);
      return;
    }
    SNode result = ((ChildHierarchyTreeNode) treeNode).getNode();

    this.myConcept = (SNode) result;
    super.doRefactoringAction();
  }
  @Nullable
  @Override
  protected JComponent createCenterPanel() {
    this.myPanel = new NodeHierarchyChooser(this.myTarget);
    return myPanel;
  }
  public static SNode getConcept(@NotNull Project project, SNode target, String nodeType) {
    MoveUpDialog dialog = new MoveUpDialog(project, target, nodeType);
    dialog.show();
    return dialog.myConcept;
  }
}
