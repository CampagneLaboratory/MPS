package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import jetbrains.mps.ide.platform.refactoring.RenameDialog;
import jetbrains.mps.project.AbstractModule;
import com.intellij.openapi.project.Project;
import java.awt.HeadlessException;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.StandaloneMPSProject;
import jetbrains.mps.refactoring.Renamer;
import jetbrains.mps.project.structure.project.ProjectDescriptor;
import jetbrains.mps.project.structure.project.ModulePath;

public class RenameModuleDialog extends RenameDialog {
  private AbstractModule myModule;
  public RenameModuleDialog(Project project, AbstractModule module) throws HeadlessException {
    super(project, module.getModuleName(), "module");
    myModule = module;
    setTitle("Rename Module");
  }

  @Override
  protected void doRefactoringAction() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        final String fqName = getCurrentValue();

        final SRepository projectRepository = ProjectHelper.getProjectRepository(getProject());
        for (final SModule module : projectRepository.getModules()) {
          // module.getModuleName() can be null 
          if (fqName.equals(module.getModuleName())) {
            setErrorText("Duplicate module name");
            return;
          }
        }

        if (!((fqName.equals(myModule.getModuleName())))) {
          ModelAccess.instance().runWriteActionInCommand(new Runnable() {
            public void run() {
              final jetbrains.mps.project.Project mpsProject = ProjectHelper.toMPSProject(getProject());
              if (mpsProject instanceof StandaloneMPSProject) {
                StandaloneMPSProject smp = (StandaloneMPSProject) mpsProject;
                String folder = smp.getFolderFor(myModule);
                String oldName = myModule.getDescriptorFile().getPath();

                Renamer.renameModule(myModule, fqName);

                // TODO: add moduleRenamed to SRepositoryListener? 
                // update module path in project descriptor 
                final ProjectDescriptor projectDescriptor = smp.getProjectDescriptor();
                String virtualFolder = projectDescriptor.removeModulePath(new ModulePath(oldName));
                ModulePath modulePath = new ModulePath(myModule.getDescriptorFile().getPath(), virtualFolder);
                projectDescriptor.addModulePath(modulePath);
              } else {
                Renamer.renameModule(myModule, fqName);
              }
            }
          });
        }

        callSuper();
      }
    });

  }
  private void callSuper() {
    super.doRefactoringAction();
  }
}
