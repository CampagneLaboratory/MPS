package jetbrains.mps.ide.actions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.references.UnregisteredNodes;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.SModelRepository;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.ide.findusages.model.IResultProvider;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.ide.findusages.view.UsageToolOptions;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;
import jetbrains.mps.project.GlobalScope;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

/**
 * 
 * @deprecated node iteration code is static, ugly, questionable and uses deprecated api, refactor uses
 */
@Deprecated
public final class InternalActionsUtils {
  @Deprecated
  private InternalActionsUtils() {
  }
  private static void executeActionOnAllNodes(String actionName, ProgressMonitor monitor, final _FunctionTypes._void_P1_E0<? super SNode> nodeCallback) {
    final Wrappers._T<Iterable<SModelReference>> modelReferences = new Wrappers._T<Iterable<SModelReference>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        Iterable<SModule> modules = MPSModuleRepository.getInstance().getModules();
        if (LOG.isEnabledFor(Level.WARN)) {
          LOG.warn("Modules: " + Sequence.fromIterable(modules).count());
        }
        modelReferences.value = Sequence.fromIterable(modules).translate(new ITranslator2<SModule, SModel>() {
          public Iterable<SModel> translate(SModule it) {
            return it.getModels();
          }
        }).select(new ISelector<SModel, SModelReference>() {
          public SModelReference select(SModel it) {
            return it.getReference();
          }
        });
        if (LOG.isEnabledFor(Level.WARN)) {
          LOG.warn("Models: " + Sequence.fromIterable(modelReferences.value).count());
        }
      }
    });

    monitor.start(actionName, Sequence.fromIterable(modelReferences.value).count());
    try {
      final Wrappers._int num = new Wrappers._int(0);

      for (final SModelReference modelRef : modelReferences.value) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            // hack for conf stubs 
            UnregisteredNodes.instance().clear();
            if (num.value++ % 100 == 0) {
              if (LOG.isEnabledFor(Level.WARN)) {
                LOG.warn("Model num: " + num.value + ", name: " + SModelStereotype.withoutStereotype(modelRef.getModelName()));
              }
            }
            SModel model = SModelRepository.getInstance().getModelDescriptor(modelRef);
            if (model != null) {
              for (SNode node : SNodeUtil.getDescendants(model)) {
                try {
                  nodeCallback.invoke(node);
                } catch (Throwable t) {
                  if (LOG.isEnabledFor(Level.ERROR)) {
                    LOG.error("Exception in callback for node " + node, t);
                  }
                }
              }
            }
          }
        });
        monitor.advance(1);
        if (monitor.isCanceled()) {
          break;
        }
      }
    } finally {
      monitor.done();
    }
  }
  public static void executeActionOnAllNodesInModal(final String actionName, Project project, final _FunctionTypes._void_P1_E0<? super SNode> nodeCallback) {
    if (ModelAccess.instance().canWrite()) {
      throw new IllegalStateException("Must be executed outside of write action");
    }
    ProgressManager.getInstance().run(new Task.Modal(project, actionName, true) {
      @Override
      public void run(@NotNull ProgressIndicator indicator) {
        InternalActionsUtils.executeActionOnAllNodes(actionName, new ProgressMonitorAdapter(indicator), nodeCallback);
      }
    });
  }
  public static void showUsagesViewForNodes(Project project, final List<SNodeReference> nodes) {
    IResultProvider provider = FindUtils.makeProvider(new IFinder() {
      @Override
      public SearchResults find(SearchQuery query, ProgressMonitor progress) {
        SearchResults<SNode> results = new SearchResults<SNode>();
        for (SNode node : ListSequence.fromList(nodes).select(new ISelector<SNodeReference, SNode>() {
          public SNode select(SNodeReference it) {
            return it.resolve(MPSModuleRepository.getInstance());
          }
        }).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return it != null;
          }
        })) {
          results.getSearchResults().add(new SearchResult<SNode>(node, "Uncategorized"));
        }
        return results;
      }
    });
    UsageToolOptions opt = new UsageToolOptions().allowRunAgain(false).navigateIfSingle(false).forceNewTab(false).notFoundMessage("Nothing");
    UsagesViewTool.showUsages(project, provider, new SearchQuery(GlobalScope.getInstance()), opt);
  }
  protected static Logger LOG = LogManager.getLogger(InternalActionsUtils.class);
}
