package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.Language;
import org.jetbrains.annotations.NotNull;
import java.awt.Frame;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import javax.swing.tree.TreeNode;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.workbench.choose.modules.BaseModuleModel;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.internal.collections.runtime.ISelector;
import com.intellij.navigation.NavigationItem;
import jetbrains.mps.workbench.choose.modules.BaseModuleItem;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.ide.ui.tree.MPSTree;
import jetbrains.mps.ide.ui.tree.MPSTreeNode;
import com.intellij.ide.util.gotoByName.ChooseByNamePopup;
import jetbrains.mps.workbench.goTo.ui.MpsPopupFactory;
import com.intellij.ide.util.gotoByName.ChooseByNamePopupComponent;
import com.intellij.openapi.application.ModalityState;

public class NewRuntimeModule_Action extends BaseAction {
  private static final Icon ICON = null;
  public NewRuntimeModule_Action() {
    super("New Runtime Module", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return ((SModule) MapSequence.fromMap(_params).get("contextModule")) instanceof Language;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    {
      boolean enabled = this.isApplicable(event, _params);
      this.setEnabledState(event.getPresentation(), enabled);
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModule p = event.getData(MPSCommonDataKeys.CONTEXT_MODULE);
      MapSequence.fromMap(_params).put("contextModule", p);
      if (p == null) {
        return false;
      }
    }
    {
      Frame p = event.getData(MPSCommonDataKeys.FRAME);
      MapSequence.fromMap(_params).put("frame", p);
      if (p == null) {
        return false;
      }
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      MapSequence.fromMap(_params).put("ideaProject", p);
      if (p == null) {
        return false;
      }
    }
    {
      TreeNode p = event.getData(MPSCommonDataKeys.TREE_NODE);
      MapSequence.fromMap(_params).put("treeNode", p);
      if (p == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final List<SModule> modules = ListSequence.fromList(new ArrayList<SModule>());
    final ModelAccess modelAccess = ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();

    modelAccess.runReadAction(new Runnable() {
      public void run() {
        ListSequence.fromList(modules).addSequence(Sequence.fromIterable(MPSModuleRepository.getInstance().getModules()));
      }
    });

    BaseModuleModel baseSolutionModel = new BaseModuleModel(((Project) MapSequence.fromMap(_params).get("ideaProject")), "runtime module") {
      @Override
      public SModuleReference[] find(SearchScope scope) {
        return ListSequence.fromList(modules).select(new ISelector<SModule, SModuleReference>() {
          public SModuleReference select(SModule it) {
            return it.getModuleReference();
          }
        }).toGenericArray(SModuleReference.class);
      }
      @Override
      public NavigationItem doGetNavigationItem(final SModuleReference module) {
        return new BaseModuleItem(module) {
          @Override
          public void navigate(boolean p0) {
            if (module == null) {
              return;
            }
            final Language language = (Language) ((SModule) MapSequence.fromMap(_params).get("contextModule"));
            language.getModuleDescriptor().getRuntimeModules().add((ModuleReference) module);
            final MPSTree mpsTree = ((MPSTreeNode) ((TreeNode) MapSequence.fromMap(_params).get("treeNode"))).getTree();
            modelAccess.runWriteInEDT(new Runnable() {
              public void run() {
                language.save();
                mpsTree.rebuildLater();
              }
            });
          }
        };
      }
    };
    ChooseByNamePopup popup = MpsPopupFactory.createPackagePopup(((Project) MapSequence.fromMap(_params).get("ideaProject")), baseSolutionModel, NewRuntimeModule_Action.this);
    popup.invoke(new ChooseByNamePopupComponent.Callback() {
      @Override
      public void elementChosen(Object p0) {
        ((NavigationItem) p0).navigate(true);
      }
    }, ModalityState.current(), true);
  }
}
