package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.Language;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.dialogs.project.creation.NewModelDialog;
import jetbrains.mps.project.MPSProject;

public class CloneModel_Action extends BaseAction {
  private static final Icon ICON = null;
  public CloneModel_Action() {
    super("Clone Model", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (((Integer) MapSequence.fromMap(_params).get("selSize")) != 1) {
      return false;
    }
    SModule module = ((SModel) MapSequence.fromMap(_params).get("model")).getModule();
    if (module instanceof Language) {
      Language language = (Language) module;
      return language.getAspectForModel(((SModel) MapSequence.fromMap(_params).get("model"))) == null;
    } else {
      return true;
    }
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    {
      boolean enabled = this.isApplicable(event, _params);
      this.setEnabledState(event.getPresentation(), enabled);
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("model", event.getData(MPSCommonDataKeys.MODEL));
    if (MapSequence.fromMap(_params).get("model") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("selSize", event.getData(MPSCommonDataKeys.TREE_SELECTION_SIZE));
    if (MapSequence.fromMap(_params).get("selSize") == null) {
      return false;
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final Wrappers._T<NewModelDialog> dialog = new Wrappers._T<NewModelDialog>();
    ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        dialog.value = new NewModelDialog(((MPSProject) MapSequence.fromMap(_params).get("project")), ((SModel) MapSequence.fromMap(_params).get("model")));
      }
    });
    dialog.value.show();
  }
}
