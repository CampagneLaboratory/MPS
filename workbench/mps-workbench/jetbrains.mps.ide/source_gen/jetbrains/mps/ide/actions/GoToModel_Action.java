package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.MPSProject;
import com.intellij.featureStatistics.FeatureUsageTracker;
import jetbrains.mps.workbench.choose.models.BaseModelModel;
import com.intellij.navigation.NavigationItem;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.workbench.choose.models.BaseModelItem;
import jetbrains.mps.ide.projectPane.ProjectPane;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SearchScope;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.util.ConditionalIterable;
import java.util.List;
import java.util.ArrayList;
import com.intellij.ide.util.gotoByName.ChooseByNamePopup;
import jetbrains.mps.workbench.goTo.ui.MpsPopupFactory;
import jetbrains.mps.workbench.goTo.NavigateCallback;
import com.intellij.openapi.application.ModalityState;

public class GoToModel_Action extends BaseAction {
  private static final Icon ICON = null;
  public GoToModel_Action() {
    super("Go to Model", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) throws Exception {
    final MPSProject mpsProject = event.getData(MPSCommonDataKeys.MPS_PROJECT);
    assert mpsProject != null;
    FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.goto.model");
    // PsiDocumentManager.getInstance(project).commitAllDocuments(); 
    BaseModelModel goToModelModel = new BaseModelModel(mpsProject) {
      @Override
      public NavigationItem doGetNavigationItem(final SModelReference modelReference) {
        return new BaseModelItem(modelReference) {
          @Override
          public void navigate(boolean requestFocus) {
            ProjectPane projectPane = ProjectPane.getInstance(mpsProject);
            SModel md = modelReference.resolve(mpsProject.getRepository());
            projectPane.selectModel(md, true);
          }
        };
      }
      @Override
      public SModelReference[] find(SearchScope scope) {
        Condition<SModel> cond = new Condition<SModel>() {
          @Override
          public boolean met(SModel model) {
            boolean rightStereotype = SModelStereotype.isUserModel(model) || SModelStereotype.isStubModel(model);
            boolean hasModule = model.getModule() != null;
            return rightStereotype && hasModule;
          }
        };
        ConditionalIterable<SModel> iter = new ConditionalIterable<SModel>(scope.getModels(), cond);
        List<SModelReference> result = new ArrayList<SModelReference>();
        for (SModel md : iter) {
          result.add(md.getReference());
        }
        return result.toArray(new SModelReference[result.size()]);
      }
    };
    ChooseByNamePopup popup = MpsPopupFactory.createPackagePopup(mpsProject.getProject(), goToModelModel, GoToModel_Action.this);
    popup.setShowListForEmptyPattern(true);

    popup.invoke(new NavigateCallback(), ModalityState.current(), true);
  }
}
