package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import com.intellij.featureStatistics.FeatureUsageTracker;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.workbench.goTo.navigation.RootChooseModel;
import jetbrains.mps.workbench.goTo.index.RootNodeNameIndex;
import com.intellij.ide.util.gotoByName.ChooseByNamePopup;
import jetbrains.mps.workbench.goTo.ui.MpsPopupFactory;
import com.intellij.ide.util.gotoByName.ChooseByNamePopupComponent;
import com.intellij.navigation.NavigationItem;
import com.intellij.openapi.application.ModalityState;

public class GoToRootNode_Action extends BaseAction {
  private static final Icon ICON = null;
  private String savedText;
  public GoToRootNode_Action(String savedText_par) {
    super("Go to Root Node", "", ICON);
    this.savedText = savedText_par;
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return false;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.enable(event.getPresentation());
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.goto.rootNode");

    Project project = event.getData(PlatformDataKeys.PROJECT);
    assert project != null;

    RootChooseModel chooseSNodeResult = new RootChooseModel(project, new RootNodeNameIndex());
    final ChooseByNamePopup popup = MpsPopupFactory.createNodePopup(project, chooseSNodeResult, GoToRootNode_Action.this.savedText, GoToRootNode_Action.this);

    popup.invoke(new ChooseByNamePopupComponent.Callback() {
      @Override
      public void onClose() {
        GoToRootNode_Action.this.savedText = popup.getEnteredText();
      }
      @Override
      public void elementChosen(Object element) {
        ((NavigationItem) element).navigate(true);
      }
    }, ModalityState.current(), true);
  }
  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(savedText_State((String) this.savedText));
    res.append("!");
    return res.toString();
  }
  public static String savedText_State(String object) {
    return "";
  }
}
