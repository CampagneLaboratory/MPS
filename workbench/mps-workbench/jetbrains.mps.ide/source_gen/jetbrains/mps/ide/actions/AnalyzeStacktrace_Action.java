package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Level;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import java.io.StringWriter;
import java.io.PrintWriter;
import java.awt.datatransfer.StringSelection;
import com.intellij.ide.CopyPasteManagerEx;
import com.intellij.openapi.project.Project;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class AnalyzeStacktrace_Action extends BaseAction {
  private static final Icon ICON = null;
  public AnalyzeStacktrace_Action() {
    super("Analyze Stacktrace...", "Open console with the navigation stacktrace", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
    this.setMnemonic("s".charAt(0));
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (MPSActionPlaces.MPS_MESSAGES_POPUP.equals(event.getPlace())) {
      return ((Throwable) MapSequence.fromMap(_params).get("exception")) != null;
    }
    return true;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "AnalyzeStacktrace", t);
      }
      this.disable(event.getPresentation());
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSCommonDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(CommonDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("exception", event.getData(MPSCommonDataKeys.EXCEPTION));
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      Throwable exc = ((Throwable) MapSequence.fromMap(_params).get("exception"));
      if (exc != null) {
        StringWriter writer = new StringWriter();
        exc.printStackTrace(new PrintWriter(writer));
        StringSelection contents = new StringSelection(writer.toString());
        CopyPasteManagerEx.getInstanceEx().setContents(contents);
      }
      final AnalyzeStacktraceDialog dialog = new AnalyzeStacktraceDialog(((Project) MapSequence.fromMap(_params).get("project")));
      dialog.show();
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "AnalyzeStacktrace", t);
      }
    }
  }
  protected static Logger LOG = LogManager.getLogger(AnalyzeStacktrace_Action.class);
}
