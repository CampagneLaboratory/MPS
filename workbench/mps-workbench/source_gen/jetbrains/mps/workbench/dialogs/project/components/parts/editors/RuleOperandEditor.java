/*
 * Copyright 2003-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.workbench.dialogs.project.components.parts.editors;

/*Generated by MPS */

import com.intellij.util.ui.AbstractTableCellEditor;
import jetbrains.mps.project.structure.modules.mappingpriorities.MappingConfig_AbstractRef;
import jetbrains.mps.smodel.Generator;
import java.util.List;
import jetbrains.mps.project.structure.modules.ModuleReference;
import java.util.EventObject;
import java.awt.event.MouseEvent;
import java.awt.Component;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import jetbrains.mps.ide.properties.EditOperandDialog;
import javax.swing.event.ChangeEvent;
import javax.swing.JComponent;
import jetbrains.mps.workbench.dialogs.project.components.parts.renderers.RuleOperandRenderer;

public class RuleOperandEditor extends AbstractTableCellEditor {
  private MappingConfig_AbstractRef myOperand;
  private Generator myGenerator;
  private List<ModuleReference> myDepGens;
  private boolean myLeft;

  public RuleOperandEditor(Generator generator, List<ModuleReference> depGens, boolean isLeft) {
    myGenerator = generator;
    myDepGens = depGens;
    myLeft = isLeft;
  }

  public Object getCellEditorValue() {
    return myOperand;
  }

  @Override
  public boolean isCellEditable(EventObject e) {
    if (e == null) {
      return false;
    }
    if (e instanceof MouseEvent) {
      return ((MouseEvent) e).getClickCount() >= 2;
    }
    return true;
  }

  @Override
  public boolean shouldSelectCell(EventObject e) {
    return false;
  }

  public Component getTableCellEditorComponent(final JTable table, Object value, boolean isSelected, final int row, final int column) {
    myOperand = (MappingConfig_AbstractRef) value;
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        EditOperandDialog dialog = new EditOperandDialog(myGenerator, myDepGens, myOperand, myLeft);
        dialog.show();
        if (dialog.getResult() != null) {
          myOperand = dialog.getResult();
          table.editingStopped(new ChangeEvent(this));
          table.revalidate();
          table.repaint();
        } else {
          table.editingStopped(new ChangeEvent(this));
        }
      }
    });
    return createRenderer(table, myOperand, row, column);
  }

  private JComponent createRenderer(JTable table, Object value, int row, int column) {
    return (JComponent) new RuleOperandRenderer().getTableCellRendererComponent(table, value, true, true, row, column);
  }
}
