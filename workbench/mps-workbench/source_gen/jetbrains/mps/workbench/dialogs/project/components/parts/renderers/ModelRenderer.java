package jetbrains.mps.workbench.dialogs.project.components.parts.renderers;

/*Generated by MPS */

import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.SModelReference;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import java.awt.Component;
import javax.swing.JList;
import jetbrains.mps.ide.ui.dialogs.properties.StateUtil;
import java.awt.Color;

public class ModelRenderer extends ProjectLevelRenderer {
  public ModelRenderer(IScope moduleScope, IScope projectScope) {
    super(moduleScope, projectScope);
  }

  @Override
  public String getItemLabel(Object value) {
    final SModelReference modelReference = (SModelReference) value;
    SModel model = SModelRepository.getInstance().getModelDescriptor(modelReference);
    if (model == null) {
      String longName = modelReference.getModelName();
      return (longName.equals("") ?
        "<no name>" :
        longName
      );
    }
    return modelReference.getModelName();
  }

  @Override
  public Component getListCellRendererComponent(JList list, final Object value, int index, boolean isSelected, boolean cellHasFocus) {
    Component result = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
    final SModelReference modelReference = (SModelReference) value;
    setText(getItemLabel(value));
    if (!(isSelected)) {
      if (!(StateUtil.isAvailable(modelReference))) {
        setForeground(Color.RED);
      } else if (!(StateUtil.isInScope(getModuleScope(), modelReference))) {
        setForeground(new Color(128, 0, 128));
      }
    }
    return result;
  }
}
