package jetbrains.mps.workbench.dialogs.project.components.parts.creators;

/*Generated by MPS */

import jetbrains.mps.util.Computable;
import jetbrains.mps.project.structure.model.ModelRootDescriptor;
import jetbrains.mps.workbench.dialogs.project.IBindedDialog;
import jetbrains.mps.vfs.IFile;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import jetbrains.mps.persistence.PersistenceRegistry;
import jetbrains.mps.ide.ui.filechoosers.treefilechooser.TreeFileChooser;
import jetbrains.mps.persistence.DefaultModelRoot;
import jetbrains.mps.project.SModelRoot;
import jetbrains.mps.ide.persistence.ModelRootSettingsEditor;
import jetbrains.mps.ide.persistence.PersistenceComponent;
import jetbrains.mps.ide.dialogs.BaseDialog;
import javax.swing.JComponent;
import jetbrains.mps.persistence.MementoImpl;

public class ModelRootChooser implements Computable<ModelRootDescriptor> {
  private final IBindedDialog myOwner;
  private IFile myBundleHome;

  public ModelRootChooser(IBindedDialog owner, IFile bundleHome) {
    myOwner = owner;
    myBundleHome = bundleHome;
  }

  @Override
  public ModelRootDescriptor compute() {
    PersistenceFacade pReg = PersistenceFacade.getInstance();
    Iterable<String> ti = pReg.getTypeIds();
    int index = Messages.showChooseDialog("select", "type", Sequence.fromIterable(ti).toGenericArray(String.class), Sequence.fromIterable(ti).first(), null);
    if (index == -1) {
      return null;
    }

    String selectedType = Sequence.fromIterable(ti).take(index + 1).last();
    ModelRoot mr = pReg.getModelRootFactory(selectedType).create();

    if (PersistenceRegistry.DEFAULT_MODEL_ROOT.equals(selectedType) || PersistenceRegistry.OBSOLETE_MODEL_ROOT.equals(selectedType)) {
      TreeFileChooser chooser = new TreeFileChooser();
      chooser.setInitialFile(myBundleHome);
      chooser.setMode(TreeFileChooser.MODE_FILES_AND_DIRECTORIES);
      IFile dir = chooser.showDialog(myOwner.getMainComponent());
      if (dir == null) {
        return null;
      }

      if (PersistenceRegistry.DEFAULT_MODEL_ROOT.equals(selectedType)) {
        DefaultModelRoot result = new DefaultModelRoot();
        result.setContentRoot((dir.isDirectory() ?
          dir.getPath() :
          dir.getParent().getPath()
        ));
        result.addFile(DefaultModelRoot.SOURCE_ROOTS, dir.getPath());
        return result.toDescriptor();
      } else {
        SModelRoot result = new SModelRoot();
        result.setPath(dir.getPath());
        return result.toDescriptor();
      }
    }

    final ModelRootSettingsEditor editor = PersistenceComponent.getModelRootSettingsEditor(mr.getType());
    editor.reset(null, mr);
    new BaseDialog(null) {
      @Override
      protected JComponent getMainComponent() {
        return editor.getComponent();
      }
    }.showDialog();
    editor.apply(mr);

    MementoImpl memento = new MementoImpl();
    mr.save(memento);
    return new ModelRootDescriptor(mr.getType(), memento);
  }
}
