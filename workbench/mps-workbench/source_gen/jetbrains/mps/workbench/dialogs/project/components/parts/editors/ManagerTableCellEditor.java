package jetbrains.mps.workbench.dialogs.project.components.parts.editors;

/*Generated by MPS */

import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import jetbrains.mps.workbench.dialogs.project.IBindedDialog;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.structure.model.ModelRootManager;
import javax.swing.DefaultListCellRenderer;
import java.awt.Component;
import javax.swing.JList;
import jetbrains.mps.util.NameUtil;
import java.util.List;
import jetbrains.mps.smodel.IOperationContext;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.project.Solution;
import jetbrains.mps.project.structure.modules.SolutionKind;
import jetbrains.mps.smodel.SModelRepository;

public class ManagerTableCellEditor extends DefaultCellEditor {
  private JComboBox myCombo;

  public ManagerTableCellEditor(final IBindedDialog owner) {
    super(new JComboBox(ListSequence.fromList(getManagers(owner.getOperationContext())).toGenericArray(ModelRootManager.class)));
    myCombo = ((JComboBox) super.getComponent());

    myCombo.setRenderer(new DefaultListCellRenderer() {
      public Component getListCellRendererComponent(JList list, Object value, int index, boolean selected, boolean focus) {
        ModelRootManager manager = ((ModelRootManager) value);
        String managerName = (manager == null ?
          "Default" :
          NameUtil.shortNameFromLongName(manager.getClassName())
        );
        return super.getListCellRendererComponent(list, managerName, index, selected, focus);
      }
    });
  }

  public static List<ModelRootManager> getManagers(final IOperationContext context) {
    final List<ModelRootManager> result = ListSequence.fromList(new ArrayList<ModelRootManager>());
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (SNode node : ListSequence.fromList(getManagerNodes(context))) {
          Language language = Language.getLanguageFor(SNodeOperations.getModel(node).getModelDescriptor());
          // <node> 

          ModelRootManager manager = new ModelRootManager(SNodeOperations.getModel(node).getModelDescriptor().getModule().getModuleDescriptor().getId().toString(), SNodeOperations.getModel(node).getLongName() + "." + NameUtil.toValidIdentifier(SPropertyOperations.getString(node, "name")));


          ListSequence.fromList(result).addElement(manager);
        }
      }
    });

    // default 
    ListSequence.fromList(result).addElement(null);

    return result;
  }

  public static List<SNode> getManagerNodes(final IOperationContext context) {
    final List<SNode> result = new ArrayList<SNode>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (Language l : ModuleRepositoryFacade.getInstance().getAllModules(Language.class)) {
          SModelDescriptor stubsAspect = LanguageAspect.STUBS.get(l);
          if (stubsAspect == null) {
            continue;
          }
          SModel model = stubsAspect.getSModel();
          result.addAll(SModelOperations.getRoots(model, "jetbrains.mps.lang.stubs.structure.ModelManagerDeclaration"));
        }

        // plus solutions 
        for (Solution s : ModuleRepositoryFacade.getInstance().getAllModules(Solution.class)) {
          if (!(SolutionKind.NONE.equals(s.getModuleDescriptor().getKind()))) {
            // a plugin solution 

            for (SModelDescriptor smd : SModelRepository.getInstance().getModelDescriptors(s)) {
              if (smd.getLongName().endsWith(".stubManagers")) {
                SModel m = smd.getSModel();
                System.err.println("DEBUG: found stubManagers model " + SModelOperations.getModelName(m));
                ListSequence.fromList(result).addSequence(ListSequence.fromList(SModelOperations.getRoots(m, "jetbrains.mps.lang.stubs.structure.ModelManagerDeclaration")));
              }
            }
          }
        }
      }
    });
    return result;
  }
}
