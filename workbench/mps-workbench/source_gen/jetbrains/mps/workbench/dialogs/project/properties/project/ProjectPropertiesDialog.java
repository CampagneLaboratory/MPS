package jetbrains.mps.workbench.dialogs.project.properties.project;

/*Generated by MPS */

import jetbrains.mps.workbench.dialogs.project.BaseStretchingBindedDialog;
import com.intellij.openapi.project.Project;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.properties.StandardComponents;
import jetbrains.mps.workbench.dialogs.project.BaseBindedDialog;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.awt.Dimension;
import jetbrains.mps.project.StandaloneMPSProject;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.annotations.NotNull;
import javax.swing.Action;
import com.intellij.openapi.ui.DialogWrapper;
import java.awt.event.ActionEvent;

public final class ProjectPropertiesDialog extends BaseStretchingBindedDialog {
  private Project myProject;
  private ProjectProperties myProperties;
  private ProjectPrefsExtraPanel[] myExtraPanels;

  public ProjectPropertiesDialog(final Project project) {
    this(project, null, null);
  }

  public ProjectPropertiesDialog(final Project project, ProjectProperties properties, ProjectPrefsExtraPanel[] extraPanels) {
    super(project.getName() + " Properties", new ProjectOperationContext(ProjectHelper.toMPSProject(project)));
    myProject = project;
    myProperties = properties;
    myExtraPanels = extraPanels;
    if (myProperties == null && myExtraPanels == null) {
      collectProjectProperties();
    }
    initUI();
  }

  private void initUI() {
    addComponent(StandardComponents.createProjectModulesPanel(this, "Modules", myProperties.getModules()), BaseBindedDialog.ConstraintsType.LIST);
    addComponent(StandardComponents.createTestConfigsPanel(this, "Test Configurations", myProperties.getTestConfigurations(), myProperties), BaseBindedDialog.ConstraintsType.LIST);
    for (ProjectPrefsExtraPanel extraPanel : Sequence.fromIterable(Sequence.fromArray(myExtraPanels))) {
      addComponent(extraPanel.getComponent(), BaseBindedDialog.ConstraintsType.LIST);
    }
    getWindow().setMinimumSize(new Dimension(500, 700));
  }

  private void collectProjectProperties() {
    myProperties = new ProjectProperties();
    myProperties.loadFrom(getMPSProject());
  }

  private StandaloneMPSProject getMPSProject() {
    return (StandaloneMPSProject) myProject.getComponent(MPSProject.class);
  }

  protected boolean doSaveChanges() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        myProperties.saveTo(getMPSProject());
        myProject.save();
      }
    });
    return true;
  }

  @Override
  @NotNull
  protected Action[] createActions() {
    return new Action[]{getOKAction(), getCancelAction(), new DialogWrapper.DialogWrapperAction("Apply") {
      protected void doAction(ActionEvent p0) {
        saveChanges();
      }
    }};
  }
}
