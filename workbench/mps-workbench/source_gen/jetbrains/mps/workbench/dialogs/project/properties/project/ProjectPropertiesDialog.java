package jetbrains.mps.workbench.dialogs.project.properties.project;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import javax.swing.JComponent;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.smodel.ModelAccess;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import com.intellij.ui.components.JBPanel;
import java.awt.GridLayout;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.intellij.ui.components.JBList;
import jetbrains.mps.workbench.dialogs.project.components.parts.renderers.PathRenderer;
import javax.swing.ListSelectionModel;
import com.intellij.ui.ToolbarDecorator;
import com.intellij.ui.AnActionButtonRunnable;
import com.intellij.ui.AnActionButton;
import jetbrains.mps.project.structure.project.Path;
import jetbrains.mps.workbench.dialogs.project.components.parts.creators.ModulePathChooser;
import jetbrains.mps.workbench.dialogs.project.IBindedDialog;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.IScope;
import org.jdesktop.beansbinding.AutoBinding;
import java.awt.Dimension;
import javax.swing.JPanel;
import com.intellij.ui.IdeBorderFactory;
import jetbrains.mps.workbench.dialogs.project.components.parts.renderers.TestConfigListCellRenderer;
import jetbrains.mps.project.structure.project.testconfigurations.BaseTestConfiguration;
import jetbrains.mps.project.StandaloneMPSProject;
import jetbrains.mps.project.MPSProject;
import javax.swing.AbstractListModel;
import java.util.List;

public final class ProjectPropertiesDialog extends DialogWrapper {
  private JComponent myPanel;
  private Project myProject;
  private ProjectProperties myProperties;
  private ProjectPrefsExtraPanel[] myExtraPanels;


  public ProjectPropertiesDialog(final Project project) {
    this(project, null, null);
  }



  public ProjectPropertiesDialog(final Project project, ProjectProperties properties, ProjectPrefsExtraPanel[] extraPanels) {
    super(project);
    setTitle(project.getName() + " Properties");
    setOKButtonText("Apply");
    myProject = project;
    myProperties = properties;
    myExtraPanels = extraPanels;
    if (myProperties == null) {
      collectProjectProperties();
    }
    initUI();
    init();
  }



  @Nullable
  public JComponent createCenterPanel() {
    return myPanel;
  }

  @Nullable
  @NonNls
  @Override
  protected String getDimensionServiceKey() {
    return this.getClass().getCanonicalName();
  }

  @Override
  protected void doOKAction() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        myProperties.saveTo(getMPSProject());
        myProject.save();
      }
    });
    super.doOKAction();
  }



  private Object getGridConstraints(int row, boolean fill) {
    // TODO: resolve problem with com.intellij.uiDesigner.core.GridLayoutManager & com.intellij.uiDesigner.core.GridConstraints in stubs 
    if (fill) {
      return new GridBagConstraints(0, row, 1, 1, 0, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 10, 10);
    }
    return new GridBagConstraints(0, row, 1, 1, 0, 0, GridBagConstraints.SOUTHWEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0);
  }



  private void initUI() {
    int rowCount = 2 + ((myExtraPanels == null ?
      0 :
      myExtraPanels.length
    ));
    int rowIndex = 0;
    myPanel = new JBPanel(new GridLayout(rowCount, 1));
    myPanel.setAutoscrolls(false);
    myPanel.add(createProjectModulesList(), getGridConstraints(rowIndex++, true));
    myPanel.add(createTestConfigList(), getGridConstraints(rowIndex++, true));
    for (ProjectPrefsExtraPanel extraPanel : Sequence.fromIterable(Sequence.fromArray(myExtraPanels))) {
      myPanel.add(extraPanel.getComponent(), getGridConstraints(rowIndex++, false));
    }
  }



  private JComponent createProjectModulesList() {
    final JBList list = new JBList(new ProjectPropertiesDialog.PathsListModel());

    list.setCellRenderer(new PathRenderer());
    list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

    ToolbarDecorator decorator = ToolbarDecorator.createDecorator(list);
    decorator.setAddAction(new AnActionButtonRunnable() {
      public void run(AnActionButton button) {
        Path path = new ModulePathChooser(new IBindedDialog() {
          public JComponent getMainComponent() {
            return null;
          }

          public IOperationContext getOperationContext() {
            return null;
          }

          public IScope getModuleScope() {
            return null;
          }

          public IScope getProjectScope() {
            return null;
          }

          public void addBinding(AutoBinding p0) {
          }
        }).compute();
        if (path != null) {
          for (Path p : ((ProjectPropertiesDialog.PathsListModel) list.getModel()).getPaths()) {
            if (p.isSamePath(path)) {
              list.setSelectedValue(p, true);
              return;
            }
          }
          ((ProjectPropertiesDialog.PathsListModel) list.getModel()).addPath(path);
        }
      }
    }).setRemoveAction(new AnActionButtonRunnable() {
      public void run(AnActionButton button) {
        ((ProjectPropertiesDialog.PathsListModel) list.getModel()).removePath(list.getSelectedValue());
      }
    }).disableUpAction().disableDownAction();
    decorator.setPreferredSize(new Dimension(500, 150));

    JPanel panel = decorator.createPanel();
    panel.setBorder(IdeBorderFactory.createTitledBorder("Modules", false));
    return panel;
  }



  public JComponent createTestConfigList() {
    final JBList list = new JBList(new ProjectPropertiesDialog.TestConfigListModel());

    list.setCellRenderer(new TestConfigListCellRenderer());
    list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

    ToolbarDecorator decorator = ToolbarDecorator.createDecorator(list);
    decorator.setAddAction(new AnActionButtonRunnable() {
      public void run(AnActionButton button) {
        TestConfigurationDialog dialog = new TestConfigurationDialog(getMPSProject(), null);
        dialog.show();
        BaseTestConfiguration config = dialog.getResult();
        if (config == null) {
          return;
        }

        ((ProjectPropertiesDialog.TestConfigListModel) list.getModel()).addTestConfig(config);
      }
    }).setRemoveAction(new AnActionButtonRunnable() {
      public void run(AnActionButton button) {
        ((ProjectPropertiesDialog.TestConfigListModel) list.getModel()).removeTestConfig(list.getSelectedValue());
      }
    }).disableUpAction().disableDownAction().setEditAction(new AnActionButtonRunnable() {
      public void run(AnActionButton button) {
        Object value = list.getSelectedValue();
        if (value == null) {
          return;
        }
        TestConfigurationDialog dialog = new TestConfigurationDialog(getMPSProject(), (BaseTestConfiguration) value);
        dialog.show();
        BaseTestConfiguration config = dialog.getResult();
        if (config == null) {
          return;
        }
        ((ProjectPropertiesDialog.TestConfigListModel) list.getModel()).removeTestConfig(value);
        ((ProjectPropertiesDialog.TestConfigListModel) list.getModel()).addTestConfig(config);
      }
    });
    decorator.setPreferredSize(new Dimension(300, 150));

    JPanel panel = decorator.createPanel();
    panel.setBorder(IdeBorderFactory.createTitledBorder("Test Configurations", false));
    return panel;
  }



  private void collectProjectProperties() {
    myProperties = new ProjectProperties();
    myProperties.loadFrom(getMPSProject());
  }

  private StandaloneMPSProject getMPSProject() {
    return (StandaloneMPSProject) myProject.getComponent(MPSProject.class);
  }



  private class PathsListModel extends AbstractListModel {
    public PathsListModel() {
    }



    public int getSize() {
      return myProperties.getModules().size();
    }

    public Object getElementAt(int i) {
      return myProperties.getModules().get(i);
    }

    public List<Path> getPaths() {
      return myProperties.getModules();
    }

    public void addPath(Path path) {
      myProperties.getModules().add(path);
      int i = myProperties.getModules().indexOf(path);
      fireIntervalAdded(this, i, i);
    }

    public void removePath(Object path) {
      int i = myProperties.getModules().indexOf(path);
      myProperties.getModules().remove(path);
      fireIntervalRemoved(this, i, i);
    }
  }



  private class TestConfigListModel extends AbstractListModel {
    public TestConfigListModel() {
    }



    public int getSize() {
      return myProperties.getTestConfigurations().size();
    }

    public Object getElementAt(int i) {
      return myProperties.getTestConfigurations().get(i);
    }

    public List<BaseTestConfiguration> getTestConfigs() {
      return myProperties.getTestConfigurations();
    }

    public void addTestConfig(BaseTestConfiguration testConfiguration) {
      myProperties.getTestConfigurations().add(testConfiguration);
      myProperties.testConfigsChanged();
      int i = myProperties.getTestConfigurations().indexOf(testConfiguration);
      fireIntervalAdded(this, i, i);
    }

    public void removeTestConfig(Object testConfig) {
      int i = myProperties.getTestConfigurations().indexOf(testConfig);
      myProperties.getTestConfigurations().remove(testConfig);
      myProperties.testConfigsChanged();
      fireIntervalRemoved(this, i, i);
    }
  }
}
