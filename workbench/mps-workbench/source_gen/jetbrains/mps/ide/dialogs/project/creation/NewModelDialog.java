package jetbrains.mps.ide.dialogs.project.creation;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.project.IModule;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import jetbrains.mps.smodel.SModelDescriptor;
import java.awt.HeadlessException;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.dialogs.DialogDimensionsSettings;
import java.awt.GridLayout;
import javax.swing.JLabel;
import javax.swing.DefaultComboBoxModel;
import jetbrains.mps.project.SModelRoot;
import javax.swing.DefaultListCellRenderer;
import java.awt.Component;
import javax.swing.JList;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.ide.properties.StandardDialogs;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.LanguageAspect;
import javax.lang.model.SourceVersion;
import javax.swing.JComponent;

public class NewModelDialog extends BaseDialog {
  private IOperationContext myContext;
  private IModule myModule;
  private JPanel myContentPane = new JPanel(new BorderLayout());
  private JTextField myModelName = new JTextField();
  private JComboBox myModelStereotype = new JComboBox();
  private JComboBox myModelRoots = new JComboBox();
  private SModelDescriptor myResult;
  private String myNamespace;

  public NewModelDialog(IModule module, String namespace, IOperationContext context, String stereotype, boolean strict) throws HeadlessException {
    super(ProjectHelper.toMainFrame(context.getProject()), "New Model");
    myContext = context;
    myModule = module;
    myNamespace = (namespace == null ?
      "" :
      namespace
    );
    assert myModule.getSModelRoots().size() > 0 : "Can't create a model in solution with no model roots";
    initContentPane();
    if (stereotype != null) {
      myModelStereotype.setSelectedItem(stereotype);
      myModelStereotype.setEnabled(!(strict));
    }
  }

  public DialogDimensionsSettings.DialogDimensions getDefaultDimensionSettings() {
    return new DialogDimensionsSettings.DialogDimensions(100, 100, 400, 300);
  }

  public SModelDescriptor getResult() {
    return myResult;
  }

  private void initContentPane() {
    JPanel mainPanel = new JPanel(new GridLayout(0, 1));

    mainPanel.add(new JLabel("Model root:"));
    mainPanel.add(myModelRoots);
    DefaultComboBoxModel model = new DefaultComboBoxModel();
    for (SModelRoot root : myModule.getSModelRoots()) {
      if (!(root.isReadOnly())) {
        model.addElement(root);
      }
    }

    if (model.getSize() == 0) {
      model.addElement("<NO MODEL ROOTS FOR SELECTED NAMESPACE>");
    }
    myModelRoots.setRenderer(new DefaultListCellRenderer() {
      @Override
      public Component getListCellRendererComponent(JList list, Object object, int i, boolean b, boolean b1) {
        if (object instanceof ModelRoot) {
          object = ((ModelRoot) object).getPresentation();
        }
        return super.getListCellRendererComponent(list, object, i, b, b1);
      }
    });
    myModelRoots.addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent e) {
        check();
      }
    });
    myModelRoots.setModel(model);

    myModelName.setText((myNamespace.length() == 0 ?
      myNamespace :
      myNamespace + "."
    ));
    mainPanel.add(new JLabel("Model name:"));
    mainPanel.add(myModelName);
    myModelName.addKeyListener(new KeyAdapter() {
      public void keyReleased(KeyEvent event) {
        check();
      }
    });

    mainPanel.add(new JLabel("Stereotype:"));
    myModelStereotype.setEditable(true);
    myModelStereotype.setModel(new DefaultComboBoxModel(SModelStereotype.values));
    myModelStereotype.addKeyListener(new KeyAdapter() {
      public void keyReleased(KeyEvent event) {
        check();
      }
    });
    myModelStereotype.addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent p0) {
        check();
      }
    });
    mainPanel.add(myModelStereotype);

    myContentPane.add(mainPanel, BorderLayout.NORTH);
    myContentPane.add(new JPanel(), BorderLayout.CENTER);
  }

  @BaseDialog.Button(position = 0, name = "OK", mnemonic = 'O', defaultButton = true)
  public void buttonOk() {
    if (!(check())) {
      return;
    }

    myResult = ModelAccess.instance().runWriteActionInCommand(new Computable<SModelDescriptor>() {
      public SModelDescriptor compute() {
        SModelFqName fqName = getFqName();
        SModelRoot mr = (SModelRoot) myModelRoots.getSelectedItem();
        return myModule.createModel(fqName, mr, null);
      }
    }, myContext.getProject());

    assert myResult != null;
    StandardDialogs.createModelPropertiesDialog(myResult, myContext).showDialog();
    dispose();
  }

  private SModelFqName getFqName() {
    return new SModelFqName(myModelName.getText(), myModelStereotype.getSelectedItem().toString());
  }

  @BaseDialog.Button(position = 1, name = "Cancel", mnemonic = 'C')
  public void buttonCancel() {
    dispose();
  }

  private boolean check() {
    Object selected = myModelRoots.getSelectedItem();
    if (!((selected instanceof SModelRoot))) {
      setErrorText("Model root is not selected");
      return false;
    }

    SModelRoot mr = ((SModelRoot) selected);

    String modelName = myModelName.getText();
    if (modelName.length() == 0) {
      setErrorText("Empty model name isn't allowed");
      return false;
    }

    SModelFqName modelUID = new SModelFqName(modelName, myModelStereotype.getSelectedItem().toString());
    if (SModelRepository.getInstance().getModelDescriptor(modelUID) != null) {
      setErrorText("Model with an uid " + modelName + " already exists");
      return false;
    }

    if (modelName.lastIndexOf(".") == modelName.length()) {
      setErrorText("Empty model short name isn't allowed");
      return false;
    }

    if (myModule instanceof Language) {
      for (LanguageAspect aspect : LanguageAspect.values()) {
        String shortName = modelName.substring(modelName.lastIndexOf(".") + 1);
        if (shortName.equals(aspect.getName())) {
          setErrorText("This name isn't allowed because '" + shortName + "' is language aspect name");
          return false;
        }
      }
    }

    if (!(SourceVersion.isName(modelName))) {
      setErrorText("Model name should be valid Java package");
      return false;
    }

    if (!(mr.canCreateModel(getFqName().toString()))) {
      setErrorText("Can't create a model with this name under this model root");
      return false;
    }

    setErrorText("");
    return true;
  }

  protected JComponent getMainComponent() {
    return myContentPane;
  }
}
