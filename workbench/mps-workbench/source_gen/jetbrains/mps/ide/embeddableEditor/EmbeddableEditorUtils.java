package jetbrains.mps.ide.embeddableEditor;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Set;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.script.ScriptBuilder;
import jetbrains.mps.make.facet.IFacet;
import jetbrains.mps.make.facet.ITarget;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.make.script.IScriptController;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.make.script.IOption;
import jetbrains.mps.make.script.IQuery;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.script.IPropertiesPool;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.make.IMakeService;
import java.util.concurrent.Future;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.smodel.resources.ModelsToResources;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.resources.CResource;
import javax.swing.SwingUtilities;
import java.util.concurrent.ExecutionException;
import jetbrains.mps.compiler.IClassesData;
import jetbrains.mps.generator.generationTypes.InMemoryJavaGenerationHandler;
import jetbrains.mps.reloading.CompositeClassPathItem;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.ide.generator.GeneratorUIFacade;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelInternal;

public class EmbeddableEditorUtils {
  private SRepository myRepository;
  private SModel myModel;
  private IOperationContext myContext;
  private SNode myNode;


  public void make(final Set<IClassPathItem> classPath) {

    myRepository.getModelAccess().runWriteAction(new Runnable() {
      public void run() {
        TemporaryModels.getInstance().addMissingModuleImports(myModel);
      }
    });

    final IScript scr = new ScriptBuilder().withFacetNames(new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("jetbrains.mps.make.facets.JavaCompile"), new IFacet.Name("jetbrains.mps.make.facets.Make")).withFinalTarget(new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compileToMemory")).toScript();


    ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {
      @Override
      public void run() {
        IScriptController ctl = new IScriptController.Stub(new IConfigMonitor.Stub() {
          @Override
          public <T extends IOption> T relayQuery(IQuery<T> query) {
            return query.defaultOption();
          }
        }, new IJobMonitor.Stub()) {
          @Override
          public void setup(IPropertiesPool ppool) {
            super.setup(ppool);
            Tuples._1<Iterable<IClassPathItem>> params = (Tuples._1<Iterable<IClassPathItem>>) ppool.properties(new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compileToMemory"), Object.class);
            if (params != null) {
              params._0(classPath);
            }
          }
        };

        MakeSession session = new MakeSession(myContext, null, true);
        if (IMakeService.INSTANCE.get().openNewSession(session)) {
          Future<IResult> future = IMakeService.INSTANCE.get().make(session, new ModelsToResources(myContext, Sequence.<SModel>singleton(myModel)).resources(false), scr, ctl);
          try {
            IResult result = future.get();
            if (result.isSucessful()) {
              final CResource out = (CResource) Sequence.fromIterable(result.output()).first();
              SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                  processClassesData(out.classes());
                }
              });
            }
          } catch (InterruptedException ignore) {
          } catch (ExecutionException ignore) {
          }
        }
      }
    });
  }

  protected void processClassesData(IClassesData cd) {
  }

  @Deprecated
  public GenerationResult generate(final Set<IClassPathItem> additionalClasspath) {
    if (myNode == null) {
      return null;
    }

    InMemoryJavaGenerationHandler handler = new InMemoryJavaGenerationHandler(false, false) {
      @Override
      public boolean canHandle(SModel inputModel) {
        return inputModel != null;
      }

      @Override
      protected CompositeClassPathItem getClassPath(Set<SModule> contextModules) {
        CompositeClassPathItem result = super.getClassPath(contextModules);
        for (IClassPathItem item : additionalClasspath) {
          result.add(item);
        }
        return result;
      }
    };
    boolean successful = GeneratorUIFacade.getInstance().generateModels(myContext, ListSequence.fromListAndArray(new ArrayList<SModel>(), myModel), handler, true, true);
    return new GenerationResult(myNode, myContext, myModel, handler, successful);
  }

  public void addLanguageStructureModel(final Language language) {
    myRepository.getModelAccess().executeCommand(new Runnable() {
      public void run() {
        SModelReference ref = (SModelReference) language.getStructureModelDescriptor().getReference();
        ((SModelInternal) myModel).addModelImport(ref, false);
      }
    });
  }

  public void addLanguage(final Language language) {
    myRepository.getModelAccess().runWriteAction(new Runnable() {
      public void run() {
        ((SModelInternal) myModel).addLanguage(language.getModuleReference());
      }
    });
  }

  public void addModel(final SModelReference model) {
    myRepository.getModelAccess().runWriteAction(new Runnable() {
      public void run() {
        ((SModelInternal) myModel).addModelImport(model, false);
      }
    });
  }
}
