package jetbrains.mps.ide.embeddableEditor;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.script.ScriptBuilder;
import jetbrains.mps.make.facet.IFacet;
import jetbrains.mps.make.facet.ITarget;
import java.util.concurrent.Future;
import com.intellij.openapi.application.ApplicationManager;
import java.util.concurrent.Callable;
import jetbrains.mps.make.script.IScriptController;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.make.script.IOption;
import jetbrains.mps.make.script.IQuery;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.make.IMakeService;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.smodel.resources.ModelsToResources;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.concurrent.ExecutionException;

public class MakeUtils {
  public static boolean make(SRepository repo, final IOperationContext context, final SModel model) {
    // todo: move out from embeddableEditor 
    // <node> 

    final IScript scr = new ScriptBuilder().withFacetNames(new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("jetbrains.mps.make.facets.JavaCompile"), new IFacet.Name("jetbrains.mps.make.facets.ReloadClasses"), new IFacet.Name("jetbrains.mps.make.facets.Make")).withFinalTarget(new ITarget.Name("jetbrains.mps.make.facets.Make.make")).toScript();

    Future<Boolean> data = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Boolean>() {
      public Boolean call() throws Exception {
        IScriptController ctl = new IScriptController.Stub(new IConfigMonitor.Stub() {
          @Override
          public <T extends IOption> T relayQuery(IQuery<T> query) {
            return query.defaultOption();
          }
        }, new IJobMonitor.Stub());

        MakeSession session = new MakeSession(context, null, true);
        if (IMakeService.INSTANCE.get().openNewSession(session)) {
          Future<IResult> future = IMakeService.INSTANCE.get().make(session, new ModelsToResources(context, Sequence.<SModel>singleton(model)).resources(false), scr, ctl);
          IResult result = future.get();
          return result.isSucessful();
        }

        return false;
      }
    });

    try {
      return data.get();
    } catch (ExecutionException e) {
      // log 
      return false;
    } catch (InterruptedException e) {
      // log 
      return false;
    }
  }
}
