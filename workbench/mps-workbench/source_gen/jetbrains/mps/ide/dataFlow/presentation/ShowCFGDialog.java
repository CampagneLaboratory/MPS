package jetbrains.mps.ide.dataFlow.presentation;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import javax.swing.JScrollPane;
import jetbrains.mps.smodel.IOperationContext;
import com.intellij.openapi.project.Project;
import com.intellij.ui.ScrollPaneFactory;
import java.awt.event.MouseEvent;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import java.awt.Color;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import javax.swing.Action;
import jetbrains.mps.smodel.SNodePointer;
import javax.swing.Scrollable;
import java.awt.BorderLayout;
import java.awt.event.MouseAdapter;
import java.awt.Graphics;
import java.awt.Dimension;
import java.awt.Rectangle;

public class ShowCFGDialog extends DialogWrapper {
  private JScrollPane myScrollPane;
  private ShowCFGDialog.MyComponent myComponent;
  private ControlFlowGraph<InstructionWrapper> myControlFlowGraph;

  public ShowCFGDialog(ControlFlowGraph<InstructionWrapper> graph, final IOperationContext operationContext, Project project) {
    super(project);
    this.myComponent = new ShowCFGDialog.MyComponent();
    this.myScrollPane = ScrollPaneFactory.createScrollPane(myComponent);
    this.myScrollPane.setBackground(this.getBackground());
    this.myComponent.setFont(this.myComponent.getFont().deriveFont(10.0f));
    this.myControlFlowGraph = graph;
    graph.setComponent(myComponent);
    graph.relayout();
    this.myControlFlowGraph.addBlockListener(new IBlockListener() {
      public void mousePressed(MouseEvent event, final IBlock block) {
        ModelAccess.instance().runWriteInEDT(new Runnable() {
          public void run() {
            SNode node = check_wx2hhz_a0a0a0a0a0a0a0a8a0(block.getSourceNode());
            if (node != null) {
              NavigationSupport.getInstance().openNode(operationContext, node, true, true);
            }
          }
        });
      }
    });
    init();
  }

  public Color getBackground() {
    return Color.LIGHT_GRAY;
  }

  @Nullable
  protected JComponent createCenterPanel() {
    return myScrollPane;
  }

  protected Action[] createActions() {
    return new Action[0];
  }

  private static SNode check_wx2hhz_a0a0a0a0a0a0a0a8a0(SNodePointer checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getNode();
    }
    return null;
  }

  private class MyComponent extends JComponent implements Scrollable {
    public MyComponent() {
      this.setLayout(new BorderLayout());
      this.addMouseListener(new MouseAdapter() {
        public void mousePressed(MouseEvent e) {
          ShowCFGDialog.this.myControlFlowGraph.processMousePressed(e);
        }
      });
    }

    public Color getBackground() {
      return ShowCFGDialog.this.getBackground();
    }

    public void paint(Graphics g) {
      g.setColor(this.getBackground());
      g.fillRect(0, 0, this.getWidth(), this.getHeight());
      ShowCFGDialog.this.myControlFlowGraph.paint(g);
    }

    public Dimension getPreferredScrollableViewportSize() {
      return this.getPreferredSize();
    }

    public Dimension getPreferredSize() {
      return new Dimension(ShowCFGDialog.this.myControlFlowGraph.getWidth(), ShowCFGDialog.this.myControlFlowGraph.getHeight());
    }

    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {
      return 20;
    }

    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {
      return visibleRect.height;
    }

    public boolean getScrollableTracksViewportWidth() {
      return false;
    }

    public boolean getScrollableTracksViewportHeight() {
      return false;
    }
  }
}
