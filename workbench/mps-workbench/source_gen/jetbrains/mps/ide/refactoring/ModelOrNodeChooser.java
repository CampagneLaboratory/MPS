package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import com.intellij.ui.components.JBScrollPane;
import jetbrains.mps.ide.platform.refactoring.ModelElementTargetChooser;
import jetbrains.mps.ide.projectPane.logicalview.ProjectTree;
import jetbrains.mps.ide.projectPane.logicalview.ProjectTreeFindHelper;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.ide.ui.tree.MPSTreeNode;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.ui.smodel.SNodeTreeNode;
import jetbrains.mps.ide.ui.smodel.SModelTreeNode;
import javax.swing.JComponent;

public class ModelOrNodeChooser extends JBScrollPane implements ModelElementTargetChooser {
  private ProjectTree myTree;
  private ProjectTreeFindHelper myHelper = new ProjectTreeFindHelper() {
    @Override
    protected ProjectTree getTree() {
      return ModelOrNodeChooser.this.myTree;
    }
  };

  /*package*/ ModelOrNodeChooser(Project project, final Object initialValue) {
    super();
    myTree = new ProjectTree(project);
    setViewportView(myTree);
    ThreadUtils.runInUIThreadNoWait(new Runnable() {
      public void run() {
        myTree.rebuildNow();
        myTree.runWithoutExpansion(new Runnable() {
          public void run() {
            MPSTreeNode treeNode = null;
            if (initialValue instanceof SNode) {
              treeNode = myHelper.findMostSuitableSNodeTreeNode(((SNode) initialValue));
            } else if (initialValue instanceof SModel) {
              treeNode = myHelper.findMostSuitableModelTreeNode(((SModel) initialValue));
            }
            if (treeNode == null) {
              return;
            }
            myTree.selectNode(treeNode);
          }
        });
      }
    });
  }

  @Override
  public Object getSelectedObject() {
    Object selection = myTree.getSelectionPath().getLastPathComponent();
    Object result = null;
    if (selection instanceof SNodeTreeNode) {
      result = ((SNodeTreeNode) selection).getSNode();
    } else if (selection instanceof SModelTreeNode) {
      result = ((SModelTreeNode) selection).getModel();
    }
    return result;
  }

  @Override
  public JComponent getComponent() {
    return this;
  }
}
