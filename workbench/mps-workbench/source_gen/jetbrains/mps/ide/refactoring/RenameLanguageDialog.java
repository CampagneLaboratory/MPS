package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import jetbrains.mps.ide.platform.refactoring.RenameDialog;
import javax.swing.JCheckBox;
import jetbrains.mps.smodel.Language;
import com.intellij.openapi.project.Project;
import java.awt.HeadlessException;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import javax.swing.JComponent;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import jetbrains.mps.smodel.MPSModuleRepository;
import javax.lang.model.SourceVersion;
import jetbrains.mps.refactoring.renameLanguage.LanguageRenamer;
import java.util.Set;
import java.util.LinkedHashSet;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.generator.GenParameters;
import jetbrains.mps.project.structure.project.testconfigurations.ModuleTestConfiguration;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.project.structure.project.testconfigurations.IllegalGeneratorConfigurationException;
import jetbrains.mps.project.ModuleContext;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.make.IMakeService;
import jetbrains.mps.smodel.resources.ModelsToResources;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelDescriptor;

public class RenameLanguageDialog extends RenameDialog {
  private JCheckBox myRegenerateLanguage;
  private Language myLanguage;
  private Project myProject;

  public RenameLanguageDialog(Project project, Language language) throws HeadlessException {
    super(project, language.getModuleFqName(), "language");
    myLanguage = language;
    myProject = project;
    setTitle("Rename Language");

    myRegenerateLanguage.getModel().setSelected(ModelAccess.instance().runReadAction(new Computable<Boolean>() {
      @Override
      public Boolean compute() {
        return !(myLanguage.isBootstrap());
      }
    }));
  }

  @Override
  protected JComponent createNorthPanel() {
    super.createNorthPanel();
    myRegenerateLanguage = new JCheckBox("Rebuild Language");
    GridBagConstraints c = new GridBagConstraints();
    c.gridx = 0;
    c.gridy = 2;
    c.insets = new Insets(0, 8, 0, 8);
    c.anchor = GridBagConstraints.FIRST_LINE_START;
    myPanel.add(myRegenerateLanguage, c);
    return myPanel;
  }

  @Override
  protected void doRefactoringAction() {
    final boolean needToRegenerate = myRegenerateLanguage.getModel().isSelected();

    final String fqName = getCurrentValue();
    if (MPSModuleRepository.getInstance().getModuleByFqName(fqName) != null) {
      setErrorText("Duplicate language name");
      return;
    }
    if (!((SourceVersion.isName(fqName)))) {
      setErrorText("Language namespace should be valid Java package");
      return;
    }
    final LanguageRenamer renamer = new LanguageRenamer(myProject, myLanguage, fqName);
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        renamer.rename(needToRegenerate);
        renamer.update();
      }
    });
    if (needToRegenerate) {
      final Set<Language> langs = new LinkedHashSet<Language>();
      ModelAccess.instance().runReadAction(new Runnable() {
        @Override
        public void run() {
          langs.add(myLanguage);
          langs.addAll(ModuleRepositoryFacade.getInstance().getAllExtendingLanguages(myLanguage));
        }
      });
      for (final Language l : langs) {
        GenParameters params = ModelAccess.instance().runReadAction(new Computable<GenParameters>() {
          @Override
          public GenParameters compute() {
            ModuleTestConfiguration languageConfig = new ModuleTestConfiguration();
            languageConfig.setModuleRef(l.getModuleReference());
            languageConfig.setName("tmp");
            try {
              return languageConfig.getGenParams(myProject.getComponent(MPSProject.class), true);
            } catch (IllegalGeneratorConfigurationException e) {
              return null;
            }
          }
        });
        if (params == null) {
          setErrorText("Rebuild configuration is invalid");
          return;
        }
        ModuleContext context = new ModuleContext(myLanguage, ProjectHelper.toMPSProject(myProject));
        MakeSession sess = new MakeSession(context);
        if (IMakeService.INSTANCE.get().openNewSession(sess)) {
          IMakeService.INSTANCE.get().make(sess, new ModelsToResources(context, ListSequence.fromListWithValues(new ArrayList<SModel>(), (Iterable<SModelDescriptor>) params.getModelDescriptors())).resources(false));
        }
        //         GeneratorUIFacade.getInstance().generateModels(new ModuleContext(myLanguage, myProject), params.getModelDescriptors(), GeneratorUIFacade.getInstance().getDefaultGenerationHandler(), true, false); 
      }
    }
    super.doRefactoringAction();
  }
}
