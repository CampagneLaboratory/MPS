package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.refactoring.framework.IRefactoring;
import com.intellij.openapi.actionSystem.KeyboardShortcut;
import javax.swing.KeyStroke;
import com.intellij.openapi.keymap.KeymapManager;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.project.ProjectHelper;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import com.intellij.openapi.actionSystem.DataKey;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.IModule;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.refactoring.framework.RefactoringUtil;
import jetbrains.mps.refactoring.framework.OldRefactoringAdapter;

public class GenericRefactoringAction extends BaseAction {
  private IRefactoring myRefactoring;

  public GenericRefactoringAction(IRefactoring refactoring) {
    super(("".equals(refactoring.getUserFriendlyName()) ?
      refactoring.getClass().getName() :
      refactoring.getUserFriendlyName()
    ));
    myRefactoring = refactoring;
    String keyStroke = myRefactoring.getKeyStroke();
    if (keyStroke != null && keyStroke.length() != 0) {
      KeyboardShortcut shortcut = new KeyboardShortcut(KeyStroke.getKeyStroke(keyStroke), null);
      KeymapManager.getInstance().getKeymap(KeymapManager.DEFAULT_IDEA_KEYMAP).addShortcut(getActionId(), shortcut);
    }
    setExecuteOutsideCommand(true);
    setIsAlwaysVisible(false);
  }

  protected void doExecute(AnActionEvent e, Map<String, Object> _params) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SModelRepository.getInstance().saveAll();
      }
    });
    boolean isOneTarget = !(myRefactoring.getRefactoringTarget().allowMultipleTargets());
    final RefactoringContext context = new RefactoringContext(myRefactoring);
    context.setCurrentOperationContext(e.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    context.setSelectedNode(e.getData(MPSCommonDataKeys.NODE));
    context.setSelectedNodes(getNodes(e, isOneTarget));
    context.setSelectedModel(e.getData(MPSCommonDataKeys.CONTEXT_MODEL));
    context.setSelectedModels(getModels(e, isOneTarget));
    context.setSelectedModule(e.getData(MPSDataKeys.MODULE));
    context.setSelectedModules(getModules(e, isOneTarget));
    // noinspection ConstantConditions 
    context.setSelectedProject(ProjectHelper.toMPSProject(e.getData(PlatformDataKeys.PROJECT)));
    context.setCurrentScope(e.getData(MPSCommonDataKeys.SCOPE));
    new Thread() {
      public void run() {
        context.setRefactoring(myRefactoring);
        new RefactoringFacade().executeInThread(context);
      }
    }.start();
  }

  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder(500);
    res.append(GenericRefactoringAction.class.getName());
    res.append("#");
    res.append(GenericRefactoringAction.getRefactoringClassName(myRefactoring));
    return res.toString();
  }

  @NotNull
  private <T> List<T> getEntities(AnActionEvent e, boolean oneEntity, DataKey<T> keySingle, DataKey<List<T>> keyList) {
    T single = e.getData(keySingle);
    List<T> list = e.getData(keyList);
    List<T> res = new ArrayList<T>((list == null ?
      1 :
      list.size() + 1
    ));
    if (list != null) {
      res.addAll(list);
    }
    if (single != null && !(res.contains(single))) {
      res.add(single);
    }
    if (oneEntity && res.size() > 1) {
      res.clear();
    }
    return res;
  }

  @NotNull
  private List<SNode> getNodes(AnActionEvent e, boolean oneEntity) {
    return getEntities(e, oneEntity, MPSCommonDataKeys.NODE, MPSCommonDataKeys.NODES);
  }

  @NotNull
  private List<SModelDescriptor> getModels(AnActionEvent e, boolean oneEntity) {
    return getEntities(e, oneEntity, MPSCommonDataKeys.CONTEXT_MODEL, MPSCommonDataKeys.MODELS);
  }

  @NotNull
  private List<IModule> getModules(AnActionEvent e, boolean oneEntity) {
    return getEntities(e, oneEntity, MPSDataKeys.MODULE, MPSDataKeys.MODULES);
  }

  protected void doUpdate(AnActionEvent e, Map<String, Object> _params) {
    IRefactoringTarget refTarget = myRefactoring.getRefactoringTarget();
    boolean oneEntity = !(refTarget.allowMultipleTargets());
    List entities;
    switch (refTarget.getTarget()) {
      case NODE:
        entities = getNodes(e, oneEntity);
        break;
      case MODEL:
        entities = getModels(e, oneEntity);
        break;
      case MODULE:
        entities = getModules(e, oneEntity);
        break;
      default:
        throw new IllegalArgumentException("Wrong refactoring type " + refTarget.getTarget().getClass().getName());
    }
    boolean disabled = entities.isEmpty() || RefactoringUtil.getApplicability(myRefactoring, entities).lessThan(getMinApplicabilityLevel());
    setEnabledState(e.getPresentation(), !(disabled));
  }

  protected RefactoringUtil.Applicability getMinApplicabilityLevel() {
    return RefactoringUtil.Applicability.APPLICABLE;
  }

  private static String getRefactoringClassName(IRefactoring refactoring) {
    if (refactoring instanceof OldRefactoringAdapter) {
      return ((OldRefactoringAdapter) refactoring).getRefactoringClassName();
    } else {
      return refactoring.getClass().getName();
    }
  }
}
