package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import jetbrains.mps.ide.platform.refactoring.RenameDialog;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JCheckBox;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import java.awt.HeadlessException;
import javax.swing.JComponent;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import javax.lang.model.SourceVersion;
import jetbrains.mps.smodel.SModelStereotype;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.workbench.actions.model.DeleteModelHelper;
import jetbrains.mps.refactoring.renameModel.ModelRenamer;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;

public class RenameModelDialog extends RenameDialog {
  private JPanel myMainPanel;
  private JTextField myModelNameField;
  private JCheckBox myUpdateAllReferences;
  private Project myProject;
  private EditableSModelDescriptor myModelDescriptor;

  public RenameModelDialog(Project project, EditableSModelDescriptor sm) throws HeadlessException {
    super(project, sm.getSModelReference().getSModelFqName().toString(), "model");
    myProject = project;
    myModelDescriptor = sm;
    setTitle("Rename Model");
  }

  @Override
  protected JComponent createNorthPanel() {
    super.createNorthPanel();
    myUpdateAllReferences = new JCheckBox("Update All References");
    myUpdateAllReferences.getModel().setSelected(true);
    GridBagConstraints c = new GridBagConstraints();
    c.gridx = 0;
    c.gridy = 2;
    c.insets = new Insets(0, 8, 0, 8);
    c.anchor = GridBagConstraints.FIRST_LINE_START;
    myPanel.add(myUpdateAllReferences, c);
    return myPanel;
  }

  @Override
  protected void doRefactoringAction() {
    final String fqName = getCurrentValue();
    if (!((SourceVersion.isName(SModelStereotype.withoutStereotype(fqName))))) {
      setErrorText("Model name should be valid Java package");
      return;
    }
    if (!((fqName.equals(myModelDescriptor.getSModelReference().getSModelFqName())))) {
      ApplicationManager.getApplication().runWriteAction(new Runnable() {
        @Override
        public void run() {
          DeleteModelHelper.deleteGeneratedFiles(myModelDescriptor);
        }
      });
      final ModelRenamer renamer = new ModelRenamer(myModelDescriptor, fqName, !(myUpdateAllReferences.getModel().isSelected()));
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          renamer.rename();
        }
      });
      ProgressManager.getInstance().run(new Task.Modal(myProject, "Updating model usages...", false) {
        @Override
        public void run(@NotNull ProgressIndicator indicator) {
          indicator.pushState();
          indicator.setIndeterminate(true);
          try {
            ModelAccess.instance().runWriteAction(new Runnable() {
              public void run() {
                renamer.updateReferencesIfNeeded();
              }
            });
          } finally {
            indicator.popState();
          }
        }
      });
    }

    super.doRefactoringAction();
  }
}
