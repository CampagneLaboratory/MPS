package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import jetbrains.mps.ide.platform.refactoring.RefactoringFacade;
import com.intellij.openapi.components.ApplicationComponent;
import jetbrains.mps.ide.MPSCoreComponents;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.refactoring.framework.IRefactoring;
import java.awt.Frame;
import jetbrains.mps.ide.project.ProjectHelper;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.refactoring.framework.RefactoringOptionsDialog;
import jetbrains.mps.smodel.ModelAccess;
import javax.swing.SwingUtilities;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.project.Project;
import jetbrains.mps.project.ProjectOperationContext;
import javax.swing.JOptionPane;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.ide.DataManager;


/**
 * * Evgeny Gryaznov, Aug 25, 2010
 */
public class RefactoringFacadeImpl extends RefactoringFacade implements ApplicationComponent {
  public RefactoringFacadeImpl(MPSCoreComponents coreComponents) {
  }

  public void initComponent() {
    RefactoringFacade.setInstance(this);
  }

  public void disposeComponent() {
    RefactoringFacade.setInstance(null);
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return "MPS Workbench-specific Refactoring Facade implementation";
  }

  public void executeInThread(final RefactoringContext refactoringContext) {
    final boolean[] success = new boolean[1];
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        success[0] = refactoringContext.getRefactoring().init(refactoringContext);
      }
    });
    if (!(success[0])) {
      return;
    }
    SearchResults usages = findUsages(refactoringContext);
    if (usages == null) {
      return;
    }
    refactoringContext.setUsages(usages);
    if (!(usages.getSearchResults().isEmpty())) {
      showRefactoring(refactoringContext, usages);
    } else {
      doExecuteWithDialog(refactoringContext);
    }

  }

  public void execute(final RefactoringContext refactoringContext) {
    new Thread(new Runnable() {
      public void run() {
        executeInThread(refactoringContext);
      }
    }).start();
  }

  private void doExecuteWithDialog(final RefactoringContext refactoringContext) {
    final boolean[] cancelled = new boolean[]{true};
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        IRefactoring refactoring = refactoringContext.getRefactoring();
        Frame mainFrame = ProjectHelper.toMainFrame(refactoringContext.getCurrentOperationContext().getProject());
        List<SModel> modelsToGenerate = getModelsToGenerate(refactoring, refactoringContext);
        RefactoringOptionsDialog dialog = new RefactoringOptionsDialog(mainFrame, refactoringContext, refactoring, !(modelsToGenerate.isEmpty()));
        if (dialog.needToBeShown()) {
          dialog.showDialog();
          cancelled[0] = dialog.isCancelled();
        } else {
          cancelled[0] = false;
        }
      }
    });
    if (cancelled[0]) {
      return;
    }
    doExecute(refactoringContext);
  }

  private void showRefactoring(final RefactoringContext refactoringContext, final SearchResults searchResults) {
    ThreadUtils.runInUIThreadNoWait(new Runnable() {
      public void run() {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            RefactoringView refactorintView = refactoringContext.getCurrentOperationContext().getComponent(RefactoringView.class);
            RefactoringViewAction okAction = new RefactoringViewAction() {
              public void performAction(final RefactoringViewItem refactoringViewItem) {
                new Thread() {
                  public void run() {
                    doExecute(refactoringContext);
                    SwingUtilities.invokeLater(new Runnable() {
                      public void run() {
                        refactoringViewItem.close();
                      }
                    });
                  }
                }.start();
              }
            };
            List<SModel> modelsToGenerate = getModelsToGenerate(refactoringContext.getRefactoring(), refactoringContext);
            refactorintView.showRefactoringView(refactoringContext, okAction, searchResults, !(modelsToGenerate.isEmpty()));
          }
        });
      }
    });
  }

  private SearchResults findUsages(final RefactoringContext refactoringContext) {
    // returns null if should be interrupted after the call 
    final SearchResults[] result = new SearchResults[]{null};
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        ProgressManager.getInstance().run(new Task.Modal(ProjectHelper.toIdeaProject(refactoringContext.getCurrentOperationContext().getProject()), "Finding usages...", false) {
          public void run(@NotNull ProgressIndicator indicator) {
            indicator.setIndeterminate(true);
            ModelAccess.instance().runReadAction(new Runnable() {
              public void run() {
                try {
                  Project project = refactoringContext.getSelectedProject();
                  refactoringContext.setCurrentOperationContext(new ProjectOperationContext(project));
                  IRefactoring refactoring = refactoringContext.getRefactoring();
                  result[0] = refactoring.getAffectedNodes(refactoringContext);
                  if (result[0] == null) {
                    result[0] = new SearchResults();
                  }
                } catch (Throwable t) {
                  myLog.error(t);
                }
              }
            });
          }
        });
        if (result[0] != null) {
          return;
        }
        int promptResult = JOptionPane.showConfirmDialog(MPSCommonDataKeys.FRAME.getData(DataManager.getInstance().getDataContext()), "An exception occurred during searching affected nodes. Do you want to continue anyway?", "Exception", JOptionPane.YES_NO_OPTION);
        if (promptResult == JOptionPane.YES_OPTION) {
          result[0] = new SearchResults();
        }
      }
    });
    return result[0];
  }
}
