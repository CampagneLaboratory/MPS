package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import jetbrains.mps.ide.platform.refactoring.RefactoringAccess;
import com.intellij.openapi.components.ApplicationComponent;
import jetbrains.mps.ide.MPSCoreComponents;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.platform.refactoring.ModelElementTargetChooser;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewAction;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import java.awt.Frame;
import jetbrains.mps.refactoring.framework.IRefactoring;

public class RefactoringAccessImpl extends RefactoringAccess implements ApplicationComponent {
  public RefactoringAccessImpl(MPSCoreComponents coreComponents) {
  }

  public void initComponent() {
    RefactoringAccess.setInstance(this);
  }

  public void disposeComponent() {
    RefactoringAccess.setInstance(null);
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return "MPS Workbench-specific Refactoring Access implementation";
  }

  public ModelElementTargetChooser createTargetChooser(Project project, SModelDescriptor model) {
    return new ModelOrNodeChooser(project, model);
  }

  public ModelElementTargetChooser createTargetChooser(Project project, SNode node) {
    return new ModelOrNodeChooser(project, node);
  }

  public void showRefactoringView(Project project, RefactoringViewAction callback, SearchResults searchResults, boolean hasModelsToGenerate, String name) {
    RefactoringView refactoringView = project.getComponent(RefactoringView.class);
    refactoringView.showRefactoringView(project, callback, searchResults, hasModelsToGenerate, name);
  }

  public void showRefactoringView(RefactoringContext refactoringContext, RefactoringViewAction callback, SearchResults searchResults, boolean hasModelsToGenerate, String name) {
    RefactoringView refactoringView = refactoringContext.getCurrentOperationContext().getComponent(RefactoringView.class);
    refactoringView.showRefactoringView(refactoringContext, callback, searchResults, hasModelsToGenerate);
  }

  public boolean showRefactoringDialog(Frame mainFrame, RefactoringContext refactoringContext, IRefactoring refactoring, boolean hasModelsToGenerate) {
    return showRefactoringDialogBase(mainFrame, refactoringContext, refactoring, hasModelsToGenerate);
  }
}
