package jetbrains.mps.ide.dependencyViewer;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.ModelAccess;

public class Scope {
  private List<SModule> myModules;
  private List<SModel> myModels;
  private List<SNode> myRoots;

  public Scope() {
    myModules = ListSequence.fromList(new ArrayList<SModule>());
    myModels = ListSequence.fromList(new ArrayList<SModel>());
    myRoots = ListSequence.fromList(new ArrayList<SNode>());
  }

  private int getNumRoots(SModel model) {
    return Sequence.fromIterable(((Iterable<jetbrains.mps.smodel.SNode>) model.getRootNodes())).count();
  }

  public boolean contains(SNode node) {
    if (node == null) {
      return false;
    }
    SNode root = node.getTopmostAncestor();
    if (ListSequence.fromList(myRoots).contains(root)) {
      return true;
    }
    if (ListSequence.fromList(myRoots).contains(node)) {
      return true;
    }
    SModelDescriptor descriptor = ((jetbrains.mps.smodel.SNode) root).getModel().getModelDescriptor();
    if (ListSequence.fromList(myModels).contains(descriptor)) {
      return true;
    }
    if (ListSequence.fromList(myModules).contains(descriptor.getModule())) {
      return true;
    }
    return false;
  }

  public boolean contains(SModel model) {
    if (model == null) {
      return false;
    }
    if (ListSequence.fromList(myModels).contains(model)) {
      return true;
    }
    if (ListSequence.fromList(myModules).contains(model.getModule())) {
      return true;
    }
    return false;
  }

  public void add(@Nullable SModule module) {
    if (module == null) {
      return;
    }
    ListSequence.fromList(myModules).addElement(module);
  }

  public void add(@Nullable final SModel model) {
    if (model == null) {
      return;
    }
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        if (!(contains(model))) {
          ListSequence.fromList(myModels).addElement(model);
        }
      }
    });
  }

  public void add(@Nullable final SNode root) {
    if (root == null) {
      return;
    }
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        if (!(contains(root))) {
          ListSequence.fromList(myRoots).addElement(root);
        }
      }
    });
  }

  public List<SModel> getModels() {
    return myModels;
  }

  public List<SModule> getModules() {
    return myModules;
  }

  public List<SNode> getRoots() {
    return myRoots;
  }

  public int getNumRoots() {
    int result = 0;
    for (SModule module : myModules) {
      result += getNumRoots(module);
    }
    for (SModel model : myModels) {
      result += getNumRoots(model);
    }
    result += ListSequence.fromList(myRoots).count();
    return result;
  }

  public boolean isEmpty() {
    return ListSequence.fromList(myModels).isEmpty() && ListSequence.fromList(myModules).isEmpty() && ListSequence.fromList(myRoots).isEmpty();
  }

  private int getNumRoots(SModule module) {
    int result = 0;
    for (SModel model : module.getModels()) {
      result += getNumRoots(model);
    }
    return result;
  }

  public String getPresentation() {
    StringBuilder sb = new StringBuilder();
    if (ListSequence.fromList(myModules).count() > 0) {
      sb.append(getPresentation(myModules, "module"));
    }
    if (ListSequence.fromList(myModels).count() > 0) {
      if (sb.length() > 0) {
        sb.append(" and ");
      }
      if ((int) ListSequence.fromList(myModels).count() == 1) {
        sb.append("model " + ListSequence.fromList(myModels).getElement(0).getModelName());
      } else {
        sb.append(ListSequence.fromList(myModels).count() + " models");
      }
    }
    if (ListSequence.fromList(myRoots).count() > 0) {
      if (sb.length() > 0) {
        sb.append(" and ");
      }
      sb.append(getPresentation(myRoots, "node"));
    }
    return sb.toString();
  }

  private <T> String getPresentation(List<T> list, String elementType) {
    if ((int) ListSequence.fromList(list).count() == 0) {
      return "";
    }
    if ((int) ListSequence.fromList(list).count() == 1) {
      return elementType + " " + ListSequence.fromList(list).getElement(0);
    }
    return ListSequence.fromList(list).count() + " " + elementType + "s";
  }
}
