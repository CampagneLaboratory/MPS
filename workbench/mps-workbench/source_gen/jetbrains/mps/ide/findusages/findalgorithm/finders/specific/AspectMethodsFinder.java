package jetbrains.mps.ide.findusages.findalgorithm.finders.specific;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.ide.findusages.model.SearchResults;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.progress.ProgressMonitor;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.ide.findusages.model.holders.IHolder;
import org.jetbrains.annotations.NotNull;
import org.jdom.Element;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.findusages.CantLoadSomethingException;
import jetbrains.mps.ide.findusages.CantSaveSomethingException;

public class AspectMethodsFinder implements IFinder {
  public AspectMethodsFinder() {
  }

  @Override
  public SearchResults<SNode> find(SearchQuery query, ProgressMonitor monitor) {
    final AspectMethodsFinder.AspectMethodQueryData data = (AspectMethodsFinder.AspectMethodQueryData) query.getObjectHolder().getObject();
    final List<SModel> applicableModelDescriptors = new ArrayList<SModel>();
    ModelAccess.instance().runReadAction(new Runnable() {
      @Override
      public void run() {
        for (final SModelDescriptor descriptor : SModelRepository.getInstance().getModelDescriptorsByModelName(data.myModelName)) {
          if (!(SModelStereotype.isStubModelStereotype(descriptor.getStereotype()))) {
            applicableModelDescriptors.add(descriptor.getSModel());
          }
        }
      }
    });
    SearchResults<SNode> res = new SearchResults<SNode>();
    for (SModel model : applicableModelDescriptors) {
      for (SNode root : model.roots()) {
        findNodes(res, root, data.myMethodName);
      }
    }
    return res;
  }

  private void findNodes(SearchResults<SNode> res, SNode node, String methodName) {
    for (String value : SNodeOperations.getProperties(node).values()) {
      if (methodName.endsWith(value)) {
        res.getSearchResults().add(new SearchResult<SNode>(node, "Aspect methods"));
        break;
      }
    }
    for (SNode child : SNodeOperations.getChildren(node)) {
      findNodes(res, child, methodName);
    }
  }

  public String getDescription() {
    return "aspect methods";
  }

  public static class AspectMethodsHolder implements IHolder<AspectMethodsFinder.AspectMethodQueryData> {
    private static final String METHOD_NAME = "method_name";
    private static final String MODEL_NAME = "model_name";
    private AspectMethodsFinder.AspectMethodQueryData myData = new AspectMethodsFinder.AspectMethodQueryData();

    public AspectMethodsHolder() {
    }

    public AspectMethodsHolder(String modelName, String methodName) {
      myData.myModelName = modelName;
      myData.myMethodName = methodName;
    }

    @Override
    public AspectMethodsFinder.AspectMethodQueryData getObject() {
      return myData;
    }

    @NotNull
    @Override
    public String getCaption() {
      return myData.myMethodName + " in " + myData.myModelName;
    }

    @Override
    public void read(Element element, Project project) throws CantLoadSomethingException {
      myData.myModelName = element.getAttributeValue(MODEL_NAME);
      myData.myMethodName = element.getAttributeValue(METHOD_NAME);
    }

    @Override
    public void write(Element element, Project project) throws CantSaveSomethingException {
      element.setAttribute(MODEL_NAME, myData.myModelName);
      element.setAttribute(METHOD_NAME, myData.myMethodName);
    }
  }

  public static class AspectMethodQueryData {
    public String myModelName = "";
    public String myMethodName = "";

    public AspectMethodQueryData() {
    }
  }
}
