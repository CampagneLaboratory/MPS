package jetbrains.mps.ide.findusages.caches;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import com.intellij.psi.impl.cache.impl.id.IdTableBuilding;
import jetbrains.mps.ide.projectPane.fileSystem.MPSWorkbenchFileTypeFactory;
import jetbrains.mps.smodel.SNodeId.Foreign;
import org.jetbrains.annotations.NotNull;
import com.intellij.psi.impl.cache.impl.id.FileTypeIdIndexer;
import java.util.Map;
import com.intellij.psi.impl.cache.impl.id.IdIndexEntry;
import com.intellij.util.indexing.FileContent;
import java.util.HashMap;
import org.objectweb.asm.ClassReader;
import jetbrains.mps.baseLanguage.javastub.asm.ASMClass;
import jetbrains.mps.baseLanguage.javastub.CacheClassifierUpdater;
import jetbrains.mps.baseLanguage.javastub.SReferenceHandler;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.baseLanguage.javastub.CacheClassifierLoader;
import jetbrains.mps.reloading.ClassBytesProvider;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.util.NameUtil;

public class StubModelsIndexer implements ApplicationComponent {
  public StubModelsIndexer() {
  }

  public void initComponent() {
    IdTableBuilding.registerIdIndexer(MPSWorkbenchFileTypeFactory.CLASS_FILE_TYPE, new StubModelsIndexer.MyFileTypeIdIndexer());
  }

  public void disposeComponent() {
  }

  @NotNull
  public String getComponentName() {
    return StubModelsIndexer.class.getSimpleName();
  }

  private static class MyFileTypeIdIndexer extends FileTypeIdIndexer {
    private MyFileTypeIdIndexer() {
    }

    @NotNull
    public Map<IdIndexEntry, Integer> map(FileContent inputData) {
      final HashMap<IdIndexEntry, Integer> result = new HashMap<IdIndexEntry, Integer>();
      final byte[] content = inputData.getContent();

      ClassReader reader = new ClassReader(inputData.getContent());
      final ASMClass ac = new ASMClass(reader);
      final String fqName = ac.getFqName();

      CacheClassifierUpdater updater = new CacheClassifierUpdater(false, new SReferenceHandler() {
        public SReference createSReference(SNode source, String pack, SNodeId targetNodeId, String role, String resolveInfo, String rootPresentation) {
          if (!(targetNodeId instanceof SNodeId.Foreign)) {
            return null;
          }
          result.put(new IdIndexEntry(((Foreign) targetNodeId).getId(), false), 0);
          return null;
        }
      });
      CacheClassifierLoader loader = new CacheClassifierLoader(new ClassBytesProvider() {
        @Nullable
        public byte[] getClass(String name) {
          assert fqName.endsWith(name);
          return content;
        }
      }, updater);

      loader.getClassifier(NameUtil.namespaceFromLongName(fqName), NameUtil.shortNameFromLongName(fqName));

      return result;
    }
  }
}
