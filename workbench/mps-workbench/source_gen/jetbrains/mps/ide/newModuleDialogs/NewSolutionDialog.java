package jetbrains.mps.ide.newModuleDialogs;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import jetbrains.mps.project.Project;
import jetbrains.mps.project.Solution;
import jetbrains.mps.ide.ui.dialogs.modules.NewSolutionSettings;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import jetbrains.mps.ide.newSolutionDialog.NewModuleUtil;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.project.MPSExtentions;

public class NewSolutionDialog extends DialogWrapper {

  private final Project myProject;
  private Solution myResult;
  private String myError = null;
  private NewSolutionSettings mySolutionSettings;


  public NewSolutionDialog(Project project) {
    super(ProjectHelper.toIdeaProject(project));
    setTitle("New Solution");
    setOKButtonText("&OK");
    setCancelButtonText("Ca&ncel");

    myProject = project;

    init();
  }



  @Nullable
  public JComponent createCenterPanel() {
    if (mySolutionSettings == null) {
      mySolutionSettings = new NewSolutionSettings((myProject != null ?
        myProject.getProjectFile().getParentFile().getAbsolutePath() :
        null
      )) {
        @Override
        protected void updateSolutionLocation() {
          super.updateSolutionLocation();
          if (mySolutionSettings != null) {
            check();
          }
        }
      };
    }
    return mySolutionSettings;
  }

  @Override
  protected void doOKAction() {
    if (!(check())) {
      return;
    }

    super.doOKAction();

    NewModuleUtil.runModuleCreation(ProjectHelper.toIdeaProject(myProject), new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        myResult = NewModuleUtil.createSolution(mySolutionSettings.getSolutionName(), mySolutionSettings.getSolutionLocation(), (MPSProject) myProject);
      }
    });
  }

  @Nullable
  @Override
  public JComponent getPreferredFocusedComponent() {
    return mySolutionSettings.getPreferredFocusedComponent();
  }




  public Solution getSolution() {
    return null;
  }

  @Nullable
  public String getError() {
    return myError;
  }

  private boolean check() {
    myError = NewModuleUtil.check(MPSExtentions.DOT_SOLUTION, mySolutionSettings.getSolutionName(), mySolutionSettings.getSolutionLocation());
    setErrorText(myError);
    return myError == null;
  }
}
