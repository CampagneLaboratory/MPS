package jetbrains.mps.ide.newModuleDialogs;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import jetbrains.mps.project.Project;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.ide.ui.dialogs.modules.NewLanguageSettings;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import jetbrains.mps.ide.newSolutionDialog.NewModuleUtil;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.project.MPSProject;
import java.io.IOException;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.logging.Logger;

public class NewLanguageDialog extends DialogWrapper {

  private final Project myProject;
  private Language myResult;
  private String myError = null;
  private NewLanguageSettings myLanguageSettings;


  public NewLanguageDialog(Project project) {
    super(ProjectHelper.toIdeaProject(project));
    setTitle("New Language");
    setOKButtonText("&OK");
    setCancelButtonText("Ca&ncel");

    myProject = project;

    init();
  }

  @Nullable
  protected JComponent createCenterPanel() {
    if (myLanguageSettings == null) {
      myLanguageSettings = new NewLanguageSettings((myProject != null ?
        myProject.getProjectFile().getParentFile().getAbsolutePath() :
        null
      )) {
        @Override
        protected void updateLanguageLocation() {
          super.updateLanguageLocation();
          if (myLanguageSettings != null) {
            check();
          }
        }
      };
    }
    return myLanguageSettings;
  }

  @Override
  protected void doOKAction() {
    if (!(check())) {
      return;
    }

    super.doOKAction();

    NewModuleUtil.runModuleCreation(ProjectHelper.toIdeaProject(myProject), new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        Language language = NewModuleUtil.createLanguage(myLanguageSettings.getLanguageName(), myLanguageSettings.getLanguageLocation(), (MPSProject) myProject);

        try {
          if (myLanguageSettings.isRuntimeSolutionNeeded()) {
            NewModuleUtil.createRuntimeSolution(language, myLanguageSettings.getLanguageLocation(), (MPSProject) myProject);
          }
          if (myLanguageSettings.isSandboxSolutionNeeded()) {
            NewModuleUtil.createSandboxSolution(language, myLanguageSettings.getLanguageLocation(), (MPSProject) myProject);
          }
        } catch (IOException e) {
          // todo: ! 
          LOG.error("Cannot create runtime / sandbox module", e);
        }

        myResult = language;
      }
    });
  }

  @Nullable
  @Override
  public JComponent getPreferredFocusedComponent() {
    return myLanguageSettings.getPreferredFocusedComponent();
  }



  public Language getLangauge() {
    return myResult;
  }

  private boolean check() {
    myError = NewModuleUtil.check(MPSExtentions.DOT_LANGUAGE, myLanguageSettings.getLanguageName(), myLanguageSettings.getLanguageLocation());
    setErrorText(myError);
    return myError == null;
  }

  private static Logger LOG = Logger.getLogger(NewLanguageDialog.class);
}
