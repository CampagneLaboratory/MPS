package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Priority;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Set;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.progress.EmptyProgressMonitor;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.ide.findusages.model.SearchResult;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class PrintIScopeAndIModuleMethodsUsages_Action extends BaseAction {
  private static final Icon ICON = null;

  public PrintIScopeAndIModuleMethodsUsages_Action() {
    super("Print IScope and IModule methods usages", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "PrintIScopeAndIModuleMethodsUsages", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      PrintIScopeAndIModuleMethodsUsages_Action.this.printMethodsUsages(SNodeOperations.getNode("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)", "~IScope"), _params);
      PrintIScopeAndIModuleMethodsUsages_Action.this.printMethodsUsages(SNodeOperations.getNode("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.project(MPS.Core/jetbrains.mps.project@java_stub)", "~IModule"), _params);
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "PrintIScopeAndIModuleMethodsUsages", t);
      }
    }
  }

  /*package*/ void printMethodsUsages(SNode classifier, final Map<String, Object> _params) {
    Set<SModule> projectModules = SetSequence.fromSet(new HashSet<SModule>());
    for (IModule module : ListSequence.fromList(((MPSProject) MapSequence.fromMap(_params).get("project")).getModules())) {
      SetSequence.fromSet(projectModules).addElement(module);
    }
    System.out.println("Method usages for " + classifier);
    for (SNode method : ListSequence.fromList(SLinkOperations.getTargets(classifier, "member", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
      }
    })) {
      // I use this logic with post-searching filtering because project scope contains transitive closure of project modules 
      SearchResults<SNode> result = FindUtils.getSearchResults(new EmptyProgressMonitor(), method, ((MPSProject) MapSequence.fromMap(_params).get("project")).getScope(), "jetbrains.mps.baseLanguage.findUsages.AllMethodUsages_Finder");
      List<SNode> projectResults = ListSequence.fromList(new ArrayList<SNode>());
      for (SearchResult<SNode> searchResult : ListSequence.fromList(result.getSearchResults())) {
        SNode node = searchResult.getObject();
        SModule module = node.getModel().getModule();
        if (SetSequence.fromSet(projectModules).contains(module)) {
          ListSequence.fromList(projectResults).addElement(node);
        }
      }
      System.out.println(method + " | " + ListSequence.fromList(projectResults).count());
    }
    System.out.println('\n');
  }

  protected static Logger LOG = LogManager.getLogger(PrintIScopeAndIModuleMethodsUsages_Action.class);
}
