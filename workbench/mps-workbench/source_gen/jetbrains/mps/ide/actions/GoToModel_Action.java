package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import com.intellij.featureStatistics.FeatureUsageTracker;
import jetbrains.mps.workbench.choose.models.BaseModelModel;
import com.intellij.navigation.NavigationItem;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.workbench.choose.models.BaseModelItem;
import jetbrains.mps.ide.projectPane.ProjectPane;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.util.Condition;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.util.ConditionalIterable;
import java.util.List;
import java.util.ArrayList;
import com.intellij.ide.util.gotoByName.ChooseByNamePopup;
import jetbrains.mps.workbench.goTo.ui.MpsPopupFactory;
import jetbrains.mps.workbench.goTo.NavigateCallback;
import com.intellij.openapi.application.ModalityState;
import jetbrains.mps.logging.Logger;

public class GoToModel_Action extends BaseAction {
  private static final Icon ICON = null;

  public GoToModel_Action() {
    super("Go to Model", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "GoToModel", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final Project project = event.getData(PlatformDataKeys.PROJECT);
      assert project != null;
      FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.goto.model");
      // PsiDocumentManager.getInstance(project).commitAllDocuments(); 
      BaseModelModel goToModelModel = new BaseModelModel(project) {
        @Override
        public NavigationItem doGetNavigationItem(final SModelReference modelReference) {
          return new BaseModelItem(modelReference) {
            @Override
            public void navigate(boolean requestFocus) {
              ProjectPane projectPane = ProjectPane.getInstance(project);
              SModel md = SModelRepository.getInstance().getModelDescriptor(modelReference);
              projectPane.selectModel(md, true);
            }
          };
        }

        @Override
        public SModelReference[] find(IScope scope) {
          Condition<SModel> cond = new Condition<SModel>() {
            @Override
            public boolean met(SModel modelDescriptor) {
              boolean rightStereotype = SModelStereotype.isUserModel(modelDescriptor) || SModelStereotype.isStubModelStereotype(SModelStereotype.getStereotype(modelDescriptor));
              boolean hasModule = modelDescriptor.getModule() != null;
              return rightStereotype && hasModule;
            }
          };
          ConditionalIterable<SModel> iter = new ConditionalIterable<SModel>(scope.getModelDescriptors(), cond);
          List<SModelReference> result = new ArrayList<SModelReference>();
          for (SModel md : iter) {
            result.add(md.getReference());
          }
          return result.toArray(new SModelReference[result.size()]);
        }
      };
      ChooseByNamePopup popup = MpsPopupFactory.createPackagePopup(project, goToModelModel, GoToModel_Action.this);
      popup.setShowListForEmptyPattern(true);

      popup.invoke(new NavigateCallback(), ModalityState.current(), true);
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "GoToModel", t);
    }
  }

  private static Logger LOG = Logger.getLogger(GoToModel_Action.class);
}
