package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Priority;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.facets.JavaModuleFacet;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.library.LibraryInitializer;
import com.intellij.ide.plugins.cl.PluginClassLoader;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.vfs.IFile;

public class SetPluginIdToCompileInIdeaModules_Action extends BaseAction {
  private static final Icon ICON = null;

  public SetPluginIdToCompileInIdeaModules_Action() {
    super("Set pluginId to compile in idea modules", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "SetPluginIdToCompileInIdeaModules", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      for (SModule module : MPSModuleRepository.getInstance().getModules()) {
        String pluginId = SetPluginIdToCompileInIdeaModules_Action.this.getPluginIdForModule(module, _params);
        if (pluginId != null) {
          System.out.println("for " + module.getModuleName() + " : " + pluginId);
        }
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "SetPluginIdToCompileInIdeaModules", t);
      }
    }
  }

  /*package*/ String getPluginIdForModule(SModule module, final Map<String, Object> _params) {
    if (module.getFacet(JavaModuleFacet.class) == null || module.getFacet(JavaModuleFacet.class).isCompileInMps()) {
      return null;
    }

    String path = check_ta15vl_a0c0a(((AbstractModule) module).getModuleSourceDir());
    if (path == null) {
      System.out.println("null path for " + module.getModuleName());
      return null;
    }

    ClassLoader classLoader = LibraryInitializer.getInstance().getPluginClassLoaderForPath(path);
    if (!(classLoader instanceof PluginClassLoader)) {
      System.out.println("not PluginClassLoader for " + module.getModuleName());
      return null;
    }

    return ((PluginClassLoader) classLoader).getPluginId().getIdString();
  }

  protected static Logger LOG = LogManager.getLogger(SetPluginIdToCompileInIdeaModules_Action.class);

  private static String check_ta15vl_a0c0a(IFile checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getPath();
    }
    return null;
  }
}
