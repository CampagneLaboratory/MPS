package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.extapi.model.EditableSModel;
import jetbrains.mps.extapi.persistence.FileDataSource;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.persistence.ModelFactory;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.persistence.PersistenceUtil;
import jetbrains.mps.util.FileUtil;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.project.AbstractModule;
import java.io.IOException;
import org.jetbrains.mps.openapi.persistence.ModelSaveException;
import jetbrains.mps.logging.Logger;

public class ConvertToBinaryPersistence_Action extends BaseAction {
  private static final Icon ICON = null;

  public ConvertToBinaryPersistence_Action() {
    super("Convert to binary format", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    List<SModel> m = ((List<SModel>) MapSequence.fromMap(_params).get("models"));
    return ListSequence.fromList(m).any(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return it instanceof EditableSModel && !(((EditableSModel) it).isReadOnly()) && it.getSource() instanceof FileDataSource;
      }
    });
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ConvertToBinaryPersistence", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("models", event.getData(MPSCommonDataKeys.MODELS));
    if (MapSequence.fromMap(_params).get("models") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      List<SModel> m = ((List<SModel>) MapSequence.fromMap(_params).get("models"));
      final Iterable<SModel> seq = ListSequence.fromList(m).where(new IWhereFilter<SModel>() {
        public boolean accept(SModel it) {
          return it instanceof EditableSModel && !(((EditableSModel) it).isReadOnly()) && it.getSource() instanceof FileDataSource;
        }
      });

      final ModelFactory binaryFactory = PersistenceFacade.getInstance().getModelFactory(MPSExtentions.MODEL_BINARY);

      ModelAccess.instance().runWriteAction(new Runnable() {
        public void run() {
          for (SModel smodel : Sequence.fromIterable(seq)) {
            IFile oldFile = ((FileDataSource) smodel.getSource()).getFile();
            SModel newModel = PersistenceUtil.loadModel(oldFile);
            if (newModel == null) {
              LOG.error("cannot read " + smodel);
              continue;
            }

            Iterable<SModel.Problem> problems = Sequence.fromIterable(((Iterable<SModel.Problem>) newModel.getProblems())).where(new IWhereFilter<SModel.Problem>() {
              public boolean accept(SModel.Problem it) {
                return it.isError();
              }
            });
            if (Sequence.fromIterable(problems).isNotEmpty()) {
              LOG.error("cannot read " + smodel + ": " + Sequence.fromIterable(problems).first().getText());
              continue;
            }

            IFile newFile = oldFile.getParent().getDescendant(FileUtil.getNameWithoutExtension(oldFile.getName()) + "." + MPSExtentions.MODEL_BINARY);
            SModule module = smodel.getModule();
            try {
              binaryFactory.save(newModel, new FileDataSource(newFile));
              SModelRepository.getInstance().removeModelDescriptor(smodel);
              oldFile.delete();
              ((AbstractModule) module).updateModelsSet();
            } catch (IOException ex) {
              LOG.error("cannot write " + smodel, ex);
            } catch (ModelSaveException ex) {
              // shouldn't happen 
              LOG.error("cannot write " + smodel, ex);
            }
          }
        }
      });
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ConvertToBinaryPersistence", t);
    }
  }

  private static Logger LOG = Logger.getLogger(ConvertToBinaryPersistence_Action.class);
}
