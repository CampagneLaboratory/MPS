package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.smodel.DefaultSModel;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import jetbrains.mps.smodel.persistence.def.ModelReadException;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.util.FileUtil;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.persistence.binary.BinaryPersistence;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.logging.Logger;

public class ConvertToBinaryPersistence_Action extends BaseAction {
  private static final Icon ICON = null;

  public ConvertToBinaryPersistence_Action() {
    super("Convert to binary format", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    List<SModelDescriptor> m = ((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models"));
    return ListSequence.fromList(m).any(new IWhereFilter<SModelDescriptor>() {
      public boolean accept(SModelDescriptor it) {
        return it instanceof DefaultSModelDescriptor && !(((DefaultSModelDescriptor) it).isReadOnly());
      }
    });
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ConvertToBinaryPersistence", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("models", event.getData(MPSCommonDataKeys.MODELS));
    if (MapSequence.fromMap(_params).get("models") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      List<SModelDescriptor> m = ((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models"));
      final Iterable<IFile> seq = ListSequence.fromList(m).where(new IWhereFilter<SModelDescriptor>() {
        public boolean accept(SModelDescriptor it) {
          return it instanceof DefaultSModelDescriptor && !(((DefaultSModelDescriptor) it).isReadOnly());
        }
      }).select(new ISelector<SModelDescriptor, IFile>() {
        public IFile select(SModelDescriptor it) {
          return ((DefaultSModelDescriptor) it).getSource().getFile();
        }
      });

      ModelAccess.instance().runWriteAction(new Runnable() {
        public void run() {
          for (IFile oldFile : Sequence.fromIterable(seq)) {
            if (!(oldFile.getName().endsWith(MPSExtentions.DOT_MODEL))) {
              continue;
            }

            DefaultSModel rmodel;
            try {
              rmodel = ModelPersistence.readModel(oldFile, false);
            } catch (ModelReadException ex) {
              LOG.error("cannot read " + oldFile, ex);
              continue;
            }
            DefaultSModelDescriptor modelDescriptor = (DefaultSModelDescriptor) SModelRepository.getInstance().getModelDescriptor(rmodel.getSModelReference());
            if (modelDescriptor == null) {
              continue;
            }

            IFile newFile = oldFile.getParent().getDescendant(FileUtil.getNameWithoutExtension(oldFile.getName()) + "." + MPSExtentions.MODEL_BINARY);
            SModule module = modelDescriptor.getModule();
            if (BinaryPersistence.writeModel(rmodel, newFile)) {
              SModelRepository.getInstance().removeModelDescriptor(modelDescriptor);
              oldFile.delete();
              ((AbstractModule) module).updateModelsSet();
            }
          }
        }
      });
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ConvertToBinaryPersistence", t);
    }
  }

  private static Logger LOG = Logger.getLogger(ConvertToBinaryPersistence_Action.class);
}
