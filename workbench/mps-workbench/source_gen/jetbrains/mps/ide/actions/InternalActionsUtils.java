package jetbrains.mps.ide.actions;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.UnregisteredNodes;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelRepository;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.progress.ProgressMonitorAdapter;

public class InternalActionsUtils {
  protected static Log log = LogFactory.getLog(InternalActionsUtils.class);

  public InternalActionsUtils() {
  }

  public static void executeActionOnAllNodes(String actionName, ProgressMonitor monitor, final _FunctionTypes._void_P1_E0<? super SNode> nodeCallback) {
    final Wrappers._T<Iterable<SModelReference>> modelReferences = new Wrappers._T<Iterable<SModelReference>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        Iterable<IModule> modules = MPSModuleRepository.getInstance().getAllModules();
        if (log.isWarnEnabled()) {
          log.warn("Modules: " + Sequence.fromIterable(modules).count());
        }
        modelReferences.value = Sequence.fromIterable(modules).translate(new ITranslator2<IModule, SModelDescriptor>() {
          public Iterable<SModelDescriptor> translate(IModule it) {
            return it.getOwnModelDescriptors();
          }
        }).select(new ISelector<SModelDescriptor, SModelReference>() {
          public SModelReference select(SModelDescriptor it) {
            return it.getSModelReference();
          }
        });
        if (log.isWarnEnabled()) {
          log.warn("Models: " + Sequence.fromIterable(modelReferences.value).count());
        }
      }
    });

    monitor.start(actionName, Sequence.fromIterable(modelReferences.value).count());
    try {
      final Wrappers._int num = new Wrappers._int(0);

      for (final SModelReference modelRef : modelReferences.value) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            // hack for conf stubs 
            UnregisteredNodes.instance().clear();
            if (num.value++ % 100 == 0) {
              if (log.isWarnEnabled()) {
                log.warn("Model num: " + num.value + ", name: " + modelRef.getLongName());
              }
            }
            SModel model = check_6btuvs_a0d0a0a2a4a0(SModelRepository.getInstance().getModelDescriptor(modelRef));
            if (model != null) {
              for (SNode node : model.nodes()) {
                try {
                  nodeCallback.invoke(node);
                } catch (Throwable t) {
                  if (log.isErrorEnabled()) {
                    log.error("Exception in callback for node " + node, t);
                  }
                }
              }
            }
          }
        });
        monitor.advance(1);
        if (monitor.isCanceled()) {
          break;
        }
      }
    } finally {
      monitor.done();
    }
  }

  public static void executeActionOnAllNodesInModal(final String actionName, Project project, final _FunctionTypes._void_P1_E0<? super SNode> nodeCallback) {
    if (ModelAccess.instance().canWrite()) {
      throw new IllegalStateException("Must be executed outside of write action");
    }
    ProgressManager.getInstance().run(new Task.Modal(project, actionName, true) {
      public void run(@NotNull ProgressIndicator indicator) {
        executeActionOnAllNodes(actionName, new ProgressMonitorAdapter(indicator), nodeCallback);
      }
    });
  }

  private static SModel check_6btuvs_a0d0a0a2a4a0(SModelDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getSModel();
    }
    return null;
  }
}
