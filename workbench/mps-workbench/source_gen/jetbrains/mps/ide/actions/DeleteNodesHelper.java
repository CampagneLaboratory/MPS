package jetbrains.mps.ide.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.plugins.relations.RelationDescriptor;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import jetbrains.mps.ide.project.ProjectHelper;
import java.util.Collections;
import jetbrains.mps.ide.projectPane.ProjectPane;
import java.util.Iterator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.refactoring.framework.IRefactoring;
import jetbrains.mps.refactoring.framework.RefactoringUtil;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.platform.refactoring.RefactoringAccess;

public class DeleteNodesHelper {
  private List<SNode> myNodesToDelete;
  private IOperationContext myContext;
  private boolean mySafe;

  public DeleteNodesHelper(List<SNode> nodes, final IOperationContext context, boolean safe, boolean aspects) {
    myContext = context;
    mySafe = safe;
    if (aspects) {
      myNodesToDelete = ListSequence.fromList(nodes).translate(new ITranslator2<SNode, SNode>() {
        public Iterable<SNode> translate(final SNode node) {
          List<RelationDescriptor> tabs = ProjectPluginManager.getApplicableTabs(ProjectHelper.toIdeaProject(context.getProject()), node);
          return ListSequence.fromList(tabs).translate(new ITranslator2<RelationDescriptor, SNode>() {
            public Iterable<SNode> translate(RelationDescriptor tab) {
              return (tab.isApplicable(node) ?
                tab.getNodes(node) :
                Collections.<SNode>emptyList()
              );
            }
          });
        }
      }).toListSequence();
    } else {
      myNodesToDelete = nodes;
    }
  }

  public void deleteNodes(boolean fromProjectPane) {
    ProjectPane projectPane = ProjectPane.getInstance(ProjectHelper.toIdeaProject(myContext.getProject()));
    for (Iterator<SNode> iterator = myNodesToDelete.iterator(); iterator.hasNext();) {
      SNode sNode = iterator.next();
      if (!(iterator.hasNext()) && fromProjectPane) {
        projectPane.rebuildTree();
        projectPane.selectNextNode(sNode);
      }
      doDeleteNode(sNode);
    }
  }

  private void doDeleteNode(SNode node) {
    if (mySafe) {
      safeDelete(myContext, node);
    } else {
      delete(node);
    }
  }

  private void delete(SNode node) {
    // this can happen if we already executed safe delete refactoring for concept and this node is a concept aspect 
    if (node.isDeleted()) {
      return;
    }

    node.delete();
  }

  private void safeDelete(final IOperationContext context, final SNode node) {
    String refactoringClass;
    if ((node == null)) {
      return;
    } else
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
      refactoringClass = ((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.getNode("r:de5b7214-45ee-4f6d-89bf-acde59cdb050(jetbrains.mps.lang.structure.refactorings)", "1851015849775237139"), "virtual_getFqName_1213877404258", new Class[]{SNode.class}));
    } else
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.structure.structure.LinkDeclaration")) {
      refactoringClass = ((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.getNode("r:de5b7214-45ee-4f6d-89bf-acde59cdb050(jetbrains.mps.lang.structure.refactorings)", "1851015849775217786"), "virtual_getFqName_1213877404258", new Class[]{SNode.class}));
    } else {
      refactoringClass = ((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.getNode("r:d9efd362-28b8-4f70-9bcd-fb582528d11c(jetbrains.mps.lang.core.refactorings)", "1851015849775217755"), "virtual_getFqName_1213877404258", new Class[]{SNode.class}));
    }
    final IRefactoring refactoring = RefactoringUtil.getRefactoringByClassName(refactoringClass);
    final RefactoringContext refactoringContext = new RefactoringContext(refactoring);
    refactoringContext.setCurrentOperationContext(context);
    refactoringContext.setSelectedNode(node);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        refactoringContext.setSelectedModel(SNodeOperations.getModel(node).getModelDescriptor());
      }
    });
    refactoringContext.setSelectedModule(context.getModule());
    refactoringContext.setSelectedProject(context.getProject());
    new Thread() {
      public void run() {
        refactoringContext.setRefactoring(refactoring);
        RefactoringAccess.getInstance().getRefactoringFacade().execute(refactoringContext);
      }
    }.start();
  }
}
