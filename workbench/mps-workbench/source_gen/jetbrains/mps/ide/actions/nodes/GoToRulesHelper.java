package jetbrains.mps.ide.actions.nodes;

/*Generated by MPS */

import java.awt.Frame;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.smodel.Language;
import java.util.Collections;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.kernel.model.SModelUtil;
import javax.swing.JPopupMenu;
import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.AbstractAction;
import javax.swing.Action;
import jetbrains.mps.ide.icons.IconManager;
import java.awt.event.ActionEvent;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import jetbrains.mps.smodel.MPSModuleRepository;

public class GoToRulesHelper {
  public GoToRulesHelper() {
  }
  public static void go(Frame frame, EditorCell cell, IOperationContext context, SNode concept) {
    List<SNode> rules = getRules(concept, false);
    if (rules.size() == 1) {
      SNode nodeToSelect = rules.get(0);
      if ((nodeToSelect != null)) {
        NavigationSupport.getInstance().openNode(context, nodeToSelect, true, !(SNodeOperations.isRoot(nodeToSelect)));
      }
      return;
    }
    GoToRulesHelper.MyMenu m = new GoToRulesHelper.MyMenu(rules, context);
    int x = 0;
    int y = 0;
    if (cell != null) {
      x = cell.getX();
      y = cell.getY();
    }
    m.show(frame, x, y);
  }
  public static List<SNode> getRules(final SNode concept, final boolean exactConcept) {
    Language language = getDeclaringLanguage(concept);
    if (language == null) {
      return Collections.emptyList();
    }
    SModel typesystem = LanguageAspect.TYPESYSTEM.get(language);
    if (typesystem == null) {
      return Collections.emptyList();
    }

    // todo: populate rules from other typesystem models! 
    List<SNode> rules = ListSequence.fromList(SModelOperations.roots(typesystem, MetaAdapterFactory.getConcept(new UUID(8817443762339858024l, -6091446231697526094l), 1174648085619l, "jetbrains.mps.lang.typesystem.structure.AbstractRule"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode node) {
        return isApplicable(node, concept, exactConcept);
      }
    }).toListSequence();

    final List<SNode> overriding = ListSequence.fromList(rules).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(new UUID(8817443762339858024l, -6091446231697526094l), 1174643105530l, "jetbrains.mps.lang.typesystem.structure.InferenceRule"));
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(it, MetaAdapterFactory.getConcept(new UUID(8817443762339858024l, -6091446231697526094l), 1174643105530l, "jetbrains.mps.lang.typesystem.structure.InferenceRule"));
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getBoolean(it, MetaAdapterFactory.getProperty(new UUID(8817443762339858024l, -6091446231697526094l), 1195213580585l, 1195213689297l, "overrides"));
      }
    }).toListSequence();

    for (SNode overridingRule : overriding) {
      final SNode subConcept = getApplicableConcept(SLinkOperations.getTarget(overridingRule, MetaAdapterFactory.getContainmentLink(new UUID(8817443762339858024l, -6091446231697526094l), 1174648085619l, 1174648101952l, "applicableNode")));
      ListSequence.fromList(rules).removeWhere(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return getApplicableConcept(SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(new UUID(8817443762339858024l, -6091446231697526094l), 1174648085619l, 1174648101952l, "applicableNode"))) == subConcept && !(ListSequence.fromList(overriding).contains(it));
        }
      });
    }

    return rules;
  }
  private static Language getDeclaringLanguage(SNode concept) {
    String languageFqName = NameUtil.namespaceFromConceptFQName(NameUtil.nodeFQName(concept));
    if (languageFqName == null) {
      return null;
    }
    return ModuleRepositoryFacade.getInstance().getModule(languageFqName, Language.class);
  }
  private static boolean isApplicable(SNode rule, SNode concept, boolean exactConcept) {
    if ((rule == null) || (concept == null)) {
      return false;
    }
    SNode applicableConcept = getApplicableConcept(SLinkOperations.getTarget(rule, MetaAdapterFactory.getContainmentLink(new UUID(8817443762339858024l, -6091446231697526094l), 1174648085619l, 1174648101952l, "applicableNode")));
    if (applicableConcept == null) {
      return false;
    }
    if (exactConcept) {
      return concept == applicableConcept;
    }
    return SModelUtil.isAssignableConcept(concept, applicableConcept);
  }
  private static SNode getApplicableConcept(SNode applicableNode) {
    if (jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(applicableNode, MetaAdapterFactory.getConcept(new UUID(8817443762339858024l, -6091446231697526094l), 1174642788531l, "jetbrains.mps.lang.typesystem.structure.ConceptReference"))) {
      return SLinkOperations.getTarget(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(applicableNode, MetaAdapterFactory.getConcept(new UUID(8817443762339858024l, -6091446231697526094l), 1174642788531l, "jetbrains.mps.lang.typesystem.structure.ConceptReference")), MetaAdapterFactory.getReferenceLink(new UUID(8817443762339858024l, -6091446231697526094l), 1174642788531l, 1174642800329l, "concept"));
    } else
    if (jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(applicableNode, MetaAdapterFactory.getConcept(new UUID(8817443762339858024l, -6091446231697526094l), 1174642900584l, "jetbrains.mps.lang.typesystem.structure.PatternCondition"))) {
      return jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(SLinkOperations.getTarget(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(applicableNode, MetaAdapterFactory.getConcept(new UUID(8817443762339858024l, -6091446231697526094l), 1174642900584l, "jetbrains.mps.lang.typesystem.structure.PatternCondition")), MetaAdapterFactory.getContainmentLink(new UUID(8817443762339858024l, -6091446231697526094l), 1174642900584l, 1174642936809l, "pattern")), MetaAdapterFactory.getContainmentLink(new UUID(-3143127453834064983l, -5836335846783251545l), 1136720037777l, 1136720037778l, "patternNode")));
    } else {
      return null;
    }
  }
  private static class MyMenu extends JPopupMenu {
    public MyMenu(List<SNode> list, final IOperationContext operationContext) {
      setBackground(Color.WHITE);
      String caption = (list.isEmpty() ? "No Rules" : "Rules :");
      JLabel label = new JLabel(caption, SwingConstants.CENTER);
      label.setBorder(new EmptyBorder(0, 20, 0, 0));
      label.setBackground(Color.LIGHT_GRAY);
      add(label);
      for (final SNode node : list) {
        if (node == null) {
          continue;
        }
        String nodeName = node.getName();
        if (nodeName == null || nodeName.equals("")) {
          nodeName = node.getConcept().getName();
        }
        add(new AbstractAction(nodeName + " (" + node.getModel() + ")") {
          {
            putValue(Action.SMALL_ICON, IconManager.getIconFor(node));
          }
          @Override
          public void actionPerformed(ActionEvent e) {
            ModelAccess.instance().runWriteInEDT(new Runnable() {
              @Override
              public void run() {
                if (!(SNodeUtil.isAccessible(node, MPSModuleRepository.getInstance()))) {
                  return;
                }
                // TODO: use node pointers here 
                NavigationSupport.getInstance().openNode(operationContext, node, true, !(SNodeOperations.isRoot(node)));
              }
            });
          }
        }).setBackground(Color.WHITE);
      }
    }
  }
}
