package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import javax.swing.tree.TreeNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.ui.tree.smodel.PackageNode;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Level;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.project.MPSProject;
import javax.swing.JOptionPane;
import java.awt.Frame;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class RenamePackage_Action extends BaseAction {
  private static final Icon ICON = null;
  public RenamePackage_Action() {
    super("Rename", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return ((TreeNode) MapSequence.fromMap(_params).get("ppNode")) instanceof PackageNode;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "RenamePackage", t);
      }
      this.disable(event.getPresentation());
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSCommonDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("ppNode", event.getData(MPSCommonDataKeys.TREE_NODE));
    if (MapSequence.fromMap(_params).get("ppNode") == null) {
      return false;
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final PackageNode treeNode = (PackageNode) ((TreeNode) MapSequence.fromMap(_params).get("ppNode"));
      final String name = treeNode.getPackage();
      ModelAccess modelAccess = ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
      final String newName = JOptionPane.showInputDialog(((Frame) MapSequence.fromMap(_params).get("frame")), "Enter New Package Name", name);
      if (newName == null) {
        return;
      }

      modelAccess.executeCommandInEDT(new Runnable() {
        public void run() {
          Set<SNode> nodesUnderPackage = treeNode.getNodesUnderPackage();
          for (SNode node : nodesUnderPackage) {
            String oldPackage = SPropertyOperations.getString(node, "virtualPackage");
            String newPackage = newName + oldPackage.substring(name.length());
            SPropertyOperations.set(node, "virtualPackage", (newPackage.length() > 0 ? newPackage : null));
          }
        }
      });
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "RenamePackage", t);
      }
    }
  }
  protected static Logger LOG = LogManager.getLogger(RenamePackage_Action.class);
}
