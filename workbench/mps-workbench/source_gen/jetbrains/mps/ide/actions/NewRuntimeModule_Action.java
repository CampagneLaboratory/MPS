package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.Language;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Priority;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.workbench.MPSDataKeys;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.workbench.choose.modules.BaseModuleModel;
import com.intellij.openapi.project.Project;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.internal.collections.runtime.ISelector;
import com.intellij.navigation.NavigationItem;
import jetbrains.mps.workbench.choose.modules.BaseModuleItem;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.ide.ui.tree.MPSTree;
import jetbrains.mps.ide.ui.tree.MPSTreeNode;
import javax.swing.tree.TreeNode;
import com.intellij.ide.util.gotoByName.ChooseByNamePopup;
import jetbrains.mps.workbench.goTo.ui.MpsPopupFactory;
import com.intellij.ide.util.gotoByName.ChooseByNamePopupComponent;
import com.intellij.openapi.application.ModalityState;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class NewRuntimeModule_Action extends BaseAction {
  private static final Icon ICON = null;

  public NewRuntimeModule_Action() {
    super("New Runtime Module", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return ((SModule) MapSequence.fromMap(_params).get("contextModule")) instanceof Language;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "NewRuntimeModule", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("contextModule", event.getData(MPSCommonDataKeys.CONTEXT_MODULE));
    if (MapSequence.fromMap(_params).get("contextModule") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSCommonDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("ideaProject", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("ideaProject") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("treeNode", event.getData(MPSDataKeys.LOGICAL_VIEW_NODE));
    if (MapSequence.fromMap(_params).get("treeNode") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final List<SModule> modules = ListSequence.fromList(new ArrayList<SModule>());
      final ModelAccess modelAccess = ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();

      modelAccess.runReadAction(new Runnable() {
        public void run() {
          ListSequence.fromList(modules).addSequence(SetSequence.fromSet(MPSModuleRepository.getInstance().getAllModules()));
        }
      });

      BaseModuleModel baseSolutionModel = new BaseModuleModel(((Project) MapSequence.fromMap(_params).get("ideaProject")), "runtime module") {
        @Override
        public SModuleReference[] find(IScope p0) {
          return ListSequence.fromList(modules).select(new ISelector<SModule, SModuleReference>() {
            public SModuleReference select(SModule it) {
              return it.getModuleReference();
            }
          }).toGenericArray(SModuleReference.class);
        }

        @Override
        public NavigationItem doGetNavigationItem(final SModuleReference module) {
          return new BaseModuleItem(module) {
            @Override
            public void navigate(boolean p0) {
              if (module == null) {
                return;
              }
              final Language language = (Language) ((SModule) MapSequence.fromMap(_params).get("contextModule"));
              language.getModuleDescriptor().getRuntimeModules().add((ModuleReference) module);
              final MPSTree mpsTree = ((MPSTreeNode) ((TreeNode) MapSequence.fromMap(_params).get("treeNode"))).getTree();
              modelAccess.runWriteInEDT(new Runnable() {
                public void run() {
                  language.save();
                  mpsTree.rebuildLater();
                }
              });
            }
          };
        }
      };
      ChooseByNamePopup popup = MpsPopupFactory.createPackagePopup(((Project) MapSequence.fromMap(_params).get("ideaProject")), baseSolutionModel, NewRuntimeModule_Action.this);
      popup.invoke(new ChooseByNamePopupComponent.Callback() {
        @Override
        public void elementChosen(Object p0) {
          ((NavigationItem) p0).navigate(true);
        }
      }, ModalityState.current(), true);
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "NewRuntimeModule", t);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(NewRuntimeModule_Action.class);
}
