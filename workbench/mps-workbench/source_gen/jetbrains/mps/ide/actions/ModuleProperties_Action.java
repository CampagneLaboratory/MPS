package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.icons.AllIcons;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Priority;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.ui.dialogs.properties.MPSPropertiesConfigurable;
import jetbrains.mps.ide.ui.dialogs.properties.ModulePropertiesConfigurable;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.IOperationContext;
import com.intellij.openapi.options.ex.SingleConfigurableEditor;
import jetbrains.mps.ide.project.ProjectHelper;
import javax.swing.SwingUtilities;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.workbench.dialogs.project.BasePropertiesDialog;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.ide.properties.StandardDialogs;
import jetbrains.mps.project.Solution;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.smodel.Generator;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ModuleProperties_Action extends BaseAction {
  private static final Icon ICON = AllIcons.General.Settings;

  public ModuleProperties_Action() {
    super("Module Properties", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "ModuleProperties", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("module", event.getData(MPSCommonDataKeys.MODULE));
    if (MapSequence.fromMap(_params).get("module") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      MPSPropertiesConfigurable configurable = new ModulePropertiesConfigurable(((SModule) MapSequence.fromMap(_params).get("module")), ((IOperationContext) MapSequence.fromMap(_params).get("context")).getProject());
      final SingleConfigurableEditor configurableEditor = new SingleConfigurableEditor(ProjectHelper.toIdeaProject(((IOperationContext) MapSequence.fromMap(_params).get("context")).getProject()), configurable, "#MPSPropertiesConfigurable");
      configurable.setParentForCallBack(configurableEditor);
      SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
          configurableEditor.show();
        }
      });


      /*
        final Wrappers._T<BasePropertiesDialog> dialog = new Wrappers._T<BasePropertiesDialog>();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            if (((SModule) MapSequence.fromMap(_params).get("module")) instanceof Language) {
              dialog.value = StandardDialogs.createLanguagePropertiesDialog((Language) ((SModule) MapSequence.fromMap(_params).get("module")), ((IOperationContext) MapSequence.fromMap(_params).get("context")));
            } else if (((SModule) MapSequence.fromMap(_params).get("module")) instanceof Solution) {
              dialog.value = StandardDialogs.createSolutionPropertiesDialog((Solution) ((SModule) MapSequence.fromMap(_params).get("module")), ((IOperationContext) MapSequence.fromMap(_params).get("context")));
            } else if (((SModule) MapSequence.fromMap(_params).get("module")) instanceof DevKit) {
              dialog.value = StandardDialogs.createDevKitPropertiesDialog((DevKit) ((SModule) MapSequence.fromMap(_params).get("module")), ((IOperationContext) MapSequence.fromMap(_params).get("context")));
            } else if (((SModule) MapSequence.fromMap(_params).get("module")) instanceof Generator) {
              dialog.value = StandardDialogs.createGeneratorPropertiesDialog(((Generator) ((SModule) MapSequence.fromMap(_params).get("module"))), ((IOperationContext) MapSequence.fromMap(_params).get("context")));
            } else {
              throw new IllegalArgumentException("Unknown module type: " + ((SModule) MapSequence.fromMap(_params).get("module")).getClass().getName());
            }
          }
        });
        dialog.value.show();
      */
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "ModuleProperties", t);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(ModuleProperties_Action.class);
}
