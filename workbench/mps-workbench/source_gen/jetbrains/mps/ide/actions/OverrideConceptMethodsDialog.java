package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.ide.util.GroupedNodesChooser;
import javax.swing.JCheckBox;
import org.jetbrains.mps.openapi.model.SNodeReference;
import com.intellij.openapi.project.Project;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import com.intellij.ui.NonFocusableCheckBox;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Comparator;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class OverrideConceptMethodsDialog extends GroupedNodesChooser {
  private JCheckBox myRemoveAttributes;
  private JCheckBox myAddReturn;
  private BehaviorDialogsPersistentOptions_PreferencesComponent myOptions;

  public OverrideConceptMethodsDialog(SNodeReference[] methods, Project project) {
    super(methods, false, true, project);
  }

  @Override
  protected void initOptions() {
    try {
      myOptions = myProject.getComponent(ProjectPluginManager.class).getPrefsComponent(BehaviorDialogsPersistentOptions_PreferencesComponent.class);
    } catch (Exception e) {
      myOptions = null;
    }

    myAddReturn = new NonFocusableCheckBox("Add return keyword");
    myAddReturn.setMnemonic('r');
    myRemoveAttributes = new NonFocusableCheckBox("Remove Attributes");
    myRemoveAttributes.setMnemonic('t');
    myOptionControls = new JCheckBox[]{myAddReturn, myRemoveAttributes};
  }

  protected boolean showInsertOverride() {
    return true;
  }

  @Override
  protected String getText(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.behavior.structure.ConceptBehavior")) {
      SNode concept = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.behavior.structure.ConceptBehavior"), "concept", false);
      if ((concept != null)) {
        return BehaviorReflection.invokeVirtual(String.class, concept, "virtual_getFqName_1213877404258", new Object[]{});
      }
    }
    return super.getText(node);
  }

  @Override
  protected void customizeOptionsPanel() {
    myAddReturn.setSelected((myOptions != null ?
      myOptions.getStateObject().addReturnsOnImplement :
      false
    ));
    myRemoveAttributes.setSelected((myOptions != null ?
      myOptions.getStateObject().removeAttributes :
      true
    ));
  }

  public boolean isAddReturn() {
    return myAddReturn.isSelected();
  }

  public boolean isRemoveAttributes() {
    return myRemoveAttributes.isSelected();
  }

  @Override
  public void dispose() {
    if (myOptions != null) {
      myOptions.getStateObject().addReturnsOnImplement = myAddReturn.isSelected();
      myOptions.getStateObject().removeAttributes = myRemoveAttributes.isSelected();
    }
    super.dispose();
  }

  public static Iterable<SNode> sortMethods(SNode baseClass, Iterable<SNode> methods) {
    final Map<SNode, Integer> containerIndex = MapSequence.fromMap(new HashMap<SNode, Integer>());
    int i = 1;
    for (SNode c : BehaviorReflection.invokeNonVirtual((Class<List<SNode>>) ((Class) Object.class), baseClass, "jetbrains.mps.lang.behavior.structure.ConceptBehavior", "call_getAllSuperBehaviors_1818770337282950280", new Object[]{})) {
      MapSequence.fromMap(containerIndex).put(c, i++);
    }
    return Sequence.fromIterable(methods).sort(new Comparator<SNode>() {
      public int compare(SNode a, SNode b) {
        SNode parentA = SNodeOperations.getParent(a);
        SNode parentB = SNodeOperations.getParent(b);
        if (parentA == parentB) {
          String aRole = SNodeOperations.getContainingLinkRole(a);
          String bRole = SNodeOperations.getContainingLinkRole(b);

          if (neq_6zqknj_a0d0c0a0a0a0d0l(aRole, bRole)) {
            return aRole.compareTo(bRole);
          }

          return new Integer(IterableUtil.asList(parentA.getChildren(aRole)).indexOf(a)).compareTo(IterableUtil.asList(parentB.getChildren(bRole)).indexOf(b));
        }
        int iA = (parentA != null && MapSequence.fromMap(containerIndex).containsKey(parentA) ?
          MapSequence.fromMap(containerIndex).get(parentA) :
          0
        );
        int iB = (parentB != null && MapSequence.fromMap(containerIndex).containsKey(parentB) ?
          MapSequence.fromMap(containerIndex).get(parentB) :
          0
        );
        return new Integer(iA).compareTo(iB);
      }
    }, true);
  }

  public static SNodeReference[] toNodePointers(Iterable<SNode> methods) {
    return Sequence.fromIterable(methods).select(new ISelector<SNode, SNodeReference>() {
      public SNodeReference select(SNode it) {
        return new jetbrains.mps.smodel.SNodePointer(it);
      }
    }).toGenericArray(SNodeReference.class);
  }

  private static boolean neq_6zqknj_a0d0c0a0a0a0d0l(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }
}
