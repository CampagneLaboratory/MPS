package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.intellij.openapi.project.Project;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.util.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.logging.Logger;

public class CalcClassifiersInRootsStatistic_Action extends BaseAction {
  private static final Icon ICON = null;

  public CalcClassifiersInRootsStatistic_Action() {
    super("Calc classifiers in roots statistic", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "CalcClassifiersInRootsStatistic", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final Wrappers._int rootsCount = new Wrappers._int(0);
      final Wrappers._long membersOverallTime = new Wrappers._long(0);

      InternalActionsUtils.executeActionOnAllNodesInModal("find used concepts", ((Project) MapSequence.fromMap(_params).get("project")), new _FunctionTypes._void_P1_E0<SNode>() {
        public void invoke(final SNode node) {
          if (SNodeOperations.isRoot(node)) {
            rootsCount.value++;

            String nodeName = node + "@" + SNodeOperations.getModelLongName(node.getModel());
            boolean somethingPrinted = false;

            final Wrappers._T<List<SNode>> types = new Wrappers._T<List<SNode>>(ListSequence.fromList(new ArrayList<SNode>()));
            long typesCalcTime = CalcClassifiersInRootsStatistic_Action.this.calculateElapsedTime(new _FunctionTypes._void_P0_E0() {
              public void invoke() {
                types.value = CalcClassifiersInRootsStatistic_Action.this.calcAllClassifierTypesInRoot(node, _params);
              }
            }, _params);

            if (typesCalcTime > 1000) {
              System.out.printf("%s: type calc time = %.3f%n", nodeName, typesCalcTime * 0.001);
              somethingPrinted = true;
            }

            final Set<SNode> classifiers = SetSequence.fromSet(new HashSet<SNode>());
            SetSequence.fromSet(classifiers).addSequence(ListSequence.fromList(types.value).select(new ISelector<SNode, SNode>() {
              public SNode select(SNode it) {
                return SLinkOperations.getTarget(it, "classifier", false);
              }
            }).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return (it != null);
              }
            }));
            if (SetSequence.fromSet(classifiers).count() > 50) {
              System.out.printf("%s: classifier types = %d; classifiers = %d%n", nodeName, ListSequence.fromList(types.value).count(), SetSequence.fromSet(classifiers).count());
              somethingPrinted = true;
            }

            final Wrappers._T<List<SNode>> members = new Wrappers._T<List<SNode>>(ListSequence.fromList(new ArrayList<SNode>()));
            long membersCalcTime = CalcClassifiersInRootsStatistic_Action.this.calculateElapsedTime(new _FunctionTypes._void_P0_E0() {
              public void invoke() {
                members.value = CalcClassifiersInRootsStatistic_Action.this.calcAllMembersOfClassifiers(classifiers, _params);
              }
            }, _params);

            if (ListSequence.fromList(members.value).count() > 4000) {
              System.out.printf("%s: members count = %d%n", nodeName, ListSequence.fromList(members.value).count());
              somethingPrinted = true;
            }

            if (membersCalcTime > 500) {
              System.out.printf("%s: members calc time = %.3f%n", nodeName, membersCalcTime * 0.001);
              somethingPrinted = true;
            }
            membersOverallTime.value += membersCalcTime;

            if (somethingPrinted) {
              System.out.println();
            }
          }
        }
      });

      System.out.println("Members average time: " + membersOverallTime.value * 0.001 / rootsCount.value);
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "CalcClassifiersInRootsStatistic", t);
    }
  }

  /*package*/ List<SNode> calcAllClassifierTypesInRoot(SNode rootNode, final Map<String, Object> _params) {
    TypeCheckingContext context = TypeContextManager.getInstance().createTypeCheckingContext(rootNode);
    context.checkRoot();
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());

    for (SNode node : jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getDescendants(rootNode, "jetbrains.mps.lang.core.structure.BaseConcept", true, new String[]{})) {
      SNode type = context.typeOf(node);
      if (jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(type, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
        ListSequence.fromList(result).addElement(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(type, "jetbrains.mps.baseLanguage.structure.ClassifierType"));
      }
    }
    context.dispose();

    return result;
  }

  /*package*/ List<SNode> calcAllMembersOfClassifiers(Iterable<SNode> classifiers, final Map<String, Object> _params) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());

    for (SNode classifier : classifiers) {
      try {
        ListSequence.fromList(result).addSequence(Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>) ((Class) Object.class), BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), classifier, "virtual_getThisType_7405920559687254782", new Object[]{}), "jetbrains.mps.baseLanguage.structure.IClassifierType", "call_getMembers_7405920559687277275", new Object[]{})));
      } catch (Exception e) {
        System.out.println(e);
      }
    }

    return result;
  }

  /*package*/ long calculateElapsedTime(_FunctionTypes._void_P0_E0 toRun, final Map<String, Object> _params) {
    long startTime = System.currentTimeMillis();
    try {
      toRun.invoke();
    } catch (Exception e) {
      System.out.println(e);
    } finally {
      return System.currentTimeMillis() - startTime;
    }
  }

  private static Logger LOG = Logger.getLogger(CalcClassifiersInRootsStatistic_Action.class);
}
