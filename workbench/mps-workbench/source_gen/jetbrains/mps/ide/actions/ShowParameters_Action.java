package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Priority;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import com.intellij.featureStatistics.FeatureUsageTracker;
import java.awt.Point;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.editor.runtime.style.ParametersInformation;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import java.awt.Component;
import jetbrains.mps.ide.tooltips.MPSToolTipManager;
import jetbrains.mps.ide.tooltips.ToolTipData;
import jetbrains.mps.nodeEditor.EditorComponent;
import org.jetbrains.mps.openapi.model.SNode;
import javax.swing.JPanel;
import java.awt.GridBagLayout;
import jetbrains.mps.ide.tooltips.ToolTip;
import javax.swing.border.EmptyBorder;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import javax.swing.JTextPane;
import jetbrains.mps.nodeEditor.EditorSettings;
import com.intellij.ui.JBColor;
import java.awt.Color;
import com.intellij.ui.Gray;
import java.awt.GridBagConstraints;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ShowParameters_Action extends BaseAction {
  private static final Icon ICON = null;

  public ShowParameters_Action() {
    super("Show Parameters", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (ShowParameters_Action.this.getCellNode(_params) == null) {
      return false;
    }
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "ShowParameters", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("editor", event.getData(MPSEditorDataKeys.EDITOR_COMPONENT));
    if (MapSequence.fromMap(_params).get("editor") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("cell", event.getData(MPSEditorDataKeys.EDITOR_CELL));
    if (MapSequence.fromMap(_params).get("cell") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("editorContext", event.getData(MPSEditorDataKeys.EDITOR_CONTEXT));
    if (MapSequence.fromMap(_params).get("editorContext") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.showParameters");
      Point p = new Point(((EditorCell) MapSequence.fromMap(_params).get("cell")).getX() + ((EditorCell) MapSequence.fromMap(_params).get("cell")).getWidth(), ((EditorCell) MapSequence.fromMap(_params).get("cell")).getY() + ((EditorCell) MapSequence.fromMap(_params).get("cell")).getHeight());
      EditorCell currentCell = ((EditorCell) MapSequence.fromMap(_params).get("cell"));
      while (currentCell != null) {
        ParametersInformation parametersInformation = currentCell.getStyle().get(StyleAttributes.PARAMETERS_INFORMATION);
        if (parametersInformation != null) {
          Component component = ShowParameters_Action.this.createComponent(parametersInformation, currentCell.getSNode(), _params);
          MPSToolTipManager.getInstance().showToolTip(new ToolTipData(component), ((EditorComponent) MapSequence.fromMap(_params).get("editor")), p);
          return;
        }
        currentCell = currentCell.getParent();
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "ShowParameters", t);
      }
    }
  }

  /*package*/ SNode getCellNode(final Map<String, Object> _params) {
    return ((EditorCell) MapSequence.fromMap(_params).get("cell")).getSNode();
  }

  private <T> Component createComponent(ParametersInformation<T> parametersInformation, SNode node, final Map<String, Object> _params) {
    // TODO: make IDEA like 
    JPanel panel = new JPanel(new GridBagLayout());
    panel.setBackground(ToolTip.BACKGROUND_COLOR);
    panel.setBorder(new EmptyBorder(0, 4, 0, 4));
    Iterable<T> methods = parametersInformation.getMethods(node, ((EditorContext) MapSequence.fromMap(_params).get("editorContext")));
    int lineNumber = 0;
    for (T method : Sequence.fromIterable(methods)) {
      StyledTextPrinterImpl printer = new StyledTextPrinterImpl();
      parametersInformation.getStyledMethodPresentation(node, ((EditorContext) MapSequence.fromMap(_params).get("editorContext")), method, printer);
      JTextPane textPane = new JTextPane(printer.getDocument());
      textPane.setBorder(null);
      textPane.setFont(EditorSettings.getInstance().getDefaultEditorFont());
      textPane.setOpaque(true);
      if (Sequence.fromIterable(methods).count() > 1 && parametersInformation.isMethodCurrent(node, ((EditorContext) MapSequence.fromMap(_params).get("editorContext")), method)) {
        textPane.setBackground(new JBColor(new Color(231, 254, 234), Gray._100));
      } else {
        textPane.setBackground(ToolTip.BACKGROUND_COLOR);
      }
      textPane.setForeground(JBColor.foreground());
      GridBagConstraints constraints = new GridBagConstraints();
      constraints.fill = GridBagConstraints.BOTH;
      constraints.gridy = lineNumber++;
      panel.add(textPane, constraints);
      if (Sequence.fromIterable(methods).last() != method) {
        constraints = new GridBagConstraints();
        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.gridy = lineNumber++;
        panel.add(new Line(), constraints);
      }
    }
    return panel;
  }

  protected static Logger LOG = LogManager.getLogger(ShowParameters_Action.class);
}
