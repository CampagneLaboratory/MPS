package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import jetbrains.mps.extapi.model.EditableSModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.logging.Logger;

public class ForcedSaveAll_Action extends BaseAction {
  private static final Icon ICON = null;

  public ForcedSaveAll_Action() {
    super("Re-save all models from repository", "Re-save all models even if model was not changed", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ForcedSaveAll", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      Iterable<SModule> modules = ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModules();
      List<EditableSModel> allModels = Sequence.fromIterable(modules).translate(new ITranslator2<SModule, SModel>() {
        public Iterable<SModel> translate(SModule it) {
          return it.getModels();
        }
      }).where(new IWhereFilter<SModel>() {
        public boolean accept(SModel it) {
          return SModelStereotype.isUserModel(it) && it instanceof EditableSModel;
        }
      }).select(new ISelector<SModel, EditableSModel>() {
        public EditableSModel select(SModel it) {
          return (EditableSModel) it;
        }
      }).toListSequence();

      for (EditableSModel model : ListSequence.fromList(allModels)) {
        if (model.isReadOnly()) {
          continue;
        }
        // ensure model is loaded 
        model.load();
        //  and force to save model 
        model.setChanged(true);
        model.save();
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ForcedSaveAll", t);
    }
  }

  private static Logger LOG = Logger.getLogger(ForcedSaveAll_Action.class);
}
