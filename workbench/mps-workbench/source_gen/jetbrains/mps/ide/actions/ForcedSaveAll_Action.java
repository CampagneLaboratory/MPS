package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.extapi.model.EditableSModel;
import jetbrains.mps.logging.Logger;

public class ForcedSaveAll_Action extends BaseAction {
  private static final Icon ICON = null;

  public ForcedSaveAll_Action() {
    super("Re-save all models from repository", "Re-save all models even if model was not changed", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ForcedSaveAll", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      for (SModelDescriptor descr : ListSequence.fromList(SModelRepository.getInstance().getModelDescriptors())) {
        if (!(SModelStereotype.isUserModel(descr) && descr instanceof EditableSModel)) {
          continue;
        }
        EditableSModel model = (EditableSModel) descr;
        if (model.isReadOnly()) {
          continue;
        }
        // ensure model is loaded 
        model.load();
        //  and force to save model 
        model.setChanged(true);
        model.save();
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ForcedSaveAll", t);
    }
  }

  private static Logger LOG = Logger.getLogger(ForcedSaveAll_Action.class);
}
