package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.icons.MPSIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import javax.swing.tree.TreeNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.ui.smodel.SModelTreeNode;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Priority;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.project.SModuleOperations;
import jetbrains.mps.smodel.ModelRootUtil;
import jetbrains.mps.smodel.SModelInternal;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.ide.projectPane.ProjectPane;
import com.intellij.openapi.project.Project;
import jetbrains.mps.util.SNodeOperations;
import java.util.List;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.ide.projectPane.SortUtil;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class NewSubTestModel_Action extends BaseAction {
  private static final Icon ICON = MPSIcons.Nodes.TestModel;

  public NewSubTestModel_Action() {
    super("Test Model", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (!(((TreeNode) MapSequence.fromMap(_params).get("treeNode")) instanceof SModelTreeNode)) {
      return false;
    }
    return SModelStereotype.NONE.equals(SModelStereotype.getStereotype(((SModel) MapSequence.fromMap(_params).get("model"))));
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "NewSubTestModel", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("ideaProject", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("ideaProject") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("model", event.getData(MPSCommonDataKeys.CONTEXT_MODEL));
    if (MapSequence.fromMap(_params).get("model") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("treeNode", event.getData(MPSDataKeys.LOGICAL_VIEW_NODE));
    if (MapSequence.fromMap(_params).get("treeNode") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final Wrappers._T<SModel> result = new Wrappers._T<SModel>();
      ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess().executeCommand(new Runnable() {
        public void run() {
          SModelFqName newModelFqName = new SModelFqName(NewSubTestModel_Action.this.getTestModelName(_params), SModelStereotype.TESTS);
          result.value = SModuleOperations.createModelWithAdjustments(newModelFqName.toString(), ModelRootUtil.getModelRoot(((SModel) MapSequence.fromMap(_params).get("model"))));
          SModel createdModel = result.value;
          SModel sourceModel = ((SModel) MapSequence.fromMap(_params).get("model"));
          ((SModelInternal) createdModel).addModelImport(sourceModel.getReference(), false);
          for (jetbrains.mps.smodel.SModel.ImportElement importElement : ((SModelInternal) sourceModel).importedModels()) {
            ((SModelInternal) createdModel).addModelImport(sourceModel.getReference(), false);
          }
          for (SModuleReference importedLanguage : ((SModelInternal) sourceModel).importedLanguages()) {
            ((SModelInternal) createdModel).addLanguage(importedLanguage);
          }
          for (SModuleReference devKit : ((SModelInternal) sourceModel).importedDevkits()) {
            ((SModelInternal) createdModel).addDevKit(devKit);
          }
        }
      });
      ProjectPane.getInstance(((Project) MapSequence.fromMap(_params).get("ideaProject"))).selectModel(result.value, false);
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "NewSubTestModel", t);
      }
    }
  }

  /*package*/ String getTestModelName(final Map<String, Object> _params) {
    StringBuilder builder = new StringBuilder();
    builder.append(SNodeOperations.getModelLongName(((SModel) MapSequence.fromMap(_params).get("model"))));
    int testModelCount = 0;
    List<SModel> models = IterableUtil.asList(((SModel) MapSequence.fromMap(_params).get("model")).getModule().getModels());
    List<SModel> sortedModels = SortUtil.sortModels(models);
    for (SModel md : sortedModels) {
      if (!(SModelStereotype.TESTS.equals(SModelStereotype.getStereotype(md)))) {
        continue;
      }
      String name = SNodeOperations.getModelLongName(((SModel) MapSequence.fromMap(_params).get("model"))) + ((testModelCount == 0 ?
        "" :
        testModelCount
      ));
      if (name.equals(SNodeOperations.getModelLongName(md))) {
        testModelCount++;
      }
    }
    if (testModelCount != 0) {
      builder.append(testModelCount + "");
    }
    return builder.toString();
  }

  protected static Logger LOG = LogManager.getLogger(NewSubTestModel_Action.class);
}
