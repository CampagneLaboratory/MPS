package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.smodel.ProjectModelAccess;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.MoveRefactoringUtils;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class OverrideConceptMethodsAction {
  private Project myProject;
  private SNode mySelectedNode;
  private EditorContext myEditorContext;
  private boolean myIsOverride;

  public OverrideConceptMethodsAction(Project project, SNode selectedNode, EditorContext editorContext, boolean isOverride) {
    myProject = project;
    mySelectedNode = selectedNode;
    myEditorContext = editorContext;
    myIsOverride = isOverride;
  }

  public void run() {
    final Wrappers._T<SNode> contextClass = new Wrappers._T<SNode>();
    final Wrappers._T<SNode> contextMethod = new Wrappers._T<SNode>();
    final Wrappers._T<SNodeReference[]> methods = new Wrappers._T<SNodeReference[]>();

    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        contextClass.value = SNodeOperations.getAncestor(mySelectedNode, "jetbrains.mps.lang.behavior.structure.ConceptBehavior", true, false);
        contextMethod.value = SNodeOperations.getAncestor(mySelectedNode, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration", true, false);
        List<SNode> methodsToOverride = (myIsOverride ? BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), contextClass.value, "virtual_getMethodsToOverride_5418393554803767537", new Object[]{}) : BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), contextClass.value, "virtual_getMethodsToImplement_5418393554803775106", new Object[]{}));
        methods.value = OverrideConceptMethodsDialog.toNodePointers(OverrideConceptMethodsDialog.sortMethods(contextClass.value, methodsToOverride));
      }
    });

    final OverrideConceptMethodsDialog dialog = new OverrideConceptMethodsDialog(methods.value, ProjectHelper.toIdeaProject(myProject)) {
      @Override
      protected boolean showInsertOverride() {
        return myIsOverride;
      }
    };
    dialog.setTitle((myIsOverride ? "Select Behavior Methods to Override" : "Select Behavior Methods to Implement"));
    dialog.show();

    if (dialog.isOK()) {
      final Iterable<SNodeReference> selectedElements = (Iterable<SNodeReference>) dialog.getSelectedElements();

      ProjectModelAccess.instance().runCommandInEDT(new Runnable() {
        public void run() {
          List<SNode> selection = Sequence.fromIterable(selectedElements).select(new ISelector<SNodeReference, SNode>() {
            public SNode select(SNodeReference it) {
              return SNodeOperations.cast(((SNodePointer) it).resolve(MPSModuleRepository.getInstance()), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
            }
          }).toListSequence();
          OverrideConceptMethodsHelper helper = new OverrideConceptMethodsHelper(myProject, contextClass.value, contextMethod.value, dialog.isRemoveAttributes(), dialog.isAddReturn());
          List<SNode> insertedMethods = helper.insertMethods(selection);
          if (insertedMethods.isEmpty()) {
            return;
          }

          MoveRefactoringUtils.fixImportsFromNode(contextClass.value);

          SNode firstMethod = ListSequence.fromList(insertedMethods).first();
          SNode nodeToSelect;
          if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(firstMethod, "body", true), "statement", true)).isNotEmpty()) {
            nodeToSelect = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(firstMethod, "body", true), "statement", true)).first();
          } else {
            nodeToSelect = firstMethod;
          }
          myEditorContext.flushEvents();
          myEditorContext.getSelectionManager().setSelection(nodeToSelect);
        }
      }, myProject);
    }
  }
}
