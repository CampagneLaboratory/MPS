package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.icons.MPSIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.project.IModule;
import javax.swing.JOptionPane;
import java.awt.Frame;
import jetbrains.mps.ide.ui.dialogs.properties.MPSPropertiesConfigurable;
import jetbrains.mps.ide.ui.dialogs.properties.ModulePropertiesConfigurable;
import jetbrains.mps.smodel.IOperationContext;
import com.intellij.openapi.options.ex.SingleConfigurableEditor;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.dialogs.project.creation.NewModelDialog;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.ide.projectPane.ProjectPane;
import jetbrains.mps.ide.StereotypeProvider;
import javax.swing.tree.TreeNode;
import jetbrains.mps.ide.projectPane.NamespaceTextNode;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.logging.Logger;

public class NewModel_Action extends BaseAction {
  private static final Icon ICON = MPSIcons.Nodes.Model;

  public NewModel_Action() {
    super("Model", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    String stereotype = NewModel_Action.this.getStereotype(_params);
    if (stereotype == null) {
      return true;
    }
    for (String availableStereotype : SModelStereotype.values) {
      if (stereotype.equals(availableStereotype)) {
        return true;
      }
    }
    return false;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "NewModel", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSCommonDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("module", event.getData(MPSCommonDataKeys.CONTEXT_MODULE));
    if (MapSequence.fromMap(_params).get("module") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("treeNode", event.getData(MPSDataKeys.LOGICAL_VIEW_NODE));
    if (MapSequence.fromMap(_params).get("treeNode") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      if (!(((IModule) MapSequence.fromMap(_params).get("module")).getModelRoots().iterator().hasNext())) {
        int code = JOptionPane.showConfirmDialog(((Frame) MapSequence.fromMap(_params).get("frame")), "There are no model roots. Do you want to create one?", "", JOptionPane.YES_NO_OPTION);
        if (code == JOptionPane.YES_OPTION) {
          MPSPropertiesConfigurable configurable = new ModulePropertiesConfigurable(((IModule) MapSequence.fromMap(_params).get("module")), ((IOperationContext) MapSequence.fromMap(_params).get("context")).getProject());
          final SingleConfigurableEditor configurableEditor = new SingleConfigurableEditor(ProjectHelper.toIdeaProject(((IOperationContext) MapSequence.fromMap(_params).get("context")).getProject()), configurable, "#MPSPropertiesConfigurable");
          configurableEditor.show();
        }
        return;
      }
      if (!(((IModule) MapSequence.fromMap(_params).get("module")).getModelRoots().iterator().hasNext())) {
        JOptionPane.showMessageDialog(((Frame) MapSequence.fromMap(_params).get("frame")), "Can't create a model in solution with no model roots", "Can't create model", JOptionPane.ERROR_MESSAGE);
        return;
      }
      final Wrappers._T<NewModelDialog> dialog = new Wrappers._T<NewModelDialog>();
      final IOperationContext localContext = ((IOperationContext) MapSequence.fromMap(_params).get("context"));
      final IModule localModule = (localContext.getModule() != null ?
        localContext.getModule() :
        ((IModule) MapSequence.fromMap(_params).get("module"))
      );
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          String stereotype = NewModel_Action.this.getStereotype(_params);
          dialog.value = new NewModelDialog(((Project) MapSequence.fromMap(_params).get("project")), localModule, NewModel_Action.this.getNamespace(_params), localContext, stereotype, NewModel_Action.this.isStrict(_params));
        }
      });
      dialog.value.show();
      SModelDescriptor result = dialog.value.getResult();
      if (result != null) {
        SModelDescriptor modelDescriptor = result;
        ProjectPane.getInstance(((Project) MapSequence.fromMap(_params).get("project"))).selectModel(modelDescriptor, false);
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "NewModel", t);
    }
  }

  private StereotypeProvider getStereotypeProvider(final Map<String, Object> _params) {
    TreeNode parent = ((TreeNode) MapSequence.fromMap(_params).get("treeNode")).getParent();
    while (parent != null) {
      if (parent instanceof StereotypeProvider) {
        return ((StereotypeProvider) parent);
      }
      parent = parent.getParent();
    }
    return null;
  }

  protected String getStereotype(final Map<String, Object> _params) {
    if (((TreeNode) MapSequence.fromMap(_params).get("treeNode")) instanceof StereotypeProvider) {
      return ((StereotypeProvider) ((TreeNode) MapSequence.fromMap(_params).get("treeNode"))).getStereotype();
    } else if (((TreeNode) MapSequence.fromMap(_params).get("treeNode")) instanceof NamespaceTextNode) {
      StereotypeProvider parent = NewModel_Action.this.getStereotypeProvider(_params);
      if (parent != null) {
        return parent.getStereotype();
      }
    }
    return null;
  }

  protected boolean isStrict(final Map<String, Object> _params) {
    if (((TreeNode) MapSequence.fromMap(_params).get("treeNode")) instanceof StereotypeProvider) {
      return ((StereotypeProvider) ((TreeNode) MapSequence.fromMap(_params).get("treeNode"))).isStrict();
    } else if (((TreeNode) MapSequence.fromMap(_params).get("treeNode")) instanceof NamespaceTextNode) {
      StereotypeProvider parent = NewModel_Action.this.getStereotypeProvider(_params);
      if (parent != null) {
        return parent.isStrict();
      }
    }
    return false;
  }

  protected String getNamespace(final Map<String, Object> _params) {
    if (((IModule) MapSequence.fromMap(_params).get("module")) instanceof Generator) {
      Generator gen = (Generator) ((IModule) MapSequence.fromMap(_params).get("module"));
      String name = gen.getName();
      String genNamespace = gen.getSourceLanguage().getModuleFqName() + ".generator";

      if ((name == null || name.length() == 0)) {
        return genNamespace;
      }
      return genNamespace + "." + name;
    }
    return ((IModule) MapSequence.fromMap(_params).get("module")).getModuleFqName();
  }

  private static Logger LOG = Logger.getLogger(NewModel_Action.class);
}
