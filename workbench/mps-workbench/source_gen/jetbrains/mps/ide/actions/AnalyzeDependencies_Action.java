package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.icons.AllIcons;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Priority;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import com.intellij.openapi.project.Project;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import jetbrains.mps.ide.dependencyViewer.DependencyViewerScope;
import jetbrains.mps.smodel.ModelAccess;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.project.MPSProject;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.nodeEditor.cells.EditorCell;

public class AnalyzeDependencies_Action extends BaseAction {
  private static final Icon ICON = AllIcons.Toolwindows.ToolWindowInspection;

  public AnalyzeDependencies_Action() {
    super("Analyze Dependencies", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "AnalyzeDependencies", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("myModels", event.getData(MPSCommonDataKeys.MODELS));
    MapSequence.fromMap(_params).put("myModules", event.getData(MPSDataKeys.MODULES));
    MapSequence.fromMap(_params).put("myMPSProject", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("myMPSProject") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("myEditorComponent", event.getData(MPSEditorDataKeys.EDITOR_COMPONENT));
    MapSequence.fromMap(_params).put("myProject", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("myProject") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      AnalyzeDependencies_Tool tool = ((Project) MapSequence.fromMap(_params).get("myProject")).getComponent(ProjectPluginManager.class).getTool(AnalyzeDependencies_Tool.class);
      final DependencyViewerScope scope = new DependencyViewerScope();
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          if (((List<SModel>) MapSequence.fromMap(_params).get("myModels")) != null) {
            for (SModel model : ((List<SModel>) MapSequence.fromMap(_params).get("myModels"))) {
              scope.add(model);
            }
          }
          if (((List<SModule>) MapSequence.fromMap(_params).get("myModules")) != null) {
            for (SModule module : ((List<SModule>) MapSequence.fromMap(_params).get("myModules"))) {
              scope.add(module);
            }
          }
          if (scope.isEmpty()) {
            SNode node = check_rkpdtm_a0a0c0a2a0(check_rkpdtm_a0a0a2a0c0a(((EditorComponent) MapSequence.fromMap(_params).get("myEditorComponent"))));
            if (node != null) {
              scope.add(node);
            }
          }
        }
      });
      if (scope.isEmpty()) {
        return;
      }
      tool.setContent(scope, ((MPSProject) MapSequence.fromMap(_params).get("myMPSProject")));
      tool.openToolLater(true);
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "AnalyzeDependencies", t);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(AnalyzeDependencies_Action.class);

  private static SNode check_rkpdtm_a0a0c0a2a0(EditorCell checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getSNode();
    }
    return null;
  }

  private static EditorCell check_rkpdtm_a0a0a2a0c0a(EditorComponent checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getRootCell();
    }
    return null;
  }
}
