package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import java.util.Collections;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.ide.findusages.model.SearchResult;

public class TodoFinder implements IFinder {
  public TodoFinder() {
  }
  @Override
  public SearchResults find(SearchQuery query, ProgressMonitor monitor) {
    Set<SNode> nodes = (Set<SNode>) FindUsagesFacade.getInstance().findInstances(query.getScope(), Collections.singleton(SConceptRepository.getInstance().getConcept("jetbrains.mps.baseLanguage.structure.TextCommentPart")), false, new EmptyProgressMonitor());
    SearchResults<SNode> results = new SearchResults<SNode>();
    for (SNode node : nodes) {
      if (BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.as(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 6329021646629104957l, "jetbrains.mps.baseLanguage.structure.TextCommentPart")), "virtual_isToDo_7236590470026152831", new Object[]{})) {
        results.getSearchResults().add(new SearchResult<SNode>(node, "TODO items"));
      }
    }
    return results;
  }
}
