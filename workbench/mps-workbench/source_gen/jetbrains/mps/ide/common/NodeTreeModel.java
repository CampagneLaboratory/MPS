package jetbrains.mps.ide.common;

/*Generated by MPS */

import com.intellij.ide.util.treeView.smartTree.TreeModel;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.annotations.NotNull;
import com.intellij.ide.util.treeView.smartTree.Grouper;
import com.intellij.ide.util.treeView.smartTree.Sorter;
import com.intellij.ide.util.treeView.smartTree.Filter;
import com.intellij.ide.structureView.StructureViewTreeElement;
import com.intellij.ide.util.treeView.smartTree.TreeElement;

public abstract class NodeTreeModel implements TreeModel {
  private static SNodePointer FAKE_ROOT = new SNodePointer(null);

  public NodeTreeModel() {
  }

  public abstract SNodePointer[] getRootNodes();

  public abstract SNodePointer[] getChildren(SNodePointer node);

  @NotNull
  public Grouper[] getGroupers() {
    return Grouper.EMPTY_ARRAY;
  }

  @NotNull
  public Sorter[] getSorters() {
    return Sorter.EMPTY_ARRAY;
  }

  @NotNull
  public Filter[] getFilters() {
    return Filter.EMPTY_ARRAY;
  }

  @NotNull
  public StructureViewTreeElement getRoot() {
    return new NodeTreeModel.NodeTreeElement(FAKE_ROOT);
  }

  private class NodeTreeElement extends jetbrains.mps.workbench.structureview.nodes.NodeTreeElement {
    public NodeTreeElement(SNodePointer pointer) {
      super(pointer);
    }

    public TreeElement[] getChildren() {
      SNodePointer[] children = ((myNode == FAKE_ROOT) ?
        NodeTreeModel.this.getRootNodes() :
        NodeTreeModel.this.getChildren(myNode)
      );
      TreeElement[] childrenElements = new TreeElement[children.length];

      for (int i = 0; i < children.length; i++) {
        childrenElements[i] = new NodeTreeModel.NodeTreeElement(children[i]);
      }

      return childrenElements;
    }
  }
}
