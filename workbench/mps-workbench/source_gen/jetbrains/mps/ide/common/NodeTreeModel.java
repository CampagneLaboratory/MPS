package jetbrains.mps.ide.common;

/*Generated by MPS */

import com.intellij.ide.structureView.StructureViewModel;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.annotations.NotNull;
import com.intellij.ide.util.treeView.smartTree.Grouper;
import com.intellij.ide.util.treeView.smartTree.Sorter;
import com.intellij.ide.util.treeView.smartTree.Filter;
import com.intellij.ide.structureView.StructureViewTreeElement;
import com.intellij.ide.structureView.ModelListener;
import com.intellij.ide.structureView.FileEditorPositionListener;
import org.jetbrains.annotations.Nullable;
import com.intellij.ide.util.treeView.smartTree.TreeElement;
import jetbrains.mps.internal.collections.runtime.Sequence;

public abstract class NodeTreeModel implements StructureViewModel {
  public NodeTreeModel() {
  }

  public abstract SNodePointer getRootNode();

  public abstract Iterable<SNodePointer> getChildren(SNodePointer node);

  @NotNull
  public Grouper[] getGroupers() {
    return Grouper.EMPTY_ARRAY;
  }

  @NotNull
  public Sorter[] getSorters() {
    return Sorter.EMPTY_ARRAY;
  }

  @NotNull
  public Filter[] getFilters() {
    return Filter.EMPTY_ARRAY;
  }

  public boolean shouldEnterElement(Object object) {
    return false;
  }

  public void dispose() {
  }

  @NotNull
  public StructureViewTreeElement getRoot() {
    return new NodeTreeModel.NodeTreeElement(getRootNode());
  }

  public void removeModelListener(ModelListener listener) {
  }

  public void addModelListener(ModelListener listener) {
  }

  public void removeEditorPositionListener(FileEditorPositionListener listener) {
  }

  public void addEditorPositionListener(FileEditorPositionListener listener) {
  }

  @Nullable
  public Object getCurrentEditorElement() {
    return null;
  }

  private class NodeTreeElement extends jetbrains.mps.workbench.structureview.nodes.NodeTreeElement {
    public NodeTreeElement(SNodePointer pointer) {
      super(pointer);
    }

    public TreeElement[] getChildren() {
      Iterable<SNodePointer> children = NodeTreeModel.this.getChildren(myNode);
      TreeElement[] childrenElements = new TreeElement[Sequence.fromIterable(children).count()];

      int i = 0;
      for (SNodePointer child : children) {
        childrenElements[i++] = new NodeTreeModel.NodeTreeElement(child);
      }

      return childrenElements;
    }
  }
}
