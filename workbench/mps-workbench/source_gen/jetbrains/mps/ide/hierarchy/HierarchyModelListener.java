package jetbrains.mps.ide.hierarchy;

/*Generated by MPS */

import jetbrains.mps.smodel.SModelAdapter;
import jetbrains.mps.ide.ui.MPSTreeNode;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.ArrayList;
import jetbrains.mps.smodel.event.SModelReferenceEvent;
import jetbrains.mps.smodel.event.SModelRootEvent;

public class HierarchyModelListener extends SModelAdapter {
  private AbstractHierarchyTree myHierarchyTree;

  public HierarchyModelListener(AbstractHierarchyTree hierarchyTree) {
    myHierarchyTree = hierarchyTree;
  }

  private void collectNodes(MPSTreeNode target, List<SNode> list) {
    for (MPSTreeNode child : target) {
      collectNodes(child, list);
    }
  }

  private void structureEvent(List<SNode> searchedNodes) {
    List<SNode> nodeInTree = new ArrayList<SNode>();
    MPSTreeNode treeNode = myHierarchyTree.getRootNode();
    collectNodes(treeNode, nodeInTree);
    for (SNode searchedNode : searchedNodes) {
      if (searchedNode == null) {
        continue;
      }
      if (nodeInTree.contains(searchedNode)) {
        myHierarchyTree.rebuildLater();
      }
    }
  }

  private void structureReferenceEvent(SModelReferenceEvent event) {
    List<SNode> nodes = new ArrayList<SNode>();
    nodes.add(event.getReference().getSourceNode());
    nodes.add(event.getReference().getTargetNode());
    structureEvent(nodes);
  }

  private void structureRootEvent(SModelRootEvent event) {
    List<SNode> nodes = new ArrayList<SNode>();
    nodes.add(event.getAffectedRoot());
    nodes.add(event.getRoot());
    structureEvent(nodes);
  }

  @Override
  public void rootAdded(SModelRootEvent event) {
    structureRootEvent(event);
  }

  @Override
  public void rootRemoved(SModelRootEvent event) {
    structureRootEvent(event);
  }

  @Override
  public void referenceRemoved(SModelReferenceEvent event) {
    structureReferenceEvent(event);
  }

  @Override
  public void referenceAdded(SModelReferenceEvent event) {
    structureReferenceEvent(event);
  }
}
