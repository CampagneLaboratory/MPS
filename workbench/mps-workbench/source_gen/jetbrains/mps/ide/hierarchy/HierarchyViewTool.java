package jetbrains.mps.ide.hierarchy;

/*Generated by MPS */

import com.intellij.icons.AllIcons;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.MPSCoreComponents;
import jetbrains.mps.ide.ui.TreeHighlighterExtension;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.project.listener.ModelCreationListener;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.event.SModelListener;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;

import java.util.ArrayList;
import java.util.List;

public class HierarchyViewTool extends AbstractHierarchyView {
  private List<SModelDescriptor> myStructureModels = new ArrayList<SModelDescriptor>();
  private SModelListener myModelListener;
  private MPSCoreComponents myCoreComponents;
  private ModelCreationListener myCreationListener;

  public HierarchyViewTool(Project project, MPSCoreComponents coreComponents) {
    super(project, "Hierarchy", 8, AllIcons.Toolwindows.ToolWindowHierarchy);
    this.myCoreComponents = coreComponents;
  }

  public void onCreateStructureModel(SModelDescriptor md) {
    myStructureModels.add(md);
    md.addModelListener(myModelListener);
  }

  @Override
  public void disposeComponent() {
    super.disposeComponent();
    if (myHierarchyTree == null) {
      return;
    }
    AbstractModule.unregisterModelCreationListener(myCreationListener);
  }

  @Override
  public void projectOpened() {
    super.projectOpened();
    for (SModel md : SModelRepository.getInstance().getModelDescriptors()) {
      if (LanguageAspect.STRUCTURE.is(md)) {
        myStructureModels.add((SModelDescriptor) md);
      }
    }
  }

  @Override
  public void projectClosed() {
    super.projectClosed();
    myStructureModels.clear();
  }

  @Override
  protected void createTool() {
    super.createTool();
    myModelListener = new HierarchyModelListener(this.myHierarchyTree);
    this.myCreationListener = new ModelCreationListener() {
      public boolean isApplicable(SModule module, SModel m) {
        return m.getModule() instanceof Language && LanguageAspect.STRUCTURE.equals(((Language) m.getModule()).getAspectForModel(m));
      }

      public void onCreate(SModule module, SModel m) {
        onCreateStructureModel((SModelDescriptor) m);
      }
    };
    AbstractModule.registerModelCreationListener(myCreationListener);
  }

  protected AbstractHierarchyTree createHierarchyTree(boolean isParentHierarchy) {
    ConceptHierarchyTree tree = new ConceptHierarchyTree(myCoreComponents.getLanguageHierarchyCache(), this, isParentHierarchy);
    TreeHighlighterExtension.attachHighlighters(tree, getProject());
    return tree;
  }

  protected void doRegister() {
    for (SModelDescriptor md : myStructureModels) {
      md.addModelListener(myModelListener);
    }
  }

  protected void doUnregister() {
    for (SModelDescriptor md : myStructureModels) {
      md.removeModelListener(myModelListener);
    }
    myStructureModels.clear();
  }

  public int getPriority() {
    return 2;
  }
}
