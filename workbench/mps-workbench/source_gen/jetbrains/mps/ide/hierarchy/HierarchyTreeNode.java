package jetbrains.mps.ide.hierarchy;

/*Generated by MPS */

import jetbrains.mps.ide.ui.tree.MPSTreeNode;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.util.annotation.DisposableCommand;
import jetbrains.mps.ide.icons.IconManager;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import jetbrains.mps.smodel.MPSModuleRepository;

public class HierarchyTreeNode extends MPSTreeNode {
  private SNode myNode;
  protected AbstractHierarchyTree myHierarchyTree;
  public HierarchyTreeNode(@NotNull SNode declaration, IOperationContext operationContext, AbstractHierarchyTree tree) {
    super(operationContext);
    myNode = declaration;
    myHierarchyTree = tree;
    setUserObject(declaration);
    setNodeIdentifier(calculateNodeIdentifier());
  }
  @Override
  protected void doUpdatePresentation() {
    @DisposableCommand SNode node = myNode;
    if (node == null) {
      return;
    }
    setIcon(IconManager.getIconFor(node));
    String addText = calculateAdditionalText();
    if (addText != null) {
      setAdditionalText(addText);
    }
    setAutoExpandable(false);
  }
  protected String calculateAdditionalText() {
    if (getNode() == null) {
      return null;
    }

    SModel model = SNodeOperations.getModel(getNode());
    if (model == null) {
      return null;
    }

    return model.getReference().getModelName();
  }
  @Override
  public int getToggleClickCount() {
    return -1;
  }
  public SNode getNode() {
    return myNode;
  }
  @NotNull
  public String calculateNodeIdentifier() {
    if (getNode() == null) {
      return "null";
    }
    String name;
    if (myHierarchyTree.overridesNodeIdentifierCalculation()) {
      name = myHierarchyTree.calculateNodeIdentifier(this);
    } else {
      name = getNode().getName();
    }
    return (name == null ? "no name" : name);
  }
  @Override
  public void doubleClick() {
    if (myHierarchyTree.doubleClick(HierarchyTreeNode.this)) {
      return;
    }
    ModelAccess.instance().runWriteInEDT(new Runnable() {
      @Override
      public void run() {
        if (!(SNodeUtil.isAccessible(myNode, MPSModuleRepository.getInstance())) || !(myNode.getModel() != null) || myNode.getModel() == null) {
          return;
        }
        AbstractHierarchyView hierarchyView = myHierarchyTree.getHierarchyView();
        if (hierarchyView != null) {
          // TODO: use node pointers here 
          hierarchyView.openNode(myNode, getOperationContext());
        }
      }
    });
  }
}
