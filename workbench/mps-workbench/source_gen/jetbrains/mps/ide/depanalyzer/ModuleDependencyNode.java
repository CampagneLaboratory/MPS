package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import jetbrains.mps.ide.ui.tree.MPSTreeNode;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ide.icons.IconManager;
import java.util.Iterator;
import jetbrains.mps.ide.projectPane.ProjectPane;
import com.intellij.openapi.project.Project;

public class ModuleDependencyNode extends MPSTreeNode {
  private boolean myInitialized;
  private Iterable<DepPath> myCycles;
  private final SModule myModule;
  private final boolean myIsUsedLang;

  /*package*/ ModuleDependencyNode(SModule module, Iterable<DepLink> relations, boolean isUsedLanguage) {
    // module serves as dependency target (dependencies are captured with relations sequence) 
    super(Sequence.fromIterable(relations).toListSequence(), null);
    myModule = module;
    myIsUsedLang = isUsedLanguage;
    setIcon(IconManager.getIconFor(module));
    setText(module.getModuleName());
    setNodeIdentifier(module.getModuleName());
  }

  public SModule getModule() {
    return myModule;
  }

  /**
   * Module associated with this node might be target of few dependencies of the initial module.
   */
  /*package*/ Iterable<DepLink> getCapturedDependencies() {
    return (Iterable<DepLink>) getUserObject();
  }

  public boolean isUsedLanguage() {
    return myIsUsedLang;
  }

  /*package*/ void setCycles(Iterable<DepPath> cycles) {
    myCycles = cycles;
  }

  public boolean isCyclic() {
    return Sequence.fromIterable(myCycles).isNotEmpty();
  }

  @Override
  public boolean isLeaf() {
    return !(isCyclic());
  }

  @Override
  protected void doInit() {
    for (DepPath c : Sequence.fromIterable(myCycles)) {
      Iterator<DepLink> itr = Sequence.fromIterable(c.elements()).iterator();
      // skip first path element, which is always the one from my getCapturedDependencies() 
      itr.next();
      MPSTreeNode parent = this;
      while (itr.hasNext()) {
        DependencyTreeNode dtn = new DependencyTreeNode(itr.next());
        parent.add(dtn);
        parent = dtn;
      }
    }
    myInitialized = true;
  }

  @Override
  public boolean isInitialized() {
    return myInitialized;
  }

  @Override
  public void doubleClick() {
    ProjectPane.getInstance(check_lba8jw_a0a0a31(((DependencyTree) getTree()), this)).selectModule(getModule(), false);
  }

  private static Project check_lba8jw_a0a0a31(DependencyTree checkedDotOperand, ModuleDependencyNode checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getProject();
    }
    return null;
  }
}
