package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import jetbrains.mps.ide.ui.tree.MPSTreeNode;
import jetbrains.mps.ide.ui.tree.TreeMessage;
import java.awt.Color;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.icons.MPSIcons;
import javax.swing.tree.TreeNode;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.ui.tree.TextMPSTreeNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ide.projectPane.ProjectPane;
import com.intellij.openapi.project.Project;

public class ModuleDependencyNode extends MPSTreeNode {
  private static final TreeMessage HAS_CYCLE = new TreeMessage(Color.RED, "cycle", null);
  private static final TreeMessage BOOTSTRAP_DEPENDENCY = new TreeMessage(Color.RED, "bootstrap dependecy", null);
  private List<SModule> myModules;
  private boolean myInitialized;
  private boolean myCyclic;

  public ModuleDependencyNode(SModule module, IOperationContext context) {
    this(ListSequence.fromListAndArray(new ArrayList<SModule>(), module), context);
  }

  public ModuleDependencyNode(List<SModule> modules, IOperationContext context) {
    super(context);
    myModules = modules;
    if (ListSequence.fromList(modules).count() == 1) {
      setIcon(IconManager.getIconFor(ListSequence.fromList(modules).first()));
    }
    String text = ListSequence.fromList(modules).first().getModuleName();
    if (ListSequence.fromList(modules).count() > 1) {
      text += ", " + ListSequence.fromList(modules).getElement(1).getModuleName();
      if (ListSequence.fromList(modules).count() > 2) {
        text += ", ... (" + ListSequence.fromList(modules).count() + " modules)";
      }
      setIcon(MPSIcons.ProjectPane.LogicalView);
    }
    setNodeIdentifier(text);
  }

  public List<SModule> getModules() {
    return myModules;
  }

  public boolean isUsedLanguage() {
    return false;
  }

  public void setCyclic() {
    myCyclic = true;
  }

  public boolean isCyclic() {
    return myCyclic;
  }

  public ModuleDependencyNode getFromNode() {
    TreeNode node = getParent();
    if (node != null && isUsedLanguage()) {
      node = node.getParent();
    }
    if (node != null && node instanceof ModuleDependencyNode) {
      return (ModuleDependencyNode) node;
    }
    return null;
  }

  @Override
  public boolean isLeaf() {
    return false;
  }

  @Override
  protected void doInit() {
    Set<SModule> reqModules = SetSequence.fromSet(new HashSet<SModule>());
    Set<SModule> rtModules = SetSequence.fromSet(new HashSet<SModule>());
    Set<SModule> usedLanguages = SetSequence.fromSet(new HashSet<SModule>());

    DependencyTree tree = (DependencyTree) getTree();

    for (SModule module : ListSequence.fromList(myModules)) {
      GlobalModuleDependenciesManager depManager = new GlobalModuleDependenciesManager(module);
      SetSequence.fromSet(reqModules).addSequence(CollectionSequence.fromCollection(depManager.getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE)));
      SetSequence.fromSet(rtModules).addSequence(CollectionSequence.fromCollection(depManager.getModules(GlobalModuleDependenciesManager.Deptype.EXECUTE)));
      SetSequence.fromSet(usedLanguages).addSequence(CollectionSequence.fromCollection(depManager.getUsedLanguages()));
    }

    Set<SModule> allModules = (tree.isShowRuntime() ? rtModules : reqModules);
    Set<SModule> depLoops = tree.getLoops();
    // Dependency manager doesn't add module itself to its dependencies, fixing this here 
    SetSequence.fromSet(allModules).addSequence(SetSequence.fromSet(depLoops).intersect(ListSequence.fromList(myModules)));

    if (tree.isHideSourceModules()) {
      SetSequence.fromSet(allModules).removeSequence(ListSequence.fromList(tree.getModules()));
      SetSequence.fromSet(usedLanguages).removeSequence(ListSequence.fromList(tree.getModules()));
    }

    for (SModule m : SetSequence.fromSet(allModules).sort(new ISelector<SModule, String>() {
      public String select(SModule it) {
        return it.getModuleName();
      }
    }, true)) {
      add(new ModuleDependencyNode.DepDependencyNode(m, !(SetSequence.fromSet(reqModules).contains(m)), SetSequence.fromSet(depLoops).contains(m), getOperationContext()));
    }

    if (tree.isShowUsedLanguage()) {
      MPSTreeNode usedlanguages = new TextMPSTreeNode("Used Languages", getOperationContext());
      boolean hasBootstrapDep = false;
      for (SModule l : SetSequence.fromSet(usedLanguages).sort(new ISelector<SModule, String>() {
        public String select(SModule it) {
          return it.getModuleName();
        }
      }, true)) {
        Iterable<SModule> langModules = new GlobalModuleDependenciesManager(l).getModules(GlobalModuleDependenciesManager.Deptype.EXECUTE);
        boolean isBootstrapDep = Sequence.fromIterable(langModules).intersect(ListSequence.fromList(myModules)).isNotEmpty();
        hasBootstrapDep |= isBootstrapDep;
        usedlanguages.add(new ModuleDependencyNode.ULangDependencyNode(l, isBootstrapDep, getOperationContext()));
      }
      if (hasBootstrapDep) {
        usedlanguages.addTreeMessage(BOOTSTRAP_DEPENDENCY);
      }
      add(usedlanguages);
    }
    myInitialized = true;
  }

  @Override
  public boolean isInitialized() {
    return myInitialized;
  }

  @Override
  public void doubleClick() {
    if (ListSequence.fromList(myModules).count() == 1) {
      ProjectPane.getInstance(check_lba8jw_a0a0a0a51(((DependencyTree) getTree()), this)).selectModule(ListSequence.fromList(myModules).first(), false);
    }
  }

  public static class DepDependencyNode extends ModuleDependencyNode {
    public DepDependencyNode(SModule module, boolean isRuntime, boolean isCyclic, IOperationContext context) {
      super(module, context);
      if (isRuntime) {
        setNodeIdentifier(getNodeIdentifier() + " (runtime)");
      }
      if (isCyclic) {
        setCyclic();
        addTreeMessage(HAS_CYCLE);
      }
    }

    @Override
    public boolean isUsedLanguage() {
      return false;
    }
  }

  public static class ULangDependencyNode extends ModuleDependencyNode {
    public ULangDependencyNode(SModule module, boolean isBootstrap, IOperationContext context) {
      super(module, context);
      if (isBootstrap) {
        setCyclic();
        addTreeMessage(BOOTSTRAP_DEPENDENCY);
      }
    }

    @Override
    public boolean isUsedLanguage() {
      return true;
    }
  }

  private static Project check_lba8jw_a0a0a0a51(DependencyTree checkedDotOperand, ModuleDependencyNode checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getProject();
    }
    return null;
  }
}
