package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import org.jetbrains.mps.util.Condition;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

/*package*/ class CycleBuilder {
  private final Condition<DepLink> elementMatch;
  private DepLink myTarget;
  private List<DepPath> myCycles;
  private DepPath myCurrent;
  /*package*/ CycleBuilder(Condition<DepLink> elementMatch) {
    this.elementMatch = elementMatch;
  }
  /**
   * Each cycle found when traversing supplied depLink.
   * Cycle starts and ends at the same module with the same role, and these are of supplied depLink
   * elementMatch condition is met for each element of the path (including first and last).
   */
  public List<DepPath> cyclePaths(DepLink depLink) {
    myTarget = depLink;
    myCycles = ListSequence.fromList(new ArrayList<DepPath>());
    List<DepPath> cycles = ListSequence.fromList(new ArrayList<DepPath>());
    myCurrent = new DepPath();
    myCurrent.push(depLink);
    nextPathLevel(depLink);
    return myCycles;
  }
  private void nextPathLevel(DepLink l) {
    if (ListSequence.fromList(l.children()).isEmpty() && l.getReused() != null) {
      // reused is identical to the referencing node, don't check key equality to avoid false cycles 
      nextPathLevel(l.getReused());
      return;
    }
    for (DepLink ch : ListSequence.fromList(l.children()).where(new IWhereFilter<DepLink>() {
      public boolean accept(DepLink it) {
        return elementMatch.met(it);
      }
    })) {
      if (myCurrent.seen(ch)) {
        if (eq_tn82ka_a0a0a0b0g(ch.getRoleModuleKey(), myTarget.getRoleModuleKey())) {
          // cycle found 
          myCurrent.push(ch);
          ListSequence.fromList(myCycles).addElement(new DepPath(myCurrent));
          myCurrent.pop();
        }
        continue;
      }
      myCurrent.push(ch);
      nextPathLevel(ch);
      myCurrent.pop();
    }
  }
  private static boolean eq_tn82ka_a0a0a0b0g(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
