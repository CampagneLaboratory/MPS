package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.structure.modules.GeneratorDescriptor;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.project.structure.modules.DevkitDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;

public class DependencyUtil {
  public DependencyUtil() {
  }
  public static List<DependencyUtil.Link> dependencies(DependencyUtil.Role role, SModule module, boolean trackRuntime) {
    List<DependencyUtil.Link> result = ListSequence.fromList(new ArrayList<DependencyUtil.Link>());
    ModuleDescriptor descr = ((AbstractModule) module).getModuleDescriptor();
    if (descr == null) {
      return result;
    }
    switch (role) {
      case None:
        // first step 
        addDeps(result, descr.getUsedDevkits(), DependencyUtil.Role.UsedDevkit, DependencyUtil.LinkType.UsesDevkit);
        addDeps(result, descr.getUsedLanguages(), DependencyUtil.Role.UsedLanguage, DependencyUtil.LinkType.UsesLanguage);
        addDeps(result, getReexportDeps(descr), DependencyUtil.Role.DTDependency_, DependencyUtil.LinkType.ReexportsDep);
        addDeps(result, getNonreexportDeps(descr), DependencyUtil.Role.DTDependency_, DependencyUtil.LinkType.Depends);
        if (descr instanceof LanguageDescriptor) {
          LanguageDescriptor lang = (LanguageDescriptor) descr;
          addDeps(result, lang.getExtendedLanguages(), DependencyUtil.Role.DTDependency_, DependencyUtil.LinkType.ExtendsLanguage);
          ListSequence.fromList(result).addElement(new DependencyUtil.Link(ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("ceab5195-25ea-4f22-9b92-103b95ca8c0c(jetbrains.mps.lang.core)")), DependencyUtil.Role.DTDependency_, DependencyUtil.LinkType.LangCore));

          // generators and generators dependencies are now also added to language dependencies (MPS-15883) 
          addDeps(result, Sequence.fromIterable(((Iterable<GeneratorDescriptor>) lang.getGenerators())).select(new ISelector<GeneratorDescriptor, SModuleReference>() {
            public SModuleReference select(GeneratorDescriptor it) {
              return it.getModuleReference();
            }
          }), DependencyUtil.Role.None, DependencyUtil.LinkType.Generator);
          addDeps(result, Sequence.fromIterable(((Iterable<GeneratorDescriptor>) lang.getGenerators())).select(new ISelector<GeneratorDescriptor, SModuleReference>() {
            public SModuleReference select(GeneratorDescriptor it) {
              return it.getModuleReference();
            }
          }), DependencyUtil.Role.DTDependency, DependencyUtil.LinkType.Generator);
        }
        if (descr instanceof GeneratorDescriptor) {
          GeneratorDescriptor gen = (GeneratorDescriptor) descr;
          addDeps(result, gen.getDepGenerators(), DependencyUtil.Role.DTDependency, DependencyUtil.LinkType.DependsOnGenerator);
          ListSequence.fromList(result).addElement(new DependencyUtil.Link((as_he47wm_a0a0a0a0c0g0a3a1(module, Generator.class)).getSourceLanguage(), DependencyUtil.Role.DTDependency, DependencyUtil.LinkType.GeneratorLanguage));
          ListSequence.fromList(result).addElement(new DependencyUtil.Link((as_he47wm_a0a0a0a0d0g0a3a1(module, Generator.class)).getSourceLanguage(), DependencyUtil.Role.GeneratorLanguage, DependencyUtil.LinkType.GeneratorLanguage));
        }
        break;

      case UsedDevkit:
      case DependencyDevkit:
        DevkitDescriptor devkit = as_he47wm_a0a0a2d0b(descr, DevkitDescriptor.class);
        if (devkit == null) {
          break;
        }
        boolean direct = role == DependencyUtil.Role.UsedDevkit;
        addDeps(result, devkit.getExtendedDevkits(), (direct ? DependencyUtil.Role.UsedDevkit : DependencyUtil.Role.DependencyDevkit), DependencyUtil.LinkType.ExtendsDevkit);
        addDeps(result, devkit.getExportedLanguages(), (direct ? DependencyUtil.Role.UsedLanguage : DependencyUtil.Role.DependencyLanguage), DependencyUtil.LinkType.ExportsLanguage);
        addDeps(result, devkit.getExportedSolutions(), (direct ? DependencyUtil.Role.DTDependency_ : DependencyUtil.Role.RTDependency), DependencyUtil.LinkType.ExportsSolution);
        break;

      case UsedExtLanguage:
      case UsedLanguage:
        LanguageDescriptor lang = as_he47wm_a0a0a4d0b(descr, LanguageDescriptor.class);
        if (lang == null) {
          break;
        }
        addDeps(result, lang.getExtendedLanguages(), DependencyUtil.Role.UsedExtLanguage, DependencyUtil.LinkType.ExtendsLanguage);
        if (trackRuntime) {
          addDeps(result, lang.getRuntimeModules(), DependencyUtil.Role.RTDependency, DependencyUtil.LinkType.ExportsRuntime);
        }
        break;

      case DTDependency_:
        addDeps(result, getReexportDeps(descr), DependencyUtil.Role.DTDependency_, DependencyUtil.LinkType.ReexportsDep);
        if (descr instanceof LanguageDescriptor) {
          addDeps(result, (as_he47wm_a0a1a0a1a5d0b(descr, LanguageDescriptor.class)).getExtendedLanguages(), DependencyUtil.Role.DTDependency_, DependencyUtil.LinkType.ExtendsLanguage);
        }
        if (trackRuntime) {
          addDeps(result, getNonreexportDeps(descr), DependencyUtil.Role.RTDependency, DependencyUtil.LinkType.Depends);
          addDeps(result, descr.getUsedLanguages(), DependencyUtil.Role.DependencyLanguage, DependencyUtil.LinkType.UsesLanguage);
          addDeps(result, descr.getUsedDevkits(), DependencyUtil.Role.DependencyDevkit, DependencyUtil.LinkType.UsesDevkit);
        }
        break;

      case DTDependency:
      case RTDependency:
        if (trackRuntime) {
          addDeps(result, getReexportDeps(descr), DependencyUtil.Role.RTDependency, DependencyUtil.LinkType.ReexportsDep);
          addDeps(result, getNonreexportDeps(descr), DependencyUtil.Role.RTDependency, DependencyUtil.LinkType.Depends);
          addDeps(result, descr.getUsedLanguages(), DependencyUtil.Role.DependencyLanguage, DependencyUtil.LinkType.UsesLanguage);
          addDeps(result, descr.getUsedDevkits(), DependencyUtil.Role.DependencyDevkit, DependencyUtil.LinkType.UsesDevkit);
          if (descr instanceof LanguageDescriptor) {
            addDeps(result, (as_he47wm_a0a1a0a4a0a7d0b(descr, LanguageDescriptor.class)).getExtendedLanguages(), DependencyUtil.Role.RTDependency, DependencyUtil.LinkType.ExtendsLanguage);
          }
          if (descr instanceof GeneratorDescriptor) {
            GeneratorDescriptor gen = (GeneratorDescriptor) descr;
            // generator languages are now also dependencies 
            addDeps(result, gen.getDepGenerators(), DependencyUtil.Role.RTDependency, DependencyUtil.LinkType.DependsOnGenerator);
            ListSequence.fromList(result).addElement(new DependencyUtil.Link((as_he47wm_a0a0a0a0d0f0a0h3a1(module, Generator.class)).getSourceLanguage(), DependencyUtil.Role.RTDependency, DependencyUtil.LinkType.GeneratorLanguage));
          }

        }
        break;

      case RTLibraries:
        break;

      case GeneratorLanguage:
        addDeps(result, check_he47wm_b0a0j3a1(as_he47wm_a0b0a0j3a1(descr, LanguageDescriptor.class)), DependencyUtil.Role.GeneratorLanguage, DependencyUtil.LinkType.ExtendsLanguage);
        addDeps(result, check_he47wm_b0b0j3a1(as_he47wm_a0b0b0j3a1(descr, LanguageDescriptor.class)), DependencyUtil.Role.DTDependency, DependencyUtil.LinkType.ExportsRuntime);
        break;

      case DependencyLanguage:
        addDeps(result, check_he47wm_b0a0k3a1(as_he47wm_a0b0a0k3a1(descr, LanguageDescriptor.class)), DependencyUtil.Role.DependencyLanguage, DependencyUtil.LinkType.ExtendsLanguage);
        addDeps(result, check_he47wm_b0b0k3a1(as_he47wm_a0b0b0k3a1(descr, LanguageDescriptor.class)), DependencyUtil.Role.RTDependency, DependencyUtil.LinkType.ExportsRuntime);
        break;

      default:
    }
    return result;
  }
  private static void addDeps(List<DependencyUtil.Link> result, Iterable<SModuleReference> modules, final DependencyUtil.Role role, final DependencyUtil.LinkType linktype) {
    if (modules == null) {
      return;
    }
    ListSequence.fromList(result).addSequence(Sequence.fromIterable(modules).select(new ISelector<SModuleReference, SModule>() {
      public SModule select(SModuleReference ref) {
        return ModuleRepositoryFacade.getInstance().getModule(ref);
      }
    }).where(new IWhereFilter<SModule>() {
      public boolean accept(SModule module) {
        return module != null;
      }
    }).select(new ISelector<SModule, DependencyUtil.Link>() {
      public DependencyUtil.Link select(SModule module) {
        return new DependencyUtil.Link(module, role, linktype);
      }
    }));
  }
  private static Iterable<SModuleReference> getReexportDeps(ModuleDescriptor descr) {
    return SetSequence.fromSet(((Set<jetbrains.mps.project.structure.modules.Dependency>) descr.getDependencies())).where(new IWhereFilter<jetbrains.mps.project.structure.modules.Dependency>() {
      public boolean accept(jetbrains.mps.project.structure.modules.Dependency dep) {
        return dep.isReexport();
      }
    }).select(new ISelector<jetbrains.mps.project.structure.modules.Dependency, SModuleReference>() {
      public SModuleReference select(jetbrains.mps.project.structure.modules.Dependency dep) {
        return dep.getModuleRef();
      }
    });
  }
  private static Iterable<SModuleReference> getNonreexportDeps(ModuleDescriptor descr) {
    return SetSequence.fromSet(((Set<jetbrains.mps.project.structure.modules.Dependency>) descr.getDependencies())).where(new IWhereFilter<jetbrains.mps.project.structure.modules.Dependency>() {
      public boolean accept(jetbrains.mps.project.structure.modules.Dependency dep) {
        return !(dep.isReexport());
      }
    }).select(new ISelector<jetbrains.mps.project.structure.modules.Dependency, SModuleReference>() {
      public SModuleReference select(jetbrains.mps.project.structure.modules.Dependency dep) {
        return dep.getModuleRef();
      }
    });
  }
  public static Set<Dependency> getCyclic(Dependency node, Set<Dependency> visited, List<Dependency> path) {
    Set<Dependency> res = SetSequence.fromSet(new HashSet<Dependency>());
    if (ListSequence.fromList(path).contains(node)) {
      return SetSequence.fromSet(res).addSequence(ListSequence.fromList(path).tailListSequence(ListSequence.fromList(path).indexOf(node)));
    }
    if (!(SetSequence.fromSet(visited).contains(node))) {
      SetSequence.fromSet(visited).addElement(node);
      ListSequence.fromList(path).addElement(node);
      for (DependencyUtil.Link link : ListSequence.fromList(dependencies(node.role(), node.module(), true))) {
        SetSequence.fromSet(res).addSequence(SetSequence.fromSet(getCyclic(new Dependency(link.module, link.role), visited, path)));
      }
      ListSequence.fromList(path).removeLastElement();
    }
    return res;
  }
  public static Set<Tuples._2<DependencyUtil.Role, SModule>> getLoops(DependencyUtil.Role role, SModule module, boolean trackRuntime) {
    Set<Tuples._2<DependencyUtil.Role, SModule>> result = SetSequence.fromSet(new HashSet<Tuples._2<DependencyUtil.Role, SModule>>());
    Set<Tuples._2<DependencyUtil.Role, SModule>> visited = SetSequence.fromSet(new HashSet<Tuples._2<DependencyUtil.Role, SModule>>());
    calcLoops(MultiTuple.<DependencyUtil.Role,SModule>from(role, module), trackRuntime, visited, ListSequence.fromList(new ArrayList<Tuples._2<DependencyUtil.Role, SModule>>()), result);
    return result;
  }
  private static void calcLoops(Tuples._2<DependencyUtil.Role, SModule> cur, boolean trackRuntime, Set<Tuples._2<DependencyUtil.Role, SModule>> visited, List<Tuples._2<DependencyUtil.Role, SModule>> path, Set<Tuples._2<DependencyUtil.Role, SModule>> result) {
    if (ListSequence.fromList(path).contains(cur)) {
      SetSequence.fromSet(result).addSequence(ListSequence.fromList(path).tailListSequence(ListSequence.fromList(path).indexOf(cur)));
      return;
    }
    if (SetSequence.fromSet(visited).contains(cur)) {
      return;
    }
    SetSequence.fromSet(visited).addElement(cur);
    ListSequence.fromList(path).addElement(cur);
    for (DependencyUtil.Link link : ListSequence.fromList(dependencies(cur._0(), cur._1(), trackRuntime))) {
      calcLoops(MultiTuple.<DependencyUtil.Role,SModule>from(link.role, link.module), trackRuntime, visited, path, result);
    }
    ListSequence.fromList(path).removeLastElement();
  }
  public static   enum LinkType {
    Depends("depends on"),
    ReexportsDep("reexports dependency on"),
    UsesLanguage("uses language"),
    ExtendsLanguage("extends language"),
    ExportsRuntime("exports runtime"),
    ExportsRuntimeLib("has runtime library"),
    UsesDevkit("uses devkit"),
    ExportsLanguage("exports language"),
    ExportsSolution("exports solution"),
    ExtendsDevkit("extends devkit"),
    GeneratorLanguage("generator language"),
    DependsOnGenerator("depends on generator"),
    Generator("generator"),
    LangCore("");

    private String myText;
    LinkType(String text) {
      myText = text;
    }
    @Override
    public String toString() {
      return myText;
    }
  }
  public static   enum Role {
    None(),
    DTDependency_(),
    DTDependency(),
    RTDependency(),
    RTLibraries(),
    UsedLanguage(),
    UsedExtLanguage(),
    UsedDevkit(),
    GeneratorLanguage(),
    DependencyLanguage(),
    DependencyDevkit();

    Role() {
    }
    public boolean isUsedLanguage() {
      return this == DependencyUtil.Role.UsedLanguage;
    }
    public boolean isDTDependency() {
      return this == DependencyUtil.Role.DTDependency_ || this == DependencyUtil.Role.DTDependency;
    }
    public boolean isRTDependency() {
      return this == DependencyUtil.Role.RTDependency || this == DependencyUtil.Role.RTLibraries;
    }
    public boolean isDependency() {
      return isDTDependency() || isRTDependency();
    }
  }
  public static class Dependency extends MultiTuple._2<SModule, DependencyUtil.Role> {
    public Dependency() {
      super();
    }
    public Dependency(SModule module, DependencyUtil.Role role) {
      super(module, role);
    }
    public SModule module(SModule value) {
      return super._0(value);
    }
    public DependencyUtil.Role role(DependencyUtil.Role value) {
      return super._1(value);
    }
    public SModule module() {
      return super._0();
    }
    public DependencyUtil.Role role() {
      return super._1();
    }
    @SuppressWarnings(value = "unchecked")
    public DependencyUtil.Dependency assignFrom(Tuples._2<SModule, DependencyUtil.Role> from) {
      return (DependencyUtil.Dependency) super.assign(from);
    }
  }
  public static class Link {
    public DependencyUtil.Role role;
    public SModule module;
    public DependencyUtil.LinkType linktype;
    public Link(SModule module, DependencyUtil.Role role, DependencyUtil.LinkType linktype) {
      this.module = module;
      this.role = role;
      this.linktype = linktype;
    }
    @Override
    public boolean equals(Object object) {
      if (object instanceof DependencyUtil.Link) {
        DependencyUtil.Link link = (DependencyUtil.Link) object;
        return link.module.equals(module) && link.linktype == linktype && link.role == role;
      }
      return false;
    }
    @Override
    public int hashCode() {
      return module.hashCode() + linktype.hashCode();
    }
  }
  private static Set<SModuleReference> check_he47wm_b0a0j3a1(LanguageDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getExtendedLanguages();
    }
    return null;
  }
  private static Set<SModuleReference> check_he47wm_b0b0j3a1(LanguageDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getRuntimeModules();
    }
    return null;
  }
  private static Set<SModuleReference> check_he47wm_b0a0k3a1(LanguageDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getExtendedLanguages();
    }
    return null;
  }
  private static Set<SModuleReference> check_he47wm_b0b0k3a1(LanguageDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getRuntimeModules();
    }
    return null;
  }
  private static <T> T as_he47wm_a0a0a0a0c0g0a3a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_he47wm_a0a0a0a0d0g0a3a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_he47wm_a0a0a2d0b(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_he47wm_a0a0a4d0b(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_he47wm_a0a1a0a1a5d0b(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_he47wm_a0a1a0a4a0a7d0b(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_he47wm_a0a0a0a0d0f0a0h3a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_he47wm_a0b0a0j3a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_he47wm_a0b0b0j3a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_he47wm_a0b0a0k3a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_he47wm_a0b0b0k3a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
