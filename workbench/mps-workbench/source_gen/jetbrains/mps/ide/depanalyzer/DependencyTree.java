package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import jetbrains.mps.ide.ui.tree.MPSTree;
import com.intellij.openapi.actionSystem.DataProvider;
import com.intellij.openapi.project.Project;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.ide.ui.tree.MPSTreeNode;
import jetbrains.mps.ide.ui.tree.TextTreeNode;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.ide.ui.tree.TreeMessage;
import java.awt.Color;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import com.intellij.openapi.actionSystem.ActionGroup;
import jetbrains.mps.workbench.action.ActionUtils;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.ActionManager;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.smodel.IOperationContext;

public class DependencyTree extends MPSTree implements DataProvider {
  private Project myProject;
  private SModule myModule;
  private boolean myShowRuntime;
  private boolean myShowUsedLanguage = true;

  public DependencyTree(Project project) {
    myProject = project;
  }

  /*package*/ Project getProject() {
    return myProject;
  }

  public void setModules(SModule module) {
    myModule = module;
  }

  public SModule getModule() {
    return myModule;
  }

  public boolean isShowRuntime() {
    return myShowRuntime;
  }

  public void setShowRuntime(boolean showRuntime) {
    myShowRuntime = showRuntime;
  }

  public boolean isShowUsedLanguage() {
    return myShowUsedLanguage;
  }

  public void setShowUsedLanguage(boolean showUsedLanguage) {
    myShowUsedLanguage = showUsedLanguage;
  }

  @Override
  protected MPSTreeNode rebuild() {
    if (myModule == null) {
      return new TextTreeNode("No Content");
    }
    DepLink deps = new DependencyUtil().trackRuntime(isShowRuntime()).build(myModule);
    TextTreeNode root = new TextTreeNode(myModule.getModuleName());
    root.setIcon(IconManager.getIconFor(myModule));
    populate(root, deps.allDependencies());
    return root;

  }

  private void populate(MPSTreeNode root, Iterable<DepLink> allDependencies) {
    final TreeMessage HAS_CYCLE = new TreeMessage(Color.RED, "module with dependency cycle", null);
    final TreeMessage BOOTSTRAP_DEPENDENCY = new TreeMessage(Color.RED, "language with bootstrap dependency", null);

    Iterable<SModule> sortedModules = Sequence.fromIterable(allDependencies).select(new ISelector<DepLink, SModule>() {
      public SModule select(DepLink it) {
        return it.module;
      }
    }).distinct().sort(new ISelector<SModule, String>() {
      public String select(SModule it) {
        return it.getModuleName();
      }
    }, true);

    for (final SModule module : Sequence.fromIterable(sortedModules)) {
      Iterable<DepLink> moduleDeps = Sequence.fromIterable(allDependencies).where(new IWhereFilter<DepLink>() {
        public boolean accept(DepLink it) {
          return it.module == module && it.role.isDependency();
        }
      });
      if (Sequence.fromIterable(moduleDeps).isEmpty()) {
        continue;
      }
      ModuleDependencyNode n = new ModuleDependencyNode(module, moduleDeps, false);
      final CycleBuilder cb = new CycleBuilder(new Condition<DepLink>() {
        public boolean met(DepLink dl) {
          return dl.role.isDependency();
        }
      });
      // if there's any dependency with loop to itself, and role of each element of this path isDependency, then it's dependency cycle 
      Iterable<DepPath> cycles = Sequence.fromIterable(moduleDeps).translate(new ITranslator2<DepLink, DepPath>() {
        public Iterable<DepPath> translate(DepLink dep) {
          return cb.cyclePaths(dep);
        }
      });
      if (Sequence.fromIterable(cycles).isNotEmpty()) {
        n.setCycles(cycles);
        n.addTreeMessage(HAS_CYCLE);
      }
      root.add(n);
    }
    if (isShowUsedLanguage()) {
      MPSTreeNode usedlanguages = new TextTreeNode("Used Languages");
      boolean hasBootstrapDep = false;
      for (final SModule module : Sequence.fromIterable(sortedModules)) {
        Iterable<DepLink> usedLangDeps = Sequence.fromIterable(allDependencies).where(new IWhereFilter<DepLink>() {
          public boolean accept(DepLink it) {
            return it.module == module && it.role.isUsedLanguage();
          }
        });
        if (Sequence.fromIterable(usedLangDeps).isEmpty()) {
          continue;
        }
        ModuleDependencyNode n = new ModuleDependencyNode(module, usedLangDeps, true);
        final CycleBuilder cb = new CycleBuilder(new Condition<DepLink>() {
          public boolean met(DepLink dl) {
            return dl.role.isUsedLanguage();
          }
        });
        Iterable<DepPath> cycles = Sequence.fromIterable(usedLangDeps).translate(new ITranslator2<DepLink, DepPath>() {
          public Iterable<DepPath> translate(DepLink dep) {
            return cb.cyclePaths(dep);
          }
        });
        if (Sequence.fromIterable(cycles).isNotEmpty()) {
          hasBootstrapDep = true;
          n.setCycles(cycles);
          n.addTreeMessage(BOOTSTRAP_DEPENDENCY);
        }
        usedlanguages.add(n);
      }
      if (hasBootstrapDep) {
        usedlanguages.addTreeMessage(BOOTSTRAP_DEPENDENCY);
      }
      if (usedlanguages.getChildCount() > 0) {
        root.add(usedlanguages);
      }
    }
  }

  @Override
  protected ActionGroup createPopupActionGroup(MPSTreeNode treeNode) {
    return ActionUtils.groupFromActions(((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.ShowDependenciesInViewer_Action")), ((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.AnalyzeModuleDependencies_Action")), ((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.ModuleProperties_Action")));
  }

  @Nullable
  @Override
  public Object getData(@NonNls String id) {
    ModuleDependencyNode current = as_he3vmc_a0a0a51(getCurrentNode(), ModuleDependencyNode.class);
    if (id.equals(MPSCommonDataKeys.TREE_NODE.getName())) {
      return current;
    }
    if (id.equals(MPSCommonDataKeys.OPERATION_CONTEXT.getName())) {
      return check_he3vmc_a0a2a51(current);
    }
    if (id.equals(MPSCommonDataKeys.MODULE.getName())) {
      return check_he3vmc_a0a3a51(current);
    }
    return null;
  }

  private static IOperationContext check_he3vmc_a0a2a51(ModuleDependencyNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getOperationContext();
    }
    return null;
  }

  private static SModule check_he3vmc_a0a3a51(ModuleDependencyNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }

  private static <T> T as_he3vmc_a0a0a51(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
