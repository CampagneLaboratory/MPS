package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTree;
import com.intellij.openapi.actionSystem.DataProvider;
import com.intellij.openapi.project.Project;
import java.util.List;
import jetbrains.mps.project.IModule;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.ui.TextMPSTreeNode;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import javax.swing.JPopupMenu;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.workbench.action.ActionUtils;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import javax.swing.tree.TreePath;
import jetbrains.mps.smodel.IOperationContext;

public class DependencyTree extends MPSTree implements DataProvider {
  private Project myProject;
  private List<IModule> myModules;
  private boolean myShowRuntime;
  private boolean myShowUsedLanguage = true;
  private boolean myHideSourceModules;
  private Set<IModule> myCycles = SetSequence.fromSet(new HashSet<IModule>());

  public DependencyTree(Project project) {
    myProject = project;
  }

  public Project getProject() {
    return myProject;
  }

  public void setModules(List<IModule> modules) {
    myModules = modules;
    MPSTreeNode root = getRootNode();
    if (root != null) {
      collapseAll();
      selectNode(getRootNode());
    }
  }

  public List<IModule> getModules() {
    return myModules;
  }

  public boolean isShowRuntime() {
    return myShowRuntime;
  }

  public void setShowRuntime(boolean showRuntime) {
    myShowRuntime = showRuntime;
  }

  public boolean isShowUsedLanguage() {
    return myShowUsedLanguage;
  }

  public void setShowUsedLanguage(boolean showUsedLanguage) {
    myShowUsedLanguage = showUsedLanguage;
  }

  public boolean isHideSourceModules() {
    return myHideSourceModules;
  }

  public void setHideSourceModules(boolean hideSourceModules) {
    myHideSourceModules = hideSourceModules;
  }

  public Set<IModule> getLoops() {
    return myCycles;
  }

  @Override
  protected MPSTreeNode rebuild() {
    SetSequence.fromSet(myCycles).clear();
    if (myModules == null || ListSequence.fromList(myModules).isEmpty()) {
      return new TextMPSTreeNode("No Content", null);
    }
    SetSequence.fromSet(myCycles).addSequence(ListSequence.fromList(myModules).translate(new ITranslator2<IModule, Tuples._2<DependencyUtil.Role, IModule>>() {
      public Iterable<Tuples._2<DependencyUtil.Role, IModule>> translate(IModule m) {
        return DependencyUtil.getLoops(DependencyUtil.Role.None, m, isShowRuntime());
      }
    }).where(new IWhereFilter<Tuples._2<DependencyUtil.Role, IModule>>() {
      public boolean accept(Tuples._2<DependencyUtil.Role, IModule> dep) {
        return dep._0().isDependency();
      }
    }).select(new ISelector<Tuples._2<DependencyUtil.Role, IModule>, IModule>() {
      public IModule select(Tuples._2<DependencyUtil.Role, IModule> dep) {
        return dep._1();
      }
    }));
    ModuleDependencyNode root = new ModuleDependencyNode(myModules, null);
    expandRoot();
    return root;
  }

  @Override
  protected JPopupMenu createPopupMenu(MPSTreeNode treeNode) {
    DefaultActionGroup group = ActionUtils.groupFromActions(((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.ShowModuleDependencyLoop_Action")), ((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.ShowModuleBootstrapDependency_Action")), ((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.ShowDependenciesInViewer_Action")), ((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.ModuleProperties_Action")));
    return ActionManager.getInstance().createActionPopupMenu(ActionPlaces.UNKNOWN, group).getComponent();
  }

  @Nullable
  @Override
  public Object getData(@NonNls String id) {
    ModuleDependencyNode current = as_he3vmc_a0a0a91(getCurrentNode(), ModuleDependencyNode.class);
    if (id.equals(MPSDataKeys.LOGICAL_VIEW_NODE.getName())) {
      return current;
    }
    if (id.equals(MPSDataKeys.OPERATION_CONTEXT.getName())) {
      return check_he3vmc_a0a2a91(current);
    }
    if (id.equals(MPSCommonDataKeys.MODULE.getName())) {
      List<IModule> modules = check_he3vmc_a0a0d0t(current);
      TreePath[] selection = getSelectionPaths();
      if (ListSequence.fromList(modules).count() != 1 || (selection != null && selection.length > 1)) {
        return null;
      }
      return ListSequence.fromList(modules).first();
    }
    return null;
  }

  private static IOperationContext check_he3vmc_a0a2a91(ModuleDependencyNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getOperationContext();
    }
    return null;
  }

  private static List<IModule> check_he3vmc_a0a0d0t(ModuleDependencyNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModules();
    }
    return null;
  }

  private static <T> T as_he3vmc_a0a0a91(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }
}
