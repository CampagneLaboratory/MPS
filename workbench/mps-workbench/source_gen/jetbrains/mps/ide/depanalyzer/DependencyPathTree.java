package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTree;
import com.intellij.openapi.actionSystem.DataProvider;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import java.util.Set;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.project.Project;
import javax.swing.tree.TreeSelectionModel;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.ide.ui.MPSTreeNode;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.ide.ui.TextMPSTreeNode;
import javax.swing.JPopupMenu;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.workbench.action.ActionUtils;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.IOperationContext;

public class DependencyPathTree extends MPSTree implements DataProvider {
  private List<Tuples._4<Set<IModule>, Set<IModule>, Set<IModule>, Boolean>> myAllDependencies = ListSequence.fromList(new ArrayList<Tuples._4<Set<IModule>, Set<IModule>, Set<IModule>, Boolean>>());
  private Project myProject;
  private boolean myShowAllPaths;

  public DependencyPathTree(Project project) {
    myProject = project;
    getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  }

  public Project getProject() {
    return myProject;
  }

  public void setShowAllPaths(boolean value) {
    myShowAllPaths = value;
  }

  public boolean isShowAll() {
    return myShowAllPaths;
  }

  public void resetDependencies() {
    ListSequence.fromList(myAllDependencies).clear();
  }

  public void addDependency(Iterable<IModule> from, Iterable<IModule> to, Iterable<IModule> usedLanguage, boolean showRuntime) {
    ListSequence.fromList(myAllDependencies).addElement(MultiTuple.<Set<IModule>,Set<IModule>,Set<IModule>,Boolean>from(SetSequence.fromSetWithValues(new HashSet<IModule>(), from), SetSequence.fromSetWithValues(new HashSet<IModule>(), to), SetSequence.fromSetWithValues(new HashSet<IModule>(), usedLanguage), showRuntime));
  }

  private MPSTreeNode buildTree(IModule from, Set<IModule> dependency, Set<IModule> usedlanguage, boolean showRuntime) {
    Map<Tuples._2<IModule, DependencyUtil.Role>, DependencyPathTree.LinkFrom> visited = MapSequence.fromMap(new HashMap<Tuples._2<IModule, DependencyUtil.Role>, DependencyPathTree.LinkFrom>());
    Queue<DependencyPathTree.LinkFrom> unprocessed = QueueSequence.fromQueue(new LinkedList<DependencyPathTree.LinkFrom>());

    DependencyPathTree.LinkFrom root = new DependencyPathTree.LinkFrom(new DependencyUtil.Link(from, DependencyUtil.Role.None, null), null);
    QueueSequence.fromQueue(unprocessed).addLastElement(root);

    while (QueueSequence.fromQueue(unprocessed).isNotEmpty()) {
      DependencyPathTree.LinkFrom node = QueueSequence.fromQueue(unprocessed).removeFirstElement();
      if (node.link.role.isUsedLanguage() && SetSequence.fromSet(usedlanguage).contains(node.link.module) || node.link.role.isDependency() && SetSequence.fromSet(dependency).contains(node.link.module)) {
        // copy path to real tree 
        node.setDepUsed();
      } else if (MapSequence.fromMap(visited).containsKey(MultiTuple.<IModule,DependencyUtil.Role>from(node.link.module, node.link.role))) {
        if (!(isShowAll())) {
          continue;
        }
        DependencyPathTree.LinkFrom n = MapSequence.fromMap(visited).get(MultiTuple.<IModule,DependencyUtil.Role>from(node.link.module, node.link.role));
        n.addBackDep(node);
        // if we came to dependency, copy path to real tree 
        if (n.isUsed()) {
          node.setLinkUsed(n);
        }
      } else {
        MapSequence.fromMap(visited).put(MultiTuple.<IModule,DependencyUtil.Role>from(node.link.module, node.link.role), node);
        DependencyUtil.dependencies(node.link.role, node.link.module, showRuntime);
        for (DependencyUtil.Link link : ListSequence.fromList(DependencyUtil.dependencies(node.link.role, node.link.module, showRuntime))) {
          DependencyPathTree.LinkFrom n = new DependencyPathTree.LinkFrom(link, node);
          QueueSequence.fromQueue(unprocessed).addLastElement(n);
        }
      }
    }

    return root.node;
  }

  public MPSTreeNode testBuildTree(IModule from, IModule dependency, IModule used, boolean showRuntime) {
    jetbrains.mps.util.misc.hash.HashSet<IModule> dependencies = new jetbrains.mps.util.misc.hash.HashSet<IModule>();
    if (dependency != null) {
      dependencies.add(dependency);
    }
    jetbrains.mps.util.misc.hash.HashSet<IModule> usedLanguages = new jetbrains.mps.util.misc.hash.HashSet<IModule>();
    if (used != null) {
      usedLanguages.add(used);
    }
    return buildTree(from, dependencies, usedLanguages, showRuntime);
  }

  protected MPSTreeNode rebuild() {
    MPSTreeNode result = new TextMPSTreeNode((ListSequence.fromList(myAllDependencies).isEmpty() ?
      "No Dependencies Selected" :
      "Found Dependencies:"
    ), null);
    for (Tuples._4<Set<IModule>, Set<IModule>, Set<IModule>, Boolean> dep : ListSequence.fromList(myAllDependencies)) {
      for (IModule m : SetSequence.fromSet(dep._0())) {
        MPSTreeNode node = buildTree(m, dep._1(), dep._2(), (boolean) dep._3());
        if (node != null) {
          result.add(node);
        }
      }
    }
    setRootVisible(ListSequence.fromList(myAllDependencies).isEmpty());
    setShowsRootHandles(ListSequence.fromList(myAllDependencies).isNotEmpty());
    return result;
  }

  @Override
  protected JPopupMenu createPopupMenu(MPSTreeNode node) {
    DefaultActionGroup group = ActionUtils.groupFromActions(((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.SafeDeleteModuleDependency_Action")), ((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.ShowInDependenciesViewer_Action")), ((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.ModuleProperties_Action")));
    return ActionManager.getInstance().createActionPopupMenu(ActionPlaces.UNKNOWN, group).getComponent();
  }

  @Nullable
  public Object getData(@NonNls String id) {
    DependencyTreeNode current = as_9bg0dz_a0a0a31(getCurrentNode(), DependencyTreeNode.class);
    if (id.equals(MPSDataKeys.LOGICAL_VIEW_NODE.getName())) {
      return current;
    }
    if (id.equals(MPSDataKeys.OPERATION_CONTEXT.getName())) {
      return check_9bg0dz_a0a2a31(current);
    }
    if (id.equals(MPSCommonDataKeys.MODULE.getName())) {
      return check_9bg0dz_a0a3a31(current);
    }
    return null;
  }

  public static class LinkFrom {
    private DependencyUtil.Link link;
    private DependencyPathTree.LinkFrom from;
    private List<DependencyPathTree.LinkFrom> backdeps = ListSequence.fromList(new ArrayList<DependencyPathTree.LinkFrom>());
    private DependencyTreeNode node;

    public LinkFrom(DependencyUtil.Link link, DependencyPathTree.LinkFrom from) {
      this.link = link;
      this.from = from;
    }

    public boolean isUsed() {
      return node != null;
    }

    public void setUsed() {
      if (isUsed()) {
        return;
      }
      node = new DependencyTreeNode(link, null);
      if (from != null) {
        from.setUsed();
        from.node.add(node);
      }
      ListSequence.fromList(backdeps).visitAll(new IVisitor<DependencyPathTree.LinkFrom>() {
        public void visit(DependencyPathTree.LinkFrom dep) {
          dep.setLinkUsed(LinkFrom.this);
        }
      });
    }

    public void setLinkUsed(DependencyPathTree.LinkFrom link) {
      setUsed();
      node.setLinkLeaf(link.node);
    }

    public void setDepUsed() {
      setUsed();
      node.setDepLeaf();
    }

    public void addBackDep(DependencyPathTree.LinkFrom dep) {
      ListSequence.fromList(backdeps).addElement(dep);
    }
  }

  private static IOperationContext check_9bg0dz_a0a2a31(DependencyTreeNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getOperationContext();
    }
    return null;
  }

  private static IModule check_9bg0dz_a0a3a31(DependencyTreeNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }

  private static <T> T as_9bg0dz_a0a0a31(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }
}
