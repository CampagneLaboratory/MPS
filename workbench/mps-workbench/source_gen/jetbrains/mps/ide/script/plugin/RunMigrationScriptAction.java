package jetbrains.mps.ide.script.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.project.DumbAware;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.smodel.IScope;
import java.util.ArrayList;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.openapi.project.Project;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class RunMigrationScriptAction extends BaseAction implements DumbAware {
  private SNode myScript;
  private boolean myApplyToSelection;
  private IOperationContext myContext;
  private List<SModel> myModels;
  private List<SModule> myModules;

  public RunMigrationScriptAction(SNode script, String name, boolean applyToSelection) {
    super(name);
    myScript = script;
    myApplyToSelection = applyToSelection;
  }

  @Override
  protected void doExecute(AnActionEvent e, Map<String, Object> _params) {
    IScope migrationScope = AbstractMigrationScriptHelper.createMigrationScope(myModels, myModules, myApplyToSelection);
    if (!(migrationScope.getModelDescriptors().iterator().hasNext())) {
      return;
    }
    List<SNode> scripts = new ArrayList<SNode>();
    scripts.add(myScript);
    AbstractMigrationScriptHelper.doRunScripts(scripts, migrationScope, myContext);
  }

  @Override
  protected boolean collectActionData(AnActionEvent e, Map<String, Object> _params) {
    if (!(super.collectActionData(e, _params))) {
      return false;
    }
    myContext = e.getData(MPSCommonDataKeys.OPERATION_CONTEXT);
    if (myContext == null) {
      return false;
    }
    Project project = e.getData(MPSDataKeys.PROJECT);
    if (project == null) {
      return false;
    }
    myModels = new ArrayList<SModel>();
    if (e.getData(MPSCommonDataKeys.MODELS) != null) {
      for (SModel model : ListSequence.fromList(e.getData(MPSCommonDataKeys.MODELS))) {
        myModels.add(model);
      }
    }
    myModules = new ArrayList<SModule>();
    if (e.getData(MPSDataKeys.MODULES) != null) {
      for (SModule module : ListSequence.fromList(e.getData(MPSDataKeys.MODULES))) {
        myModules.add(module);
      }
    }
    return true;
  }
}
