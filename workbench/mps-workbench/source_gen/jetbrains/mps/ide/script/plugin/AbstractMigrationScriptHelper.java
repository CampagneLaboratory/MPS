package jetbrains.mps.ide.script.plugin;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.script.plugin.migrationtool.MigrationScriptsTool;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.project.Project;
import java.util.Collections;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.ide.findusages.model.scopes.ModelsScope;
import org.jetbrains.mps.openapi.model.EditableSModel;
import jetbrains.mps.smodel.SModelStereotype;

public abstract class AbstractMigrationScriptHelper {
  public static void doRunScripts(List<SNode> scripts, SearchScope scope, IOperationContext context) {
    context.getComponent(MigrationScriptsTool.class).startMigration(scripts, scope, context);
  }

  public static SearchScope createMigrationScope(Iterable<SModule> selectedModules, Iterable<SModel> selectedModels) {
    return createMigrationScopeInternal(selectedModules, selectedModels);
  }

  public static SearchScope createMigrationScope(Project project) {
    return createMigrationScopeInternal(project.getModulesWithGenerators(), (Iterable<SModel>) Collections.<SModel>emptySet());
  }

  private static SearchScope createMigrationScopeInternal(Iterable<? extends SModule> modules, Iterable<? extends SModel> models) {
    Set<SModel> result = SetSequence.fromSet(new HashSet<SModel>());
    SetSequence.fromSet(result).addSequence(Sequence.fromIterable(models).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return includeModel(it);
      }
    }));
    SetSequence.fromSet(result).addSequence(Sequence.fromIterable(modules).where(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return !(it.isReadOnly());
      }
    }).translate(new ITranslator2<SModule, SModel>() {
      public Iterable<SModel> translate(SModule it) {
        return it.getModels();
      }
    }).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return includeModel(it);
      }
    }));
    return new ModelsScope(result);
  }
  private static boolean includeModel(SModel model) {
    if (!(((model instanceof EditableSModel)))) {
      return false;
    }
    if (model.isReadOnly()) {
      return false;
    }
    String modelStereotype = SModelStereotype.getStereotype(model);
    if (modelStereotype != null) {
      if (SModelStereotype.isStubModelStereotype(modelStereotype)) {
        return false;
      }
    }
    return true;
  }
}
