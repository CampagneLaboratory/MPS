package jetbrains.mps.ide.script.plugin;

/*Generated by MPS */

import java.util.Set;
import java.util.HashSet;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.Collections;
import java.util.Comparator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.Language;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.script.runtime.MigrationScriptUtil;
import jetbrains.mps.workbench.action.BaseGroup;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.util.NameUtil;
import java.util.Map;
import java.util.TreeSet;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.SortedSetSequence;
import java.util.HashMap;

public class ScriptsActionGroupHelper {
  private static final Set<String> ourSelectedScripts = new HashSet<String>();

  public ScriptsActionGroupHelper() {
  }

  public static Set<String> getSelectedScripts() {
    return ourSelectedScripts;
  }

  public static void sortScripts(List<SNode> scripts) {
    Collections.sort(scripts, new Comparator<SNode>() {
      public int compare(SNode s1, SNode s2) {
        String cat1 = SPropertyOperations.getString_def(s1, "type", "enhancement");
        String cat2 = SPropertyOperations.getString_def(s2, "type", "enhancement");
        if (cat1 == null) {
          cat1 = "";
        }
        if (cat2 == null) {
          cat2 = "";
        }
        if (cat1.compareTo(cat2) == 0) {
          String fromBuild1 = SPropertyOperations.getString(s1, "toBuild");
          String fromBuild2 = SPropertyOperations.getString(s2, "toBuild");
          if (fromBuild1 == null) {
            fromBuild1 = "";
          }
          if (fromBuild2 == null) {
            fromBuild2 = "";
          }
          return fromBuild1.compareTo(fromBuild2);
        }

        return cat1.compareTo(cat2);
      }
    });
  }

  public static List<SNode> getMigrationScripts(List<Language> languages) {
    List<SNode> migrationScripts = new ArrayList<SNode>();
    for (Language language : languages) {
      ListSequence.fromList(migrationScripts).addSequence(ListSequence.fromList(MigrationScriptUtil.getMigrationScripts(language)));
    }
    return migrationScripts;
  }

  public static void populateByCategoryGroup(List<SNode> migrationScripts, BaseGroup ownerGroup, boolean applyToSelection) {
    _FunctionTypes._return_P1_E0<? extends String, ? super SNode> getCategoryClosure = new _FunctionTypes._return_P1_E0<String, SNode>() {
      public String invoke(SNode script) {
        String cat = NameUtil.pluralize(NameUtil.capitalize(SPropertyOperations.getString_def(script, "type", "enhancement")));
        if (cat == null) {
          cat = "<uncategorized>";
        }
        return cat;
      }
    };
    Map<String, List<SNode>> byCategory = groupBy(migrationScripts, getCategoryClosure);
    Set<String> sorted = new TreeSet<String>(new Comparator<String>() {
      public int compare(String o1, String o2) {
        if ("<uncategorized>".equals(o1)) {
          return 1;
        }
        if ("<uncategorized>".equals(o2)) {
          return -1;
        }
        return o1.compareTo(o2);
      }
    });
    sorted.addAll(MapSequence.fromMap(byCategory).keySet());
    for (String cat : sorted) {
      BaseGroup categoryGroup = createGroup(cat, ownerGroup);
      _FunctionTypes._return_P1_E0<? extends String, ? super SNode> getBuildClosure = new _FunctionTypes._return_P1_E0<String, SNode>() {
        public String invoke(SNode script) {
          return (SPropertyOperations.getString(script, "toBuild") == null ?
            "" :
            SPropertyOperations.getString(script, "toBuild")
          );
        }
      };
      Map<String, List<SNode>> byBuild = groupBy(MapSequence.fromMap(byCategory).get(cat), getBuildClosure);
      if (SetSequence.fromSet(MapSequence.fromMap(byBuild).keySet()).count() > 1) {
        {
          Iterator<String> buildName_it = SortedSetSequence.fromSet(new TreeSet<String>(MapSequence.fromMap(byBuild).keySet())).iterator();
          String buildName_var;
          while (buildName_it.hasNext()) {
            buildName_var = buildName_it.next();
            BaseGroup subGroup = createGroup(buildName_var, categoryGroup);
            addActions(subGroup, MapSequence.fromMap(byBuild).get(buildName_var), applyToSelection);
          }
        }
      } else {
        addActions(categoryGroup, MapSequence.fromMap(byCategory).get(cat), applyToSelection);
      }
    }
  }

  private static BaseGroup createGroup(String name, BaseGroup parentGroup) {
    BaseGroup group = new BaseGroup(name);
    group.setPopup(true);
    parentGroup.add(group);
    return group;
  }

  private static void addActions(BaseGroup group, List<SNode> scripts, boolean applyToSelection) {
    Collections.sort(scripts, new Comparator<SNode>() {
      public int compare(SNode node1, SNode node2) {
        String name1 = ScriptsActionGroupHelper.makeScriptActionName(null, SPropertyOperations.getString(node1, "title"), null).toLowerCase();
        String name2 = ScriptsActionGroupHelper.makeScriptActionName(null, SPropertyOperations.getString(node2, "title"), null).toLowerCase();
        return name1.compareTo(name2);
      }
    });
    {
      Iterator<SNode> script_it = ListSequence.fromList(scripts).iterator();
      SNode script_var;
      while (script_it.hasNext()) {
        script_var = script_it.next();
        group.add(new RunMigrationScriptAction(script_var, ScriptsActionGroupHelper.makeScriptActionName(null, SPropertyOperations.getString(script_var, "title"), null), applyToSelection));
      }
    }
  }

  private static Map<String, List<SNode>> groupBy(List<SNode> scripts, _FunctionTypes._return_P1_E0<? extends String, ? super SNode> groupKeyProducer) {
    Map<String, List<SNode>> result = MapSequence.fromMap(new HashMap<String, List<SNode>>());
    {
      Iterator<SNode> script_it = ListSequence.fromList(scripts).iterator();
      SNode script_var;
      while (script_it.hasNext()) {
        script_var = script_it.next();
        String groupKey = groupKeyProducer.invoke(script_var);
        List<SNode> group = MapSequence.fromMap(result).get(groupKey);
        if (group == null) {
          group = new ArrayList<SNode>();
          MapSequence.fromMap(result).put(groupKey, group);
        }
        ListSequence.fromList(group).addElement(script_var);
      }
    }
    return result;
  }

  public static void populateByBuildGroup(List<SNode> migrationScripts, BaseGroup ownerGroup, boolean applyToSelection) {
    Map<String, List<SNode>> byBuild = new HashMap<String, List<SNode>>();
    for (SNode migrationScript : migrationScripts) {
      String build = SPropertyOperations.getString(migrationScript, "toBuild");
      if (build == null) {
        build = "<unspecified>";
      }
      if (!(byBuild.containsKey(build))) {
        byBuild.put(build, new ArrayList<SNode>());
      }
      ListSequence.fromList(byBuild.get(build)).addElement(migrationScript);
    }
    Set<String> sorted = new TreeSet<String>(byBuild.keySet());
    for (String build : sorted) {
      BaseGroup categoryGroup = new BaseGroup("migrate to " + build, "");
      for (SNode script : byBuild.get(build)) {
        categoryGroup.add(new RunMigrationScriptAction(script, ScriptsActionGroupHelper.makeScriptActionName(SPropertyOperations.getString_def(script, "type", "enhancement"), SPropertyOperations.getString(script, "title"), null), applyToSelection));
      }
      categoryGroup.setPopup(true);
      ownerGroup.add(categoryGroup);
    }
  }

  public static void populateByLanguageGroup(Language language, BaseGroup ownerGroup, boolean applyToSelection) {
    List<SNode> migrationScripts = MigrationScriptUtil.getMigrationScripts(language);
    if (ListSequence.fromList(migrationScripts).isEmpty()) {
      return;
    }
    BaseGroup languageScriptsGroup = new BaseGroup(language.getModuleFqName(), "");
    for (SNode script : migrationScripts) {
      languageScriptsGroup.add(new RunMigrationScriptAction(script, ScriptsActionGroupHelper.makeScriptActionName(SPropertyOperations.getString_def(script, "type", "enhancement"), SPropertyOperations.getString(script, "title"), SPropertyOperations.getString(script, "toBuild")), applyToSelection));
    }
    if (!((migrationScripts.isEmpty()))) {
      languageScriptsGroup.addSeparator();
    }
    languageScriptsGroup.setPopup(true);
    ownerGroup.add(languageScriptsGroup);
  }

  public static String makeScriptActionName(String category, String title, String build) {
    StringBuilder sb = new StringBuilder();
    if (category != null) {
      sb.append(category).append(": ");
    }
    sb.append(title);
    if (build != null) {
      sb.append(" [migrate to ").append(build).append("]");
    }
    return sb.toString();
  }
}
