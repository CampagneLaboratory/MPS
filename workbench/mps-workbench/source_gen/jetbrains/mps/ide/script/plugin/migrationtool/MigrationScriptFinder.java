package jetbrains.mps.ide.script.plugin.migrationtool;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import java.util.List;
import jetbrains.mps.smodel.SNodePointer;
import java.util.ArrayList;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.smodel.SNode;
import java.util.Map;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import java.util.IdentityHashMap;
import java.util.Collections;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.lang.script.runtime.MigrationScriptUtil;
import java.util.Set;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.ide.ui.TreeTextUtil;

public class MigrationScriptFinder implements IFinder {
  private List<SNodePointer> myScripts = new ArrayList<SNodePointer>();
  private IOperationContext myOperationContext;
  private SearchResults<SNode> myResults;
  private Map<SearchResult<SNode>, AbstractMigrationRefactoring> myMigrationBySearchResult = new IdentityHashMap<SearchResult<SNode>, AbstractMigrationRefactoring>();
  private List<ResultsListener> myResultsListeners = Collections.synchronizedList(new ArrayList<ResultsListener>());

  public MigrationScriptFinder(List<SNodePointer> scripts, IOperationContext context) {
    myScripts = scripts;
    myOperationContext = context;
  }

  public SearchResults find(SearchQuery query, ProgressMonitor monitor) {
    myResults = new SearchResults<SNode>();
    IScope queryScope = query.getScope();
    List<BaseMigrationScript> scriptInstances = MigrationScriptUtil.getScriptInstances(myScripts, myOperationContext);

    monitor.start("Searching applicable nodes", scriptInstances.size());
    try {
      for (BaseMigrationScript scriptInstance : scriptInstances) {
        if (monitor.isCanceled()) {
          break;
        }
        List<AbstractMigrationRefactoring> refactorings = scriptInstance.getRefactorings();
        for (AbstractMigrationRefactoring migrationRefactoring : refactorings) {
          if (monitor.isCanceled()) {
            break;
          }
          monitor.step(scriptInstance.getName() + " [" + migrationRefactoring.getAdditionalInfo() + "]");
          Set<SNode> instances = FindUsagesManager.getInstance().findInstances(MigrationScriptUtil.getApplicableConcept(migrationRefactoring), queryScope, null, false);
          for (SNode instance : instances) {
            if (MigrationScriptUtil.isApplicableRefactoring(instance, migrationRefactoring)) {
              String category = TreeTextUtil.toHtml(scriptInstance.getName()) + " </b>[" + TreeTextUtil.toHtml(migrationRefactoring.getAdditionalInfo()) + "]<b>";
              SearchResult<SNode> result = new SearchResult<SNode>(instance, category);
              myMigrationBySearchResult.put(result, migrationRefactoring);
              myResults.getSearchResults().add(result);
            }
          }
        }
        monitor.advance(1);
      }
      fireResultsChanged();
      return myResults;
    } finally {
      monitor.done();
    }
  }

  public AbstractMigrationRefactoring getRefactoring(SearchResult<SNode> searchResult) {
    return myMigrationBySearchResult.get(searchResult);
  }

  public SearchResults<SNode> getLastSearchResults() {
    return myResults;
  }

  public List<SNodePointer> getScripts() {
    return myScripts;
  }

  public IOperationContext getOperationContext() {
    return myOperationContext;
  }

  public void addResultsListener(ResultsListener listener) {
    myResultsListeners.add(listener);
  }

  public void removeResultsListener(ResultsListener listener) {
    myResultsListeners.remove(listener);
  }

  private void fireResultsChanged() {
    for (ResultsListener rl : new ArrayList<ResultsListener>(myResultsListeners)) {
      rl.resultsChanged(this);
    }
  }
}
