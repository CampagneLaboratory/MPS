package jetbrains.mps.ide.script.plugin.migrationtool;

/*Generated by MPS */

import java.util.Collection;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.ide.ThreadUtils;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.ModelAccess;
import java.util.Collections;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.lang.script.runtime.MigrationScriptUtil;

public abstract class MigrationScriptsController {
  private final MigrationScriptFinder myFinder;

  public MigrationScriptsController(MigrationScriptFinder finder) {
    myFinder = finder;
  }

  public Collection<SearchResult<SNode>> computeAliveIncludedResults(final List<SNodePointer> includedResultNodes) {
    ThreadUtils.assertEDT();
    final List aliveIncludedResults = new ArrayList<SearchResult<SNode>>();
    final Set aliveIncludedNodes = new HashSet<SNode>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        List<SNodePointer> includedNodes = includedResultNodes;
        for (SNodePointer includedNode : includedNodes) {
          if (includedNode.getNode() != null) {
            aliveIncludedNodes.add(includedNode.getNode());
          }
        }
        List<SearchResult<SNode>> aliveResults = myFinder.getLastSearchResults().getAliveResults();
        for (SearchResult aliveResult : aliveResults) {
          if (aliveIncludedNodes.contains(aliveResult.getObject())) {
            aliveIncludedResults.add(aliveResult);
          }
        }
      }
    });
    return Collections.unmodifiableCollection(aliveIncludedResults);
  }

  public void process(final ProgressMonitor pmonitor, final Collection<SearchResult<SNode>> searchResults) {
    pmonitor.start("", searchResults.size());
    for (SearchResult<SNode> seachResult : searchResults) {
      runCommand(new Runnable() {
        public void run() {
          pmonitor.advance(1);
        }
      });
      final SNode node = seachResult.getObject();
      // still alive? 
      if (node != null && node.getModel() != null) {
        // still applicable? 
        final AbstractMigrationRefactoring migrationRefactoring = myFinder.getRefactoring(seachResult);
        runCommand(new Runnable() {
          public void run() {
            if (MigrationScriptUtil.isApplicableRefactoring(node, migrationRefactoring)) {
              MigrationScriptUtil.performRefactoring(node, migrationRefactoring);
            }
          }
        });
      }
    }
    runCommand(new Runnable() {
      public void run() {
        pmonitor.done();
      }
    });
  }

  public abstract void runCommand(Runnable cmd);
}
