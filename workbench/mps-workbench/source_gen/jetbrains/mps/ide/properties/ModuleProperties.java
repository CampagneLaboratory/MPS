package jetbrains.mps.ide.properties;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.project.structure.model.ModelRootDescriptor;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.workbench.dialogs.project.components.parts.lists.ListsFactory;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;

public class ModuleProperties {
  public static final String NAMESPACE = "namespace";
  public static final String USED_LANGUAGES = "usedLanguages";
  public static final String USED_DEVKITS = "usedDevkits";

  private String myNamespace;
  private List<ModelRootDescriptor> myModelRoots;
  private List<Dependency> myDependencies;
  private List<ModuleReference> myUsedLanguages;
  private List<ModuleReference> myUsedDevkits;
  private List<String> mySourcePaths;
  private List<String> myAdditionalJavaStubModels;

  public ModuleProperties() {
    myModelRoots = ListsFactory.create(ListsFactory.MODEL_ROOT_COMPARATOR);
    myDependencies = ListsFactory.create(ListsFactory.DEPENDENCY_COMPARATOR);
    myUsedLanguages = ListsFactory.create(ListsFactory.MODULE_VALID_REF_COMPARATOR);
    myUsedDevkits = ListsFactory.create(ListsFactory.MODULE_VALID_REF_COMPARATOR);
    mySourcePaths = (List) ListsFactory.create(ListsFactory.COMPARABLE_COMPARATOR);
    myAdditionalJavaStubModels = (List) ListsFactory.create(ListsFactory.COMPARABLE_COMPARATOR);
  }

  public String getNamespace() {
    return myNamespace;
  }

  public void setNamespace(String namespace) {
    myNamespace = namespace;
  }

  public List<ModelRootDescriptor> getModelRoots() {
    return myModelRoots;
  }

  public void setModelRoots(List<ModelRootDescriptor> modelRoots) {
    myModelRoots = modelRoots;
  }

  public List<Dependency> getDependencies() {
    return myDependencies;
  }

  public void setDependencies(List<Dependency> dependencies) {
    myDependencies = dependencies;
  }

  public List<ModuleReference> getUsedLanguages() {
    return myUsedLanguages;
  }

  public void setUsedLanguages(List<ModuleReference> usedLanguages) {
    myUsedLanguages = usedLanguages;
  }

  public List<ModuleReference> getUsedDevkits() {
    return myUsedDevkits;
  }

  public void setUsedDevkits(List<ModuleReference> usedDevkits) {
    myUsedDevkits = usedDevkits;
  }

  public List<String> getSourcePaths() {
    return mySourcePaths;
  }

  public void setSourcePaths(List<String> sourcePaths) {
    mySourcePaths = sourcePaths;
  }

  public List<String> getStubModels() {
    return myAdditionalJavaStubModels;
  }

  public void setStubModels(List<String> stubModels) {
    myAdditionalJavaStubModels = stubModels;
  }

  public void loadFrom(ModuleDescriptor descriptor) {
    myNamespace = descriptor.getNamespace();
    for (ModelRootDescriptor root : descriptor.getModelRootDescriptors()) {
      myModelRoots.add(new ModelRootDescriptor(root.getType(), root.getMemento().clone()));
    }
    for (Dependency dep : descriptor.getDependencies()) {
      myDependencies.add((dep != null ?
        dep.getCopy() :
        null
      ));
    }
    myUsedLanguages.addAll(descriptor.getUsedLanguages());
    myUsedDevkits.addAll(descriptor.getUsedDevkits());
    for (String p : descriptor.getSourcePaths()) {
      mySourcePaths.add(p);
    }
    for (String path : descriptor.getAdditionalJavaStubPaths()) {
      myAdditionalJavaStubModels.add(path);
    }
  }

  public void saveTo(ModuleDescriptor descriptor) {
    descriptor.setNamespace(myNamespace);
    descriptor.getModelRootDescriptors().clear();
    descriptor.getModelRootDescriptors().addAll(myModelRoots);
    descriptor.getDependencies().clear();
    descriptor.getDependencies().addAll(myDependencies);
    descriptor.getUsedLanguages().clear();
    descriptor.getUsedLanguages().addAll(myUsedLanguages);
    descriptor.getUsedDevkits().clear();
    descriptor.getUsedDevkits().addAll(myUsedDevkits);
    descriptor.getSourcePaths().clear();
    descriptor.getSourcePaths().addAll(mySourcePaths);
    descriptor.getAdditionalJavaStubPaths().clear();
    descriptor.getAdditionalJavaStubPaths().addAll(myAdditionalJavaStubModels);
  }
}
