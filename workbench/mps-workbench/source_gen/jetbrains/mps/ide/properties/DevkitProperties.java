package jetbrains.mps.ide.properties;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.workbench.dialogs.project.components.parts.lists.ListsFactory;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.project.structure.modules.DevkitDescriptor;

public class DevkitProperties {
  public static final String NAMESPACE = "namespace";

  private String myNamespace;
  private List<ModuleReference> myExportedLanguages;
  private List<ModuleReference> myExportedSolutions;
  private List<ModuleReference> myExtendedDevkits;

  public DevkitProperties() {
    myExportedLanguages = ListsFactory.create(ListsFactory.MODULE_VALID_REF_COMPARATOR);
    myExportedSolutions = ListsFactory.create(ListsFactory.MODULE_VALID_REF_COMPARATOR);
    myExtendedDevkits = ListsFactory.create(ListsFactory.MODULE_VALID_REF_COMPARATOR);
  }

  public String getNamespace() {
    return myNamespace;
  }

  public void setNamespace(String namespace) {
    myNamespace = namespace;
  }

  public List<ModuleReference> getExportedLanguages() {
    return myExportedLanguages;
  }

  public List<ModuleReference> getExportedSolutions() {
    return myExportedSolutions;
  }

  public List<ModuleReference> getExtendedDevkits() {
    return myExtendedDevkits;
  }

  public void loadFrom(ModuleDescriptor descriptor) {
    assert descriptor instanceof DevkitDescriptor;
    myNamespace = descriptor.getNamespace();
    DevkitDescriptor d = (DevkitDescriptor) descriptor;
    for (ModuleReference ref : d.getExportedLanguages()) {
      myExportedLanguages.add(ref);
    }
    for (ModuleReference ref : d.getExportedSolutions()) {
      myExportedSolutions.add(ref);
    }
    for (ModuleReference ref : d.getExtendedDevkits()) {
      myExtendedDevkits.add(ref);
    }
  }

  public void saveTo(ModuleDescriptor descriptor) {
    assert descriptor instanceof DevkitDescriptor;
    DevkitDescriptor d = (DevkitDescriptor) descriptor;
    d.setNamespace(myNamespace);
    d.getExportedLanguages().clear();
    d.getExportedLanguages().addAll(myExportedLanguages);
    d.getExportedSolutions().clear();
    d.getExportedSolutions().addAll(myExportedSolutions);
    d.getExtendedDevkits().clear();
    d.getExtendedDevkits().addAll(myExtendedDevkits);
  }
}
