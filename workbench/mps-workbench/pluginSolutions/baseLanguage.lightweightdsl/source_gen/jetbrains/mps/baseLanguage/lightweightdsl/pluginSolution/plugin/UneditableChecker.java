package jetbrains.mps.baseLanguage.lightweightdsl.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.checking.EditorCheckerAdapter;
import java.util.Set;
import jetbrains.mps.nodeEditor.EditorMessage;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.smodel.event.SModelEvent;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class UneditableChecker extends EditorCheckerAdapter {
  protected Set<EditorMessage> createMessages(SNode rootNode, List<SModelEvent> events, boolean b, EditorContext editorContext) {
    final Set<EditorMessage> result = SetSequence.fromSet(new HashSet<EditorMessage>());
    ListSequence.fromList(SNodeOperations.getNodeDescendants(rootNode, MetaAdapterFactory.getInterfaceConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x33a3db9e9bfadd4cL, "jetbrains.mps.baseLanguage.lightweightdsl.structure.Uneditable"), false, new SAbstractConcept[]{})).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        result.add(new UneditableMessage(it, UneditableChecker.this, "Go to declaration"));
      }
    });
    return result;
  }
}
