package jetbrains.mps.workbench.goTo.index;

/*Generated by MPS */

import org.jetbrains.mps.openapi.persistence.NavigationParticipant;
import jetbrains.mps.reloading.IClassPathItem;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.reloading.ClassBytesProvider;
import jetbrains.mps.stubs.javastub.classpath.ClassifierKind;
import org.jetbrains.org.objectweb.asm.ClassReader;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

/*package*/ class JavaStubNodeDescriptor implements NavigationParticipant.NavigationTarget {
  private final IClassPathItem myItem;
  private final String myPName;
  private final String myCls;
  private final SModelReference myModel;
  public JavaStubNodeDescriptor(IClassPathItem item, String pName, String cls, SModelReference model) {
    myItem = item;
    myPName = pName;
    myCls = cls;
    myModel = model;
  }
  @Override
  public String getPresentation() {
    return JavaStubNodeDescriptor.this.myCls;
  }
  @Override
  public SNodeReference getNodeReference() {
    return new SNodePointer(JavaStubNodeDescriptor.this.myModel, new SNodeId.Foreign(SNodeId.Foreign.ID_PREFIX + NameUtil.shortNameFromLongName(JavaStubNodeDescriptor.this.myCls)));
  }
  @Override
  public SConcept getConcept() {
    ClassBytesProvider.ClassBytes classBytes = myItem.getClassBytes(((myPName == null || myPName.length() == 0) ? myCls : myPName + '.' + myCls));
    ClassifierKind kind = (classBytes == null ? null : ClassifierKind.getClassifierKind(new ClassReader(classBytes.getBytes())));
    if (kind == ClassifierKind.CLASS) {
      return MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept");
    } else if (kind == ClassifierKind.INTERFACE) {
      return MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101edd46144L, "jetbrains.mps.baseLanguage.structure.Interface");
    } else if (kind == ClassifierKind.ANNOTATIONS) {
      return MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a69dc80cL, "jetbrains.mps.baseLanguage.structure.Annotation");
    } else if (kind == ClassifierKind.ENUM) {
      return MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L, "jetbrains.mps.baseLanguage.structure.EnumClass");
    }
    return MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept");
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }

    JavaStubNodeDescriptor that = (JavaStubNodeDescriptor) o;
    if ((myPName != null ? !(((Object) myPName).equals(that.myPName)) : that.myPName != null)) {
      return false;
    }
    if ((myCls != null ? !(((Object) myCls).equals(that.myCls)) : that.myCls != null)) {
      return false;
    }
    if ((myModel != null ? !(myModel.equals(that.myModel)) : that.myModel != null)) {
      return false;
    }

    return true;
  }
  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + ((myPName != null ? String.valueOf(myPName).hashCode() : 0));
    result = 31 * result + ((myCls != null ? String.valueOf(myCls).hashCode() : 0));
    result = 31 * result + ((myModel != null ? ((Object) myModel).hashCode() : 0));
    return result;
  }
}
