/*
 * Copyright 2003-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.workbench.goTo.index;

/*Generated by MPS */

import org.jetbrains.mps.openapi.persistence.indexing.NodeDescriptor;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.smodel.SModelReference;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.stubs.javastub.classpath.ClassifierKind;
import org.jetbrains.mps.openapi.language.SConceptRepository;

/*package*/ class JavaStubNodeDescriptor implements NodeDescriptor {
  private final IClassPathItem myItem;
  private final String myPName;
  private final String myCls;
  private final SModelReference myModel;

  public JavaStubNodeDescriptor(IClassPathItem item, String pName, String cls, SModelReference model) {
    myItem = item;
    myPName = pName;
    myCls = cls;
    myModel = model;
  }

  public String getName() {
    return JavaStubNodeDescriptor.this.myCls;
  }

  public SNodeReference getNodeReference() {
    return new SNodePointer(JavaStubNodeDescriptor.this.myModel, new SNodeId.Foreign(SNodeId.Foreign.ID_PREFIX + NameUtil.shortNameFromLongName(JavaStubNodeDescriptor.this.myCls)));
  }

  public SConcept getConcept() {
    String name = "jetbrains.mps.baseLanguage.structure.ClassConcept";
    ClassifierKind kind = JavaStubNodeDescriptor.this.myItem.getClassifierKind(("".equals(JavaStubNodeDescriptor.this.myPName) ?
      JavaStubNodeDescriptor.this.myCls :
      JavaStubNodeDescriptor.this.myPName + "." + JavaStubNodeDescriptor.this.myCls
    ));
    if (kind == ClassifierKind.CLASS) {
      name = "jetbrains.mps.baseLanguage.structure.ClassConcept";
    } else if (kind == ClassifierKind.INTERFACE) {
      name = "jetbrains.mps.baseLanguage.structure.Interface";
    } else if (kind == ClassifierKind.ANNOTATIONS) {
      name = "jetbrains.mps.baseLanguage.structure.Annotation";
    } else if (kind == ClassifierKind.ENUM) {
      name = "jetbrains.mps.baseLanguage.structure.EnumClass";
    }
    return SConceptRepository.getInstance().getConcept(name);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }

    JavaStubNodeDescriptor that = (JavaStubNodeDescriptor) o;
    if ((myPName != null ?
      !(((Object) myPName).equals(that.myPName)) :
      that.myPName != null
    )) {
      return false;
    }
    if ((myCls != null ?
      !(((Object) myCls).equals(that.myCls)) :
      that.myCls != null
    )) {
      return false;
    }
    if ((myModel != null ?
      !(myModel.equals(that.myModel)) :
      that.myModel != null
    )) {
      return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + ((myPName != null ?
      String.valueOf(myPName).hashCode() :
      0
    ));
    result = 31 * result + ((myCls != null ?
      String.valueOf(myCls).hashCode() :
      0
    ));
    result = 31 * result + ((myModel != null ?
      ((Object) myModel).hashCode() :
      0
    ));
    return result;
  }
}
