package jetbrains.mps.workbench.goTo.index;

/*Generated by MPS */

import org.jetbrains.mps.openapi.persistence.indexing.NodeNavigationContributor;
import com.intellij.openapi.components.ApplicationComponent;
import java.util.Collection;
import org.jetbrains.mps.openapi.persistence.indexing.NodeDescriptor;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.project.Project;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.persistence.java.library.JavaClassStubsModelRoot;
import jetbrains.mps.reloading.CompositeClassPathItem;
import jetbrains.mps.extapi.persistence.FolderSetDataSource;
import jetbrains.mps.reloading.ClassPathFactory;
import jetbrains.mps.smodel.SModelReference;
import java.io.File;
import java.io.IOException;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import jetbrains.mps.smodel.LanguageID;
import org.jetbrains.mps.openapi.persistence.indexing.FastGoToRegistry;
import jetbrains.mps.persistence.PersistenceRegistry;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

public class JavaStubNavigationContributor implements NodeNavigationContributor, ApplicationComponent {
  public JavaStubNavigationContributor() {
  }



  @Override
  public Collection<NodeDescriptor> getNodeDescriptors(Collection<SModel> models, Project project) {
    Set<NodeDescriptor> res = new HashSet<NodeDescriptor>();
    for (SModel model : models) {
      String path = ((JavaClassStubsModelRoot) model.getModelRoot()).getPath();

      CompositeClassPathItem cp = new CompositeClassPathItem();
      for (String dir : ((FolderSetDataSource) model.getSource()).getPaths()) {
        try {
          if (dir.indexOf("!") != -1) {
            cp.add(ClassPathFactory.getInstance().createFromPath(dir.substring(0, dir.indexOf("!")), this.getClass().getName()));
          } else {
            String name = ((SModelReference) model.getReference()).getLongName().replace('.', File.separatorChar);

            // dirty hack for current problems with path separators 
            String dirCorrected = dir.replace('/', File.separatorChar);
            dirCorrected = dirCorrected.replace('\\', File.separatorChar);
            assert dirCorrected.contains(name) : "Strange dir for model: model " + name + "; dir = " + dir;

            int index = dirCorrected.indexOf(name);
            dir = dir.substring(0, index);
            cp.add(ClassPathFactory.getInstance().createFromPath(dir, this.getClass().getName()));
          }
        } catch (IOException e) {
          e.printStackTrace();
        }
      }

      SModel md = (SModel) model;
      iterateClassPath(md.getModule().getModuleReference(), cp, res, SNodeOperations.getModelLongName(md));

    }
    return res;
  }



  public static void iterateClassPath(final ModuleReference module, final IClassPathItem item, Set<NodeDescriptor> result, final String pName) {
    final SModelReference model = StubHelper.uidForPackageInStubs(pName, LanguageID.JAVA, module, false);
    for (final String cls : item.getRootClasses(pName)) {
      result.add(new JavaStubNodeDescriptor(item, pName, cls, model));
    }
    for (String subpack : item.getSubpackages(pName)) {
      iterateClassPath(module, item, result, subpack);
    }
  }

  @Override
  public void initComponent() {
    FastGoToRegistry.getInstance().setNavigationContributor(PersistenceRegistry.JAVA_CLASSES_ROOT, this);
  }

  @Override
  public void disposeComponent() {
    FastGoToRegistry.getInstance().setNavigationContributor(PersistenceRegistry.JAVA_CLASSES_ROOT, null);
  }

  @NonNls
  @NotNull
  @Override
  public String getComponentName() {
    return JavaStubNavigationContributor.class.getSimpleName();
  }
}
