package jetbrains.mps.workbench.goTo.index;

/*Generated by MPS */

import org.jetbrains.mps.openapi.persistence.NavigationParticipant;
import com.intellij.openapi.components.ApplicationComponent;
import java.util.Collection;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.util.Consumer;
import jetbrains.mps.persistence.java.library.JavaClassStubModelDescriptor;
import jetbrains.mps.reloading.CompositeClassPathItem;
import jetbrains.mps.extapi.persistence.FolderSetDataSource;
import jetbrains.mps.reloading.ClassPathFactory;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.SModelReference;
import java.io.File;
import java.io.IOException;
import jetbrains.mps.util.SNodeOperations;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import jetbrains.mps.smodel.LanguageID;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

public class JavaStubNavigationContributor implements NavigationParticipant, ApplicationComponent {
  public JavaStubNavigationContributor() {
  }



  @Override
  public void findTargets(NavigationParticipant.TargetKind kind, Collection<SModel> scope, Consumer<NavigationParticipant.NavigationTarget> consumer, Consumer<SModel> processedConsumer) {
    for (SModel model : scope) {
      if (!(model instanceof JavaClassStubModelDescriptor)) {
        continue;
      }

      CompositeClassPathItem cp = new CompositeClassPathItem();
      for (String dir : ((FolderSetDataSource) model.getSource()).getPaths()) {
        try {
          if (dir.indexOf("!") != -1) {
            cp.add(ClassPathFactory.getInstance().createFromPath(dir.substring(0, dir.indexOf("!")), this.getClass().getName()));
          } else {
            String name = SModelStereotype.withoutStereotype(((SModelReference) model.getReference()).getModelName()).replace('.', File.separatorChar);

            // dirty hack for current problems with path separators 
            String dirCorrected = dir.replace('/', File.separatorChar);
            dirCorrected = dirCorrected.replace('\\', File.separatorChar);
            assert dirCorrected.contains(name) : "Strange dir for model: model " + name + "; dir = " + dir;

            int index = dirCorrected.indexOf(name);
            dir = dir.substring(0, index);
            cp.add(ClassPathFactory.getInstance().createFromPath(dir, this.getClass().getName()));
          }
        } catch (IOException e) {
          e.printStackTrace();
        }
      }

      SModel md = model;
      iterateClassPath(md.getModule().getModuleReference(), cp, consumer, SNodeOperations.getModelLongName(md));
      processedConsumer.consume(model);
    }
  }



  public static void iterateClassPath(final SModuleReference module, final IClassPathItem item, Consumer<NavigationParticipant.NavigationTarget> consumer, final String pName) {
    final org.jetbrains.mps.openapi.model.SModelReference model = StubHelper.uidForPackageInStubs(pName, LanguageID.JAVA, module, false);
    for (final String cls : item.getRootClasses(pName)) {
      consumer.consume(new JavaStubNodeDescriptor(item, pName, cls, model));
    }
    for (String subpack : item.getSubpackages(pName)) {
      iterateClassPath(module, item, consumer, subpack);
    }
  }

  @Override
  public void initComponent() {
    PersistenceFacade.getInstance().addNavigationParticipant(this);
  }

  @Override
  public void disposeComponent() {
    PersistenceFacade.getInstance().removeNavigationParticipant(this);
  }

  @NonNls
  @NotNull
  @Override
  public String getComponentName() {
    return JavaStubNavigationContributor.class.getSimpleName();
  }
}
