package jetbrains.mps.workbench.findusages;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import org.jetbrains.mps.openapi.persistence.indexing.FastFindSupport;
import org.jetbrains.mps.openapi.persistence.indexing.FastFindUsagesRegistry;
import jetbrains.mps.persistence.PersistenceRegistry;
import org.jetbrains.annotations.NotNull;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.Collection;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNodeId;
import jetbrains.mps.util.containers.MultiMap;
import jetbrains.mps.util.Mapper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.util.containers.SetBasedMultiMap;
import jetbrains.mps.util.containers.ManyToManyMap;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.extapi.persistence.FolderSetDataSource;
import gnu.trove.THashSet;
import jetbrains.mps.persistence.java.library.JavaClassStubModelDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import com.intellij.openapi.vfs.VfsUtilCore;
import com.intellij.openapi.vfs.VirtualFileVisitor;
import com.intellij.util.indexing.FileBasedIndex;
import com.intellij.psi.impl.cache.impl.id.IdIndex;
import com.intellij.psi.impl.cache.impl.id.IdIndexEntry;
import jetbrains.mps.logging.Logger;

public class StubModelsFastFindSupport implements ApplicationComponent, FastFindSupport {
  public StubModelsFastFindSupport() {
  }

  public void initComponent() {
    FastFindUsagesRegistry.getInstance().setFastFindSupport(PersistenceRegistry.JAVA_CLASSES_ROOT, this);
  }

  public void disposeComponent() {
    FastFindUsagesRegistry.getInstance().setFastFindSupport(PersistenceRegistry.JAVA_CLASSES_ROOT, null);
  }

  @NotNull
  public String getComponentName() {
    return StubModelsFastFindSupport.class.getSimpleName();
  }



  public Map<SModel, Collection<SNode>> findModelsWithPossibleUsages(Collection<SModel> models, Set<SNode> nodes) {
    nodes = SetSequence.fromSetWithValues(new HashSet<SNode>(), SetSequence.fromSet(nodes).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return it.getNodeId() instanceof jetbrains.mps.smodel.SNodeId.Foreign;
      }
    }));
    MultiMap<SModel, SNode> result = findModels(models, nodes, new Mapper<SNode, String>() {
      public String value(SNode key) {
        return key.getNodeId().toString();
      }
    });
    for (SNode node : SetSequence.fromSet(nodes)) {
      SNode snode = ((SNode) node);
      if (!(SNodeOperations.isInstanceOf(snode, "jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration"))) {
        continue;
      }
      result.putValue(SNodeOperations.getModel(snode).getModelDescriptor(), node);
    }

    Map<SModel, Collection<SNode>> res = new HashMap<SModel, Collection<SNode>>();
    for (Map.Entry<SModel, Collection<SNode>> e : result.entrySet()) {
      res.put(e.getKey(), e.getValue());
    }
    return res;
  }

  public Map<SModel, Collection<SConcept>> findModelsWithPossibleInstances(Collection<SModel> models, Set<SConcept> concepts) {
    final String blName = MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("f3061a53-9226-4cc5-a443-f952ceaf5816")).getModuleFqName();
    concepts = SetSequence.fromSetWithValues(new HashSet<SConcept>(), SetSequence.fromSet(concepts).where(new IWhereFilter<SConcept>() {
      public boolean accept(SConcept it) {
        return NameUtil.namespaceFromConceptFQName(it.getConceptId()).equals(blName);
      }
    }));

    Map<SModel, Collection<SConcept>> res = new HashMap<SModel, Collection<SConcept>>();
    for (Map.Entry<SModel, Collection<SConcept>> e : findModels(models, concepts, null).entrySet()) {
      res.put(e.getKey(), e.getValue());
    }
    return res;
  }

  private <T> MultiMap<SModel, T> findModels(Collection<SModel> models, Set<T> elems, @Nullable Mapper<T, String> id) {
    MultiMap<SModel, T> result = new SetBasedMultiMap<SModel, T>();
    if (elems.isEmpty()) {
      return result;
    }

    // get all files in scope 
    final ManyToManyMap<SModel, VirtualFile> scopeFiles = new ManyToManyMap<SModel, VirtualFile>();

    Set<FolderSetDataSource> sources = new THashSet<FolderSetDataSource>();
    final Set<VirtualFile> dirs = new THashSet<VirtualFile>();

    for (final SModel sm : models) {
      FolderSetDataSource source = ((JavaClassStubModelDescriptor) sm).getSource();
      if (sources.contains(source)) {
        continue;
      }

      sources.add(source);

      Collection<IFile> files = source.getAffectedFiles();
      for (IFile path : files) {
        final VirtualFile vf = VirtualFileUtils.getVirtualFile(path);
        if (vf == null) {
          LOG.warning("File " + path + ", which belows to model source of model " + sm.getModelReference().toString() + ", was not found in VFS. Assuming no usages in this file.");
          continue;
        }
        VfsUtilCore.visitChildrenRecursively(vf, new VirtualFileVisitor() {
          public boolean visitFile(@NotNull VirtualFile file) {
            if (file.isDirectory()) {
              return dirs.add(file);
            }
            scopeFiles.addLink(sm, file);
            return true;
          }
        });
      }
    }

    for (T elem : elems) {
      String nodeId = (id == null ?
        elem.toString() :
        id.value(elem)
      );
      // filter files with usages 
      ConcreteFilesGlobalSearchScope allFiles = new ConcreteFilesGlobalSearchScope(scopeFiles.getSecond());
      Collection<VirtualFile> matchingFiles = FileBasedIndex.getInstance().getContainingFiles(IdIndex.NAME, new IdIndexEntry(nodeId, true), allFiles);
      // back-transform 
      for (VirtualFile file : matchingFiles) {
        for (SModel m : scopeFiles.getBySecond(file)) {
          result.putValue(m, elem);
        }
      }
    }
    return result;
  }

  private static Logger LOG = Logger.getLogger(StubModelsFastFindSupport.class);
}
