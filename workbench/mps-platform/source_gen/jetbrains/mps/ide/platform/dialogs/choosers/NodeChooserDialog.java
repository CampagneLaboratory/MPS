package jetbrains.mps.ide.platform.dialogs.choosers;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import jetbrains.mps.workbench.goTo.ui.ChooseByNamePanel;
import com.intellij.openapi.project.Project;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.workbench.choose.nodes.BaseNodePointerModel;
import com.intellij.navigation.NavigationItem;
import jetbrains.mps.workbench.choose.nodes.BaseNodePointerItem;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.workbench.goTo.ui.MpsPopupFactory;
import com.intellij.ide.util.gotoByName.ChooseByNamePopupComponent;
import com.intellij.openapi.application.ModalityState;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import java.awt.Dimension;

public class NodeChooserDialog extends DialogWrapper {
  private ChooseByNamePanel myChooser;

  public NodeChooserDialog(Project project, final Iterable<SNodeReference> nodes) {
    super(project, true);
    setTitle("Choose Node");

    BaseNodePointerModel goToNodeModel = new BaseNodePointerModel(project) {
      @Override
      public NavigationItem doGetNavigationItem(SNodeReference node) {
        return new BaseNodePointerItem(node) {
          public void navigate(boolean requestFocus) {
          }
        };
      }

      @Override
      public SNodeReference[] find(boolean checkboxState) {
        return Sequence.fromIterable(nodes).toGenericArray(SNodeReference.class);
      }

      public SNodeReference[] find(IScope scope) {
        throw new UnsupportedOperationException("must not be used");
      }

      @Override
      public boolean loadInitialCheckBoxState() {
        return false;
      }

      public boolean willOpenEditor() {
        return false;
      }
    };
    myChooser = MpsPopupFactory.createPanelForNode(goToNodeModel, false);
    myChooser.invoke(new ChooseByNamePopupComponent.Callback() {
      public void elementChosen(Object element) {
        doOKAction();
      }
    }, ModalityState.stateForComponent(getWindow()), false);

    init();
  }

  public NodeChooserDialog(Project project, final List<SNode> nodes) {
    this(project, ListSequence.fromList(nodes).select(new ISelector<SNode, SNodeReference>() {
      public SNodeReference select(SNode it) {
        return new jetbrains.mps.smodel.SNodePointer(it);
      }
    }));
  }

  @Nullable
  protected JComponent createCenterPanel() {
    myChooser.getPanel().setPreferredSize(new Dimension(400, 500));
    return myChooser.getPanel();
  }

  @Nullable
  public SNode getResultNode() {
    if (getExitCode() != DialogWrapper.OK_EXIT_CODE) {
      return null;
    }
    BaseNodePointerItem nodeItem = (BaseNodePointerItem) myChooser.getChosenElement();
    return (nodeItem != null ?
      nodeItem.getNode() :
      null
    );
  }

  @Nullable
  public SNodeReference getResult() {
    if (getExitCode() != DialogWrapper.OK_EXIT_CODE) {
      return null;
    }
    BaseNodePointerItem nodeItem = (BaseNodePointerItem) myChooser.getChosenElement();
    return (nodeItem != null ?
      nodeItem.getNodePointer() :
      null
    );
  }

  @Nullable
  @Override
  public JComponent getPreferredFocusedComponent() {
    return myChooser.getPreferredFocusedComponent();
  }
}
