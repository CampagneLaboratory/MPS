package jetbrains.mps.ide.platform.dialogs.choosers;

/*Generated by MPS */

import com.intellij.ide.util.treeView.smartTree.TreeModel;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.annotations.NotNull;
import com.intellij.ide.util.treeView.smartTree.Grouper;
import com.intellij.ide.util.treeView.smartTree.Sorter;
import com.intellij.ide.util.treeView.smartTree.Filter;
import com.intellij.ide.structureView.StructureViewTreeElement;
import com.intellij.ide.util.treeView.smartTree.TreeElement;
import com.intellij.navigation.ItemPresentation;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import com.intellij.ide.DataManager;
import com.intellij.openapi.util.AsyncResult;
import com.intellij.openapi.actionSystem.DataContext;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.project.IModule;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import jetbrains.mps.project.ModuleContext;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.workbench.choose.nodes.NodePresentation;

public abstract class NodeTreeModel implements TreeModel {
  private static SNodeReference FAKE_ROOT = new jetbrains.mps.smodel.SNodePointer(null);

  public NodeTreeModel() {
  }

  public abstract SNodeReference[] getRootNodes();

  public abstract SNodeReference[] getChildren(SNodeReference node);

  @NotNull
  public Grouper[] getGroupers() {
    return Grouper.EMPTY_ARRAY;
  }

  @NotNull
  public Sorter[] getSorters() {
    return Sorter.EMPTY_ARRAY;
  }

  @NotNull
  public Filter[] getFilters() {
    return Filter.EMPTY_ARRAY;
  }

  @NotNull
  public StructureViewTreeElement getRoot() {
    return new NodeTreeModel.NodeTreeElement(NodeTreeModel.FAKE_ROOT);
  }

  private class NodeTreeElement implements StructureViewTreeElement {
    private final SNodeReference myNode;

    public NodeTreeElement(SNodeReference node) {
      this.myNode = node;
    }

    public TreeElement[] getChildren() {
      SNodeReference[] children = ((myNode == NodeTreeModel.FAKE_ROOT) ?
        NodeTreeModel.this.getRootNodes() :
        NodeTreeModel.this.getChildren(myNode)
      );
      TreeElement[] childrenElements = new TreeElement[children.length];

      for (int i = 0; i < children.length; i++) {
        childrenElements[i] = new NodeTreeModel.NodeTreeElement(children[i]);
      }

      return childrenElements;
    }

    public Object getValue() {
      return myNode;
    }

    public ItemPresentation getPresentation() {
      return ModelAccess.instance().runReadAction(new Computable<ItemPresentation>() {
        public ItemPresentation compute() {
          return new NodeTreeModel.NodeTreeElementPresentation(myNode);
        }
      });
    }

    public void navigate(boolean b) {
      DataManager.getInstance().getDataContextFromFocus().doWhenDone(new AsyncResult.Handler<DataContext>() {
        public void run(DataContext dataContext) {
          final Project p = MPSCommonDataKeys.PROJECT.getData(dataContext);
          if (p == null) {
            return;
          }
          ModelAccess.instance().runWriteInEDT(new Runnable() {
            @Override
            public void run() {
              SNode node = myNode.resolve(MPSModuleRepository.getInstance());
              if (node == null) {
                return;
              }
              SModel model = node.getModel();
              if (model == null) {
                return;
              }
              IModule module = model.getModelDescriptor().getModule();
              if (module == null) {
                return;
              }
              NavigationSupport.getInstance().openNode(new ModuleContext(module, ProjectHelper.toMPSProject(p)), node, true, true);
            }
          });
        }
      });
    }

    public boolean canNavigate() {
      return true;
    }

    public boolean canNavigateToSource() {
      return true;
    }
  }

  protected static class NodeTreeElementPresentation extends NodePresentation {
    public NodeTreeElementPresentation(SNodeReference node) {
      super(node.resolve(MPSModuleRepository.getInstance()));
    }

    @Override
    public String doGetLocationString() {
      return null;
    }
  }
}
