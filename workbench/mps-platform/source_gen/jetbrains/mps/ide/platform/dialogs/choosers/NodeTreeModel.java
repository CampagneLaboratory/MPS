package jetbrains.mps.ide.platform.dialogs.choosers;

/*Generated by MPS */

import com.intellij.ide.util.treeView.smartTree.TreeModel;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.annotations.NotNull;
import com.intellij.ide.util.treeView.smartTree.Grouper;
import com.intellij.ide.util.treeView.smartTree.Sorter;
import com.intellij.ide.util.treeView.smartTree.Filter;
import com.intellij.ide.structureView.StructureViewTreeElement;
import com.intellij.ide.util.treeView.smartTree.TreeElement;
import com.intellij.navigation.ItemPresentation;
import jetbrains.mps.workbench.choose.nodes.NodePointerPresentation;
import org.jetbrains.annotations.Nullable;
import com.intellij.ide.DataManager;
import com.intellij.util.Consumer;
import com.intellij.openapi.actionSystem.DataContext;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.openapi.navigation.EditorNavigator;

public abstract class NodeTreeModel implements TreeModel {
  private static SNodeReference FAKE_ROOT = new SNodePointer(null);
  public NodeTreeModel() {
  }
  public abstract SNodeReference[] getRootNodes();
  public abstract SNodeReference[] getChildren(SNodeReference node);
  @NotNull
  @Override
  public Grouper[] getGroupers() {
    return Grouper.EMPTY_ARRAY;
  }
  @NotNull
  @Override
  public Sorter[] getSorters() {
    return Sorter.EMPTY_ARRAY;
  }
  @NotNull
  @Override
  public Filter[] getFilters() {
    return Filter.EMPTY_ARRAY;
  }
  @NotNull
  @Override
  public StructureViewTreeElement getRoot() {
    return new NodeTreeModel.NodeTreeElement(NodeTreeModel.FAKE_ROOT);
  }
  private class NodeTreeElement implements StructureViewTreeElement {
    private final SNodeReference myNode;
    public NodeTreeElement(SNodeReference node) {
      this.myNode = node;
    }
    @Override
    public TreeElement[] getChildren() {
      SNodeReference[] children = ((myNode == NodeTreeModel.FAKE_ROOT) ? NodeTreeModel.this.getRootNodes() : NodeTreeModel.this.getChildren(myNode));
      TreeElement[] childrenElements = new TreeElement[children.length];

      for (int i = 0; i < children.length; i++) {
        childrenElements[i] = new NodeTreeModel.NodeTreeElement(children[i]);
      }

      return childrenElements;
    }
    @Override
    public Object getValue() {
      return myNode;
    }
    @Override
    public ItemPresentation getPresentation() {
      return new NodePointerPresentation(myNode) {
        @Nullable
        @Override
        public String getLocationString() {
          return null;
        }
      };
    }
    @Override
    public void navigate(boolean b) {
      DataManager.getInstance().getDataContextFromFocus().doWhenDone(new Consumer<DataContext>() {
        public void consume(DataContext dataContext) {
          Project project = MPSCommonDataKeys.MPS_PROJECT.getData(dataContext);
          if (project == null) {
            return;
          }
          new EditorNavigator(project).shallFocus(true).shallSelect(true).open(myNode);
        }
      });
    }
    @Override
    public boolean canNavigate() {
      return true;
    }
    @Override
    public boolean canNavigateToSource() {
      return true;
    }
  }
}
