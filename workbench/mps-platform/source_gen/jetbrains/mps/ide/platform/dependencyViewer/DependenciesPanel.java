package jetbrains.mps.ide.platform.dependencyViewer;

/*Generated by MPS */

import javax.swing.JPanel;
import com.intellij.openapi.project.Project;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.ide.tools.BaseTool;
import java.awt.BorderLayout;
import jetbrains.mps.ide.findusages.view.UsagesView;
import com.intellij.ui.components.JBScrollPane;
import com.intellij.openapi.ui.Splitter;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.findusages.model.SearchResults;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import org.jetbrains.mps.openapi.module.SModule;
import javax.swing.JComponent;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.icons.AllIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.ToggleAction;
import jetbrains.mps.icons.MPSIcons;

public class DependenciesPanel extends JPanel {
  private DependencyTree myInitTree;
  private TargetsView myTargetsView;
  private ReferencesView myReferencesView;
  private Project myProject;
  private jetbrains.mps.project.Project myMPSProject;
  private DependencyViewerScope myScope;
  private DependencyViewerScope myInitialScope;
  private List<SNode> mySourceNodes = ListSequence.fromList(new ArrayList<SNode>());
  private BaseTool myTool;
  private ReferencesFinder myReferencesFinder = null;
  private boolean myIsMeta;

  public DependenciesPanel(BaseTool tool, Project project) {
    super(new BorderLayout());
    myTool = tool;
    myIsMeta = false;
    myInitTree = new DependencyTree(this);
    myProject = project;
    myTargetsView = new TargetsView(myProject, this);
    myReferencesView = new ReferencesView(myProject, this);
    myReferencesView.setRunOptions(null, null, new UsagesView.ButtonConfiguration(false, false, false));
    JBScrollPane leftPane = new JBScrollPane(myInitTree);
    Splitter treeSplitter = new Splitter(false);
    treeSplitter.setFirstComponent(leftPane);
    treeSplitter.setSecondComponent(myTargetsView.getTreeComponent());
    Splitter splitter = new Splitter(true);
    splitter.setFirstComponent(treeSplitter);
    splitter.setSecondComponent(myReferencesView.getComponent());
    splitter.setDividerWidth(5);
    treeSplitter.setDividerWidth(5);
    add(splitter, BorderLayout.CENTER);
    add(createToolbar(), BorderLayout.NORTH);
  }

  public void resetContent(DependencyViewerScope scope, jetbrains.mps.project.Project project, boolean isMeta) {
    myIsMeta = isMeta;
    myReferencesFinder = new ReferencesFinder();
    setVisible(true);
    myInitTree.setContent(scope, project);
    updateTargetsView(scope);
    myInitialScope = scope;
    myMPSProject = project;
    repaint();
  }

  public UsagesView getReferencesViewComponent() {
    return myReferencesView;
  }

  public DependencyViewerScope getCurrentScope() {
    return myScope;
  }

  public void updateTargetsView(final DependencyViewerScope sourceScope) {
    myScope = sourceScope;
    final Wrappers._T<SearchResults<SNode>> results = new Wrappers._T<SearchResults<SNode>>(new SearchResults<SNode>());
    ProgressManager.getInstance().run(new Task.Modal(myProject, "Analyzing dependencies", true) {
      @Override
      public void run(@NotNull final ProgressIndicator indicator) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            ProgressMonitor monitor = new ProgressMonitorAdapter(indicator);
            try {
              monitor.start(null, 100);
              List<SNode> nodes = myReferencesFinder.getNodes(sourceScope, monitor.subTask(20));
              mySourceNodes = nodes;
              results.value = (myIsMeta ?
                myReferencesFinder.getUsedLanguagesSearchResults(nodes, sourceScope, monitor.subTask(80)) :
                myReferencesFinder.getTargetSearchResults(nodes, sourceScope, monitor.subTask(80))
              );
            } finally {
              monitor.done();
            }
          }
        });
      }
    });
    myTargetsView.setContents(results.value);
    updateReferencesView(null);
  }

  public void selectInTargetsView(SModule module) {
    myTargetsView.selectModule(module);
  }

  public SearchResults updateReferencesView(final DependencyViewerScope targetScope) {
    final SearchResults[] results = new SearchResults[1];
    if (targetScope == null) {
      myReferencesView.setContents(new SearchResults());
      return results[0];
    }
    ProgressManager.getInstance().run(new Task.Modal(myProject, "Analyzing dependencies", true) {
      @Override
      public void run(@NotNull ProgressIndicator indicator) {
        ProgressMonitor monitor = new ProgressMonitorAdapter(indicator);
        SearchResults result = (myIsMeta ?
          myReferencesFinder.getLanguageUsagesSearchResults(mySourceNodes, myScope, targetScope, monitor) :
          myReferencesFinder.getUsagesSearchResults(mySourceNodes, myScope, targetScope, monitor)
        );
        results[0] = result;
        myReferencesView.setContents(result);

      }
    });
    return results[0];
  }

  public void close() {
    myTool.close();
  }

  private JComponent createToolbar() {
    DefaultActionGroup group = new DefaultActionGroup();
    group.add(new DependenciesPanel.CloseAction());
    group.add(new DependenciesPanel.RerunAction());
    group.add(new DependenciesPanel.ToggleUsedLanguages());
    return ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, true).getComponent();
  }

  public boolean isMeta() {
    return myIsMeta;
  }

  private class CloseAction extends AnAction {
    public CloseAction() {
      super("Close", "Close dependencies viewer", AllIcons.Actions.Cancel);
    }

    @Override
    public void actionPerformed(AnActionEvent event) {
      myTool.setAvailable(false);
    }
  }

  private class RerunAction extends AnAction {
    public RerunAction() {
      super("Rerun", "Rerun dependencies viewer", AllIcons.Actions.Refresh);
    }

    @Override
    public void actionPerformed(AnActionEvent event) {
      resetContent(myInitialScope, myMPSProject, myIsMeta);
    }
  }

  public class ToggleUsedLanguages extends ToggleAction {
    public ToggleUsedLanguages() {
      super("Show used languages", "Show used languages", MPSIcons.Nodes.Language);
    }

    @Override
    public boolean isSelected(AnActionEvent event) {
      return myIsMeta;
    }

    @Override
    public void setSelected(AnActionEvent event, boolean b) {
      resetContent(myInitialScope, myMPSProject, b);
    }
  }
}
