package jetbrains.mps.ide.platform.modeltree;

/*Generated by MPS */

import javax.swing.event.TreeExpansionListener;
import javax.swing.JTree;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.tree.DefaultTreeModel;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.ide.icons.IdeIcons;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import org.apache.commons.lang.StringUtils;
import java.util.Enumeration;

public abstract class ModelTreeBuilder implements TreeExpansionListener {
  private JTree myTree;

  public ModelTreeBuilder(JTree tree) {
    myTree = tree;
    myTree.addTreeExpansionListener(this);
  }

  public void treeExpanded(TreeExpansionEvent event) {
    Object lastNode = event.getPath().getLastPathComponent();
    if (lastNode instanceof ModelTreeNode) {
      ModelTreeNode expandedNode = ((ModelTreeNode) lastNode);
      if (!(expandedNode.getInitialized())) {
        initTreeNode(expandedNode);
        expandedNode.setInitialized(true);
      }
    }
  }

  public void treeCollapsed(TreeExpansionEvent event) {
  }

  protected abstract void initTreeNode(ModelTreeNode node);

  protected void notifyNodeStructureChanged(ModelTreeNode modelTreeNode) {
    ((DefaultTreeModel) myTree.getModel()).nodeStructureChanged(modelTreeNode);
  }

  public static ModelTreeNode createSModelTreeNode(SModelDescriptor descriptor) {
    SModelReference sModelReference = descriptor.getSModelReference();
    String label = sModelReference.getLongName();
    if (sModelReference.getStereotype().length() > 0) {
      label += "@" + sModelReference.getStereotype();
    }
    ModelTreeNode node = new ModelTreeNode(label, IconManager.getIconFor(descriptor), descriptor);
    node.setInitialized(false);
    return node;
  }

  public static ModelTreeNode createSNodeTreeNode(SNode node) {
    return new ModelTreeNode(node.getPresentation(), IconManager.getIconFor(node), new SNodePointer(node));
  }

  public static ModelTreeNode createFolderTreeNode(String folderName) {
    return new ModelTreeNode(folderName, IdeIcons.CLOSED_FOLDER, IdeIcons.OPENED_FOLDER);
  }

  public static Iterable<SNode> sortChildNodes(Iterable<SNode> nodes) {
    return Sequence.fromIterable(nodes).sort(new ISelector<SNode, Comparable<?>>() {
      public Comparable<?> select(SNode node) {
        return SPropertyOperations.getString(node, "virtualPackage") + "|" + ((String) BehaviorManager.getInstance().invoke(Object.class, node, "virtual_getPresentation_1213877396640", new Class[]{SNode.class}));
      }
    }, true);
  }

  public static void insertChildSNodeTreeNode(ModelTreeNode sModelTreeNode, ModelTreeNode sNodeTreeNode, String virtualPackage) {
    ModelTreeNode parentTreeNode = sModelTreeNode;
    if (StringUtils.isNotEmpty(virtualPackage)) {
      for (String sub : virtualPackage.split("\\.")) {
        ModelTreeNode packageTreeNode = findChildNodeByText(parentTreeNode, sub);
        if (packageTreeNode == null) {
          packageTreeNode = createFolderTreeNode(sub);
          parentTreeNode.add(packageTreeNode);
        }
        parentTreeNode = packageTreeNode;
      }
    }
    parentTreeNode.add(sNodeTreeNode);
  }

  public static ModelTreeNode findChildNodeByText(ModelTreeNode parentTreeNode, String childName) {
    for (Enumeration children = parentTreeNode.children(); children.hasMoreElements();) {
      Object nextChild = children.nextElement();
      if (nextChild instanceof ModelTreeNode) {
        ModelTreeNode treeNode = ((ModelTreeNode) nextChild);
        if (childName.equals(treeNode.getText())) {
          return treeNode;
        }
      }
    }
    return null;
  }
}
