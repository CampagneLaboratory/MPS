package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.platform.refactoring.MoveNodesDialog;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import jetbrains.mps.smodel.MPSModuleRepository;

public class MoveNodesExecute {


  public static void execute(MPSProject project, final List<SNode> target, final MoveNodesExecute.ExecuteRefactoring executeRefactoring) {
    final Wrappers._T<SModel> targetModelDescriptor = new Wrappers._T<SModel>();
    ModelAccess modelAccess = project.getRepository().getModelAccess();

    modelAccess.runReadAction(new Runnable() {
      public void run() {
        targetModelDescriptor.value = SNodeOperations.getModel(ListSequence.fromList(target).first());
      }
    });

    final Object newLocation = MoveNodesDialog.getSelectedObject(project.getProject(), targetModelDescriptor.value, new MoveNodesDialog.ModelFilter("Choose Node or Model") {
      @Override
      public boolean check(Object selectedObject, SModel model) {
        return selectedObject instanceof SNode || selectedObject instanceof SModel;
      }
    });
    if (newLocation == null) {
      return;
    }

    modelAccess.runReadInEDT(new Runnable() {
      @Override
      public void run() {
        for (SNode node : ListSequence.fromList(target)) {
          if (!(SNodeUtil.isAccessible(node, MPSModuleRepository.getInstance()))) {
            return;
          }
        }
        if (newLocation instanceof SNode && !(SNodeUtil.isAccessible(((SNode) newLocation), MPSModuleRepository.getInstance()))) {
          return;
        }

        if (newLocation instanceof SModel && (((SModel) newLocation).getReference().resolve(MPSModuleRepository.getInstance()) != newLocation)) {
          return;
        }

        executeRefactoring.run(newLocation);
      }
    });
  }



  public static interface ExecuteRefactoring {
    public void run(Object newLocation);
  }


}
