package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.findusages.model.SearchResults;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Set;
import jetbrains.mps.ide.platform.refactoring.RefactoringAccessEx;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewAction;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewItem;
import jetbrains.mps.smodel.ModelAccess;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class RefactoringViewUtil {

  public static void refactor(final MPSProject mpsProject, final SearchResults<SNode> usagesToShow, final _FunctionTypes._void_P1_E0<? super Set<SNode>> toExecuteWithIncluded, String header) {
    RefactoringAccessEx.getInstance().showRefactoringView(mpsProject.getProject(), new RefactoringViewAction() {
      public void performAction(final RefactoringViewItem refactoringViewItem) {
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            Iterable<SNode> includedNodes;
            if (refactoringViewItem instanceof RefactoringViewItem.RefactoringViewItemEx) {
              List<SNodeReference> nodeRefs = as_y6hz2r_a0a0a0b0a0a0a0a0a0a1a0a0b(refactoringViewItem, RefactoringViewItem.RefactoringViewItemEx.class).getIncludedResultNodes();
              includedNodes = ListSequence.fromList(nodeRefs).select(new ISelector<SNodeReference, SNode>() {
                public SNode select(SNodeReference it) {
                  return it.resolve(mpsProject.getRepository());
                }
              });
            } else {
              includedNodes = usagesToShow.getResultObjects();
            }
            toExecuteWithIncluded.invoke(SetSequence.fromSetWithValues(new HashSet<SNode>(), Sequence.fromIterable(includedNodes).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return it != null;
              }
            })));
          }
        });
        refactoringViewItem.close();
      }
    }, usagesToShow, false, header);
  }
  private static <T> T as_y6hz2r_a0a0a0b0a0a0a0a0a0a1a0a0b(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
