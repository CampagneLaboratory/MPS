package jetbrains.mps.ide.platform.actions;

/*Generated by MPS */

import com.intellij.execution.filters.Filter;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.traceInfo.TraceInfoUtil;
import jetbrains.mps.smodel.SNodePointer;
import com.intellij.execution.filters.HyperlinkInfo;
import jetbrains.mps.ide.navigation.NodeNavigatable;
import jetbrains.mps.ide.project.ProjectHelper;

public class MPSStackTraceFilter implements Filter {
  private static String STRING_START = "at ";
  private final Project myProject;

  public MPSStackTraceFilter(Project project) {
    myProject = project;
  }

  @Nullable
  @Override
  public Filter.Result applyFilter(String line, int length) {
    return tryToParseLine(line, length - line.length(), myProject);
  }



  private Filter.Result tryToParseLine(String line, int offset, Project project) {
    if (((line == null ?
      null :
      line.trim()
    )).indexOf(STRING_START) < 0) {
      return null;
    }

    int start = line.indexOf(STRING_START) + STRING_START.length();
    String tmpStr = line.substring(start);
    int parenIndex = tmpStr.indexOf("(");
    if (parenIndex == -1) {
      return null;
    }

    final String methodName = tmpStr.substring(0, parenIndex);
    int closingParenIndex = tmpStr.indexOf(")");
    if (closingParenIndex == -1) {
      return null;
    }

    final String position = tmpStr.substring(parenIndex + 1, closingParenIndex);

    int lastDot = methodName.lastIndexOf(".");
    final String unitName = ((lastDot == -1 ?
      "" :
      methodName.substring(0, lastDot)
    ));
    String[] split = position.split(":");
    if (split.length < 2) {
      return null;
    }

    final String fileName = split[0];
    final int lineNumber;
    try {
      lineNumber = Integer.parseInt(split[1]);
    } catch (NumberFormatException e) {
      return null;
    }

    int hlStart = start + parenIndex + 1 + offset;
    int hlEnd = start + closingParenIndex + offset;

    return detectTarget(hlStart, hlEnd, unitName, fileName, lineNumber, project);
  }



  protected Filter.Result detectTarget(int hlStart, int hlEnd, final String unitName, final String fileName, final int lineNumber, Project project) {
    final SNodeReference nodeToShow = ModelAccess.instance().runReadAction(new Computable<SNodeReference>() {
      @Override
      public SNodeReference compute() {
        SNode node = TraceInfoUtil.getJavaNode(unitName, fileName, lineNumber);
        if (node == null) {
          return null;
        }
        return new SNodePointer(node);
      }
    });


    if (nodeToShow != null) {
      return new Filter.Result(hlStart, hlEnd, new HyperlinkInfo() {
        @Override
        public void navigate(Project ideaProject) {
          if (nodeToShow != null && ideaProject != null) {
            new NodeNavigatable(ProjectHelper.toMPSProject(ideaProject), nodeToShow).navigate(true);
          }
        }
      });
    }
    return null;
  }
}
