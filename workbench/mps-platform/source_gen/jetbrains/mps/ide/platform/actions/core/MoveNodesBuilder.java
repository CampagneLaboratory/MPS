package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SNode;

public interface MoveNodesBuilder {

  public static interface MoveNodesBuilderProvider {
    public MoveNodesBuilder createMoveNodesBuilder(SModule module, Project project);
  }

  public static interface NodeReference {

  }
  public void moveNode(SNode from, SNode to);

  public MoveNodesBuilder.IncompleteMoveNode moveNode(SNode from);
  public static interface IncompleteMoveNode {
    public void setTarget(SNode to);
  }

  /**
   * 
   * @param callback All changes (e.g. deletion or deprecation of old nodes and creation of the new ones) should be done only here. IncompleteMoveNode.setTarget() can be called here (of before calling commit()).
   */
  public void commit(Runnable callback);


  public static class CompositeBuilder implements MoveNodesBuilder {
    private MoveNodesBuilder myFirst;
    private MoveNodesBuilder mySecond;

    public static MoveNodesBuilder compose(MoveNodesBuilder first, MoveNodesBuilder second) {
      if (first == null) {
        return second;
      }
      if (second == null) {
        return first;
      }
      return new MoveNodesBuilder.CompositeBuilder(first, second);
    }

    public CompositeBuilder(MoveNodesBuilder first, MoveNodesBuilder second) {
      myFirst = first;
      mySecond = second;
    }
    public void moveNode(SNode from, SNode to) {
      myFirst.moveNode(from, to);
    }
    public MoveNodesBuilder.IncompleteMoveNode moveNode(SNode from) {
      final MoveNodesBuilder.IncompleteMoveNode firstIncomplete = myFirst.moveNode(from);
      final MoveNodesBuilder.IncompleteMoveNode secondIncomplete = mySecond.moveNode(from);
      return new MoveNodesBuilder.IncompleteMoveNode() {
        public void setTarget(SNode to) {
          firstIncomplete.setTarget(to);
          secondIncomplete.setTarget(to);
        }
      };
    }
    public void commit(final Runnable callback) {
      myFirst.commit(new Runnable() {
        public void run() {
          mySecond.commit(callback);
        }
      });
    }
  }
}
