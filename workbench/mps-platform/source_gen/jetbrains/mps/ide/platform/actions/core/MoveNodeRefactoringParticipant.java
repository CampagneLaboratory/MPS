package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public interface MoveNodeRefactoringParticipant<InitialDataObject, FinalDataObject> extends RefactoringParticipant<InitialDataObject, FinalDataObject> {

  public static interface MoveNodeRefactoringDataCollector<InitialDataObject, FinalDataObject> {
    public InitialDataObject beforeMove(SNode nodeToMove);
    public FinalDataObject afterMove(SNode movedNode);
  }

  public MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<InitialDataObject, FinalDataObject> getDataCollector();

  public static class MoveNodeParticipantState<I, F> implements RefactoringParticipant.ParticipantChanges<I, F> {
    private MoveNodeRefactoringParticipant<I, F> myParticipant;
    private I myInitialState;
    private Iterable<RefactoringParticipant.Change<I, F>> changes;
    public Iterable<RefactoringParticipant.Change<I, F>> getChanges() {
      return changes;
    }
    public MoveNodeRefactoringParticipant<I, F> getParticipant() {
      return myParticipant;
    }
    public I getInitialState() {
      return myInitialState;
    }
    public static <I, F> MoveNodeRefactoringParticipant.MoveNodeParticipantState<I, F> create(MoveNodeRefactoringParticipant<I, F> participant, SNode oldNode, SRepository repository, SearchScope searchScope) {
      return new MoveNodeRefactoringParticipant.MoveNodeParticipantState<I, F>(participant, oldNode, repository, searchScope);
    }
    private MoveNodeParticipantState(MoveNodeRefactoringParticipant<I, F> participant, SNode oldNode, SRepository repository, SearchScope searchScope) {
      this.myParticipant = participant;
      myInitialState = this.myParticipant.getDataCollector().beforeMove(oldNode);
      this.changes = participant.getChanges(myInitialState, repository, searchScope);
    }
    public void confirm(SNode newNode, final SRepository repository, final RefactoringSession session) {
      final F finalState = this.myParticipant.getDataCollector().afterMove(newNode);
      Sequence.fromIterable(this.changes).visitAll(new IVisitor<RefactoringParticipant.Change<I, F>>() {
        public void visit(RefactoringParticipant.Change<I, F> it) {
          it.confirm(finalState, repository, session);
        }
      });
    }
  }

}
