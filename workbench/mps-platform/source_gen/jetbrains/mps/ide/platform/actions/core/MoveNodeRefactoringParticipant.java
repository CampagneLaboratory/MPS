package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public interface MoveNodeRefactoringParticipant<InitialDataObject, FinalDataObject> extends RefactoringParticipant<InitialDataObject, FinalDataObject> {

  public static interface MoveNodeRefactoringDataCollector<InitialDataObject, FinalDataObject> {
    public InitialDataObject beforeMove(SNode nodeToMove);
    public FinalDataObject afterMove(SNode movedNode);
  }

  public MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<InitialDataObject, FinalDataObject> getDataCollector();

  public static class MoveNodeParticipantState<I, F> implements RefactoringParticipant.ParticipantState<I, F> {
    private MoveNodeRefactoringParticipant<I, F> myParticipant;
    private I myInitialState;
    private List<RefactoringParticipant.Change<I, F>> changes;
    public List<RefactoringParticipant.Change<I, F>> getChanges() {
      return changes;
    }
    public MoveNodeRefactoringParticipant<I, F> getParticipant() {
      return myParticipant;
    }
    public I getInitialState() {
      return myInitialState;
    }
    public static <I, F> MoveNodeRefactoringParticipant.MoveNodeParticipantState<I, F> create(MoveNodeRefactoringParticipant<I, F> participant, SNode oldNode) {
      return new MoveNodeRefactoringParticipant.MoveNodeParticipantState<I, F>(participant, oldNode);
    }
    public MoveNodeParticipantState(MoveNodeRefactoringParticipant<I, F> participant, SNode oldNode) {
      this.myParticipant = participant;
      myInitialState = this.myParticipant.getDataCollector().beforeMove(oldNode);
    }
    public List<String> getOptions(SRepository repository) {
      return myParticipant.getOptions(myInitialState, repository);
    }
    public List<RefactoringParticipant.Change<I, F>> findChanges(SRepository repository, Map<String, Boolean> options, SearchScope searchScope) {
      return changes = initChanges(repository, options, searchScope);
    }
    protected List<RefactoringParticipant.Change<I, F>> initChanges(SRepository repository, Map<String, Boolean> options, SearchScope searchScope) {
      return myParticipant.getChanges(myInitialState, repository, options, searchScope);
    }
    public void confirm(SNode newNode, final SRepository repository, final RefactoringSession session) {
      final F finalState = this.myParticipant.getDataCollector().afterMove(newNode);
      ListSequence.fromList(this.changes).visitAll(new IVisitor<RefactoringParticipant.Change<I, F>>() {
        public void visit(RefactoringParticipant.Change<I, F> it) {
          it.confirm(finalState, repository, session);
        }
      });
    }
  }

}
