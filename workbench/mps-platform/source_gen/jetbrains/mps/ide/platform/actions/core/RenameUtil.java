package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.smodel.language.ConceptRegistry;

public class RenameUtil {
  public static boolean canBeRenamed(SNode node) {
    // we won't rename nodes, for which there are registered name constrints 
    // if there are constrints, but they are not compiled, we can rename it 
    String nameProperty = SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getChildren(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.INamedConcept"), MetaAdapterFactory.getContainmentLink(new UUID(-4094437568663370681l, -8968368868337559369l), 1169125787135l, 1071489727084l, "propertyDeclaration"))).first(), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"));
    return !(ConceptRegistry.getInstance().getConstraintsDescriptor(node.getConcept().getQualifiedName()).getProperty(nameProperty).isReadOnly());
  }
}
