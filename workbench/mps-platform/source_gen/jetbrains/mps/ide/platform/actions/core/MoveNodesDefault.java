package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.Extension;
import jetbrains.mps.smodel.structure.ExtensionFunction;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.language.ExtensionRegistry;
import jetbrains.mps.smodel.structure.ExtensionFunctionPoint;
import jetbrains.mps.refactoring.runtime.access.RefactoringAccess;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import java.util.Arrays;

public class MoveNodesDefault extends Extension.Default<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> {
  public MoveNodesDefault() {
    super("jetbrains.mps.ide.platform.MoveNodeAction");
  }

  public ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void> get() {
    return new ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>() {
      @Override
      public Collection<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> getOverridden() {
        List<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> result = ListSequence.fromList(new ArrayList<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>());
        Iterable<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> extensions = getAllExtensionObjects();
        return result;
      }
      public Iterable<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> getAllExtensionObjects() {
        return ExtensionRegistry.getInstance().getObjects(new ExtensionFunctionPoint<Tuples._2<List<SNode>, MPSProject>, Void>(getExtensionPointId()));
      }
      public boolean applicable(Tuples._2<List<SNode>, MPSProject> arg) {
        return true;
      }
      public Void apply(Tuples._2<List<SNode>, MPSProject> arg) {
        final List<SNode> target = arg._0();
        final MPSProject project = arg._1();
        MoveNodesExecute.execute(project, target, new MoveNodesExecute.ExecuteRefactoring() {
          public void run(Object newLocation) {
            RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.core.refactorings.MoveNodes", Arrays.asList("target"), Arrays.asList(newLocation), target, project));
          }
        });
        return null;

      }
    };
  }
}
