package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.platform.refactoring.NodeLocation;
import jetbrains.mps.ide.platform.refactoring.MoveNodesDialog;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import java.util.Map;
import java.util.ArrayList;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.progress.EmptyProgressMonitor;
import java.util.HashMap;
import java.util.Collection;
import jetbrains.mps.ide.findusages.model.SearchResult;

public class MoveNodesDefault implements MoveNodesRefactoring {


  public String getName() {
    return "Move Nodes 2";
  }

  public static void moveNodes(List<SNode> nodes, MPSProject mpsProject) {
    MoveNodesDefault moveNodesDefault = new MoveNodesDefault();
    if (moveNodesDefault.isApplicable(mpsProject, nodes)) {
      moveNodesDefault.apply(mpsProject, nodes);
    }
  }

  public boolean isApplicable(MPSProject project, List<SNode> nodesToMove) {
    return canBeMoved(nodesToMove, project.getRepository());
  }

  public static boolean canBeMoved(final List<SNode> nodesToMove, SRepository repository) {
    if (ListSequence.fromList(nodesToMove).isEmpty()) {
      return false;
    }
    final Wrappers._boolean result = new Wrappers._boolean();
    repository.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        SNode firstNode = ListSequence.fromList(nodesToMove).first();
        final SContainmentLink containmentLink = firstNode.getContainmentLink();
        final SNode parent = firstNode.getParent();
        final SModel model = firstNode.getModel();
        result.value = ListSequence.fromList(nodesToMove).all(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return eq_92fyi8_a0a0a0a0a0a0a4a0a0a0a2a8(it.getContainmentLink(), containmentLink) && it.getParent() == parent && it.getModel() == model;
          }
        });
      }
    });
    return result.value;
  }

  public void apply(final MPSProject project, final List<SNode> nodesToMove) {

    final Wrappers._T<SModel> currentModel = new Wrappers._T<SModel>();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        currentModel.value = SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
      }
    });
    final NodeLocation newLocation = MoveNodesDialog.getSelectedObject(project.getProject(), currentModel.value, new MoveNodesDialog.ModelFilter("Choose Node or Model") {
      @Override
      public boolean check(NodeLocation selectedObject, SModel model) {
        return true;
      }
    });
    if (newLocation == null) {
      return;
    }

    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        for (SNode node : ListSequence.fromList(nodesToMove)) {
          if (!(SNodeUtil.isAccessible(node, project.getRepository()))) {
            return;
          }
        }
        if (!(newLocation.isValid(project, nodesToMove))) {
          return;
        }

        final Set<SReference> refUsages = findUsages(project, nodesToMove);
        SearchResults<SNode> searchResults = nodesToRefactoringResult(nodesToMove, SetSequence.fromSet(refUsages).select(new ISelector<SReference, SNode>() {
          public SNode select(SReference it) {
            return it.getSourceNode();
          }
        }), "reference");
        RefactoringViewUtil.refactor(project, searchResults, new _FunctionTypes._void_P1_E0<Set<SNode>>() {
          public void invoke(final Set<SNode> included) {
            Iterable<MoveNodesBuilder> moveNodesBuilders = Sequence.fromIterable(new ExtensionPoint<MoveNodesBuilder.MoveNodesBuilderProvider>("jetbrains.mps.ide.platform.MoveNodesBuilder").getObjects()).select(new ISelector<MoveNodesBuilder.MoveNodesBuilderProvider, MoveNodesBuilder>() {
              public MoveNodesBuilder select(MoveNodesBuilder.MoveNodesBuilderProvider it) {
                return it.createMoveNodesBuilder(currentModel.value.getModule());
              }
            }).where(new IWhereFilter<MoveNodesBuilder>() {
              public boolean accept(MoveNodesBuilder it) {
                return it != null;
              }
            }).toListSequence();
            Map<SReference, SNode> usagesMap = classifyUsages(SetSequence.fromSet(refUsages).where(new IWhereFilter<SReference>() {
              public boolean accept(SReference it) {
                return SetSequence.fromSet(included).contains(it.getSourceNode());
              }
            }));
            List<List<MoveNodesBuilder.NodeReference>> oldNodeRefs = ListSequence.fromList(new ArrayList<List<MoveNodesBuilder.NodeReference>>());
            for (final MoveNodesBuilder builder : Sequence.fromIterable(moveNodesBuilders)) {
              ListSequence.fromList(oldNodeRefs).addElement(ListSequence.fromList(nodesToMove).select(new ISelector<SNode, MoveNodesBuilder.NodeReference>() {
                public MoveNodesBuilder.NodeReference select(SNode it) {
                  return builder.createReference(it);
                }
              }).toListSequence());
            }
            newLocation.insertNodes(nodesToMove);
            List<List<MoveNodesBuilder.NodeReference>> newNodeRefs = ListSequence.fromList(new ArrayList<List<MoveNodesBuilder.NodeReference>>());
            for (final MoveNodesBuilder builder : Sequence.fromIterable(moveNodesBuilders)) {
              ListSequence.fromList(newNodeRefs).addElement(ListSequence.fromList(nodesToMove).select(new ISelector<SNode, MoveNodesBuilder.NodeReference>() {
                public MoveNodesBuilder.NodeReference select(SNode it) {
                  return builder.createReference(it);
                }
              }).toListSequence());
            }

            {
              Iterator<MoveNodesBuilder> builder_it = Sequence.fromIterable(moveNodesBuilders).iterator();
              Iterator<List<MoveNodesBuilder.NodeReference>> oldNR_it = ListSequence.fromList(oldNodeRefs).iterator();
              Iterator<List<MoveNodesBuilder.NodeReference>> newNR_it = ListSequence.fromList(newNodeRefs).iterator();
              MoveNodesBuilder builder_var;
              List<MoveNodesBuilder.NodeReference> oldNR_var;
              List<MoveNodesBuilder.NodeReference> newNR_var;
              while (builder_it.hasNext() && oldNR_it.hasNext() && newNR_it.hasNext()) {
                builder_var = builder_it.next();
                oldNR_var = oldNR_it.next();
                newNR_var = newNR_it.next();
                {
                  Iterator<MoveNodesBuilder.NodeReference> from_it = ListSequence.fromList(oldNR_var).iterator();
                  Iterator<MoveNodesBuilder.NodeReference> to_it = ListSequence.fromList(newNR_var).iterator();
                  MoveNodesBuilder.NodeReference from_var;
                  MoveNodesBuilder.NodeReference to_var;
                  while (from_it.hasNext() && to_it.hasNext()) {
                    from_var = from_it.next();
                    to_var = to_it.next();
                    builder_var.moveNode(from_var, to_var);
                  }
                }
              }
            }
            for (IMapping<SReference, SNode> mapping : MapSequence.fromMap(usagesMap)) {
              updateUsage(mapping.key(), mapping.value());
            }
          }
        }, "Move nodes");
      }
    });
  }

  public Set<SReference> findUsages(MPSProject project, Iterable<SNode> nodes) {
    return FindUsagesFacade.getInstance().findUsages(project.getScope(), SetSequence.fromSetWithValues(new HashSet<SNode>(), Sequence.fromIterable(nodes).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SNodeOperations.getNodeDescendants(it, null, true, new SAbstractConcept[]{});
      }
    })), new EmptyProgressMonitor());
  }

  public Map<SReference, SNode> classifyUsages(Iterable<SReference> usages) {
    Map<SReference, SNode> result = MapSequence.fromMap(new HashMap<SReference, SNode>());
    for (SReference ref : Sequence.fromIterable(usages)) {
      MapSequence.fromMap(result).put(ref, ref.getTargetNode());
    }
    return result;
  }

  public SearchResults<SNode> nodesToRefactoringResult(Collection<SNode> searchedNodes, Iterable<SNode> usages, final String category) {
    SearchResults<SNode> searchResults = new SearchResults<SNode>();
    searchResults.getSearchedNodes().addAll(searchedNodes);
    searchResults.getSearchResults().addAll(Sequence.fromIterable(usages).select(new ISelector<SNode, SearchResult<SNode>>() {
      public SearchResult<SNode> select(SNode it) {
        return new SearchResult<SNode>(it, category);
      }
    }).toListSequence());
    return searchResults;
  }


  public void updateUsage(SReference usage, SNode newTarget) {
    usage.getSourceNode().setReferenceTarget(usage.getLink(), newTarget);
  }

  private static boolean eq_92fyi8_a0a0a0a0a0a0a4a0a0a0a2a8(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
