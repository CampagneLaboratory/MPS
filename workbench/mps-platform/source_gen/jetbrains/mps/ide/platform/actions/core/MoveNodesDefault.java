package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.platform.refactoring.NodeLocation;
import jetbrains.mps.ide.platform.refactoring.MoveNodesDialog;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.ArrayList;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.platform.refactoring.RefactoringAccessEx;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewAction;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewItem;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.progress.EmptyProgressMonitor;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class MoveNodesDefault implements MoveNodesRefactoring {


  public String getName() {
    return "Move Nodes";
  }

  public static void moveNodes(List<SNode> nodes, MPSProject mpsProject) {
    MoveNodesDefault moveNodesDefault = new MoveNodesDefault();
    if (moveNodesDefault.isApplicable(mpsProject, nodes)) {
      moveNodesDefault.apply(mpsProject, nodes);
    }
  }

  public boolean isApplicable(MPSProject project, List<SNode> nodesToMove) {
    return canBeMoved(nodesToMove);
  }

  public static boolean canBeMoved(final List<SNode> nodesToMove) {
    if (ListSequence.fromList(nodesToMove).isEmpty()) {
      return false;
    }
    final Wrappers._boolean result = new Wrappers._boolean();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SNode firstNode = ListSequence.fromList(nodesToMove).first();
        final SContainmentLink containmentLink = firstNode.getContainmentLink();
        final SNode parent = firstNode.getParent();
        final SModel model = firstNode.getModel();
        result.value = ListSequence.fromList(nodesToMove).all(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return eq_92fyi8_a0a0a0a0a0a0a4a0a0a0a2a8(it.getContainmentLink(), containmentLink) && it.getParent() == parent && it.getModel() == model;
          }
        });
      }
    });
    return result.value;
  }

  public void apply(final MPSProject project, final List<SNode> nodesToMove) {

    final Wrappers._T<SModel> currentModel = new Wrappers._T<SModel>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        currentModel.value = SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
      }
    });
    final NodeLocation newLocation = MoveNodesDialog.getSelectedObject(project.getProject(), currentModel.value, new MoveNodesDialog.ModelFilter("Choose Node or Model") {
      @Override
      public boolean check(NodeLocation selectedObject, SModel model) {
        return true;
      }
    });
    if (newLocation == null) {
      return;
    }

    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (SNode node : ListSequence.fromList(nodesToMove)) {
          if (!(SNodeUtil.isAccessible(node, project.getRepository()))) {
            return;
          }
        }
        if (!(newLocation.isValid(project, nodesToMove))) {
          return;
        }

        final Map<SNode, List<SReference>> usages = MapSequence.fromMap(new HashMap<SNode, List<SReference>>());
        Set<SReference> allUsages = findUsages(project, nodesToMove);
        for (SReference ref : SetSequence.fromSet(allUsages)) {
          if (MapSequence.fromMap(usages).get(ref.getTargetNode()) == null) {
            MapSequence.fromMap(usages).put(ref.getTargetNode(), ListSequence.fromList(new ArrayList<SReference>()));
          }
          ListSequence.fromList(MapSequence.fromMap(usages).get(ref.getTargetNode())).addElement(ref);
        }
        SearchResults<SNode> searchResults = usagesToSearchResults(nodesToMove, usages);

        RefactoringAccessEx.getInstance().showRefactoringView(ProjectHelper.toIdeaProject(project), new RefactoringViewAction() {
          public void performAction(RefactoringViewItem refactoringViewItem) {
            ModelAccess.instance().runWriteActionInCommand(new Runnable() {
              public void run() {
                newLocation.insertNodes(nodesToMove);
                for (SNode node : SetSequence.fromSet(MapSequence.fromMap(usages).keySet())) {
                  updateUsages(MapSequence.fromMap(usages).get(node), node);
                }
              }
            });
            refactoringViewItem.close();
          }
        }, searchResults, false, "Move nodes");

      }
    });
  }

  public Set<SReference> findUsages(MPSProject project, List<SNode> node) {
    return FindUsagesFacade.getInstance().findUsages(project.getScope(), SetSequence.fromSetWithValues(new HashSet<SNode>(), ListSequence.fromList(node).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SNodeOperations.getNodeDescendants(it, null, true, new SAbstractConcept[]{});
      }
    })), new EmptyProgressMonitor());
  }

  public SearchResults usagesToSearchResults(Collection<SNode> originalNodes, Map<SNode, List<SReference>> usages) {
    SearchResults<SNode> searchResults = new SearchResults<SNode>();
    searchResults.getSearchedNodes().addAll(originalNodes);
    for (SNode node : SetSequence.fromSet(MapSequence.fromMap(usages).keySet())) {
      searchResults.getSearchResults().addAll(ListSequence.fromList(MapSequence.fromMap(usages).get(node)).select(new ISelector<SReference, SearchResult<SNode>>() {
        public SearchResult<SNode> select(SReference it) {
          return new SearchResult<SNode>(it.getSourceNode(), "");
        }
      }).toListSequence());
    }
    return searchResults;
  }

  public void updateUsages(Iterable<SReference> usages, final SNode newTarget) {
    Sequence.fromIterable(usages).visitAll(new IVisitor<SReference>() {
      public void visit(SReference it) {
        it.getSourceNode().setReferenceTarget(it.getLink(), newTarget);
      }
    });
  }

  private static boolean eq_92fyi8_a0a0a0a0a0a0a4a0a0a0a2a8(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
