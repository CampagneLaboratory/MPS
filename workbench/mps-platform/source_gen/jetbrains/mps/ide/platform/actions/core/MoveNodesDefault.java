package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.platform.refactoring.NodeLocation;
import jetbrains.mps.ide.platform.refactoring.MoveNodesDialog;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.platform.refactoring.RefactoringAccessEx;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewAction;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewItem;
import jetbrains.mps.smodel.CopyUtil;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MoveNodesDefault implements MoveNodesRefactoring {


  public String getName() {
    return "Move Nodes";
  }

  public static void moveNodes(List<SNode> nodes, MPSProject mpsProject) {
    MoveNodesDefault moveNodesDefault = new MoveNodesDefault();
    if (moveNodesDefault.isApplicable(mpsProject, nodes)) {
      moveNodesDefault.apply(mpsProject, nodes);
    }
  }

  public boolean isApplicable(MPSProject project, List<SNode> nodesToMove) {
    return canBeMoved(nodesToMove, project.getRepository());
  }

  public static boolean canBeMoved(final List<SNode> nodesToMove, SRepository repository) {
    if (ListSequence.fromList(nodesToMove).isEmpty()) {
      return false;
    }
    final Wrappers._boolean result = new Wrappers._boolean();
    repository.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        SNode firstNode = ListSequence.fromList(nodesToMove).first();
        final SContainmentLink containmentLink = firstNode.getContainmentLink();
        final SNode parent = firstNode.getParent();
        final SModel model = firstNode.getModel();
        result.value = ListSequence.fromList(nodesToMove).all(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return eq_92fyi8_a0a0a0a0a0a0a4a0a0a0a2a8(it.getContainmentLink(), containmentLink) && it.getParent() == parent && it.getModel() == model;
          }
        });
      }
    });
    return result.value;
  }

  public void apply(final MPSProject project, final List<SNode> nodesToMove) {

    final Wrappers._T<SModel> currentModel = new Wrappers._T<SModel>();
    final Wrappers._T<SContainmentLink> role = new Wrappers._T<SContainmentLink>();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        currentModel.value = SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
        role.value = ListSequence.fromList(nodesToMove).first().getContainmentLink();
      }
    });
    final NodeLocation newLocation = MoveNodesDialog.getSelectedObject(project.getProject(), currentModel.value, new MoveNodesDialog.ModelFilter("Choose Node or Model") {
      @Override
      public boolean check(NodeLocation selectedObject, SModel model) {
        return true;
      }
    });
    if (newLocation instanceof NodeLocation.NodeLocationChild) {
      ((NodeLocation.NodeLocationChild) newLocation).setRole(role.value);
    }
    if (newLocation == null) {
      return;
    }
    Map<SNodeReference, NodeLocation> moveMap = MapSequence.fromMap(new HashMap<SNodeReference, NodeLocation>());
    for (SNode node : ListSequence.fromList(nodesToMove)) {
      MapSequence.fromMap(moveMap).put(node.getReference(), newLocation);
    }
    doMove(project, moveMap, null);
  }

  public static class ToMoveItem extends MultiTuple._2<List<SNode>, NodeLocation> {
    public ToMoveItem() {
      super();
    }
    public ToMoveItem(List<SNode> nodes, NodeLocation newLocation) {
      super(nodes, newLocation);
    }
    public List<SNode> nodes(List<SNode> value) {
      return super._0(value);
    }
    public NodeLocation newLocation(NodeLocation value) {
      return super._1(value);
    }
    public List<SNode> nodes() {
      return super._0();
    }
    public NodeLocation newLocation() {
      return super._1();
    }
  }

  @NotNull
  public static SNode resolveNode(SNodeReference nodeReference, Project project) {
    SNode node = nodeReference.resolve(project.getRepository());
    if (node == null) {
      throw new IllegalArgumentException("Node " + nodeReference + " doesn't exist in current project.");
    }
    return node;
  }

  public static void doMove(final MPSProject project, final List<ToMoveItem> toMove, final Runnable callBack) {
    Map<SNodeReference, NodeLocation> moveMap = MapSequence.fromMap(new HashMap<SNodeReference, NodeLocation>());
    for (ToMoveItem nodesToMove : ListSequence.fromList(toMove)) {
      for (SNode node : ListSequence.fromList(nodesToMove.nodes())) {
        MapSequence.fromMap(moveMap).put(node.getReference(), nodesToMove.newLocation());
      }
    }
  }

  public static void doMove(final MPSProject project, final Map<SNodeReference, NodeLocation> moveMap, final Runnable callBack) {

    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        for (IMapping<SNodeReference, NodeLocation> moving : MapSequence.fromMap(moveMap)) {
          SNode node = resolveNode(moving.key(), project);
          if (!(moving.value().canInsert(project.getRepository(), node))) {
            throw new IllegalArgumentException();
          }
        }
      }
    });

    final Map<MoveNodeRefactoringParticipant, Map<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>>> changes = MapSequence.fromMap(new HashMap<MoveNodeRefactoringParticipant, Map<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>>>());
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        for (MoveNodeRefactoringParticipant<?, ?> participant : Sequence.fromIterable(new ExtensionPoint<MoveNodeRefactoringParticipant<?, ?>>("jetbrains.mps.ide.platform.MoveNodeParticipantEP").getObjects()).toListSequence()) {
          Map<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>> participantChanges = MapSequence.fromMap(new HashMap<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>>());
          MapSequence.fromMap(changes).put(participant, participantChanges);
          for (SNodeReference nodeRef : SetSequence.fromSet(MapSequence.fromMap(moveMap).keySet())) {
            MapSequence.fromMap(participantChanges).put(nodeRef, MoveNodeRefactoringParticipant.MoveNodeParticipantState.create(participant, resolveNode(nodeRef, project), project.getRepository(), project.getScope()));
          }
        }
      }
    });

    List<IMapping<MoveNodeRefactoringParticipant, Map<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>>>> changesAsList = MapSequence.fromMap(changes).where(new IWhereFilter<IMapping<MoveNodeRefactoringParticipant, Map<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>>>>() {
      public boolean accept(IMapping<MoveNodeRefactoringParticipant, Map<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>>> it) {
        return MapSequence.fromMap(it.value()).isNotEmpty();
      }
    }).toListSequence();
    List<Integer> selectedOptions = SelectOptionsDialog.selectOptions(ProjectHelper.toIdeaProject(project), ListSequence.fromList(changesAsList).select(new ISelector<IMapping<MoveNodeRefactoringParticipant, Map<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>>>, String>() {
      public String select(IMapping<MoveNodeRefactoringParticipant, Map<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>>> it) {
        return it.key().getDescription();
      }
    }).toListSequence(), "Select Participants");
    if (selectedOptions == null) {
      return;
    }

    final Map<MoveNodeRefactoringParticipant, Map<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>>> selectedChanges = MapSequence.fromMap(new HashMap<MoveNodeRefactoringParticipant, Map<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>>>());
    for (int i : selectedOptions) {
      IMapping<MoveNodeRefactoringParticipant, Map<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>>> mapping = ListSequence.fromList(changesAsList).getElement(i);
      MapSequence.fromMap(selectedChanges).put(mapping.key(), mapping.value());
    }

    SearchResults searchResults = new SearchResults();
    final Map<SNodeReference, Boolean> shouldKeep = MapSequence.fromMap(new HashMap<SNodeReference, Boolean>());

    for (SNodeReference node : SetSequence.fromSet(MapSequence.fromMap(moveMap).keySet())) {
      MapSequence.fromMap(shouldKeep).put(node, false);
    }
    for (IMapping<MoveNodeRefactoringParticipant, Map<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>>> participantChanges : MapSequence.fromMap(selectedChanges)) {
      for (IMapping<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>> nodeChanges : MapSequence.fromMap(participantChanges.value())) {
        for (RefactoringParticipant.Change<?, ?> change : ListSequence.fromList(nodeChanges.value().getChanges())) {
          MapSequence.fromMap(shouldKeep).putValue(nodeChanges.key(), MapSequence.fromMap(shouldKeep).get(nodeChanges.key()) || (change.needsToPreserveOldNode()));
          searchResults.addAll(change.getSearchResults());
        }
      }
    }

    RefactoringAccessEx.getInstance().showRefactoringView(project.getProject(), new RefactoringViewAction() {
      public void performAction(RefactoringViewItem refactoringViewItem) {
        project.getRepository().getModelAccess().executeCommand(new Runnable() {
          public void run() {
            if (callBack != null) {
              callBack.run();
            }

            Map<SNode, SNode> copyMap = MapSequence.fromMap(new HashMap<SNode, SNode>());
            Map<SNodeReference, SNode> nodesToMove = MapSequence.fromMap(new HashMap<SNodeReference, SNode>());
            for (SNodeReference nodeRef : SetSequence.fromSet(MapSequence.fromMap(moveMap).keySet())) {
              MapSequence.fromMap(nodesToMove).put(nodeRef, resolveNode(nodeRef, project));
            }
            CopyUtil.copyAndPreserveId(Sequence.fromIterable(MapSequence.fromMap(nodesToMove).values()).toListSequence(), copyMap);

            for (IMapping<SNodeReference, SNode> oldNode : MapSequence.fromMap(nodesToMove)) {
              if (!(MapSequence.fromMap(shouldKeep).get(oldNode.key()))) {
                SNodeOperations.detachNode(oldNode.value());
              }
            }

            for (IMapping<SNodeReference, SNode> oldNode : MapSequence.fromMap(nodesToMove)) {
              MapSequence.fromMap(moveMap).get(oldNode.key()).insertNode(project.getRepository(), MapSequence.fromMap(copyMap).get(oldNode.value()));
            }

            RefactoringSessionImpl refactoringSession = new RefactoringSessionImpl();

            for (IMapping<MoveNodeRefactoringParticipant, Map<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>>> participantChanges : MapSequence.fromMap(selectedChanges)) {
              for (IMapping<SNodeReference, MoveNodeRefactoringParticipant.MoveNodeParticipantState<?, ?>> nodeChanges : MapSequence.fromMap(participantChanges.value())) {
                nodeChanges.value().confirm(MapSequence.fromMap(copyMap).get(MapSequence.fromMap(nodesToMove).get(nodeChanges.key())), project.getRepository(), refactoringSession);
              }
            }
            try {
              refactoringSession.commit();
            } catch (RuntimeException exception) {
              if (LOG.isEnabledFor(Level.ERROR)) {
                LOG.error("Exception during refactoring: ", exception);
              }
            }
          }
        });
        refactoringViewItem.close();
      }
    }, searchResults, false, "Move nodes");
  }

  protected static Logger LOG = LogManager.getLogger(MoveNodesDefault.class);
  private static boolean eq_92fyi8_a0a0a0a0a0a0a4a0a0a0a2a8(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
