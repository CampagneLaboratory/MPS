package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import jetbrains.mps.ide.platform.refactoring.RefactoringDialog;
import java.util.List;
import javax.swing.JCheckBox;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.project.Project;
import javax.swing.JComponent;
import javax.swing.JPanel;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import javax.swing.JLabel;
import java.util.Iterator;

public class SelectContributorsDialog extends RefactoringDialog {

  private List<MoveRefactoringContributor> myContributors;
  private List<JCheckBox> myCheckBoxes = ListSequence.fromList(new ArrayList<JCheckBox>());
  private List<MoveRefactoringContributor> myResult;
  public SelectContributorsDialog(Project project, List<MoveRefactoringContributor> contributors) {
    super(project, true);
    myContributors = contributors;
    init();
    setTitle("Select Contributors");
  }
  @Override
  protected JComponent createCenterPanel() {
    JPanel panel = new JPanel(new GridBagLayout());
    int i = 0;

    {
      GridBagConstraints c = new GridBagConstraints();
      c.fill = GridBagConstraints.BOTH;
      c.insets = new Insets(3, 3, 3, 3);
      c.gridx = 0;
      c.gridy = i++;
      c.weightx = 1;
      c.weighty = 1;

      panel.add(new JLabel("Select how update the nodes usages:"), c);

    }

    for (MoveRefactoringContributor contributor : ListSequence.fromList(myContributors)) {
      GridBagConstraints c = new GridBagConstraints();
      c.fill = GridBagConstraints.BOTH;
      c.insets = new Insets(3, 3, 3, 3);
      c.gridx = 0;
      c.gridy = i++;
      c.weightx = 1;
      c.weighty = 1;

      JCheckBox checkBox = new JCheckBox(contributor.getDescription(), true);
      ListSequence.fromList(myCheckBoxes).addElement(checkBox);
      panel.add(checkBox, c);
    }
    return panel;
  }
  @Override
  protected void doRefactoringAction() {
    myResult = ListSequence.fromList(new ArrayList<MoveRefactoringContributor>());
    {
      Iterator<MoveRefactoringContributor> contributor_it = ListSequence.fromList(myContributors).iterator();
      Iterator<JCheckBox> checkBox_it = ListSequence.fromList(myCheckBoxes).iterator();
      MoveRefactoringContributor contributor_var;
      JCheckBox checkBox_var;
      while (contributor_it.hasNext() && checkBox_it.hasNext()) {
        contributor_var = contributor_it.next();
        checkBox_var = checkBox_it.next();
        if (checkBox_var.isSelected()) {
          ListSequence.fromList(myResult).addElement(contributor_var);
        }
      }
    }
    super.doRefactoringAction();
  }
  public static List<MoveRefactoringContributor> selectContributors(Project project, List<MoveRefactoringContributor> contributors) {
    SelectContributorsDialog dialog = new SelectContributorsDialog(project, contributors);
    dialog.show();
    return dialog.myResult;
  }

}
