package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.ide.findusages.model.SearchResults;
import org.jetbrains.mps.openapi.model.SNode;

public interface RefactoringParticipant<InitialDataObject, FinalDataObject> {

  public static class Option {
    private String myId;
    private String myDescription;
    public Option(String id, String description) {
      myId = id;
      myDescription = description;
    }
    public String getId() {
      return myId;
    }
    public String getDescription() {
      return myDescription;
    }
    public int hashCode() {
      return myId.hashCode();
    }
    public boolean equals(Object object) {
      return object instanceof RefactoringParticipant.Option && eq_g5nieh_a0a0a6b(((RefactoringParticipant.Option) object).getId(), this.getId());
    }
    private static boolean eq_g5nieh_a0a0a6b(Object a, Object b) {
      return (a != null ? a.equals(b) : a == b);
    }
  }

  public List<RefactoringParticipant.Option> getAvailableOptions(InitialDataObject initialState, SRepository repository);

  public List<RefactoringParticipant.Change<InitialDataObject, FinalDataObject>> getChanges(InitialDataObject initialState, SRepository repository, List<RefactoringParticipant.Option> selectedOptions, SearchScope searchScope);

  public static interface Change<InitialDataObject, FinalDataObject> {
    public SearchResults getSearchResults();
    public boolean needsToPreserveOldNode();
    public void confirm(FinalDataObject finalState, SRepository repository, RefactoringSession refactoringSession);
  }

  public static interface PersistentRefactoringParticipant<InitialDataObject, FinalDataObject> extends RefactoringParticipant<InitialDataObject, FinalDataObject> {
    public String getId();
    public SNode serializeInitialState(InitialDataObject initialState);
    public InitialDataObject deserializeInitialState(SNode serialized);
    public SNode serializeFinalState(FinalDataObject finalState);
    public FinalDataObject deserializeFinalState(SNode serialized);
  }

  public static interface ParticipantState<I, F> {
    public RefactoringParticipant<I, F> getParticipant();
    public I getInitialState();
    public List<RefactoringParticipant.Change<I, F>> getChanges();
  }

}
