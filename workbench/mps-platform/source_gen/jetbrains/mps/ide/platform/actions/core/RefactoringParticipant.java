package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.ide.findusages.model.SearchResults;
import org.jetbrains.mps.openapi.model.SNode;

public interface RefactoringParticipant<InitialDataObject, FinalDataObject> {

  public List<String> getOptions(InitialDataObject initialState, SRepository repository);

  public List<RefactoringParticipant.Change<InitialDataObject, FinalDataObject>> getChanges(InitialDataObject initialState, SRepository repository, Map<String, Boolean> options, SearchScope searchScope);

  public static interface Change<InitialDataObject, FinalDataObject> {
    public SearchResults getSearchResults();
    public boolean needsToPreserveOldNode();
    public void confirm(FinalDataObject finalState, SRepository repository, RefactoringSession refactoringSession);
  }

  public static interface PersistentRefactoringParticipant<InitialDataObject, FinalDataObject> extends RefactoringParticipant<InitialDataObject, FinalDataObject> {
    public String getId();
    public SNode serializeInitialState(InitialDataObject initialState);
    public InitialDataObject deserializeInitialState(SNode serialized);
    public SNode serializeFinalState(FinalDataObject finalState);
    public FinalDataObject deserializeFinalState(SNode serialized);
  }

  public static interface ParticipantState<I, F> {
    public RefactoringParticipant<I, F> getParticipant();
    public I getInitialState();
    public List<RefactoringParticipant.Change<I, F>> getChanges();
  }

}
