package jetbrains.mps.ide.platform.watching;

/*Generated by MPS */

import com.intellij.openapi.vfs.VirtualFileSystem;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelDescriptor;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.smodel.descriptor.source.changes.ModelFileWatcherProvider;
import jetbrains.mps.smodel.descriptor.source.changes.ModelFileWatcher;
import jetbrains.mps.ide.vfs.IdeaModelFileWatcherProvider;

/*package*/ class ModelFileProcessor extends EventProcessor {
  public ModelFileProcessor(VirtualFileSystem fs, ReloadSession s) {
    super(fs, s);
  }

  protected boolean accepts(String path) {
    return true;
  }

  @Override
  protected void processDelete(String path) {
    invalidate(path);
    IFile ifile = FileSystem.getInstance().getFileByPath(path);
    final EditableSModelDescriptor model = SModelRepository.getInstance().findModel(ifile);
    if (model == null) {
      return;
    }
    IModule module = model.getModule();
    if (module == null) {
      return;
    }
    s.addChangedModule(module);
  }

  @Override
  protected void processCreate(String path) {
    IFile ifile = FileSystem.getInstance().getFileByPath(path);
    SModelDescriptor model = SModelRepository.getInstance().findModel(ifile);
    if (model == null) {
      VirtualFile vfile = refreshAndGetVFile(path);
      if (vfile == null) {
        return;
      }
      s.addNewModelFile(vfile);
    }
  }

  protected void processContentChanged(String path) {
    invalidate(path);
  }

  private void invalidate(String path) {
    ModelFileWatcherProvider provider = ModelFileWatcher.getInstance().getProvider();
    if (provider instanceof IdeaModelFileWatcherProvider) {
      VirtualFile file = fs.findFileByPath(path);
      while (file != null) {
        ((IdeaModelFileWatcherProvider) provider).invalidate(file.getPath());
        file = file.getParent();
      }
    }
  }
}
