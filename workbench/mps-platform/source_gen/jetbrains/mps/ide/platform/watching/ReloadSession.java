package jetbrains.mps.ide.platform.watching;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.progress.SubProgressKind;
import jetbrains.mps.reloading.ClassLoaderManager;
import jetbrains.mps.progress.EmptyProgressMonitor;

public class ReloadSession {
  protected static Log log = LogFactory.getLog(ReloadSession.class);

  private final Set<FSChangesWatcher.IReloadListener> myReloadListeners;
  private boolean myReloaded = false;
  private FileProcessor myFileProcessor = new FileProcessor();

  public ReloadSession(Set<FSChangesWatcher.IReloadListener> reloadListeners) {
    myReloadListeners = SetSequence.fromSetWithValues(new HashSet<FSChangesWatcher.IReloadListener>(), reloadListeners);
  }

  public EventProcessor[] getProcessors() {
    return new EventProcessor[]{myFileProcessor};
  }

  public boolean isEmpty() {
    for (EventProcessor p : getProcessors()) {
      if (!(p.isEmpty())) {
        return false;
      }
    }
    return true;
  }

  public void doReload(final ProgressMonitor monitor) {
    assert !(myReloaded) : "Contract: do not call doReload twice on one reload session";
    myReloaded = true;

    monitor.start("Reloading ...", 2);
    fireReloadStarted();
    try {
      ModelAccess.instance().runWriteAction(new Runnable() {
        public void run() {
          myFileProcessor.update(monitor.subTask(1, SubProgressKind.REPLACING));

          if (ClassLoaderManager.getInstance().isReloadRequested()) {
            monitor.subTask(1, SubProgressKind.REPLACING).start("Reloading classes... Please wait.", 1);
            ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
          }
        }
      });
    } finally {
      if (log.isInfoEnabled()) {
        log.info("Reload finished.");
      }
      monitor.done();
      fireReloadFinished();
    }
  }

  private void fireReloadStarted() {
    for (FSChangesWatcher.IReloadListener l : myReloadListeners) {
      l.reloadStarted();
    }
  }

  private void fireReloadFinished() {
    for (FSChangesWatcher.IReloadListener l : myReloadListeners) {
      l.reloadFinished();
    }
  }
}
