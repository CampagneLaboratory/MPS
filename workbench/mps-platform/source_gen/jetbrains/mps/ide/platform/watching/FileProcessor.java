package jetbrains.mps.ide.platform.watching;

/*Generated by MPS */

import jetbrains.mps.reloading.IFileProcessor;
import java.util.Map;
import jetbrains.mps.vfs.FileSystemListener;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.ide.vfs.IdeaFileSystemProvider;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.progress.SubProgressKind;
import java.util.Set;
import java.util.LinkedHashSet;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.HashSet;

public class FileProcessor extends EventProcessor implements IFileProcessor {
  private FileSystemListenersContainer listenersContainer;
  private Map<FileSystemListener, FileProcessor.ListenerData> dataMap = MapSequence.fromMap(new HashMap<FileSystemListener, FileProcessor.ListenerData>());
  private Queue<FileSystemListener> postNotify = QueueSequence.fromQueue(new LinkedList<FileSystemListener>());

  public FileProcessor() {
    this.listenersContainer = ((IdeaFileSystemProvider) FileSystem.getInstance().getFileSystemProvider()).getListenersContainer();
  }

  public void update(ProgressMonitor monitor) {
    monitor.start("Reloading files... Please wait.", MapSequence.fromMap(dataMap).count() + 1);
    try {
      for (FileSystemListener listener : Sequence.fromIterable(sortedListeners())) {
        FileProcessor.ListenerData data = MapSequence.fromMap(dataMap).get(listener);
        if (!(listenersContainer.contains(listener))) {
          monitor.advance(1);
          continue;
        }

        listener.update(monitor.subTask(1, SubProgressKind.AS_COMMENT), data);
        data.isNotified = true;
      }
      FileSystemListener listener;
      while ((listener = QueueSequence.fromQueue(postNotify).removeFirstElement()) != null) {
        FileProcessor.ListenerData data = MapSequence.fromMap(dataMap).get(listener);
        if (data.isNotified) {
          continue;
        }
        listener.update(monitor.subTask(0, SubProgressKind.AS_COMMENT), data);
        data.isNotified = true;
      }
    } finally {
      monitor.done();
    }
  }

  private void notify(FileSystemListener listener, FileProcessor.ListenerData source) {
    FileProcessor.ListenerData data = MapSequence.fromMap(dataMap).get(listener);
    if (data == null) {
      data = new FileProcessor.ListenerData();
      MapSequence.fromMap(dataMap).put(listener, data);
      QueueSequence.fromQueue(postNotify).addLastElement(listener);
    } else if (data.isNotified) {
      return;
    }
    data.added.addAll(source.added);
    data.changed.addAll(source.changed);
    data.removed.addAll(source.removed);
  }

  private Iterable<FileSystemListener> sortedListeners() {
    Set<FileSystemListener> result = new LinkedHashSet<FileSystemListener>(MapSequence.fromMap(dataMap).count());
    for (FileSystemListener l : SetSequence.fromSet(MapSequence.fromMap(dataMap).keySet())) {
      visit(l, result);
    }
    return result;
  }

  private void visit(FileSystemListener listener, Set<FileSystemListener> result) {
    if (result.contains(listener)) {
      return;
    }
    result.add(listener);
    Iterable<FileSystemListener> dependencies = listener.getListenerDependencies();
    if (dependencies == null) {
      return;
    }

    boolean readd = false;
    for (FileSystemListener dep : dependencies) {
      if (MapSequence.fromMap(dataMap).containsKey(dep) && !(result.contains(dep))) {
        visit(dep, result);
        readd = true;
      }
    }
    if (readd) {
      result.remove(listener);
      result.add(listener);
    }
  }

  protected boolean accepts(VirtualFile file) {
    return true;
  }

  protected void processDelete(VirtualFile file) {
    String path = file.getPath();
    final IFile ifile = FileSystem.getInstance().getFileByPath(path);
    Sequence.fromIterable(get(path)).visitAll(new IVisitor<FileProcessor.ListenerData>() {
      public void visit(FileProcessor.ListenerData it) {
        it.removed.add(ifile);
      }
    });
  }

  protected void processCreate(VirtualFile file) {
    String path = file.getPath();
    final IFile ifile = FileSystem.getInstance().getFileByPath(path);
    Sequence.fromIterable(get(path)).visitAll(new IVisitor<FileProcessor.ListenerData>() {
      public void visit(FileProcessor.ListenerData it) {
        it.added.add(ifile);
      }
    });
  }

  protected void processContentChanged(VirtualFile file) {
    String path = file.getPath();
    final IFile ifile = FileSystem.getInstance().getFileByPath(path);
    Sequence.fromIterable(get(path)).visitAll(new IVisitor<FileProcessor.ListenerData>() {
      public void visit(FileProcessor.ListenerData it) {
        it.changed.add(ifile);
      }
    });
  }

  public boolean isEmpty() {
    return MapSequence.fromMap(dataMap).isEmpty();
  }

  public Iterable<FileProcessor.ListenerData> get(String path) {
    return Sequence.fromIterable(listenersContainer.listeners(path)).select(new ISelector<FileSystemListener, FileProcessor.ListenerData>() {
      public FileProcessor.ListenerData select(FileSystemListener it) {
        FileProcessor.ListenerData data = MapSequence.fromMap(dataMap).get(it);
        if (data == null) {
          data = new FileProcessor.ListenerData();
          MapSequence.fromMap(dataMap).put(it, data);
        }
        return data;
      }
    });
  }

  private class ListenerData implements FileSystemListener.FileSystemEvent {
    private Set<IFile> added = new HashSet<IFile>();
    private Set<IFile> removed = new HashSet<IFile>();
    private Set<IFile> changed = new HashSet<IFile>();
    private boolean isNotified;

    private ListenerData() {
    }

    public Iterable<IFile> getCreated() {
      return added;
    }

    public Iterable<IFile> getRemoved() {
      return removed;
    }

    public Iterable<IFile> getChanged() {
      return changed;
    }

    public void notify(FileSystemListener listener) {
      FileProcessor.this.notify(listener, this);
    }
  }
}
