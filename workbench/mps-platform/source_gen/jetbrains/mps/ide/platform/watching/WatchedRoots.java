package jetbrains.mps.ide.platform.watching;

/*Generated by MPS */

import jetbrains.mps.fs.MPSDirectoryWatcher;
import com.intellij.openapi.components.ApplicationComponent;
import java.util.Map;
import jetbrains.mps.fs.WatchRequestor;
import com.intellij.openapi.vfs.LocalFileSystem;
import java.util.HashMap;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;

/**
 * Component that lets you add watch requests.
 * It also lets you maintain big umbrella watched paths, like a whole project dir.
 * This saves us a lot of other watch request creation, if they are under project dir, which is often the case.
 * The thing is our module structure is opaque (arbitrary model roots, data sources, etc, all of them
 * adding fs listeners on some dirs/files), unlike idea's where there is a known structure: modules, source roots.
 */
public class WatchedRoots extends MPSDirectoryWatcher implements ApplicationComponent {
  private final Map<WatchRequestor, LocalFileSystem.WatchRequest> myGlobalRequests = new HashMap<WatchRequestor, LocalFileSystem.WatchRequest>();
  private final Map<String, LocalFileSystem.WatchRequest> myOtherRequests = new HashMap<String, LocalFileSystem.WatchRequest>();
  private final Map<String, Integer> myRequestedPaths = new HashMap<String, Integer>();
  private final LocalFileSystem myLocalFileSystem;

  public WatchedRoots(LocalFileSystem lfs) {
    myLocalFileSystem = lfs;
  }

  public void initComponent() {
    MPSDirectoryWatcher.setInstance(this);
  }

  public void disposeComponent() {
    MPSDirectoryWatcher.setInstance(null);
  }
  @NonNls
  @NotNull
  public String getComponentName() {
    return "Watched Roots";
  }

  @Override
  public synchronized void addGlobalWatch(WatchRequestor req) {
    LocalFileSystem.WatchRequest request = myLocalFileSystem.addRootToWatch(req.getDirectory(), true);
    if (request == null) {
      return;
    }
    myGlobalRequests.put(req, request);
  }
  @Override
  public synchronized void removeGlobalWatch(WatchRequestor requestor) {
    LocalFileSystem.WatchRequest request = myGlobalRequests.get(requestor);
    myGlobalRequests.remove(requestor);

    if (request != null) {
      myLocalFileSystem.removeWatchedRoot(request);
    }

    // handle the case when something from project A added fs listener (=> a watch) under a dir of project B 

    List<String> pathsToWatch = ListSequence.fromList(new ArrayList<String>());
    for (String path : myRequestedPaths.keySet()) {
      if (!(FileUtil.isSubPath(requestor.getDirectory(), path))) {
        continue;
      }
      if (!(myOtherRequests.containsKey(path))) {
        ListSequence.fromList(pathsToWatch).addElement(path);
      }
    }
    ListSequence.fromList(pathsToWatch).visitAll(new IVisitor<String>() {
      public void visit(String it) {
        maybeAddWatchRequest(it);
      }
    });
  }
  public synchronized void addWatchRequest(String path) {
    Integer count = myRequestedPaths.get(path);
    if (count != null) {
      myRequestedPaths.put(path, count + 1);
    } else {
      myRequestedPaths.put(path, 1);
      maybeAddWatchRequest(path);
    }
  }
  private void maybeAddWatchRequest(String path) {
    boolean alreadyCovered = false;

    for (LocalFileSystem.WatchRequest watch : CollectionSequence.fromCollection(myGlobalRequests.values())) {
      String watchPath = watch.getRootPath();
      if (FileUtil.isSubPath(watchPath, path)) {
        alreadyCovered = true;
        break;
      }
    }
    if (!(alreadyCovered)) {
      LocalFileSystem.WatchRequest request = myLocalFileSystem.addRootToWatch(path, true);
      if (request != null) {
        myOtherRequests.put(path, request);
      }
    }
  }
  public synchronized void removeWatchRequest(String path) {
    Integer count = myRequestedPaths.get(path);
    if (count == null) {
      return;
    }
    assert count > 0;
    count = count - 1;
    if (count > 0) {
      myRequestedPaths.put(path, count);
    } else {
      myRequestedPaths.remove(path);
      LocalFileSystem.WatchRequest req = myOtherRequests.get(path);
      if (req != null) {
        myLocalFileSystem.removeWatchedRoot(req);
        myOtherRequests.remove(path);
      }
    }
  }

}
