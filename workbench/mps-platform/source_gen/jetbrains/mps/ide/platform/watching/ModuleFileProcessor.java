package jetbrains.mps.ide.platform.watching;

/*Generated by MPS */

import com.intellij.openapi.vfs.VirtualFileSystem;
import jetbrains.mps.fileTypes.MPSFileTypesManager;
import jetbrains.mps.project.IModule;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.vfs.FileSystem;

/*package*/ class ModuleFileProcessor extends EventProcessor {
  public ModuleFileProcessor(VirtualFileSystem fs, ReloadSession s) {
    super(fs, s);
  }

  protected boolean accepts(String path) {
    return fs.findFileByPath(path).isDirectory() || MPSFileTypesManager.instance().isModuleFile(path);
  }

  @Override
  protected void processDelete(String path) {
    IModule module = ModuleFileProcessor.getModuleByPath(path);
    if (module != null) {
      s.addDeletedModule(module);
    }
  }

  @Override
  protected void processCreate(String path) {
    IModule module = ModuleFileProcessor.getModuleByPath(path);
    if (module == null) {
      VirtualFile vfile = refreshAndGetVFile(path);
      if (vfile == null) {
        return;
      }
      s.addNewModuleFile(vfile);
    }
  }

  @Override
  protected void processContentChanged(String path) {
    IModule module = ModuleFileProcessor.getModuleByPath(path);
    if ((module != null) && (module.needReloading())) {
      s.addChangedModule(module);
    }
  }

  public static IModule getModuleByPath(final String path) {
    return ModelAccess.instance().runReadAction(new Computable<IModule>() {
      public IModule compute() {
        return MPSModuleRepository.getInstance().getModuleByFile(FileSystem.getInstance().getFileByPath(path));
      }
    });
  }
}
