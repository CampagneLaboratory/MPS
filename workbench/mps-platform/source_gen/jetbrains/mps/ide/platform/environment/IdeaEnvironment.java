package jetbrains.mps.ide.platform.environment;

/*Generated by MPS */

import jetbrains.mps.tool.environment.EnvironmentBase;
import jetbrains.mps.tool.environment.ProjectContainer;
import com.intellij.idea.IdeaTestApplication;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.tool.environment.EnvironmentConfig;
import jetbrains.mps.ide.platform.watching.FSChangesWatcher;
import jetbrains.mps.ide.MPSCoreComponents;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.project.Project;
import java.io.File;
import jetbrains.mps.ide.ThreadUtils;
import com.intellij.ide.IdeEventQueue;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.util.FileUtil;
import java.io.InputStream;
import java.io.FileOutputStream;
import jetbrains.mps.util.ReadUtil;
import java.io.IOException;
import com.intellij.openapi.project.ex.ProjectManagerEx;
import com.intellij.openapi.vfs.VirtualFileManager;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.application.ModalityState;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.make.MPSCompilationResult;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

/**
 * TODO: fix dispose methods
 */
public class IdeaEnvironment extends EnvironmentBase {
  private static final String MISC_XML_URI = "/jetbrains/mps/testbench/junit/runners/misc.xml";

  private final ProjectContainer myContainer = new ProjectContainer();
  private IdeaTestApplication myIdeaApplication;

  public IdeaEnvironment(@NotNull EnvironmentConfig config) {
    super(config);
  }

  @Override
  public void init() {
    if (LOG.isInfoEnabled()) {
      LOG.info("Creating IDEA environment");
    }
    EnvironmentBase.setSystemProperties(true);
    EnvironmentBase.setIdeaPluginsToLoad(myConfig);

    myIdeaApplication = createIdeaTestApp();
    // Necessary to listen for FS changes notifications & notify MPS FS listeners to update reposotiry/.. 
    // this code will work if on executing tests with "reuse caches" option 
    // TODO: should we modify FSChangesWatcher to always listen for FS notifications (even in tests)? 
    FSChangesWatcher.instance().initComponent(true);

    MPSCoreComponents coreComponents = getMPSCoreComponents();
    super.init(coreComponents.getMPSCore().getLibraryInitializer());
  }

  private MPSCoreComponents getMPSCoreComponents() {
    return ApplicationManager.getApplication().getComponent(MPSCoreComponents.class);
  }

  private IdeaTestApplication createIdeaTestApp() {
    if (LOG.isInfoEnabled()) {
      LOG.info("Creating IdeaTestApplication");
    }
    return IdeaTestApplication.getInstance(null);
  }

  @Override
  public boolean hasIdeaInstance() {
    return true;
  }

  @Override
  @NotNull
  public Project openProject(@NotNull File projectFile) {
    Project lastUsedProject = getOpenedProject(projectFile);
    if (lastUsedProject != null) {
      if (LOG.isInfoEnabled()) {
        LOG.info("Using the last created project");
      }
      return lastUsedProject;
    } else {
      if (LOG.isInfoEnabled()) {
        LOG.info("Opening a new project");
      }
      Project project = openProjectInIdeaEnvironment(projectFile);
      myContainer.addProject(project);
      return project;
    }
  }

  @NotNull
  @Override
  public Project createEmptyProject() {
    File dummyProjectFile = createDummyProjectFile();
    Project dummyProject = openProject(dummyProjectFile);
    return dummyProject;
  }

  @Override
  public void closeProject(@NotNull final Project project) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Disposing the project " + project);
    }

    ThreadUtils.runInUIThreadNoWait(new Runnable() {
      public void run() {
        myContainer.disposeProject(project);
        IdeEventQueue.getInstance().flushQueue();
      }
    });
  }

  @Nullable
  @Override
  public Project getOpenedProject(@NotNull File projectFile) {
    return myContainer.getProject(projectFile);
  }

  @Override
  public void dispose() {
    for (Project project : SetSequence.fromSet(myContainer.getProjects())) {
      closeProject(project);
    }

    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      @Override
      public void run() {
        ApplicationManager.getApplication().runWriteAction(new Runnable() {
          public void run() {
            myIdeaApplication.dispose();
          }
        });
      }
    });

    flushAllEvents();
  }

  private File createDummyProjectFile() {
    File dummyProjDir = FileUtil.createTmpDir();
    File dotMps = new File(dummyProjDir, ".mps");
    dotMps.mkdir();
    File projectFile = new File(dotMps, IdeaEnvironment.MISC_XML_URI.substring(IdeaEnvironment.MISC_XML_URI.lastIndexOf("/") + 1));
    try {
      projectFile.createNewFile();
      InputStream input = IdeaEnvironment.class.getResourceAsStream(IdeaEnvironment.MISC_XML_URI);
      FileOutputStream stream = new FileOutputStream(projectFile);
      stream.write(ReadUtil.read(input));
      stream.close();
      input.close();
    } catch (IOException e) {
      e.printStackTrace();
      return null;
    }
    dummyProjDir.deleteOnExit();
    return dummyProjDir;
  }

  @NotNull
  private static Project openProjectInIdeaEnvironment(File projectFile) {
    if (!(projectFile.exists())) {
      throw new RuntimeException("Can't find project file " + projectFile.getAbsolutePath());
    }
    final ProjectManagerEx projectManager = ProjectManagerEx.getInstanceEx();
    final String filePath = projectFile.getAbsolutePath();
    // this is a workaround for MPS-8840 
    final com.intellij.openapi.project.Project[] project = new com.intellij.openapi.project.Project[1];
    final Throwable[] exc = new Throwable[]{null};
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        try {
          if (LOG.isInfoEnabled()) {
            LOG.info("Load and open the project with path '" + filePath + "'");
          }
          project[0] = projectManager.loadAndOpenProject(filePath);
          // calling sync refresh for FS in order to update all modules/models loaded from the project 
          // if unit-test is executed with the "reuse caches" option. 
          VirtualFileManager.getInstance().syncRefresh();
        } catch (Throwable e) {
          exc[0] = e;
        }
      }
    });
    if (exc[0] != null) {
      // this actually happens 
      throw new RuntimeException("ProjectManager could not load project from " + projectFile.getAbsolutePath(), exc[0]);
    }
    return project[0].getComponent(MPSProject.class);
  }

  @Override
  public void flushAllEvents() {
    ApplicationManager.getApplication().invokeAndWait(new Runnable() {
      public void run() {
      }
    }, ModalityState.NON_MODAL);
    ModelAccess.instance().flushEventQueue();
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        return;
      }
    });
  }

  @Nullable
  @Override
  protected ClassLoader rootCLForLibs() {
    return null;
  }

  @NotNull
  @Override
  public MPSCompilationResult make() {
    return null;
  }
  protected static Logger LOG = LogManager.getLogger(IdeaEnvironment.class);
}
