package jetbrains.mps.ide.platform.refactoring;

/*Generated by MPS */

import com.intellij.refactoring.RefactoringBundle;
import javax.swing.JTextArea;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import com.intellij.ui.DocumentAdapter;
import javax.swing.event.DocumentEvent;
import javax.swing.JComponent;
import javax.swing.JPanel;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Color;

public class RenameDialog extends StringChooserDialog {
  private static String REFACTORING_NAME = RefactoringBundle.message("rename.title");

  private JTextArea myErrorLabel;

  public RenameDialog(@NotNull Project project, String oldName, String nodeType) {
    super(project, REFACTORING_NAME, "Rename " + nodeType, oldName);
    myTextField.getDocument().addDocumentListener(new DocumentAdapter() {
      protected void textChanged(DocumentEvent p0) {
        update();
      }
    });
  }

  public String getName() {
    return myResultString;
  }

  protected JComponent createCenterPanel() {
    JPanel panel = new JPanel(new GridBagLayout());
    GridBagConstraints c = new GridBagConstraints();
    c.fill = GridBagConstraints.HORIZONTAL;
    c.weightx = 1;
    panel.add(createErrorLabel(), c);
    return panel;
  }

  private JTextArea createErrorLabel() {
    myErrorLabel = new JTextArea();
    myErrorLabel.setForeground(Color.RED);
    myErrorLabel.setBackground(myPanel.getBackground());
    return myErrorLabel;
  }

  private void update() {
    if (isEmpty_x29nvn_a0a0d(myTextField.getText())) {
      myErrorLabel.setText("New name cannot be empty");
      getRefactorAction().setEnabled(false);
    } else {
      getRefactorAction().setEnabled(true);
      myErrorLabel.setText("");
    }
    repaint();
  }

  public static String getNewName(Project project, String oldName, String node) {
    RenameDialog dialog = new RenameDialog(project, oldName, node);
    dialog.show();
    return dialog.myResultString;
  }

  public static boolean isEmpty_x29nvn_a0a0d(String str) {
    return str == null || str.length() == 0;
  }
}
