package jetbrains.mps.ide.platform.refactoring;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.refactoring.framework.IRefactoring;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.refactoring.framework.ILoggableRefactoring;
import jetbrains.mps.refactoring.StructureModificationProcessor;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.ArrayList;
import jetbrains.mps.findUsages.UsagesList;
import java.util.Set;
import jetbrains.mps.smodel.SModelRepository;
import java.util.Map;
import jetbrains.mps.smodel.SModelReference;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.refactoring.framework.RefactoringNodeMembersAccessModifier;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.make.IMakeService;
import java.util.concurrent.Future;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.smodel.resources.ModelsToResources;
import java.util.concurrent.ExecutionException;

public abstract class RefactoringFacade {
  private static RefactoringFacade ourInstance;

  protected Logger myLog = Logger.getLogger(this.getClass());

  public RefactoringFacade() {
  }

  public abstract void execute(RefactoringContext context);

  public abstract void executeInThread(RefactoringContext context);

  public void executeSimple(final RefactoringContext context) {
    ThreadUtils.assertEDT();
    final IRefactoring refactoring = context.getRefactoring();
    List<SModel> modelsToGenerate = getModelsToGenerate(refactoring, context);
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        try {
          refactoring.refactor(context);
          if (refactoring instanceof ILoggableRefactoring) {
            if (!(context.isLocal())) {
              writeIntoLog(context);
            }
            updateModels(context);
          }
        } catch (Throwable t) {
          myLog.error("An exception occured while trying to execute refactoring " + refactoring.getUserFriendlyName() + ". Models could have been corrupted.", t);
        }
      }
    });
    if (context.getDoesGenerateModels()) {
      generateModels(modelsToGenerate, context);
    } else {
      //  mark "generation required" 
    }
    try {
      refactoring.doWhenDone(context);
    } catch (Throwable t) {
      myLog.error("An error occurred in doWhenDone(), refactoring: " + refactoring.getUserFriendlyName(), t);
    }
  }

  public void writeIntoLog(RefactoringContext context) {
    assert !(context.isLocal());
    assert context.getRefactoring() instanceof ILoggableRefactoring;
    StructureModificationProcessor.addToLog(context.getStructureModification());
  }

  public void updateLoadedModels(final RefactoringContext context) {
    SetSequence.fromSet(loadedModelsForUpdate(context)).visitAll(new IVisitor<SModelDescriptor>() {
      public void visit(SModelDescriptor it) {
        updateModel(it.getSModel(), context);
      }
    });
  }

  @NotNull
  protected List<SModel> getModelsToGenerate(final IRefactoring refactoring, final RefactoringContext context) {
    final Wrappers._T<List<SModel>> result = new Wrappers._T<List<SModel>>(new ArrayList<SModel>());
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        try {
          result.value = refactoring.getModelsToGenerate(context);
        } catch (Throwable t) {
          myLog.error("An error occured while trying to collect models to generate from refactoring " + refactoring.getUserFriendlyName() + ". No models will be generated", t);
        }
      }
    });
    return result.value;
  }

  protected void doExecute(@NotNull final RefactoringContext refactoringContext) {
    ThreadUtils.runInUIThreadNoWait(new Runnable() {
      public void run() {
        executeSimple(refactoringContext);
      }
    });
  }

  protected void updateModels(RefactoringContext context) {
    assert context.getRefactoring() instanceof ILoggableRefactoring;
    if (!(context.isLocal())) {
      updateLoadedModels(context);
    } else {
      UsagesList usages = context.getUsages();
      if (usages != null) {
        for (SModel anotherModel : usages.getAffectedModels()) {
          updateModel(anotherModel, context);
        }
      }
    }
  }

  private Set<SModelDescriptor> loadedModelsForUpdate(RefactoringContext context) {
    final SModelRepository modelRepository = SModelRepository.getInstance();
    Map<SModelReference, Integer> dependencies = context.getStructureModification().getDependencies();
    Set<SModelDescriptor> result = SetSequence.fromSet(new HashSet<SModelDescriptor>());
    //  the dependencies should be added manually: they should be loaded after refactoring but have no ImportElement for themselves 
    SetSequence.fromSet(result).addSequence(SetSequence.fromSet(MapSequence.fromMap(dependencies).keySet()).select(new ISelector<SModelReference, SModelDescriptor>() {
      public SModelDescriptor select(SModelReference it) {
        return modelRepository.getModelDescriptor(it);
      }
    }));

    for (SModelDescriptor descr : modelRepository.getModelDescriptors()) {
      if (!(SModelStereotype.isUserModel(descr)) || descr.getLoadingState() == ModelLoadingState.NOT_LOADED) {
        continue;
      }
      //  we suppose that all models were saved before refactoring started => ImportElements are up to date 
      for (SModel.ImportElement elem : ListSequence.fromList(SModelOperations.getAllImportElements(descr.getSModel()))) {
        if (MapSequence.fromMap(dependencies).containsKey(elem.getModelReference())) {
          SetSequence.fromSet(result).addElement(descr);
          break;
        }
      }
    }
    return result;
  }

  private void updateModel(SModel model, RefactoringContext context) {
    IRefactoring refactoring = context.getRefactoring();
    try {
      ((ILoggableRefactoring) refactoring).updateModel(model, context);
    } catch (Throwable t) {
      myLog.error("An exception was thrown by refactoring " + refactoring.getUserFriendlyName() + " while updating model " + model.getLongName() + ". Models could have been corrupted.", t);
    }
    if (!(context.isLocal())) {
      Map<SModelReference, Integer> dependencies = context.getStructureModification().getDependencies();
      for (SModelReference modelRef : dependencies.keySet()) {
        model.updateImportedModelUsedVersion(modelRef, dependencies.get(modelRef) + 1);
      }
    }
    SModelRepository.getInstance().markChanged(model);
  }

  private void generateModels(@NotNull final List<SModel> sourceModels, @NotNull final RefactoringContext context) {
    if (sourceModels.isEmpty()) {
      return;
    }
    final RefactoringNodeMembersAccessModifier modifier = new RefactoringNodeMembersAccessModifier();
    final List<SModelDescriptor> descriptors = new ArrayList<SModelDescriptor>();
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        SModelRepository.getInstance().saveAll();
        //  save all before launching make 
        context.setUpMembersAccessModifier(modifier);
        modifier.addModelsToModify(sourceModels);
        SNode.setNodeMemberAccessModifier(modifier);
        for (SModel model : sourceModels) {
          descriptors.add(model.getModelDescriptor());
        }
      }
    });
    final IOperationContext operationContext = new ProjectOperationContext(context.getSelectedProject());
    new Thread() {
      public void run() {
        try {
          MakeSession sess = new MakeSession(operationContext);
          if (IMakeService.INSTANCE.get().openNewSession(sess)) {
            Future<IResult> result = IMakeService.INSTANCE.get().make(sess, new ModelsToResources(operationContext, descriptors).resources(false));
            result.get();
            //  wait for end of make to remove member access modifier 
          }
        } catch (InterruptedException e) {
        } catch (ExecutionException e) {
          e.printStackTrace();
        } finally {
          onGenerationFinished();
        }
      }
    }.start();
    //     GeneratorUIFacade.getInstance().generateModels(operationContext, descriptors, GeneratorUIFacade.getInstance().getDefaultGenerationHandler(), true, false); 
  }

  private void onGenerationFinished() {
    SNode.setNodeMemberAccessModifier(null);
  }

  public static RefactoringFacade getInstance() {
    return ourInstance;
  }

  protected static void setInstance(RefactoringFacade facade) {
    ourInstance = facade;
  }
}
