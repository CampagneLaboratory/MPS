package jetbrains.mps.ide.platform.refactoring;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public interface NodeLocation {
  public boolean isValid(MPSProject project, List<SNode> nodesToMove);
  public void insertNodes(List<SNode> nodesToMove);
  public static class NodeLocationChild implements NodeLocation {
    private SNode parent;
    public NodeLocationChild(SNode parent) {
      this.parent = parent;
    }
    public SNode getNode() {
      return parent;
    }
    public boolean isValid(MPSProject project, List<SNode> nodesToMove) {
      return SNodeUtil.isAccessible(parent, project.getRepository()) && ListSequence.fromList(nodesToMove).all(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return parent.getConcept().getContainmentLinks().contains(it.getContainmentLink());
        }
      });
    }
    public void insertNodes(List<SNode> nodesToMove) {
      for (SNode node : ListSequence.fromList(nodesToMove)) {
        node.getParent().removeChild(node);
        parent.addChild(ListSequence.fromList(nodesToMove).first().getContainmentLink(), node);
      }

    }
  }
  public static class NodeLocationRoot implements NodeLocation {
    private SModel model;
    public NodeLocationRoot(SModel model) {
      this.model = model;
    }
    public boolean isValid(MPSProject project, List<SNode> nodesToMove) {
      return model.getReference().resolve(project.getRepository()) == model && ListSequence.fromList(nodesToMove).all(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getBoolean(SNodeOperations.as(SNodeOperations.asNode(SNodeOperations.getConcept(it)), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xff49c1d648L, "rootable"));
        }
      });
    }
    public void insertNodes(List<SNode> nodesToMove) {
      for (SNode node : ListSequence.fromList(nodesToMove)) {
        node.getModel().removeRootNode(node);
        model.addRootNode(node);
      }

    }
  }

}
