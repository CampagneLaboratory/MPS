package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTreeNode;
import java.awt.Color;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.project.IModule;
import jetbrains.mps.ide.projectPane.ProjectPane;
import com.intellij.openapi.project.Project;

public class DependencyTreeNode extends MPSTreeNode {
  private DependencyPathTree.Link myLink;
  private boolean myIsLeaf;
  private DependencyTreeNode myLinkedNode;
  private Color myColor;
  /**
   * Used during tree building.
   */
  private boolean myUsed;

  public DependencyTreeNode(DependencyPathTree.Link link, String role, IOperationContext operationContext) {
    super(link, operationContext);
    myLink = link;
    setIcon(IconManager.getIconFor(getModule()));
    String ss = (link.linktype == null ?
      "" :
      link.linktype.toString() + " "
    );
    setNodeIdentifier(ss + link.module.getModuleFqName());
    setText("<html>" + "<i>" + ss + "</i>" + link.module.getModuleFqName() + "</html>");
  }

  public DependencyPathTree.Link getLink() {
    return myLink;
  }

  public IModule getModule() {
    return check_akkfj9_a0a1(myLink);
  }

  public void setUsed() {
    myUsed = true;
  }

  public boolean isUsed() {
    return myUsed;
  }

  public void setLeaf() {
    myIsLeaf = true;
    String ss = (myLink.linktype == null ?
      "" :
      myLink.linktype.toString() + " "
    );
    setText("<html>" + "<i>" + ss + "</i><b>" + myLink.module.getModuleFqName() + "</b></html>");
  }

  public void setLinkLeaf(DependencyTreeNode linkedNode) {
    myIsLeaf = true;
    myLinkedNode = linkedNode;
    String ss = (myLink.linktype == null ?
      "" :
      myLink.linktype.toString() + " "
    );
    setText("<html>" + "<i>" + ss + "</i>" + myLink.module.getModuleFqName() + "... <b>--></b></html>");
  }

  public boolean isLeaf() {
    return myIsLeaf;
  }

  public void doubleClick() {
    if (myLinkedNode == null) {
      ProjectPane.getInstance(check_akkfj9_a0a0a0a7(((DependencyPathTree) getTree()), this)).selectModule(getModule(), false);
    } else {
      getTree().selectNode(myLinkedNode);
    }
  }

  public void doUpdatePresentation() {
    super.doUpdatePresentation();
    if (myColor != null) {
      setColor(myColor);
    }
  }

  private static IModule check_akkfj9_a0a1(DependencyPathTree.Link checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.module;
    }
    return null;
  }

  private static Project check_akkfj9_a0a0a0a7(DependencyPathTree checkedDotOperand, DependencyTreeNode checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getProject();
    }
    return null;
  }
}
