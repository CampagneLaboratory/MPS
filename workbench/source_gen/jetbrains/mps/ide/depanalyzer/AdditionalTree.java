package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTree;
import java.util.List;
import jetbrains.mps.project.IModule;
import java.util.Set;
import java.util.ArrayList;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.ide.ui.TextMPSTreeNode;
import java.util.Collections;
import java.util.Comparator;
import java.util.Enumeration;
import java.awt.Color;


/**
 * * Created by IntelliJ IDEA.
 * * User: Ilya.Lintsbakh
 * * Date: 10/19/11
 * * Time: 12:48 PM
 * * To change this template use File | Settings | File Templates.
 */
public class AdditionalTree extends MPSTree {
  private List<List<IModule>> myTraces;
  private IModule myTarget;
  private IModule myModule;

  public AdditionalTree() {
  }

  public void setTraces(Set<List<IModule>> traces, IModule target) {
    setVisible(traces != null);
    if (traces != null) {
      myTraces = new ArrayList<List<IModule>>(traces);
      myTarget = target;
    }
    rebuildNow();
    expandAll();
  }

  public void setModule(IModule module) {
    myModule = module;
  }

  @Override
  protected MPSTreeNode rebuild() {
    TextMPSTreeNode root = new TextMPSTreeNode("", null);
    setRootVisible(false);
    if (myTraces == null) {
      return root;
    }
    Collections.sort(myTraces, new Comparator<List<IModule>>() {
      @Override
      public int compare(List<IModule> o1, List<IModule> o2) {
        return o1.size() - o2.size();
      }
    });
    for (List<IModule> trace : myTraces) {
      MPSTreeNode prev = root;
      for (IModule m : trace) {
        Enumeration children = prev.children();
        DependencyTreeNode found = null;
        while (children.hasMoreElements()) {
          DependencyTreeNode treeChild = (DependencyTreeNode) children.nextElement();
          if (treeChild.getModule() == m) {
            found = treeChild;
          }
        }
        if (found == null) {
          Color color = new Color(0);
          if (myTarget == m) {
            color = new Color(0, 170, 0);
            if (myTarget == myModule) {
              color = new Color(180, 0, 0);
            }
          }
          DependencyTreeNode treeNode = new DependencyTreeNode(m, null, color);
          prev.add(treeNode);
          prev = treeNode;
        } else {
          prev = found;
        }
      }
    }
    return root;
  }
}
