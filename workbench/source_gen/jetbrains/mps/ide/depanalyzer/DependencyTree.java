package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTree;
import com.intellij.openapi.actionSystem.DataProvider;
import com.intellij.openapi.project.Project;
import jetbrains.mps.project.IModule;
import java.util.List;
import jetbrains.mps.project.dependency.DependenciesTracer;
import javax.swing.JComponent;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.ui.TextMPSTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.JPopupMenu;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.ide.actions.ModuleProperties_Action;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.workbench.MPSDataKeys;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import java.util.Set;

public class DependencyTree extends MPSTree implements DataProvider {
  private Project myProject;
  private IModule myModule = null;
  private List<IModule> myModules;
  private DependenciesTracer<IModule> myTracer;
  private DependencyViewer myViewer;

  public DependencyTree(Project project, DependencyViewer viewer) {
    myProject = project;
    myViewer = viewer;
    addTreeSelectionListener(new DependencyTree.MyTreeSelectionListener());
  }

  public DependencyTree(Project project, JComponent viewer) {
    myProject = project;
  }

  public void setModules(List<IModule> modules) {
    myModules = modules;
  }

  protected MPSTreeNode rebuild() {
    if (myModules == null || ListSequence.fromList(myModules).isEmpty()) {
      return new TextMPSTreeNode("No Content", null);
    }
    MPSTreeNode root = new ModuleDependencyNode(myModules, null);
    expandRoot();
    return root;
    /*
      if (myModule == null) {
        setRootVisible(false);
        return new TextMPSTreeNode("No Contents", null);
      }
      setRootVisible(true);
      myTracer = new DependenciesTracer<IModule>();
      ModuleTreeNode root = new ModuleTreeNode(myProject, myModule, myTracer);
      expandPath(new TreePath(root.getPath()));
      expandAll();
      return root;
    */
  }

  public void setModule(IModule module) {
    myModule = module;
    myViewer.setTraces(null, myModule);
  }

  @Override
  protected JPopupMenu createPopupMenu(MPSTreeNode treeNode) {
    DefaultActionGroup group = new DefaultActionGroup();
    String id = new ModuleProperties_Action().getActionId();
    if (id == null) {
      return null;
    }
    AnAction action = ActionManager.getInstance().getAction(id);
    if (action == null) {
      return null;
    }
    group.add(action);
    return ActionManager.getInstance().createActionPopupMenu(ActionPlaces.UNKNOWN, group).getComponent();
  }

  public Object getData(@NonNls String dataId) {
    if (dataId.equals(MPSDataKeys.MODULE.getName())) {
      MPSTreeNode treeNode = getCurrentNode();
      if (!((treeNode instanceof ModuleTreeNode))) {
        return null;
      }
      ModuleTreeNode node = (ModuleTreeNode) treeNode;
      return node.getModule();
    }
    return null;
  }

  private class MyTreeSelectionListener implements TreeSelectionListener {
    private MyTreeSelectionListener() {
    }

    @Override
    public void valueChanged(TreeSelectionEvent e) {
      TreePath path = e.getNewLeadSelectionPath();
      if (path == null) {
        return;
      }
      Object treeNode = path.getLastPathComponent();
      if (!((treeNode instanceof DependencyTreeNode))) {
        return;
      }
      IModule target = ((DependencyTreeNode) treeNode).getModule();
      Set<List<IModule>> traces = myTracer.getTraces(target);
      if (traces == null) {
        return;
      }
      myViewer.setTraces(traces, target);
    }
  }
}
