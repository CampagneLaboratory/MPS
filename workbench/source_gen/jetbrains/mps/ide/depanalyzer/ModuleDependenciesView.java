package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import javax.swing.JPanel;
import jetbrains.mps.workbench.tools.BaseTool;
import com.intellij.openapi.project.Project;
import java.awt.BorderLayout;
import com.intellij.openapi.actionSystem.ActionGroup;
import jetbrains.mps.workbench.action.ActionUtils;
import jetbrains.mps.workbench.tools.CloseAction;
import com.intellij.openapi.actionSystem.ToggleAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import javax.swing.JComponent;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import com.intellij.openapi.ui.Splitter;
import com.intellij.ui.components.JBScrollPane;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import java.util.List;
import jetbrains.mps.project.IModule;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import javax.swing.tree.TreePath;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IMapping;

public class ModuleDependenciesView extends JPanel {
  private DependencyTree myLeftTree;
  private DependencyPathTree myRightTree;
  private boolean isShowRTDep = true;
  private boolean isShowUsedLang = true;

  public ModuleDependenciesView(BaseTool tool, Project project) {
    super(new BorderLayout());
    myLeftTree = new DependencyTree(project, this);
    myRightTree = new DependencyPathTree();

    ActionGroup group = ActionUtils.groupFromActions(new CloseAction(tool), new ToggleAction("Show Runtime Dependencies") {
      public boolean isSelected(AnActionEvent e) {
        return isShowRTDep;
      }

      public void setSelected(AnActionEvent e, boolean b) {
        isShowRTDep = b;
      }
    });

    JComponent toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, true).getComponent();

    Splitter splitter = new Splitter();

    add(toolbar, BorderLayout.NORTH);
    add(splitter, BorderLayout.CENTER);
    splitter.setFirstComponent(new JBScrollPane(myLeftTree));
    splitter.setSecondComponent(new JBScrollPane(myRightTree));

    myLeftTree.addTreeSelectionListener(new TreeSelectionListener() {
      public void valueChanged(TreeSelectionEvent p0) {
        resetDependencies();
      }
    });
  }

  public void setModules(List<IModule> modules) {
    myLeftTree.setModules(modules);
    myLeftTree.rebuildLater();
    myRightTree.resetDependencies();
    myRightTree.rebuildLater();
  }

  public void resetDependencies() {
    myRightTree.resetDependencies();
    Map<List<IModule>, List<IModule>> dependencies = MapSequence.fromMap(new HashMap<List<IModule>, List<IModule>>());
    TreePath[] paths = myLeftTree.getSelectionPaths();
    if (paths != null) {
      for (TreePath path : paths) {
        MPSTreeNode node = (MPSTreeNode) path.getLastPathComponent();
        if (node instanceof ModuleDependencyNode) {
          ModuleDependencyNode n = (ModuleDependencyNode) node;
          List<IModule> from = check_jxc64t_a0b0b0a0d0b(n.getFromNode());
          if (from != null) {
            if (!(MapSequence.fromMap(dependencies).containsKey(from))) {
              MapSequence.fromMap(dependencies).put(from, ListSequence.fromList(new ArrayList<IModule>()));
            }
            ListSequence.fromList(MapSequence.fromMap(dependencies).get(from)).addSequence(ListSequence.fromList(n.getModules()));
          }
        }
      }
    }
    for (IMapping<List<IModule>, List<IModule>> dep : MapSequence.fromMap(dependencies)) {
      myRightTree.addDependency(dep.key(), dep.value(), null);
    }
    myRightTree.rebuildLater();
  }

  public void resetAll() {
    myLeftTree.rebuildLater();
    myRightTree.resetDependencies();
  }

  private static List<IModule> check_jxc64t_a0b0b0a0d0b(ModuleDependencyNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModules();
    }
    return null;
  }
}
