package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTree;
import com.intellij.openapi.actionSystem.DataProvider;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import java.util.Set;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.project.Project;
import javax.swing.tree.TreeSelectionModel;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.ide.ui.MPSTreeNode;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.HashMap;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.ui.TextMPSTreeNode;
import javax.swing.JPopupMenu;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.workbench.action.ActionUtils;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.workbench.MPSDataKeys;

public class DependencyPathTree extends MPSTree implements DataProvider {
  private List<Tuples._3<Set<IModule>, Set<IModule>, Set<IModule>>> myAllDependencies = ListSequence.fromList(new ArrayList<Tuples._3<Set<IModule>, Set<IModule>, Set<IModule>>>());
  private Project myProject;
  private boolean myShowAllPaths;
  private boolean myShowRuntime;
  private Set<Tuples._2<DependencyUtil.Role, IModule>> myCycles;

  public DependencyPathTree(Project project) {
    myProject = project;
    getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  }

  public Project getProject() {
    return myProject;
  }

  public void setShowRuntime(boolean value) {
    myShowRuntime = value;
  }

  public boolean isShowRuntime() {
    return myShowRuntime;
  }

  public void setShowAllPaths(boolean value) {
    myShowAllPaths = value;
  }

  public boolean isShowAll() {
    return myShowAllPaths;
  }

  public void resetDependencies() {
    ListSequence.fromList(myAllDependencies).clear();
  }

  public void addDependency(Iterable<IModule> from, Iterable<IModule> to, Iterable<IModule> usedLanguage) {
    ListSequence.fromList(myAllDependencies).addElement(MultiTuple.<Set<IModule>,Set<IModule>,Set<IModule>>from(SetSequence.fromSetWithValues(new HashSet<IModule>(), from), SetSequence.fromSetWithValues(new HashSet<IModule>(), to), SetSequence.fromSetWithValues(new HashSet<IModule>(), usedLanguage)));
  }

  public void setCycles(Iterable<Tuples._2<DependencyUtil.Role, IModule>> cycles) {
    myCycles = (cycles == null ?
      null :
      SetSequence.fromSetWithValues(new HashSet<Tuples._2<DependencyUtil.Role, IModule>>(), cycles)
    );
  }

  private void removeUnusedNodes(MPSTreeNode root) {
    List<MPSTreeNode> children = ListSequence.fromListWithValues(new ArrayList<MPSTreeNode>(), root);
    for (MPSTreeNode n : ListSequence.fromList(children)) {
      DependencyTreeNode node = as_9bg0dz_a0a0a1a8(n, DependencyTreeNode.class);
      if (node != null && !(node.isUsed())) {
        node.removeFromParent();
      } else {
        removeUnusedNodes(n);
      }
    }
  }

  public void setUsed(DependencyTreeNode node, final Map<DependencyTreeNode, List<DependencyTreeNode>> backDeps) {
    if (node != null && !(node.isUsed())) {
      node.setUsed();
      setUsed(as_9bg0dz_a0a1a0a9(node.getParent(), DependencyTreeNode.class), backDeps);
      ListSequence.fromList(MapSequence.fromMap(backDeps).get(node)).visitAll(new IVisitor<DependencyTreeNode>() {
        public void visit(DependencyTreeNode it) {
          setUsed(it, backDeps);
        }
      });
    }
  }

  private MPSTreeNode buildTree(IModule from, Set<IModule> dependency, Set<IModule> usedlanguage) {
    Map<Tuples._2<IModule, DependencyUtil.Role>, DependencyTreeNode> visited = MapSequence.fromMap(new HashMap<Tuples._2<IModule, DependencyUtil.Role>, DependencyTreeNode>());
    Queue<DependencyTreeNode> unprocessed = QueueSequence.fromQueue(new LinkedList<DependencyTreeNode>());

    Map<DependencyTreeNode, List<DependencyTreeNode>> backDeps = MapSequence.fromMap(new HashMap<DependencyTreeNode, List<DependencyTreeNode>>());

    DependencyTreeNode root = new DependencyTreeNode(new DependencyUtil.Link(from, DependencyUtil.Role.None, null), null);
    if (myCycles != null && SetSequence.fromSet(myCycles).select(new ISelector<Tuples._2<DependencyUtil.Role, IModule>, IModule>() {
      public IModule select(Tuples._2<DependencyUtil.Role, IModule> it) {
        return it._1();
      }
    }).contains(from)) {
      root.setCyclic();
    }
    QueueSequence.fromQueue(unprocessed).addLastElement(root);

    while (QueueSequence.fromQueue(unprocessed).isNotEmpty()) {
      DependencyTreeNode node = QueueSequence.fromQueue(unprocessed).removeFirstElement();
      if (node.getLink().role == DependencyUtil.Role.UsedLanguage && SetSequence.fromSet(usedlanguage).contains(node.getLink().module) || (node.getLink().role == DependencyUtil.Role.DTDependency_ || node.getLink().role == DependencyUtil.Role.RTDependency) && SetSequence.fromSet(dependency).contains(node.getLink().module)) {
        node.setDepLeaf();
        // mark as used 
        setUsed(node, backDeps);
        /*
          while (node != null && !(node.isUsed())) {
            // todo: move shortest branch up 
            node.setUsed();
          }
        */
      } else if (MapSequence.fromMap(visited).containsKey(MultiTuple.<IModule,DependencyUtil.Role>from(node.getLink().module, node.getLink().role))) {
        if (!(isShowAll())) {
          continue;
        }
        DependencyTreeNode n = MapSequence.fromMap(visited).get(MultiTuple.<IModule,DependencyUtil.Role>from(node.getLink().module, node.getLink().role));
        if (!(MapSequence.fromMap(backDeps).containsKey(n))) {
          MapSequence.fromMap(backDeps).put(n, ListSequence.fromList(new ArrayList<DependencyTreeNode>()));
        }
        node.setLinkLeaf(n);
        ListSequence.fromList(MapSequence.fromMap(backDeps).get(n)).addElement(node);
        if (n.isUsed()) {
          setUsed(node, backDeps);
        }
      } else {
        MapSequence.fromMap(visited).put(MultiTuple.<IModule,DependencyUtil.Role>from(node.getLink().module, node.getLink().role), node);
        DependencyUtil.dependencies(node.getLink().role, node.getLink().module, isShowRuntime());
        for (DependencyUtil.Link link : ListSequence.fromList(DependencyUtil.dependencies(node.getLink().role, node.getLink().module, isShowRuntime()))) {
          DependencyTreeNode n = new DependencyTreeNode(link, null);
          if (myCycles != null && SetSequence.fromSet(myCycles).contains(MultiTuple.<DependencyUtil.Role,IModule>from(link.role, link.module))) {
            n.setCyclic();
          }
          node.add(n);
          QueueSequence.fromQueue(unprocessed).addLastElement(n);
        }
      }
    }

    return root;
  }

  protected MPSTreeNode rebuild() {
    MPSTreeNode result = new TextMPSTreeNode((ListSequence.fromList(myAllDependencies).isEmpty() ?
      "No Dependencies Selected" :
      "Found Dependencies:"
    ), null);
    for (Tuples._3<Set<IModule>, Set<IModule>, Set<IModule>> dep : ListSequence.fromList(myAllDependencies)) {
      for (IModule m : SetSequence.fromSet(dep._0())) {
        result.add(buildTree(m, dep._1(), dep._2()));
      }
    }
    removeUnusedNodes(result);

    setRootVisible(ListSequence.fromList(myAllDependencies).isEmpty());
    setShowsRootHandles(ListSequence.fromList(myAllDependencies).isNotEmpty());
    expandAll();
    return result;
  }

  @Override
  protected JPopupMenu createPopupMenu(MPSTreeNode node) {
    DefaultActionGroup group = ActionUtils.groupFromActions(((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.SafeDeleteModuleDependency_Action")), ((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.ShowInDependenciesViewer_Action")), ((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.ModuleProperties_Action")));
    return ActionManager.getInstance().createActionPopupMenu(ActionPlaces.UNKNOWN, group).getComponent();
  }

  @Nullable
  public Object getData(@NonNls String id) {
    DependencyTreeNode current = as_9bg0dz_a0a0a31(getCurrentNode(), DependencyTreeNode.class);
    if (current == null) {
      return null;
    }
    if (id.equals(MPSDataKeys.OPERATION_CONTEXT.getName())) {
      return current.getOperationContext();
    }
    if (id.equals(MPSDataKeys.MODULE.getName())) {
      return current.getModule();
    }
    if (id.equals(MPSDataKeys.CONTEXT_MODULE.getName()) && current.getLink().linktype == DependencyUtil.LinkType.Depends) {
      DependencyTreeNode node = as_9bg0dz_a0a0a4a31(current.getParent(), DependencyTreeNode.class);
      return check_9bg0dz_a1a4a31(node);
    }
    return null;
  }

  private static IModule check_9bg0dz_a1a4a31(DependencyTreeNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }

  private static <T> T as_9bg0dz_a0a0a1a8(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }

  private static <T> T as_9bg0dz_a0a1a0a9(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }

  private static <T> T as_9bg0dz_a0a0a31(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }

  private static <T> T as_9bg0dz_a0a0a4a31(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }
}
