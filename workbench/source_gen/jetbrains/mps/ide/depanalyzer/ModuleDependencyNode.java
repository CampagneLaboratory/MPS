package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTreeNode;
import java.util.List;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.ide.moduleDependencies.icons.Icons;
import javax.swing.tree.TreeNode;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.dependency.DependenciesManager;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.ui.TextMPSTreeNode;
import jetbrains.mps.ide.projectPane.ProjectPane;
import java.awt.Color;
import com.intellij.openapi.project.Project;

public class ModuleDependencyNode extends MPSTreeNode {
  private List<IModule> myModules;
  private boolean myInitialized;
  private boolean myCyclic;

  public ModuleDependencyNode(IModule module, boolean isCyclic, IOperationContext context) {
    this(ListSequence.fromListAndArray(new ArrayList<IModule>(), module), context);
    myCyclic = isCyclic;
  }

  public ModuleDependencyNode(List<IModule> modules, IOperationContext context) {
    super(context);
    myModules = modules;
    if ((int) ListSequence.fromList(modules).count() == 1) {
      setIcon(IconManager.getIconFor(ListSequence.fromList(modules).first()));
    }
    String text = ListSequence.fromList(modules).first().getModuleFqName();
    if (ListSequence.fromList(modules).count() > 1) {
      text += ", " + ListSequence.fromList(modules).getElement(1).getModuleFqName();
      if (ListSequence.fromList(modules).count() > 2) {
        text += ", ... (" + ListSequence.fromList(modules).count() + " modules)";
      }
      setIcon(Icons.MODULES_GROUP_ICON);
    }
    setNodeIdentifier(text);
  }

  public List<IModule> getModules() {
    return myModules;
  }

  public boolean isUsedLanguage() {
    return false;
  }

  public void setCyclic() {
    myCyclic = true;
  }

  public ModuleDependencyNode getFromNode() {
    TreeNode node = getParent();
    if (node != null && isUsedLanguage()) {
      node = node.getParent();
    }
    if (node != null && node instanceof ModuleDependencyNode) {
      return (ModuleDependencyNode) node;
    }
    return null;
  }

  protected void doInit() {
    Set<IModule> reqModules = SetSequence.fromSet(new HashSet<IModule>());
    Set<IModule> rtModules = SetSequence.fromSet(new HashSet<IModule>());
    Set<Language> usedLanguages = SetSequence.fromSet(new HashSet<Language>());

    DependencyTree tree = (DependencyTree) getTree();

    for (IModule module : ListSequence.fromList(myModules)) {
      DependenciesManager depManager = module.getDependenciesManager();
      SetSequence.fromSet(reqModules).addSequence(SetSequence.fromSet(depManager.getAllVisibleModules()));
      SetSequence.fromSet(rtModules).addSequence(SetSequence.fromSet(depManager.getAllRequiredModules()));
      SetSequence.fromSet(usedLanguages).addSequence(SetSequence.fromSet(depManager.getAllUsedLanguages()));
    }

    Set<IModule> depLoops = SetSequence.fromSet(new HashSet<IModule>());
    Set<IModule> langLoops = SetSequence.fromSet(new HashSet<IModule>());
    if (tree.getCycles() != null) {
      SetSequence.fromSet(depLoops).addSequence(SetSequence.fromSet(tree.getCycles()).where(new IWhereFilter<Tuples._2<DependencyUtil.Role, IModule>>() {
        public boolean accept(Tuples._2<DependencyUtil.Role, IModule> it) {
          return it._0() == DependencyUtil.Role.DTDependency_ || it._0() == DependencyUtil.Role.RTDependency || it._0() == DependencyUtil.Role.None;
        }
      }).select(new ISelector<Tuples._2<DependencyUtil.Role, IModule>, IModule>() {
        public IModule select(Tuples._2<DependencyUtil.Role, IModule> it) {
          return it._1();
        }
      }));
      SetSequence.fromSet(langLoops).addSequence(SetSequence.fromSet(tree.getCycles()).where(new IWhereFilter<Tuples._2<DependencyUtil.Role, IModule>>() {
        public boolean accept(Tuples._2<DependencyUtil.Role, IModule> it) {
          return it._0() == DependencyUtil.Role.UsedLanguage || it._0() == DependencyUtil.Role.None;
        }
      }).select(new ISelector<Tuples._2<DependencyUtil.Role, IModule>, IModule>() {
        public IModule select(Tuples._2<DependencyUtil.Role, IModule> it) {
          return it._1();
        }
      }));
    }

    Set<IModule> allModules = (tree.isShowRuntime() ?
      rtModules :
      reqModules
    );
    for (IModule m : SetSequence.fromSet(allModules).sort(new ISelector<IModule, Comparable<?>>() {
      public Comparable<?> select(IModule it) {
        return it.getModuleFqName();
      }
    }, true)) {
      add(new ModuleDependencyNode.DepDependencyNode(m, !(SetSequence.fromSet(reqModules).contains(m)), SetSequence.fromSet(depLoops).contains(m), getOperationContext()));
    }

    if (tree.isShowUsedLanguage()) {
      MPSTreeNode usedlanguages = new TextMPSTreeNode("Used languages", getOperationContext());
      for (Language l : SetSequence.fromSet(usedLanguages).sort(new ISelector<Language, Comparable<?>>() {
        public Comparable<?> select(Language it) {
          return it.getModuleFqName();
        }
      }, true)) {
        usedlanguages.add(new ModuleDependencyNode.ULangDependencyNode(l, SetSequence.fromSet(langLoops).contains(l), getOperationContext()));
      }
      add(usedlanguages);
    }
    myInitialized = true;
  }

  public boolean isInitialized() {
    return myInitialized;
  }

  public void doubleClick() {
    if ((int) ListSequence.fromList(myModules).count() == 1) {
      ProjectPane.getInstance(check_lba8jw_a0a0a0a6(((DependencyTree) getTree()), this)).selectModule(ListSequence.fromList(myModules).first(), false);
    }
  }

  protected void doUpdatePresentation() {
    super.doUpdatePresentation();
    if (myCyclic) {
      setColor(Color.RED);
    }
  }

  private static Project check_lba8jw_a0a0a0a6(DependencyTree checkedDotOperand, ModuleDependencyNode checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getProject();
    }
    return null;
  }

  public static class DepDependencyNode extends ModuleDependencyNode {
    public DepDependencyNode(IModule module, boolean isRuntime, boolean isCyclic, IOperationContext context) {
      super(module, isCyclic, context);
      if (isRuntime) {
        setNodeIdentifier(getNodeIdentifier() + " (runtime)");
      }

    }

    public boolean isUsedLanguage() {
      return false;
    }
  }

  public static class ULangDependencyNode extends ModuleDependencyNode {
    public ULangDependencyNode(IModule module, boolean isCyclic, IOperationContext context) {
      super(module, isCyclic, context);
    }

    public boolean isUsedLanguage() {
      return true;
    }
  }
}
