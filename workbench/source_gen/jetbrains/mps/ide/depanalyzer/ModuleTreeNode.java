package jetbrains.mps.ide.depanalyzer;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTreeNode;
import com.intellij.openapi.project.Project;
import jetbrains.mps.project.IModule;
import jetbrains.mps.project.dependency.DependenciesTracer;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.ide.projectPane.ProjectPane;
import java.util.Set;
import jetbrains.mps.util.misc.hash.LinkedHashSet;
import jetbrains.mps.smodel.Language;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import com.intellij.ui.Colors;

public class ModuleTreeNode extends MPSTreeNode {
  private Project myProject;
  protected IModule myModule;
  protected boolean myInitialized;
  private DependenciesTracer<IModule> myTracer;

  public ModuleTreeNode(Project project, IModule module, DependenciesTracer<IModule> tracer) {
    super(module, null);
    myProject = project;
    myModule = module;
    String name = myModule.getModuleFqName();
    setNodeIdentifier(name);
    setText(name);
    setIcon(IconManager.getIconFor(myModule));
    myTracer = tracer;
  }

  public void doubleClick() {
    ProjectPane.getInstance(myProject).selectModule(myModule, false);
  }

  public int getToggleClickCount() {
    return -1;
  }

  public boolean isInitialized() {
    return myInitialized;
  }

  @Override
  public void init() {
    if (myInitialized) {
      return;
    }
    setIcon(IconManager.getIconFor(myModule));
    Set<IModule> dependencies = new LinkedHashSet<IModule>();
    Set<Language> lang = new LinkedHashSet<Language>();
    ModuleDependenciesUtil.collectAllCompileTimeDependencies(myModule, dependencies, lang, myTracer);
    List<IModule> dependenciesList = new ArrayList<IModule>(dependencies);
    Collections.sort(dependenciesList, new ModulesComparator());
    for (IModule depends : dependenciesList) {
      if (depends == myModule) {
        if (myTracer.getTraces(depends) != null) {
          add(new DependencyTreeLeafNode(depends, getOperationContext(), Colors.DARK_RED));
        }
      } else {
        add(new DependencyTreeLeafNode(depends, getOperationContext()));
      }
    }
    myInitialized = true;
  }

  public IModule getModule() {
    return myModule;
  }
}
