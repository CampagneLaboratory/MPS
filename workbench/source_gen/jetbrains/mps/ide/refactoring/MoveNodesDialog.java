package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import com.intellij.refactoring.RefactoringBundle;
import jetbrains.mps.smodel.SModelDescriptor;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNode;
import javax.swing.JOptionPane;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;

public class MoveNodesDialog extends RefactoringDialog {
  private static String REFACTORING_NAME = RefactoringBundle.message("move.title");

  private SModelDescriptor myModel;
  private Project myProject;
  private Object mySelectedObject;
  private ModelOrNodeChooser myPanel;

  public MoveNodesDialog(@NotNull Project project, SModelDescriptor model) {
    super(project, true);
    this.myModel = model;
    this.myProject = project;
    init();
    setTitle(REFACTORING_NAME + " " + "node");
  }

  protected void doRefactoringAction() {
    this.mySelectedObject = this.myPanel.getSelectedObject();
    if (!(this.mySelectedObject instanceof SNode) && !(this.mySelectedObject instanceof SModelDescriptor)) {
      JOptionPane.showMessageDialog(this.myPanel, "Choose Node or Model", "Node can't be moved", JOptionPane.INFORMATION_MESSAGE);
    } else {
      this.dispose();
    }

  }

  @Nullable
  protected JComponent createCenterPanel() {
    this.myPanel = new ModelOrNodeChooser(this.myProject, this.myModel);
    return this.myPanel;
  }

  public static Object getSelectedObject(@NotNull Project project, SModelDescriptor model) {
    MoveNodesDialog dialog = new MoveNodesDialog(project, model);
    dialog.show();
    return dialog.mySelectedObject;
  }
}
