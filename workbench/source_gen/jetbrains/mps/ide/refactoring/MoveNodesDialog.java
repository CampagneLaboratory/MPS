package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;

public class MoveNodesDialog extends ModelOrNodeChooserDialog {
  private SModelDescriptor myModel;
  private MoveNodesDialog.ModelFilter myFilter;
  protected Object mySelectedObject;

  public MoveNodesDialog(@NotNull Project project, SModelDescriptor model) {
    super(project);
    this.myModel = model;
    init();
    setTitle(REFACTORING_NAME + " " + "nodes");
    setHorizontalStretch(1.5f);
    setVerticalStretch(2.0f);

  }

  protected void doRefactoringAction() {
    Object selectedObject = this.myPanel.getSelectedObject();
    if (myFilter == null || myFilter.checkForObject(selectedObject, this.myModel, this.myPanel)) {
      this.mySelectedObject = selectedObject;
      this.dispose();
    }

  }

  @Nullable
  protected JComponent createCenterPanel() {
    this.myPanel = ModelOrNodeChooser.createChooser(myProject, myModel);
    return this.myPanel;
  }

  public void setFilter(MoveNodesDialog.ModelFilter filter) {
    this.myFilter = filter;
  }

  public static Object getSelectedObject(@NotNull Project project, SModelDescriptor model) {
    MoveNodesDialog dialog = new MoveNodesDialog(project, model);
    dialog.show();
    return dialog.mySelectedObject;
  }

  public static Object getSelectedObject(@NotNull Project project, SModelDescriptor model, MoveNodesDialog.ModelFilter filter) {
    MoveNodesDialog dialog = new MoveNodesDialog(project, model);
    dialog.setFilter(filter);
    dialog.show();
    return dialog.mySelectedObject;
  }

  public static abstract class ModelFilter extends ModelOrNodeChooserDialog.Filter {
    public ModelFilter() {
    }

    public ModelFilter(String errorMessage) {
      super(errorMessage);
    }

    public abstract boolean check(Object selectedObject, SModelDescriptor model);

    private boolean checkForObject(Object selectedObject, SModelDescriptor model, JComponent component) {
      if (!(check(selectedObject, model))) {
        showError("Nodes can't be moved", component);
        return false;
      }
      return true;
    }
  }
}
