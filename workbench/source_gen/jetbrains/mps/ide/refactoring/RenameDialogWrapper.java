package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.refactoring.RefactoringBundle;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.Action;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import java.awt.GridBagLayout;
import javax.swing.BorderFactory;
import com.intellij.util.ui.UIUtil;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import javax.swing.JLabel;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;

public class RenameDialogWrapper extends DialogWrapper {
  private static String REFACTORING_NAME = RefactoringBundle.message("rename.title");

  private String myName;
  private String oldName;
  private JPanel myPanel;
  private JTextField myNameField = new JTextField();
  private Action myRefactorAction;

  public RenameDialogWrapper(@NotNull Project project, String oldName) {
    super(project, true);
    this.oldName = oldName;
    init();
    setTitle(REFACTORING_NAME);
    myNameField.setText(oldName);
  }

  private String getNewName() {
    return myName;
  }

  @Nullable
  protected JComponent createCenterPanel() {
    return null;
  }

  @Override
  protected void createDefaultActions() {
    super.createDefaultActions();
    myRefactorAction = new RenameDialogWrapper.RefactorAction();
  }

  @Override
  protected JComponent createNorthPanel() {
    this.myPanel = new JPanel(new GridBagLayout());
    myPanel.setBorder(BorderFactory.createLineBorder(UIUtil.getBorderColor()));

    GridBagConstraints c = new GridBagConstraints();
    c.gridx = 0;
    c.gridy = 0;
    c.weightx = 0;
    c.anchor = GridBagConstraints.FIRST_LINE_START;
    c.insets = new Insets(4, 8, 4, 8);
    myPanel.add(new JLabel("Rename node " + oldName + ":"), c);

    c = new GridBagConstraints();

    c.fill = GridBagConstraints.HORIZONTAL;
    c.gridx = 0;
    c.gridy = 1;
    c.weightx = 1;
    c.weighty = 1;
    c.insets = new Insets(4, 8, 4, 8);

    c.anchor = GridBagConstraints.FIRST_LINE_START;
    myPanel.add(myNameField, c);

    return myPanel;

  }

  private void doAction() {
    this.myName = this.myNameField.getText();
    this.dispose();
  }

  private final Action getRefactorAction() {
    return myRefactorAction;
  }

  protected Action[] createActions() {
    List<Action> actions = ListSequence.fromList(new ArrayList<Action>());
    ListSequence.fromList(actions).addElement(getRefactorAction());
    ListSequence.fromList(actions).addElement(getCancelAction());
    return ListSequence.fromList(actions).toGenericArray(Action.class);
  }

  public static String getNewName(Project project, String oldName) {
    RenameDialogWrapper dialog = new RenameDialogWrapper(project, oldName);
    dialog.show();
    return dialog.getNewName();
  }

  private class RefactorAction extends AbstractAction {
    public RefactorAction() {
      putValue(Action.NAME, RefactoringBundle.message("refactor.button"));
      putValue(RenameDialogWrapper.DEFAULT_ACTION, Boolean.TRUE);
    }

    public void actionPerformed(ActionEvent event) {
      doAction();
    }
  }
}
