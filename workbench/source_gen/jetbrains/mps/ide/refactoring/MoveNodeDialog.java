package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import jetbrains.mps.smodel.SModelDescriptor;

public class MoveNodeDialog extends NodeChooserDialog {
  private SNode myNode;
  private MoveNodeDialog.NodeFilter myNodeFilter;

  public MoveNodeDialog(@NotNull Project project, SNode node) {
    super(project);
    this.myNode = node;
    init();
    setTitle(MoveNodesDialog.REFACTORING_NAME + " " + "node");
  }

  protected void doRefactoringAction() {
    Object selectedObject = this.myPanel.getSelectedObject();
    if (myNodeFilter == null || myNodeFilter.checkForObject(selectedObject, this.myNode, this.myNode.getModel().getModelDescriptor(), this.myPanel)) {
      this.mySelectedObject = selectedObject;
      this.dispose();
    }
  }

  public void setFilter(MoveNodeDialog.NodeFilter filter) {
    this.myNodeFilter = filter;
  }

  @Nullable
  protected JComponent createCenterPanel() {
    this.myPanel = ModelOrNodeChooser.createChooser(myProject, myNode);

    return this.myPanel;
  }

  public static Object getSelectedObject(@NotNull Project project, SNode node) {
    MoveNodeDialog dialog = new MoveNodeDialog(project, node);
    dialog.show();
    return dialog.mySelectedObject;
  }

  public static Object getSelectedObject(@NotNull Project project, SNode node, MoveNodeDialog.NodeFilter filter) {
    MoveNodeDialog dialog = new MoveNodeDialog(project, node);
    dialog.setFilter(filter);
    dialog.show();
    return dialog.mySelectedObject;
  }

  public static abstract class NodeFilter extends NodeChooserDialog.Filter {
    public NodeFilter() {
    }

    public NodeFilter(String errorMessage) {
      super(errorMessage);
    }

    public boolean checkForObject(Object selectedObject, SNode node, SModelDescriptor model, JComponent component) {
      if (!(check(selectedObject, node, model))) {
        showError("Node can't be moved", component);
        return false;
      }
      return true;
    }

    public abstract boolean check(Object selectedObject, SNode node, SModelDescriptor model);
  }
}
