package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JCheckBox;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.project.SModelRoot;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import javax.swing.JLabel;
import javax.swing.JComponent;
import jetbrains.mps.ide.dialogs.DialogDimensionsSettings;
import jetbrains.mps.smodel.SModelFqName;
import javax.lang.model.SourceVersion;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.workbench.actions.model.DeleteModelHelper;
import jetbrains.mps.refactoring.renameModel.ModelRenamer;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;

public class RenameModelDialog extends BaseDialog {
  private JPanel myMainPanel;
  private JTextField myModelNameField;
  private JCheckBox myUpdateAllReferences;
  private Project myProject;
  private EditableSModelDescriptor myModelDescriptor;
  private SModelRoot myModelRoot;

  public RenameModelDialog(Project project, Frame frame, SModelRoot root, EditableSModelDescriptor sm) throws HeadlessException {
    super(frame);
    myProject = project;
    myModelDescriptor = sm;
    myModelRoot = root;
    setTitle("Rename Model");
    myMainPanel = new JPanel(new GridBagLayout());
    GridBagConstraints cLabel = new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0);
    myMainPanel.add(new JLabel("Model Name"), cLabel);
    GridBagConstraints cNameField = new GridBagConstraints(1, 0, 1, 1, 1, 0, GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0);
    myModelNameField = new JTextField(myModelDescriptor.getSModelReference().getSModelFqName().toString(), 30);
    myMainPanel.add(myModelNameField, cNameField);
    GridBagConstraints cUpdateCheckbox = new GridBagConstraints(0, 2, 2, 1, 1, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0);
    myUpdateAllReferences = new JCheckBox("Update All References");
    myUpdateAllReferences.getModel().setSelected(true);
    myMainPanel.add(myUpdateAllReferences, cUpdateCheckbox);
  }

  protected JComponent getMainComponent() {
    return myMainPanel;
  }

  public DialogDimensionsSettings.DialogDimensions getDefaultDimensionSettings() {
    return new DialogDimensionsSettings.DialogDimensions(300, 300, 400, 150);
  }

  @BaseDialog.Button(position = 0, name = "OK", mnemonic = 'O', defaultButton = true)
  public void buttonOk() {
    final SModelFqName fqName = SModelFqName.fromString(myModelNameField.getText());
    if (!((SourceVersion.isName(fqName.getLongName())))) {
      setErrorText("Model name should be valid Java package");
      return;
    }
    if (!(myModelRoot.isCorrectModelFqName(fqName))) {
      setErrorText("Incorrect model name for the model root (should start with prefix " + myModelRoot.getPrefix() + ")");
      return;
    }
    if (!((fqName.equals(myModelDescriptor.getSModelReference().getSModelFqName())))) {
      ApplicationManager.getApplication().runWriteAction(new Runnable() {
        @Override
        public void run() {
          DeleteModelHelper.deleteGeneratedFiles(myModelDescriptor);
        }
      });
      final ModelRenamer renamer = new ModelRenamer(myModelDescriptor, fqName, !(myUpdateAllReferences.getModel().isSelected()));
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          renamer.rename();
        }
      });
      ProgressManager.getInstance().run(new Task.Modal(myProject, "Updating model usages...", false) {
        @Override
        public void run(@NotNull ProgressIndicator indicator) {
          indicator.pushState();
          indicator.setIndeterminate(true);
          try {
            ModelAccess.instance().runWriteAction(new Runnable() {
              public void run() {
                renamer.updateReferencesIfNeeded();
              }
            });
          } finally {
            indicator.popState();
          }
        }
      });
    }
    dispose();
  }

  @BaseDialog.Button(position = 1, name = "Cancel", mnemonic = 'C')
  public void buttonCancel() {
    dispose();
  }
}
