package jetbrains.mps.ide.newLanguageDialog;

/*Generated by MPS */

import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import com.intellij.openapi.progress.ProgressIndicator;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.project.Project;
import jetbrains.mps.baseLanguage.collections.internal.query.ListOperations;
import jetbrains.mps.ide.common.PathField;
import jetbrains.mps.library.LanguageDesign_DevKit;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.uiLanguage.runtime.events.Events;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.vcs.ApplicationLevelVcsManager;
import jetbrains.mps.vfs.FileSystemFile;
import jetbrains.mps.vfs.MPSExtentions;
import jetbrains.mps.vfs.VFileSystem;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.Property;
import org.jetbrains.annotations.NotNull;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.awt.GridLayout;
import java.io.File;
import java.util.List;

public class NewLanguageDialogContentPane extends JPanel {

  public NewLanguageDialogContentPane myThis;
  private JLabel myComponent0;
  private JTextField myName0;
  private JLabel myComponent1;
  private PathField myPath0;
  private String myLanguageNamespace;
  private String myLanguagePath;
  private MPSProject myProject;
  private boolean myCompileInMPS = true;
  private Language myResult;
  private NewLanguageDialog myDialog;
  public List<AutoBinding> myBindings = ListOperations.<AutoBinding>createList();
  private Events myEvents = new Events(null) {
    {
    }


    public void initialize() {
    }
  };

  public NewLanguageDialogContentPane() {
    this.myThis = this;
    NewLanguageDialogContentPane component = this;
    component.setLayout(new GridLayout(4, 1));
    component.add(this.createComponent0());
    component.add(this.createComponent1());
    component.add(this.createComponent2());
    component.add(this.createComponent3());
    this.myEvents.initialize();
    myThis.setLanguageNamespace("");
    myThis.setLanguagePath("");
    myThis.myName0.setName("Name");
    myThis.myPath0.setName("Path");
  }

  public Events getEvents() {
    return this.myEvents;
  }

  public void addNotify() {
    super.addNotify();
    this.bind();
  }

  public void removeNotify() {
    this.unbind();
    super.removeNotify();
  }

  private void bind() {
    {
      Object sourceObject = myThis;
      Property sourceProperty = BeanProperty.create("languageNamespace");
      Object targetObject = this.myName0;
      Property targetProperty = BeanProperty.create("text");
      AutoBinding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, sourceObject, sourceProperty, targetObject, targetProperty);
      binding.bind();
      ListOperations.addElement(this.myBindings, binding);
    }
    {
      Object sourceObject = myThis;
      Property sourceProperty = BeanProperty.create("languagePath");
      Object targetObject = this.myPath0;
      Property targetProperty = BeanProperty.create("path");
      AutoBinding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, sourceObject, sourceProperty, targetObject, targetProperty);
      binding.bind();
      ListOperations.addElement(this.myBindings, binding);
    }
  }

  private void unbind() {
    for(AutoBinding binding : this.myBindings) {
      if (binding.isBound()) {
        binding.unbind();
      }
    }
  }

  private JLabel createComponent0() {
    JLabel component = new JLabel();
    this.myComponent0 = component;
    component.setText("Language Namespace:");
    return component;
  }

  private JTextField createComponent1() {
    JTextField component = new JTextField();
    this.myName0 = component;
    return component;
  }

  private JLabel createComponent2() {
    JLabel component = new JLabel();
    this.myComponent1 = component;
    component.setText("Language Path:");
    return component;
  }

  private PathField createComponent3() {
    PathField component = new PathField();
    this.myPath0 = component;
    return component;
  }

  public String getLanguageNamespace() {
    return this.myLanguageNamespace;
  }

  public String getLanguagePath() {
    return this.myLanguagePath;
  }

  public MPSProject getProject() {
    return this.myProject;
  }

  public boolean getCompileInMPS() {
    return this.myCompileInMPS;
  }

  public Language getResult() {
    return this.myResult;
  }

  public NewLanguageDialog getDialog() {
    return this.myDialog;
  }

  public void setLanguageNamespace(String newValue) {
    String oldValue = this.myLanguageNamespace;
    this.myLanguageNamespace = newValue;
    this.firePropertyChange("languageNamespace", oldValue, newValue);
    myThis.updateLanguagePath();
  }

  public void setLanguagePath(String newValue) {
    String oldValue = this.myLanguagePath;
    this.myLanguagePath = newValue;
    this.firePropertyChange("languagePath", oldValue, newValue);
  }

  public void setProject(MPSProject newValue) {
    MPSProject oldValue = this.myProject;
    this.myProject = newValue;
    this.firePropertyChange("project", oldValue, newValue);
    myThis.updateLanguagePath();
  }

  public void setCompileInMPS(boolean newValue) {
    boolean oldValue = this.myCompileInMPS;
    this.myCompileInMPS = newValue;
    this.firePropertyChange("compileInMPS", oldValue, newValue);
  }

  public void setResult(Language newValue) {
    Language oldValue = this.myResult;
    this.myResult = newValue;
    this.firePropertyChange("result", oldValue, newValue);
  }

  public void setDialog(NewLanguageDialog newValue) {
    NewLanguageDialog oldValue = this.myDialog;
    this.myDialog = newValue;
    this.firePropertyChange("dialog", oldValue, newValue);
  }

  /* package */void onOk() {
    File dir = new File(myThis.getLanguagePath());
    if (!(dir.isAbsolute())) {
      myThis.getDialog().setErrorText("Path should be absolute");
      return;
    }
    if (dir.exists()) {
      myThis.getDialog().setErrorText("Language directory already exists");
      return;
    }
    if (myThis.getLanguageNamespace().length() == 0) {
      myThis.getDialog().setErrorText("Enter namespace");
      return;
    }
    if (MPSModuleRepository.getInstance().getModuleByUID(myThis.getLanguageNamespace()) != null) {
      myThis.getDialog().setErrorText("Language namespace already exists");
      return;
    }
    if (NameUtil.shortNameFromLongName(myThis.getLanguageNamespace()).length() == 0) {
      myThis.getDialog().setErrorText("Enter valid namespace");
      return;
    }
    if (dir.exists() && dir.list().length != 0) {
      myThis.getDialog().setErrorText("The selected folder is not empty. Please select an empty folder to create language");
      return;
    }
    myThis.getDialog().dispose();
    ProgressManager.getInstance().run(new Task.Modal(myThis.getProject().getComponent(Project.class), "Creating", false) {

      public void run(@NotNull() ProgressIndicator indicator) {
        indicator.setIndeterminate(true);
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {

          public void run() {
            myThis.createNewLanguage();
          }
        });
      }
    });
  }

  /* package */void onCancel() {
    myThis.getDialog().dispose();
  }

  /* package */void updateLanguagePath() {
    if (myThis.getProject() == null) {
      return;
    }
    String path = FileUtil.getCanonicalPath(myThis.getProject().getProjectFile().getParentFile());
    String prefix = path + File.separator + "languages" + File.separator;
    if (myThis.getLanguagePath().length() == 0 || myThis.getLanguagePath().startsWith(prefix)) {
      myThis.setLanguagePath(prefix + NameUtil.shortNameFromLongName(myThis.getLanguageNamespace()));
    }
  }

  /* package */void createNewLanguage() {
    String descriptorFileName = NameUtil.shortNameFromLongName(myThis.getLanguageNamespace());
    final File descriptorFile = new File(myThis.getLanguagePath(), descriptorFileName + MPSExtentions.DOT_LANGUAGE);
    File dir = descriptorFile.getParentFile();
    if (!(dir.exists())) {
      dir.mkdirs();
    }
    Language language = Language.createLanguage(myThis.getLanguageNamespace(), new FileSystemFile(descriptorFile), myThis.getProject());
    LanguageDescriptor languageDescriptor = (LanguageDescriptor)language.getLanguageDescriptor();
    ModuleReference devkitRef = LanguageDesign_DevKit.MODULE_REFERENCE;
    languageDescriptor.getUsedDevkits().add(devkitRef);
    languageDescriptor.setCompileInMPS(myThis.getCompileInMPS());
    LanguageAspect.STRUCTURE.createNew(language, false);
    LanguageAspect.EDITOR.createNew(language, false);
    LanguageAspect.CONSTRAINTS.createNew(language, false);
    LanguageAspect.TYPESYSTEM.createNew(language, false);
    language.setLanguageDescriptor(languageDescriptor);
    language.save();
    myThis.getProject().addProjectLanguage(language);
    myThis.setResult(language);
    // add to vcs
    ApplicationManager.getApplication().invokeLater(new Runnable() {

      public void run() {
        ApplicationLevelVcsManager.instance().addFileToVcs(VFileSystem.refreshAndGetFile(descriptorFile.getParentFile()), true);
      }
    }, ModalityState.NON_MODAL);
  }

}
