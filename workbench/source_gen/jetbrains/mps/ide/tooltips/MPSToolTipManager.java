package jetbrains.mps.ide.tooltips;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import java.util.Set;
import java.awt.Component;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseEvent;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import javax.swing.JComponent;
import java.awt.Frame;
import java.awt.Point;
import javax.swing.SwingUtilities;
import com.intellij.openapi.application.ApplicationManager;

public class MPSToolTipManager implements ApplicationComponent {
  private Set<Component> myComponents = SetSequence.fromSet(new HashSet<Component>());
  private MouseMotionListener myListener = new MouseMotionAdapter() {
    @Override
    public void mouseMoved(MouseEvent p0) {
      MPSToolTipManager.this.mouseMoved(p0);
    }
  };
  private ToolTip myToolTip;

  public MPSToolTipManager() {
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return "MPSTooltipManager";
  }

  public void disposeComponent() {
  }

  public void initComponent() {
  }

  public void registerComponent(Component component) {
    SetSequence.fromSet(this.myComponents).addElement(component);
    component.addMouseMotionListener(this.myListener);
  }

  private void mouseMoved(MouseEvent event) {
    JComponent component = (JComponent)event.getComponent();
    String text = (component).getToolTipText(event);
    if (text != null) {
      if (this.myToolTip == null) {
        this.myToolTip = new ToolTip();
        Frame frame = this.getContainingFrame(component);
        Point point = SwingUtilities.convertPoint(component, event.getPoint(), frame);
        this.myToolTip.show(frame, point, new ToolTipData(text));
      }
    } else {
      if (this.myToolTip != null) {
        this.myToolTip.hide();
        this.myToolTip = null;
      }
    }
  }

  public Frame getContainingFrame(Component component) {
    while (component.getParent() != null) {
      component = component.getParent();
    }
    return (Frame)component;
  }

  public static MPSToolTipManager getInstance() {
    return ApplicationManager.getApplication().getComponent(MPSToolTipManager.class);
  }
}
