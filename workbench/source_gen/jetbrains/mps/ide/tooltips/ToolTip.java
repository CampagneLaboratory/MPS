package jetbrains.mps.ide.tooltips;

/*Generated by MPS */

import java.awt.Color;
import java.awt.Frame;
import java.awt.Point;
import java.awt.Window;
import javax.swing.JTextArea;
import java.awt.Component;
import java.awt.event.FocusListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.KeyListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import jetbrains.mps.nodeEditor.EditorSettings;
import javax.swing.JScrollPane;
import javax.swing.border.LineBorder;
import java.awt.Rectangle;
import jetbrains.mps.util.WindowsUtil;

public class ToolTip {
  private static final Color BACKGROUND_COLOR = new Color(253, 254, 226);

  private ToolTip.MyDialog myDialog;
  private ToolTipData myHintInformation;

  public ToolTip() {
  }

  public void show(Frame owner, Point location, ToolTipData hintInformation) {
    this.myHintInformation = hintInformation;
    this.myDialog = new ToolTip.MyDialog(owner, location, hintInformation);
    this.myDialog.setVisible(true);
  }

  public void hide() {
    if (this.myDialog != null) {
      this.myDialog.dispose();
      this.myDialog = null;
    }
  }

  public String getText() {
    return this.myHintInformation.getText();
  }

  public static class MyDialog extends Window {
    private JTextArea myTextArea;
    private Component myPrevFocusOwner;
    private FocusListener myOwnerFocusListener = new FocusAdapter() {
      @Override
      public void focusLost(FocusEvent p0) {
        MyDialog.this.dispose();

      }
    };
    private MouseListener myOwnerMouseListener = new MouseAdapter() {
      @Override
      public void mousePressed(MouseEvent p0) {
        MyDialog.this.dispose();
      }
    };
    private KeyListener myOwnerKeyListener = new KeyAdapter() {
      @Override
      public void keyPressed(KeyEvent p0) {
        MyDialog.this.dispose();
      }
    };

    public MyDialog(Frame owner, Point location, ToolTipData nodeInformation) {
      super(owner);
      this.myPrevFocusOwner = owner.getFocusOwner();

      /*
        this.setUndecorated(true);
      */
      /*
        this.setModal(false);
      */
      this.setFocusableWindowState(false);

      this.myTextArea = new JTextArea();
      this.myTextArea.setEditable(false);
      this.myTextArea.setText(nodeInformation.getText());
      this.myTextArea.setFont(EditorSettings.getInstance().getDefaultEditorFont());

      this.myTextArea.setBackground(ToolTip.BACKGROUND_COLOR);
      JScrollPane scrollPane = new JScrollPane(this.myTextArea);
      scrollPane.setBorder(new LineBorder(Color.BLACK));
      this.add(scrollPane);

      this.pack();
      this.setLocation(location);

      Rectangle rect = WindowsUtil.findDeviceBoundsAt(location);
      if (rect.x + rect.width < this.getX() + this.getWidth()) {
        this.setLocation(rect.x + rect.width - this.getWidth(), this.getY());
      }
      if (rect.y + rect.height < this.getY() + this.getHeight()) {
        this.setLocation(this.getX(), rect.y + rect.height - this.getHeight());
      }

      this.addListeners();
    }

    public void addListeners() {
      if (this.myPrevFocusOwner != null) {
        this.myPrevFocusOwner.addFocusListener(this.myOwnerFocusListener);
        this.myPrevFocusOwner.addMouseListener(this.myOwnerMouseListener);
        this.myPrevFocusOwner.addKeyListener(this.myOwnerKeyListener);
      }
      super.dispose();
    }

    @Override
    public void dispose() {
      if (this.myPrevFocusOwner != null) {
        this.myPrevFocusOwner.removeFocusListener(this.myOwnerFocusListener);
        this.myPrevFocusOwner.removeMouseListener(this.myOwnerMouseListener);
        this.myPrevFocusOwner.removeKeyListener(this.myOwnerKeyListener);
      }
      super.dispose();
    }
  }
}
