package jetbrains.mps.ide.newSolutionDialog;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JTextField;
import jetbrains.mps.ide.common.PathField;
import java.util.List;
import org.jdesktop.beansbinding.AutoBinding;
import java.util.ArrayList;
import java.awt.GridBagLayout;
import jetbrains.mps.uiLanguage.runtime.ValueWrapper;
import java.awt.GridBagConstraints;

public class NewSolutionDialogContentPane extends JPanel {

  public NewSolutionDialogContentPane myThis;
  private JLabel myComponent;
  private JLabel myComponent1;
  private JTextField myComponent2;
  private PathField myComponent3;
  private JPanel myComponent4;
  private String myTestAttribute1;
  private Boolean myTestAttribute2;
  public List<AutoBinding> myBindings = new ArrayList<AutoBinding>();

  public  NewSolutionDialogContentPane() {
    this.myThis = this;
    System.out.println("Hello");
    NewSolutionDialogContentPane component = this;
    component.setLayout(new GridBagLayout());
    component.add(this.createComponent(), new ValueWrapper <GridBagConstraints>() {

      public GridBagConstraints value() {
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 0;
        c.gridy = 0;
        c.anchor = GridBagConstraints.FIRST_LINE_START;
        return c;
      }

    }.value());
    component.add(this.createComponent1(), new ValueWrapper <GridBagConstraints>() {

      public GridBagConstraints value() {
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 0;
        c.gridy = 1;
        c.anchor = GridBagConstraints.FIRST_LINE_START;
        return c;
      }

    }.value());
    component.add(this.createComponent2(), new ValueWrapper <GridBagConstraints>() {

      public GridBagConstraints value() {
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 1;
        c.gridy = 0;
        c.anchor = GridBagConstraints.FIRST_LINE_START;
        c.weightx = 1;
        return c;
      }

    }.value());
    component.add(this.createComponent3(), new ValueWrapper <GridBagConstraints>() {

      public GridBagConstraints value() {
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 1;
        c.gridy = 1;
        c.anchor = GridBagConstraints.FIRST_LINE_START;
        c.weightx = 1;
        return c;
      }

    }.value());
    component.add(this.createComponent4(), new ValueWrapper <GridBagConstraints>() {

      public GridBagConstraints value() {
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 0;
        c.gridy = 2;
        c.gridwidth = 2;
        c.weighty = 1;
        return c;
      }

    }.value());
  }

  public void addNotify() {
    super.addNotify();
    this.bind();
  }

  public void removeNotify() {
    this.unbind();
    super.removeNotify();
  }

  private void bind() {
  }

  private void unbind() {
    for(AutoBinding binding : this.myBindings) {
      binding.unbind();
    }
  }

  private JLabel createComponent() {
    JLabel component = new JLabel();
    this.myComponent = component;
    component.setText("Solution Name:");
    return component;
  }

  private JLabel createComponent1() {
    JLabel component = new JLabel();
    this.myComponent1 = component;
    component.setText("Solution Path:");
    return component;
  }

  private JTextField createComponent2() {
    JTextField component = new JTextField();
    this.myComponent2 = component;
    component.setColumns(40);
    return component;
  }

  private PathField createComponent3() {
    PathField component = new PathField();
    this.myComponent3 = component;
    return component;
  }

  private JPanel createComponent4() {
    JPanel component = new JPanel();
    this.myComponent4 = component;
    return component;
  }

  public String getTestAttribute1() {
    return this.myTestAttribute1;
  }

  public Boolean getTestAttribute2() {
    return this.myTestAttribute2;
  }

  public void setTestAttribute1(String newValue) {
    String oldValue = this.myTestAttribute1;
    this.myTestAttribute1 = newValue;
    this.firePropertyChange("testAttribute1", oldValue, newValue);
  }

  public void setTestAttribute2(Boolean newValue) {
    Boolean oldValue = this.myTestAttribute2;
    this.myTestAttribute2 = newValue;
    this.firePropertyChange("testAttribute2", oldValue, newValue);
  }

  public void testMethod() {
  }

  public void onOk() {
    System.out.println("OnOkay");
  }

  public void onCancel() {
    System.out.println("OnCancel");
  }

}
