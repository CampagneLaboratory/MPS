package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.tool.GeneratedTool;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.ide.depanalyzer.ModuleDependenciesView;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindowAnchor;
import java.util.List;
import jetbrains.mps.project.IModule;
import jetbrains.mps.ide.depanalyzer.ModuleDependencyNode;
import javax.swing.JComponent;
import javax.swing.ImageIcon;
import com.intellij.openapi.util.io.StreamUtil;
import com.intellij.util.io.URLUtil;
import java.io.IOException;

public class ModuleDependenies_Tool extends GeneratedTool {
  private static final Icon ICON = loadIcon();
  protected static Log log = LogFactory.getLog(ModuleDependenies_Tool.class);

  private ModuleDependenciesView myComponent;

  public ModuleDependenies_Tool(Project project) {
    super(project, "Module Dependencies", -1, ICON, ToolWindowAnchor.BOTTOM, false);
  }

  public void init(Project project) {
    super.init(project);
    ModuleDependenies_Tool.this.myComponent = new ModuleDependenciesView(ModuleDependenies_Tool.this, project);
  }

  /*package*/ void setModules(List<IModule> modules) {
    ModuleDependenies_Tool.this.myComponent.setModules(modules);
  }

  public void resetAll() {
    ModuleDependenies_Tool.this.myComponent.resetAll();
  }

  public void ShowLoops(ModuleDependencyNode node) {
    ModuleDependenies_Tool.this.myComponent.showLoops(node);
  }

  public JComponent getComponent() {
    return ModuleDependenies_Tool.this.myComponent;
  }

  private static Icon loadIcon() {
    try {
      return new ImageIcon(StreamUtil.loadFromStream(URLUtil.openStream(ModuleDependenies_Tool.class.getResource("dependencies.png"))));
    } catch (IOException e) {
      if (log.isWarnEnabled()) {
        log.warn("Couldn't load icon for ModuleDependenies", e);
      }
      return null;
    }
  }
}
