package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.EditorComponent;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.workbench.MPSDataKeys;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.nodeEditor.cells.CellConditions;

public class ExpandAll_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(ExpandAll_Action.class);

  private EditorContext editorContext;
  private EditorComponent editorComponent;

  public ExpandAll_Action() {
    super("Expand All", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
    this.setMnemonic("E".charAt(0));
  }

  @NotNull
  public String getKeyStroke() {
    return "ctrl shift ADD";
  }

  public boolean isApplicable(AnActionEvent event) {
    return ExpandAll_Action.this.editorComponent.getRootCell() instanceof EditorCell_Collection;
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "ExpandAll", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.editorContext = event.getData(MPSDataKeys.EDITOR_CONTEXT);
    if (this.editorContext == null) {
      return false;
    }
    this.editorComponent = event.getData(MPSDataKeys.EDITOR_COMPONENT);
    if (this.editorComponent == null) {
      return false;
    }
    return true;
  }

  protected void cleanup() {
    super.cleanup();
    this.editorContext = null;
    this.editorComponent = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      EditorCell_Collection foldedCollectionToSelect = ExpandAll_Action.this.getFoldedCollectionToSelect();

      Queue<EditorCell_Collection> cellsToProcess = QueueSequence.fromQueueAndArray(new LinkedList<EditorCell_Collection>(), (EditorCell_Collection) ExpandAll_Action.this.editorComponent.getRootCell());
      while (QueueSequence.fromQueue(cellsToProcess).isNotEmpty()) {
        EditorCell_Collection collectionCell = QueueSequence.fromQueue(cellsToProcess).removeFirstElement();
        if (collectionCell.isFolded()) {
          collectionCell.unfold();
        }
        for (EditorCell childCell : Sequence.fromIterable(collectionCell)) {
          if (childCell instanceof EditorCell_Collection) {
            QueueSequence.fromQueue(cellsToProcess).addLastElement((EditorCell_Collection) childCell);
          }
        }
      }

      if (foldedCollectionToSelect != null) {
        ExpandAll_Action.this.editorContext.getNodeEditorComponent().clearSelectionStack();
        EditorCell editorCellToSelect = foldedCollectionToSelect.getFirstDescendant(CellConditions.SELECTABLE);
        if (editorCellToSelect != null) {
          ExpandAll_Action.this.editorContext.getNodeEditorComponent().changeSelection(editorCellToSelect);
          editorCellToSelect.home();
        }
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "ExpandAll", t);
      }
    }
  }

  /*package*/ EditorCell_Collection getFoldedCollectionToSelect() {
    for (EditorCell currentCell = ExpandAll_Action.this.editorComponent.getSelectedCell(); currentCell != null;) {
      EditorCell_Collection parent = currentCell.getParent();
      if (parent != null && parent.isFolded()) {
        return parent;
      }
      currentCell = parent;
    }
    return null;
  }
}
