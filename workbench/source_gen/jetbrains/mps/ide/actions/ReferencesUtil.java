package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.model.SearchResults;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.ide.findusages.model.SearchResult;

public class ReferencesUtil {
  public ReferencesUtil() {
  }

  public static SearchResults findReferences(List<SModelDescriptor> modelList, List<IModule> modulesList) {
    SearchResults searchResults = new SearchResults();
    for (SModelDescriptor element : modelList) {
      searchResults.addAll(findReferences(element));
    }
    for (IModule element : modulesList) {
      searchResults.addAll(findReferences(element));
    }
    return searchResults;
  }

  public static SearchResults findReferences(IModule module) {
    SearchResults searchResults = new SearchResults();
    for (SModelDescriptor modelDescriptor : module.getOwnModelDescriptors()) {
      searchResults.addAll(findReferences(modelDescriptor));
    }
    return searchResults;
  }

  public static SearchResults findReferences(SModelDescriptor model) {
    SearchResults searchResults = new SearchResults();
    for (SNode root : model.getSModel().roots()) {
      searchResults.addAll(findReferences(root));
    }
    return searchResults;
  }

  public static SearchResults findReferences(SNode root) {
    SearchResults searchResults = new SearchResults();
    for (SNode node : SNodeOperations.getDescendants(root, null, true, new String[]{})) {
      for (SReference ref : SNodeOperations.getReferences(node)) {
        ref.getTargetNode();

        searchResults.getSearchResults().add(new SearchResult<SNode>(ref.getTargetNode(), "res"));
      }
    }
    return searchResults;
  }
}
