package jetbrains.mps.ide.actions;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.project.IModule;
import jetbrains.mps.ide.findusages.model.SearchResults;
import java.util.HashMap;
import jetbrains.mps.smodel.SModelDescriptor;
import java.util.List;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class ReferencesUtil {
  private static Map<IModule, SearchResults> modulesCache = new HashMap<IModule, SearchResults>();
  private static Map<SModelDescriptor, SearchResults> modelsCache = new HashMap<SModelDescriptor, SearchResults>();

  public ReferencesUtil() {
  }

  public static List<SReference> getReferences(Scope scope) {
    List<SReference> result = ListSequence.fromList(new ArrayList<SReference>());
    for (SModelDescriptor element : scope.getModels()) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(getReferences(element, scope)));
    }
    for (IModule element : scope.getModules()) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(getReferences(element, scope)));
    }
    return result;
  }

  public static List<SReference> getReferences(IModule module, Scope scope) {
    List<SReference> result = ListSequence.fromList(new ArrayList<SReference>());
    for (SModelDescriptor element : module.getOwnModelDescriptors()) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(getReferences(element, scope)));
    }
    return result;
  }

  public static List<SReference> getReferences(SModelDescriptor model, Scope scope) {
    List<SReference> result = ListSequence.fromList(new ArrayList<SReference>());
    for (SNode root : model.getSModel().roots()) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(getReferences(root, scope)));
    }
    return result;
  }

  public static List<SReference> getReferences(final SNode root, final Scope scope) {
    final List<SReference> result = ListSequence.fromList(new ArrayList<SReference>());
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (SNode node : SNodeOperations.getDescendants(root, null, true, new String[]{})) {
          for (SReference ref : SNodeOperations.getReferences(node)) {
            SNode targetNode = ref.getTargetNode();
            boolean contains = scope.contains(targetNode);
            if (!(contains)) {
              ListSequence.fromList(result).addElement(ref);
            }
          }
        }
      }
    });
    return result;
  }

  public static void clearCaches() {
    modelsCache.clear();
    modulesCache.clear();
  }
}
