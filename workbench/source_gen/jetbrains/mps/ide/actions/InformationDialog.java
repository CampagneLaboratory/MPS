package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.smodel.IOperationContext;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.JLabel;
import jetbrains.mps.ide.dialogs.DialogDimensionsSettings;
import javax.swing.JComponent;
import jetbrains.mps.smodel.ModelAccess;
import java.util.List;
import jetbrains.mps.util.Pair;
import java.awt.GridLayout;

public class InformationDialog extends BaseDialog {
  private RefactoringContext myRefactoringContext;
  private IOperationContext myOperationContext;
  private JPanel myConceptsPanel = new JPanel(new BorderLayout());

  public InformationDialog(IOperationContext context, RefactoringContext refactoringContext) {
    super(context.getMainFrame(), "'" + refactoringContext.getRefactoring().getUserFriendlyName() + "' Refactoring Information");
    this.myOperationContext = context;
    this.myRefactoringContext = refactoringContext;
  }

  private void append(Object object, JPanel panel) {
    panel.add(new JLabel(object.toString()));
  }

  protected RefactoringContext getRefactoringContext() {
    return this.myRefactoringContext;
  }

  protected IOperationContext getOperationContext() {
    return this.myOperationContext;
  }

  protected JPanel getConceptsPanel() {
    return this.myConceptsPanel;
  }

  @Override
  public DialogDimensionsSettings.DialogDimensions getDefaultDimensionSettings() {
    return new DialogDimensionsSettings.DialogDimensions(100, 200, 500, 200);
  }

  protected JComponent getMainComponent() {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        InformationDialog.this.collectInformation(InformationDialog.this.getRefactoringContext().getConceptFeatures());
      }
    });
    JPanel mainPanel = new JPanel(new BorderLayout());
    mainPanel.add(this.getSimplePanel(), BorderLayout.NORTH);
    return mainPanel;
  }

  protected void collectInformation(List<Pair> pairs) {
    if (pairs.isEmpty()) {
      return;
    }
    this.setCaption(this.myConceptsPanel, "Concept Features");
    JPanel centerPanel = new JPanel(new GridLayout(pairs.size() + 2, 1));
    for (Pair pair : pairs) {
      boolean isCreated = pair.o1 == null;
      boolean isRemoved = pair.o2 == null;
      if (isCreated && isRemoved) {
        continue;
      }
      if (isCreated) {
        this.append(pair.o2.toString() + " created", centerPanel);
      } else if (isRemoved) {
        this.append(pair.o1.toString() + " removed", centerPanel);
      } else {
        String s1 = pair.o1.toString();
        String s2 = pair.o2.toString();
        this.append("<html>" + this.highlightDiff(s1, s2) + " -> " + this.highlightDiff(s2, s1) + "</html>", centerPanel);
      }
    }
    this.append("", centerPanel);
    this.append("", centerPanel);
    this.myConceptsPanel.add(centerPanel, BorderLayout.CENTER);
  }

  protected JComponent getSimplePanel() {
    return this.myConceptsPanel;
  }

  private String highlightDiff(String mainString, String toCompare) {
    StringBuilder builder = new StringBuilder();
    String[] mainPart = mainString.split("\\.");
    String[] comparePart = toCompare.split("\\.");
    for (int i = 0; i < mainPart.length; i++) {
      boolean isDiff = true;
      for (int j = 0; j < comparePart.length; j++) {
        if (mainPart[i].equals(comparePart[j])) {
          isDiff = false;
          break;
        }
      }
      if (isDiff) {
        builder.append("<b>" + mainPart[i] + "</b>");
      } else {
        builder.append(mainPart[i]);
      }
      if (i != mainPart.length - 1) {
        builder.append(".");
      }
    }
    return builder.toString();
  }

  protected void setCaption(JPanel panel, String caption) {
    panel.add(new JLabel("<html><u><b>" + caption + ":</b></u></html>"), BorderLayout.PAGE_START);
  }

  @BaseDialog.Button(position = 0, name = "OK", mnemonic = 'O', defaultButton = true)
  public void buttonOk() {
    this.dispose();
  }
}
