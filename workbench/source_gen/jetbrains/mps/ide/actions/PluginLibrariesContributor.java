package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.library.contributor.LibraryContributor;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.library.LibraryInitializer;
import jetbrains.mps.smodel.ModelAccess;
import java.util.Set;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import com.intellij.ide.plugins.IdeaPluginDescriptor;
import com.intellij.openapi.extensions.PluginId;
import com.intellij.ide.plugins.PluginManager;
import org.jetbrains.annotations.Nullable;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.InputStreamReader;
import org.apache.commons.lang.StringUtils;
import java.io.IOException;

public class PluginLibrariesContributor implements LibraryContributor {
  protected static Log log = LogFactory.getLog(PluginLibrariesContributor.class);

  private final List<String> myLibraries = ListSequence.fromList(new ArrayList<String>());

  public PluginLibrariesContributor() {
  }

  public void init() {
    ListSequence.fromList(myLibraries).addSequence(ListSequence.fromList(getLibrariesToLoad()));
    LibraryInitializer.getInstance().addContributor(this);
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        LibraryInitializer.getInstance().update();
      }
    });
  }

  public void dispose() {
    LibraryInitializer.getInstance().removeContributor(this);
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        LibraryInitializer.getInstance().update();
      }
    });
  }

  public Set<String> getLibraries() {
    final File pluginPath = getPluginPath();
    if (pluginPath == null) {
      return SetSequence.fromSet(new HashSet<String>());
    }
    Set<String> result = SetSequence.fromSet(new HashSet<String>());
    SetSequence.fromSet(result).addSequence(ListSequence.fromList(myLibraries).select(new ISelector<String, String>() {
      public String select(String it) {
        return pluginPath.getAbsolutePath() + File.separator + it;
      }
    }));
    return result;
  }

  private IdeaPluginDescriptor getIdeaPlugin() {
    String className = this.getClass().getName();
    PluginId pluginId = PluginManager.getPluginByClassName(className);
    if (pluginId == null) {
      // <node> 
      return null;
    }
    return PluginManager.getPlugin(pluginId);
  }

  @Nullable
  private File getPluginPath() {
    IdeaPluginDescriptor descriptor = getIdeaPlugin();
    if (descriptor == null) {
      return null;
    }
    return descriptor.getPath();
  }

  private List<String> getLibrariesToLoad() {
    List<String> result = ListSequence.fromList(new ArrayList<String>());

    IdeaPluginDescriptor plugin = getIdeaPlugin();
    if (plugin == null) {
      return result;
    }

    InputStream stream = plugin.getPluginClassLoader().getResourceAsStream("libraries");
    if (stream == null) {
      return result;
    }

    LineNumberReader reader = new LineNumberReader(new InputStreamReader(stream));
    try {
      while (true) {
        String line = reader.readLine();
        if (line == null) {
          break;
        }
        if (StringUtils.isNotEmpty(line)) {
          ListSequence.fromList(result).addElement(line);
        }
      }
    } catch (IOException e) {
      if (log.isErrorEnabled()) {
        log.error("", e);
      }
    }
    return result;
  }
}
