package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.applicationplugins.BaseApplicationPlugin;

import java.util.List;

import jetbrains.mps.workbench.action.BaseGroup;

import java.util.ArrayList;

import jetbrains.mps.workbench.action.ActionUtils;
import com.intellij.openapi.actionSystem.ActionGroup;
import com.intellij.openapi.actionSystem.Constraints;
import com.intellij.openapi.actionSystem.Anchor;
import jetbrains.mps.plugins.pluginparts.custom.BaseCustomApplicationPlugin;

public class Ide_ApplicationPlugin extends BaseApplicationPlugin {

  public List<BaseGroup> initGroups() {
    List<BaseGroup> groups = new ArrayList<BaseGroup>();
    groups.add(new NodeActions_ActionGroup());
    groups.add(new ModelActions_ActionGroup());
    groups.add(new ProjectActions_ActionGroup());
    groups.add(new ProjectNewActions_ActionGroup());
    groups.add(new LanguageActions_ActionGroup());
    groups.add(new LanguageNewActions_ActionGroup());
    groups.add(new SolutionActions_ActionGroup());
    groups.add(new SolutionNewActions_ActionGroup());
    groups.add(new DevkitActions_ActionGroup());
    groups.add(new GeneratorNewActions_ActionGroup());
    groups.add(new GeneratorActions_ActionGroup());
    groups.add(new TransientModulesActions_ActionGroup());
    groups.add(new EditorPopup_ActionGroup());
    groups.add(new EditorInternal_ActionGroup());
    groups.add(new Edit_ActionGroup());
    groups.add(new Generate_ActionGroup());
    groups.add(new Goto_ActionGroup());
    groups.add(new Tools_ActionGroup());
    groups.add(new Help_ActionGroup());
    groups.add(new NodeActionsInternal_ActionGroup());
    groups.add(new ModelActionsInternal_ActionGroup());
    groups.add(new LanguageNewCustomPartActions_ActionGroup());
    groups.add(new Build_ActionGroup());
    groups.add(new AbstractFileActions_ActionGroup());
    groups.add(new FileActions_ActionGroup());
    groups.add(new FolderActions_ActionGroup());
    groups.add(new ModuleActions_ActionGroup());
    groups.add(new ModelRefactoring_ActionGroup());
    groups.add(new LanguageRefactoring_ActionGroup());
    groups.add(new SolutionRefactoring_ActionGroup());
    groups.add(new PackageActions_ActionGroup());
    groups.add(new NamespaceActions_ActionGroup());
    groups.add(new PackageInternalActions_ActionGroup());
    groups.add(new NamespaceInternalActions_ActionGroup());
    return groups;
  }

  public void adjustInterfaceGroups() {
    {
      BaseGroup gToBase = ActionUtils.getGroup(ModelActions_ActionGroup.ID);
      ActionGroup gWhat = ActionUtils.getDefaultGroup("VcsGroup");
      if (gToBase == null || gWhat == null) {
        return;
      }
      {
        String labelName = null;
        labelName = ModelActions_ActionGroup.LABEL_ID_vcs;
        Constraints constraints = new Constraints(Anchor.AFTER, labelName);
        gToBase.add(gWhat, constraints);
      }
    }
    {
      BaseGroup gToBase = ActionUtils.getGroup(AbstractFileActions_ActionGroup.ID);
      ActionGroup gWhat = ActionUtils.getDefaultGroup("VcsGroup");
      if (gToBase == null || gWhat == null) {
        return;
      }
      {
        String labelName = null;
        labelName = AbstractFileActions_ActionGroup.LABEL_ID_vcs;
        Constraints constraints = new Constraints(Anchor.AFTER, labelName);
        gToBase.add(gWhat, constraints);
      }
    }
    {
      BaseGroup gToBase = ActionUtils.getGroup(EditorPopup_ActionGroup.ID);
      ActionGroup gWhat = ActionUtils.getDefaultGroup("VcsGroup");
      if (gToBase == null || gWhat == null) {
        return;
      }
      {
        String labelName = null;
        labelName = EditorPopup_ActionGroup.LABEL_ID_vcs;
        Constraints constraints = new Constraints(Anchor.AFTER, labelName);
        gToBase.add(gWhat, constraints);
      }
    }
  }

  public List<BaseCustomApplicationPlugin> initCustomParts() {
    List<BaseCustomApplicationPlugin> res = new ArrayList<BaseCustomApplicationPlugin>();
    return res;
  }

}
