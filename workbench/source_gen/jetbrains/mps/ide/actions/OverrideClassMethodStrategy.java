package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.plugin.uiActions.StratergyAddMethodDialog;
import javax.swing.JCheckBox;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import javax.swing.JComponent;

public class OverrideClassMethodStrategy implements StratergyAddMethodDialog.AdditionStrategy {
  private JCheckBox myCheckBox;

  public OverrideClassMethodStrategy() {
  }

  public void updateMethod(SNode sourceMethod, SNode method) {
    if (this.myCheckBox.isSelected()) {
      SLinkOperations.addChild(method, "annotation", new _Quotations.QuotationClass_0().createNode());
    }

    Iterable<SNode> paramList = ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return new _Quotations.QuotationClass_8().createNode(it);
      }
    });
    SNode superCallExpr = new _Quotations.QuotationClass_3().createNode(sourceMethod, Sequence.fromIterable(paramList).toListSequence());
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method, "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType")) {
      SLinkOperations.addChild(SLinkOperations.getTarget(method, "body", true), "statement", new _Quotations.QuotationClass_1().createNode(superCallExpr));
    } else {
      SLinkOperations.addChild(SLinkOperations.getTarget(method, "body", true), "statement", new _Quotations.QuotationClass_2().createNode(superCallExpr));
    }
  }

  public String getTitle() {
    return "Override Method";
  }

  public JComponent createAdditionalOptionsComponent() {
    this.myCheckBox = new JCheckBox("Add @Override annotation");
    this.myCheckBox.setSelected(true);
    return this.myCheckBox;
  }
}
