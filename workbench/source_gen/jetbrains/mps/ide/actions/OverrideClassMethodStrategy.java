package jetbrains.mps.ide.actions;

/*Generated by MPS */

import javax.swing.JCheckBox;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.BoxLayout;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;
import java.util.List;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.CopyUtil;

public class OverrideClassMethodStrategy extends BaseMethodUpdateStrategy {
  private JCheckBox myCheckBox;

  public OverrideClassMethodStrategy() {
    this.myCheckBox = new JCheckBox("Add @Override annotation");
    this.myCheckBox.setSelected(true);
  }

  public void updateMethod(SNode sourceMethod, SNode method) {
    super.updateMethod(sourceMethod, method);
    if (this.myCheckBox.isSelected()) {
      ListSequence.fromList(SLinkOperations.getTargets(method, "annotation", true)).addElement(new OverrideClassMethodStrategy.QuotationClass_2096_1().createNode());
    }

    Iterable<SNode> paramList = ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return new OverrideClassMethodStrategy.QuotationClass_2096_2().createNode(it);
      }
    });
    SNode superCallExpr = new OverrideClassMethodStrategy.QuotationClass_2096_0().createNode(sourceMethod, Sequence.fromIterable(paramList).toListSequence());

    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method, "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType")) {
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method, "body", true), "statement", true)).addElement(new OverrideClassMethodStrategy.QuotationClass_2096_3().createNode(superCallExpr));
    } else {
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method, "body", true), "statement", true)).addElement(this.getReturnStatement(superCallExpr));
    }
  }

  public String getTitle() {
    return "Override Method";
  }

  public JComponent createAdditionalOptionsComponent() {
    JPanel optPanel = new JPanel();
    optPanel.setLayout(new BoxLayout(optPanel, BoxLayout.Y_AXIS));
    optPanel.add(this.getReturnCheckBox());
    optPanel.add(this.myCheckBox);
    return optPanel;
  }

  public static class QuotationClass_2096_0 {
    public QuotationClass_2096_0() {
    }

    public SNode createNode(Object parameter_2096_1, Object parameter_2096_2) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      {
        quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperMethodCall", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_2;
        quotedNode1_2.setReferent("baseMethodDeclaration", (SNode) parameter_2096_1);
        {
          List<SNode> nodes = (List<SNode>) parameter_2096_2;
          for (SNode child : nodes) {
            quotedNode_2.addChild("actualArgument", HUtil.copyIfNecessary(child));
          }
        }
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_2096_1 {
    public QuotationClass_2096_1() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_0 = null;
      {
        quotedNode_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstance", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_0 = quotedNode_0;
        quotedNode1_0.addReference(SReference.create("annotation", quotedNode1_0, SModelReference.fromString("f:java_stub#java.lang(java.lang@java_stub)"), SNodeId.fromString("~Override")));
        result = quotedNode1_0;
      }
      return result;
    }
  }

  public static class QuotationClass_2096_2 {
    public QuotationClass_2096_2() {
    }

    public SNode createNode(Object parameter_2096_0) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterReference", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_1 = quotedNode_1;
        quotedNode1_1.setReferent("variableDeclaration", (SNode) parameter_2096_0);
        result = quotedNode1_1;
      }
      return result;
    }
  }

  public static class QuotationClass_2096_3 {
    public QuotationClass_2096_3() {
    }

    public SNode createNode(Object parameter_2096_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      {
        quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_4;
        {
          quotedNode_5 = (SNode) parameter_2096_3;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_5)) {
            quotedNode1_4 = CopyUtil.copy(quotedNode_5);
          } else {
            _parameterValues_129834374.add(quotedNode_5);
            quotedNode1_4 = quotedNode_5;
          }
          if (quotedNode1_4 != null) {
            quotedNode_4.addChild("expression", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }
}
