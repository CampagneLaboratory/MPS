package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.workbench.action.BaseGroup;
import jetbrains.mps.workbench.actions.model.CreateRootNodeGroup;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleReference;
import jetbrains.mps.workbench.action.ActionFactory;
import jetbrains.mps.workbench.actions.nodes.PasteNodeAction;
import jetbrains.mps.workbench.actions.model.DeleteModelsAction;
import jetbrains.mps.workbench.actions.model.OptimizeImportsAction;
import jetbrains.mps.workbench.actions.model.ShowReferencesToMissingStuffAction;
import jetbrains.mps.workbench.actions.model.GenerateModelFilesAction;
import jetbrains.mps.workbench.actions.model.GenerateModelTextAction;
import jetbrains.mps.workbench.actions.model.ShowMappingsPartitioningAction;
import jetbrains.mps.workbench.actions.model.ModelPropertiesAction;

public class ModelActions_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(ModelActions_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.ModelActions";
  public static final String LABEL_ID_refactoring = ID + "refactoring";
  public static final String LABEL_ID_vcs = ID + "vcs";

  public ModelActions_ActionGroup() {
    super("", ID);
    this.setIsInternal(false);
    this.setPopup(false);
    try {
      if (BaseGroup.class.isAssignableFrom(CreateRootNodeGroup.class)) {
        this.add(new CreateRootNodeGroup());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(CreateRootNodeGroup.class, module.getModuleFqName(), null));
      }
      if (BaseGroup.class.isAssignableFrom(PasteNodeAction.class)) {
        this.add(new PasteNodeAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(PasteNodeAction.class, module.getModuleFqName(), null));
      }
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(DeleteModelsAction.class)) {
        this.add(new DeleteModelsAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(DeleteModelsAction.class, module.getModuleFqName(), null));
      }
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.CloneModel_Action"), module.getModuleFqName(), null));
      }
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(OptimizeImportsAction.class)) {
        this.add(new OptimizeImportsAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(OptimizeImportsAction.class, module.getModuleFqName(), null));
      }
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.AddMissingImports_Action"), module.getModuleFqName(), null));
      }
      if (BaseGroup.class.isAssignableFrom(ShowReferencesToMissingStuffAction.class)) {
        this.add(new ShowReferencesToMissingStuffAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(ShowReferencesToMissingStuffAction.class, module.getModuleFqName(), null));
      }
      this.addSeparator();
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.CheckModel_Action"), module.getModuleFqName(), null));
      }
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(GenerateModelFilesAction.class)) {
        this.add(new GenerateModelFilesAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(GenerateModelFilesAction.class, module.getModuleFqName(), null));
      }
      if (BaseGroup.class.isAssignableFrom(GenerateModelTextAction.class)) {
        this.add(new GenerateModelTextAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(GenerateModelTextAction.class, module.getModuleFqName(), null));
      }
      if (BaseGroup.class.isAssignableFrom(ShowMappingsPartitioningAction.class)) {
        this.add(new ShowMappingsPartitioningAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(ShowMappingsPartitioningAction.class, module.getModuleFqName(), null));
      }
      this.addSeparator();
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.ShowDifferencesWithModelOnDisk_Action"), module.getModuleFqName(), null));
      }
      this.addSeparator();
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.RevertMemoryChanges_Action"), module.getModuleFqName(), null));
      }
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.SaveModel_Action"), module.getModuleFqName(), null));
      }
      this.addSeparator();
      this.addAnchor(ModelActions_ActionGroup.LABEL_ID_refactoring);
      this.addSeparator();
      this.addAnchor(ModelActions_ActionGroup.LABEL_ID_vcs);
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(ModelPropertiesAction.class)) {
        this.add(new ModelPropertiesAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(ModelPropertiesAction.class, module.getModuleFqName(), null));
      }
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void adjust() {
  }

}
