package jetbrains.mps.ide.actions;

/*Generated by MPS */

import com.intellij.openapi.vcs.checkin.CheckinHandler;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vcs.CheckinProjectPanel;
import org.jetbrains.annotations.Nullable;
import com.intellij.openapi.vcs.ui.RefreshableOnComponent;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import java.awt.GridLayout;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.MPSProjectHolder;
import jetbrains.mps.smodel.IOperationContext;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import java.util.Collection;
import java.io.File;
import jetbrains.mps.smodel.SModelRepository;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.vfs.FileSystemFile;
import com.intellij.openapi.vcs.checkin.CheckinHandlerFactory;
import org.jetbrains.annotations.NotNull;

public class ModelCheckerCheckinHandler extends CheckinHandler {
  private Project myProject;
  private CheckinProjectPanel myPanel;

  public ModelCheckerCheckinHandler(Project project, CheckinProjectPanel panel) {
    this.myProject = project;
    this.myPanel = panel;
  }

  @Nullable
  @Override
  public RefreshableOnComponent getBeforeCheckinConfigurationPanel() {
    final JCheckBox checkModelCheckBox = new JCheckBox("Perform check for modified models");
    return new RefreshableOnComponent() {
      public JComponent getComponent() {
        JPanel panel = new JPanel(new GridLayout(1, 0));
        panel.add(checkModelCheckBox);
        return panel;
      }

      public void restoreState() {
        checkModelCheckBox.setSelected(ModelCheckerSettings.getInstance().isCheckBeforeCommit());
      }

      public void saveState() {
        ModelCheckerSettings.getInstance().setCheckBeforeCommit(checkModelCheckBox.isSelected());
      }

      public void refresh() {
      }
    };
  }

  @Override
  public CheckinHandler.ReturnResult beforeCheckin() {
    if (!(ModelCheckerSettings.getInstance().isCheckBeforeCommit())) {
      return CheckinHandler.ReturnResult.COMMIT;
    }

    MPSProject mpsProject = this.myProject.getComponent(MPSProjectHolder.class).getMPSProject();
    IOperationContext operationContext = mpsProject.createOperationContext();

    List<SModelDescriptor> modelDescriptors = getModelDescriptorsByFiles(this.myPanel.getFiles());
    return mpsProject.getPluginManager().getTool(ModelCheckerTool_Tool.class).checkModelsBeforeCommit(operationContext, modelDescriptors);
  }

  public static List<SModelDescriptor> getModelDescriptorsByFiles(Collection<File> files) {
    List<SModelDescriptor> allModelDescriptors = SModelRepository.getInstance().getModelDescriptors();
    Set<File> filesSet = SetSequence.fromSetWithValues(new HashSet<File>(), files);
    List<SModelDescriptor> filteredModelDescriptors = ListSequence.fromList(new ArrayList<SModelDescriptor>());
    for (SModelDescriptor modelDescriptor : ListSequence.fromList(allModelDescriptors)) {
      if (modelDescriptor.getModelFile() instanceof FileSystemFile) {
        File file = ((FileSystemFile)modelDescriptor.getModelFile()).getFile();
        if (SetSequence.fromSet(filesSet).contains(file)) {
          ListSequence.fromList(filteredModelDescriptors).addElement(modelDescriptor);
        }
      }
    }
    return filteredModelDescriptors;
  }

  public static class MyHandlerFactory extends CheckinHandlerFactory {
    public MyHandlerFactory() {
    }

    @NotNull
    public CheckinHandler createHandler(CheckinProjectPanel panel) {
      return new ModelCheckerCheckinHandler(panel.getProject(), panel);
    }
  }
}
