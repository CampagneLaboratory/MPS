package jetbrains.mps.ide.actions;

/*Generated by MPS */

import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.projectPane.ProjectPane;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.workbench.editors.MPSEditorOpener;
import org.jetbrains.annotations.NotNull;

import javax.swing.Icon;
import java.util.ArrayList;
import java.util.List;

public class CloneRoot_Action extends GeneratedAction {
  public static final Logger LOG = Logger.getLogger(CloneRoot_Action.class);
  public static final Icon ICON = null;

  private List<SNode> nodes;
  public MPSProject project;

  public CloneRoot_Action() {
    super("Clone Root", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull()
  public String getKeyStroke() {
    return "shift F5";
  }

  public void doUpdate(@NotNull()AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "CloneRoot", t);
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    try {
      if (!(super.collectActionData(event))) {
        return false;
      }
      {
        List<SNode> nodes = event.getData(MPSDataKeys.SNODES);
        boolean error = false;
        if (nodes != null) {
        }
        if (error) {
          this.nodes = null;
        } else {
          this.nodes = new ArrayList<SNode>(nodes);
        }
      }
      if (this.nodes == null) {
        return false;
      }
      this.project = event.getData(MPSDataKeys.MPS_PROJECT);
      if (this.project == null) {
        return false;
      }
    } catch (Throwable t) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      for (SNode node : CloneRoot_Action.this.nodes) {
        SNode root = SNodeOperations.getContainingRoot(node);
        SNode copy = SNodeOperations.copyNode(root);
        SModelOperations.addRootNode(SNodeOperations.getModel(root), copy);
        CloneRoot_Action.this.project.getComponentSafe(MPSEditorOpener.class).openNode(copy);
        CloneRoot_Action.this.project.getComponentSafe(ProjectPane.class).selectNode(copy);
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "CloneRoot", t);
    }
  }

}
