package jetbrains.mps.ide.actions;

/*Generated by MPS */

import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.datatransfer.CopyPasteUtil;
import jetbrains.mps.ide.projectPane.ProjectPane;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.workbench.MPSDataKeys;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;

import javax.swing.Icon;
import java.util.ArrayList;
import java.util.List;

public class CutNode_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(CutNode_Action.class);

  public IOperationContext context;
  private List<SNode> nodes;

  public CutNode_Action() {
    super("Cut", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull()
  public String getKeyStroke() {
    return "ctrl X";
  }

  public boolean isApplicable(AnActionEvent event) {
    return CutNode_Action.this.getProjectPane() != null;
  }

  public void doUpdate(@NotNull() AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "CutNode", t);
      }
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    {
      List<SNode> nodes = event.getData(MPSDataKeys.SNODES);
      boolean error = false;
      if (nodes != null) {
      }
      if (error || nodes == null) {
        this.nodes = null;
      } else
      {
        this.nodes = ListSequence.fromListWithValues(new ArrayList<SNode>(), nodes);
      }
    }
    if (this.nodes == null) {
      return false;
    }
    this.context = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.context == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      CopyPasteUtil.copyNodesToClipboard(CutNode_Action.this.nodes);
      for(SNode node : ListSequence.fromList(CutNode_Action.this.nodes)) {
        if (node == ListSequence.fromList(CutNode_Action.this.nodes).last()) {
          ProjectPane pane = CutNode_Action.this.getProjectPane();
          if (ListSequence.fromList(CutNode_Action.this.nodes).count() != 1) {
            pane.rebuildTree();
          }
          pane.selectNextTreeNode(node);
        }
        SNodeOperations.deleteNode(node);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "CutNode", t);
      }
    }
  }

  private ProjectPane getProjectPane() {
    return CutNode_Action.this.context.getComponent(ProjectPane.class);
  }

}
