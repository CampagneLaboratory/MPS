package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.project.Project;
import java.awt.Frame;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.workbench.actions.model.PartitioningHelper;

public class ShowMappingsPartitioning_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(ShowMappingsPartitioning_Action.class);

  private Project project;
  private Frame frame;
  private IScope scope;
  private List<SModelDescriptor> models;

  public ShowMappingsPartitioning_Action() {
    super("Show Mappings Partitioning", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public boolean isApplicable(AnActionEvent event) {
    return ShowMappingsPartitioning_Action.this.models.size() == 1;
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "ShowMappingsPartitioning", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    this.frame = event.getData(MPSDataKeys.FRAME);
    if (this.frame == null) {
      return false;
    }
    this.scope = event.getData(MPSDataKeys.SCOPE);
    if (this.scope == null) {
      return false;
    }
    this.models = event.getData(MPSDataKeys.MODELS);
    if (this.models == null) {
      return false;
    }
    return true;
  }

  protected void cleanup() {
    super.cleanup();
    this.project = null;
    this.frame = null;
    this.scope = null;
    this.models = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      PartitioningHelper.showMappingPartitioning(ShowMappingsPartitioning_Action.this.project, ShowMappingsPartitioning_Action.this.frame, ShowMappingsPartitioning_Action.this.scope, ShowMappingsPartitioning_Action.this.models);
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "ShowMappingsPartitioning", t);
      }
    }
  }
}
