package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SModelDescriptor;
import java.util.List;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.findusages.model.SearchResult;

public class ModelChecker {
  public static final String SEVERITY_ERROR = "Errors";
  public static final String SEVERITY_WARNING = "Warnings";
  public static final String SEVERITY_INFO = "Infos";

  private SearchResults<ModelCheckerIssue> myResults = new SearchResults<ModelCheckerIssue>();
  private IOperationContext myOperationContext;
  private ProgressContext myProgressContext;

  public ModelChecker(IOperationContext myOperationContext, ProgressContext myProgressContext) {
    this.myOperationContext = myOperationContext;
    this.myProgressContext = myProgressContext;
  }

  public void checkModel(final SModelDescriptor modelDescriptor) {
    final List<SpecificChecker> specificCheckers = ModelCheckerSettings.getInstance().getSpecificCheckers();

    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SModel model = modelDescriptor.getSModel();

        for (SpecificChecker specificChecker : ListSequence.fromList(specificCheckers)) {
          List<SearchResult<ModelCheckerIssue>> specificCheckerResults = specificChecker.checkModel(model, ModelChecker.this.myProgressContext, ModelChecker.this.myOperationContext);
          ModelChecker.this.myResults.getSearchResults().addAll(specificCheckerResults);
          if (ModelChecker.this.isCancelled()) {
            break;
          }
        }
      }
    });
  }

  public SearchResults<ModelCheckerIssue> getSearchResults() {
    return this.myResults;
  }

  public boolean isCancelled() {
    return this.myProgressContext.getProgressIndicator().isCanceled();
  }

  public IOperationContext getOperationContext() {
    return this.myOperationContext;
  }
}
