package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.lang.behavior.structure.ConceptBehavior;
import jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.typesystem.ResolveUtil;
import jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration;
import jetbrains.mps.baseLanguage.structure.StatementList;
import jetbrains.mps.smodel.INodeAdapter;
import jetbrains.mps.lang.structure.behavior.IConceptAspect_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class AddConceptMethodStrategy implements StratergyAddMethodDialog.ContainerStrategy {
  private ConceptBehavior myBehavior;
  private ConceptMethodDeclaration myContextMethod;

  public AddConceptMethodStrategy(final SNode node) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        AddConceptMethodStrategy.this.myBehavior = node.getAdapter().getParent(ConceptBehavior.class);
        AddConceptMethodStrategy.this.myContextMethod = node.getAdapter().getParent(ConceptMethodDeclaration.class);
      }
    });
  }

  public List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition> doAddMethods(List<SNode> baseMethods) {
    boolean insertion = this.myContextMethod != null && this.myContextMethod.getParent() == this.myBehavior;
    List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition> methods = new ArrayList<StratergyAddMethodDialog.ContainerStrategy.MethodAddition>();
    for (SNode methodNode : baseMethods) {
      SNode behaviorNode = this.myBehavior.getNode();
      ConceptMethodDeclaration method = (ConceptMethodDeclaration) ResolveUtil.processMethodToImplement(behaviorNode, methodNode).getAdapter();
      methods.add(new StratergyAddMethodDialog.ContainerStrategy.MethodAddition(((BaseMethodDeclaration) methodNode.getAdapter()), method));
      method.setIsAbstract(false);
      method.setBody(StatementList.newInstance(this.myBehavior.getModel()));
      method.setOverriddenMethod((ConceptMethodDeclaration) methodNode.getAdapter());
      if (insertion) {
        this.myBehavior.insertMethod(this.myContextMethod, method);
      } else {
        this.myBehavior.addMethod(method);
      }
    }
    return (List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition>) methods;
  }

  private Integer getSuperBehavioursCount(INodeAdapter adapter) {
    if (!(adapter instanceof ConceptBehavior)) {
      return 0;
    }
    SNode conceptBehavior = (SNode) adapter.getNode();
    SNode concept = IConceptAspect_Behavior.call_getBaseConcept_2621449412040133768(conceptBehavior);
    if ((concept == null)) {
      return 0;
    }
    return ListSequence.fromList(SConceptOperations.getAllSuperConcepts(concept, false)).count();
  }

  public int compareContainers(INodeAdapter c1, INodeAdapter c2) {
    return this.getSuperBehavioursCount(c2).compareTo(this.getSuperBehavioursCount(c1));
  }

  public SNode getMainContainer() {
    return this.myBehavior.getNode();
  }

  public SNode getContainer(SNode methodDecl) {
    return methodDecl.getAdapter().getParent(ConceptBehavior.class).getNode();
  }
}
