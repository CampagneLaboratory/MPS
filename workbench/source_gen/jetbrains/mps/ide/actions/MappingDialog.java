package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.ui.MPSTree;
import jetbrains.mps.ide.ui.MPSTreeNode;
import javax.swing.BorderFactory;
import java.awt.Color;
import javax.swing.JComponent;
import jetbrains.mps.ide.ui.TextTreeNode;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.ide.projectPane.Icons;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.ide.ui.smodel.SNodeTreeNode;
import jetbrains.mps.util.Condition;
import com.intellij.ui.treeStructure.Tree;
import javax.swing.JOptionPane;
import javax.swing.Icon;

public class MappingDialog extends BaseDialog {
  private JPanel myMainComponent = new JPanel(new BorderLayout());
  private Language myLanguage;
  private IOperationContext myContext;
  private MPSTree myTree = new MPSTree() {
    protected MPSTreeNode rebuild() {
      return MappingDialog.this.rebuildTree();
    }
  };

  public MappingDialog(Language language, IOperationContext operationContext) {
    super(operationContext.getMainFrame(), "Choose Mapping Configuration");
    this.myLanguage = language;
    this.myContext = operationContext;
    this.myMainComponent.add(this.myTree, BorderLayout.CENTER);
    this.myTree.setBorder(BorderFactory.createLineBorder(Color.BLACK));
    this.myTree.rebuildNow();
  }

  protected JComponent getMainComponent() {
    return this.myMainComponent;
  }

  private MPSTreeNode rebuildTree() {
    if (this.myLanguage == null) {
      return null;
    }
    TextTreeNode root = new TextTreeNode("Generators");
    for (final Generator generator : this.myLanguage.getGenerators()) {
      MPSTreeNode generatorTreeNode = new MappingDialog.MyTreeNode(Icons.GENERATORS_ICON, generator.getModuleUID(), "generator/" + generator.getName());
      root.add(generatorTreeNode);
      for (SModelDescriptor md : generator.getOwnTemplateModels()) {
        MPSTreeNode modelTreeNode = new MappingDialog.MyTreeNode(IconManager.getIconFor(md), md.toString(), md.getLongName() + "@" + md.getStereotype());
        generatorTreeNode.add(modelTreeNode);
        SModel model = md.getSModel();
        for (SNode node : SModelOperations.getRoots(model, "jetbrains.mps.lang.generator.structure.MappingConfiguration")) {
          SNodeTreeNode nodeTreeNode = new SNodeTreeNode(node, null, this.myContext, new Condition<SNode>() {
            public boolean met(SNode p0) {
              return false;
            }
          });
          modelTreeNode.add(nodeTreeNode);
        }
      }
    }
    return root;
  }

  @BaseDialog.Button(position = 0, name = "OK", defaultButton = true)
  public void buttonOk() {
    if (this.myTree.getSelectedNodes(SNodeTreeNode.class, new Tree.NodeFilter() {
      public boolean accept(Object p0) {
        return true;
      }
    }).length != 1) {
      JOptionPane.showMessageDialog(this, "Error!");
    }
  }

  @BaseDialog.Button(position = 1, name = "Cancel", mnemonic = 'C', defaultButton = false)
  public void buttonCancel() {
    this.myTree.dispose();
    this.dispose();
  }

  /*package*/ class MyTreeNode extends MPSTreeNode {
    private Icon myIcon;
    private String myNodeIdentifier;
    private String myText;

    public MyTreeNode(Icon icon, String nodeIdentifier, String text) {
      super(MappingDialog.this.myContext);
      this.myIcon = icon;
      this.myNodeIdentifier = nodeIdentifier;
      this.myText = text;
      this.updatePresentation();
    }

    protected void updatePresentation() {
      super.updatePresentation();
      this.setText(this.myText);
      this.setIcon(this.myIcon);
      this.setNodeIdentifier(this.myNodeIdentifier);
    }
  }
}
