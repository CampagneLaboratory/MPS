package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.awt.Frame;
import jetbrains.mps.project.IModule;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.workbench.MPSDataKeys;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.workbench.dialogs.choosers.CommonChoosers;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;

public class NewAccessoryModel_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(NewAccessoryModel_Action.class);

  private Frame frame;
  private IModule module;
  private Project project;

  public NewAccessoryModel_Action() {
    super("New Accessory Model", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public boolean isApplicable(AnActionEvent event) {
    return NewAccessoryModel_Action.this.module instanceof Language;
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "NewAccessoryModel", t);
      }
      this.disable(event.getPresentation());
    }
  }

  @Override
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.frame = event.getData(MPSDataKeys.FRAME);
    if (this.frame == null) {
      return false;
    }
    this.module = event.getData(MPSDataKeys.CONTEXT_MODULE);
    if (this.module == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      final Language language = ((Language) NewAccessoryModel_Action.this.module);
      final List<SModelDescriptor> models = ListSequence.fromList(new ArrayList<SModelDescriptor>());
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          ListSequence.fromList(models).addSequence(ListSequence.fromList(GlobalScope.getInstance().getModelDescriptors()));
        }
      });
      final SModelDescriptor result = CommonChoosers.showDialogModelChooser(NewAccessoryModel_Action.this.frame, models, null);
      if (result == null) {
        return;
      }
      ProgressManager.getInstance().run(new Task.Modal(NewAccessoryModel_Action.this.project, "Creating", false) {
        public void run(@NotNull ProgressIndicator progressIndicator) {
          LanguageDescriptor descriptor = language.getLanguageDescriptor();
          descriptor.getAccessoryModels().add(result.getSModelReference());
          language.setLanguageDescriptor(descriptor);
          language.save();
        }
      });
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "NewAccessoryModel", t);
      }
    }
  }
}
