package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.awt.Frame;
import jetbrains.mps.project.IModule;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import javax.swing.JOptionPane;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.project.SModelRoot;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.smodel.SModelReference;

public class NewAccessoryModel_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(NewAccessoryModel_Action.class);

  public Frame frame;
  public IModule module;

  public NewAccessoryModel_Action() {
    super("New Accessory Model", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull()
  public String getKeyStroke() {
    return "";
  }

  public boolean isApplicable(AnActionEvent event) {
    return NewAccessoryModel_Action.this.module instanceof Language;
  }

  public void doUpdate(@NotNull() AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "NewAccessoryModel", t);
      }
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.frame = event.getData(MPSDataKeys.FRAME);
    if (this.frame == null) {
      return false;
    }
    this.module = event.getData(MPSDataKeys.MODULE);
    if (this.module == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      final Language language = ((Language)NewAccessoryModel_Action.this.module);
      final Wrappers._T<String> languageNamespace = new Wrappers._T<String>();
      ModelAccess.instance().runReadAction(new Runnable() {

        public void run() {
          languageNamespace.value = language.getNamespace();
        }
      });
      final String name = JOptionPane.showInputDialog(NewAccessoryModel_Action.this.frame, "Enter a model's name", languageNamespace.value);
      if (name == null) {
        return;
      }
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {

        public void run() {
          try {
            ModelRoot newAccRoot = language.createAccessoriesRoot();
            SModelRoot existingAccRoot = language.findModelRoot(newAccRoot.getPath());
            if (existingAccRoot == null) {
              LanguageDescriptor descriptor = language.getLanguageDescriptor();
              descriptor.getModelRoots().add(newAccRoot);
              language.setLanguageDescriptor(descriptor);
              language.save();
            }
            SModelDescriptor model = language.createModel(SModelFqName.fromString(name), language.findModelRoot(newAccRoot.getPath()));
            model.save();
            LanguageDescriptor descriptor = language.getLanguageDescriptor();
            descriptor.getAccessoryModels().add(SModelReference.fromString(name));
            if (existingAccRoot == null) {
              descriptor.getModelRoots().add(newAccRoot);
            }
            language.setLanguageDescriptor(descriptor);
            language.save();
          } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(NewAccessoryModel_Action.this.frame, "Invalid Accessory Model Name", "Invalid Accessory Model Name", JOptionPane.ERROR_MESSAGE);
          }
        }
      });
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "NewAccessoryModel", t);
      }
    }
  }

}
