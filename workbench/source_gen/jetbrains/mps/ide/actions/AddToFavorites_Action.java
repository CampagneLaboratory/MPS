package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.List;
import javax.swing.tree.TreeNode;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.projectPane.favorites.MPSFavoritesManager;
import jetbrains.mps.ide.projectPane.favorites.FavoritesUtil;
import jetbrains.mps.ide.projectPane.favorites.FavoritesProjectPane;

public class AddToFavorites_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(AddToFavorites_Action.class);

  private List<TreeNode> treeNodes;
  private Project project;
  private String name;

  public AddToFavorites_Action(String name_par) {
    super("Add to Favorites", "", ICON);
    this.name = name_par;
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      event.getPresentation().setText(AddToFavorites_Action.this.name);
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "AddToFavorites", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.treeNodes = event.getData(MPSDataKeys.LOGICAL_VIEW_NODES);
    if (this.treeNodes == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    return true;
  }

  protected void cleanup() {
    super.cleanup();
    this.treeNodes = null;
    this.project = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      MPSFavoritesManager favoritesManager = AddToFavorites_Action.this.project.getComponent(MPSFavoritesManager.class);
      if (favoritesManager == null) {
        return;
      }
      List<Object> toMove = FavoritesUtil.getObjects(AddToFavorites_Action.this.treeNodes);
      FavoritesProjectPane pane = FavoritesUtil.getCurrentPane(AddToFavorites_Action.this.project);
      if (pane != null) {
        favoritesManager.removeRoots(pane.getSubId(), toMove);
      }
      favoritesManager.addRoots(AddToFavorites_Action.this.name, toMove);
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "AddToFavorites", t);
      }
    }
  }

  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(name_State((String) this.name));
    res.append("!");
    return res.toString();
  }

  public static String name_State(String object) {
    return object;
  }
}
