package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleReference;
import jetbrains.mps.workbench.action.ActionFactory;
import jetbrains.mps.workbench.action.BaseGroup;
import jetbrains.mps.workbench.actions.ReloadAllAction;
import jetbrains.mps.workbench.actions.tools.InstallIDEAPluginAction;
import jetbrains.mps.smodel.RenameAspectsAction;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.workbench.action.ActionUtils;

public class Tools_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(Tools_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.Tools";
  public static final String LABEL_ID_customTools = ID + "customTools";
  public static final String INTERNAL_LABEL_ID_Internal = ID + "Internal";

  public Tools_ActionGroup() {
    super("Tools", ID);
    this.setIsInternal(false);
    this.setPopup(false);
    try {
      this.addAnchor(Tools_ActionGroup.INTERNAL_LABEL_ID_Internal);
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.ShowModuleRepository_Action"), module.getModuleFqName(), null));
      }
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.ShowModelRepository_Action"), module.getModuleFqName(), null));
      }
      this.addAnchor(Tools_ActionGroup.LABEL_ID_customTools);
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(ReloadAllAction.class)) {
        this.add(new ReloadAllAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(ReloadAllAction.class, module.getModuleFqName(), null));
      }
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(InstallIDEAPluginAction.class)) {
        this.add(new InstallIDEAPluginAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(InstallIDEAPluginAction.class, module.getModuleFqName(), null));
      }
      if (BaseGroup.class.isAssignableFrom(RenameAspectsAction.class)) {
        this.add(new RenameAspectsAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(RenameAspectsAction.class, module.getModuleFqName(), null));
      }
      this.addSeparator();
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void adjust() {
    {
      DefaultActionGroup gToDef = ActionUtils.getDefaultGroup("ToolsMenu");
      BaseGroup gWhat = ActionUtils.getGroup(Tools_ActionGroup.ID);
      if (gToDef == null || gWhat == null) {
        return;
      }
      gToDef.add(gWhat);
    }
  }

}
