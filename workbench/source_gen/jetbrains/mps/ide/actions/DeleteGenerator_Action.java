package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.project.IModule;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.workbench.dialogs.DeleteDialog;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.structure.modules.GeneratorDescriptor;
import jetbrains.mps.workbench.actions.language.DeleteGeneratorHelper;

public class DeleteGenerator_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(DeleteGenerator_Action.class);

  private Project project;
  private IOperationContext contxet;
  private IModule module;

  public DeleteGenerator_Action() {
    super("Delete Generator...", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull()
  public String getKeyStroke() {
    return " DELETE";
  }

  public boolean isApplicable(AnActionEvent event) {
    return DeleteGenerator_Action.this.module instanceof Generator;
  }

  public void doUpdate(@NotNull() AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "DeleteGenerator", t);
      }
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    this.contxet = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.contxet == null) {
      return false;
    }
    this.module = event.getData(MPSDataKeys.MODULE);
    if (this.module == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      final DeleteDialog dialog = new DeleteDialog(DeleteGenerator_Action.this.project, "Delete Generator", "Are you sure you want to delete generator?\n\nThis operation is not undoable.");
      dialog.setOptions(true, false, false, false);
      dialog.show();
      if (!(dialog.isOK())) {
        return;
      }
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {

        public void run() {
          Generator generator = ((Generator)DeleteGenerator_Action.this.module);
          Language sourceLanguage = generator.getSourceLanguage();
          int genIndex = sourceLanguage.getGenerators().indexOf(generator);
          GeneratorDescriptor genToDelete = sourceLanguage.getLanguageDescriptor().getGenerators().get(genIndex);
          DeleteGeneratorHelper.deleteGenerator(DeleteGenerator_Action.this.project, sourceLanguage, generator, genToDelete, dialog.isSafe(), dialog.isDeleteFiles());
        }
      });
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "DeleteGenerator", t);
      }
    }
  }

}
