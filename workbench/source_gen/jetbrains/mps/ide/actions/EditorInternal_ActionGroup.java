package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.CurrentProjectGroup;
import jetbrains.mps.logging.Logger;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.actions.nodes.TestNodePathAction;
import jetbrains.mps.ide.actions.cells.CellPropertiesAction;
import jetbrains.mps.ide.actions.cells.ShowCellInCellExplorerAction;
import jetbrains.mps.ide.actions.nodes.PrintNodeIDAction;
import jetbrains.mps.ide.actions.nodes.PrintTextPresentationAction;
import jetbrains.mps.ide.actions.nodes.HighlightCellDependenciesAction;
import jetbrains.mps.workbench.action.BaseGroup;
import jetbrains.mps.workbench.action.ActionUtils;

public class EditorInternal_ActionGroup extends CurrentProjectGroup {
  public static Logger LOG = Logger.getLogger(EditorInternal_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.EditorInternal";

  public EditorInternal_ActionGroup(Project project) {
    super("Internal", ID, true, true, null, project);
    this.setPopup(true);
    try {
      this.add(new TestNodePathAction());
      this.add(new CellPropertiesAction());
      this.add(new ShowCellInCellExplorerAction());
      this.addSeparator();
      this.add(new PrintNodeIDAction());
      this.add(new PrintTextPresentationAction());
      this.add(new HighlightCellDependenciesAction());
      this.addSeparator();
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void adjust() {
    {
      BaseGroup gTo = ActionUtils.getGroup(EditorPopup_ActionGroup.ID);
      BaseGroup gWhat = ActionUtils.getGroup(EditorInternal_ActionGroup.ID);
      if (gTo == null || gWhat == null) {
        return;
      }
      gTo.add(gWhat);
    }
  }

}
