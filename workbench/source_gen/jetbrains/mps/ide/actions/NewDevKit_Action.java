package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.awt.Frame;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.newDevkitDialog.NewDevKitDialog;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.ide.projectPane.ProjectPane;

public class NewDevKit_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(NewDevKit_Action.class);

  private Frame frame;
  private MPSProject project;
  private Project ideaProject;

  public NewDevKit_Action() {
    super("DevKit", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "NewDevKit", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.frame = event.getData(MPSDataKeys.FRAME);
    if (this.frame == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.MPS_PROJECT);
    if (this.project == null) {
      return false;
    }
    this.ideaProject = event.getData(MPSDataKeys.PROJECT);
    if (this.ideaProject == null) {
      return false;
    }
    return true;
  }

  protected void cleanup() {
    super.cleanup();
    this.frame = null;
    this.project = null;
    this.ideaProject = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      NewDevKitDialog dialog = new NewDevKitDialog(NewDevKit_Action.this.frame);
      dialog.setProject(NewDevKit_Action.this.project);
      dialog.showDialog();
      DevKit devkit = dialog.getResult();
      if (devkit == null) {
        return;
      }
      ProjectPane projectPane = ProjectPane.getInstance(NewDevKit_Action.this.ideaProject);
      projectPane.rebuildTree();
      projectPane.selectModule(devkit);
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "NewDevKit", t);
      }
    }
  }
}
