package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.logging.Logger;

import javax.swing.Icon;

import jetbrains.mps.smodel.IOperationContext;

import java.awt.Frame;

import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.dialogs.MessageDialog;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.workbench.actions.language.OptimizeLanguageImportsAction;
import jetbrains.mps.project.Solution;
import jetbrains.mps.workbench.actions.solution.OptimizeSolutionImportsAction;

public class OptimizeProjectImports_Action extends GeneratedAction {
  private static final Logger LOG = Logger.getLogger(OptimizeProjectImports_Action.class);
  private static final Icon ICON = null;

  public IOperationContext context;
  public Frame frame;
  public MPSProject project;

  public OptimizeProjectImports_Action() {
    super("Optimize Imports", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull()
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull() AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "OptimizeProjectImports", t);
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.context = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.context == null) {
      return false;
    }
    this.frame = event.getData(MPSDataKeys.FRAME);
    if (this.frame == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.MPS_PROJECT);
    if (this.project == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      final String[] report = new String[1];
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {

        public void run() {
          report[0] = OptimizeProjectImports_Action.this.optimizeImports(OptimizeProjectImports_Action.this.context, OptimizeProjectImports_Action.this.project);
        }

      });
      new MessageDialog(OptimizeProjectImports_Action.this.frame, report[0]).showDialog();
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "OptimizeProjectImports", t);
    }
  }

  private String optimizeImports(IOperationContext c, MPSProject p) {
    StringBuilder sb = new StringBuilder();
    for (Language l : p.getProjectLanguages()) {
      sb.append(OptimizeLanguageImportsAction.optimizeImports(c, l));
    }
    for (Solution s : p.getProjectSolutions()) {
      sb.append(OptimizeSolutionImportsAction.optimizeImports(c, s));
    }
    return sb.toString();
  }


  @NotNull()
  public static String getActionId(Object... args) {
    StringBuilder res = new StringBuilder(500);
    res.append(OptimizeProjectImports_Action.class.getName());
    res.append("#");
    int i = 0;
    return res.toString();
  }

}
