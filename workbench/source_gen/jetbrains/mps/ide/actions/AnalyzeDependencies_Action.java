package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.workbench.MPSDataKeys;
import com.intellij.openapi.project.Project;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import jetbrains.mps.smodel.SModelDescriptor;
import java.util.List;
import jetbrains.mps.project.IModule;
import jetbrains.mps.project.MPSProject;

public class AnalyzeDependencies_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(AnalyzeDependencies_Action.class);

  public AnalyzeDependencies_Action() {
    super("Analyze Dependencies", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "AnalyzeDependencies", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("myModels", event.getData(MPSDataKeys.MODELS));
    MapSequence.fromMap(_params).put("myModules", event.getData(MPSDataKeys.MODULES));
    MapSequence.fromMap(_params).put("myMPSProject", event.getData(MPSDataKeys.MPS_PROJECT));
    MapSequence.fromMap(_params).put("myProject", event.getData(MPSDataKeys.PROJECT));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      AnalyzeDependencies_Tool tool = ((Project) MapSequence.fromMap(_params).get("myProject")).getComponent(ProjectPluginManager.class).getTool(AnalyzeDependencies_Tool.class);
      Scope scope = new Scope();
      for (SModelDescriptor model : ((List<SModelDescriptor>) MapSequence.fromMap(_params).get("myModels"))) {
        scope.add(model);
      }
      for (IModule module : ((List<IModule>) MapSequence.fromMap(_params).get("myModules"))) {
        scope.add(module);
      }
      tool.setContent(scope, ((MPSProject) MapSequence.fromMap(_params).get("myMPSProject")));
      tool.openToolLater(true);
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "AnalyzeDependencies", t);
      }
    }
  }
}
