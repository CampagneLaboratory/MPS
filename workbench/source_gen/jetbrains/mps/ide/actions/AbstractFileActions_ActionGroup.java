package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.vcs.actions.FileDeleteActionFixed;
import jetbrains.mps.workbench.action.BaseGroup;
import jetbrains.mps.workbench.action.ActionUtils;
import com.intellij.openapi.actionSystem.Constraints;
import com.intellij.openapi.actionSystem.Anchor;

public class AbstractFileActions_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(AbstractFileActions_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.AbstractFileActions";
  public static final String LABEL_ID_vcs = ID + "vcs";

  public AbstractFileActions_ActionGroup() {
    super("", ID);
    this.setIsInternal(false);
    this.setPopup(false);
    try {
      this.add(new FileDeleteActionFixed());
      this.addSeparator();
      this.addAnchor(AbstractFileActions_ActionGroup.LABEL_ID_vcs);
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void adjust() {
    {
      BaseGroup gToBase = ActionUtils.getGroup(FileActions_ActionGroup.ID);
      BaseGroup gWhat = ActionUtils.getGroup(AbstractFileActions_ActionGroup.ID);
      if (gToBase == null || gWhat == null) {
        return;
      }
      {
        String labelName = null;
        labelName = FileActions_ActionGroup.LABEL_ID_abstractFileActions;
        Constraints constraints = new Constraints(Anchor.AFTER, labelName);
        gToBase.add(gWhat, constraints);
      }
    }
    {
      BaseGroup gToBase = ActionUtils.getGroup(FolderActions_ActionGroup.ID);
      BaseGroup gWhat = ActionUtils.getGroup(AbstractFileActions_ActionGroup.ID);
      if (gToBase == null || gWhat == null) {
        return;
      }
      {
        String labelName = null;
        labelName = FolderActions_ActionGroup.LABEL_ID_abstractFileActions;
        Constraints constraints = new Constraints(Anchor.AFTER, labelName);
        gToBase.add(gWhat, constraints);
      }
    }
    {
      BaseGroup gToBase = ActionUtils.getGroup(ModuleActions_ActionGroup.ID);
      BaseGroup gWhat = ActionUtils.getGroup(AbstractFileActions_ActionGroup.ID);
      if (gToBase == null || gWhat == null) {
        return;
      }
      {
        String labelName = null;
        labelName = ModuleActions_ActionGroup.LABEL_ID_abstractFileActions;
        Constraints constraints = new Constraints(Anchor.AFTER, labelName);
        gToBase.add(gWhat, constraints);
      }
    }
  }

}
