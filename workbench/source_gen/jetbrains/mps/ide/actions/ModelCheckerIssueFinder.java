package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.ide.findusages.model.holders.ModelsHolder;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class ModelCheckerIssueFinder implements IFinder {
  public ModelCheckerIssueFinder() {
  }

  public SearchResults find(SearchQuery searchQuery, ProgressIndicator indicator) {
    assert searchQuery.getObjectHolder() instanceof ModelsHolder;
    ModelsHolder modelsHolder = (ModelsHolder)searchQuery.getObjectHolder();
    List<SModelDescriptor> modelDescriptors = modelsHolder.getObject();
    IOperationContext operationContext = modelsHolder.getOperationContext();

    ProgressContext progressContext = new ProgressContext(indicator, ListSequence.fromList(modelDescriptors).select(new ISelector<SModelDescriptor, String>() {
      public String select(SModelDescriptor it) {
        return ModelCheckerUtils.getTaskName(it);
      }
    }));
    SearchResults<ModelCheckerIssue> results = new SearchResults<ModelCheckerIssue>();

    for (SModelDescriptor modelDescriptor : ListSequence.fromList(modelDescriptors)) {
      long modelStartTime = System.currentTimeMillis();
      if (!(ModelCheckerUtils.checkModel(results, modelDescriptor, operationContext, progressContext))) {
        return results;
      }
      progressContext.saveEstimatedTime(modelStartTime);
    }

    return results;
  }
}
