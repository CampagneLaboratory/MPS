package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.logging.Logger;
import javax.swing.Icon;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.plugins.MacrosUtil;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.dialogs.ModelPropertiesDialog;

public class ModelProperties_Action extends GeneratedAction {
  private static final Logger LOG = Logger.getLogger(ModelProperties_Action.class);
  private static final Icon ICON = IconManager.loadIcon(MacrosUtil.expandPath("${mps_home}/workbench/source/jetbrains/mps/ide/projectPane/nodes/modelProperties.png", "jetbrains.mps.ide"), true);

  public Integer selectedCount;
  public SModelDescriptor model;
  public IOperationContext context;

  public ModelProperties_Action() {
    super("Model Properties", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull()
  public String getKeyStroke() {
    return "alt ENTER";
  }

  public void doUpdate(@NotNull() AnActionEvent event) {
    try {
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ModelProperties", t);
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.selectedCount = event.getData(MPSDataKeys.LOGICAL_VIEW_SELECTION_SIZE);
    if (this.selectedCount == null) {
      return false;
    }
    this.model = event.getData(MPSDataKeys.MODEL);
    if (this.model == null) {
      return false;
    }
    this.context = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.context == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      new ModelPropertiesDialog(ModelProperties_Action.this.model, ModelProperties_Action.this.context).showDialog();
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ModelProperties", t);
    }
  }

}
