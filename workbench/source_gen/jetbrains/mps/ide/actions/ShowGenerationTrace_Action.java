package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.project.MPSProject;
import java.awt.Frame;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.lang.generator.plugin.debug.GenerationTracer;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.workbench.MPSDataKeys;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class ShowGenerationTrace_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(ShowGenerationTrace_Action.class);

  private MPSProject project;
  private Frame frame;
  private List<SNode> nodes;

  public ShowGenerationTrace_Action() {
    super("Show Generation Trace", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      {
        GenerationTracer tracer = ShowGenerationTrace_Action.this.getGenTracer();
        event.getPresentation().setVisible(tracer.hasTracingData());
        if (ListSequence.fromList(ShowGenerationTrace_Action.this.nodes).isEmpty()) {
          event.getPresentation().setEnabled(false);
        } else {
          boolean hasTraceInputData = tracer.hasTraceInputData(SNodeOperations.getModel(ListSequence.fromList(ShowGenerationTrace_Action.this.nodes).first()).getSModelReference());
          event.getPresentation().setEnabled(hasTraceInputData);
        }
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "ShowGenerationTrace", t);
      }
      this.disable(event.getPresentation());
    }
  }

  @Override
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    {
      List<SNode> nodes = event.getData(MPSDataKeys.NODES);
      boolean error = false;
      if (nodes != null) {
      }
      if (error || nodes == null) {
        this.nodes = null;
      } else {
        this.nodes = ListSequence.fromListWithValues(new ArrayList<SNode>(), nodes);
      }
    }
    if (this.nodes == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.MPS_PROJECT);
    if (this.project == null) {
      return false;
    }
    this.frame = event.getData(MPSDataKeys.FRAME);
    if (this.frame == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      GenerationTracer tracer = ShowGenerationTrace_Action.this.getGenTracer();
      if (!(tracer.showTraceInputData(ListSequence.fromList(ShowGenerationTrace_Action.this.nodes).first()))) {
        JOptionPane.showMessageDialog(ShowGenerationTrace_Action.this.frame, "No tracing data available");
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "ShowGenerationTrace", t);
      }
    }
  }

  private GenerationTracer getGenTracer() {
    return ShowGenerationTrace_Action.this.project.getComponentSafe(GenerationTracer.class);
  }
}
