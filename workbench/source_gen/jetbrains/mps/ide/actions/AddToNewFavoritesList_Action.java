package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.plugins.MacrosUtil;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.List;
import javax.swing.tree.TreeNode;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.ide.projectView.ProjectView;
import com.intellij.ide.projectView.impl.AbstractProjectViewPane;
import jetbrains.mps.ide.projectPane.favorites.FavoritesProjectPane;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.projectPane.favorites.MPSFavoritesManager;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.ui.InputValidator;

public class AddToNewFavoritesList_Action extends GeneratedAction {
  private static final Icon ICON = IconManager.loadIcon(MacrosUtil.expandPath("${mps_home}/workbench/source/jetbrains/mps/ide/projectPane/other/addFavoritesList.png", "jetbrains.mps.ide"), true);
  protected static Log log = LogFactory.getLog(AddToNewFavoritesList_Action.class);

  private List<TreeNode> treeNodes;
  private Project project;

  public AddToNewFavoritesList_Action() {
    super("Add to New Favorites List", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      {
        ProjectView projectView = ProjectView.getInstance(AddToNewFavoritesList_Action.this.project);
        AbstractProjectViewPane pane = projectView.getCurrentProjectViewPane();
        if (pane instanceof FavoritesProjectPane) {
          event.getPresentation().setText("Send to New Favorites List");
        }
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "AddToNewFavoritesList", t);
      }
      this.disable(event.getPresentation());
    }
  }

  @Override
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.treeNodes = event.getData(MPSDataKeys.LOGICAL_VIEW_NODES);
    if (this.treeNodes == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      MPSFavoritesManager favoritesManager = AddToNewFavoritesList_Action.this.project.getComponent(MPSFavoritesManager.class);
      final String name = Messages.showInputDialog(AddToNewFavoritesList_Action.this.project, "Input new favorites list name", "Add New Favorites List", Messages.getInformationIcon(), "Unnamed", new InputValidator() {
        public boolean checkInput(String p0) {
          return true;
        }

        public boolean canClose(String p0) {
          return true;
        }
      });
      favoritesManager.addNewFavoritesList(name);
      ProjectView projectView = ProjectView.getInstance(AddToNewFavoritesList_Action.this.project);
      AbstractProjectViewPane pane = projectView.getCurrentProjectViewPane();
      List<Object> toMove = FavoritesUtil.getObjects(AddToNewFavoritesList_Action.this.treeNodes);
      if (pane instanceof FavoritesProjectPane) {
        favoritesManager.removeRoots(pane.getSubId(), toMove);
      }
      favoritesManager.addRoots(name, toMove);
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "AddToNewFavoritesList", t);
      }
    }
  }
}
