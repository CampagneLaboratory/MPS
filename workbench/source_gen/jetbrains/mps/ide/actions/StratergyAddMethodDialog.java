package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorContext;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.util.List;
import jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration;
import com.intellij.openapi.actionSystem.AnAction;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.INodeAdapter;
import jetbrains.mps.smodel.BaseAdapter;
import javax.swing.JComponent;
import com.intellij.openapi.actionSystem.ToggleAction;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import jetbrains.mps.baseLanguage.icons.Icons;
import jetbrains.mps.MPSProjectHolder;
import com.intellij.openapi.actionSystem.AnActionEvent;

public class StratergyAddMethodDialog extends BaseAddMethodDialog {
  private StratergyAddMethodDialog.ContainerStrategy myContainerStrategy;
  private StratergyAddMethodDialog.AdditionStrategy myAdditionStrategy;
  private StratergyAddMethodDialog.CollectMethodsStrategy myCollectStrategy;
  private StratergyAddMethodDialog.SortByNameAction mySortByNameAction;

  public StratergyAddMethodDialog(EditorContext context, Frame mainFrame, StratergyAddMethodDialog.ContainerStrategy containerStrategy, StratergyAddMethodDialog.CollectMethodsStrategy collectStrategy, StratergyAddMethodDialog.AdditionStrategy additionStrategy) throws HeadlessException {
    super(context, mainFrame, additionStrategy.getTitle());
    this.myContainerStrategy = containerStrategy;
    this.myCollectStrategy = collectStrategy;
    this.myAdditionStrategy = additionStrategy;
    this.mySortByNameAction = new StratergyAddMethodDialog.SortByNameAction(context.getOperationContext().getProject());
  }

  public List<BaseMethodDeclaration> collectImplementableMethods() {
    return this.myCollectStrategy.collectImplementableMethods(this.myContainerStrategy.getMainContainer());
  }

  protected List<AnAction> getToolbarActions() {
    List<AnAction> result = new ArrayList<AnAction>();
    result.addAll(super.getToolbarActions());
    result.add(this.mySortByNameAction);
    return result;
  }

  protected int compareMethods(BaseMethodDeclaration m1, BaseMethodDeclaration m2) {
    if (this.mySortByNameAction.isSelected()) {
      SNode n1 = m1.getNode();
      int i1 = this.myContainerStrategy.getContainer(n1).getIndexOfChild(n1);
      SNode n2 = m2.getNode();
      int i2 = this.myContainerStrategy.getContainer(n2).getIndexOfChild(n2);
      return i1 - i2;
    } else {
      String n1 = "" + m1.getName();
      String n2 = "" + m2.getName();
      return n1.compareTo(n2);
    }
  }

  public List<BaseMethodDeclaration> doAddMethods(List<BaseAddMethodDialog.MethodTreeNode> methodNodes) {
    List<BaseMethodDeclaration> result = new ArrayList<BaseMethodDeclaration>();
    List<SNode> methods = new ArrayList<SNode>();
    for (BaseAddMethodDialog.MethodTreeNode methodNode : methodNodes) {
      methods.add(methodNode.getMethod().getNode());
    }
    List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition> addedMethods = this.myContainerStrategy.doAddMethods(methods);
    for (StratergyAddMethodDialog.ContainerStrategy.MethodAddition added : addedMethods) {
      result.add(added.getResult());
      this.myAdditionStrategy.updateMethod(added.getSource().getNode(), added.getResult().getNode());
    }
    return result;
  }

  public INodeAdapter getContainer(BaseMethodDeclaration bm) {
    return this.myContainerStrategy.getContainer(BaseAdapter.fromAdapter(bm)).getAdapter();
  }

  protected boolean extendsContainer(INodeAdapter containerThatExtends, INodeAdapter extendedContainer) {
    return this.myContainerStrategy.extendsContainer(containerThatExtends, extendedContainer);
  }

  protected int compareContainers(INodeAdapter c1, INodeAdapter c2) {
    return this.myContainerStrategy.compareContainers(c1, c2);
  }

  protected JComponent createAdditionalOptionsComponent() {
    return this.myAdditionStrategy.createAdditionalOptionsComponent();
  }

  public static interface ContainerStrategy {
    public SNode getMainContainer();
    public SNode getContainer(SNode methodDecl);
    public List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition> doAddMethods(List<SNode> nodes);
    public boolean extendsContainer(INodeAdapter containerThatExtends, INodeAdapter extendedContainer);
    public int compareContainers(INodeAdapter c1, INodeAdapter c2);
    public static class MethodAddition {
      private BaseMethodDeclaration mySource;
      private BaseMethodDeclaration myResult;

      public MethodAddition(BaseMethodDeclaration source, BaseMethodDeclaration result) {
        this.mySource = source;
        this.myResult = result;
      }

      public BaseMethodDeclaration getSource() {
        return this.mySource;
      }

      public BaseMethodDeclaration getResult() {
        return this.myResult;
      }
    }

  }

  public static interface AdditionStrategy {
    public String getTitle();
    public JComponent createAdditionalOptionsComponent();
    public void updateMethod(SNode sourceMethod, SNode method);
  }

  public static interface CollectMethodsStrategy {
    public List<BaseMethodDeclaration> collectImplementableMethods(SNode container);
  }

  private class SortByNameAction extends ToggleAction {
    private MPSProject myProject;

    private SortByNameAction(Project p) {
      super("Sort Alphabetically");
      this.getTemplatePresentation().setIcon(Icons.SORT_ALPHABETICALLY_ICON);
      this.myProject = p.getComponent(MPSProjectHolder.class).getMPSProject();
    }

    public boolean isSelected(AnActionEvent e) {
      return this.isSelected();
    }

    public void setSelected(AnActionEvent e, boolean state) {
      this.setSelected(state);
      StratergyAddMethodDialog.this.refreshTree();
    }

    public boolean isSelected() {
      return this.myProject.getComponent(MPSProjectHolder.class).getMPSProject().getPluginManager().getPrefsComponent(PersistentOptions_PreferencesComponent.class).getStateObject().sortAlphabetically;
    }

    public void setSelected(boolean state) {
      this.myProject.getComponent(MPSProjectHolder.class).getMPSProject().getPluginManager().getPrefsComponent(PersistentOptions_PreferencesComponent.class).getStateObject().sortAlphabetically = state;
    }
  }
}
