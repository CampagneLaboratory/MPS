package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.tool.GeneratedTool;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.icons.IconManager;
import com.intellij.openapi.wm.ToolWindowAnchor;
import javax.swing.JComponent;
import jetbrains.mps.MPSProjectHolder;
import jetbrains.mps.smodel.SModelDescriptor;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.projectPane.Icons;
import jetbrains.mps.project.IModule;
import com.intellij.ui.content.ContentManager;
import com.intellij.ui.content.Content;
import javax.swing.JPanel;
import javax.swing.Icon;

public class ModelCheckerTool_Tool extends GeneratedTool {
  private MPSProject myProject;

  public ModelCheckerTool_Tool(Project project) {
    super(project, "Model Checker", -1, IconManager.EMPTY_ICON, ToolWindowAnchor.BOTTOM, false);
  }

  public JComponent getComponent() {
    return null;
  }

  public void init(Project project) {
    ModelCheckerTool_Tool.this.myProject = project.getComponent(MPSProjectHolder.class).getMPSProject();
  }

  public void checkModel(SModelDescriptor modelDescriptor) {
    ModelCheckerViewer newViewer = new ModelCheckerViewer(ModelCheckerTool_Tool.this.myProject, ModelCheckerTool_Tool.this);
    newViewer.checkModel(modelDescriptor);
    ModelCheckerTool_Tool.this.processCheckResults(newViewer, modelDescriptor.getName(), IconManager.getIconFor(modelDescriptor));
  }

  public void checkModels(List<SModelDescriptor> modelDescriptors) {
    OldModelCheckerViewer newViewer = new OldModelCheckerViewer(ModelCheckerTool_Tool.this.myProject, ModelCheckerTool_Tool.this);
    if (newViewer.checkModels(modelDescriptors)) {
      ModelCheckerTool_Tool.this.processCheckResults(newViewer, ListSequence.fromList(modelDescriptors).count() + " models", Icons.MODEL_ICON);
    }
  }

  public void checkModule(IModule module) {
    OldModelCheckerViewer newViewer = new OldModelCheckerViewer(ModelCheckerTool_Tool.this.myProject, ModelCheckerTool_Tool.this);
    if (newViewer.checkModule(module)) {
      ModelCheckerTool_Tool.this.processCheckResults(newViewer, module.getModuleFqName(), IconManager.getIconFor(module));
    }
  }

  public void checkModules(List<IModule> modules) {
    OldModelCheckerViewer newViewer = new OldModelCheckerViewer(ModelCheckerTool_Tool.this.myProject, ModelCheckerTool_Tool.this);
    if (newViewer.checkModules(modules)) {
      // TODO icon 
      ModelCheckerTool_Tool.this.processCheckResults(newViewer, ListSequence.fromList(modules).count() + " modules", Icons.MODULE_DEPENDENCIES_ICON);
    }
  }

  public void checkProject(MPSProject mpsProject) {
    OldModelCheckerViewer newViewer = new OldModelCheckerViewer(ModelCheckerTool_Tool.this.myProject, ModelCheckerTool_Tool.this);
    if (newViewer.checkProject(mpsProject)) {
      ModelCheckerTool_Tool.this.processCheckResults(newViewer, mpsProject.getProjectDescriptor().getName(), Icons.PROJECT_ICON);
    }
  }

  public void closeTab(JComponent component) {
    ContentManager contentManager = ModelCheckerTool_Tool.this.getContentManager();
    Content content = contentManager.getContent(component);
    contentManager.removeContent(content, true);
  }

  private void closeCurrentTabIfUnpinned() {
    ContentManager contentManager = ModelCheckerTool_Tool.this.getContentManager();
    Content selectedContent = contentManager.getSelectedContent();
    if (selectedContent == null) {
      return;
    }
    if (!(selectedContent.isPinned())) {
      contentManager.removeContent(selectedContent, true);
    }
  }

  private void processCheckResults(JPanel newViewer, String tabName, Icon tabIcon) {
    ModelCheckerTool_Tool.this.closeCurrentTabIfUnpinned();
    ModelCheckerTool_Tool.this.addContent(newViewer, tabName, tabIcon, true);
    ModelCheckerTool_Tool.this.setSelectedComponent(newViewer);
  }
}
