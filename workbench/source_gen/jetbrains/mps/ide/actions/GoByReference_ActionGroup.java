package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.List;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.DataContext;
import com.intellij.ide.DataManager;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.resolve.Resolver;
import jetbrains.mps.workbench.editors.MPSEditorOpener;
import org.jetbrains.annotations.Nullable;

public class GoByReference_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(GoByReference_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.GoByReference";

  private Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());
  private List<AnAction> myAllActions;

  public GoByReference_ActionGroup() {
    super("Go by Reference", ID);
    this.setIsAlwaysVisible(false);
    this.setIsInternal(false);
    this.setPopup(true);
    try {
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void doUpdate(AnActionEvent event) {
    try {
      GoByReference_ActionGroup.this.removeAll();
      DataContext dc = DataManager.getInstance().getDataContext();
      final MPSProject project = MPSDataKeys.MPS_PROJECT.getData(dc);
      final IOperationContext context = MPSDataKeys.OPERATION_CONTEXT.getData(dc);
      SNode node = MPSDataKeys.NODE.getData(dc);
      if (node == null || context == null) {
        GoByReference_ActionGroup.this.disable(event.getPresentation());
        return;
      }
      List<SReference> refs = node.getReferences();
      if (refs.size() == 0) {
        GoByReference_ActionGroup.this.add(new StringAction("No References"));
        return;
      }
      int addedActionsCount = 0;
      for (final SReference ref : refs) {
        final SNode targetNode = ref.getTargetNode();
        if (targetNode == null) {
          // we should not go by bad reference. We'll try to resolve it instead
          String actionText = "Bad reference: [" + ref.getRole() + "]" + ref.getResolveInfo();
          GoByReference_ActionGroup.this.add(new BaseAction(actionText) {
            protected void doExecute(AnActionEvent e) {
              Resolver.resolve1(ref, context);
              String role = ref.getRole();
              SNode sourceNode = ref.getSourceNode();
              SReference newRef = sourceNode.getReference(role);
              assert newRef != null;
              SNode newTargetNode = ref.getTargetNode();
              if (newTargetNode == null) {
                return;
              }
              project.getComponentSafe(MPSEditorOpener.class).editNode(newTargetNode, context);
            }
          });
        } else {
          String actionText = "[" + ref.getRole() + "]" + targetNode.getDebugText();
          GoByReference_ActionGroup.this.add(new BaseAction(actionText) {
            protected void doExecute(AnActionEvent event) {
              context.getComponent(MPSEditorOpener.class).editNode(targetNode, context);
            }
          });
          addedActionsCount++ ;
        }
      }
      if (addedActionsCount == 0) {
        GoByReference_ActionGroup.this.add(new StringAction("(Only Bad References)"));
      }
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }

  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }

  public void adjust() {
    this.insertGroupIntoAnother(EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_goByRef);
  }
}
