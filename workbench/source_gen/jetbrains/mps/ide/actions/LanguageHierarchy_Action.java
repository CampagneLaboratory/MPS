package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.logging.Logger;
import javax.swing.Icon;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.action.ActionEventData;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.workbench.languagesFs.MPSLanguageVirtualFile;
import jetbrains.mps.workbench.languagesFs.MPSLanguagesVirtualFileSystem;
import com.intellij.openapi.fileEditor.FileEditorManager;
import com.intellij.openapi.fileEditor.FileEditor;
import jetbrains.mps.workbench.editors.MPSLanguageEditor;

public class LanguageHierarchy_Action extends GeneratedAction {
  private static final Logger LOG = Logger.getLogger(LanguageHierarchy_Action.class);
  private static final Icon ICON = null;

  public Project project;

  public LanguageHierarchy_Action() {
    super("Language Diagram", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull()
  public String getKeyStroke() {
    return "";
  }

  public boolean isApplicable(AnActionEvent event) {
    ActionEventData data = new ActionEventData(event);
    IModule module = data.getModule();
    if (module == null) {
      return false;
    }
    if (!(module instanceof Language)) {
      return false;
    }
    return true;
  }

  public void doUpdate(@NotNull() AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "LanguageHierarchy", t);
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      ActionEventData data = new ActionEventData(event);
      Language language = (Language)data.getModule();
      MPSLanguageVirtualFile file = MPSLanguagesVirtualFileSystem.getInstance().getFileFor(language);
      FileEditorManager editorManager = FileEditorManager.getInstance(LanguageHierarchy_Action.this.project);
      FileEditor[] res = editorManager.openFile(file, true);
      MPSLanguageEditor languageEditor = (MPSLanguageEditor)res[0];
      languageEditor.getComponent().requestFocus();
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "LanguageHierarchy", t);
    }
  }

}
