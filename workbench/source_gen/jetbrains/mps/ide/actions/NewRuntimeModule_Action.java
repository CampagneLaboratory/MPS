package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.project.IModule;
import java.awt.Frame;
import com.intellij.openapi.project.Project;
import javax.swing.tree.TreeNode;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.workbench.MPSDataKeys;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.workbench.choose.modules.BaseModuleModel;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.internal.collections.runtime.ISelector;
import com.intellij.navigation.NavigationItem;
import jetbrains.mps.workbench.choose.modules.BaseModuleItem;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.ide.ui.MPSTreeNode;
import com.intellij.ide.util.gotoByName.ChooseByNamePopup;
import jetbrains.mps.workbench.choose.base.FakePsiContext;
import com.intellij.ide.util.gotoByName.ChooseByNamePopupComponent;
import com.intellij.openapi.application.ModalityState;

public class NewRuntimeModule_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(NewRuntimeModule_Action.class);

  private IModule contextModule;
  private Frame frame;
  private Project project;
  private TreeNode treeNode;

  public NewRuntimeModule_Action() {
    super("New Runtime Module", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public boolean isApplicable(AnActionEvent event) {
    return NewRuntimeModule_Action.this.contextModule instanceof Language;
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "NewRuntimeModule", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.contextModule = event.getData(MPSDataKeys.CONTEXT_MODULE);
    if (this.contextModule == null) {
      return false;
    }
    this.frame = event.getData(MPSDataKeys.FRAME);
    if (this.frame == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    this.treeNode = event.getData(MPSDataKeys.LOGICAL_VIEW_NODE);
    if (this.treeNode == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      final List<IModule> modules = ListSequence.fromList(new ArrayList<IModule>());
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          ListSequence.fromList(modules).addSequence(ListSequence.fromList(MPSModuleRepository.getInstance().getAllModules()));
        }
      });
      BaseModuleModel baseSolutionModel = new BaseModuleModel(NewRuntimeModule_Action.this.project, "runtime module") {
        public ModuleReference[] find(IScope p0) {
          return ListSequence.fromList(modules).<ModuleReference>select(new ISelector<IModule, ModuleReference>() {
            public ModuleReference select(IModule it) {
              return it.getModuleReference();
            }
          }).toGenericArray(ModuleReference.class);
        }

        public NavigationItem doGetNavigationItem(final ModuleReference module) {
          return new BaseModuleItem(module) {
            public void navigate(boolean p0) {
              if (module == null) {
                return;
              }
              Language language = (Language) NewRuntimeModule_Action.this.contextModule;
              Dependency dependency = new Dependency();
              dependency.setModuleRef(module);
              language.getModuleDescriptor().getRuntimeModules().add(dependency);
              language.save();
              ((MPSTreeNode) NewRuntimeModule_Action.this.treeNode).getTree().rebuildLater();
            }
          };
        }
      };
      ChooseByNamePopup popup = ChooseByNamePopup.createPopup(NewRuntimeModule_Action.this.project, baseSolutionModel, new FakePsiContext());
      popup.invoke(new ChooseByNamePopupComponent.Callback() {
        public void elementChosen(Object p0) {
          ((NavigationItem) p0).navigate(true);
        }
      }, ModalityState.current(), true);
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "NewRuntimeModule", t);
      }
    }
  }
}
