package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.awt.Frame;
import jetbrains.mps.project.IModule;
import com.intellij.openapi.project.Project;
import javax.swing.tree.TreeNode;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.smodel.Language;
import java.util.List;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.workbench.dialogs.choosers.CommonChoosers;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.smodel.IScope;
import javax.swing.JOptionPane;
import jetbrains.mps.smodel.SModelRepository;

public class AddAccessoryModel_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(AddAccessoryModel_Action.class);

  private Frame frame;
  private IModule module;
  private Project project;
  private TreeNode treeNode;

  public AddAccessoryModel_Action() {
    super("Add Accessory Model", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "AddAccessoryModel", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.frame = event.getData(MPSDataKeys.FRAME);
    if (this.frame == null) {
      return false;
    }
    this.module = event.getData(MPSDataKeys.CONTEXT_MODULE);
    if (this.module == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    this.treeNode = event.getData(MPSDataKeys.LOGICAL_VIEW_NODE);
    if (this.treeNode == null) {
      return false;
    }
    return true;
  }

  protected void cleanup() {
    super.cleanup();
    this.frame = null;
    this.module = null;
    this.project = null;
    this.treeNode = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      final Language language = ((Language) AddAccessoryModel_Action.this.module);
      final List<SModelReference> models = ListSequence.fromList(new ArrayList<SModelReference>());
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          for (SModelDescriptor md : GlobalScope.getInstance().getModelDescriptors()) {
            ListSequence.fromList(models).addElement(md.getSModelReference());
          }
        }
      });
      final SModelReference result = CommonChoosers.showDialogModelChooser(AddAccessoryModel_Action.this.frame, models, null);
      if (result == null) {
        return;
      }
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          LanguageDescriptor descriptor;
          descriptor = language.getModuleDescriptor();
          descriptor.getAccessoryModels().add(result);
          language.setLanguageDescriptor(descriptor, true);
          IScope scope = language.getScope();
          if (scope.getModelDescriptor(result) == null) {
            int res = JOptionPane.showConfirmDialog(AddAccessoryModel_Action.this.frame, "<html>Model <b>" + result.getLongName() + "</b> is added to accessories</html>\n\n" + "Do you want to automatically the module add to dependency?", "Add Dependency", JOptionPane.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION) {
              SModelDescriptor md = SModelRepository.getInstance().getModelDescriptor(result);
              language.addDependency(md.getModule().getModuleReference(), false);
            }
          }
          language.save();
        }
      });
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "AddAccessoryModel", t);
      }
    }
  }
}
