package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.DataContext;
import com.intellij.ide.DataManager;

import javax.swing.tree.DefaultMutableTreeNode;

import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.projectPane.ProjectPane;
import jetbrains.mps.ide.ui.smodel.PackageNode;

import java.awt.Frame;

import jetbrains.mps.workbench.actions.model.CreateRootNodeGroup;
import com.intellij.openapi.actionSystem.Separator;
import jetbrains.mps.workbench.actions.nodes.PasteNodeAction;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;

import java.util.Set;

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.ui.smodel.RenamePackageAction;

public class PackageActions_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(PackageActions_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.PackageActions";

  public PackageActions_ActionGroup() {
    super("", ID);
    this.setIsInternal(false);
    this.setPopup(false);
    try {
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void doUpdate(AnActionEvent event) {
    try {
      PackageActions_ActionGroup.this.removeAll();
      DataContext dataContext = DataManager.getInstance().getDataContext();
      DefaultMutableTreeNode selectedNode = MPSDataKeys.PROJECT.getData(dataContext).getComponent(ProjectPane.class).getSelectedNode();
      assert selectedNode instanceof PackageNode;
      final PackageNode node = (PackageNode) selectedNode;
      Frame f = MPSDataKeys.FRAME.getData(dataContext);
      this.add(new CreateRootNodeGroup(node.getPackage()));
      this.add(new Separator());
      this.add(new PasteNodeAction());
      this.add(new Separator());
      final Wrappers._T<Set<SNode>> nodes = new Wrappers._T<Set<SNode>>();
      ModelAccess.instance().runReadAction(new Runnable() {

        public void run() {
          nodes.value = node.getNodesUnderPackage();
        }

      });
      this.add(new RenamePackageAction(f, node.getPackage(), nodes.value));
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void adjust() {
  }

}
