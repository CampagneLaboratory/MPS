package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.logging.Logger;
import javax.swing.Icon;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.projectPane.ProjectPane;
import jetbrains.mps.ide.ui.MPSTree;
import javax.swing.tree.TreePath;
import jetbrains.mps.ide.ui.MPSTreeNode;

public class ExpandNode_Action extends GeneratedAction {
  public static final Logger LOG = Logger.getLogger(ExpandNode_Action.class);
  public static final Icon ICON = null;

  public IOperationContext context;

  public ExpandNode_Action() {
    super("Expand All", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull()
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull() AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ExpandNode", t);
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    try {
      this.context = event.getData(MPSDataKeys.OPERATION_CONTEXT);
      if (this.context == null) {
        return false;
      }
    } catch (Throwable t) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      ProjectPane pane = this.context.getComponent(ProjectPane.class);
      MPSTree tree = pane.getTree();
      TreePath path = tree.getSelectionPath();
      if (path == null) {
        return;
      }
      tree.expandAll((MPSTreeNode)path.getLastPathComponent());
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ExpandNode", t);
    }
  }

}
