package jetbrains.mps.ide.actions;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.library.contributor.LibraryContributor;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.plugins.PluginUtil;
import jetbrains.mps.plugins.PluginContributor;
import jetbrains.mps.plugins.applicationplugins.BaseApplicationPlugin;
import jetbrains.mps.plugins.projectplugins.BaseProjectPlugin;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.library.LibraryInitializer;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.ide.plugins.IdeaPluginDescriptor;
import com.intellij.openapi.extensions.PluginId;
import com.intellij.ide.plugins.PluginManager;
import org.jetbrains.annotations.Nullable;
import java.io.File;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.InputStreamReader;
import org.apache.commons.lang.StringUtils;
import java.io.IOException;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class Ide_PluginInitializer implements ApplicationComponent {
  protected static Log log = LogFactory.getLog(Ide_PluginInitializer.class);

  private final LibraryContributor myContributor = new Ide_PluginInitializer.MyLibraryContributor();
  private List<String> myLibraries = ListSequence.fromList(new ArrayList<String>());

  public Ide_PluginInitializer() {
    PluginUtil.addPluginContributor(new PluginContributor() {
      public BaseApplicationPlugin createApplicationPlugin() {
        return new Ide_ApplicationPlugin();
      }

      public BaseProjectPlugin createProjectPlugin() {
        return new Ide_ProjectPlugin();
      }
    });
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    // module short names could be the same for different modules => use full name 
    return this.getClass().getName();
  }

  public void initComponent() {
    ListSequence.fromList(myLibraries).addSequence(ListSequence.fromList(getLibrariesToLoad()));
    LibraryInitializer.getInstance().addContributor(myContributor);
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        LibraryInitializer.getInstance().update();
      }
    });
  }

  public void disposeComponent() {
    LibraryInitializer.getInstance().removeContributor(myContributor);
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        LibraryInitializer.getInstance().update();
      }
    });
  }

  private IdeaPluginDescriptor getIdeaPlugin() {
    String className = this.getClass().getName();
    PluginId pluginId = PluginManager.getPluginByClassName(className);
    if (pluginId == null) {
      // <node> 
      return null;
    }
    return PluginManager.getPlugin(pluginId);
  }

  @Nullable
  private File getPluginPath() {
    IdeaPluginDescriptor descriptor = getIdeaPlugin();
    if (descriptor == null) {
      return null;
    }
    return descriptor.getPath();
  }

  private List<String> getLibrariesToLoad() {
    List<String> result = ListSequence.fromList(new ArrayList<String>());

    IdeaPluginDescriptor plugin = getIdeaPlugin();
    if (plugin == null) {
      return result;
    }

    InputStream stream = plugin.getPluginClassLoader().getResourceAsStream("libraries");
    LineNumberReader reader = new LineNumberReader(new InputStreamReader(stream));
    try {
      while (true) {
        String line = reader.readLine();
        if (line == null) {
          break;
        }
        if (StringUtils.isNotEmpty(line)) {
          ListSequence.fromList(result).addElement(line);
        }
      }
    } catch (IOException e) {
      if (log.isErrorEnabled()) {
        log.error("", e);
      }
    }
    return result;
  }

  public class MyLibraryContributor implements LibraryContributor {
    public MyLibraryContributor() {
    }

    public Set<String> getLibraries() {
      final File pluginPath = getPluginPath();
      if (pluginPath == null) {
        return SetSequence.fromSet(new HashSet<String>());
      }
      Set<String> result = SetSequence.fromSet(new HashSet<String>());
      SetSequence.fromSet(result).addSequence(ListSequence.fromList(myLibraries).select(new ISelector<String, String>() {
        public String select(String it) {
          return pluginPath.getAbsolutePath() + File.separator + it;
        }
      }));
      return result;
    }
  }
}
