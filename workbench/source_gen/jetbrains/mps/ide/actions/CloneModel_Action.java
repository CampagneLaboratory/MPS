package jetbrains.mps.ide.actions;

/*Generated by MPS */

import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.ide.dialogs.CloneModelDialog;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.workbench.action.ActionEventData;
import org.jetbrains.annotations.NotNull;

import javax.swing.Icon;

public class CloneModel_Action extends GeneratedAction {
  public static final Logger LOG = Logger.getLogger(CloneModel_Action.class);
  public static final Icon ICON = null;

  public SModelDescriptor model;
  public IOperationContext context;

  public CloneModel_Action() {
    super("Clone Model", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull()
  public String getKeyStroke() {
    return "";
  }

  public boolean isApplicable(AnActionEvent event) {
    if (!(new ActionEventData(event).hasOneSelectedItem())) {
      return false;
    }
    IModule module = CloneModel_Action.this.model.getModule();
    if (module instanceof Language) {
      Language language = (Language) module;
      return language.getAspectForModel(CloneModel_Action.this.model) == null;
    } else {
      return true;
    }
  }

  public void doUpdate(@NotNull()AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "CloneModel", t);
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.model = event.getData(MPSDataKeys.MODEL_DESCRIPTOR);
    if (this.model == null) {
      return false;
    }
    this.context = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.context == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      CloneModelDialog dialog = new CloneModelDialog(CloneModel_Action.this.model, CloneModel_Action.this.context);
      dialog.showDialog();
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "CloneModel", t);
    }
  }

}
