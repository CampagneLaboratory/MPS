package jetbrains.mps.ide.actions;

/*Generated by MPS */

import javax.swing.JPanel;
import jetbrains.mps.smodel.SModel;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.awt.BorderLayout;
import javax.swing.Icon;
import jetbrains.mps.ide.icons.IconManager;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import java.awt.GridLayout;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.intellij.ui.RoundedLineBorder;
import java.awt.Color;
import javax.swing.JComponent;
import jetbrains.mps.refactoring.framework.IRefactoring;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import javax.swing.JButton;

public class RefactoringPanel {
  private JPanel myComponent;
  private SModel myModel;
  private List<SNode> myRefactorings;

  public RefactoringPanel(SModel model, List<SNode> refactorings) {
    this.myModel = model;
    this.myRefactorings = refactorings;
    this.initComponent();
  }

  private void initComponent() {
    this.myComponent = new JPanel(new BorderLayout());
    Icon modelIcon = IconManager.getIconFor(this.myModel.getModelDescriptor());
    String modelName = "<html><b>" + this.myModel.getLongName() + "</b></html>";
    JLabel modelNameLabel = new JLabel(modelName, modelIcon, SwingConstants.LEADING);
    this.myComponent.add(modelNameLabel, BorderLayout.PAGE_START);
    List<RefactoringContext> refactoringsContextList = this.myModel.getRefactoringHistory().getRefactoringContexts();
    JPanel mainPanel = new JPanel(new GridLayout(ListSequence.fromList(refactoringsContextList).count(), 1));
    mainPanel.setBorder(new RoundedLineBorder(Color.BLACK));
    for (RefactoringContext refactoringContext : refactoringsContextList) {
      this.addRefactoringItem(refactoringContext, mainPanel);
    }
    this.myComponent.add(mainPanel, BorderLayout.CENTER);
  }

  private void addRefactoringItem(RefactoringContext refactoringContext, JComponent component) {
    JComponent itemPanel = new JPanel(new GridLayout(1, 2));
    IRefactoring refactoring = refactoringContext.getRefactoring();
    String name = refactoring.getUserFriendlyName();
    JLabel refactoringName = new JLabel(name);
    SNode refactoringNode = null;
    for (SNode node : this.myRefactorings) {
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.refactoring.structure.Refactoring")) {
        if (EqualUtil.equals(SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.refactoring.structure.Refactoring"), "userFriendlyName"), name)) {
          refactoringNode = SNodeOperations.cast(node, "jetbrains.mps.lang.refactoring.structure.Refactoring");
          break;
        }
      }
    }
    itemPanel.add(refactoringName);
    if ((refactoringNode != null)) {
      JButton button = new JButton("Go To " + SPropertyOperations.getString(refactoringNode, "name"));
      button.setIcon(IconManager.getIconFor(refactoringNode));
      itemPanel.add(button);
    } else {
      JLabel infoLabel = new JLabel("<html><i>action not found</i></html>");
      itemPanel.add(infoLabel);
    }
    component.add(itemPanel);
  }

  public JComponent getComponent() {
    return this.myComponent;
  }
}
