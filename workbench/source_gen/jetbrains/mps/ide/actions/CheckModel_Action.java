package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.smodel.SModelDescriptor;
import java.util.List;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;

public class CheckModel_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(CheckModel_Action.class);

  private SModelDescriptor model;
  private List<SModelDescriptor> models;
  private MPSProject mpsProject;
  private IOperationContext operationContext;

  public CheckModel_Action() {
    super("Check Model", "Check model for unresolved references and typesystem rules", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      {
        String whatToCheck = "Model";
        if (CheckModel_Action.this.models.size() > 1) {
          whatToCheck = CheckModel_Action.this.models.size() + " Models";
        }
        event.getPresentation().setText("Check " + whatToCheck);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "CheckModel", t);
      }
      this.disable(event.getPresentation());
    }
  }

  @Override
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.model = event.getData(MPSDataKeys.MODEL);
    if (this.model == null) {
      return false;
    }
    this.models = event.getData(MPSDataKeys.MODELS);
    if (this.models == null) {
      return false;
    }
    this.mpsProject = event.getData(MPSDataKeys.MPS_PROJECT);
    if (this.mpsProject == null) {
      return false;
    }
    this.operationContext = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.operationContext == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      if (CheckModel_Action.this.models.size() > 1) {
        CheckModel_Action.this.mpsProject.getPluginManager().getTool(ModelCheckerTool_Tool.class).checkModels(CheckModel_Action.this.models, CheckModel_Action.this.operationContext, true);
      } else {
        CheckModel_Action.this.mpsProject.getPluginManager().getTool(ModelCheckerTool_Tool.class).checkModel(CheckModel_Action.this.model, CheckModel_Action.this.operationContext, true);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "CheckModel", t);
      }
    }
  }
}
