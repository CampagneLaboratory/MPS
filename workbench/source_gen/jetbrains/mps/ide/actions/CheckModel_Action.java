package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.logging.Logger;
import javax.swing.Icon;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.modelchecker.ModelCheckerUtil;
import jetbrains.mps.util.CollectionUtil;
import jetbrains.mps.ide.progress.NullAdaptiveProgressMonitor;

public class CheckModel_Action extends GeneratedAction {
  public static final Logger LOG = Logger.getLogger(CheckModel_Action.class);
  public static final Icon ICON = null;

  public Project project;
  public SModelDescriptor model;
  public IOperationContext operationContext;

  public CheckModel_Action() {
    super("Check Model", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull()
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull() AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "CheckModel", t);
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    this.model = event.getData(MPSDataKeys.MODEL_DESCRIPTOR);
    if (this.model == null) {
      return false;
    }
    this.operationContext = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.operationContext == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      final IOperationContext context = CheckModel_Action.this.operationContext;
      final SModelDescriptor model = CheckModel_Action.this.model;
      ProgressManager.getInstance().run(new Task.Modal(CheckModel_Action.this.project, "Checking", false) {

        public void run(@NotNull() ProgressIndicator indicator) {
          indicator.setIndeterminate(true);
          ModelAccess.instance().runReadAction(new Runnable() {

            public void run() {
              ModelCheckerUtil.checkModels(context, CollectionUtil.asSet(model), new NullAdaptiveProgressMonitor());
            }

          });
        }

      });
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "CheckModel", t);
    }
  }

}
