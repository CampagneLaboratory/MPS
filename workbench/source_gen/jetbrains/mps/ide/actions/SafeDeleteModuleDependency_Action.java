package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.project.IModule;
import com.intellij.openapi.project.Project;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import java.util.List;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.ModelAccess;

public class SafeDeleteModuleDependency_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(SafeDeleteModuleDependency_Action.class);

  public SafeDeleteModuleDependency_Action() {
    super("Safe Delete Dependency", "Safe delete module dependency", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "SafeDeleteModuleDependency", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("to", event.getData(MPSDataKeys.MODULE));
    if (MapSequence.fromMap(_params).get("to") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("from", event.getData(MPSDataKeys.CONTEXT_MODULE));
    if (MapSequence.fromMap(_params).get("from") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("mpsProject", event.getData(MPSDataKeys.MPS_PROJECT));
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.PROJECT));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      SearchResults results = DependenciesUtil.analyzeDependencies(((IModule) MapSequence.fromMap(_params).get("from")), ((IModule) MapSequence.fromMap(_params).get("to")), ((Project) MapSequence.fromMap(_params).get("project")), ((MPSProject) MapSequence.fromMap(_params).get("mpsProject")), false);
      if (results.getSearchResults().isEmpty()) {
        SafeDeleteModuleDependency_Action.this.removeDependency(_params);
      } else {
        int res = Messages.showDialog("Can't safe delete dependency", "Safe delete impossible", new String[]{"View dependencies", "Delete anyway", "Cancel"}, 0, null);
        if (res == 1) {
          SafeDeleteModuleDependency_Action.this.removeDependency(_params);
        } else if (res == 0) {
          ((Project) MapSequence.fromMap(_params).get("project")).getComponent(ProjectPluginManager.class).getTool(AnalyzeDependencies_Tool.class).openToolLater(true);
        }
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "SafeDeleteModuleDependency", t);
      }
    }
  }

  private void removeDependency(final Map<String, Object> _params) {
    final ModuleDescriptor descriptor = ((IModule) MapSequence.fromMap(_params).get("from")).getModuleDescriptor();
    List<Dependency> dependencies = descriptor.getDependencies();
    ListSequence.fromList(dependencies).removeWhere(new IWhereFilter<Dependency>() {
      public boolean accept(Dependency it) {
        return it.getModuleRef().equals(((IModule) MapSequence.fromMap(_params).get("to")).getModuleReference());
      }
    });
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        ((IModule) MapSequence.fromMap(_params).get("from")).setModuleDescriptor(descriptor, false);
      }
    });
    ModuleDependenies_Tool tool = ((Project) MapSequence.fromMap(_params).get("project")).getComponent(ProjectPluginManager.class).getTool(ModuleDependenies_Tool.class);
    tool.resetAll();
  }
}
