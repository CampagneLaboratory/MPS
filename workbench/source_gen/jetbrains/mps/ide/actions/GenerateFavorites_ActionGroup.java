package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.List;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.project.Project;
import jetbrains.mps.workbench.MPSDataKeys;
import com.intellij.ide.projectView.ProjectView;
import com.intellij.ide.projectView.impl.AbstractProjectViewPane;
import jetbrains.mps.ide.projectPane.favorites.FavoritesProjectPane;
import javax.swing.tree.TreeNode;
import jetbrains.mps.ide.ui.smodel.SNodeTreeNode;
import jetbrains.mps.workbench.actions.generate.GenerateFilesFromModelsAction;
import jetbrains.mps.workbench.actions.generate.GenerateTextFromModelsAction;
import org.jetbrains.annotations.Nullable;

public class GenerateFavorites_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(GenerateFavorites_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.GenerateFavorites";

  private Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());
  private List<AnAction> myAllActions;

  public GenerateFavorites_ActionGroup() {
    super("GenerateFavorites", ID);
    this.setIsInternal(false);
    this.setPopup(false);
    try {
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void doUpdate(AnActionEvent event) {
    try {
      GenerateFavorites_ActionGroup.this.removeAll();
      Project project = MPSDataKeys.PROJECT.getData(event.getDataContext());
      ProjectView projectView = ProjectView.getInstance(project);
      AbstractProjectViewPane pane = projectView.getCurrentProjectViewPane();
      boolean isInFavorites = pane instanceof FavoritesProjectPane;
      if (!(isInFavorites)) {
        return;
      }
      TreeNode treeNode = MPSDataKeys.LOGICAL_VIEW_NODE.getData(event.getDataContext());
      if (treeNode instanceof SNodeTreeNode) {
        GenerateFavorites_ActionGroup.this.addAction("jetbrains.mps.ide.actions.GenerateFilesFromModel_Action", "jetbrains.mps.ide", new GenerateFilesFromModelsAction());
        GenerateFavorites_ActionGroup.this.addAction("jetbrains.mps.ide.actions.GenerateTextFromModel_Action", "jetbrains.mps.ide", new GenerateTextFromModelsAction());
      }
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }

  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }

  public void adjust() {
    this.insertGroupIntoAnother(Favorites_ActionGroup.ID, Favorites_ActionGroup.LABEL_ID_generate);
  }
}
