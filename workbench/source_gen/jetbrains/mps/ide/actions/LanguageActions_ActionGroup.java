package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.workbench.action.BaseGroup;
import jetbrains.mps.workbench.actions.module.GenerateAllModelsInModuleAction;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleReference;
import jetbrains.mps.workbench.action.ActionFactory;
import jetbrains.mps.workbench.actions.language.OptimizeLanguageImportsAction;
import jetbrains.mps.workbench.actions.module.ShowModuleDependenciesAction;
import jetbrains.mps.workbench.actions.project.AddModuleToProjectAction;
import jetbrains.mps.workbench.actions.module.DeleteModuleAction;

public class LanguageActions_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(LanguageActions_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.LanguageActions";
  public static final String LABEL_ID_newGroup = ID + "newGroup";
  public static final String LABEL_ID_refactoring = ID + "refactoring";

  public LanguageActions_ActionGroup() {
    super("", ID);
    this.setIsInternal(false);
    this.setPopup(false);
    try {
      this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_newGroup);
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(GenerateAllModelsInModuleAction.class)) {
        this.add(new GenerateAllModelsInModuleAction(true));
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(GenerateAllModelsInModuleAction.class, module.getModuleFqName(), null, true));
      }
      if (BaseGroup.class.isAssignableFrom(GenerateAllModelsInModuleAction.class)) {
        this.add(new GenerateAllModelsInModuleAction(false));
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(GenerateAllModelsInModuleAction.class, module.getModuleFqName(), null, false));
      }
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.CheckLanguage_Action"), module.getModuleFqName(), null));
      }
      if (BaseGroup.class.isAssignableFrom(OptimizeLanguageImportsAction.class)) {
        this.add(new OptimizeLanguageImportsAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(OptimizeLanguageImportsAction.class, module.getModuleFqName(), null));
      }
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.AnalyzeClasspath_Action"), module.getModuleFqName(), null));
      }
      this.addSeparator();
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.LanguageProperties_Action"), module.getModuleFqName(), null));
      }
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.LanguageHierarchy_Action"), module.getModuleFqName(), null));
      }
      if (BaseGroup.class.isAssignableFrom(ShowModuleDependenciesAction.class)) {
        this.add(new ShowModuleDependenciesAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(ShowModuleDependenciesAction.class, module.getModuleFqName(), null));
      }
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(AddModuleToProjectAction.class)) {
        this.add(new AddModuleToProjectAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(AddModuleToProjectAction.class, module.getModuleFqName(), null));
      }
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.RemoveModuleFromProject_Action"), module.getModuleFqName(), null));
      }
      if (BaseGroup.class.isAssignableFrom(DeleteModuleAction.class)) {
        this.add(new DeleteModuleAction());
      } else
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(DeleteModuleAction.class, module.getModuleFqName(), null));
      }
      this.addSeparator();
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.MakeModule_Action"), module.getModuleFqName(), null));
      }
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.RebuildModule_Action"), module.getModuleFqName(), null));
      }
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.CleanModule_Action"), module.getModuleFqName(), null));
      }
      this.addSeparator();
      {
        IModule module = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(module.getClass("jetbrains.mps.ide.actions.SetModuleFolder_Action"), module.getModuleFqName(), null));
      }
      this.addSeparator();
      this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_refactoring);
      this.addSeparator();
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void adjust() {
  }

}
