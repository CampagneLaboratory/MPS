package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import java.util.List;
import jetbrains.mps.messages.IMessage;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.messages.MessageKind;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.ide.blame.dialog.BlameDialog;
import jetbrains.mps.ide.blame.dialog.BlameDialogComponent;
import com.intellij.openapi.project.Project;
import java.awt.Frame;
import jetbrains.mps.messages.Message;
import jetbrains.mps.ide.blame.perform.Response;
import javax.swing.JOptionPane;

public class SubmitToTracker_Action extends BaseAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(SubmitToTracker_Action.class);

  public SubmitToTracker_Action() {
    super("Submit to Issue Tracker", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    List<IMessage> messages = ((List<IMessage>) MapSequence.fromMap(_params).get("messages"));
    return ListSequence.fromList(messages).any(new IWhereFilter<IMessage>() {
      public boolean accept(IMessage it) {
        return it.getKind() == MessageKind.ERROR;
      }
    });
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "SubmitToTracker", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSCommonDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("messages", event.getData(MPSCommonDataKeys.MESSAGES));
    if (MapSequence.fromMap(_params).get("messages") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      BlameDialog dialog = BlameDialogComponent.getInstance().createDialog(((Project) MapSequence.fromMap(_params).get("project")), ((Frame) MapSequence.fromMap(_params).get("frame")));
      StringBuilder description = new StringBuilder();
      boolean first = true;
      for (IMessage msg : ((List<IMessage>) MapSequence.fromMap(_params).get("messages"))) {
        IMessage message = (Message) msg;
        if (first) {
          dialog.setIssueTitle(message.getText());
          first = false;
        } else {
          description.append(message.getText()).append('\n');
        }
        dialog.addEx(message.getException());
      }
      dialog.setDescription(description.toString());
      dialog.showDialog();


      if (!(dialog.isCancelled())) {
        Response response = dialog.getResult();
        String message = response.getMessage();
        if (response.isSuccess()) {
          JOptionPane.showMessageDialog(null, message, "Submit OK", JOptionPane.INFORMATION_MESSAGE);
        } else {
          JOptionPane.showMessageDialog(null, message, "Submit Failed", JOptionPane.ERROR_MESSAGE);
          if (log.isErrorEnabled()) {
            log.error("Submit failed: " + message, response.getThrowable());
          }
        }
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "SubmitToTracker", t);
      }
    }
  }
}
