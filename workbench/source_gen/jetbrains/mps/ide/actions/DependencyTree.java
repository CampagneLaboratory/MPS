package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTree;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.IModule;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.ide.ui.TextMPSTreeNode;
import jetbrains.mps.ide.projectPane.logicalview.nodes.ProjectModuleTreeNode;
import jetbrains.mps.ide.ui.smodel.SModelTreeNode;
import jetbrains.mps.project.ModuleContext;
import jetbrains.mps.smodel.ModuleOperationContext;
import jetbrains.mps.ide.icons.IconManager;

public class DependencyTree extends MPSTree {
  private List<SModelDescriptor> myModels;
  private List<IModule> myModules;
  private MPSProject myProject;

  public DependencyTree() {
  }

  protected MPSTreeNode rebuild() {
    TextMPSTreeNode root = new TextMPSTreeNode("root", null);
    for (IModule module : myModules) {
      root.add(ProjectModuleTreeNode.createFor(myProject, module));
    }
    for (SModelDescriptor modelDescriptor : myModels) {
      SModelTreeNode node = new SModelTreeNode(modelDescriptor, null, new ModuleContext(modelDescriptor.getModule(), myProject));
      root.add(node);
    }
    setRootVisible(false);
    return root;
  }

  public void setContent(List<SModelDescriptor> models, List<IModule> modules, MPSProject project) {
    myModels = models;
    myModules = modules;
    myProject = project;
    rebuildLater();
  }

  public class ModuleTreeNode extends MPSTreeNode {
    private IModule myModule;

    public ModuleTreeNode(IModule module) {
      super(new ModuleOperationContext(module));
      myModule = module;
      setIcon(IconManager.getIconFor(module));
      setNodeIdentifier(module.getModuleFqName());
    }

    public IModule getModule() {
      return myModule;
    }
  }
}
