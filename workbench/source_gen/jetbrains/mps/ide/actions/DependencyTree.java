package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTree;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.IModule;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.ide.ui.TextMPSTreeNode;
import jetbrains.mps.ide.projectPane.logicalview.nodes.ProjectModuleTreeNode;
import jetbrains.mps.ide.ui.smodel.SModelTreeNode;
import jetbrains.mps.project.ModuleContext;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.TreePath;

public class DependencyTree extends MPSTree {
  private List<SModelDescriptor> myModels;
  private List<IModule> myModules;
  private MPSProject myProject;
  private DependenciesComponent myParent;

  public DependencyTree(DependenciesComponent parent) {
    myParent = parent;
    addTreeSelectionListener(new DependencyTree.MyTreeSelectionListener());
  }

  protected MPSTreeNode rebuild() {
    TextMPSTreeNode root = new TextMPSTreeNode("root", null);
    for (IModule module : myModules) {
      root.add(ProjectModuleTreeNode.createFor(myProject, module));
    }
    for (SModelDescriptor modelDescriptor : myModels) {
      SModelTreeNode node = new SModelTreeNode(modelDescriptor, null, new ModuleContext(modelDescriptor.getModule(), myProject));
      root.add(node);
    }
    setRootVisible(false);
    return root;
  }

  public void setContent(List<SModelDescriptor> models, List<IModule> modules, MPSProject project) {
    myModels = models;
    myModules = modules;
    myProject = project;
    rebuildLater();
  }

  public class MyTreeSelectionListener implements TreeSelectionListener {
    public MyTreeSelectionListener() {
    }

    public void valueChanged(TreeSelectionEvent event) {
      TreePath[] paths = getSelectionPaths();
      if (paths == null || paths.length == 0) {
        return;
      }
      Scope scope = new Scope();
      for (TreePath path : paths) {
        MPSTreeNode node = (MPSTreeNode) path.getLastPathComponent();
        if (node instanceof SModelTreeNode) {
          scope.add(((SModelTreeNode) node).getSModelDescriptor());
        }
        if (node instanceof ProjectModuleTreeNode) {
          scope.add(((ProjectModuleTreeNode) node).getModule());
        }
      }
      myParent.updateTargetsView(scope);
    }
  }
}
