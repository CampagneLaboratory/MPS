package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.workbench.action.BaseGroup;
import jetbrains.mps.workbench.actions.nodes.CopyNodeAction;
import jetbrains.mps.workbench.action.ActionFactory;
import jetbrains.mps.workbench.actions.nodes.CopyNodeReferenceAction;
import jetbrains.mps.workbench.actions.nodes.PasteNodeAction;
import jetbrains.mps.workbench.actions.nodes.CutNodeAction;
import jetbrains.mps.workbench.actions.imports.AddModelImportAction;
import jetbrains.mps.workbench.actions.imports.AddModelImportByRootNodeAction;
import jetbrains.mps.workbench.actions.imports.AddLanguageImportAction;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.workbench.action.ActionUtils;

public class Edit_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(Edit_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.Edit";
  public static final String LABEL_ID_custom = ID + "custom";

  public Edit_ActionGroup() {
    super("Edit", ID);
    this.setIsInternal(false);
    this.setPopup(false);
    try {
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(CopyNodeAction.class)) {
        this.add(new CopyNodeAction());
      } else {
        this.add(ActionFactory.getInstance().getRegisteredAction(CopyNodeAction.class, null));
      }
      if (BaseGroup.class.isAssignableFrom(CopyNodeReferenceAction.class)) {
        this.add(new CopyNodeReferenceAction());
      } else {
        this.add(ActionFactory.getInstance().getRegisteredAction(CopyNodeReferenceAction.class, null));
      }
      if (BaseGroup.class.isAssignableFrom(PasteNodeAction.class)) {
        this.add(new PasteNodeAction());
      } else {
        this.add(ActionFactory.getInstance().getRegisteredAction(PasteNodeAction.class, null));
      }
      if (BaseGroup.class.isAssignableFrom(CutNodeAction.class)) {
        this.add(new CutNodeAction());
      } else {
        this.add(ActionFactory.getInstance().getRegisteredAction(CutNodeAction.class, null));
      }
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(AddModelImportAction.class)) {
        this.add(new AddModelImportAction());
      } else {
        this.add(ActionFactory.getInstance().getRegisteredAction(AddModelImportAction.class, null));
      }
      if (BaseGroup.class.isAssignableFrom(AddModelImportByRootNodeAction.class)) {
        this.add(new AddModelImportByRootNodeAction());
      } else {
        this.add(ActionFactory.getInstance().getRegisteredAction(AddModelImportByRootNodeAction.class, null));
      }
      if (BaseGroup.class.isAssignableFrom(AddLanguageImportAction.class)) {
        this.add(new AddLanguageImportAction());
      } else {
        this.add(ActionFactory.getInstance().getRegisteredAction(AddLanguageImportAction.class, null));
      }
      this.addSeparator();
      this.addAnchor(Edit_ActionGroup.LABEL_ID_custom);
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void adjust() {
    {
      DefaultActionGroup gToDef = ActionUtils.getDefaultGroup("EditMenu");
      BaseGroup gWhat = ActionUtils.getGroup(Edit_ActionGroup.ID);
      if (gToDef == null || gWhat == null) {
        return;
      }
      gToDef.add(gWhat);
    }
  }

}
