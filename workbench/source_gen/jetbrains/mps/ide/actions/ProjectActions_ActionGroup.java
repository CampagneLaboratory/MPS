package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.workbench.actions.module.GenerateAllModulesInProjectAction;
import com.intellij.openapi.actionSystem.ex.ActionManagerEx;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.extensions.PluginId;

public class ProjectActions_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(ProjectActions_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.ProjectActions_ActionGroup";
  public static final String LABEL_ID_projectNew = ID + "projectNew";
  public static final String LABEL_ID_runConfig = ID + "runConfig";

  public ProjectActions_ActionGroup() {
    super("ProjectActions", ID);
    this.setIsInternal(false);
    this.setPopup(false);
    try {
      ProjectActions_ActionGroup.this.addAnchor(ProjectActions_ActionGroup.LABEL_ID_projectNew);
      ProjectActions_ActionGroup.this.addSeparator();
      {
        GeneratedAction newAction = new RegenerateProject_Action(new GenerateAllModulesInProjectAction(true));
        ActionManagerEx manager = ActionManagerEx.getInstanceEx();
        AnAction oldAction = manager.getAction(newAction.getActionId());
        if (oldAction == null) {
          manager.registerAction(newAction.getActionId(), newAction, PluginId.getId("jetbrains.mps.ide"));
          oldAction = newAction;
        }
        ProjectActions_ActionGroup.this.addAction(oldAction);
      }
      {
        GeneratedAction newAction = new GenerateProject_Action(new GenerateAllModulesInProjectAction(false));
        ActionManagerEx manager = ActionManagerEx.getInstanceEx();
        AnAction oldAction = manager.getAction(newAction.getActionId());
        if (oldAction == null) {
          manager.registerAction(newAction.getActionId(), newAction, PluginId.getId("jetbrains.mps.ide"));
          oldAction = newAction;
        }
        ProjectActions_ActionGroup.this.addAction(oldAction);
      }
      {
        GeneratedAction newAction = new CheckProject_Action();
        ActionManagerEx manager = ActionManagerEx.getInstanceEx();
        AnAction oldAction = manager.getAction(newAction.getActionId());
        if (oldAction == null) {
          manager.registerAction(newAction.getActionId(), newAction, PluginId.getId("jetbrains.mps.ide"));
          oldAction = newAction;
        }
        ProjectActions_ActionGroup.this.addAction(oldAction);
      }
      {
        GeneratedAction newAction = new MakeProject_Action();
        ActionManagerEx manager = ActionManagerEx.getInstanceEx();
        AnAction oldAction = manager.getAction(newAction.getActionId());
        if (oldAction == null) {
          manager.registerAction(newAction.getActionId(), newAction, PluginId.getId("jetbrains.mps.ide"));
          oldAction = newAction;
        }
        ProjectActions_ActionGroup.this.addAction(oldAction);
      }
      {
        GeneratedAction newAction = new RebuildProject_Action();
        ActionManagerEx manager = ActionManagerEx.getInstanceEx();
        AnAction oldAction = manager.getAction(newAction.getActionId());
        if (oldAction == null) {
          manager.registerAction(newAction.getActionId(), newAction, PluginId.getId("jetbrains.mps.ide"));
          oldAction = newAction;
        }
        ProjectActions_ActionGroup.this.addAction(oldAction);
      }
      {
        GeneratedAction newAction = new CleanProject_Action();
        ActionManagerEx manager = ActionManagerEx.getInstanceEx();
        AnAction oldAction = manager.getAction(newAction.getActionId());
        if (oldAction == null) {
          manager.registerAction(newAction.getActionId(), newAction, PluginId.getId("jetbrains.mps.ide"));
          oldAction = newAction;
        }
        ProjectActions_ActionGroup.this.addAction(oldAction);
      }
      ProjectActions_ActionGroup.this.addAnchor(ProjectActions_ActionGroup.LABEL_ID_runConfig);
      ProjectActions_ActionGroup.this.addSeparator();
      {
        GeneratedAction newAction = new UpgradeModelPersistenceInProject_Action();
        ActionManagerEx manager = ActionManagerEx.getInstanceEx();
        AnAction oldAction = manager.getAction(newAction.getActionId());
        if (oldAction == null) {
          manager.registerAction(newAction.getActionId(), newAction, PluginId.getId("jetbrains.mps.ide"));
          oldAction = newAction;
        }
        ProjectActions_ActionGroup.this.addAction(oldAction);
      }
      {
        GeneratedAction newAction = new OptimizeProjectImports_Action();
        ActionManagerEx manager = ActionManagerEx.getInstanceEx();
        AnAction oldAction = manager.getAction(newAction.getActionId());
        if (oldAction == null) {
          manager.registerAction(newAction.getActionId(), newAction, PluginId.getId("jetbrains.mps.ide"));
          oldAction = newAction;
        }
        ProjectActions_ActionGroup.this.addAction(oldAction);
      }
      {
        GeneratedAction newAction = new MPSProjectPaths_Action();
        ActionManagerEx manager = ActionManagerEx.getInstanceEx();
        AnAction oldAction = manager.getAction(newAction.getActionId());
        if (oldAction == null) {
          manager.registerAction(newAction.getActionId(), newAction, PluginId.getId("jetbrains.mps.ide"));
          oldAction = newAction;
        }
        ProjectActions_ActionGroup.this.addAction(oldAction);
      }
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }
}
