package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.ClassConcept;
import jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.behavior.ResolveUtil;
import jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration;
import jetbrains.mps.baseLanguage.structure.StatementList;
import jetbrains.mps.smodel.INodeAdapter;
import jetbrains.mps.baseLanguage.structure.Classifier;
import jetbrains.mps.baseLanguage.search.ClassifierAndSuperClassifiersScope;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import jetbrains.mps.smodel.BaseAdapter;

public class AddClassMethodStrategy implements StratergyAddMethodDialog.ContainerStrategy {
  private ClassConcept myClassConcept;
  private InstanceMethodDeclaration myContextMethod;

  public AddClassMethodStrategy(final SNode contextNode) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        myClassConcept = contextNode.getAdapter().getParent(ClassConcept.class);
        myContextMethod = contextNode.getAdapter().getParent(InstanceMethodDeclaration.class);
      }
    });
  }

  public List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition> doAddMethods(List<SNode> baseMethods) {
    boolean insertion = myContextMethod != null && myContextMethod.getParent() == myClassConcept;
    List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition> methods = new ArrayList<StratergyAddMethodDialog.ContainerStrategy.MethodAddition>();
    for (SNode methodNode : baseMethods) {
      SNode classNode = myClassConcept.getNode();
      InstanceMethodDeclaration method = (InstanceMethodDeclaration) ResolveUtil.processMethodToImplement(classNode, methodNode).getAdapter();
      methods.add(new StratergyAddMethodDialog.ContainerStrategy.MethodAddition(((BaseMethodDeclaration) methodNode.getAdapter()), method));
      method.setIsAbstract(false);
      method.setBody(StatementList.newInstance(myClassConcept.getModel()));
      if (insertion) {
        myClassConcept.insertMethod(myContextMethod, method);
      } else {
        myClassConcept.addMethod(method);
      }
    }
    return (List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition>) methods;
  }

  private Integer getSuperclssesCount(INodeAdapter adapter) {
    if (!(adapter instanceof Classifier)) {
      return 0;
    }
    Classifier classifier = (Classifier) adapter;
    ClassifierAndSuperClassifiersScope scope = new ClassifierAndSuperClassifiersScope(classifier, IClassifiersSearchScope.CLASSIFFIER);
    return BaseAdapter.toNodes(scope.getAdapters(Classifier.class)).size();
  }

  public int compareContainers(INodeAdapter c1, INodeAdapter c2) {
    return getSuperclssesCount(c2).compareTo(getSuperclssesCount(c1));
  }

  public SNode getMainContainer() {
    return myClassConcept.getNode();
  }

  public SNode getContainer(SNode methodDecl) {
    return methodDecl.getAdapter().getParent(Classifier.class).getNode();
  }
}
