package jetbrains.mps.ide.actions;

/*Generated by MPS */

import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.ide.projectPane.ProjectPane;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import jetbrains.mps.project.IModule;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.workbench.MPSDataKeys;
import org.jetbrains.annotations.NotNull;

import javax.swing.Icon;
import javax.swing.JOptionPane;
import java.awt.Frame;

public class SetModuleFolder_Action extends GeneratedAction {
  public static final Logger LOG = Logger.getLogger(SetModuleFolder_Action.class);
  public static final Icon ICON = null;

  public Frame frame;
  public IOperationContext context;
  public MPSProject project;

  public SetModuleFolder_Action() {
    super("Set Folder", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull()
  public String getKeyStroke() {
    return "";
  }

  public boolean isApplicable(AnActionEvent event) {
    IModule module = SetModuleFolder_Action.this.context.getModule();
    return SetModuleFolder_Action.this.project.isProjectModule(module);
  }

  public void doUpdate(@NotNull()AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "SetModuleFolder", t);
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.frame = event.getData(MPSDataKeys.FRAME);
    if (this.frame == null) {
      return false;
    }
    this.context = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.context == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.MPS_PROJECT);
    if (this.project == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      ProjectPane pane = SetModuleFolder_Action.this.context.getComponent(ProjectPane.class);
      IModule module = SetModuleFolder_Action.this.context.getModule();
      String oldFolder = SetModuleFolder_Action.this.project.getFolderFor(module);
      String newFolder = JOptionPane.showInputDialog(SetModuleFolder_Action.this.frame, "Enter new folder", oldFolder);
      if (newFolder != null) {
        if (newFolder.equals("")) {
          newFolder = null;
        }
        for (IModule m : pane.getSelectedModules()) {
          SetModuleFolder_Action.this.project.setFolderFor(m, newFolder);
        }
        pane.rebuild();
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "SetModuleFolder", t);
    }
  }

}
