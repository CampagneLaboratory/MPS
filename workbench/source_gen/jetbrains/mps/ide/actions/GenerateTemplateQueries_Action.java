package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.generator.generationTypes.IGenerationHandler;
import jetbrains.mps.ide.generator.GeneratorUIFacade;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.generator.ModelGenerationStatusManager;
import jetbrains.mps.project.ProjectOperationContext;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.IOperationContext;

public class GenerateTemplateQueries_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(GenerateTemplateQueries_Action.class);

  private boolean regenerate;

  public GenerateTemplateQueries_Action(boolean regenerate_par) {
    super("Generate Template Queries", "", ICON);
    this.regenerate = regenerate_par;
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        String text = ((GenerateTemplateQueries_Action.this.regenerate ?
          "Regenerate" :
          "Generate"
        )) + " Generator";
        event.getPresentation().setText(text);
        GenerateTemplateQueries_Action.this.setEnabledState(event.getPresentation(), ((IModule) MapSequence.fromMap(_params).get("module")) instanceof Generator);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "GenerateTemplateQueries", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("module", event.getData(MPSDataKeys.MODULE));
    if (MapSequence.fromMap(_params).get("module") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      IGenerationHandler genHandler = GeneratorUIFacade.getInstance().getDefaultGenerationHandler();
      final Wrappers._T<List<SModelDescriptor>> models = new Wrappers._T<List<SModelDescriptor>>(ListSequence.fromList(new ArrayList<SModelDescriptor>()));
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          ListSequence.fromList(models.value).addSequence(ListSequence.fromList(((Generator) ((IModule) MapSequence.fromMap(_params).get("module"))).getGeneratorModels()));
          if (!(GenerateTemplateQueries_Action.this.regenerate)) {
            models.value = ListSequence.fromList(models.value).where(new IWhereFilter<SModelDescriptor>() {
              public boolean accept(SModelDescriptor it) {
                return ModelGenerationStatusManager.getInstance().generationRequired(it, ProjectOperationContext.get(((Project) MapSequence.fromMap(_params).get("project"))), false, true);
              }
            }).toListSequence();
          }
        }
      });
      GeneratorUIFacade.getInstance().generateModels(((IOperationContext) MapSequence.fromMap(_params).get("context")), models.value, genHandler, true, false);
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "GenerateTemplateQueries", t);
      }
    }
  }

  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(((Object) this.regenerate).toString());
    res.append("!");
    return res.toString();
  }
}
