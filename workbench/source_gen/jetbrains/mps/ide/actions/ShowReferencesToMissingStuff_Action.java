package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.ide.findusages.model.IResultProvider;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.workbench.actions.model.MissingReferencesFinder;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;
import com.intellij.openapi.project.Project;

public class ShowReferencesToMissingStuff_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(ShowReferencesToMissingStuff_Action.class);

  public ShowReferencesToMissingStuff_Action() {
    super("Show References to Missing Models/Languages", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return ShowReferencesToMissingStuff_Action.this.getTool(_params) != null;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "ShowReferencesToMissingStuff", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("scope", event.getData(MPSDataKeys.SCOPE));
    if (MapSequence.fromMap(_params).get("scope") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("model", event.getData(MPSDataKeys.MODEL));
    if (MapSequence.fromMap(_params).get("model") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      SearchQuery query = new SearchQuery(((SModelDescriptor) MapSequence.fromMap(_params).get("model")).getSModel(), GlobalScope.getInstance());
      IResultProvider provider = FindUtils.makeProvider(new MissingReferencesFinder(((IScope) MapSequence.fromMap(_params).get("scope")), ((SModelDescriptor) MapSequence.fromMap(_params).get("model"))));
      ShowReferencesToMissingStuff_Action.this.getTool(_params).findUsages(provider, query, false, true, true, "No missing models and languages");
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "ShowReferencesToMissingStuff", t);
      }
    }
  }

  private UsagesViewTool getTool(final Map<String, Object> _params) {
    return ((Project) MapSequence.fromMap(_params).get("project")).getComponent(UsagesViewTool.class);
  }
}
