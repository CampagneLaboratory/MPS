package jetbrains.mps.ide.actions;

/*Generated by MPS */

import javax.swing.JPanel;
import jetbrains.mps.ide.findusages.view.UsagesView;
import jetbrains.mps.project.MPSProject;
import java.awt.BorderLayout;
import jetbrains.mps.ide.findusages.view.treeholder.treeview.ViewOptions;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import com.intellij.openapi.progress.ProgressIndicator;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.HashSet;
import jetbrains.mps.ide.findusages.model.IResultProvider;
import jetbrains.mps.ide.findusages.view.FindUtils;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;

public class ModelCheckerViewer extends JPanel {
  private UsagesView myUsagesView;
  private MPSProject myProject;
  private ModelCheckerTool_Tool myTool;
  private ModelCheckerResults myLastResults;

  public ModelCheckerViewer(MPSProject project, ModelCheckerTool_Tool tool) {
    this.myProject = project;
    this.myTool = tool;

    this.setLayout(new BorderLayout());
    ViewOptions viewOptions = new ViewOptions(true, false, false, false, false);

    this.myUsagesView = new UsagesView(this.myProject, viewOptions) {
      public void close() {
        ModelCheckerViewer.this.myTool.removeTab(this.getComponent());
        ModelCheckerViewer.this.myTool.makeUnavailableLater();
      }
    };
    this.add(this.myUsagesView.getComponent());
  }

  public void checkModel(final SModel model, final IScope scope, ModelCheckerTool_Tool tool) {
    ModelCheckerViewer.this.myLastResults = ModelCheckerResultsFinder.getResults(model, scope);
    IFinder finder = new IFinder() {
      public SearchResults find(SearchQuery p0, ProgressIndicator p1) {
        List<SearchResult<SNode>> searchResults = ListSequence.fromList(new ArrayList<SearchResult<SNode>>());
        for (ModelCheckerResults.Result result : ListSequence.fromList(ModelCheckerViewer.this.myLastResults.getResultsList())) {
          ListSequence.fromList(searchResults).addElement(new SearchResult<SNode>(result.getNode(), result.getStatus().toString()));
        }
        return new SearchResults<SNode>(new HashSet<SNode>(), searchResults);
      }
    };

    IResultProvider resultProvider = FindUtils.makeProvider(finder);
    SearchQuery searchQuery = new SearchQuery(this.myProject.getScope());
    this.myUsagesView.setRunOptions(resultProvider, searchQuery, new UsagesView.ButtonConfiguration(false, false, false), new SearchResults());
    ProgressManager.getInstance().run(new Task.Modal(this.myProject.getComponent(Project.class), "Searching", true) {
      public void run(@NotNull ProgressIndicator indicator) {
        indicator.setIndeterminate(true);
        ModelCheckerViewer.this.myUsagesView.run(indicator);

        ModelCheckerViewer.this.myTool.openToolLater(true);
      }
    });
  }
}
