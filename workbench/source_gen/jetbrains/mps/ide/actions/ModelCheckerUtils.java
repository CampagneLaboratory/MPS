package jetbrains.mps.ide.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchResult;

public class ModelCheckerUtils {
  public static final String CATEGORY_ERROR = "Errors";
  public static final String CATEGORY_WARNING = "Warnings";
  public static final String CATEGORY_INFO = "Infos";

  public static List<SModelDescriptor> getModelDescriptors(SModelDescriptor modelDescriptor) {
    List<SModelDescriptor> modelDescrpitors = ListSequence.fromList(new ArrayList<SModelDescriptor>());
    ListSequence.fromList(modelDescrpitors).addElement(modelDescriptor);
    return modelDescrpitors;
  }

  public static List<SModelDescriptor> getModelDescriptors(IModule module) {
    List<SModelDescriptor> modelDescrpitors = ListSequence.fromList(new ArrayList<SModelDescriptor>());
    for (SModelDescriptor modelDescriptor : ListSequence.fromList(module.getOwnModelDescriptors())) {
      if (SModelStereotype.isUserModel(modelDescriptor)) {
        ListSequence.fromList(modelDescrpitors).addElement(modelDescriptor);
      }
    }
    if (module instanceof Language) {
      Language language = (Language)module;
      for (Generator generator : ListSequence.fromList(language.getGenerators())) {
        ListSequence.fromList(modelDescrpitors).addSequence(ListSequence.fromList(getModelDescriptors(generator)));
      }
    }
    return modelDescrpitors;
  }

  public static List<SModelDescriptor> getModelDescriptors(List<IModule> modules) {
    List<SModelDescriptor> modelDescrpitors = ListSequence.fromList(new ArrayList<SModelDescriptor>());
    for (IModule module : ListSequence.fromList(modules)) {
      ListSequence.fromList(modelDescrpitors).addSequence(ListSequence.fromList(getModelDescriptors(module)));
    }
    return modelDescrpitors;
  }

  public static List<SModelDescriptor> getModelDescriptors(MPSProject mpsProject) {
    return getModelDescriptors(mpsProject.getModules());
  }

  public static int getIssueCountForCategory(SearchResults<ModelCheckerIssue> issues, String category) {
    if (category == null) {
      return 0;
    }
    int issueCount = 0;
    for (SearchResult<ModelCheckerIssue> issue : ListSequence.fromList(issues.getSearchResults())) {
      if (category.equals(issue.getCategory())) {
        issueCount++;
      }
    }
    return issueCount;
  }
}
