package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.MessageStatus;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.lang.structure.structure.LinkDeclaration;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import jetbrains.mps.lang.structure.structure.LinkMetaclass;
import jetbrains.mps.lang.structure.structure.PropertyDeclaration;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.structure.structure.Cardinality;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;
import java.util.List;
import jetbrains.mps.smodel.PropertySupport;
import jetbrains.mps.ide.ui.smodel.SModelTreeNode;
import jetbrains.mps.smodel.constraints.SearchScopeStatus;
import jetbrains.mps.smodel.constraints.ModelConstraintsUtil;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.typesystem.inference.NodeTypesComponentsRepository;
import jetbrains.mps.typesystem.inference.NodeTypesComponent;
import jetbrains.mps.util.Pair;
import jetbrains.mps.nodeEditor.IErrorReporter;
import jetbrains.mps.project.IModule;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.util.TimePresentationUtil;
import jetbrains.mps.ide.progress.TaskProgressSettings;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class ModelCheckerUtils {
  private static void addIssue(SearchResults<ModelCheckerIssue> results, SNode node, String message, MessageStatus status) {
    ModelCheckerIssue issue = new ModelCheckerIssue(node, message);
    results.getSearchResults().add(new SearchResult(issue, node, status.toString()));
  }

  private static void addIssue(SearchResults<ModelCheckerIssue> results, SNode node, String message) {
    addIssue(results, node, message, MessageStatus.ERROR);
  }

  private static boolean isDeclaredLink(AbstractConceptDeclaration concept, String role, boolean child) {
    LinkDeclaration link = SModelSearchUtil.findLinkDeclaration(concept, role);
    if (link == null) {
      return false;
    }
    return link.getMetaClass() == LinkMetaclass.aggregation || !(child);
  }

  private static boolean isDeclaredProperty(AbstractConceptDeclaration concept, String name) {
    PropertyDeclaration propertyDeclaration = SModelSearchUtil.findPropertyDeclaration(concept, name);
    return propertyDeclaration != null;
  }

  public static boolean checkModel(final SearchResults<ModelCheckerIssue> results, final SModelDescriptor modelDescriptor, final IOperationContext operationContext, final ProgressContext progressContext) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SModel model = modelDescriptor.getSModel();
        for (SNode node : ListSequence.fromList(SModelOperations.getNodes(model, null))) {
          if (!(checkAndUpdateIndicator(progressContext, "Checking " + SModelOperations.getModelName(model) + " for structure..."))) {
            return;
          }
          AbstractConceptDeclaration concept = node.getConceptDeclarationAdapter();
          if (concept == null) {
            addIssue(results, node, "Cannot find concept \"" + node.getConceptFqName() + "\"");
            continue;
          }

          // Check for unresolved references 
          for (SReference ref : ListSequence.fromList(node.getReferences())) {
            if (ref.getTargetNode() == null) {
              addIssue(results, node, "Unresolved reference: " + ref.getResolveInfo());
            }
          }

          // Check links 
          for (LinkDeclaration linkDeclaration : ListSequence.fromList(SModelSearchUtil.getLinkDeclarations(concept))) {
            LinkDeclaration link = SModelUtil_new.getGenuineLinkDeclaration(linkDeclaration);
            if (link.getSourceCardinality() == Cardinality._1 || link.getSourceCardinality() == Cardinality._1__n) {
              if (link.getMetaClass() == LinkMetaclass.aggregation) {
                if (node.getChildren(link.getRole()).isEmpty()) {
                  addIssue(results, node, "Cardinality constraint violation in role \"" + link.getRole() + "\"");
                }
              } else {
                if (node.getReference(link.getRole()) == null) {
                  addIssue(results, node, "Cardinality constraint violation in role \"" + link.getRole() + "\"");
                }
              }
            }
          }

          for (String role : SetSequence.fromSet(node.getChildRoles())) {
            if (!(isDeclaredLink(concept, role, true))) {
              addIssue(results, node, "Usage of undeclared child role \"" + role + "\"");
            }
          }

          for (String role : SetSequence.fromSet(node.getReferenceRoles())) {
            if (!(isDeclaredLink(concept, role, false))) {
              addIssue(results, node, "Usage of undeclared child role \"" + role + "\"");
            }
          }

          // Check properties 
          ConceptAndSuperConceptsScope chs = new ConceptAndSuperConceptsScope(concept);
          List<PropertyDeclaration> props = chs.getAdapters(PropertyDeclaration.class);
          for (PropertyDeclaration p : ListSequence.fromList(props)) {
            PropertySupport ps = PropertySupport.getPropertySupport(p);
            String value = ps.fromInternalValue(node.getProperty(p.getName()));
            if (!(ps.canSetValue(node, p.getName(), value, operationContext.getScope()))) {
              addIssue(results, node, "Property constraint violation for property \"" + p.getName() + "\"");
            }
          }

          for (String name : SetSequence.fromSet(node.getPropertyNames())) {
            if (node.isRoot() && SModelTreeNode.PACK.equals(name)) {
              continue;
            }
            if (!(isDeclaredProperty(concept, name))) {
              addIssue(results, node, "Usage of undeclared property \"" + name + "\"");
            }
          }

          // Check scopes 
          for (SReference ref : ListSequence.fromList(node.getReferences())) {
            if (!(isDeclaredLink(concept, ref.getRole(), false))) {
              continue;
            }
            SNode targetNode = ref.getTargetNode();
            if (targetNode == null) {
              continue;
            }
            try {
              SearchScopeStatus status = ModelConstraintsUtil.getSearchScope(null, node, node.getConceptDeclarationAdapter(), ref.getRole(), operationContext);
              if (status.isOk() && !(status.isDefault())) {
                List<SNode> nodes = status.getSearchScope().getNodes();
                if (!(ListSequence.fromList(nodes).contains(targetNode))) {
                  addIssue(results, node, "Reference in role \"" + ref.getRole() + "\" is out of scope");
                }
              }
            } catch (Exception e) {
              e.printStackTrace();
              addIssue(results, node, "Exception \"" + e.getMessage() + "\" during scope checking");
            }
          }
        }

        // Check for typesystem rules 
        TypeChecker tc = TypeChecker.getInstance();
        for (SNode rootNode : ListSequence.fromList(SModelOperations.getRoots(model, null))) {
          if (!(checkAndUpdateIndicator(progressContext, "Checking " + SModelOperations.getModelName(model) + " for typesystem rules..."))) {
            return;
          }
          tc.checkRoot(rootNode);
          TypeCheckingContext typeCheckingContext = NodeTypesComponentsRepository.getInstance().getTypeCheckingContext(rootNode);
          NodeTypesComponent nodeTypesComponent = typeCheckingContext.getBaseNodeTypesComponent();
          for (Pair<SNode, List<IErrorReporter>> nodeErrorReporters : SetSequence.fromSet(nodeTypesComponent.getNodesWithErrors())) {
            SNode node = nodeErrorReporters.o1;
            for (IErrorReporter errorReporter : ListSequence.fromList(nodeErrorReporters.o2)) {
              addIssue(results, node, errorReporter.reportError(), errorReporter.getMessageStatus());
            }
          }
        }
      }
    });
    return !(progressContext.getProgressIndicator().isCanceled());
  }

  public static boolean checkModule(SearchResults<ModelCheckerIssue> results, IModule module, IOperationContext operationContext, ProgressContext progressContext) {
    for (SModelDescriptor modelDescriptor : ListSequence.fromList(module.getOwnModelDescriptors())) {
      if (!(checkModel(results, modelDescriptor, operationContext, progressContext))) {
        return false;
      }
    }
    return true;
  }

  public static boolean checkProject(SearchResults<ModelCheckerIssue> results, MPSProject mpsProject, IOperationContext operationContext, ProgressContext progressContext) {
    for (IModule module : ListSequence.fromList(mpsProject.getModules())) {
      if (!(checkModule(results, module, operationContext, progressContext))) {
        return false;
      }
    }
    return true;
  }

  public static boolean checkAndUpdateIndicator(ProgressContext progressContext, String text) {
    ProgressIndicator indicator = progressContext.getProgressIndicator();
    long estimatedTime = progressContext.getEstimatedTime();
    // Return false if operation was cancelled 
    if (indicator.isCanceled()) {
      return false;
    }

    long elapsedTime = System.currentTimeMillis() - progressContext.getStartTime();
    String estimatedTimeString = TimePresentationUtil.timeIntervalStringPresentation(estimatedTime);
    String elapsedTimeString = TimePresentationUtil.timeIntervalStringPresentation(elapsedTime);
    indicator.setText(text);
    indicator.setText2("Estimated time: " + estimatedTimeString + ", elapsed time: " + elapsedTimeString);
    if (elapsedTime < estimatedTime) {
      indicator.setIndeterminate(false);
      indicator.setFraction(elapsedTime * 1.0 / estimatedTime);
    } else {
      indicator.setIndeterminate(true);
    }
    return true;
  }

  public static String getTaskName(MPSProject mpsProject) {
    return mpsProject.getProjectDescriptor().getName() + "_projectcheck";
  }

  public static String getTaskName(IModule module) {
    return module.getModuleFqName() + "_modulecheck";
  }

  public static String getTaskName(SModelDescriptor modelDescriptor) {
    return modelDescriptor.getName() + "_modelcheck";
  }

  public static void addEstimatedTimeMillis(String taskName, long startTime) {
    TaskProgressSettings.getInstance().addEstimatedTimeMillis(taskName, System.currentTimeMillis() - startTime);
  }

  public static long getEstimatedTimeMillis(String taskName) {
    return TaskProgressSettings.getInstance().getEstimatedTimeMillis(taskName);
  }

  public static long getEstimatedTimeMillis(Iterable<String> taskNames) {
    long result = 0;
    for (String taskName : Sequence.fromIterable(taskNames)) {
      result += getEstimatedTimeMillis(taskName);
    }
    return result;
  }
}
