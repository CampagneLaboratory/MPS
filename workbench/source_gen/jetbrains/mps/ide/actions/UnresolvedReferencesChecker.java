package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class UnresolvedReferencesChecker extends SpecificChecker {
  public UnresolvedReferencesChecker(ModelChecker modelChecker) {
    super(modelChecker);
  }

  public void checkModel(SModel model) {
    for (SNode node : ListSequence.fromList(SModelOperations.getNodes(model, null))) {
      if (!(this.getModelChecker().checkAndUpdateIndicator("Checking " + SModelOperations.getModelName(model) + " for unresolved references..."))) {
        return;
      }
      // Check for unresolved references 
      for (SReference ref : ListSequence.fromList(SNodeOperations.getReferences(node))) {
        if ((SLinkOperations.getTargetNode(ref) == null)) {
          this.addIssue(node, "Unresolved reference: " + SLinkOperations.getResolveInfo(ref));
        }
      }
    }
  }
}
