package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.project.Project;
import java.awt.Frame;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.workbench.dialogs.RenameFileDialog;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.ide.projectView.ProjectView;
import javax.swing.SwingUtilities;
import java.io.IOException;
import javax.swing.JOptionPane;

public class RenameFileOrDirectory_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(RenameFileOrDirectory_Action.class);

  private VirtualFile selectedFile;
  private Project project;
  private Frame frame;

  public RenameFileOrDirectory_Action() {
    super("Rename...", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull
  public String getKeyStroke() {
    return "shift F6";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "RenameFileOrDirectory", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.selectedFile = event.getData(MPSDataKeys.VIRTUAL_FILE);
    if (this.selectedFile == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    this.frame = event.getData(MPSDataKeys.FRAME);
    if (this.frame == null) {
      return false;
    }
    return true;
  }

  protected void cleanup() {
    super.cleanup();
    this.selectedFile = null;
    this.project = null;
    this.frame = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      String oldName = RenameFileOrDirectory_Action.this.selectedFile.getName();
      RenameFileDialog dialog = new RenameFileDialog(RenameFileOrDirectory_Action.this.project, oldName, RenameFileOrDirectory_Action.this.selectedFile.isDirectory());
      dialog.show();
      if (!(dialog.isOK())) {
        return;
      }
      final String result = dialog.getResult();
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          try {
            if (RenameFileOrDirectory_Action.this.isNotValid(result)) {
              return;
            }
            RenameFileOrDirectory_Action.this.selectedFile.rename(null, result);
            ProjectView.getInstance(RenameFileOrDirectory_Action.this.project).refresh();
            SwingUtilities.invokeLater(new Runnable() {
              public void run() {
                ProjectView.getInstance(RenameFileOrDirectory_Action.this.project).getCurrentProjectViewPane().select(null, RenameFileOrDirectory_Action.this.selectedFile, true);
              }
            });
          } catch (IOException e) {
          }
        }
      });
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "RenameFileOrDirectory", t);
      }
    }
  }

  /*package*/ boolean isNotValid(String result) {
    if (result == null || result.length() == 0) {
      JOptionPane.showMessageDialog(RenameFileOrDirectory_Action.this.frame, "Enter valid name");
      return true;
    }
    if (RenameFileOrDirectory_Action.this.selectedFile.getParent().findChild(result) != null) {
      JOptionPane.showMessageDialog(RenameFileOrDirectory_Action.this.frame, result + " already exists");
      return true;
    }
    return false;
  }
}
