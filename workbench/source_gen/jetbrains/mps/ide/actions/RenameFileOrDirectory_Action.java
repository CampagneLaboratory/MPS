package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import javax.swing.JTextField;
import com.intellij.openapi.ui.DialogWrapper;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.JLabel;
import com.intellij.ui.IdeBorderFactory;

public class RenameFileOrDirectory_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(RenameFileOrDirectory_Action.class);

  private VirtualFile selectedFile;
  private Project project;

  public RenameFileOrDirectory_Action() {
    super("Rename...", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "shift F6";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "RenameFileOrDirectory", t);
      }
      this.disable(event.getPresentation());
    }
  }

  @Override
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.selectedFile = event.getData(MPSDataKeys.VIRTUAL_FILE);
    if (this.selectedFile == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      final String oldName = RenameFileOrDirectory_Action.this.selectedFile.getName();
      final String oldNameWithoutExtension = RenameFileOrDirectory_Action.this.selectedFile.getNameWithoutExtension();
      final JTextField[] textField = new JTextField[1];
      DialogWrapper dialog = new DialogWrapper(RenameFileOrDirectory_Action.this.project) {
        {
          this.setTitle("Rename");
          this.init();
        }

        @Nullable
        protected JComponent createCenterPanel() {
          JPanel result = new JPanel(new BorderLayout());
          JLabel label = new JLabel("Rename file " + oldName + " to:");
          textField[0] = new JTextField();
          textField[0].setText(oldName);
          textField[0].setSelectionStart(0);
          textField[0].setSelectionEnd(oldNameWithoutExtension.length());
          result.setBorder(IdeBorderFactory.createBorder());
          result.add(label, BorderLayout.PAGE_START);
          result.add(textField[0], BorderLayout.PAGE_END);
          return result;
        }
      };
      dialog.show();
      if (!(dialog.isOK())) {
        return;
      }
      String newName = textField[0].getText();
      if (newName.length() == 0) {
        return;
      }
      RenameFileOrDirectory_Action.this.selectedFile.rename(null, newName);
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "RenameFileOrDirectory", t);
      }
    }
  }
}
