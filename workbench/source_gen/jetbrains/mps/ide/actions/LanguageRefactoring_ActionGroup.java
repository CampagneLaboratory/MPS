package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.workbench.action.BaseGroup;
import jetbrains.mps.refactoring.renameLanguage.RenameLanguageAction;
import jetbrains.mps.workbench.action.ActionFactory;
import jetbrains.mps.workbench.action.ActionUtils;
import com.intellij.openapi.actionSystem.Constraints;
import com.intellij.openapi.actionSystem.Anchor;

public class LanguageRefactoring_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(LanguageRefactoring_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.LanguageRefactoring";

  public LanguageRefactoring_ActionGroup() {
    super("Refactoring", ID);
    this.setIsInternal(false);
    this.setPopup(true);
    try {
      if (BaseGroup.class.isAssignableFrom(RenameLanguageAction.class)) {
        this.add(new RenameLanguageAction());
      } else
      {
        this.add(ActionFactory.getInstance().getRegisteredAction(RenameLanguageAction.class, null));
      }
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void adjust() {
    {
      BaseGroup gToBase = ActionUtils.getGroup(LanguageActions_ActionGroup.ID);
      BaseGroup gWhat = ActionUtils.getGroup(LanguageRefactoring_ActionGroup.ID);
      if (gToBase == null || gWhat == null) {
        return;
      }
      {
        String labelName = null;
        labelName = LanguageActions_ActionGroup.LABEL_ID_refactoring;
        Constraints constraints = new Constraints(Anchor.AFTER, labelName);
        gToBase.add(gWhat, constraints);
      }
    }
  }

}
