package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SModelDescriptor;
import java.awt.Frame;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.util.CollectionUtil;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.DevKit;
import java.util.List;
import jetbrains.mps.project.ChooseModuleDialog;

public class MissingDependenciesFixer {
  private SModelDescriptor myModelDescriptor;
  private Frame myMainFrame;

  public MissingDependenciesFixer(Frame f, SModelDescriptor modelDescriptor) {
    myModelDescriptor = modelDescriptor;
    myMainFrame = f;
  }

  @Deprecated
  public void fix() {
    fix(true);
  }

  public void fix(final boolean reload) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        boolean wereChanges = false;
        IModule module = myModelDescriptor.getModule();
        assert module != null : myModelDescriptor.getSModelReference().toString();
        IScope moduleScope = module.getScope();
        ModuleDescriptor md = module.getModuleDescriptor();
        for (SModelReference modelImport : SModelOperations.getImportedModelUIDs(myModelDescriptor.getSModel())) {
          if (moduleScope.getModelDescriptor(modelImport) != null) {
            continue;
          }
          SModelDescriptor sm = GlobalScope.getInstance().getModelDescriptor(modelImport);
          if (sm == null) {
            continue;
          }
          IModule anotherModule = sm.getModule();
          if (anotherModule == null || anotherModule == module) {
            continue;
          }
          Dependency dep = new Dependency();
          dep.setModuleRef(anotherModule.getModuleReference());
          md.getDependencies().add(dep);
          wereChanges = true;
        }
        for (ModuleReference namespace : CollectionUtil.union(myModelDescriptor.getSModel().importedLanguages(), myModelDescriptor.getSModel().engagedOnGenerationLanguages())) {
          if (moduleScope.getLanguage(namespace) != null) {
            continue;
          }
          Language lang = GlobalScope.getInstance().getLanguage(namespace);
          if (lang == null) {
            continue;
          }
          ModuleReference ref = ModuleReference.fromString(namespace.toString());
          md.getUsedLanguages().add(ref);
          wereChanges = true;
        }
        for (ModuleReference devKitNamespace : myModelDescriptor.getSModel().importedDevkits()) {
          if (moduleScope.getDevKit(devKitNamespace) != null) {
            continue;
          }
          DevKit devKit = GlobalScope.getInstance().getDevKit(devKitNamespace);
          if (devKit == null) {
            continue;
          }
          ModuleReference ref = ModuleReference.fromString(devKitNamespace.toString());
          md.getUsedDevkits().add(ref);
          wereChanges = true;
        }
        if (wereChanges) {
          module.setModuleDescriptor(md, reload);
          module.save();
        }
      }
    });
  }

  protected IModule chooseModule(SModelDescriptor sm, List<IModule> modules) {
    if (modules.isEmpty()) {
      return null;
    }
    if (modules.size() == 1) {
      return modules.get(0);
    }
    ChooseModuleDialog dialog = new ChooseModuleDialog("Choose Module to Import Model " + sm.getSModelReference() + " from", myMainFrame, modules);
    dialog.showDialog();
    return dialog.getResult();
  }
}
