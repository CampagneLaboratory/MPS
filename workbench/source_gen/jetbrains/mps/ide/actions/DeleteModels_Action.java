package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.awt.Frame;
import com.intellij.openapi.project.Project;
import jetbrains.mps.project.IModule;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.workbench.dialogs.DeleteDialog;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.workbench.actions.model.DeleteModelHelper;

public class DeleteModels_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(DeleteModels_Action.class);

  private Frame frame;
  private Project project;
  private IModule contextModule;
  private List<SModelDescriptor> models;

  public DeleteModels_Action() {
    super("Delete Models", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull
  public String getKeyStroke() {
    return " DELETE";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "DeleteModels", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.frame = event.getData(MPSDataKeys.FRAME);
    if (this.frame == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    this.contextModule = event.getData(MPSDataKeys.CONTEXT_MODULE);
    if (this.contextModule == null) {
      return false;
    }
    this.models = event.getData(MPSDataKeys.MODELS);
    if (this.models == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      final DeleteDialog dialog = new DeleteDialog(DeleteModels_Action.this.project, "Delete Models", "Are you sure you want to delete selected models?");
      dialog.setOptions(false, true, true, false);
      dialog.show();
      if (!(dialog.isOK())) {
        return;
      }
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          for (SModelDescriptor model : ListSequence.fromList(DeleteModels_Action.this.models)) {
            if (SModelStereotype.isStubModelStereotype(model.getStereotype())) {
              continue;
            }
            DeleteModelHelper.deleteModel(DeleteModels_Action.this.project, DeleteModels_Action.this.contextModule, model, dialog.isSafe(), dialog.isDeleteFiles());
          }
        }
      });
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "DeleteModels", t);
      }
    }
  }
}
