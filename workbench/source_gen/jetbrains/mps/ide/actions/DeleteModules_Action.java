package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.project.Project;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import jetbrains.mps.project.IModule;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.Solution;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.workbench.dialogs.DeleteDialog;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.workbench.actions.module.DeleteModuleHelper;

public class DeleteModules_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(DeleteModules_Action.class);

  private Project project;
  private MPSProject mpsProject;
  private List<IModule> modules;
  private Integer selSize;

  public DeleteModules_Action() {
    super("Delete Module...", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull
  public String getKeyStroke() {
    return " DELETE";
  }

  public boolean isApplicable(AnActionEvent event) {
    if (DeleteModules_Action.this.selSize == 0) {
      return false;
    }
    if (DeleteModules_Action.this.selSize != DeleteModules_Action.this.modules.size()) {
      return false;
    }
    for (IModule module : ListSequence.fromList(DeleteModules_Action.this.modules)) {
      if (!(module instanceof Solution || module instanceof Language || module instanceof DevKit)) {
        return false;
      }
    }
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "DeleteModules", t);
      }
      this.disable(event.getPresentation());
    }
  }

  @Override
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    this.mpsProject = event.getData(MPSDataKeys.MPS_PROJECT);
    if (this.mpsProject == null) {
      return false;
    }
    this.modules = event.getData(MPSDataKeys.MODULES);
    if (this.modules == null) {
      return false;
    }
    this.selSize = event.getData(MPSDataKeys.LOGICAL_VIEW_SELECTION_SIZE);
    if (this.selSize == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      String message = "Are you sure you want to delete selected modules? This operation is not undoable.";
      final DeleteDialog dialog = new DeleteDialog(DeleteModules_Action.this.project, "Delete Modules", message);
      dialog.setOptions(false, false, true, false);
      dialog.show();
      if (!(dialog.isOK())) {
        return;
      }
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          for (IModule module : ListSequence.fromList(DeleteModules_Action.this.modules)) {
            DeleteModuleHelper.deleteModule(DeleteModules_Action.this.project, DeleteModules_Action.this.mpsProject, module, dialog.isSafe(), dialog.isDeleteFiles());
          }
        }
      });
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "DeleteModules", t);
      }
    }
  }
}
