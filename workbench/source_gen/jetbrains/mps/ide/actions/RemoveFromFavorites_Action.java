package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.List;
import javax.swing.tree.TreeNode;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.ide.projectPane.favorites.FavoritesUtil;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.projectPane.favorites.MPSFavoritesManager;
import com.intellij.ide.projectView.ProjectView;
import jetbrains.mps.ide.projectPane.favorites.FavoritesProjectPane;

public class RemoveFromFavorites_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(RemoveFromFavorites_Action.class);

  private List<TreeNode> treeNodes;
  private Project project;

  public RemoveFromFavorites_Action() {
    super("Remove from Favorites", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "ctrl DELETE";
  }

  public boolean isApplicable(AnActionEvent event) {
    if (RemoveFromFavorites_Action.this.treeNodes.isEmpty()) {
      return false;
    }
    return FavoritesUtil.isActiveFavorites(RemoveFromFavorites_Action.this.project);
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "RemoveFromFavorites", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.treeNodes = event.getData(MPSDataKeys.LOGICAL_VIEW_NODES);
    if (this.treeNodes == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    return true;
  }

  protected void cleanup() {
    super.cleanup();
    this.treeNodes = null;
    this.project = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      List<Object> objects = FavoritesUtil.getObjects(RemoveFromFavorites_Action.this.treeNodes);
      MPSFavoritesManager favoritesManager = RemoveFromFavorites_Action.this.project.getComponent(MPSFavoritesManager.class);
      if (favoritesManager == null) {
        return;
      }
      ProjectView projectView = ProjectView.getInstance(RemoveFromFavorites_Action.this.project);
      FavoritesProjectPane pane = (FavoritesProjectPane) projectView.getCurrentProjectViewPane();
      String name = pane.getSubId();
      favoritesManager.removeRoots(name, objects);
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "RemoveFromFavorites", t);
      }
    }
  }
}
