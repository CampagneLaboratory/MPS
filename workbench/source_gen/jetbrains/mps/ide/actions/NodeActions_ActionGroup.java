package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleReference;
import jetbrains.mps.workbench.action.ActionFactory;
import jetbrains.mps.workbench.action.BaseGroup;
import jetbrains.mps.workbench.actions.nodes.SetNodePackageAction;
import jetbrains.mps.workbench.actions.nodes.GoToConceptEditorDeclarationAction;
import jetbrains.mps.workbench.actions.nodes.CopyNodeAction;
import jetbrains.mps.workbench.actions.nodes.CopyNodeReferenceAction;
import jetbrains.mps.workbench.actions.nodes.PasteNodeAction;
import jetbrains.mps.workbench.actions.nodes.CutNodeAction;
import jetbrains.mps.workbench.actions.nodes.DeleteNodeAction;
import jetbrains.mps.workbench.actions.nodes.GoToEditorDeclarationAction;
import jetbrains.mps.workbench.actions.nodes.GoToRulesAction;
import jetbrains.mps.lang.generator.plugin.debug.actions.ShowGenerationTraceAction;
import jetbrains.mps.workbench.actions.nodes.FindSpecificNodeUsagesAction;
import jetbrains.mps.workbench.actions.nodes.FastFindUsagesNodeAction;

public class NodeActions_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(NodeActions_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.NodeActions";
  public static final String LABEL_ID_structure = ID + "structure";

  public NodeActions_ActionGroup() {
    super("", ID);
    this.setIsInternal(false);
    this.setPopup(false);
    try {
      {
        IModule language = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(language.getClass("jetbrains.mps.ide.actions.EditNode_Action"), language.getModuleFqName(), null));
      }
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(SetNodePackageAction.class)) {
        this.add(new SetNodePackageAction());
      } else {
        this.add(ActionFactory.getInstance().acquireRegisteredAction(SetNodePackageAction.class, null, null));
      }
      this.addSeparator();
      {
        IModule language = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(language.getClass("jetbrains.mps.ide.actions.ExpandNode_Action"), language.getModuleFqName(), null));
      }
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(GoToConceptEditorDeclarationAction.class)) {
        this.add(new GoToConceptEditorDeclarationAction());
      } else {
        this.add(ActionFactory.getInstance().acquireRegisteredAction(GoToConceptEditorDeclarationAction.class, null, null));
      }
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(CopyNodeAction.class)) {
        this.add(new CopyNodeAction());
      } else {
        this.add(ActionFactory.getInstance().acquireRegisteredAction(CopyNodeAction.class, null, null));
      }
      if (BaseGroup.class.isAssignableFrom(CopyNodeReferenceAction.class)) {
        this.add(new CopyNodeReferenceAction());
      } else {
        this.add(ActionFactory.getInstance().acquireRegisteredAction(CopyNodeReferenceAction.class, null, null));
      }
      if (BaseGroup.class.isAssignableFrom(PasteNodeAction.class)) {
        this.add(new PasteNodeAction());
      } else {
        this.add(ActionFactory.getInstance().acquireRegisteredAction(PasteNodeAction.class, null, null));
      }
      if (BaseGroup.class.isAssignableFrom(CutNodeAction.class)) {
        this.add(new CutNodeAction());
      } else {
        this.add(ActionFactory.getInstance().acquireRegisteredAction(CutNodeAction.class, null, null));
      }
      {
        IModule language = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(language.getClass("jetbrains.mps.ide.actions.CloneRoot_Action"), language.getModuleFqName(), null));
      }
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(DeleteNodeAction.class)) {
        this.add(new DeleteNodeAction());
      } else {
        this.add(ActionFactory.getInstance().acquireRegisteredAction(DeleteNodeAction.class, null, null));
      }
      this.addSeparator();
      {
        IModule language = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(language.getClass("jetbrains.mps.ide.actions.GoToConceptDeclaration_Action"), language.getModuleFqName(), null));
      }
      if (BaseGroup.class.isAssignableFrom(GoToEditorDeclarationAction.class)) {
        this.add(new GoToEditorDeclarationAction());
      } else {
        this.add(ActionFactory.getInstance().acquireRegisteredAction(GoToEditorDeclarationAction.class, null, null));
      }
      if (BaseGroup.class.isAssignableFrom(GoToRulesAction.class)) {
        this.add(new GoToRulesAction());
      } else {
        this.add(ActionFactory.getInstance().acquireRegisteredAction(GoToRulesAction.class, null, null));
      }
      {
        IModule language = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(language.getClass("jetbrains.mps.ide.actions.ShowNodeInExplorer_Action"), language.getModuleFqName(), null));
      }
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(ShowGenerationTraceAction.class)) {
        this.add(new ShowGenerationTraceAction());
      } else {
        this.add(ActionFactory.getInstance().acquireRegisteredAction(ShowGenerationTraceAction.class, null, null));
      }
      {
        IModule language = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(language.getClass("jetbrains.mps.ide.actions.ShowGenerationTraceback_Action"), language.getModuleFqName(), null));
      }
      this.addSeparator();
      if (BaseGroup.class.isAssignableFrom(FindSpecificNodeUsagesAction.class)) {
        this.add(new FindSpecificNodeUsagesAction());
      } else {
        this.add(ActionFactory.getInstance().acquireRegisteredAction(FindSpecificNodeUsagesAction.class, null, null));
      }
      if (BaseGroup.class.isAssignableFrom(FastFindUsagesNodeAction.class)) {
        this.add(new FastFindUsagesNodeAction());
      } else {
        this.add(ActionFactory.getInstance().acquireRegisteredAction(FastFindUsagesNodeAction.class, null, null));
      }
      this.addSeparator();
      {
        IModule language = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(language.getClass("jetbrains.mps.ide.actions.ShowConceptInHierarchy_Action"), language.getModuleFqName(), null));
      }
      this.addAnchor(NodeActions_ActionGroup.LABEL_ID_structure);
      {
        IModule language = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(language.getClass("jetbrains.mps.ide.actions.ShowClassInHierarchy_Action"), language.getModuleFqName(), null));
      }
      this.addSeparator();
      {
        IModule language = MPSModuleRepository.getInstance().getModule(new ModuleReference("jetbrains.mps.ide"));
        this.add(ActionFactory.getInstance().acquireRegisteredAction(language.getClass("jetbrains.mps.ide.actions.ShowErrorMessage_Action"), language.getModuleFqName(), null));
      }
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void adjust() {
  }

}
