package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.awt.Frame;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.project.IModule;
import jetbrains.mps.generator.TransientModelsModule;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.ui.filechoosers.treefilechooser.TreeFileChooser;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.ide.ui.filechoosers.treefilechooser.IFileFilter;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.javaParser.JavaCompiler;
import java.io.File;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.vfs.FileSystem;

public class GetModelContentsFromSource_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(GetModelContentsFromSource_Action.class);

  private Frame frame;
  private IOperationContext context;
  private SModelDescriptor model;

  public GetModelContentsFromSource_Action() {
    super("Get Model Contents from Source", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public boolean isApplicable(AnActionEvent event) {
    IModule module = GetModelContentsFromSource_Action.this.model.getModule();
    if (module == null) {
      return false;
    }
    return !(module instanceof TransientModelsModule);
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      {
        boolean enabled = this.isApplicable(event);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "GetModelContentsFromSource", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.frame = event.getData(MPSDataKeys.FRAME);
    if (this.frame == null) {
      return false;
    }
    this.context = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.context == null) {
      return false;
    }
    this.model = event.getData(MPSDataKeys.MODEL);
    if (this.model == null) {
      return false;
    }
    return true;
  }

  protected void cleanup() {
    super.cleanup();
    this.frame = null;
    this.context = null;
    this.model = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      IModule module = GetModelContentsFromSource_Action.this.model.getModule();
      TreeFileChooser treeFileChooser = new TreeFileChooser();
      treeFileChooser.setDirectoriesAreAlwaysVisible(true);
      treeFileChooser.setMode(TreeFileChooser.MODE_DIRECTORIES);
      final SModel sModel = GetModelContentsFromSource_Action.this.model.getSModel();
      treeFileChooser.setFileFilter(new IFileFilter() {
        public boolean accept(IFile file) {
          return JavaCompiler.checkBaseModelMatchesSourceDirectory(sModel, new File(file.getAbsolutePath()));
        }
      });
      String generatorOutputPath = module.getGeneratorOutputPath();
      File initial = null;
      File output = new File(generatorOutputPath);
      if (output.exists()) {
        initial = output;
        File sourceRoot = new File(initial.getParentFile(), "source");
        if (!(sourceRoot.exists())) {
          sourceRoot = new File(initial.getParentFile(), "src");
        }
        initial = sourceRoot;
        if (sourceRoot.exists()) {
          File modelSource = new File(sourceRoot, NameUtil.pathFromNamespace(sModel.getLongName()));
          if (modelSource.exists()) {
            initial = modelSource;
          }
        }
      }
      if (initial != null) {
        treeFileChooser.setInitialFile(FileSystem.getInstance().getFileByPath(initial.getAbsolutePath()));
      }
      IFile result = treeFileChooser.showDialog(GetModelContentsFromSource_Action.this.frame);
      if (result != null) {
        JavaCompiler javaCompiler = new JavaCompiler(GetModelContentsFromSource_Action.this.context, module, new File(result.getAbsolutePath()), false, sModel);
        javaCompiler.compile();
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "GetModelContentsFromSource", t);
      }
    }
  }
}
