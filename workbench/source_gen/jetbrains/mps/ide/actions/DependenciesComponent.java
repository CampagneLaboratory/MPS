package jetbrains.mps.ide.actions;

/*Generated by MPS */

import javax.swing.JComponent;
import jetbrains.mps.ide.findusages.view.UsagesView;
import com.intellij.openapi.project.Project;
import java.util.List;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.ide.findusages.model.holders.VoidHolder;
import javax.swing.JSplitPane;
import java.awt.BorderLayout;
import com.intellij.ui.components.JBScrollPane;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.smodel.SNode;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.progress.ProgressMonitorAdapter;

public class DependenciesComponent extends JComponent {
  private DependencyTree myInitTree;
  private UsagesView myTargetsView;
  private UsagesView myReferencesView;
  private Project myProject;
  private Scope myScope;
  private List<SReference> myReferences = ListSequence.fromList(new ArrayList<SReference>());
  private ReferencesFinder myReferencesFinder = null;

  public DependenciesComponent() {
  }

  public void setContent(Scope scope, MPSProject project) {
    myInitTree = new DependencyTree(this);
    myTargetsView = new TargetsView(myProject, this);
    myReferencesView = new ReferencesView(myProject);
    myReferencesView.setRunOptions(null, new SearchQuery(new VoidHolder("References rr", null), null), new UsagesView.ButtonConfiguration(false));
    JSplitPane splitPane = new JSplitPane();
    JSplitPane rightSplitPane = new JSplitPane();
    setLayout(new BorderLayout());
    JBScrollPane leftPane = new JBScrollPane(myInitTree);
    splitPane.setLeftComponent(leftPane);
    splitPane.setRightComponent(rightSplitPane);
    splitPane.setDividerLocation(0.25);
    splitPane.setResizeWeight(0.25);
    rightSplitPane.setLeftComponent(myTargetsView.getComponent());
    rightSplitPane.setRightComponent(myReferencesView.getComponent());
    rightSplitPane.setDividerLocation(0.5);
    rightSplitPane.setResizeWeight(0.5);
    this.removeAll();
    this.add(splitPane);
    myReferencesFinder = new ReferencesFinder();
    setVisible(true);
    myInitTree.setContent(scope.getModels(), scope.getModules(), project);
    updateTargetsView(scope);
    repaint();
  }

  public void setProject(Project project) {
    myProject = project;
  }

  public void updateTargetsView(final Scope scope) {
    myScope = scope;
    final Wrappers._T<SearchResults<SNode>> results = new Wrappers._T<SearchResults<SNode>>(new SearchResults());
    ProgressManager.getInstance().run(new Task.Modal(myProject, "Targets search", true) {
      public void run(@NotNull final ProgressIndicator indicator) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            ProgressMonitor monitor = new ProgressMonitorAdapter(indicator);
            try {
              monitor.start(null, 100);
              List<SReference> references = myReferencesFinder.getReferences(scope, monitor.subTask(50));
              myReferences = references;
              results.value = myReferencesFinder.getTargetSearchResults(references, monitor.subTask(50));
            } finally {
              monitor.done();
            }
          }
        });
      }
    });
    myTargetsView.setContents(results.value);
  }

  public void updateReferencesView(final Scope scope) {
    ProgressManager.getInstance().run(new Task.Modal(myProject, "References search", true) {
      public void run(@NotNull ProgressIndicator indicator) {
        ProgressMonitor monitor = new ProgressMonitorAdapter(indicator);
        myReferencesView.setContents(myReferencesFinder.getRefSearchResults(myReferences, scope, monitor));

      }
    });
  }
}
