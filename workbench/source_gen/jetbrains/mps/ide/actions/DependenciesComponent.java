package jetbrains.mps.ide.actions;

/*Generated by MPS */

import javax.swing.JComponent;
import jetbrains.mps.ide.findusages.view.UsagesView;
import com.intellij.openapi.project.Project;
import java.util.List;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.findusages.view.treeholder.treeview.ViewOptions;
import jetbrains.mps.ide.findusages.model.IResultProvider;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import javax.swing.JSplitPane;
import java.awt.BorderLayout;
import com.intellij.ui.components.JBScrollPane;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.findusages.model.SearchResult;

public class DependenciesComponent extends JComponent {
  private DependencyTree myInitTree;
  private UsagesView myTargetsView;
  private UsagesView myReferencesView;
  private Project myProject;
  private Scope myScope;
  private List<SReference> myReferences = ListSequence.fromList(new ArrayList<SReference>());
  private ReferencesFinder myReferencesFinder = null;

  public DependenciesComponent() {
  }

  public void setContent(Scope scope, MPSProject project) {
    myInitTree = new DependencyTree(this);
    myTargetsView = new TargetsView(myProject, this);
    myReferencesView = new UsagesView(myProject, new ViewOptions(false, false, false, true, false)) {
      public void close() {
      }

      @Override
      public void setRunOptions(IResultProvider provider, SearchQuery query, UsagesView.ButtonConfiguration configuration) {
      }
    };

    JSplitPane splitPane = new JSplitPane();
    JSplitPane rightSplitPane = new JSplitPane();
    setLayout(new BorderLayout());
    JBScrollPane leftPane = new JBScrollPane(myInitTree);
    splitPane.setLeftComponent(leftPane);
    splitPane.setRightComponent(rightSplitPane);
    splitPane.setDividerLocation(0.25);
    splitPane.setResizeWeight(0.25);
    rightSplitPane.setLeftComponent(myTargetsView.getComponent());
    rightSplitPane.setRightComponent(myReferencesView.getComponent());
    rightSplitPane.setDividerLocation(0.5);
    rightSplitPane.setResizeWeight(0.5);
    this.removeAll();
    this.add(splitPane);
    myReferencesFinder = new ReferencesFinder();
    setVisible(true);
    myInitTree.setContent(scope.getModels(), scope.getModules(), project);
    updateTargetsView(scope);
    repaint();
  }

  public void setProject(Project project) {
    myProject = project;
  }

  public void updateTargetsView(Scope scope) {
    myScope = scope;
    final List<SReference> references = myReferencesFinder.getReferences(scope);
    myReferences = references;
    final SearchResults<SNode> results = new SearchResults();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (SReference ref : references) {
          results.getSearchResults().add(new SearchResult(ref.getTargetNode(), "target"));
        }
      }
    });
    myTargetsView.setContents(results);
  }

  public void updateReferencesView(final Scope scope) {
    final SearchResults<SNode> results = new SearchResults();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (SReference ref : myReferences) {
          if (scope.contains(ref.getTargetNode())) {
            results.getSearchResults().add(new SearchResult(ref.getSourceNode(), "reference"));
          }
        }
      }
    });
    myReferencesView.setContents(results);
  }
}
