package jetbrains.mps.ide.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.lang.structure.behavior.LinkDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.lang.structure.structure.PropertyDeclaration;
import jetbrains.mps.smodel.PropertySupport;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.ide.ui.smodel.SModelTreeNode;
import jetbrains.mps.smodel.search.SModelSearchUtil;

public class ConstraintsChecker extends SpecificChecker {
  public ConstraintsChecker() {
  }

  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel model, ProgressContext progressContext, IOperationContext operationContext) {
    List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());

    for (final SNode node : ListSequence.fromList(SModelOperations.getNodes(model, null))) {
      if (!(progressContext.checkAndUpdateIndicator("Checking " + SModelOperations.getModelName(model) + " for cardinalities and properties constraints..."))) {
        break;
      }
      SNode concept = SNodeOperations.getConceptDeclaration(node);

      // Check links 
      for (SNode link : ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(concept))) {
        if (LinkDeclaration_Behavior.call_isAtLeastOneCardinality_3386205146660812199(link)) {
          if (SPropertyOperations.hasValue(link, "metaClass", "aggregation", "reference")) {
            if (ListSequence.fromList(SNodeOperations.getChildren(node, link)).isEmpty()) {
              addIssue(results, node, "Cardinality constraint violation in role \"" + SPropertyOperations.getString(link, "role") + "\"", ModelChecker.CATEGORY_ERROR, "cardinality", null);
            }
          } else {
            if ((SLinkOperations.getTargetNode(SNodeOperations.getReference(node, link)) == null)) {
              addIssue(results, node, "Cardinality constraint violation in role \"" + SPropertyOperations.getString(link, "role") + "\"", ModelChecker.CATEGORY_ERROR, "cardinality", null);
            }
          }
        }
      }

      for (final SNode child : ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(SNodeOperations.isAttribute(it));
        }
      })) {
        if (!(ModelCheckerUtils.isDeclaredLink(SNodeOperations.getContainingLinkDeclaration(child), true))) {
          addIssue(results, node, "Usage of undeclared child role \"" + SNodeOperations.getContainingLinkRole(child) + "\"", ModelChecker.CATEGORY_WARNING, "undeclared child", new IModelCheckerFix() {
            public boolean doFix() {
              ListSequence.fromList(SNodeOperations.getChildren(node, SNodeOperations.getContainingLinkDeclaration(child))).visitAll(new IVisitor<SNode>() {
                public void visit(SNode child) {
                  SNodeOperations.deleteNode(child);
                }
              });
              return true;
            }
          });
        }
      }

      for (final SReference reference : ListSequence.fromList(SNodeOperations.getReferences(node))) {
        if (!(ModelCheckerUtils.isDeclaredLink(SLinkOperations.findLinkDeclaration(reference), false))) {
          addIssue(results, node, "Usage of undeclared reference role \"" + reference + "\"", ModelChecker.CATEGORY_WARNING, "undeclared reference", new IModelCheckerFix() {
            public boolean doFix() {
              node.removeReferent(SLinkOperations.getRole(reference));
              return true;
            }
          });
        }
      }

      // Check properties 
      ConceptAndSuperConceptsScope chs = new ConceptAndSuperConceptsScope(((AbstractConceptDeclaration) SNodeOperations.getAdapter(concept)));
      List<PropertyDeclaration> props = chs.getAdapters(PropertyDeclaration.class);
      for (PropertyDeclaration p : ListSequence.fromList(props)) {
        PropertySupport ps = PropertySupport.getPropertySupport(p);
        String value = ps.fromInternalValue(node.getProperty(p.getName()));
        if (!(ps.canSetValue(node, p.getName(), value, operationContext.getScope()))) {
          addIssue(results, node, "Property constraint violation for property \"" + p.getName() + "\"", ModelChecker.CATEGORY_WARNING, "property constraint", null);
        }
      }

      for (final String name : SetSequence.fromSet(node.getPropertyNames())) {
        if (node.isRoot() && SModelTreeNode.PACK.equals(name)) {
          continue;
        }
        if (!(isDeclaredProperty(concept, name))) {
          addIssue(results, node, "Usage of undeclared property \"" + name + "\"", ModelChecker.CATEGORY_WARNING, "undeclared property", new IModelCheckerFix() {
            public boolean doFix() {
              node.setProperty(name, null, false);
              return true;
            }
          });
        }
      }
    }

    return results;
  }

  private static boolean isDeclaredProperty(SNode concept, String name) {
    PropertyDeclaration propertyDeclaration = SModelSearchUtil.findPropertyDeclaration(((AbstractConceptDeclaration) SNodeOperations.getAdapter(concept)), name);
    return propertyDeclaration != null;
  }
}
