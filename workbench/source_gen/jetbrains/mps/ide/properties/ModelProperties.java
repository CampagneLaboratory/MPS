package jetbrains.mps.ide.properties;

/*Generated by MPS */

import jetbrains.mps.uiLanguage.runtime.BaseBean;
import java.util.List;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.workbench.dialogs.project.components.parts.lists.ListsFactory;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.ModelGenerationStatusManager;
import jetbrains.mps.smodel.ModelAccess;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.Language;

public class ModelProperties extends BaseBean {
  private List<SModelReference> myImportedModels;
  private List<ModuleReference> myUsedLanguages = ListsFactory.create(ListsFactory.MODULE_VALID_REF_COMPARATOR);
  private List<ModuleReference> myUsedDevKits = ListsFactory.create(ListsFactory.MODULE_VALID_REF_COMPARATOR);
  private List<ModuleReference> myLanguagesEngagedOnGeneration = ListsFactory.create(ListsFactory.MODULE_REF_COMPARATOR);
  private SModelDescriptor myModelDescriptor;
  private IOperationContext myContext;
  private boolean myDoNotGenerate;

  public ModelProperties(SModelDescriptor modelDescriptor, IOperationContext context) {
    myModelDescriptor = modelDescriptor;
    myImportedModels = ListsFactory.create(ListsFactory.createValidRefComparator(modelDescriptor.getModule().getScope()));
    myContext = context;
    myImportedModels.addAll(myModelDescriptor.getSModel().getImportedModelUIDs());
    myUsedLanguages.addAll(myModelDescriptor.getSModel().getExplicitlyImportedLanguages());
    myUsedDevKits.addAll(myModelDescriptor.getSModel().getDevKitRefs());
    myLanguagesEngagedOnGeneration.addAll(myModelDescriptor.getSModel().getEngagedOnGenerationLanguages());
    myDoNotGenerate = ModelGenerationStatusManager.isDoNotGenerate(myModelDescriptor);
  }

  public SModelDescriptor getModelDescriptor() {
    return myModelDescriptor;
  }

  public List<SModelReference> getImportedModels() {
    return myImportedModels;
  }

  public List<ModuleReference> getUsedLanguages() {
    return myUsedLanguages;
  }

  public List<ModuleReference> getUsedDevKits() {
    return myUsedDevKits;
  }

  public List<ModuleReference> getLanguagesEngagedOnGeneration() {
    return myLanguagesEngagedOnGeneration;
  }

  public boolean isDoNotGenerate() {
    return myDoNotGenerate;
  }

  public void setDoNotGenerate(boolean doNotGenerate) {
    myDoNotGenerate = doNotGenerate;
  }

  public void saveChanges() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        addNewModels();
        removeUnusedModels();
        addNewLanguages();
        removeUnusedLanguages();
        addNewDevKits();
        removeUnusedDevKits();
        addNewEngagedOnGenerationLanguages();
        removeUnusedEngagedOnGenerationLanguages();
        if (ModelGenerationStatusManager.isDoNotGenerate(myModelDescriptor) != myDoNotGenerate) {
          ModelGenerationStatusManager.setDoNotGenerate(myModelDescriptor, myDoNotGenerate);
        }
        myModelDescriptor.save();
      }
    });
  }

  private void addNewDevKits() {
    Set<ModuleReference> devKitsInModel = new HashSet<ModuleReference>(myModelDescriptor.getSModel().getDevKitRefs());
    Set<ModuleReference> devKitsInProperties = new HashSet<ModuleReference>(getUsedDevKits());
    devKitsInProperties.removeAll(devKitsInModel);
    for (ModuleReference dk : devKitsInProperties) {
      DevKit devKit = GlobalScope.getInstance().getDevKit(dk);
      assert devKit != null;
      SModel model = myModelDescriptor.getSModel();
      model.addNewlyImportedDevKit(dk);
    }
  }

  private void removeUnusedDevKits() {
    Set<ModuleReference> propsDevKits = new HashSet<ModuleReference>(getUsedDevKits());
    for (ModuleReference dk : myModelDescriptor.getSModel().getDevKitRefs()) {
      if (!(propsDevKits.contains(dk))) {
        myModelDescriptor.getSModel().deleteDevKit(dk);
      }
    }
  }

  protected String getErrorString() {
    return null;
  }

  private void addNewLanguages() {
    Set<ModuleReference> languagesInModel = new HashSet<ModuleReference>(myModelDescriptor.getSModel().getExplicitlyImportedLanguages());
    Set<ModuleReference> languagesInProps = new HashSet<ModuleReference>(getUsedLanguages());
    languagesInProps.removeAll(languagesInModel);
    for (ModuleReference namespace : languagesInProps) {
      Language language = GlobalScope.getInstance().getLanguage(namespace);
      if (language != null) {
        if (!(myModelDescriptor.getModule().getScope().getVisibleLanguages().contains(language))) {
          myModelDescriptor.getModule().addUsedLanguage(language.getModuleReference());
        }
        myModelDescriptor.getSModel().addLanguage(language);
      }
    }
  }

  private void removeUnusedLanguages() {
    Set<ModuleReference> languagesInModel = new HashSet<ModuleReference>(myModelDescriptor.getSModel().getExplicitlyImportedLanguages());
    Set<ModuleReference> languagesInProps = new HashSet<ModuleReference>(getUsedLanguages());
    languagesInModel.removeAll(languagesInProps);
    for (ModuleReference namespace : languagesInModel) {
      myModelDescriptor.getSModel().deleteLanguage(namespace);
    }
  }

  private void addNewEngagedOnGenerationLanguages() {
    Set<ModuleReference> languagesInModel = new HashSet<ModuleReference>(myModelDescriptor.getSModel().getEngagedOnGenerationLanguages());
    Set<ModuleReference> languagesInProps = new HashSet<ModuleReference>(getLanguagesEngagedOnGeneration());
    languagesInProps.removeAll(languagesInModel);
    for (ModuleReference namespace : languagesInProps) {
      myModelDescriptor.getSModel().addEngagedOnGenerationLanguage(namespace);
    }
  }

  private void removeUnusedEngagedOnGenerationLanguages() {
    Set<ModuleReference> languagesInModel = new HashSet<ModuleReference>(myModelDescriptor.getSModel().getEngagedOnGenerationLanguages());
    Set<ModuleReference> languagesInProps = new HashSet<ModuleReference>(getLanguagesEngagedOnGeneration());
    languagesInModel.removeAll(languagesInProps);
    for (ModuleReference ref : languagesInModel) {
      myModelDescriptor.getSModel().removeEngagedOnGenerationLanguage(ref);
    }
  }

  private void addNewModels() {
    Set<SModelReference> modelsInModel = new HashSet<SModelReference>(myModelDescriptor.getSModel().getImportedModelUIDs());
    Set<SModelReference> modelsInProps = new HashSet<SModelReference>(getImportedModels());
    modelsInProps.removeAll(modelsInModel);
    for (SModelReference modelReference : modelsInProps) {
      myModelDescriptor.getSModel().addImportedModel(modelReference);
    }
  }

  private void removeUnusedModels() {
    Set<SModelReference> modelsInModel = new HashSet<SModelReference>(myModelDescriptor.getSModel().getImportedModelUIDs());
    Set<SModelReference> modelsInProps = new HashSet<SModelReference>(getImportedModels());
    modelsInModel.removeAll(modelsInProps);
    for (SModelReference modelReference : modelsInModel) {
      myModelDescriptor.getSModel().deleteImportedModel(modelReference);
    }
  }
}
