package jetbrains.mps.ide.properties;

/*Generated by MPS */

import jetbrains.mps.workbench.dialogs.project.BasePropertiesDialog;
import jetbrains.mps.project.Solution;
import com.intellij.openapi.Disposable;
import jetbrains.mps.smodel.IOperationContext;
import javax.swing.JPanel;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.workbench.InternalFlag;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import com.intellij.openapi.util.Disposer;

public class SolutionPropertiesDialog extends BasePropertiesDialog {
  public Solution mySolution;
  public SolutionProperties myProperties;
  public Disposable myDisposable = new Disposable() {
    public void dispose() {
    }
  };

  /*package*/ SolutionPropertiesDialog(Solution solution, IOperationContext operationContext) {
    super("Solution Properties", operationContext);
    this.mySolution = solution;
    this.collectSolutionProperties();
  }

  public JPanel createCheckboxPanel() {
    List<StandardComponents.CheckboxDescriptor> list = new ArrayList<StandardComponents.CheckboxDescriptor>();
    list.add(new StandardComponents.CheckboxDescriptor(this.myProperties, SolutionProperties.EXTERNALLY_VISIBLE, "Externally visible"));
    list.add(new StandardComponents.CheckboxDescriptor(this.myProperties, ModuleProperties.COMPILE_IN_MPS, "Compile in MPS"));
    if (InternalFlag.isInternalMode()) {
      list.add(new StandardComponents.CheckboxDescriptor(this.myProperties, ModuleProperties.ENABLE_JAVA_STUBS, "Stubs For Generated Code"));
      list.add(new StandardComponents.CheckboxDescriptor(this.myProperties, SolutionProperties.DONT_LOAD_CLASSPATH, "Load Classes with App Classloader", true));
    }
    return StandardComponents.createCheckboxPanel(this, list);
  }

  private void collectSolutionProperties() {
    this.myProperties = new SolutionProperties();
    this.myProperties.loadFrom(this.mySolution.getModuleDescriptor());
  }

  protected boolean doSaveChanges() {
    if (!(this.checkValidity())) {
      return false;
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SolutionDescriptor solutionDescriptor = SolutionPropertiesDialog.this.mySolution.getModuleDescriptor();
        SolutionPropertiesDialog.this.myProperties.saveTo(solutionDescriptor);
        SolutionPropertiesDialog.this.mySolution.setSolutionDescriptor(solutionDescriptor, true);
        SolutionPropertiesDialog.this.mySolution.save();
      }
    }, getOperationContext().getProject());
    return true;
  }

  protected String getErrorString() {
    return this.checkStubModels(this.myProperties.getStubModels());
  }

  public void dispose() {
    super.dispose();
    Disposer.dispose(this.myDisposable);
  }
}
