package jetbrains.mps.ide.properties;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.workbench.dialogs.project.components.parts.lists.ListsFactory;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.project.structure.modules.DevkitDescriptor;

public class DevkitProperties extends ModuleProperties {
  public static final String PLUGIN = "plugin";

  private String myPlugin;
  private List<ModuleReference> myExportedLanguages;
  private List<ModuleReference> myExportedSolutions;
  private List<ModuleReference> myExtendedDevkits;

  public DevkitProperties() {
    this.myExportedLanguages = ListsFactory.create(ListsFactory.MODULE_VALID_REF_COMPARATOR);
    this.myExportedSolutions = ListsFactory.create(ListsFactory.MODULE_VALID_REF_COMPARATOR);
    this.myExtendedDevkits = ListsFactory.create(ListsFactory.MODULE_VALID_REF_COMPARATOR);
  }

  public String getPlugin() {
    return this.myPlugin;
  }

  public void setPlugin(String plugin) {
    this.myPlugin = plugin;
  }

  public List<ModuleReference> getExportedLanguages() {
    return this.myExportedLanguages;
  }

  public List<ModuleReference> getExportedSolutions() {
    return this.myExportedSolutions;
  }

  public List<ModuleReference> getExtendedDevkits() {
    return this.myExtendedDevkits;
  }

  @Override
  public void loadFrom(ModuleDescriptor descriptor) {
    assert descriptor instanceof DevkitDescriptor;
    super.loadFrom(descriptor);
    DevkitDescriptor d = (DevkitDescriptor) descriptor;
    this.myPlugin = d.getPlugin();
    for (ModuleReference ref : d.getExportedLanguages()) {
      this.myExportedLanguages.add(ref);
    }
    for (ModuleReference ref : d.getExportedSolutions()) {
      this.myExportedSolutions.add(ref);
    }
    for (ModuleReference ref : d.getExtendedDevkits()) {
      this.myExtendedDevkits.add(ref);
    }
  }

  @Override
  public void saveTo(ModuleDescriptor descriptor) {
    assert descriptor instanceof DevkitDescriptor;
    super.saveTo(descriptor);
    DevkitDescriptor d = (DevkitDescriptor) descriptor;
    d.setPlugin(this.myPlugin);
    d.getExportedLanguages().clear();
    d.getExportedLanguages().addAll(this.myExportedLanguages);
    d.getExportedSolutions().clear();
    d.getExportedSolutions().addAll(this.myExportedSolutions);
    d.getExtendedDevkits().clear();
    d.getExtendedDevkits().addAll(this.myExtendedDevkits);
  }
}
