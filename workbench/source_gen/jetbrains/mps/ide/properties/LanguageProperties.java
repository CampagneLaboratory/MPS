package jetbrains.mps.ide.properties;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.project.structure.modules.ClassPathEntry;
import jetbrains.mps.project.structure.modules.StubModelsEntry;
import jetbrains.mps.project.structure.modules.StubSolution;
import jetbrains.mps.workbench.dialogs.project.components.parts.lists.ListsFactory;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;

public class LanguageProperties extends ModuleProperties {
  public static final String OUTPUT_PATH = "genPath";
  public static final String DO_NOT_GENERATE_ADAPTERS = "doNotGenerateAdapters";

  private String myGenPath;
  private List<SModelReference> myAccessoryModels;
  private List<ModuleReference> myExtendedLanguages;
  private List<Dependency> myRuntimeModules;
  private List<ClassPathEntry> myRuntimeClassPaths;
  private List<StubModelsEntry> myRuntimeStubModels;
  private boolean myDoNotGenerateAdapters = false;
  private List<StubSolution> myStubSolutions;

  public LanguageProperties() {
    this.myAccessoryModels = ListsFactory.create(ListsFactory.MODEL_REF_COMPARATOR);
    this.myExtendedLanguages = ListsFactory.create(ListsFactory.MODULE_REF_COMPARATOR);
    this.myRuntimeModules = ListsFactory.create(ListsFactory.DEPENDENCY_COMPARATOR);
    this.myRuntimeClassPaths = ListsFactory.create(ListsFactory.CLASSPATH_ENTRY_COMPARATOR);
    this.myStubSolutions = ListsFactory.create(ListsFactory.STUB_SOLUTIONS_ENTRY_COMPARATOR);
    this.myRuntimeStubModels = ListsFactory.create(ListsFactory.STUB_MODEL_ENTRY_COMPARATOR);
  }

  public String getGenPath() {
    return this.myGenPath;
  }

  public void setGenPath(String genPath) {
    this.myGenPath = genPath;
  }

  public List<SModelReference> getAccessoryModels() {
    return this.myAccessoryModels;
  }

  public List<ModuleReference> getExtendedLanguages() {
    return this.myExtendedLanguages;
  }

  public List<Dependency> getRuntimeModules() {
    return this.myRuntimeModules;
  }

  public List<StubSolution> getStubSolutions() {
    return this.myStubSolutions;
  }

  public List<ClassPathEntry> getRuntimeClassPaths() {
    return this.myRuntimeClassPaths;
  }

  public List<StubModelsEntry> getRuntimeStubModels() {
    return this.myRuntimeStubModels;
  }

  public boolean isDoNotGenerateAdapters() {
    return this.myDoNotGenerateAdapters;
  }

  public void setDoNotGenerateAdapters(boolean doNotGenerateAdapters) {
    this.myDoNotGenerateAdapters = doNotGenerateAdapters;
  }

  @Override
  public void loadFrom(ModuleDescriptor descriptor) {
    assert descriptor instanceof LanguageDescriptor;
    super.loadFrom(descriptor);
    LanguageDescriptor d = (LanguageDescriptor) descriptor;
    this.myGenPath = d.getGenPath();
    this.myDoNotGenerateAdapters = d.isDoNotGenerateAdapters();
    this.myAccessoryModels.addAll(d.getAccessoryModels());
    this.myExtendedLanguages.addAll(d.getExtendedLanguages());
    this.myRuntimeModules.addAll(d.getRuntimeModules());
    for (StubSolution ss : d.getStubSolutions()) {
      this.myStubSolutions.add((ss != null ?
        ss.getCopy() :
        null
      ));
    }
    for (StubModelsEntry entry : d.getRuntimeStubModels()) {
      this.myRuntimeStubModels.add((entry != null ?
        entry.getCopy() :
        null
      ));
    }
  }

  @Override
  public void saveTo(ModuleDescriptor descriptor) {
    assert descriptor instanceof LanguageDescriptor;
    super.saveTo(descriptor);
    LanguageDescriptor d = (LanguageDescriptor) descriptor;
    d.setGenPath(this.myGenPath);
    d.setDoNotGenerateAdapters(this.myDoNotGenerateAdapters);
    d.getAccessoryModels().clear();
    d.getAccessoryModels().addAll(this.myAccessoryModels);
    d.getExtendedLanguages().clear();
    d.getExtendedLanguages().addAll(this.myExtendedLanguages);
    d.getRuntimeModules().clear();
    d.getRuntimeModules().addAll(this.myRuntimeModules);
    d.getStubSolutions().clear();
    d.getStubSolutions().addAll(this.myStubSolutions);
    d.getRuntimeStubModels().clear();
    d.getRuntimeStubModels().addAll(this.myRuntimeStubModels);
  }
}
