package jetbrains.mps.ide.properties;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.structure.modules.ClassPathEntry;
import jetbrains.mps.project.structure.modules.StubModelsEntry;
import jetbrains.mps.workbench.dialogs.project.components.parts.lists.ListsFactory;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;

public class ModuleProperties {
  public static final String NAMESPACE = "namespace";
  public static final String COMPILE_IN_MPS = "compileInMPS";
  public static final String ENABLE_JAVA_STUBS = "enableJavaStubs";
  public static final String USED_LANGUAGES = "usedLanguages";
  public static final String USED_DEVKITS = "usedDevkits";

  private String myNamespace;
  private boolean myCompileInMPS;
  private boolean myEnableJavaStubs;
  private List<ModelRoot> myModelRoots;
  private List<Dependency> myDependencies;
  private List<ModuleReference> myUsedLanguages;
  private List<ModuleReference> myUsedDevkits;
  private List<String> mySourcePaths;
  private List<ClassPathEntry> myClassPaths;
  private List<StubModelsEntry> myStubModels;

  public ModuleProperties() {
    this.myModelRoots = ListsFactory.create(ListsFactory.MODEL_ROOT_COMPARATOR);
    this.myDependencies = ListsFactory.create(ListsFactory.DEPENDENCY_COMPARATOR);
    this.myUsedLanguages = ListsFactory.create(ListsFactory.MODULE_VALID_REF_COMPARATOR);
    this.myUsedDevkits = ListsFactory.create(ListsFactory.MODULE_VALID_REF_COMPARATOR);
    this.mySourcePaths = (List) ListsFactory.create(ListsFactory.COMPARABLE_COMPARATOR);
    this.myClassPaths = ListsFactory.create(ListsFactory.CLASSPATH_ENTRY_COMPARATOR);
    this.myStubModels = ListsFactory.create(ListsFactory.STUB_MODEL_ENTRY_COMPARATOR);
  }

  public String getNamespace() {
    return this.myNamespace;
  }

  public void setNamespace(String namespace) {
    this.myNamespace = namespace;
  }

  public boolean isCompileInMPS() {
    return this.myCompileInMPS;
  }

  public void setCompileInMPS(boolean compileInMPS) {
    this.myCompileInMPS = compileInMPS;
  }

  public boolean isEnableJavaStubs() {
    return this.myEnableJavaStubs;
  }

  public void setEnableJavaStubs(boolean enableJavaStubs) {
    this.myEnableJavaStubs = enableJavaStubs;
  }

  public List<ModelRoot> getModelRoots() {
    return this.myModelRoots;
  }

  public void setModelRoots(List<ModelRoot> modelRoots) {
    this.myModelRoots = modelRoots;
  }

  public List<Dependency> getDependencies() {
    return this.myDependencies;
  }

  public void setDependencies(List<Dependency> dependencies) {
    this.myDependencies = dependencies;
  }

  public List<ModuleReference> getUsedLanguages() {
    return this.myUsedLanguages;
  }

  public void setUsedLanguages(List<ModuleReference> usedLanguages) {
    this.myUsedLanguages = usedLanguages;
  }

  public List<ModuleReference> getUsedDevkits() {
    return this.myUsedDevkits;
  }

  public void setUsedDevkits(List<ModuleReference> usedDevkits) {
    this.myUsedDevkits = usedDevkits;
  }

  public List<String> getSourcePaths() {
    return this.mySourcePaths;
  }

  public void setSourcePaths(List<String> sourcePaths) {
    this.mySourcePaths = sourcePaths;
  }

  public List<ClassPathEntry> getClassPaths() {
    return this.myClassPaths;
  }

  public void setClassPaths(List<ClassPathEntry> classPaths) {
    this.myClassPaths = classPaths;
  }

  public List<StubModelsEntry> getStubModels() {
    return this.myStubModels;
  }

  public void setStubModels(List<StubModelsEntry> stubModels) {
    this.myStubModels = stubModels;
  }

  public void loadFrom(ModuleDescriptor descriptor) {
    this.myNamespace = descriptor.getNamespace();
    this.myCompileInMPS = descriptor.getCompileInMPS();
    this.myEnableJavaStubs = descriptor.getEnableJavaStubs();
    for (ModelRoot root : descriptor.getModelRoots()) {
      this.myModelRoots.add((root != null ?
        root.getCopy() :
        null
      ));
    }
    for (Dependency dep : descriptor.getDependencies()) {
      this.myDependencies.add((dep != null ?
        dep.getCopy() :
        null
      ));
    }
    this.myUsedLanguages.addAll(descriptor.getUsedLanguages());
    this.myUsedDevkits.addAll(descriptor.getUsedDevkits());
    for (String p : descriptor.getSourcePaths()) {
      this.mySourcePaths.add(p);
    }
    for (StubModelsEntry entry : descriptor.getStubModelEntries()) {
      this.myStubModels.add((entry != null ?
        entry.getCopy() :
        null
      ));
    }
  }

  public void saveTo(ModuleDescriptor descriptor) {
    descriptor.setNamespace(this.myNamespace);
    descriptor.setCompileInMPS(this.myCompileInMPS);
    descriptor.setEnableJavaStubs(this.myEnableJavaStubs);
    descriptor.getModelRoots().clear();
    descriptor.getModelRoots().addAll(this.myModelRoots);
    descriptor.getDependencies().clear();
    descriptor.getDependencies().addAll(this.myDependencies);
    descriptor.getUsedLanguages().clear();
    descriptor.getUsedLanguages().addAll(this.myUsedLanguages);
    descriptor.getUsedDevkits().clear();
    descriptor.getUsedDevkits().addAll(this.myUsedDevkits);
    descriptor.getSourcePaths().clear();
    descriptor.getSourcePaths().addAll(this.mySourcePaths);
    descriptor.getStubModelEntries().clear();
    descriptor.getStubModelEntries().addAll(this.myStubModels);
  }
}
