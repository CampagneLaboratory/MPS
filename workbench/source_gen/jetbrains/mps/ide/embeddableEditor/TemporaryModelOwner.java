package jetbrains.mps.ide.embeddableEditor;

/*Generated by MPS */

import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.smodel.ModelOwner;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.MPSModuleOwner;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.project.GlobalScope;

public class TemporaryModelOwner extends AbstractModule implements ModelOwner {
  public TemporaryModelOwner() {
    setModulePointer(ModuleReference.fromString("TemporaryModelOwner #" + System.identityHashCode(this)));
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        MPSModuleRepository.getInstance().addModule(TemporaryModelOwner.this, new MPSModuleOwner() {});
      }
    });
  }

  public void unregisterModelOwner() {
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        MPSModuleRepository.getInstance().removeModule(TemporaryModelOwner.this);
      }
    });
  }

  public void save() {
  }

  public String getTestsGeneratorOutputPath() {
    return null;
  }

  public String getGeneratorOutputPath() {
    return null;
  }

  public void setModuleDescriptor(ModuleDescriptor descriptor, boolean b) {
    throw new UnsupportedOperationException();
  }

  public ModuleDescriptor getModuleDescriptor() {
    return null;
  }

  @NotNull
  @Override
  public IScope getScope() {
    return GlobalScope.getInstance();
  }

  @Override
  public String getModuleFqName() {
    return super.getModuleFqName();
  }
}
