package jetbrains.mps.ide.embeddableEditor;

/*Generated by MPS */

import jetbrains.mps.workbench.editors.MPSFileNodeEditor;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.ModelOwner;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ProjectModels;
import jetbrains.mps.library.LanguageDesign_DevKit;
import jetbrains.mps.workbench.nodesFs.MPSNodesVirtualFileSystem;
import jetbrains.mps.ide.IEditor;
import jetbrains.mps.ide.NodeEditor;
import javax.swing.JComponent;
import java.awt.Color;
import java.util.List;
import jetbrains.mps.nodeEditor.EditorMessage;
import java.util.Set;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.generator.generationTypes.InMemoryJavaGenerationHandler;
import jetbrains.mps.reloading.CompositeClassPathItem;
import jetbrains.mps.project.IModule;
import jetbrains.mps.generator.GeneratorManager;
import jetbrains.mps.generator.GenerationSettings;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelRepository;

public class EmbeddableEditor {
  private MPSFileNodeEditor myFileNodeEditor;
  private EmbeddableEditorPanel myPanel;
  private IOperationContext myContext;
  private SModelDescriptor myModel;
  private ModelOwner myOwner;
  private SNode myNode;
  private boolean myIsEditable;

  public EmbeddableEditor(IOperationContext context, ModelOwner owner, SNode node) {
    this(context, owner, node, true);
  }

  public EmbeddableEditor(IOperationContext context, ModelOwner owner, SNode node, boolean editable) {
    this.myOwner = owner;
    this.myContext = context;
    this.myIsEditable = editable;
    this.myModel = ProjectModels.createDescriptorFor(this.myOwner);
    this.myModel.getSModel().addDevKit(LanguageDesign_DevKit.get());
    this.setNode(node);
  }

  public void setNode(SNode node) {
    this.myNode = node;
    this.myModel.getSModel().runLoadingAction(new Runnable() {
      public void run() {
        EmbeddableEditor.this.myModel.getSModel().addRoot(EmbeddableEditor.this.myNode);
      }
    });
    this.myFileNodeEditor = new MPSFileNodeEditor(this.myContext, MPSNodesVirtualFileSystem.getInstance().getFileFor(this.myNode));
    IEditor editor = this.myFileNodeEditor.getNodeEditor();
    if (editor instanceof NodeEditor) {
      NodeEditor nodeEditor = (NodeEditor) editor;
      nodeEditor.setEditable(this.myIsEditable);
    }
    if (this.myPanel == null) {
      this.myPanel = new EmbeddableEditorPanel(this.myFileNodeEditor);
    } else {
      this.myPanel.setEditor(this.myFileNodeEditor);
    }
  }

  public JComponent getComponenet() {
    return this.myPanel;
  }

  public void setBackground(Color color) {
    IEditor editor = this.myFileNodeEditor.getNodeEditor();
    if (editor instanceof NodeEditor) {
      NodeEditor nodeEditor = (NodeEditor) editor;
      nodeEditor.setBackground(color);
    }
  }

  public void mark(List<EditorMessage> messages) {
    IEditor editor = this.myFileNodeEditor.getNodeEditor();
    if (editor instanceof NodeEditor) {
      NodeEditor nodeEditor = (NodeEditor) editor;
      nodeEditor.mark(messages);
    }
  }

  public void selectNode(SNode node) {
    this.myFileNodeEditor.getNodeEditor().selectNode(node);
  }

  public GenerationResult generate(final Set<IClassPathItem> additionalClasspath) {
    if (this.myNode == null) {
      return null;
    }
    InMemoryJavaGenerationHandler handler = new InMemoryJavaGenerationHandler(false) {
      @Override
      public boolean canHandle(SModelDescriptor inputModel) {
        return inputModel != null;
      }

      @Override
      protected CompositeClassPathItem getClassPath(Set<IModule> contextModules) {
        CompositeClassPathItem result = super.getClassPath(contextModules);
        for (IClassPathItem item : additionalClasspath) {
          result.add(item);
        }
        return result;
      }
    };
    GeneratorManager manager = new GeneratorManager(this.myContext.getProject(), new GenerationSettings()) {
      protected boolean generateRequirements() {
        return false;
      }
    };
    manager.generateModelsWithProgressWindow(ListSequence.fromListAndArray(new ArrayList<SModelDescriptor>(), this.myModel), this.myContext, handler, false);
    return new GenerationResult(this.myNode, this.myContext, this.myModel, handler);
  }

  public void addLanguageStructureModel(final Language language) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        EmbeddableEditor.this.myModel.getSModel().addImportedModel(language.getStructureModelDescriptor().getSModelReference());
      }
    });
  }

  public void addLanguage(final Language language) {
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        EmbeddableEditor.this.myModel.getSModel().addLanguage(language);
      }
    });
  }

  public void addModel(final SModelReference model) {
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        EmbeddableEditor.this.myModel.getSModel().addImportedModel(model);
      }
    });
  }

  public void disposeEditor() {
    SModelRepository.getInstance().unRegisterModelDescriptors(this.myOwner);
    this.myFileNodeEditor.dispose();
  }

  protected IOperationContext createOperationContext() {
    return this.myContext;
  }
}
