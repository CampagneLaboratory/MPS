package jetbrains.mps.ide.embeddableEditor;

/*Generated by MPS */

import com.intellij.openapi.actionSystem.DataProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.ModelOwner;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.workbench.editors.MPSFileNodeEditor;
import jetbrains.mps.smodel.ProjectModels;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.workbench.nodesFs.MPSNodesVirtualFileSystem;
import javax.swing.JComponent;
import jetbrains.mps.generator.GeneratorManager;
import java.util.Arrays;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModelRepository;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;

public class EmbeddableEditor implements DataProvider {

  private IOperationContext myContext;
  private SModelDescriptor myModel;
  private ModelOwner myOwner;
  private SNode myNode;
  private MPSFileNodeEditor myFileNodeEditor;

  public EmbeddableEditor(IOperationContext context, ModelOwner owner, SNode node) {
    this.myNode = node;
    this.myOwner = owner;
    this.myModel = ProjectModels.createDescriptorFor(this.myOwner);
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {

      public void run() {
        EmbeddableEditor.this.myModel.getSModel().addRoot(EmbeddableEditor.this.myNode);
      }

    });
    this.myFileNodeEditor = new MPSFileNodeEditor(context, MPSNodesVirtualFileSystem.getInstance().getFileFor(node));
    this.myContext = context;
  }

  public void init() {
  }

  public JComponent getComponenet() {
    return this.myFileNodeEditor.getComponent();
  }

  public GenerateResult generate() {
    if (this.myNode == null) {
      return null;
    }
    EditorGenerateType type = new EditorGenerateType();
    GeneratorManager manager = this.myContext.getComponent(GeneratorManager.class);
    manager.generateModelsWithProgressWindow(Arrays.asList(this.myModel), this.myContext, type, false);
    return new GenerateResult(this.myNode, this.myContext, this.myModel, type);
  }

  public void addLanguage(final Language language) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {

      public void run() {
        EmbeddableEditor.this.myModel.getSModel().addImportedModel(language.getStructureModelDescriptor().getModelUID());
      }

    });
  }

  public void disposeEditor() {
    SModelRepository.getInstance().unRegisterModelDescriptors(this.myOwner);
  }

  protected IOperationContext createOperationContext() {
    return this.myContext;
  }

  @Nullable()
  public Object getData(@NonNls() String dataId) {
    return null;
  }

}
