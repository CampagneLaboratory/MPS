package jetbrains.mps.ide.hierarchy;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.util.annotation.DisposableCommand;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.intellij.openapi.actionSystem.ActionGroup;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.workbench.action.ActionUtils;
import jetbrains.mps.smodel.ModelAccess;

public class HierarchyTreeNode extends MPSTreeNode {
  private SNode myNode;
  protected AbstractHierarchyTree myHierarchyTree;

  public HierarchyTreeNode(@NotNull SNode declaration, IOperationContext operationContext, AbstractHierarchyTree tree) {
    super(operationContext);
    myNode = declaration;
    myHierarchyTree = tree;
    setUserObject(declaration);
    setNodeIdentifier(calculateNodeIdentifier());
  }

  protected void doUpdatePresentation() {
    @DisposableCommand SNode node = myNode;
    if (node == null) {
      return;
    }
    setIcon(IconManager.getIconFor(node));
    setAdditionalText(calculateAdditionalText());
    setAutoExpandable(false);
  }

  protected String calculateAdditionalText() {
    if (getNode() == null) {
      return "null";
    }
    return SNodeOperations.getModel(getNode()).getSModelFqName().toString();
  }

  public int getToggleClickCount() {
    return -1;
  }

  public SNode getNode() {
    return myNode;
  }

  public String calculateNodeIdentifier() {
    if (getNode() == null) {
      return "null";
    }
    if (myHierarchyTree.overridesNodeIdentifierCalculation()) {
      return myHierarchyTree.calculateNodeIdentifier(this);
    }
    return getNode().getName();
  }

  public ActionGroup getActionGroup() {
    final AbstractHierarchyView hierarchyView = myHierarchyTree.getHierarchyView();
    if (hierarchyView == null) {
      return null;
    }
    BaseAction hierarchyAction = new BaseAction("Show Hierarchy For This Node") {
      protected void doExecute(AnActionEvent e, Map<String, Object> _params) {
        final SNode node = myNode;
        hierarchyView.showItemInHierarchy(node, getOperationContext());
      }
    };
    return ActionUtils.groupFromActions(hierarchyAction);
  }

  public void doubleClick() {
    if (myHierarchyTree.doubleClick(HierarchyTreeNode.this)) {
      return;
    }
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        AbstractHierarchyView hierarchyView = myHierarchyTree.getHierarchyView();
        if (hierarchyView != null) {
          hierarchyView.openNode(myNode, getOperationContext());
        }
      }
    });
  }
}
