package jetbrains.mps.ide.hierarchy;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import java.util.ArrayList;
import jetbrains.mps.smodel.event.SModelListener;
import jetbrains.mps.smodel.LanguageHierarchyCache;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.MPSCoreComponents;
import jetbrains.mps.ide.projectPane.Icons;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.LanguageAspect;

public class HierarchyViewTool extends AbstractHierarchyView {
  private List<SModelDescriptor> myStructureModels = new ArrayList<SModelDescriptor>();
  private SModelListener myModelListener;
  private LanguageHierarchyCache myCache;

  public HierarchyViewTool(Project project, MPSCoreComponents coreComponents) {
    super(project, "Hierarchy", 8, Icons.HIERARCHY_ICON);
    myCache = coreComponents.getLanguageHierarchyCache();
  }

  public void onCreateStructureModel(SModelDescriptor md) {
    myStructureModels.add(md);
    md.addModelListener(myModelListener);
  }

  @Override
  public void initComponent() {
    super.initComponent();
    myModelListener = new HierarchyModelListener(this.myHierarchyTree);
  }

  @Override
  public void projectOpened() {
    super.projectOpened();
    for (SModelDescriptor md : GlobalScope.getInstance().getModelDescriptors()) {
      if (LanguageAspect.STRUCTURE.is(md)) {
        myStructureModels.add(md);
      }
    }
  }

  @Override
  public void projectClosed() {
    super.projectClosed();
    myStructureModels.clear();
  }

  protected AbstractHierarchyTree createHierarchyTree(boolean isParentHierarchy) {
    return new ConceptHierarchyTree(myCache, this, isParentHierarchy);
  }

  protected void doRegister() {
    for (SModelDescriptor md : myStructureModels) {
      md.addModelListener(myModelListener);
    }
  }

  protected void doUnregister() {
    for (SModelDescriptor md : myStructureModels) {
      md.removeModelListener(myModelListener);
    }
    myStructureModels.clear();
  }

  public int getPriority() {
    return 2;
  }
}
