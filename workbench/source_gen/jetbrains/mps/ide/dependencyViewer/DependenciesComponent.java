package jetbrains.mps.ide.dependencyViewer;

/*Generated by MPS */

import javax.swing.JComponent;
import jetbrains.mps.ide.findusages.view.UsagesView;
import com.intellij.openapi.project.Project;
import java.util.List;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.workbench.tools.BaseTool;
import jetbrains.mps.project.MPSProject;
import java.awt.BorderLayout;
import com.intellij.ui.components.JBScrollPane;
import javax.swing.JSplitPane;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.smodel.SNode;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.progress.ProgressMonitorAdapter;

public class DependenciesComponent extends JComponent {
  private DependencyTree myInitTree;
  private UsagesView myTargetsView;
  private UsagesView myReferencesView;
  private Project myProject;
  private Scope myScope;
  private List<SReference> myReferences = ListSequence.fromList(new ArrayList<SReference>());
  private BaseTool myTool;
  private ReferencesFinder myReferencesFinder = null;

  public DependenciesComponent(BaseTool tool) {
    myTool = tool;
  }

  public void setContent(Scope scope, MPSProject project) {
    myInitTree = new DependencyTree(this);
    myTargetsView = new TargetsView(myProject, this);
    myReferencesView = new ReferencesView(myProject, this);
    myReferencesView.setRunOptions(null, null, new UsagesView.ButtonConfiguration(false, false, true));
    setLayout(new BorderLayout());
    JBScrollPane leftPane = new JBScrollPane(myInitTree);
    JSplitPane secondSplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, leftPane, myTargetsView.getTreeComponent());
    JSplitPane mainSplitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, secondSplitPane, myReferencesView.getComponent());

    mainSplitPane.setDividerLocation(0.5);
    mainSplitPane.setResizeWeight(0.5);
    secondSplitPane.setDividerLocation(0.4);
    secondSplitPane.setResizeWeight(0.4);
    secondSplitPane.setDividerSize(3);
    mainSplitPane.setDividerSize(3);

    this.removeAll();
    this.add(mainSplitPane);
    myReferencesFinder = new ReferencesFinder();
    setVisible(true);
    myInitTree.setContent(scope, project);
    updateTargetsView(scope);
    repaint();
  }

  public UsagesView getReferencesViewComponent() {
    return myReferencesView;
  }

  public void setProject(Project project) {
    myProject = project;
  }

  public Scope getCurrentScope() {
    return myScope;
  }

  public void updateTargetsView(final Scope scope) {
    myScope = scope;
    final Wrappers._T<SearchResults<SNode>> results = new Wrappers._T<SearchResults<SNode>>(new SearchResults());
    ProgressManager.getInstance().run(new Task.Modal(myProject, "Analyzing dependencies", true) {
      public void run(@NotNull final ProgressIndicator indicator) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            ProgressMonitor monitor = new ProgressMonitorAdapter(indicator);
            try {
              monitor.start(null, 100);
              List<SReference> references = myReferencesFinder.getReferences(scope, monitor.subTask(50));
              myReferences = references;
              results.value = myReferencesFinder.getTargetSearchResults(references, monitor.subTask(50));
            } finally {
              monitor.done();
            }
          }
        });
      }
    });
    myTargetsView.setContents(results.value);
    updateReferencesView(new Scope());
  }

  public void updateReferencesView(final Scope scope) {
    ProgressManager.getInstance().run(new Task.Modal(myProject, "Analyzing dependencies", true) {
      public void run(@NotNull ProgressIndicator indicator) {
        ProgressMonitor monitor = new ProgressMonitorAdapter(indicator);
        myReferencesView.setContents(myReferencesFinder.getRefSearchResults(myReferences, scope, monitor));

      }
    });
  }

  public void close() {
    myTool.close();
  }
}
