package jetbrains.mps.ide.vcs;

/*Generated by MPS */

import com.intellij.openapi.vcs.impl.AbstractVcsHelperImpl;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.vcs.merge.MergeProvider;
import java.util.Collections;
import java.util.ArrayList;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import jetbrains.mps.util.CollectionUtil;

public class MPSVcsHelperImpl extends AbstractVcsHelperImpl {
  private Project myProject;

  public MPSVcsHelperImpl(Project project) {
    super(project);
    myProject = project;
  }

  @NotNull
  public List<VirtualFile> showMergeDialog(List<VirtualFile> files, final MergeProvider provider) {
    if (files.isEmpty()) {
      return Collections.emptyList();
    }
    MergeProvider providerDecorator = new MergeProviderDecorator(myProject, provider);
    // TODO what for? to show merge on startup? 
    // recheck files status 
    List<VirtualFile> toMerge = new ArrayList<VirtualFile>();
    List<VirtualFile> alreadyResolved = new ArrayList<VirtualFile>();
    for (VirtualFile f : files) {
      if (VcsMigrationUtil.getHandler().isInConflict(VirtualFileUtils.toIFile(f), false)) {
        toMerge.add(f);
      } else {
        alreadyResolved.add(f);
      }
    }
    if (toMerge.isEmpty()) {
      return alreadyResolved;
    }
    List<VirtualFile> userResolved = super.showMergeDialog(files, providerDecorator);
    return CollectionUtil.union(userResolved, alreadyResolved);
  }
}
