package jetbrains.mps.workbench.dialogs.project.components.parts.diffrowtable;

/*Generated by MPS */

import javax.swing.JTable;
import javax.swing.table.TableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.Point;
import javax.swing.table.TableCellRenderer;
import java.awt.Component;
import java.awt.Rectangle;
import javax.swing.table.TableColumn;
import java.util.Enumeration;
import java.awt.Dimension;
import javax.swing.event.ListSelectionEvent;

public class DiffRowTable extends JTable {
  public DiffRowTable() {
    this(null, null, null);
  }

  public DiffRowTable(TableModel dm) {
    this(dm, null, null);
  }

  public DiffRowTable(TableModel dm, TableColumnModel cm) {
    this(dm, cm, null);
  }

  public DiffRowTable(TableModel dm, TableColumnModel cm, ListSelectionModel sm) {
    super(dm, cm, sm);
    this.setUI(new BasicDiffRowTableUI());
  }

  public DiffRowTable(int numRows, int numColumns) {
    this(new DefaultTableModel(numRows, numColumns));
  }

  public DiffRowTable(final Vector rowData, final Vector columnNames) {
    super(rowData, columnNames);
    this.setUI(new BasicDiffRowTableUI());
    this.addComponentListener(new ComponentAdapter() {
      public void componentResized(ComponentEvent e) {
        DiffRowTable.this.revalidate();
      }
    });
  }

  public DiffRowTable(final Object[][] rowData, final Object[] columnNames) {
    super(rowData, columnNames);
    this.setUI(new BasicDiffRowTableUI());
    this.addComponentListener(new ComponentAdapter() {
      public void componentResized(ComponentEvent e) {
        DiffRowTable.this.revalidate();
      }
    });
  }

  public int rowAtPoint(Point point) {
    int y = point.y;
    int rowSpacing = this.getIntercellSpacing().height;
    int rowCount = this.getRowCount();
    int rowHeight = 0;
    for (int row = 0; row < rowCount; row++) {
      rowHeight += this.getRowHeight(row) + rowSpacing;
      if (y < rowHeight) {
        return row;
      }
    }
    return -1;
  }

  public int getHeight(Object obj, int colNum) {
    TableCellRenderer tcr = this.getColumnModel().getColumn(colNum).getCellRenderer();
    if (tcr != null) {
      Component rendererComponent = tcr.getTableCellRendererComponent(this, obj, true, true, 0, 0);
      return (int) Math.round(rendererComponent.getPreferredSize().getHeight());
    }
    return this.getRowHeight();
  }

  public int getRowHeight() {
    return this.getFontMetrics(this.getFont()).getHeight();
  }

  public int getRowHeight(int row) {
    TableModel tm = this.getModel();
    int height = this.getFontMetrics(this.getFont()).getHeight();
    for (int i = 0; i < this.getColumnModel().getColumnCount(); i++) {
      try {
        height = Math.max(height, this.getHeight(tm.getValueAt(row, i), i));
      } catch (Exception e) {
      }
    }
    return height;
  }

  public Rectangle getCellRect(int row, int column, boolean includeSpacing) {
    Rectangle cellFrame;
    TableColumn aColumn;
    cellFrame = new Rectangle();
    cellFrame.height = this.getRowHeight(row) + rowMargin;
    cellFrame.y = 0;
    for (int i = 0; i < row; i++) {
      cellFrame.y += this.getRowHeight(i) + rowMargin;
    }
    int index = 0;
    int columnMargin = this.getColumnModel().getColumnMargin();
    Enumeration enumeration = this.getColumnModel().getColumns();
    while (enumeration.hasMoreElements()) {
      aColumn = (TableColumn) enumeration.nextElement();
      cellFrame.width = aColumn.getWidth() + columnMargin;
      if (index == column) {
        break;
      }
      cellFrame.x += cellFrame.width;
      index++;
    }
    if (!(includeSpacing)) {
      Dimension spacing = this.getIntercellSpacing();
      cellFrame.setBounds(cellFrame.x + spacing.width / 2, cellFrame.y + spacing.height / 2, cellFrame.width - spacing.width, cellFrame.height - spacing.height);
    }
    return cellFrame;
  }

  public void columnSelectionChanged(ListSelectionEvent e) {
    this.repaint();
  }

  public void valueChanged(ListSelectionEvent e) {
    int firstIndex = e.getFirstIndex();
    int lastIndex = e.getLastIndex();
    if (firstIndex == -1 && lastIndex == -1) {
      this.repaint();
    }
    Rectangle dirtyRegion = this.getCellRect(firstIndex, 0, false);
    int numColumns = this.getColumnCount();
    int index = firstIndex;
    for (int i = 0; i < numColumns; i++) {
      dirtyRegion.add(this.getCellRect(index, i, false));
    }
    index = lastIndex;
    for (int i = 0; i < numColumns; i++) {
      dirtyRegion.add(this.getCellRect(index, i, false));
    }
    this.repaint(dirtyRegion.x, dirtyRegion.y, dirtyRegion.width, dirtyRegion.height);
  }
}
