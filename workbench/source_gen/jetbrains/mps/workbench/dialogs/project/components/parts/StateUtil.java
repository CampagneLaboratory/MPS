package jetbrains.mps.workbench.dialogs.project.components.parts;

/*Generated by MPS */

import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.util.Computable;

public class StateUtil {
  public static final int normal = 0;

  public StateUtil() {
  }

  public static boolean isAvailable(final SModelReference modelReference) {
    return SModelRepository.getInstance().getModelDescriptor(modelReference) != null;
  }

  public static boolean isAvailable(ModuleReference moduleReference) {
    return MPSModuleRepository.getInstance().getModule(moduleReference) != null;
  }

  public static boolean isInScope(final IScope scope, final SModelReference modelReference) {
    SModelDescriptor model;
    if (scope != null) {
      model = ModelAccess.instance().runReadAction(new Computable<SModelDescriptor>() {
        public SModelDescriptor compute() {
          return scope.getModelDescriptor(modelReference);
        }
      });
      return model != null;
    }
    return true;
  }

  public static int compare(final SModelReference ref1, final SModelReference ref2, final IScope scope) {
    boolean isAvailable1 = isAvailable(ref1);
    boolean isAvailable2 = isAvailable(ref2);
    if (isAvailable1 && !(isAvailable2)) {
      return 1;
    }
    if (isAvailable2 && !(isAvailable1)) {
      return -1;
    }
    boolean isInScope1 = isInScope(scope, ref1);
    boolean isInScope2 = isInScope(scope, ref2);
    if (isInScope1 && !(isInScope2)) {
      return 1;
    }
    if (isInScope2 && !(isInScope1)) {
      return -1;
    }
    return 0;
  }

  public static int compare(ModuleReference moduleRef1, ModuleReference moduleRef2) {
    boolean isAvailable1 = isAvailable(moduleRef1);
    boolean isAvailable2 = isAvailable(moduleRef2);
    if (isAvailable1 && !(isAvailable2)) {
      return 1;
    }
    if (isAvailable2 && !(isAvailable1)) {
      return -1;
    }
    return 0;
  }
}
