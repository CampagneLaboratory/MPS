package jetbrains.mps.workbench.dialogs.project.components.parts.boundpanels;

/*Generated by MPS */

import javax.swing.JPanel;
import jetbrains.mps.workbench.dialogs.project.IBindedDialog;
import java.util.List;
import jetbrains.mps.util.Condition;
import javax.swing.DefaultListCellRenderer;
import javax.swing.TransferHandler;
import jetbrains.mps.workbench.dialogs.project.components.parts.validators.Validator;
import com.intellij.openapi.util.Computable;
import jetbrains.mps.workbench.dialogs.project.components.parts.actions.BaseValidatedAction;
import org.jetbrains.annotations.NotNull;
import java.util.Collections;
import javax.swing.border.TitledBorder;
import java.awt.BorderLayout;
import javax.swing.JComponent;
import jetbrains.mps.workbench.dialogs.project.components.parts.CopySupport;
import javax.swing.JScrollPane;
import java.util.Arrays;
import jetbrains.mps.workbench.dialogs.project.components.parts.renderers.ProjectLevelRenderer;
import com.intellij.openapi.actionSystem.AnAction;
import java.util.ArrayList;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.workbench.action.ActionUtils;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public abstract class ValidateableBoundPanel<T> extends JPanel {
  protected IBindedDialog myOwner;
  protected String myCaption;
  protected List<T> myList;
  protected Condition<T> myCanRemoveCondition = Condition.TRUE_CONDITION;
  protected DefaultListCellRenderer myCellRenderer;
  protected TransferHandler myTransferHandler;
  private Validator myObjectValidator = null;
  private Computable<List<T>> myChooser;
  private Boolean myMultipleChooser = null;
  private BaseValidatedAction myAddAction;
  private BaseValidatedAction myRemoveAction;
  private BaseValidatedAction myEditAction;
  private ValidateableBoundPanel.MyValidator myValidator = new ValidateableBoundPanel.MyValidator();
  private boolean myInitialized = false;

  public ValidateableBoundPanel(final IBindedDialog owner, String caption, @NotNull final List<T> list) {
    this.myOwner = owner;
    this.myCaption = caption;
    this.myList = list;
  }

  public void setAddAction(BaseValidatedAction action) {
    this.assertNotInitialized();
    this.myAddAction = action;
  }

  public void setRemoveAction(BaseValidatedAction action) {
    this.assertNotInitialized();
    this.myRemoveAction = action;
  }

  public void setEditAction(BaseValidatedAction action) {
    this.assertNotInitialized();
    this.myEditAction = action;
  }

  public void setChooser(final Computable<T> chooser) {
    this.assertNotInitialized();
    this.myMultipleChooser = false;
    this.myChooser = new Computable<List<T>>() {
      public List<T> compute() {
        return Collections.singletonList(chooser.compute());
      }
    };
  }

  public void setMultipleChooser(Computable<List<T>> chooser) {
    this.assertNotInitialized();
    this.myMultipleChooser = true;
    this.myChooser = chooser;
  }

  public void setCellRenderer(DefaultListCellRenderer cellRenderer) {
    this.assertNotInitialized();
    this.myCellRenderer = cellRenderer;
  }

  public void setTransferHandler(TransferHandler transferHandler) {
    this.assertNotInitialized();
    this.myTransferHandler = transferHandler;
  }

  public void setObjectValidator(Validator objectValidator) {
    this.assertNotInitialized();
    this.myObjectValidator = objectValidator;
  }

  public void setCanRemoveCondition(Condition<T> canRemoveCondition) {
    this.assertNotInitialized();
    this.myCanRemoveCondition = (canRemoveCondition != null ?
      canRemoveCondition :
      Condition.TRUE_CONDITION
    );
  }

  public void init() {
    this.myInitialized = true;
    this.setBorder(new TitledBorder(this.myCaption));
    this.setLayout(new BorderLayout());
    JComponent component = ValidateableBoundPanel.this.initUIComponentAndBinding();
    if (this.myTransferHandler != null) {
      component.setTransferHandler(this.myTransferHandler);
    }
    CopySupport.addCopyPopup(component);
    component.addKeyListener(new ValidateableBoundPanel.MyKeyAdapter());
    JComponent actionsComponent = ValidateableBoundPanel.this.createActionsComponent();
    if (actionsComponent != null) {
      this.add(actionsComponent, BorderLayout.WEST);
    }
    JScrollPane comp = new JScrollPane(component);
    comp.doLayout();
    this.add(comp, BorderLayout.CENTER);
    this.myValidator.run();
  }

  protected boolean multipleChooserSet() {
    return this.myMultipleChooser == Boolean.TRUE;
  }

  protected String removeSelectedWithCheck() {
    StringBuilder errorMessage = new StringBuilder();

    int[] indices = this.getSelectedIndices();
    Arrays.sort(indices);

    for (int i = indices.length - 1; i >= 0;i--) {
      T value = (T) this.myList.get(i);
      if (!(this.myCanRemoveCondition.met(value))) {
        if (errorMessage.length() != 0) {
          errorMessage.append("<br>");
        }
        errorMessage.append("<b>");
        if (this.myCellRenderer instanceof ProjectLevelRenderer) {
          ProjectLevelRenderer levelRenderer = (ProjectLevelRenderer) this.myCellRenderer;
          errorMessage.append(levelRenderer.getItemLabel(value));
        } else {
          errorMessage.append(value);
        }
        errorMessage.append("</b>");
        continue;
      }
      this.myList.remove(indices[i]);
    }
    return errorMessage.toString();
  }

  private JComponent createActionsComponent() {
    if (this.myMultipleChooser != null) {
      if (this.myAddAction == null) {
        this.myAddAction = ValidateableBoundPanel.this.createAddAction(this.myChooser);
      }
      if (this.myRemoveAction == null) {
        this.myRemoveAction = ValidateableBoundPanel.this.createRemoveAction();
      }
    }
    List<AnAction> act = new ArrayList<AnAction>();
    if (this.myAddAction != null) {
      this.myAddAction.setValidator(this.myValidator);
      act.add(this.myAddAction);
    }
    if (this.myRemoveAction != null) {
      this.myRemoveAction.setValidator(this.myValidator);
      act.add(this.myRemoveAction);
    }
    if (this.myEditAction != null) {
      this.myEditAction.setValidator(this.myValidator);
      act.add(this.myEditAction);
    }
    AnAction[] actions = act.toArray(new AnAction[act.size()]);
    if (actions.length == 0) {
      return null;
    }
    DefaultActionGroup group = ActionUtils.groupFromActions(actions);
    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, false);
    return toolbar.getComponent();
  }

  private void assertNotInitialized() {
    assert !(this.myInitialized);
  }

  protected abstract BaseValidatedAction createAddAction(Computable<List<T>> chooser);

  protected abstract BaseValidatedAction createRemoveAction();

  protected abstract JComponent initUIComponentAndBinding();

  protected abstract int[] getSelectedIndices();

  private class MyValidator implements Runnable {
    private MyValidator() {
    }

    public void run() {
      if (ValidateableBoundPanel.this.myObjectValidator == null) {
        return;
      }
      if (!((ValidateableBoundPanel.this.getBorder() instanceof TitledBorder))) {
        return;
      }
      TitledBorder titledBorder = (TitledBorder) ValidateableBoundPanel.this.getBorder();
      boolean hasError = false;
      for (T value : ValidateableBoundPanel.this.myList) {
        if (ValidateableBoundPanel.this.myObjectValidator.isBrokenValue(value)) {
          hasError = true;
          break;
        }
      }
      titledBorder.setTitleColor((hasError ?
        Color.RED :
        Color.BLACK
      ));
      ValidateableBoundPanel.this.repaint();
    }
  }

  private class MyKeyAdapter extends KeyAdapter {
    private MyKeyAdapter() {
    }

    public void keyPressed(KeyEvent e) {
      if (e.getKeyCode() == KeyEvent.VK_INSERT) {
        if (ValidateableBoundPanel.this.myAddAction != null) {
          ActionUtils.updateAndPerformAction(ValidateableBoundPanel.this.myAddAction, ActionUtils.createEvent(e));
        }
        e.consume();
      }
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        if (ValidateableBoundPanel.this.myRemoveAction != null) {
          ActionUtils.updateAndPerformAction(ValidateableBoundPanel.this.myRemoveAction, ActionUtils.createEvent(e));
        }
        e.consume();
      }
    }
  }
}
