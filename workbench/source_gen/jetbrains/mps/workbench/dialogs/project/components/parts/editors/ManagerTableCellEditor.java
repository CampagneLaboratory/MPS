package jetbrains.mps.workbench.dialogs.project.components.parts.editors;

/*Generated by MPS */

import com.intellij.util.ui.AbstractTableCellEditor;
import jetbrains.mps.workbench.dialogs.project.IBindedDialog;
import javax.swing.JLabel;
import jetbrains.mps.project.structure.model.ModelRootManager;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.workbench.dialogs.choosers.CommonChoosers;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.util.Computable;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.lang.stubs.behavior.AbstractModelCreator_Behavior;
import java.awt.Component;
import javax.swing.JTable;
import jetbrains.mps.util.NameUtil;
import java.util.List;
import jetbrains.mps.smodel.IOperationContext;
import java.util.ArrayList;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.lang.structure.structure.ConceptDeclaration;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.search.IsInstanceCondition;

public class ManagerTableCellEditor extends AbstractTableCellEditor {
  private IBindedDialog myOwner;
  private JLabel myLabel;
  private ModelRootManager myManager;

  public ManagerTableCellEditor(final IBindedDialog owner) {
    this.myOwner = owner;
    this.myManager = null;
    this.myLabel = new JLabel();
    this.myLabel.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        final SNode node = CommonChoosers.showDialogNodeChooser(ManagerTableCellEditor.this.myOwner.getMainComponent(), ManagerTableCellEditor.this.getManagerNodes(owner.getOperationContext()));
        if (node == null) {
          return;
        }
        String text = ModelAccess.instance().runReadAction(new Computable<String>() {
          public String compute() {
            Language language = Language.getLanguageFor(node.getModel().getModelDescriptor());
            ManagerTableCellEditor.this.myManager = new ModelRootManager(language.getModuleId().toString(), AbstractModelCreator_Behavior.call_getGeneratedClassFQName_5553449326502826666(node));
            String languageName = language.getShortName();
            return node.getName() + " (" + languageName + ")";
          }
        });
        ManagerTableCellEditor.this.myLabel.setText(text);
        ManagerTableCellEditor.this.stopCellEditing();
      }
    });
  }

  public Object getCellEditorValue() {
    return this.myManager;
  }

  public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
    this.myManager = ((ModelRootManager) value);
    String representation = (this.myManager == null ?
      "" :
      NameUtil.shortNameFromLongName(this.myManager.getClassName())
    );
    this.myLabel.setText(representation);
    return this.myLabel;
  }

  public List<SNode> getManagerNodes(final IOperationContext context) {
    final List<SNode> result = new ArrayList<SNode>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        AbstractConceptDeclaration concept = ((ConceptDeclaration) SNodeOperations.getAdapter(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.stubs.structure.StubsCreatorDeclaration")));
        for (Language l : MPSModuleRepository.getInstance().getAllLanguages()) {
          SModelDescriptor stubsAspect = LanguageAspect.STUBS.get(l);
          if (stubsAspect == null) {
            continue;
          }
          result.addAll(stubsAspect.getSModel().getRoots(new IsInstanceCondition(concept)));
        }
      }
    });
    return result;
  }
}
