package jetbrains.mps.workbench.dialogs.project.components.parts.boundpanels;

/*Generated by MPS */

import javax.swing.JList;
import jetbrains.mps.workbench.dialogs.project.IBindedDialog;
import java.util.List;
import javax.swing.JComponent;
import org.jdesktop.swingbinding.SwingBindings;
import org.jdesktop.beansbinding.AutoBinding;
import jetbrains.mps.workbench.dialogs.project.components.parts.actions.BaseValidatedAction;
import com.intellij.openapi.util.Computable;
import jetbrains.mps.workbench.dialogs.project.components.parts.actions.ListAddAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.dialogs.project.components.parts.actions.ListRemoveAction;
import jetbrains.mps.workbench.dialogs.project.components.parts.renderers.ProjectLevelRenderer;
import com.intellij.openapi.ui.Messages;

public class BoundListPanel<T> extends ValidateableBoundPanel<T> {
  private JList myUIList = new JList();

  public BoundListPanel(IBindedDialog owner, String caption, List<T> ts) {
    super(owner, caption, ts);
  }

  protected JComponent initUIComponentAndBinding() {
    if (this.myCellRenderer != null) {
      this.myUIList.setCellRenderer(this.myCellRenderer);
    }
    this.myOwner.addBinding(SwingBindings.createJListBinding(AutoBinding.UpdateStrategy.READ_WRITE, this.myList, this.myUIList));
    return this.myUIList;
  }

  protected BaseValidatedAction createAddAction(Computable<List<T>> chooser) {
    return new BoundListPanel.MyListAddAction(chooser);
  }

  protected BaseValidatedAction createRemoveAction() {
    return new BoundListPanel.MyListRemoveAction();
  }

  private class MyListAddAction extends ListAddAction {
    private Computable<List<T>> myChooser;

    public MyListAddAction(Computable<List<T>> chooser) {
      super(BoundListPanel.this.myUIList);
      this.myChooser = chooser;
    }

    protected int doAdd(AnActionEvent e) {
      List<T> chosen = this.myChooser.compute();
      if (chosen == null) {
        return -1;
      }
      BoundListPanel.this.myList.addAll(chosen);
      super.doAdd(e);
      T first = ((chosen.isEmpty() ?
        null :
        chosen.get(0)
      ));
      return ((first == null) ?
        -1 :
        BoundListPanel.this.myList.indexOf(first)
      );
    }
  }

  private class MyListRemoveAction extends ListRemoveAction {
    public MyListRemoveAction() {
      super(BoundListPanel.this.myUIList);
    }

    protected void doRemove(AnActionEvent e) {
      StringBuilder errorMessage = new StringBuilder();
      for (Object value : BoundListPanel.this.myUIList.getSelectedValues()) {
        if (BoundListPanel.this.myCanRemoveCondition.met((T) value)) {
          BoundListPanel.this.myList.remove((T) value);
        } else {
          if (errorMessage.length() != 0) {
            errorMessage.append("<br>");
          }
          errorMessage.append("<b>");
          if (BoundListPanel.this.myCellRenderer instanceof ProjectLevelRenderer) {
            ProjectLevelRenderer levelRenderer = (ProjectLevelRenderer) BoundListPanel.this.myCellRenderer;
            errorMessage.append(levelRenderer.getItemLabel(value));
          } else {
            errorMessage.append(value);
          }
          errorMessage.append("</b>");
        }
      }
      if (errorMessage.length() != 0) {
        Messages.showWarningDialog("<html>Can't remove " + errorMessage + ".</html>", "Error Removing Element");
      }
    }
  }
}
