package jetbrains.mps.workbench.dialogs.project.properties.project;

/*Generated by MPS */

import javax.swing.JPanel;
import jetbrains.mps.logging.Logger;
import com.intellij.openapi.project.Project;
import java.awt.BorderLayout;
import com.intellij.openapi.options.ConfigurationException;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.MPSProject;

public class ProjectPropertiesComponent extends JPanel {
  private static final Logger LOG = Logger.getLogger(ProjectPropertiesComponent.class);

  private Project myProject;
  private ProjectProperties myEditableDescriptor = new ProjectProperties();
  private ProjectPropertiesDialog myPropertiesDialog;

  public ProjectPropertiesComponent(Project project) {
    myProject = project;
    myPropertiesDialog = new ProjectPropertiesDialog(myProject, myEditableDescriptor);
    this.initUI();
  }

  public void addNotify() {
    super.addNotify();
    myPropertiesDialog.bindData();
  }

  public void removeNotify() {
    super.removeNotify();
    myPropertiesDialog.unbindData();
  }

  private void initUI() {
    this.setLayout(new BorderLayout());
    this.add(myPropertiesDialog.getMainComponent(), BorderLayout.CENTER);
  }

  public boolean isModified() {
    return !(myEditableDescriptor.isSame(this.getMPSProject().getProjectDescriptor()));
  }

  public void apply() throws ConfigurationException {
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        myEditableDescriptor.saveTo(ProjectPropertiesComponent.this.getMPSProject());
      }
    });
  }

  public void reset() {
    try {
      myEditableDescriptor.loadFrom(this.getMPSProject());
    } catch (Throwable t) {
      LOG.error("This should not be thrown", t);
    }
  }

  private MPSProject getMPSProject() {
    return myProject.getComponent(MPSProject.class);
  }
}
