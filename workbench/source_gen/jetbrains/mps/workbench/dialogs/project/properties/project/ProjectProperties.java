package jetbrains.mps.workbench.dialogs.project.properties.project;

/*Generated by MPS */

import jetbrains.mps.project.structure.project.ProjectDescriptor;
import java.util.List;
import jetbrains.mps.project.structure.project.Path;
import jetbrains.mps.workbench.dialogs.project.components.parts.lists.ListsFactory;
import jetbrains.mps.project.structure.project.testconfigurations.BaseTestConfiguration;
import jetbrains.mps.project.MPSProject;

public class ProjectProperties {
  public static final String PROPERTY_NAME = "name";
  public static final String PROPERTY_LANGUAGES = "languages";
  public static final String PROPERTY_SOLUTIONS = "solutions";
  public static final String PROPERTY_DEVKITS = "devkits";
  public static final String PROPERTY_GEN_CONFIGS = "testConfigurations";

  private ProjectDescriptor myProjectDescriptor;
  private List<Path> mySolutions = ListsFactory.create(ListsFactory.PATH_COMPARATOR);
  private List<Path> myLanguages = ListsFactory.create(ListsFactory.PATH_COMPARATOR);
  private List<Path> myDevkits = ListsFactory.create(ListsFactory.PATH_COMPARATOR);
  private List<BaseTestConfiguration> myTestConfigs = ListsFactory.create(ListsFactory.GEN_CONF_COMPARATOR);
  private boolean myTestConfigsChanged = false;

  public ProjectProperties() {
  }

  public void testConfigsChanged() {
    this.myTestConfigsChanged = true;
  }

  public List<Path> getSolutions() {
    return this.mySolutions;
  }

  public List<Path> getLanguages() {
    return this.myLanguages;
  }

  public List<Path> getDevkits() {
    return this.myDevkits;
  }

  public List<BaseTestConfiguration> getTestConfigurations() {
    return this.myTestConfigs;
  }

  public boolean isSame(ProjectDescriptor projectDescriptor) {
    List<Path> paths = ListsFactory.createSortedList(ListsFactory.PATH_COMPARATOR);
    paths.clear();
    paths.addAll(this.myProjectDescriptor.getLanguages());
    if (!(paths.equals(this.myLanguages))) {
      return false;
    }
    paths.clear();
    paths.addAll(this.myProjectDescriptor.getSolutions());
    if (!(paths.equals(this.mySolutions))) {
      return false;
    }
    paths.clear();
    paths.addAll(this.myProjectDescriptor.getDevkits());
    if (!(paths.equals(this.myDevkits))) {
      return false;
    }
    return !(this.myTestConfigsChanged);
  }

  public void loadFrom(MPSProject project) {
    this.myProjectDescriptor = project.getProjectDescriptor();
    this.mySolutions.clear();
    this.mySolutions.addAll(this.myProjectDescriptor.getSolutions());
    this.myLanguages.clear();
    this.myLanguages.addAll(this.myProjectDescriptor.getLanguages());
    this.myDevkits.clear();
    this.myDevkits.addAll(this.myProjectDescriptor.getDevkits());
    this.myTestConfigs.clear();
    this.myTestConfigs.addAll(this.myProjectDescriptor.getTestConfigurations());
  }

  public void saveTo(MPSProject project) {
    this.myProjectDescriptor.getLanguages().clear();
    for (Path path : this.myLanguages) {
      this.myProjectDescriptor.addLanguage(path);
    }
    this.myProjectDescriptor.getSolutions().clear();
    for (Path path : this.mySolutions) {
      this.myProjectDescriptor.addSolution(path);
    }
    this.myProjectDescriptor.getDevkits().clear();
    for (Path path : this.myDevkits) {
      this.myProjectDescriptor.addDevkit(path);
    }
    this.myProjectDescriptor.getTestConfigurations().clear();
    this.myProjectDescriptor.getTestConfigurations().addAll(this.myTestConfigs);
    project.setProjectDescriptor(this.myProjectDescriptor);
  }
}
