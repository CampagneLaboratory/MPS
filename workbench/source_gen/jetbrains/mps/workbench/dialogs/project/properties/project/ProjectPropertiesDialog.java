package jetbrains.mps.workbench.dialogs.project.properties.project;

/*Generated by MPS */

import jetbrains.mps.workbench.dialogs.project.BaseStretchingBindedDialog;
import com.intellij.openapi.project.Project;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.ide.properties.StandardComponents;
import jetbrains.mps.workbench.dialogs.project.BaseBindedDialog;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.dialogs.DialogDimensionsSettings;
import jetbrains.mps.ide.dialogs.BaseDialog;

public final class ProjectPropertiesDialog extends BaseStretchingBindedDialog {
  private Project myProject;
  private ProjectProperties myProperties;

  public ProjectPropertiesDialog(final Project project) {
    super(project.getName() + " Properties", ProjectOperationContext.get(project));
    this.myProject = project;
    this.collectProjectProperties();
    this.initUI();
  }

  public ProjectPropertiesDialog(final Project project, ProjectProperties properties) {
    super(project.getName() + " Properties", ProjectOperationContext.get(project));
    this.myProject = project;
    this.myProperties = properties;
    this.initUI();
  }

  private void initUI() {
    this.addComponent(StandardComponents.createProjectSolutionsPanel(this, "Solutions", this.myProperties.getSolutions()), BaseBindedDialog.ConstraintsType.LIST);
    this.addComponent(StandardComponents.createProjectLanguagesPanel(this, "Languages", this.myProperties.getLanguages()), BaseBindedDialog.ConstraintsType.LIST);
    this.addComponent(StandardComponents.createProjectDevkitsPanel(this, "Devkits", this.myProperties.getDevkits()), BaseBindedDialog.ConstraintsType.LIST);
    this.addComponent(StandardComponents.createTestConfigsPanel(this, "Test Configurations", this.myProperties.getTestConfigurations(), this.myProperties), BaseBindedDialog.ConstraintsType.LIST);
  }

  private void collectProjectProperties() {
    this.myProperties = new ProjectProperties();
    this.myProperties.loadFrom(this.getMPSProject());
  }

  private MPSProject getMPSProject() {
    return this.myProject.getComponent(MPSProject.class);
  }

  protected boolean doSaveChanges() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        ProjectPropertiesDialog.this.myProperties.saveTo(ProjectPropertiesDialog.this.getMPSProject());
        ProjectPropertiesDialog.this.myProject.save();
      }
    });
    return true;
  }

  public DialogDimensionsSettings.DialogDimensions getDefaultDimensionSettings() {
    return new DialogDimensionsSettings.DialogDimensions(200, 200, 500, 700);
  }

  public void bindData() {
    super.bind();
  }

  public void unbindData() {
    super.unbind();
  }

  @BaseDialog.Button(position = 0, name = "OK", mnemonic = 'O', defaultButton = true)
  public void buttonOK() {
    if (!(this.saveChanges())) {
      return;
    }
    this.dispose();
  }

  @BaseDialog.Button(position = 1, name = "Cancel", mnemonic = 'C')
  public void buttonCancel() {
    this.dispose();
  }

  @BaseDialog.Button(position = 2, name = "Apply", mnemonic = 'A')
  public void buttonApply() {
    this.saveChanges();
  }
}
