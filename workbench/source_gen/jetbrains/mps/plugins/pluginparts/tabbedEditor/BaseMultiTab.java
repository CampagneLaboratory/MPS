package jetbrains.mps.plugins.pluginparts.tabbedEditor;

/*Generated by MPS */

import jetbrains.mps.ide.tabbedEditor.tabs.BaseMultitabbedTab;
import jetbrains.mps.ide.tabbedEditor.TabbedEditor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.util.annotation.Hack;
import java.util.List;
import jetbrains.mps.util.Pair;
import jetbrains.mps.smodel.IOperationContext;
import java.util.ArrayList;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.project.IModule;
import jetbrains.mps.project.ModuleContext;
import javax.swing.JOptionPane;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.SModelRepositoryAdapter;
import jetbrains.mps.smodel.ProjectModels;

public abstract class BaseMultiTab extends BaseMultitabbedTab {
  private BaseMultiTab.MySModelRepositoryAdapter myModelRepositoryListener = null;

  protected BaseMultiTab(TabbedEditor tabbedEditor, SNode baseNode, Class<? extends BaseAdapter> adapterClass) {
    super(tabbedEditor, baseNode, adapterClass);
  }

  public void addMultitabbedListener(final LanguageAspect aspect) {
    AbstractConceptDeclaration concept = (AbstractConceptDeclaration) BaseAdapter.fromNode(this.getBaseNode());
    final Language language = SModelUtil_new.getDeclaringLanguage(concept, GlobalScope.getInstance());
    if (language == null) {
      return;
    }
    SModelDescriptor aspectModelDescriptor = aspect.get(language);
    if (aspectModelDescriptor != null) {
      this.addModelToListen(aspectModelDescriptor);
    } else {
      this.myModelRepositoryListener = new BaseMultiTab.MySModelRepositoryAdapter(language, aspect);
      SModelRepository.getInstance().addModelRepositoryListener(this.myModelRepositoryListener);
    }
  }

  @Hack
  protected List<Pair<SNode, IOperationContext>> tryToLoadNodes() {
    List<Pair<SNode, IOperationContext>> res = new ArrayList<Pair<SNode, IOperationContext>>();
    SNode baseNode = this.getBaseNode();
    if (baseNode == null) {
      return res;
    }
    for (SNode node : this.getNodes(baseNode)) {
      if (node == null) {
        continue;
      }
      MPSProject project = this.getTabbedEditor().getOperationContext().getMPSProject();
      IModule module = node.getModel().getModelDescriptor().getModule();
      IOperationContext context = new ModuleContext(module, project);
      res.add(new Pair<SNode, IOperationContext>(node, context));
    }
    return res;
  }

  protected Pair<SNode, IOperationContext> createLoadableNode(boolean ask, SNode concept) {
    SNode node = this.createNode(this.getBaseNode(), ask, concept);
    if (node == null) {
      JOptionPane.showMessageDialog(this.getComponent(), "Node creation finished with errors.", "Error", JOptionPane.ERROR_MESSAGE);
      return null;
    }
    return new Pair<SNode, IOperationContext>(node, this.getTabbedEditor().getOperationContext());
  }

  public boolean askCreate() {
    return this.askCreate(this.getBaseNode());
  }

  public boolean askCreate(SNode baseNode) {
    String entity = NameUtil.singularize(this.getTitle());
    return TabHelper.ask("Do you want to create a new " + NameUtil.decapitalize(entity) + "?", "Create New " + entity);
  }

  public void dispose() {
    if (this.myModelRepositoryListener != null) {
      SModelRepository.getInstance().removeModelRepositoryListener(this.myModelRepositoryListener);
    }
    super.dispose();
  }

  public abstract String getTitle();

  public abstract String getNullText();

  public abstract List<SNode> getNodes(SNode node);

  public abstract boolean canCreate();

  public abstract SNode createNode(SNode node, boolean ask, SNode concept);

  private class MySModelRepositoryAdapter extends SModelRepositoryAdapter {
    private final Language myLanguage;
    private final LanguageAspect myAspect;

    public MySModelRepositoryAdapter(Language language, LanguageAspect aspect) {
      this.myLanguage = language;
      this.myAspect = aspect;
    }

    public void modelAdded(SModelDescriptor modelDescriptor) {
      if (ProjectModels.isProjectModel(modelDescriptor.getSModelReference())) {
        return;
      }
      if (Language.getLanguageFor(modelDescriptor) == this.myLanguage && Language.getModelAspect(modelDescriptor) == this.myAspect) {
        BaseMultiTab.this.addModelToListen(modelDescriptor);
        SModelRepository.getInstance().removeModelRepositoryListener(this);
      }
    }
  }
}
