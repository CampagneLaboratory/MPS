package jetbrains.mps.plugins.pluginparts.tabbedEditor;

/*Generated by MPS */

import jetbrains.mps.ide.tabbedEditor.tabs.BaseSingletabbedTab;
import jetbrains.mps.ide.tabbedEditor.TabbedEditor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.util.Condition;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.util.NameUtil;

public abstract class BaseSingleTab extends BaseSingletabbedTab {
  public BaseSingleTab(TabbedEditor tabbedEditor, final SNode baseNode, Class<? extends BaseAdapter> adapterClass) {
    super(tabbedEditor, baseNode, adapterClass);
    this.addListener(new Condition<SModelDescriptor>() {
      public boolean met(SModelDescriptor modelDescriptor) {
        return EqualUtil.equals(modelDescriptor.getSModel().getSModelId(), baseNode.getModel().getSModelId());
      }
    });
  }

  public void addSingletabbedListener(final LanguageAspect aspect) {
    AbstractConceptDeclaration concept = (AbstractConceptDeclaration) BaseAdapter.fromNode(this.getBaseNode());
    final Language language = SModelUtil_new.getDeclaringLanguage(concept, GlobalScope.getInstance());
    this.addListener(new Condition<SModelDescriptor>() {
      public boolean met(SModelDescriptor modelDescriptor) {
        return Language.getLanguageFor(modelDescriptor) == language && Language.getModelAspect(modelDescriptor) == aspect;
      }
    });
  }

  public SNode tryToLoadNode() {
    return this.getNode(this.getBaseNode());
  }

  public SNode createLoadableNode() {
    return this.createNode(this.getBaseNode());
  }

  public boolean askCreate() {
    return this.askCreate(this.getBaseNode());
  }

  public boolean askCreate(SNode baseNode) {
    return TabHelper.ask("Do you want to create a new " + NameUtil.decapitalize(this.getTitle()) + "?", "Create New " + this.getTitle());
  }

  public abstract String getTitle();

  public abstract String getNullText();

  public abstract SNode getNode(SNode node);

  public abstract SNode createNode(SNode node);
}
