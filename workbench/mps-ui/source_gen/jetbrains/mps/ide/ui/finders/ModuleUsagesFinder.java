package jetbrains.mps.ide.ui.finders;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.module.SModuleReference;
import java.util.Collection;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.project.Solution;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import org.jetbrains.mps.openapi.module.SDependency;
import org.jetbrains.mps.openapi.module.SDependencyScope;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.SModelOperations;
import java.util.Set;
import java.util.HashSet;
import java.util.LinkedHashSet;

public class ModuleUsagesFinder implements IFinder {
  private static final String USED_BY = "used by";
  private static final String DEPENDENT_MODULES = "dependent modules";
  private static final String RUNTIME_MODULES = "runtime modules";
  private static final String EXTENDING_LANGUAGES = "extending languages";
  private static final String EXTENDING_GENERATORS = "extending generators";
  private static final String EXPORTED_BY = "exported by";
  private static final String MODELS_WRITTEN_IN_LANGUAGE = "models written in language";

  public ModuleUsagesFinder() {
  }
  @Override
  public SearchResults find(SearchQuery query, ProgressMonitor monitor) {
    SearchResults searchResults = new SearchResults();
    Object value = query.getObjectHolder().getObject();
    SModule searchedModule = null;
    if (value instanceof SModule) {
      searchedModule = ((SModule) value);
    } else if (value instanceof SModuleReference) {
      SModuleReference moduleRef = (SModuleReference) value;
      searchedModule = query.getScope().resolve(moduleRef);
    }
    if (searchedModule == null) {
      return searchResults;
    }
    Collection<SModule> modules = IterableUtil.asCollection(query.getScope().getModules());
    monitor.start("Looking up module uses", modules.size());
    for (SModule module : modules) {
      if (monitor.isCanceled()) {
        return searchResults;
      }

      if (module instanceof Solution) {
        collectUsagesInSolution(searchedModule, (Solution) module, searchResults);
      } else if (module instanceof Language) {
        collectUsagesInLanguage(searchedModule, (Language) module, searchResults);
      } else if (module instanceof DevKit) {
        collectUsagesInDevKit(searchedModule, (DevKit) module, searchResults);
      } else if (module instanceof Generator) {
        collectUsagesInGenerator(searchedModule, (Generator) module, searchResults);
      }
      monitor.advance(1);
    }
    monitor.done();
    return searchResults;
  }
  /*package*/ void collectUsagesInSolution(SModule searchedModule, Solution solution, SearchResults searchResults) {
    SModuleReference searchModuleRef = searchedModule.getModuleReference();
    if (getDeclaredDependenciesTargets(solution).contains(searchModuleRef)) {
      searchResults.add(new SearchResult<Solution>(solution, DEPENDENT_MODULES));
    }
    if (new GlobalModuleDependenciesManager(solution).getUsedLanguages().contains(searchedModule)) {
      searchResults.add(new SearchResult<Solution>(solution, USED_BY));
      collectUsagesInModels(searchedModule, solution, searchResults);
    }
  }
  /*package*/ void collectUsagesInLanguage(SModule searchedModule, Language language, SearchResults searchResults) {
    SModuleReference searchModuleRef = searchedModule.getModuleReference();
    if (language.getExtendedLanguageRefs().contains(searchModuleRef)) {
      searchResults.add(new SearchResult<Language>(language, EXTENDING_LANGUAGES));
    }
    if (new GlobalModuleDependenciesManager(language).getUsedLanguages().contains(searchedModule)) {
      searchResults.add(new SearchResult<Language>(language, USED_BY));
      collectUsagesInModels(searchedModule, language, searchResults);
    }
    if (getDeclaredDependenciesTargets(language).contains(searchModuleRef)) {
      searchResults.add(new SearchResult<Language>(language, DEPENDENT_MODULES));
    }
    if (language.getRuntimeModulesReferences().contains(searchModuleRef)) {
      searchResults.add(new SearchResult<Language>(language, RUNTIME_MODULES));
      collectUsagesInModels(searchedModule, language, searchResults);
    }
  }
  /*package*/ void collectUsagesInGenerator(SModule searchedModule, Generator generator, SearchResults searchResults) {
    boolean depExtends = false;
    boolean depRuntime = false;
    boolean depRegular = false;
    for (SDependency dep : findDependencies(generator, searchedModule.getModuleReference())) {
      if (dep.getScope() == SDependencyScope.EXTENDS) {
        depExtends = true;
      } else if (dep.getScope() == SDependencyScope.RUNTIME) {
        depRuntime = true;
      } else {
        depRegular = true;
      }
    }
    if (depExtends) {
      searchResults.add(new SearchResult<Generator>(generator, EXTENDING_GENERATORS));
    }
    if (depRuntime) {
      searchResults.add(new SearchResult<Generator>(generator, RUNTIME_MODULES));
    }
    if (depRegular) {
      searchResults.add(new SearchResult<Generator>(generator, DEPENDENT_MODULES));
    }
    if (new GlobalModuleDependenciesManager(generator).getUsedLanguages().contains(searchedModule)) {
      searchResults.add(new SearchResult<Generator>(generator, USED_BY));
      collectUsagesInModels(searchedModule, generator, searchResults);
    }
  }
  /*package*/ void collectUsagesInDevKit(SModule searchedModule, DevKit devKit, SearchResults searchResults) {
    if (devKit.getExportedLanguages().contains(searchedModule)) {
      searchResults.add(new SearchResult<DevKit>(devKit, EXPORTED_BY));
    }
    SModuleReference searchModuleRef = searchedModule.getModuleReference();
    if (getDeclaredDependenciesTargets(devKit).contains(searchModuleRef)) {
      searchResults.add(new SearchResult<DevKit>(devKit, DEPENDENT_MODULES));
    }
  }
  /*package*/ void collectUsagesInModels(SModule searchedModule, SModule owner, SearchResults searchResults) {
    for (SModel model : owner.getModels()) {
      if (!(SModelStereotype.isUserModel(model))) {
        continue;
      }
      if (SModelOperations.hasLanguage(model, searchedModule.getModuleReference())) {
        searchResults.add(new SearchResult<SModel>(model, MODELS_WRITTEN_IN_LANGUAGE));
      }
    }
  }
  private static Set<SModuleReference> getDeclaredDependenciesTargets(SModule module) {
    Set<SModuleReference> result = new HashSet<SModuleReference>();
    for (SDependency dep : module.getDeclaredDependencies()) {
      result.add(dep.getTargetModule());
    }
    return result;
  }
  private static Set<SDependency> findDependencies(SModule from, SModuleReference to) {
    // FIXME nice candidate to move into SModule (along with findDependencies(SDependencyKind) 
    LinkedHashSet<SDependency> rv = new LinkedHashSet<SDependency>();
    for (SDependency dep : from.getDeclaredDependencies()) {
      if (dep.getTargetModule().equals(to)) {
        rv.add(dep);
      }
    }
    return rv;
  }
}
