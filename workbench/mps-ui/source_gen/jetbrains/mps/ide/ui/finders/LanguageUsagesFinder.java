package jetbrains.mps.ide.ui.finders;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.ide.findusages.model.holders.IHolder;
import jetbrains.mps.ide.findusages.model.holders.ModuleHolder;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.project.Solution;
import jetbrains.mps.smodel.ModelsOnlyScope;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.SModelOperations;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.util.NodesIterable;
import jetbrains.mps.util.SNodeOperations;
import java.util.Set;
import java.util.HashSet;
import org.jetbrains.mps.openapi.module.SDependency;

public class LanguageUsagesFinder implements IFinder {
  private static final String USED_BY = "used by";
  private static final String DEPENDENT_MODULES = "dependent modules";
  private static final String EXTENDING_LANGUAGES = "extending languages";
  private static final String EXPORTED_BY = "exported by";
  private static final String MODELS_WRITTEN_IN_LANGUAGE = "models written in language";
  private static final String NODES_IN_LANGUAGE = "nodes written in language";


  public LanguageUsagesFinder() {
  }

  @Override
  public SearchResults find(SearchQuery query, ProgressMonitor monitor) {
    SearchResults searchResults = new SearchResults();
    IHolder objectHolder = query.getObjectHolder();
    if (!((objectHolder instanceof ModuleHolder))) {
      return searchResults;
    }
    ModuleHolder moduleHolder = (ModuleHolder) objectHolder;
    SModule searchedModule = moduleHolder.getObject();
    if (searchedModule instanceof DevKit) {
      for (Language devKiltLanguage : ((DevKit) searchedModule).getAllExportedLanguages()) {
        SearchQuery innerQuery = new SearchQuery(devKiltLanguage, query.getScope());
        searchResults.addAll(find(innerQuery, monitor));
      }
    }
    if (!((searchedModule instanceof Language))) {
      return searchResults;
    }
    Language language = (Language) searchedModule;
    SearchScope scope = query.getScope();
    if (scope instanceof GlobalScope) {
      for (SModule module : (as_m2sz3c_a0a0a0j0i(scope, GlobalScope.class)).getVisibleModules()) {
        if (monitor.isCanceled()) {
          return searchResults;
        }
        if (module instanceof Solution) {
          collectUsagesInSolution(language, (Solution) module, searchResults);
        }
        if (module instanceof Language) {
          collectUsagesInLanguage(language, (Language) module, searchResults);
        }
        if (module instanceof DevKit) {
          collectUsagesInDevKit(language, (DevKit) module, searchResults);
        }
      }
    } else if (query.getScope() instanceof ModelsOnlyScope) {
      searchResults.getSearchedNodes().add(language);
      for (SModel modelDescriptor : (as_m2sz3c_a0a0b0a9a8(query.getScope(), ModelsOnlyScope.class)).getModelDescriptors()) {
        collectUsagesInModel(language, modelDescriptor, searchResults);
      }
    }
    return searchResults;
  }

  private void collectUsagesInSolution(Language searchedLanguage, Solution solution, SearchResults searchResults) {
    if (getDeclaredDependenciesTargets(solution).contains(searchedLanguage)) {
      searchResults.getSearchResults().add(new SearchResult<Solution>(solution, DEPENDENT_MODULES));
    }
    if (new GlobalModuleDependenciesManager(solution).getUsedLanguages().contains(searchedLanguage)) {
      searchResults.getSearchResults().add(new SearchResult<Solution>(solution, USED_BY));
      collectUsagesInModels(searchedLanguage, solution, searchResults);
    }
  }

  private void collectUsagesInLanguage(Language searchedLanguage, Language language, SearchResults searchResults) {
    if (language.getExtendedLanguageRefs().contains(searchedLanguage.getModuleReference())) {
      searchResults.getSearchResults().add(new SearchResult<Language>(language, EXTENDING_LANGUAGES));
    }
    if (new GlobalModuleDependenciesManager(language).getUsedLanguages().contains(searchedLanguage)) {
      searchResults.getSearchResults().add(new SearchResult<Language>(language, USED_BY));
      collectUsagesInModels(searchedLanguage, language, searchResults);
    }
    if (getDeclaredDependenciesTargets(language).contains(searchedLanguage)) {
      searchResults.getSearchResults().add(new SearchResult<Language>(language, DEPENDENT_MODULES));
    }
  }

  private void collectUsagesInDevKit(Language searchedLanguage, DevKit devKit, SearchResults searchResults) {
    if (devKit.getExportedLanguages().contains(searchedLanguage)) {
      searchResults.getSearchResults().add(new SearchResult<DevKit>(devKit, EXPORTED_BY));
    }
    if (getDeclaredDependenciesTargets(devKit).contains(searchedLanguage)) {
      searchResults.getSearchResults().add(new SearchResult<DevKit>(devKit, DEPENDENT_MODULES));
    }
  }

  private void collectUsagesInModels(Language searchedLanguage, SModule owner, SearchResults searchResults) {
    for (SModel modelDescriptor : owner.getModels()) {
      if (!(SModelStereotype.isUserModel(modelDescriptor))) {
        continue;
      }
      if (SModelOperations.hasLanguage(modelDescriptor, searchedLanguage.getModuleReference())) {
        SModel model = modelDescriptor;
        searchResults.getSearchResults().add(new SearchResult<SModel>(model, MODELS_WRITTEN_IN_LANGUAGE));
      }
    }
  }

  private void collectUsagesInModel(Language searchedLanguage, SModel modelDescriptor, SearchResults searchResults) {
    if (!(SModelStereotype.isUserModel(modelDescriptor))) {
      return;
    }
    for (SNode node : new NodesIterable(modelDescriptor)) {
      if (SNodeOperations.getLanguage(node) == searchedLanguage) {
        searchResults.getSearchResults().add(new SearchResult<SNode>(node, NODES_IN_LANGUAGE));
      }
    }
  }

  private static Set<SModule> getDeclaredDependenciesTargets(SModule module) {
    Set<SModule> result = new HashSet<SModule>();
    for (SDependency dep : module.getDeclaredDependencies()) {
      result.add(dep.getTarget());
    }
    return result;
  }

  private static <T> T as_m2sz3c_a0a0a0j0i(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }

  private static <T> T as_m2sz3c_a0a0b0a9a8(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }
}
