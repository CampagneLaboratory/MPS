package jetbrains.mps.ide.ui.dialogs.properties.creators;

/*Generated by MPS */

import jetbrains.mps.util.Computable;
import java.util.List;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.FilteredGlobalScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.ui.dialogs.properties.choosers.CommonChoosers;

public class LanguageOrDevKitChooser implements Computable<List<ModuleReference>> {
  public List<ModuleReference> compute() {
    final Wrappers._T<List<ModuleReference>> langOrDevKitRefs = new Wrappers._T<List<ModuleReference>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        Iterable<Language> langs = new FilteredGlobalScope().getVisibleLanguages();
        langOrDevKitRefs.value = Sequence.fromIterable(langs).select(new ISelector<Language, ModuleReference>() {
          public ModuleReference select(Language lang) {
            return lang.getModuleReference();
          }
        }).toListSequence();

        Iterable<DevKit> devkits = new FilteredGlobalScope().getVisibleDevkits();
        ListSequence.fromList(langOrDevKitRefs.value).addSequence(Sequence.fromIterable(devkits).select(new ISelector<DevKit, ModuleReference>() {
          public ModuleReference select(DevKit it) {
            return it.getModuleReference();
          }
        }).toListSequence());
      }
    });

    return CommonChoosers.showDialogModuleCollectionChooser(null, "Language or DevKit", langOrDevKitRefs.value, null);
  }
}
