package jetbrains.mps.ide.ui.dialogs.properties.renderers;

/*Generated by MPS */

import javax.swing.table.TableCellRenderer;
import java.util.Map;
import java.awt.Component;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.WeakHashMap;
import javax.swing.JTable;
import javax.swing.JLabel;
import jetbrains.mps.project.structure.modules.mappingpriorities.MappingConfig_RefAllLocal;
import jetbrains.mps.project.structure.modules.mappingpriorities.MappingConfig_RefAllGlobal;
import jetbrains.mps.project.structure.modules.mappingpriorities.MappingConfig_SimpleRef;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.structure.modules.mappingpriorities.MappingConfig_ExternalRef;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.structure.modules.mappingpriorities.MappingConfig_RefSet;
import javax.swing.JPanel;
import java.awt.GridBagLayout;
import jetbrains.mps.project.structure.modules.mappingpriorities.MappingConfig_AbstractRef;

public class RuleOperandRenderer implements TableCellRenderer {
  private Map<Object, Component> myRenderersCache = MapSequence.fromMap(new WeakHashMap<Object, Component>());

  public RuleOperandRenderer() {
  }

  public Component getTableCellRendererComponent(JTable table, final Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    if (value == null) {
      return new JLabel("Error");
    }
    if (value instanceof MappingConfig_RefAllLocal) {
      return new JLabel("*");
    } else
    if (value instanceof MappingConfig_RefAllGlobal) {
      return new JLabel("*.*");
    } else
    if (value instanceof MappingConfig_SimpleRef) {
      MappingConfig_SimpleRef refC = (MappingConfig_SimpleRef) value;
      SModelReference modelRef = SModelReference.fromString(refC.getModelUID());
      String nodeName;
      if (refC.getNodeID().equals("*")) {
        nodeName = NameUtil.shortNameFromLongName(modelRef.getLongName()) + ".*";
      } else {
        final SNodeReference p = new SNodePointer(refC.getModelUID(), refC.getNodeID());
        nodeName = ModelAccess.instance().runReadAction(new Computable<String>() {
          public String compute() {
            SModelDescriptor model = ((SNodePointer) p).getModel();
            SNode node = ((SNodePointer) p).getNode();
            if (model == null || node == null) {
              return null;
            }
            String modelName = NameUtil.shortNameFromLongName(model.getLongName());
            return modelName + "." + node.getName();
          }
        });
        if (nodeName == null) {
          String nodeString = ((SNodePointer) p).toString();
          return new JLabel("NOT FOUND: " + nodeString);
        }
      }
      return new JLabel(nodeName);
    } else
    if (value instanceof MappingConfig_ExternalRef) {
      MappingConfig_ExternalRef refC = (MappingConfig_ExternalRef) value;
      ModuleReference generatorReference = refC.getGenerator();
      if (generatorReference == null) {
        return new JLabel("NOT FOUND: <bad generator reference>");
      }
      ModuleReference moduleRef = generatorReference;
      Generator generator = (Generator) MPSModuleRepository.getInstance().getModule(moduleRef);
      if (generator == null) {
        String genString = generatorReference.getModuleFqName();
        return new JLabel("NOT FOUND: " + genString);
      }
      JLabel label = new JLabel(generator.getAlias());
      label.add(getTableCellRendererComponent(null, refC.getMappingConfig(), false, false, 0, 0));
      return label;

    } else
    if (value instanceof MappingConfig_RefSet) {
      JPanel panel = new JPanel(new GridBagLayout());
      for (MappingConfig_AbstractRef mappingRef : ((MappingConfig_RefSet) value).getMappingConfigs()) {
        panel.add(getTableCellRendererComponent(null, mappingRef, false, false, 0, 0));
      }
      return panel;
    }
    return new JLabel("");
  }
}
