package jetbrains.mps.ide.ui.dialogs.properties.creators;

/*Generated by MPS */

import jetbrains.mps.util.CollectionUtil;
import jetbrains.mps.util.Computable;

import java.util.ArrayList;
import java.util.List;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.Solution;
import jetbrains.mps.FilteredGlobalScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.ui.dialogs.properties.choosers.CommonChoosers;
import org.jetbrains.mps.openapi.module.SModule;

public class SolutionChooser implements Computable<List<ModuleReference>> {
  public SolutionChooser() {
  }

  public List<ModuleReference> compute() {
    final Wrappers._T<List<ModuleReference>> solRefs = new Wrappers._T<List<ModuleReference>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        List<Solution> solutions = new ArrayList<Solution>();
        for (SModule module : new FilteredGlobalScope().getModules()) {
          if (module instanceof Solution) {
            solutions.add((Solution) module);
          }
        }
        solRefs.value = Sequence.fromIterable(solutions).select(new ISelector<Solution, ModuleReference>() {
          public ModuleReference select(Solution it) {
            return it.getModuleReference();
          }
        }).toListSequence();
      }
    });
    return CommonChoosers.showDialogModuleCollectionChooser(null, "solution", solRefs.value, null);
  }
}
