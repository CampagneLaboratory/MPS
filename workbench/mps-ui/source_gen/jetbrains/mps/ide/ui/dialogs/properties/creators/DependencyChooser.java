package jetbrains.mps.ide.ui.dialogs.properties.creators;

/*Generated by MPS */

import jetbrains.mps.util.Computable;
import java.util.List;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.ui.dialogs.properties.choosers.CommonChoosers;
import java.util.ArrayList;

public class DependencyChooser implements Computable<List<Dependency>> {
  public DependencyChooser() {
  }

  @Override
  public List<Dependency> compute() {
    final Wrappers._T<Iterable<SModuleReference>> allModuleRefs = new Wrappers._T<Iterable<SModuleReference>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        Iterable<SModule> modules = GlobalScope.getInstance().getModules();
        allModuleRefs.value = Sequence.fromIterable(modules).select(new ISelector<SModule, SModuleReference>() {
          public SModuleReference select(SModule it) {
            return it.getModuleReference();
          }
        });
      }
    });
    List<SModuleReference> moduleRefs = CommonChoosers.showDialogModuleCollectionChooser(null, "module", Sequence.fromIterable(allModuleRefs.value).toListSequence(), null);
    if (moduleRefs == null) {
      return null;
    }
    List<Dependency> result = new ArrayList<Dependency>();
    for (SModuleReference m : moduleRefs) {
      Dependency dependency = new Dependency();
      dependency.setModuleRef(m);
      result.add(dependency);
    }
    return result;
  }
}
