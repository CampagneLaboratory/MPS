package jetbrains.mps.ide.ui.dialogs.properties.creators;

/*Generated by MPS */

import jetbrains.mps.util.Computable;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModelReference;
import com.intellij.openapi.project.Project;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.FilteredGlobalScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.ui.dialogs.properties.choosers.CommonChoosers;

public class ModelChooser implements Computable<List<SModelReference>> {
  private Project project;
  public ModelChooser(Project p) {
    project = p;
  }
  @Override
  public List<SModelReference> compute() {
    final Wrappers._T<List<SModelReference>> models = new Wrappers._T<List<SModelReference>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        Iterable<SModel> descriptors = new FilteredGlobalScope().getModels();
        models.value = Sequence.fromIterable(descriptors).select(new ISelector<SModel, SModelReference>() {
          public SModelReference select(SModel it) {
            return it.getReference();
          }
        }).toListSequence();
      }
    });
    return CommonChoosers.showDialogModelCollectionChooser(project, models.value, null);
  }
}
