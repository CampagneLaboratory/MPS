package jetbrains.mps.ide.ui.dialogs.modules;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JCheckBox;
import com.intellij.uiDesigner.core.GridLayoutManager;
import java.awt.Insets;
import javax.swing.JLabel;
import javax.swing.event.CaretListener;
import javax.swing.event.CaretEvent;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.fileChooser.FileChooserDescriptorFactory;
import com.intellij.ui.InsertPathAction;
import com.intellij.ide.util.BrowseFilesListener;
import com.intellij.ui.FieldPanel;
import com.intellij.openapi.util.EmptyRunnable;
import com.intellij.openapi.fileChooser.FileChooserFactory;
import java.awt.Dimension;
import java.io.File;
import javax.swing.JComponent;

public class NewLanguageSettings extends JPanel {

  private String myProjectPath;
  private JTextField myLanguageName;
  private JTextField myLanguageLocation;
  private JCheckBox myRuntimeSolution;
  private JCheckBox mySandboxSolution;


  public NewLanguageSettings() {
    this(null);
  }



  public NewLanguageSettings(String projectPath) {
    super(new GridLayoutManager(5, 1, new Insets(0, 5, 5, 5), -1, -1));
    myProjectPath = projectPath;

    this.add(new JLabel("Language name:"), Util.getGridConstraints(0));
    myLanguageName = new JTextField("NewLanguage");
    myLanguageName.setName("Name");
    myLanguageName.addCaretListener(new CaretListener() {
      public void caretUpdate(CaretEvent p0) {
        updateLanguageLocation();
      }
    });
    this.add(myLanguageName, Util.getGridConstraints(1));

    myLanguageLocation = new JTextField();
    myLanguageLocation.setName("Path");
    final FileChooserDescriptor descriptor = FileChooserDescriptorFactory.createSingleFolderDescriptor();
    InsertPathAction.addTo(myLanguageLocation, descriptor);
    BrowseFilesListener listener = new BrowseFilesListener(myLanguageLocation, "Choose Language Location Folder", "", descriptor);
    FieldPanel fieldPanel = new FieldPanel(myLanguageLocation, "Language location:", null, listener, EmptyRunnable.getInstance());
    FileChooserFactory.getInstance().installFileCompletion(fieldPanel.getTextField(), descriptor, false, null);
    this.add(fieldPanel, Util.getGridConstraints(2));

    myRuntimeSolution = new JCheckBox("Create Runtime Solution", false);
    this.add(myRuntimeSolution, Util.getGridConstraints(3));

    mySandboxSolution = new JCheckBox("Create Sandbox Solution", false);
    this.add(mySandboxSolution, Util.getGridConstraints(4));

    this.setPreferredSize(new Dimension(400, 100));

    updateLanguageLocation();
  }



  protected void updateLanguageLocation() {
    updateLanguageLocation(false);
  }

  protected void updateLanguageLocation(boolean force) {
    if (myProjectPath == null) {
      return;
    }
    String prefix = myProjectPath + File.separator + "languages" + File.separator;
    if (isEmpty_so2aal_a0a0a2a21(myLanguageName.getText()) || isEmpty_so2aal_a0a0a2a21_0(myLanguageLocation.getText()) || myLanguageLocation.getText().startsWith(prefix) || force) {
      myLanguageLocation.setText(prefix + myLanguageName.getText());
    }
  }



  public String getLanguageName() {
    return myLanguageName.getText();
  }

  public void setLanguageName(String languageName) {
    myLanguageName.setText(languageName);
    updateLanguageLocation();
  }

  public String getLanguageLocation() {
    return myLanguageLocation.getText();
  }

  public void setLanguageLocation(String languageLocation) {
    myLanguageLocation.setText(languageLocation);
    updateLanguageLocation();
  }

  public boolean isRuntimeSolutionNeeded() {
    return myRuntimeSolution.isSelected();
  }

  public void setRuntimeSolutionNeeded(boolean needed) {
    myRuntimeSolution.setSelected(needed);
  }

  public boolean isSandboxSolutionNeeded() {
    return mySandboxSolution.isSelected();
  }

  public void setSandboxSolutionNeeded(boolean needed) {
    mySandboxSolution.setSelected(needed);
  }

  public void setProjectPath(String projectPath) {
    myProjectPath = projectPath;
    updateLanguageLocation(true);
  }



  public JComponent getPreferredFocusedComponent() {
    return myLanguageName;
  }

  public static boolean isEmpty_so2aal_a0a0a2a21(String str) {
    return str == null || str.length() == 0;
  }

  public static boolean isEmpty_so2aal_a0a0a2a21_0(String str) {
    return str == null || str.length() == 0;
  }
}
