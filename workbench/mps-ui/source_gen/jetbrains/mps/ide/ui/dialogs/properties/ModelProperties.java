package jetbrains.mps.ide.ui.dialogs.properties;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SModelReference;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.extapi.model.GeneratableSModel;
import org.jetbrains.mps.openapi.model.EditableSModel;
import org.jetbrains.mps.openapi.persistence.NullDataSource;
import jetbrains.mps.kernel.model.MissingDependenciesFixer;
import jetbrains.mps.generator.ModelGenerationStatusManager;
import java.util.Collections;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;

public class ModelProperties {
  private final List<SModelReference> myImportedModels = new ArrayList<SModelReference>();
  private final List<SLanguage> myUsedLanguages = new ArrayList<SLanguage>();
  private final List<SModuleReference> myUsedDevKits = new ArrayList<SModuleReference>();
  private final List<SModuleReference> myLanguagesEngagedOnGeneration = new ArrayList<SModuleReference>();
  private SModel myModelDescriptor;
  private boolean myDoNotGenerate;
  private boolean myGenerateIntoModelFolder;
  public ModelProperties(SModel modelDescriptor) {
    myModelDescriptor = modelDescriptor;
    SModel model = myModelDescriptor;
    myImportedModels.addAll(SModelOperations.getImportedModelUIDs(model));
    myUsedLanguages.addAll(((SModelInternal) model).importedLanguageIds());
    myUsedDevKits.addAll(((SModelInternal) model).importedDevkits());
    myLanguagesEngagedOnGeneration.addAll(((SModelInternal) model).engagedOnGenerationLanguages());
    myDoNotGenerate = myModelDescriptor instanceof GeneratableSModel && ((GeneratableSModel) myModelDescriptor).isDoNotGenerate();
    myGenerateIntoModelFolder = myModelDescriptor instanceof GeneratableSModel && ((GeneratableSModel) myModelDescriptor).isGenerateIntoModelFolder();
  }
  public SModel getModelDescriptor() {
    return myModelDescriptor;
  }
  public List<SModelReference> getImportedModels() {
    return myImportedModels;
  }
  public List<SLanguage> getUsedLanguages() {
    // imported directly only. Languages coming from devkits are separate 
    return myUsedLanguages;
  }
  public List<SModuleReference> getUsedDevKits() {
    return myUsedDevKits;
  }
  public List<SModuleReference> getLanguagesEngagedOnGeneration() {
    return myLanguagesEngagedOnGeneration;
  }
  public boolean isDoNotGenerate() {
    return myDoNotGenerate;
  }
  public void setDoNotGenerate(boolean doNotGenerate) {
    myDoNotGenerate = doNotGenerate;
  }
  public boolean isGenerateIntoModelFolder() {
    return myGenerateIntoModelFolder;
  }
  public void setGenerateIntoModelFolder(boolean generateIntoModelFolder) {
    myGenerateIntoModelFolder = generateIntoModelFolder;
  }
  public void saveChanges() {
    if (!(myModelDescriptor instanceof EditableSModel)) {
      return;
    }

    addNewModels();
    removeUnusedModels();
    updateUsedLanguages();
    addNewDevKits();
    removeUnusedDevKits();
    addNewEngagedOnGenerationLanguages();
    removeUnusedEngagedOnGenerationLanguages();
    if (myModelDescriptor instanceof GeneratableSModel) {
      GeneratableSModel dmd = (GeneratableSModel) myModelDescriptor;
      if (dmd.isDoNotGenerate() != myDoNotGenerate) {
        dmd.setDoNotGenerate(myDoNotGenerate);
      }
      if (dmd.isGenerateIntoModelFolder() != myGenerateIntoModelFolder) {
        dmd.setGenerateIntoModelFolder(myGenerateIntoModelFolder);
      }
    }

    if (!(myModelDescriptor.getSource() instanceof NullDataSource)) {
      ((EditableSModel) myModelDescriptor).save();
    }

    new MissingDependenciesFixer(myModelDescriptor).fixModuleDependencies();
    // change of model properties might affect generation status. This explicit call is needed  
    // unless model dispatch proper change events (which it does not at the moment), and project pane  
    // got no other means to find out it needs to update generation status 
    ModelGenerationStatusManager.getInstance().invalidateData(Collections.singleton(myModelDescriptor));
  }
  private void addNewDevKits() {
    Set<SModuleReference> devKitsInModel = new HashSet<SModuleReference>(((SModelInternal) myModelDescriptor).importedDevkits());
    Set<SModuleReference> devKitsInProperties = new HashSet<SModuleReference>(getUsedDevKits());
    devKitsInProperties.removeAll(devKitsInModel);
    for (SModuleReference dk : devKitsInProperties) {
      DevKit devKit = ModuleRepositoryFacade.getInstance().getModule(dk, DevKit.class);
      assert devKit != null;
      SModel model = myModelDescriptor;
      ((SModelInternal) model).addDevKit(dk);
    }
  }
  private void removeUnusedDevKits() {
    Set<SModuleReference> propsDevKits = new HashSet<SModuleReference>(getUsedDevKits());
    List<SModuleReference> imported = new ArrayList<SModuleReference>(((SModelInternal) myModelDescriptor).importedDevkits());
    for (SModuleReference dk : imported) {
      if (!(propsDevKits.contains(dk))) {
        ((SModelInternal) myModelDescriptor).deleteDevKit(dk);
      }
    }
  }
  protected String getErrorString() {
    return null;
  }
  private void updateUsedLanguages() {
    Set<SLanguage> languagesInModel = new HashSet<SLanguage>(((SModelInternal) myModelDescriptor).importedLanguageIds());
    Set<SLanguage> languagesInProps = new HashSet<SLanguage>(getUsedLanguages());
    languagesInProps.removeAll(languagesInModel);

    for (SLanguage lang : languagesInProps) {
      ((AbstractModule) myModelDescriptor.getModule()).addUsedLanguage(lang);
      ((SModelInternal) myModelDescriptor).addLanguage(lang);
    }

    languagesInModel.removeAll(getUsedLanguages());
    for (SLanguage lang : languagesInModel) {
      ((SModelInternal) myModelDescriptor).deleteLanguageId(lang);
    }

  }
  private void addNewEngagedOnGenerationLanguages() {
    Set<SModuleReference> languagesInModel = new HashSet<SModuleReference>(((SModelInternal) myModelDescriptor).engagedOnGenerationLanguages());
    Set<SModuleReference> languagesInProps = new HashSet<SModuleReference>(getLanguagesEngagedOnGeneration());
    languagesInProps.removeAll(languagesInModel);
    for (SModuleReference namespace : languagesInProps) {
      ((SModelInternal) myModelDescriptor).addEngagedOnGenerationLanguage(namespace);
    }
  }
  private void removeUnusedEngagedOnGenerationLanguages() {
    Set<SModuleReference> languagesInModel = new HashSet<SModuleReference>(((SModelInternal) myModelDescriptor).engagedOnGenerationLanguages());
    Set<SModuleReference> languagesInProps = new HashSet<SModuleReference>(getLanguagesEngagedOnGeneration());
    languagesInModel.removeAll(languagesInProps);
    for (SModuleReference ref : languagesInModel) {
      ((SModelInternal) myModelDescriptor).removeEngagedOnGenerationLanguage(ref);
    }
  }
  private void addNewModels() {
    Set<SModelReference> modelsInProps = new HashSet<SModelReference>(getImportedModels());
    SModel smodel = myModelDescriptor;
    modelsInProps.removeAll(SModelOperations.getImportedModelUIDs(smodel));
    for (SModelReference modelReference : modelsInProps) {
      ((SModelInternal) smodel).addModelImport(modelReference, false);
    }
  }
  private void removeUnusedModels() {
    SModel smodel = myModelDescriptor;
    Set<SModelReference> modelsInModel = new HashSet<SModelReference>(SModelOperations.getImportedModelUIDs(smodel));
    modelsInModel.removeAll(getImportedModels());
    for (SModelReference modelReference : modelsInModel) {
      ((SModelInternal) smodel).deleteModelImport(modelReference);
    }
  }
  public Condition<SModelReference> getImportedModelsRemoveCondition() {
    Set<SModelReference> models = new ModelAccessHelper(myModelDescriptor.getRepository()).runReadAction(new Computable<Set<SModelReference>>() {
      public Set<SModelReference> compute() {
        return SModelOperations.getUsedImportedModels(myModelDescriptor);
      }
    });
    return new ModelProperties.ModelsCondition(models);
  }


  public class ModelsCondition implements Condition<SModelReference> {
    private final Set<SModelReference> myModels;
    public ModelsCondition(Set<SModelReference> models) {
      myModels = models;
    }
    @Override
    public boolean met(final SModelReference object) {
      return !(myModels.contains(object));
    }
  }
}
