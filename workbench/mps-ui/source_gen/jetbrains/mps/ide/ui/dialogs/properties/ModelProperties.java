package jetbrains.mps.ide.ui.dialogs.properties;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SModelReference;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.extapi.model.GeneratableSModel;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.extapi.model.EditableSModel;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import jetbrains.mps.smodel.DefaultSModel;
import jetbrains.mps.kernel.model.MissingDependenciesFixer;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ScopeOperations;
import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import java.util.Collections;

public class ModelProperties {
  private static String USE_MODEL_FOLDER_FOR_GENERATION = "useModelFolderForGeneration";
  private List<SModelReference> myImportedModels = new ArrayList<SModelReference>();
  private List<SModuleReference> myUsedLanguages = new ArrayList<SModuleReference>();
  private List<SModuleReference> myUsedDevKits = new ArrayList<SModuleReference>();
  private List<SModuleReference> myLanguagesEngagedOnGeneration = new ArrayList<SModuleReference>();
  private SModel myModelDescriptor;
  private boolean myDoNotGenerate;
  private boolean myGenerateIntoModelFolder;

  public ModelProperties(SModel modelDescriptor) {
    myModelDescriptor = modelDescriptor;
    SModel model = myModelDescriptor;
    myImportedModels.addAll(SModelOperations.getImportedModelUIDs(model));
    myUsedLanguages.addAll(((SModelInternal) model).importedLanguages());
    myUsedDevKits.addAll(((SModelInternal) model).importedDevkits());
    myLanguagesEngagedOnGeneration.addAll(((SModelInternal) model).engagedOnGenerationLanguages());
    myDoNotGenerate = myModelDescriptor instanceof GeneratableSModel && ((GeneratableSModel) myModelDescriptor).isDoNotGenerate();
    myGenerateIntoModelFolder = myModelDescriptor instanceof GeneratableSModel && ((GeneratableSModel) myModelDescriptor).isGenerateIntoModelFolder();
  }

  @Deprecated
  public ModelProperties(SModel modelDescriptor, IOperationContext context) {
    myModelDescriptor = modelDescriptor;
    SModel model = myModelDescriptor;
    myImportedModels.addAll(SModelOperations.getImportedModelUIDs(model));
    myUsedLanguages.addAll(((SModelInternal) model).importedLanguages());
    myUsedDevKits.addAll(((SModelInternal) model).importedDevkits());
    myLanguagesEngagedOnGeneration.addAll(((SModelInternal) model).engagedOnGenerationLanguages());
    myDoNotGenerate = myModelDescriptor instanceof GeneratableSModel && ((GeneratableSModel) myModelDescriptor).isDoNotGenerate();
    myGenerateIntoModelFolder = myModelDescriptor instanceof GeneratableSModel && ((GeneratableSModel) myModelDescriptor).isGenerateIntoModelFolder();
  }

  public SModel getModelDescriptor() {
    return myModelDescriptor;
  }

  public List<SModelReference> getImportedModels() {
    return myImportedModels;
  }

  public List<SModuleReference> getUsedLanguages() {
    return myUsedLanguages;
  }

  public List<SModuleReference> getUsedDevKits() {
    return myUsedDevKits;
  }

  public List<SModuleReference> getLanguagesEngagedOnGeneration() {
    return myLanguagesEngagedOnGeneration;
  }

  public boolean isDoNotGenerate() {
    return myDoNotGenerate;
  }

  public void setDoNotGenerate(boolean doNotGenerate) {
    myDoNotGenerate = doNotGenerate;
  }

  public boolean isGenerateIntoModelFolder() {
    return myGenerateIntoModelFolder;
  }

  public void setGenerateIntoModelFolder(boolean generateIntoModelFolder) {
    myGenerateIntoModelFolder = generateIntoModelFolder;
  }

  public void saveChanges() {
    if (!(myModelDescriptor instanceof EditableSModel)) {
      return;
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      @Override
      public void run() {
        addNewModels();
        removeUnusedModels();
        addNewLanguages();
        removeUnusedLanguages();
        addNewDevKits();
        removeUnusedDevKits();
        addNewEngagedOnGenerationLanguages();
        removeUnusedEngagedOnGenerationLanguages();
        if (myModelDescriptor instanceof GeneratableSModel) {
          GeneratableSModel dmd = (GeneratableSModel) myModelDescriptor;
          if (dmd.isDoNotGenerate() != myDoNotGenerate) {
            dmd.setDoNotGenerate(myDoNotGenerate);
          }
        }
        if (myModelDescriptor instanceof DefaultSModelDescriptor) {
          DefaultSModel dm = ((DefaultSModelDescriptor) myModelDescriptor).getSModelInternal();
          if (myGenerateIntoModelFolder) {
            dm.getSModelHeader().setOptionalProperty(USE_MODEL_FOLDER_FOR_GENERATION, Boolean.TRUE.toString());
          } else {
            dm.getSModelHeader().removeOptionalProperty(USE_MODEL_FOLDER_FOR_GENERATION);
          }
        }

        ((EditableSModel) myModelDescriptor).save();
      }
    });
    MissingDependenciesFixer.fixDependencies(myModelDescriptor);
  }

  private void addNewDevKits() {
    Set<SModuleReference> devKitsInModel = new HashSet<SModuleReference>(((SModelInternal) myModelDescriptor).importedDevkits());
    Set<SModuleReference> devKitsInProperties = new HashSet<SModuleReference>(getUsedDevKits());
    devKitsInProperties.removeAll(devKitsInModel);
    for (SModuleReference dk : devKitsInProperties) {
      DevKit devKit = ModuleRepositoryFacade.getInstance().getModule(dk, DevKit.class);
      assert devKit != null;
      SModel model = myModelDescriptor;
      ((SModelInternal) model).addDevKit(dk);
    }
  }

  private void removeUnusedDevKits() {
    Set<SModuleReference> propsDevKits = new HashSet<SModuleReference>(getUsedDevKits());
    List<SModuleReference> imported = new ArrayList<SModuleReference>(((SModelInternal) myModelDescriptor).importedDevkits());
    for (SModuleReference dk : imported) {
      if (!(propsDevKits.contains(dk))) {
        ((SModelInternal) myModelDescriptor).deleteDevKit(dk);
      }
    }
  }

  protected String getErrorString() {
    return null;
  }

  private void addNewLanguages() {
    Set<SModuleReference> languagesInModel = new HashSet<SModuleReference>(((SModelInternal) myModelDescriptor).importedLanguages());
    Set<SModuleReference> languagesInProps = new HashSet<SModuleReference>(getUsedLanguages());
    languagesInProps.removeAll(languagesInModel);
    for (SModuleReference ref : languagesInProps) {
      Language language = ModuleRepositoryFacade.getInstance().getModule(ref, Language.class);
      if (language == null) {
        continue;
      }
      if (ScopeOperations.resolveModule(((AbstractModule) myModelDescriptor.getModule()).getScope(), language.getModuleReference(), Language.class) == null) {
        ((AbstractModule) myModelDescriptor.getModule()).addUsedLanguage(language.getModuleReference());
      }
      ((SModelInternal) myModelDescriptor).addLanguage(language.getModuleReference());
    }
  }

  private void removeUnusedLanguages() {
    Set<SModuleReference> languagesInModel = new HashSet<SModuleReference>(((SModelInternal) myModelDescriptor).importedLanguages());
    Set<SModuleReference> languagesInProps = new HashSet<SModuleReference>(getUsedLanguages());
    languagesInModel.removeAll(languagesInProps);
    for (SModuleReference namespace : languagesInModel) {
      ((SModelInternal) myModelDescriptor).deleteLanguage(namespace);
    }
  }

  private void addNewEngagedOnGenerationLanguages() {
    Set<SModuleReference> languagesInModel = new HashSet<SModuleReference>(((SModelInternal) myModelDescriptor).engagedOnGenerationLanguages());
    Set<SModuleReference> languagesInProps = new HashSet<SModuleReference>(getLanguagesEngagedOnGeneration());
    languagesInProps.removeAll(languagesInModel);
    for (SModuleReference namespace : languagesInProps) {
      ((SModelInternal) myModelDescriptor).addEngagedOnGenerationLanguage(namespace);
    }
  }

  private void removeUnusedEngagedOnGenerationLanguages() {
    Set<SModuleReference> languagesInModel = new HashSet<SModuleReference>(((SModelInternal) myModelDescriptor).engagedOnGenerationLanguages());
    Set<SModuleReference> languagesInProps = new HashSet<SModuleReference>(getLanguagesEngagedOnGeneration());
    languagesInModel.removeAll(languagesInProps);
    for (SModuleReference ref : languagesInModel) {
      ((SModelInternal) myModelDescriptor).removeEngagedOnGenerationLanguage(ref);
    }
  }

  private void addNewModels() {
    Set<SModelReference> modelsInProps = new HashSet<SModelReference>(getImportedModels());
    SModel smodel = myModelDescriptor;
    modelsInProps.removeAll(SModelOperations.getImportedModelUIDs(smodel));
    for (SModelReference modelReference : modelsInProps) {
      ((SModelInternal) smodel).addModelImport(modelReference, false);
    }
  }

  private void removeUnusedModels() {
    SModel smodel = myModelDescriptor;
    Set<SModelReference> modelsInModel = new HashSet<SModelReference>(SModelOperations.getImportedModelUIDs(smodel));
    modelsInModel.removeAll(getImportedModels());
    for (SModelReference modelReference : modelsInModel) {
      ((SModelInternal) smodel).deleteModelImport(modelReference);
    }
  }

  public Condition<SModuleReference> getUsedLanguageRemoveCondition() {
    final Wrappers._T<Set<SModuleReference>> usedLanguages = new Wrappers._T<Set<SModuleReference>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SModel m = myModelDescriptor;
        usedLanguages.value = SModelOperations.getUsedLanguages(m);
      }
    });
    return new ModelProperties.LanguagesCondition(usedLanguages.value);
  }

  public Condition<SModelReference> getImportedModelsRemoveCondition() {
    final Wrappers._T<Set<SModelReference>> models = new Wrappers._T<Set<SModelReference>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SModel m = myModelDescriptor;
        models.value = SModelOperations.getUsedImportedModels(m);
      }
    });
    return new ModelProperties.ModelsCondition(models.value);
  }




  public class ModelsCondition implements Condition<SModelReference> {
    private final Set<SModelReference> myModels;

    public ModelsCondition(Set<SModelReference> models) {
      myModels = models;
    }

    @Override
    public boolean met(final SModelReference object) {
      return !(myModels.contains(object));
    }
  }

  private class LanguagesCondition implements Condition<SModuleReference> {
    private final Set<SModuleReference> myUsedLanguages;

    public LanguagesCondition(Set<SModuleReference> usedLanguages) {
      myUsedLanguages = usedLanguages;
    }

    @Override
    public boolean met(final SModuleReference object) {
      SModule module = MPSModuleRepository.getInstance().getModuleByFqName(object.getModuleName());
      if (!(module instanceof DevKit)) {
        return !(myUsedLanguages.contains(object));
      }

      Set<SModuleReference> set = new HashSet<SModuleReference>();
      for (Language language : ((DevKit) module).getAllExportedLanguages()) {
        set.add(language.getModuleReference());
      }
      set.removeAll(ModelProperties.this.getUsedLanguages());
      set.removeAll(ModelProperties.this.getUsedLanguages());
      return Collections.disjoint(myUsedLanguages, set);
    }
  }
}
