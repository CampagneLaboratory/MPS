package jetbrains.mps.ide.ui.dialogs.modules;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JTextField;
import com.intellij.uiDesigner.core.GridLayoutManager;
import java.awt.Insets;
import javax.swing.JLabel;
import javax.swing.event.CaretListener;
import javax.swing.event.CaretEvent;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.fileChooser.FileChooserDescriptorFactory;
import com.intellij.ui.InsertPathAction;
import com.intellij.ide.util.BrowseFilesListener;
import com.intellij.ui.FieldPanel;
import com.intellij.openapi.util.EmptyRunnable;
import com.intellij.openapi.fileChooser.FileChooserFactory;
import java.awt.Dimension;
import java.io.File;
import javax.swing.JComponent;

public class NewSolutionSettings extends JPanel {

  private String myProjectPath;
  private JTextField mySolutionName;
  private JTextField mySolutionLocation;


  public NewSolutionSettings() {
    this(null);
  }

  public NewSolutionSettings(String projectPath) {
    super(new GridLayoutManager(3, 1, new Insets(0, 5, 5, 5), -1, -1));
    myProjectPath = projectPath;

    this.add(new JLabel("Solution name:"), Util.getGridConstraints(0));
    mySolutionName = new JTextField("NewSolution");
    mySolutionName.addCaretListener(new CaretListener() {
      public void caretUpdate(CaretEvent p0) {
        updateSolutionLocation();
      }
    });
    this.add(mySolutionName, Util.getGridConstraints(1));

    mySolutionLocation = new JTextField();
    final FileChooserDescriptor descriptor = FileChooserDescriptorFactory.createSingleFolderDescriptor();
    InsertPathAction.addTo(mySolutionLocation, descriptor);
    BrowseFilesListener listener = new BrowseFilesListener(mySolutionLocation, "Choose Solution Location Folder", "", descriptor);
    FieldPanel fieldPanel = new FieldPanel(mySolutionLocation, "Solution location:", null, listener, EmptyRunnable.getInstance());
    FileChooserFactory.getInstance().installFileCompletion(fieldPanel.getTextField(), descriptor, false, null);
    this.add(fieldPanel, Util.getGridConstraints(2));

    this.setPreferredSize(new Dimension(400, 100));

    updateSolutionLocation();
  }



  protected void updateSolutionLocation() {
    updateSolutionLocation(false);
  }

  protected void updateSolutionLocation(boolean force) {
    if (myProjectPath == null) {
      return;
    }
    String prefix = myProjectPath + File.separator + "solutions" + File.separator;
    if (isEmpty_mn6him_a0a0a2a9(mySolutionName.getText()) || isEmpty_mn6him_a0a0a2a9_0(mySolutionLocation.getText()) || mySolutionLocation.getText().startsWith(prefix) || force) {
      mySolutionLocation.setText(prefix + mySolutionName.getText());
    }
  }



  public String getSolutionName() {
    return mySolutionName.getText();
  }

  public void setSolutionName(String solutionName) {
    mySolutionName.setText(solutionName);
    updateSolutionLocation();
  }

  public String getSolutionLocation() {
    return mySolutionLocation.getText();
  }

  public void setSolutionLocation(String solutionLocation) {
    mySolutionLocation.setText(solutionLocation);
    updateSolutionLocation();
  }

  public void setProjectPath(String projectPath) {
    myProjectPath = projectPath;
    updateSolutionLocation(true);
  }



  public JComponent getPreferredFocusedComponent() {
    return mySolutionName;
  }

  public static boolean isEmpty_mn6him_a0a0a2a9(String str) {
    return str == null || str.length() == 0;
  }

  public static boolean isEmpty_mn6him_a0a0a2a9_0(String str) {
    return str == null || str.length() == 0;
  }
}
