package jetbrains.mps.ide.platform.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.icons.AllIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import jetbrains.mps.ide.platform.dependencyViewer.DependencyViewerScope;

public class AnalyzeDependencies_Action extends BaseAction {
  private static final Icon ICON = AllIcons.Toolwindows.ToolWindowInspection;
  public AnalyzeDependencies_Action() {
    super("Analyze Model Dependencies", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return !(AnalyzeDependencies_Action.this.computeScope(_params).isEmpty());
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    {
      boolean enabled = this.isApplicable(event, _params);
      this.setEnabledState(event.getPresentation(), enabled);
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      List<SModel> p = event.getData(MPSCommonDataKeys.MODELS);
      MapSequence.fromMap(_params).put("models", p);
    }
    {
      List<SModule> p = event.getData(MPSCommonDataKeys.MODULES);
      MapSequence.fromMap(_params).put("modules", p);
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    {
      SNode p = event.getData(MPSCommonDataKeys.NODE);
      MapSequence.fromMap(_params).put("node", p);
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      MapSequence.fromMap(_params).put("ideaProject", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    DependencyViewerScope scope = AnalyzeDependencies_Action.this.computeScope(_params);
    if (scope.isEmpty()) {
      return;
    }
    DependenciesUtil.openDependenciesTool(((Project) MapSequence.fromMap(_params).get("ideaProject")), scope, true);
  }
  /*package*/ DependencyViewerScope computeScope(final Map<String, Object> _params) {
    final DependencyViewerScope scope = new DependencyViewerScope();
    ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        if (((List<SModel>) MapSequence.fromMap(_params).get("models")) != null) {
          for (SModel model : ((List<SModel>) MapSequence.fromMap(_params).get("models"))) {
            scope.add(model);
          }
        }
        if (((List<SModule>) MapSequence.fromMap(_params).get("modules")) != null) {
          for (SModule module : ((List<SModule>) MapSequence.fromMap(_params).get("modules"))) {
            scope.add(module);
          }
        }
        if (scope.isEmpty()) {
          SNode node = check_rkpdtm_a0a0c0a0a1a0(((SNode) MapSequence.fromMap(_params).get("node")));
          if (node != null) {
            scope.add(node);
          }
        }
      }
    });
    return scope;
  }
  private static SNode check_rkpdtm_a0a0c0a0a1a0(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getContainingRoot();
    }
    return null;
  }
}
