package jetbrains.mps.debugger.core;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.AbstractAdditionalPainter;
import org.jetbrains.annotations.Nullable;
import java.awt.Color;
import jetbrains.mps.smodel.SNode;
import java.awt.Graphics;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import java.awt.Rectangle;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.nodeEditor.cells.CellFinders;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;

public abstract class DebuggerCellPainter<E> extends AbstractAdditionalPainter<E> {
  private static final int LEFT_MARGIN = 4;

  public DebuggerCellPainter() {
  }

  @Nullable
  protected abstract Color getCellBackgroundColor();

  @Nullable
  protected abstract Color getStripeBackgroundColor();

  @Nullable
  protected abstract Color getFrameColor();

  @Nullable
  protected abstract SNode getSNode();

  public boolean paintsAbove() {
    return true;
  }

  public void paint(Graphics graphics, EditorComponent editorComponent) {
    EditorCell nodeCell = getNodeCell(editorComponent);
    if (nodeCell == null) {
      return;
    }

    Color frameColor = getFrameColor();
    if (frameColor == null) {
      return;
    }

    graphics.setColor(frameColor);
    graphics.drawRect(nodeCell.getX(), nodeCell.getY(), nodeCell.getWidth() - 1, nodeCell.getHeight() - 1);
  }

  public boolean paintsBackground() {
    return true;
  }

  public void paintBackground(Graphics graphics, EditorComponent component) {
    paintStripeBackground(graphics, component);
    paintCellBackground(graphics, component);
  }

  private void paintCellBackground(Graphics graphics, EditorComponent editorComponent) {
    if (isInCellMode(editorComponent)) {
      Color cellBackgroundColor = getCellBackgroundColor();
      if (cellBackgroundColor == null) {
        return;
      }

      graphics.setColor(cellBackgroundColor);
      Rectangle cellCoverage = getCellCoverage(editorComponent);
      if (cellCoverage == null) {
        return;
      }

      graphics.fillRect(cellCoverage.x, cellCoverage.y, cellCoverage.width, cellCoverage.height);
    }
  }

  private void paintStripeBackground(Graphics graphics, EditorComponent editorComponent) {
    if (isInCellMode(editorComponent)) {
      return;
    }

    Color stripeBackgroundColor = getStripeBackgroundColor();
    if (stripeBackgroundColor == null) {
      return;
    }

    graphics.setColor(stripeBackgroundColor);
    Rectangle stripeCoverage = getStripeCoverage(editorComponent);
    if (stripeCoverage == null) {
      return;
    }

    graphics.fillRect(stripeCoverage.x, stripeCoverage.y, stripeCoverage.width, stripeCoverage.height);
  }

  @Nullable
  private EditorCell getNodeCell(EditorComponent editorComponent) {
    SNode node = getSNode();
    if (node != null) {
      return editorComponent.getBigValidCellForNode(node);
    }
    return null;
  }

  @Nullable
  private EditorCell_Label getStripeCell(EditorComponent editorComponent) {
    EditorCell nodeCell = getNodeCell(editorComponent);
    if (nodeCell == null) {
      return null;
    }
    if (nodeCell instanceof EditorCell_Label) {
      return ((EditorCell_Label) nodeCell);
    }
    return (EditorCell_Label) nodeCell.findChild(CellFinders.byClass(EditorCell_Label.class, true));
  }

  @Nullable
  protected Rectangle calculateCoverageArea(EditorComponent editorComponent) {
    if (isInCellMode(editorComponent)) {
      return getCellCoverage(editorComponent);
    }
    return getStripeCoverage(editorComponent);
  }

  @Nullable
  private Rectangle getCellCoverage(EditorComponent editorComponent) {
    EditorCell nodeCell = getNodeCell(editorComponent);
    if (nodeCell == null) {
      return null;
    }
    return nodeCell.getBounds();
  }

  @Nullable
  private Rectangle getStripeCoverage(EditorComponent editorComponent) {
    EditorCell_Label stripeCell = getStripeCell(editorComponent);
    if (stripeCell == null) {
      return null;
    }
    return new Rectangle(LEFT_MARGIN, stripeCell.getY(), editorComponent.getWidth() - LEFT_MARGIN, stripeCell.getHeight() - stripeCell.getTopInset() - stripeCell.getBottomInset());
  }

  private boolean isInCellMode(EditorComponent editorComponent) {
    EditorCell nodeCell = getNodeCell(editorComponent);
    if (nodeCell == null) {
      // whatever 
      return false;
    }
    // todo what if a table cell contains a list of statements? huh? 
    return nodeCell.getParent().getCellLayout() instanceof CellLayout_Horizontal;
  }
}
