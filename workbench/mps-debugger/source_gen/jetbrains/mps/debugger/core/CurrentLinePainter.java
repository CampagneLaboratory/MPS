package jetbrains.mps.debugger.core;

/*Generated by MPS */

import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.model.SNodeReference;
import java.awt.Color;
import org.jetbrains.annotations.NotNull;
import java.awt.Rectangle;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.nodeEditor.AdditionalPainter;
import java.awt.Graphics;

public class CurrentLinePainter extends DebuggerCellPainter<SNodeReference> {
  private static final Color STRIPE_COLOR = new Color(0, 0, 255);
  @NotNull
  private final SNodeReference myNodePointer;
  private boolean myInvisible = false;
  private Rectangle myCachedCoverageArea = null;

  public CurrentLinePainter(SNodeReference pointer) {
    myNodePointer = pointer;
  }

  public CurrentLinePainter(SNode node) {
    myNodePointer = new jetbrains.mps.smodel.SNodePointer(node);
  }

  @Override
  @NotNull
  public SNodeReference getItem() {
    return myNodePointer;
  }

  @Override
  protected Color getCellBackgroundColor() {
    return STRIPE_COLOR;
  }

  @Override
  protected Color getStripeBackgroundColor() {
    return STRIPE_COLOR;
  }

  @Override
  protected Color getFrameColor() {
    return Color.black;
  }

  @Override
  protected SNode getSNode() {
    return getItem().resolve(MPSModuleRepository.getInstance());
  }

  @Override
  public Rectangle getCoverageArea(EditorComponent editorComponent) {
    if (myInvisible) {
      return null;
    }
    if (myCachedCoverageArea != null) {
      return myCachedCoverageArea;
    }
    myCachedCoverageArea = calculateCoverageArea(editorComponent);
    return myCachedCoverageArea;
  }

  @Override
  public Color getCellsFontColor(EditorCell_Label cell) {
    if (myInvisible) {
      return null;
    }
    return Color.WHITE;
  }

  @Override
  public boolean isAbove(AdditionalPainter additionalPainter, EditorComponent editorComponent) {
    if (additionalPainter instanceof CurrentLinePainter) {
      return additionalPainter.hashCode() < this.hashCode();
    }
    if (!(additionalPainter.isAbove(this, editorComponent))) {
      return true;
    }
    return false;
  }

  @Override
  public void paint(Graphics g, EditorComponent editorComponent) {
    if (myInvisible) {
      return;
    }
    super.paint(g, editorComponent);
  }

  public void setVisible(boolean visible) {
    myInvisible = !(visible);
    myCachedCoverageArea = null;
  }

  @Override
  public boolean paintsBackground() {
    return !(myInvisible);
  }

  @Override
  public void beforeRemoval(EditorComponent editorComponent) {
    super.beforeRemoval(editorComponent);
    myCachedCoverageArea = null;
  }
}
