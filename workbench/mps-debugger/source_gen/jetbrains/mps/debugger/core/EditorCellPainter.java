package jetbrains.mps.debugger.core;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.AbstractAdditionalPainter;
import org.jetbrains.annotations.Nullable;
import java.awt.Color;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.CellFinders;
import java.awt.Graphics;
import java.awt.Rectangle;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;

public abstract class EditorCellPainter<E> extends AbstractAdditionalPainter<E> {
  private static final int LEFT_MARGIN = 4;

  public EditorCellPainter() {
  }

  @Nullable
  protected abstract Color getCellBackgroundColor();

  @Nullable
  protected abstract Color getStripeBackgroundColor();

  @Nullable
  protected abstract Color getFrameColor();

  @Nullable
  protected abstract SNode getSNode();

  @Nullable
  protected EditorCell_Label findCellLabel(@NotNull EditorComponent editorComponent) {
    SNode node = getSNode();
    EditorCell_Label innerCell = null;
    if (node != null) {
      EditorCell bigCell = editorComponent.getBigValidCellForNode(node);
      if (bigCell == null) {
        return null;
      }
      if (bigCell instanceof EditorCell_Label) {
        innerCell = (EditorCell_Label) bigCell;
      } else
      if (bigCell instanceof EditorCell_Collection) {
        EditorCell_Collection collection = (EditorCell_Collection) bigCell;
        innerCell = collection.findChild(CellFinders.byClass(EditorCell_Label.class, true));
      }
    }
    return innerCell;
  }

  @Override
  public boolean paintsAbove() {
    return true;
  }

  @Override
  public boolean paintsBackground() {
    return true;
  }

  @Override
  public void paintBackground(Graphics g, EditorComponent editorComponent) {
    EditorCell_Label innerCell = findCellLabel(editorComponent);
    if (innerCell != null) {
      paintStripe(g, editorComponent, innerCell);
      paintCellBackground(g, editorComponent);
    }
  }

  @Override
  public void paint(Graphics g, EditorComponent editorComponent) {
    EditorCell_Label innerCell = findCellLabel(editorComponent);
    if (innerCell != null) {
      paintCellFrame(g, editorComponent);
    }
  }

  private void paintCellBackground(@NotNull Graphics g, @NotNull EditorComponent editorComponent) {
    EditorCell bigCell = editorComponent.getBigValidCellForNode(getSNode());
    Color cellBackgroundColor = getCellBackgroundColor();
    if (bigCell != null && cellBackgroundColor == null && isCellMode(editorComponent)) {
      cellBackgroundColor = getStripeBackgroundColor();
    }
    if (bigCell != null && cellBackgroundColor != null) {
      g.setColor(cellBackgroundColor);
      g.fillRect(bigCell.getX(), bigCell.getY(), bigCell.getWidth(), bigCell.getHeight());
    }
  }

  private void paintCellFrame(@NotNull Graphics g, @NotNull EditorComponent editorComponent) {
    EditorCell bigCell = editorComponent.getBigValidCellForNode(getSNode());
    if (bigCell != null && getFrameColor() != null) {
      g.setColor(getFrameColor());
      g.drawRect(bigCell.getX(), bigCell.getY(), bigCell.getWidth() - 1, bigCell.getHeight() - 1);
    }
  }

  @NotNull
  protected Rectangle getStripeBounds(@NotNull EditorComponent editorComponent, @NotNull EditorCell_Label innerCell) {
    return new Rectangle(LEFT_MARGIN, innerCell.getY(), editorComponent.getWidth() - LEFT_MARGIN, innerCell.getHeight() - innerCell.getTopInset() - innerCell.getBottomInset());
  }

  private void paintStripe(@NotNull Graphics g, @NotNull EditorComponent editorComponent, @NotNull EditorCell_Label innerCell) {
    if (isCellMode(editorComponent)) {
      return;
    }
    g.setColor(getStripeBackgroundColor());
    Rectangle bounds = getStripeBounds(editorComponent, innerCell);
    g.fillRect(bounds.x, bounds.y, bounds.width, bounds.height);
  }

  protected boolean isCellMode(EditorComponent editorComponent) {
    return isInsideHorisontalCollection(editorComponent.getBigValidCellForNode(getSNode()));
  }

  private boolean isInsideHorisontalCollection(EditorCell cell) {
    return cell.getParent().getCellLayout() instanceof CellLayout_Horizontal;
  }
}
