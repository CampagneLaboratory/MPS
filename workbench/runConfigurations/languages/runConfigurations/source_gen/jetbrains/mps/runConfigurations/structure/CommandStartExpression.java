package jetbrains.mps.runConfigurations.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CommandStartExpression extends Expression {
  public static final String concept = "jetbrains.mps.runConfigurations.structure.CommandStartExpression";
  public static final String COMMAND_DECLARATION = "commandDeclaration";
  public static final String ARGUMENT = "argument";

  public CommandStartExpression(SNode node) {
    super(node);
  }

  public CommandDeclaration getCommandDeclaration() {
    return (CommandDeclaration) this.getReferent(CommandDeclaration.class, CommandStartExpression.COMMAND_DECLARATION);
  }

  public void setCommandDeclaration(CommandDeclaration node) {
    super.setReferent(CommandStartExpression.COMMAND_DECLARATION, node);
  }

  public int getArgumentsCount() {
    return this.getChildCount(CommandStartExpression.ARGUMENT);
  }

  public Iterator<Expression> arguments() {
    return this.children(Expression.class, CommandStartExpression.ARGUMENT);
  }

  public List<Expression> getArguments() {
    return this.getChildren(Expression.class, CommandStartExpression.ARGUMENT);
  }

  public void addArgument(Expression node) {
    this.addChild(CommandStartExpression.ARGUMENT, node);
  }

  public void insertArgument(Expression prev, Expression node) {
    this.insertChild(prev, CommandStartExpression.ARGUMENT, node);
  }

  public static CommandStartExpression newInstance(SModel sm, boolean init) {
    return (CommandStartExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.runConfigurations.structure.CommandStartExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CommandStartExpression newInstance(SModel sm) {
    return CommandStartExpression.newInstance(sm, false);
  }
}
