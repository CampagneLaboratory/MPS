package jetbrains.mps.runConfigurations.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class SmartPropertyIsSubtypeOfType_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public SmartPropertyIsSubtypeOfType_SubtypingRule() {
  }

  public SNode getSubOrSuperType(SNode smartPropertyType, TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(smartPropertyType, "propertyTemplate", false), "externalType", true);
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.runConfigurations.structure.SmartPersistentPropertyType";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean isWeak() {
    return false;
  }
}
