package jetbrains.mps.runConfigurations.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ProcessStatement extends Statement implements IMacroStatement {
  public static final String concept = "jetbrains.mps.runConfigurations.structure.ProcessStatement";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String PART = "part";

  public ProcessStatement(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(ProcessStatement.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(ProcessStatement.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(ProcessStatement.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(ProcessStatement.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(ProcessStatement.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(ProcessStatement.VIRTUAL_PACKAGE, value);
  }

  public int getPartsCount() {
    return this.getChildCount(ProcessStatement.PART);
  }

  public Iterator<ProcessStatementPart> parts() {
    return this.children(ProcessStatementPart.class, ProcessStatement.PART);
  }

  public List<ProcessStatementPart> getParts() {
    return this.getChildren(ProcessStatementPart.class, ProcessStatement.PART);
  }

  public void addPart(ProcessStatementPart node) {
    this.addChild(ProcessStatement.PART, node);
  }

  public void insertPart(ProcessStatementPart prev, ProcessStatementPart node) {
    this.insertChild(prev, ProcessStatement.PART, node);
  }

  public static ProcessStatement newInstance(SModel sm, boolean init) {
    return (ProcessStatement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.runConfigurations.structure.ProcessStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ProcessStatement newInstance(SModel sm) {
    return ProcessStatement.newInstance(sm, false);
  }
}
