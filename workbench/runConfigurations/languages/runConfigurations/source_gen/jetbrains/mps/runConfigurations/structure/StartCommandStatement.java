package jetbrains.mps.runConfigurations.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class StartCommandStatement extends BaseConcept {
  public static final String concept = "jetbrains.mps.runConfigurations.structure.StartCommandStatement";
  public static final String COMMAND = "command";
  public static final String ARGUMENTS = "arguments";

  public StartCommandStatement(SNode node) {
    super(node);
  }

  public CommandDeclaration getCommand() {
    return (CommandDeclaration) this.getReferent(CommandDeclaration.class, StartCommandStatement.COMMAND);
  }

  public void setCommand(CommandDeclaration node) {
    super.setReferent(StartCommandStatement.COMMAND, node);
  }

  public Expression getArguments() {
    return (Expression) this.getChild(Expression.class, StartCommandStatement.ARGUMENTS);
  }

  public void setArguments(Expression node) {
    super.setChild(StartCommandStatement.ARGUMENTS, node);
  }

  public static StartCommandStatement newInstance(SModel sm, boolean init) {
    return (StartCommandStatement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.runConfigurations.structure.StartCommandStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static StartCommandStatement newInstance(SModel sm) {
    return StartCommandStatement.newInstance(sm, false);
  }
}
