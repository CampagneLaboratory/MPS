package jetbrains.mps.runConfigurations.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ProcessBuilderExpression extends Expression {
  public static final String concept = "jetbrains.mps.runConfigurations.structure.ProcessBuilderExpression";
  public static final String PART = "part";

  public ProcessBuilderExpression(SNode node) {
    super(node);
  }

  public int getPartsCount() {
    return this.getChildCount(ProcessBuilderExpression.PART);
  }

  public Iterator<ProcessBuilderPart> parts() {
    return this.children(ProcessBuilderPart.class, ProcessBuilderExpression.PART);
  }

  public List<ProcessBuilderPart> getParts() {
    return this.getChildren(ProcessBuilderPart.class, ProcessBuilderExpression.PART);
  }

  public void addPart(ProcessBuilderPart node) {
    this.addChild(ProcessBuilderExpression.PART, node);
  }

  public void insertPart(ProcessBuilderPart prev, ProcessBuilderPart node) {
    this.insertChild(prev, ProcessBuilderExpression.PART, node);
  }

  public static ProcessBuilderExpression newInstance(SModel sm, boolean init) {
    return (ProcessBuilderExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.runConfigurations.structure.ProcessBuilderExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ProcessBuilderExpression newInstance(SModel sm) {
    return ProcessBuilderExpression.newInstance(sm, false);
  }
}
