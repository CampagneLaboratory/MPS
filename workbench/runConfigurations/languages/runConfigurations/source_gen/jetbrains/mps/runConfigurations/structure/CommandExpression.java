package jetbrains.mps.runConfigurations.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CommandExpression extends Expression implements IMacroExpression {
  public static final String concept = "jetbrains.mps.runConfigurations.structure.CommandExpression";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String PART = "part";

  public CommandExpression(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(CommandExpression.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(CommandExpression.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(CommandExpression.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(CommandExpression.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(CommandExpression.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(CommandExpression.VIRTUAL_PACKAGE, value);
  }

  public int getPartsCount() {
    return this.getChildCount(CommandExpression.PART);
  }

  public Iterator<CommandPart> parts() {
    return this.children(CommandPart.class, CommandExpression.PART);
  }

  public List<CommandPart> getParts() {
    return this.getChildren(CommandPart.class, CommandExpression.PART);
  }

  public void addPart(CommandPart node) {
    this.addChild(CommandExpression.PART, node);
  }

  public void insertPart(CommandPart prev, CommandPart node) {
    this.insertChild(prev, CommandExpression.PART, node);
  }

  public static CommandExpression newInstance(SModel sm, boolean init) {
    return (CommandExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.runConfigurations.structure.CommandExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CommandExpression newInstance(SModel sm) {
    return CommandExpression.newInstance(sm, false);
  }
}
