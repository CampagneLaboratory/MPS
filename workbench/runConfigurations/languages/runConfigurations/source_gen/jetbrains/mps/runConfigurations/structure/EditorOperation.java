package jetbrains.mps.runConfigurations.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.baseLanguage.structure.IOperation;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class EditorOperation extends BaseConcept implements IOperation {
  public static final String concept = "jetbrains.mps.runConfigurations.structure.EditorOperation";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String EDITOR_OPERATION_DECLARATION = "editorOperationDeclaration";
  public static final String ARGUMENTS = "arguments";

  public EditorOperation(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(EditorOperation.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(EditorOperation.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(EditorOperation.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(EditorOperation.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(EditorOperation.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(EditorOperation.VIRTUAL_PACKAGE, value);
  }

  public EditorOperationDeclaration getEditorOperationDeclaration() {
    return (EditorOperationDeclaration) this.getReferent(EditorOperationDeclaration.class, EditorOperation.EDITOR_OPERATION_DECLARATION);
  }

  public void setEditorOperationDeclaration(EditorOperationDeclaration node) {
    super.setReferent(EditorOperation.EDITOR_OPERATION_DECLARATION, node);
  }

  public int getArgumentsesCount() {
    return this.getChildCount(EditorOperation.ARGUMENTS);
  }

  public Iterator<Expression> argumentses() {
    return this.children(Expression.class, EditorOperation.ARGUMENTS);
  }

  public List<Expression> getArgumentses() {
    return this.getChildren(Expression.class, EditorOperation.ARGUMENTS);
  }

  public void addArguments(Expression node) {
    this.addChild(EditorOperation.ARGUMENTS, node);
  }

  public void insertArguments(Expression prev, Expression node) {
    this.insertChild(prev, EditorOperation.ARGUMENTS, node);
  }

  public static EditorOperation newInstance(SModel sm, boolean init) {
    return (EditorOperation) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.runConfigurations.structure.EditorOperation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static EditorOperation newInstance(SModel sm) {
    return EditorOperation.newInstance(sm, false);
  }
}
