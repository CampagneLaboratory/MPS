package jetbrains.mps.runConfigurations.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.editorTabs.EditorTabDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class Executor_TabDescriptor extends EditorTabDescriptor {
  public Executor_TabDescriptor() {
  }

  public String getTitle() {
    return "Executor";
  }

  public void startListening() {
    throw new RuntimeException("NOT IMPLEMENTED");
  }

  public SNode getBaseNode(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.runConfigurations.structure.RunConfigurationExecutor")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.runConfigurations.structure.RunConfigurationExecutor"), "runConfiguration", false);
    }
    return node;
  }

  public boolean isApplicable(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.runConfigurations.structure.RunConfiguration");
  }

  public List<SNode> getNodes(SNode node) {
    List<SNode> list = ListSequence.fromList(new ArrayList<SNode>());
    SNode n = getNode(node);
    if (n == null) {
      return list;
    }
    ListSequence.fromList(list).addElement(n);
    return list;
  }

  public SNode getNode(SNode node) {
    final SNode nodeFinal = node;
    return ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(node), "jetbrains.mps.runConfigurations.structure.RunConfigurationExecutor")).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "runConfiguration", false) == nodeFinal;
      }
    });
  }

  public SNode createNode(final SNode node, final SNode concept) {
    SNode executor = SConceptOperations.createNewNode("jetbrains.mps.runConfigurations.structure.RunConfigurationExecutor", null);
    SLinkOperations.setTarget(executor, "runConfiguration", node, false);
    SModelOperations.addRootNode(SNodeOperations.getModel(node), executor);
    return executor;
  }
}
