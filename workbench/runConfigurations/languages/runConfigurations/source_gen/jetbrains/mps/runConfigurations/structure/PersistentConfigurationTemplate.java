package jetbrains.mps.runConfigurations.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class PersistentConfigurationTemplate extends PersistentConfiguration {
  public static final String concept = "jetbrains.mps.runConfigurations.structure.PersistentConfigurationTemplate";
  public static final String EXTERNAL_TYPE = "externalType";
  public static final String GET_PROPERTY = "getProperty";
  public static final String SET_PROPERTY = "setProperty";

  public PersistentConfigurationTemplate(SNode node) {
    super(node);
  }

  public Type getExternalType() {
    return (Type) this.getChild(Type.class, PersistentConfigurationTemplate.EXTERNAL_TYPE);
  }

  public void setExternalType(Type node) {
    super.setChild(PersistentConfigurationTemplate.EXTERNAL_TYPE, node);
  }

  public GetSmartPropertyValue_Function getGetProperty() {
    return (GetSmartPropertyValue_Function) this.getChild(GetSmartPropertyValue_Function.class, PersistentConfigurationTemplate.GET_PROPERTY);
  }

  public void setGetProperty(GetSmartPropertyValue_Function node) {
    super.setChild(PersistentConfigurationTemplate.GET_PROPERTY, node);
  }

  public SetSmartPropertyValue_Function getSetProperty() {
    return (SetSmartPropertyValue_Function) this.getChild(SetSmartPropertyValue_Function.class, PersistentConfigurationTemplate.SET_PROPERTY);
  }

  public void setSetProperty(SetSmartPropertyValue_Function node) {
    super.setChild(PersistentConfigurationTemplate.SET_PROPERTY, node);
  }

  public static PersistentConfigurationTemplate newInstance(SModel sm, boolean init) {
    return (PersistentConfigurationTemplate) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.runConfigurations.structure.PersistentConfigurationTemplate", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static PersistentConfigurationTemplate newInstance(SModel sm) {
    return PersistentConfigurationTemplate.newInstance(sm, false);
  }
}
