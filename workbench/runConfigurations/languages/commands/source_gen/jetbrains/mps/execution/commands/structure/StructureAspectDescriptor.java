package jetbrains.mps.execution.commands.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.ConceptRegistry;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    int hash = conceptFqName.hashCode();
    if (hash == 765900688) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.CommandType", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierType");
    }
    if (hash == 2082581805) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.CommandReferenceExpression", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    if (hash == -102526088) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.CommandParameterReference", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    if (hash == -1755614617) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.CommandParameterDeclaration", "jetbrains.mps.baseLanguage.structure.VariableDeclaration");
    }
    if (hash == 757971008) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.CommandParameterAssignment", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == 1372404663) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.CommandMethod", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration");
    }
    if (hash == 1884250212) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.CommandDeclaration", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.execution.common.structure.IGeneratedToClass");
    }
    if (hash == 1115859376) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.CommandDebuggerOperation", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation");
    }
    if (hash == 1539140605) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.CommandBuilderExpression", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    if (hash == 1283902600) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.BuilderBlockStatement", "jetbrains.mps.lang.core.structure.NodeAttribute");
    }
    if (hash == -61891901) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.BuilderParameter", "jetbrains.mps.lang.core.structure.NodeAttribute");
    }
    if (hash == 176886297) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.ReportExecutionError", "jetbrains.mps.execution.commands.structure.ReportErrorStatement");
    }
    if (hash == 1989889168) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.ReportErrorStatement", "jetbrains.mps.baseLanguage.structure.Statement");
    }
    if (hash == -79711690) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.AbstractProcessBuilderPart", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -1126180519) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.ProcessBuilderExpression", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    if (hash == -359839791) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.ProcessBuilderKeyPart", "jetbrains.mps.execution.commands.structure.AbstractProcessBuilderPart");
    }
    if (hash == 1602293620) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.ProcessBuilderPart", "jetbrains.mps.execution.commands.structure.AbstractProcessBuilderPart");
    }
    if (hash == -1865300812) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.ProcessType", "jetbrains.mps.baseLanguage.structure.Type");
    }
    if (hash == 214110698) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.execution.commands.structure.RedirectOutputExpression", "jetbrains.mps.baseLanguage.structure.Expression");
    }
    return null;
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private ImmutableSet<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String... parents) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, parents);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static ImmutableSet<String> getAncestors(String conceptFqName, String... parents) {
      List<String> result = new ArrayList();

      result.add(conceptFqName);
      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : parents) {
        result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
      }
      return ImmutableSet.copyOf(result);
    }
  }
}
