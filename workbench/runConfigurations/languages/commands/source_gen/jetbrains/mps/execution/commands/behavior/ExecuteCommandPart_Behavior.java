package jetbrains.mps.execution.commands.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class ExecuteCommandPart_Behavior {
  public static void init(SNode thisNode) {
  }

  public static List<SNode> call_getParameters_6129022259108621180(SNode thisNode) {
    if (CommandDeclaration_Behavior.call_isDebuggable_856705193941282102(ExecuteCommandPart_Behavior.call_getCommandDeclaration_6129022259108621200(thisNode))) {
      return ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameterDeclaration", true)).union(Sequence.fromIterable(Sequence.<SNode>singleton(SLinkOperations.getTarget(ExecuteCommandPart_Behavior.call_getCommandDeclaration_6129022259108621200(thisNode), "debuggerParameter", true)))).toListSequence();
    }
    return SLinkOperations.getTargets(thisNode, "parameterDeclaration", true);
  }

  public static List<SNode> call_getRequiredParameters_6129022259108621289(SNode thisNode) {
    return ListSequence.fromList(ExecuteCommandPart_Behavior.call_getParameters_6129022259108621180(thisNode)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.execution.commands.structure.ExplicitCommandParameterDeclaration") && ExplicitCommandParameterDeclaration_Behavior.call_isRequired_856705193941282030(SNodeOperations.cast(it, "jetbrains.mps.execution.commands.structure.ExplicitCommandParameterDeclaration"));
      }
    }).toListSequence();
  }

  public static SNode call_getCommandDeclaration_6129022259108621200(SNode thisNode) {
    return SNodeOperations.getAncestor(thisNode, "jetbrains.mps.execution.commands.structure.CommandDeclaration", false, false);
  }
}
