package jetbrains.mps.execution.settings.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ConstraintsDataHolder;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.structure.CanBeASomethingMethod;
import jetbrains.mps.smodel.constraints.CanBeAnAncestorContext;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.structure.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class SettingsEditor_Constraints extends ConstraintsDataHolder {
  public SettingsEditor_Constraints() {
  }

  public String getConceptFqName() {
    return "jetbrains.mps.execution.settings.structure.SettingsEditor";
  }

  @Nullable
  @Override
  public CanBeASomethingMethod<CanBeAnAncestorContext> getCanBeAnAncestorMethod() {
    return new CanBeASomethingMethod<CanBeAnAncestorContext>() {
      private SNodePointer breakingNode = new SNodePointer("r:26cd452e-c5c2-4d47-ad13-dda4362e8616(jetbrains.mps.execution.settings.constraints)", "946964771156067202");

      public boolean canBe(IOperationContext operationContext, CanBeAnAncestorContext _context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = canBeAnAncestor(operationContext, _context);
        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.breakingNodePointer = breakingNode;
        }
        return result;
      }
    };
  }

  public static boolean canBeAnAncestor(final IOperationContext operationContext, final CanBeAnAncestorContext _context) {
    return _context.getChildConcept() != SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpression");
  }
}
