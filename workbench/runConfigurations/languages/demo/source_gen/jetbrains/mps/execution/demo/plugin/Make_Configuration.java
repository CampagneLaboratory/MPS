package jetbrains.mps.execution.demo.plugin;

/*Generated by MPS */

import jetbrains.mps.execution.settings.runtime.IPersistentConfiguration;
import jetbrains.mps.execution.settings.runtime.ITemplatePersistentConfiguration;
import jetbrains.mps.logging.Logger;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.execution.settings.runtime.SettingsEditorEx;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;

public class Make_Configuration implements IPersistentConfiguration, ITemplatePersistentConfiguration {
  private static final Logger LOG = Logger.getLogger(Make_Configuration.class);

  @NotNull
  private Make_Configuration.MyState myState = new Make_Configuration.MyState();
  private SettingsEditorEx<Make_Configuration> myEditorEx;

  public Make_Configuration() {
  }

  public void checkConfiguration() throws RuntimeConfigurationException {
  }

  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    element.addContent(XmlSerializer.serialize(myState));
  }

  @Override
  public void readExternal(Element element) throws InvalidDataException {
    XmlSerializer.deserializeInto(myState, (Element) element.getChildren().get(0));
  }

  public boolean getMake() {
    return myState.myMake;
  }

  public void setMake(boolean value) {
    myState.myMake = value;
  }

  @Override
  public Make_Configuration clone() {
    Make_Configuration clone = null;
    try {
      clone = createCloneTemplate();
      clone.myState = (Make_Configuration.MyState) myState.clone();
      return clone;
    } catch (CloneNotSupportedException ex) {
      Make_Configuration.LOG.error(ex);
    }
    return clone;
  }

  public Make_Configuration createCloneTemplate() {
    return new Make_Configuration();
  }

  public Make_Configuration_Editor getEditor() {
    return new Make_Configuration_Editor();
  }

  public SettingsEditorEx<Make_Configuration> getEditorEx() {
    if (myEditorEx == null) {
      myEditorEx = getEditor();
    }
    return myEditorEx;
  }

  public class MyState {
    public boolean myMake = true;

    public MyState() {
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
      Make_Configuration.MyState state = new Make_Configuration.MyState();
      state.myMake = myMake;
      return state;
    }
  }
}
