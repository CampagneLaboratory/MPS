package jetbrains.mps.runConfigurations.demo.plugin;

/*Generated by MPS */

import com.intellij.openapi.options.SettingsEditor;
import jetbrains.mps.baseLanguage.runConfigurations.runtime.MainNodeChooser;
import jetbrains.mps.smodel.SNode;
import javax.swing.JLabel;
import org.jetbrains.annotations.NotNull;
import javax.swing.JComponent;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.runConfigurations.runtime.IJavaNodeChangeListener;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import com.intellij.openapi.options.ConfigurationException;

public class DemoApplication_Configuration_Editor_Swing extends SettingsEditor<DemoApplication_Configuration> {
  private MainNodeChooser<SNode> myChooser;
  private JLabel myLabel;

  public DemoApplication_Configuration_Editor_Swing() {
  }

  protected void disposeEditor() {
  }

  @NotNull
  protected JComponent createEditor() {
    myLabel = new JLabel();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        myChooser = new MainNodeChooser<SNode>(SConceptOperations.findConceptDeclaration("jetbrains.mps.runConfigurations.demo.structure.SomeConcept"), new _FunctionTypes._return_P1_E0<Boolean, SNode>() {
          public Boolean invoke(SNode node) {
            return SPropertyOperations.getBoolean(node, "valid");
          }
        });
      }
    });
    myChooser.addNodeChangeListener(new IJavaNodeChangeListener() {
      public void nodeChanged(final SNode node) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            myLabel.setText(SPropertyOperations.getString(node, "name"));
          }
        });
      }
    });
    JPanel panel = new JPanel(new BorderLayout());
    panel.add(myLabel, BorderLayout.NORTH);
    panel.add(myChooser, BorderLayout.CENTER);
    return panel;
  }

  protected void applyEditorTo(DemoApplication_Configuration configuration) throws ConfigurationException {
    configuration.myState.myNode = myChooser.getNode();
  }

  protected void resetEditorFrom(DemoApplication_Configuration configuration) {
    myChooser.setNode(configuration.myState.myNode);
  }
}
