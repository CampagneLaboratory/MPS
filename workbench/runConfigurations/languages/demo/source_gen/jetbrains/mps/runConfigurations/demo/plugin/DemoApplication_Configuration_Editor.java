package jetbrains.mps.runConfigurations.demo.plugin;

/*Generated by MPS */

import com.intellij.openapi.options.SettingsEditor;
import javax.swing.JLabel;
import jetbrains.mps.runConfigurations.utils.Node_Configuration_Editor;
import com.intellij.openapi.util.Disposer;
import org.jetbrains.annotations.NotNull;
import javax.swing.JPanel;
import jetbrains.mps.baseLanguage.runConfigurations.runtime.MainNodeChooser;
import java.awt.BorderLayout;
import com.intellij.openapi.options.ConfigurationException;

public class DemoApplication_Configuration_Editor extends SettingsEditor<DemoApplication_Configuration> {
  private JLabel myLabel;
  private Node_Configuration_Editor myNode;
  private Make_Configuration_Editor myMake;

  public DemoApplication_Configuration_Editor(Node_Configuration_Editor node, Make_Configuration_Editor make) {
    myNode = node;
    myMake = make;
  }

  public void disposeEditor() {
    Disposer.dispose(myNode);
    Disposer.dispose(myMake);
  }

  @NotNull
  public JPanel createEditor() {
    myLabel = new JLabel("Select some node:");
    MainNodeChooser nodeChooser = myNode.createEditor();
    JPanel panel = new JPanel(new BorderLayout());
    panel.add(myLabel, BorderLayout.NORTH);
    panel.add(nodeChooser, BorderLayout.CENTER);
    panel.add(myMake.createEditor(), BorderLayout.SOUTH);
    return panel;
  }

  public void applyEditorTo(final DemoApplication_Configuration configuration) throws ConfigurationException {
    myNode.applyEditorTo(configuration.getNode());
    myMake.applyEditorTo(configuration.getMake());
  }

  public void resetEditorFrom(final DemoApplication_Configuration configuration) {
    myNode.resetEditorFrom(configuration.getNode());
    myMake.resetEditorFrom(configuration.getMake());
  }
}
