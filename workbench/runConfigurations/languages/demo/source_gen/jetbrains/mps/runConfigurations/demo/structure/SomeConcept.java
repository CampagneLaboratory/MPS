package jetbrains.mps.runConfigurations.demo.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class SomeConcept extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.runConfigurations.demo.structure.SomeConcept";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String VALID = "valid";

  public SomeConcept(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(SomeConcept.NAME);
  }

  public void setName(String value) {
    this.setProperty(SomeConcept.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(SomeConcept.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(SomeConcept.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(SomeConcept.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(SomeConcept.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(SomeConcept.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(SomeConcept.VIRTUAL_PACKAGE, value);
  }

  public boolean getValid() {
    return this.getBooleanProperty(SomeConcept.VALID);
  }

  public void setValid(boolean value) {
    this.setBooleanProperty(SomeConcept.VALID, value);
  }

  public static SomeConcept newInstance(SModel sm, boolean init) {
    return (SomeConcept) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.runConfigurations.demo.structure.SomeConcept", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static SomeConcept newInstance(SModel sm) {
    return SomeConcept.newInstance(sm, false);
  }
}
