package jetbrains.mps.runConfigurations.demo.plugin;

/*Generated by MPS */

import java.io.File;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.execution.process.ProcessHandler;
import com.intellij.execution.ExecutionException;
import jetbrains.mps.runConfigurations.runtime.ProcessHandlerBuilder;
import jetbrains.mps.debug.api.IDebugger;
import jetbrains.mps.debug.api.Debuggers;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import org.apache.commons.lang.StringUtils;

public class Java_Command {
  private File myWorkingDirectory = new File(System.getProperty("user.home"));
  private String myJrePath = getJdkHome();
  private String myProgramParameter;
  private String myVirtualMachineParameter;
  private String myClassName;
  private List<String> myClassPath = ListSequence.fromList(new ArrayList<String>());

  public Java_Command() {
  }

  public Java_Command setWorkingDirectory(File workingDirectory) {
    myWorkingDirectory = workingDirectory;
    return this;
  }

  public Java_Command setJrePath(String jrePath) {
    myJrePath = jrePath;
    return this;
  }

  public Java_Command setProgramParameter(String programParameter) {
    myProgramParameter = programParameter;
    return this;
  }

  public Java_Command setVirtualMachineParameter(String virtualMachineParameter) {
    myVirtualMachineParameter = virtualMachineParameter;
    return this;
  }

  public Java_Command setClassName(String className) {
    myClassName = className;
    return this;
  }

  public Java_Command setClassPath(List<String> classPath) {
    myClassPath = classPath;
    return this;
  }

  public ProcessHandler createProcess() throws ExecutionException {
    String java = getJavaCommand(myJrePath);
    return new ProcessHandlerBuilder().append(java).append(myVirtualMachineParameter).append("-classpath").append(myClassPath).append(myClassName).append(myProgramParameter).build();
  }

  public static IDebugger getDebugger() {
    return Debuggers.getInstance().getDebuggerByName("Java");
  }

  private static String getJavaCommand(String javaHome) {
    String result = javaHome + fs() + "bin" + fs();
    String osName = System.getProperty("os.name");
    if (osName.startsWith("Mac OS")) {
      return result + "java";
    } else
    if (osName.startsWith("Windows")) {
      return result + "java.exe";
    } else {
      return result + "java";
    }

  }

  private static String fs() {
    return System.getProperty("file.separator");
  }

  private static List<String> getJavaHomes() {
    String systemJavaHome = System.getProperty("java.home");
    List<String> homes = ListSequence.fromList(new LinkedList<String>());
    String systemJdkHome = systemJavaHome.substring(0, systemJavaHome.length() - "/jre".length());
    if (systemJavaHome.endsWith("jre") && new File(systemJdkHome + File.separator + "bin").exists()) {
      ListSequence.fromList(homes).addElement(systemJdkHome);
    }
    if (StringUtils.isNotEmpty(System.getenv("JAVA_HOME"))) {
      ListSequence.fromList(homes).addElement(System.getenv("JAVA_HOME"));
    }
    ListSequence.fromList(homes).addElement(systemJavaHome);
    return homes;
  }

  private static String getJdkHome() {
    List<String> homes = getJavaHomes();
    for (String javaHome : ListSequence.fromList(homes)) {
      if (new File(getJavaCommand(javaHome)).exists()) {
        return javaHome;
      }
    }
    return ListSequence.fromList(homes).first();
  }
}
