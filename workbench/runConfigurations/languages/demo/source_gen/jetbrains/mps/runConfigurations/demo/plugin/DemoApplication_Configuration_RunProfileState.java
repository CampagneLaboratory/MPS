package jetbrains.mps.runConfigurations.demo.plugin;

/*Generated by MPS */

import jetbrains.mps.debug.api.run.DebuggerRunProfileState;
import jetbrains.mps.runConfigurations.runtime.BaseMpsRunProfileState;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.runners.ExecutionEnvironment;
import com.intellij.execution.Executor;
import com.intellij.execution.configurations.ConfigurationPerRunnerSettings;
import com.intellij.execution.configurations.RunnerSettings;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.ExecutionResult;
import com.intellij.execution.runners.ProgramRunner;
import com.intellij.execution.ExecutionException;
import com.intellij.openapi.project.Project;
import com.intellij.execution.impl.ConsoleViewImpl;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.NameUtil;
import com.intellij.execution.process.ProcessHandler;
import com.intellij.execution.executors.DefaultDebugExecutor;
import jetbrains.mps.runConfigurations.runtime.ConsoleProcessListener;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.debug.api.IDebugger;
import com.intellij.execution.ui.ExecutionConsole;
import com.intellij.openapi.actionSystem.AnAction;
import javax.swing.JComponent;

public class DemoApplication_Configuration_RunProfileState extends DebuggerRunProfileState implements BaseMpsRunProfileState {
  @NotNull
  private final DemoApplication_Configuration myRunConfiguration;
  @NotNull
  private final ExecutionEnvironment myEnvironment;

  public DemoApplication_Configuration_RunProfileState(@NotNull DemoApplication_Configuration configuration, @NotNull Executor executor, @NotNull ExecutionEnvironment environment) {
    myRunConfiguration = configuration;
    myEnvironment = environment;
  }

  public ConfigurationPerRunnerSettings getConfigurationSettings() {
    return null;
  }

  public RunnerSettings getRunnerSettings() {
    return null;
  }

  @Nullable
  public ExecutionResult execute(Executor executor, @NotNull ProgramRunner runner) throws ExecutionException {
    Project project = myEnvironment.getProject();
    final ConsoleViewImpl consoleView = new ConsoleViewImpl(project, false);
    final Wrappers._T<String> fqName = new Wrappers._T<String>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        fqName.value = NameUtil.nodeFQName(myRunConfiguration.getNode().getNode());
      }
    });
    ProcessHandler javaProcess = Java_Command.createProcess(myRunConfiguration, (executor).getId().equals(DefaultDebugExecutor.EXECUTOR_ID), new ConsoleProcessListener(consoleView));
    return new DemoApplication_Configuration_RunProfileState.MyExecutionResult(javaProcess, new DemoApplication_Configuration_RunProfileState.MyExecutionConsole(consoleView.getComponent(), new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        consoleView.dispose();
      }
    }));

  }

  public IDebugger getDebugger() {
    return Java_Command.getDebugger();
  }

  private static class MyExecutionResult implements ExecutionResult {
    @NotNull
    private final ProcessHandler myProcessHandler;
    @NotNull
    private final ExecutionConsole myConsole;

    public MyExecutionResult(@NotNull ProcessHandler process, @NotNull ExecutionConsole console) {
      myProcessHandler = process;
      myConsole = console;
    }

    public ProcessHandler getProcessHandler() {
      return myProcessHandler;
    }

    public AnAction[] getActions() {
      return new AnAction[0];
    }

    public ExecutionConsole getExecutionConsole() {
      return myConsole;
    }
  }

  private static class MyExecutionConsole implements ExecutionConsole {
    @Nullable
    private final _FunctionTypes._void_P0_E0 myDispose;
    private final JComponent myComponent;

    public MyExecutionConsole(JComponent component, @Nullable _FunctionTypes._void_P0_E0 dispose) {
      myDispose = dispose;
      myComponent = component;
    }

    public JComponent getPreferredFocusableComponent() {
      return myComponent;
    }

    public void dispose() {
      if (myDispose == null) {
        return;
      }
      myDispose.invoke();
    }

    public JComponent getComponent() {
      return myComponent;
    }
  }
}
