package jetbrains.mps.runConfigurations.demo.plugin;

/*Generated by MPS */

import jetbrains.mps.debug.api.run.DebuggerRunProfileState;
import com.intellij.execution.configurations.RunProfileState;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.runners.ExecutionEnvironment;
import com.intellij.execution.Executor;
import com.intellij.execution.configurations.ConfigurationPerRunnerSettings;
import com.intellij.execution.configurations.RunnerSettings;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.ExecutionResult;
import com.intellij.execution.runners.ProgramRunner;
import com.intellij.execution.ExecutionException;
import com.intellij.openapi.project.Project;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.project.IModule;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.reloading.EachClassPathItemVisitor;
import jetbrains.mps.reloading.FileClassPathItem;
import jetbrains.mps.reloading.JarFileClassPathItem;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.util.CollectionUtil;
import com.intellij.execution.process.ProcessHandler;
import com.intellij.execution.impl.ConsoleViewImpl;
import jetbrains.mps.runConfigurations.runtime.ConsoleProcessListener;
import jetbrains.mps.runConfigurations.runtime.DefaultExecutionResult;
import jetbrains.mps.runConfigurations.runtime.DefaultExecutionConsole;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.debug.api.IDebugger;
import jetbrains.mps.debug.api.IDebuggerSettings;
import jetbrains.mps.debug.runtime.settings.LocalConnectionSettings;
import com.intellij.execution.executors.DefaultRunExecutor;
import com.intellij.execution.executors.DefaultDebugExecutor;

public class DemoApplication_Configuration_RunProfileState extends DebuggerRunProfileState implements RunProfileState {
  @NotNull
  private final DemoApplication_Configuration myConfiguration;
  @NotNull
  private final ExecutionEnvironment myEnvironment;

  public DemoApplication_Configuration_RunProfileState(@NotNull DemoApplication_Configuration configuration, @NotNull Executor executor, @NotNull ExecutionEnvironment environment) {
    myConfiguration = configuration;
    myEnvironment = environment;
  }

  public ConfigurationPerRunnerSettings getConfigurationSettings() {
    return null;
  }

  public RunnerSettings getRunnerSettings() {
    return null;
  }

  @Nullable
  public ExecutionResult execute(Executor executor, @NotNull ProgramRunner runner) throws ExecutionException {
    Project project = myEnvironment.getProject();
    final Wrappers._T<String> fqName = new Wrappers._T<String>();
    final SNode node = myConfiguration.getNode().getNode();
    final Wrappers._T<IModule> module = new Wrappers._T<IModule>();
    final List<String> classPath = ListSequence.fromList(new ArrayList<String>());
    final EachClassPathItemVisitor visitor = new EachClassPathItemVisitor() {
      @Override
      public void visit(FileClassPathItem item) {
        ListSequence.fromList(classPath).addElement(item.getClassPath());
      }

      @Override
      public void visit(JarFileClassPathItem item) {
        ListSequence.fromList(classPath).addElement(item.getFile().getAbsolutePath());
      }
    };
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        fqName.value = NameUtil.nodeFQName(node);
        module.value = SNodeOperations.getModel(node).getModelDescriptor().getModule();
        AbstractModule.getDependenciesClasspath(CollectionUtil.set(module.value), true).accept(visitor);
      }
    });
    module.value.getClassPathItem().accept(visitor);
    {
      ProcessHandler _processHandler = new Java_Command().setProgramParameter("Julia").setVirtualMachineParameter(myDebuggerSettings.getCommandLine(true)).setClassPath(classPath).setClassName(fqName.value).createProcess();
      final ConsoleViewImpl _consoleView = new ConsoleViewImpl(project, false);
      _processHandler.addProcessListener(new ConsoleProcessListener(_consoleView));
      return new DefaultExecutionResult(_processHandler, new DefaultExecutionConsole(_consoleView.getComponent(), new _FunctionTypes._void_P0_E0() {
        public void invoke() {
          _consoleView.dispose();
        }
      }));
    }
  }

  public IDebugger getDebugger() {
    return Java_Command.getDebugger();
  }

  @Nullable
  protected IDebuggerSettings createDebuggerSettings() {
    return new LocalConnectionSettings(true);
  }

  public static boolean canExecute(String executorId) {
    if (DefaultRunExecutor.EXECUTOR_ID.equals(executorId)) {
      return true;
    }
    if (DefaultDebugExecutor.EXECUTOR_ID.equals(executorId)) {
      return true;
    }
    return false;
  }
}
