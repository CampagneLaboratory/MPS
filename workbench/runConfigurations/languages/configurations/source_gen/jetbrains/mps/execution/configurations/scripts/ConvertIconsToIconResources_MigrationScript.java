package jetbrains.mps.execution.configurations.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ConvertIconsToIconResources_MigrationScript extends BaseMigrationScript {
  public ConvertIconsToIconResources_MigrationScript(IOperationContext operationContext) {
    super("Convert Icons to Icon Resources");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "covert icons in RunConfigurationKinds";
      }

      public String getAdditionalInfo() {
        return "covert icons in RunConfigurationKinds";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.execution.configurations.structure.RunConfigurationKind";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SLinkOperations.getTarget(node, "iconPath", true) != null;
      }

      public void doUpdateInstanceNode(SNode node) {
        SLinkOperations.setTarget(node, "icon", SConceptOperations.createNewNode("jetbrains.mps.lang.plugin.structure.IconResource", null), true);
        SPropertyOperations.set(SLinkOperations.getTarget(node, "icon", true), "path", SPropertyOperations.getString(SLinkOperations.getTarget(node, "iconPath", true), "path"));
        SLinkOperations.setTarget(node, "iconPath", null, true);
      }

      public boolean isShowAsIntention() {
        return true;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "covert icons in RunConfigurations";
      }

      public String getAdditionalInfo() {
        return "covert icons in RunConfigurations";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.execution.configurations.structure.RunConfiguration";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SLinkOperations.getTarget(node, "iconPath", true) != null;
      }

      public void doUpdateInstanceNode(SNode node) {
        SLinkOperations.setTarget(node, "icon", SConceptOperations.createNewNode("jetbrains.mps.lang.plugin.structure.IconResource", null), true);
        SPropertyOperations.set(SLinkOperations.getTarget(node, "icon", true), "path", SPropertyOperations.getString(SLinkOperations.getTarget(node, "iconPath", true), "path"));
        SLinkOperations.setTarget(node, "iconPath", null, true);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
