package jetbrains.mps.execution.configurations;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import jetbrains.mps.logging.Logger;
import java.util.List;
import com.intellij.execution.configurations.ConfigurationType;
import java.util.ArrayList;
import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import com.intellij.openapi.project.ProjectManager;
import jetbrains.mps.ide.IdeMain;
import com.intellij.openapi.extensions.ExtensionPoint;
import com.intellij.openapi.extensions.Extensions;
import com.intellij.execution.junit.RuntimeConfigurationProducer;
import com.intellij.openapi.project.Project;
import java.util.Collections;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Set;
import java.util.LinkedHashSet;
import java.lang.reflect.Method;
import com.intellij.openapi.application.ApplicationManager;

public class ApplicationRunConfigurationsReloader implements ApplicationComponent {
  private static Logger LOG = Logger.getLogger(ApplicationRunConfigurationsReloader.class);

  private volatile boolean myLoaded = false;
  private final Object myConfigurationsLock = new Object();
  private final List<ConfigurationType> myConfigurationTypes = new ArrayList<ConfigurationType>();
  private final List<BaseConfigCreator> myRegisteredCreators = new ArrayList<BaseConfigCreator>();
  private final ProjectManager myProjectManager;

  public ApplicationRunConfigurationsReloader(ProjectManager projectManager) {
    myProjectManager = projectManager;
  }

  public void init() {
    if (myLoaded) {
      return;
    }
    if (IdeMain.getTestMode() != IdeMain.TestMode.NO_TEST) {
      return;
    }
    synchronized (myConfigurationsLock) {
      ExtensionPoint<ConfigurationType> typesExtensionPoint = Extensions.getArea(null).getExtensionPoint(ConfigurationType.CONFIGURATION_TYPE_EP);
      myConfigurationTypes.clear();
      myConfigurationTypes.addAll(ApplicationRunConfigurationsReloader.createConfigurationTypes());
      for (ConfigurationType creators : myConfigurationTypes) {
        typesExtensionPoint.registerExtension(creators);
      }
      ApplicationRunConfigurationsReloader.addForeignConfigurations();
      ExtensionPoint<RuntimeConfigurationProducer> creatorsExtensionPoint = Extensions.getArea(null).getExtensionPoint(RuntimeConfigurationProducer.RUNTIME_CONFIGURATION_PRODUCER);
      myRegisteredCreators.clear();
      myRegisteredCreators.addAll(ApplicationRunConfigurationsReloader.createCreators());
      for (BaseConfigCreator creator : myRegisteredCreators) {
        creatorsExtensionPoint.registerExtension(creator);
      }
    }
    for (Project p : myProjectManager.getOpenProjects()) {
      p.getComponent(RunConfigurationsReloader.class).initRunConfigurations();
    }
    myLoaded = true;
  }

  public void dispose() {
    if (!(myLoaded)) {
      return;
    }
    for (Project p : myProjectManager.getOpenProjects()) {
      p.getComponent(RunConfigurationsReloader.class).disposeRunConfigurations();
    }
    synchronized (myConfigurationsLock) {
      Collections.reverse(myRegisteredCreators);
      ExtensionPoint<RuntimeConfigurationProducer> creatorsExtensionPoint = Extensions.getArea(null).getExtensionPoint(RuntimeConfigurationProducer.RUNTIME_CONFIGURATION_PRODUCER);
      for (BaseConfigCreator creator : myRegisteredCreators) {
        creatorsExtensionPoint.unregisterExtension(creator);
      }
      myRegisteredCreators.clear();
      Collections.reverse(myConfigurationTypes);
      ExtensionPoint<ConfigurationType> typesExtenstionPoint = Extensions.getArea(null).getExtensionPoint(ConfigurationType.CONFIGURATION_TYPE_EP);
      for (ConfigurationType ct : myConfigurationTypes) {
        typesExtenstionPoint.unregisterExtension(ct);
      }
      myConfigurationTypes.clear();
    }
    myLoaded = false;
  }

  @Override
  public void initComponent() {
  }

  @Override
  public void disposeComponent() {
  }

  @NotNull
  @Override
  public String getComponentName() {
    return "Application Run Configurations Reloader";
  }

  @Nullable
  private static <T> T createClassInstance(IModule module, String className) {
    try {
      Class configClass = module.getClass(className);
      if (configClass == null) {
        return null;
      }
      return (T) configClass.newInstance();
    } catch (Throwable t) {
      LOG.error(t);
      return null;
    }
  }

  @NotNull
  private static List<ConfigurationType> createConfigurationTypes() {
    final List<ConfigurationType> configurationTypes = new ArrayList<ConfigurationType>();
    ModelAccess.instance().runReadAction(new Runnable() {
      @Override
      public void run() {
        for (Language language : MPSModuleRepository.getInstance().getAllLanguages()) {
          if (LanguageAspect.PLUGIN.get(language) != null) {
            SModel model = LanguageAspect.PLUGIN.get(language).getSModel();
            for (SNode rcTypeDecl : SModelOperations.getRoots(model, "jetbrains.mps.lang.plugin.structure.RunConfigurationTypeDeclaration")) {
              String configurationTypeName = SPropertyOperations.getString(rcTypeDecl, "name") + "_ConfigurationType";
              String configurationName = LanguageAspect.PLUGIN.get(language).getLongName() + "." + configurationTypeName;
              ConfigurationType configurationType = ApplicationRunConfigurationsReloader.createClassInstance(language, configurationName);
              if (configurationType == null) {
                continue;
              }
              configurationTypes.add(configurationType);
            }
          }
        }
      }
    });
    return configurationTypes;
  }

  @NotNull
  private static Set<BaseConfigCreator> createCreators() {
    final Set<BaseConfigCreator> creators = new LinkedHashSet<BaseConfigCreator>();
    ModelAccess.instance().runReadAction(new Runnable() {
      @Override
      public void run() {
        for (Language language : MPSModuleRepository.getInstance().getAllLanguages()) {
          if (LanguageAspect.PLUGIN.get(language) != null) {
            SModel model = LanguageAspect.PLUGIN.get(language).getSModel();
            for (SNode creator : SModelOperations.getRoots(model, "jetbrains.mps.lang.plugin.structure.RunConfigCreator")) {
              String creatorClassName = LanguageAspect.PLUGIN.get(language).getLongName() + "." + SPropertyOperations.getString(creator, "name");
              BaseConfigCreator configCreator = ApplicationRunConfigurationsReloader.createClassInstance(language, creatorClassName);
              if (configCreator == null) {
                continue;
              }
              creators.add(configCreator);
            }
            for (SNode creator : SModelOperations.getRoots(model, "jetbrains.mps.lang.plugin.structure.UniversalRunConfigCreator")) {
              String creatorClassName = LanguageAspect.PLUGIN.get(language).getLongName() + "." + SPropertyOperations.getString(creator, "name");
              BaseConfigCreator configCreator = ApplicationRunConfigurationsReloader.createClassInstance(language, creatorClassName);
              if (configCreator == null) {
                continue;
              }
              creators.add(configCreator);
            }
          }
        }
      }
    });
    return creators;
  }

  private static void addForeignConfigurations() {
    ModelAccess.instance().runReadAction(new Runnable() {
      @Override
      public void run() {
        for (Language language : MPSModuleRepository.getInstance().getAllLanguages()) {
          if (LanguageAspect.PLUGIN.get(language) != null) {
            Class foreignConfigurations = language.getClass(LanguageAspect.PLUGIN.get(language).getLongName() + "." + "ForeignConfigurations");
            if (foreignConfigurations != null) {
              try {
                Method method = foreignConfigurations.getMethod("connectForeignConfigurations");
                method.invoke(null);
              } catch (Throwable e) {
                ApplicationRunConfigurationsReloader.LOG.error(e);
              }
            }
          }
        }
      }
    });
  }

  public static ApplicationRunConfigurationsReloader getInstance() {
    return ApplicationManager.getApplication().getComponent(ApplicationRunConfigurationsReloader.class);
  }
}
