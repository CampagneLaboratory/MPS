package jetbrains.mps.execution.settings.runtime;

/*Generated by MPS */

import com.intellij.openapi.options.SettingsEditorListener;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import com.intellij.openapi.options.SettingsEditor;
import javax.swing.JComponent;
import javax.swing.Action;
import com.intellij.openapi.util.Disposer;

public class SettingsEditorPanel {
  private final ITemplatePersistentConfiguration myConfiguration;
  private final SettingsEditorEx<ITemplatePersistentConfiguration> myEditor;
  private final SettingsEditorListener myListener;
  private boolean myIsModified;
  private final AbstractAction myOkAction = new AbstractAction("Ok") {
    public void actionPerformed(ActionEvent p0) {
      apply();
    }
  };
  private final AbstractAction myApplyAction = new AbstractAction("Apply") {
    public void actionPerformed(ActionEvent p0) {
      apply();
    }
  };
  private final AbstractAction myResetAction = new AbstractAction("Reset") {
    public void actionPerformed(ActionEvent p0) {
      reset();
    }
  };
  private final AbstractAction myCancelAction = new AbstractAction("Cancel") {
    public void actionPerformed(ActionEvent p0) {
      reset();
    }
  };

  public SettingsEditorPanel(ITemplatePersistentConfiguration configuration) {
    myConfiguration = configuration;
    myEditor = (SettingsEditorEx<ITemplatePersistentConfiguration>) myConfiguration.getEditorEx();
    myListener = new SettingsEditorListener() {
      public void stateChanged(SettingsEditor editor) {
        setModified(true);
      }
    };
    myEditor.addSettingsEditorListener(myListener);
    updateUi();
  }

  public JComponent getComponent() {
    return myEditor.getComponent();
  }

  private void setModified(boolean modified) {
    myIsModified = modified;
    updateUi();
  }

  private void apply() {
    myEditor.apply(myConfiguration);
    setModified(false);
  }

  private void reset() {
    myEditor.resetFrom(myConfiguration);
    setModified(false);
  }

  private void updateUi() {
    myApplyAction.setEnabled(myIsModified);
    myResetAction.setEnabled(myIsModified);
  }

  public Action getOkAction() {
    return myOkAction;
  }

  public Action getApplyAction() {
    return myApplyAction;
  }

  public Action getResetAction() {
    return myResetAction;
  }

  public Action getCancelAction() {
    return myCancelAction;
  }

  public void dispose() {
    myEditor.removeSettingsEditorListener(myListener);
    Disposer.dispose(myEditor);
  }
}
