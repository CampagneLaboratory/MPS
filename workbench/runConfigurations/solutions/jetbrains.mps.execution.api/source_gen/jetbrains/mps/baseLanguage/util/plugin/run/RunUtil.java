package jetbrains.mps.baseLanguage.util.plugin.run;

/*Generated by MPS */

import jetbrains.mps.util.annotation.ToRemove;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.generator.ModelGenerationStatusManager;
import jetbrains.mps.project.ProjectOperationContext;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.workbench.make.WorkbenchMakeService;
import jetbrains.mps.smodel.resources.ModelsToResources;
import com.intellij.openapi.application.ModalityState;

@Deprecated
@ToRemove(version = 2.0)
public class RunUtil {
  @Deprecated
  public RunUtil() {
  }

  public static boolean makeBeforeRun(Project project, SNode... nodes) {
    return makeBeforeRun(project, Sequence.fromIterable(Sequence.fromArray(nodes)).toListSequence());
  }

  public static boolean makeBeforeRun(final Project project, final List<SNode> nodes) {
    final Wrappers._T<List<SModelDescriptor>> descriptors = new Wrappers._T<List<SModelDescriptor>>();

    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        descriptors.value = ListSequence.fromList(nodes).<SModelDescriptor>select(new ISelector<SNode, SModelDescriptor>() {
          public SModelDescriptor select(SNode it) {
            return SNodeOperations.getModel(it).getModelDescriptor();
          }
        }).where(new IWhereFilter<SModelDescriptor>() {
          public boolean accept(SModelDescriptor it) {
            return ModelGenerationStatusManager.getInstance().generationRequired(it, ProjectOperationContext.get(project));
          }
        }).distinct().toListSequence();
      }
    });

    return makeModels(project, descriptors.value);
  }

  private static boolean makeModels(final Project project, final List<SModelDescriptor> descriptors) {
    if (ListSequence.fromList(descriptors).isEmpty()) {
      return true;
    }
    final Wrappers._boolean result = new Wrappers._boolean();
    ApplicationManager.getApplication().invokeAndWait(new Runnable() {
      public void run() {
        IResult makeResult = new WorkbenchMakeService(ProjectOperationContext.get(project), true).make(new ModelsToResources(ProjectOperationContext.get(project), descriptors).resources(false));
        if (makeResult == null) {
          // apparently null result is a perfectly normal thing 
          result.value = true;
        } else {
          result.value = makeResult.isSucessful();
        }
      }
    }, ModalityState.NON_MODAL);
    return result.value;
  }
}
