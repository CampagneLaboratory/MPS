package jetbrains.mps.execution.sandbox.sandbox;

/*Generated by MPS */

import jetbrains.mps.execution.api.settings.IPersistentConfiguration;
import jetbrains.mps.execution.api.settings.ITemplatePersistentConfiguration;
import jetbrains.mps.logging.Logger;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.execution.api.settings.SettingsEditorEx;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;

public class TwoFieldsEditor_Configuration implements IPersistentConfiguration, ITemplatePersistentConfiguration {
  private static final Logger LOG = Logger.getLogger(TwoFieldsEditor_Configuration.class);

  @NotNull
  private TwoFieldsEditor_Configuration.MyState myState = new TwoFieldsEditor_Configuration.MyState();
  private SettingsEditorEx<TwoFieldsEditor_Configuration> myEditorEx;

  public TwoFieldsEditor_Configuration() {
  }

  public void checkConfiguration() throws RuntimeConfigurationException {
    if (check_t4knop_a0a0(this.getProperty1())) {
      throw new RuntimeConfigurationException("Field1 should not contain spaces");
    }
    if (check_t4knop_a1a0(this.getProperty2())) {
      throw new RuntimeConfigurationException("Field2 should not contain dots");
    }
  }

  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    element.addContent(XmlSerializer.serialize(myState));
  }

  @Override
  public void readExternal(Element element) throws InvalidDataException {
    XmlSerializer.deserializeInto(myState, (Element) element.getChildren().get(0));
  }

  public String getProperty1() {
    return myState.property1;
  }

  public String getProperty2() {
    return myState.property2;
  }

  public void setProperty1(String value) {
    myState.property1 = value;
  }

  public void setProperty2(String value) {
    myState.property2 = value;
  }

  @Override
  public TwoFieldsEditor_Configuration clone() {
    TwoFieldsEditor_Configuration clone = null;
    try {
      clone = createCloneTemplate();
      clone.myState = (TwoFieldsEditor_Configuration.MyState) myState.clone();
      return clone;
    } catch (CloneNotSupportedException ex) {
      TwoFieldsEditor_Configuration.LOG.error(ex);
    }
    return clone;
  }

  public TwoFieldsEditor_Configuration createCloneTemplate() {
    return new TwoFieldsEditor_Configuration();
  }

  public TwoFieldsEditor_Configuration_Editor getEditor() {
    return new TwoFieldsEditor_Configuration_Editor();
  }

  public SettingsEditorEx<TwoFieldsEditor_Configuration> getEditorEx() {
    if (myEditorEx == null) {
      myEditorEx = getEditor();
    }
    return myEditorEx;
  }

  private static boolean check_t4knop_a0a0(String checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.contains(" ");
    }
    return false;
  }

  private static boolean check_t4knop_a1a0(String checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.contains(".");
    }
    return false;
  }

  public class MyState {
    public String property1;
    public String property2;

    public MyState() {
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
      TwoFieldsEditor_Configuration.MyState state = new TwoFieldsEditor_Configuration.MyState();
      state.property1 = property1;
      state.property2 = property2;
      return state;
    }
  }
}
