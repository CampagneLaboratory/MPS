package jetbrains.mps.ide.editor.resolver;

/*Generated by MPS */

import jetbrains.mps.resolve.IResolver;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.resolve.ReferenceResolverUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import typesystemIntegration.languageChecker.EditorBasedReferenceResolverUtils;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import java.util.List;
import jetbrains.mps.smodel.event.SModelEvent;

public class EditorResolver implements IResolver {
  public EditorResolver() {
  }
  @Nullable
  @Override
  public boolean resolve(@NotNull SReference reference, @NotNull SNode sourceNode, @NotNull SRepository repository) {
    final String resolveInfo = ReferenceResolverUtils.getResolveInfo(reference, sourceNode);
    if (resolveInfo == null) {
      return false;
    }
    final EditorResolver.FakeEditorComponent fakeEditor = new EditorResolver.FakeEditorComponent(SNodeOperations.getContainingRoot(sourceNode), repository);
    try {
      return EditorBasedReferenceResolverUtils.resolveInEditor(fakeEditor, sourceNode, resolveInfo, reference.getRole());
    } finally {
      fakeEditor.dispose();
    }
  }
  private class FakeEditorComponent extends EditorComponent {
    public FakeEditorComponent(SNode node, SRepository repository) {
      super(repository);
      setEditorContext(SNodeOperations.getModel(node), repository);
      editNode(node);
    }

    @Override
    protected EditorCell createRootCell(List<SModelEvent> events) {
      return getEditorContext().createRootCell(getEditedNode(), events);
    }

    @Override
    protected void attachListeners() {
    }

    @Override
    protected void detachListeners() {
    }
  }
}
