package jetbrains.mps.ide.editor.resolver;

/*Generated by MPS */

import jetbrains.mps.resolve.IResolver;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cellMenu.NodeSubstituteInfo;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.project.IModule;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.constraints.ModelConstraintsUtil;
import jetbrains.mps.smodel.ModuleOperationContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.EditorContext;

import java.util.List;

import jetbrains.mps.smodel.event.SModelEvent;

public class EditorResolver implements IResolver {
  public EditorResolver() {
  }

  @Nullable
  public boolean resolve(@NotNull SReference reference, @NotNull SNode sourceNode, @NotNull IOperationContext operationContext) {
    final String resolveInfo = getResolveInfo(reference, sourceNode);
    if (resolveInfo == null) {
      return false;
    }
    final EditorResolver.FakeEditorComponent fakeEditor = new EditorResolver.FakeEditorComponent(SNodeOperations.getContainingRoot(sourceNode), operationContext);
    try {
      EditorCell cellWithRole = fakeEditor.findNodeCellWithRole(sourceNode, reference.getRole());
      if (cellWithRole == null) {
        return false;
      }
      NodeSubstituteInfo substituteInfo = cellWithRole.getSubstituteInfo();
      final INodeSubstituteAction applicableSubstituteAction = getApplicableSubstituteAction(substituteInfo, resolveInfo);
      if (applicableSubstituteAction == null) {
        return false;
      }
      applicableSubstituteAction.substitute(fakeEditor.getEditorContext(), resolveInfo);
    } finally {
      fakeEditor.dispose();
    }
    return true;
  }

  private String getResolveInfo(SReference reference, SNode sourceNode) {
    String result = reference.getResolveInfo();
    if (result != null) {
      return result;
    }
    IModule module = check_jllgm1_a0c0b(SNodeOperations.getModel(sourceNode).getModelDescriptor());
    SNode target = reference.getTargetNodeSilently();
    if (target != null && module != null) {
      Scope scope = ModelConstraintsUtil.getScope(reference, new ModuleOperationContext(module));
      result = scope.getReferenceText(sourceNode, target);
    }
    return result;
  }

  private INodeSubstituteAction getApplicableSubstituteAction(NodeSubstituteInfo substituteInfo, String resolveInfo) {
    INodeSubstituteAction result = null;
    for (INodeSubstituteAction nextAction : ListSequence.fromList(substituteInfo.getMatchingActions(resolveInfo, true))) {
      if (nextAction.canSubstitute(resolveInfo)) {
        if (result != null) {
          return null;
        }
        result = nextAction;
      }
    }
    return result;
  }

  private static IModule check_jllgm1_a0c0b(SModelDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }

  private class FakeEditorComponent extends EditorComponent {
    public FakeEditorComponent(SNode node, IOperationContext operationContext) {
      super(operationContext);
      setEditorContext(new EditorContext(this, SNodeOperations.getModel(node), operationContext));
      editNode(node);
    }

    protected EditorCell createRootCell(List<SModelEvent> events) {
      return getEditorContext().createRootCell(getEditedNode(), events);
    }
  }
}
