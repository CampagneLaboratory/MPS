package jetbrains.mps.ide.editor.util;

/*Generated by MPS */

import javax.swing.JComponent;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.project.IModule;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.util.MacrosFactory;
import org.jetbrains.annotations.NotNull;
import java.io.File;
import javax.swing.JButton;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import java.awt.Component;
import javax.swing.SwingUtilities;
import javax.swing.JFrame;
import jetbrains.mps.ide.ui.filechoosers.treefilechooser.TreeFileChooser;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.MacroHelper;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class EditorUtil {
  public EditorUtil() {
  }

  public static JComponent createSelectIconButton(SNode sourceNode, final EditorContext context) {
    return EditorUtil.createSelectIconButton(sourceNode, "iconPath", context);
  }

  public static JComponent createSelectIconButton(final SNode sourceNode, final String propertyName, final EditorContext context) {
    final IModule module = sourceNode.getModel().getModelDescriptor().getModule();

    return createSelectButton(sourceNode, propertyName, context, true, new _FunctionTypes._return_P1_E0<String, String>() {
      public String invoke(String fullPath) {
        return check_3m4h3r_a0a4a2a2(MacrosFactory.forModuleFile(module.getDescriptorFile()), fullPath);
      }
    }, new _FunctionTypes._return_P1_E0<String, String>() {
      public String invoke(String shortPath) {
        return check_3m4h3r_a0a5a2a2(MacrosFactory.forModuleFile(module.getDescriptorFile()), shortPath);
      }
    });
  }

  public static JComponent createSelectButton(final SNode sourceNode, final String propertyName, final EditorContext context, final boolean files, @NotNull final _FunctionTypes._return_P1_E0<? extends String, ? super String> shrinkPath, @NotNull _FunctionTypes._return_P1_E0<? extends String, ? super String> expandPath) {
    String filename = expandPath.invoke(SNodeAccessUtil.getProperty(sourceNode, propertyName));
    final File baseFile = (filename == null ?
      null :
      new File(filename)
    );
    final JButton button = new JButton();
    button.setAction(new AbstractAction("...") {
      public void actionPerformed(ActionEvent e) {
        Component root = SwingUtilities.getRoot(button);
        JFrame frame = (root instanceof JFrame ?
          (JFrame) root :
          null
        );
        TreeFileChooser chooser = new TreeFileChooser();
        chooser.setMode((files ?
          TreeFileChooser.MODE_FILES :
          TreeFileChooser.MODE_DIRECTORIES
        ));
        chooser.setContext(context.getOperationContext());
        if (baseFile != null && baseFile.exists()) {
          chooser.setInitialFile(FileSystem.getInstance().getFileByPath(baseFile.getAbsolutePath()));
        }
        IFile result = chooser.showDialog(frame);
        if (result == null) {
          return;
        }
        final String pathToShow = shrinkPath.invoke(result.getPath());
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            SNodeAccessUtil.setProperty(sourceNode, propertyName, pathToShow);
          }
        });
      }
    });
    return button;
  }

  private static String check_3m4h3r_a0a4a2a2(MacroHelper checkedDotOperand, String fullPath) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.shrinkPath(fullPath);
    }
    return null;
  }

  private static String check_3m4h3r_a0a5a2a2(MacroHelper checkedDotOperand, String shortPath) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.expandPath(shortPath);
    }
    return null;
  }
}
