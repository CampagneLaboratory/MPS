package jetbrains.mps.ide.editor.util.renderer;

/*Generated by MPS */

import jetbrains.mps.ide.navigation.NodeNavigatable;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.presentation.NodePresentationUtil;
import javax.swing.Icon;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.icons.IconManager;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.MPSModuleRepository;

public class DefaultNodeRenderer extends BaseRenderer<NodeNavigatable> {
  public DefaultNodeRenderer() {
  }
  @Override
  public String getElementText(final NodeNavigatable element) {
    return ModelAccess.instance().runReadAction(new Computable<String>() {
      @Override
      public String compute() {
        return getLabelNode(element).getPresentation();
      }
    });
  }
  @Override
  public String getContainerText(final NodeNavigatable element, String name) {
    return ModelAccess.instance().runReadAction(new Computable<String>() {
      @Override
      public String compute() {
        return NodePresentationUtil.descriptionText(getContainerNode(element), false);
      }
    });
  }
  @Override
  protected Icon getIcon(final NodeNavigatable element) {
    final Wrappers._T<Icon> res = new Wrappers._T<Icon>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        res.value = IconManager.getIconFor(getLabelNode(element));
      }
    });
    return res.value;
  }
  protected SNode getLabelNode(NodeNavigatable element) {
    return ((SNodePointer) element.getNodePointer()).resolve(MPSModuleRepository.getInstance());
  }
  protected SNode getContainerNode(NodeNavigatable element) {
    return getLabelNode(element).getContainingRoot();
  }
}
