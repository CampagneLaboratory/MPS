package jetbrains.mps.ide.editor.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Priority;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import com.intellij.openapi.fileEditor.FileEditor;
import com.intellij.openapi.fileEditor.FileEditorManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.ide.editor.MPSFileNodeEditor;
import jetbrains.mps.nodeEditor.hintsSettings.ConceptEditorHintSettings;
import jetbrains.mps.nodeEditor.hintsSettings.ConceptEditorHintPreferencesPage;
import com.intellij.openapi.ui.DialogWrapper;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class PushEditorHints_Action extends BaseAction {
  private static final Icon ICON = null;

  public PushEditorHints_Action() {
    super("Push Editor Hints", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "PushEditorHints", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("file", event.getData(PlatformDataKeys.VIRTUAL_FILE));
    if (MapSequence.fromMap(_params).get("file") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      FileEditor fileEditor = FileEditorManager.getInstance(((Project) MapSequence.fromMap(_params).get("project"))).getSelectedEditor(((VirtualFile) MapSequence.fromMap(_params).get("file")));
      EditorComponent component = null;
      if (fileEditor instanceof MPSFileNodeEditor) {
        component = ((EditorComponent) ((MPSFileNodeEditor) fileEditor).getNodeEditor().getCurrentEditorComponent());
      }
      if (component == null) {
        return;
      }
      ConceptEditorHintSettings settings = component.getSettings();
      final ConceptEditorHintPreferencesPage page = new ConceptEditorHintPreferencesPage(settings);
      DialogWrapper dialog = new HintsDialog(((Project) MapSequence.fromMap(_params).get("project")), page, component);
      dialog.show();
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "PushEditorHints", t);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(PushEditorHints_Action.class);
}
