package jetbrains.mps.ide.editor.actions;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import jetbrains.mps.nodeEditor.hintsSettings.ConceptEditorHintPreferencesPage;
import jetbrains.mps.openapi.editor.EditorComponent;
import javax.swing.JPanel;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButton;
import jetbrains.mps.nodeEditor.hintsSettings.ConceptEditorHintSettings;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import javax.swing.Action;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.uiDesigner.core.GridLayoutManager;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import com.intellij.uiDesigner.core.GridConstraints;
import java.awt.Dimension;
import javax.swing.JScrollPane;
import com.intellij.ui.ScrollPaneFactory;
import java.awt.Component;
import org.jetbrains.annotations.NonNls;

public class HintsDialog extends DialogWrapper {
  private ConceptEditorHintPreferencesPage myPage;
  private EditorComponent myComponent;
  private JPanel myMainPanel;
  private ButtonGroup myButtonGroup;
  private JRadioButton myDefaultRadioButton;
  private JRadioButton myCustomRadioButton;
  private ConceptEditorHintSettings mySettings;



  public HintsDialog(Project project, @NotNull ConceptEditorHintPreferencesPage page, ConceptEditorHintSettings settings, EditorComponent component) {
    super(project, true);
    myPage = page;
    myComponent = component;
    mySettings = settings;
    setTitle("Push Editor Hints");
    init();
  }

  @Nullable
  protected JComponent createCenterPanel() {
    return myMainPanel;
  }



  @Override
  @NotNull
  protected Action[] createActions() {
    List<Action> actions = ListSequence.fromList(new ArrayList<Action>());
    ListSequence.fromList(actions).addElement(getOKAction());
    ListSequence.fromList(actions).addElement(getCancelAction());
    return ListSequence.fromList(actions).toGenericArray(Action.class);
  }





  @Override
  protected void doOKAction() {
    if (myDefaultRadioButton.isSelected()) {
      ((jetbrains.mps.nodeEditor.EditorComponent) myComponent).setUseDefaultHints(true);
    } else {
      ((jetbrains.mps.nodeEditor.EditorComponent) myComponent).setUseDefaultHints(false);
      myPage.commit();
      ((jetbrains.mps.nodeEditor.EditorComponent) myComponent).setEnabledHints(mySettings.getEnabledHints());
    }
    ModelAccess.instance().runReadAction(new Runnable() {
      @Override
      public void run() {
        myComponent.rebuildEditorContent();
      }
    });

    super.doOKAction();
  }





  @Override
  protected void init() {
    myMainPanel = new JPanel(new GridLayoutManager(3, 1));
    myButtonGroup = new ButtonGroup();
    myDefaultRadioButton = new JRadioButton("Use default hints");
    myDefaultRadioButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        HintsDialog.this.setPanelEnabled(myPage.getComponent(), false);
      }
    });
    myCustomRadioButton = new JRadioButton("Use custom hints:");
    myCustomRadioButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        HintsDialog.this.setPanelEnabled(myPage.getComponent(), true);
      }
    });
    myButtonGroup.add(myDefaultRadioButton);
    myButtonGroup.add(myCustomRadioButton);

    boolean useDefaultHints = ((jetbrains.mps.nodeEditor.EditorComponent) myComponent).getUseDefaultHints();
    myDefaultRadioButton.setSelected(useDefaultHints);
    myCustomRadioButton.setSelected(!(useDefaultHints));
    setPanelEnabled(myPage.getComponent(), !(useDefaultHints));

    GridConstraints c = new GridConstraints();
    c.setFill(GridConstraints.FILL_BOTH);
    c.setAnchor(GridConstraints.ANCHOR_NORTHWEST);

    c.setRow(0);
    c.setColumn(0);

    myMainPanel.add(myDefaultRadioButton, c);
    c.setRow(1);
    myMainPanel.add(myCustomRadioButton, c);
    JComponent component = myPage.getComponent();
    component.setPreferredSize(new Dimension(400, 500));
    JScrollPane scrollPane = ScrollPaneFactory.createScrollPane(component);

    myMainPanel.add(scrollPane, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null));
    super.init();
  }

  private void setPanelEnabled(JComponent panel, boolean enabled) {
    for (Component component : panel.getComponents()) {
      component.setEnabled(enabled);
      if (component instanceof JComponent) {
        setPanelEnabled(((JComponent) component), enabled);
      }
    }
  }



  @Nullable
  @NonNls
  @Override
  protected String getDimensionServiceKey() {
    return getClass().getName();
  }



}
