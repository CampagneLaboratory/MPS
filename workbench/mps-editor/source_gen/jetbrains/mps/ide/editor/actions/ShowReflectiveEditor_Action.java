package jetbrains.mps.ide.editor.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import java.util.Collection;

public class ShowReflectiveEditor_Action extends BaseAction {
  private static final Icon ICON = null;
  public ShowReflectiveEditor_Action() {
    super("Show Reflective Editor", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return !(check_1wtole_a0a0a(((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")).getUpdater().getExplicitEditorHintsForNode(((SNode) MapSequence.fromMap(_params).get("node")).getReference())));
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode p = event.getData(MPSCommonDataKeys.NODE);
      MapSequence.fromMap(_params).put("node", p);
      if (p == null) {
        return false;
      }
    }
    {
      EditorComponent editorComponent = event.getData(MPSEditorDataKeys.EDITOR_COMPONENT);
      if (editorComponent != null && editorComponent.isInvalid()) {
        editorComponent = null;
      }
      MapSequence.fromMap(_params).put("editorComponent", editorComponent);
      if (editorComponent == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    EditorContext editorContext = ((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")).getEditorContext();
    EditorCell selectedCell = editorContext.getSelectedCell();
    if (selectedCell == null) {
      return;
    }
    int x = selectedCell.getX();
    int y = selectedCell.getY();
    int caretX = selectedCell.getCaretX();

    ((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")).getUpdater().addExplicitEditorHintsForNode(((SNode) MapSequence.fromMap(_params).get("node")).getReference(), "jetbrains.mps.lang.core.editor.BaseEditorContextHints.reflectiveEditor");
    ((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")).rebuildEditorContent();
    editorContext.flushEvents();
    EditorCell targetCell = ((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")).findCellWeak(x, y);
    if (targetCell != null) {
      targetCell.setCaretX(caretX);
      editorContext.getSelectionManager().setSelection(targetCell);
    } else {
      SelectionUtil.selectCell(editorContext, ((SNode) ((SNode) MapSequence.fromMap(_params).get("node"))), SelectionManager.FIRST_EDITABLE_CELL);
    }
  }
  private static boolean check_1wtole_a0a0a(Collection<String> checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.contains("jetbrains.mps.lang.core.editor.BaseEditorContextHints.reflectiveEditor");
    }
    return false;
  }
}
