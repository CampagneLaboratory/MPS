package testRefactoringTargetLang.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.Iterator;
import java.util.List;

public class AbstractGoodConcept extends BaseConcept {
  public static final String concept = "testRefactoringTargetLang.structure.AbstractGoodConcept";
  public static String VERY_NICE_PROPERTY = "veryNiceProperty";
  public static String GOOD_CONCEPT = "goodConcept";

  public  AbstractGoodConcept(SNode node) {
    super(node);
  }

  public static AbstractGoodConcept newInstance(SModel sm, boolean init) {
    return (AbstractGoodConcept)SModelUtil_new.instantiateConceptDeclaration("testRefactoringTargetLang.structure.AbstractGoodConcept", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AbstractGoodConcept newInstance(SModel sm) {
    return AbstractGoodConcept.newInstance(sm, false);
  }


  public String getVeryNiceProperty() {
    return this.getProperty(AbstractGoodConcept.VERY_NICE_PROPERTY);
  }

  public void setVeryNiceProperty(String value) {
    this.setProperty(AbstractGoodConcept.VERY_NICE_PROPERTY, value);
  }

  public int getGoodConceptsCount() {
    return this.getChildCount(AbstractGoodConcept.GOOD_CONCEPT);
  }

  public Iterator<AnsotherGoodConcept> goodConcepts() {
    return this.children(AbstractGoodConcept.GOOD_CONCEPT);
  }

  public List<AnsotherGoodConcept> getGoodConcepts() {
    return this.getChildren(AbstractGoodConcept.GOOD_CONCEPT);
  }

  public void addGoodConcept(AnsotherGoodConcept node) {
    this.addChild(AbstractGoodConcept.GOOD_CONCEPT, node);
  }

  public void insertGoodConcept(AnsotherGoodConcept prev, AnsotherGoodConcept node) {
    this.insertChild(prev, AbstractGoodConcept.GOOD_CONCEPT, node);
  }

}
