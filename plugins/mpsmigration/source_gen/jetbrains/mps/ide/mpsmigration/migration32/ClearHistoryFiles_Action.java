package jetbrains.mps.ide.mpsmigration.migration32;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.persistence.DataSource;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.extapi.persistence.FileDataSource;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.persistence.FilePerRootDataSource;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class ClearHistoryFiles_Action extends BaseAction {
  private static final Icon ICON = null;
  public ClearHistoryFiles_Action() {
    super("Clear History Files", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.enable(event.getPresentation());
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    Iterable<? extends SModule> modulesWithGenerators = ((MPSProject) MapSequence.fromMap(_params).get("project")).getModulesWithGenerators();
    Sequence.fromIterable(modulesWithGenerators).translate(new ITranslator2<SModule, SModel>() {
      public Iterable<SModel> translate(SModule it) {
        return it.getModels();
      }
    }).select(new ISelector<SModel, DataSource>() {
      public DataSource select(SModel it) {
        return it.getSource();
      }
    }).select(new ISelector<DataSource, IFile>() {
      public IFile select(DataSource it) {
        if (it instanceof FileDataSource) {
          IFile modelFile = as_wouwxe_a0a0a0a0a0a0a0a0b0f(it, FileDataSource.class).getFile();
          String modelPath = modelFile.getPath();
          return FileSystem.getInstance().getFileByPath(modelPath.substring(0, modelPath.length() - MPSExtentions.DOT_MODEL.length()) + MPSExtentions.DOT_REFACTORINGS);
        } else if (it instanceof FilePerRootDataSource) {
          return as_wouwxe_a0a0a0a0a0a0a0a0b0f_0(it, FilePerRootDataSource.class).getFile(MPSExtentions.DOT_REFACTORINGS);
        } else {
          return null;
        }
      }
    }).where(new IWhereFilter<IFile>() {
      public boolean accept(IFile it) {
        return it != null && it.exists();
      }
    }).visitAll(new IVisitor<IFile>() {
      public void visit(IFile it) {
        it.delete();
      }
    });
  }
  private static <T> T as_wouwxe_a0a0a0a0a0a0a0a0b0f(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_wouwxe_a0a0a0a0a0a0a0a0b0f_0(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
