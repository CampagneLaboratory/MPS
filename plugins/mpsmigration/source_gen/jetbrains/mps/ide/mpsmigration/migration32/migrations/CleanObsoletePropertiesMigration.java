package jetbrains.mps.ide.mpsmigration.migration32.migrations;

/*Generated by MPS */

import jetbrains.mps.migration.global.BaseProjectMigration;
import jetbrains.mps.migration.global.CleanupProjectMigration;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.EditableSModel;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class CleanObsoletePropertiesMigration extends BaseProjectMigration implements CleanupProjectMigration {
  public static final String ID = "jetbrains.mps.obsoletePropsCleanup";

  public CleanObsoletePropertiesMigration() {
    super(CleanObsoletePropertiesMigration.ID);
  }

  @Override
  public String getDescription() {
    return "Cleanup obsolete editor properties";
  }

  @Override
  public boolean doExecute(Project p) {
    Iterable<? extends SModule> modules = p.getModulesWithGenerators();

    Iterable<SNode> nodes = Sequence.fromIterable(modules).translate(new ITranslator2<SModule, SModel>() {
      public Iterable<SModel> translate(SModule it) {
        return it.getModels();
      }
    }).ofType(EditableSModel.class).where(new IWhereFilter<EditableSModel>() {
      public boolean accept(EditableSModel it) {
        return !(it.isReadOnly());
      }
    }).translate(new ITranslator2<EditableSModel, SNode>() {
      public Iterable<SNode> translate(EditableSModel it) {
        return SModelOperations.nodes(((SModel) it), null);
      }
    });

    Sequence.fromIterable(nodes).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNode n = it;
        if (n.hasProperty("right_transform_hint")) {
          n.setProperty("right_transform_hint", null);
        }
        if (n.hasProperty("left_transform_hint")) {
          n.setProperty("left_transform_hint", null);
        }
      }
    });

    return true;
  }
}
