package jetbrains.mps.ide.mpsmigration.migration32.migrations;

/*Generated by MPS */

import jetbrains.mps.migration.global.BaseProjectMigration;
import com.intellij.openapi.components.ApplicationComponent;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.compiler.CompilerSettingsComponent;
import jetbrains.mps.compiler.JavaCompilerOptionsComponent;
import jetbrains.mps.migration.global.ProjectMigrationsRegistry;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

public class ProjectJavaVersionMigration extends BaseProjectMigration implements ApplicationComponent {

  public static final String ID = "jetbrains.mps.projectJavaVersionMigration";

  public ProjectJavaVersionMigration() {
    super(ID);
  }

  public boolean doExecute(Project project) {
    com.intellij.openapi.project.Project ideaProject = ProjectHelper.toIdeaProject(project);
    if (project == null) {
      return false;
    }
    CompilerSettingsComponent compilerSettingsComponent = CompilerSettingsComponent.getInstance(ideaProject);
    if (compilerSettingsComponent == null) {
      return false;
    }
    if (compilerSettingsComponent.getState().getTargetVersion() == null) {
      CompilerSettingsComponent.CompilerState state = new CompilerSettingsComponent.CompilerState();
      state.setTargetVersion(JavaCompilerOptionsComponent.JavaVersion.VERSION_1_6.getCompilerVersion());
      compilerSettingsComponent.loadState(state);
    }
    return true;
  }
  public String getDescription() {
    return "Set project java version to 1.6";
  }
  @Override
  public void applyToCreatedProject(Project project) {
    super.applyToCreatedProject(project);
  }
  public void disposeComponent() {
    ProjectMigrationsRegistry.getInstance().removeProjectMigration(this);
  }
  public void initComponent() {
    ProjectMigrationsRegistry.getInstance().addProjectMigration(this);
  }
  @NonNls
  @NotNull
  public String getComponentName() {
    return "Java Version Migration";
  }
}
