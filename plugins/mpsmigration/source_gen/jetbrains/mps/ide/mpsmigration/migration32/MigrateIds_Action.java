package jetbrains.mps.ide.mpsmigration.migration32;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.DefaultSModel;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.LazySModel;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MigrateIds_Action extends BaseAction {
  private static final Icon ICON = null;
  public MigrateIds_Action() {
    super("Migrate from Names to Ids", "Concept/property/reference/link/language id", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "MigrateIds", t);
      }
      this.disable(event.getPresentation());
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      Iterable<SModule> modules = ((MPSProject) MapSequence.fromMap(_params).get("project")).getModulesWithGenerators();
      Iterable<DefaultSModelDescriptor> models = Sequence.fromIterable(modules).translate(new ITranslator2<SModule, SModel>() {
        public Iterable<SModel> translate(SModule it) {
          return it.getModels();
        }
      }).ofType(DefaultSModelDescriptor.class).where(new IWhereFilter<DefaultSModelDescriptor>() {
        public boolean accept(DefaultSModelDescriptor it) {
          return it.getSModelInternal() instanceof DefaultSModel && as_fu9gb8_a0a0a0a0a0a0a0b0a0f(it.getSModelInternal(), DefaultSModel.class).getPersistenceVersion() < 9;
        }
      });
      Sequence.fromIterable(models).visitAll(new IVisitor<DefaultSModelDescriptor>() {
        public void visit(DefaultSModelDescriptor it) {
          it.load();
        }
      });

      // do not migrate test refactoring models 
      models = Sequence.fromIterable(models).subtract(Sequence.fromIterable(models).where(new IWhereFilter<DefaultSModelDescriptor>() {
        public boolean accept(DefaultSModelDescriptor it) {
          SModuleReference mr = it.getModule().getModuleReference();
          return mr.equals(PersistenceFacade.getInstance().createModuleReference("343e2a8b-449f-45b3-9da8-1463945cb208(testRefactoring)")) || mr.equals(PersistenceFacade.getInstance().createModuleReference("7bb4f305-7fb7-495b-be9c-5777cd6ab9d6(testRefactoringTargetLang)")) || mr.equals(PersistenceFacade.getInstance().createModuleReference("343e2a8b-449f-45b3-9da8-1463945cb208(testRefactoring)")) || mr.equals(PersistenceFacade.getInstance().createModuleReference("24106442-1955-413a-8c2b-cc6969a4b149(testRefactoring.sandbox)"));
        }
      }));

      Sequence.fromIterable(models).visitAll(new IVisitor<DefaultSModelDescriptor>() {
        public void visit(DefaultSModelDescriptor model) {
          LazySModel innerModel = model.getSModelInternal();
          if (innerModel instanceof DefaultSModel) {
            ((DefaultSModel) innerModel).setPersistenceVersion(9);
          }
          model.setChanged(true);
          model.save();
        }
      });
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "MigrateIds", t);
      }
    }
  }
  protected static Logger LOG = LogManager.getLogger(MigrateIds_Action.class);
  private static <T> T as_fu9gb8_a0a0a0a0a0a0a0b0a0f(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
