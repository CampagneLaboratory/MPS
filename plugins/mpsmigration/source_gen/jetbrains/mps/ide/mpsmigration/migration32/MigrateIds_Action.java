package jetbrains.mps.ide.mpsmigration.migration32;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.smodel.DebugRegistryUtil;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.DefaultSModel;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.adapter.IdHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.LazySModel;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MigrateIds_Action extends BaseAction {
  private static final Icon ICON = null;
  public MigrateIds_Action() {
    super("Migrate from Names to Ids", "Concept/property/reference/link/language id", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "MigrateIds", t);
      }
      this.disable(event.getPresentation());
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      DebugRegistryUtil.fillDebugRegistry();
      Iterable<SModule> modules = ((MPSProject) MapSequence.fromMap(_params).get("project")).getModulesWithGenerators();
      Iterable<DefaultSModelDescriptor> models = Sequence.fromIterable(modules).translate(new ITranslator2<SModule, SModel>() {
        public Iterable<SModel> translate(SModule it) {
          return it.getModels();
        }
      }).ofType(DefaultSModelDescriptor.class).where(new IWhereFilter<DefaultSModelDescriptor>() {
        public boolean accept(DefaultSModelDescriptor it) {
          return it.getSModelInternal() instanceof DefaultSModel && as_fu9gb8_a0a0a0a0a0a0a0a2a0a5(it.getSModelInternal(), DefaultSModel.class).getPersistenceVersion() < 9;
        }
      }).where(new IWhereFilter<DefaultSModelDescriptor>() {
        public boolean accept(DefaultSModelDescriptor it) {
          return !(it.isReadOnly());
        }
      });
      Sequence.fromIterable(models).visitAll(new IVisitor<DefaultSModelDescriptor>() {
        public void visit(final DefaultSModelDescriptor model) {
          List<SModuleReference> impLangs = model.importedLanguages();
          ListSequence.fromList(impLangs).visitAll(new IVisitor<SModuleReference>() {
            public void visit(SModuleReference lang) {
              model.addLanguageId(IdHelper.getLanguageId(lang.getModuleId()), 0);
            }
          });
          // concept ids 
          ListSequence.fromList(SModelOperations.getNodes(((SModel) model), null)).visitAll(new IVisitor<SNode>() {
            public void visit(SNode it) {
              ((jetbrains.mps.smodel.SNode) it).setConcept(
                  IdHelper.getConceptId((jetbrains.mps.smodel.SNode) (SNode) SNodeOperations.getConceptDeclaration(it)));
            }
          });
          // node role ids 
          ListSequence.fromList(SModelOperations.getNodes(((SModel) model), null)).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SNodeOperations.getParent(it) != null;
            }
          }).visitAll(new IVisitor<SNode>() {
            public void visit(SNode it) {
              SContainmentLink rid = IdHelper.getNodeRoleId((jetbrains.mps.smodel.SNode) (SNode) SNodeOperations.getContainingLinkDeclaration(it));
              ((jetbrains.mps.smodel.SNode) it).setRoleInParent_byId(rid);
            }
          });
          // ref role ids 
          ListSequence.fromList(SModelOperations.getNodes(((SModel) model), null)).translate(new ITranslator2<SNode, SReference>() {
            public Iterable<SReference> translate(SNode it) {
              return ((Iterable<SReference>) ((SNode) it).getReferences());
            }
          }).visitAll(new IVisitor<SReference>() {
            public void visit(SReference it) {
              SReference sref = it;
              assert sref instanceof jetbrains.mps.smodel.SReference;
              SReferenceLink rid = IdHelper.getRefRoleId((jetbrains.mps.smodel.SNode) (SNode) SLinkOperations.findLinkDeclaration(((SReference) it)));
              ((jetbrains.mps.smodel.SReference) sref).setRoleId_direct(rid);
            }
          });
          // property ids 
          ListSequence.fromList(SModelOperations.getNodes(((SModel) model), null)).visitAll(new IVisitor<SNode>() {
            public void visit(final SNode node) {
              Set<String> propNames = ((jetbrains.mps.smodel.SNode) node).getPropertyNames();
              SetSequence.fromSet(propNames).visitAll(new IVisitor<String>() {
                public void visit(String pName) {
                  SProperty pid = IdHelper.getPropId((jetbrains.mps.smodel.SNode) (SNode) BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), ((SNode) SNodeOperations.getConceptDeclaration(node)), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", "call_findPropertyDeclaration_1219835742593", new Object[]{pName}));
                  ((jetbrains.mps.smodel.SNode) node).setProperty_byId(pid, ((jetbrains.mps.smodel.SNode) node).getProperty(pName));
                }
              });
            }
          });

        }
      });
      Sequence.fromIterable(models).visitAll(new IVisitor<DefaultSModelDescriptor>() {
        public void visit(DefaultSModelDescriptor model) {
          if (model.getModule().getModuleName().equals("testRefactoring") || model.getModule().getModuleName().equals("testRefactoringTargetLang") || model.getModule().getModuleName().equals("testRefactoring.sandbox")) {
            return;
          }
          LazySModel innerModel = model.getSModelInternal();
          if (innerModel instanceof DefaultSModel) {
            ((DefaultSModel) innerModel).setPersistenceVersion(9);
          }
          model.save();
        }
      });
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "MigrateIds", t);
      }
    }
  }
  protected static Logger LOG = LogManager.getLogger(MigrateIds_Action.class);
  private static <T> T as_fu9gb8_a0a0a0a0a0a0a0a2a0a5(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
