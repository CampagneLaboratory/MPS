package jetbrains.mps.ide.mpsmigration.v33;

/*Generated by MPS */

import jetbrains.mps.migration.global.BaseProjectMigration;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.persistence.ModelFactory;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.persistence.PersistenceRegistry;
import jetbrains.mps.persistence.FilePerRootModelPersistence;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.lang.smodel.query.runtime.CommandUtil;
import jetbrains.mps.lang.smodel.query.runtime.QueryExecutionContext;
import jetbrains.mps.persistence.PersistenceVersionAware;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.model.EditableSModel;

public class Persistence8Elimination extends BaseProjectMigration {
  public static final String ID = "jetbrains.mps.v8_elimination";

  public Persistence8Elimination() {
    super(Persistence8Elimination.ID);
  }
  @Override
  public String getDescription() {
    return "Migrate v8 models";
  }
  @Override
  public boolean doExecute(Project p) {
    final ModelFactory defaultModelFactory = PersistenceFacade.getInstance().getDefaultModelFactory();
    final ModelFactory perRootModelFactory = PersistenceRegistry.getInstance().getFolderModelFactory(FilePerRootModelPersistence.FACTORY_ID);

    {
      final SearchScope scope = CommandUtil.createScope(p);
      QueryExecutionContext context = new QueryExecutionContext() {
        public SearchScope getDefaultSearchScope() {
          return scope;
        }
      };
      Iterable<PersistenceVersionAware> models = Sequence.fromIterable(CommandUtil.models(CommandUtil.createConsoleScope(null, false, context))).ofType(PersistenceVersionAware.class).where(new IWhereFilter<PersistenceVersionAware>() {
        public boolean accept(PersistenceVersionAware it) {
          return it.getPersistenceVersion() < 9;
        }
      }).where(new IWhereFilter<PersistenceVersionAware>() {
        public boolean accept(PersistenceVersionAware it) {
          return it.getModelFactory() == defaultModelFactory || it.getModelFactory() == perRootModelFactory;
        }
      });

      Sequence.fromIterable(models).visitAll(new IVisitor<PersistenceVersionAware>() {
        public void visit(PersistenceVersionAware model) {
          model.load();
          model.setPersistenceVersion(9);
          ((EditableSModel) model).setChanged(true);
          ((EditableSModel) model).save();
        }
      });
    }
    return true;
  }
}
