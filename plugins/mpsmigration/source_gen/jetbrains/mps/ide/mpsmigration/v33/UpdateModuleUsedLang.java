package jetbrains.mps.ide.mpsmigration.v33;

/*Generated by MPS */

import jetbrains.mps.migration.global.BaseProjectMigration;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.extapi.module.EditableSModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.internal.collections.runtime.IVisitor;

/**
 * With module's used languages being derived from owned models, no need to keep used languages in module descriptors.
 * This migration cleans used languages in descriptors and forcefully updates recorded versions of used languages (part of save for changed module)
 * 
 * @since 3.3
 */
public final class UpdateModuleUsedLang extends BaseProjectMigration {
  public UpdateModuleUsedLang() {
    super(UpdateModuleUsedLang.class.getName());
  }

  public boolean doExecute(Project project) {
    Iterable<? extends SModule> modulesWithGenerators = project.getModulesWithGenerators();
    Iterable<EditableSModule> modules = Sequence.fromIterable(modulesWithGenerators).ofType(EditableSModule.class).where(new IWhereFilter<EditableSModule>() {
      public boolean accept(EditableSModule it) {
        return !(it.isReadOnly());
      }
    });
    Sequence.fromIterable(modules).ofType(AbstractModule.class).visitAll(new IVisitor<AbstractModule>() {
      public void visit(AbstractModule it) {
        it.getModuleDescriptor().getUsedLanguages().clear();
        it.setChanged();
      }
    });
    project.getRepository().saveAll();
    return true;
  }

  public String getDescription() {
    return "Update used languages in modules";
  }
}
