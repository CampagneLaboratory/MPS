package jetbrains.mps.ide.mpsmigration.migration31;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.ide.findusages.model.scopes.ProjectScope;
import jetbrains.mps.project.MPSProject;
import java.util.Collections;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MigrateOldIScopeParameter_Action extends BaseAction {
  private static final Icon ICON = null;

  public MigrateOldIScopeParameter_Action() {
    super("Migrate Old IScope Parameter in Model Operations", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "MigrateOldIScopeParameter", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      SAbstractConcept concept1 = SConceptRepository.getInstance().getConcept("jetbrains.mps.lang.smodel.structure.Model_RootsIncludingImportedOperation");
      Set<SNode> instances1 = FindUsagesManager.getInstance().findInstances(new ProjectScope(((MPSProject) MapSequence.fromMap(_params).get("project"))), Collections.singleton(concept1), false, new EmptyProgressMonitor());
      Sequence.fromIterable(SNodeOperations.ofConcept(instances1, "jetbrains.mps.lang.smodel.structure.Model_RootsIncludingImportedOperation")).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(SNodeOperations.getModel(it).isReadOnly());
        }
      }).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (SLinkOperations.getTarget(it, "scope", true) != null);
        }
      }).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SNodeOperations.deleteNode(SLinkOperations.getTarget(it, "scope", true));
        }
      });

      SAbstractConcept concept2 = SConceptRepository.getInstance().getConcept("jetbrains.mps.lang.smodel.structure.Model_NodesIncludingImportedOperation");
      Set<SNode> instances2 = FindUsagesManager.getInstance().findInstances(new ProjectScope(((MPSProject) MapSequence.fromMap(_params).get("project"))), Collections.singleton(concept2), false, new EmptyProgressMonitor());
      Sequence.fromIterable(SNodeOperations.ofConcept(instances2, "jetbrains.mps.lang.smodel.structure.Model_NodesIncludingImportedOperation")).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(SNodeOperations.getModel(it).isReadOnly());
        }
      }).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (SLinkOperations.getTarget(it, "scope", true) != null);
        }
      }).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SNodeOperations.deleteNode(SLinkOperations.getTarget(it, "scope", true));
        }
      });

      SAbstractConcept concept3 = SConceptRepository.getInstance().getConcept("jetbrains.mps.lang.smodel.structure.Concept_GetAllSubConcepts");
      Set<SNode> instances3 = FindUsagesManager.getInstance().findInstances(new ProjectScope(((MPSProject) MapSequence.fromMap(_params).get("project"))), Collections.singleton(concept3), false, new EmptyProgressMonitor());
      Sequence.fromIterable(SNodeOperations.ofConcept(instances3, "jetbrains.mps.lang.smodel.structure.Concept_GetAllSubConcepts")).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(SNodeOperations.getModel(it).isReadOnly());
        }
      }).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SNodeOperations.deleteNode(SLinkOperations.getTarget(it, "scope", true));
        }
      });
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "MigrateOldIScopeParameter", t);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(MigrateOldIScopeParameter_Action.class);
}
