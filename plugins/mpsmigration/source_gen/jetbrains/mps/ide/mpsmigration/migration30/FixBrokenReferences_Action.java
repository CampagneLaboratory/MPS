package jetbrains.mps.ide.mpsmigration.migration30;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Priority;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.resolve.ResolverComponent;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.smodel.SModelRepository;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.IModule;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class FixBrokenReferences_Action extends BaseAction {
  private static final Icon ICON = null;

  public FixBrokenReferences_Action() {
    super("Fix broken references", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "FixBrokenReferences", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("iproject", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("iproject") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "FixBrokenReferences", t);
      }
    }
  }

  /*package*/ void checkModel(SModel model, IOperationContext operationContext, ProgressMonitor monitor, final Map<String, Object> _params) {
    if (model == null || model.getModule() == null) {
      return;
    }
    IScope scope = model.getModule().getScope();
    String title = "Checking " + SModelOperations.getModelName(model) + " for unresolved references...";
    monitor.start(title, 1);

    for (SNode node : ListSequence.fromList(SModelOperations.getNodes(model, null))) {
      if (monitor.isCanceled()) {
        break;
      }
      // Check for unresolved references 
      for (SReference ref : Sequence.fromIterable(SNodeOperations.getReferences(node))) {
        // do not fix generator macros ?? 
        // <node> 

        if (jetbrains.mps.util.SNodeOperations.getTargetNodeSilently(ref) == null) {
          ResolverComponent.getInstance().resolve(ref, operationContext);
        }
        SModelReference uid = ref.getTargetSModelReference();
        if (uid == null) {
          continue;
        }
        SModel descriptor = SModelRepository.getInstance().getModelDescriptor(uid);
        if (scope.getModelDescriptor(uid) == null && descriptor != null) {
          if (scope.getModelDescriptor(uid) == null && SModelRepository.getInstance().getModelDescriptor(uid) != null) {
            SModel sm = SModelRepository.getInstance().getModelDescriptor(uid);
            SModuleReference moduleReference = check_9fpjqh_a0b0a0h0c0f0a(check_9fpjqh_a0a1a0a7a2a5a0(sm));
            if (moduleReference == null) {
              continue;
            }
            SModule module = check_9fpjqh_a0d0a0h0c0f0a(model);
            if (module == null) {
              continue;
            }
            ((IModule) module).addDependency(moduleReference, false);
          }
        }
      }
    }
    monitor.done();
  }

  protected static Logger LOG = LogManager.getLogger(FixBrokenReferences_Action.class);

  private static SModuleReference check_9fpjqh_a0b0a0h0c0f0a(IModule checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModuleReference();
    }
    return null;
  }

  private static IModule check_9fpjqh_a0a1a0a7a2a5a0(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }

  private static IModule check_9fpjqh_a0d0a0h0c0f0a(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }
}
