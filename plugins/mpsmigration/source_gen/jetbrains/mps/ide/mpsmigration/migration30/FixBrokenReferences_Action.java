package jetbrains.mps.ide.mpsmigration.migration30;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Priority;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.resolve.ScopeResolver;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.model.SReference;
import java.util.HashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.GlobalOperationContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import jetbrains.mps.smodel.SModelRepository;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNodeReference;

public class FixBrokenReferences_Action extends BaseAction {
  private static final Icon ICON = null;

  public FixBrokenReferences_Action() {
    super("Fix broken references", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "FixBrokenReferences", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("ideaProject", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("ideaProject") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("modules", event.getData(MPSCommonDataKeys.MODULES));
    MapSequence.fromMap(_params).put("models", event.getData(MPSCommonDataKeys.MODELS));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      ScopeResolver resolver = new ScopeResolver();

      List<SModule> modulelist = (((List<SModule>) MapSequence.fromMap(_params).get("modules")) == null ?
        ((MPSProject) MapSequence.fromMap(_params).get("project")).getModulesWithGenerators() :
        ((List<SModule>) MapSequence.fromMap(_params).get("modules"))
      );
      List<SModel> modellist = (List<SModel>) ((((List<SModel>) MapSequence.fromMap(_params).get("models")) == null || ((List<SModel>) MapSequence.fromMap(_params).get("models")).isEmpty() ?
        ListSequence.fromList(modulelist).translate(new ITranslator2<SModule, SModel>() {
          public Iterable<SModel> translate(SModule it) {
            return it.getModels();
          }
        }).where(new IWhereFilter<SModel>() {
          public boolean accept(SModel m) {
            return SModelStereotype.isUserModel(m) && !(m.isReadOnly());
          }
        }).toListSequence() :
        ((List<SModel>) MapSequence.fromMap(_params).get("models"))
      ));

      // reporting: 
      Map<SNodePointer, Tuples._2<SReference, SReference>> resolvedR = MapSequence.fromMap(new HashMap<SNodePointer, Tuples._2<SReference, SReference>>());
      Map<SNodePointer, SReference> unresolvedR = MapSequence.fromMap(new HashMap<SNodePointer, SReference>());
      final Map<SNodePointer, Integer> counterR = MapSequence.fromMap(new HashMap<SNodePointer, Integer>());
      for (SModel model : ListSequence.fromList(modellist)) {
        if (LOG.isEnabledFor(Priority.WARN)) {
          LOG.warn("processing model " + SModelOperations.getModelName(model));
        }
        for (SNode node : ListSequence.fromList(SModelOperations.getNodes(model, null))) {
          for (final SReference ref : ListSequence.fromList(SNodeOperations.getReferences(node))) {
            if (jetbrains.mps.util.SNodeOperations.getTargetNodeSilently(ref) == null) {
              SNodePointer nptr = new SNodePointer(ref.getTargetSModelReference(), ref.getTargetNodeId());
              MapSequence.fromMap(counterR).put(nptr, (MapSequence.fromMap(counterR).get(nptr) == null ?
                1 :
                MapSequence.fromMap(counterR).get(nptr) + 1
              ));
              if (LOG.isEnabledFor(Priority.WARN)) {
                LOG.warn(" reference =" + FixBrokenReferences_Action.this.refInfo(ref, _params));
              }
              boolean r = resolver.resolve(ref, node, new GlobalOperationContext());
              SReference rref = ListSequence.fromList(SNodeOperations.getReferences(node)).findFirst(new IWhereFilter<SReference>() {
                public boolean accept(SReference r) {
                  return eq_g50bqp_a0a0a0a0a0a4a0a0a1a9a0a5(SLinkOperations.getRole(r), SLinkOperations.getRole(ref));
                }
              });
              if (r) {
                Tuples._2<SReference, SReference> result = MultiTuple.<SReference,SReference>from(ref, rref);
                if (MapSequence.fromMap(resolvedR).get(nptr) == null || eq_g50bqp_a0a1a5a0a0a1a9a0a5(MapSequence.fromMap(resolvedR).get(nptr), MultiTuple.<SReference,SReference>from(ref, rref))) {
                  MapSequence.fromMap(resolvedR).put(nptr, result);
                  if (LOG.isEnabledFor(Priority.WARN)) {
                    LOG.warn("resolved to=" + FixBrokenReferences_Action.this.refInfo(rref, _params));
                  }
                } else {
                  if (LOG.isEnabledFor(Priority.ERROR)) {
                    LOG.error("resolving differently: " + FixBrokenReferences_Action.this.refInfo(rref, _params));
                  }
                  if (LOG.isEnabledFor(Priority.ERROR)) {
                    LOG.error("  before was resolved: " + FixBrokenReferences_Action.this.refInfo(MapSequence.fromMap(resolvedR).get(nptr)._1(), _params));
                  }
                }
              } else {
                MapSequence.fromMap(unresolvedR).put(nptr, ref);
                if (LOG.isEnabledFor(Priority.ERROR)) {
                  LOG.error("unresolved =" + FixBrokenReferences_Action.this.refInfo(rref, _params));
                }
              }
            }
          }
        }
      }

      // reporting: 
      if (MapSequence.fromMap(unresolvedR).isNotEmpty()) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error(MapSequence.fromMap(unresolvedR).count() + " distinct references were not resolved:");
        }
        for (SReference ref : MapSequence.fromMap(unresolvedR).sort(new ISelector<IMapping<SNodePointer, SReference>, String>() {
          public String select(IMapping<SNodePointer, SReference> it) {
            return it.key().toString();
          }
        }, true).select(new ISelector<IMapping<SNodePointer, SReference>, SReference>() {
          public SReference select(IMapping<SNodePointer, SReference> it) {
            return it.value();
          }
        })) {
          if (LOG.isEnabledFor(Priority.ERROR)) {
            LOG.error(" reference =" + FixBrokenReferences_Action.this.refInfo(ref, _params) + "; source=" + ref.getSourceNode().getReference());
          }
        }
      }
      if (LOG.isEnabledFor(Priority.WARN)) {
        LOG.warn(MapSequence.fromMap(resolvedR).count() + " distinct references were resolved (total " + MapSequence.fromMap(resolvedR).select(new ISelector<IMapping<SNodePointer, Tuples._2<SReference, SReference>>, Integer>() {
          public Integer select(IMapping<SNodePointer, Tuples._2<SReference, SReference>> it) {
            return (MapSequence.fromMap(counterR).get(it.key()) == null ?
              0 :
              MapSequence.fromMap(counterR).get(it.key())
            );
          }
        }).foldLeft(0, new ILeftCombinator<Integer, Integer>() {
          public Integer combine(Integer s, Integer ri) {
            return s + ri;
          }
        }) + ")");
      }
      for (IMapping<SNodePointer, Tuples._2<SReference, SReference>> it : MapSequence.fromMap(resolvedR)) {
        if (LOG.isEnabledFor(Priority.WARN)) {
          LOG.warn(" ref (" + MapSequence.fromMap(counterR).get(it.key()) + ")=" + FixBrokenReferences_Action.this.refInfo(it.value()._0(), _params));
        }
        if (LOG.isEnabledFor(Priority.WARN)) {
          LOG.warn(" resolved to=" + FixBrokenReferences_Action.this.refInfo(it.value()._1(), _params));
        }
      }

      SModelRepository.getInstance().saveAll();
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "FixBrokenReferences", t);
      }
    }
  }

  /*package*/ String refInfo(SReference ref, final Map<String, Object> _params) {
    return check_9fpjqh_a0a0a0a0(ref) + " -- resolveInfo=" + SLinkOperations.getResolveInfo(ref) + "; role=" + SLinkOperations.getRole(ref);
  }

  protected static Logger LOG = LogManager.getLogger(FixBrokenReferences_Action.class);

  private static SNodeReference check_9fpjqh_a0a0a0a0(SReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getTargetNodeReference();
    }
    return null;
  }

  private static boolean eq_g50bqp_a0a0a0a0a0a4a0a0a1a9a0a5(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_g50bqp_a0a1a5a0a0a1a9a0a5(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
