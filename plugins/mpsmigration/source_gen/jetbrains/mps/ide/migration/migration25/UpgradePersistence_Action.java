package jetbrains.mps.ide.migration.migration25;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Priority;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.EditableSModel;
import org.jetbrains.mps.openapi.persistence.DataSource;
import jetbrains.mps.extapi.persistence.FileDataSource;
import jetbrains.mps.persistence.DefaultModelRoot;
import jetbrains.mps.util.FileUtil;
import org.jetbrains.mps.openapi.persistence.ModelFactory;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import java.io.IOException;

public class UpgradePersistence_Action extends BaseAction {
  private static final Icon ICON = null;

  public UpgradePersistence_Action() {
    super("Upgrade Persistence", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "UpgradePersistence", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(CommonDataKeys.PROJECT));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      Logger LOG = LogManager.getLogger("jetbrains.mps.ide.migration.UpgradePersistence_Action");

      final MPSProject mpsProject = ((Project) MapSequence.fromMap(_params).get("project")).getComponent(MPSProject.class);
      for (SModule module : mpsProject.getModulesWithGenerators()) {
        for (SModel model : module.getModels()) {
          if (!(model instanceof EditableSModel)) {
            continue;
          }
          DataSource source = model.getSource();
          if (!(source instanceof FileDataSource)) {
            continue;
          }
          FileDataSource fileSource = (FileDataSource) source;
          if (!(model.getModelRoot() instanceof DefaultModelRoot) || fileSource.isReadOnly()) {
            continue;
          }

          String ext = FileUtil.getExtension(fileSource.getFile().getName());
          ModelFactory factory = PersistenceFacade.getInstance().getModelFactory(ext);
          try {
            if (factory == null || !(factory.needsUpgrade(fileSource))) {
              continue;
            }

            boolean wasInitialized = model.isLoaded();
            if (wasInitialized) {
              ((EditableSModel) model).save();
            }

            factory.upgrade(fileSource);
            ((EditableSModel) model).reloadFromSource();

          } catch (IOException ex) {
            LOG.error(null, ex);
          }
        }
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "UpgradePersistence", t);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(UpgradePersistence_Action.class);
}
