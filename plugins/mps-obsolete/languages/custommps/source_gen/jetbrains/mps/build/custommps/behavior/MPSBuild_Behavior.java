package jetbrains.mps.build.custommps.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.build.packaging.behavior.AbstractProjectComponent_Behavior;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.build.packaging.behavior.Layout_Behavior;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.project.ModuleId;
import java.io.File;
import jetbrains.mps.util.PathManager;
import java.util.Properties;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import com.intellij.openapi.util.BuildNumber;
import java.io.IOException;

public class MPSBuild_Behavior {
  public static void init(SNode thisNode) {
    SLinkOperations.setTarget(thisNode, "pathToBuildToolsZip", null, true);
  }

  public static String virtual_getChildrenTargetDir_1237389224202(SNode thisNode) {
    return AbstractProjectComponent_Behavior.call_getPath_1213877333777(thisNode).getPath();
  }

  public static List<SNode> call_getPathToLibrary_1233680013340(SNode thisNode, SNode folder) {
    List<SNode> path = ListSequence.fromList(new LinkedList<SNode>());
    for (SNode currentComponent = folder; !(SNodeOperations.isInstanceOf(currentComponent, "jetbrains.mps.build.custommps.structure.MPSBuild")); currentComponent = SNodeOperations.cast(SNodeOperations.getParent(currentComponent), "jetbrains.mps.build.packaging.structure.AbstractProjectComponent")) {
      ListSequence.fromList(path).insertElement(0, SLinkOperations.getTarget(folder, "title", true));
    }
    return path;
  }

  public static boolean virtual_acceptFiles_1262430001741497846(SConcept thisConcept) {
    return true;
  }

  public static String getMPSBuildToolsZipName_1234294616845() {
    return "MPS-buildTools.zip";
  }

  public static String getUnpackBuildToolsPropertyName_4738159245302641872() {
    if (MPSBuild_Behavior.isInMPSBuild_1239995424995()) {
      return "build_tools";
    }
    return Layout_Behavior.getScriptsDirName_462257719548547202();
  }

  public static boolean isInCustomMPSLanguage_1238403397946(IOperationContext operationContext) {
    Language language = ModuleRepositoryFacade.getInstance().getModule("jetbrains.mps.build.custommps", Language.class);
    ModuleId moduleId = operationContext.getModule().getModuleReference().getModuleId();
    if (moduleId == null) {
      return false;
    }
    return moduleId.equals(language.getModuleReference().getModuleId());
  }

  public static boolean isInMPSBuild_1239995424995() {
    // we return true in case of doubt to minimize the risk of mistakes 

    String buildNumberProperty = "build.number";
    File buildNumberFile = new File(PathManager.getHomePath(), buildNumberProperty);
    if (!(buildNumberFile.exists())) {
      return true;
    }
    Properties properties = new Properties();
    try {
      properties.load(new BufferedInputStream(new FileInputStream(buildNumberFile)));

      BuildNumber runningBuild = BuildNumber.fromString(properties.getProperty(buildNumberProperty));
      return !(runningBuild.isSnapshot());
    } catch (IOException e) {
      return true;
    }
  }
}
