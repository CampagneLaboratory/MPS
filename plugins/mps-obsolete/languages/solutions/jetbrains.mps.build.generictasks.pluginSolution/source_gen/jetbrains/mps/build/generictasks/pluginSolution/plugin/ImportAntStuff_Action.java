package jetbrains.mps.build.generictasks.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.Language;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.build.generictasks.taskfromjar.Generator;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.logging.Logger;

public class ImportAntStuff_Action extends BaseAction {
  private static final Icon ICON = null;

  public ImportAntStuff_Action() {
    super("Import Ant Stuff", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return (((IModule) MapSequence.fromMap(_params).get("module")) instanceof Language) && (((IModule) MapSequence.fromMap(_params).get("module")).getModuleName().contains("jetbrains.mps.build.generictasks"));
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ImportAntStuff", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("module", event.getData(MPSCommonDataKeys.MODULE));
    if (MapSequence.fromMap(_params).get("module") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      Language language = ModuleRepositoryFacade.getInstance().getModule("jetbrains.mps.build.generictasks", Language.class);
      ImportAntStuff_Action.this.importTasks(language, SModelRepository.getInstance().getModelDescriptor(new SModelReference("jetbrains.mps.build.generictasks.generated", "")), Generator.Modes.CORE, _params);
      ImportAntStuff_Action.this.importTasks(language, SModelRepository.getInstance().getModelDescriptor(new SModelReference("jetbrains.mps.build.generictasks.optional", "")), Generator.Modes.JUNIT, _params);
      LOG.info("Import completed.");
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ImportAntStuff", t);
    }
  }

  private void importTasks(Language l, SModel model, Generator.Modes m, final Map<String, Object> _params) {
    assert model != null;
    new Generator().generateTasks(model, m, new SModel[]{SModelRepository.getInstance().getModelDescriptor(new SModelReference("jetbrains.mps.build.generictasks.generated", "")), SModelRepository.getInstance().getModelDescriptor(new SModelReference("jetbrains.mps.build.generictasks.optional", ""))});
  }

  private static Logger LOG = Logger.getLogger(ImportAntStuff_Action.class);
}
