package jetbrains.mps.build.deprecated.execution;

/*Generated by MPS */

import jetbrains.mps.ant.execution.ChildChoosePanel;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class TargetChoosePanel extends ChildChoosePanel<SNode, SNode> {
  public TargetChoosePanel() {
    super("Target:");
  }

  @Override
  public List<SNode> getChildrenNodes(SNode node) {
    return SLinkOperations.getTargets(node, "target", true);
  }

  @Override
  protected String selectFromChangedNode(final SNode node) {
    final Wrappers._T<String> child = new Wrappers._T<String>(null);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        if ((SLinkOperations.getTarget(node, "default", true) != null) && (SLinkOperations.getTarget(SLinkOperations.getTarget(node, "default", true), "targetDeclaration", false) != null)) {
          child.value = ((SNode) SLinkOperations.getTarget(SLinkOperations.getTarget(node, "default", true), "targetDeclaration", false)).getNodeId().toString();
        } else {
          List<SNode> childrenNodes = getChildrenNodes(node);
          if (childrenNodes != null && ListSequence.fromList(childrenNodes).isNotEmpty()) {
            child.value = ((SNode) ListSequence.fromList(childrenNodes).first()).getNodeId().toString();
          }
        }
      }
    });
    return child.value;
  }
}
