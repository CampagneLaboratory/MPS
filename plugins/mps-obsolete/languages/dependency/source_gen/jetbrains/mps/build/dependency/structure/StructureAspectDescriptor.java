package jetbrains.mps.build.dependency.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("jetbrains.mps.build.dependency.structure.Cycle").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"moduleDescription", "dependency", "classpath"}, new boolean[]{true, true, true}).create();
      case 1:
        return new ConceptDescriptorBuilder("jetbrains.mps.build.dependency.structure.CycleReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("cycle").create();
      case 2:
        return new ConceptDescriptorBuilder("jetbrains.mps.build.dependency.structure.Macros").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
      case 3:
        return new ConceptDescriptorBuilder("jetbrains.mps.build.dependency.structure.ModuleDescription").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("includeResources", "excludeResources").children(new String[]{"sources", "classes", "classpath"}, new boolean[]{true, false, true}).create();
      case 4:
        return new ConceptDescriptorBuilder("jetbrains.mps.build.dependency.structure.PathHolder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("path").references("macro").create();
      case 5:
        return new ConceptDescriptorBuilder("jetbrains.mps.build.dependency.structure.ProjectDescription").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("basedir", "propertiesFile").children(new String[]{"cycle", "commonClasspath", "macro"}, new boolean[]{true, true, true}).create();
      case 6:
        return new ConceptDescriptorBuilder("jetbrains.mps.build.dependency.structure.ProjectDescriptionReference").super_("jetbrains.mps.buildlanguage.structure.ImportProject").parents("jetbrains.mps.buildlanguage.structure.ImportProject").references("description").alias("description reference", "").create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"jetbrains.mps.build.dependency.structure.Cycle", "jetbrains.mps.build.dependency.structure.CycleReference", "jetbrains.mps.build.dependency.structure.Macros", "jetbrains.mps.build.dependency.structure.ModuleDescription", "jetbrains.mps.build.dependency.structure.PathHolder", "jetbrains.mps.build.dependency.structure.ProjectDescription", "jetbrains.mps.build.dependency.structure.ProjectDescriptionReference"};
}
