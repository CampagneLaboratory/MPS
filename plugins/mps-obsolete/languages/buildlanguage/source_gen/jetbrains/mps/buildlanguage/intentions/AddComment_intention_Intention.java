package jetbrains.mps.buildlanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class AddComment_intention_Intention extends BaseIntention {
  public AddComment_intention_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.buildlanguage.structure.ICommented";
  }

  public String getPresentation() {
    return "AddComment_intention";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.buildlanguage.intentions.AddComment_intention_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:c1099965-735e-400d-8a56-859e7cf98ba9(jetbrains.mps.buildlanguage.intentions@1_0)", "1201260187613");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Add Comment for " + (((SConceptPropertyOperations.getString(node, "alias") != null) ?
      SConceptPropertyOperations.getString(node, "alias") :
      "Node"
    )) + " " + ((SPropertyOperations.getString(node, "name") != null) ?
      SPropertyOperations.getString(node, "name") :
      ""
    );
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SPropertyOperations.getString(node, "shortDescription") == null;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SPropertyOperations.set(node, "shortDescription", "");
  }
}
