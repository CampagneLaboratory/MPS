package jetbrains.mps.buildlanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class CreateNormalPropertyFromExternal_intention_Intention extends BaseIntention {
  public CreateNormalPropertyFromExternal_intention_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.buildlanguage.structure.ExternalPropertyDeclaration";
  }

  public String getPresentation() {
    return "CreateNormalPropertyFromExternal_intention";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.buildlanguage.intentions.CreateNormalPropertyFromExternal_intention_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895904c5(jetbrains.mps.buildlanguage.intentions)", "1219149486459");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Transform External Property to Ordinary Property";
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode property = SNodeFactoryOperations.createNewNode("jetbrains.mps.buildlanguage.structure.PropertyDeclaration", null);
    SLinkOperations.setTarget(property, "type", SLinkOperations.getTarget(node, "type", true), true);
    SPropertyOperations.set(property, "name", SPropertyOperations.getString(node, "name"));
    SNodeOperations.replaceWithAnother(node, property);
  }
}
