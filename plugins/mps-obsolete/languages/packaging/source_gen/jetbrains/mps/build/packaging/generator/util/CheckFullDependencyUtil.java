package jetbrains.mps.build.packaging.generator.util;

/*Generated by MPS */

import java.util.Map;

import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import com.intellij.ide.plugins.IdeaPluginDescriptor;
import com.intellij.openapi.extensions.PluginId;
import jetbrains.mps.build.packaging.behavior.Plugin_Behavior;
import com.intellij.ide.plugins.PluginManager;
import java.util.Collection;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.smodel.Generator;

public class CheckFullDependencyUtil {
  public CheckFullDependencyUtil() {
  }

  public static Map<SModule, Iterable<SModule>> checkFullDependency(final Map<SModule, SNode> modules) {
    Map<SModule, Iterable<SModule>> missingDependencyResult = MapSequence.fromMap(new LinkedHashMap<SModule, Iterable<SModule>>(16, (float) 0.75, false));

    Set<SModule> coreModules = SetSequence.fromSet(new HashSet<SModule>());
    SetSequence.fromSet(coreModules).addSequence(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()).where(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return (getContainingPlugin(MapSequence.fromMap(modules).get(it)) == null);
      }
    }));

    // check core modules dependency 
    for (SModule module : SetSequence.fromSet(coreModules)) {
      List<SModule> dependencyToCheck = CheckFullDependencyUtil.getDependencyToCheck(module);
      Iterable<SModule> missingDependency = ListSequence.fromList(dependencyToCheck).subtract(SetSequence.fromSet(coreModules));
      if (Sequence.fromIterable(missingDependency).isNotEmpty()) {
        MapSequence.fromMap(missingDependencyResult).put(module, missingDependency);
      }
    }

    Set<SModule> pluginModules = SetSequence.fromSet(new HashSet<SModule>());
    SetSequence.fromSet(pluginModules).addSequence(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()).where(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return (getContainingPlugin(MapSequence.fromMap(modules).get(it)) != null);
      }
    }));

    // check plugin modules dependency 
    for (SModule module : SetSequence.fromSet(pluginModules)) {
      List<SModule> dependencyToCheck = CheckFullDependencyUtil.getDependencyToCheck(module);
      Iterable<SModule> missingDependency = ListSequence.fromList(dependencyToCheck).subtract(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()));
      if (Sequence.fromIterable(missingDependency).isNotEmpty()) {
        MapSequence.fromMap(missingDependencyResult).put(module, missingDependency);
      }
    }

    return missingDependencyResult;
  }

  public static Map<SNode, Iterable<SNode>> checkFullPuginDependency(final Map<SModule, SNode> modules) {
    Map<SNode, Iterable<SNode>> result = MapSequence.fromMap(new LinkedHashMap<SNode, Iterable<SNode>>(16, (float) 0.75, false));

    final Set<SModule> pluginModules = SetSequence.fromSet(new HashSet<SModule>());
    SetSequence.fromSet(pluginModules).addSequence(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()).where(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return (getContainingPlugin(MapSequence.fromMap(modules).get(it)) != null);
      }
    }));


    Map<SNode, List<SModule>> plugins = MapSequence.fromMap(new LinkedHashMap<SNode, List<SModule>>(16, (float) 0.75, false));
    for (SModule pluginModule : SetSequence.fromSet(pluginModules)) {
      SNode containingPlugin = getContainingPlugin(MapSequence.fromMap(modules).get(pluginModule));
      if (MapSequence.fromMap(plugins).get(containingPlugin) == null) {
        MapSequence.fromMap(plugins).put(containingPlugin, ListSequence.fromList(new ArrayList<SModule>()));
      }
      ListSequence.fromList(MapSequence.fromMap(plugins).get(containingPlugin)).addElement(pluginModule);
    }

    for (final SNode plugin : SetSequence.fromSet(MapSequence.fromMap(plugins).keySet())) {
      Iterable<SNode> dependency = ListSequence.fromList(MapSequence.fromMap(plugins).get(plugin)).translate(new ITranslator2<SModule, SModule>() {
        public Iterable<SModule> translate(SModule it) {
          return ListSequence.fromList(getDependencyToCheck(it)).intersect(SetSequence.fromSet(pluginModules));
        }
      }).select(new ISelector<SModule, SNode>() {
        public SNode select(SModule it) {
          return getContainingPlugin(MapSequence.fromMap(modules).get(it));
        }
      }).distinct();
      Iterable<SNode> missing = Sequence.fromIterable(dependency).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(isDependent(plugin, it));
        }
      });
      if (Sequence.fromIterable(missing).isNotEmpty()) {
        MapSequence.fromMap(result).put(plugin, missing);
      }
    }

    return result;
  }

  public static SNode getContainingPlugin(SNode node) {
    return SNodeOperations.getAncestor(node, "jetbrains.mps.build.packaging.structure.IPlugin", false, false);
  }

  public static boolean isDependent(SNode plugin, SNode dependency) {
    if (eq_qp5jua_a0a0e(plugin, dependency)) {
      return true;
    }
    return ListSequence.fromList(getDependency(plugin)).contains(getId(dependency));
  }

  private static List<String> getDependency(SNode plugin) {
    if (!(SNodeOperations.isInstanceOf(plugin, "jetbrains.mps.build.packaging.structure.Plugin"))) {
      return BehaviorReflection.invokeVirtual((Class<List<String>>) ((Class) Object.class), plugin, "virtual_getDependency_3033860308390155295", new Object[]{});
    }
    IdeaPluginDescriptor descriptor = CheckFullDependencyUtil.findIdeaPlugin(plugin);
    if (descriptor == null) {
      return BehaviorReflection.invokeVirtual((Class<List<String>>) ((Class) Object.class), plugin, "virtual_getDependency_3033860308390155295", new Object[]{});
    }

    return Sequence.fromIterable(Sequence.fromArray(descriptor.getDependentPluginIds())).select(new ISelector<PluginId, String>() {
      public String select(PluginId it) {
        return it.getIdString();
      }
    }).toListSequence();
  }

  public static String getId(SNode plugin) {
    if (!(SNodeOperations.isInstanceOf(plugin, "jetbrains.mps.build.packaging.structure.Plugin"))) {
      return BehaviorReflection.invokeVirtual(String.class, plugin, "virtual_getId_3033860308390151510", new Object[]{});
    }
    IdeaPluginDescriptor descriptor = CheckFullDependencyUtil.findIdeaPlugin(plugin);
    if (descriptor == null) {
      return BehaviorReflection.invokeVirtual(String.class, plugin, "virtual_getId_3033860308390151510", new Object[]{});
    }

    return descriptor.getPluginId().getIdString();
  }

  private static IdeaPluginDescriptor findIdeaPlugin(SNode plugin) {
    SNode ideaPlugin = SNodeOperations.cast(plugin, "jetbrains.mps.build.packaging.structure.Plugin");
    final String pluginName = Plugin_Behavior.call_getPluginName_6278136257391573773(ideaPlugin);

    return Sequence.fromIterable(Sequence.fromArray(PluginManager.getPlugins())).findFirst(new IWhereFilter<IdeaPluginDescriptor>() {
      public boolean accept(IdeaPluginDescriptor it) {
        return it.getPath().getAbsolutePath().endsWith(pluginName);
      }
    });
  }

  private static List<SModule> getDependencyToCheck(SModule module) {
    List<SModule> dependencyToCheck = ListSequence.fromList(new ArrayList<SModule>());
    Collection<SModule> dependency = new GlobalModuleDependenciesManager(module).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE);
    if (module instanceof DevKit) {
      dependency.addAll(((DevKit) module).getAllExportedLanguages());
      dependency.addAll(((DevKit) module).getAllExportedSolutions());
      dependency.addAll(((DevKit) module).getAllExtendedDevkits());
    }
    ListSequence.fromList(dependencyToCheck).addSequence(CollectionSequence.fromCollection(dependency));
    return ListSequence.fromList(dependencyToCheck).where(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return !(it instanceof Generator) && !(it.isPackaged()) && ((AbstractModule) it).getDescriptorFile() != null;
      }
    }).toListSequence();
  }

  private static boolean eq_qp5jua_a0a0e(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
