package jetbrains.mps.build.packaging.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.model.SNodeReference;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import jetbrains.mps.intentions.IntentionDescriptor;

public class CreateNewTarget_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public CreateNewTarget_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.build.packaging.structure.Antcall";
  }

  public String getPresentation() {
    return "CreateNewTarget";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.build.packaging.intentions.CreateNewTarget_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SLinkOperations.getTarget(node, "project", false) != null) && (SLinkOperations.getTarget(node, "targetDeclaration", false) == null);
  }

  public SNodeReference getIntentionNodeReference() {
    return new jetbrains.mps.smodel.SNodePointer("r:e0c736f5-141d-492a-8ea5-d9cfc3978a00(jetbrains.mps.build.packaging.intentions)", "1228400780252");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new CreateNewTarget_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Create New Target in Project " + SLinkOperations.getTarget(node, "project", false);
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode targetDeclaration = SNodeFactoryOperations.createNewNode("jetbrains.mps.buildlanguage.structure.TargetDeclaration", null);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "project", false), "target", true)).addElement(targetDeclaration);
      SLinkOperations.setTarget(node, "targetDeclaration", targetDeclaration, false);

      NavigationSupport.getInstance().openNode(editorContext.getOperationContext(), targetDeclaration, true, true);
    }

    public IntentionDescriptor getDescriptor() {
      return CreateNewTarget_Intention.this;
    }
  }
}
