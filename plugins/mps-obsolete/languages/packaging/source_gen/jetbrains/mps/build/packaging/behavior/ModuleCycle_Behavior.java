package jetbrains.mps.build.packaging.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import java.util.Set;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.project.facets.JavaModuleOperations;
import jetbrains.mps.reloading.CommonPaths;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.io.File;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class ModuleCycle_Behavior {
  public static void init(SNode thisNode) {
  }

  public static String call_getBasedir_1218647622991(SNode thisNode) {
    return BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getAncestor(thisNode, "jetbrains.mps.build.packaging.structure.Layout", true, true), "virtual_getPath_1234976932856", new Object[]{});
  }

  public static List<SNode> call_getClassPath_1218646038565(SNode thisNode) {
    // collecting modules 
    Set<SModule> modules = SetSequence.fromSet(new HashSet<SModule>());
    for (SNode moduleRef : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "moduleReference", true))) {
      SModule module = Module_Behavior.call_getModule_1213877515148(SLinkOperations.getTarget(moduleRef, "module", false));
      SetSequence.fromSet(modules).addElement(module);
    }
    // getting classpath 
    Set<String> classpath = (Set<String>) JavaModuleOperations.collectCompileClasspath(modules, true);
    SetSequence.fromSet(classpath).removeSequence(ListSequence.fromList(CommonPaths.getJDKPath()));
    // creating path holders to use in generator 
    return ModuleCycle_Behavior.createPathHolders_1218716903754(SetSequence.fromSet(classpath).select(new ISelector<String, String>() {
      public String select(String it) {
        return (String) it.replace(File.separator, Util.SEPARATOR);
      }
    }), ModuleCycle_Behavior.call_getBasedir_1218647622991(thisNode), BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.getAncestor(thisNode, "jetbrains.mps.build.packaging.structure.IMacroHolder", true, true), "virtual_getMacro_1107726059764558743", new Object[]{}));
  }

  public static List<SNode> getMPSClassPath_1218716245482(String homePath, List<SNode> macro) {
    return ModuleCycle_Behavior.createPathHolders_1218716903754(ListSequence.fromList(ModuleUtil.retrieveClassPath(CommonPaths.getMPSClassPath())).select(new ISelector<String, String>() {
      public String select(String it) {
        return it.replace(File.separator, Util.SEPARATOR);
      }
    }), homePath, macro);
  }

  public static List<SNode> createPathHolders_1218716903754(Iterable<String> stringClasspath, String homePath, List<SNode> macro) {
    homePath = homePath.replace(File.separator, Util.SEPARATOR);
    List<SNode> pathHolders = new ArrayList<SNode>();
    for (String string : Sequence.fromIterable(stringClasspath)) {
      ListSequence.fromList(pathHolders).addElement(PathHolder_Behavior.createPathHolder_55204148067446946(string, macro, homePath, null));
    }
    return pathHolders;
  }
}
