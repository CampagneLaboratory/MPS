package jetbrains.mps.build.packaging.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.io.File;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class Layout_Behavior {
  public static void init(SNode thisNode) {
    Map<String, String> vars = MapSequence.fromMap(new HashMap<String, String>());
    MapSequence.fromMap(vars).put("basedir", "basedir");
    MapSequence.fromMap(vars).put("\\n", "line.separator");
    MapSequence.fromMap(vars).put("/", "file.separator");
    MapSequence.fromMap(vars).put(":", "path.separator");
    MapSequence.fromMap(vars).put("date", "DSTAMP");
    if (ListSequence.fromList(SLinkOperations.getTargets(thisNode, "configuration", true)).isEmpty()) {
      SLinkOperations.addChild(thisNode, "configuration", SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.Configuration", null));
    }
    SPropertyOperations.set(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "configuration", true)).first(), "name", "default");
    for (String s : SetSequence.fromSet(MapSequence.fromMap(vars).keySet())) {
      jetbrains.mps.smodel.SNode var = SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.Variable", null);
      SPropertyOperations.set(var, "name", s);
      SPropertyOperations.set(var, "antName", MapSequence.fromMap(vars).get(s));
      SLinkOperations.addChild(thisNode, "builtInVariable", var);
    }
    SPropertyOperations.set(thisNode, "compile", "" + (true));
    SLinkOperations.setTarget(thisNode, "deployDirectory", _quotation_createNode_g9j203_a0a01a0(Layout_Behavior.getBasedirName_1226509010730()), true);
    SLinkOperations.setTarget(thisNode, "scriptsDirectory", _quotation_createNode_g9j203_a0a11a0(Layout_Behavior.getBasedirName_1226509010730()), true);
  }

  public static String call_getFolderToGenerate_1229522949966(SNode thisNode) {
    return BehaviorReflection.invokeVirtual(File.class, SLinkOperations.getTarget(thisNode, "scriptsDirectory", true), "virtual_getFile_1233322718999", new Object[]{}).getAbsolutePath();
  }

  public static String virtual_evaluateMacro_1234975967990(SNode thisNode, String macroName) {
    if (macroName.equals(Layout_Behavior.getScriptsDirName_462257719548547202())) {
      return Path_Behavior.call_getFullPathWithoutMacro_1226511495568(SLinkOperations.getTarget(thisNode, "scriptsDirectory", true));
    }
    return BehaviorReflection.invokeSuper(String.class, thisNode, "jetbrains.mps.build.packaging.structure.IMacroHolder", "virtual_evaluateMacro_1234975967990", new Object[]{macroName});
  }

  public static List<String> virtual_getAllMacroNames_1234975567387(SNode thisNode, boolean addBasedir) {
    List<String> allMacroNames = BehaviorReflection.invokeSuper((Class<List<String>>) ((Class) Object.class), thisNode, "jetbrains.mps.build.packaging.structure.IMacroHolder", "virtual_getAllMacroNames_1234975567387", new Object[]{addBasedir});
    ListSequence.fromList(allMacroNames).addElement(Layout_Behavior.getScriptsDirName_462257719548547202());
    return allMacroNames;
  }

  public static String virtual_getPath_1234976932856(SNode thisNode) {
    String macro = IMacroHolder_Behavior.call_evaluateMacro_1234975967990(thisNode, SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "baseDirectory", true), "macro", true), "name"));
    String fullPathWithoutMacro = Path_Behavior.call_getFullPathWithoutMacro_1226511495568(SLinkOperations.getTarget(thisNode, "baseDirectory", true));
    if ((macro == null || macro.length() == 0)) {
      if (Sequence.fromIterable(Sequence.fromArray(File.listRoots())).contains(new File("/")) && !(fullPathWithoutMacro.startsWith("/"))) {
        fullPathWithoutMacro = "/" + fullPathWithoutMacro;
      }
      return fullPathWithoutMacro;
    } else {
      return macro + File.separator + fullPathWithoutMacro;
    }
  }

  public static List<SNode> call_getTopologicalSortedComponents_1213877228271(SNode thisNode) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode component : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "component", true))) {
      Layout_Behavior.proceesAbstractProjectComponent_1233317260545(component, result);
    }
    return result;
  }

  public static List<SNode> call_getTopologicalSortedComponents_1213877228296(SNode thisNode, SNode config) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> all = Layout_Behavior.call_getTopologicalSortedComponents_1213877228271(thisNode);
    for (SNode component : ListSequence.fromList(all)) {
      if (AbstractProjectComponent_Behavior.call_included_1213877333807(component, config)) {
        ListSequence.fromList(result).addElement(component);
        ListSequence.fromList(result).addSequence(ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), component, "virtual_getPostProcessingTasks_1213877333861", new Object[]{})));
      }
    }
    return result;
  }

  public static List<SNode> call_getModules_1213877228340(SNode thisNode) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode component : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "component", true))) {
      Layout_Behavior.call_getModules_9027273598492143575(thisNode, result, component);
    }
    return result;
  }

  public static void call_getModules_9027273598492143575(SNode thisNode, List<SNode> modules, SNode component) {
    if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.packaging.structure.ICompositeComponent")) {
      for (SNode child : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(component, "jetbrains.mps.build.packaging.structure.ICompositeComponent"), "entry", true))) {
        Layout_Behavior.call_getModules_9027273598492143575(thisNode, modules, child);
      }
    } else
    if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.packaging.structure.Module")) {
      ListSequence.fromList(modules).addElement(SNodeOperations.cast(component, "jetbrains.mps.build.packaging.structure.Module"));
    } else if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.packaging.structure.BlockReference")) {
      for (SNode child : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(component, "jetbrains.mps.build.packaging.structure.BlockReference"), "block", false), "entry", true))) {
        Layout_Behavior.call_getModules_9027273598492143575(thisNode, modules, child);
      }
    }
  }

  public static List<SNode> virtual_getAllVariable_1234864693585(SNode thisNode) {
    List<SNode> vars = ListSequence.fromList(new LinkedList<SNode>());
    ListSequence.fromList(vars).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "variable", true)));
    ListSequence.fromList(vars).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "builtInVariable", true)));
    return vars;
  }

  public static String call_getDefaultTargetName_1230209625713(SNode thisNode) {
    return "main";
  }

  public static String getMPSHomeName_1226508944077() {
    return MacrosFactory.MPS_HOME.substring("${".length(), MacrosFactory.MPS_HOME.lastIndexOf("}"));
  }

  public static String getBasedirName_1226509010730() {
    // ant has standart property basedir, so we use base_dir here to avoid clashing with it 
    // "_" symbol was chosen to look similar to mps_home 
    return "base_dir";
  }

  public static String getDeployDirName_462257719548547196() {
    return "deploy.dir";
  }

  public static String getScriptsDirName_462257719548547202() {
    return "scripts.dir";
  }

  public static void proceesAbstractProjectComponent_1233317260545(SNode component, List<SNode> list) {
    if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.packaging.structure.ICompositeComponent")) {
      for (SNode entry : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(component, "jetbrains.mps.build.packaging.structure.ICompositeComponent"), "entry", true))) {
        Layout_Behavior.proceesAbstractProjectComponent_1233317260545(entry, list);
      }
    } else if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.packaging.structure.ITransparentProjectComponent")) {
      List<SNode> childrenToDo = BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(component, "jetbrains.mps.build.packaging.structure.ITransparentProjectComponent"), "virtual_getChildrenToDo_1240564451382", new Object[]{});
      for (SNode child : ListSequence.fromList(childrenToDo)) {
        Layout_Behavior.proceesAbstractProjectComponent_1233317260545(child, list);
      }
      return;
    }
    ListSequence.fromList(list).addElement(component);
  }

  private static SNode _quotation_createNode_g9j203_a0a01a0(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.Path", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.MacroReference", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_3, "name", (String) parameter_1);
    quotedNode_2.addChild("macro", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.CompositePathComponent", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.PathComponent", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_5, "path", "artifacts");
    quotedNode_4.addChild("pathComponent", quotedNode_5);
    quotedNode_2.addChild("compositePathComponent", quotedNode_4);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_g9j203_a0a11a0(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.Path", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.MacroReference", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_3, "name", (String) parameter_1);
    quotedNode_2.addChild("macro", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.CompositePathComponent", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.PathComponent", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_5, "path", "build");
    quotedNode_4.addChild("pathComponent", quotedNode_5);
    quotedNode_2.addChild("compositePathComponent", quotedNode_4);
    return quotedNode_2;
  }
}
