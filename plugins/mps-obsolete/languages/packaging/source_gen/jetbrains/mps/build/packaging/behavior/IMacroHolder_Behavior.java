package jetbrains.mps.build.packaging.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.project.PathMacros;
import jetbrains.mps.util.PathManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class IMacroHolder_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode call_findMacroForReference_1234972707641(SNode thisNode, SNode macroReference) {
    for (SNode macro : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "macro", true))) {
      if (SPropertyOperations.getString(macroReference, "name").equals(SPropertyOperations.getString(macro, "name"))) {
        return macro;
      }
    }
    return null;
  }

  public static List<String> virtual_getAllMacroNames_1234975567387(SNode thisNode, boolean addBasedir) {
    List<String> names = ListSequence.fromListAndArray(new ArrayList<String>(), Layout_Behavior.getMPSHomeName_1226508944077());
    if (addBasedir) {
      ListSequence.fromList(names).addElement(Layout_Behavior.getBasedirName_1226509010730());
    }
    ListSequence.fromList(names).addSequence(SetSequence.fromSet(PathMacros.getInstance().getUserNames()));
    return names;
  }

  public static String virtual_evaluateMacro_1234975967990(SNode thisNode, String macroName) {
    if (macroName == null) {
      return "";
    }
    if (macroName.equals(Layout_Behavior.getBasedirName_1226509010730())) {
      return IMacroHolder_Behavior.call_getPath_1234976932856(thisNode);
    }
    if (macroName.equals(Layout_Behavior.getMPSHomeName_1226508944077())) {
      return PathManager.getHomePath();
    }
    if (macroName.equals(Layout_Behavior.getScriptsDirName_462257719548547202())) {
      return "";
    }
    return PathMacros.getInstance().getValue(macroName);
  }

  public static List<SNode> virtual_getMacro_1107726059764558743(SNode thisNode) {
    if (ListSequence.fromList(SLinkOperations.getTargets(thisNode, "macro", true)).isNotEmpty()) {
      return SLinkOperations.getTargets(thisNode, "macro", true);
    }
    List<String> allMacroNames = IMacroHolder_Behavior.call_getAllMacroNames_1234975567387(thisNode, true);
    List<SNode> result = new ArrayList<SNode>();
    for (String macroName : ListSequence.fromList(allMacroNames)) {
      SNode macro = SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.Macro", null);
      SPropertyOperations.set(macro, "name", macroName);
      SPropertyOperations.set(macro, "path", BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_evaluateMacro_1234975967990", new Object[]{macroName}).replace("\\", Util.SEPARATOR));
      ListSequence.fromList(result).addElement(macro);
    }
    return result;
  }

  @Deprecated
  public static String call_getPath_1234976932856(SNode thisNode) {
    return BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_getPath_1234976932856", new Object[]{});
  }

  @Deprecated
  public static List<String> call_getAllMacroNames_1234975567387(SNode thisNode, boolean addBasedir) {
    return BehaviorReflection.invokeVirtual((Class<List<String>>) ((Class) Object.class), thisNode, "virtual_getAllMacroNames_1234975567387", new Object[]{addBasedir});
  }

  @Deprecated
  public static String call_evaluateMacro_1234975967990(SNode thisNode, String macroName) {
    return BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_evaluateMacro_1234975967990", new Object[]{macroName});
  }

  @Deprecated
  public static List<SNode> call_getMacro_1107726059764558743(SNode thisNode) {
    return BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), thisNode, "virtual_getMacro_1107726059764558743", new Object[]{});
  }

  @Deprecated
  public static String callSuper_getPath_1234976932856(SNode thisNode, String callerConceptFqName) {
    return BehaviorManager.getInstance().invokeSuper(String.class, SNodeOperations.cast(thisNode, "jetbrains.mps.build.packaging.structure.IMacroHolder"), callerConceptFqName, "virtual_getPath_1234976932856", new Class[]{SNode.class}, new Object[]{});
  }

  @Deprecated
  public static List<String> callSuper_getAllMacroNames_1234975567387(SNode thisNode, String callerConceptFqName, boolean addBasedir) {
    return BehaviorManager.getInstance().invokeSuper((Class<List<String>>) ((Class) Object.class), SNodeOperations.cast(thisNode, "jetbrains.mps.build.packaging.structure.IMacroHolder"), callerConceptFqName, "virtual_getAllMacroNames_1234975567387", new Class[]{SNode.class, Boolean.TYPE}, new Object[]{addBasedir});
  }

  @Deprecated
  public static String callSuper_evaluateMacro_1234975967990(SNode thisNode, String callerConceptFqName, String macroName) {
    return BehaviorManager.getInstance().invokeSuper(String.class, SNodeOperations.cast(thisNode, "jetbrains.mps.build.packaging.structure.IMacroHolder"), callerConceptFqName, "virtual_evaluateMacro_1234975967990", new Class[]{SNode.class, String.class}, new Object[]{macroName});
  }

  @Deprecated
  public static List<SNode> callSuper_getMacro_1107726059764558743(SNode thisNode, String callerConceptFqName) {
    return BehaviorManager.getInstance().invokeSuper((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(thisNode, "jetbrains.mps.build.packaging.structure.IMacroHolder"), callerConceptFqName, "virtual_getMacro_1107726059764558743", new Class[]{SNode.class}, new Object[]{});
  }
}
