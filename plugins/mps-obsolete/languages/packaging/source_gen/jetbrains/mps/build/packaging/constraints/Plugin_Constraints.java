package jetbrains.mps.build.packaging.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class Plugin_Constraints extends BaseConstraintsDescriptor {
  public Plugin_Constraints() {
    super("jetbrains.mps.build.packaging.structure.Plugin");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("name", new BasePropertyConstraintsDescriptor("name", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "name";
        {
          String suffix = "";
          if (ListSequence.fromList(SLinkOperations.getTargets(node, "entry", true)).isEmpty()) {
            suffix = ".jar";
          }
          if ((SLinkOperations.getTarget(node, "title", true) != null)) {
            return BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(node, "title", true), "virtual_getValue_1213877173054", new Object[]{}) + suffix;
          }
          return BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(node, "sourcePath", true), "virtual_getName_1221141245424", new Object[]{}) + suffix;
        }
      }
    });
    return properties;
  }
}
