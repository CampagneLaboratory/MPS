package jetbrains.mps.build.packaging.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Antcall_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Block_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new BlockReference_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Branding_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new BuildLanguageTargetReference_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ComponentsList_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new CompositePathComponent_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new CompositeString_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Configuration_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new ConfigurationReference_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Copy_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Echo_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new File_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new FileExistsCondition_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new Folder_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Help_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new IdeaInitializerReference_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new Jar_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new Layout_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new Library_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new MPSLayoutConfigurationReferencePropertyValueExpression_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new Macro_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new MacroReference_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new Manifest_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new ManifestAttribute_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new Module_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new NonExistingPath_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new NotCondition_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new Pair_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new Path_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new PathComponent_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new PathHolder_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new Plugin_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new PluginModule_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new PropertyFileImport_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new PropertyNodeImport_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new Replace_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new SimpleString_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new Space_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new UpdateWebsite_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new Variable_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new VariableReference_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new WelcomeScreen_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new Zip_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        if ("jetbrains.mps.build.packaging.editor.ConfigurationReferencesEditorComponent".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new ConfigurationReferencesEditorComponent());
        }
        break;
      case 1:
        switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b0a1, editorComponentId)) {
          case 0:
            return Collections.<ConceptEditorComponent>singletonList(new CompositecomponentEntriesEditorComponent());
          case 1:
            return Collections.<ConceptEditorComponent>singletonList(new IncludeExcludeEditorComponent());
          case 2:
            return Collections.<ConceptEditorComponent>singletonList(new IncludeExcludeInInspector());
          default:
        }
        break;
      default:
    }
    return Collections.emptyList();
  }



  public Collection<ConceptEditorHint> getHints() {
    return Collections.emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.build.packaging.structure.Antcall", "jetbrains.mps.build.packaging.structure.Block", "jetbrains.mps.build.packaging.structure.BlockReference", "jetbrains.mps.build.packaging.structure.Branding", "jetbrains.mps.build.packaging.structure.BuildLanguageTargetReference", "jetbrains.mps.build.packaging.structure.ComponentsList", "jetbrains.mps.build.packaging.structure.CompositePathComponent", "jetbrains.mps.build.packaging.structure.CompositeString", "jetbrains.mps.build.packaging.structure.Configuration", "jetbrains.mps.build.packaging.structure.ConfigurationReference", "jetbrains.mps.build.packaging.structure.Copy", "jetbrains.mps.build.packaging.structure.Echo", "jetbrains.mps.build.packaging.structure.File", "jetbrains.mps.build.packaging.structure.FileExistsCondition", "jetbrains.mps.build.packaging.structure.Folder", "jetbrains.mps.build.packaging.structure.Help", "jetbrains.mps.build.packaging.structure.IdeaInitializerReference", "jetbrains.mps.build.packaging.structure.Jar", "jetbrains.mps.build.packaging.structure.Layout", "jetbrains.mps.build.packaging.structure.Library", "jetbrains.mps.build.packaging.structure.MPSLayoutConfigurationReferencePropertyValueExpression", "jetbrains.mps.build.packaging.structure.Macro", "jetbrains.mps.build.packaging.structure.MacroReference", "jetbrains.mps.build.packaging.structure.Manifest", "jetbrains.mps.build.packaging.structure.ManifestAttribute", "jetbrains.mps.build.packaging.structure.Module", "jetbrains.mps.build.packaging.structure.NonExistingPath", "jetbrains.mps.build.packaging.structure.NotCondition", "jetbrains.mps.build.packaging.structure.Pair", "jetbrains.mps.build.packaging.structure.Path", "jetbrains.mps.build.packaging.structure.PathComponent", "jetbrains.mps.build.packaging.structure.PathHolder", "jetbrains.mps.build.packaging.structure.Plugin", "jetbrains.mps.build.packaging.structure.PluginModule", "jetbrains.mps.build.packaging.structure.PropertyFileImport", "jetbrains.mps.build.packaging.structure.PropertyNodeImport", "jetbrains.mps.build.packaging.structure.Replace", "jetbrains.mps.build.packaging.structure.SimpleString", "jetbrains.mps.build.packaging.structure.Space", "jetbrains.mps.build.packaging.structure.UpdateWebsite", "jetbrains.mps.build.packaging.structure.Variable", "jetbrains.mps.build.packaging.structure.VariableReference", "jetbrains.mps.build.packaging.structure.WelcomeScreen", "jetbrains.mps.build.packaging.structure.Zip"};
  private static String[] stringSwitchCases_xbvbvu_a0a0b0a1 = new String[]{"jetbrains.mps.build.packaging.editor.CompositecomponentEntriesEditorComponent", "jetbrains.mps.build.packaging.editor.IncludeExcludeEditorComponent", "jetbrains.mps.build.packaging.editor.IncludeExcludeInInspector"};
  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent", "jetbrains.mps.build.packaging.structure.ICompositeComponent"};
}
