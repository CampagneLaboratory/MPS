package jetbrains.mps.build.packaging.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.node.EditorAspectDescriptor;
import jetbrains.mps.openapi.editor.node.EditorAspect;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public EditorAspect getAspect(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return new Antcall_Editor();
      case 1:
        return new Block_Editor();
      case 2:
        return new BlockReference_Editor();
      case 3:
        return new Branding_Editor();
      case 4:
        return new BuildLanguageTargetReference_Editor();
      case 5:
        return new ComponentsList_Editor();
      case 6:
        return new CompositePathComponent_Editor();
      case 7:
        return new CompositeString_Editor();
      case 8:
        return new Configuration_Editor();
      case 9:
        return new ConfigurationReference_Editor();
      case 10:
        return new Copy_Editor();
      case 11:
        return new Echo_Editor();
      case 12:
        return new File_Editor();
      case 13:
        return new FileExistsCondition_Editor();
      case 14:
        return new Folder_Editor();
      case 15:
        return new Help_Editor();
      case 16:
        return new IdeaInitializerReference_Editor();
      case 17:
        return new Jar_Editor();
      case 18:
        return new Layout_Editor();
      case 19:
        return new Library_Editor();
      case 20:
        return new MPSLayoutConfigurationReferencePropertyValueExpression_Editor();
      case 21:
        return new Macro_Editor();
      case 22:
        return new MacroReference_Editor();
      case 23:
        return new Manifest_Editor();
      case 24:
        return new ManifestAttribute_Editor();
      case 25:
        return new Module_Editor();
      case 26:
        return new NonExistingPath_Editor();
      case 27:
        return new NotCondition_Editor();
      case 28:
        return new Pair_Editor();
      case 29:
        return new Path_Editor();
      case 30:
        return new PathComponent_Editor();
      case 31:
        return new PathHolder_Editor();
      case 32:
        return new Plugin_Editor();
      case 33:
        return new PluginModule_Editor();
      case 34:
        return new PropertyFileImport_Editor();
      case 35:
        return new PropertyNodeImport_Editor();
      case 36:
        return new Replace_Editor();
      case 37:
        return new SimpleString_Editor();
      case 38:
        return new Space_Editor();
      case 39:
        return new UpdateWebsite_Editor();
      case 40:
        return new Variable_Editor();
      case 41:
        return new VariableReference_Editor();
      case 42:
        return new WelcomeScreen_Editor();
      case 43:
        return new Zip_Editor();
      default:
    }
    return null;
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.build.packaging.structure.Antcall", "jetbrains.mps.build.packaging.structure.Block", "jetbrains.mps.build.packaging.structure.BlockReference", "jetbrains.mps.build.packaging.structure.Branding", "jetbrains.mps.build.packaging.structure.BuildLanguageTargetReference", "jetbrains.mps.build.packaging.structure.ComponentsList", "jetbrains.mps.build.packaging.structure.CompositePathComponent", "jetbrains.mps.build.packaging.structure.CompositeString", "jetbrains.mps.build.packaging.structure.Configuration", "jetbrains.mps.build.packaging.structure.ConfigurationReference", "jetbrains.mps.build.packaging.structure.Copy", "jetbrains.mps.build.packaging.structure.Echo", "jetbrains.mps.build.packaging.structure.File", "jetbrains.mps.build.packaging.structure.FileExistsCondition", "jetbrains.mps.build.packaging.structure.Folder", "jetbrains.mps.build.packaging.structure.Help", "jetbrains.mps.build.packaging.structure.IdeaInitializerReference", "jetbrains.mps.build.packaging.structure.Jar", "jetbrains.mps.build.packaging.structure.Layout", "jetbrains.mps.build.packaging.structure.Library", "jetbrains.mps.build.packaging.structure.MPSLayoutConfigurationReferencePropertyValueExpression", "jetbrains.mps.build.packaging.structure.Macro", "jetbrains.mps.build.packaging.structure.MacroReference", "jetbrains.mps.build.packaging.structure.Manifest", "jetbrains.mps.build.packaging.structure.ManifestAttribute", "jetbrains.mps.build.packaging.structure.Module", "jetbrains.mps.build.packaging.structure.NonExistingPath", "jetbrains.mps.build.packaging.structure.NotCondition", "jetbrains.mps.build.packaging.structure.Pair", "jetbrains.mps.build.packaging.structure.Path", "jetbrains.mps.build.packaging.structure.PathComponent", "jetbrains.mps.build.packaging.structure.PathHolder", "jetbrains.mps.build.packaging.structure.Plugin", "jetbrains.mps.build.packaging.structure.PluginModule", "jetbrains.mps.build.packaging.structure.PropertyFileImport", "jetbrains.mps.build.packaging.structure.PropertyNodeImport", "jetbrains.mps.build.packaging.structure.Replace", "jetbrains.mps.build.packaging.structure.SimpleString", "jetbrains.mps.build.packaging.structure.Space", "jetbrains.mps.build.packaging.structure.UpdateWebsite", "jetbrains.mps.build.packaging.structure.Variable", "jetbrains.mps.build.packaging.structure.VariableReference", "jetbrains.mps.build.packaging.structure.WelcomeScreen", "jetbrains.mps.build.packaging.structure.Zip"};
}
