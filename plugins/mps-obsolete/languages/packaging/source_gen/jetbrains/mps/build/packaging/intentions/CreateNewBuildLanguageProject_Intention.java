package jetbrains.mps.build.packaging.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.openapi.navigation.NavigationSupport;

public class CreateNewBuildLanguageProject_Intention extends BaseIntention {
  public CreateNewBuildLanguageProject_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.build.packaging.structure.Antcall";
  }

  public String getPresentation() {
    return "CreateNewBuildLanguageProject";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.build.packaging.intentions.CreateNewBuildLanguageProject_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:0bdf3454-bff9-43a3-9adf-15b36e41285c(jetbrains.mps.build.packaging.intentions@1_0)", "1228398444440");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Create New BuildLanguage Project";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SLinkOperations.getTarget(node, "project", false) == null) && (SLinkOperations.getTarget(node, "targetDeclaration", false) == null);
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode project = SNodeFactoryOperations.createNewNode("jetbrains.mps.buildlanguage.structure.Project", null);
    List<String> externalProps = ListSequence.fromListAndArray(new ArrayList<String>(), "input.dir", "output.dir", "deploy.dir");
    for (String prop : ListSequence.fromList(externalProps)) {
      SNode property = SNodeFactoryOperations.createNewNode("jetbrains.mps.buildlanguage.structure.ExternalPropertyDeclaration", null);
      SPropertyOperations.set(property, "name", prop);
      SLinkOperations.setTarget(property, "type", SNodeFactoryOperations.createNewNode("jetbrains.mps.buildlanguage.structure.FileType", null), true);
      ListSequence.fromList(SLinkOperations.getTargets(project, "property", true)).addElement(property);
    }
    SModel model = editorContext.getModel();
    model.addRoot(project);
    SLinkOperations.setTarget(node, "project", project, false);
    SLinkOperations.setTarget(node, "targetDeclaration", SLinkOperations.getTarget(SLinkOperations.getTarget(project, "default", true), "targetDeclaration", false), false);
    NavigationSupport.getInstance().openNode(editorContext.getOperationContext(), project, true, !(project.isRoot()));
  }
}
