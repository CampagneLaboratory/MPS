package jetbrains.mps.build.packaging.editor;

/*Generated by MPS */

import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuComponent;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPartExt;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_Generic_Group;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.SConceptNodeAdapter;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class MacroReference_MenuComponent extends AbstractCellMenuComponent {
  public MacroReference_MenuComponent() {
    super(new SubstituteInfoPartExt[]{new MacroReference_MenuComponent.MacroReference_generic_cellMenu_a0()});
  }

  public static class MacroReference_generic_cellMenu_a0 extends AbstractCellMenuPart_Generic_Group {
    public MacroReference_generic_cellMenu_a0() {
    }

    public List<?> createParameterObjects(SNode node, IScope scope, IOperationContext operationContext, EditorContext editorContext) {
      List<String> allMacroNames = BehaviorReflection.invokeVirtual((Class<List<String>>) ((Class) Object.class), SNodeOperations.getAncestor(node, "jetbrains.mps.build.packaging.structure.IMacroHolder", true, false), "virtual_getAllMacroNames_1234975567387", new Object[]{BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, new SConceptNodeAdapter(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.build.packaging.structure.IPath")))), "virtual_canStartFromBasedir_1262430001741498253", new Object[]{})});
      ListSequence.fromList(allMacroNames).addElement("no macro");
      return allMacroNames;
    }

    protected void handleAction(Object parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext, EditorContext editorContext) {
      this.handleAction_impl((String) parameterObject, node, model, scope, operationContext, editorContext);
    }

    public void handleAction_impl(String parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext, EditorContext editorContext) {
      if (parameterObject.equals("no macro")) {
        SPropertyOperations.set(node, "name", "");
      } else {
        SPropertyOperations.set(node, "name", parameterObject);
      }
    }

    public boolean isReferentPresentation() {
      return false;
    }
  }
}
