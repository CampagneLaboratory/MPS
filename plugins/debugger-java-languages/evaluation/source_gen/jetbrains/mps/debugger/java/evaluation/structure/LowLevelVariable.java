package jetbrains.mps.debugger.java.evaluation.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class LowLevelVariable extends BaseVariableDeclaration {
  public static final String concept = "jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariable";
  public static final String HIGH_LEVEL_NODE_ID = "highLevelNodeId";
  public static final String LOW_LEVEL_NAME = "lowLevelName";
  public static final String IS_OUT_OF_SCOPE = "isOutOfScope";

  public LowLevelVariable(SNode node) {
    super(node);
  }

  public String getHighLevelNodeId() {
    return this.getProperty(LowLevelVariable.HIGH_LEVEL_NODE_ID);
  }

  public void setHighLevelNodeId(String value) {
    this.setProperty(LowLevelVariable.HIGH_LEVEL_NODE_ID, value);
  }

  public String getLowLevelName() {
    return this.getProperty(LowLevelVariable.LOW_LEVEL_NAME);
  }

  public void setLowLevelName(String value) {
    this.setProperty(LowLevelVariable.LOW_LEVEL_NAME, value);
  }

  public boolean getIsOutOfScope() {
    return this.getBooleanProperty(LowLevelVariable.IS_OUT_OF_SCOPE);
  }

  public void setIsOutOfScope(boolean value) {
    this.setBooleanProperty(LowLevelVariable.IS_OUT_OF_SCOPE, value);
  }

  public DebuggedType getDebuggedType() {
    return this.ensureAdapter(DebuggedType.class, "type", this.getType());
  }

  public void setDebuggedType(DebuggedType node) {
    this.setType(node);
  }

  public static LowLevelVariable newInstance(SModel sm, boolean init) {
    return (LowLevelVariable) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariable", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static LowLevelVariable newInstance(SModel sm) {
    return LowLevelVariable.newInstance(sm, false);
  }
}
