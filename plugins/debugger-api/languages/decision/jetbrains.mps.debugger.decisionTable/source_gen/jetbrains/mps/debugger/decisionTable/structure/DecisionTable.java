package jetbrains.mps.debugger.decisionTable.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.lang.core.structure.ScopeProvider;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.baseLanguage.structure.IntegerLiteral;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DecisionTable extends Expression implements INamedConcept, ScopeProvider {
  public static final String concept = "jetbrains.mps.debugger.decisionTable.structure.DecisionTable";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String CASE_X = "caseX";
  public static final String CASE_Y = "caseY";
  public static final String CONTENT = "content";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public DecisionTable(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(DecisionTable.NAME);
  }

  public void setName(String value) {
    this.setProperty(DecisionTable.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(DecisionTable.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(DecisionTable.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(DecisionTable.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(DecisionTable.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(DecisionTable.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(DecisionTable.VIRTUAL_PACKAGE, value);
  }

  public int getCaseXsCount() {
    return this.getChildCount(DecisionTable.CASE_X);
  }

  public Iterator<CaseExpression> caseXs() {
    return this.children(CaseExpression.class, DecisionTable.CASE_X);
  }

  public List<CaseExpression> getCaseXs() {
    return this.getChildren(CaseExpression.class, DecisionTable.CASE_X);
  }

  public void addCaseX(CaseExpression node) {
    this.addChild(DecisionTable.CASE_X, node);
  }

  public void insertCaseX(CaseExpression prev, CaseExpression node) {
    this.insertChild(prev, DecisionTable.CASE_X, node);
  }

  public int getCaseYsCount() {
    return this.getChildCount(DecisionTable.CASE_Y);
  }

  public Iterator<CaseExpression> caseYs() {
    return this.children(CaseExpression.class, DecisionTable.CASE_Y);
  }

  public List<CaseExpression> getCaseYs() {
    return this.getChildren(CaseExpression.class, DecisionTable.CASE_Y);
  }

  public void addCaseY(CaseExpression node) {
    this.addChild(DecisionTable.CASE_Y, node);
  }

  public void insertCaseY(CaseExpression prev, CaseExpression node) {
    this.insertChild(prev, DecisionTable.CASE_Y, node);
  }

  public int getContentsCount() {
    return this.getChildCount(DecisionTable.CONTENT);
  }

  public Iterator<IntegerLiteral> contents() {
    return this.children(IntegerLiteral.class, DecisionTable.CONTENT);
  }

  public List<IntegerLiteral> getContents() {
    return this.getChildren(IntegerLiteral.class, DecisionTable.CONTENT);
  }

  public void addContent(IntegerLiteral node) {
    this.addChild(DecisionTable.CONTENT, node);
  }

  public void insertContent(IntegerLiteral prev, IntegerLiteral node) {
    this.insertChild(prev, DecisionTable.CONTENT, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(DecisionTable.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, DecisionTable.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, DecisionTable.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(DecisionTable.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, DecisionTable.SMODEL_ATTRIBUTE, node);
  }

  public static DecisionTable newInstance(SModel sm, boolean init) {
    return (DecisionTable) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.debugger.decisionTable.structure.DecisionTable", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DecisionTable newInstance(SModel sm) {
    return DecisionTable.newInstance(sm, false);
  }
}
