package jetbrains.mps.nanoc.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.execution.api.configurations.BaseMpsBeforeTaskProvider;
import com.intellij.openapi.util.Key;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.smodel.SNode;
import com.intellij.openapi.project.Project;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.execution.api.commands.OutputRedirector;
import com.intellij.execution.process.ProcessAdapter;
import com.intellij.execution.process.ProcessEvent;
import com.intellij.execution.process.ProcessOutputTypes;
import jetbrains.mps.execution.api.commands.ProcessHandlerBuilder;
import java.io.File;
import com.intellij.execution.ExecutionException;

public class CompileWithGcc_BeforeTask extends BaseMpsBeforeTaskProvider<CompileWithGcc_BeforeTask.CompileWithGcc_BeforeTask_RunTask> {
  private static final Key<CompileWithGcc_BeforeTask.CompileWithGcc_BeforeTask_RunTask> KEY = Key.create("jetbrains.mps.nanoc.pluginSolution.plugin.CompileWithGcc_BeforeTask");
  protected static Log log_934744295 = LogFactory.getLog(CompileWithGcc_BeforeTask.class);

  public CompileWithGcc_BeforeTask() {
    super("Compile with gcc");
  }

  protected CompileWithGcc_BeforeTask.CompileWithGcc_BeforeTask_RunTask createTaskImpl() {
    return new CompileWithGcc_BeforeTask.CompileWithGcc_BeforeTask_RunTask();
  }

  public Key<CompileWithGcc_BeforeTask.CompileWithGcc_BeforeTask_RunTask> getId() {
    return KEY;
  }

  public static class CompileWithGcc_BeforeTask_RunTask extends BaseMpsBeforeTaskProvider.BaseMpsBeforeRunTask {
    private SNode myFile;

    public CompileWithGcc_BeforeTask_RunTask() {
    }

    public boolean configure(SNode file) {
      myFile = file;
      return true;
    }

    public boolean execute(Project project) {
      try {
        ProcessHandler process = OutputRedirector.redirect(new Gcc_Command().createProcess(myFile), new ProcessAdapter() {
          @Override
          public void onTextAvailable(ProcessEvent event, Key key) {
            if (ProcessOutputTypes.STDERR.equals(key)) {
              if (log_934744295.isErrorEnabled()) {
                log_934744295.error(event.getText());
              }
            } else {
              if (log_934744295.isInfoEnabled()) {
                log_934744295.info(event.getText());
              }
            }
          }
        });
        int exitCode = ProcessHandlerBuilder.startAndWait(process);
        if (exitCode != 0) {
          return false;
        }
        return new File(Gcc_Command.getExecutableFile(myFile).getAbsolutePath()).exists();
      } catch (ExecutionException e) {
        if (log_934744295.isErrorEnabled()) {
          log_934744295.error("", e);
        }
        return false;
      }
    }
  }
}
