package jetbrains.mps.nanoc.debug;

/*Generated by MPS */

import jetbrains.mps.nanoc.debug.programState.DefaultThread;
import jetbrains.mps.debug.api.AbstractDebugSession;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.debug.api.programState.IThread;
import java.util.ArrayList;
import jetbrains.mps.debug.api.programState.IStackFrame;
import jetbrains.mps.debug.api.AbstractUiState;
import org.jetbrains.annotations.Nullable;

public class CppUiStateImpl extends CppUiState {
  private final DefaultThread myThread;
  private final int myFrame;

  /*package*/ CppUiStateImpl(AbstractDebugSession session) {
    this(session, null);
  }

  /*package*/ CppUiStateImpl(AbstractDebugSession session, DefaultThread thread) {
    this(session, thread, 0);
  }

  /*package*/ CppUiStateImpl(AbstractDebugSession session, DefaultThread thread, int frame) {
    super(session);
    myThread = thread;
    myFrame = frame;
  }

  @Override
  public DefaultThread getThread() {
    return myThread;
  }

  @NotNull
  @Override
  public List<IThread> getThreads() {
    ArrayList<IThread> list = new ArrayList<IThread>();
    list.add(myThread);
    return list;
  }

  @Override
  public IStackFrame getStackFrame() {
    if (myThread == null) {
      return null;
    }
    return myThread.getFrames().get(myFrame);
  }

  @Override
  public boolean isPausedOnBreakpoint() {
    return myAbstractDebugSession.isPaused();
  }

  protected IThread findThread() {
    return myThread;
  }

  @Override
  protected AbstractUiState selectThreadInternal(@Nullable IThread thread) {
    return this;
  }

  @Override
  protected AbstractUiState selectFrameInternal(int frame) {
    if (myFrame == frame) {
      return this;
    }
    return new CppUiStateImpl(myAbstractDebugSession, myThread, frame);
  }
}
