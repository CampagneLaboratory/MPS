package jetbrains.mps.nanoc.debug.breakpoints;

/*Generated by MPS */

import jetbrains.mps.debug.api.breakpoints.AbstractBreakpoint;
import jetbrains.mps.debug.api.breakpoints.IBreakpoint;
import jetbrains.mps.debug.api.breakpoints.ILocationBreakpoint;
import jetbrains.mps.nanoc.debug.requests.BreakpointRequestor;
import jetbrains.mps.debug.api.breakpoints.BreakpointLocation;
import org.jetbrains.mps.openapi.model.SNodeReference;
import com.intellij.openapi.project.Project;
import jetbrains.mps.nanoc.debug.CppDebugSession;
import jetbrains.mps.nanoc.debug.requests.GDBRequestManager;
import jetbrains.mps.nanoc.debug.answer.ResultAnswer;
import java.util.List;
import jetbrains.mps.nanoc.debug.answer.StreamAnswer;
import jetbrains.mps.nanoc.debug.answer.RecordValue;
import jetbrains.mps.nanoc.debug.answer.StringValue;
import jetbrains.mps.nanoc.debug.requests.RemoveBreakpointRequestor;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.debug.api.BreakpointInfo;
import jetbrains.mps.debug.api.breakpoints.IBreakpointKind;

public class GDBBreakpoint extends AbstractBreakpoint implements IBreakpoint, ILocationBreakpoint {
  private static final String BKPT = "bkpt";
  private static final String NUMBER = "number";
  private BreakpointRequestor myBreakpointRequestor;
  private boolean myAdded = false;
  private int myInternalGDBNumber = -1;
  private final BreakpointLocation myLocation;

  public GDBBreakpoint(SNodeReference nodePointer, Project project) {
    super(project);
    myLocation = new BreakpointLocation(nodePointer);
  }

  @Override
  public void removeFromRunningSessions() {
    CppDebugSession.performAllSessionsAction(myProject, new CppDebugSession.DebugSessionAction() {
      @Override
      public void run(CppDebugSession debugSession) {
        createRemoveBreakpointRequest(debugSession.getGDBRequestManager());
      }
    });
  }

  @Override
  public void addToRunningSessions() {
    CppDebugSession.performAllSessionsAction(myProject, new CppDebugSession.DebugSessionAction() {
      @Override
      public void run(CppDebugSession debugSession) {
        createBreakpointRequest(debugSession.getGDBRequestManager());
      }
    });
  }

  public void createBreakpointRequest(GDBRequestManager requestManager) {
    requestManager.createRequest(new BreakpointRequestor(getLocation().getFileName(), getLocation().getLineIndexInFile()) {
      @Override
      public void onRequestFulfilled(ResultAnswer answer, List<StreamAnswer> receivedStreamAnswers) {
        myAdded = true;
        RecordValue bkptInfo = (RecordValue) answer.getResults().getPropertyValue(GDBBreakpoint.BKPT);
        StringValue numberValue = (StringValue) bkptInfo.getPropertyValue(GDBBreakpoint.NUMBER);
        int number = Integer.parseInt(numberValue.getString());
        myInternalGDBNumber = number;
      }
    });
  }

  public void createRemoveBreakpointRequest(GDBRequestManager requestManager) {
    requestManager.createRequest(new RemoveBreakpointRequestor(myInternalGDBNumber) {
      @Override
      public void onRequestFulfilled(ResultAnswer answer, List<StreamAnswer> receivedStreamAnswers) {
        myAdded = false;
        myInternalGDBNumber = -1;
      }
    });
  }

  @NonNls
  @Override
  public String getPresentation() {
    return myLocation.getPresentation();
  }

  @NotNull
  @Override
  public GDBBreakpoint.GDBBreakpointKind getKind() {
    return GDBBreakpoint.GDBBreakpointKind.LINE_BREAKPOINT;
  }

  @NotNull
  @Override
  public BreakpointLocation getLocation() {
    return myLocation;
  }

  public BreakpointInfo getState() {
    return new BreakpointInfo(this, myLocation);
  }

  public static GDBBreakpoint fromInfo(@NotNull BreakpointInfo info, Project project) {
    return new GDBBreakpoint(info.location(), project);
  }

  public class GdbBreakpointState {
    public String myNodeId;
    public String myModelId;

    public GdbBreakpointState() {
    }
  }

  public static   enum GDBBreakpointKind implements IBreakpointKind<GDBBreakpoint> {
    LINE_BREAKPOINT();

    GDBBreakpointKind() {
    }

    @NonNls
    @Override
    public String getPresentation() {
      return "Cpp Line Breakpoint";
    }

    @NonNls
    @Override
    public String getName() {
      return "CPP_LINE_BREAKPOINT";
    }

    @Override
    public boolean supportsDisable() {
      return true;
    }
  }
}
