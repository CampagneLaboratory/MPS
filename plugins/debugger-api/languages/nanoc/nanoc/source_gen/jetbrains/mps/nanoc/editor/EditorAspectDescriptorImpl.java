package jetbrains.mps.nanoc.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.EditorAspect;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<EditorAspect> getEditorAspects(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<EditorAspect>singletonList(new CAssignmentExpression_Editor());
      case 1:
        return Collections.<EditorAspect>singletonList(new CBinaryOp_Editor());
      case 2:
        return Collections.<EditorAspect>singletonList(new CBody_Editor());
      case 3:
        return Collections.<EditorAspect>singletonList(new CExpressionStatement_Editor());
      case 4:
        return Collections.<EditorAspect>singletonList(new CFor_Editor());
      case 5:
        return Collections.<EditorAspect>singletonList(new CParenthesis_Editor());
      case 6:
        return Collections.<EditorAspect>singletonList(new CType_Editor());
      case 7:
        return Collections.<EditorAspect>singletonList(new CWhile_Editor());
      case 8:
        return Collections.<EditorAspect>singletonList(new File_Editor());
      case 9:
        return Collections.<EditorAspect>singletonList(new IntConst_Editor());
      case 10:
        return Collections.<EditorAspect>singletonList(new VarDecl_Editor());
      case 11:
        return Collections.<EditorAspect>singletonList(new VarDeclStatement_Editor());
      case 12:
        return Collections.<EditorAspect>singletonList(new VarRef_Editor());
      default:
    }
    return Collections.emptyList();
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.nanoc.structure.CAssignmentExpression", "jetbrains.mps.nanoc.structure.CBinaryOp", "jetbrains.mps.nanoc.structure.CBody", "jetbrains.mps.nanoc.structure.CExpressionStatement", "jetbrains.mps.nanoc.structure.CFor", "jetbrains.mps.nanoc.structure.CParenthesis", "jetbrains.mps.nanoc.structure.CType", "jetbrains.mps.nanoc.structure.CWhile", "jetbrains.mps.nanoc.structure.File", "jetbrains.mps.nanoc.structure.IntConst", "jetbrains.mps.nanoc.structure.VarDecl", "jetbrains.mps.nanoc.structure.VarDeclStatement", "jetbrains.mps.nanoc.structure.VarRef"};
}
