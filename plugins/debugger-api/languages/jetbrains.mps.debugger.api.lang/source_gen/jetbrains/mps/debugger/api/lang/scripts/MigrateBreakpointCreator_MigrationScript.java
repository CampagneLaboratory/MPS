package jetbrains.mps.debugger.api.lang.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class MigrateBreakpointCreator_MigrationScript extends BaseMigrationScript {
  public MigrateBreakpointCreator_MigrationScript(IOperationContext operationContext) {
    super("Migrate breakpoint creators");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Migrates breakpoint creators";
      }

      public String getAdditionalInfo() {
        return "Migrates breakpoint creators";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.debugger.api.lang.structure.BreakpointableNodeItem";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SPropertyOperations.getBoolean(node, "isComplex") && (SLinkOperations.getTarget(node, "isApplicable", true) != null);
      }

      public void doUpdateInstanceNode(SNode node) {
        SLinkOperations.setNewChild(node, "isApplicableBreakpoint", "jetbrains.mps.debugger.api.lang.structure.ConceptFunction_IsApplicableBreakpoint");
        SLinkOperations.setTarget(SLinkOperations.getTarget(node, "isApplicableBreakpoint", true), "body", SLinkOperations.getTarget(SLinkOperations.getTarget(node, "isApplicable", true), "body", true), true);
        SLinkOperations.setTarget(node, "isApplicable", null, true);
      }

      public boolean isShowAsIntention() {
        return true;
      }
    });
  }
}
