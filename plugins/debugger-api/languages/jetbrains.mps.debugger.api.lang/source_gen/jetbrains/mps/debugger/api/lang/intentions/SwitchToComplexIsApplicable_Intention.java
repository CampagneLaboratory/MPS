package jetbrains.mps.debugger.api.lang.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class SwitchToComplexIsApplicable_Intention extends BaseIntention {
  public SwitchToComplexIsApplicable_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.debugger.api.lang.structure.BreakpointableNodeItem";
  }

  public String getPresentation() {
    return "SwitchToComplexIsApplicable";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.debugger.api.lang.intentions.SwitchToComplexIsApplicable_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:e5ea276a-79c7-4383-9407-3428086d3297(jetbrains.mps.debugger.api.lang.intentions)", "8751745335399757635");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    if (SPropertyOperations.getBoolean(node, "isComplex")) {
      return "Use Concept List";
    }
    return "Use isApplicable Function";
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SPropertyOperations.set(node, "isComplex", "" + (!(SPropertyOperations.getBoolean(node, "isComplex"))));
    if (SPropertyOperations.getBoolean(node, "isComplex") && (SLinkOperations.getTarget(node, "isApplicable", true) == null)) {
      SLinkOperations.setNewChild(node, "isApplicable", "jetbrains.mps.debugger.api.lang.structure.ConceptFunction_IsApplicableToConcept");
      SLinkOperations.setNewChild(SLinkOperations.getTarget(node, "isApplicable", true), "body", "jetbrains.mps.baseLanguage.structure.StatementList");
    }
  }
}
