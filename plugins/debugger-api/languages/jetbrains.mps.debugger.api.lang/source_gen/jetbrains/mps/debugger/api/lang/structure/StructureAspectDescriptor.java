package jetbrains.mps.debugger.api.lang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBreakpointCreator = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.BreakpointCreator").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"breakpointableConcepts"}, new boolean[]{true}).alias("breakpoint creators", "").create();
  /*package*/ final ConceptDescriptor myConceptBreakpointableNodeItem = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.BreakpointableNodeItem").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("isComplex").references("declaration").children(new String[]{"createBreakpoint", "isApplicable", "isApplicableBreakpoint", "conceptsToCreateBreakpoint"}, new boolean[]{false, false, false, true}).create();
  /*package*/ final ConceptDescriptor myConceptConceptDeclarationReference = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.ConceptDeclarationReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("conceptDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_Concept = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.ConceptFunctionParameter_Concept").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("concept", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_Debug_Project = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.ConceptFunctionParameter_Debug_Project").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("project", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_DebuggableNode = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.ConceptFunctionParameter_DebuggableNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("debuggableNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunction_CreateBreakpoint = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.ConceptFunction_CreateBreakpoint").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunction_IsApplicableBreakpoint = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.ConceptFunction_IsApplicableBreakpoint").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicable", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunction_IsApplicableToConcept = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.ConceptFunction_IsApplicableToConcept").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicable", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCreateBreakpointOperation = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.CreateBreakpointOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").properties("kindName", "kindPresentation").children(new String[]{"nodeExpression", "projectExpression"}, new boolean[]{false, false}).alias("create breakpoint", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDebuggerConfiguration = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.DebuggerConfiguration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"debugger", "getSettings"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptDebuggerReference = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.DebuggerReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("debuggerName").alias("debugger", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDebuggerType = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.DebuggerType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").properties("name").alias("debugger type", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetDebuggerSettings_Function = new ConceptDescriptorBuilder("jetbrains.mps.debugger.api.lang.structure.GetDebuggerSettings_Function").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("get debugger settings", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBreakpointCreator, myConceptBreakpointableNodeItem, myConceptConceptDeclarationReference, myConceptConceptFunctionParameter_Concept, myConceptConceptFunctionParameter_Debug_Project, myConceptConceptFunctionParameter_DebuggableNode, myConceptConceptFunction_CreateBreakpoint, myConceptConceptFunction_IsApplicableBreakpoint, myConceptConceptFunction_IsApplicableToConcept, myConceptCreateBreakpointOperation, myConceptDebuggerConfiguration, myConceptDebuggerReference, myConceptDebuggerType, myConceptGetDebuggerSettings_Function);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0r, conceptFqName)) {
      case 0:
        return myConceptBreakpointCreator;
      case 1:
        return myConceptBreakpointableNodeItem;
      case 2:
        return myConceptConceptDeclarationReference;
      case 3:
        return myConceptConceptFunctionParameter_Concept;
      case 4:
        return myConceptConceptFunctionParameter_Debug_Project;
      case 5:
        return myConceptConceptFunctionParameter_DebuggableNode;
      case 6:
        return myConceptConceptFunction_CreateBreakpoint;
      case 7:
        return myConceptConceptFunction_IsApplicableBreakpoint;
      case 8:
        return myConceptConceptFunction_IsApplicableToConcept;
      case 9:
        return myConceptCreateBreakpointOperation;
      case 10:
        return myConceptDebuggerConfiguration;
      case 11:
        return myConceptDebuggerReference;
      case 12:
        return myConceptDebuggerType;
      case 13:
        return myConceptGetDebuggerSettings_Function;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0r = new String[]{"jetbrains.mps.debugger.api.lang.structure.BreakpointCreator", "jetbrains.mps.debugger.api.lang.structure.BreakpointableNodeItem", "jetbrains.mps.debugger.api.lang.structure.ConceptDeclarationReference", "jetbrains.mps.debugger.api.lang.structure.ConceptFunctionParameter_Concept", "jetbrains.mps.debugger.api.lang.structure.ConceptFunctionParameter_Debug_Project", "jetbrains.mps.debugger.api.lang.structure.ConceptFunctionParameter_DebuggableNode", "jetbrains.mps.debugger.api.lang.structure.ConceptFunction_CreateBreakpoint", "jetbrains.mps.debugger.api.lang.structure.ConceptFunction_IsApplicableBreakpoint", "jetbrains.mps.debugger.api.lang.structure.ConceptFunction_IsApplicableToConcept", "jetbrains.mps.debugger.api.lang.structure.CreateBreakpointOperation", "jetbrains.mps.debugger.api.lang.structure.DebuggerConfiguration", "jetbrains.mps.debugger.api.lang.structure.DebuggerReference", "jetbrains.mps.debugger.api.lang.structure.DebuggerType", "jetbrains.mps.debugger.api.lang.structure.GetDebuggerSettings_Function"};
}
