package jetbrains.mps.debugger.api.lang.scripts;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.util.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.script.runtime.StubRefUtil;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class StubUtil {
  public StubUtil() {
  }

  public static boolean isReferenceToDebuggerStub(SReference reference) {
    SModel model = getDebuggerModelForReference(reference);
    if (model == null) {
      return false;
    }
    SModelReference targetSModelReference = reference.getTargetSModelReference();
    if (targetSModelReference == null) {
      return false;
    }
    return SModelStereotype.isStubModelStereotype(targetSModelReference.getStereotype());
  }

  @Nullable
  public static SModel getDebuggerModelForReference(SReference reference) {
    SModelReference targetSModelReference = reference.getTargetSModelReference();
    if (targetSModelReference == null) {
      return null;
    }

    IModule debuggerApi = MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("cc7da2f6-419f-4133-a811-31fcd3295a85"));
    List<SModel> debuggerModels = debuggerApi.getOwnModelDescriptors();
    for (SModel debuggerModel : ListSequence.fromList(debuggerModels)) {
      if (eq_g10q2g_a0a0f0c(SNodeOperations.getModelLongName(debuggerModel), targetSModelReference.getLongName())) {
        return debuggerModel;
      }
    }
    return null;
  }

  public static void findAndReplace(SNode targetNode, String role, _FunctionTypes._return_P1_E0<? extends String, ? super SNode> getResolveInfo, String conceptFqName) {
    SReference reference = targetNode.getReference(role);
    SModel newModelDescriptor = StubUtil.getDebuggerModelForReference(reference);

    for (SNode candidate : ListSequence.fromList(SModelOperations.getNodes(newModelDescriptor.getSModel(), conceptFqName))) {
      if (eq_g10q2g_a0a0d0d(getResolveInfo.invoke(candidate), ((jetbrains.mps.smodel.SReference) reference).getResolveInfo())) {
        SModelReference oldModelReference = reference.getTargetSModelReference();
        ((jetbrains.mps.smodel.SModel) jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getModel(targetNode)).deleteModelImport(oldModelReference);

        SNodeAccessUtil.setReferenceTarget(targetNode, role, candidate);
        StubRefUtil.addRequiredImports(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getModel(targetNode), candidate);
        return;
      }
    }

  }

  public static void resolveAndReplace(final SNode node, final SNode concept, String role) {
    SReference reference = node.getReference(role);

    SNode provider = ListSequence.fromList(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getAncestors(node, "jetbrains.mps.lang.core.structure.ScopeProvider", false)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return BehaviorReflection.invokeVirtual(Scope.class, jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(it, "jetbrains.mps.lang.core.structure.ScopeProvider"), "virtual_getScope_3734116213129936182", new Object[]{concept, node}) != null;
      }
    });
    Scope scope = BehaviorReflection.invokeVirtual(Scope.class, provider, "virtual_getScope_3734116213129936182", new Object[]{concept, node});
    SNode candidate = scope.resolve(node, SLinkOperations.getResolveInfo(reference));
    if (candidate != null) {
      SModelReference oldModelReference = reference.getTargetSModelReference();
      ((jetbrains.mps.smodel.SModel) jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getModel(node)).deleteModelImport(oldModelReference);

      SNodeAccessUtil.setReferenceTarget(node, role, candidate);
      StubRefUtil.addRequiredImports(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getModel(node), candidate);
    } else {
      findAndReplace(node, role, new _FunctionTypes._return_P1_E0<String, SNode>() {
        public String invoke(SNode candidate) {
          return SPropertyOperations.getString(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(candidate, "jetbrains.mps.lang.core.structure.IResolveInfo"), "resolveInfo");
        }
      }, BehaviorReflection.invokeVirtual(String.class, concept, "virtual_getFqName_1213877404258", new Object[]{}));
    }
  }

  private static boolean eq_g10q2g_a0a0f0c(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_g10q2g_a0a0d0d(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
