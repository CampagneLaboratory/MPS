/*
 * Copyright 2003-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.debug.api.source;

/*Generated by MPS */

import com.intellij.openapi.components.ProjectComponent;
import com.intellij.openapi.project.Project;
import java.util.Map;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.debug.api.programState.ILocation;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.debug.api.AbstractDebugSession;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.annotations.NonNls;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class PositionProvider implements ProjectComponent {
  private final Project myProject;
  private final Map<String, List<IPositionProvider>> myKeysToProviders = MapSequence.fromMap(new LinkedHashMap<String, List<IPositionProvider>>(16, (float) 0.75, false));

  public PositionProvider(Project project) {
    myProject = project;
  }

  @Nullable
  public SourcePosition getPosition(@Nullable ILocation location, @NotNull final AbstractDebugSession session) {
    for (String key : SetSequence.fromSet(MapSequence.fromMap(myKeysToProviders).keySet())) {
      IPositionProvider provider = ListSequence.fromList(MapSequence.fromMap(myKeysToProviders).get(key)).findFirst(new IWhereFilter<IPositionProvider>() {
        public boolean accept(IPositionProvider it) {
          return it.accepts(session);
        }
      });
      if (provider != null) {
        SourcePosition position = provider.getPosition(location);
        if (position != null) {
          return position;
        }
      }
    }
    return null;
  }

  @Nullable
  public SourcePosition getPosition(@NotNull String unitName, @NotNull String fileName, int lineNumber, @NotNull final AbstractDebugSession session) {
    for (String key : SetSequence.fromSet(MapSequence.fromMap(myKeysToProviders).keySet())) {
      IPositionProvider provider = ListSequence.fromList(MapSequence.fromMap(myKeysToProviders).get(key)).findFirst(new IWhereFilter<IPositionProvider>() {
        public boolean accept(IPositionProvider it) {
          return it.accepts(session);
        }
      });
      if (provider != null) {
        SourcePosition position = provider.getPosition(unitName, fileName, lineNumber);
        if (position != null) {
          return position;
        }
      }
    }
    return null;
  }

  public void addProvider(@NotNull IPositionProvider provider, @NonNls String key) {
    List<IPositionProvider> providersForKey = MapSequence.fromMap(myKeysToProviders).get(key);
    if (providersForKey == null) {
      providersForKey = ListSequence.fromList(new ArrayList<IPositionProvider>());
      MapSequence.fromMap(myKeysToProviders).put(key, providersForKey);
    }
    ListSequence.fromList(providersForKey).insertElement(0, provider);
  }

  public boolean removeProvider(@NotNull IPositionProvider provider) {
    for (List<IPositionProvider> providerList : Sequence.fromIterable(MapSequence.fromMap(myKeysToProviders).values())) {
      if (ListSequence.fromList(providerList).removeElement(provider) != null) {
        return true;
      }
    }
    return false;
  }

  public void projectOpened() {
  }

  public void projectClosed() {
  }

  public void initComponent() {
    addProvider(new NodePositionProvider(), NodeSourcePosition.class.getName());
    addProvider(new TextPositionProvider(myProject), TextSourcePosition.class.getName());
  }

  public void disposeComponent() {
    MapSequence.fromMap(myKeysToProviders).clear();
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return "Position Provider";
  }

  public static PositionProvider getInstance(Project project) {
    return project.getComponent(PositionProvider.class);
  }
}
