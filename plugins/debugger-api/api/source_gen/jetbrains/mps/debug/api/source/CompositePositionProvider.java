package jetbrains.mps.debug.api.source;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.debug.api.programState.ILocation;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.annotations.NotNull;

public class CompositePositionProvider implements IPositionProvider {
  private final List<IPositionProvider> myProviders = ListSequence.fromList(new ArrayList<IPositionProvider>());

  public CompositePositionProvider(IPositionProvider... providers) {
    ListSequence.fromList(myProviders).addSequence(Sequence.fromIterable(Sequence.fromArray(providers)));
  }

  @Nullable
  public SourcePosition getPosition(@Nullable final ILocation location) {
    return ListSequence.fromList(myProviders).select(new ISelector<IPositionProvider, SourcePosition>() {
      public SourcePosition select(IPositionProvider it) {
        return it.getPosition(location);
      }
    }).findFirst(new IWhereFilter<SourcePosition>() {
      public boolean accept(SourcePosition it) {
        return it != null;
      }
    });
  }

  @Nullable
  public SourcePosition getPosition(@NotNull final String unitName, @NotNull final String fileName, final int lineNumber) {
    return ListSequence.fromList(myProviders).select(new ISelector<IPositionProvider, SourcePosition>() {
      public SourcePosition select(IPositionProvider it) {
        return it.getPosition(unitName, fileName, lineNumber);
      }
    }).findFirst(new IWhereFilter<SourcePosition>() {
      public boolean accept(SourcePosition it) {
        return it != null;
      }
    });
  }

  public void addProvider(@NotNull IPositionProvider provider) {
    ListSequence.fromList(myProviders).addElement(provider);
  }

  public void removeProvider(@NotNull IPositionProvider provider) {
    ListSequence.fromList(myProviders).removeElement(provider);
  }
}
