package jetbrains.mps.debug.api;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import jetbrains.mps.logging.Logger;
import java.util.Set;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.debug.api.breakpoints.ILocationBreakpoint;
import com.intellij.openapi.project.Project;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.util.Mapper2;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.kernel.model.SModelUtil;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.traceInfo.DebugInfo;
import jetbrains.mps.generator.traceInfo.TraceInfoCache;
import jetbrains.mps.traceInfo.TraceablePositionInfo;
import jetbrains.mps.ide.project.ProjectHelper;
import com.intellij.openapi.application.ApplicationManager;

public class BreakpointCreatorsManager implements ApplicationComponent {
  private static Logger LOG = Logger.getLogger(BreakpointCreatorsManager.class);
  private Set<Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>>> myCreators = SetSequence.fromSet(new LinkedHashSet<Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>>>());
  private Map<String, Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>>> myAddedByConceptCreators = MapSequence.fromMap(new LinkedHashMap<String, Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>>>(16, (float) 0.75, false));

  public BreakpointCreatorsManager() {
  }

  @NotNull
  public String getComponentName() {
    return "Debug Info Manager";
  }

  public void addConceptBreakpointCreator(final String baseConcept, final Mapper2<SNode, Project, ILocationBreakpoint> breakpointCreator) {
    Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>> pair = MultiTuple.<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>,_FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>>from(new _FunctionTypes._return_P1_E0<Boolean, SNode>() {
      public Boolean invoke(SNode concept) {
        return SModelUtil.isAssignableConcept(concept, baseConcept);
      }
    }, new _FunctionTypes._return_P2_E0<ILocationBreakpoint, SNode, Project>() {
      public ILocationBreakpoint invoke(SNode node, Project project) {
        return breakpointCreator.value(node, project);
      }
    });
    MapSequence.fromMap(myAddedByConceptCreators).put(baseConcept, pair);
    SetSequence.fromSet(myCreators).addElement(pair);
  }

  public void removeConceptBreakpointCreator(String fqName) {
    SetSequence.fromSet(myCreators).removeElement(MapSequence.fromMap(myAddedByConceptCreators).get(fqName));
    MapSequence.fromMap(myAddedByConceptCreators).removeKey(fqName);
  }

  public void addBreakpointCreator(Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>> creator) {
    SetSequence.fromSet(myCreators).addElement(creator);
  }

  public void removeBreakpointCreator(Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>> creator) {
    SetSequence.fromSet(myCreators).removeElement(creator);
  }

  public boolean isDebuggableNode(@Nullable final SNode node) {
    if (node == null) {
      return false;
    }
    return SetSequence.fromSet(myCreators).findFirst(new IWhereFilter<Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>>>() {
      public boolean accept(Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>> it) {
        return it._0().invoke(SNodeOperations.getConceptDeclaration(node));
      }
    }) != null;
  }

  private ILocationBreakpoint createBreakpoint(SNode concept, SNode node, Project project) {
    for (Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>> creator : SetSequence.fromSet(myCreators)) {
      if (creator._0().invoke(concept)) {
        _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project> function = creator._1();
        if (function == null) {
          LOG.warning("Could not create breakpoint for node " + node);
          return null;
        }
        return function.invoke(node, project);
      }
    }
    return null;
  }

  @Nullable
  public ILocationBreakpoint createBreakpoint(SNode node, Project project) {
    ILocationBreakpoint breakpoint = createBreakpoint(SNodeOperations.getConceptDeclaration(node), node, project);
    if (breakpoint != null) {
      return breakpoint;
    }

    DebugInfo debugInfo = TraceInfoCache.getInstance().get(SNodeOperations.getModel(node).getModelDescriptor());
    if (debugInfo != null) {
      TraceablePositionInfo position = debugInfo.getPositionForNode(node);
      if (position != null) {
        String conceptFqName = position.getConceptFqName();
        if (conceptFqName == null) {
          return null;
        }
        SNode concept = (SNode) SModelUtil.findConceptDeclaration(conceptFqName, ProjectHelper.toMPSProject(project).getScope());

        createBreakpoint(concept, node, project);
      }
    }

    return null;
  }

  public void initComponent() {
  }

  public void disposeComponent() {
  }

  public static BreakpointCreatorsManager getInstance() {
    return ApplicationManager.getApplication().getComponent(BreakpointCreatorsManager.class);
  }
}
