package jetbrains.mps.debug.api.breakpoints;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.textgen.trace.TraceablePositionInfo;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.textgen.trace.TraceInfo;
import jetbrains.mps.generator.traceInfo.TraceInfoUtil;
import jetbrains.mps.textgen.trace.PositionInfo;
import jetbrains.mps.util.ComputeRunnable;
import jetbrains.mps.util.Computable;
import org.jetbrains.mps.openapi.model.SModelReference;

public class BreakpointLocation {
  private final SNodeReference myNodePointer;
  public BreakpointLocation(@NotNull SNodeReference nodePointer) {
    myNodePointer = nodePointer;
  }
  public BreakpointLocation(@NotNull SNode node) {
    myNodePointer = new SNodePointer(node);
  }
  public SNodeReference getNodePointer() {
    return myNodePointer;
  }
  @Nullable
  public SNode getSNode() {
    return myNodePointer.resolve(MPSModuleRepository.getInstance());
  }
  @Nullable
  public TraceablePositionInfo getTargetCodePosition() {
    SModel model = SNodeOperations.getModelFromNodeReference(myNodePointer);
    if (model == null) {
      return null;
    }
    final Wrappers._T<TraceablePositionInfo> positionForNode = new Wrappers._T<TraceablePositionInfo>();
    model.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        positionForNode.value = TraceInfo.getPositionForNode(getSNode());
      }
    });
    return positionForNode.value;
  }
  @Nullable
  public String getTargetUnitName() {
    return TraceInfoUtil.getUnitName(getTargetCodePosition(), SNodeOperations.getModelFromNodeReference(myNodePointer));
  }
  public boolean isValid() {
    return getTargetCodePosition() != null;
  }
  public int getLineIndexInFile() {
    PositionInfo position = getTargetCodePosition();
    if (position == null) {
      return -1;
    }
    return position.getStartLine() + 1;
  }
  @Nullable
  public String getFileName() {
    PositionInfo positionInfo = getTargetCodePosition();
    if (positionInfo == null) {
      return null;
    }
    return positionInfo.getFileName();
  }
  public String getPresentation() {
    SModel model = SNodeOperations.getModelFromNodeReference(myNodePointer);
    if (model == null) {
      return myNodePointer.toString();
    }
    ComputeRunnable<String> r = new ComputeRunnable<String>(new Computable<String>() {
      @Override
      public String compute() {
        SNode node = getSNode();
        if (node != null) {
          SNode root = node.getContainingRoot();
          return node + " in " + root + " (" + myNodePointer.getModelReference().getModelName() + ")";
        } else {
          return myNodePointer.toString();
        }
      }
    });
    model.getRepository().getModelAccess().runReadAction(r);
    return r.getResult();
  }
  public SModelReference getModelReference() {
    return myNodePointer.getModelReference();
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }

    return eq_ei108j_a0d0m(myNodePointer, ((BreakpointLocation) o).myNodePointer);
  }
  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + ((myNodePointer != null ? myNodePointer.hashCode() : 0));
    return result;
  }
  private static boolean eq_ei108j_a0d0m(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
