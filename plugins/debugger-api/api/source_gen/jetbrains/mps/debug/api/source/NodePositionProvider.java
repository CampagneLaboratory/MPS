package jetbrains.mps.debug.api.source;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import jetbrains.mps.debug.api.programState.ILocation;
import jetbrains.mps.debug.api.programState.NullLocation;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.generator.traceInfo.TraceInfoUtil;
import jetbrains.mps.debug.api.AbstractDebugSession;

public class NodePositionProvider implements IPositionProvider<NodeSourcePosition> {
  public NodePositionProvider() {
  }

  @Nullable
  public NodeSourcePosition getPosition(@Nullable ILocation location) {
    if (location == null || location instanceof NullLocation) {
      return null;
    }
    SNodeReference node = getSNodePointer(location);
    if (node != null) {
      return new NodeSourcePosition(node);
    }
    return null;
  }

  @Nullable
  public NodeSourcePosition getPosition(@NotNull String unitName, @NotNull String fileName, int lineNumber) {
    SNodeReference node = getSNodePointer(unitName, fileName, lineNumber);
    if (node != null) {
      return new NodeSourcePosition(node);
    }
    return null;
  }

  @Nullable
  public SNodeReference getSNodePointer(@Nullable ILocation location) {
    if (location == null || location instanceof NullLocation) {
      return null;
    }
    return getSNodePointer(location.getUnitName(), location.getFileName(), location.getLineNumber());
  }

  @Nullable
  public SNodeReference getSNodePointer(@NonNls final String unitName, @NonNls final String fileName, final int position) {
    return ModelAccess.instance().runReadAction(new Computable<SNodeReference>() {
      public SNodeReference compute() {
        SNode node = getNode(unitName, fileName, position);
        if (node == null) {
          return null;
        }
        return new SNodePointer(node);
      }
    });
  }

  @Nullable
  public SNode getNode(@Nullable ILocation location) {
    if (location == null || location instanceof NullLocation) {
      return null;
    }
    return getNode(location.getUnitName(), location.getFileName(), location.getLineNumber());
  }

  @Nullable
  public SNode getNode(@NonNls String unitName, @NonNls String fileName, int position) {
    return TraceInfoUtil.getNode(unitName, fileName, position);
  }

  public boolean accepts(AbstractDebugSession session) {
    return true;
  }
}
