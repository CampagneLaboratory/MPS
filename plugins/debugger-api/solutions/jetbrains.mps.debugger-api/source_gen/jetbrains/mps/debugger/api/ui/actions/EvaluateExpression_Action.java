package jetbrains.mps.debugger.api.ui.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.debug.api.evaluation.IEvaluationProvider;
import jetbrains.mps.debugger.api.ui.DebugActionsUtil;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.IOperationContext;
import javax.swing.ImageIcon;
import com.intellij.openapi.util.io.StreamUtil;
import java.io.IOException;

public class EvaluateExpression_Action extends GeneratedAction {
  private static final Icon ICON = getIcon();
  protected static Log log = LogFactory.getLog(EvaluateExpression_Action.class);

  public EvaluateExpression_Action() {
    super("Evaluate Expression", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        IEvaluationProvider evaluationProvider = DebugActionsUtil.getEvaluationProvider(event);
        event.getPresentation().setEnabled(evaluationProvider != null && evaluationProvider.canEvaluate());
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "EvaluateExpression", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("operationContext", event.getData(MPSDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("operationContext") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("selectedNodes", event.getData(MPSDataKeys.NODES));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      IEvaluationProvider evaluationProvider = DebugActionsUtil.getEvaluationProvider(event);
      if (evaluationProvider != null) {
        final Wrappers._T<List<SNodePointer>> nodePointers = new Wrappers._T<List<SNodePointer>>();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            nodePointers.value = (((List<SNode>) MapSequence.fromMap(_params).get("selectedNodes")) == null ?
              ListSequence.fromList(new ArrayList<SNodePointer>()) :
              Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SNode>() {
                public Iterable<SNode> iterable() {
                  return ((List<SNode>) MapSequence.fromMap(_params).get("selectedNodes"));
                }
              })).select(new ISelector<SNode, SNodePointer>() {
                public SNodePointer select(SNode it) {
                  return new SNodePointer(it);
                }
              }).toListSequence()
            );
          }
        });
        evaluationProvider.showEvaluationDialog(((IOperationContext) MapSequence.fromMap(_params).get("operationContext")), nodePointers.value);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "EvaluateExpression", t);
      }
    }
  }

  private static Icon getIcon() {
    try {
      return new ImageIcon(StreamUtil.loadFromStream(EvaluateExpression_Action.class.getResourceAsStream("evaluate.png")));
    } catch (IOException e) {
      if (log.isWarnEnabled()) {
        log.warn("Couldn't load icon for EvaluateExpression", e);
      }
      return null;
    }
  }
}
