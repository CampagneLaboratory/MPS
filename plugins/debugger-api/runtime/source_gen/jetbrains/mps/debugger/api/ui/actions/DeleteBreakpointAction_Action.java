package jetbrains.mps.debugger.api.ui.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.util.IconUtil;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.debug.api.breakpoints.IBreakpoint;
import jetbrains.mps.debugger.api.ui.breakpoints.BreakpointsUtil;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.debug.api.BreakpointManagerComponent;
import com.intellij.openapi.project.Project;

public class DeleteBreakpointAction_Action extends BaseAction {
  private static final Icon ICON = IconUtil.getIcon("remove.png");
  protected static Log log = LogFactory.getLog(DeleteBreakpointAction_Action.class);

  public DeleteBreakpointAction_Action() {
    super("Delete", "Delete Breakpoint", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        IBreakpoint breakpoint = BreakpointsUtil.MPS_BREAKPOINT.getData(event.getDataContext());
        event.getPresentation().setEnabled(breakpoint != null);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "DeleteBreakpointAction", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final IBreakpoint breakpoint = BreakpointsUtil.MPS_BREAKPOINT.getData(event.getDataContext());
      if (breakpoint == null) {
        return;
      }
      ModelAccess.instance().runReadAction(new Runnable() {
        @Override
        public void run() {
          BreakpointManagerComponent.getInstance(((Project) MapSequence.fromMap(_params).get("project"))).removeBreakpoint(breakpoint);
        }
      });
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "DeleteBreakpointAction", t);
      }
    }
  }
}
