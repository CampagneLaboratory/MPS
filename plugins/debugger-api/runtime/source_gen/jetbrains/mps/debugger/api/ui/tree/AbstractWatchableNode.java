package jetbrains.mps.debugger.api.ui.tree;

/*Generated by MPS */

import jetbrains.mps.ide.ui.tree.MPSTreeNode;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import jetbrains.mps.ide.ui.tree.MPSTree;

/*package*/ abstract class AbstractWatchableNode extends MPSTreeNode {
  protected final SNode myNode;
  public AbstractWatchableNode(@Nullable SNode node) {
    myNode = node;
  }
  @Nullable
  public SNode getNode() {
    return myNode;
  }
  public void openNode(final boolean focus, final boolean select) {
    if (myNode == null) {
      return;
    }
    final Project mpsProject = ProjectHelper.toMPSProject(getProject());
    if (mpsProject != null) {
      mpsProject.getModelAccess().runWriteInEDT(new Runnable() {
        @Override
        public void run() {
          NavigationSupport.getInstance().openNode(mpsProject, myNode, focus, select);
        }
      });
    }
  }
  @Nullable
  private com.intellij.openapi.project.Project getProject() {
    MPSTree tree = getTree();
    if (tree instanceof VariablesTree) {
      return ((VariablesTree) tree).getProject();
    }
    return null;
  }
}
