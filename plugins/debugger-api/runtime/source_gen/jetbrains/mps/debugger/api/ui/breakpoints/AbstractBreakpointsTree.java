package jetbrains.mps.debugger.api.ui.breakpoints;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import java.util.Collection;
import jetbrains.mps.debug.api.BreakpointManagerComponent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.debug.api.breakpoints.IBreakpoint;
import javax.swing.tree.TreePath;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import java.util.ArrayList;
import javax.swing.JComponent;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.project.IModule;
import jetbrains.mps.debug.api.breakpoints.ILocationBreakpoint;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import javax.swing.Icon;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.smodel.SModelReference;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.ui.CheckBoxNodeRenderer;
import java.awt.Color;
import javax.swing.UIManager;

/*package*/ abstract class AbstractBreakpointsTree extends BreakpointsView {
  protected final IOperationContext myContext;
  protected final GroupedTree<AbstractBreakpointsTree.BreakpointNodeData> myTree;
  protected final GroupedTree.GroupKind myModuleKind = new AbstractBreakpointsTree.ModuleGroupKind();
  protected final GroupedTree.GroupKind myModelKind = new AbstractBreakpointsTree.ModelGroupKind();
  protected final GroupedTree.GroupKind myRootKind = new AbstractBreakpointsTree.RootGroupKind();
  protected Collection<AbstractBreakpointsTree.BreakpointNodeData> myData;
  protected final BreakpointManagerComponent.IBreakpointManagerListener myListener = new BreakpointManagerComponent.BreakpointManagerListener() {
    @Override
    public void breakpointsChanged() {
      update();
    }
  };

  public AbstractBreakpointsTree(BreakpointManagerComponent breakpointsManager, IOperationContext context) {
    super(breakpointsManager);
    myContext = context;
    myBreakpointsManager.addChangeListener(myListener);
    updateBreakpointsData();
    myTree = new GroupedTree<AbstractBreakpointsTree.BreakpointNodeData>(myContext) {
      protected AbstractBreakpointsTree.BreakpointTreeNode createDataNode(IOperationContext operationContext, AbstractBreakpointsTree.BreakpointNodeData data) {
        return new AbstractBreakpointsTree.BreakpointTreeNode(operationContext, data);
      }

      @Override
      protected GroupedTree.GroupKind<AbstractBreakpointsTree.BreakpointNodeData, Object> createRootGroupKind() {
        return new AbstractBreakpointsTree.AllGroupKind();
      }

      @Override
      protected Collection<AbstractBreakpointsTree.BreakpointNodeData> getData() {
        return myData;
      }
    };
    myTree.addTreeSelectionListener(new TreeSelectionListener() {
      @Override
      public void valueChanged(TreeSelectionEvent e) {
        fireBreakpointSelected(getSelectedBreakpoint(e.getPath()));
      }
    });
    myTree.setRootVisible(false);
    myTree.setShowsRootHandles(true);
  }

  @Override
  public void dispose() {
    myBreakpointsManager.removeChangeListener(myListener);
    super.dispose();
  }

  @Override
  @Nullable
  public IBreakpoint getSelectedBreakpoint() {
    TreePath path = myTree.getSelectionPath();
    return getSelectedBreakpoint(path);
  }

  @Nullable
  protected IBreakpoint getSelectedBreakpoint(@Nullable TreePath path) {
    if (path != null) {
      Object lastPathComponent = path.getLastPathComponent();
      if (lastPathComponent instanceof AbstractBreakpointsTree.BreakpointTreeNode) {
        return ((AbstractBreakpointsTree.BreakpointNodeData) ((AbstractBreakpointsTree.BreakpointTreeNode) lastPathComponent).getUserObject()).myBreakpoint;
      }
    }
    return null;
  }

  @Override
  public void selectBreakpoint(@Nullable final IBreakpoint breakpoint) {
    if (breakpoint != null) {
      MPSTreeNode treeNode = ModelAccess.instance().runReadAction(new Computable<MPSTreeNode>() {
        @Override
        public MPSTreeNode compute() {
          return myTree.findNodeForData(new AbstractBreakpointsTree.BreakpointNodeData(breakpoint));
        }
      });
      myTree.selectNode(treeNode);
    } else {
      myTree.clearSelection();
    }
  }

  protected void updateView() {
    myModelKind.setVisible(BreakpointViewSettingsComponent.getInstance(myContext.getProject()).isGroupByModel());
    myModuleKind.setVisible(BreakpointViewSettingsComponent.getInstance(myContext.getProject()).isGroupByModule());
    myRootKind.setVisible(BreakpointViewSettingsComponent.getInstance(myContext.getProject()).isGroupByRoot());
  }

  protected void updateBreakpointsData() {
    Collection<AbstractBreakpointsTree.BreakpointNodeData> data = new ArrayList<AbstractBreakpointsTree.BreakpointNodeData>();
    for (IBreakpoint bp : getBreakpointsList()) {
      data.add(new AbstractBreakpointsTree.BreakpointNodeData(bp));
    }
    myData = data;
  }

  @Override
  public JComponent getMainComponent() {
    return myTree;
  }

  public void update() {
    updateBreakpoints();
    updateBreakpointsData();
    myTree.rebuildLater();
  }

  @Override
  public Object getData(@NonNls String dataId) {
    TreePath path = myTree.getSelectionPath();
    if (path == null) {
      return null;
    }
    Object node = path.getLastPathComponent();
    if (BreakpointsUtil.MPS_BREAKPOINT.is(dataId)) {
      if (node instanceof AbstractBreakpointsTree.BreakpointTreeNode) {
        AbstractBreakpointsTree.BreakpointTreeNode breakpointNode = (AbstractBreakpointsTree.BreakpointTreeNode) node;
        return ((AbstractBreakpointsTree.BreakpointNodeData) breakpointNode.getUserObject()).myBreakpoint;
      }
      return null;
    }
    return null;
  }

  protected class AllGroupKind extends GroupedTree.GroupKind<AbstractBreakpointsTree.BreakpointNodeData, Object> {
    protected AllGroupKind() {
    }

    @Override
    public Object getGroup(AbstractBreakpointsTree.BreakpointNodeData breakpoint) {
      return new Object();
    }

    @Override
    public GroupedTree.GroupKind getSubGroupKind() {
      return myModuleKind;
    }
  }

  private class ModuleGroupKind extends GroupedTree.GroupKind<AbstractBreakpointsTree.BreakpointNodeData, IModule> {
    private ModuleGroupKind() {
    }

    @Override
    public IModule getGroup(AbstractBreakpointsTree.BreakpointNodeData breakpointData) {
      IBreakpoint breakpoint = breakpointData.getBreakpoint();
      if (breakpoint instanceof ILocationBreakpoint) {
        SModelDescriptor modelDescriptor = SModelRepository.getInstance().getModelDescriptor(((ILocationBreakpoint) breakpoint).getLocation().getModelReference());
        if (modelDescriptor != null) {
          return modelDescriptor.getModule();
        }
      }
      return null;
    }

    @Override
    public GroupedTree.GroupKind getSubGroupKind() {
      return myModelKind;
    }

    @Override
    public Icon getIcon(IModule m) {
      return IconManager.getIconFor(m);
    }
  }

  private class ModelGroupKind extends GroupedTree.GroupKind<AbstractBreakpointsTree.BreakpointNodeData, SModelReference> {
    private ModelGroupKind() {
    }

    @Override
    public SModelReference getGroup(AbstractBreakpointsTree.BreakpointNodeData breakpointNodeData) {
      IBreakpoint breakpoint = breakpointNodeData.getBreakpoint();
      if (breakpoint instanceof ILocationBreakpoint) {
        return ((ILocationBreakpoint) breakpoint).getLocation().getModelReference();
      } else {
        return null;
      }
    }

    @Override
    public GroupedTree.GroupKind getSubGroupKind() {
      return myRootKind;
    }

    @Override
    public String getText(@NotNull SModelReference group) {
      return group.getLongName();
    }

    @Override
    public Icon getIcon(SModelReference model) {
      return IconManager.getIconFor(SModelRepository.getInstance().getModelDescriptor(model));
    }
  }

  private class RootGroupKind extends GroupedTree.GroupKind<AbstractBreakpointsTree.BreakpointNodeData, SNodePointer> {
    private RootGroupKind() {
    }

    @Override
    public SNodePointer getGroup(@NotNull AbstractBreakpointsTree.BreakpointNodeData breakpointNodeData) {
      IBreakpoint breakpoint = breakpointNodeData.getBreakpoint();
      if (breakpoint instanceof ILocationBreakpoint) {
        SNode node = ((ILocationBreakpoint) breakpoint).getLocation().getSNode();
        if (node != null) {
          return new SNodePointer(node.getContainingRoot());
        }
      }
      return null;
    }

    @Override
    public Icon getIcon(SNodePointer group) {
      return IconManager.getIconFor(group.getNode());
    }
  }

  protected class BreakpointNodeData implements CheckBoxNodeRenderer.NodeData {
    @NotNull
    private final IBreakpoint myBreakpoint;

    public BreakpointNodeData(@NotNull IBreakpoint breakpoint) {
      myBreakpoint = breakpoint;
    }

    @Override
    public Icon getIcon(boolean expanded) {
      return BreakpointIconRenderer.getIconFor(myBreakpoint);
    }

    @Override
    public Color getColor() {
      return UIManager.getColor("Tree.textForeground");
    }

    @Override
    public String getText() {
      return myBreakpoint.getPresentation();
    }

    @Override
    public boolean isSelected() {
      return myBreakpoint.isEnabled();
    }

    @Override
    public void setSelected(boolean selected) {
      myBreakpoint.setEnabled(selected);
    }

    @NotNull
    public IBreakpoint getBreakpoint() {
      return myBreakpoint;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      AbstractBreakpointsTree.BreakpointNodeData that = (AbstractBreakpointsTree.BreakpointNodeData) o;
      if (!(myBreakpoint.equals(that.myBreakpoint))) {
        return false;
      }
      return true;
    }

    @Override
    public int hashCode() {
      return myBreakpoint.hashCode();
    }
  }

  protected class BreakpointTreeNode extends MPSTreeNode {
    public BreakpointTreeNode(IOperationContext operationContext, AbstractBreakpointsTree.BreakpointNodeData breakpoint) {
      super(breakpoint, operationContext);
      AbstractBreakpointsTree.BreakpointNodeData bp = (AbstractBreakpointsTree.BreakpointNodeData) getUserObject();
      setNodeIdentifier(bp.getText());
      setIcon(bp.getIcon(true));
      setText(bp.getText());
    }

    public boolean isLeaf() {
      return true;
    }
  }
}
