package jetbrains.mps.debugger.api.ui.tree;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.debug.api.programState.IWatchable;
import jetbrains.mps.debug.api.AbstractUiState;
import jetbrains.mps.smodel.IOperationContext;
import javax.swing.Icon;
import jetbrains.mps.debug.api.programState.IValue;
import javax.swing.tree.DefaultTreeModel;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class WatchableNode extends AbstractWatchableNode {
  private volatile boolean myInitialized;
  @NotNull
  private final IWatchable myWatchable;
  private final AbstractUiState myState;

  public WatchableNode(@NotNull IWatchable watchable, AbstractUiState state) {
    this(null, watchable, state);
  }

  public WatchableNode(IOperationContext context, @NotNull IWatchable watchable, AbstractUiState state) {
    super(context, watchable.getNode());
    myWatchable = watchable;
    myState = state;
    setNodeIdentifier(calculateNodeId());
    setIcon(getNodeIcon());
  }

  @Override
  protected void doUpdate() {
    this.removeAllChildren();
    myInitialized = false;
  }

  @Override
  public boolean isInitialized() {
    return myInitialized;
  }

  protected Icon getNodeIcon() {
    return myWatchable.getPresentationIcon();
  }

  protected String calculateNodeId() {
    IValue value = myWatchable.getValue();
    if (value == null) {
      return myWatchable.getName() + " = null";
    }
    return myWatchable.getName() + " = " + value.getValuePresentation();
  }

  @Override
  public boolean isLeaf() {
    IValue value = getValue();
    return value == null || !(value.isStructure());
  }

  public IValue getValue() {
    return myWatchable.getValue();
  }

  /*package*/ void nodeChanged() {
    ((DefaultTreeModel) getTree().getModel()).nodeStructureChanged(this);
  }

  @Override
  protected void doInit() {
    if (myInitialized) {
      return;
    }
    removeAllChildren();
    nodeChanged();
    if (!(isLeaf())) {
      myState.invokeEvaluation(new _FunctionTypes._void_P0_E0() {
        public void invoke() {
          myWatchable.getValue().initSubvalues();
          ApplicationManager.getApplication().invokeLater(new Runnable() {
            @Override
            public void run() {
              removeAllChildren();
              for (IWatchable watchable : ListSequence.fromList(getValue().getSubvalues())) {
                add(new WatchableNode(watchable, myState));
              }
              updatePresentation();
              myInitialized = true;
              nodeChanged();
            }
          });
        }
      });
    }
  }
}
