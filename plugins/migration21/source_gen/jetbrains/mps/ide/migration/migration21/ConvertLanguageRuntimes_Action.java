package jetbrains.mps.ide.migration.migration21;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.project.Solution;
import jetbrains.mps.ide.newSolutionDialog.NewModuleUtil;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.project.StandaloneMPSProject;
import jetbrains.mps.reloading.ClassLoaderManager;
import jetbrains.mps.progress.EmptyProgressMonitor;

public class ConvertLanguageRuntimes_Action extends BaseAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(ConvertLanguageRuntimes_Action.class);

  public ConvertLanguageRuntimes_Action() {
    super("Convert Language Runtimes", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "ConvertLanguageRuntimes", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      for (Language language : ListSequence.fromList(((MPSProject) MapSequence.fromMap(_params).get("project")).getProjectModules(Language.class))) {
        if (language.getRuntimeModelsEntries().isEmpty()) {
          continue;
        }

        Solution runtime = NewModuleUtil.createSolution(language.getModuleFqName() + ".runtime", language.getBundleHome().getDescendant("solutions").getDescendant("runtime").getPath(), ((MPSProject) MapSequence.fromMap(_params).get("project")));
        SolutionDescriptor sd = runtime.getModuleDescriptor();
        sd.getStubModelEntries().addAll(language.getRuntimeModelsEntries());
        sd.getModelRoots().addAll(language.getRuntimeModelsEntries());
        runtime.setSolutionDescriptor(sd, false);
        runtime.save();

        LanguageDescriptor ld = language.getModuleDescriptor();
        ld.getRuntimeModules().add(runtime.getModuleReference());
        ld.getModelRoots().remove(ld.getRuntimeStubModels());
        ld.getRuntimeStubModels().clear();
        language.setModuleDescriptor(ld, false);
        language.save();

        ((MPSProject) MapSequence.fromMap(_params).get("project")).addModule(runtime.getModuleReference());
        StandaloneMPSProject project = (StandaloneMPSProject) ((MPSProject) MapSequence.fromMap(_params).get("project"));
        project.setFolderFor(runtime, project.getFolderFor(language));
      }
      ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "ConvertLanguageRuntimes", t);
      }
    }
  }
}
