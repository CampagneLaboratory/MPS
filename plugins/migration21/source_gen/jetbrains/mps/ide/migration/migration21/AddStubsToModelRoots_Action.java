package jetbrains.mps.ide.migration.migration21;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import java.util.List;
import jetbrains.mps.project.structure.model.ModelRoot;
import java.util.ArrayList;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.reloading.ClassLoaderManager;
import jetbrains.mps.progress.EmptyProgressMonitor;

public class AddStubsToModelRoots_Action extends BaseAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(AddStubsToModelRoots_Action.class);

  public AddStubsToModelRoots_Action() {
    super("Copy Stub Roots to Model Roots", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "AddStubsToModelRoots", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      for (IModule module : ListSequence.fromList(MPSModuleRepository.getInstance().getAllModules())) {
        ModuleDescriptor descriptor = module.getModuleDescriptor();
        if (descriptor == null) {
          continue;
        }

        List<ModelRoot> modelRoots = ListSequence.fromList(new ArrayList<ModelRoot>());
        Iterator<ModelRoot> mr_it = SetSequence.fromSet(descriptor.getModelRoots()).iterator();
        ModelRoot mr_var;
        while (mr_it.hasNext()) {
          mr_var = mr_it.next();
          if (!(ListSequence.fromList(modelRoots).contains(mr_var))) {
            ListSequence.fromList(modelRoots).addElement(mr_var);
          }
        }
        Iterator<ModelRoot> sm_it = SetSequence.fromSet(descriptor.getStubModelEntries()).iterator();
        ModelRoot sm_var;
        while (sm_it.hasNext()) {
          sm_var = sm_it.next();
          if (!(ListSequence.fromList(modelRoots).contains(sm_var))) {
            ListSequence.fromList(modelRoots).addElement(sm_var);
          }
        }
        descriptor.getModelRoots().clear();
        descriptor.getModelRoots().addAll(modelRoots);

        module.setModuleDescriptor(descriptor, false);
        module.save();
      }

      ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "AddStubsToModelRoots", t);
      }
    }
  }
}
