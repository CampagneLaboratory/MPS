package jetbrains.mps.ide.migration.migration21;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import java.util.List;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.reloading.ClassLoaderManager;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.project.Solution;
import jetbrains.mps.ide.newSolutionDialog.NewModuleUtil;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.ModuleId;

public class PluginMoveHelper {
  private static final String SOLUTION_NAME = "pluginSolution";

  private MPSProject myProject;

  public PluginMoveHelper(MPSProject p) {
    myProject = p;
  }

  public void move() {
    List<Language> langs = myProject.getProjectModules(Language.class);
    Iterable<Language> refLangs = ListSequence.fromList(langs).where(new IWhereFilter<Language>() {
      public boolean accept(Language it) {
        return !(it.isPackaged()) && LanguageAspect.PLUGIN.get(it) != null;
      }
    });
    Iterable<Language> problems = Sequence.fromIterable(refLangs).where(new IWhereFilter<Language>() {
      public boolean accept(Language it) {
        return MPSModuleRepository.getInstance().getSolution(makePluginSolutionName(it, SOLUTION_NAME)) != null;
      }
    });

    if (Sequence.fromIterable(problems).isNotEmpty()) {
      final StringBuilder sb = new StringBuilder();
      Sequence.fromIterable(problems).visitAll(new IVisitor<Language>() {
        public void visit(Language it) {
          sb.append(makePluginSolutionName(it, SOLUTION_NAME)).append(",\n");
        }
      });
      if (sb.length() > 0) {
        sb.delete(sb.length() - 2, sb.length() - 1);
      }
      int result = Messages.showYesNoDialog("Solutions\n" + sb.toString() + " already exist. Nodes will be moved to existing solutions", "Solution Exists", "Continue", "Cancel", null);
      if (result == 1) {
        return;
      }
    }

    for (Language lang : Sequence.fromIterable(refLangs)) {
      movePluginOut(lang);
    }

    ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
  }

  private void movePluginOut(Language l) {
    String solutionName = makePluginSolutionName(l, SOLUTION_NAME);
    Solution s = MPSModuleRepository.getInstance().getSolution(solutionName);
    if (s == null) {
      s = NewModuleUtil.createSolution(solutionName, l.getBundleHome().getDescendant("solutions").getDescendant(SOLUTION_NAME).getPath(), myProject, false);
    }

    final String modelName = s.getModuleFqName() + ".plugin";
    List<SModelDescriptor> solModels = s.getOwnModelDescriptors();
    final Wrappers._T<SModelDescriptor> pluginModel = new Wrappers._T<SModelDescriptor>(ListSequence.fromList(solModels).where(new IWhereFilter<SModelDescriptor>() {
      public boolean accept(SModelDescriptor it) {
        return it.getLongName().equals(modelName);
      }
    }).first());
    if (pluginModel.value == null) {
      pluginModel.value = s.createModel(new SModelFqName(modelName, ""), s.getSModelRoots().get(0), null);
    }

    List<SNode> nodes = IterableUtil.asList(LanguageAspect.PLUGIN.get(l).getSModel().roots());

    ListSequence.fromList(nodes).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return isFromPluginLang(it);
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNodeOperations.detachNode(it);
        pluginModel.value.getSModel().addRoot(it);
      }
    });
    SModelRepository.getInstance().saveAll();
  }

  private boolean isFromPluginLang(SNode node) {
    ModuleReference ref = SNodeOperations.getModel(SNodeOperations.getConceptDeclaration(node)).getModelDescriptor().getModule().getModuleReference();
    ModuleReference plugin = MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("28f9e497-3b42-4291-aeba-0a1039153ab1")).getModuleReference();
    return ref.equals(plugin);
  }

  private String makePluginSolutionName(Language l, String name) {
    return l.getModuleFqName() + "." + name;
  }
}
