package jetbrains.mps.ide.migration.migration21;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import java.util.Queue;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import com.intellij.openapi.project.Project;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.concurrent.CountDownLatch;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.project.OptimizeImportsHelper;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SModelRepository;

public class OptimizeImportsInProject_Action extends BaseAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(OptimizeImportsInProject_Action.class);

  public OptimizeImportsInProject_Action() {
    super("Optimize Model Imports", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "OptimizeImportsInProject", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    MapSequence.fromMap(_params).put("context", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final Queue<IModule> modules = QueueSequence.fromQueueWithValues(new LinkedList<IModule>(), ((Project) MapSequence.fromMap(_params).get("project")).getComponent(MPSProject.class).getModules());
      final List<SModelDescriptor> modelsToFix = ListSequence.fromList(new ArrayList<SModelDescriptor>());
      final CountDownLatch latch = new CountDownLatch(1);
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          while (QueueSequence.fromQueue(modules).isNotEmpty()) {
            IModule module = QueueSequence.fromQueue(modules).removeFirstElement();
            if (module.isPackaged()) {
              continue;
            }
            if (module instanceof Language) {
              QueueSequence.fromQueue(modules).addSequence(CollectionSequence.fromCollection(((Language) module).getGenerators()));
            }
            final IScope moduleScope = module.getScope();
            for (SModelDescriptor model : ListSequence.fromList(module.getOwnModelDescriptors())) {
              if (!(SModelStereotype.isUserModel(model))) {
                continue;
              }
              if (!(model instanceof EditableSModelDescriptor)) {
                continue;
              }

              List<SModelReference> imports = SModelOperations.getImportedModelUIDs(model.getSModel());
              if (ListSequence.fromList(imports).any(new IWhereFilter<SModelReference>() {
                public boolean accept(SModelReference imp) {
                  return moduleScope.getModelDescriptor(imp) == null;
                }
              })) {
                ListSequence.fromList(modelsToFix).addElement(model);
              }
            }
          }
          latch.countDown();
        }
      });
      try {
        latch.await();
      } catch (InterruptedException ignore) {
      }
      if (ListSequence.fromList(modelsToFix).isNotEmpty()) {
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            new OptimizeImportsHelper(((IOperationContext) MapSequence.fromMap(_params).get("context"))).optimizeModelsImports(modelsToFix);
            SModelRepository.getInstance().saveAll();
          }
        });
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "OptimizeImportsInProject", t);
      }
    }
  }
}
