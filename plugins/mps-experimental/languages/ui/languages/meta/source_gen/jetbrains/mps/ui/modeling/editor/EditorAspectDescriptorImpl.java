package jetbrains.mps.ui.modeling.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AlignmentLayoutConstraint_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new ApplyConstraintStatement_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AspectParameterDecl_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new AspectParameterRef_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new AuxObjectAccessOp_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new AuxObjectFactory_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new AuxObjectTemplate_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Auxillary_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new BeforeUIObjectParam_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new BoxLayoutConstraint_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new CellLayoutConstraint_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new ChildAspectDefinition_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new ColumnLayoutConstraint_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new Container_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new ContainerItemAdder_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new ContainerItemClearer_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new ContainerItemInserter_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new ContainerItemIterator_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new ContainerItemRemover_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new ContainerTemplate_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new Context_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new ContextUIObjectParam_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new EditableUIProperty_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new EditableUIPropertyAccessCode_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new Event_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new EventHandlerSetup_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new EventHandlerTemplate_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new EventProducer_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new EventProperty_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new EventPropertyGetter_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new ExpressionWithUnit_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new ForceLayoutCode_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new Geometry_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new HorizontalAlignment_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new HorizontalConstraint_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new ItemUIObjectParam_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new LayoutConstraintExpression_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new LayoutConstraintType_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new OverrideAnnotation_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new PropertyChangeHandlerSetup_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new PropertyValueParam_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new RowLayoutConstraint_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new ThisUIObjectParam_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new UIAction_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new UIActionCode_Editor());
      case 45:
        return Collections.<ConceptEditor>singletonList(new UIObject_Editor());
      case 46:
        return Collections.<ConceptEditor>singletonList(new UIObjectFactory_Editor());
      case 47:
        return Collections.<ConceptEditor>singletonList(new UIObjectTemplate_Editor());
      case 48:
        return Collections.<ConceptEditor>singletonList(new UIProperty_Editor());
      case 49:
        return Collections.<ConceptEditor>singletonList(new UIPropertyAccessCode_Editor());
      case 50:
        return Collections.<ConceptEditor>singletonList(new UIPropertyGetter_Editor());
      case 51:
        return Collections.<ConceptEditor>singletonList(new UIPropertySetter_Editor());
      case 52:
        return Collections.<ConceptEditor>singletonList(new UnitType_Editor());
      case 53:
        return Collections.<ConceptEditor>singletonList(new VerticalAlignment_Editor());
      case 54:
        return Collections.<ConceptEditor>singletonList(new VerticalConstraint_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        if ("jetbrains.mps.ui.modeling.editor.IAspectParameterHolder_Component".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new IAspectParameterHolder_Component());
        }
        break;
      case 1:
        if ("jetbrains.mps.ui.modeling.editor.IPartiallyDefinedStub_Component".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new IPartiallyDefinedStub_Component());
        }
        break;
      default:
    }
    return Collections.emptyList();
  }



  public Collection<ConceptEditorHint> getHints() {
    return Collections.emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.ui.modeling.structure.AlignmentLayoutConstraint", "jetbrains.mps.ui.modeling.structure.ApplyConstraintStatement", "jetbrains.mps.ui.modeling.structure.AspectParameterDecl", "jetbrains.mps.ui.modeling.structure.AspectParameterRef", "jetbrains.mps.ui.modeling.structure.AuxObjectAccessOp", "jetbrains.mps.ui.modeling.structure.AuxObjectFactory", "jetbrains.mps.ui.modeling.structure.AuxObjectTemplate", "jetbrains.mps.ui.modeling.structure.Auxillary", "jetbrains.mps.ui.modeling.structure.BeforeUIObjectParam", "jetbrains.mps.ui.modeling.structure.BoxLayoutConstraint", "jetbrains.mps.ui.modeling.structure.CellLayoutConstraint", "jetbrains.mps.ui.modeling.structure.ChildAspectDefinition", "jetbrains.mps.ui.modeling.structure.ColumnLayoutConstraint", "jetbrains.mps.ui.modeling.structure.Container", "jetbrains.mps.ui.modeling.structure.ContainerItemAdder", "jetbrains.mps.ui.modeling.structure.ContainerItemClearer", "jetbrains.mps.ui.modeling.structure.ContainerItemInserter", "jetbrains.mps.ui.modeling.structure.ContainerItemIterator", "jetbrains.mps.ui.modeling.structure.ContainerItemRemover", "jetbrains.mps.ui.modeling.structure.ContainerTemplate", "jetbrains.mps.ui.modeling.structure.Context", "jetbrains.mps.ui.modeling.structure.ContextUIObjectParam", "jetbrains.mps.ui.modeling.structure.EditableUIProperty", "jetbrains.mps.ui.modeling.structure.EditableUIPropertyAccessCode", "jetbrains.mps.ui.modeling.structure.Event", "jetbrains.mps.ui.modeling.structure.EventHandlerSetup", "jetbrains.mps.ui.modeling.structure.EventHandlerTemplate", "jetbrains.mps.ui.modeling.structure.EventProducer", "jetbrains.mps.ui.modeling.structure.EventProperty", "jetbrains.mps.ui.modeling.structure.EventPropertyGetter", "jetbrains.mps.ui.modeling.structure.ExpressionWithUnit", "jetbrains.mps.ui.modeling.structure.ForceLayoutCode", "jetbrains.mps.ui.modeling.structure.Geometry", "jetbrains.mps.ui.modeling.structure.HorizontalAlignment", "jetbrains.mps.ui.modeling.structure.HorizontalConstraint", "jetbrains.mps.ui.modeling.structure.ItemUIObjectParam", "jetbrains.mps.ui.modeling.structure.LayoutConstraintExpression", "jetbrains.mps.ui.modeling.structure.LayoutConstraintType", "jetbrains.mps.ui.modeling.structure.OverrideAnnotation", "jetbrains.mps.ui.modeling.structure.PropertyChangeHandlerSetup", "jetbrains.mps.ui.modeling.structure.PropertyValueParam", "jetbrains.mps.ui.modeling.structure.RowLayoutConstraint", "jetbrains.mps.ui.modeling.structure.ThisUIObjectParam", "jetbrains.mps.ui.modeling.structure.UIAction", "jetbrains.mps.ui.modeling.structure.UIActionCode", "jetbrains.mps.ui.modeling.structure.UIObject", "jetbrains.mps.ui.modeling.structure.UIObjectFactory", "jetbrains.mps.ui.modeling.structure.UIObjectTemplate", "jetbrains.mps.ui.modeling.structure.UIProperty", "jetbrains.mps.ui.modeling.structure.UIPropertyAccessCode", "jetbrains.mps.ui.modeling.structure.UIPropertyGetter", "jetbrains.mps.ui.modeling.structure.UIPropertySetter", "jetbrains.mps.ui.modeling.structure.UnitType", "jetbrains.mps.ui.modeling.structure.VerticalAlignment", "jetbrains.mps.ui.modeling.structure.VerticalConstraint"};
  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"jetbrains.mps.ui.modeling.structure.IAspectParameterHolder", "jetbrains.mps.ui.modeling.structure.IPartiallyDefinedStub"};
}
