package treepathFeatures;

/*Generated by MPS */

import jetbrains.mps.ypath.design.IParameterizedFeatureDesign;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class SNODE_Design {
  public static class Design_Feature_child extends IParameterizedFeatureDesign.Stub<String> implements IParameterizedFeatureDesign<String> {
    public Iterable<String> getParameters(SNode nodeType) {
      return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(nodeType, "jetbrains.mps.lang.smodel.structure.SNodeType"), "concept", false), "linkDeclaration", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return "aggregation".equals(SPropertyOperations.getString_def(it, "metaClass", "reference"));
        }
      }).select(new ISelector<SNode, String>() {
        public String select(SNode it) {
          return SPropertyOperations.getString(it, "role");
        }
      });
    }

    public SNode getTargetType(String param, SNode nodeType) {
      final String _param = param;
      SNode ld = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(nodeType, "jetbrains.mps.lang.smodel.structure.SNodeType"), "concept", false), "linkDeclaration", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString(it, "role").equals(_param);
        }
      }).first();
      SNode trg = SLinkOperations.getTarget(ld, "target", false);
      return _quotation_createNode_nj78q_a3a0a(trg);
    }

    public String parameterToString(String param) {
      return param;
    }

    private static SNode _quotation_createNode_nj78q_a3a0a(Object parameter_1) {
      PersistenceFacade facade = PersistenceFacade.getInstance();
      SNode quotedNode_2 = null;
      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, GlobalScope.getInstance(), false);
      SNodeAccessUtil.setReferenceTarget(quotedNode_2, "concept", (SNode) parameter_1);
      return quotedNode_2;
    }
  }

  public static class Design_Feature_link extends IParameterizedFeatureDesign.Stub<String> implements IParameterizedFeatureDesign<String> {
    public Iterable<String> getParameters(SNode nodeType) {
      return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(nodeType, "jetbrains.mps.lang.smodel.structure.SNodeType"), "concept", false), "linkDeclaration", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString_def(it, "metaClass", "reference") == null || "reference".equals(SPropertyOperations.getString_def(it, "metaClass", "reference"));
        }
      }).select(new ISelector<SNode, String>() {
        public String select(SNode it) {
          return SPropertyOperations.getString(it, "role");
        }
      });
    }

    public SNode getTargetType(String param, SNode nodeType) {
      final String _param = param;
      SNode ld = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(nodeType, "jetbrains.mps.lang.smodel.structure.SNodeType"), "concept", false), "linkDeclaration", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString(it, "role").equals(_param);
        }
      }).first();
      SNode trg = SLinkOperations.getTarget(ld, "target", false);
      return _quotation_createNode_nj78q_a3a0b(trg);
    }

    public String parameterToString(String param) {
      return param;
    }

    private static SNode _quotation_createNode_nj78q_a3a0b(Object parameter_1) {
      PersistenceFacade facade = PersistenceFacade.getInstance();
      SNode quotedNode_2 = null;
      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, GlobalScope.getInstance(), false);
      SNodeAccessUtil.setReferenceTarget(quotedNode_2, "concept", (SNode) parameter_1);
      return quotedNode_2;
    }
  }
}
