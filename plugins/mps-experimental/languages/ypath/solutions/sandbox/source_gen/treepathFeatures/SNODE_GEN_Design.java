package treepathFeatures;

/*Generated by MPS */

import jetbrains.mps.ypath.design.IGenericParameterizedFeatureDesign;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.ypath.design.IGenericFeatureDesign;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class SNODE_GEN_Design {
  public static class Design_Feature_child extends IGenericParameterizedFeatureDesign.Stub<SNode> implements IGenericParameterizedFeatureDesign<SNode> {
    public Iterable<SNode> getParameters(SNode nodeType) {
      return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(nodeType, "concept", false), "linkDeclaration", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return "aggregation".equals(SPropertyOperations.getString_def(it, "metaClass", "reference"));
        }
      });
    }

    public SNode getTargetType(SNode param, SNode nodeType) {
      SNode ld = param;
      SNode trg = SLinkOperations.getTarget(ld, "target", false);
      return _quotation_createNode_iaikir_a2a0a(trg);
    }

    public String parameterToString(SNode param) {
      return SPropertyOperations.getString(param, "role");
    }

    public SNode getterExpression(SNode expression, SNode param, ITemplateGenerator generator) {
      SNode opExpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression", null);
      SNode op;
      SLinkOperations.setTarget(opExpr, "operand", expression, true);
      if (SnodeGenUtil.singleCardinality(SPropertyOperations.getString_def(param, "sourceCardinality", "0..1"))) {
        op = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.SLinkAccess", null);
        SLinkOperations.setTarget(SNodeOperations.cast(op, "jetbrains.mps.lang.smodel.structure.SLinkAccess"), "link", param, false);
      } else {
        op = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.SLinkListAccess", null);
        SLinkOperations.setTarget(SNodeOperations.cast(op, "jetbrains.mps.lang.smodel.structure.SLinkListAccess"), "link", param, false);
      }
      SLinkOperations.setTarget(opExpr, "operation", op, true);
      return opExpr;
    }

    public boolean isSingleTargetCardinality(SNode param) {
      return SnodeGenUtil.singleCardinality(SPropertyOperations.getString_def(param, "sourceCardinality", "0..1"));
    }

    private static SNode _quotation_createNode_iaikir_a2a0a(Object parameter_1) {
      SNode quotedNode_2 = null;
      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, GlobalScope.getInstance(), false);
      SNodeAccessUtil.setReferenceTarget(quotedNode_2, "concept", (SNode) parameter_1);
      return quotedNode_2;
    }
  }

  public static class Design_Feature_link extends IGenericParameterizedFeatureDesign.Stub<SNode> implements IGenericParameterizedFeatureDesign<SNode> {
    public Iterable<SNode> getParameters(SNode nodeType) {
      return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(nodeType, "concept", false), "linkDeclaration", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString_def(it, "metaClass", "reference") == null || "reference".equals(SPropertyOperations.getString_def(it, "metaClass", "reference"));
        }
      });
    }

    public SNode getTargetType(SNode param, SNode nodeType) {
      SNode ld = param;
      SNode trg = SLinkOperations.getTarget(ld, "target", false);
      return _quotation_createNode_iaikir_a2a0b(trg);
    }

    public String parameterToString(SNode param) {
      return SPropertyOperations.getString(param, "role");
    }

    public SNode getterExpression(SNode expression, SNode param, ITemplateGenerator generator) {
      SNode opExpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression", null);
      SNode op;
      SLinkOperations.setTarget(opExpr, "operand", expression, true);
      if (SnodeGenUtil.singleCardinality(SPropertyOperations.getString_def(param, "sourceCardinality", "0..1"))) {
        op = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.SLinkAccess", null);
        SLinkOperations.setTarget(SNodeOperations.cast(op, "jetbrains.mps.lang.smodel.structure.SLinkAccess"), "link", param, false);
      } else {
        op = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.SLinkListAccess", null);
        SLinkOperations.setTarget(SNodeOperations.cast(op, "jetbrains.mps.lang.smodel.structure.SLinkListAccess"), "link", param, false);
      }
      SLinkOperations.setTarget(opExpr, "operation", op, true);
      return opExpr;
    }

    public boolean isSingleTargetCardinality(SNode param) {
      return SnodeGenUtil.singleCardinality(SPropertyOperations.getString_def(param, "sourceCardinality", "0..1"));
    }

    private static SNode _quotation_createNode_iaikir_a2a0b(Object parameter_1) {
      SNode quotedNode_2 = null;
      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, GlobalScope.getInstance(), false);
      SNodeAccessUtil.setReferenceTarget(quotedNode_2, "concept", (SNode) parameter_1);
      return quotedNode_2;
    }
  }

  public static class Design_Feature_allChildren extends IGenericFeatureDesign.Stub implements IGenericFeatureDesign {
    public SNode getterExpression(SNode expression, ITemplateGenerator generator) {
      return _quotation_createNode_iaikir_a0a0c(expression);
    }

    private static SNode _quotation_createNode_iaikir_a0a0c(Object parameter_1) {
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
      quotedNode_3 = (SNode) parameter_1;
      if (quotedNode_3 != null) {
        quotedNode_2.addChild("operand", HUtil.copyIfNecessary(quotedNode_3));
      }
      quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetChildrenOperation", null, null, GlobalScope.getInstance(), false);
      quotedNode_2.addChild("operation", quotedNode_4);
      return quotedNode_2;
    }
  }

  public static class Design_Feature_parent extends IGenericFeatureDesign.Stub implements IGenericFeatureDesign {
    public SNode getterExpression(SNode expression, ITemplateGenerator generator) {
      return _quotation_createNode_iaikir_a0a0d(expression);
    }

    private static SNode _quotation_createNode_iaikir_a0a0d(Object parameter_1) {
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      SNode quotedNode_7 = null;
      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericNewExpression", null, null, GlobalScope.getInstance(), false);
      quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit", null, null, GlobalScope.getInstance(), false);
      quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
      quotedNode_6 = (SNode) parameter_1;
      if (quotedNode_6 != null) {
        quotedNode_4.addChild("operand", HUtil.copyIfNecessary(quotedNode_6));
      }
      quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetParentOperation", null, null, GlobalScope.getInstance(), false);
      quotedNode_4.addChild("operation", quotedNode_7);
      quotedNode_3.addChild("initValue", quotedNode_4);
      quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, GlobalScope.getInstance(), false);
      quotedNode_3.addChild("elementType", quotedNode_5);
      quotedNode_2.addChild("creator", quotedNode_3);
      return quotedNode_2;
    }
  }
}
