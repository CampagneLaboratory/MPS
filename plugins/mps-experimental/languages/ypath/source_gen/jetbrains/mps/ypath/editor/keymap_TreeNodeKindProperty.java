package jetbrains.mps.ypath.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.KeyMapImpl;
import jetbrains.mps.openapi.editor.cells.KeyMapAction;
import jetbrains.mps.editor.runtime.cells.KeyMapActionImpl;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class keymap_TreeNodeKindProperty extends KeyMapImpl {
  public keymap_TreeNodeKindProperty() {
    this.setApplicableToEveryModel(false);
    KeyMapAction action;
    action = new keymap_TreeNodeKindProperty.keymap_TreeNodeKindProperty_Action0();
    this.putAction("ctrl", "VK_D", action);
  }

  public static class keymap_TreeNodeKindProperty_Action0 extends KeyMapActionImpl {
    public keymap_TreeNodeKindProperty_Action0() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "Make this property default";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeUtil.isInstanceOf(contextNode, SConceptRepository.getInstance().getConcept("jetbrains.mps.ypath.structure.TreeNodeKindProperty")))) {
        return false;
      }
      return true;
    }

    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode treepath = SNodeOperations.getAncestor(node, "jetbrains.mps.ypath.structure.TreePathAspect", false, false);
      for (SNode desc : SNodeOperations.getDescendants(treepath, null, false, new String[]{})) {
        if (SNodeOperations.isInstanceOf(desc, "jetbrains.mps.ypath.structure.TreeNodeKindProperty")) {
          SPropertyOperations.set(SNodeOperations.cast(desc, "jetbrains.mps.ypath.structure.TreeNodeKindProperty"), "default", "" + (false));
        }
      }
      SPropertyOperations.set(node, "default", "" + (true));
    }

    public String getKeyStroke() {
      return "ctrl D";
    }
  }
}
