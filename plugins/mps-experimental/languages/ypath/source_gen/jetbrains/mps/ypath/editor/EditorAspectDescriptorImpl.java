package jetbrains.mps.ypath.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new FromOperation_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new GenericFeature_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new GenericParamFeature_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new IterateOperation_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new LambdaMethod_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new LambdaMethodParameter_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new ListFeature_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new MatchDefaultPropertyOperation_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new MatchKindOperation_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new MatchPropertyOperation_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new NodeKindCase_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new NodeKindDefaultCase_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new NodeKindSpecificCase_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new ParamListFeature_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new ParamSequenceFeature_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new ParameterWrapper_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new SequenceFeature_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new SwitchNodeKindStatement_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new TreeNodeKind_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new TreeNodeKindOccurrence_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new TreeNodeKindProperty_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new TreeNodeKindReference_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new TreePathAdapterExpression_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new TreePathAspect_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new TreePathCreator_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new TreePathOperationExpression_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new TreePathType_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new VisitBlock_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new VisitChildrenExpression_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new VisitNodesStatement_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new VisitParameterDeclaration_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new VisitParameterDeclarationList_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new WhereOperation_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        if ("jetbrains.mps.ypath.editor.IFeature_Properties".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new IFeature_Properties());
        }
        break;
      case 1:
        if ("jetbrains.mps.ypath.editor.IParamFeature_Properties".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new IParamFeature_Properties());
        }
        break;
      case 2:
        if ("jetbrains.mps.ypath.editor.TreePath_component".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new TreePath_component());
        }
        break;
      default:
    }
    return Collections.emptyList();
  }



  public Collection<ConceptEditorHint> getHints() {
    return Collections.emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.ypath.structure.FromOperation", "jetbrains.mps.ypath.structure.GenericFeature", "jetbrains.mps.ypath.structure.GenericParamFeature", "jetbrains.mps.ypath.structure.IterateOperation", "jetbrains.mps.ypath.structure.LambdaMethod", "jetbrains.mps.ypath.structure.LambdaMethodParameter", "jetbrains.mps.ypath.structure.ListFeature", "jetbrains.mps.ypath.structure.MatchDefaultPropertyOperation", "jetbrains.mps.ypath.structure.MatchKindOperation", "jetbrains.mps.ypath.structure.MatchPropertyOperation", "jetbrains.mps.ypath.structure.NodeKindCase", "jetbrains.mps.ypath.structure.NodeKindDefaultCase", "jetbrains.mps.ypath.structure.NodeKindSpecificCase", "jetbrains.mps.ypath.structure.ParamListFeature", "jetbrains.mps.ypath.structure.ParamSequenceFeature", "jetbrains.mps.ypath.structure.ParameterWrapper", "jetbrains.mps.ypath.structure.SequenceFeature", "jetbrains.mps.ypath.structure.SwitchNodeKindStatement", "jetbrains.mps.ypath.structure.TreeNodeKind", "jetbrains.mps.ypath.structure.TreeNodeKindOccurrence", "jetbrains.mps.ypath.structure.TreeNodeKindProperty", "jetbrains.mps.ypath.structure.TreeNodeKindReference", "jetbrains.mps.ypath.structure.TreePathAdapterExpression", "jetbrains.mps.ypath.structure.TreePathAspect", "jetbrains.mps.ypath.structure.TreePathCreator", "jetbrains.mps.ypath.structure.TreePathOperationExpression", "jetbrains.mps.ypath.structure.TreePathType", "jetbrains.mps.ypath.structure.VisitBlock", "jetbrains.mps.ypath.structure.VisitChildrenExpression", "jetbrains.mps.ypath.structure.VisitNodesStatement", "jetbrains.mps.ypath.structure.VisitParameterDeclaration", "jetbrains.mps.ypath.structure.VisitParameterDeclarationList", "jetbrains.mps.ypath.structure.WhereOperation"};
  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"jetbrains.mps.ypath.structure.IFeature", "jetbrains.mps.ypath.structure.IParamFeature", "jetbrains.mps.ypath.structure.TreePath"};
}
