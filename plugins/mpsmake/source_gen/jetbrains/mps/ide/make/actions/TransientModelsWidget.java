package jetbrains.mps.ide.make.actions;

/*Generated by MPS */

import com.intellij.openapi.wm.StatusBarWidget;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.wm.StatusBar;
import javax.swing.Icon;
import jetbrains.mps.make.IMakeNotificationListener;
import jetbrains.mps.make.IMakeService;
import org.jetbrains.annotations.Nullable;
import com.intellij.util.Consumer;
import java.awt.event.MouseEvent;
import jetbrains.mps.ide.generator.GenerationSettings;
import javax.swing.UIManager;
import jetbrains.mps.make.MakeNotification;
import com.intellij.openapi.application.ApplicationManager;
import javax.swing.JLabel;
import com.intellij.ui.LightColors;

public class TransientModelsWidget implements StatusBarWidget, StatusBarWidget.IconPresentation {
  public static final String WIDGET_ID = "TransientModelsWidget";

  @NotNull
  private final StatusBar myStatusBar;
  private final Icon myIcon = IconContainer.ICON_a1;
  private final IMakeNotificationListener myMakeNotificationListener = new TransientModelsWidget.MyMakeNotificationListener();

  public TransientModelsWidget(StatusBar bar) {
    myStatusBar = bar;
  }

  public void install(@NotNull StatusBar bar) {
    IMakeService.INSTANCE.get().addListener(myMakeNotificationListener);
  }

  @Nullable
  public String getTooltipText() {
    if (isSaveTransientModels()) {
      return "Stop saving transient models.";
    }
    return "Save transient models.";
  }

  @Nullable
  public Consumer<MouseEvent> getClickConsumer() {
    return new Consumer<MouseEvent>() {
      public void consume(MouseEvent e) {
        boolean saveTransientModels = GenerationSettings.getInstance().isSaveTransientModels();
        GenerationSettings.getInstance().setSaveTransientModels(!(saveTransientModels));
        myStatusBar.updateWidget(ID());
      }
    };
  }

  @Nullable
  public StatusBarWidget.WidgetPresentation getPresentation(@NotNull StatusBarWidget.PlatformType type) {
    return this;
  }

  public void dispose() {
    IMakeService.INSTANCE.get().removeListener(myMakeNotificationListener);
  }

  @NotNull
  public Icon getIcon() {
    if (isSaveTransientModels()) {
      return myIcon;
    }
    return UIManager.getLookAndFeel().getDisabledIcon(myStatusBar.getComponent(), myIcon);
  }

  @NotNull
  public String ID() {
    return WIDGET_ID;
  }

  public boolean isSaveTransientModels() {
    return GenerationSettings.getInstance().isSaveTransientModels();
  }

  private class MyMakeNotificationListener implements IMakeNotificationListener {
    public MyMakeNotificationListener() {
    }

    public void handleNotification(MakeNotification notification) {
      if (!(isSaveTransientModels())) {
        return;
      }
      if (notification.getKind() == MakeNotification.Kind.SESSION_OPENED) {
        ApplicationManager.getApplication().invokeLater(new Runnable() {
          public void run() {
            myStatusBar.fireNotificationPopup(new JLabel("Saving transient models is enabled."), LightColors.YELLOW);
          }
        });
      }
    }

    public void scriptAboutToStart(MakeNotification notification) {
    }

    public void scriptFinished(MakeNotification notification) {
    }

    public void sessionOpened(MakeNotification notification) {
    }

    public void sessionClosed(MakeNotification notification) {
    }
  }
}
