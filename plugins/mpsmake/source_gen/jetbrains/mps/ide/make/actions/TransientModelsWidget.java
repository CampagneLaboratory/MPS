package jetbrains.mps.ide.make.actions;

/*Generated by MPS */

import com.intellij.openapi.wm.StatusBarWidget;
import com.intellij.openapi.wm.CustomStatusBarWidget;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.wm.StatusBar;
import javax.swing.Icon;
import jetbrains.mps.make.IMakeNotificationListener;
import jetbrains.mps.make.IMakeService;
import org.jetbrains.annotations.Nullable;
import com.intellij.util.Consumer;
import java.awt.event.MouseEvent;
import jetbrains.mps.ide.generator.GenerationSettings;
import javax.swing.UIManager;
import com.intellij.openapi.ui.popup.Balloon;
import com.intellij.openapi.ui.popup.JBPopupFactory;
import com.intellij.ui.LightColors;
import com.intellij.ui.HyperlinkAdapter;
import javax.swing.event.HyperlinkEvent;
import javax.swing.SwingUtilities;
import java.awt.Component;
import java.awt.Point;
import com.intellij.ui.awt.RelativePoint;
import javax.swing.JRootPane;
import java.awt.Container;
import java.awt.Rectangle;
import com.intellij.util.ui.UIUtil;
import java.awt.Dimension;
import com.intellij.openapi.util.Disposer;
import javax.swing.JComponent;
import java.awt.event.MouseAdapter;
import java.awt.Graphics;
import java.awt.Insets;
import jetbrains.mps.make.MakeNotification;
import com.intellij.openapi.application.ApplicationManager;

public class TransientModelsWidget implements StatusBarWidget, CustomStatusBarWidget, StatusBarWidget.IconPresentation, StatusBarWidget.WidgetPresentation {
  public static final String WIDGET_ID = "TransientModelsWidget";

  @NotNull
  private final StatusBar myStatusBar;
  private final Icon myIcon = IconContainer.ICON_a1;
  private final IMakeNotificationListener myMakeNotificationListener = new TransientModelsWidget.MyMakeNotificationListener();
  private TransientModelsWidget.IconWrapperWithBlackJackAndHookers myComponent;

  public TransientModelsWidget(StatusBar bar) {
    myStatusBar = bar;
  }

  public void install(@NotNull StatusBar bar) {
    IMakeService.INSTANCE.get().addListener(myMakeNotificationListener);
  }

  @Nullable
  public String getTooltipText() {
    if (isSaveTransientModels()) {
      return "Stop saving transient models.";
    }
    return "Save transient models.";
  }

  @Nullable
  public Consumer<MouseEvent> getClickConsumer() {
    return new Consumer<MouseEvent>() {
      public void consume(MouseEvent e) {
        if (!(e.isPopupTrigger()) && MouseEvent.BUTTON1 == e.getButton()) {
          boolean saveTransientModels = GenerationSettings.getInstance().isSaveTransientModels();
          GenerationSettings.getInstance().setSaveTransientModels(!(saveTransientModels));
          myComponent.update();
          myStatusBar.updateWidget(ID());
        }
      }
    };
  }

  @Nullable
  public StatusBarWidget.WidgetPresentation getPresentation(@NotNull StatusBarWidget.PlatformType type) {
    return this;
  }

  public void dispose() {
    IMakeService.INSTANCE.get().removeListener(myMakeNotificationListener);
  }

  @NotNull
  public Icon getIcon() {
    if (isSaveTransientModels()) {
      return myIcon;
    }
    return UIManager.getLookAndFeel().getDisabledIcon(myStatusBar.getComponent(), myIcon);
  }

  @NotNull
  public String ID() {
    return WIDGET_ID;
  }

  public boolean isSaveTransientModels() {
    return GenerationSettings.getInstance().isSaveTransientModels();
  }

  private void showBaloon() {
    final Balloon balloon = JBPopupFactory.getInstance().createHtmlTextBalloonBuilder("Saving transient models is on.", null, LightColors.YELLOW, new HyperlinkAdapter() {
      protected void hyperlinkActivated(HyperlinkEvent p0) {
        // activated! 
      }
    }).createBalloon();
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        Component component = myComponent;
        if (component.isShowing()) {
          int offset = component.getHeight() / 2;
          Point point = new Point(component.getWidth() - offset, component.getHeight() - offset);
          balloon.show(new RelativePoint(component, point), Balloon.Position.above);
        } else {
          final JRootPane rootPane = SwingUtilities.getRootPane(component);
          if (rootPane != null && rootPane.isShowing()) {
            final Container contentPane = rootPane.getContentPane();
            final Rectangle bounds = contentPane.getBounds();
            final Point target = UIUtil.getCenterPoint(bounds, new Dimension(1, 1));
            target.y = bounds.height - 3;
            balloon.show(new RelativePoint(contentPane, target), Balloon.Position.above);
          }
        }
      }
    });
    Disposer.register(this, balloon);
  }

  public JComponent getComponent() {
    this.myComponent = new TransientModelsWidget.IconWrapperWithBlackJackAndHookers(this);
    return this.myComponent;
  }

  public static class IconWrapperWithBlackJackAndHookers extends JComponent {
    private Icon myIcon;
    private final StatusBarWidget.IconPresentation myPresentation;

    public IconWrapperWithBlackJackAndHookers(StatusBarWidget.IconPresentation presentation) {
      myPresentation = presentation;
      myIcon = myPresentation.getIcon();

      putClientProperty(UIUtil.CENTER_TOOLTIP, Boolean.TRUE);
      setToolTipText(myPresentation.getTooltipText());
      addMouseListener(new MouseAdapter() {
        @Override
        public void mousePressed(final MouseEvent e) {
          myPresentation.getClickConsumer().consume(e);
        }
      });
      setOpaque(false);
    }

    public void update() {
      myIcon = myPresentation.getIcon();
    }

    @Override
    protected void paintComponent(Graphics graphics) {
      final Rectangle bounds = getBounds();
      final Insets insets = getInsets();
      if (myIcon != null) {
        final int iconWidth = myIcon.getIconWidth();
        final int iconHeight = myIcon.getIconHeight();
        myIcon.paintIcon(this, graphics, insets.left + (bounds.width - insets.left - insets.right - iconWidth) / 2, insets.top + (bounds.height - insets.top - insets.bottom - iconHeight) / 2);
      }
    }

    @Override
    public String getToolTipText() {
      return myPresentation.getTooltipText();
    }

    @Override
    public Dimension getMinimumSize() {
      return new Dimension(24, 18);
    }

    @Override
    public Dimension getPreferredSize() {
      return getMinimumSize();
    }
  }

  private class MyMakeNotificationListener implements IMakeNotificationListener {
    public MyMakeNotificationListener() {
    }

    public void handleNotification(MakeNotification notification) {
      if (!(isSaveTransientModels())) {
        return;
      }
      if (notification.getKind() == MakeNotification.Kind.SESSION_OPENED) {
        ApplicationManager.getApplication().invokeLater(new Runnable() {
          public void run() {
            showBaloon();
          }
        });
      }
    }

    public void scriptAboutToStart(MakeNotification notification) {
    }

    public void scriptFinished(MakeNotification notification) {
    }

    public void sessionOpened(MakeNotification notification) {
    }

    public void sessionClosed(MakeNotification notification) {
    }
  }
}
