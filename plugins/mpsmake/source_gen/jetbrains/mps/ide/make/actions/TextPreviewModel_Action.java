package jetbrains.mps.ide.make.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.make.IMakeService;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.util.SNodeOperations;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.ide.make.DefaultMakeMessageHandler;
import jetbrains.mps.ide.make.TextPreviewUtil;

public class TextPreviewModel_Action extends BaseAction {
  private static final Icon ICON = null;
  public TextPreviewModel_Action() {
    super("Preview Generated Text", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (IMakeService.INSTANCE.get().isSessionActive()) {
      return false;
    }
    SModel md = TextPreviewModel_Action.this.modelToGenerate(_params);
    return md != null && SNodeOperations.isGeneratable(md);
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("mpsProject", p);
      if (p == null) {
        return false;
      }
    }
    {
      SNode p = event.getData(MPSCommonDataKeys.NODE);
      MapSequence.fromMap(_params).put("cnode", p);
    }
    {
      SModel p = event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
      MapSequence.fromMap(_params).put("cmodel", p);
      if (p == null) {
        return false;
      }
    }
    {
      List<SModel> p = event.getData(MPSCommonDataKeys.MODELS);
      MapSequence.fromMap(_params).put("models", p);
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    MakeSession session = new MakeSession(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")), new DefaultMakeMessageHandler(((MPSProject) MapSequence.fromMap(_params).get("mpsProject"))), true);
    if (IMakeService.INSTANCE.get().openNewSession(session)) {
      TextPreviewUtil.previewModelText(session, TextPreviewModel_Action.this.modelToGenerate(_params), ((SNode) MapSequence.fromMap(_params).get("cnode")));
    }
  }
  private SModel modelToGenerate(final Map<String, Object> _params) {
    SModel md = null;
    if (((SModel) MapSequence.fromMap(_params).get("cmodel")) != null) {
      md = ((SModel) MapSequence.fromMap(_params).get("cmodel"));
    } else if (((List<SModel>) MapSequence.fromMap(_params).get("models")) != null && ((List<SModel>) MapSequence.fromMap(_params).get("models")).size() > 0) {
      md = ((List<SModel>) MapSequence.fromMap(_params).get("models")).get(0);
    }
    return md;
  }
}
