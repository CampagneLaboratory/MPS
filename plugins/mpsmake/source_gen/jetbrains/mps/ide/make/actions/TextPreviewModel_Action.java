package jetbrains.mps.ide.make.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.make.IMakeService;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.util.SNodeOperations;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.ide.make.DefaultMakeMessageHandler;
import jetbrains.mps.ide.make.TextPreviewUtil;

public class TextPreviewModel_Action extends BaseAction {
  private static final Icon ICON = null;
  public TextPreviewModel_Action() {
    super("Preview Generated Text", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (IMakeService.INSTANCE.get().isSessionActive()) {
      return false;
    }
    SModel md = TextPreviewModel_Action.this.modelToGenerate(event);
    return md != null && SNodeOperations.isGeneratable(md);
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) throws Exception {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      SNode p = event.getData(MPSCommonDataKeys.NODE);
    }
    {
      SModel p = event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
      if (p == null) {
        return false;
      }
    }
    {
      List<SModel> p = event.getData(MPSCommonDataKeys.MODELS);
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) throws Exception {
    MakeSession session = new MakeSession(event.getData(MPSCommonDataKeys.MPS_PROJECT), new DefaultMakeMessageHandler(event.getData(MPSCommonDataKeys.MPS_PROJECT)), true);
    if (IMakeService.INSTANCE.get().openNewSession(session)) {
      TextPreviewUtil.previewModelText(session, TextPreviewModel_Action.this.modelToGenerate(event), event.getData(MPSCommonDataKeys.NODE));
    }
  }
  private SModel modelToGenerate(final AnActionEvent event) {
    SModel md = null;
    if (event.getData(MPSCommonDataKeys.CONTEXT_MODEL) != null) {
      md = event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
    } else if (event.getData(MPSCommonDataKeys.MODELS) != null && event.getData(MPSCommonDataKeys.MODELS).size() > 0) {
      md = event.getData(MPSCommonDataKeys.MODELS).get(0);
    }
    return md;
  }
}
