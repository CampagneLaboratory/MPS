package jetbrains.mps.ide.make.actions;

/*Generated by MPS */

import com.intellij.openapi.Disposable;
import jetbrains.mps.make.IMakeNotificationListener;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.make.IMakeService;
import com.intellij.openapi.ui.popup.Balloon;
import com.intellij.openapi.ui.popup.JBPopupFactory;
import com.intellij.ui.LightColors;
import javax.swing.SwingUtilities;
import java.awt.Component;
import javax.swing.JRootPane;
import java.awt.Container;
import java.awt.Rectangle;
import java.awt.Point;
import com.intellij.util.ui.UIUtil;
import java.awt.Dimension;
import com.intellij.ui.awt.RelativePoint;
import com.intellij.openapi.util.Disposer;
import javax.swing.JComponent;
import com.intellij.openapi.wm.StatusBar;
import jetbrains.mps.make.MakeNotification;
import jetbrains.mps.ide.generator.GenerationSettings;
import com.intellij.openapi.application.ApplicationManager;

public class TransientModelBallonDisplayer implements Disposable {
  private final IMakeNotificationListener myMakeNotificationListener = new TransientModelBallonDisplayer.MyMakeNotificationListener();
  private final MPSProject myProject;

  public TransientModelBallonDisplayer(MPSProject project) {
    myProject = project;
  }

  public void init() {
    IMakeService.INSTANCE.get().addListener(myMakeNotificationListener);
  }

  public void dispose() {
    IMakeService.INSTANCE.get().removeListener(myMakeNotificationListener);
  }

  private void showBaloon() {
    final Balloon balloon = JBPopupFactory.getInstance().createHtmlTextBalloonBuilder("Saving transient models is on", null, LightColors.YELLOW, null).setHideOnAction(true).setHideOnClickOutside(true).setHideOnKeyOutside(true).createBalloon();
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        Component component = check_45eojt_a0a0a0a0a1a2(check_45eojt_a0a0a0a0a0b0c(TransientModelsWidgetInstaller.getInstaller()));
        if (component != null && component.isShowing()) {
          showForComponent(component, balloon);
        } else {
          component = check_45eojt_a0a0a1a0a0a0b0c(StatusBarHelper.getStatusBar(myProject));
          if (component != null && component.isShowing()) {
            showForComponent(component, balloon);
          } else {
            final JRootPane rootPane = SwingUtilities.getRootPane(component);
            if (rootPane != null && rootPane.isShowing()) {
              final Container contentPane = rootPane.getContentPane();
              final Rectangle bounds = contentPane.getBounds();
              final Point target = UIUtil.getCenterPoint(bounds, new Dimension(1, 1));
              target.y = bounds.height - 3;
              balloon.show(new RelativePoint(contentPane, target), Balloon.Position.above);
            }
          }
        }
      }
    });
    Disposer.register(this, balloon);
  }

  private void showForComponent(Component component, Balloon ballon) {
    int offset = component.getHeight() / 2;
    Point point = new Point(component.getWidth() - offset, component.getHeight() - offset);
    ballon.show(new RelativePoint(component, point), Balloon.Position.above);
  }

  private static JComponent check_45eojt_a0a0a0a0a1a2(TransientModelsWidget checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getComponent();
    }
    return null;
  }

  private static TransientModelsWidget check_45eojt_a0a0a0a0a0b0c(TransientModelsWidgetInstaller checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getWidget();
    }
    return null;
  }

  private static JComponent check_45eojt_a0a0a1a0a0a0b0c(StatusBar checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getComponent();
    }
    return null;
  }

  private class MyMakeNotificationListener implements IMakeNotificationListener {
    public MyMakeNotificationListener() {
    }

    public void handleNotification(MakeNotification notification) {
      if (!(GenerationSettings.getInstance().isSaveTransientModels()) || !(SaveTransientModelsPreferences.isShowPopup())) {
        return;
      }
      if (notification.getKind() == MakeNotification.Kind.SESSION_OPENED) {
        ApplicationManager.getApplication().invokeLater(new Runnable() {
          public void run() {
            showBaloon();
          }
        });
      }
    }

    public void scriptAboutToStart(MakeNotification notification) {
    }

    public void scriptFinished(MakeNotification notification) {
    }

    public void sessionOpened(MakeNotification notification) {
    }

    public void sessionClosed(MakeNotification notification) {
    }
  }
}
