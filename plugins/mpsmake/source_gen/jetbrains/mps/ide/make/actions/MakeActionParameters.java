package jetbrains.mps.ide.make.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.generator.GenerationFacade;
import jetbrains.mps.smodel.resources.ModelsToResources;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;

public class MakeActionParameters {
  private IOperationContext context;
  private List<SModel> models;
  private SModel cmodel;
  private List<SModule> modules;
  private SModule cmodule;
  public MakeActionParameters(IOperationContext context, Iterable<SModel> models, SModel cmodel, Iterable<SModule> modules, SModule cmodule) {
    this.context = context;
    this.models = (models != null ? ListSequence.fromListWithValues(new ArrayList<SModel>(), models) : null);
    this.cmodel = cmodel;
    this.modules = (modules != null ? ListSequence.fromListWithValues(new ArrayList<SModule>(), modules) : null);
    this.cmodule = cmodule;
  }
  public String actionText(boolean cleanMake) {
    StringBuilder sb = new StringBuilder();
    sb.append((cleanMake ? "Rebuild " : "Make "));
    SModule module = this.moduleToMake();
    SModel model = this.modelToMake();
    if (model != null) {
      if (!(SNodeOperations.isGeneratable(model))) {
        return null;
      }

      sb.append("Model '").append(NameUtil.compactNamespace(model.getModelName())).append("'");

    } else if (this.models != null && ListSequence.fromList(this.models).count() > 1) {
      Iterable<SModel> mds = this.models;
      if (!(Sequence.fromIterable(mds).any(new IWhereFilter<SModel>() {
        public boolean accept(SModel md) {
          return SNodeOperations.isGeneratable(md);
        }
      }))) {
        return null;
      }

      sb.append("Selected Models");

    } else if (module != null) {
      if (module.isReadOnly()) {
        return null;
      }

      sb.append(NameUtil.shortNameFromLongName(module.getClass().getName().replaceAll("\\$.*", ""))).append(" '").append(NameUtil.compactNamespace(module.getModuleName())).append("'");

    } else if (this.modules != null && ListSequence.fromList(this.modules).count() > 1) {
      Iterable<SModule> mods = this.modules;
      if (Sequence.fromIterable(mods).any(new IWhereFilter<SModule>() {
        public boolean accept(SModule m) {
          return m == null;
        }
      }) || Sequence.fromIterable(mods).all(new IWhereFilter<SModule>() {
        public boolean accept(SModule m) {
          return m.isReadOnly();
        }
      })) {
        return null;
      }

      sb.append("Selected Modules");

    } else {
      return null;
    }
    return sb.toString();
  }
  public Iterable<IResource> collectInput(boolean dirtyOnly) {
    final SModule module = this.moduleToMake();
    final SModel model = this.modelToMake();
    Iterable<SModel> smds = Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModel>() {
      public Iterable<SModel> iterable() {
        return new Iterable<SModel>() {
          public Iterator<SModel> iterator() {
            return new YieldingIterator<SModel>() {
              private int __CP__ = 0;
              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 8:
                      this._8__yield_nk3wxj_b0a0a0a0a0c0h_it = Sequence.fromIterable(Sequence.fromIterable(_7_models).where(new IWhereFilter<SModel>() {
                        public boolean accept(SModel md) {
                          return SNodeOperations.isGeneratable(md);
                        }
                      })).iterator();
                    case 9:
                      if (!(this._8__yield_nk3wxj_b0a0a0a0a0c0h_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._8__yield_nk3wxj_b0a0a0a0a0c0h = this._8__yield_nk3wxj_b0a0a0a0a0c0h_it.next();
                      this.__CP__ = 10;
                      break;
                    case 15:
                      this._15__yield_nk3wxj_c0b0a0a0a0c0h_it = Sequence.fromIterable(_14_modelsFromModule).iterator();
                    case 16:
                      if (!(this._15__yield_nk3wxj_c0b0a0a0a0c0h_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._15__yield_nk3wxj_c0b0a0a0a0c0h = this._15__yield_nk3wxj_c0b0a0a0a0c0h_it.next();
                      this.__CP__ = 17;
                      break;
                    case 22:
                      this._22__yield_nk3wxj_c0c0a0a0a0c0h_it = Sequence.fromIterable(_21_modelsFromModules).iterator();
                    case 23:
                      if (!(this._22__yield_nk3wxj_c0c0a0a0a0c0h_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._22__yield_nk3wxj_c0c0a0a0a0c0h = this._22__yield_nk3wxj_c0c0a0a0a0c0h_it.next();
                      this.__CP__ = 24;
                      break;
                    case 2:
                      if (model != null && SNodeOperations.isGeneratable(model)) {
                        this.__CP__ = 3;
                        break;
                      } else if (models != null && ListSequence.fromList(models).count() > 1) {
                        this.__CP__ = 5;
                        break;
                      } else if (module != null) {
                        this.__CP__ = 12;
                        break;
                      } else if (modules != null && ListSequence.fromList(modules).count() > 1) {
                        this.__CP__ = 19;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 4:
                      this.__CP__ = 1;
                      this.yield(model);
                      return true;
                    case 11:
                      this.__CP__ = 9;
                      this.yield(_8__yield_nk3wxj_b0a0a0a0a0c0h);
                      return true;
                    case 18:
                      this.__CP__ = 16;
                      this.yield(_15__yield_nk3wxj_c0b0a0a0a0c0h);
                      return true;
                    case 25:
                      this.__CP__ = 23;
                      this.yield(_22__yield_nk3wxj_c0c0a0a0a0c0h);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 3:
                      this.__CP__ = 4;
                      break;
                    case 5:
                      this._7_models = MakeActionParameters.this.models;
                      this.__CP__ = 8;
                      break;
                    case 10:
                      this.__CP__ = 11;
                      break;
                    case 12:
                      ModelAccess.instance().runReadAction(new Runnable() {
                        public void run() {
                          _14_modelsFromModule = modelsToMake(module);
                        }
                      });
                      this.__CP__ = 15;
                      break;
                    case 17:
                      this.__CP__ = 18;
                      break;
                    case 19:
                      this._21_modelsFromModules = null;
                      ModelAccess.instance().runReadAction(new Runnable() {
                        public void run() {
                          for (SModule mod : ListSequence.fromList(MakeActionParameters.this.modules)) {
                            _21_modelsFromModules = Sequence.fromIterable(_21_modelsFromModules).concat(Sequence.fromIterable(modelsToMake(mod)));
                          }
                        }
                      });
                      this.__CP__ = 22;
                      break;
                    case 24:
                      this.__CP__ = 25;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
              private Iterable<SModel> _7_models;
              private SModel _8__yield_nk3wxj_b0a0a0a0a0c0h;
              private Iterator<SModel> _8__yield_nk3wxj_b0a0a0a0a0c0h_it;
              private Iterable<SModel> _14_modelsFromModule;
              private SModel _15__yield_nk3wxj_c0b0a0a0a0c0h;
              private Iterator<SModel> _15__yield_nk3wxj_c0b0a0a0a0c0h_it;
              private Iterable<SModel> _21_modelsFromModules;
              private SModel _22__yield_nk3wxj_c0c0a0a0a0c0h;
              private Iterator<SModel> _22__yield_nk3wxj_c0c0a0a0a0c0h_it;
            };
          }
        };
      }
    })).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel md) {
        return GenerationFacade.canGenerate(md);
      }
    });
    return new ModelsToResources(Sequence.fromIterable(smds).toListSequence()).resources(dirtyOnly);
  }
  public Iterable<SModel> modelsToMake(SModule module) {
    Iterable<SModel> models = Sequence.fromIterable(((Iterable<SModel>) module.getModels())).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return SNodeOperations.isGeneratable(it);
      }
    });
    if (module instanceof Language) {
      for (Generator gen : CollectionSequence.fromCollection(((Language) module).getGenerators())) {
        models = Sequence.fromIterable(models).concat(Sequence.fromIterable(modelsToMake(gen)));
      }
    }
    return models;
  }
  private SModule moduleToMake() {
    Iterable<SModule> modulesSeq = ((Iterable<SModule>) this.modules);
    if (Sequence.fromIterable(modulesSeq).count() == 1) {
      return Sequence.fromIterable(modulesSeq).first();
    } else if (Sequence.fromIterable(modulesSeq).count() > 1) {
      return null;
    }
    return this.cmodule;
  }
  private SModel modelToMake() {
    Iterable<SModel> modelsSeq = ((Iterable<SModel>) this.models);
    if (Sequence.fromIterable(modelsSeq).count() == 1) {
      return Sequence.fromIterable(modelsSeq).first();
    } else if (Sequence.fromIterable(modelsSeq).count() > 1) {
      return null;
    }
    return this.cmodel;
  }
}
