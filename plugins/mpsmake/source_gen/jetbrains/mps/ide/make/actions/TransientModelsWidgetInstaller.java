package jetbrains.mps.ide.make.actions;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import com.intellij.openapi.wm.StatusBar;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.project.ProjectManager;
import jetbrains.mps.ide.project.ProjectHelper;

public class TransientModelsWidgetInstaller {
  private static final Map<MPSProject, TransientModelsWidgetInstaller> ourInstances = MapSequence.fromMap(new HashMap<MPSProject, TransientModelsWidgetInstaller>());

  private StatusBar myStatusBar;
  private TransientModelsWidget myWidget;
  private boolean myInstalled = false;
  private final MPSProject myProject;

  public TransientModelsWidgetInstaller(MPSProject project) {
    myProject = project;
    MapSequence.fromMap(ourInstances).put(myProject, this);
  }

  public void init(StatusBar bar) {
    myStatusBar = bar;
    myWidget = new TransientModelsWidget(bar);
    reloadWidget();
  }

  public void dispose() {
    uninstallWidget();
    MapSequence.fromMap(ourInstances).removeKey(myProject);
  }

  private void installWidget() {
    myStatusBar.addWidget(myWidget);
    myInstalled = true;
  }

  private void uninstallWidget() {
    myStatusBar.removeWidget(myWidget.ID());
    myInstalled = false;
  }

  private void updateWidget() {
    myWidget.update();
  }

  private void reloadWidget() {
    if (myInstalled && !(SaveTransientModelsPreferences.isShowStatusBarIcon())) {
      uninstallWidget();
    } else if (!(myInstalled) && SaveTransientModelsPreferences.isShowStatusBarIcon()) {
      installWidget();
    }
    updateWidget();
  }

  public TransientModelsWidget getWidget() {
    return myWidget;
  }

  public static void updateWidgets() {
    for (Project project : ProjectManager.getInstance().getOpenProjects()) {
      check_ma0d6w_a0a0a0(MapSequence.fromMap(ourInstances).get(ProjectHelper.toMPSProject(project)));
    }
  }

  public static void reloadWidgets() {
    for (Project project : ProjectManager.getInstance().getOpenProjects()) {
      check_ma0d6w_a0a0a1(MapSequence.fromMap(ourInstances).get(ProjectHelper.toMPSProject(project)));
    }
  }

  private static void check_ma0d6w_a0a0a0(TransientModelsWidgetInstaller checkedDotOperand) {
    if (null != checkedDotOperand) {
      checkedDotOperand.updateWidget();
    }

  }

  private static void check_ma0d6w_a0a0a1(TransientModelsWidgetInstaller checkedDotOperand) {
    if (null != checkedDotOperand) {
      checkedDotOperand.reloadWidget();
    }

  }
}
