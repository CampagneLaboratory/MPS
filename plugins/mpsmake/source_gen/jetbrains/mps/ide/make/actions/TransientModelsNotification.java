package jetbrains.mps.ide.make.actions;

/*Generated by MPS */

import com.intellij.openapi.components.ProjectComponent;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.StatusBar;
import com.intellij.openapi.wm.WindowManager;
import com.intellij.openapi.util.Disposer;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.intellij.openapi.project.ProjectManager;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class TransientModelsNotification implements ProjectComponent {
  private final Project myProject;
  private TransientModelBallonDisplayer myDisplayer;
  private StatusBar myStatusBar;
  private TransientModelsWidget myWidget;

  public TransientModelsNotification(Project project) {
    myProject = project;
  }

  public void projectOpened() {
    myStatusBar = WindowManager.getInstance().getStatusBar(myProject);
    myWidget = new TransientModelsWidget(myStatusBar);
    myStatusBar.addWidget(myWidget);
    myWidget.update();

    myDisplayer = new TransientModelBallonDisplayer(myProject, myWidget);
    myDisplayer.init();
  }

  public void projectClosed() {
    myStatusBar.removeWidget(myWidget.ID());
    Disposer.dispose(myDisplayer);
  }

  public void initComponent() {
  }

  public void disposeComponent() {
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return "Transient Models Notification";
  }

  public static void updateWidgets() {
    for (TransientModelsWidget widget : Sequence.fromIterable(Sequence.fromArray(ProjectManager.getInstance().getOpenProjects())).select(new ISelector<Project, TransientModelsWidget>() {
      public TransientModelsWidget select(Project it) {
        return getInstance(it).myWidget;
      }
    })) {
      widget.update();
    }
  }

  public static TransientModelsNotification getInstance(Project project) {
    return project.getComponent(TransientModelsNotification.class);
  }
}
