package jetbrains.mps.ide.make.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.make.IMakeService;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Level;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.smodel.Generator;
import java.util.ArrayList;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class RebuildSelectedModules_Action extends BaseAction {
  private static final Icon ICON = null;
  public RebuildSelectedModules_Action() {
    super("Rebuild Module", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (IMakeService.INSTANCE.get().isSessionActive()) {
      return false;
    }
    List<SModule> list = RebuildSelectedModules_Action.this.getModules(_params);
    if (ListSequence.fromList(list).isEmpty()) {
      return false;
    }
    String text = new MakeActionParameters(((MPSProject) MapSequence.fromMap(_params).get("mpsProject"))).modules(list).cleanMake(true).actionText();
    if (text != null) {
      event.getPresentation().setText(text);
      return true;
    }
    return false;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "RebuildSelectedModules", t);
      }
      this.disable(event.getPresentation());
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("mpsProject", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("mpsProject") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("modules", event.getData(MPSCommonDataKeys.MODULES));
    MapSequence.fromMap(_params).put("cmodule", event.getData(MPSCommonDataKeys.CONTEXT_MODULE));
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      new MakeActionImpl(new MakeActionParameters(((MPSProject) MapSequence.fromMap(_params).get("mpsProject"))).modules(RebuildSelectedModules_Action.this.getModules(_params)).cleanMake(true)).executeAction();
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "RebuildSelectedModules", t);
      }
    }
  }
  private List<SModule> getModules(final Map<String, Object> _params) {
    SModule cmd = ((SModule) MapSequence.fromMap(_params).get("cmodule"));
    if (cmd instanceof Generator) {
      cmd = ((Generator) cmd).getSourceLanguage();
    }
    List<SModule> rv = ListSequence.fromList(new ArrayList<SModule>());
    if (((List<SModule>) MapSequence.fromMap(_params).get("modules")) != null) {
      ListSequence.fromList(rv).addSequence(ListSequence.fromList(((List<SModule>) MapSequence.fromMap(_params).get("modules"))));
    }
    if (cmd != null && !(ListSequence.fromList(rv).contains(cmd))) {
      ListSequence.fromList(rv).addElement(cmd);
    }
    return rv;
  }
  protected static Logger LOG = LogManager.getLogger(RebuildSelectedModules_Action.class);
}
