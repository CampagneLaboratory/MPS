package jetbrains.mps.ide.make.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.make.IMakeService;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import java.util.ArrayList;

public class MakeSelectedModels_Action extends BaseAction {
  private static final Icon ICON = null;
  public MakeSelectedModels_Action() {
    super("Make Model", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (IMakeService.INSTANCE.get().isSessionActive()) {
      return false;
    }
    List<SModel> list = MakeSelectedModels_Action.this.getModels(_params);
    if (ListSequence.fromList(list).isEmpty()) {
      return false;
    }
    String text = new MakeActionParameters(((MPSProject) MapSequence.fromMap(_params).get("mpsProject"))).models(list).actionText();
    if (text != null) {
      event.getPresentation().setText(text);
      return true;
    }
    return false;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    {
      boolean enabled = this.isApplicable(event, _params);
      this.setEnabledState(event.getPresentation(), enabled);
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("mpsProject", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("mpsProject") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("models", event.getData(MPSCommonDataKeys.MODELS));
    MapSequence.fromMap(_params).put("cmodel", event.getData(MPSCommonDataKeys.CONTEXT_MODEL));
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    new MakeActionImpl(new MakeActionParameters(((MPSProject) MapSequence.fromMap(_params).get("mpsProject"))).models(MakeSelectedModels_Action.this.getModels(_params))).executeAction();
  }
  private List<SModel> getModels(final Map<String, Object> _params) {
    List<SModel> rv = ListSequence.fromList(new ArrayList<SModel>());
    if (((List<SModel>) MapSequence.fromMap(_params).get("models")) != null) {
      ListSequence.fromList(rv).addSequence(ListSequence.fromList(((List<SModel>) MapSequence.fromMap(_params).get("models"))));
    }
    if (((SModel) MapSequence.fromMap(_params).get("cmodel")) != null && !(ListSequence.fromList(rv).contains(((SModel) MapSequence.fromMap(_params).get("cmodel"))))) {
      ListSequence.fromList(rv).addElement(((SModel) MapSequence.fromMap(_params).get("cmodel")));
    }
    return rv;
  }
}
