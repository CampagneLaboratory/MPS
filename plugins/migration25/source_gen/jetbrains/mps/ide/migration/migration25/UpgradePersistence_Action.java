package jetbrains.mps.ide.migration.migration25;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.logging.Logger;
import java.util.List;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import java.util.ArrayList;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import jetbrains.mps.extapi.persistence.FileDataSource;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.smodel.persistence.def.ModelReadException;

public class UpgradePersistence_Action extends BaseAction {
  private static final Icon ICON = null;

  public UpgradePersistence_Action() {
    super("Upgrade Persistence", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "UpgradePersistence", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      Logger LOG = Logger.getLogger("jetbrains.mps.ide.migration.UpgradePersistence_Action");

      List<DefaultSModelDescriptor> modelDescriptors = new ArrayList<DefaultSModelDescriptor>();
      final MPSProject mpsProject = ((Project) MapSequence.fromMap(_params).get("project")).getComponent(MPSProject.class);
      for (SModule module : mpsProject.getModulesWithGenerators()) {
        for (SModel smd : module.getModels()) {
          if (smd instanceof DefaultSModelDescriptor) {
            int modelVersion = ((DefaultSModelDescriptor) smd).getPersistenceVersion();
            if (modelVersion < ModelPersistence.LAST_VERSION) {
              modelDescriptors.add(((DefaultSModelDescriptor) smd));
            }
          }
        }
      }

      for (final DefaultSModelDescriptor modelDescriptor : modelDescriptors) {
        FileDataSource source = modelDescriptor.getSource();
        if (source.isReadOnly()) {
          continue;
        }
        IFile file = source.getFile();
        boolean wasInitialized = modelDescriptor.isLoaded();
        if (wasInitialized) {
          modelDescriptor.save();
        }
        int fromVersion = modelDescriptor.getPersistenceVersion();
        if (fromVersion >= ModelPersistence.LAST_VERSION) {
          continue;
        }
        assert file != null;
        try {
          SModel model = (wasInitialized ?
            modelDescriptor.getSModel() :
            ModelPersistence.readModel(file, false)
          );
          ModelPersistence.saveModel(model, file, ModelPersistence.LAST_VERSION);
          modelDescriptor.reloadFromDisk();
        } catch (ModelReadException e) {
          LOG.error(e);
        }
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "UpgradePersistence", t);
    }
  }

  private static Logger LOG = Logger.getLogger(UpgradePersistence_Action.class);
}
