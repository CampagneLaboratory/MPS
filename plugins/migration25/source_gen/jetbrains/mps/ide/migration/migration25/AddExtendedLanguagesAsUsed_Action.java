package jetbrains.mps.ide.migration.migration25;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.MPSProject;
import java.util.Collection;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.SetSequence;

public class AddExtendedLanguagesAsUsed_Action extends BaseAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(AddExtendedLanguagesAsUsed_Action.class);

  public AddExtendedLanguagesAsUsed_Action() {
    super("Add Extended Languages as Used", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "AddExtendedLanguagesAsUsed", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      for (IModule module : ListSequence.fromList(((MPSProject) MapSequence.fromMap(_params).get("project")).getProjectModules(IModule.class))) {
        Collection<Language> usedNow = new GlobalModuleDependenciesManager(module).getUsedLanguages();
        for (Language lang : CollectionSequence.fromCollection(usedNow)) {
          HashSet<Language> extLangs = new HashSet<Language>();
          lang.getDependenciesManager().collectAllExtendedLanguages(extLangs);
          for (Language extLang : SetSequence.fromSet(extLangs)) {
            if (usedNow.contains(extLang)) {
              continue;
            }
            module.addUsedLanguage(extLang.getModuleReference());
          }
        }
        module.save();
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "AddExtendedLanguagesAsUsed", t);
      }
    }
  }
}
