package jetbrains.mps.ide.migration.migration25;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import java.util.Queue;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import com.intellij.openapi.project.Project;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.concurrent.CountDownLatch;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.extapi.model.EditableSModel;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.project.OptimizeImportsHelper;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.logging.Logger;

public class OptimizeImportsInProject_Action extends BaseAction {
  private static final Icon ICON = null;

  public OptimizeImportsInProject_Action() {
    super("Optimize Model Imports", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "OptimizeImportsInProject", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    MapSequence.fromMap(_params).put("context", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final Queue<IModule> modules = QueueSequence.fromQueueWithValues(new LinkedList<IModule>(), ((Project) MapSequence.fromMap(_params).get("project")).getComponent(MPSProject.class).getModules());
      final List<SModel> modelsToFix = ListSequence.fromList(new ArrayList<SModel>());
      final CountDownLatch latch = new CountDownLatch(1);
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          try {
            while (QueueSequence.fromQueue(modules).isNotEmpty()) {
              IModule module = QueueSequence.fromQueue(modules).removeFirstElement();
              if (module.isPackaged()) {
                continue;
              }
              if (module instanceof Language) {
                QueueSequence.fromQueue(modules).addSequence(CollectionSequence.fromCollection(((Language) module).getGenerators()));
              }
              IScope moduleScope = module.getScope();
              for (SModel model : ListSequence.fromList(module.getOwnModelDescriptors())) {
                if (!(SModelStereotype.isUserModel(model))) {
                  continue;
                }
                if (!(model instanceof EditableSModel)) {
                  continue;
                }

                List<SModelReference> imports = SModelOperations.getImportedModelUIDs(model);
                ListSequence.fromList(modelsToFix).addElement(model);
              }
            }
          } finally {
            latch.countDown();
          }
        }
      });
      try {
        latch.await();
      } catch (InterruptedException ignore) {
      }
      if (ListSequence.fromList(modelsToFix).isNotEmpty()) {
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            new OptimizeImportsHelper(((IOperationContext) MapSequence.fromMap(_params).get("context"))).optimizeModelsImports(modelsToFix);
            SModelRepository.getInstance().saveAll();
          }
        });
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "OptimizeImportsInProject", t);
    }
  }

  private static Logger LOG = Logger.getLogger(OptimizeImportsInProject_Action.class);
}
