package jetbrains.mps.ide.migration.migration25;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import java.util.List;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.project.facets.JavaModuleFacet;
import jetbrains.mps.vfs.IFile;
import java.util.Collection;
import jetbrains.mps.project.structure.model.ModelRootDescriptor;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.LanguageID;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.reloading.ClassLoaderManager;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.logging.Logger;

public class AddSourcesToModelRoots_Action extends BaseAction {
  private static final Icon ICON = null;

  public AddSourcesToModelRoots_Action() {
    super("Add classes__gen to Model Roots for Modules With Sources", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "AddSourcesToModelRoots", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      MPSProject mpsProject = ((Project) MapSequence.fromMap(_params).get("project")).getComponent(MPSProject.class);
      List<IModule> allModules = ListSequence.fromListWithValues(new ArrayList<IModule>(), mpsProject.getModules());
      for (IModule module : ListSequence.fromList(allModules)) {
        ModuleDescriptor descriptor = module.getModuleDescriptor();
        if (descriptor == null) {
          continue;
        }

        JavaModuleFacet facet = module.getFacet(JavaModuleFacet.class);
        if (facet == null) {
          continue;
        }

        final IFile classesGen = facet.getClassesGen();
        if (classesGen == null) {
          continue;
        }

        Collection<String> sp = descriptor.getSourcePaths();
        if (sp == null || sp.isEmpty()) {
          continue;
        }

        Collection<ModelRootDescriptor> mrs = descriptor.getModelRootDescriptors();
        boolean exist = CollectionSequence.fromCollection(mrs).select(new ISelector<ModelRootDescriptor, ModelRoot>() {
          public ModelRoot select(ModelRootDescriptor it) {
            return it.getRoot();
          }
        }).where(new IWhereFilter<ModelRoot>() {
          public boolean accept(ModelRoot it) {
            return it != null && LanguageID.JAVA_MANAGER.equals(it.getManager()) && EqualUtil.equals(it.getPath(), classesGen.getPath());
          }
        }).isNotEmpty();
        if (exist) {
          continue;
        }

        CollectionSequence.fromCollection(mrs).addElement(ModelRootDescriptor.getJavaStubsModelRoot(classesGen.getPath()));

        module.setModuleDescriptor(descriptor, false);
        module.save();
      }

      ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "AddSourcesToModelRoots", t);
    }
  }

  private static Logger LOG = Logger.getLogger(AddSourcesToModelRoots_Action.class);
}
