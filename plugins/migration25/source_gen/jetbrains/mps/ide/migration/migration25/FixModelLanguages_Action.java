package jetbrains.mps.ide.migration.migration25;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.extapi.model.EditableSModel;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.logging.Logger;

public class FixModelLanguages_Action extends BaseAction {
  private static final Icon ICON = null;

  public FixModelLanguages_Action() {
    super("Fix Model Languages After Migration", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "FixModelLanguages", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      for (IModule module : ListSequence.fromList(((MPSProject) MapSequence.fromMap(_params).get("project")).getModulesWithGenerators())) {
        if (module.isPackaged()) {
          continue;
        }
        for (SModel md : Sequence.fromIterable(module.getModels())) {
          if (!(md instanceof EditableSModel)) {
            continue;
          }
          if (((EditableSModel) md).isReadOnly()) {
            continue;
          }

          jetbrains.mps.smodel.SModel m = ((SModelDescriptor) md).getSModel();
          for (SNode node : SModelOperations.getNodes(m, null)) {
            Language l = ((Language) node.getConcept().getLanguage().getModule());
            ModuleReference lr = l.getModuleReference();
            if (!(((jetbrains.mps.smodel.SModel) m).importedLanguages().contains(lr))) {
              ((jetbrains.mps.smodel.SModel) m).addLanguage(lr);
            }
          }
        }
      }
      SModelRepository.getInstance().saveAll();
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "FixModelLanguages", t);
    }
  }

  private static Logger LOG = Logger.getLogger(FixModelLanguages_Action.class);
}
