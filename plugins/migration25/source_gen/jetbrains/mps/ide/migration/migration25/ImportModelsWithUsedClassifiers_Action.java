package jetbrains.mps.ide.migration.migration25;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import java.util.List;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.SModel;
import java.util.Set;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class ImportModelsWithUsedClassifiers_Action extends BaseAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(ImportModelsWithUsedClassifiers_Action.class);

  public ImportModelsWithUsedClassifiers_Action() {
    super("Import models with used classifiers", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "ImportModelsWithUsedClassifiers", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      MPSProject mpsProject = ((Project) MapSequence.fromMap(_params).get("project")).getComponent(MPSProject.class);
      List<IModule> allModules = ListSequence.fromListWithValues(new ArrayList<IModule>(), mpsProject.getModules());
      for (IModule module : ListSequence.fromList(allModules)) {
        ModuleDescriptor descriptor = module.getModuleDescriptor();
        if (descriptor == null) {
          continue;
        }

        for (SModelDescriptor modelDescriptor : ListSequence.fromList(module.getOwnModelDescriptors())) {
          if (SModelStereotype.isStubModelStereotype(modelDescriptor.getStereotype())) {
            continue;
          }

          SModel model = modelDescriptor.getSModel();
          Set<SModelReference> dependencies = SetSequence.fromSet(new HashSet<SModelReference>());
          // collect dependencies by classifiers 
          // collect model dependencies from ClassifierType 
          // todo: classifier extends and implements references? 
          for (SNode classifierType : ListSequence.fromList(SModelOperations.getNodes(model, "jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
            SNode classifier = SLinkOperations.getTarget(classifierType, "classifier", false);
            if ((classifier != null)) {
              SetSequence.fromSet(dependencies).addElement(SNodeOperations.getModel(classifier).getSModelReference());
            }
          }
          // remove all imported already models 
          SetSequence.fromSet(dependencies).removeElement(modelDescriptor.getSModelReference());
          for (SModel.ImportElement importedElement : ListSequence.fromList(model.importedModels())) {
            SetSequence.fromSet(dependencies).removeElement(importedElement.getModelReference());
          }
          // add new dependencies to model 
          for (SModelReference modelToImport : SetSequence.fromSet(dependencies)) {
            model.addModelImport(modelToImport, false);
          }
        }
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "ImportModelsWithUsedClassifiers", t);
      }
    }
  }
}
