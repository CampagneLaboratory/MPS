package jetbrains.mps.ide.migration.migration25;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import java.util.List;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SModelStereotype;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.logging.Logger;

public class ImportModelsWithUsedClassifiers_Action extends BaseAction {
  private static final Icon ICON = null;

  public ImportModelsWithUsedClassifiers_Action() {
    super("Import models with used classifiers", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ImportModelsWithUsedClassifiers", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      // todo: rename action name. Something like "import implicitly imported models" ? 

      MPSProject mpsProject = ((Project) MapSequence.fromMap(_params).get("project")).getComponent(MPSProject.class);
      List<IModule> allModules = ListSequence.fromListWithValues(new ArrayList<IModule>(), mpsProject.getModulesWithGenerators());
      for (IModule module : ListSequence.fromList(allModules)) {
        ModuleDescriptor descriptor = module.getModuleDescriptor();
        if (descriptor == null) {
          continue;
        }

        for (SModel _model : Sequence.fromIterable(module.getModels())) {
          if (SModelStereotype.isStubModelStereotype(SModelStereotype.getStereotype(_model))) {
            continue;
          }

          SModel model = _model;

          Set<SModelReference> dependencies = SetSequence.fromSet(new HashSet<SModelReference>());
          for (SNode node : ListSequence.fromList(SModelOperations.getNodes(model, null))) {
            SNode nodeToImport = ImportModelsWithUsedClassifiers_Action.this.getNodeToImport(node, _params);
            SModelReference mref = check_rft9c_a0b0f0d0e0a(SNodeOperations.getModel(nodeToImport));
            if (mref == null) {
              continue;
            }
            SetSequence.fromSet(dependencies).addElement(mref);
          }
          // remove all imported already models 
          SetSequence.fromSet(dependencies).removeElement(_model.getReference());
          for (SModel importedModel : ListSequence.fromList(jetbrains.mps.smodel.SModelOperations.allImportedModels(model, GlobalScope.getInstance()))) {
            SetSequence.fromSet(dependencies).removeElement(importedModel.getReference());
          }
          // add new dependencies to model 
          for (SModelReference modelToImport : SetSequence.fromSet(dependencies)) {
            ((SModelInternal) model).addModelImport(modelToImport, false);
          }
        }
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ImportModelsWithUsedClassifiers", t);
    }
  }

  /*package*/ SNode getNodeToImport(SNode nodeWithRef, final Map<String, Object> _params) {
    if (SNodeOperations.isInstanceOf(nodeWithRef, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(nodeWithRef, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false);
    }
    if (SNodeOperations.isInstanceOf(nodeWithRef, "jetbrains.mps.baseLanguage.structure.StaticMethodCall")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(nodeWithRef, "jetbrains.mps.baseLanguage.structure.StaticMethodCall"), "classConcept", false);
    }
    if (SNodeOperations.isInstanceOf(nodeWithRef, "jetbrains.mps.baseLanguage.structure.StaticFieldReference")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(nodeWithRef, "jetbrains.mps.baseLanguage.structure.StaticFieldReference"), "classifier", false);
    }
    if (SNodeOperations.isInstanceOf(nodeWithRef, "jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(nodeWithRef, "jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall"), "baseMethodDeclaration", false);
    }
    if (SNodeOperations.isInstanceOf(nodeWithRef, "jetbrains.mps.lang.smodel.structure.NodeRefExpression")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(nodeWithRef, "jetbrains.mps.lang.smodel.structure.NodeRefExpression"), "referentNode", false);
    }
    if (SNodeOperations.isInstanceOf(nodeWithRef, "jetbrains.mps.baseLanguage.structure.ClassCreator")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(nodeWithRef, "jetbrains.mps.baseLanguage.structure.ClassCreator"), "baseMethodDeclaration", false);
    }

    return null;
  }

  private static Logger LOG = Logger.getLogger(ImportModelsWithUsedClassifiers_Action.class);

  private static SModelReference check_rft9c_a0b0f0d0e0a(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getReference();
    }
    return null;
  }
}
