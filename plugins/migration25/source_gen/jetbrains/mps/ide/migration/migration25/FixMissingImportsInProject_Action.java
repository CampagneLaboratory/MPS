package jetbrains.mps.ide.migration.migration25;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import java.util.Queue;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import com.intellij.openapi.project.Project;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.project.structure.modules.ModuleReference;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.extapi.model.EditableSModel;
import jetbrains.mps.kernel.model.MissingDependenciesFixer;
import jetbrains.mps.logging.Logger;

public class FixMissingImportsInProject_Action extends BaseAction {
  private static final Icon ICON = null;

  public FixMissingImportsInProject_Action() {
    super("Fix Missing Imports", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "FixMissingImportsInProject", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      // Using ModulereReferences here instead of modules because module can be re-created during  MissingDependenciesFixer execution. 
      Queue<SModuleReference> modules = QueueSequence.fromQueueWithValues(new LinkedList<SModuleReference>(), ((Project) MapSequence.fromMap(_params).get("project")).getComponent(MPSProject.class).getModuleReferences());
      while (QueueSequence.fromQueue(modules).isNotEmpty()) {
        SModule module = ModuleRepositoryFacade.getInstance().getModule(QueueSequence.fromQueue(modules).removeFirstElement());
        if (module.isPackaged()) {
          continue;
        }
        if (module instanceof Language) {
          Iterable<Generator> generators = ((Language) module).getGenerators();
          QueueSequence.fromQueue(modules).addSequence(Sequence.fromIterable(generators).select(new ISelector<Generator, ModuleReference>() {
            public ModuleReference select(Generator it) {
              return it.getModuleReference();
            }
          }));
        }

        // Using SModelReferences because SModelDescriptors can be re-created during MissingDependenciesFixer execution. 
        List<SModelReference> modelReferences = ListSequence.fromList(new LinkedList<SModelReference>());
        for (SModel model : Sequence.fromIterable(module.getModels())) {
          ListSequence.fromList(modelReferences).addElement(model.getReference());
        }

        for (SModelReference modelReference : ListSequence.fromList(modelReferences)) {
          SModel model = SModelRepository.getInstance().getModelDescriptor(modelReference);
          if (model == null) {
            continue;
          }
          if (!(SModelStereotype.isUserModel(model))) {
            continue;
          }
          if (!(model instanceof EditableSModel)) {
            continue;
          }

          MissingDependenciesFixer.fixDependencies(model);
        }
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "FixMissingImportsInProject", t);
    }
  }

  private static Logger LOG = Logger.getLogger(FixMissingImportsInProject_Action.class);
}
