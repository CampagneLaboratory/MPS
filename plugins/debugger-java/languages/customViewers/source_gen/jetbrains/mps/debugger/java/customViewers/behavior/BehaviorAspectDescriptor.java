package jetbrains.mps.debugger.java.customViewers.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myGetHighLevelValuePresentation_ConceptFunction__BehaviorDescriptor = new GetHighLevelValuePresentation_ConceptFunction__BehaviorDescriptor();
  private final BHDescriptor myGetHighLevelWatchablesBlock_ConceptFunction__BehaviorDescriptor = new GetHighLevelWatchablesBlock_ConceptFunction__BehaviorDescriptor();
  private final BHDescriptor myCanWrapHighLevelValue_ConceptFunction__BehaviorDescriptor = new CanWrapHighLevelValue_ConceptFunction__BehaviorDescriptor();
  private final BHDescriptor myHighLevelCustomViewer__BehaviorDescriptor = new HighLevelCustomViewer__BehaviorDescriptor();
  private final BHDescriptor myToProcessMethod__BehaviorDescriptor = new ToProcessMethod__BehaviorDescriptor();
  private final BHDescriptor myWatchableListType__BehaviorDescriptor = new WatchableListType__BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[6];
    myConceptBehaviorIds[0] = 0x9a1514043ecbd2L;
    myConceptBehaviorIds[1] = 0x9a1514043ecbd6L;
    myConceptBehaviorIds[2] = 0x9a1514043ecbdbL;
    myConceptBehaviorIds[3] = 0x97038071a3bfa40L;
    myConceptBehaviorIds[4] = 0xa01bb2d9f697c10L;
    myConceptBehaviorIds[5] = 0x19926b3196c33bb3L;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myGetHighLevelValuePresentation_ConceptFunction__BehaviorDescriptor;
      case 1:
        return myGetHighLevelWatchablesBlock_ConceptFunction__BehaviorDescriptor;
      case 2:
        return myCanWrapHighLevelValue_ConceptFunction__BehaviorDescriptor;
      case 3:
        return myHighLevelCustomViewer__BehaviorDescriptor;
      case 4:
        return myToProcessMethod__BehaviorDescriptor;
      case 5:
        return myWatchableListType__BehaviorDescriptor;
      default:
        return null;
    }
  }
}
