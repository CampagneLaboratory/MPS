package jetbrains.mps.debugger.java.customViewers.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptCanWrapHighLevelValue_ConceptFunction = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.customViewers.structure.CanWrapHighLevelValue_ConceptFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCustomWatchable = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.customViewers.structure.CustomWatchable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("iconPath").create();
  /*package*/ final ConceptDescriptor myConceptCustomWatchablesContainer = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.customViewers.structure.CustomWatchablesContainer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"watchable"}, new boolean[]{true}).alias("custom watchables container", "").create();
  /*package*/ final ConceptDescriptor myConceptGetHighLevelValuePresentation_ConceptFunction = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.customViewers.structure.GetHighLevelValuePresentation_ConceptFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetHighLevelWatchablesBlock_ConceptFunction = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.customViewers.structure.GetHighLevelWatchablesBlock_ConceptFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptHighLevelCustomViewer = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.customViewers.structure.HighLevelCustomViewer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"valueType", "canWrap", "getPresentation", "getWatchables"}, new boolean[]{false, false, false, false}).alias("custom viewer", "").create();
  /*package*/ final ConceptDescriptor myConceptHighLevelValue_ConceptFunctionParameter = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.customViewers.structure.HighLevelValue_ConceptFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").children(new String[]{"valueProxyType"}, new boolean[]{false}).alias("value", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptHighLevelWatchableCreator = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.customViewers.structure.HighLevelWatchableCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").references("watchable").children(new String[]{"value"}, new boolean[]{false}).alias("watchable", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptToProcessMethod = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.customViewers.structure.ToProcessMethod").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").alias("to process method", "").create();
  /*package*/ final ConceptDescriptor myConceptWatchableListType = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.customViewers.structure.WatchableListType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").alias("watchable list", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptWatchableType = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.customViewers.structure.WatchableType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("watchable", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptWatchablesListCreator = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.customViewers.structure.WatchablesListCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").alias("watchables array list", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCanWrapHighLevelValue_ConceptFunction, myConceptCustomWatchable, myConceptCustomWatchablesContainer, myConceptGetHighLevelValuePresentation_ConceptFunction, myConceptGetHighLevelWatchablesBlock_ConceptFunction, myConceptHighLevelCustomViewer, myConceptHighLevelValue_ConceptFunctionParameter, myConceptHighLevelWatchableCreator, myConceptToProcessMethod, myConceptWatchableListType, myConceptWatchableType, myConceptWatchablesListCreator);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0p, conceptFqName)) {
      case 0:
        return myConceptCanWrapHighLevelValue_ConceptFunction;
      case 1:
        return myConceptCustomWatchable;
      case 2:
        return myConceptCustomWatchablesContainer;
      case 3:
        return myConceptGetHighLevelValuePresentation_ConceptFunction;
      case 4:
        return myConceptGetHighLevelWatchablesBlock_ConceptFunction;
      case 5:
        return myConceptHighLevelCustomViewer;
      case 6:
        return myConceptHighLevelValue_ConceptFunctionParameter;
      case 7:
        return myConceptHighLevelWatchableCreator;
      case 8:
        return myConceptToProcessMethod;
      case 9:
        return myConceptWatchableListType;
      case 10:
        return myConceptWatchableType;
      case 11:
        return myConceptWatchablesListCreator;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0p = new String[]{"jetbrains.mps.debugger.java.customViewers.structure.CanWrapHighLevelValue_ConceptFunction", "jetbrains.mps.debugger.java.customViewers.structure.CustomWatchable", "jetbrains.mps.debugger.java.customViewers.structure.CustomWatchablesContainer", "jetbrains.mps.debugger.java.customViewers.structure.GetHighLevelValuePresentation_ConceptFunction", "jetbrains.mps.debugger.java.customViewers.structure.GetHighLevelWatchablesBlock_ConceptFunction", "jetbrains.mps.debugger.java.customViewers.structure.HighLevelCustomViewer", "jetbrains.mps.debugger.java.customViewers.structure.HighLevelValue_ConceptFunctionParameter", "jetbrains.mps.debugger.java.customViewers.structure.HighLevelWatchableCreator", "jetbrains.mps.debugger.java.customViewers.structure.ToProcessMethod", "jetbrains.mps.debugger.java.customViewers.structure.WatchableListType", "jetbrains.mps.debugger.java.customViewers.structure.WatchableType", "jetbrains.mps.debugger.java.customViewers.structure.WatchablesListCreator"};
}
