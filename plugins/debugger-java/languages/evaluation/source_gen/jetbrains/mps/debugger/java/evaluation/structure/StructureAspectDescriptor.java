package jetbrains.mps.debugger.java.evaluation.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptDebuggedType = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.DebuggedType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").properties("isHigh").children(new String[]{"lowType", "highType"}, new boolean[]{false, false}).alias("debugged type", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDoNotTransformAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.DoNotTransformAnnotation").super_("jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation").parents("jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation").alias("do not transform", "").create();
  /*package*/ final ConceptDescriptor myConceptDownCastToLowLevel = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"expression"}, new boolean[]{false}).alias("downcast", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEvaluator = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.Evaluator").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.debugger.java.evaluation.structure.IEvaluatorConcept").children(new String[]{"code"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptEvaluatorConcept = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.EvaluatorConcept").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.debugger.java.evaluation.structure.IEvaluatorConcept").properties("isShowContext").children(new String[]{"variables", "thisNode", "contextNode", "evaluatedStatements"}, new boolean[]{true, false, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptEvaluatorsSuperMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.EvaluatorsSuperMethodCall").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("instanceMethodDeclaration").alias("super", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEvaluatorsThisExpression = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.EvaluatorsThisExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("this", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGenerationHelperAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").create();
  /*package*/ final ConceptDescriptor myConceptIEvaluatorConcept = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.IEvaluatorConcept").interface_().create();
  /*package*/ final ConceptDescriptor myConceptLowLevelVariable = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariable").super_("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").properties("isOutOfScope", "highLevelNodeId", "lowLevelName").children(new String[]{"debuggedType"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptLowLevelVariableReference = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariableReference").super_("jetbrains.mps.baseLanguage.structure.BaseVariableReference").parents("jetbrains.mps.baseLanguage.structure.BaseVariableReference").references("variableDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptToEvaluateAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.ToEvaluateAnnotation").super_("jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation").parents("jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation").create();
  /*package*/ final ConceptDescriptor myConceptUnitNode = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.UnitNode").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("highLevelNodeId").children(new String[]{"debuggedType"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptUnprocessedAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation").super_("jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation").parents("jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation").alias("unprocessed", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptDebuggedType, myConceptDoNotTransformAnnotation, myConceptDownCastToLowLevel, myConceptEvaluator, myConceptEvaluatorConcept, myConceptEvaluatorsSuperMethodCall, myConceptEvaluatorsThisExpression, myConceptGenerationHelperAnnotation, myConceptIEvaluatorConcept, myConceptLowLevelVariable, myConceptLowLevelVariableReference, myConceptToEvaluateAnnotation, myConceptUnitNode, myConceptUnprocessedAnnotation);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0r, conceptFqName)) {
      case 0:
        return myConceptDebuggedType;
      case 1:
        return myConceptDoNotTransformAnnotation;
      case 2:
        return myConceptDownCastToLowLevel;
      case 3:
        return myConceptEvaluator;
      case 4:
        return myConceptEvaluatorConcept;
      case 5:
        return myConceptEvaluatorsSuperMethodCall;
      case 6:
        return myConceptEvaluatorsThisExpression;
      case 7:
        return myConceptGenerationHelperAnnotation;
      case 8:
        return myConceptIEvaluatorConcept;
      case 9:
        return myConceptLowLevelVariable;
      case 10:
        return myConceptLowLevelVariableReference;
      case 11:
        return myConceptToEvaluateAnnotation;
      case 12:
        return myConceptUnitNode;
      case 13:
        return myConceptUnprocessedAnnotation;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0r = new String[]{"jetbrains.mps.debugger.java.evaluation.structure.DebuggedType", "jetbrains.mps.debugger.java.evaluation.structure.DoNotTransformAnnotation", "jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel", "jetbrains.mps.debugger.java.evaluation.structure.Evaluator", "jetbrains.mps.debugger.java.evaluation.structure.EvaluatorConcept", "jetbrains.mps.debugger.java.evaluation.structure.EvaluatorsSuperMethodCall", "jetbrains.mps.debugger.java.evaluation.structure.EvaluatorsThisExpression", "jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation", "jetbrains.mps.debugger.java.evaluation.structure.IEvaluatorConcept", "jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariable", "jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariableReference", "jetbrains.mps.debugger.java.evaluation.structure.ToEvaluateAnnotation", "jetbrains.mps.debugger.java.evaluation.structure.UnitNode", "jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation"};
}
