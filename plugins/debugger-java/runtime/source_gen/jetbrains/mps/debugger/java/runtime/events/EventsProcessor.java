package jetbrains.mps.debugger.java.runtime.events;

/*Generated by MPS */

import jetbrains.mps.debugger.java.runtime.concurrent.ManagerThread;
import com.sun.jdi.VirtualMachine;
import java.util.concurrent.atomic.AtomicInteger;
import jetbrains.mps.debugger.java.runtime.RequestManager;
import jetbrains.mps.debugger.java.runtime.execution.SystemMessagesReporter;
import com.sun.jdi.event.ClassPrepareEvent;
import com.sun.jdi.event.StepEvent;
import com.sun.jdi.request.EventRequest;
import com.sun.jdi.request.StepRequest;
import jetbrains.mps.debugger.java.runtime.requests.StepRequestor;
import com.sun.jdi.ThreadReference;
import com.sun.jdi.event.LocatableEvent;
import jetbrains.mps.debugger.java.runtime.requests.LocatableEventRequestor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.debugger.java.runtime.breakpoints.JavaBreakpoint;
import com.sun.jdi.AbsentInformationException;
import com.intellij.openapi.application.ApplicationManager;
import com.sun.jdi.event.EventQueue;
import com.sun.jdi.event.EventSet;
import com.sun.jdi.event.Event;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import com.sun.jdi.event.VMDeathEvent;
import com.sun.jdi.event.VMDisconnectEvent;

public class EventsProcessor {
  protected static final int STATE_INITIAL = 0;
  protected static final int STATE_ATTACHED = 1;
  protected static final int STATE_DETACHING = 2;
  protected static final int STATE_DETACHED = 3;

  private final ManagerThread myManagerThread = new ManagerThread();
  private EventsProcessor.EventProcessorRunnable myRunnable = new EventsProcessor.EventProcessorRunnable();
  private VirtualMachine myVirtualMachine;
  protected final AtomicInteger myState = new AtomicInteger(STATE_INITIAL);
  private RequestManager myRequestManager;
  private final ContextManager myContextManager = new ContextManager();
  private final SystemMessagesReporter myReporter = new SystemMessagesReporter(null);

  public EventsProcessor() {
  }

  private void processVmDeathEvent() {
    ManagerThread.assertIsMangerThread();
    if (myRunnable != null) {
      myRunnable.stop();
      myRunnable = null;
    }

    if (myState.compareAndSet(STATE_INITIAL, STATE_DETACHING) || myState.compareAndSet(STATE_ATTACHED, STATE_DETACHING)) {
      myVirtualMachine = null;
      myManagerThread.close();
      myState.set(STATE_DETACHED);

      // todo fire detached 
    }
  }

  private void processClassPrepareEvent(EventContext context, ClassPrepareEvent event) {
    ManagerThread.assertIsMangerThread();
    myRequestManager.processClassPrepared(event);
    myContextManager.resume(context);
  }

  private void processStepEvent(EventContext context, StepEvent event) {
    myRequestManager.deleteStepRequests();
    EventRequest request = event.request();
    if (request instanceof StepRequest) {
      StepRequest stepRequest = (StepRequest) request;
      StepRequestor requestor = (StepRequestor) myRequestManager.findRequestor(stepRequest);
      int nextStep = requestor.nextStep(event);
      if (nextStep == StepRequestor.STOP) {
        myContextManager.pause(context);
        return;
      } else {
        addNewStepRequest(requestor, nextStep, event.thread(), context.getSuspendPolicy());
      }
    }
    myContextManager.resume(context);
  }

  private void addNewStepRequest(StepRequestor stepRequestor, int stepType, ThreadReference threadReference, int suspendPolicy) {
    ManagerThread.assertIsMangerThread();
    StepRequest stepRequest = myRequestManager.createStepRequest(stepRequestor, stepType, threadReference, suspendPolicy);
    //  TODO request filters should be configured by user 
    //  this particular list was taken from idea debugger settings in order to fix MPS-8725 
    stepRequest.addClassExclusionFilter("java.*");
    stepRequest.addClassExclusionFilter("javax.*");
    stepRequest.addClassExclusionFilter("org.omg.*");
    stepRequest.addClassExclusionFilter("sun.*");
    stepRequest.addClassExclusionFilter("junit.*");
    stepRequest.addClassExclusionFilter("com.sun.*");
    // TODO also might wanna let user to exclude constructors, classloaders, getters, 
    // synthetic methods (whatever synthetic methods are). 
    // see idea debugger settings for the full list 
    myRequestManager.enableRequest(stepRequest);
  }

  private void processLocatableEvent(final EventContext context, final LocatableEvent event) {
    ManagerThread.assertIsMangerThread();

    // if inside evaluation, resume 
    final ThreadReference thread = event.thread();
    if (myContextManager.isEvaluated(thread)) {
      myContextManager.resume(context);
      return;
    }

    final LocatableEventRequestor requestor = (LocatableEventRequestor) myRequestManager.findRequestor(event.request());

    // if no requestor or suspend none resume 
    if (requestor == null || EventRequest.SUSPEND_NONE == requestor.getSuspendPolicy()) {
      myContextManager.resume(context);
    }

    // requestor may evaluate something inside, like a condition or an expression to print 
    invokeEvaluation(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        boolean resume = true;
        try {
          resume = !(requestor.isRequestHitByEvent(context, event));
        } finally {
          if (resume) {
            myContextManager.resume(context);
          } else {
            try {
              if (requestor instanceof JavaBreakpoint && ((JavaBreakpoint) requestor).isLogMessage()) {
                // todo move to java breakpoint? 
                myReporter.reportInformation("Breakpoint hit: " + ((JavaBreakpoint) requestor).getPresentation() + " " + event.location().sourceName() + ":" + event.location().lineNumber());
              }
            } catch (AbsentInformationException ignore) {
            } finally {
              myContextManager.pause(context);
            }
          }
        }
      }
    }, thread);
  }

  public void invokeEvaluation(final _FunctionTypes._void_P0_E0 evaluationCommand, final ThreadReference threadToEvaluateIn) {
    ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {
      public void run() {
        myContextManager.startEvaluation(threadToEvaluateIn);
        try {
          evaluationCommand.invoke();
        } finally {
          myContextManager.finishEvaluation(threadToEvaluateIn);
        }
      }
    });
  }

  public RequestManager getRequestManager() {
    return myRequestManager;
  }

  public ContextManager getContextManager() {
    return myContextManager;
  }

  public static boolean isOnPooledThread() {
    // it is sufficient to check for this two 
    return !(ManagerThread.isManagerThread()) && !(ApplicationManager.getApplication().isDispatchThread());
  }

  public class EventProcessorRunnable implements Runnable {
    private volatile boolean myIsStopped = false;

    public EventProcessorRunnable() {
    }

    public void run() {
      try {
        EventQueue eventQueue = myVirtualMachine.eventQueue();
        while (!(myIsStopped)) {
          final EventSet events = eventQueue.remove();
          myManagerThread.invokeAndWait(new _FunctionTypes._void_P0_E0() {
            public void invoke() {
              EventContext context = new EventContext(EventsProcessor.this, events);
              for (Event event : SetSequence.fromSet(events)) {
                if (event instanceof VMDeathEvent) {
                  processVmDeathEvent();
                } else
                if (event instanceof VMDisconnectEvent) {
                  processVmDeathEvent();
                } else
                if (event instanceof ClassPrepareEvent) {
                  processClassPrepareEvent(context, (ClassPrepareEvent) event);
                } else
                if (event instanceof StepEvent) {
                  processStepEvent(context, (StepEvent) event);
                } else
                if (event instanceof LocatableEvent) {
                  processLocatableEvent(context, (LocatableEvent) event);
                } else {
                  myContextManager.resume(context);
                }
              }
            }
          });
        }
      } catch (InterruptedException e) {
        myManagerThread.invokeAndWait(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            processVmDeathEvent();
          }
        });
      }
    }

    public void stop() {
      myIsStopped = true;
    }

    public boolean isStopped() {
      return myIsStopped;
    }
  }
}
