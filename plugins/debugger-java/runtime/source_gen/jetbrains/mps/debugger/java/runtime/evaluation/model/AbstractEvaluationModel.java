package jetbrains.mps.debugger.java.runtime.evaluation.model;

/*Generated by MPS */

import jetbrains.mps.debugger.java.runtime.evaluation.container.IEvaluationContainer;
import jetbrains.mps.debugger.java.api.state.JavaUiState;
import jetbrains.mps.debugger.java.runtime.state.DebugSession;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import java.util.List;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.project.ModuleContext;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.smodel.ProjectModels;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.library.GeneralPurpose_DevKit;
import jetbrains.mps.smodel.SModelRepository;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.debugger.java.api.evaluation.EvaluationException;
import jetbrains.mps.debugger.java.runtime.evaluation.container.GeneratorUtil;
import jetbrains.mps.debugger.java.runtime.evaluation.container.Properties;
import jetbrains.mps.debugger.java.runtime.evaluation.container.TransformingGenerationHandler;
import jetbrains.mps.debugger.java.api.evaluation.Evaluator;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public abstract class AbstractEvaluationModel implements IEvaluationContainer {
  protected JavaUiState myUiState;
  protected final DebugSession myDebugSession;
  protected final IOperationContext myContext;
  protected final EditableSModelDescriptor myAuxModel;
  protected final EvaluationAuxModule myAuxModule;
  protected final List<Language> myLanguages = ListSequence.fromList(new ArrayList<Language>());
  private final List<_FunctionTypes._void_P1_E0<? super SNode>> myGenerationListeners = ListSequence.fromList(new ArrayList<_FunctionTypes._void_P1_E0<? super SNode>>());
  protected final EvaluationContext myEvaluationContext;
  protected final boolean myShowContext;

  public AbstractEvaluationModel(Project project, @NotNull DebugSession session, @NotNull EvaluationAuxModule auxModule, EvaluationContext context, boolean isShowContext) {
    assert !(ApplicationManager.getApplication().isDispatchThread());
    myUiState = session.getUiState();
    myDebugSession = session;
    if (context.getLocationNode() != null) {
      myContext = ModuleContext.create(context.getLocationNode(), ProjectHelper.toMPSProject(project));
    } else {
      myContext = new ModuleContext(auxModule, ProjectHelper.toMPSProject(project));
    }
    myAuxModule = auxModule;

    final EditableSModelDescriptor modelDescriptor = ((EditableSModelDescriptor) ProjectModels.createDescriptorFor(true));
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        modelDescriptor.getSModel().addDevKit(GeneralPurpose_DevKit.MODULE_REFERENCE);
      }
    });
    SModelRepository.getInstance().registerModelDescriptor(modelDescriptor, myAuxModule);

    myAuxModel = modelDescriptor;
    myEvaluationContext = context;
    myShowContext = isShowContext;
  }

  public List<Language> getRequiredLanguages() {
    return myLanguages;
  }

  @NotNull
  public abstract SNode getNodeToShow();



  public void addGenerationListener(_FunctionTypes._void_P1_E0<? super SNode> listener) {
    ListSequence.fromList(myGenerationListeners).addElement(listener);
  }

  public void updateState() {
    myUiState = myDebugSession.getUiState();
    myEvaluationContext.setUiState(myUiState);
  }

  public abstract AbstractEvaluationModel copy(boolean watch);

  @Nullable
  public Class generateClass() throws EvaluationException {
    return GeneratorUtil.generateAndLoadEvaluatorClass(myAuxModule.getMPSProject().getProject(), myAuxModel, Properties.EVALUATOR_NAME, myContext, Properties.IS_DEVELOPER_MODE, new TransformingGenerationHandler(false, true, myGenerationListeners), myUiState.getClass().getClassLoader());
  }

  public Evaluator createEvaluatorInstance(Class clazz) throws EvaluationException {
    return GeneratorUtil.createInstance(clazz, new Class[]{JavaUiState.class}, new Object[]{myUiState});
  }

  public String getPresentation() {
    return ModelAccess.instance().runReadAction(new Computable<String>() {
      public String compute() {
        return BehaviorReflection.invokeVirtual(String.class, getNodeToShow(), "virtual_getEvaluatorPresentation_9172312269976647295", new Object[]{});
      }
    });
  }

  public IOperationContext getContext() {
    return new ModuleContext(myAuxModule, myAuxModule.getMPSProject());
  }

  public SNode getNode() {
    return getNodeToShow();
  }
}
