package jetbrains.mps.debugger.java.runtime.state;

/*Generated by MPS */

import jetbrains.mps.debugger.java.api.state.JavaUiState;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.debugger.java.runtime.engine.events.Context;
import jetbrains.mps.debugger.java.api.state.proxy.JavaThread;
import jetbrains.mps.debugger.java.runtime.engine.events.EventsProcessor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.annotations.Nullable;

public abstract class JavaUiStateImpl extends JavaUiState {
  protected final DebugSession myDebugSession;

  public JavaUiStateImpl(@NotNull DebugSession session) {
    super(session);
    myDebugSession = session;
  }

  public abstract Context getContext();

  @Override
  public abstract boolean isPausedOnBreakpoint();

  @NotNull
  /*package*/ PausedJavaUiState paused(@NotNull Context context) {
    //  changes state on pause/resume 
    //  we select new context even if we are already on some other context 
    //  user probably wants to know about new paused contexts 
    return new PausedJavaUiState(context, myDebugSession);
  }

  @NotNull
  /*package*/ JavaUiStateImpl resumed(Context context) {
    if (context != getContext()) {
      return this;
    }
    Context newContext = getEventProcessor().getContextManager().firstContext();
    if (newContext == null) {
      return new RunningJavaUiState(myDebugSession);
    }
    return new PausedJavaUiState(newContext, myDebugSession);
  }

  protected Context findContext(@NotNull JavaUiStateImpl previousState) {
    Context newContext = previousState.getContext();
    if (newContext == null) {
      return null;
    }
    JavaThread thread = getThread();
    if (thread == null) {
      return null;
    }
    if (!(eq_vkri5_a0a4a6(newContext.getThread(), thread))) {
      return getEventProcessor().getContextManager().findContextForThread(thread.getThread());
    }
    return newContext;
  }

  protected EventsProcessor getEventProcessor() {
    return myDebugSession.getEventsProcessor();
  }

  @Override
  public void invokeEvaluation(_FunctionTypes._void_P0_E0 command) {
    if (getContext() == null) {
      return;
    }
    myDebugSession.getEventsProcessor().scheduleEvaluation(command, getThread().getThread());
  }

  @Override
  @Nullable
  public <R> R invokeEvaluationUnderProgress(_FunctionTypes._return_P0_E0<? extends R> command) {
    if (getContext() == null) {
      return null;
    }
    return myDebugSession.getEventsProcessor().scheduleEvaluation(command, getThread().getThread());
  }

  private static boolean eq_vkri5_a0a4a6(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
