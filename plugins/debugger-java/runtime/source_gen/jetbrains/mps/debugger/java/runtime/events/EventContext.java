package jetbrains.mps.debugger.java.runtime.events;

/*Generated by MPS */

import com.sun.jdi.event.EventSet;
import com.sun.jdi.ThreadReference;
import com.sun.jdi.event.LocatableEvent;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import com.sun.jdi.event.Event;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;


/**
 * See http://docs.oracle.com/javase/6/docs/jdk/api/jpda/jdi/index.html?com/sun/jdi/ReferenceType.html
 */
public class EventContext {
  private final EventSet myEventSet;
  private final ThreadReference myThreadReference;
  private int myVotesToVote;
  private boolean myPaused = false;

  public EventContext(EventSet eventSet) {
    myEventSet = eventSet;
    myVotesToVote = eventSet.size();
    // if one of the events is locatable, then all are locatable on the same thread and location 
    // (this is written in the documentation) 
    // so we have a thread 
    LocatableEvent event = (LocatableEvent) Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<Event>() {
      public Iterable<Event> iterable() {
        return myEventSet;
      }
    })).findFirst(new IWhereFilter<Event>() {
      public boolean accept(Event it) {
        return it instanceof LocatableEvent;
      }
    });
    myThreadReference = check_gqjtnu_a0g0a(event);
  }

  /*package*/ synchronized boolean voteResume() {
    myVotesToVote--;
    if (myVotesToVote == 0 && !(myPaused)) {
      myEventSet.resume();
      return true;
    }
    return false;
  }

  /*package*/ synchronized void pause() {
    myPaused = true;
  }

  public int getSuspendPolicy() {
    return myEventSet.suspendPolicy();
  }

  public ThreadReference getThreadReference() {
    return myThreadReference;
  }

  private static ThreadReference check_gqjtnu_a0g0a(LocatableEvent checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.thread();
    }
    return null;
  }
}
