package jetbrains.mps.debugger.java.runtime.state.values;

/*Generated by MPS */

import jetbrains.mps.debugger.java.api.state.proxy.ValueUtil;
import jetbrains.mps.debugger.java.api.state.proxy.JavaValue;
import org.jetbrains.annotations.Nullable;
import com.sun.jdi.Value;
import com.sun.jdi.ThreadReference;
import jetbrains.mps.debugger.java.api.evaluation.proxies.IValueProxy;
import jetbrains.mps.debugger.java.api.evaluation.proxies.MirrorUtil;
import jetbrains.mps.debugger.java.api.evaluation.proxies.INullValueProxy;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.debugger.java.api.state.proxy.ValueWrapper;
import jetbrains.mps.debugger.java.runtime.state.customViewers.CustomViewersManagerImpl;
import jetbrains.mps.debugger.java.api.evaluation.proxies.IObjectValueProxy;
import jetbrains.mps.debugger.java.api.evaluation.proxies.IArrayValueProxy;
import com.sun.jdi.StringReference;
import jetbrains.mps.debugger.java.api.evaluation.proxies.PrimitiveValueProxy;

public class ValueUtilImpl extends ValueUtil {
  public ValueUtilImpl() {
  }

  @Override
  public void init() {
    synchronized (LOCK) {
      INSTANCE = this;
    }
  }

  @Override
  public void dispose() {
    synchronized (LOCK) {
      INSTANCE = null;
    }
  }

  @Override
  public JavaValue fromJDI(@Nullable Value value, ThreadReference threadReference) {
    IValueProxy proxy = MirrorUtil.getInstance().getValueProxy(value);
    if (proxy instanceof INullValueProxy) {
      return fromJDIRaw(proxy, threadReference);
    }
    return tryToWrap(proxy, threadReference);
  }

  private JavaValue tryToWrap(@NotNull IValueProxy proxy, ThreadReference threadReference) {
    ValueWrapper wrapper = CustomViewersManagerImpl.getInstanceImpl().getValueWrapper(proxy, threadReference);
    if (wrapper == null) {
      return fromJDIRaw(proxy, threadReference);
    }
    return wrapper;
  }

  public JavaValue fromJDIRaw(@NotNull IValueProxy proxy, ThreadReference threadReference) {
    if (proxy instanceof INullValueProxy) {
      return new JavaObjectValue((INullValueProxy) proxy, threadReference);
    }
    if (proxy instanceof IObjectValueProxy) {
      if (proxy instanceof IArrayValueProxy) {
        return new JavaArrayValue((IArrayValueProxy) proxy, threadReference);
      } else
      if (proxy.getJDIValue() instanceof StringReference) {
        return new JavaStringValue((IObjectValueProxy) proxy, threadReference);
      } else {
        return new JavaObjectValue((IObjectValueProxy) proxy, threadReference);
      }
    } else {
      return new JavaPrimitiveValue((PrimitiveValueProxy) proxy, threadReference);
    }
  }
}
