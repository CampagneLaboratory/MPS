package jetbrains.mps.debugger.java.runtime.ui.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.debugger.java.runtime.ui.evaluation.EvaluationUi;
import jetbrains.mps.debugger.java.runtime.evaluation.structure.IEvaluationContainer;
import jetbrains.mps.debugger.java.runtime.state.DebugSession;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.logging.Logger;

public class EditWatchAction_Action extends BaseAction {
  private static final Icon ICON = null;

  public EditWatchAction_Action() {
    super("Edit Watch", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      event.getPresentation().setVisible(EvaluationUi.EVALUATION_CONTAINER.getData(event.getDataContext()) != null && EvaluationUi.DEBUG_SESSION.getData(event.getDataContext()) != null);
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "EditWatchAction", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      IEvaluationContainer container = EvaluationUi.EVALUATION_CONTAINER.getData(event.getDataContext());
      DebugSession session = EvaluationUi.DEBUG_SESSION.getData(event.getDataContext());
      if (container == null || session == null) {
        return;
      }
      session.getEvaluationProvider().showEditWatchDialog(MPSCommonDataKeys.OPERATION_CONTEXT.getData(event.getDataContext()), container);
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "EditWatchAction", t);
    }
  }

  private static Logger LOG = Logger.getLogger(EditWatchAction_Action.class);
}
