package jetbrains.mps.debugger.java.runtime.evaluation.model;

/*Generated by MPS */

import jetbrains.mps.debugger.java.runtime.evaluation.container.EvaluationContainer;
import jetbrains.mps.project.Project;
import jetbrains.mps.debugger.java.runtime.state.DebugSession;
import org.jetbrains.mps.openapi.module.SModuleReference;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.debugger.java.runtime.evaluation.container.EvaluationModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.SModelInternal;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.debugger.java.runtime.evaluation.container.BaseLanguagesImportHelper;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.sun.jdi.InvalidStackFrameException;
import org.apache.log4j.Priority;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.ide.findusages.model.scopes.ModelsScope;
import java.util.Collections;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.smodel.SModelFqName;
import java.util.ArrayList;
import jetbrains.mps.smodel.CopyUtil;
import com.intellij.openapi.extensions.PluginId;
import com.intellij.ide.plugins.PluginManager;
import jetbrains.mps.debug.api.Debuggers;
import jetbrains.mps.debugger.java.runtime.JavaDebugger;
import java.io.File;
import com.intellij.ide.plugins.IdeaPluginDescriptorImpl;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.smodel.SNodePointer;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class EvaluationWithContextContainer extends EvaluationContainer {
  private final boolean myIsInWatch;
  private boolean myVariablesInitialized = false;
  protected final EvaluationContext myEvaluationContext;

  public EvaluationWithContextContainer(Project project, DebugSession session, SModuleReference containerModule, List<SNodeReference> nodesToImport, boolean isInWatch) {
    super(project, session, containerModule, nodesToImport);
    myIsInWatch = isInWatch;
    myEvaluationContext = new StackFrameContext(session.getUiState());
  }



  @Override
  protected void setUpNode(List<SNodeReference> nodesToImport) {
    EvaluationModule containerModule = (EvaluationModule) myContainerModule.resolve(myDebuggerRepository);
    // wanted to use resolve method here, but it was not implemented:( 
    SModel containerModel = SModelRepository.getInstance().getModelDescriptor(myContainerModel);

    setUpDependencies(containerModule, containerModel);


    final SNode evaluatorNode = createEvaluatorNode();
    containerModel.addRootNode(evaluatorNode);
    myNode = evaluatorNode.getReference();

    createVars();
    tryToImport(evaluatorNode, nodesToImport);

    SModelOperations.validateLanguagesAndImports(containerModel, true, true);
  }

  private void setUpDependencies(final EvaluationModule containerModule, SModel containerModel) {
    ListSequence.fromList(myEvaluationContext.getClassPath()).union(ListSequence.fromList(getDebuggerStubPath())).visitAll(new IVisitor<String>() {
      public void visit(String it) {
        containerModule.addClassPathItem(it);
      }
    });
    containerModule.updateModelsSet();

    ((SModelInternal) containerModel).addLanguage(PersistenceFacade.getInstance().createModuleReference("7da4580f-9d75-4603-8162-51a896d78375(jetbrains.mps.debugger.java.evaluation)"));
    ((SModelInternal) containerModel).addLanguage(PersistenceFacade.getInstance().createModuleReference("80208897-4572-437d-b50e-8f050cba9566(jetbrains.mps.debugger.java.privateMembers)"));
    containerModule.addUsedLanguage(PersistenceFacade.getInstance().createModuleReference("7da4580f-9d75-4603-8162-51a896d78375(jetbrains.mps.debugger.java.evaluation)"));
    containerModule.addUsedLanguage(PersistenceFacade.getInstance().createModuleReference("80208897-4572-437d-b50e-8f050cba9566(jetbrains.mps.debugger.java.privateMembers)"));
    containerModule.addDependency(PersistenceFacade.getInstance().createModuleReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065(JDK)"), false);
  }

  private void tryToImport(final SNode evaluatorNode, List<SNodeReference> nodesToImport) {
    BaseLanguagesImportHelper helper = new EvaluationWithContextContainer.MyBaseLanguagesImportHelper(evaluatorNode);
    helper.tryToImport(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), evaluatorNode, "virtual_getCode_317191294093624551", new Object[]{}), nodesToImport);
  }

  @Override
  protected SNode createEvaluatorNode() {
    SNode evaluatorConcept = SNodeFactoryOperations.createNewNode("jetbrains.mps.debugger.java.evaluation.structure.EvaluatorConcept", null);
    SPropertyOperations.set(evaluatorConcept, "isShowContext", "" + (myIsInWatch));
    AttributeOperations.createAndSetAttrbiute(SLinkOperations.getTarget(evaluatorConcept, "evaluatedStatements", true), new IAttributeDescriptor.NodeAttribute("jetbrains.mps.debugger.java.evaluation.structure.ToEvaluateAnnotation"), "jetbrains.mps.debugger.java.evaluation.structure.ToEvaluateAnnotation");
    return evaluatorConcept;
  }

  private void createVars() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        fillVariables(SNodeOperations.cast(getNode(), "jetbrains.mps.debugger.java.evaluation.structure.EvaluatorConcept"));
      }
    });
  }

  private void fillVariables(SNode evaluatorConcept) {
    try {
      _FunctionTypes._return_P1_E0<? extends SNode, ? super String> createClassifierType = new _FunctionTypes._return_P1_E0<SNode, String>() {
        public SNode invoke(String name) {
          return createClassifierType(name);
        }
      };
      Map<String, VariableDescription> contextVariables = myEvaluationContext.getVariables(createClassifierType);

      Map<String, SNode> declaredVariables = MapSequence.fromMap(new LinkedHashMap<String, SNode>(16, (float) 0.75, false));
      for (SNode var : ListSequence.fromList(SLinkOperations.getTargets(evaluatorConcept, "variables", true))) {
        MapSequence.fromMap(declaredVariables).put(SPropertyOperations.getString(var, "lowLevelName"), var);
      }

      final Set<SNode> foundVars = SetSequence.fromSet(new HashSet<SNode>());
      for (String variable : SetSequence.fromSet(MapSequence.fromMap(contextVariables).keySet())) {

        String name = variable;
        SNode lowLevelVarNode = MapSequence.fromMap(declaredVariables).get(name);

        if (needUpdateVariables()) {
          // we should update variables if we are first time here or if we do not show context (i.e. in evaluation) 
          if (lowLevelVarNode == null) {
            lowLevelVarNode = SConceptOperations.createNewNode("jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariable", null);
            ListSequence.fromList(SLinkOperations.getTargets(evaluatorConcept, "variables", true)).addElement(lowLevelVarNode);
            MapSequence.fromMap(declaredVariables).put(name, lowLevelVarNode);
          }
          MapSequence.fromMap(contextVariables).get(variable).updateLowLevelVariable(lowLevelVarNode);
        }

        SetSequence.fromSet(foundVars).addElement(lowLevelVarNode);
      }

      // now mark vars which are currently out of scope 
      Sequence.fromIterable(MapSequence.fromMap(declaredVariables).values()).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SPropertyOperations.set(it, "isOutOfScope", "" + (!(SetSequence.fromSet(foundVars).contains(it))));
        }
      });

      if (needUpdateVariables()) {
        // create static context type 
        SLinkOperations.setTarget(evaluatorConcept, "contextNode", myEvaluationContext.getStaticContextType(createClassifierType), true);
        // create this 
        SLinkOperations.setTarget(evaluatorConcept, "thisNode", myEvaluationContext.getThisClassifierType(createClassifierType), true);
      }
      // todo highlight when this type or static context type are invalid 
    } catch (InvalidStackFrameException e) {
      if (LOG.isEnabledFor(Priority.WARN)) {
        LOG.warn("InvalidStackFrameException", e);
      }
    }
    myVariablesInitialized = true;
  }



  @Override
  public void updateState() {
    super.updateState();
    if (myDebugSession.getEvaluationProvider().canEvaluate()) {
      ModelAccess.instance().runWriteAction(new Runnable() {
        public void run() {
          createVars();
        }
      });
    }
  }

  @Nullable
  private SNode createClassifierType(final String unitFqName) {
    SNode unit = findUnit(unitFqName);
    if (unit == null) {
      return null;
    }
    SNode classifierType = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    SLinkOperations.setTarget(classifierType, "classifier", SNodeOperations.cast(unit, "jetbrains.mps.baseLanguage.structure.Classifier"), false);
    return classifierType;
  }

  public SNode findUnit(final String unitName) {
    // I hate the next piece of code 
    // (and this class in general, since it inherited a lot of the ugly stuff from the old evaluation code) 
    SModel stub = findStubForFqName(modelFqNameFromUnitName(unitName));
    if (stub != null) {
      SModel model = stub;
      SNode node = ListSequence.fromList(jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.getNodes(model, "jetbrains.mps.lang.traceable.structure.UnitConcept")).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return eq_v5yv3u_a0a0a0a0a0a0b0d0o(BehaviorReflection.invokeVirtual(String.class, it, "virtual_getUnitName_5067982036267369911", new Object[]{}), unitName) && SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.Classifier");
        }
      });
      if (node != null) {
        return node;
      }
    }

    FindUsagesFacade findUsages = FindUsagesFacade.getInstance();
    SAbstractConcept concept = SConceptRepository.getInstance().getConcept("jetbrains.mps.lang.traceable.structure.UnitConcept");

    Set<SNode> instances = findUsages.findInstances(new ModelsScope(getCandidateNonStubModels(unitName)), Collections.singleton(concept), false, new EmptyProgressMonitor());
    return SNodeOperations.cast(SetSequence.fromSet(instances).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(((SNode) it), "jetbrains.mps.baseLanguage.structure.Classifier") && BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(it, "jetbrains.mps.lang.traceable.structure.UnitConcept"), "virtual_getUnitName_5067982036267369911", new Object[]{}).equals(unitName);
      }
    }), "jetbrains.mps.lang.traceable.structure.UnitConcept");
  }

  @Nullable
  private SModel findStubForFqName(String fqName) {
    return SModelRepository.getInstance().getModelDescriptor(new SModelFqName(fqName, "java_stub").toString());
  }

  private boolean needUpdateVariables() {
    return !(myVariablesInitialized) || !(myIsInWatch);
  }

  @Override
  public EvaluationWithContextContainer copy(final boolean isInWatch) {
    final SNodeReference reference = myNode;
    return new EvaluationWithContextContainer(myProject, myDebugSession, myContainerModule, ListSequence.fromList(new ArrayList<SNodeReference>()), isInWatch) {
      @Override
      protected SNode createEvaluatorNode() {
        SNode newEvaluator = (SNode) CopyUtil.copyAndPreserveId(reference.resolve(myDebuggerRepository), true);
        SPropertyOperations.set(newEvaluator, "isShowContext", "" + (isInWatch));
        return newEvaluator;
      }
    };
  }

  public static List<String> getDebuggerStubPath() {
    PluginId apiPlugin = PluginManager.getPluginByClassName(Debuggers.class.getName());
    PluginId javaPlugin = PluginManager.getPluginByClassName(JavaDebugger.class.getName());

    List<File> paths = ListSequence.fromList(new ArrayList<File>());
    ListSequence.fromList(paths).addSequence(ListSequence.fromList(((IdeaPluginDescriptorImpl) PluginManager.getPlugin(apiPlugin)).getClassPath()));
    ListSequence.fromList(paths).addSequence(ListSequence.fromList(((IdeaPluginDescriptorImpl) PluginManager.getPlugin(javaPlugin)).getClassPath()));

    return ListSequence.fromList(paths).select(new ISelector<File, String>() {
      public String select(File it) {
        return (String) it.getAbsolutePath();
      }
    }).toListSequence();
  }

  public static Iterable<SModel> getCandidateNonStubModels(String unitName) {
    final String modelFqName = modelFqNameFromUnitName(unitName);
    return Sequence.fromIterable(Sequence.fromArray(SModelStereotype.values)).select(new ISelector<String, SModel>() {
      public SModel select(String stereotype) {
        return SModelRepository.getInstance().getModelDescriptor(new SModelFqName(modelFqName, stereotype).toString());
      }
    }).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return it != null;
      }
    });
  }

  public static String modelFqNameFromUnitName(String unitName) {
    int lastDot = unitName.lastIndexOf(".");
    return ((lastDot == -1 ?
      "" :
      unitName.substring(0, lastDot)
    ));
  }

  private class MyBaseLanguagesImportHelper extends BaseLanguagesImportHelper {
    private final SNode myEvaluatorNode;

    public MyBaseLanguagesImportHelper(SNode evaluatorNode) {
      myEvaluatorNode = evaluatorNode;
    }

    @Override
    public SNode findVariable(final SReference variableReference) {
      SNode matchingVar = ListSequence.fromList(SLinkOperations.getTargets(myEvaluatorNode, "variables", true)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode variable) {
          return eq_v5yv3u_a0a0a0a0a0a0a2v(SNodePointer.deserialize(SPropertyOperations.getString(variable, "highLevelNodeId")), SLinkOperations.getTargetNode(variableReference).getReference());
        }
      });
      if (matchingVar == null) {
        matchingVar = ListSequence.fromList(SLinkOperations.getTargets(myEvaluatorNode, "variables", true)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode variable) {
            return eq_v5yv3u_a0a0a0a0a0a0a1a2v(SPropertyOperations.getString(variable, "name"), SPropertyOperations.getString(SNodeOperations.cast(SLinkOperations.getTargetNode(variableReference), "jetbrains.mps.lang.core.structure.INamedConcept"), "name"));
          }
        });
      }
      return matchingVar;
    }

    @Override
    public SNode createVariableReference(SNode variable) {
      SNode newVariableReference = SConceptOperations.createNewNode("jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariableReference", null);
      SLinkOperations.setTarget(newVariableReference, "baseVariableDeclaration", variable, false);
      return newVariableReference;
    }
  }

  protected static Logger LOG = LogManager.getLogger(EvaluationWithContextContainer.class);

  private static boolean eq_v5yv3u_a0a0a0a0a0a0b0d0o(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_v5yv3u_a0a0a0a0a0a0a2v(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_v5yv3u_a0a0a0a0a0a0a1a2v(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
