package jetbrains.mps.debugger.java.runtime.concurrent;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.ListSequence;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class CommandQueue implements ICommandQueue {
  public static final int MAX_PRIORITY = 10;

  private final ReentrantLock myLock = new ReentrantLock();
  private final Condition myCondition = myLock.newCondition();
  private volatile ICommand myLastCommand;
  private boolean myClosed = false;
  private final List<ICommand>[] myQueue = new List[MAX_PRIORITY];

  public CommandQueue() {
    for (int i = 0; i < myQueue.length; i++) {
      myQueue[i] = ListSequence.fromList(new ArrayList<ICommand>());
    }
  }

  public void put(final ICommand command) {
    runUnderLock(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        int priority = command.getPriority() % MAX_PRIORITY;
        ListSequence.fromList(myQueue[priority]).addElement(command);
        myCondition.signalAll();
      }
    });
  }

  private void runUnderLock(_FunctionTypes._void_P0_E0 action) {
    myLock.lock();
    try {
      action.invoke();
    } finally {
      myLock.unlock();
    }
  }

  public ICommand currentCommand() {
    return myLastCommand;
  }

  public ICommand poll() throws ICommandQueue.QueueClosedException {
    myLock.lock();
    try {
      while (true) {
        if (myClosed) {
          throw new ICommandQueue.QueueClosedException();
        }
        for (List<ICommand> commandList : myQueue) {
          if (!(ListSequence.fromList(commandList).isEmpty())) {
            ICommand command = ListSequence.fromList(commandList).removeElementAt(0);
            myLastCommand = command;
            return command;
          }
        }
        myCondition.awaitUninterruptibly();
      }
    } finally {
      myLock.unlock();
    }
  }

  public void close() {
    runUnderLock(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        myClosed = true;
        myCondition.signalAll();
      }
    });
  }

  public boolean isClosed() {
    return myClosed;
  }
}
