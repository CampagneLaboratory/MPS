package jetbrains.mps.debugger.java.runtime.state.customViewers;

/*Generated by MPS */

import jetbrains.mps.debugger.java.api.state.customViewers.CustomViewersManager;
import java.util.Map;
import jetbrains.mps.debugger.java.api.state.proxy.ValueWrapperFactory;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.debugger.java.runtime.state.DebugSession;
import org.jetbrains.annotations.NotNull;
import java.util.Set;
import jetbrains.mps.debugger.java.api.evaluation.proxies.IValueProxy;
import java.util.HashSet;
import jetbrains.mps.debugger.java.api.state.proxy.ValueWrapper;
import com.sun.jdi.ThreadReference;
import jetbrains.mps.debugger.java.api.evaluation.proxies.IObjectValueProxy;
import com.sun.jdi.ObjectReference;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.project.ProjectManager;
import jetbrains.mps.debug.api.AbstractDebugSession;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.debug.api.DebugSessionManagerComponent;

public class CustomViewersManagerImpl extends CustomViewersManager {
  private final Map<String, ValueWrapperFactory> myFactories = MapSequence.fromMap(new HashMap<String, ValueWrapperFactory>());
  private final Map<DebugSession, Map<Long, String>> myObjectIdToFactory = MapSequence.fromMap(new HashMap<DebugSession, Map<Long, String>>());

  public CustomViewersManagerImpl() {
  }

  @Override
  public void addFactory(@NotNull ValueWrapperFactory factory) {
    MapSequence.fromMap(myFactories).put(factory.getClass().getName(), factory);
  }

  @Override
  public void removeFactory(@NotNull ValueWrapperFactory factory) {
    MapSequence.fromMap(myFactories).removeKey(factory.getClass().getName());
  }

  public Set<ValueWrapperFactory> getValueWrapperFactories(@NotNull final IValueProxy originalValue) {
    Set<ValueWrapperFactory> result = new HashSet<ValueWrapperFactory>();
    for (ValueWrapperFactory factory : MapSequence.fromMap(myFactories).values()) {
      if (factory.canWrapValue(originalValue)) {
        result.add(factory);
      }
    }
    return result;
  }

  public synchronized ValueWrapper getValueWrapper(@NotNull IValueProxy proxy, ThreadReference threadReference) {
    if (proxy instanceof IObjectValueProxy) {
      DebugSession session = getSession(proxy);
      Map<Long, String> objectIdToFactory = MapSequence.fromMap(myObjectIdToFactory).get(session);
      if (objectIdToFactory == null) {
        objectIdToFactory = MapSequence.fromMap(new HashMap<Long, String>());
        MapSequence.fromMap(myObjectIdToFactory).put(session, objectIdToFactory);
      }
      ValueWrapperFactory factory = null;
      long uniqueID = getValueId(proxy);
      String factoryId = MapSequence.fromMap(objectIdToFactory).get(uniqueID);
      if ((factoryId != null && factoryId.length() > 0)) {
        factory = MapSequence.fromMap(myFactories).get(factoryId);
      }
      if (factory == null) {
        Set<ValueWrapperFactory> factories = getValueWrapperFactories(proxy);
        if (factories.isEmpty()) {
          return null;
        }
        factory = factories.iterator().next();
        factoryId = factory.getClass().getName();
        MapSequence.fromMap(objectIdToFactory).put(uniqueID, factoryId);
      }
      return factory.createValueWrapper(proxy, threadReference);
    }
    return null;
  }

  public synchronized void setValueWrapper(@NotNull IValueProxy value, @NotNull ValueWrapperFactory factory) {
    DebugSession session = getSession(value);
    Map<Long, String> objectIdToFactory = MapSequence.fromMap(myObjectIdToFactory).get(session);
    if (objectIdToFactory == null) {
      objectIdToFactory = MapSequence.fromMap(new HashMap<Long, String>());
      MapSequence.fromMap(myObjectIdToFactory).put(session, objectIdToFactory);
    }
    MapSequence.fromMap(objectIdToFactory).put(getValueId(value), factory.getClass().getName());
  }

  public static CustomViewersManagerImpl getInstanceImpl() {
    return (CustomViewersManagerImpl) CustomViewersManager.getInstance();
  }

  private long getValueId(@NotNull IValueProxy originalValue) {
    return ((ObjectReference) originalValue.getJDIValue()).uniqueID();
  }

  private DebugSession getSession(@NotNull IValueProxy value) {
    // this is just wrong 
    for (Project project : ProjectManager.getInstance().getOpenProjects()) {
      for (AbstractDebugSession session : SetSequence.fromSet(DebugSessionManagerComponent.getInstance(project).getDebugSessions())) {
        if (session instanceof DebugSession) {
          if (((DebugSession) session).getEventsProcessor().getVirtualMachine() == value.getJDIValue().virtualMachine()) {
            return (DebugSession) session;
          }
        }
      }
    }
    return null;
  }
}
