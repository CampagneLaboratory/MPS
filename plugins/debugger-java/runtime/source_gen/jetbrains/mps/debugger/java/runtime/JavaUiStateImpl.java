package jetbrains.mps.debugger.java.runtime;

/*Generated by MPS */

import jetbrains.mps.debug.runtime.JavaUiState;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.util.CollectionUtil;
import java.util.Collections;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaThread;

public abstract class JavaUiStateImpl extends JavaUiState {
  protected final DebugSession myDebugSession;

  public JavaUiStateImpl(@NotNull DebugSession session) {
    super(session);
    myDebugSession = session;
  }

  public abstract SuspendContext getContext();

  public abstract boolean isPausedOnBreakpoint();

  @NotNull
  /*package*/ PausedJavaUiState paused(@NotNull SuspendContext context) {
    //  changes state on pause/resume 
    //  we select new context even if we are already on some other context 
    //  user probably wants to know about new paused contexts 
    return new PausedJavaUiState(context, myDebugSession);
  }

  @NotNull
  /*package*/ JavaUiStateImpl resumed(SuspendContext context) {
    if (context != getContext()) {
      return this;
    }
    SuspendContext newContext = null;
    List<SuspendContext> allPausedContexts = getAllPausedContexts();
    if (!(allPausedContexts.isEmpty())) {
      newContext = allPausedContexts.get(0);
    }
    if (newContext == null) {
      return new RunningJavaUiState(myDebugSession);
    }
    return new PausedJavaUiState(newContext, myDebugSession);
  }

  private List<SuspendContext> getAllPausedContexts() {
    SuspendManager suspendManager = getEventsProcessor().getSuspendManager();
    SuspendContext context = suspendManager.getPausedByUserContext();
    if (context != null) {
      return suspendManager.getPausedContexts();
    }
    return CollectionUtil.union(suspendManager.getPausedContexts(), Collections.singletonList(context));
  }

  protected SuspendContext findContext(@NotNull JavaUiStateImpl previousState) {
    SuspendContext newContext = previousState.getContext();
    if (newContext == null) {
      return null;
    }
    JavaThread thread = getThread();
    if (thread == null) {
      return null;
    }
    if (!(newContext.suspends(thread.getThread()))) {
      newContext = null;
      for (SuspendContext context : getAllPausedContexts()) {
        if (context.suspends(thread.getThread())) {
          newContext = context;
          break;
        }
      }
    }
    return newContext;
  }

  protected DebugVMEventsProcessor getEventsProcessor() {
    return myDebugSession.getEventsProcessor();
  }
}
