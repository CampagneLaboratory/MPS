package jetbrains.mps.debugger.java.classloading;

/*Generated by MPS */

import jetbrains.mps.runtime.RBundle;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.runtime.BundleClassLoader;
import com.intellij.ide.plugins.IdeaPluginDescriptor;
import java.util.List;
import java.io.File;
import com.intellij.ide.plugins.IdeaPluginDescriptorImpl;
import jetbrains.mps.reloading.CompositeClassPathItem;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.reloading.ClassPathFactory;
import java.io.IOException;
import jetbrains.mps.runtime.BytecodeLocator;
import java.net.URL;

public class IdeaPluginBundle extends RBundle<ModuleReference> {
  private BundleClassLoader myClassLoader;
  private final IdeaPluginDescriptor myPluginDescriptor;

  public IdeaPluginBundle(IdeaPluginDescriptor pluginDescriptor) {
    super(new ModuleReference("$idea.plugin" + pluginDescriptor.getPluginId().getIdString()), new IdeaPluginBundle.EmptyByteCodeLocator());
    myPluginDescriptor = pluginDescriptor;
  }

  @Override
  protected void reload() {
    if (myClassLoader != null) {
      myClassLoader.dispose();
    }
    myClassLoader = new BundleClassLoader<ModuleReference>(this, myPluginDescriptor.getPluginClassLoader());
  }

  @Override
  protected boolean hasClass(String string) {
    List<File> classPath = ((IdeaPluginDescriptorImpl) myPluginDescriptor).getClassPath();
    CompositeClassPathItem item = new CompositeClassPathItem();
    for (File file : ListSequence.fromList(classPath)) {
      try {
        item.add(ClassPathFactory.getInstance().createFromPath(file.getAbsolutePath(), getId().getModuleFqName()));
      } catch (IOException e) {
        // ignore 
      }
    }
    return item.getClass(string) != null;
  }

  @Override
  public BundleClassLoader getClassLoader() {
    return myClassLoader;
  }

  public IdeaPluginDescriptor getPluginDescriptor() {
    return myPluginDescriptor;
  }

  public static class EmptyByteCodeLocator implements BytecodeLocator {
    public EmptyByteCodeLocator() {
    }

    public URL findResource(String string) {
      return null;
    }

    public byte[] find(String string) {
      return null;
    }

    public String findLibrary(String name) {
      return null;
    }
  }
}
