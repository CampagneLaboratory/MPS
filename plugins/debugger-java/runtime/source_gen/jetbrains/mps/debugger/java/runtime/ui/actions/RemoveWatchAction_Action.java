package jetbrains.mps.debugger.java.runtime.ui.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.util.IconUtil;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.debugger.java.runtime.ui.evaluation.EvaluationUi;
import jetbrains.mps.debugger.java.runtime.evaluation.model.AbstractEvaluationModel;
import jetbrains.mps.debug.api.evaluation.IEvaluationProvider;
import jetbrains.mps.debugger.api.ui.DebugActionsUtil;
import jetbrains.mps.debugger.java.runtime.evaluation.EvaluationProvider;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class RemoveWatchAction_Action extends BaseAction {
  private static final Icon ICON = IconUtil.getIcon("remove.png");

  public RemoveWatchAction_Action() {
    super("Remove Watch", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      event.getPresentation().setEnabled(EvaluationUi.EVALUATION_MODEL.getData(event.getDataContext()) != null);
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "RemoveWatchAction", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      AbstractEvaluationModel model = EvaluationUi.EVALUATION_MODEL.getData(event.getDataContext());
      IEvaluationProvider evaluationProvider = DebugActionsUtil.getEvaluationProvider(event);
      if (evaluationProvider != null) {
        ((EvaluationProvider) evaluationProvider).removeWatch(model);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "RemoveWatchAction", t);
      }
    }
  }

  protected static Log log = LogFactory.getLog(RemoveWatchAction_Action.class);
}
