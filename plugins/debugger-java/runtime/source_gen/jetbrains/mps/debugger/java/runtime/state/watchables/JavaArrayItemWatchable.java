package jetbrains.mps.debugger.java.runtime.state.watchables;

/*Generated by MPS */

import jetbrains.mps.debugger.java.api.state.watchables.JavaWatchable;
import jetbrains.mps.debug.api.programState.IWatchable;
import com.sun.jdi.ArrayReference;
import jetbrains.mps.debugger.java.api.state.proxy.JavaValue;
import com.sun.jdi.ThreadReference;
import jetbrains.mps.debugger.java.api.state.proxy.ValueUtil;
import jetbrains.mps.debug.api.programState.IValue;
import javax.swing.Icon;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.debug.api.programState.WatchablesCategory;

public class JavaArrayItemWatchable extends JavaWatchable implements IWatchable {
  private final ArrayReference myArray;
  private final int myIndex;
  private final JavaValue myValue;

  public JavaArrayItemWatchable(ArrayReference arrayReference, int index, String classFqName, ThreadReference threadReference) {
    super(classFqName, threadReference);
    myArray = arrayReference;
    myIndex = index;
    myValue = ValueUtil.getInstance().fromJDI(myArray.getValue(myIndex), myClassFQName, myThreadReference);
  }

  public ArrayReference getArray() {
    return myArray;
  }

  @Override
  public String getName() {
    return "[" + myIndex + "]";
  }

  @Override
  public IValue getValue() {
    return myValue;
  }

  @Override
  public Icon getPresentationIcon() {
    return myValue.getPresentationIcon();
  }

  @Override
  public SNode getNode() {
    return null;
  }

  @Override
  public WatchablesCategory getCategory() {
    return WatchablesCategory.NONE;
  }
}
