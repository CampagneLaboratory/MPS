package jetbrains.mps.debugger.java.runtime.state.watchables;

/*Generated by MPS */

import jetbrains.mps.debugger.java.api.state.watchables.JavaWatchable;
import com.sun.jdi.Field;
import jetbrains.mps.debugger.java.api.state.proxy.JavaValue;
import com.sun.jdi.Value;
import com.sun.jdi.ThreadReference;
import jetbrains.mps.debugger.java.api.state.proxy.ValueUtil;
import jetbrains.mps.debug.api.programState.WatchablesCategory;
import jetbrains.mps.debugger.java.api.state.watchables.JavaWatchablesCategory;
import jetbrains.mps.debug.api.programState.IValue;
import jetbrains.mps.debugger.java.runtime.state.values.FieldWatchpointValue;
import javax.swing.Icon;
import jetbrains.mps.debugger.java.api.ui.Icons;
import jetbrains.mps.smodel.SNode;

/*package*/ class JavaWatchpointWatchable extends JavaWatchable {
  private final Field myField;
  private final JavaValue myCurrentValue;
  private final JavaValue myNewValue;
  private final boolean myAccess;

  public JavaWatchpointWatchable(Field field, Value currentValue, Value newValue, String classFqName, ThreadReference threadReference) {
    super(classFqName, threadReference);
    myField = field;
    myCurrentValue = ValueUtil.getInstance().fromJDI(currentValue, myClassFQName, threadReference);
    myNewValue = ValueUtil.getInstance().fromJDI(newValue, myClassFQName, threadReference);
    myAccess = false;
  }

  public JavaWatchpointWatchable(Field field, Value currentValue, String classFqName, ThreadReference threadReference) {
    super(classFqName, threadReference);
    myField = field;
    myCurrentValue = ValueUtil.getInstance().fromJDI(currentValue, myClassFQName, threadReference);
    myNewValue = null;
    myAccess = true;
  }

  @Override
  public String getName() {
    return "field watchpoint";
  }

  @Override
  public WatchablesCategory getCategory() {
    return JavaWatchablesCategory.FIELD_WATCHPOINT;
  }

  @Override
  public IValue getValue() {
    return new FieldWatchpointValue(myField, myAccess, myCurrentValue, myNewValue, myClassFQName, myThreadReference);
  }

  @Override
  public Icon getPresentationIcon() {
    return Icons.VARIABLE_OBJECT;
  }

  @Override
  public SNode getNode() {
    return null;
  }
}
