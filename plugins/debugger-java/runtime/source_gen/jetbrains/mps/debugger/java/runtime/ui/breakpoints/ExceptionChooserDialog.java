package jetbrains.mps.debugger.java.runtime.ui.breakpoints;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.openapi.project.Project;
import java.awt.HeadlessException;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.generator.JavaModelUtil_new;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;

public class ExceptionChooserDialog extends StubsClassChooserDialog {
  private final SNode myThrowableClassifier;
  public ExceptionChooserDialog(Project project, String title) throws HeadlessException {
    super(project, title);
    final Wrappers._T<SNode> node = new Wrappers._T<SNode>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        node.value = JavaModelUtil_new.findClassifier(Throwable.class.getPackage().getName(), Throwable.class.getSimpleName());
      }
    });
    myThrowableClassifier = node.value;
  }
  @Override
  protected boolean isValid(SNode node) {
    SNode base = node;
    while (base != null && SNodeOperations.isInstanceOf(base, "jetbrains.mps.baseLanguage.structure.ClassConcept") && !((eq_lt001m_a0a0a1a2(base, myThrowableClassifier)))) {
      base = SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(base, "jetbrains.mps.baseLanguage.structure.ClassConcept"), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, 1165602531693l, "superclass")), MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier"));
    }
    return (base != null) && SNodeOperations.isInstanceOf(base, "jetbrains.mps.baseLanguage.structure.ClassConcept");
  }
  @Nullable
  @NonNls
  @Override
  protected String getDimensionServiceKey() {
    return ExceptionChooserDialog.class.getName();
  }
  private static boolean eq_lt001m_a0a0a1a2(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
