package jetbrains.mps.debugger.java.runtime.evaluation;

/*Generated by MPS */

import jetbrains.mps.debug.api.evaluation.IEvaluationProvider;
import jetbrains.mps.debugger.java.runtime.state.DebugSession;
import jetbrains.mps.debugger.java.runtime.evaluation.model.EvaluationAuxModule;
import java.util.List;
import jetbrains.mps.debugger.java.runtime.evaluation.model.AbstractEvaluationModel;
import java.util.ArrayList;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.debug.api.DebugSessionManagerComponent;
import jetbrains.mps.debug.api.AbstractDebugSession;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.debugger.java.api.state.JavaUiState;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.debugger.java.runtime.ui.evaluation.EvaluationDialog;
import jetbrains.mps.debugger.java.runtime.ui.evaluation.EditWatchDialog;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JComponent;
import jetbrains.mps.debugger.java.runtime.ui.evaluation.WatchesPanel;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.debugger.java.runtime.evaluation.model.LowLevelEvaluationModel;

public class EvaluationProvider implements IEvaluationProvider {
  private final DebugSession myDebugSession;
  private EvaluationAuxModule myAuxModule;
  private final List<AbstractEvaluationModel> myWatches = new ArrayList<AbstractEvaluationModel>();
  private final List<EvaluationProvider.IWatchListener> myWatchListeners = new ArrayList<EvaluationProvider.IWatchListener>();

  public EvaluationProvider(@NotNull DebugSession debugSession) {
    myDebugSession = debugSession;
    DebugSessionManagerComponent.getInstance(myDebugSession.getProject()).addDebugSessionListener(new DebugSessionManagerComponent.DebugSessionAdapter() {
      @Override
      public void registered(AbstractDebugSession session) {
        init();
      }

      @Override
      public void detached(AbstractDebugSession session) {
        dispose();
        DebugSessionManagerComponent.getInstance(myDebugSession.getProject()).removeDebugSessionListener(this);
      }
    });
  }

  private void init() {
    final Wrappers._T<EvaluationAuxModule> module = new Wrappers._T<EvaluationAuxModule>();
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        module.value = new EvaluationAuxModule(myDebugSession.getProject());
        MPSModuleRepository.getInstance().registerModule(module.value, myDebugSession.getProject().getComponent(MPSProject.class));
      }
    });

    synchronized (this) {
      myAuxModule = module.value;
    }
  }

  private synchronized void dispose() {
    final EvaluationAuxModule module = myAuxModule;
    myAuxModule = null;
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        MPSModuleRepository.getInstance().unregisterModule(module, getDebugSession().getProject().getComponent(MPSProject.class));
      }
    });
  }

  @Override
  public boolean canEvaluate() {
    return myDebugSession.isStepEnabled();
  }

  @Override
  public void showEvaluationDialog(IOperationContext context) {
    showEvaluationDialog(context, ListSequence.fromList(new ArrayList<SNodeReference>()));
  }

  @Override
  public void showEvaluationDialog(final IOperationContext context, final List<SNodeReference> selectedNodes) {
    final JavaUiState state = myDebugSession.getUiState();
    myDebugSession.getEventsProcessor().scheduleEvaluation(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        if (state.isPausedOnBreakpoint()) {
          final AbstractEvaluationModel model = createLowLevelEvaluationModel(AbstractEvaluationModel.IS_DEVELOPER_MODE, selectedNodes);
          if (model == null) {
            return;
          }
          ApplicationManager.getApplication().invokeLater(new Runnable() {
            @Override
            public void run() {
              EvaluationDialog evaluationDialog = new EvaluationDialog(context, EvaluationProvider.this, model);
              evaluationDialog.show();
            }
          });
        }
      }
    }, state.getThread().getThread());
  }

  public void showEditWatchDialog(IOperationContext context, final AbstractEvaluationModel model) {
    ApplicationManager.getApplication().assertIsDispatchThread();
    final EditWatchDialog editWatchDialog = new EditWatchDialog(context, this, model);
    editWatchDialog.getWindow().addWindowListener(new WindowAdapter() {
      @Override
      public void windowClosed(WindowEvent e) {
        fireWatchUpdated(model);
      }
    });
    editWatchDialog.show();
  }

  @Override
  public JComponent createWatchesPanel() {
    return new WatchesPanel(this);
  }

  public void addWatch(final AbstractEvaluationModel evaluationModel) {
    myDebugSession.getEventsProcessor().schedule(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        AbstractEvaluationModel copy = evaluationModel.copy(true);
        synchronized (myWatches) {
          myWatches.add(copy);
        }
        fireWatchAdded(copy);
      }
    });
  }

  public void createWatch() {
    myDebugSession.getEventsProcessor().schedule(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        final AbstractEvaluationModel model = createLowLevelEvaluationModel(true);
        if (model == null) {
          return;
        }
        ApplicationManager.getApplication().invokeLater(new Runnable() {
          @Override
          public void run() {
            EditWatchDialog editWatchDialog = new EditWatchDialog(new ProjectOperationContext(ProjectHelper.toMPSProject(myDebugSession.getProject())), EvaluationProvider.this, model, new _FunctionTypes._void_P0_E0() {
              public void invoke() {
                addWatch(model);
              }
            });
            editWatchDialog.show();
          }
        });
      }
    });
  }

  public void removeWatch(AbstractEvaluationModel model) {
    synchronized (myWatches) {
      myWatches.remove(model);
    }
    fireWatchRemoved(model);
  }

  public DebugSession getDebugSession() {
    return myDebugSession;
  }

  @Nullable
  private AbstractEvaluationModel createLowLevelEvaluationModel(boolean isShowContext) {
    EvaluationAuxModule module = null;
    synchronized (this) {
      if (myAuxModule == null) {
        return null;
      }
      module = myAuxModule;
    }
    return new LowLevelEvaluationModel(myDebugSession.getProject(), myDebugSession, module, isShowContext, ListSequence.fromList(new ArrayList<SNodeReference>()));
  }

  @Nullable
  private AbstractEvaluationModel createLowLevelEvaluationModel(boolean isShowContext, List<SNodeReference> selectedNodes) {
    EvaluationAuxModule module = null;
    synchronized (this) {
      if (myAuxModule == null) {
        return null;
      }
      module = myAuxModule;
    }
    return new LowLevelEvaluationModel(myDebugSession.getProject(), myDebugSession, module, isShowContext, selectedNodes);
  }

  public List<AbstractEvaluationModel> getWatches() {
    List<AbstractEvaluationModel> watchesCopy = new ArrayList<AbstractEvaluationModel>();
    synchronized (myWatches) {
      watchesCopy.addAll(myWatches);
    }
    return watchesCopy;
  }

  private List<EvaluationProvider.IWatchListener> getListeners() {
    List<EvaluationProvider.IWatchListener> listeners = new ArrayList<EvaluationProvider.IWatchListener>();
    synchronized (myWatchListeners) {
      listeners.addAll(myWatchListeners);
    }
    return listeners;
  }

  private void fireWatchAdded(AbstractEvaluationModel model) {
    for (EvaluationProvider.IWatchListener listener : getListeners()) {
      listener.watchAdded(model);
    }
  }

  private void fireWatchUpdated(AbstractEvaluationModel model) {
    for (EvaluationProvider.IWatchListener listener : getListeners()) {
      listener.watchUpdated(model);
    }
  }

  private void fireWatchRemoved(AbstractEvaluationModel model) {
    for (EvaluationProvider.IWatchListener listener : getListeners()) {
      listener.watchRemoved(model);
    }
  }

  public void addWatchListener(@NotNull EvaluationProvider.IWatchListener listener) {
    synchronized (myWatchListeners) {
      myWatchListeners.add(listener);
    }
  }

  public void removeWatchListener(@NotNull EvaluationProvider.IWatchListener listener) {
    synchronized (myWatchListeners) {
      myWatchListeners.remove(listener);
    }
  }

  public static interface IWatchListener {
    public void watchAdded(AbstractEvaluationModel model);
    public void watchUpdated(AbstractEvaluationModel model);
    public void watchRemoved(AbstractEvaluationModel model);
  }

  public static class WatchAdapter implements EvaluationProvider.IWatchListener {
    public WatchAdapter() {
    }

    @Override
    public void watchAdded(AbstractEvaluationModel model) {
    }

    @Override
    public void watchUpdated(AbstractEvaluationModel model) {
    }

    @Override
    public void watchRemoved(AbstractEvaluationModel model) {
    }
  }
}
