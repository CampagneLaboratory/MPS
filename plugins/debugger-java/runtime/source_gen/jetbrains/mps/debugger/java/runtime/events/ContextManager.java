package jetbrains.mps.debugger.java.runtime.events;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Set;
import com.sun.jdi.ThreadReference;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.annotations.NotNull;

public class ContextManager {
  private final List<EventContext> mySuspendedContexts = ListSequence.fromList(new ArrayList<EventContext>());
  private Set<ThreadReference> myEvaluatedThreads = SetSequence.fromSet(new HashSet<ThreadReference>());

  public ContextManager() {
  }

  /*package*/ synchronized void votePause(EventContext context) {
    context.vote();
    ListSequence.fromList(mySuspendedContexts).addElement(context);
  }

  /*package*/ synchronized void voteResume(EventContext context) {
    context.vote();
    if (context.isProcessed() && !(ListSequence.fromList(mySuspendedContexts).contains(context))) {
      context.resume();
    }
  }

  /*package*/ synchronized void resume(EventContext context) {
    assert context.isProcessed() && ListSequence.fromList(mySuspendedContexts).contains(context);
    ListSequence.fromList(mySuspendedContexts).removeElement(context);
    context.resume();
  }

  public synchronized void startEvaluation(@NotNull ThreadReference threadReference) {
    SetSequence.fromSet(myEvaluatedThreads).addElement(threadReference);
  }

  public synchronized void finishEvaluation(@NotNull ThreadReference threadReference) {
    SetSequence.fromSet(myEvaluatedThreads).removeElement(threadReference);
  }

  public synchronized boolean isEvaluated(@NotNull ThreadReference threadReference) {
    return SetSequence.fromSet(myEvaluatedThreads).contains(threadReference);
  }
}
