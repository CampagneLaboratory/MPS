package jetbrains.mps.debugger.java.runtime.concurrent;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.annotations.NotNull;

public class CommandDecorator extends AbstractCommand implements ICommand {
  protected static Log log = LogFactory.getLog(CommandDecorator.class);

  private final ICommand myCommand;
  private final _FunctionTypes._void_P0_E0 myBefore;
  private final _FunctionTypes._void_P0_E0 myAfter;

  public CommandDecorator(@NotNull ICommand command, @NotNull _FunctionTypes._void_P0_E0 before, @NotNull _FunctionTypes._void_P0_E0 after) {
    super(command.getPriority());
    myCommand = command;
    myBefore = before;
    myAfter = after;
  }

  public CommandDecorator(@NotNull ICommand command, @NotNull _FunctionTypes._void_P0_E0 after) {
    this(command, new _FunctionTypes._void_P0_E0() {
      public void invoke() {
      }
    }, after);
  }

  public int getPriority() {
    return myCommand.getPriority();
  }

  public void run() {
    try {
      myBefore.invoke();
      myCommand.run();
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("", t);
      }
    } finally {
      myAfter.invoke();
    }
  }
}
