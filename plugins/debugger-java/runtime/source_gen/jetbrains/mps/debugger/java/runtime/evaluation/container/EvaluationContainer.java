package jetbrains.mps.debugger.java.runtime.evaluation.container;

/*Generated by MPS */

import com.intellij.openapi.project.Project;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.debugger.java.runtime.state.DebugSession;
import jetbrains.mps.debugger.java.api.state.JavaUiState;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.ProjectModels;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.project.ModuleContext;
import jetbrains.mps.ide.project.ProjectHelper;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.debugger.java.api.evaluation.EvaluationException;
import jetbrains.mps.project.ClassLoadingModule;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.debugger.java.api.evaluation.Evaluator;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SNodeId;

public class EvaluationContainer implements IEvaluationContainer {
  protected final Project myProject;
  protected final SModuleReference myContainerModule;
  protected volatile SModelReference myContainerModel;
  protected volatile SNodeReference myNode;
  protected final MPSModuleRepository myDebuggerRepository = MPSModuleRepository.getInstance();
  private volatile IOperationContext myContext;

  protected final DebugSession myDebugSession;
  protected volatile JavaUiState myUiState;

  private final List<_FunctionTypes._void_P1_E0<? super SNode>> myGenerationListeners = ListSequence.fromList(new ArrayList<_FunctionTypes._void_P1_E0<? super SNode>>());


  public EvaluationContainer(Project project, DebugSession session, SModuleReference containerModule, final List<SNodeReference> nodesToImport) {
    myProject = project;
    myDebugSession = session;
    myContainerModule = containerModule;
    myUiState = myDebugSession.getUiState();
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        SModel descriptor = ProjectModels.createDescriptorFor(true);
        SModule containerModule = myContainerModule.resolve(myDebuggerRepository);
        SModelRepository.getInstance().registerModelDescriptor(descriptor, containerModule);
        myContainerModel = descriptor.getReference();
        myContext = new ModuleContext(containerModule, ProjectHelper.toMPSProject(myProject));
      }
    });
    ApplicationManager.getApplication().invokeLater(new Runnable() {
      public void run() {
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            setUpNode(nodesToImport);
          }
        });
      }
    });
  }



  @Override
  public Class generateClass() throws EvaluationException {
    return GeneratorUtil.generateAndLoadEvaluatorClass(myProject, SModelRepository.getInstance().getModelDescriptor(myContainerModel), Properties.EVALUATOR_NAME, getContext(), Properties.IS_DEVELOPER_MODE, new TransformingGenerationHandler(false, true, myGenerationListeners), ((ClassLoadingModule) MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("cf8c9de5-1b4a-4dc8-8e6d-847159af31dd"))).getClassLoader());
  }

  @Override
  public void addGenerationListener(_FunctionTypes._void_P1_E0<? super SNode> listener) {
    ListSequence.fromList(myGenerationListeners).addElement(listener);
  }

  @Override
  public Evaluator createEvaluatorInstance(Class clazz) throws EvaluationException {
    return GeneratorUtil.createInstance(clazz, new Class[]{JavaUiState.class}, new Object[]{myUiState});
  }



  @Override
  public IEvaluationContainer copy(boolean isWatch) {
    final SNodeReference reference = myNode;
    return new EvaluationContainer(myProject, myDebugSession, myContainerModule, ListSequence.fromList(new ArrayList<SNodeReference>())) {
      @Override
      protected SNode createEvaluatorNode() {
        return (SNode) CopyUtil.copyAndPreserveId(reference.resolve(myDebuggerRepository), true);
      }
    };
  }



  @Override
  public String getPresentation() {
    return ModelAccess.instance().runReadAction(new Computable<String>() {
      @Override
      public String compute() {
        return PresentationUtil.getPresentation(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(getNode(), "jetbrains.mps.debugger.java.evaluation.structure.IEvaluatorConcept"), "virtual_getCode_317191294093624551", new Object[]{}));
      }
    });
  }

  @Override
  public IOperationContext getContext() {
    return myContext;
  }

  @Override
  public SNode getNode() {
    if (myNode == null) {
      return null;
    }
    return myNode.resolve(myDebuggerRepository);
  }



  @Override
  public void updateState() {
    myUiState = myDebugSession.getUiState();
  }



  protected void setUpNode(List<SNodeReference> nodesToImport) {
    // wanted to use resolve method here, but it was not implemented:( 
    SModel containerModel =  myContainerModel.resolve(MPSModuleRepository.getInstance());

    SNode evaluatorNode = createEvaluatorNode();
    containerModel.addRootNode(evaluatorNode);
    myNode = evaluatorNode.getReference();

    // todo: variables 
    new EvaluationContainer.MyBaseLanguagesImportHelper().tryToImport(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), evaluatorNode, "virtual_getCode_317191294093624551", new Object[]{}), nodesToImport);

    SModelOperations.validateLanguagesAndImports(containerModel, true, true);
    ((SModelInternal) containerModel).addLanguage(ModuleRepositoryFacade.getInstance().getModule("jetbrains.mps.debugger.java.evaluation", Language.class).getModuleReference());
    ((SModelInternal) containerModel).addLanguage(ModuleRepositoryFacade.getInstance().getModule("jetbrains.mps.debugger.java.privateMembers", Language.class).getModuleReference());
  }

  protected SNode createEvaluatorNode() {
    SNode evaluator = SNodeFactoryOperations.createNewNode("jetbrains.mps.debugger.java.evaluation.structure.Evaluator", null);
    AttributeOperations.createAndSetAttrbiute(SLinkOperations.getTarget(evaluator, "code", true), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.debugger.java.evaluation.structure.ToEvaluateAnnotation")), "jetbrains.mps.debugger.java.evaluation.structure.ToEvaluateAnnotation");
    return evaluator;
  }

  private class MyBaseLanguagesImportHelper extends BaseLanguagesImportHelper {
    @Override
    public SNode findVariable(SReference variableReference) {
      return null;
    }

    @Override
    public SNode createVariableReference(SNode variable) {
      return createInternalVariableReference_jbng3m_a0a1cb(variable.getName());
    }
  }

  private static SNode createInternalVariableReference_jbng3m_a0a1cb(Object p0) {
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference", null, GlobalScope.getInstance(), false);
    {
      n1.setProperty("name", (String) p0);
      SNode n2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
      n2.setReference("classifier", jetbrains.mps.smodel.SReference.create("classifier", n2, jetbrains.mps.smodel.SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), SNodeId.fromString("~Object")));
      n1.addChild("type", n2);
    }
    return n1;
  }
}
