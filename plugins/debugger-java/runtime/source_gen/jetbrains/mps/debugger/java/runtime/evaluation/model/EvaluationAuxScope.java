package jetbrains.mps.debugger.java.runtime.evaluation.model;

/*Generated by MPS */

import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.project.IModule;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.Language;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.project.Solution;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.LanguageID;
import jetbrains.mps.smodel.SModelFqName;

/*package*/ class EvaluationAuxScope extends GlobalScope {
  private final EvaluationAuxModule myModule;

  public EvaluationAuxScope(EvaluationAuxModule module) {
    super(MPSModuleRepository.getInstance(), SModelRepository.getInstance());
    myModule = module;
  }

  @Override
  public Iterable<IModule> getVisibleModules() {
    List<IModule> result = ListSequence.fromList(new ArrayList<IModule>());
    ListSequence.fromList(result).addSequence(ListSequence.fromList(getVisibleLanguages()));
    ListSequence.fromList(result).addElement(myModule);
    return result;
  }

  @Override
  public List<Language> getVisibleLanguages() {
    Set<Language> result = SetSequence.fromSet(new HashSet<Language>());
    IModule contextModule = myModule.getContextModule();
    if (contextModule != null) {
      SetSequence.fromSet(result).addSequence(Sequence.fromIterable(contextModule.getScope().getVisibleLanguages()));
    }
    for (ModuleReference ref : SetSequence.fromSet(myModule.getUsedLanguagesReferences())) {
      Language language = ModuleRepositoryFacade.getInstance().getModule(ref, Language.class);
      if (!(SetSequence.fromSet(result).contains(language))) {
        SetSequence.fromSet(result).addElement(language);
      }
    }
    return SetSequence.fromSet(result).toListSequence();
  }

  @Override
  public List<Solution> getVisibleSolutions() {
    return ListSequence.fromList(new ArrayList<Solution>());
  }

  @Override
  public List<DevKit> getVisibleDevkits() {
    return ListSequence.fromList(new ArrayList<DevKit>());
  }

  @Override
  public SModelDescriptor getModelDescriptor(@NotNull SModelReference reference) {
    SModelDescriptor descriptor = null;

    IModule contextModule = myModule.getContextModule();
    if (contextModule != null) {
      descriptor = contextModule.getScope().getModelDescriptor(reference);
    }
    if (descriptor == null) {
      String stereotype = reference.getStereotype();
      if (eq_otn35i_a0b0e0e(stereotype, SModelStereotype.getStubStereotypeForId(LanguageID.JAVA))) {
        descriptor = myModelRepository.getModelDescriptor(new SModelFqName(myModule.getModuleFqName(), reference.getLongName(), SModelStereotype.getStubStereotypeForId(LanguageID.JAVA)));
      }
    }
    if (descriptor != null) {
      return descriptor;
    }

    return super.getModelDescriptor(reference);
  }

  private static boolean eq_otn35i_a0b0e0e(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
