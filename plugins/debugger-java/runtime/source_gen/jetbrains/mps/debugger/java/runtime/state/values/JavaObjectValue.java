package jetbrains.mps.debugger.java.runtime.state.values;

/*Generated by MPS */

import jetbrains.mps.debugger.java.api.state.proxy.JavaValue;
import com.sun.jdi.Value;
import com.sun.jdi.ThreadReference;
import java.util.List;
import jetbrains.mps.debug.api.programState.IWatchable;
import java.util.ArrayList;
import com.sun.jdi.ObjectReference;
import com.sun.jdi.Field;
import java.util.Collections;
import java.util.Comparator;
import jetbrains.mps.debugger.java.api.state.watchables.JavaField;
import javax.swing.Icon;
import jetbrains.mps.debugger.java.api.ui.Icons;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.debugger.java.api.evaluation.EvaluationUtils;
import com.sun.jdi.ClassType;
import jetbrains.mps.debugger.java.api.state.proxy.ValueUtil;
import jetbrains.mps.debugger.java.api.evaluation.InvalidEvaluatedExpressionException;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.debugger.java.api.evaluation.proxies.IObjectValueProxy;
import jetbrains.mps.debugger.java.api.evaluation.proxies.MirrorUtil;
import jetbrains.mps.debugger.java.api.evaluation.EvaluationException;
import jetbrains.mps.util.NameUtil;

/*package*/ class JavaObjectValue extends JavaValue {
  public JavaObjectValue(Value value, String classFQname, ThreadReference threadReference) {
    super(value, classFQname, threadReference);
  }

  @Override
  public List<IWatchable> getSubvalues() {
    List<IWatchable> watchables = new ArrayList<IWatchable>();
    ObjectReference ref = (ObjectReference) myValue;
    if (ref != null) {
      List<Field> fieldList = ref.referenceType().allFields();
      Collections.sort(fieldList, new Comparator<Field>() {
        @Override
        public int compare(Field o1, Field o2) {
          return o1.name().compareTo(o2.name());
        }
      });
      for (Field f : fieldList) {
        watchables.add(new JavaField(f, ref, myClassFQName, myThreadReference));
      }
    }
    return watchables;
  }

  @Override
  public Icon getPresentationIcon() {
    return Icons.VARIABLE_OBJECT;
  }

  @Override
  public boolean isStructure() {
    return true;
  }

  @Override
  public String getValuePresentation() {
    return (("{" + myValue.type().name() + "} ") + myValue.toString());
  }

  @Nullable
  public JavaValue getFieldValue(String fieldName) {
    try {
      ObjectReference ref = (ObjectReference) myValue;
      Field field = EvaluationUtils.getInstance().findField((ClassType) ref.referenceType(), fieldName);
      return ValueUtil.getInstance().fromJDIRaw(ref.getValue(field), myClassFQName, myThreadReference);
    } catch (InvalidEvaluatedExpressionException e) {
      //  we get NPE instead 
      return null;
    }
  }

  public List<JavaValue> getFieldValues() {
    ObjectReference ref = (ObjectReference) myValue;
    List<Field> fieldList = ref.referenceType().fields();
    List<JavaValue> result = new ArrayList<JavaValue>();
    for (Field f : fieldList) {
      result.add(ValueUtil.getInstance().fromJDIRaw(ref.getValue(f), myClassFQName, myThreadReference));
    }
    return result;
  }

  @NotNull
  private IObjectValueProxy createValueProxy() {
    return (IObjectValueProxy) MirrorUtil.getInstance().getValueProxy(myValue);
  }

  @Nullable
  public JavaValue executeMethod(String methodName, String jniSignature, Object... args) {
    try {
      return ValueUtil.getInstance().fromJDIRaw(createValueProxy().invokeMethod(methodName, jniSignature, myThreadReference, args).getJDIValue(), myClassFQName, myThreadReference);
    } catch (EvaluationException e) {
      return null;
    }
  }

  public String getClassFqName() {
    return ((ObjectReference) myValue).referenceType().name();
  }

  public String getClassName() {
    return NameUtil.shortNameFromLongName(getClassFqName());
  }

  public boolean isInstanceOf(String className) {
    try {
      return createValueProxy().isInstanceOf("L" + className + ";");
    } catch (EvaluationException e) {
      return false;
    }
  }
}
