package jetbrains.mps.debugger.java.runtime.state.values;

/*Generated by MPS */

import jetbrains.mps.debugger.java.api.state.proxy.JavaValue;
import com.sun.jdi.Value;
import com.sun.jdi.ThreadReference;
import java.util.List;
import jetbrains.mps.debug.api.programState.IWatchable;
import java.util.ArrayList;
import com.sun.jdi.ObjectReference;
import com.sun.jdi.Field;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.debugger.java.api.state.watchables.JavaField;
import javax.swing.Icon;
import jetbrains.mps.debugger.java.api.ui.Icons;

/*package*/ class JavaObjectValue extends JavaValue {
  public JavaObjectValue(Value value, String classFQname, ThreadReference threadReference) {
    super(value, classFQname, threadReference);
  }

  @Override
  public List<IWatchable> getSubvalues() {
    List<IWatchable> watchables = new ArrayList<IWatchable>();
    ObjectReference ref = (ObjectReference) myValue;
    if (ref != null) {
      List<Field> fieldList = ListSequence.fromList(new ArrayList<Field>());
      ListSequence.fromList(fieldList).addSequence(ListSequence.fromList(ref.referenceType().allFields()));
      for (Field f : ListSequence.fromList(fieldList).where(new IWhereFilter<Field>() {
        public boolean accept(Field it) {
          return !(it.isStatic());
        }
      }).sort(new ISelector<Field, String>() {
        public String select(Field it) {
          return it.name();
        }
      }, true)) {
        watchables.add(new JavaField(f, ref, myClassFQName, myThreadReference));
      }
    }
    return watchables;
  }

  @Override
  public Icon getPresentationIcon() {
    return Icons.VARIABLE_OBJECT;
  }

  @Override
  public boolean isStructure() {
    return true;
  }

  @Override
  public String getValuePresentation() {
    return (("{" + myValue.type().name() + "} ") + myValue.toString());
  }
}
