package jetbrains.mps.debugger.java.runtime.breakpoints;

/*Generated by MPS */

import jetbrains.mps.debug.api.breakpoints.ILocationBreakpoint;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.debug.api.breakpoints.BreakpointLocation;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNodePointer;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.debugger.java.runtime.engine.events.EventsProcessor;
import com.sun.jdi.ReferenceType;
import jetbrains.mps.debugger.java.runtime.engine.RequestManager;
import com.sun.jdi.Field;
import jetbrains.mps.debugger.java.api.evaluation.EvaluationUtils;
import com.sun.jdi.ClassType;
import com.sun.jdi.request.AccessWatchpointRequest;
import com.sun.jdi.request.ModificationWatchpointRequest;
import com.sun.jdi.ClassNotPreparedException;
import com.sun.jdi.ObjectCollectedException;
import com.sun.jdi.InternalException;

public class FieldBreakpoint extends JavaBreakpoint implements ILocationBreakpoint {
  private static final Logger LOG = Logger.getLogger(FieldBreakpoint.class);
  private final BreakpointLocation myLocation;
  private String myFieldName;

  public FieldBreakpoint(@NotNull SNodePointer nodePointer, Project project) {
    super(project);
    myLocation = new BreakpointLocation(nodePointer);
  }

  public FieldBreakpoint(@NotNull SNode node, Project project) {
    this(new SNodePointer(node), project);
  }

  private boolean updateFieldName() {
    if (myFieldName != null) {
      return true;
    }
    myFieldName = myLocation.getTargetCodePosition().getPropertyString();
    return myFieldName != null;
  }

  @NotNull
  @Override
  public BreakpointLocation getLocation() {
    return myLocation;
  }

  @Override
  @Nullable
  protected String getClassNameToPrepare() {
    return myLocation.getTargetUnitName();
  }

  @NotNull
  @Override
  public JavaBreakpointKind getKind() {
    return JavaBreakpointKind.FIELD_BREAKPOINT;
  }

  @Override
  public String getPresentation() {
    return myLocation.getPresentation();
  }

  @Override
  protected void createRequestForPreparedClass(EventsProcessor debugProcess, ReferenceType classType) {
    RequestManager requestManager = debugProcess.getRequestManager();
    if (!(updateFieldName())) {
      return;
    }
    try {
      Field field = EvaluationUtils.getInstance().findField((ClassType) classType, myFieldName);
      AccessWatchpointRequest fieldAccessRequest = requestManager.createFieldAccessRequest(this, field);
      ModificationWatchpointRequest fieldModificationRequest = requestManager.createFieldModificationRequest(this, field);
      requestManager.enableRequest(fieldAccessRequest);
      requestManager.enableRequest(fieldModificationRequest);
    } catch (ClassNotPreparedException ex) {
      LOG.warning("ClassNotPreparedException: " + ex.getMessage());
      //  there's a chance to add a breakpoint when the class is prepared 
    } catch (ObjectCollectedException ex) {
      LOG.warning("ObjectCollectedException: " + ex.getMessage());
    } catch (InternalException ex) {
      LOG.error(ex);
    } catch (Exception ex) {
      LOG.error(ex);
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    return eq_he6f5h_a0d0g(myLocation, ((FieldBreakpoint) o).myLocation);
  }

  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + ((myLocation != null ?
      ((Object) myLocation).hashCode() :
      0
    ));
    return result;
  }

  private static boolean eq_he6f5h_a0d0g(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
