package jetbrains.mps.debugger.java.runtime.breakpoints;

/*Generated by MPS */

import jetbrains.mps.debug.api.breakpoints.ILocationBreakpoint;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.debug.api.breakpoints.BreakpointLocation;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNodePointer;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.debugger.java.runtime.engine.events.EventsProcessor;
import com.sun.jdi.ReferenceType;
import jetbrains.mps.debugger.java.runtime.engine.RequestManager;
import java.util.List;
import com.sun.jdi.Location;
import com.sun.jdi.request.BreakpointRequest;
import com.sun.jdi.ClassNotPreparedException;
import com.sun.jdi.ObjectCollectedException;
import com.sun.jdi.InvalidLineNumberException;
import com.sun.jdi.InternalException;

public class LineBreakpoint extends JavaBreakpoint implements ILocationBreakpoint {
  private static final Logger LOG = Logger.getLogger(LineBreakpoint.class);

  protected final BreakpointLocation myLocation;

  public LineBreakpoint(@NotNull SNodePointer nodePointer, Project project) {
    super(project);
    myLocation = new BreakpointLocation(nodePointer);
  }

  public LineBreakpoint(@NotNull SNode node, Project project) {
    this(new SNodePointer(node), project);
  }

  @Override
  protected void createRequestForPreparedClass(EventsProcessor debugProcess, final ReferenceType classType) {
    RequestManager requestManager = debugProcess.getRequestManager();
    try {
      int lineIndex = myLocation.getLineIndexInFile();
      List<Location> locs = classType.locationsOfLine(lineIndex);
      if (locs.size() > 0) {
        for (final Location location : locs) {
          BreakpointRequest request = requestManager.createBreakpointRequest(this, location);
          requestManager.enableRequest(request);
        }
      } else {
        //  there's no executable code in this class 
        requestManager.setInvalid(this, "no executable code found");
        String message = "No locations of type " + classType.name() + " found at line " + myLocation.getLineIndexInFile();
        LOG.warning(message);
      }
    } catch (ClassNotPreparedException ex) {
      LOG.warning("ClassNotPreparedException: " + ex.getMessage());
      //  there's a chance to add a breakpoint when the class is prepared 
    } catch (ObjectCollectedException ex) {
      LOG.warning("ObjectCollectedException: " + ex.getMessage());
      //  there's a chance to add a breakpoint when the class is prepared 
    } catch (InvalidLineNumberException ex) {
      requestManager.setInvalid(this, "no executable code found");
      LOG.warning("InvalidLineNumberException: " + ex.getMessage());
    } catch (InternalException ex) {
      LOG.error(ex);
    } catch (Exception ex) {
      LOG.error(ex);
    }
  }

  protected String getClassNameToPrepare() {
    String className = myLocation.getTargetUnitName();
    if (className == null) {
      //  todo when this case does actually happen? 
      String fileName = myLocation.getFileName();
      if (fileName != null && fileName.endsWith(".java")) {
        fileName = fileName.substring(0, fileName.length() - ".java".length());
      }
      className = myLocation.getNodePointer().getModelReference().getLongName() + "." + fileName;
    }
    return className;
  }

  @NotNull
  @Override
  public JavaBreakpointKind getKind() {
    return JavaBreakpointKind.LINE_BREAKPOINT;
  }

  @Override
  public boolean isValid() {
    return myLocation.getTargetCodePosition() != null;
  }

  @Override
  public String getPresentation() {
    return myLocation.getPresentation();
  }

  @NotNull
  @Override
  public BreakpointLocation getLocation() {
    return myLocation;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    return eq_owwtjm_a0d0g(myLocation, ((LineBreakpoint) o).myLocation);
  }

  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + ((myLocation != null ?
      ((Object) myLocation).hashCode() :
      0
    ));
    return result;
  }

  private static boolean eq_owwtjm_a0d0g(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
