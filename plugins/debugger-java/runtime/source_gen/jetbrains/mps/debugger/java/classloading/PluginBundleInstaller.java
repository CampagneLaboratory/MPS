package jetbrains.mps.debugger.java.classloading;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import jetbrains.mps.reloading.ClassLoaderManager;
import jetbrains.mps.ide.MPSCoreComponents;
import com.intellij.ide.plugins.IdeaPluginDescriptor;
import com.intellij.ide.plugins.PluginManager;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.runtime.RBundle;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.reloading.ReloadAdapter;
import java.util.Collection;
import jetbrains.mps.project.IModule;
import jetbrains.mps.library.LibraryInitializer;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class PluginBundleInstaller implements ApplicationComponent {
  private final IdeaPluginBundle myBundle;
  private ClassLoaderManager myClassloaderManager;
  private final PluginBundleInstaller.MyReloadAdapter myReloadAdapter = new PluginBundleInstaller.MyReloadAdapter();

  public PluginBundleInstaller(MPSCoreComponents components) {
    IdeaPluginDescriptor plugin = PluginManager.getPlugin(PluginManager.getPluginByClassName(this.getClass().getName()));
    myBundle = new IdeaPluginBundle(plugin);
  }

  public void initComponent() {
    myClassloaderManager = ClassLoaderManager.getInstance();
    myClassloaderManager.addReloadHandler(myReloadAdapter);
  }

  public void disposeComponent() {
    myClassloaderManager.removeReloadHandler(myReloadAdapter);
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return "PluginBundleInstaller";
  }

  private static RBundle<ModuleReference> check_apszah_a1a3a0a(RBundle<ModuleReference> checkedDotOperand, IdeaPluginBundle myBundle) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.addDependency(myBundle.getId());
    }
    return null;
  }

  public class MyReloadAdapter extends ReloadAdapter {
    public MyReloadAdapter() {
    }

    @Override
    public void onAfterReload() {
      myClassloaderManager.getRuntimeEnvironment().add(myBundle).init(myBundle);

      Collection<IModule> modules = LibraryInitializer.getInstance().getModules(myBundle.getPluginDescriptor().getPath().getAbsolutePath());
      for (IModule module : Sequence.fromIterable(modules)) {
        RBundle<ModuleReference> bundle = myClassloaderManager.getRuntimeEnvironment().get(module.getModuleReference());
        check_apszah_a1a3a0a(bundle, myBundle);
      }
    }
  }
}
