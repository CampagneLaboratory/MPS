package jetbrains.mps.debugger.java.runtime.evaluation.model;

/*Generated by MPS */

import jetbrains.mps.smodel.IScope;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.findUsages.FindUsagesManager;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import java.util.Set;
import java.util.Collections;
import jetbrains.mps.findUsages.SearchType;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

/*package*/ class UnitScope {
  private final IScope myScope;

  public UnitScope(IScope scope) {
    myScope = scope;
  }

  public SNode findUnit(final String unitName) {
    FindUsagesManager manager = FindUsagesManager.getInstance();
    SConcept concept = SConceptRepository.getInstance().getConcept("jetbrains.mps.lang.traceable.structure.UnitConcept");

    Set<SNode> instances = manager.findUsages(Collections.singleton(concept), SearchType.INSTANCES, myScope, new EmptyProgressMonitor());
    return SNodeOperations.cast(SetSequence.fromSet(instances).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(((SNode) it), "jetbrains.mps.baseLanguage.structure.Classifier") && BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(it, "jetbrains.mps.lang.traceable.structure.UnitConcept"), "virtual_getUnitName_5067982036267369911", new Object[]{}).equals(unitName);
      }
    }), "jetbrains.mps.lang.traceable.structure.UnitConcept");
  }
}
