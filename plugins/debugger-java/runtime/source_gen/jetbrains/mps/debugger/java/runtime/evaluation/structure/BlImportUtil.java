package jetbrains.mps.debugger.java.runtime.evaluation.structure;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.DynamicReference;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class BlImportUtil {
  public static void tryToImport(SNode container, List<SNodeReference> nodesToImport, _FunctionTypes._return_P1_E0<? extends SNode, ? super SReference> findVariable, _FunctionTypes._return_P1_E0<? extends SNode, ? super SNode> createReference) {
    List<SNode> nodes = CopyUtil.copy(ListSequence.fromList(nodesToImport).select(new ISelector<SNodeReference, SNode>() {
      public SNode select(SNodeReference it) {
        return (SNode) ((SNodePointer) it).getNode();
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    }).toListSequence());
    for (SNode node : ListSequence.fromList(nodes)) {
      if (node == null) {
        continue;
      }
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Expression")) {
        SNode clone = _quotation_createNode_qvsuy0_a0a0b0b0a(node);
        transformNode(clone, SNodeOperations.getModel(container), findVariable, createReference);
        ListSequence.fromList(SLinkOperations.getTargets(container, "statement", true)).addElement(clone);
      } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Statement")) {
        transformNode(node, SNodeOperations.getModel(container), findVariable, createReference);
        ListSequence.fromList(SLinkOperations.getTargets(container, "statement", true)).addElement(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Statement"));
      }
    }
  }

  private static void transformNode(final SNode node, final SModel containerModel, final _FunctionTypes._return_P1_E0<? extends SNode, ? super SReference> findVariable, final _FunctionTypes._return_P1_E0<? extends SNode, ? super SNode> createReference) {
    // try to resolve variables 
    ListSequence.fromList(SNodeOperations.getDescendants(node, null, false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ListSequence.fromList(SNodeOperations.getChildren(it)).isEmpty();
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        transformNodeToProperVariableReference(node, containerModel, findVariable, createReference);
      }
    });
    // all links to subs -> to debugger stubs 
    for (SNode d : ListSequence.fromList(SNodeOperations.getDescendants(node, null, true, new String[]{}))) {
      replaceStubReferences(d, containerModel);
    }
  }

  private static void replaceStubReferences(SNode node, SModel containerModel) {
    for (SReference reference : ListSequence.fromList(SNodeOperations.getReferences(node))) {
      SModel targetModel = SNodeOperations.getModel(SLinkOperations.getTargetNode(reference));
      if (neq_qvsuy0_a0b0a0c(targetModel, containerModel)) {
        SModelDescriptor scopeModel = GlobalScope.getInstance().getModelDescriptor(targetModel.getSModelReference());
        if (scopeModel != null && neq_qvsuy0_a0a1a1a0a2(scopeModel.getSModel(), targetModel)) {
          String resolveInfo = SLinkOperations.getResolveInfo(reference);
          if ((resolveInfo == null || resolveInfo.length() == 0)) {
            resolveInfo = jetbrains.mps.util.SNodeOperations.getResolveInfo(SLinkOperations.getTargetNode(reference));
          }
          node.setReference(SLinkOperations.getRole(reference), new DynamicReference(SLinkOperations.getRole(reference), node, scopeModel.getSModelReference(), resolveInfo));
        }
      }
    }
  }

  private static void transformNodeToProperVariableReference(SNode node, SModel containerModel, _FunctionTypes._return_P1_E0<? extends SNode, ? super SReference> findVariable, _FunctionTypes._return_P1_E0<? extends SNode, ? super SNode> createReference) {
    if ((int) ListSequence.fromList(SNodeOperations.getReferences(node)).count() == 1) {
      SReference reference = ListSequence.fromList(SNodeOperations.getReferences(node)).first();
      if (neq_qvsuy0_a0a1a0a3(SNodeOperations.getModel(SLinkOperations.getTargetNode(reference)), containerModel) && SNodeOperations.isInstanceOf(SLinkOperations.getTargetNode(reference), "jetbrains.mps.lang.core.structure.INamedConcept")) {
        SNode matchingVar = findVariable.invoke(reference);
        if (matchingVar != null) {
          SNodeOperations.replaceWithAnother(node, createReference.invoke(matchingVar));
        }
      }
    }
  }

  private static SNode _quotation_createNode_qvsuy0_a0a0b0b0a(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("expression", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static boolean neq_qvsuy0_a0b0a0c(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean neq_qvsuy0_a0a1a1a0a2(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean neq_qvsuy0_a0a1a0a3(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }
}
