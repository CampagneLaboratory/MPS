package jetbrains.mps.debugger.java.runtime.evaluation.container;

/*Generated by MPS */

import jetbrains.mps.extapi.persistence.FolderModelRootBase;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.persistence.PersistenceRegistry;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.project.facets.JavaModuleFacetImpl;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.module.SModuleFacet;
import org.jetbrains.mps.openapi.persistence.ModelRoot;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class EvaluationModule extends AbstractModule implements SModule {
  private final ModuleDescriptor myDescriptor;
  private final Set<String> myClassPaths = SetSequence.fromSet(new HashSet<String>());

  public EvaluationModule() {
    ModuleReference reference = new ModuleReference("Evaluation Container Module", ModuleId.regular());
    setModuleReference(reference);
    myDescriptor = new ModuleDescriptor();
  }

  public String toString() {
    return "Evaluation Module";
  }

  @Override
  public ModuleDescriptor getModuleDescriptor() {
    return myDescriptor;
  }

  @Override
  protected Iterable<ModelRoot> loadRoots() {
    Set<ModelRoot> result = new HashSet<ModelRoot>();
    for (String stub : SetSequence.fromSet(myClassPaths)) {
      FolderModelRootBase modelRoot = (FolderModelRootBase) PersistenceRegistry.getInstance().getModelRootFactory(PersistenceRegistry.JAVA_CLASSES_ROOT).create();
      modelRoot.setPath(stub);
      result.add(modelRoot);
    }
    return result;
  }

  public String addClassPathItem(String path) {
    if (SetSequence.fromSet(myClassPaths).contains(path)) {
      path = null;
    } else {
      SetSequence.fromSet(myClassPaths).addElement(path);
    }
    invalidateClassPath();
    MPSModuleRepository.getInstance().fireModuleChanged(this);
    return path;
  }

  @NotNull
  public IScope getScope() {
    return GlobalScope.getInstance();
  }

  @Override
  protected List<SModuleFacet> createFacets() {
    return Collections.<SModuleFacet>singletonList(new JavaModuleFacetImpl(this) {
      @Override
      public Collection<String> getAdditionalClassPath() {
        return myClassPaths;
      }
    });
  }
}
