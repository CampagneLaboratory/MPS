package jetbrains.mps.debugger.java.runtime.evaluation.container;

/*Generated by MPS */

import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.ModuleId;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import jetbrains.mps.extapi.persistence.FolderModelRootBase;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.persistence.PersistenceRegistry;
import org.jetbrains.mps.openapi.module.SDependency;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;

public class EvaluationModule extends AbstractModule implements SModule {
  private final ModuleDescriptor myDescriptor;
  private final Set<String> myClassPaths = SetSequence.fromSet(new HashSet<String>());

  public EvaluationModule() {
    SModuleReference reference = new ModuleReference("Evaluation Container Module", ModuleId.regular());
    setModuleReference(reference);
    myDescriptor = new ModuleDescriptor();
  }

  @Override
  public String toString() {
    return "Evaluation Module";
  }

  @Override
  public ModuleDescriptor getModuleDescriptor() {
    return myDescriptor;
  }

  @Override
  protected Iterable<ModelRoot> loadRoots() {
    Set<ModelRoot> result = new HashSet<ModelRoot>();
    for (String stub : myClassPaths) {
      FolderModelRootBase modelRoot = (FolderModelRootBase) PersistenceFacade.getInstance().getModelRootFactory(PersistenceRegistry.JAVA_CLASSES_ROOT).create();
      modelRoot.setPath(stub);
      result.add(modelRoot);
    }
    return result;
  }

  public String addClassPathItem(String path) {
    if (SetSequence.fromSet(myClassPaths).contains(path)) {
      path = null;
    } else {
      SetSequence.fromSet(myClassPaths).addElement(path);
      myDescriptor.getAdditionalJavaStubPaths().add(path);
    }
    fireChanged();
    return path;
  }



  @Override
  public Iterable<SDependency> getDeclaredDependencies() {
    return ((Iterable) MPSModuleRepository.getInstance().getModules());
  }

  @Override
  public Set<SLanguage> getUsedLanguages() {
    return ((Set) new HashSet<Language>(ModuleRepositoryFacade.getInstance().getAllModules(Language.class)));
  }
}
