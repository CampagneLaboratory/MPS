package jetbrains.mps.debugger.java.runtime.state.values;

/*Generated by MPS */

import jetbrains.mps.debugger.java.api.state.proxy.JavaValue;
import jetbrains.mps.debugger.java.api.evaluation.proxies.IArrayValueProxy;
import com.sun.jdi.ThreadReference;
import javax.swing.Icon;
import jetbrains.mps.debugger.java.api.ui.Icons;
import java.util.List;
import jetbrains.mps.debug.api.programState.IWatchable;
import java.util.ArrayList;
import com.sun.jdi.ArrayReference;
import jetbrains.mps.debugger.java.runtime.state.watchables.JavaArrayItemWatchable;

/*package*/ class JavaArrayValue extends JavaValue<IArrayValueProxy> {
  private static final int MAX_ARRAY_VALUES = 100;
  private final String myPresentation;
  private final boolean myIsStructure;

  public JavaArrayValue(IArrayValueProxy value, ThreadReference threadReference) {
    super(value, threadReference);
    myPresentation = myValue.getPresentation();
    myIsStructure = myValue.getLength() > 0;
  }

  @Override
  public Icon getPresentationIcon() {
    return Icons.VALUE_ARRAY;
  }

  @Override
  public boolean isStructure() {
    return myIsStructure;
  }

  @Override
  public List<IWatchable> calculateSubvalues() {
    List<IWatchable> watchables = new ArrayList<IWatchable>();
    ArrayReference arrayRef = (ArrayReference) myValue.getJDIValue();
    if (arrayRef != null) {
      if (arrayRef.length() > 0) {
        int len = arrayRef.length();
        if (len > MAX_ARRAY_VALUES) {
          len = MAX_ARRAY_VALUES;
        }
        for (int i = 0; i < len; i++) {
          watchables.add(new JavaArrayItemWatchable(arrayRef, i, myThreadReference));
        }
      }
    }
    return watchables;
  }

  @Override
  public String getValuePresentation() {
    return myPresentation;
  }
}
