package jetbrains.mps.debugger.java.runtime.state.values;

/*Generated by MPS */

import jetbrains.mps.debugger.java.api.state.proxy.JavaValue;
import com.sun.jdi.Value;
import com.sun.jdi.ThreadReference;
import java.util.List;
import jetbrains.mps.debug.api.programState.IWatchable;
import java.util.ArrayList;
import com.sun.jdi.ArrayReference;
import jetbrains.mps.debugger.java.runtime.state.watchables.JavaArrayItemWatchable;
import javax.swing.Icon;
import jetbrains.mps.debugger.java.api.ui.Icons;
import jetbrains.mps.debugger.java.api.state.proxy.ValueUtil;
import jetbrains.mps.debugger.java.api.evaluation.EvaluationUtils;

/*package*/ class JavaArrayValue extends JavaValue {
  private static final int MAX_ARRAY_VALUES = 100;

  public JavaArrayValue(Value value, String classFQname, ThreadReference threadReference) {
    super(value, classFQname, threadReference);
  }

  @Override
  public List<IWatchable> getSubvalues() {
    List<IWatchable> watchables = new ArrayList<IWatchable>();
    ArrayReference arrayRef = (ArrayReference) myValue;
    if (arrayRef != null) {
      if (arrayRef.length() > 0) {
        int len = arrayRef.length();
        if (len > MAX_ARRAY_VALUES) {
          len = MAX_ARRAY_VALUES;
        }
        for (int i = 0; i < len; i++) {
          watchables.add(new JavaArrayItemWatchable(arrayRef, i, myClassFQName, myThreadReference));
        }
      }
    }
    return watchables;
  }

  @Override
  public Icon getPresentationIcon() {
    return Icons.VARIABLE_OBJECT;
  }

  @Override
  public boolean isStructure() {
    return true;
  }

  @Override
  public String getValuePresentation() {
    return (("{" + myValue.type().name() + "} ") + myValue.toString());
  }

  public JavaValue getElementValue(int index) {

    return ValueUtil.getInstance().fromJDIRaw(EvaluationUtils.getInstance().getArrayElementAt((ArrayReference) myValue, index), myClassFQName, myThreadReference);
  }

  public int getSize() {
    return ((ArrayReference) myValue).length();
  }

  public List<JavaValue> getAllElements() {
    ArrayReference arrayReference = (ArrayReference) myValue;
    List<Value> valueList = arrayReference.getValues();
    List<JavaValue> result = new ArrayList<JavaValue>();
    for (Value v : valueList) {
      result.add(ValueUtil.getInstance().fromJDIRaw(v, myClassFQName, myThreadReference));
    }
    return result;
  }

  public List<JavaValue> getElements(int startIndex, int endIndex) {
    if (startIndex > endIndex) {
      return null;
    }
    // todo throw special kind of exception 
    ArrayReference arrayReference = (ArrayReference) myValue;
    if (startIndex < 0 || endIndex >= arrayReference.length()) {
      return null;
    }
    List<Value> valueList = arrayReference.getValues(startIndex, endIndex);
    List<JavaValue> result = new ArrayList<JavaValue>();
    for (Value v : valueList) {
      result.add(ValueUtil.getInstance().fromJDIRaw(v, myClassFQName, myThreadReference));
    }
    return result;
  }
}
