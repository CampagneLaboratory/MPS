package jetbrains.mps.debugger.java.api.state.proxy;

/*Generated by MPS */

import jetbrains.mps.debug.api.programState.IValue;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.debugger.java.api.evaluation.proxies.IValueProxy;
import jetbrains.mps.debugger.java.api.evaluation.proxies.MirrorUtil;
import javax.swing.Icon;
import java.util.List;
import jetbrains.mps.debug.api.programState.IWatchable;
import java.util.ArrayList;
import jetbrains.mps.debugger.java.api.state.watchables.CustomJavaWatchable;
import com.sun.jdi.ThreadReference;
import com.sun.jdi.VirtualMachine;

public abstract class ValueWrapper extends JavaValue implements IValue {
  @NotNull
  protected final JavaValue myWrappedValue;
  @NotNull
  protected final IValueProxy myValueProxy;
  private final String myPresentation;

  public ValueWrapper(@NotNull JavaValue value) {
    super(value.getValue(), value.myThreadReference);
    myWrappedValue = value;
    myValueProxy = MirrorUtil.getInstance().getValueProxy(value.getValue());
    myPresentation = myWrappedValue.getValuePresentation();
  }

  @Override
  public Icon getPresentationIcon() {
    return myWrappedValue.getPresentationIcon();
  }

  @Override
  public String getValuePresentation() {
    return myPresentation;
  }

  @Override
  public List<IWatchable> calculateSubvalues() {
    List<IWatchable> result = new ArrayList<IWatchable>();
    for (IWatchable watchable : getSubvaluesImpl()) {
      result.add(watchable);
    }
    return result;
  }

  protected abstract List<CustomJavaWatchable> getSubvaluesImpl();

  @Override
  public boolean isStructure() {
    return true;
  }

  public ThreadReference getThreadReference() {
    return myThreadReference;
  }

  public VirtualMachine getVM() {
    return myValue.virtualMachine();
  }

  public JavaValue getWrappedValue() {
    return myWrappedValue;
  }
}
