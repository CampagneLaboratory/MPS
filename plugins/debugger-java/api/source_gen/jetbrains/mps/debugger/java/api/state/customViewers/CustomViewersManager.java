package jetbrains.mps.debugger.java.api.state.customViewers;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import java.util.Map;
import jetbrains.mps.debugger.java.api.state.proxy.ValueWrapperFactory;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import java.util.Set;
import jetbrains.mps.debugger.java.api.state.proxy.JavaValue;
import java.util.HashSet;
import jetbrains.mps.debugger.java.api.state.proxy.ValueWrapper;
import com.sun.jdi.ObjectReference;
import com.intellij.openapi.application.ApplicationManager;

public class CustomViewersManager implements ApplicationComponent {
  private final Map<String, ValueWrapperFactory> myFactories = MapSequence.fromMap(new HashMap<String, ValueWrapperFactory>());
  private final Map<Long, String> myObjectIdToFactory = MapSequence.fromMap(new HashMap<Long, String>());

  public CustomViewersManager() {
  }

  @Override
  public void initComponent() {
  }

  @NonNls
  @NotNull
  @Override
  public String getComponentName() {
    return "Custom Viewers Manager";
  }

  @Override
  public void disposeComponent() {
  }

  public void addFactory(ValueWrapperFactory factory) {
    MapSequence.fromMap(myFactories).put(factory.getClass().getName(), factory);
  }

  public void removeFactory(ValueWrapperFactory factory) {
    MapSequence.fromMap(myFactories).removeKey(factory.getClass().getName());
  }

  public Set<ValueWrapperFactory> getValueWrapperFactories(@NotNull final JavaValue originalValue) {
    Set<ValueWrapperFactory> result = new HashSet<ValueWrapperFactory>();
    for (ValueWrapperFactory factory : MapSequence.fromMap(myFactories).values()) {
      if (factory.canWrapValue(originalValue)) {
        result.add(factory);
      }
    }
    return result;
  }

  public ValueWrapper getValueWrapper(@NotNull JavaValue originalValue, @NotNull String className) {
    if (originalValue.getValue() instanceof ObjectReference) {
      ValueWrapperFactory factory = null;
      long uniqueID = getValueId(originalValue);
      String factoryId = MapSequence.fromMap(myObjectIdToFactory).get(uniqueID);
      if ((factoryId != null && factoryId.length() > 0)) {
        factory = MapSequence.fromMap(myFactories).get(factoryId);
      }
      if (factory == null) {
        Set<ValueWrapperFactory> factories = getValueWrapperFactories(originalValue);
        if (factories.isEmpty()) {
          return null;
        }
        factory = factories.iterator().next();
        factoryId = factory.getClass().getName();
        MapSequence.fromMap(myObjectIdToFactory).put(uniqueID, factoryId);
      }
      return factory.createValueWrapper(originalValue);
    }
    return null;
  }

  public void setValueWrapper(@NotNull JavaValue value, @NotNull ValueWrapperFactory factory) {
    MapSequence.fromMap(myObjectIdToFactory).put(getValueId(value), factory.getClass().getName());
  }

  public static CustomViewersManager getInstance() {
    return ApplicationManager.getApplication().getComponent(CustomViewersManager.class);
  }

  private long getValueId(@NotNull JavaValue originalValue) {
    return ((ObjectReference) originalValue.getValue()).uniqueID();
  }
}
