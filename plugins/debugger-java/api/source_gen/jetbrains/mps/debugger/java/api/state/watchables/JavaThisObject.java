package jetbrains.mps.debugger.java.api.state.watchables;

/*Generated by MPS */

import jetbrains.mps.debug.api.programState.IWatchable;
import com.sun.jdi.ObjectReference;
import jetbrains.mps.debugger.java.api.state.proxy.JavaStackFrame;
import jetbrains.mps.debugger.java.api.state.proxy.JavaValue;
import com.sun.jdi.ThreadReference;
import jetbrains.mps.debugger.java.api.state.proxy.ValueUtil;
import jetbrains.mps.debug.api.programState.IValue;
import javax.swing.Icon;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.debugger.java.api.state.proxy.JavaLocation;
import jetbrains.mps.generator.traceInfo.TraceInfoUtil;
import jetbrains.mps.debug.api.programState.WatchablesCategory;

public class JavaThisObject extends JavaWatchable implements IWatchable {
  private final ObjectReference myThisObject;
  private final JavaStackFrame myStackFrame;
  private final JavaValue myValue;

  public JavaThisObject(ObjectReference objectReference, JavaStackFrame stackFrame, String classFqName, ThreadReference threadReference) {
    super(classFqName, threadReference);
    myThisObject = objectReference;
    myStackFrame = stackFrame;
    myValue = ValueUtil.getInstance().fromJDI(myThisObject, myClassFQName, myThreadReference);
  }

  public ObjectReference getThisObject() {
    return myThisObject;
  }

  @Override
  public String getName() {
    return "this";
  }

  @Override
  public IValue getValue() {
    return myValue;
  }

  @Override
  public Icon getPresentationIcon() {
    return myValue.getPresentationIcon();
  }

  @Override
  public SNode getNode() {
    JavaLocation location = myStackFrame.getLocation();
    if (location == null) {
      return null;
    }
    return TraceInfoUtil.getUnitNode(location.getUnitName(), location.getFileName(), location.getLineNumber());
  }

  @Override
  public WatchablesCategory getCategory() {
    return JavaWatchablesCategory.THIS_OBJECT;
  }
}
