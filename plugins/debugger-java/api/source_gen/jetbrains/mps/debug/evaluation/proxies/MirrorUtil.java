package jetbrains.mps.debug.evaluation.proxies;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import com.sun.jdi.Value;
import java.util.List;
import com.sun.jdi.VirtualMachine;
import jetbrains.mps.util.annotation.ToRemove;
import com.sun.jdi.ThreadReference;

public abstract class MirrorUtil {
  protected static MirrorUtil INSTANCE;
  protected static final Object LOCK = new Object();

  public MirrorUtil() {
  }

  @NotNull
  public abstract IValueProxy getValueProxy(@Nullable Value value);

  @NotNull
  public abstract List<Value> getValues(VirtualMachine machine, Object... args);

  @NotNull
  public abstract Object getJavaValue(@NotNull Value jdiValue);

  @NotNull
  public abstract IValueProxy getValueProxyFromJava(@Nullable Object javaValue, VirtualMachine machine);

  public abstract void init();

  public abstract void dispose();

  public static MirrorUtil getInstance() {
    synchronized (LOCK) {
      return INSTANCE;
    }
  }

  @NotNull
  @Deprecated
  @ToRemove(version = 2.1)
  public static IValueProxy getValueProxyFromJavaValue(@Nullable Object javaValue, ThreadReference threadReference) {
    return MirrorUtil.getInstance().getValueProxyFromJava(javaValue, threadReference.virtualMachine());
  }
}
