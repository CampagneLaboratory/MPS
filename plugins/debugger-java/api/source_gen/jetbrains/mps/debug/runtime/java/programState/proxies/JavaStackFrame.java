package jetbrains.mps.debug.runtime.java.programState.proxies;

/*Generated by MPS */

import jetbrains.mps.debug.api.programState.IStackFrame;
import jetbrains.mps.logging.Logger;
import com.sun.jdi.AbsentInformationException;
import jetbrains.mps.util.Pair;
import com.sun.jdi.StackFrame;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.ModelAccess;
import java.util.Map;
import jetbrains.mps.debug.api.programState.IWatchable;
import jetbrains.mps.debug.api.programState.IValue;
import java.util.HashMap;
import com.sun.jdi.LocalVariable;
import com.sun.jdi.Value;
import jetbrains.mps.debug.runtime.java.programState.watchables.JavaLocalVariable;
import com.sun.jdi.ObjectReference;
import jetbrains.mps.debug.runtime.java.programState.watchables.JavaThisObject;
import java.util.Collections;
import com.sun.jdi.IncompatibleThreadStateException;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.debug.runtime.java.programState.watchables.JavaStaticContext;
import com.sun.jdi.InvalidStackFrameException;

public class JavaStackFrame extends ProxyForJava implements IStackFrame {
  private static final Logger LOG = Logger.getLogger(JavaStackFrame.class);

  private final String myClassFqName;
  private final int myIndex;
  private final JavaLocation myLocation;
  private final JavaThread myThread;

  public JavaStackFrame(JavaThread threadReference, int i) throws AbsentInformationException {
    super(new Pair<JavaThread, Integer>(threadReference, i));
    myIndex = i;
    myThread = threadReference;
    StackFrame stackFrame = getStackFrame();
    if (stackFrame != null) {
      myLocation = new JavaLocation(stackFrame.location());
      myClassFqName = myLocation.getUnitName();
    } else {
      myLocation = null;
      myClassFqName = null;
    }
  }

  @Override
  @Nullable
  public JavaLocation getLocation() {
    return myLocation;
  }

  @Override
  public JavaThread getThread() {
    return myThread;
  }

  @Nullable
  public StackFrame getStackFrame() {
    assert !(ModelAccess.instance().isInEDT());
    try {
      return myThread.getThread().frame(myIndex);
    } catch (Throwable t) {
      LOG.error(t);
      return null;
    }
  }

  public String getClassFqName() {
    return myClassFqName;
  }

  @Override
  public Map<IWatchable, IValue> getWatchableValues() {
    assert !(ModelAccess.instance().isInEDT());
    try {
      StackFrame stackFrame = myThread.getThread().frame(myIndex);
      Map<IWatchable, IValue> result = new HashMap<IWatchable, IValue>();
      if (stackFrame != null) {
        Map<LocalVariable, Value> map = stackFrame.getValues(stackFrame.visibleVariables());
        for (LocalVariable variable : map.keySet()) {
          result.put(new JavaLocalVariable(variable, this, myClassFqName, stackFrame.thread()), ValueUtil.getInstance().fromJDI(map.get(variable), myClassFqName, stackFrame.thread()));
        }
        ObjectReference thisObject = stackFrame.thisObject();
        if (thisObject != null) {
          JavaThisObject object = new JavaThisObject(thisObject, this, myClassFqName, stackFrame.thread());
          result.put(object, object.getValue());
        }
      }
      return result;
    } catch (AbsentInformationException ex) {
      //  doing nothing 
      return Collections.emptyMap();
    } catch (IncompatibleThreadStateException e) {
      return Collections.emptyMap();
    }
  }

  @Override
  public List<IWatchable> getVisibleWatchables() {
    assert !(ModelAccess.instance().isInEDT());
    try {
      StackFrame stackFrame = myThread.getThread().frame(myIndex);
      List<IWatchable> result = new ArrayList<IWatchable>();
      if (stackFrame != null) {
        for (LocalVariable variable : stackFrame.visibleVariables()) {
          result.add(new JavaLocalVariable(variable, this, myClassFqName, myThread.getThread()));
        }
        ObjectReference thisObject = stackFrame.thisObject();
        if (thisObject != null) {
          result.add(new JavaThisObject(thisObject, this, myClassFqName, myThread.getThread()));
        } else {
          result.add(new JavaStaticContext(stackFrame.location().declaringType(), myClassFqName, myThread.getThread()));
        }
      }
      return result;
    } catch (InvalidStackFrameException ex) {
      LOG.warning("InvalidStackFrameException", ex);
      //  TODO something should be done here. See, for instance, how idea deals with those exceptions 
      return Collections.emptyList();
    } catch (AbsentInformationException ex) {
      //  doing nothing, variables are just not available for us 
      return Collections.emptyList();
    } catch (IncompatibleThreadStateException e) {
      return Collections.emptyList();
    }
  }

  @Override
  public IValue getValue(IWatchable watchable) {
    assert !(ModelAccess.instance().isInEDT());
    try {
      if (watchable instanceof JavaLocalVariable) {
        JavaLocalVariable localVariable = (JavaLocalVariable) watchable;
        return ValueUtil.getInstance().fromJDI(myThread.getThread().frame(myIndex).getValue(localVariable.getLocalVariable()), myClassFqName, myThread.getThread());
      }
    } catch (IncompatibleThreadStateException e) {
    }
    return null;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }

    JavaStackFrame that = (JavaStackFrame) o;
    if (myIndex != that.myIndex) {
      return false;
    }
    if ((myLocation != null ?
      !(myLocation.equals(that.myLocation)) :
      that.myLocation != null
    )) {
      return false;
    }
    if ((myThread != null ?
      !(myThread.equals(that.myThread)) :
      that.myThread != null
    )) {
      return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + myIndex;
    result = 31 * result + ((myLocation != null ?
      ((Object) myLocation).hashCode() :
      0
    ));
    result = 31 * result + ((myThread != null ?
      ((Object) myThread).hashCode() :
      0
    ));
    return result;
  }
}
