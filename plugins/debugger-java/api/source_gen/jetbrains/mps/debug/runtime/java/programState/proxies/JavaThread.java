package jetbrains.mps.debug.runtime.java.programState.proxies;

/*Generated by MPS */

import jetbrains.mps.debug.api.programState.IThread;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.sun.jdi.ThreadReference;
import org.jetbrains.annotations.Nullable;
import javax.swing.Icon;
import java.util.List;
import jetbrains.mps.debug.api.programState.IStackFrame;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.sun.jdi.IncompatibleThreadStateException;
import jetbrains.mps.debug.integration.ui.icons.Icons;

public class JavaThread extends ProxyForJava implements IThread {
  protected static Log log = LogFactory.getLog(JavaThread.class);

  @NotNull
  private final ThreadReference myThreadReference;
  @Nullable
  private Icon myCachedIcon = null;
  private final List<IStackFrame> myStackFrames = ListSequence.fromList(new ArrayList<IStackFrame>());
  private boolean myInitialized = false;

  public JavaThread(@NotNull ThreadReference threadReference) {
    super(threadReference);
    myThreadReference = threadReference;
  }

  public synchronized void initialize() {
    if (myInitialized) {
      return;
    }
    myInitialized = true;
    try {
      for (int i = 0; i < myThreadReference.frameCount(); i++) {
        myStackFrames.add(new JavaStackFrame(myThreadReference, i));
      }
    } catch (IncompatibleThreadStateException ex) {
      if (log.isDebugEnabled()) {
        log.debug("IncompatibleThreadStateException", ex);
      }
    }
  }

  @Override
  public List<IStackFrame> getFrames() {
    initialize();
    return myStackFrames;
  }

  @Override
  public int getFramesCount() {
    initialize();
    return myStackFrames.size();
  }

  @Nullable
  public IStackFrame getFrame(int index) {
    initialize();
    return ListSequence.fromList(myStackFrames).getElement(index);
  }

  @NotNull
  public ThreadReference getThread() {
    return myThreadReference;
  }

  @Override
  public String getName() {
    return myThreadReference.name();
  }

  @Override
  public String getPresentation() {
    ThreadReference thread = myThreadReference;
    return thread.name() + " (" + thread.referenceType().name() + " from group " + thread.threadGroup().name() + ") : " + JavaThread.getThreadStatusText(thread.status());
  }

  @Override
  public Icon getPresentationIcon() {
    if (myCachedIcon == null) {
      ThreadReference thread = myThreadReference;
      if (thread.isAtBreakpoint()) {
        myCachedIcon = Icons.THREAD_AT_BREAKPOINT;
      } else
      if (thread.isSuspended()) {
        myCachedIcon = Icons.THREAD_SUSPENDED;
      } else {
        myCachedIcon = Icons.THREAD_RUNNING;
      }
    }
    return myCachedIcon;
  }

  private static String getThreadStatusText(int statusId) {
    switch (statusId) {
      case ThreadReference.THREAD_STATUS_MONITOR:
        return "MONITOR";
      case ThreadReference.THREAD_STATUS_NOT_STARTED:
        return "NOT_STARTED";
      case ThreadReference.THREAD_STATUS_RUNNING:
        return "RUNNING";
      case ThreadReference.THREAD_STATUS_SLEEPING:
        return "SLEEPING";
      case ThreadReference.THREAD_STATUS_UNKNOWN:
        return "UNKNOWN";
      case ThreadReference.THREAD_STATUS_WAIT:
        return "WAIT";
      case ThreadReference.THREAD_STATUS_ZOMBIE:
        return "ZOMBIE";
      default:
        return "UNDEFINED";
    }
  }
}
