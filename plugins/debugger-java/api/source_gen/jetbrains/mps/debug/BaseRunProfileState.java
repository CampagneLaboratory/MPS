package jetbrains.mps.debug;

/*Generated by MPS */

import jetbrains.mps.util.annotation.ToRemove;
import jetbrains.mps.debug.api.run.DebuggerRunProfileState;
import java.util.Map;
import com.intellij.openapi.util.Key;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.debug.api.AbstractDebugSessionCreator;
import com.intellij.openapi.project.Project;
import com.intellij.execution.Executor;
import com.intellij.execution.runners.ProgramRunner;
import jetbrains.mps.debug.api.run.IDebuggerConfiguration;
import jetbrains.mps.debug.api.IDebuggerSettings;
import jetbrains.mps.debugger.java.api.settings.LocalConnectionSettings;
import jetbrains.mps.debug.api.IDebugger;
import jetbrains.mps.debug.api.Debuggers;

@Deprecated
@ToRemove(version = 2.1)
public abstract class BaseRunProfileState extends DebuggerRunProfileState {
  private final Map<Key, Object> myUserData = new HashMap<Key, Object>();

  @Deprecated
  public BaseRunProfileState() {
  }

  public <T> void putUserData(@NotNull Key<T> key, T value) {
    myUserData.put(key, value);
  }

  @Nullable
  public <T> T getUserData(Key<T> key) {
    return (T) myUserData.get(key);
  }

  @NotNull
  public abstract AbstractDebugSessionCreator createDebugSessionCreator(Project project);

  @Nullable
  public Object prepare(final Executor executor, @NotNull ProgramRunner runner) {
    return null;
  }

  @Override
  protected void updateDebuggerSettings() {
    super.updateDebuggerSettings();
    putUserData(DebuggerKeys.CONNECTION_SETTINGS, myDebuggerSettings.getCommandLine(true));
  }

  @NotNull
  @Override
  public IDebuggerConfiguration getDebuggerConfiguration() {
    return new IDebuggerConfiguration() {
      @Override
      public IDebuggerSettings createDebuggerSettings() {
        return new LocalConnectionSettings(true);
      }

      @Override
      public IDebugger getDebugger() {
        return (IDebugger) Debuggers.getInstance().getDebuggerByName("Java");
      }
    };
  }
}
