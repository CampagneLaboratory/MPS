package jetbrains.mps.debugger.java.remote;

/*Generated by MPS */

import jetbrains.mps.debug.api.run.DebuggerRunProfileState;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.runners.ExecutionEnvironment;
import com.intellij.execution.Executor;
import com.intellij.execution.configurations.ConfigurationPerRunnerSettings;
import com.intellij.execution.configurations.RunnerSettings;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.ExecutionResult;
import com.intellij.execution.runners.ProgramRunner;
import com.intellij.execution.ExecutionException;
import com.intellij.openapi.project.Project;
import com.intellij.execution.impl.ConsoleViewImpl;
import jetbrains.mps.debugger.java.run.RemoteDebugProcessHandler;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.debug.api.IDebugger;
import jetbrains.mps.debug.api.Debuggers;
import com.intellij.execution.process.ProcessHandler;
import com.intellij.execution.ui.ExecutionConsole;
import com.intellij.openapi.actionSystem.AnAction;
import javax.swing.JComponent;

public class RemoteNew_Configuration_RunProfileState extends DebuggerRunProfileState {
  @NotNull
  private final RemoteNew_Configuration myRunConfiguration;
  @NotNull
  private final ExecutionEnvironment myEnvironment;

  public RemoteNew_Configuration_RunProfileState(@NotNull RemoteNew_Configuration configuration, @NotNull Executor executor, @NotNull ExecutionEnvironment environment) {
    myRunConfiguration = configuration;
    myEnvironment = environment;
  }

  public ConfigurationPerRunnerSettings getConfigurationSettings() {
    return null;
  }

  public RunnerSettings getRunnerSettings() {
    return null;
  }

  @Nullable
  public ExecutionResult execute(Executor executor, @NotNull ProgramRunner runner) throws ExecutionException {
    Project project = myEnvironment.getProject();
    final ConsoleViewImpl consoleView = new ConsoleViewImpl(project, false);
    RemoteDebugProcessHandler handler = new RemoteDebugProcessHandler(project);
    return new RemoteNew_Configuration_RunProfileState.MyExecutionResult(handler, new RemoteNew_Configuration_RunProfileState.MyExecutionConsole(consoleView.getComponent(), new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        consoleView.dispose();
      }
    }));

  }

  public IDebugger getDebugger() {
    return Debuggers.getInstance().getDebuggerByName("Java");
  }

  private static class MyExecutionResult implements ExecutionResult {
    @NotNull
    private final ProcessHandler myProcessHandler;
    @NotNull
    private final ExecutionConsole myConsole;

    public MyExecutionResult(@NotNull ProcessHandler process, @NotNull ExecutionConsole console) {
      myProcessHandler = process;
      myConsole = console;
    }

    public ProcessHandler getProcessHandler() {
      return myProcessHandler;
    }

    public AnAction[] getActions() {
      return new AnAction[0];
    }

    public ExecutionConsole getExecutionConsole() {
      return myConsole;
    }
  }

  private static class MyExecutionConsole implements ExecutionConsole {
    @Nullable
    private final _FunctionTypes._void_P0_E0 myDispose;
    private final JComponent myComponent;

    public MyExecutionConsole(JComponent component, @Nullable _FunctionTypes._void_P0_E0 dispose) {
      myDispose = dispose;
      myComponent = component;
    }

    public JComponent getPreferredFocusableComponent() {
      return myComponent;
    }

    public void dispose() {
      if (myDispose == null) {
        return;
      }
      myDispose.invoke();
    }

    public JComponent getComponent() {
      return myComponent;
    }
  }
}
