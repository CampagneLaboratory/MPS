package jetbrains.mps.debugger.java.evaluation.model;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;

public class VariableDescription {
  private SNode myHighLevelType;
  private final SNode myLowLevelType;
  private SNodePointer myHighLevelNode;
  private String myHighLevelName;
  private final String myLowLevelName;
  private boolean myIsHighLevelInfoAvailable = false;

  public VariableDescription(String lowLevelName, SNode lowLevelType) {
    myLowLevelName = lowLevelName;
    myLowLevelType = lowLevelType;
  }

  public void updateLowLevelVariable(SNode variable) {
    if (myIsHighLevelInfoAvailable) {
      SPropertyOperations.set(variable, "name", myHighLevelName);
      SLinkOperations.setTarget(variable, "type", myHighLevelType, true);
      SPropertyOperations.set(variable, "highLevelNodeId", myHighLevelNode.getNodeId().toString());
    } else {
      SPropertyOperations.set(variable, "name", myLowLevelName);
      SLinkOperations.setTarget(variable, "type", SNodeOperations.copyNode(myLowLevelType), true);
    }
    SPropertyOperations.set(variable, "lowLevelName", myLowLevelName);
    SLinkOperations.setTarget(variable, "lowLevelType", myLowLevelType, true);
  }

  public void setHighLevelNode(SNode node) {
    myIsHighLevelInfoAvailable = true;
    myHighLevelNode = new SNodePointer(node);
    myHighLevelType = SNodeOperations.copyNode(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(node), "jetbrains.mps.baseLanguage.structure.Type"));
    myHighLevelName = (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.INamedConcept") ?
      SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name") :
      myLowLevelName
    );
  }

  public void setHighLevelName(String highLevelName) {
    myHighLevelName = highLevelName;
  }

  public String getLowLevelName() {
    return myLowLevelName;
  }

  @Override
  public boolean equals(Object object) {
    return eq_5ytd5s_a0a0e(myLowLevelName, ((VariableDescription) object).myLowLevelName);
  }

  private static boolean eq_5ytd5s_a0a0e(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
