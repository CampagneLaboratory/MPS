package jetbrains.mps.debugger.java.mps;

/*Generated by MPS */

import com.intellij.execution.process.ProcessHandler;
import com.intellij.execution.ExecutionException;
import jetbrains.mps.execution.lib.Java_Command;
import java.io.File;
import jetbrains.mps.util.PathManager;
import jetbrains.mps.debug.api.IDebugger;
import jetbrains.mps.debug.api.Debuggers;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.io.IOException;

public class Mps_Command {
  private String myDebuggerSettings = "";
  private String myVirtualMachineParameters = Mps_Command.getDefaultVirtualMachineParameters();
  private String myJrePath;
  private String myConfigurationPath = Mps_Command.getDefaultConfigurationPath();
  private String mySystemPath = Mps_Command.getDefaultSystemPath();

  public Mps_Command() {
  }

  public Mps_Command setDebuggerSettings(String debuggerSettings) {
    if (debuggerSettings != null) {
      myDebuggerSettings = debuggerSettings;
    }
    return this;
  }

  public Mps_Command setVirtualMachineParameters(String virtualMachineParameters) {
    if (virtualMachineParameters != null) {
      myVirtualMachineParameters = virtualMachineParameters;
    }
    return this;
  }

  public Mps_Command setJrePath(String jrePath) {
    if (jrePath != null) {
      myJrePath = jrePath;
    }
    return this;
  }

  public Mps_Command setConfigurationPath(String configurationPath) {
    if (configurationPath != null) {
      myConfigurationPath = configurationPath;
    }
    return this;
  }

  public Mps_Command setSystemPath(String systemPath) {
    if (systemPath != null) {
      mySystemPath = systemPath;
    }
    return this;
  }

  public ProcessHandler createProcess() throws ExecutionException {
    String mpsProperties = "-Didea.config.path=" + myConfigurationPath + " " + "-Didea.system.path=" + mySystemPath;
    return new Java_Command().setClassName("jetbrains.mps.Launcher").setClassPath(Mps_Command.getClassPath()).setVirtualMachineParameter(myVirtualMachineParameters + " " + mpsProperties + " " + myDebuggerSettings).setWorkingDirectory(new File(PathManager.getHomePath())).setJrePath(myJrePath).createProcess();
  }

  public static IDebugger getDebugger() {
    return Debuggers.getInstance().getDebuggerByName("Java");
  }

  public static String getDefaultVirtualMachineParameters() {
    return "-client -Xss1024k -ea -Xmx1200m -XX:MaxPermSize=150m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8";
  }

  public static String getDefaultConfigurationPath() {
    return System.getProperty("user.home").replace(File.separator, "/") + "/" + ".MPSDebug1x/config";
  }

  public static String getDefaultSystemPath() {
    return System.getProperty("user.home").replace(File.separator, "/") + "/" + ".MPSDebug1x/system";
  }

  private static List<String> getClassPath() {
    return ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(), System.getProperty("java.class.path").split(Java_Command.ps()))).<String>select(new ISelector<String, String>() {
      public String select(String it) {
        try {
          return new File(it).getCanonicalPath();
        } catch (IOException e) {
          return it;
        }
      }
    }).toListSequence();
  }
}
