package jetbrains.mps.debugger.java.mps;

/*Generated by MPS */

import com.intellij.execution.process.ProcessHandler;
import com.intellij.execution.ExecutionException;
import jetbrains.mps.util.PathManager;
import java.io.File;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.execution.lib.Java_Command;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.debug.api.IDebugger;
import jetbrains.mps.debug.api.Debuggers;

public class Mps_Command {
  private String myVirtualMachineParameters;
  private String myJrePath;

  public Mps_Command() {
  }

  public Mps_Command setVirtualMachineParameters(String virtualMachineParameters) {
    if (virtualMachineParameters != null) {
      myVirtualMachineParameters = virtualMachineParameters;
    }
    return this;
  }

  public Mps_Command setJrePath(String jrePath) {
    if (jrePath != null) {
      myJrePath = jrePath;
    }
    return this;
  }

  public ProcessHandler createProcess(String debuggerSettings) throws ExecutionException {
    String mpsProperties = "-Didea.properties.file=" + PathManager.getHomePath() + File.separator + "bin" + File.separator + "mps.debug.properties";
    String vmOptions = (StringUtils.isEmpty(myVirtualMachineParameters) ?
      Mps_Command.getDefaultVirtualMachineParameters() :
      myVirtualMachineParameters
    );
    return new Java_Command().setClassName("jetbrains.mps.Launcher").setClassPath(ListSequence.fromListAndArray(new ArrayList<String>(), System.getProperty("java.class.path").split(Java_Command.ps()))).setVirtualMachineParameter(vmOptions + " " + mpsProperties + " " + debuggerSettings).setWorkingDirectory(new File(PathManager.getHomePath())).setJrePath(myJrePath).createProcess();
  }

  public static IDebugger getDebugger() {
    return Debuggers.getInstance().getDebuggerByName("Java");
  }

  public static String getDefaultVirtualMachineParameters() {
    return "-client -Xss1024k -ea -Xmx1200m -XX:MaxPermSize=150m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8";
  }
}
