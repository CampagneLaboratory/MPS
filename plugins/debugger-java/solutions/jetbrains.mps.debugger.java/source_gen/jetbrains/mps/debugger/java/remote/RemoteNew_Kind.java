package jetbrains.mps.debugger.java.remote;

/*Generated by MPS */

import com.intellij.execution.configurations.ConfigurationType;
import javax.swing.Icon;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.plugins.MacrosUtil;
import com.intellij.execution.configurations.ConfigurationFactory;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;

public class RemoteNew_Kind implements ConfigurationType {
  private static final Icon ICON = IconManager.loadIcon(MacrosUtil.expandPath("${mps_home}/plugins/debugger-java/resources/jetbrains/mps/debugger/java/remote/remote_run_configuration.png", "jetbrains.mps.debugger.java"), true);

  public RemoteNew_Kind() {
  }

  public ConfigurationFactory[] getConfigurationFactories() {
    List<ConfigurationFactory> result = ListSequence.fromList(new ArrayList<ConfigurationFactory>());
    ListSequence.fromList(result).addElement(new RemoteNew_Configuration_Factory(this));
    // todo foreign configurations 
    return ListSequence.fromList(result).toGenericArray(ConfigurationFactory.class);
  }

  @NonNls
  @NotNull
  public String getId() {
    return "RemoteNew";
  }

  public Icon getIcon() {
    return ICON;
  }

  public String getConfigurationTypeDescription() {
    return null;
  }

  public String getDisplayName() {
    return "RemoteNew";
  }

  public static RemoteNew_Kind getInstance() {
    return ContainerUtil.findInstance(Extensions.getExtensions(CONFIGURATION_TYPE_EP), RemoteNew_Kind.class);
  }
}
