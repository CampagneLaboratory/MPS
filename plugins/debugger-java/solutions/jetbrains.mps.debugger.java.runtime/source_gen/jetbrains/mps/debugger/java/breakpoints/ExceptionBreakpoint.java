package jetbrains.mps.debugger.java.breakpoints;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import com.intellij.openapi.project.Project;
import jetbrains.mps.debugger.java.runtime.DebugVMEventsProcessor;
import com.sun.jdi.ReferenceType;
import jetbrains.mps.debugger.java.runtime.RequestManager;
import com.sun.jdi.request.ExceptionRequest;
import com.sun.jdi.ClassNotPreparedException;
import com.sun.jdi.ObjectCollectedException;
import com.sun.jdi.InternalException;
import jetbrains.mps.debugger.java.runtime.SuspendContextCommand;
import com.sun.jdi.event.LocatableEvent;
import org.jetbrains.annotations.NotNull;

public class ExceptionBreakpoint extends JavaBreakpoint {
  private static final Logger LOG = Logger.getLogger(ExceptionBreakpoint.class);

  private final String myExceptionName;

  public ExceptionBreakpoint(String exceptionName, Project project) {
    super(project);
    myExceptionName = exceptionName;
  }

  @Override
  protected String getClassNameToPrepare() {
    return myExceptionName;
  }

  @Override
  protected void createRequestForPreparedClass(DebugVMEventsProcessor debugProcess, ReferenceType classType) {
    RequestManager requestManager = debugProcess.getRequestManager();
    try {
      ExceptionRequest request = requestManager.createExceptionRequest(this, classType);
      requestManager.enableRequest(request);
    } catch (ClassNotPreparedException ex) {
      LOG.warning("ClassNotPreparedException: " + ex.getMessage());
      //  there's a chance to add a breakpoint when the class is prepared 
    } catch (ObjectCollectedException ex) {
      LOG.warning("ObjectCollectedException: " + ex.getMessage());
      //  there's a chance to add a breakpoint when the class is prepared 
    } catch (InternalException ex) {
      LOG.error(ex);
    } catch (Exception ex) {
      LOG.error(ex);
    }
  }

  @Override
  public boolean processLocatableEvent(SuspendContextCommand action, LocatableEvent event) {
    return true;
  }

  @NotNull
  @Override
  public JavaBreakpointKind getKind() {
    return JavaBreakpointKind.EXCEPTION_BREAKPOINT;
  }

  @Override
  public boolean isValid() {
    return true;
  }

  @Override
  public String getPresentation() {
    return myExceptionName;
  }

  public static class ExceptionBreakpointInfo {
    public String myExceptionName;
    public long myCreationTime;
    public int mySuspendPolicy;
    public boolean myIsLogMessage;
    public boolean myIsEnabled;

    public ExceptionBreakpointInfo(ExceptionBreakpoint breakpoint) {
      myExceptionName = breakpoint.myExceptionName;
      myCreationTime = breakpoint.myCreationTime;
      myIsEnabled = breakpoint.isEnabled();
      mySuspendPolicy = breakpoint.getSuspendPolicy();
      myIsLogMessage = breakpoint.isLogMessage();
    }

    public ExceptionBreakpointInfo() {
    }

    public void initBreakpoint(ExceptionBreakpoint breakpoint) {
      breakpoint.setEnabled(myIsEnabled);
      breakpoint.setCreationTime(myCreationTime);
      breakpoint.setSuspendPolicy(mySuspendPolicy);
      breakpoint.setLogMessage(myIsLogMessage);
    }
  }
}
