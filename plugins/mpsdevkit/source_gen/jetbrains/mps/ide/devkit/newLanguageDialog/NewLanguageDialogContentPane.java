package jetbrains.mps.ide.devkit.newLanguageDialog;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JTextField;
import jetbrains.mps.ide.common.PathField;
import javax.swing.JCheckBox;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.Language;
import java.util.List;
import org.jdesktop.beansbinding.AutoBinding;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.uiLanguage.runtime.events.Events;
import java.awt.GridLayout;
import org.jdesktop.beansbinding.Property;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Bindings;
import jetbrains.mps.ide.newSolutionDialog.NewModuleUtil;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.io.IOException;
import org.apache.log4j.Priority;
import jetbrains.mps.util.NameUtil;
import java.io.File;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class NewLanguageDialogContentPane extends JPanel {
  public NewLanguageDialogContentPane myThis;
  private JLabel myComponent_hneum8_b0;
  private JTextField myName_hneum8_c0;
  private JLabel myComponent_hneum8_d0;
  private PathField myPath_hneum8_e0;
  private JCheckBox myNeedRuntime_hneum8_f0;
  private JCheckBox myNeedSandbox_hneum8_g0;
  private String myLanguageNamespace;
  private String myLanguagePath;
  private MPSProject myProject;
  private Language myResult;
  private NewLanguageDialog myDialog;
  public List<AutoBinding> myBindings = ListSequence.fromList(new ArrayList<AutoBinding>());
  private Events myEvents = new Events(null) {
    {
    }

    public void initialize() {
    }
  };

  public NewLanguageDialogContentPane() {
    this.myThis = this;
    NewLanguageDialogContentPane component = this;
    component.setLayout(new GridLayout(6, 1));
    component.add(this.createComponent_hneum8_b0());
    component.add(this.createComponent_hneum8_c0());
    component.add(this.createComponent_hneum8_d0());
    component.add(this.createComponent_hneum8_e0());
    component.add(this.createComponent_hneum8_f0());
    component.add(this.createComponent_hneum8_g0());
    this.myEvents.initialize();
    myThis.setLanguageNamespace("");
    myThis.setLanguagePath("");
    myThis.myName_hneum8_c0.setName("Name");
    myThis.myPath_hneum8_e0.setName("Path");
  }

  public Events getEvents() {
    return this.myEvents;
  }

  public void addNotify() {
    super.addNotify();
    this.bind();
  }

  public void removeNotify() {
    this.unbind();
    super.removeNotify();
  }

  private void bind() {
    {
      Object sourceObject = myThis;
      Property sourceProperty = BeanProperty.create("languageNamespace");
      Object targetObject = this.myName_hneum8_c0;
      Property targetProperty = BeanProperty.create("text");
      AutoBinding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, sourceObject, sourceProperty, targetObject, targetProperty);
      binding.bind();
      ListSequence.fromList(this.myBindings).addElement(binding);
    }
    {
      Object sourceObject = myThis;
      Property sourceProperty = BeanProperty.create("languagePath");
      Object targetObject = this.myPath_hneum8_e0;
      Property targetProperty = BeanProperty.create("path");
      AutoBinding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, sourceObject, sourceProperty, targetObject, targetProperty);
      binding.bind();
      ListSequence.fromList(this.myBindings).addElement(binding);
    }
  }

  private void unbind() {
    for (AutoBinding binding : this.myBindings) {
      if (binding.isBound()) {
        binding.unbind();
      }
    }
  }

  private JLabel createComponent_hneum8_b0() {
    JLabel component = new JLabel();
    this.myComponent_hneum8_b0 = component;
    component.setText("Language Namespace:");
    return component;
  }

  private JTextField createComponent_hneum8_c0() {
    JTextField component = new JTextField();
    this.myName_hneum8_c0 = component;
    return component;
  }

  private JLabel createComponent_hneum8_d0() {
    JLabel component = new JLabel();
    this.myComponent_hneum8_d0 = component;
    component.setText("Language Path:");
    return component;
  }

  private PathField createComponent_hneum8_e0() {
    PathField component = new PathField();
    this.myPath_hneum8_e0 = component;
    return component;
  }

  private JCheckBox createComponent_hneum8_f0() {
    JCheckBox component = new JCheckBox();
    this.myNeedRuntime_hneum8_f0 = component;
    component.setText("Create Runtime Solution");
    return component;
  }

  private JCheckBox createComponent_hneum8_g0() {
    JCheckBox component = new JCheckBox();
    this.myNeedSandbox_hneum8_g0 = component;
    component.setText("Create Sandbox Solution");
    return component;
  }

  public String getLanguageNamespace() {
    return this.myLanguageNamespace;
  }

  public String getLanguagePath() {
    return this.myLanguagePath;
  }

  public MPSProject getProject() {
    return this.myProject;
  }

  public Language getResult() {
    return this.myResult;
  }

  public NewLanguageDialog getDialog() {
    return this.myDialog;
  }

  public void setLanguageNamespace(String newValue) {
    String oldValue = this.myLanguageNamespace;
    this.myLanguageNamespace = newValue;
    this.firePropertyChange("languageNamespace", oldValue, newValue);
    myThis.updateLanguagePath();
  }

  public void setLanguagePath(String newValue) {
    String oldValue = this.myLanguagePath;
    this.myLanguagePath = newValue;
    this.firePropertyChange("languagePath", oldValue, newValue);
  }

  public void setProject(MPSProject newValue) {
    MPSProject oldValue = this.myProject;
    this.myProject = newValue;
    this.firePropertyChange("project", oldValue, newValue);
    myThis.updateLanguagePath();
  }

  public void setResult(Language newValue) {
    Language oldValue = this.myResult;
    this.myResult = newValue;
    this.firePropertyChange("result", oldValue, newValue);
  }

  public void setDialog(NewLanguageDialog newValue) {
    NewLanguageDialog oldValue = this.myDialog;
    this.myDialog = newValue;
    this.firePropertyChange("dialog", oldValue, newValue);
  }

  /*package*/ void onOk() {
    String message = NewModuleUtil.check(MPSExtentions.DOT_LANGUAGE, myThis.getLanguageNamespace(), myThis.getLanguagePath());
    if (message != null) {
      myThis.getDialog().setError(message);
      return;
    }

    myThis.getDialog().dispose();
    NewModuleUtil.runModuleCreation(myThis.getProject().getProject(), new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        Language language = NewModuleUtil.createLanguage(myThis.getLanguageNamespace(), myThis.getLanguagePath(), myThis.getProject());

        try {
          if (myThis.myNeedRuntime_hneum8_f0.isSelected()) {
            NewModuleUtil.createRuntimeSolution(language, myThis.getLanguagePath(), myThis.getProject());
          }
          if (myThis.myNeedSandbox_hneum8_g0.isSelected()) {
            NewModuleUtil.createSandboxSolution(language, myThis.getLanguagePath(), myThis.getProject());
          }
        } catch (IOException e) {
          // todo: ! 
          if (LOG.isEnabledFor(Priority.ERROR)) {
            LOG.error("Cannot create runtime / sandbox module", e);
          }
        }

        myThis.setResult(language);
      }
    });
  }

  /*package*/ void onCancel() {
    myThis.getDialog().dispose();
  }

  /*package*/ String getLanguageName() {
    return NameUtil.shortNameFromLongName(myThis.getLanguageNamespace());
  }

  /*package*/ void updateLanguagePath() {
    if (myThis.getProject() == null) {
      return;
    }
    String path = myThis.getProject().getProjectFile().getParentFile().getAbsolutePath();
    String prefix = path + File.separator + "languages" + File.separator;
    if (myThis.getLanguagePath().length() == 0 || myThis.getLanguagePath().startsWith(prefix)) {
      myThis.setLanguagePath(prefix + NameUtil.shortNameFromLongName(myThis.getLanguageNamespace()));
    }
  }

  protected static Logger LOG = LogManager.getLogger(NewLanguageDialogContentPane.class);
}
