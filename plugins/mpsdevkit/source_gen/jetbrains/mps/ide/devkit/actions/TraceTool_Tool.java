package jetbrains.mps.ide.devkit.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.tool.GeneratedTool;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.ide.typesystem.trace.TypeSystemTracePanel;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindowAnchor;
import jetbrains.mps.newTypesystem.TypeCheckingContextNew;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorComponent;
import javax.swing.JComponent;
import javax.swing.ImageIcon;
import com.intellij.openapi.util.io.StreamUtil;
import com.intellij.util.io.URLUtil;
import java.io.IOException;

public class TraceTool_Tool extends GeneratedTool {
  private static final Icon ICON = loadIcon();
  protected static Log log = LogFactory.getLog(TraceTool_Tool.class);

  private TypeSystemTracePanel myPanel;

  public TraceTool_Tool(Project project) {
    super(project, "Typesystem Trace", 5, ICON, ToolWindowAnchor.RIGHT, false);
  }

  public void init(Project project) {
    super.init(project);
    TraceTool_Tool.this.myPanel = new TypeSystemTracePanel(TraceTool_Tool.this);
  }

  public void buildTrace(TypeCheckingContextNew t, final IOperationContext operationContext, SNode node, EditorComponent editorComponent, boolean rebuild) {
    TraceTool_Tool.this.myPanel.showTraceForNode(t, operationContext, node, editorComponent, rebuild);
  }

  public JComponent getComponent() {
    return TraceTool_Tool.this.myPanel;
  }

  private static Icon loadIcon() {
    try {
      return new ImageIcon(StreamUtil.loadFromStream(URLUtil.openStream(TraceTool_Tool.class.getResource("types.png"))));
    } catch (IOException e) {
      if (log.isWarnEnabled()) {
        log.warn("Couldn't load icon for TraceTool", e);
      }
      return null;
    }
  }
}
