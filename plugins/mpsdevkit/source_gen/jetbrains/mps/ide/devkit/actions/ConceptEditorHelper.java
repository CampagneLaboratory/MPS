package jetbrains.mps.ide.devkit.actions;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;

public class ConceptEditorHelper {
  public static List<SNode> getAvailableConceptAspects(SModel structureModel, SNode node) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode root : SModelOperations.roots(structureModel, MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489090640l, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
      if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(root), MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l, -8968368868337559369l), 2621449412040133764l, "jetbrains.mps.lang.structure.structure.IConceptAspect")) && SPropertyOperations.getBoolean(root, MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489090640l, 1096454100552l, "rootable"))) {
        SNode candidate = (SNode) root;
        if (BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(candidate)), MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l, -8968368868337559369l), 2621449412040133764l, "jetbrains.mps.lang.structure.structure.IConceptAspect")), "virtual_isApplicable_7839831476331657915", new Object[]{node})) {
          ListSequence.fromList(result).addElement(candidate);
        }
      }
    }
    return result;
  }
  public static List<SNode> getAvailableConceptAspects(LanguageAspect aspect, SNode node) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    Language language = ((Language) aspect.getMainLanguage().resolve(MPSModuleRepository.getInstance()));
    SModel structureModel = language.getStructureModelDescriptor();
    ListSequence.fromList(result).addSequence(ListSequence.fromList(getAvailableConceptAspects(structureModel, node)));
    return result;
  }
  public static SNode createNewConceptAspectInstance(SNode applicableNode, SNode concept, SModel model) {
    SNode conceptAspect = SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(concept), null);
    BehaviorReflection.invokeVirtual(Void.class, conceptAspect, "virtual_setBaseConcept_6261424444345963020", new Object[]{applicableNode});
    SModelOperations.addRootNode(model, conceptAspect);

    return conceptAspect;
  }
  public static SNode createNewConceptAspectInstance(LanguageAspect aspect, SNode applicableNode, SNode concept) {
    Language language = SModelUtil.getDeclaringLanguage(applicableNode);
    assert language != null : "Language shouldn't be null for " + applicableNode;

    SModel md = aspect.get(language);
    if (md == null) {
      md = aspect.createNew(language);
    }
    return createNewConceptAspectInstance(applicableNode, concept, md);
  }
  public static List<SNode> sortRootsByConcept(List<SNode> roots, final SNode[] conceptOrder) {
    return ListSequence.fromList(roots).sort(new ISelector<SNode, Integer>() {
      public Integer select(SNode root) {
        int conceptIndex = Sequence.fromIterable(Sequence.fromArray(conceptOrder)).indexOf(SNodeOperations.getConceptDeclaration(root));
        return (conceptIndex == -1 ? conceptOrder.length : conceptIndex);
      }
    }, true).toListSequence();
  }
  public static class ModelCondition implements Condition<SModel> {
    private Language myLanguage;
    private LanguageAspect myAspect;
    public ModelCondition(Language language, LanguageAspect aspect) {
      this.myLanguage = language;
      this.myAspect = aspect;
    }
    @Override
    public boolean met(SModel modelDescriptor) {
      return Language.getLanguageFor(modelDescriptor) == this.myLanguage && Language.getModelAspect(modelDescriptor) == this.myAspect;
    }
  }
  public static class GeneratorCondition implements Condition<SModel> {
    private Language myLanguage;
    public GeneratorCondition(Language language) {
      this.myLanguage = language;
    }
    @Override
    public boolean met(SModel modelDescriptor) {
      for (Generator generator : CollectionSequence.fromCollection(this.myLanguage.getGenerators())) {
        if (generator.getOwnTemplateModels().contains(modelDescriptor)) {
          return true;
        }
      }
      return false;
    }
  }
}
