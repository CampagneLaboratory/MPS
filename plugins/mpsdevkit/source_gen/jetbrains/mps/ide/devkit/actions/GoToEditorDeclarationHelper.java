package jetbrains.mps.ide.devkit.actions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import javax.swing.JOptionPane;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class GoToEditorDeclarationHelper {
  public GoToEditorDeclarationHelper() {
  }

  public static SNode getOrCreateEditorForConcept(final SModel languageEditor, final SNode concept, final SNode node, final IScope scope) {
    SNode editorDeclaration = ModelAccess.instance().runReadAction(new Computable<SNode>() {
      @Override
      public SNode compute() {
        return GoToEditorDeclarationHelper.findEditorDeclaration(languageEditor, concept);
      }
    });
    if (editorDeclaration != null) {
      return editorDeclaration;
    }
    String message = ModelAccess.instance().runReadAction(new Computable<String>() {
      @Override
      public String compute() {
        return "Concept \"" + node.getConcept().getQualifiedName() + "\" has no editor.\n" + "Create new editor?";
      }
    });
    int option = JOptionPane.showConfirmDialog(null, message, "Editor not found", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    if (option != JOptionPane.YES_OPTION) {
      return null;
    }
    return ModelAccess.instance().runWriteActionInCommand(new Computable<SNode>() {
      @Override
      public SNode compute() {
        return GoToEditorDeclarationHelper.createEditorDeclaration(concept, languageEditor, scope);
      }
    }, null);
  }

  public static SModel getOrCreateEditorAspect(final Language language, final SNode concept, final IScope scope) {
    final SModel languageEditor = LanguageAspect.EDITOR.get(language);
    if (languageEditor != null) {
      return languageEditor;
    }
    String message = "Language \"" + language.getModuleName() + "\" has no editor model.\n" + "Create new editor model?";
    int option = JOptionPane.showConfirmDialog(null, message, "Editor not found", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    if (option != JOptionPane.YES_OPTION) {
      return null;
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      @Override
      public void run() {
        LanguageAspect.EDITOR.createNew(language);
        GoToEditorDeclarationHelper.createEditorDeclaration(concept, LanguageAspect.EDITOR.get(language), scope);
      }
    });
    return LanguageAspect.EDITOR.get(language);
  }

  public static SNode findEditorDeclaration(SModel editorModel, final SNode conceptDeclaration) {
    return ListSequence.fromList(SModelOperations.getRoots(editorModel, "jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration")).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "conceptDeclaration", false) == conceptDeclaration;
      }
    });
  }

  public static SNode createEditorDeclaration(SNode conceptDeclaration, SModel editorModelDescriptor, IScope scope) {
    SModel editorModel = editorModelDescriptor;
    SNode result = SNodeFactoryOperations.createNewNode(editorModel, "jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration", null);
    SLinkOperations.setTarget(result, "conceptDeclaration", conceptDeclaration, false);
    SModelOperations.addRootNode(editorModel, result);
    return result;
  }
}
