package jetbrains.mps.ide.devkit.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.ui.dialogs.properties.choosers.CommonChoosers;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.project.dependency.VisibilityUtil;
import javax.swing.JOptionPane;
import java.awt.Frame;
import jetbrains.mps.smodel.SModelStereotype;

public class AddAccessoryModel_Action extends BaseAction {
  private static final Icon ICON = null;
  public AddAccessoryModel_Action() {
    super("Add Accessory Model", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.enable(event.getPresentation());
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSCommonDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("module", event.getData(MPSCommonDataKeys.CONTEXT_MODULE));
    if (MapSequence.fromMap(_params).get("module") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("ideaProject", event.getData(CommonDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("ideaProject") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("treeNode", event.getData(MPSCommonDataKeys.TREE_NODE));
    if (MapSequence.fromMap(_params).get("treeNode") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final Language language = ((Language) ((SModule) MapSequence.fromMap(_params).get("module")));
    final List<SModelReference> models = ListSequence.fromList(new ArrayList<SModelReference>());
    ModelAccess modelAccess = ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();

    modelAccess.runReadAction(new Runnable() {
      public void run() {
        List<SModel> descriptors = SModelRepository.getInstance().getModelDescriptors();
        ListSequence.fromList(models).addSequence(ListSequence.fromList(descriptors).select(new ISelector<SModel, SModelReference>() {
          public SModelReference select(SModel it) {
            return it.getReference();
          }
        }));
      }
    });
    final SModelReference result = CommonChoosers.showDialogModelChooser(((Project) MapSequence.fromMap(_params).get("ideaProject")), models, null);
    if (result == null) {
      return;
    }

    modelAccess.executeCommand(new Runnable() {
      public void run() {
        // see MPS-18743 
        MPSModuleRepository.getInstance().saveAll();

        LanguageDescriptor descriptor;
        descriptor = language.getModuleDescriptor();
        descriptor.getAccessoryModels().add(result);
        language.setLanguageDescriptor(descriptor);
        if (!(VisibilityUtil.isVisible(language, result.resolve(MPSModuleRepository.getInstance())))) {
          int res = JOptionPane.showConfirmDialog(((Frame) MapSequence.fromMap(_params).get("frame")), "<html>Model <b>" + SModelStereotype.withoutStereotype(result.getModelName()) + "</b> is added to accessories</html>\n\n" + "Do you want to automatically the module add to dependency?", "Add Dependency", JOptionPane.YES_NO_OPTION);
          if (res == JOptionPane.YES_OPTION) {
            SModel md = SModelRepository.getInstance().getModelDescriptor(result);
            language.addDependency(md.getModule().getModuleReference(), false);
          }
        }
        language.save();
      }
    });
  }
}
