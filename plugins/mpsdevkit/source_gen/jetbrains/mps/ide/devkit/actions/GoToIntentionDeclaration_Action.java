package jetbrains.mps.ide.devkit.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.intentions.IntentionExecutable;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.MPSModuleRepository;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class GoToIntentionDeclaration_Action extends BaseAction {
  private static final Icon ICON = null;
  private IntentionExecutable intention;

  public GoToIntentionDeclaration_Action(IntentionExecutable intention_par) {
    super("Go to Intention Declaration", "Go to declaration of this intention", ICON);
    this.intention = intention_par;
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "GoToIntentionDeclaration", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("myEditor", event.getData(MPSEditorDataKeys.EDITOR_CONTEXT));
    if (MapSequence.fromMap(_params).get("myEditor") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("myContext", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("myContext") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      ModelAccess.instance().runWriteInEDT(new Runnable() {
        public void run() {
          SNodeReference nodeRef = GoToIntentionDeclaration_Action.this.intention.getDescriptor().getIntentionNodeReference();
          SNode intentionNode = (nodeRef == null ? null : nodeRef.resolve(MPSModuleRepository.getInstance()));
          if (intentionNode == null) {
            Messages.showErrorDialog(ProjectHelper.toIdeaProject(((IOperationContext) MapSequence.fromMap(_params).get("myContext")).getProject()), "Could not find declaration for " + GoToIntentionDeclaration_Action.this.intention.getClass().getSimpleName() + " intention (" + GoToIntentionDeclaration_Action.this.intention.getClass().getName() + ")", "Intention Declaration");
          } else {
            NavigationSupport.getInstance().openNode(((IOperationContext) MapSequence.fromMap(_params).get("myContext")), intentionNode, true, true);
            NavigationSupport.getInstance().selectInTree(((IOperationContext) MapSequence.fromMap(_params).get("myContext")), intentionNode, false);
          }
        }
      });
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "GoToIntentionDeclaration", t);
      }
    }
  }

  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(intention_State((IntentionExecutable) this.intention));
    res.append("!");
    return res.toString();
  }

  public static String intention_State(IntentionExecutable object) {
    return object.toString();
  }

  protected static Logger LOG = LogManager.getLogger(GoToIntentionDeclaration_Action.class);
}
