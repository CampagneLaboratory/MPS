package jetbrains.mps.quickQueryLanguage.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.ide.findusages.model.scopes.FindUsagesScope;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import javax.swing.SwingUtilities;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class ReplaceByConditionDialog extends BaseQQDialog {
  public ReplaceByConditionDialog(Project project, SNode concept) {
    super("Modify Instances by condition", "&Modify", project, concept);
  }



  protected SNode createQuery(SNode concept) {
    return _quotation_createNode_6vpr30_a0a2((concept == null ? SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "1133920641626") : concept));
  }



  protected void executeQuery(final Project project, final Query query, final FindUsagesScope scope) {
    final Wrappers._T<SearchQuery> searchQuery = new Wrappers._T<SearchQuery>();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        searchQuery.value = QuickQueryUtils.createNodeInstancesSearchQuery(query, scope);
      }
    });
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        ProjectHelper.toIdeaProject(project).getComponent(ProjectPluginManager.class).getTool(RunReplacement_Tool.class).addTab(searchQuery.value, query, new Runnable() {
          public void run() {
            doTempModelDispose();
          }
        });
      }
    });
  }

  private static SNode _quotation_createNode_6vpr30_a0a2(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.quickQueryLanguage.structure.ReplaceModelQuery", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "conceptDeclaration", (SNode) parameter_1);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.quickQueryLanguage.structure.QueryReplace", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.addChild("body", quotedNode_5);
    quotedNode_2.addChild("replace", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.quickQueryLanguage.structure.QueryCondition", null, null, GlobalScope.getInstance(), false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_8, "value", "true");
    quotedNode_7.addChild("expression", quotedNode_8);
    quotedNode_6.addChild("statement", quotedNode_7);
    quotedNode_4.addChild("body", quotedNode_6);
    quotedNode_2.addChild("condition", quotedNode_4);
    return quotedNode_2;
  }
}
