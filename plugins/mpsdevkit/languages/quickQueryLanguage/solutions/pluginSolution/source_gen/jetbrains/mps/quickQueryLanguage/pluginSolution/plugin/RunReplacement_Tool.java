package jetbrains.mps.quickQueryLanguage.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.tool.GeneratedTabbedTool;
import javax.swing.Icon;
import com.intellij.icons.AllIcons;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindowAnchor;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.ide.findusages.view.icons.IconManager;
import jetbrains.mps.plugins.tool.IComponentDisposer;
import javax.swing.JComponent;

public class RunReplacement_Tool extends GeneratedTabbedTool {
  private static final Icon ICON = AllIcons.Toolwindows.ToolWindowFind;
  private Project myProject;

  public RunReplacement_Tool(Project project) {
    super(project, "Replacement", -1, ICON, ToolWindowAnchor.BOTTOM, true);
  }

  public void init(Project project) {
    super.init(project);
    RunReplacement_Tool.this.myProject = project;
  }

  public void closeTab(ReplacementView view) {
    RunReplacement_Tool.this.closeTab(view.getComponent());
  }

  public void addTab(final SearchQuery searchQuery, final Query query, final Runnable tempModelDisposer) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        final ReplacementView view = new ReplacementView(RunReplacement_Tool.this, RunReplacement_Tool.this.myProject, FindUtils.makeProvider(new QueryFinder(query, new _FunctionTypes._void_P0_E0() {
          public void invoke() {
          }
        })), searchQuery, query, tempModelDisposer);
        RunReplacement_Tool.this.addTab(view.getComponent(), "for " + query.getConcept(), IconManager.getIconForIHolder(searchQuery.getObjectHolder()), new IComponentDisposer<JComponent>() {
          public void disposeComponent(JComponent component) {
            view.dispose();
          }
        });
      }
    });
  }
}
