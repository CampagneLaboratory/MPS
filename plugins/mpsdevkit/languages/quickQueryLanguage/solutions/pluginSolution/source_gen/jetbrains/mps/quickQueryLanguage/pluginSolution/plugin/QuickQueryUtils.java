package jetbrains.mps.quickQueryLanguage.pluginSolution.plugin;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import java.util.Set;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.BootstrapLanguages;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.quickQueryLanguage.runtime.QueryExecutor;
import jetbrains.mps.classloading.ClassLoaderManager;

public class QuickQueryUtils {
  private static Logger LOG = LogManager.getLogger(QuickQueryUtils.class);


  public static SModel createTemporaryModelWithQuery(SNode query) {
    SNode conceptToFind = SLinkOperations.getTarget(query, "conceptDeclaration", false);

    SModel tempModel = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModuleWithSourceAndClassesGen());
    tempModel.addRootNode(query);

    ((SModelInternal) tempModel).addDevKit(MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("fbc25dd2-5da4-483a-8b19-70928e1b62d7")).getModuleReference());

    Set<Language> languagesForImport = SetSequence.fromSet(new HashSet<Language>());
    SetSequence.fromSet(languagesForImport).addElement(BootstrapLanguages.collectionsLanguage());
    SetSequence.fromSet(languagesForImport).addElement(SModelUtil.getDeclaringLanguage(conceptToFind));
    SetSequence.fromSet(languagesForImport).addElement((Language) MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("d745e97c-8235-4470-b086-ba3da1f4c03c")));
    for (Language language : SetSequence.fromSet(languagesForImport)) {
      ((AbstractModule) tempModel.getModule()).addDependency(language.getModuleReference(), false);

      ((AbstractModule) tempModel.getModule()).addUsedLanguage(language.getModuleReference());
      ((SModelInternal) tempModel).addLanguage(language.getModuleReference());
    }

    TemporaryModels.getInstance().addMissingModuleImports(tempModel);

    return tempModel;
  }



  public static Query loadCompiledQuery(SNode queryNode) {
    SModel tmpModel = queryNode.getModel();
    assert tmpModel != null;

    String queryClassFqName = SNodeOperations.getModelLongName(tmpModel) + "." + QueryExecutor.GENERATED_QUERY_NAME;

    ClassLoader temporaryModuleClassLoader = ClassLoaderManager.getInstance().getClassLoader(tmpModel.getModule());
    try {
      return (Query) Class.forName(queryClassFqName, true, temporaryModuleClassLoader).newInstance();
    } catch (ClassNotFoundException ignore) {
      LOG.warn("Exception on query loading", ignore);
    } catch (IllegalAccessException ignore) {
      LOG.warn("Exception on query loading", ignore);
    } catch (InstantiationException ignore) {
      LOG.warn("Exception on query loading", ignore);
    }
    return null;
  }
}
