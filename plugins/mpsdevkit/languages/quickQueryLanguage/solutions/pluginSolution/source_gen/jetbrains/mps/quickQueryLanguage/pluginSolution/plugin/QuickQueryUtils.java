package jetbrains.mps.quickQueryLanguage.pluginSolution.plugin;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.smodel.SModelInternal;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import java.util.Set;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.BootstrapLanguages;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.quickQueryLanguage.runtime.QueryExecutor;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.ide.findusages.model.scopes.FindUsagesScope;
import jetbrains.mps.ide.findusages.model.holders.NodeHolder;
import jetbrains.mps.project.Project;
import javax.swing.SwingUtilities;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.script.ScriptBuilder;
import jetbrains.mps.make.facet.IFacet;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.make.script.IScriptController;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.make.script.IOption;
import jetbrains.mps.make.script.IQuery;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.make.IMakeService;
import java.util.concurrent.Future;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.smodel.resources.ModelsToResources;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.concurrent.ExecutionException;

public class QuickQueryUtils {
  private static Logger LOG = LogManager.getLogger(QuickQueryUtils.class);


  public static SModel createTemporaryModelWithQuery(SNode query) {
    SNode conceptToFind = SLinkOperations.getTarget(query, "conceptDeclaration", false);

    SModel tempModel = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModuleWithSourceAndClassesGen());
    tempModel.addRootNode(query);

    ((SModelInternal) tempModel).addDevKit(PersistenceFacade.getInstance().createModuleReference("fbc25dd2-5da4-483a-8b19-70928e1b62d7(jetbrains.mps.devkit.general-purpose)"));

    Set<Language> languagesForImport = SetSequence.fromSet(new HashSet<Language>());
    SetSequence.fromSet(languagesForImport).addElement(BootstrapLanguages.collectionsLanguage());
    SetSequence.fromSet(languagesForImport).addElement(SModelUtil.getDeclaringLanguage(conceptToFind));
    SetSequence.fromSet(languagesForImport).addElement(ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("d745e97c-8235-4470-b086-ba3da1f4c03c(jetbrains.mps.quickQueryLanguage)"), Language.class));
    for (Language language : SetSequence.fromSet(languagesForImport)) {
      ((AbstractModule) tempModel.getModule()).addDependency(language.getModuleReference(), false);

      ((AbstractModule) tempModel.getModule()).addUsedLanguage(language.getModuleReference());
      ((SModelInternal) tempModel).addLanguage(language.getModuleReference());
    }

    TemporaryModels.getInstance().addMissingImports(tempModel);

    return tempModel;
  }



  public static Query loadCompiledQuery(SNode queryNode) {
    SModel tmpModel = queryNode.getModel();
    assert tmpModel != null;

    String queryClassFqName = SNodeOperations.getModelLongName(tmpModel) + "." + QueryExecutor.GENERATED_QUERY_NAME;

    ClassLoader temporaryModuleClassLoader = ClassLoaderManager.getInstance().getClassLoader(tmpModel.getModule());
    try {
      return (Query) Class.forName(queryClassFqName, true, temporaryModuleClassLoader).newInstance();
    } catch (ClassNotFoundException ignore) {
      LOG.warn("Exception on query loading", ignore);
    } catch (IllegalAccessException ignore) {
      LOG.warn("Exception on query loading", ignore);
    } catch (InstantiationException ignore) {
      LOG.warn("Exception on query loading", ignore);
    }
    return null;
  }



  public static SearchQuery createNodeInstancesSearchQuery(Query query, FindUsagesScope scope) {
    if (isNotEmptyString(query.getConcept())) {
      return new SearchQuery(new NodeHolder(SModelUtil.findConceptDeclaration(query.getConcept(), null)), scope);
    } else {
      return new SearchQuery(scope);
    }
  }



  public static boolean make(final Project project, final SModel model) {
    if (SwingUtilities.isEventDispatchThread()) {
      LOG.error("Must be called not from EDT", new IllegalStateException());
      return false;
    }

    IScript scr = new ScriptBuilder().withFacetNames(new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("jetbrains.mps.make.facets.JavaCompile"), new IFacet.Name("jetbrains.mps.make.facets.ReloadClasses"), new IFacet.Name("jetbrains.mps.make.facets.Make")).withFinalTarget(new ITarget.Name("jetbrains.mps.make.facets.Make.make")).toScript();
    IScriptController ctl = new IScriptController.Stub(new IConfigMonitor.Stub() {
      @Override
      public <T extends IOption> T relayQuery(IQuery<T> query) {
        return query.defaultOption();
      }
    }, new IJobMonitor.Stub());

    IOperationContext projectOperationContext = new ProjectOperationContext(project);
    MakeSession session = new MakeSession(projectOperationContext, null, true);
    if (IMakeService.INSTANCE.get().openNewSession(session)) {
      Future<IResult> future = IMakeService.INSTANCE.get().make(session, new ModelsToResources(projectOperationContext, Sequence.<SModel>singleton(model)).resources(false), scr, ctl);
      try {
        return future.get().isSucessful();
      } catch (InterruptedException e) {
        // todo: log 
      } catch (ExecutionException e) {
        // todo: log 
      }
    }
    return false;
  }

  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
