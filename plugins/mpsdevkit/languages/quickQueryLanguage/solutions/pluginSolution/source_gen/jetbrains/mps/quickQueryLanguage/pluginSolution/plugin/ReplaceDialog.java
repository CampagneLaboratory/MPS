package jetbrains.mps.quickQueryLanguage.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import jetbrains.mps.ide.embeddableEditor.EmbeddableEditor;
import jetbrains.mps.ide.findusages.view.optionseditor.components.ScopeEditor;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.mps.openapi.model.SNode;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.compiler.IClassesData;
import jetbrains.mps.ide.findusages.view.optionseditor.options.ScopeOptions;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.BootstrapLanguages;
import java.awt.Dimension;
import javax.swing.JComponent;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.kernel.model.SModelUtil;
import java.util.Collections;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.project.facets.JavaModuleOperations;
import jetbrains.mps.project.facets.JavaModuleFacet;
import jetbrains.mps.quickQueryLanguage.runtime.QueryExecutor;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.ide.findusages.model.holders.NodeHolder;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class ReplaceDialog extends BaseDialog {
  private EmbeddableEditor myEditor;
  private ScopeEditor myScope;
  private IOperationContext myContext;
  private SNode myNode;
  private JPanel myPanel = new JPanel(new BorderLayout());
  private boolean myDisposed = false;

  public ReplaceDialog(final SNode concept, final IOperationContext context, final Language language) {
    super(ProjectHelper.toMainFrame(context.getProject()), "Modify Instances by condition");
    this.myContext = context;
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        ReplaceDialog.this.myNode = _quotation_createNode_bs6rum_a0a0a2a6((concept == null ?
          SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "1133920641626") :
          concept
        ));
        ReplaceDialog.this.myEditor = new EmbeddableEditor(context.getProject(), new _FunctionTypes._void_P1_E0<SModel>() {
          public void invoke(SModel m) {
            m.addRootNode(myNode);
          }
        }, true) {
          @Override
          protected void processClassesData(IClassesData cd) {
            doProcessClassesData(cd);
          }
        };
        myEditor.editNode(myNode);
        ReplaceDialog.this.myScope = new ScopeEditor(new ScopeOptions());
        ReplaceDialog.this.myPanel.add(ReplaceDialog.this.myScope.getComponent(), BorderLayout.SOUTH);
      }
    });
    this.myEditor.addLanguageStructureModel(language);
    final Set<Language> languageList = SetSequence.fromSet(new HashSet<Language>());
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        language.getDependenciesManager().collectAllExtendedLanguages(languageList);
      }
    });

    for (Language extendedLanguage : languageList) {
      this.myEditor.addLanguageStructureModel(extendedLanguage);
    }
    this.myEditor.addLanguageStructureModel(BootstrapLanguages.collectionsLanguage());
    this.myPanel.add(this.myEditor.getComponenet(), BorderLayout.CENTER);
    this.setSize(new Dimension(500, 500));
    this.setModal(false);
  }

  @Override
  protected JComponent getMainComponent() {
    return this.myPanel;
  }

  @BaseDialog.Button(position = 0, name = "Modify", mnemonic = 'M', defaultButton = true)
  public void buttonReplace() {
    final Wrappers._T<Language> language = new Wrappers._T<Language>();
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        language.value = SModelUtil.getDeclaringLanguage(SNodeOperations.getConceptDeclaration(ReplaceDialog.this.myNode));
      }
    });
    // <node> 
    myEditor.make(Collections.<IClassPathItem>singleton(JavaModuleOperations.createClassPathItem(language.value.getFacet(JavaModuleFacet.class).getClassPath(), FindInstancesDialog.class.getName())));
  }

  private void doProcessClassesData(IClassesData cd) {
    if (cd == null) {
      return;
    }
    final Wrappers._T<SModel> model = new Wrappers._T<SModel>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        model.value = SNodeOperations.getModel(myNode);
      }
    });

    String fqName = jetbrains.mps.util.SNodeOperations.getModelLongName(model.value) + "." + QueryExecutor.GENERATED_QUERY_NAME;
    ClassLoader loader = cd.getClassLoader(QueryExecutor.class.getClassLoader());
    final Wrappers._T<Query> query = new Wrappers._T<Query>(null);
    try {
      query.value = (Query) Class.forName(fqName, true, loader).newInstance();
    } catch (ClassNotFoundException ignore) {
    } catch (IllegalAccessException ignore) {

    } catch (InstantiationException ignore) {
    }
    if (query.value == null) {
      return;
    }
    final IScope scope = this.myScope.getOptions().getScope(this.myContext, model.value);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ReplaceDialog.this.execute(ReplaceDialog.this.myContext.getProject(), query.value, SNodeOperations.cast(myNode, "jetbrains.mps.quickQueryLanguage.structure.BaseQuery"), scope);
      }
    });
    this.dispose();
  }

  @BaseDialog.Button(position = 1, name = "Cancel", mnemonic = 'C', defaultButton = false)
  public void buttonCancel() {
    this.dispose();
  }

  public void execute(Project project, Query query, final SNode queryNode, final IScope scope) {
    final Wrappers._T<SearchQuery> searchQuery = new Wrappers._T<SearchQuery>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        if (SLinkOperations.getTarget(queryNode, "conceptDeclaration", false) != null) {
          searchQuery.value = new SearchQuery(new NodeHolder(SLinkOperations.getTarget(queryNode, "conceptDeclaration", false)), scope);
        } else {
          searchQuery.value = new SearchQuery(scope);
        }
      }
    });
    ProjectHelper.toIdeaProject(project).getComponent(ProjectPluginManager.class).getTool(RunReplacement_Tool.class).addTab(searchQuery.value, query);
  }

  @Override
  public void dispose() {
    super.dispose();
    if (myDisposed) {
      return;
    }
    myDisposed = true;
    ModelAccess.instance().runWriteInEDT(new Runnable() {
      public void run() {
        myEditor.disposeEditor();
      }
    });
  }

  private static SNode _quotation_createNode_bs6rum_a0a0a2a6(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.quickQueryLanguage.structure.ReplaceModelQuery", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "conceptDeclaration", (SNode) parameter_1);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.quickQueryLanguage.structure.QueryReplace", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.addChild("body", quotedNode_5);
    quotedNode_2.addChild("replace", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.quickQueryLanguage.structure.QueryCondition", null, null, GlobalScope.getInstance(), false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_8, "value", "true");
    quotedNode_7.addChild("expression", quotedNode_8);
    quotedNode_6.addChild("statement", quotedNode_7);
    quotedNode_4.addChild("body", quotedNode_6);
    quotedNode_2.addChild("condition", quotedNode_4);
    return quotedNode_2;
  }
}
