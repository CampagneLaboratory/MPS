package jetbrains.mps.quickQueryLanguage.pluginSolution.plugin;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import jetbrains.mps.ide.embeddableEditor.SimpleEmbeddableEditor;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.module.ModelAccess;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.findusages.view.optionseditor.components.ScopeEditor;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.findusages.view.optionseditor.options.ScopeOptions;
import java.awt.Dimension;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.ide.findusages.model.scopes.FindUsagesScope;
import javax.swing.JComponent;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;

public abstract class BaseQQDialog extends DialogWrapper {
  private static Logger LOG = LogManager.getLogger(BaseQQDialog.class);

  private final JPanel myPanel = new JPanel(new BorderLayout());
  private SimpleEmbeddableEditor myEditor;

  private final Project myProject;
  private final ModelAccess myModelAccess;

  private SNode myQueryNode;
  private SModel myTempModel;

  private ScopeEditor myScope;
  private boolean myDisposed = false;


  public BaseQQDialog(String title, String okButtonText, Project project, final SNode concept) {
    super(ProjectHelper.toIdeaProject(project));

    setTitle(title);
    setOKButtonText(okButtonText);
    setCancelButtonText("&Cancel");
    setModal(false);

    myProject = project;
    myModelAccess = project.getRepository().getModelAccess();

    myProject.getRepository().getModelAccess().executeCommand(new Runnable() {
      public void run() {
        myScope = new ScopeEditor(new ScopeOptions());

        myQueryNode = createQuery(concept);
        myTempModel = QuickQueryUtils.createTemporaryModelWithQuery(myQueryNode);

        myEditor = new SimpleEmbeddableEditor(myProject, true);
        myEditor.editNode(myQueryNode);
      }
    });
    myPanel.add(this.myEditor, BorderLayout.CENTER);
    myPanel.add(this.myScope.getComponent(), BorderLayout.SOUTH);

    myPanel.setPreferredSize(new Dimension(500, 500));

    init();
  }



  protected abstract SNode createQuery(SNode concept);

  protected abstract void executeQuery(Project project, Query query, FindUsagesScope scope);



  @Override
  protected JComponent createCenterPanel() {
    return this.myPanel;
  }

  @Override
  public void doOKAction() {
    ProgressManager.getInstance().run(new Task.Modal(ProjectHelper.toIdeaProject(myProject), "Compiling", false) {
      public void run(@NotNull ProgressIndicator indicator) {
        final Project mpsProject = BaseQQDialog.this.myProject;

        boolean isSuccessful = QuickQueryUtils.make(mpsProject, myTempModel);
        if (isSuccessful) {
          if (myDisposed) {
            return;
          }

          myModelAccess.runReadAction(new Runnable() {
            public void run() {
              Query query = QuickQueryUtils.loadCompiledQuery(myQueryNode);

              if (query == null) {
                myModelAccess.runWriteInEDT(new Runnable() {
                  public void run() {
                    TemporaryModels.getInstance().dispose(myTempModel);
                  }
                });
                return;
              }

              FindUsagesScope scope = BaseQQDialog.this.myScope.getOptions().getScope(mpsProject);
              executeQuery(mpsProject, query, scope);

              // todo: keywords for thinking: re-run search, non-blocking executeQuery 
              myModelAccess.runWriteInEDT(new Runnable() {
                public void run() {
                  // this happens after query execution so hopefully after using Query object 
                  TemporaryModels.getInstance().dispose(myTempModel);
                }
              });
            }
          });
        } else {
          // todo: log 
        }
      }
    });

    super.doOKAction();
  }



  @Override
  protected String getDimensionServiceKey() {
    return "#" + this.getClass().getCanonicalName();
  }



  @Override
  public void dispose() {
    if (myDisposed) {
      return;
    }
    myDisposed = true;
    myProject.getRepository().getModelAccess().runWriteInEDT(new Runnable() {
      public void run() {
        myEditor.disposeEditor();
      }
    });
    super.dispose();
  }
}
