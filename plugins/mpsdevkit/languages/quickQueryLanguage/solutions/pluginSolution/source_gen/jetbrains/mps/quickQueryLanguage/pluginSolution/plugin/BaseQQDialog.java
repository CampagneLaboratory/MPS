package jetbrains.mps.quickQueryLanguage.pluginSolution.plugin;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import org.jetbrains.mps.openapi.module.ModelAccess;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.embeddableEditor.SimpleEmbeddableEditor;
import jetbrains.mps.ide.findusages.view.optionseditor.components.ScopeEditor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.findusages.view.optionseditor.options.ScopeOptions;
import java.awt.Dimension;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.ide.findusages.model.scopes.FindUsagesScope;
import javax.swing.JComponent;
import jetbrains.mps.ide.embeddableEditor.MakeUtils;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public abstract class BaseQQDialog extends DialogWrapper {
  private static Logger LOG = LogManager.getLogger(BaseQQDialog.class);

  private JPanel myPanel = new JPanel(new BorderLayout());
  private ModelAccess myModelAccess;
  private SModel myTempModel;
  private SimpleEmbeddableEditor myEditor;
  private ScopeEditor myScope;
  private SNode myNode;
  private boolean myDisposed = false;
  private Project myProject;


  public BaseQQDialog(String title, String okButtonText, Project project, final SNode concept) {
    super(ProjectHelper.toIdeaProject(project));
    this.setTitle(title);
    this.myModelAccess = project.getRepository().getModelAccess();
    this.setModal(false);
    this.setOKButtonText(okButtonText);
    this.setCancelButtonText("&Cancel");
    myProject = project;

    myModelAccess.executeCommand(new Runnable() {
      public void run() {
        myNode = createQuery(concept);
        myTempModel = QuickQueryUtils.createTemporaryModelWithQuery(myNode);

        myEditor = new SimpleEmbeddableEditor(myProject, true);
        myEditor.editNode(myNode);
      }
    });
    this.myPanel.add(this.myEditor, BorderLayout.CENTER);

    this.myScope = new ScopeEditor(new ScopeOptions());
    this.myPanel.add(this.myScope.getComponent(), BorderLayout.SOUTH);
    myPanel.setPreferredSize(new Dimension(500, 500));
    this.setModal(false);

    init();
  }



  protected abstract SNode createQuery(SNode concept);

  protected abstract void executeQuery(Project project, Query query, FindUsagesScope scope);



  @Override
  protected JComponent createCenterPanel() {
    return this.myPanel;
  }

  @Override
  public void doOKAction() {
    super.doOKAction();

    MakeUtils.make(myProject, myTempModel, new _FunctionTypes._void_P1_E0<Boolean>() {
      public void invoke(Boolean isSuccessful) {
        if (isSuccessful) {
          myModelAccess.runReadAction(new Runnable() {
            public void run() {
              Query query = QuickQueryUtils.loadCompiledQuery(myNode);
              if (query == null) {
                return;
              }

              FindUsagesScope scope = BaseQQDialog.this.myScope.getOptions().getScope(myProject);
              executeQuery(myProject, query, scope);
            }
          });
        } else {
          // todo: log 
        }
      }
    });
  }



  @Override
  protected String getDimensionServiceKey() {
    return "#" + this.getClass().getCanonicalName();
  }



  @Override
  public void dispose() {
    if (myDisposed) {
      return;
    }
    myDisposed = true;
    myModelAccess.runWriteInEDT(new Runnable() {
      public void run() {
        myEditor.disposeEditor();
        // todo: enable after modal in doOkAction! 
        // <node> 
      }
    });
    super.dispose();
  }
}
