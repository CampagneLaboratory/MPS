package jetbrains.mps.quickQueryLanguage.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.findusages.view.FindUtils;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class QueryFinder implements IFinder {
  private static Logger LOG = Logger.getLogger(QueryFinder.class);

  private Query myQuery;

  public QueryFinder(Query query) {
    this.myQuery = query;
  }

  public SearchResults find(SearchQuery searchQuery, ProgressMonitor monitor) {
    Object queryObject = searchQuery.getObjectHolder().getObject();
    assert queryObject instanceof SNode;
    SearchResults instances = FindUtils.getSearchResults(monitor, ((SNode) queryObject), searchQuery.getScope(), "jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder");
    List<SearchResult<SNode>> instancesList = instances.getSearchResults();
    Iterator<SearchResult<SNode>> it = ListSequence.fromList(instancesList).iterator();
    try {
      while (it.hasNext()) {
        SearchResult<SNode> current = it.next();
        if (!(this.myQuery.isSatisfies(current.getObject()))) {
          it.remove();
        }
      }
    } catch (Throwable t) {
      LOG.warning("Exception on search query execution", t);
    }
    return new SearchResults(instances.getSearchedNodes(), instancesList);
  }
}
