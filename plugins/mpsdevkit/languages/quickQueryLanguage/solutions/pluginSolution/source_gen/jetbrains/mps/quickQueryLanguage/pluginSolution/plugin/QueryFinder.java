package jetbrains.mps.quickQueryLanguage.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class QueryFinder implements IFinder {
  private static Logger LOG = LogManager.getLogger(QueryFinder.class);
  private Query myQuery;
  private _FunctionTypes._void_P0_E0 myDisposer;

  public QueryFinder(Query query, _FunctionTypes._void_P0_E0 queryDisposer) {
    // todo: this finder works only once 
    myQuery = query;
    myDisposer = queryDisposer;
  }

  @Override
  public SearchResults find(SearchQuery searchQuery, ProgressMonitor monitor) {
    Object queryObject = searchQuery.getObjectHolder().getObject();
    assert queryObject instanceof SNode;

    SearchResults<SNode> instances = FindUtils.getSearchResults(monitor, ((SNode) queryObject), searchQuery.getScope(), "jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder");

    SearchResults<SNode> results = new SearchResults<SNode>();
    results.getSearchedNodes().addAll(instances.getSearchedNodes());

    for (SearchResult<SNode> instance : ListSequence.fromList(instances.getSearchResults())) {
      try {
        if (this.myQuery.isSatisfies(instance.getObject())) {
          results.getSearchResults().add(instance);
        }
      } catch (Exception e) {
        LOG.warn("Exception on search query execution", e);
      }
    }

    myDisposer.invoke();

    return results;
  }
}
