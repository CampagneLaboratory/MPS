package jetbrains.mps.quickQueryLanguage.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class QueryFinder implements IFinder {
  private static Logger LOG = Logger.getLogger(QueryFinder.class);

  private Query myQuery;

  public QueryFinder(Query query) {
    this.myQuery = query;
  }

  public SearchResults find(SearchQuery searchQuery, ProgressMonitor monitor) {
    Object queryObject = searchQuery.getObjectHolder().getObject();
    assert queryObject instanceof SNode;

    SearchResults<SNode> instances = FindUtils.getSearchResults(monitor, ((SNode) queryObject), searchQuery.getScope(), "jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder");

    SearchResults<SNode> results = new SearchResults<SNode>();
    results.getSearchedNodes().addAll(instances.getSearchedNodes());

    for (SearchResult<SNode> instance : ListSequence.fromList(instances.getSearchResults())) {
      try {
        if (this.myQuery.isSatisfies(instance.getObject())) {
          results.getSearchResults().add(instance);
        }
      } catch (Exception e) {
        LOG.warning("Exception on search query execution", e);
      }
    }

    return results;
  }
}
