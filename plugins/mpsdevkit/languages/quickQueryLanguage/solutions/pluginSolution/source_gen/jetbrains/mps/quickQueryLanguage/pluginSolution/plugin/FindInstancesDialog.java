package jetbrains.mps.quickQueryLanguage.pluginSolution.plugin;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.mps.openapi.module.ModelAccess;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.embeddableEditor.SimpleEmbeddableEditor;
import jetbrains.mps.ide.findusages.view.optionseditor.components.ScopeEditor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.findusages.view.optionseditor.options.ScopeOptions;
import java.awt.Dimension;
import javax.swing.JComponent;
import jetbrains.mps.ide.embeddableEditor.MakeUtils;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.ide.findusages.model.scopes.FindUsagesScope;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.ide.findusages.model.holders.NodeHolder;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;
import jetbrains.mps.ide.findusages.view.FindUtils;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class FindInstancesDialog extends DialogWrapper {
  private static Logger LOG = LogManager.getLogger(QueryFinder.class);
  private JPanel myPanel = new JPanel(new BorderLayout());
  private IOperationContext myContext;
  private ModelAccess myModelAccess;
  private SModel myTempModel;
  private SimpleEmbeddableEditor myEditor;
  private ScopeEditor myScope;
  private SNode myNode;
  private boolean myDisposed = false;
  private Project myProject;


  public FindInstancesDialog(final SNode concept, IOperationContext context, SModule module) {
    super(ProjectHelper.toIdeaProject(context.getProject()));
    this.setTitle("Find Instances by condition");
    this.myContext = context;
    this.myModelAccess = context.getProject().getRepository().getModelAccess();
    this.setModal(false);
    this.setOKButtonText("&Find");
    this.setCancelButtonText("&Cancel");
    myProject = context.getProject();

    myModelAccess.executeCommand(new Runnable() {
      public void run() {
        myNode = _quotation_createNode_vfh0rq_a0a0a0a9a11((concept == null ?
          SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "1133920641626") :
          concept
        ));
        myTempModel = QuickQueryUtils.createTemporaryModelWithQuery(myNode);

        myEditor = new SimpleEmbeddableEditor(myProject, true);
        myEditor.editNode(myNode);
      }
    });
    this.myPanel.add(this.myEditor, BorderLayout.CENTER);

    myModelAccess.runReadAction(new Runnable() {
      public void run() {
        FindInstancesDialog.this.myScope = new ScopeEditor(new ScopeOptions());
        FindInstancesDialog.this.myPanel.add(FindInstancesDialog.this.myScope.getComponent(), BorderLayout.SOUTH);
      }
    });
    myPanel.setPreferredSize(new Dimension(500, 500));

    init();
  }

  @Override
  protected JComponent createCenterPanel() {
    return this.myPanel;
  }

  @Override
  public void doOKAction() {
    super.doOKAction();
    MakeUtils.make(myProject.getRepository(), myContext, myTempModel, new _FunctionTypes._void_P1_E0<Boolean>() {
      public void invoke(Boolean isSuccessful) {
        if (isSuccessful) {
          executeQuery();
        } else {
          // todo: log 
        }
      }
    });
  }

  @Override
  protected String getDimensionServiceKey() {
    return "#" + FindInstancesDialog.class.getCanonicalName();
  }

  private void executeQuery() {
    myModelAccess.runReadAction(new Runnable() {
      public void run() {
        Query query = QuickQueryUtils.loadCompiledQuery(myNode);
        if (query == null) {
          return;
        }

        final FindUsagesScope scope = FindInstancesDialog.this.myScope.getOptions().getScope(FindInstancesDialog.this.myContext, null);
        FindInstancesDialog.this.executeQuery(FindInstancesDialog.this.myContext.getProject(), query, SNodeOperations.cast(myNode, "jetbrains.mps.quickQueryLanguage.structure.BaseQuery"), scope);
      }
    });
  }

  public void executeQuery(Project project, Query query, final SNode queryNode, final IScope scope) {
    final Wrappers._T<SearchQuery> searchQuery = new Wrappers._T<SearchQuery>();
    myModelAccess.runReadAction(new Runnable() {
      public void run() {
        if (SLinkOperations.getTarget(queryNode, "conceptDeclaration", false) != null) {
          searchQuery.value = new SearchQuery(new NodeHolder(SLinkOperations.getTarget(queryNode, "conceptDeclaration", false)), scope);
        } else {
          searchQuery.value = new SearchQuery(scope);
        }
      }
    });
    UsagesViewTool tool = project.getComponent(UsagesViewTool.class);
    tool.findUsages(FindUtils.makeProvider(new QueryFinder(query)), searchQuery.value, true, true, false, "No usages for that node");
  }

  @Override
  public void dispose() {
    if (myDisposed) {
      return;
    }
    myDisposed = true;
    myModelAccess.runWriteInEDT(new Runnable() {
      public void run() {
        myEditor.disposeEditor();
        // todo: enable after modal in doOkAction! 
        // <node> 
      }
    });
    super.dispose();
  }

  private static SNode _quotation_createNode_vfh0rq_a0a0a0a9a11(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.quickQueryLanguage.structure.ModelQuery", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "conceptDeclaration", (SNode) parameter_1);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.quickQueryLanguage.structure.QueryCondition", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.addChild("body", quotedNode_4);
    quotedNode_2.addChild("condition", quotedNode_3);
    return quotedNode_2;
  }
}
