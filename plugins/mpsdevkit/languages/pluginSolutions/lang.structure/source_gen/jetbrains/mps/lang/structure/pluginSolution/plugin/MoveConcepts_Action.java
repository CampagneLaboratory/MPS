package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Level;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.ide.refactoring.SModelReferenceDialog;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import com.intellij.openapi.ui.Messages;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MoveConcepts_Action extends BaseAction {
  private static final Icon ICON = null;
  public MoveConcepts_Action() {
    super("Move Concepts", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "MoveConcepts", t);
      }
      this.disable(event.getPresentation());
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      List<SNode> nodes = event.getData(MPSCommonDataKeys.NODES);
      boolean error = false;
      if (nodes != null) {
        for (SNode node : ListSequence.fromList(nodes)) {
          if (!(SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")))) {
            error = true;
            break;
          }
        }
      }
      if (error || nodes == null) {
        MapSequence.fromMap(_params).put("target", null);
      } else {
        MapSequence.fromMap(_params).put("target", ListSequence.fromListWithValues(new ArrayList<SNode>(), nodes));
      }
    }
    if (MapSequence.fromMap(_params).get("target") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      if (!(MoveConcepts_Action.this.init(_params))) {
        return;
      }
      final SModelReference targetModelRef;
      List<SModelReference> myModels;
      myModels = ListSequence.fromList(((List<SModel>) (SModelRepository.getInstance().getModelDescriptors()))).select(new ISelector<SModel, SModelReference>() {
        public SModelReference select(SModel it) {
          return it.getReference();
        }
      }).where(new IWhereFilter<SModelReference>() {
        public boolean accept(SModelReference it) {
          return Language.getModelAspect(SModelRepository.getInstance().getModelDescriptor(it)) == LanguageAspect.STRUCTURE;
        }
      }).toListSequence();
      targetModelRef = SModelReferenceDialog.getSelectedModel(((MPSProject) MapSequence.fromMap(_params).get("project")).getProject(), myModels);
      if (targetModelRef == null) {
        return;
      }

      final SRepository repository = ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository();
      repository.getModelAccess().executeCommand(new Runnable() {
        public void run() {
          for (SNode node : ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get("target")))) {
            if (!(SNodeUtil.isAccessible(node, repository))) {
              return;
            }
          }
          SModel targetModel = targetModelRef.resolve(repository);
          if (targetModel == null) {
            return;
          }

          MoveConceptUtil.moveConcepts(((List<SNode>) MapSequence.fromMap(_params).get("target")), targetModel);
        }
      });
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "MoveConcepts", t);
      }
    }
  }
  private boolean init(final Map<String, Object> _params) {
    final Wrappers._boolean fromSameLangauge = new Wrappers._boolean(false);
    final Wrappers._boolean hasGenerator = new Wrappers._boolean(false);
    ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        final SModel model = SNodeOperations.getModel(ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get("target"))).first());
        fromSameLangauge.value = ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get("target"))).all(new IWhereFilter<SNode>() {
          public boolean accept(SNode node) {
            return SNodeOperations.getModel(node) == model;
          }
        });
        hasGenerator.value = ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get("target"))).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode node) {
            return ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_findGeneratorFragments_6409339300305625383(node)).isNotEmpty();
          }
        });
      }
    });
    if (!(fromSameLangauge.value)) {
      Messages.showErrorDialog("All concept should be from the same language.", "Move concepts");
      return false;
    }
    if (hasGenerator.value) {
      Messages.showWarningDialog("Generator fragments will not be moved.", "Move concepts");
    }
    return true;
  }
  protected static Logger LOG = LogManager.getLogger(MoveConcepts_Action.class);
}
