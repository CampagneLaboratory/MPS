package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.ide.actions.ContextHelpAction;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;

public class ShowDefaultHelp_Action extends BaseAction {
  private static final Icon ICON = null;
  public ShowDefaultHelp_Action() {
    super("Show Default Help", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
    this.addPlace(null);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    {
      HelpHelper.HelpType defaultHelp = HelpHelper.getDefaultHelpFor(((SModule) MapSequence.fromMap(_params).get("module")), ((SModel) MapSequence.fromMap(_params).get("model")), ((SNode) MapSequence.fromMap(_params).get("node")));
      if (defaultHelp == null) {
        ContextHelpAction contextHelpAction = new ContextHelpAction();
        contextHelpAction.update(event);
        if (event.getPresentation().isEnabled()) {
          return;
        }
        ShowDefaultHelp_Action.this.setEnabledState(event.getPresentation(), false);
        return;
      }
      ShowDefaultHelp_Action.this.setEnabledState(event.getPresentation(), true);
      event.getPresentation().setText("Show Help for " + NameUtil.capitalize(defaultHelp.getName()));
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModule p = event.getData(MPSCommonDataKeys.CONTEXT_MODULE);
      MapSequence.fromMap(_params).put("module", p);
    }
    {
      SModel p = event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
      MapSequence.fromMap(_params).put("model", p);
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      MapSequence.fromMap(_params).put("node", node);
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    if (HelpHelper.getDefaultHelpFor(((SModule) MapSequence.fromMap(_params).get("module")), ((SModel) MapSequence.fromMap(_params).get("model")), ((SNode) MapSequence.fromMap(_params).get("node"))) == null) {
      ContextHelpAction contextHelpAction = new ContextHelpAction();
      contextHelpAction.update(event);
      if (event.getPresentation().isEnabled()) {
        contextHelpAction.actionPerformed(event);
      }
      return;
    }
    HelpHelper.showHelpFor(((SModule) MapSequence.fromMap(_params).get("module")), ((SModel) MapSequence.fromMap(_params).get("model")), ((SNode) MapSequence.fromMap(_params).get("node")));
  }
  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append("ContextHelp");
    return res.toString();
  }
}
