package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ExtensionFunction;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.MetaAdapterByDeclaration;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.core.behavior.PropertyAttribute_Behavior;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.structure.BaseOverlappingExtension;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.structure.Extension;
import java.util.Collection;
import java.util.ArrayList;
import jetbrains.mps.smodel.language.ExtensionRegistry;
import jetbrains.mps.smodel.structure.ExtensionFunctionPoint;

public class MovePropertyUp implements ExtensionFunction.FunctionInstance<Void> {
  private MovePropertyUp.ExtensionFunction _myExtension;

  public MoveFeatureUp moveFeatureUp;

  public boolean applicable() {
    if (!(moveFeatureUp.applicable())) {
      return false;
    }

    final List<SNode> target = arg._0();
    MPSProject project = arg._1();
    final Wrappers._boolean result = new Wrappers._boolean();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        result.value = ListSequence.fromList(target).all(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, "jetbrains.mps.lang.structure.structure.PropertyDeclaration"));
          }
        });
      }
    });
    return result.value;
  }
  public Void apply() {
    moveFeatureUp.init();
    moveFeatureUp.project.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        moveFeatureUp.featureName = SPropertyOperations.getString(SNodeOperations.cast(moveFeatureUp.feature, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, "jetbrains.mps.lang.structure.structure.PropertyDeclaration")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
      }
    });
    moveFeatureUp.featureKind = "property";
    moveFeatureUp.execute(changePropertyInstances);
    return null;
  }

  private Tuples._2<List<SNode>, MPSProject> arg;


  public final _FunctionTypes._void_P0_E0 changePropertyInstances = new _FunctionTypes._void_P0_E0() {
    public void invoke() {
      final SProperty oldProp = MetaAdapterByDeclaration.getProperty(moveFeatureUp.feature);
      ListSequence.fromList(SLinkOperations.getChildren(moveFeatureUp.targetConcept, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0xf979c3ba6cL, "propertyDeclaration"))).addElement(SNodeOperations.cast(moveFeatureUp.feature, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, "jetbrains.mps.lang.structure.structure.PropertyDeclaration")));
      final SProperty newProp = MetaAdapterByDeclaration.getProperty(moveFeatureUp.feature);
      for (SNode node : SetSequence.fromSet(moveFeatureUp.instances)) {
        Iterable<? extends SNode> children = node.getChildren(MetaAdapterFactory.getContainmentLink(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x47bf8397520e5942L, "smodelAttribute"));
        Sequence.fromIterable(SNodeOperations.ofConcept(Sequence.fromIterable(children).ofType(SNode.class), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, "jetbrains.mps.lang.core.structure.PropertyAttribute"))).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return PropertyAttribute_Behavior.call_getProperty_1341860900488756504(it).equals(oldProp);
          }
        }).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            PropertyAttribute_Behavior.call_setProperty_7714691473529670203(it, newProp);
          }
        });

        String value = node.getProperty(oldProp);
        node.setProperty(newProp, value);
        node.setProperty(oldProp, null);
      }
    }
  };


  public static class ExtensionFunction extends BaseOverlappingExtension<Tuples._2<List<SNode>, MPSProject>, Void> {
    public ExtensionFunction() {
      super("jetbrains.mps.ide.platform.MoveNodesAction");
    }
    public MovePropertyUp instantiate(Tuples._2<List<SNode>, MPSProject> arg) {
      MovePropertyUp result = new MovePropertyUp();
      result.arg = arg;
      result._myExtension = this;
      result.moveFeatureUp = Sequence.fromIterable(getAllExtensions()).select(new ISelector<Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>, jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>() {
        public jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void> select(Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> it) {
          return it.get();
        }
      }).where(new IWhereFilter<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>() {
        public boolean accept(jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void> it) {
          return it instanceof jetbrains.mps.lang.structure.pluginSolution.plugin.MoveFeatureUp.ExtensionFunction;
        }
      }).select(new ISelector<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>, jetbrains.mps.lang.structure.pluginSolution.plugin.MoveFeatureUp.ExtensionFunction>() {
        public jetbrains.mps.lang.structure.pluginSolution.plugin.MoveFeatureUp.ExtensionFunction select(jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void> it) {
          return ((jetbrains.mps.lang.structure.pluginSolution.plugin.MoveFeatureUp.ExtensionFunction) it);
        }
      }).first().instantiate(arg);
      return result;
    }
    @Override
    public Collection<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> getOverridden() {
      List<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> result = ListSequence.fromList(new ArrayList<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>());
      Iterable<Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>> extensions = getAllExtensions();
      ListSequence.fromList(result).addElement(Sequence.fromIterable(extensions).where(new IWhereFilter<Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>>() {
        public boolean accept(Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> it) {
          return it instanceof jetbrains.mps.lang.structure.pluginSolution.plugin.MoveFeatureUp.ExtensionFunction;
        }
      }).first().get());
      return result;
    }
    public Iterable<Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>> getAllExtensions() {
      return ExtensionRegistry.getInstance().getExtensions(new ExtensionFunctionPoint<Tuples._2<List<SNode>, MPSProject>, Void>(getExtensionPointId()));
    }
    @Override
    public jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void> get() {
      return this;
    }
  }
}
