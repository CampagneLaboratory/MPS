package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.model.SearchResults;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.project.MPSProject;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.ide.platform.refactoring.RefactoringAccessEx;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewAction;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewItem;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.refactoring.RefactoringViewItemImpl;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.HashSet;

public class RefactoringUtil {

  private static SearchResults<SNode> nodesToRefactoringResult(Iterable<SNode> nodes, final String category) {
    final SearchResults<SNode> result = new SearchResults<SNode>();
    Sequence.fromIterable(nodes).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        result.getSearchResults().add(new SearchResult<SNode>(it, category));
      }
    });
    return result;
  }

  public static void changeReferences(final MPSProject mpsProject, final Set<SReference> usages, final SNode newTarget, final _FunctionTypes._void_P0_E0 executeBefore, String name) {
    List<SNode> nodesToShow = SetSequence.fromSet(usages).select(new ISelector<SReference, SNode>() {
      public SNode select(SReference it) {
        return it.getSourceNode();
      }
    }).toListSequence();
    refactor(mpsProject, nodesToShow, new _FunctionTypes._void_P1_E0<Set<SNode>>() {
      public void invoke(final Set<SNode> included) {
        executeBefore.invoke();
        SetSequence.fromSet(usages).where(new IWhereFilter<SReference>() {
          public boolean accept(SReference it) {
            return SetSequence.fromSet(included).contains(it.getSourceNode());
          }
        }).visitAll(new IVisitor<SReference>() {
          public void visit(SReference usage) {
            usage.getSourceNode().setReferenceTarget(usage.getLink(), newTarget);
          }
        });
      }
    }, name);
  }

  public static void refactor(final MPSProject mpsProject, final Iterable<SNode> nodes, final _FunctionTypes._void_P1_E0<? super Set<SNode>> toExecuteWithIncluded, String name) {
    SearchResults sr = nodesToRefactoringResult(nodes, "References");
    RefactoringAccessEx.getInstance().showRefactoringView(mpsProject.getProject(), new RefactoringViewAction() {
      public void performAction(final RefactoringViewItem refactoringViewItem) {
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            Iterable<SNode> includedNodes;
            if (refactoringViewItem instanceof RefactoringViewItemImpl) {
              List<SNodeReference> nodeRefs = as_40hv3l_a0a0a0a1a0a0a0a0a0a0b0a1a5(refactoringViewItem, RefactoringViewItemImpl.class).getUsagesView().getIncludedResultNodes();
              includedNodes = ListSequence.fromList(nodeRefs).select(new ISelector<SNodeReference, SNode>() {
                public SNode select(SNodeReference it) {
                  return it.resolve(mpsProject.getRepository());
                }
              });
            } else {
              includedNodes = nodes;
            }
            toExecuteWithIncluded.invoke(SetSequence.fromSetWithValues(new HashSet<SNode>(), Sequence.fromIterable(includedNodes).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return it != null;
              }
            })));
          }
        });
        refactoringViewItem.close();
      }
    }, sr, false, name);
  }
  private static <T> T as_40hv3l_a0a0a0a1a0a0a0a0a0a0b0a1a5(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
