package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.MoveNodeRefactoringParticipant;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.platform.actions.core.RefactoringSession;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.SModelInternal;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.ArrayList;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.lang.migration.util.util.NodeReferenceUtil;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import java.util.List;
import jetbrains.mps.ide.platform.actions.core.RefactoringParticipant;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchResult;
import org.jetbrains.mps.openapi.module.SModule;

public abstract class LanguageStructureMigrationParticipant<I, F> implements MoveNodeRefactoringParticipant<Tuples._2<Language, I>, Tuples._2<Language, F>>, MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<Tuples._2<Language, I>, Tuples._2<Language, F>> {

  public abstract Tuples._2<Language, I> beforeMove(SNode nodeToMove);

  public abstract Tuples._2<Language, F> afterMove(SNode movedNode);

  public MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<Tuples._2<Language, I>, Tuples._2<Language, F>> getDataCollector() {
    return this;
  }

  public static class MigrationBuilder {
    private static final String myId = "refactoringSession.migrationBuilder";
    public static LanguageStructureMigrationParticipant.MigrationBuilder getBuilder(RefactoringSession session, Language module) {
      Map<SModuleReference, LanguageStructureMigrationParticipant.MigrationBuilder> moduleBuilders = (Map<SModuleReference, LanguageStructureMigrationParticipant.MigrationBuilder>) session.getObject(LanguageStructureMigrationParticipant.MigrationBuilder.myId);
      if (moduleBuilders == null) {
        moduleBuilders = MapSequence.fromMap(new HashMap<SModuleReference, LanguageStructureMigrationParticipant.MigrationBuilder>());
        session.putObject(LanguageStructureMigrationParticipant.MigrationBuilder.myId, moduleBuilders);
      }

      LanguageStructureMigrationParticipant.MigrationBuilder builder = MapSequence.fromMap(moduleBuilders).get(module.getModuleReference());
      if (builder == null) {
        builder = new LanguageStructureMigrationParticipant.MigrationBuilder(session, module);
        MapSequence.fromMap(moduleBuilders).put(module.getModuleReference(), builder);
      }
      return builder;
    }
    private SNode myRefactoringStep;
    public MigrationBuilder(RefactoringSession session, final Language language) {
      final int languageVersion = language.getLanguageVersion();
      myRefactoringStep = createRefactoringStep_kz6lmo_a0b0d7(languageVersion, "RefactoringLog_" + languageVersion);
      session.registerChange(new Runnable() {
        public void run() {
          SModel migrationModel = LanguageAspect.MIGRATION.getOrCreate(language);
          SModelInternal sm = (SModelInternal) (SModel) migrationModel;
          for (SModelReference reference : ListSequence.fromList(SNodeOperations.getNodeDescendants(myRefactoringStep, null, true, new SAbstractConcept[]{})).translate(new ITranslator2<SNode, SReference>() {
            public Iterable<SReference> translate(SNode it) {
              return SNodeOperations.getReferences(it);
            }
          }).select(new ISelector<SReference, SModelReference>() {
            public SModelReference select(SReference it) {
              return it.getTargetSModelReference();
            }
          }).distinct()) {
            if (!(ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<jetbrains.mps.smodel.SModel.ImportElement>(), sm.importedModels())).select(new ISelector<jetbrains.mps.smodel.SModel.ImportElement, SModelReference>() {
              public SModelReference select(jetbrains.mps.smodel.SModel.ImportElement it) {
                return it.getModelReference();
              }
            }).contains(reference))) {
              sm.addModelImport(reference, true);
            }
          }
          sm.addLanguage(MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0x9882f4ad195546feL, 0x826994189e5dbbf2L), "jetbrains.mps.lang.migration.util"));
          SModelOperations.addRootNode(migrationModel, myRefactoringStep);
          language.setLanguageVersion(languageVersion + 1);
        }
      });
    }
    public void addPart(SNode initialStateNode, SNode finalStateNode, SNode specialization) {
      ListSequence.fromList(SLinkOperations.getChildren(myRefactoringStep, MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5836cabbL, 0x67236d4a5836d7f3L, "part"))).addElement(createMoveNode_kz6lmo_a0a0a4h(SNodeOperations.cast(HUtil.copyIfNecessary(NodeReferenceUtil.makeReflection(initialStateNode)), MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1648ccL, "jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")), SNodeOperations.cast(HUtil.copyIfNecessary(NodeReferenceUtil.makeReflection(initialStateNode)), MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1648ccL, "jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")), SNodeOperations.cast(HUtil.copyIfNecessary(specialization), MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c165c5dL, "jetbrains.mps.lang.migration.util.structure.MoveNodeSpecialization"))));
    }
    private static SNode createRefactoringStep_kz6lmo_a0b0d7(Object p0, Object p1) {
      PersistenceFacade facade = PersistenceFacade.getInstance();
      SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5836cabbL, "jetbrains.mps.lang.migration.util.structure.RefactoringStep"), null, null, false);
      n1.setProperty(MetaAdapterFactory.getProperty(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5836cabbL, 0x67236d4a5836cabcL, "fromVersion"), p0 + "");
      n1.setProperty(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), p1 + "");
      return n1;
    }
    private static SNode createMoveNode_kz6lmo_a0a0a4h(Object p0, Object p1, Object p2) {
      PersistenceFacade facade = PersistenceFacade.getInstance();
      SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, "jetbrains.mps.lang.migration.util.structure.MoveNode"), null, null, false);
      if (p0 != null) {
        n1.addChild(MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x67236d4a58343d15L, "fromNode"), (SNode) p0);
      }
      if (p1 != null) {
        n1.addChild(MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x67236d4a58343d17L, "toNode"), (SNode) p1);
      }
      if (p2 != null) {
        n1.addChild(MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x2b3f57492c165c59L, "specialization"), (SNode) p2);
      }
      return n1;
    }
  }

  public List<RefactoringParticipant.Change<Tuples._2<Language, I>, Tuples._2<Language, F>>> getChanges(final Tuples._2<Language, I> initialState, SRepository repository, SearchScope searchScope) {
    if (initialState._1() == null) {
      return ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<Tuples._2<Language, I>, Tuples._2<Language, F>>>());
    }
    final Language sourceModule = initialState._0();

    final SearchResults results = new SearchResults();
    results.add(new SearchResult<SModule>(sourceModule, "migration script"));

    // todo: write guard migration with 'execute after' 

    RefactoringParticipant.Change<Tuples._2<Language, I>, Tuples._2<Language, F>> change = new RefactoringParticipant.Change<Tuples._2<Language, I>, Tuples._2<Language, F>>() {
      public SearchResults getSearchResults() {
        return results;
      }
      public boolean needsToPreserveOldNode() {
        return true;
      }
      public void confirm(Tuples._2<Language, F> finalState, SRepository repository, RefactoringSession refactoringSession) {
        LanguageStructureMigrationParticipant.this.confirm(initialState, finalState, refactoringSession);
      }
    };
    return ListSequence.fromListAndArray(new ArrayList<RefactoringParticipant.Change<Tuples._2<Language, I>, Tuples._2<Language, F>>>(), change);
  }
  public abstract void confirm(Tuples._2<Language, I> initialState, Tuples._2<Language, F> finalState, RefactoringSession refactoringSession);
}
