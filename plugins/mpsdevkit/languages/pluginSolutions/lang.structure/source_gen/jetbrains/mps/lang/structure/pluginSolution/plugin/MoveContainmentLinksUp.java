package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.Extension;
import jetbrains.mps.smodel.structure.ExtensionFunction;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.ide.platform.actions.core.MoveNodesDefault;
import jetbrains.mps.smodel.language.ExtensionRegistry;
import jetbrains.mps.smodel.structure.ExtensionFunctionPoint;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class MoveContainmentLinksUp extends Extension.Default<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> {
  public MoveContainmentLinksUp() {
    super("jetbrains.mps.ide.platform.MoveNodesAction");
  }
  private ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void> myFunction = new ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>() {
    @Override
    public Collection<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> getOverridden() {
      List<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> result = ListSequence.fromList(new ArrayList<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>());
      Iterable<Extension<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>> extensions = getAllExtensions();
      ListSequence.fromList(result).addElement(Sequence.fromIterable(extensions).where(new IWhereFilter<Extension<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>>() {
        public boolean accept(Extension<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> it) {
          return it instanceof MoveNodesDefault;
        }
      }).first().get());
      return result;
    }
    public Iterable<Extension<ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>> getAllExtensions() {
      return ExtensionRegistry.getInstance().getExtensions(new ExtensionFunctionPoint<Tuples._2<List<SNode>, MPSProject>, Void>(getExtensionPointId()));
    }
    public boolean applicable(Tuples._2<List<SNode>, MPSProject> arg) {
      final List<SNode> target = arg._0();
      MPSProject project = arg._1();
      final Wrappers._boolean result = new Wrappers._boolean();
      project.getRepository().getModelAccess().runReadAction(new Runnable() {
        public void run() {
          result.value = ListSequence.fromList(target).any(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")) && SPropertyOperations.hasValue(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf980556927L, "metaClass"), "aggregation", "reference");
            }
          });
        }
      });
      return result.value;
    }
    public Void apply(Tuples._2<List<SNode>, MPSProject> arg) {
      throw new UnsupportedOperationException();
    }
  };

  public ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void> get() {
    return myFunction;
  }
}
