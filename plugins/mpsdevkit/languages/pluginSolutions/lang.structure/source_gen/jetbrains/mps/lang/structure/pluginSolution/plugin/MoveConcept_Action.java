package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Level;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.model.SModelReference;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.ide.refactoring.SModelReferenceDialog;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MoveConcept_Action extends BaseAction {
  private static final Icon ICON = null;
  public MoveConcept_Action() {
    super("Move Concept", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "MoveConcept", t);
      }
      this.disable(event.getPresentation());
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node != null) {
        if (!(SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")))) {
          node = null;
        }
      }
      MapSequence.fromMap(_params).put("concept", node);
    }
    if (MapSequence.fromMap(_params).get("concept") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final SModelReference targetModelReference;
      List<SModelReference> myModels;
      myModels = ListSequence.fromList(((List<SModel>) (SModelRepository.getInstance().getModelDescriptors()))).select(new ISelector<SModel, SModelReference>() {
        public SModelReference select(SModel it) {
          return it.getReference();
        }
      }).where(new IWhereFilter<SModelReference>() {
        public boolean accept(SModelReference it) {
          return Language.getModelAspect(SModelRepository.getInstance().getModelDescriptor(it)) == LanguageAspect.STRUCTURE;
        }
      }).toListSequence();
      targetModelReference = SModelReferenceDialog.getSelectedModel(((MPSProject) MapSequence.fromMap(_params).get("project")).getProject(), myModels);
      if (targetModelReference == null) {
        return;
      }



      final SRepository repository = ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository();
      ModelAccess modelAccess = repository.getModelAccess();

      final Wrappers._T<SModel> targetModel = new Wrappers._T<SModel>();
      repository.getModelAccess().runReadInEDT(new Runnable() {
        public void run() {
          if (!(SNodeUtil.isAccessible(((SNode) MapSequence.fromMap(_params).get("concept")), repository))) {
            return;
          }
          targetModel.value = targetModelReference.resolve(repository);
          if (targetModel.value == null) {
            return;
          }
        }
      });

      modelAccess.executeCommandInEDT(new Runnable() {
        public void run() {
          MoveConceptUtil.moveConcept(((SNode) MapSequence.fromMap(_params).get("concept")), targetModel.value);
        }
      });
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "MoveConcept", t);
      }
    }
  }
  protected static Logger LOG = LogManager.getLogger(MoveConcept_Action.class);
}
