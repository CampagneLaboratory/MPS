package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Set;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.ide.refactoring.MoveUpDialog;

public interface MoveNodesUI {

  public static   enum WhetherWriteMigration {
    LOCALLY(),
    WRITE_MIGRATION(),
    CANCEL();

  }
  public void showErrorDialog(MPSProject project, String text, String header);
  public void showWarningDialog(MPSProject project, String text, String header);
  public SNode askTargetConcept(MPSProject project, SNode conceptFeature, String featureKind);
  public MoveNodesUI.WhetherWriteMigration askAboutMigration(MPSProject project);
  public void showRefactoringViewAndRefactorSelected(MPSProject project, Iterable<SNode> nodes, final _FunctionTypes._void_P1_E0<? super Set<SNode>> toExecuteWithIncluded, String header);


  public static class MoveNodesUIImpl implements MoveNodesUI {

    public static MoveNodesUI getIsntance() {
      return new MoveNodesUI.MoveNodesUIImpl();
    }

    public void showErrorDialog(MPSProject project, String text, String header) {
      Messages.showErrorDialog(project.getProject(), text, header);
    }
    public void showWarningDialog(MPSProject project, String text, String header) {
      Messages.showWarningDialog(project.getProject(), text, header);
    }
    public SNode askTargetConcept(MPSProject project, SNode conceptFeature, String featureKind) {
      return MoveUpDialog.getConcept(project.getProject(), conceptFeature, featureKind);
    }
    public MoveNodesUI.WhetherWriteMigration askAboutMigration(MPSProject project) {
      int result = Messages.showYesNoCancelDialog(project.getProject(), "Do you want to run the refactoring locally?", "Execute Refactoring", "Run locally", "Write migration", "Cancel", null);
      switch (result) {
        case Messages.YES:
          return MoveNodesUI.WhetherWriteMigration.LOCALLY;
        case Messages.NO:
          return MoveNodesUI.WhetherWriteMigration.WRITE_MIGRATION;
        case Messages.CANCEL:
          return MoveNodesUI.WhetherWriteMigration.CANCEL;
        default:
          throw new IllegalStateException("showYesNoCancelDialog returned " + result);
      }
    }
    public void showRefactoringViewAndRefactorSelected(MPSProject project, Iterable<SNode> nodes, final _FunctionTypes._void_P1_E0<? super Set<SNode>> toExecuteWithIncluded, String header) {
      RefactoringViewUtil.refactor(project, nodes, toExecuteWithIncluded, header);
    }

  }
}
