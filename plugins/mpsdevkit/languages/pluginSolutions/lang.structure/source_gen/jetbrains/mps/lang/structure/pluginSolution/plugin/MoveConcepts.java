package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.MoveNodesRefactoring;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.refactoring.SModelReferenceDialog;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import org.jetbrains.mps.openapi.model.SModel;

public class MoveConcepts implements MoveNodesRefactoring {


  public String getName() {
    return "Move Concepts";
  }
  public boolean isApplicable(MPSProject project, final List<SNode> target) {
    final Wrappers._boolean result = new Wrappers._boolean();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        result.value = ListSequence.fromList(target).all(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")) && SNodeOperations.getModel(it) == SNodeOperations.getModel(ListSequence.fromList(target).first());
          }
        });
      }
    });
    return result.value;
  }
  public void apply(final MPSProject project, List<SNode> target) {
    final List<SNode> conceptsToMove = (List<SNode>) target;
    MoveNodesUI moveNodesUI = MoveNodesUI.MoveNodesUIImpl.getIsntance();

    final Wrappers._boolean hasGenerator = new Wrappers._boolean(false);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        hasGenerator.value = ListSequence.fromList(conceptsToMove).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode node) {
            return ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_findGeneratorFragments_6409339300305625383(node)).isNotEmpty();
          }
        });
      }
    });
    if (hasGenerator.value) {
      moveNodesUI.showWarningDialog(project, "Generator fragments will not be moved.", "Move concepts");
    }

    final Wrappers._T<List<SModelReference>> structureModels = new Wrappers._T<List<SModelReference>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        Iterable<SModule> modules = project.getRepository().getModules();
        structureModels.value = Sequence.fromIterable(modules).ofType(Language.class).select(new ISelector<Language, SModelReference>() {
          public SModelReference select(Language it) {
            return it.getStructureModelDescriptor().getReference();
          }
        }).toListSequence();
      }
    });
    final SModelReference targetModelRef = SModelReferenceDialog.getSelectedModel(project.getProject(), structureModels.value);
    if (targetModelRef == null) {
      return;
    }

    final MoveNodesUI.WhetherWriteMigration writeMigration = moveNodesUI.askAboutMigration(project);

    if (writeMigration == MoveNodesUI.WhetherWriteMigration.CANCEL) {
      return;
    }

    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        for (SNode concept : ListSequence.fromList(conceptsToMove)) {
          if (!(SNodeUtil.isAccessible(concept, project.getRepository()))) {
            return;
          }
        }
        SModel targetModel = targetModelRef.resolve(project.getRepository());
        if (targetModel == null) {
          return;
        }

        if (writeMigration == MoveNodesUI.WhetherWriteMigration.WRITE_MIGRATION) {
          MoveConceptUtil.moveConcepts(conceptsToMove, targetModel);
        }
        if (writeMigration == MoveNodesUI.WhetherWriteMigration.LOCALLY) {
          throw new UnsupportedOperationException();
        }
      }
    });

  }

}
