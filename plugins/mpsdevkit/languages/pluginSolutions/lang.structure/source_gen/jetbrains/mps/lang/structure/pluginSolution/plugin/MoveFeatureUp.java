package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.MoveNodesDefault;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.ide.refactoring.MoveUpDialog;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.ide.platform.refactoring.NodeLocation;
import java.util.HashMap;
import jetbrains.mps.smodel.structure.Extension;
import jetbrains.mps.ide.platform.actions.core.MoveNodesRefactoring;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class MoveFeatureUp extends MoveNodesDefault {
  private String myName;
  private String myKind;
  private _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> myApplicableToConceptFeature;
  public MoveFeatureUp(String name, String kind, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> applicableToConceptFeature) {
    myName = name;
    myKind = kind;
    myApplicableToConceptFeature = applicableToConceptFeature;
  }
  public String getName() {
    return myName;
  }
  public String getKind() {
    return myKind;
  }
  public boolean isApplicable(MPSProject project, final List<SNode> nodesToMove) {
    if (!(super.isApplicable(project, nodesToMove))) {
      return false;
    }
    final Wrappers._boolean result = new Wrappers._boolean();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        result.value = myApplicableToConceptFeature.invoke(ListSequence.fromList(nodesToMove).first());
      }
    });
    return result.value;
  }
  public void apply(final MPSProject project, List<SNode> nodesToMove) {
    final String featureKind = this.getKind();

    if (ListSequence.fromList(nodesToMove).count() > 1) {
      Messages.showErrorDialog(project.getProject(), "Moving multiple concept elements is not supported.\n" + "Please, select single " + featureKind + ".", "Select single " + featureKind + ".");
      return;
    }

    SNode feature = SNodeOperations.cast(ListSequence.fromList(nodesToMove).first(), MetaAdapterFactory.getInterfaceConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x11d2ea63881L, "jetbrains.mps.lang.structure.structure.IStructureDeprecatable"));
    final SNode targetConcept = MoveUpDialog.getConcept(project, feature, featureKind);
    if (targetConcept == null) {
      return;
    }

    MoveNodesDefault.doMove(project, MapSequence.<SNodeReference, NodeLocation>fromMapAndKeysArray(new HashMap<SNodeReference, NodeLocation>(), feature.getReference()).withValues(new NodeLocation.NodeLocationChild(targetConcept, feature.getContainmentLink())), null);
  }
  public static class MovePropertyUp_extension extends Extension.Default<MoveNodesRefactoring> {
    public MovePropertyUp_extension() {
      super("jetbrains.mps.ide.platform.MoveNodesAction");
    }
    public MoveNodesRefactoring get() {
      return new MoveFeatureUp("Move Property Up", "property", new _FunctionTypes._return_P1_E0<Boolean, SNode>() {
        public Boolean invoke(SNode conceptFeature) {
          return SNodeOperations.hasRole(conceptFeature, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0xf979c3ba6cL, "propertyDeclaration"));
        }
      });
    }
  }
  public static class MoveContainmentLinkUp_extension extends Extension.Default<MoveNodesRefactoring> {
    public MoveContainmentLinkUp_extension() {
      super("jetbrains.mps.ide.platform.MoveNodesAction");
    }
    public MoveNodesRefactoring get() {
      return new MoveFeatureUp("Move Link Up", "link", new _FunctionTypes._return_P1_E0<Boolean, SNode>() {
        public Boolean invoke(SNode conceptFeature) {
          return SNodeOperations.hasRole(conceptFeature, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0xf979c3ba6bL, "linkDeclaration")) && SPropertyOperations.hasValue(SNodeOperations.cast(conceptFeature, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf980556927L, "metaClass"), "aggregation", "reference");
        }
      });
    }
  }
  public static class MoveRefrenceLinkUp_extension extends Extension.Default<MoveNodesRefactoring> {
    public MoveRefrenceLinkUp_extension() {
      super("jetbrains.mps.ide.platform.MoveNodesAction");
    }
    public MoveNodesRefactoring get() {
      return new MoveFeatureUp("Move Link Up", "link", new _FunctionTypes._return_P1_E0<Boolean, SNode>() {
        public Boolean invoke(SNode conceptFeature) {
          return SNodeOperations.hasRole(conceptFeature, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0xf979c3ba6bL, "linkDeclaration")) && SPropertyOperations.hasValue(SNodeOperations.cast(conceptFeature, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf980556927L, "metaClass"), "reference", "reference");
        }
      });
    }
  }
}
