package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ExtensionFunction;
import jetbrains.mps.ide.platform.actions.core.MoveNodesDefault;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.ide.refactoring.MoveUpDialog;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.project.GlobalScope;
import java.util.Collections;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.smodel.structure.BaseOverlappingExtension;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.structure.Extension;
import java.util.Collection;
import java.util.ArrayList;
import jetbrains.mps.smodel.language.ExtensionRegistry;
import jetbrains.mps.smodel.structure.ExtensionFunctionPoint;

public class MoveFeatureUp implements ExtensionFunction.FunctionInstance<Void> {
  private MoveFeatureUp.ExtensionFunction _myExtension;

  public MoveNodesDefault moveDefault;

  public boolean applicable() {
    if (!(moveDefault.applicable())) {
      return false;
    }

    final List<SNode> target = arg._0();
    MPSProject project = arg._1();
    final Wrappers._boolean result = new Wrappers._boolean();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        result.value = ListSequence.fromList(target).all(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")) || SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, "jetbrains.mps.lang.structure.structure.PropertyDeclaration"));
          }
        });
      }
    });
    return result.value;
  }
  public Void apply() {
    return null;
  }

  private Tuples._2<List<SNode>, MPSProject> arg;

  public MPSProject project;
  public SNode targetConcept;
  public SNode feature;
  public String featureName;
  public String featureKind;

  public Set<SNode> instances;
  public Set<SReference> usages;



  public void init() {
    List<SNode> target = arg._0();
    project = arg._1();
    if (ListSequence.fromList(target).count() != 1) {
      return;
    }
    feature = SNodeOperations.cast(ListSequence.fromList(target).first(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration"));
  }

  public void execute(final _FunctionTypes._void_P0_E0 changeInstances) {
    targetConcept = MoveUpDialog.getConcept(project.getProject(), feature, featureKind);
    ModelAccess modelAccess = project.getRepository().getModelAccess();
    if (targetConcept == null) {
      return;
    }
    final Wrappers._T<SNode> currentConcept = new Wrappers._T<SNode>();
    final Wrappers._T<Language> currentLanguage = new Wrappers._T<Language>();

    modelAccess.executeCommandInEDT(new Runnable() {
      public void run() {
        currentConcept.value = SNodeOperations.getNodeAncestor(feature, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"), false, false);
        if (currentConcept.value == null) {
          return;
        }
        if (!(SNodeUtil.isAccessible(feature, project.getRepository()))) {
          return;
        }
        if (!(SNodeUtil.isAccessible(targetConcept, project.getRepository()))) {
          return;
        }
        currentLanguage.value = Language.getLanguageFor(SNodeOperations.getModel(currentConcept.value));
      }
    });

    int result = Messages.showYesNoCancelDialog(project.getProject(), "Do you want to run the refactoring locally?", "Execute Refactoring", "Run locally", "Write migration", "Cancel", null);

    if (result == Messages.CANCEL) {
      return;
    }
    if (result == Messages.YES) {
      modelAccess.executeCommandInEDT(new Runnable() {
        public void run() {
          usages = FindUsagesManager.getInstance().findUsages(GlobalScope.getInstance(), Collections.singleton(feature), new EmptyProgressMonitor());
          instances = FindUsagesManager.getInstance().findInstances(GlobalScope.getInstance(), Collections.singleton(SNodeOperations.asSConcept(currentConcept.value)), false, new EmptyProgressMonitor());
          RefactoringUtil.changeReferences(project, usages, feature, changeInstances, "Move " + featureKind + " " + featureName);
        }
      });
    } else {
      throw new UnsupportedOperationException();
    }
  }

  public static class ExtensionFunction extends BaseOverlappingExtension<Tuples._2<List<SNode>, MPSProject>, Void> {
    public ExtensionFunction() {
      super("jetbrains.mps.ide.platform.MoveNodesAction");
    }
    public MoveFeatureUp instantiate(Tuples._2<List<SNode>, MPSProject> arg) {
      MoveFeatureUp result = new MoveFeatureUp();
      result.arg = arg;
      result._myExtension = this;
      result.moveDefault = Sequence.fromIterable(getAllExtensions()).select(new ISelector<Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>, jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>() {
        public jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void> select(Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> it) {
          return it.get();
        }
      }).where(new IWhereFilter<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>() {
        public boolean accept(jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void> it) {
          return it instanceof jetbrains.mps.ide.platform.actions.core.MoveNodesDefault.ExtensionFunction;
        }
      }).select(new ISelector<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>, jetbrains.mps.ide.platform.actions.core.MoveNodesDefault.ExtensionFunction>() {
        public jetbrains.mps.ide.platform.actions.core.MoveNodesDefault.ExtensionFunction select(jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void> it) {
          return ((jetbrains.mps.ide.platform.actions.core.MoveNodesDefault.ExtensionFunction) it);
        }
      }).first().instantiate(arg);
      return result;
    }
    @Override
    public Collection<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> getOverridden() {
      List<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> result = ListSequence.fromList(new ArrayList<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>());
      Iterable<Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>> extensions = getAllExtensions();
      ListSequence.fromList(result).addElement(Sequence.fromIterable(extensions).where(new IWhereFilter<Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>>() {
        public boolean accept(Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>> it) {
          return it instanceof jetbrains.mps.ide.platform.actions.core.MoveNodesDefault.ExtensionFunction;
        }
      }).first().get());
      return result;
    }
    public Iterable<Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void>>> getAllExtensions() {
      return ExtensionRegistry.getInstance().getExtensions(new ExtensionFunctionPoint<Tuples._2<List<SNode>, MPSProject>, Void>(getExtensionPointId()));
    }
    @Override
    public jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>, MPSProject>, Void> get() {
      return this;
    }
  }
}
