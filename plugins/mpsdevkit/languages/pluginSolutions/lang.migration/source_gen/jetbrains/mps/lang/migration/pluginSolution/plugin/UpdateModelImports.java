package jetbrains.mps.lang.migration.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.MoveNodeRefactoringParticipant;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.structure.Extension;
import jetbrains.mps.ide.platform.actions.core.RefactoringParticipant;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.platform.actions.core.RefactoringSession;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;

public class UpdateModelImports implements MoveNodeRefactoringParticipant<SNodeReference, SNodeReference> {

  public static class UpdateReferencesParticipant_extension extends Extension.Default<MoveNodeRefactoringParticipant<?, ?>> {
    public UpdateReferencesParticipant_extension() {
      super("jetbrains.mps.ide.platform.MoveNodeParticipantEP");
    }
    public MoveNodeRefactoringParticipant<?, ?> get() {
      return new UpdateModelImports();
    }
  }

  private RefactoringParticipant.Option myOption = new RefactoringParticipant.Option("moveNode.options.updateModelImports", "Update model imports");
  private MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<SNodeReference, SNodeReference> myDataCollector = new MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<SNodeReference, SNodeReference>() {
    public SNodeReference beforeMove(SNode nodeToMove) {
      return nodeToMove.getReference();
    }
    public SNodeReference afterMove(SNode movedNode) {
      return movedNode.getReference();
    }
  };
  public MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<SNodeReference, SNodeReference> getDataCollector() {
    return myDataCollector;
  }
  public List<RefactoringParticipant.Option> getAvailableOptions(SNodeReference initialState, SRepository repository) {
    return ListSequence.fromListAndArray(new ArrayList<RefactoringParticipant.Option>(), myOption);
  }
  public List<RefactoringParticipant.Change<SNodeReference, SNodeReference>> getChanges(SNodeReference initialState, SRepository repository, List<RefactoringParticipant.Option> selectedOptions, SearchScope searchScope) {
    if (!(ListSequence.fromList(selectedOptions).contains(myOption))) {
      return ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<SNodeReference, SNodeReference>>());
    }
    return ListSequence.fromListAndArray(new ArrayList<RefactoringParticipant.Change<SNodeReference, SNodeReference>>(), new RefactoringParticipant.Change<SNodeReference, SNodeReference>() {
      public MoveNodeRefactoringParticipant<SNodeReference, SNodeReference> getParticipant() {
        return UpdateModelImports.this;
      }
      public SearchResults getSearchResults() {
        return new SearchResults();
      }
      public boolean needsToPreserveOldNode() {
        return false;
      }
      public void confirm(final SNodeReference finalState, final SRepository repository, RefactoringSession refactoringSession) {
        refactoringSession.registerChange(new Runnable() {
          public void run() {
            SNode node = finalState.resolve(repository);
            SModel model = node.getModel();
            SModule module = model.getModule();
            SModelInternal modelInternal = (SModelInternal) model;
            AbstractModule abstractModule = (AbstractModule) module;
            SLanguage usedLanguage = node.getConcept().getLanguage();
            if (!(modelInternal.importedLanguageIds().contains(usedLanguage))) {
              modelInternal.addLanguage(usedLanguage);
            }
            for (SReference ref : Sequence.fromIterable(node.getReferences())) {
              SModelReference targetModelReference = ref.getTargetSModelReference();
              SModule targetModule = check_lyx41z_a0b0h0a0a0a3a0a0a1a7(check_lyx41z_a0a1a7a0a0a0d0a0a0b0h(targetModelReference, repository));
              if (targetModelReference == null || targetModule == null) {
                continue;
              }
              if (neq_lyx41z_a0d0h0a0a0a0a0d0a1a1a7(targetModelReference, model.getReference())) {
                if (!(modelInternal.importedModels().contains(targetModelReference))) {
                  modelInternal.addModelImport(targetModelReference, true);
                }
              }
              if (!(new GlobalModuleDependenciesManager(module).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE).contains(targetModule))) {
                abstractModule.addDependency(targetModule.getModuleReference(), false);
              }
            }
          }
        });
      }
    });
  }
  private static SModule check_lyx41z_a0b0h0a0a0a3a0a0a1a7(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }
  private static SModel check_lyx41z_a0a1a7a0a0a0d0a0a0b0h(SModelReference checkedDotOperand, SRepository repository) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(repository);
    }
    return null;
  }
  private static boolean neq_lyx41z_a0d0h0a0a0a0a0d0a1a1a7(Object a, Object b) {
    return !(((a != null ? a.equals(b) : a == b)));
  }
}
