package jetbrains.mps.lang.migration.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.MoveNodesBuilder;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.structure.Extension;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.migration.util.util.NodeReferenceUtil;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public class MigrationStepBuilder implements MoveNodesBuilder {

  private SNode myStep;

  public static class MigrationStepBuilder_extension extends Extension.Default<MoveNodesBuilder.MoveNodesBuilderProvider> {
    public MigrationStepBuilder_extension() {
      super("jetbrains.mps.ide.platform.MoveNodesBuilder");
    }
    public MoveNodesBuilder.MoveNodesBuilderProvider get() {
      return new MoveNodesBuilder.MoveNodesBuilderProvider() {
        public MoveNodesBuilder createMoveNodesBuilder(SModule module) {
          if (module instanceof Language) {
            return new MigrationStepBuilder((Language) module);
          } else {
            return null;
          }
        }
      };
    }
  }

  public MigrationStepBuilder(Language module) {
    SModel model = LanguageAspect.MIGRATION.getOrCreate(module);
    SModelInternal m = (SModelInternal) (SModel) model;
    m.addLanguage(MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0x9882f4ad195546feL, 0x826994189e5dbbf2L), "jetbrains.mps.lang.migration.util"));

    myStep = SModelOperations.addRootNode(model, createRefactoringStep_x8stao_a0a0e0f());
    int version = module.getModuleVersion();
    SPropertyOperations.set(myStep, MetaAdapterFactory.getProperty(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5836cabbL, 0x67236d4a5836cabcL, "fromVersion"), "" + (version));
    module.setModuleVersion(version + 1);
  }

  public static class NodeReference extends MultiTuple._2<SNode, SRepository> implements MoveNodesBuilder.NodeReference {
    public NodeReference() {
      super();
    }
    public NodeReference(SNode ref, SRepository repo) {
      super(ref, repo);
    }
    public SNode ref(SNode value) {
      return super._0(value);
    }
    public SRepository repo(SRepository value) {
      return super._1(value);
    }
    public SNode ref() {
      return super._0();
    }
    public SRepository repo() {
      return super._1();
    }
    @SuppressWarnings(value = "unchecked")
    public MigrationStepBuilder.NodeReference assignFrom(Tuples._2<SNode, SRepository> from) {
      return (MigrationStepBuilder.NodeReference) super.assign(from);
    }
  }

  public void moveNode(MoveNodesBuilder.NodeReference from, MoveNodesBuilder.NodeReference to) {
    SNode fromNode = ((NodeReference) from).ref();
    SNode toNode = ((NodeReference) to).ref();
    final SRepository repository = ((NodeReference) from).repo();
    if (neq_x8stao_a0d0j(repository, ((NodeReference) to).repo())) {
      throw new IllegalArgumentException();
    }
    final SNode moveNodeItem = createMoveNode_x8stao_a0e0j(SNodeOperations.cast(HUtil.copyIfNecessary(fromNode), MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1648ccL, "jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")), SNodeOperations.cast(HUtil.copyIfNecessary(toNode), MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1648ccL, "jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")));
    Sequence.fromIterable(new ExtensionPoint<MoveNodesContributor>("jetbrains.mps.lang.migration.pluginSolution.MoveNodesContributor").getObjects()).visitAll(new IVisitor<MoveNodesContributor>() {
      public void visit(MoveNodesContributor it) {
        it.adjustMoveNodesItem(moveNodeItem, repository);
      }
    });
    ListSequence.fromList(SLinkOperations.getChildren(myStep, MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5836cabbL, 0x67236d4a5836d7f3L, "item"))).addElement(moveNodeItem);
  }

  public NodeReference createReference(SNode node) {
    return new NodeReference(NodeReferenceUtil.makeReflection(node), SNodeOperations.getModel(node).getModule().getRepository());
  }
  private static SNode createRefactoringStep_x8stao_a0a0e0f() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5836cabbL, "jetbrains.mps.lang.migration.util.structure.RefactoringStep"), null, null, false);
    return n1;
  }
  private static SNode createMoveNode_x8stao_a0e0j(Object p0, Object p1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, "jetbrains.mps.lang.migration.util.structure.MoveNode"), null, null, false);
    if (p0 != null) {
      n1.addChild(MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x67236d4a58343d15L, "fromNode"), (SNode) p0);
    }
    if (p1 != null) {
      n1.addChild(MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x67236d4a58343d17L, "toNode"), (SNode) p1);
    }
    return n1;
  }
  private static boolean neq_x8stao_a0d0j(Object a, Object b) {
    return !(((a != null ? a.equals(b) : a == b)));
  }
}
