package jetbrains.mps.lang.migration.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.MoveNodesBuilder;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.structure.Extension;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.Project;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.migration.util.util.NodeReferenceUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.migration.runtime.base.RefactoringStep;
import jetbrains.mps.lang.migration.util.behavior.RefactoringStep_Behavior;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public abstract class AbstractMigrationStepBuilder implements MoveNodesBuilder {

  protected SNode myStep;

  public static class MigrationStepBuilder_extension extends Extension.Default<MoveNodesBuilder.MoveNodesBuilderProvider> {
    public MigrationStepBuilder_extension() {
      super("jetbrains.mps.ide.platform.MoveNodesBuilder");
    }
    public MoveNodesBuilder.MoveNodesBuilderProvider get() {
      return new MoveNodesBuilder.MoveNodesBuilderProvider() {
        public MoveNodesBuilder createMoveNodesBuilder(SModule module, Project project) {
          if (module instanceof Language) {
            return new AbstractMigrationStepBuilder.LocalMigrationStepBuilder(project);
          } else {
            return null;
          }
        }
      };
    }
  }

  public AbstractMigrationStepBuilder() {
    myStep = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5836cabbL, "jetbrains.mps.lang.migration.util.structure.RefactoringStep")));
  }


  public MoveNodesBuilder.IncompleteMoveNode moveNode(final SNode from) {

    SNode nodeFrom = NodeReferenceUtil.makeReflection(from);
    final SNode moveNodeItem = createMoveNode_sympyp_a0c0i(SNodeOperations.cast(HUtil.copyIfNecessary(nodeFrom), MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1648ccL, "jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")), SNodeOperations.cast(HUtil.copyIfNecessary(null), MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1648ccL, "jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")));
    Sequence.fromIterable(new ExtensionPoint<MoveNodesContributor>("jetbrains.mps.lang.migration.pluginSolution.MoveNodesContributor").getObjects()).visitAll(new IVisitor<MoveNodesContributor>() {
      public void visit(MoveNodesContributor it) {
        it.adjustMoveNodesItem(moveNodeItem, SNodeOperations.getModel(from).getModule().getRepository());
      }
    });
    ListSequence.fromList(SLinkOperations.getChildren(myStep, MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5836cabbL, 0x67236d4a5836d7f3L, "part"))).addElement(moveNodeItem);
    return new MoveNodesBuilder.IncompleteMoveNode() {
      public void setTarget(SNode to) {
        SLinkOperations.setTarget(moveNodeItem, MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x67236d4a58343d17L, "toNode"), NodeReferenceUtil.makeReflection(to));
      }
    };
  }

  public void moveNode(SNode from, SNode to) {
    moveNode(from).setTarget(to);
  }


  public static class LoggableMigrationStepBuilder extends AbstractMigrationStepBuilder {
    protected Language myModule;
    public LoggableMigrationStepBuilder(Language module) {
      myModule = module;
      int version = module.getModuleVersion();
      SPropertyOperations.set(myStep, MetaAdapterFactory.getProperty(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5836cabbL, 0x67236d4a5836cabcL, "fromVersion"), "" + (version));
    }
    public void commit(Runnable callback) {
      callback.run();
      SModel model = LanguageAspect.MIGRATION.getOrCreate(myModule);
      SModelInternal m = (SModelInternal) (SModel) model;
      m.addLanguage(MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0x9882f4ad195546feL, 0x826994189e5dbbf2L), "jetbrains.mps.lang.migration.util"));
      SModelOperations.addRootNode(model, myStep);
    }
  }

  public static class LocalMigrationStepBuilder extends AbstractMigrationStepBuilder {
    private Project myProject;
    public LocalMigrationStepBuilder(Project project) {
      myProject = project;
    }
    public void commit(Runnable callBack) {
      RefactoringStep implementation = RefactoringStep_Behavior.call_getImplementation_5168866961623780909(myStep);
      Runnable execute = implementation.getExecute(myProject);
      callBack.run();
      execute.run();
    }
  }

  private static SNode createMoveNode_sympyp_a0c0i(Object p0, Object p1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, "jetbrains.mps.lang.migration.util.structure.MoveNode"), null, null, false);
    if (p0 != null) {
      n1.addChild(MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x67236d4a58343d15L, "fromNode"), (SNode) p0);
    }
    if (p1 != null) {
      n1.addChild(MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x67236d4a58343d17L, "toNode"), (SNode) p1);
    }
    return n1;
  }
}
