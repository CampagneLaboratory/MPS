package jetbrains.mps.lang.migration.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.Extension;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.lang.smodel.query.runtime.CommandUtil;
import jetbrains.mps.lang.smodel.query.runtime.QueryExecutionContext;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.structure.plugin.RefactoringRuntime;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.MetaAdapterByDeclaration;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class MoveConceptContributor implements MoveNodesContributor {
  public static class MoveConceptContributor_extension extends Extension.Default<MoveNodesContributor> {
    public MoveConceptContributor_extension() {
      super("jetbrains.mps.lang.migration.pluginSolution.MoveNodesContributor");
    }
    public MoveNodesContributor get() {
      return new MoveConceptContributor();
    }
  }

  public static class MoveConceptPart implements MoveNodesContributor.SpecialiazationPart {
    private SAbstractConcept myFrom;
    private SAbstractConcept myTo;
    public Iterable<SNodeReference> getAffectedNodes(SearchScope searchScope) {
      {
        final SearchScope scope = CommandUtil.createScope(searchScope);
        QueryExecutionContext context = new QueryExecutionContext() {
          public SearchScope getDefaultSearchScope() {
            return scope;
          }
        };
        return CollectionSequence.fromCollection(CommandUtil.instances(CommandUtil.createConsoleScope(null, false, context), SNodeOperations.asSConcept(myFrom))).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(it)), SNodeOperations.asSConcept(myFrom));
          }
        }).select(new ISelector<SNode, SNodeReference>() {
          public SNodeReference select(SNode it) {
            return it.getReference();
          }
        });
      }
    }
    public String getAffectedNodesCategory() {
      return "concept instance";
    }
    public void setFrom(SNode from) {
      myFrom = SNodeOperations.asSConcept(SNodeOperations.cast(from, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")));
    }
    public void setTo(SNode to) {
      myTo = SNodeOperations.asSConcept(SNodeOperations.cast(to, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")));
    }
    public void execute(Iterable<SNode> nodes) {
      for (SNode node : Sequence.fromIterable(nodes)) {
        RefactoringRuntime.replaceWithNewConcept(node, myTo);
      }
    }
  }
  public static class MoveContainmentLinkPart implements MoveNodesContributor.SpecialiazationPart {
    private SContainmentLink myFrom;
    private SContainmentLink myTo;
    public Iterable<SNodeReference> getAffectedNodes(SearchScope searchScope) {
      {
        final SearchScope scope = CommandUtil.createScope(searchScope);
        QueryExecutionContext context = new QueryExecutionContext() {
          public SearchScope getDefaultSearchScope() {
            return scope;
          }
        };
        return CollectionSequence.fromCollection(CommandUtil.instances(CommandUtil.createConsoleScope(null, false, context), SNodeOperations.asSConcept(myFrom.getOwner()))).select(new ISelector<SNode, SNodeReference>() {
          public SNodeReference select(SNode it) {
            return it.getReference();
          }
        });
      }
    }
    public String getAffectedNodesCategory() {
      return "containment link instance";
    }
    public void setFrom(SNode from) {
      myFrom = MetaAdapterByDeclaration.getContainmentLink(SNodeOperations.cast(from, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")));
    }
    public void setTo(SNode to) {
      myTo = MetaAdapterByDeclaration.getContainmentLink(SNodeOperations.cast(to, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")));
    }
    public void execute(Iterable<SNode> nodes) {
      for (SNode node : Sequence.fromIterable(nodes)) {
        RefactoringRuntime.changeContainmentLinkInstance(node, myFrom, myTo);
      }
    }
  }
  public static class MoveReferenceLinkPart implements MoveNodesContributor.SpecialiazationPart {
    private SReferenceLink myFrom;
    private SReferenceLink myTo;
    public Iterable<SNodeReference> getAffectedNodes(SearchScope searchScope) {
      {
        final SearchScope scope = CommandUtil.createScope(searchScope);
        QueryExecutionContext context = new QueryExecutionContext() {
          public SearchScope getDefaultSearchScope() {
            return scope;
          }
        };
        return CollectionSequence.fromCollection(CommandUtil.instances(CommandUtil.createConsoleScope(null, false, context), SNodeOperations.asSConcept(myFrom.getOwner()))).select(new ISelector<SNode, SNodeReference>() {
          public SNodeReference select(SNode it) {
            return it.getReference();
          }
        });
      }
    }
    public String getAffectedNodesCategory() {
      return "reference link instance";
    }
    public void setFrom(SNode from) {
      myFrom = MetaAdapterByDeclaration.getReferenceLink(SNodeOperations.cast(from, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")));
    }
    public void setTo(SNode to) {
      myTo = MetaAdapterByDeclaration.getReferenceLink(SNodeOperations.cast(to, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")));
    }
    public void execute(Iterable<SNode> nodes) {
      for (SNode node : Sequence.fromIterable(nodes)) {
        RefactoringRuntime.changeReferenceLinkInstances(node, myFrom, myTo);
      }
    }
  }
  public static class MovePropertyPart implements MoveNodesContributor.SpecialiazationPart {
    private SProperty myFrom;
    private SProperty myTo;
    public Iterable<SNodeReference> getAffectedNodes(SearchScope searchScope) {
      {
        final SearchScope scope = CommandUtil.createScope(searchScope);
        QueryExecutionContext context = new QueryExecutionContext() {
          public SearchScope getDefaultSearchScope() {
            return scope;
          }
        };
        return CollectionSequence.fromCollection(CommandUtil.instances(CommandUtil.createConsoleScope(null, false, context), SNodeOperations.asSConcept(myFrom.getOwner()))).select(new ISelector<SNode, SNodeReference>() {
          public SNodeReference select(SNode it) {
            return it.getReference();
          }
        });
      }
    }
    public String getAffectedNodesCategory() {
      return "property instance";
    }
    public void setFrom(SNode from) {
      myFrom = MetaAdapterByDeclaration.getProperty(SNodeOperations.cast(from, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, "jetbrains.mps.lang.structure.structure.PropertyDeclaration")));
    }
    public void setTo(SNode to) {
      myTo = MetaAdapterByDeclaration.getProperty(SNodeOperations.cast(to, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, "jetbrains.mps.lang.structure.structure.PropertyDeclaration")));
    }
    public void execute(Iterable<SNode> nodes) {
      for (SNode node : Sequence.fromIterable(nodes)) {
        RefactoringRuntime.changePropertyInstance(node, myFrom, myTo);
      }
    }
  }


  public Iterable<MoveNodesContributor.SpecialiazationPart> getLocalSpecializations(SNode from) {
    SNode sampleNode = from;
    List<MoveNodesContributor.SpecialiazationPart> result = ListSequence.fromList(new ArrayList<MoveNodesContributor.SpecialiazationPart>());
    if (SNodeOperations.isInstanceOf(sampleNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))) {
      ListSequence.fromList(result).addElement(new MoveConceptContributor.MoveConceptPart());
    }
    if (SNodeOperations.isInstanceOf(sampleNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")) && SPropertyOperations.hasValue(SNodeOperations.cast(sampleNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf980556927L, "metaClass"), "aggregation", "reference")) {
      ListSequence.fromList(result).addElement(new MoveConceptContributor.MoveContainmentLinkPart());
    }
    if (SNodeOperations.isInstanceOf(sampleNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")) && SPropertyOperations.hasValue(SNodeOperations.cast(sampleNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf980556927L, "metaClass"), "reference", "reference")) {
      ListSequence.fromList(result).addElement(new MoveConceptContributor.MoveReferenceLinkPart());
    }
    if (SNodeOperations.isInstanceOf(sampleNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, "jetbrains.mps.lang.structure.structure.PropertyDeclaration"))) {
      ListSequence.fromList(result).addElement(new MoveConceptContributor.MovePropertyPart());
    }
    return result;
  }
  public Iterable<SNode> getMigrationSpecializations(SNode from) {
    SNode sampleNode = from;
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    if (SNodeOperations.isInstanceOf(sampleNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))) {
      ListSequence.fromList(result).addElement(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741b6L, "jetbrains.mps.lang.migration.structure.MoveConcept"))));
    }
    if (SNodeOperations.isInstanceOf(sampleNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")) && SPropertyOperations.hasValue(SNodeOperations.cast(sampleNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf980556927L, "metaClass"), "aggregation", "reference")) {
      ListSequence.fromList(result).addElement(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741baL, "jetbrains.mps.lang.migration.structure.MoveContainmentLink"))));
    }
    if (SNodeOperations.isInstanceOf(sampleNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")) && SPropertyOperations.hasValue(SNodeOperations.cast(sampleNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf980556927L, "metaClass"), "reference", "reference")) {
      ListSequence.fromList(result).addElement(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741b7L, "jetbrains.mps.lang.migration.structure.MoveReferenceLink"))));
    }
    if (SNodeOperations.isInstanceOf(sampleNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, "jetbrains.mps.lang.structure.structure.PropertyDeclaration"))) {
      ListSequence.fromList(result).addElement(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741b9L, "jetbrains.mps.lang.migration.structure.MoveProperty"))));
    }
    return result;
  }
}
