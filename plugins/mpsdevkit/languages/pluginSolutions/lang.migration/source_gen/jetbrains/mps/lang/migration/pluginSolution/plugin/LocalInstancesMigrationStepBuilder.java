package jetbrains.mps.lang.migration.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.MoveRefactoringContributor;
import org.jetbrains.mps.openapi.module.SearchScope;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.structure.Extension;
import jetbrains.mps.ide.platform.actions.core.MoveContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IListSequence;
import jetbrains.mps.ide.findusages.model.SearchResults;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.findusages.model.SearchResult;

public class LocalInstancesMigrationStepBuilder implements MoveRefactoringContributor {

  private SearchScope mySearchScope;
  private SRepository myRepository;
  private List<SNodeReference> myFrom;
  private List<List<MoveNodesContributor.SpecialiazationPart>> myParts;
  private List<List<? extends List<SNodeReference>>> affectedNodes;


  public static class LocalInstancesMigrationStepBuilder_extension extends Extension.Default<MoveRefactoringContributor.MoveNodesBuilderFactory> {
    public LocalInstancesMigrationStepBuilder_extension() {
      super("jetbrains.mps.ide.platform.MoveNodesBuilderEP");
    }
    public MoveRefactoringContributor.MoveNodesBuilderFactory get() {
      return new MoveRefactoringContributor.MoveNodesBuilderFactory() {
        public MoveRefactoringContributor createContributor(MoveContext context) {
          return new LocalInstancesMigrationStepBuilder(context.getSearchScope());
        }
      };
    }
  }


  public LocalInstancesMigrationStepBuilder(SearchScope searchScope) {
    mySearchScope = searchScope;
  }

  public String getDescription() {
    return "Update instances in current project";
  }

  public void willBeMoved(List<SNode> nodes) {
    myParts = ListSequence.fromList(new ArrayList<List<MoveNodesContributor.SpecialiazationPart>>(ListSequence.fromList(nodes).count()));
    if (ListSequence.fromList(nodes).isNotEmpty()) {
      Iterable<SRepository> seq = ListSequence.fromList(nodes).select(new ISelector<SNode, SRepository>() {
        public SRepository select(SNode it) {
          return SNodeOperations.getModel(it).getRepository();
        }
      });
      myRepository = Sequence.fromIterable(seq).first();
      if (!(Sequence.fromIterable(seq).all(new IWhereFilter<SRepository>() {
        public boolean accept(SRepository it) {
          return eq_5lvz9m_a0a0a0a0a0a2a1a51(it, myRepository);
        }
      }))) {
        throw new IllegalArgumentException("All nodes should be from the same repository.");
      }
    }
    myFrom = ListSequence.fromList(nodes).select(new ISelector<SNode, SNodeReference>() {
      public SNodeReference select(SNode it) {
        return it.getReference();
      }
    }).toListSequence();
    for (final SNode from : ListSequence.fromList(nodes)) {
      List<MoveNodesContributor.SpecialiazationPart> specialiazations = Sequence.fromIterable(new ExtensionPoint<MoveNodesContributor>("jetbrains.mps.lang.migration.pluginSolution.MoveNodesContributor").getObjects()).select(new ISelector<MoveNodesContributor, Iterable<MoveNodesContributor.SpecialiazationPart>>() {
        public Iterable<MoveNodesContributor.SpecialiazationPart> select(MoveNodesContributor it) {
          return it.getLocalSpecializations(from);
        }
      }).translate(new ITranslator2<Iterable<MoveNodesContributor.SpecialiazationPart>, MoveNodesContributor.SpecialiazationPart>() {
        public Iterable<MoveNodesContributor.SpecialiazationPart> translate(Iterable<MoveNodesContributor.SpecialiazationPart> it) {
          return it;
        }
      }).toListSequence();
      ListSequence.fromList(specialiazations).visitAll(new IVisitor<MoveNodesContributor.SpecialiazationPart>() {
        public void visit(MoveNodesContributor.SpecialiazationPart it) {
          it.setFrom(from);
        }
      });
      ListSequence.fromList(myParts).addElement(specialiazations);
    }
    affectedNodes = ListSequence.fromList(new ArrayList<List<? extends List<SNodeReference>>>());
    for (List<MoveNodesContributor.SpecialiazationPart> part : ListSequence.fromList(myParts)) {
      List<? extends List<SNodeReference>> nodeGroup = ListSequence.fromList(part).select(new ISelector<MoveNodesContributor.SpecialiazationPart, IListSequence<SNodeReference>>() {
        public IListSequence<SNodeReference> select(MoveNodesContributor.SpecialiazationPart it) {
          return Sequence.fromIterable(it.getAffectedNodes(mySearchScope)).toListSequence();
        }
      }).toListSequence();
      ListSequence.fromList(affectedNodes).addElement(nodeGroup);
    }
  }
  public SearchResults<SNode> getAffectedNodes() {
    if (affectedNodes == null) {
      throw new IllegalStateException("isMoved() can be called only after willBeMoved()");
    }
    SearchResults<SNode> results = new SearchResults<SNode>();
    results.getSearchedNodes().addAll(ListSequence.fromList(myFrom).select(new ISelector<SNodeReference, SNode>() {
      public SNode select(SNodeReference it) {
        return it.resolve(myRepository);
      }
    }).toListSequence());
    {
      Iterator<List<? extends List<SNodeReference>>> nodeGroups_it = ListSequence.fromList(affectedNodes).iterator();
      Iterator<List<MoveNodesContributor.SpecialiazationPart>> parts_it = ListSequence.fromList(myParts).iterator();
      List<? extends List<SNodeReference>> nodeGroups_var;
      List<MoveNodesContributor.SpecialiazationPart> parts_var;
      while (nodeGroups_it.hasNext() && parts_it.hasNext()) {
        nodeGroups_var = nodeGroups_it.next();
        parts_var = parts_it.next();
        {
          Iterator<? extends List<SNodeReference>> nodeGroup_it = ListSequence.fromList(nodeGroups_var).iterator();
          Iterator<MoveNodesContributor.SpecialiazationPart> part_it = ListSequence.fromList(parts_var).iterator();
          List<SNodeReference> nodeGroup_var;
          final Wrappers._T<MoveNodesContributor.SpecialiazationPart> part_var = new Wrappers._T<MoveNodesContributor.SpecialiazationPart>();
          while (nodeGroup_it.hasNext() && part_it.hasNext()) {
            nodeGroup_var = nodeGroup_it.next();
            part_var.value = part_it.next();
            results.getSearchResults().addAll(ListSequence.fromList(nodeGroup_var).select(new ISelector<SNodeReference, SearchResult<SNode>>() {
              public SearchResult<SNode> select(SNodeReference it) {
                return new SearchResult<SNode>(it.resolve(myRepository), part_var.value.getAffectedNodesCategory());
              }
            }).toListSequence());
          }
        }
      }
    }
    return results;
  }
  public List<Boolean> shouldKeepOldNodes(List<Boolean> movingAsChild) {
    return ListSequence.fromList(new ArrayList<Boolean>(ListSequence.fromList(movingAsChild).count()));
  }
  public void isMoved(List<SNode> nodes) {
    if (myParts == null) {
      throw new IllegalStateException("isMoved() should be called after willBeMoved()");
    }

    if (ListSequence.fromList(nodes).isNotEmpty()) {
      Iterable<SRepository> seq = ListSequence.fromList(nodes).select(new ISelector<SNode, SRepository>() {
        public SRepository select(SNode it) {
          return SNodeOperations.getModel(it).getRepository();
        }
      });
      if (!(Sequence.fromIterable(seq).all(new IWhereFilter<SRepository>() {
        public boolean accept(SRepository it) {
          return eq_5lvz9m_a0a0a0a0a0a1a2a81(it, myRepository);
        }
      }))) {
        throw new IllegalArgumentException("All nodes should be from the same repository.");
      }
    }
    if (ListSequence.fromList(myParts).count() != ListSequence.fromList(nodes).count()) {
      throw new IllegalArgumentException("List size mismatch");
    }
    {
      Iterator<SNode> to_it = ListSequence.fromList(nodes).iterator();
      Iterator<List<MoveNodesContributor.SpecialiazationPart>> parts_it = ListSequence.fromList(myParts).iterator();
      SNode to_var;
      List<MoveNodesContributor.SpecialiazationPart> parts_var;
      while (to_it.hasNext() && parts_it.hasNext()) {
        to_var = to_it.next();
        parts_var = parts_it.next();
        for (MoveNodesContributor.SpecialiazationPart part : ListSequence.fromList(parts_var)) {
          part.setTo(to_var);
        }
      }
    }
  }
  public void commit() {
    if (myParts == null) {
      throw new IllegalStateException("commit() should be called after willBeMoved() and isMoved()");
    }
    if (ListSequence.fromList(myParts).count() != ListSequence.fromList(affectedNodes).count()) {
      throw new IllegalStateException("affectedNodes is not properly initialized");
    }
    if (ListSequence.fromList(myParts).isEmpty()) {
      return;
    }
    if (myRepository == null) {
      throw new IllegalStateException("repository is null");
    }

    {
      Iterator<List<MoveNodesContributor.SpecialiazationPart>> parts_it = ListSequence.fromList(myParts).iterator();
      Iterator<List<? extends List<SNodeReference>>> affectedGroups_it = ListSequence.fromList(affectedNodes).iterator();
      List<MoveNodesContributor.SpecialiazationPart> parts_var;
      List<? extends List<SNodeReference>> affectedGroups_var;
      while (parts_it.hasNext() && affectedGroups_it.hasNext()) {
        parts_var = parts_it.next();
        affectedGroups_var = affectedGroups_it.next();
        {
          Iterator<MoveNodesContributor.SpecialiazationPart> part_it = ListSequence.fromList(parts_var).iterator();
          Iterator<? extends List<SNodeReference>> affected_it = ListSequence.fromList(affectedGroups_var).iterator();
          MoveNodesContributor.SpecialiazationPart part_var;
          List<SNodeReference> affected_var;
          while (part_it.hasNext() && affected_it.hasNext()) {
            part_var = part_it.next();
            affected_var = affected_it.next();
            part_var.execute(ListSequence.fromList(affected_var).select(new ISelector<SNodeReference, SNode>() {
              public SNode select(SNodeReference it) {
                return it.resolve(myRepository);
              }
            }));
          }
        }
      }
    }
  }
  private static boolean eq_5lvz9m_a0a0a0a0a0a2a1a51(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_5lvz9m_a0a0a0a0a0a1a2a81(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
