package jetbrains.mps.lang.migration.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.MoveNodeRefactoringParticipant;
import jetbrains.mps.lang.migration.pluginSolution.plugin.UpdateReferencesParticipant.NamedNodeReference;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.migration.util.util.NodeReferenceUtil;
import java.util.List;
import jetbrains.mps.ide.platform.actions.core.RefactoringParticipant;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.smodel.query.CommandUtil;
import jetbrains.mps.smodel.query.QueryExecutionContext;
import java.util.Collection;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.ide.platform.actions.core.RefactoringSession;
import jetbrains.mps.lang.migration.util.behavior.AbstractNodeReference_BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class UpdateReferencesParticipant implements MoveNodeRefactoringParticipant<NamedNodeReference, NamedNodeReference> {

  public static class NamedNodeReference extends MultiTuple._2<SNodeReference, String> {
    public NamedNodeReference() {
      super();
    }
    public NamedNodeReference(SNodeReference reference, String name) {
      super(reference, name);
    }
    public SNodeReference reference(SNodeReference value) {
      return super._0(value);
    }
    public String name(String value) {
      return super._1(value);
    }
    public SNodeReference reference() {
      return super._0();
    }
    public String name() {
      return super._1();
    }
  }

  public String getId() {
    return "moveNode.updateReferences";
  }
  public String getDescription() {
    return "Update references in current project";
  }
  private MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<NamedNodeReference, NamedNodeReference> myDataCollector = new MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<NamedNodeReference, NamedNodeReference>() {
    public NamedNodeReference beforeMove(SNode nodeToMove) {
      return new NamedNodeReference(nodeToMove.getReference(), NodeReferenceUtil.getNodePresentation(nodeToMove));
    }
    public NamedNodeReference afterMove(SNode movedNode) {
      return new NamedNodeReference(movedNode.getReference(), NodeReferenceUtil.getNodePresentation(movedNode));
    }
  };
  public MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<NamedNodeReference, NamedNodeReference> getDataCollector() {
    return myDataCollector;
  }
  public List<RefactoringParticipant.Change<NamedNodeReference>> getChanges(final NamedNodeReference initialState, SRepository repository, SearchScope searchScope) {
    {
      final SearchScope scope = CommandUtil.createScope(searchScope);
      QueryExecutionContext context = new QueryExecutionContext() {
        public SearchScope getDefaultSearchScope() {
          return scope;
        }
      };
      SNode movedNode = initialState.reference().resolve(repository);
      Collection<SReference> usages;
      if (movedNode != null) {
        usages = CommandUtil.usages(CommandUtil.createConsoleScope(null, false, context), movedNode);
      } else {
        usages = Sequence.fromIterable(CommandUtil.references(CommandUtil.createConsoleScope(null, false, context))).where(new IWhereFilter<SReference>() {
          public boolean accept(SReference it) {
            return eq_k8iioh_a0a0a0a0a0a0a0a4a0a7(it.getTargetNodeReference(), initialState.reference());
          }
        }).toListSequence();
      }
      return CollectionSequence.fromCollection(usages).select(new ISelector<SReference, RefactoringParticipant.Change<NamedNodeReference>>() {
        public RefactoringParticipant.Change<NamedNodeReference> select(SReference ref) {
          final SNodeReference containingNode = ref.getSourceNode().getReference();
          final SReferenceLink role = ref.getLink();
          final String resolveInfo = SLinkOperations.getResolveInfo(ref);
          final SearchResult<SNode> searchResult = new SearchResult<SNode>(ref.getSourceNode(), "reference");
          RefactoringParticipant.Change<NamedNodeReference> change = new RefactoringParticipant.Change<NamedNodeReference>() {
            public SearchResult getSearchResult() {
              return searchResult;
            }
            public boolean needsToPreserveOldNode() {
              return false;
            }
            public void confirm(final NamedNodeReference finalState, final SRepository repository, RefactoringSession refactoringSession) {
              refactoringSession.registerChange(new Runnable() {
                public void run() {
                  SNode node = containingNode.resolve(repository);
                  node.setReference(role, jetbrains.mps.smodel.SReference.create(role, node, finalState.reference().getModelReference(), finalState.reference().getNodeId(), resolveInfo));
                }
              });
            }
          };
          return change;
        }
      }).toListSequence();
    }
  }
  public SNode serializeInitialState(NamedNodeReference initialState) {
    return NodeReferenceUtil.makeReflection(initialState.reference(), initialState.name());
  }
  public NamedNodeReference deserializeInitialState(SNode serialized) {
    return new NamedNodeReference(AbstractNodeReference_BehaviorDescriptor.getNodeReference_id4uVwhQyQbdz.invoke(serialized), SPropertyOperations.getString(serialized, MetaAdapterFactory.getProperty(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x27bf3263be23f0dfL, 0x27bf3263be23f299L, "nodeName")));
  }
  public SNode serializeFinalState(NamedNodeReference finalState) {
    return NodeReferenceUtil.makeReflection(finalState.reference(), finalState.name());
  }
  public NamedNodeReference deserializeFinalState(SNode serialized) {
    return new NamedNodeReference(AbstractNodeReference_BehaviorDescriptor.getNodeReference_id4uVwhQyQbdz.invoke(serialized), SPropertyOperations.getString(serialized, MetaAdapterFactory.getProperty(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x27bf3263be23f0dfL, 0x27bf3263be23f299L, "nodeName")));
  }
  private static boolean eq_k8iioh_a0a0a0a0a0a0a0a4a0a7(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
