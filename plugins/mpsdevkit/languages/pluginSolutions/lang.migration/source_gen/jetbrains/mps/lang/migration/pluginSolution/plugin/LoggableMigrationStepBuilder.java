package jetbrains.mps.lang.migration.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.MoveRefactoringContributor;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.structure.Extension;
import jetbrains.mps.ide.platform.actions.core.MoveContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.lang.migration.util.util.NodeReferenceUtil;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.migration.util.behavior.AbstractNodeReference_BehaviorDescriptor;
import jetbrains.mps.ide.findusages.model.SearchResults;
import java.util.Iterator;
import jetbrains.mps.lang.migration.util.behavior.MoveNodeSpecialization_BehaviorDescriptor;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public class LoggableMigrationStepBuilder implements MoveRefactoringContributor {
  protected SModule mySourceModule = null;
  protected SModule myTargetModule = null;
  protected List<SNode> myMoveNodeItems;

  public static class LoggableMigrationStepBuilder_extension extends Extension.Default<MoveRefactoringContributor.MoveNodesBuilderFactory> {
    public LoggableMigrationStepBuilder_extension() {
      super("jetbrains.mps.ide.platform.MoveNodesBuilderEP");
    }
    public MoveRefactoringContributor.MoveNodesBuilderFactory get() {
      return new MoveRefactoringContributor.MoveNodesBuilderFactory() {
        public MoveRefactoringContributor createContributor(MoveContext context) {
          return new LoggableMigrationStepBuilder();
        }
      };
    }
  }

  public String getDescription() {
    return "Write migration";
  }

  public void willBeMoved(List<SNode> nodes) {
    myMoveNodeItems = ListSequence.fromList(new ArrayList<SNode>(ListSequence.fromList(nodes).count()));

    if (ListSequence.fromList(nodes).isNotEmpty()) {
      Iterable<SModule> seq = ListSequence.fromList(nodes).select(new ISelector<SNode, SModule>() {
        public SModule select(SNode it) {
          return SNodeOperations.getModel(it).getModule();
        }
      });
      mySourceModule = Sequence.fromIterable(seq).first();
      if (!(Sequence.fromIterable(seq).all(new IWhereFilter<SModule>() {
        public boolean accept(SModule it) {
          return eq_t528rj_a0a0a0a0a0a2a2a8(it, mySourceModule);
        }
      }))) {
        throw new IllegalArgumentException("All nodes should be from the same module.");
      }
    }
    for (SNode from : ListSequence.fromList(nodes)) {
      final SNode moveNodeItem = createMoveNode_t528rj_a0a0d0i(SNodeOperations.cast(HUtil.copyIfNecessary(NodeReferenceUtil.makeReflection(from)), MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1648ccL, "jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")), SNodeOperations.cast(HUtil.copyIfNecessary(null), MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1648ccL, "jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")));

      Sequence.fromIterable(new ExtensionPoint<MoveNodesContributor>("jetbrains.mps.lang.migration.pluginSolution.MoveNodesContributor").getObjects()).visitAll(new IVisitor<MoveNodesContributor>() {
        public void visit(MoveNodesContributor it) {
          ListSequence.fromList(SLinkOperations.getChildren(moveNodeItem, MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x2b3f57492c165c59L, "specialization"))).addSequence(Sequence.fromIterable(it.getMigrationSpecializations(AbstractNodeReference_BehaviorDescriptor.tryToFindNode_id6szrkDoc2K7.invoke(SLinkOperations.getTarget(moveNodeItem, MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x67236d4a58343d15L, "fromNode")), mySourceModule.getRepository()))));
        }
      });

      ListSequence.fromList(myMoveNodeItems).addElement(moveNodeItem);
    }
  }
  public SearchResults<SNode> getAffectedNodes() {
    return new SearchResults<SNode>();
  }
  public List<Boolean> shouldKeepOldNodes(List<Boolean> movingAsChild) {
    List<Boolean> result = ListSequence.fromList(new ArrayList<Boolean>());
    {
      Iterator<SNode> moveNodeItem_it = ListSequence.fromList(myMoveNodeItems).iterator();
      SNode moveNodeItem_var;
      while (moveNodeItem_it.hasNext()) {
        moveNodeItem_var = moveNodeItem_it.next();
        ListSequence.fromList(result).addElement(ListSequence.fromList(SLinkOperations.getChildren(moveNodeItem_var, MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x2b3f57492c165c59L, "specialization"))).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return MoveNodeSpecialization_BehaviorDescriptor.shouldKeepOldNode_id1NHZk5hi$oq.invoke(it);
          }
        }));
      }
    }
    return result;
  }
  public void isMoved(List<SNode> nodes) {
    if (myMoveNodeItems == null) {
      throw new IllegalArgumentException("isMoved() should be called after willBeMoved()");
    }
    if (ListSequence.fromList(nodes).isNotEmpty()) {
      Iterable<SModule> seq = ListSequence.fromList(nodes).select(new ISelector<SNode, SModule>() {
        public SModule select(SNode it) {
          return SNodeOperations.getModel(it).getModule();
        }
      });
      myTargetModule = Sequence.fromIterable(seq).first();
      if (!(Sequence.fromIterable(seq).all(new IWhereFilter<SModule>() {
        public boolean accept(SModule it) {
          return eq_t528rj_a0a0a0a0a0a2a1a11(it, myTargetModule);
        }
      }))) {
        throw new IllegalArgumentException("All nodes should be from the same module.");
      }
    }

    if (ListSequence.fromList(myMoveNodeItems).count() != ListSequence.fromList(nodes).count()) {
      throw new IllegalArgumentException("List size mismatch");
    }
    {
      Iterator<SNode> to_it = ListSequence.fromList(nodes).iterator();
      Iterator<SNode> moveNodeItem_it = ListSequence.fromList(myMoveNodeItems).iterator();
      SNode to_var;
      SNode moveNodeItem_var;
      while (to_it.hasNext() && moveNodeItem_it.hasNext()) {
        to_var = to_it.next();
        moveNodeItem_var = moveNodeItem_it.next();
        SLinkOperations.setTarget(moveNodeItem_var, MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x67236d4a58343d17L, "toNode"), NodeReferenceUtil.makeReflection(to_var));
        ListSequence.fromList(SLinkOperations.getChildren(moveNodeItem_var, MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x2b3f57492c165c59L, "specialization"))).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            MoveNodeSpecialization_BehaviorDescriptor.doDeprecateOldNode_id1NHZk5hiKRu.invoke(it, mySourceModule.getRepository());
          }
        });
      }
    }
  }

  public void commit() {
    if (myMoveNodeItems == null) {
      throw new IllegalStateException("commit() should be called after willBeMoved() and isMoved()");
    }
    if (ListSequence.fromList(myMoveNodeItems).isEmpty()) {
      return;
    }
    if (mySourceModule == null) {
      throw new IllegalStateException("sourceModule is null");
    }
    if (myTargetModule == null) {
      throw new IllegalStateException("targetModule is null");
    }
    if (mySourceModule instanceof Language && myTargetModule instanceof Language) {
      Language sourceModule = (Language) mySourceModule;
      int version = sourceModule.getModuleVersion();

      SNode refactoringStep = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5836cabbL, "jetbrains.mps.lang.migration.util.structure.RefactoringStep")));
      SPropertyOperations.set(refactoringStep, MetaAdapterFactory.getProperty(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5836cabbL, 0x67236d4a5836cabcL, "fromVersion"), "" + (version));
      ListSequence.fromList(SLinkOperations.getChildren(refactoringStep, MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5836cabbL, 0x67236d4a5836d7f3L, "part"))).addSequence(ListSequence.fromList(myMoveNodeItems));

      SModel model = LanguageAspect.MIGRATION.getOrCreate(sourceModule);
      SModelInternal m = (SModelInternal) (SModel) model;
      m.addLanguage(MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0x9882f4ad195546feL, 0x826994189e5dbbf2L), "jetbrains.mps.lang.migration.util"));
      SModelOperations.addRootNode(model, refactoringStep);
      sourceModule.setModuleVersion(version + 1);

    }
  }
  private static SNode createMoveNode_t528rj_a0a0d0i(Object p0, Object p1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, "jetbrains.mps.lang.migration.util.structure.MoveNode"), null, null, false);
    if (p0 != null) {
      n1.addChild(MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x67236d4a58343d15L, "fromNode"), (SNode) p0);
    }
    if (p1 != null) {
      n1.addChild(MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x67236d4a5830221eL, 0x67236d4a58343d17L, "toNode"), (SNode) p1);
    }
    return n1;
  }
  private static boolean eq_t528rj_a0a0a0a0a0a2a2a8(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_t528rj_a0a0a0a0a0a2a1a11(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
