package jetbrains.mps.lang.migration.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.MoveNodesBuilder;
import jetbrains.mps.project.Project;
import java.util.List;
import jetbrains.mps.lang.migration.runtime.base.MoveNodePart;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.Extension;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import jetbrains.mps.lang.migration.runtime.base.RefactoringPart;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class LocalMigrationStepBuilder extends MoveNodesBuilder.MoveNodesBuilderBase {
  private Project myProject;
  private List<MoveNodePart> myParts = ListSequence.fromList(new ArrayList<MoveNodePart>());


  public static class LocalMigrationStepBuilder_extension extends Extension.Default<MoveNodesBuilder.MoveNodesBuilderProvider> {
    public LocalMigrationStepBuilder_extension() {
      super("jetbrains.mps.ide.platform.MoveNodesBuilder");
    }
    public MoveNodesBuilder.MoveNodesBuilderProvider get() {
      return new MoveNodesBuilder.MoveNodesBuilderProvider() {
        public MoveNodesBuilder createMoveNodesBuilder(SModule module, Project project) {
          return new LocalMigrationStepBuilder(project);
        }
      };
    }
  }


  public LocalMigrationStepBuilder(Project project) {
    myProject = project;
  }
  public MoveNodesBuilder.IncompleteMoveNode moveNode(SNode from) {
    final MoveNodePart part = new MoveNodePart(from.getReference());
    ListSequence.fromList(myParts).addElement(part);
    return new MoveNodesBuilder.IncompleteMoveNode() {
      public void setTarget(SNode to) {
        part.setTo(to.getReference());
      }
    };
  }
  public void commit(Runnable callBack) {
    Map<RefactoringPart, Iterable<SNodeReference>> affectedNodes = MapSequence.fromMap(new HashMap<RefactoringPart, Iterable<SNodeReference>>());
    for (MoveNodePart part : ListSequence.fromList(myParts)) {
      MapSequence.fromMap(affectedNodes).put(part, part.getAffectedNodes(myProject.getScope(), myProject.getRepository()));
    }

    callBack.run();

    for (MoveNodePart part : ListSequence.fromList(myParts)) {
      part.execute(Sequence.fromIterable(MapSequence.fromMap(affectedNodes).get(part)).select(new ISelector<SNodeReference, SNode>() {
        public SNode select(SNodeReference it) {
          return it.resolve(myProject.getRepository());
        }
      }));
    }
  }
}
