package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.openapi.actionSystem.DataProvider;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.vcs.diff.ui.common.DiffEditor;
import java.util.List;
import jetbrains.mps.vcs.diff.ui.common.ChangeGroupLayout;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.vcs.diff.ui.common.DiffEditorSeparator;
import jetbrains.mps.vcs.diff.ui.common.DiffEditorsGroup;
import javax.swing.JPanel;
import java.awt.GridBagLayout;
import java.awt.BorderLayout;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.diff.ex.DiffStatusBar;
import com.intellij.openapi.diff.impl.util.TextDiffType;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.vcs.diff.ui.common.Bounds;
import java.awt.Frame;
import javax.swing.JComponent;
import javax.swing.JSplitPane;
import jetbrains.mps.vcs.diff.ui.common.NextPreviousTraverser;
import jetbrains.mps.workbench.action.ActionUtils;
import com.intellij.openapi.actionSystem.Separator;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import javax.swing.SwingUtilities;
import java.awt.DisplayMode;
import java.awt.GraphicsEnvironment;
import java.awt.Dimension;
import com.intellij.openapi.util.DimensionService;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.vcs.diff.ui.common.DiffModelTree;
import com.intellij.openapi.util.Ref;
import javax.swing.Action;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.vcs.diff.ui.common.DiffTemporaryModule;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.vcs.diff.ui.common.DiffChangeGroupLayout;
import jetbrains.mps.vcs.diff.ui.common.ChangeGroupMessages;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.vcs.diff.ui.common.GoToNeighbourRootActions;
import org.jetbrains.annotations.NotNull;
import java.awt.GraphicsDevice;
import java.awt.HeadlessException;

public class RootDifferenceDialog extends DialogWrapper implements DataProvider {
  private ModelDifferenceDialog myModelDialog;
  private SNodeId myRootId;
  private DiffEditor myOldEditor;
  private DiffEditor myNewEditor;
  private List<ChangeGroupLayout> myChangeGroupLayouts = ListSequence.fromList(new ArrayList<ChangeGroupLayout>());
  private List<DiffEditorSeparator> myEditorSeparators = ListSequence.fromList(new ArrayList<DiffEditorSeparator>());
  private DiffEditorsGroup myDiffEditorsGroup = new DiffEditorsGroup();
  private JPanel myTopPanel = new JPanel(new GridBagLayout());
  private JPanel myBottomPanel = new JPanel(new GridBagLayout());
  private JPanel myContainer = new JPanel(new BorderLayout());
  private ActionToolbar myActionToolbar;
  private DiffStatusBar myStatusBar = new DiffStatusBar(TextDiffType.DIFF_TYPES);
  private boolean myClosed;
  private DefaultActionGroup myActionGroup;

  public RootDifferenceDialog(ModelDifferenceDialog modelDialog, SNodeId rootId, String rootName, @Nullable Bounds firstChange) {
    super(modelDialog.getWindow(), true);
    setTitle("Difference for " + rootName);
    init(modelDialog, rootId, firstChange);
  }

  public RootDifferenceDialog(ModelDifferenceDialog modelDialog, SNodeId rootId, String rootName, Frame frame, @Nullable Bounds firstChange) {
    super(frame, true);
    setTitle("Difference for " + rootName);
    init(modelDialog, rootId, firstChange);
  }

  @Nullable
  protected JComponent createCenterPanel() {
    return myContainer;
  }

  private void init(ModelDifferenceDialog modelDialog, SNodeId rootId, @Nullable final Bounds firstChange) {
    // Two constructors and init method is needed because different superconstructors should be invoked 
    myModelDialog = modelDialog;
    myRootId = rootId;

    myOldEditor = addEditor(0, myModelDialog.getChangeSet().getOldModel());
    myNewEditor = addEditor(1, myModelDialog.getChangeSet().getNewModel());

    linkEditors(true);
    linkEditors(false);

    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, myTopPanel, myBottomPanel);
    splitPane.setResizeWeight(0.7);

    RootDifferenceDialog.MyGoToNeighbourRootActions neighbourActions = new RootDifferenceDialog.MyGoToNeighbourRootActions();
    final NextPreviousTraverser neighbourTraverser = new NextPreviousTraverser(myChangeGroupLayouts, myNewEditor.getMainEditor());
    myActionGroup = ActionUtils.groupFromActions(neighbourActions.previous(), neighbourActions.next(), Separator.getInstance(), neighbourTraverser.previousAction(), neighbourTraverser.nextAction(), Separator.getInstance(), new RevertRootsAction(myModelDialog) {
      protected SNodeId[] getRoots() {
        return new SNodeId[]{myRootId};
      }

      protected void after() {
        rehighlight();
      }
    });
    myActionToolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, myActionGroup, true);
    neighbourTraverser.setActionToolbar(myActionToolbar);

    myContainer.add(myActionToolbar.getComponent(), BorderLayout.NORTH);
    myContainer.add(splitPane, BorderLayout.CENTER);
    myContainer.add(myStatusBar, BorderLayout.SOUTH);

    highlightAllChanges();

    if (firstChange != null) {
      SwingUtilities.invokeLater(new Runnable() {
        public void run() {
          neighbourTraverser.goToBounds(firstChange);
        }
      });
    } else {
      neighbourTraverser.goToFirstChangeLater();
    }
    DisplayMode displayMode = check_vu2gar_a0ab0r(check_vu2gar_a0a62a71(GraphicsEnvironment.getLocalGraphicsEnvironment()));
    int width = (displayMode == null ?
      800 :
      displayMode.getWidth() - 100
    );
    int height = (displayMode == null ?
      600 :
      displayMode.getHeight() - 100
    );
    myContainer.setPreferredSize(new Dimension(width, height));
    Dimension size = DimensionService.getInstance().getSize(getDimensionServiceKey());
    if (size == null) {
      myContainer.setPreferredSize(new Dimension(width, height));
    }
    init();
  }

  public String getDimensionServiceKey() {
    return getClass().getName();
  }

  @Nullable
  public Object getData(@NonNls String dataId) {
    if (DiffModelTree.NODE_ID_DATAKEY.is(dataId)) {
      return new Ref<SNodeId>(myRootId);
    }
    return null;
  }

  protected Action[] createActions() {
    return new Action[0];
  }

  private DiffEditor addEditor(int index, SModel model) {
    final DiffEditor result = new DiffEditor(DiffTemporaryModule.getOperationContext(myModelDialog.getProject(), model), model.getNodeById(myRootId), myModelDialog.getContentTitles()[index], index == 0);

    GridBagConstraints gbc = new GridBagConstraints(index * 2, 0, 1, 1, 1, 1, GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(5, (index == 0 ?
      5 :
      0
    ), 5, (index == 2 ?
      5 :
      0
    )), 0, 0);
    myTopPanel.add(result.getTopComponent(), gbc);
    myBottomPanel.add(result.getInspector().getExternalComponent(), gbc);

    myDiffEditorsGroup.add(result);
    return result;
  }

  private void highlightAllChanges() {
    ListSequence.fromList(myChangeGroupLayouts).visitAll(new IVisitor<ChangeGroupLayout>() {
      public void visit(ChangeGroupLayout b) {
        b.invalidate();
      }
    });
    for (ModelChange change : ListSequence.fromList(myModelDialog.getChangesForRoot(myRootId))) {
      higlightChange(myOldEditor, myModelDialog.getChangeSet().getOldModel(), change);
      higlightChange(myNewEditor, myModelDialog.getChangeSet().getNewModel(), change);
    }
    ListSequence.fromList(myChangeGroupLayouts).visitAll(new IVisitor<ChangeGroupLayout>() {
      public void visit(ChangeGroupLayout b) {
        b.invalidate();
      }
    });

    myOldEditor.repaintAndRebuildEditorMessages();
    myNewEditor.repaintAndRebuildEditorMessages();

    int count = ListSequence.fromList(myModelDialog.getChangesForRoot(myRootId)).count();
    myStatusBar.setText((count == 0 ?
      "no differences" :
      NameUtil.formatNumericalString(count, "difference")
    ));
  }

  private void linkEditors(boolean inspector) {
    // create change group builder, trapecium strip and merge buttons painter 
    // 'mine' parameter means mine changeset, 'inspector' - highlight inspector editor component 
    ChangeGroupLayout layout = new DiffChangeGroupLayout(null, myModelDialog.getChangeSet(), myOldEditor, myNewEditor, inspector);
    ChangeGroupMessages.startMaintaining(layout);
    ListSequence.fromList(myChangeGroupLayouts).addElement(layout);
    DiffEditorSeparator separator = new DiffEditorSeparator(layout);
    GridBagConstraints gbc = new GridBagConstraints(1, 0, 1, 1, 0, 1, GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(5, 0, 5, 0), 0, 0);
    ((inspector ?
      myBottomPanel :
      myTopPanel
    )).add(separator, gbc);
    ListSequence.fromList(myEditorSeparators).addElement(separator);
    if (!(myModelDialog.getChangeSet().getNewModel().isNotEditable())) {
      DiffButtonsPainter.addTo(this, myOldEditor, layout, inspector);
      DiffButtonsPainter.addTo(this, myNewEditor, layout, inspector);
    }
  }

  private void higlightChange(DiffEditor diffEditor, SModel model, ModelChange change) {
    diffEditor.highlightChange(model, change, null);
  }

  public void rehighlight() {
    myModelDialog.rebuildChangeSet();
    myNewEditor.unhighlightAllChanges();
    myOldEditor.unhighlightAllChanges();

    if (myNewEditor.getEditedNode() == null) {
      myNewEditor.editRoot(myModelDialog.getProject(), myRootId, myModelDialog.getChangeSet().getNewModel());
    }

    myNewEditor.getMainEditor().rebuildEditorContent();
    myOldEditor.getMainEditor().rebuildEditorContent();

    highlightAllChanges();
  }

  /*package*/ void rollbackChanges(Iterable<ModelChange> changes) {
    myModelDialog.rollbackChanges(changes, new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        rehighlight();
      }
    });
  }

  protected JComponent getMainComponent() {
    return myContainer;
  }

  @Override
  public void dispose() {
    if (!(myClosed)) {
      myClosed = true;
      myActionGroup.removeAll();
      myModelDialog.rootDialogClosed();
      myOldEditor.dispose();
      myOldEditor = null;
      myNewEditor.dispose();
      myNewEditor = null;
      ListSequence.fromList(myEditorSeparators).visitAll(new IVisitor<DiffEditorSeparator>() {
        public void visit(DiffEditorSeparator s) {
          s.dispose();
        }
      });
      ListSequence.fromList(myEditorSeparators).clear();
    }
    myClosed = true;
    super.dispose();
  }

  public class MyGoToNeighbourRootActions extends GoToNeighbourRootActions {
    public MyGoToNeighbourRootActions() {
    }

    protected void goTo(@NotNull SNodeId rootId) {
      myModelDialog.startGoingToNeighbour();
      close(DialogWrapper.NEXT_USER_EXIT_CODE);
      myModelDialog.invokeRootDifference(rootId);
    }

    @Nullable
    protected SNodeId getNeighbourId(boolean next) {
      return myModelDialog.getNeighbourRoot(myRootId, next);
    }
  }

  private static DisplayMode check_vu2gar_a0ab0r(GraphicsDevice checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getDisplayMode();
    }
    return null;
  }

  private static GraphicsDevice check_vu2gar_a0a62a71(GraphicsEnvironment checkedDotOperand) throws HeadlessException {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getDefaultScreenDevice();
    }
    return null;
  }
}
