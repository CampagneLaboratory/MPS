package jetbrains.mps.vcs.diff.ui.common;

/*Generated by MPS */

import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.project.Project;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.project.ModuleId;
import org.jetbrains.mps.openapi.model.SModelReference;
import java.util.List;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.ScopeOperations;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.extapi.model.SModelBase;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.extapi.module.SModuleBase;
import jetbrains.mps.smodel.SModelId;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.SReferenceBase;
import jetbrains.mps.smodel.MPSModuleOwner;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.Language;

public class DiffTemporaryModule extends AbstractModule {
  private SModel myModel;
  private Project myProject;

  private DiffTemporaryModule(SModel model, String version, Project project) {
    setModuleReference(new ModuleReference(SModelOperations.getModelName(model.getModelDescriptor()) + "@" + version, ModuleId.regular()));
    myModel = model;
    myProject = project;
  }

  @Override
  public String toString() {
    return getModuleName();
  }

  @Override
  protected AbstractModule.ModuleScope createScope() {
    return new DiffTemporaryModule.DiffModuleScope();
  }

  private org.jetbrains.mps.openapi.model.SModel findModel(SModelReference reference) {
    if (reference.equals(myModel.getReference())) {
      return myModel.getModelDescriptor();
    }
    List<IScope> scopes = ListSequence.fromList(new ArrayList<IScope>());
    IScope ps = myProject.getScope();
    if (ps != null) {
      ListSequence.fromList(scopes).addElement(ps);
    }
    ListSequence.fromList(scopes).addElement(GlobalScope.getInstance());
    for (IScope scope : ListSequence.fromList(scopes)) {
      org.jetbrains.mps.openapi.model.SModel md = scope.getModelDescriptor(reference);
      if (md != null) {
        return md;
      }
    }
    // if we can't find model using full reference, try to find by fq-name 
    // this is needed for viewing diff on models saved before MPS 2.0 M5 
    for (IScope scope : ListSequence.fromList(scopes)) {
      org.jetbrains.mps.openapi.model.SModel md = Sequence.fromIterable(((Iterable<org.jetbrains.mps.openapi.model.SModel>) ScopeOperations.getModelsByName(scope, reference.getModelName()))).first();
      if (md != null) {
        return md;
      }
    }
    return null;
  }

  public static void createModuleAndRegister(org.jetbrains.mps.openapi.model.SModel model, String version, Project project, boolean mergeResultModel) {
    if (version != null) {
      setSModelId(model, version);
    }
    SModule module = new DiffTemporaryModule(as_3t8mfw_a0a0a0b0g(model, SModelBase.class).getSModelInternal(), (version == null ?
      "temporary" :
      version
    ), project);
    MPSModuleRepository.getInstance().registerModule(module, project);
    ((SModuleBase) module).registerModel((SModelBase) model);
  }

  public static void setSModelId(org.jetbrains.mps.openapi.model.SModel model, String version) {
    SModelReference modelRef = model.getReference();
    as_3t8mfw_a0a1a7(model, SModelBase.class).changeModelReference(genMergeSModelRef(modelRef, version));
  }

  public static void resetSModelId(org.jetbrains.mps.openapi.model.SModel model) {
    SModelReference modelRef = model.getReference();
    assert modelRef.getModelId() instanceof SModelId.ForeignSModelId;
    as_3t8mfw_a0a2a8(model, SModelBase.class).changeModelReference(getOriginalSModelRef(modelRef));
  }

  public static void fixReferences(org.jetbrains.mps.openapi.model.SModel model, final SModelReference modelRef) {
    assert modelRef.getModelId() instanceof SModelId.ForeignSModelId;
    final SModelReference oldModelRef = getOriginalSModelRef(modelRef);
    for (SNode node : ListSequence.fromList(SModelOperations.getNodes(model, null))) {
      Sequence.fromIterable(SNodeOperations.getReferences(node)).where(new IWhereFilter<SReference>() {
        public boolean accept(SReference it) {
          return modelRef.equals(it.getTargetSModelReference());
        }
      }).visitAll(new IVisitor<SReference>() {
        public void visit(SReference it) {
          as_3t8mfw_a0a0a0a0a0a0a2a9(it, SReferenceBase.class).setTargetSModelReference(oldModelRef);
        }
      });
    }
  }

  public static void unregisterModel(org.jetbrains.mps.openapi.model.SModel model, MPSModuleOwner owner) {
    SModule module = model.getModule();
    ((SModuleBase) module).unregisterModel((SModelBase) model);
    MPSModuleRepository.getInstance().unregisterModule(module, owner);
  }

  private static SModelReference genMergeSModelRef(SModelReference ref, String version) {
    SModelId newId = SModelId.foreign("merge_" + version + "#" + ref.getModelId().toString());
    String newName = ref.getModelName() + "@" + version;
    return PersistenceFacade.getInstance().createModelReference(ref.getModuleReference(), newId, newName);
  }

  private static SModelReference getOriginalSModelRef(SModelReference ref) {
    String id = as_3t8mfw_a0a0a0m(ref.getModelId(), SModelId.ForeignSModelId.class).getId();
    String name = ref.getModelName();
    org.jetbrains.mps.openapi.model.SModelId oldId = SModelId.fromString(id.substring(id.indexOf("#") + 1));
    String oldName = name.substring(0, name.lastIndexOf("@"));
    return PersistenceFacade.getInstance().createModelReference(ref.getModuleReference(), oldId, oldName);
  }

  private class DiffModuleScope extends AbstractModule.ModuleScope {
    private DiffModuleScope() {
    }

    @Override
    protected Set<SModule> getInitialModules() {
      Set<SModule> result = SetSequence.fromSet(new HashSet<SModule>());
      SetSequence.fromSet(result).addElement(DiffTemporaryModule.this);
      SetSequence.fromSet(result).addSequence(Sequence.fromIterable(GlobalScope.getInstance().getVisibleModules()));
      return result;
    }

    @Override
    protected Set<Language> getInitialUsedLanguages() {
      return SetSequence.fromSetWithValues(new HashSet<Language>(), GlobalScope.getInstance().getVisibleLanguages());
    }

    @Override
    public org.jetbrains.mps.openapi.model.SModel resolve(SModelReference reference) {
      return findModel(reference);
    }
  }

  private static <T> T as_3t8mfw_a0a0a0b0g(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }

  private static <T> T as_3t8mfw_a0a1a7(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }

  private static <T> T as_3t8mfw_a0a2a8(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }

  private static <T> T as_3t8mfw_a0a0a0a0a0a0a2a9(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }

  private static <T> T as_3t8mfw_a0a0a0m(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }
}
