package jetbrains.mps.vcs.diff.ui.common;

/*Generated by MPS */

import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.project.Project;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.project.ModuleId;
import org.jetbrains.mps.openapi.model.SModelReference;
import java.util.List;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.ScopeOperations;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.smodel.SModelId;
import jetbrains.mps.smodel.MPSModuleOwner;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.extapi.module.SModuleBase;
import jetbrains.mps.extapi.model.SModelBase;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.extapi.model.EditableSModelBase;
import org.jetbrains.mps.openapi.persistence.NullDataSource;
import java.io.IOException;
import org.jetbrains.mps.openapi.persistence.ModelSaveException;
import jetbrains.mps.project.ModuleContext;

public class DiffTemporaryModule extends AbstractModule {
  private SModel myModel;
  private Project myProject;

  private DiffTemporaryModule(SModel model, String version, Project project) {
    setModuleReference(new ModuleReference(SModelOperations.getModelName(model.getModelDescriptor()) + "@" + version, ModuleId.regular()));
    myModel = model;
    myProject = project;
  }

  @Override
  public String toString() {
    return getModuleName();
  }

  @Override
  protected AbstractModule.ModuleScope createScope() {
    return new DiffTemporaryModule.DiffModuleScope();
  }

  private DiffTemporaryModule.DiffModuleContext createContext() {
    return new DiffTemporaryModule.DiffModuleContext();
  }

  private org.jetbrains.mps.openapi.model.SModel findModel(SModelReference reference) {
    if (reference.equals(myModel.getReference())) {
      return myModel.getModelDescriptor();
    }
    List<IScope> scopes = ListSequence.fromList(new ArrayList<IScope>());
    IScope ps = myProject.getScope();
    if (ps != null) {
      ListSequence.fromList(scopes).addElement(ps);
    }
    ListSequence.fromList(scopes).addElement(GlobalScope.getInstance());
    for (IScope scope : ListSequence.fromList(scopes)) {
      org.jetbrains.mps.openapi.model.SModel md = scope.getModelDescriptor(reference);
      if (md != null) {
        return md;
      }
    }
    // if we can't find model using full reference, try to find by fq-name 
    // this is needed for viewing diff on models saved before MPS 2.0 M5 
    for (IScope scope : ListSequence.fromList(scopes)) {
      org.jetbrains.mps.openapi.model.SModel md = Sequence.fromIterable(((Iterable<org.jetbrains.mps.openapi.model.SModel>) ScopeOperations.getModelsByName(scope, reference.getModelName()))).first();
      if (md != null) {
        return md;
      }
    }
    return null;
  }

  private static void createModuleForModel(SModel model, String version, Project project, boolean mergeResultModel) {
    SModule module = null;
    if (mergeResultModel) {
      org.jetbrains.mps.openapi.model.SModel mdInRepo = SModelRepository.getInstance().getModelDescriptor(model.getReference());
      if (mdInRepo != null) {
        module = mdInRepo.getModule();
      }
    }

    if (module == null) {
      module = new DiffTemporaryModule(model, version, project);
    }
    model.setModelDescriptor(new DiffTemporaryModule.DiffSModelDescriptor(module, model, mergeResultModel));
  }

  public static void createModuleAndRegister(SModel model, String version, Project project, boolean mergeResultModel) {
    if (version != null) {
      setSModelId(model, version);
    }
    createModuleForModel(model, (version == null ?
      "temporary" :
      version
    ), project, mergeResultModel);
    registerModel(model, project);
  }

  public static void setSModelId(SModel model, String version) {
    SModelReference modelRef = model.getReference();
    CopyUtil.changeModelReference(model.getModelDescriptor(), new jetbrains.mps.smodel.SModelReference(SModelFqName.fromString(genMergeSModelName(modelRef.getModelName(), version)), genMergeSModelId(modelRef.getModelId(), version)));
    model.setModelDescriptor(new DiffTemporaryModule.DiffSModelDescriptor(null, model, false));
  }

  public static void resetSModelId(org.jetbrains.mps.openapi.model.SModel model) {
    SModelReference modelRef = model.getReference();
    assert modelRef.getModelId() instanceof SModelId.ForeignSModelId;
    CopyUtil.changeModelReference(model, new jetbrains.mps.smodel.SModelReference(SModelFqName.fromString(getOriginalSModelName(modelRef.getModelName())), getOriginalSModelId((SModelId.ForeignSModelId) modelRef.getModelId())));
  }

  private static void registerModel(SModel model, MPSModuleOwner owner) {
    SModule module = model.getModelDescriptor().getModule();
    MPSModuleRepository.getInstance().registerModule(module, owner);
    ((SModuleBase) module).registerModel((SModelBase) model.getModelDescriptor());
  }

  public static void unregisterModel(org.jetbrains.mps.openapi.model.SModel model, MPSModuleOwner owner) {
    SModule module = model.getModule();
    ((SModuleBase) module).unregisterModel((SModelBase) model);
    MPSModuleRepository.getInstance().unregisterModule(module, owner);
  }

  private static org.jetbrains.mps.openapi.model.SModelId genMergeSModelId(org.jetbrains.mps.openapi.model.SModelId modelId, String version) {
    return SModelId.foreign("merge_" + version + "#" + modelId.toString());
  }

  private static org.jetbrains.mps.openapi.model.SModelId getOriginalSModelId(SModelId.ForeignSModelId modelId) {
    String id = modelId.getId();
    return SModelId.fromString(id.substring(id.indexOf("#") + 1));
  }

  private static String genMergeSModelName(String name, String version) {
    return name + "@" + version;
  }

  private static String getOriginalSModelName(String name) {
    return name.substring(0, name.lastIndexOf("@"));
  }

  private class DiffModuleScope extends AbstractModule.ModuleScope {
    private DiffModuleScope() {
    }

    @Override
    protected Set<SModule> getInitialModules() {
      Set<SModule> result = SetSequence.fromSet(new HashSet<SModule>());
      SetSequence.fromSet(result).addElement(DiffTemporaryModule.this);
      SetSequence.fromSet(result).addSequence(Sequence.fromIterable(GlobalScope.getInstance().getVisibleModules()));
      return result;
    }

    @Override
    protected Set<Language> getInitialUsedLanguages() {
      return SetSequence.fromSetWithValues(new HashSet<Language>(), GlobalScope.getInstance().getVisibleLanguages());
    }

    @Override
    public org.jetbrains.mps.openapi.model.SModel resolve(SModelReference reference) {
      return findModel(reference);
    }
  }

  public static class DiffSModelDescriptor extends EditableSModelBase {
    private SModule myModule;
    private boolean myEditable;
    private final SModel mySModel;


    private DiffSModelDescriptor(SModule module, SModel model, boolean editable) {
      super(model.getReference(), new NullDataSource());
      myModule = module;
      mySModel = model;
      myEditable = editable;
      updateTimestamp();
    }

    @Override
    public SModule getModule() {
      return myModule;
    }

    @Override
    public org.jetbrains.mps.openapi.model.SModel resolveModel(SModelReference reference) {
      throw new UnsupportedOperationException("not supported");
    }

    @Override
    public boolean isReadOnly() {
      return !(myEditable);
    }



    public SModel getSModelInternal() {
      return mySModel;
    }

    protected SModel getCurrentModelInternal() {
      return mySModel;
    }

    public boolean isLoaded() {
      return true;
    }

    @Override
    public boolean isChanged() {
      return false;
    }

    @Override
    public void rename(String newModelName, boolean changeFile) {
      throw new UnsupportedOperationException();
    }



    protected void reloadContents() {
      throw new UnsupportedOperationException();
    }

    protected boolean saveModel() throws IOException, ModelSaveException {
      throw new UnsupportedOperationException();
    }
  }

  private class DiffModuleContext extends ModuleContext {
    private DiffModuleContext() {
      super(DiffTemporaryModule.this, myProject);
    }

    @Override
    public SModule getModule() {
      return DiffTemporaryModule.this;
    }
  }
}
