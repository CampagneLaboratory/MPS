package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.openapi.actionSystem.DataProvider;
import com.intellij.openapi.project.Project;
import jetbrains.mps.vcs.diff.ModelChangeSet;
import org.jetbrains.mps.openapi.model.SNodeId;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import com.intellij.ui.JBSplitter;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.diff.ex.DiffStatusBar;
import com.intellij.openapi.diff.impl.util.TextDiffType;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.smodel.SModel;
import com.intellij.openapi.diff.DiffRequest;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.vcs.diff.ui.common.DiffTemporaryModule;
import jetbrains.mps.extapi.model.EditableSModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.vcs.diff.ChangeSetBuilder;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.workbench.action.ActionUtils;
import jetbrains.mps.vcs.diff.ui.common.InvokeTextDiffAction;
import com.intellij.openapi.diff.DiffManager;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import jetbrains.mps.vcs.diff.ui.common.SimpleDiffRequest;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import com.intellij.ui.ScrollPaneFactory;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import java.awt.Dimension;
import com.intellij.openapi.util.DimensionService;
import org.jetbrains.annotations.NotNull;
import javax.swing.Action;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.vcs.diff.ui.common.Bounds;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.vcs.diff.ui.common.DiffModelTree;
import com.intellij.openapi.util.Ref;
import jetbrains.mps.vcs.diff.ui.common.GoToNeighbourRootActions;
import jetbrains.mps.workbench.action.BaseAction;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.vcs.diff.changes.ChangeType;
import jetbrains.mps.vcs.diff.changes.AddRootChange;
import jetbrains.mps.vcs.diff.changes.DeleteRootChange;
import jetbrains.mps.vcs.diff.ui.common.ChangeColors;
import java.util.Arrays;

public class ModelDifferenceDialog extends DialogWrapper implements DataProvider {
  private Project myProject;
  private ModelChangeSet myChangeSet;
  private ModelChangeSet myMetadataChangeSet;
  private SNodeId myRootId;

  private ModelDifferenceDialog.ModelDifferenceTree myTree;
  private JPanel myComponent = new JPanel(new BorderLayout());
  private JBSplitter myPanel = new JBSplitter(true, 0.25f);
  private RootDifferencePane myRootDifferencePane = null;
  private ActionToolbar myToolbar;
  private DiffStatusBar myStatusBar = new DiffStatusBar(TextDiffType.DIFF_TYPES);

  private DefaultActionGroup myActionGroup;

  private String[] myContentTitles;
  private boolean myEditable;


  public ModelDifferenceDialog(final SModel oldModel, final SModel newModel, DiffRequest diffRequest) {
    super(diffRequest.getProject());
    myProject = diffRequest.getProject();
    final jetbrains.mps.project.Project p = ProjectHelper.toMPSProject(myProject);
    DiffTemporaryModule.createModuleForModel(oldModel, "old", p);
    DiffTemporaryModule.createModuleForModel(newModel, "new", p);
    myContentTitles = diffRequest.getContentTitles();
    assert myContentTitles.length == 2;
    myEditable = newModel.getModelDescriptor() instanceof EditableSModel && SModelRepository.getInstance().getModelDescriptor(newModel.getReference()) == newModel.getModelDescriptor();

    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        setTitle("Difference for model: " + oldModel.getModelDescriptor().getModelName());
        myChangeSet = ChangeSetBuilder.buildChangeSet(oldModel, newModel, true);
        if (Sequence.fromIterable(myChangeSet.getChangesForRoot(null)).isNotEmpty()) {
          SModel oldMetaModel = MetadataUtil.createMetadataModel(oldModel);
          SModel newMetaModel = MetadataUtil.createMetadataModel(newModel);
          DiffTemporaryModule.createModuleForModel(oldMetaModel, "old", p);
          DiffTemporaryModule.createModuleForModel(newMetaModel, "new", p, true);
          myMetadataChangeSet = ChangeSetBuilder.buildChangeSet(oldMetaModel, newMetaModel, true);
        }
      }
    });

    myActionGroup = ActionUtils.groupFromActions(new InvokeTextDiffAction("View as Text", "View model difference using as text difference of XML contents", this, diffRequest, DiffManager.getInstance().getIdeaDiffTool()));

    init();

    getWindow().addWindowListener(new WindowAdapter() {
      @Override
      public void windowClosed(WindowEvent event) {
        syncMetadataChanges();
        getWindow().removeWindowListener(this);
      }
    });
  }

  public ModelDifferenceDialog(SModel oldModel, SModel newModel, Project project, String oldTitle, String newTitle) {
    this(oldModel, newModel, new SimpleDiffRequest(project, new SModel[]{oldModel, newModel}, new String[]{oldTitle, newTitle}));
  }



  @Nullable
  @Override
  protected JComponent createCenterPanel() {
    myTree = new ModelDifferenceDialog.ModelDifferenceTree();
    myPanel.setFirstComponent(ScrollPaneFactory.createScrollPane(myTree));

    myToolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, myActionGroup, true);
    myToolbar.updateActionsImmediately();

    myComponent.add(myToolbar.getComponent(), BorderLayout.NORTH);
    myComponent.add(myPanel, BorderLayout.CENTER);
    myComponent.add(myStatusBar, BorderLayout.SOUTH);

    Dimension size = DimensionService.getInstance().getSize(getDimensionServiceKey());
    if (size == null) {
      myComponent.setPreferredSize(new Dimension(500, 700));
    }

    return myComponent;
  }



  @NotNull
  @Override
  protected Action[] createActions() {
    return new Action[0];
  }

  @Override
  public String getDimensionServiceKey() {
    return getClass().getName();
  }

  @Nullable
  @Override
  public JComponent getPreferredFocusedComponent() {
    return myTree;
  }



  /*package*/ void rebuildChangeSets() {
    ChangeSetBuilder.rebuildChangeSet(myChangeSet);
    if (myMetadataChangeSet != null) {
      ChangeSetBuilder.rebuildChangeSet(myMetadataChangeSet);
    }
    myTree.rebuildLater();
  }

  public boolean isEditable() {
    return myEditable;
  }

  private void syncMetadataChanges() {
    if (myMetadataChangeSet != null && myEditable) {
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          MetadataUtil.applyMetadataChanges(myChangeSet.getNewModel(), myMetadataChangeSet.getNewModel());
        }
      });
    }
  }

  public void resetCurrentRoot() {
    if (myRootDifferencePane == null) {
      return;
    }

    myPanel.setSecondComponent(null);
    myRootDifferencePane.dispose();
    myRootDifferencePane = null;
    myRootId = null;
    myStatusBar.setText("");
    syncMetadataChanges();
  }

  private void changeCurrentRoot(@Nullable final SNodeId rootId) {
    if (myRootDifferencePane != null && myRootId == rootId) {
      return;
    }
    syncMetadataChanges();

    myRootId = rootId;
    final ModelChangeSet changeSet = (rootId == null ?
      myMetadataChangeSet :
      myChangeSet
    );
    final SNodeId nodeId = (rootId == null ?
      ListSequence.fromList(SModelOperations.getRoots(((org.jetbrains.mps.openapi.model.SModel) myMetadataChangeSet.getOldModel().getModelDescriptor()), null)).first().getNodeId() :
      rootId
    );
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        if (myRootDifferencePane == null) {
          myRootDifferencePane = new RootDifferencePane(myProject, changeSet, nodeId, myTree.getNameForRoot(rootId), myContentTitles, myEditable, myStatusBar);
          ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, myRootDifferencePane.getActions(), true);
          JPanel panel = new JPanel(new BorderLayout());
          panel.add(toolbar.getComponent(), BorderLayout.NORTH);
          panel.add(myRootDifferencePane.getPanel(), BorderLayout.CENTER);
          myPanel.setSecondComponent(panel);
          myRootDifferencePane.navigateInitial(null);
        } else {
          myRootDifferencePane.setRootId(nodeId, changeSet);
        }
      }
    });
  }

  public void setCurrentRoot(@Nullable SNodeId rootId) {
    myTree.setSelected(rootId);
    changeCurrentRoot(rootId);
  }

  @Nullable
  public SNodeId getCurrentRoot() {
    return myRootId;
  }



  public static void showRootDifference(final SModel oldModel, final SModel newModel, final SNodeId rootId, Project project, String oldTitle, String newTitle, @Nullable final Bounds scrollTo) {
    final ModelDifferenceDialog dialog = new ModelDifferenceDialog(oldModel, newModel, project, oldTitle, newTitle);
    dialog.setCurrentRoot(rootId);
    dialog.myPanel.setFirstComponent(null);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SNode node = newModel.getNode(rootId);
        if (node == null) {
          node = oldModel.getNode(rootId);
        }
        String rootName = (node == null ?
          "root" :
          node.getPresentation()
        );
        dialog.setTitle("Difference for " + rootName);
        dialog.myRootDifferencePane.navigateInitial(scrollTo);
      }
    });
    dialog.show();
  }



  @Nullable
  public Object getData(@NonNls String dataId) {
    if (DiffModelTree.NODE_ID_DATAKEY.is(dataId)) {
      return new Ref<SNodeId>(myRootId);
    }
    return null;
  }



  public class MyGoToNeighbourRootActions extends GoToNeighbourRootActions.GoToByTree {
    public MyGoToNeighbourRootActions() {
      super(myTree);
    }

    @Nullable
    @Override
    protected SNodeId getCurrentNodeId() {
      return getCurrentRoot();
    }

    @Override
    public void setCurrentNodeId(@Nullable SNodeId nodeId) {
      changeCurrentRoot(nodeId);
    }
  }



  private class ModelDifferenceTree extends DiffModelTree {
    private ModelDifferenceTree() {
      super(DiffTemporaryModule.getOperationContext(myProject, myChangeSet.getNewModel()));
    }

    @Override
    protected Iterable<BaseAction> getRootActions() {
      List<BaseAction> actions = ListSequence.fromList(new ArrayList<BaseAction>());

      if (myEditable) {
        ListSequence.fromList(actions).addElement(new RevertRootsAction("roots") {
          @Override
          protected Iterable<ModelChange> getChanges() {
            return Sequence.fromIterable(Sequence.fromArray(getSelectedNodes(DiffModelTree.RootTreeNode.class, null))).translate(new ITranslator2<DiffModelTree.RootTreeNode, ModelChange>() {
              public Iterable<ModelChange> translate(DiffModelTree.RootTreeNode r) {
                return myChangeSet.getChangesForRoot(r.getRootId());
              }
            });
          }

          @Override
          protected void after() {
            rebuildChangeSets();
          }

          @Override
          protected String getRevertTitle() {
            Iterable<SNodeId> roots = Sequence.fromIterable(Sequence.fromArray(getSelectedNodes(DiffModelTree.RootTreeNode.class, null))).select(new ISelector<DiffModelTree.RootTreeNode, SNodeId>() {
              public SNodeId select(DiffModelTree.RootTreeNode rtn) {
                return rtn.getRootId();
              }
            });
            if ((int) Sequence.fromIterable(roots).count() == 1) {
              return (Sequence.fromIterable(roots).first() == null ?
                "Properties" :
                "Root"
              );
            } else if (Sequence.fromIterable(roots).any(new IWhereFilter<SNodeId>() {
              public boolean accept(SNodeId r) {
                return r == null;
              }
            })) {
              return "Roots and Properties ";
            }
            return "Roots";
          }
        });
      }
      return actions;
    }

    @Override
    protected void updateRootCustomPresentation(@NotNull DiffModelTree.RootTreeNode rootTreeNode) {
      ChangeType compositeChangeType = ChangeType.CHANGE;
      if (rootTreeNode.getRootId() != null) {
        ModelChange firstChange = Sequence.fromIterable(myChangeSet.getChangesForRoot(rootTreeNode.getRootId())).first();
        if (firstChange instanceof AddRootChange || firstChange instanceof DeleteRootChange) {
          compositeChangeType = firstChange.getType();
        } else if (firstChange == null) {
          compositeChangeType = null;
        }
      } else {
        if (myMetadataChangeSet == null || ListSequence.fromList(myMetadataChangeSet.getModelChanges()).isEmpty()) {
          compositeChangeType = null;
        }
      }
      rootTreeNode.setColor((compositeChangeType == null ?
        null :
        ChangeColors.getForTree(compositeChangeType)
      ));
    }

    @Override
    protected Iterable<SModel> getModels() {
      return Arrays.asList(myChangeSet.getNewModel(), myChangeSet.getOldModel());
    }

    @Override
    protected Iterable<SNodeId> getAffectedRoots() {
      return myChangeSet.getAffectedRoots();
    }

    @Override
    protected void onUnselect() {
      resetCurrentRoot();
    }

    @Override
    protected void onSelectRoot(@Nullable SNodeId rootId) {
      changeCurrentRoot(rootId);
    }
  }
}
