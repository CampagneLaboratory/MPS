package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.vcs.diff.ui.common.Bounds;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNodeId;

public class MetadataUtil {
  public MetadataUtil() {
  }

  public static void showMetadataDifference(final SModel oldModel, final SModel newModel, final Project project, final String oldTitle, final String newTitle, @Nullable Bounds scrollTo) {
    SModelReference modelRef = new SModelReference(SModelOperations.getModelName(oldModel), "metadata");
    final SModel oldMetaModel = new SModel(modelRef);
    final SModel newMetaModel = new SModel(modelRef);
    final Wrappers._T<ModelDifferenceDialog> modelDialog = new Wrappers._T<ModelDifferenceDialog>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SModelOperations.addRootNode(oldMetaModel, createModelRoot(oldModel));
        SModelOperations.addRootNode(newMetaModel, createModelRoot(newModel));
        modelDialog.value = new ModelDifferenceDialog(oldMetaModel, newMetaModel, project, oldTitle, newTitle);
      }
    });
    modelDialog.value.invokeRootDifference(ListSequence.fromList(SModelOperations.getRoots(oldMetaModel, null)).first().getSNodeId(), scrollTo);

  }

  public static SNode createModelRoot(SModel model) {
    SNode root = SConceptOperations.createNewNode("jetbrains.mps.ide.vcs.modelmetadata.structure.Model", null);
    SPropertyOperations.set(root, "longname", model.getLongName());
    SPropertyOperations.set(root, "uuid", model.getSModelId() + "");
    SPropertyOperations.set(root, "version", "" + (model.getSModelHeader().getVersion()));
    SPropertyOperations.set(root, "persistence", "" + (model.getPersistenceVersion()));
    for (ModuleReference language : ListSequence.fromList(model.importedLanguages())) {
      ListSequence.fromList(SLinkOperations.getTargets(root, "language", true)).addElement(createModuleRefNode(language));
    }
    for (ModuleReference genlanguage : ListSequence.fromList(model.engagedOnGenerationLanguages())) {
      ListSequence.fromList(SLinkOperations.getTargets(root, "languageEngagedOnGeneration", true)).addElement(createModuleRefNode(genlanguage));
    }
    for (ModuleReference devkit : ListSequence.fromList(model.importedDevkits())) {
      ListSequence.fromList(SLinkOperations.getTargets(root, "devkit", true)).addElement(createModuleRefNode(devkit));
    }
    for (SModel.ImportElement impmodel : ListSequence.fromList(model.importedModels())) {
      ListSequence.fromList(SLinkOperations.getTargets(root, "import", true)).addElement(createModelRefNode(impmodel));
    }
    // <node> 

    SPropertyOperations.set(root, "name", "metadata");
    root.setId(SNodeId.fromString("~root"));
    return root;
  }

  public static SNode createModuleRefNode(ModuleReference module) {
    SNode node = SConceptOperations.createNewNode("jetbrains.mps.lang.project.structure.ModuleReference", null);
    SPropertyOperations.set(node, "qualifiedName", module.getModuleFqName());
    SPropertyOperations.set(node, "uuid", module.getModuleId().toString());
    node.setId(SNodeId.fromString("~" + SPropertyOperations.getString(node, "uuid")));
    return node;
  }

  public static SNode createModelRefNode(SModel.ImportElement impModel) {
    SNode node = SConceptOperations.createNewNode("jetbrains.mps.lang.project.structure.ModelReference", null);
    SPropertyOperations.set(node, "qualifiedName", impModel.getModelReference().getLongName());
    SPropertyOperations.set(node, "uuid", impModel.getModelReference().getModelId().toString());
    SPropertyOperations.set(node, "stereotype", impModel.getModelReference().getStereotype());
    node.setId(SNodeId.fromString("~" + SPropertyOperations.getString(node, "uuid")));
    return node;
  }
}
