package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.extapi.model.EditableSModelBase;
import jetbrains.mps.vcs.diff.merge.MergeTemporaryModel;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.vcs.diff.ui.common.DiffModelUtil;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.extapi.model.SModelBase;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.extapi.model.GeneratableSModel;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.smodel.SModelId;
import org.jetbrains.mps.openapi.model.EditableSModel;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class MetadataUtil {
  public MetadataUtil() {
  }
  public static SModel createMetadataModel(SModel model, String version, boolean editable) {
    EditableSModelBase metadataModel = new MergeTemporaryModel(model.getReference(), !(editable));
    metadataModel.addLanguage(PersistenceFacade.getInstance().createModuleReference("6df0089f-3288-4998-9d57-e698e7c8e145(jetbrains.mps.ide.vcs.modelmetadata)"));
    metadataModel.addLanguage(PersistenceFacade.getInstance().createModuleReference("86ef8290-12bb-4ca7-947f-093788f263a9(jetbrains.mps.lang.project)"));
    SModelOperations.addRootNode(((SModel) metadataModel), createModelRoot(model));
    DiffModelUtil.renameModelAndRegister(metadataModel, version);
    metadataModel.setChanged(false);
    return metadataModel;
  }
  public static void dispose(SModel model) {
    DiffModelUtil.unregisterModel(model);
  }
  private static SNode createModelRoot(SModel model) {
    SModelBase modelBase = (SModelBase) model;
    SNode root = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, "jetbrains.mps.ide.vcs.modelmetadata.structure.Model"));
    SPropertyOperations.set(root, MetaAdapterFactory.getProperty(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, 8374934269827355110l, "longname"), SModelOperations.getModelName(model));
    // <node> 
    SPropertyOperations.set(root, MetaAdapterFactory.getProperty(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, 8374934269827355115l, "version"), "" + (modelBase.getVersion()));
    if (model instanceof GeneratableSModel) {
      SPropertyOperations.set(root, MetaAdapterFactory.getProperty(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, 8374934269827355124l, "donotgenerate"), "" + (check_ca1g54_a0a0f0d(((GeneratableSModel) model))));
    }
    for (SModuleReference language : ListSequence.fromList(modelBase.importedLanguages())) {
      ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, 4685150495576720950l, "language"))).addElement(createModuleRefNode(language));
    }
    for (SModuleReference genlanguage : ListSequence.fromList(modelBase.engagedOnGenerationLanguages())) {
      ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, 4685150495576720952l, "languageEngagedOnGeneration"))).addElement(createModuleRefNode(genlanguage));
    }
    for (SModuleReference devkit : ListSequence.fromList(modelBase.importedDevkits())) {
      ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, 4685150495576720955l, "devkit"))).addElement(createModuleRefNode(devkit));
    }
    for (jetbrains.mps.smodel.SModel.ImportElement impmodel : ListSequence.fromList(modelBase.importedModels())) {
      ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, 4685150495576720959l, "import"))).addElement(createModelRefNode(impmodel));
    }

    SPropertyOperations.set(root, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"), "Model Properties");
    ((jetbrains.mps.smodel.SNode) root).setId(SNodeId.fromString("~root"));
    return root;
  }
  private static SNode createModuleRefNode(SModuleReference module) {
    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-8723610397892195161l, -7746462699928525911l), 1855399583446016268l, "jetbrains.mps.lang.project.structure.ModuleReference"));
    SPropertyOperations.set(node, MetaAdapterFactory.getProperty(new UUID(-8723610397892195161l, -7746462699928525911l), 1855399583446016268l, 1855399583446016270l, "qualifiedName"), module.getModuleName());
    SPropertyOperations.set(node, MetaAdapterFactory.getProperty(new UUID(-8723610397892195161l, -7746462699928525911l), 1855399583446016268l, 1855399583446016269l, "uuid"), module.getModuleId().toString());
    ((jetbrains.mps.smodel.SNode) node).setId(SNodeId.fromString("~" + SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(new UUID(-8723610397892195161l, -7746462699928525911l), 1855399583446016268l, 1855399583446016269l, "uuid"))));
    return node;
  }
  private static SModuleReference getModuleReference(SNode node) {
    return new ModuleReference(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(new UUID(-8723610397892195161l, -7746462699928525911l), 1855399583446016268l, 1855399583446016270l, "qualifiedName")), SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(new UUID(-8723610397892195161l, -7746462699928525911l), 1855399583446016268l, 1855399583446016269l, "uuid")));
  }
  private static SNode createModelRefNode(jetbrains.mps.smodel.SModel.ImportElement impModel) {
    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-8723610397892195161l, -7746462699928525911l), 6370754048397540903l, "jetbrains.mps.lang.project.structure.ModelReference"));
    SPropertyOperations.set(node, MetaAdapterFactory.getProperty(new UUID(-8723610397892195161l, -7746462699928525911l), 6370754048397540903l, 6370754048397540910l, "qualifiedName"), SModelStereotype.withoutStereotype(impModel.getModelReference().getModelName()));
    SPropertyOperations.set(node, MetaAdapterFactory.getProperty(new UUID(-8723610397892195161l, -7746462699928525911l), 6370754048397540903l, 6370754048397540909l, "uuid"), impModel.getModelReference().getModelId().toString());
    SPropertyOperations.set(node, MetaAdapterFactory.getProperty(new UUID(-8723610397892195161l, -7746462699928525911l), 6370754048397540903l, 6655394244919476145l, "stereotype"), SModelStereotype.getStereotype(impModel.getModelReference().getModelName()));
    ((jetbrains.mps.smodel.SNode) node).setId(SNodeId.fromString("~" + SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(new UUID(-8723610397892195161l, -7746462699928525911l), 6370754048397540903l, 6370754048397540909l, "uuid"))));
    return node;
  }
  private static SModelReference getModelReference(SNode node) {
    String fullName = SModelStereotype.withStereotype(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(new UUID(-8723610397892195161l, -7746462699928525911l), 6370754048397540903l, 6370754048397540910l, "qualifiedName")), SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(new UUID(-8723610397892195161l, -7746462699928525911l), 6370754048397540903l, 6655394244919476145l, "stereotype")));
    return new jetbrains.mps.smodel.SModelReference(null, SModelId.fromString(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(new UUID(-8723610397892195161l, -7746462699928525911l), 6370754048397540903l, 6370754048397540909l, "uuid"))), fullName);
  }
  public static void applyMetadataChanges(SModel model, SModel metadataModel) {
    if (!(((EditableSModel) metadataModel).isChanged())) {
      return;
    }

    final SModelBase modelBase = (SModelBase) model;
    SNode root = ListSequence.fromList(SModelOperations.roots(metadataModel, MetaAdapterFactory.getConcept(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, "jetbrains.mps.ide.vcs.modelmetadata.structure.Model"))).first();
    modelBase.setVersion(SPropertyOperations.getInteger(root, MetaAdapterFactory.getProperty(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, 8374934269827355115l, "version")));
    if (model instanceof GeneratableSModel) {
      check_ca1g54_a0a5a8(((GeneratableSModel) model), root);
    }

    Set<SModuleReference> oldImpLang = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), modelBase.importedLanguages());
    Set<SModuleReference> impLang = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, 4685150495576720950l, "language"))).select(new ISelector<SNode, SModuleReference>() {
      public SModuleReference select(SNode it) {
        return getModuleReference(it);
      }
    }));
    SetSequence.fromSet(oldImpLang).subtract(SetSequence.fromSet(impLang)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        modelBase.deleteLanguage(it);
      }
    });
    SetSequence.fromSet(impLang).subtract(SetSequence.fromSet(oldImpLang)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        modelBase.addLanguage(it);
      }
    });

    Set<SModuleReference> oldGenLang = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), modelBase.engagedOnGenerationLanguages());
    Set<SModuleReference> genLang = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, 4685150495576720952l, "languageEngagedOnGeneration"))).select(new ISelector<SNode, SModuleReference>() {
      public SModuleReference select(SNode it) {
        return getModuleReference(it);
      }
    }));
    SetSequence.fromSet(oldGenLang).subtract(SetSequence.fromSet(genLang)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        modelBase.removeEngagedOnGenerationLanguage(it);
      }
    });
    SetSequence.fromSet(genLang).subtract(SetSequence.fromSet(oldGenLang)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        modelBase.addEngagedOnGenerationLanguage(it);
      }
    });

    Set<SModuleReference> oldDevkit = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), modelBase.importedDevkits());
    Set<SModuleReference> devkit = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, 4685150495576720955l, "devkit"))).select(new ISelector<SNode, SModuleReference>() {
      public SModuleReference select(SNode it) {
        return getModuleReference(it);
      }
    }));
    SetSequence.fromSet(oldDevkit).subtract(SetSequence.fromSet(devkit)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        modelBase.deleteDevKit(it);
      }
    });
    SetSequence.fromSet(devkit).subtract(SetSequence.fromSet(oldDevkit)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        modelBase.addDevKit(it);
      }
    });

    Set<SModelReference> oldImports = SetSequence.fromSetWithValues(new LinkedHashSet<SModelReference>(), Sequence.fromIterable(((Iterable<jetbrains.mps.smodel.SModel.ImportElement>) (modelBase.importedModels()))).select(new ISelector<jetbrains.mps.smodel.SModel.ImportElement, SModelReference>() {
      public SModelReference select(jetbrains.mps.smodel.SModel.ImportElement it) {
        return it.getModelReference();
      }
    }));
    Set<SModelReference> imports = SetSequence.fromSetWithValues(new LinkedHashSet<SModelReference>(), ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, 4685150495576720959l, "import"))).select(new ISelector<SNode, SModelReference>() {
      public SModelReference select(SNode it) {
        return getModelReference(it);
      }
    }));
    SetSequence.fromSet(oldImports).subtract(SetSequence.fromSet(imports)).visitAll(new IVisitor<SModelReference>() {
      public void visit(SModelReference it) {
        modelBase.deleteModelImport(it);
      }
    });
    SetSequence.fromSet(imports).subtract(SetSequence.fromSet(oldImports)).visitAll(new IVisitor<SModelReference>() {
      public void visit(SModelReference it) {
        modelBase.addModelImport(it, false);
      }
    });

    ((EditableSModel) metadataModel).setChanged(false);
  }
  private static boolean check_ca1g54_a0a0f0d(GeneratableSModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.isDoNotGenerate();
    }
    return false;
  }
  private static void check_ca1g54_a0a5a8(GeneratableSModel checkedDotOperand, SNode root) {
    if (null != checkedDotOperand) {
      checkedDotOperand.setDoNotGenerate(SPropertyOperations.getBoolean(root, MetaAdapterFactory.getProperty(new UUID(7921841224385317272l, -7108959942382919355l), 8374934269827354989l, 8374934269827355124l, "donotgenerate")));
    }

  }
}
