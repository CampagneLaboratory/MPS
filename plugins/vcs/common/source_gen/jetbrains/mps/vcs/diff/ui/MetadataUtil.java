package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.smodel.SModelId;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.DefaultSModel;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SModelStereotype;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SModelHeader;

public class MetadataUtil {
  public MetadataUtil() {
  }

  public static SModel createMetadataModel(SModel model) {
    SModel metadataModel = new SModel(new SModelReference(new SModelFqName(SNodeOperations.getModelLongName(model.getModelDescriptor()), "metadata"), SModelId.generate()));
    metadataModel.addLanguage(ModuleReference.fromString("6df0089f-3288-4998-9d57-e698e7c8e145(jetbrains.mps.ide.vcs.modelmetadata)"));
    metadataModel.addLanguage(ModuleReference.fromString("86ef8290-12bb-4ca7-947f-093788f263a9(jetbrains.mps.lang.project)"));
    SModelOperations.addRootNode(((org.jetbrains.mps.openapi.model.SModel) metadataModel.getModelDescriptor()), createModelRoot(model));
    return metadataModel;
  }

  public static SNode createModelRoot(SModel model) {
    SNode root = SConceptOperations.createNewNode("jetbrains.mps.ide.vcs.modelmetadata.structure.Model", null);
    SPropertyOperations.set(root, "longname", SNodeOperations.getModelLongName(model.getModelDescriptor()));
    // <node> 
    SPropertyOperations.set(root, "version", "" + (model.getVersion()));
    if (model instanceof DefaultSModel) {
      SPropertyOperations.set(root, "donotgenerate", "" + (check_ca1g54_a0a0e0c(((DefaultSModel) model).getSModelHeader())));
    }
    for (SModuleReference language : ListSequence.fromList(model.importedLanguages())) {
      ListSequence.fromList(SLinkOperations.getTargets(root, "language", true)).addElement(createModuleRefNode(language));
    }
    for (SModuleReference genlanguage : ListSequence.fromList(model.engagedOnGenerationLanguages())) {
      ListSequence.fromList(SLinkOperations.getTargets(root, "languageEngagedOnGeneration", true)).addElement(createModuleRefNode(genlanguage));
    }
    for (SModuleReference devkit : ListSequence.fromList(model.importedDevkits())) {
      ListSequence.fromList(SLinkOperations.getTargets(root, "devkit", true)).addElement(createModuleRefNode(devkit));
    }
    for (SModel.ImportElement impmodel : ListSequence.fromList(model.importedModels())) {
      ListSequence.fromList(SLinkOperations.getTargets(root, "import", true)).addElement(createModelRefNode(impmodel));
    }

    SPropertyOperations.set(root, "name", "Model Properties");
    ((jetbrains.mps.smodel.SNode) root).setId(SNodeId.fromString("~root"));
    return root;
  }

  public static SNode createModuleRefNode(SModuleReference module) {
    SNode node = SConceptOperations.createNewNode("jetbrains.mps.lang.project.structure.ModuleReference", null);
    SPropertyOperations.set(node, "qualifiedName", module.getModuleName());
    SPropertyOperations.set(node, "uuid", module.getModuleId().toString());
    ((jetbrains.mps.smodel.SNode) node).setId(SNodeId.fromString("~" + SPropertyOperations.getString(node, "uuid")));
    return node;
  }

  public static SNode createModelRefNode(SModel.ImportElement impModel) {
    SNode node = SConceptOperations.createNewNode("jetbrains.mps.lang.project.structure.ModelReference", null);
    SPropertyOperations.set(node, "qualifiedName", SModelStereotype.withoutStereotype(impModel.getModelReference().getModelName()));
    SPropertyOperations.set(node, "uuid", impModel.getModelReference().getModelId().toString());
    SPropertyOperations.set(node, "stereotype", SModelStereotype.getStereotype(impModel.getModelReference().getModelName()));
    ((jetbrains.mps.smodel.SNode) node).setId(SNodeId.fromString("~" + SPropertyOperations.getString(node, "uuid")));
    return node;
  }

  public static void applyMetadataChanges(final SModel model, SModel metadataModel) {
    SNode root = ListSequence.fromList(SModelOperations.getRoots(((org.jetbrains.mps.openapi.model.SModel) metadataModel.getModelDescriptor()), "jetbrains.mps.ide.vcs.modelmetadata.structure.Model")).first();
    model.setVersion(SPropertyOperations.getInteger(root, "version"));
    if (model instanceof DefaultSModel) {
      check_ca1g54_a0a2a5(((DefaultSModel) model).getSModelHeader(), root);
    }

    Set<SModuleReference> oldImpLang = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), model.importedLanguages());
    Set<SModuleReference> impLang = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), ListSequence.fromList(SLinkOperations.getTargets(root, "language", true)).select(new ISelector<SNode, ModuleReference>() {
      public ModuleReference select(SNode it) {
        return new ModuleReference(SPropertyOperations.getString(it, "qualifiedName"), SPropertyOperations.getString(it, "uuid"));
      }
    }));
    SetSequence.fromSet(oldImpLang).subtract(SetSequence.fromSet(impLang)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        model.deleteLanguage(it);
      }
    });
    SetSequence.fromSet(impLang).subtract(SetSequence.fromSet(oldImpLang)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        model.addLanguage(it);
      }
    });

    Set<SModuleReference> oldGenLang = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), model.engagedOnGenerationLanguages());
    Set<SModuleReference> genLang = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), ListSequence.fromList(SLinkOperations.getTargets(root, "languageEngagedOnGeneration", true)).select(new ISelector<SNode, ModuleReference>() {
      public ModuleReference select(SNode it) {
        return new ModuleReference(SPropertyOperations.getString(it, "qualifiedName"), SPropertyOperations.getString(it, "uuid"));
      }
    }));
    SetSequence.fromSet(oldGenLang).subtract(SetSequence.fromSet(genLang)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        model.removeEngagedOnGenerationLanguage(it);
      }
    });
    SetSequence.fromSet(genLang).subtract(SetSequence.fromSet(oldGenLang)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        model.addEngagedOnGenerationLanguage(it);
      }
    });

    Set<SModuleReference> oldDevkit = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), model.importedDevkits());
    Set<SModuleReference> devkit = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), ListSequence.fromList(SLinkOperations.getTargets(root, "devkit", true)).select(new ISelector<SNode, ModuleReference>() {
      public ModuleReference select(SNode it) {
        return new ModuleReference(SPropertyOperations.getString(it, "qualifiedName"), SPropertyOperations.getString(it, "uuid"));
      }
    }));
    SetSequence.fromSet(oldDevkit).subtract(SetSequence.fromSet(devkit)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        model.deleteDevKit(it);
      }
    });
    SetSequence.fromSet(devkit).subtract(SetSequence.fromSet(oldDevkit)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        model.addDevKit(it);
      }
    });

    Set<org.jetbrains.mps.openapi.model.SModelReference> oldImports = SetSequence.fromSetWithValues(new LinkedHashSet<org.jetbrains.mps.openapi.model.SModelReference>(), Sequence.fromIterable(((Iterable<SModel.ImportElement>) (model.importedModels()))).select(new ISelector<SModel.ImportElement, org.jetbrains.mps.openapi.model.SModelReference>() {
      public org.jetbrains.mps.openapi.model.SModelReference select(SModel.ImportElement it) {
        return it.getModelReference();
      }
    }));
    Set<org.jetbrains.mps.openapi.model.SModelReference> imports = SetSequence.fromSetWithValues(new LinkedHashSet<org.jetbrains.mps.openapi.model.SModelReference>(), ListSequence.fromList(SLinkOperations.getTargets(root, "import", true)).select(new ISelector<SNode, SModelReference>() {
      public SModelReference select(SNode it) {
        return new SModelReference(new SModelFqName(SPropertyOperations.getString(it, "qualifiedName"), SPropertyOperations.getString(it, "stereotype")), SModelId.fromString(SPropertyOperations.getString(it, "uuid")));
      }
    }));
    SetSequence.fromSet(oldImports).subtract(SetSequence.fromSet(imports)).visitAll(new IVisitor<org.jetbrains.mps.openapi.model.SModelReference>() {
      public void visit(org.jetbrains.mps.openapi.model.SModelReference it) {
        model.deleteModelImport(it);
      }
    });
    SetSequence.fromSet(imports).subtract(SetSequence.fromSet(oldImports)).visitAll(new IVisitor<org.jetbrains.mps.openapi.model.SModelReference>() {
      public void visit(org.jetbrains.mps.openapi.model.SModelReference it) {
        model.addModelImport(it, false);
      }
    });
  }

  private static boolean check_ca1g54_a0a0e0c(SModelHeader checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.isDoNotGenerate();
    }
    return false;
  }

  private static void check_ca1g54_a0a2a5(SModelHeader checkedDotOperand, SNode root) {
    if (null != checkedDotOperand) {
      checkedDotOperand.setDoNotGenerate(SPropertyOperations.getBoolean(root, "donotgenerate"));
    }

  }
}
