package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.vcs.diff.merge.MergeTemporaryModel;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.vcs.diff.ui.common.DiffModelUtil;
import jetbrains.mps.extapi.model.SModelBase;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.extapi.model.GeneratableSModel;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.model.EditableSModel;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class MetadataUtil {
  public MetadataUtil() {
  }
  public static SModel createMetadataModel(SModel model, String version, boolean editable) {
    MergeTemporaryModel metadataModel = new MergeTemporaryModel(model.getReference(), !(editable));
    metadataModel.addLanguage(MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0x6df0089f32884998L, 0x9d57e698e7c8e145L), "jetbrains.mps.ide.vcs.modelmetadata"));
    metadataModel.addLanguage(MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0x86ef829012bb4ca7L, 0x947f093788f263a9L), "jetbrains.mps.lang.project"));
    createModelRoot(metadataModel, model);
    DiffModelUtil.renameModelAndRegister(metadataModel, version);
    // XXX it looks isChanged used as indication whether there's anything in the model to apply. 
    // If yes, why not use dedicated flag in MergeTemporaryModel, and cease being EditableSModel? 
    metadataModel.setChanged(false);
    return metadataModel;
  }
  public static void dispose(SModel model) {
    DiffModelUtil.unregisterModel(model);
  }
  private static void createModelRoot(SModel target, SModel origin) {
    SModelBase modelBase = (SModelBase) origin;
    SNodeId nodeId = PersistenceFacade.getInstance().createNodeId("~root");
    SNode root = SModelOperations.createNewNode(target, nodeId, SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL, "jetbrains.mps.ide.vcs.modelmetadata.structure.Model")));
    SPropertyOperations.set(root, MetaAdapterFactory.getProperty(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL, 0x7439be589a4e11e6L, "longname"), SModelOperations.getModelName(origin));
    if (origin instanceof GeneratableSModel) {
      SPropertyOperations.set(root, MetaAdapterFactory.getProperty(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL, 0x7439be589a4e11f4L, "donotgenerate"), "" + (check_ca1g54_a0a0e0d(((GeneratableSModel) origin))));
    }
    for (SModuleReference language : ListSequence.fromList(jetbrains.mps.util.SNodeOperations.getUsedLanguages(modelBase))) {
      ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL, 0x4104ff8d80188636L, "language"))).addElement(createModuleRefNode(language));
    }
    for (SModuleReference genlanguage : ListSequence.fromList(modelBase.engagedOnGenerationLanguages())) {
      ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL, 0x4104ff8d80188638L, "languageEngagedOnGeneration"))).addElement(createModuleRefNode(genlanguage));
    }
    for (SModuleReference devkit : ListSequence.fromList(modelBase.importedDevkits())) {
      ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL, 0x4104ff8d8018863bL, "devkit"))).addElement(createModuleRefNode(devkit));
    }
    for (jetbrains.mps.smodel.SModel.ImportElement impmodel : ListSequence.fromList(modelBase.importedModels())) {
      ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL, 0x4104ff8d8018863fL, "import"))).addElement(createModelRefNode(impmodel));
    }
    SPropertyOperations.set(root, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "Model Properties");
    SModelOperations.addRootNode(target, root);
  }
  private static SNode createModuleRefNode(SModuleReference module) {
    SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafe1L, "jetbrains.mps.ide.vcs.modelmetadata.structure.ModuleReference")));
    SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafe1L, 0x39c8ca3b79aaafe2L, "stringValue"), PersistenceFacade.getInstance().asString(module));
    // The purpose of custom node id here is to have identical IDs for the same imports in different models  
    // That's why don't we rely on automatic node id. 
    // FIXME keep model as instance field and use model.new node smodel clause, with id set at construction time, without cast to SNode impl 
    ((jetbrains.mps.smodel.SNode) node).setId(new jetbrains.mps.smodel.SNodeId.Foreign(jetbrains.mps.smodel.SNodeId.Foreign.ID_PREFIX + SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafe1L, 0x39c8ca3b79aaafe2L, "stringValue"))));
    return node;
  }
  private static SModuleReference getModuleReference(SNode node) {
    return PersistenceFacade.getInstance().createModuleReference(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafe1L, 0x39c8ca3b79aaafe2L, "stringValue")));
  }
  private static SNode createModelRefNode(jetbrains.mps.smodel.SModel.ImportElement impModel) {
    SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafdeL, "jetbrains.mps.ide.vcs.modelmetadata.structure.ModelReference")));
    SModelReference modelReference = impModel.getModelReference();
    SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafdeL, 0x39c8ca3b79aaafdfL, "stringValue"), PersistenceFacade.getInstance().asString(modelReference));
    ((jetbrains.mps.smodel.SNode) node).setId(new jetbrains.mps.smodel.SNodeId.Foreign(jetbrains.mps.smodel.SNodeId.Foreign.ID_PREFIX + SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafdeL, 0x39c8ca3b79aaafdfL, "stringValue"))));
    return node;
  }
  private static SModelReference getModelReference(SNode node) {
    return PersistenceFacade.getInstance().createModelReference(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafdeL, 0x39c8ca3b79aaafdfL, "stringValue")));
  }
  public static void applyMetadataChanges(SModel model, SModel metadataModel) {
    if (!(((EditableSModel) metadataModel).isChanged())) {
      return;
    }

    final SModelBase modelBase = (SModelBase) model;
    SNode root = ListSequence.fromList(SModelOperations.roots(metadataModel, MetaAdapterFactory.getConcept(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL, "jetbrains.mps.ide.vcs.modelmetadata.structure.Model"))).first();
    if (model instanceof GeneratableSModel) {
      ((GeneratableSModel) model).setDoNotGenerate(SPropertyOperations.getBoolean(root, MetaAdapterFactory.getProperty(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL, 0x7439be589a4e11f4L, "donotgenerate")));
    }

    Set<SModuleReference> oldImpLang = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), jetbrains.mps.util.SNodeOperations.getUsedLanguages(modelBase));
    Set<SModuleReference> impLang = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL, 0x4104ff8d80188636L, "language"))).select(new ISelector<SNode, SModuleReference>() {
      public SModuleReference select(SNode it) {
        return getModuleReference(it);
      }
    }));
    SetSequence.fromSet(oldImpLang).subtract(SetSequence.fromSet(impLang)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        modelBase.deleteLanguage(it);
      }
    });
    SetSequence.fromSet(impLang).subtract(SetSequence.fromSet(oldImpLang)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        modelBase.addLanguage(it);
      }
    });

    Set<SModuleReference> oldGenLang = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), modelBase.engagedOnGenerationLanguages());
    Set<SModuleReference> genLang = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL, 0x4104ff8d80188638L, "languageEngagedOnGeneration"))).select(new ISelector<SNode, SModuleReference>() {
      public SModuleReference select(SNode it) {
        return getModuleReference(it);
      }
    }));
    SetSequence.fromSet(oldGenLang).subtract(SetSequence.fromSet(genLang)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        modelBase.removeEngagedOnGenerationLanguage(it);
      }
    });
    SetSequence.fromSet(genLang).subtract(SetSequence.fromSet(oldGenLang)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        modelBase.addEngagedOnGenerationLanguage(it);
      }
    });

    Set<SModuleReference> oldDevkit = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), modelBase.importedDevkits());
    Set<SModuleReference> devkit = SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(), ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL, 0x4104ff8d8018863bL, "devkit"))).select(new ISelector<SNode, SModuleReference>() {
      public SModuleReference select(SNode it) {
        return getModuleReference(it);
      }
    }));
    SetSequence.fromSet(oldDevkit).subtract(SetSequence.fromSet(devkit)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        modelBase.deleteDevKit(it);
      }
    });
    SetSequence.fromSet(devkit).subtract(SetSequence.fromSet(oldDevkit)).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        modelBase.addDevKit(it);
      }
    });

    Set<SModelReference> oldImports = SetSequence.fromSetWithValues(new LinkedHashSet<SModelReference>(), Sequence.fromIterable(((Iterable<jetbrains.mps.smodel.SModel.ImportElement>) (modelBase.importedModels()))).select(new ISelector<jetbrains.mps.smodel.SModel.ImportElement, SModelReference>() {
      public SModelReference select(jetbrains.mps.smodel.SModel.ImportElement it) {
        return it.getModelReference();
      }
    }));
    Set<SModelReference> imports = SetSequence.fromSetWithValues(new LinkedHashSet<SModelReference>(), ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL, 0x4104ff8d8018863fL, "import"))).select(new ISelector<SNode, SModelReference>() {
      public SModelReference select(SNode it) {
        return getModelReference(it);
      }
    }));
    SetSequence.fromSet(oldImports).subtract(SetSequence.fromSet(imports)).visitAll(new IVisitor<SModelReference>() {
      public void visit(SModelReference it) {
        modelBase.deleteModelImport(it);
      }
    });
    SetSequence.fromSet(imports).subtract(SetSequence.fromSet(oldImports)).visitAll(new IVisitor<SModelReference>() {
      public void visit(SModelReference it) {
        modelBase.addModelImport(it, false);
      }
    });

    ((EditableSModel) metadataModel).setChanged(false);
  }
  private static boolean check_ca1g54_a0a0e0d(GeneratableSModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.isDoNotGenerate();
    }
    return false;
  }
}
