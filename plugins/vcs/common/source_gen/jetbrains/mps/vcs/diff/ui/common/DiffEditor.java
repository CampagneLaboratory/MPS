package jetbrains.mps.vcs.diff.ui.common;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.message.EditorMessageOwner;
import javax.swing.JPanel;
import jetbrains.mps.nodeEditor.inspector.InspectorEditorComponent;
import java.util.Map;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.nodeEditor.EditorComponent;
import java.awt.Dimension;
import java.awt.BorderLayout;
import javax.swing.JLabel;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import javax.swing.JComponent;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.event.SModelEvent;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import org.jetbrains.annotations.NonNls;
import com.intellij.openapi.actionSystem.PlatformDataKeys;

public class DiffEditor implements EditorMessageOwner {
  private DiffEditor.MainEditorComponent myMainEditorComponent;
  private JPanel myTopComponent;
  private InspectorEditorComponent myInspector;
  private Map<ModelChange, List<ChangeEditorMessage>> myChangeToMessages = MapSequence.fromMap(new HashMap<ModelChange, List<ChangeEditorMessage>>());

  public DiffEditor(SRepository repository, SNode node, String contentTitle, boolean isLeftEditor) {
    myMainEditorComponent = new DiffEditor.MainEditorComponent(repository, isLeftEditor);
    myInspector = new InspectorEditorComponent(repository, isLeftEditor);
    Sequence.fromIterable(getEditorComponents()).visitAll(new IVisitor<EditorComponent>() {
      public void visit(EditorComponent ec) {
        ec.setNoVirtualFile(true);
      }
    });

    myMainEditorComponent.editNode(node);
    myInspector.getExternalComponent().setPreferredSize(new Dimension());
    Sequence.fromIterable(getEditorComponents()).visitAll(new IVisitor<EditorComponent>() {
      public void visit(EditorComponent ec) {
        ec.getLeftEditorHighlighter().setDefaultFoldingAreaPaintersEnabled(false);
        ec.setPopupMenuEnabled(false);
      }
    });

    myTopComponent = new JPanel(new BorderLayout());
    JLabel title = new JLabel(contentTitle);
    title.setToolTipText(contentTitle);
    myTopComponent.add(title, BorderLayout.NORTH);
    myTopComponent.add(myMainEditorComponent.getExternalComponent(), BorderLayout.CENTER);
    myTopComponent.setPreferredSize(new Dimension());
  }

  public SNode getEditedNode() {
    return getMainEditor().getEditedNode();
  }

  public void editRoot(@NotNull Project project, @Nullable SNodeId rootId, @NotNull SModel model) {
    SNode root = (rootId == null ? null : model.getNode(rootId));
    if (SNodeOperations.getParent(root) == null) {
      getMainEditor().editNode(root);
    }
  }

  public void inspect(SNode node) {
    myInspector.editNode(node);
    myInspector.getHighlightManager().repaintAndRebuildEditorMessages();
  }

  public JComponent getTopComponent() {
    return myTopComponent;
  }

  public DiffEditor.MainEditorComponent getMainEditor() {
    return myMainEditorComponent;
  }

  public InspectorEditorComponent getInspector() {
    return myInspector;
  }

  public EditorComponent getEditorComponent(boolean inspector) {
    return (inspector ? myInspector : myMainEditorComponent);
  }

  public void highlightChange(SModel model, ModelChange change, ChangeEditorMessage.ConflictChecker conflictChecker) {
    final List<ChangeEditorMessage> messages = ChangeEditorMessageFactory.createMessages(model, change, this, conflictChecker);
    if (ListSequence.fromList(messages).isEmpty()) {
      return;
    }
    MapSequence.fromMap(myChangeToMessages).put(change, messages);
    Sequence.fromIterable(getEditorComponents()).visitAll(new IVisitor<EditorComponent>() {
      public void visit(final EditorComponent ec) {
        ListSequence.fromList(messages).visitAll(new IVisitor<ChangeEditorMessage>() {
          public void visit(ChangeEditorMessage m) {
            ec.getHighlightManager().mark(m);
          }
        });
      }
    });
  }

  public void repaintAndRebuildEditorMessages() {
    Sequence.fromIterable(getEditorComponents()).visitAll(new IVisitor<EditorComponent>() {
      public void visit(EditorComponent ec) {
        ec.getHighlightManager().repaintAndRebuildEditorMessages();
      }
    });
  }

  public List<ChangeEditorMessage> getMessagesForChange(ModelChange change) {
    return MapSequence.fromMap(myChangeToMessages).get(change);
  }

  public void unhighlightAllChanges() {
    Sequence.fromIterable(getEditorComponents()).visitAll(new IVisitor<EditorComponent>() {
      public void visit(EditorComponent ec) {
        ec.getHighlightManager().clearForOwner(DiffEditor.this);
      }
    });
    MapSequence.fromMap(myChangeToMessages).clear();
  }

  public void dispose() {
    myMainEditorComponent.dispose();
    myMainEditorComponent = null;
    myInspector.dispose();
    myInspector = null;
  }

  private Iterable<EditorComponent> getEditorComponents() {
    return Sequence.fromArray(new EditorComponent[]{myMainEditorComponent, myInspector});
  }

  public class MainEditorComponent extends EditorComponent {
    private DiffFileEditor myDiffFileEditor;

    public MainEditorComponent(SRepository repository, boolean rightToLeft) {
      super(repository, false, rightToLeft);
      myDiffFileEditor = new DiffFileEditor(this);
    }

    @Override
    public EditorCell createRootCell(List<SModelEvent> events) {
      if (getEditedNode() == null || getEditedNode().getModel() == null) {
        EditorContext editorContext = getEditorContext();
        return new EditorCell_Constant(editorContext, getEditedNode(), "");
      }
      return getEditorContext().createRootCell(getEditedNode(), events);
    }

    @Override
    public Object getData(@NonNls String dataId) {
      if (dataId.equals(PlatformDataKeys.FILE_EDITOR.getName())) {
        return myDiffFileEditor;
      }
      return super.getData(dataId);
    }
  }
}
