package jetbrains.mps.vcs.changesmanager.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.openapi.editor.message.EditorMessageOwner;
import javax.swing.JScrollPane;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.vcs.diff.ui.common.ChangeGroup;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.vcs.diff.ui.common.ChangeEditorMessage;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.vcs.diff.ui.common.ChangeEditorMessageFactory;
import jetbrains.mps.vcs.diff.ui.common.Bounds;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.APICellAdapter;
import java.awt.Rectangle;
import javax.swing.BorderFactory;
import java.awt.Color;
import java.util.List;
import jetbrains.mps.smodel.event.SModelEvent;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;

public class BaseVersionEditorComponent extends EditorComponent implements EditorMessageOwner {
  private JScrollPane myScrollPane;

  public BaseVersionEditorComponent(IOperationContext operationContext, ChangeGroup changeGroup) {
    super(operationContext);
    final SModel baseModel = ListSequence.fromList(changeGroup.getChanges()).first().getChangeSet().getOldModel();
    SNode baseRoot = baseModel.getNode(ListSequence.fromList(changeGroup.getChanges()).first().getRootId());
    editNode(baseRoot);

    setBackground(CARET_ROW_COLOR);

    Iterable<ChangeEditorMessage> messages = ListSequence.fromList(changeGroup.getChanges()).translate(new ITranslator2<ModelChange, ChangeEditorMessage>() {
      public Iterable<ChangeEditorMessage> translate(ModelChange ch) {
        return ChangeEditorMessageFactory.createMessages(baseModel, ch, BaseVersionEditorComponent.this, null);
      }
    });
    Bounds verticalBounds = Sequence.fromIterable(messages).select(new ISelector<ChangeEditorMessage, Bounds>() {
      public Bounds select(ChangeEditorMessage m) {
        return m.getBounds(BaseVersionEditorComponent.this);
      }
    }).reduceLeft(new ILeftCombinator<Bounds, Bounds>() {
      public Bounds combine(Bounds a, Bounds b) {
        return a.merge(b);
      }
    });
    int rightMost = 0;
    for (EditorCell leafCell = APICellAdapter.getFirstLeaf(getRootCell()); leafCell != null; leafCell = APICellAdapter.getNextLeaf(leafCell)) {
      if (verticalBounds.contains(leafCell.getY()) || verticalBounds.contains(leafCell.getBottom()) || verticalBounds.contains(leafCell.getY() + leafCell.getHeight() / 2)) {
        if (leafCell.getRight() > rightMost) {
          rightMost = leafCell.getRight();
        }
      }
    }
    Rectangle viewRect = new Rectangle(0, (int) verticalBounds.start(), rightMost, verticalBounds.length());
    viewRect.y -= 1;
    viewRect.width += 5;
    viewRect.height += 4;

    myScrollPane = new JScrollPane(this, JScrollPane.VERTICAL_SCROLLBAR_NEVER, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
    myScrollPane.setBorder(BorderFactory.createLineBorder(Color.BLACK));
    myScrollPane.setPreferredSize(viewRect.getSize());
    myScrollPane.getViewport().setViewPosition(viewRect.getLocation());
  }

  @Override
  protected jetbrains.mps.nodeEditor.cells.EditorCell createRootCell(List<SModelEvent> events) {
    if (getEditedNode() == null || getEditedNode().getModel() == null) {
      EditorContext editorContext = getEditorContext();
      return new EditorCell_Constant(editorContext, getEditedNode(), "");
    }
    return getEditorContext().createRootCell(getEditedNode(), events);
  }

  public JScrollPane getScrollPane() {
    return myScrollPane;
  }
}
