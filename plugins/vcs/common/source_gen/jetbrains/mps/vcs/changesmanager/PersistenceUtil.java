package jetbrains.mps.vcs.changesmanager;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.util.FileUtil;
import org.jetbrains.mps.openapi.persistence.ModelFactory;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.mps.openapi.persistence.StreamDataSource;
import java.io.InputStream;
import java.io.IOException;
import java.io.ByteArrayInputStream;
import java.io.OutputStream;
import org.jetbrains.mps.openapi.persistence.DataSourceListener;

public class PersistenceUtil {


  private PersistenceUtil() {
  }



  /*package*/ SModel loadFromHistory(IFile baseFile, String content) {
    PersistenceUtil.VcsFileDataSource source = new PersistenceUtil.VcsFileDataSource(baseFile, content);
    String ext = FileUtil.getExtension(baseFile.getName());
    ModelFactory factory = PersistenceFacade.getInstance().getModelFactory(ext);
    if (factory == null || factory.isBinary()) {
      return null;
    }
    SModel model = factory.load(source);
    model.load();
    return model;
  }




  private static class VcsFileDataSource implements StreamDataSource {
    private String content;


    public VcsFileDataSource(IFile file, String content) {
      this.content = content;
    }



    @Override
    public InputStream openInputStream() throws IOException {
      byte[] bytes = content.getBytes(FileUtil.DEFAULT_CHARSET);
      return new ByteArrayInputStream(bytes);
    }



    @Override
    public OutputStream openOutputStream() throws IOException {
      throw new IOException("output stream is not supported for Version Control streams");
    }

    public long getTimestamp() {
      return 0;
    }

    public void removeListener(DataSourceListener listener) {
      throw new UnsupportedOperationException();
    }

    public void addListener(DataSourceListener listener) {
      throw new UnsupportedOperationException();
    }

    public boolean isReadOnly() {
      return true;
    }

    public String getLocation() {
      return "vcs";
    }
  }


}
