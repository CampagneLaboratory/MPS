package jetbrains.mps.vcs.changesmanager;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.vcs.FileStatus;
import org.jetbrains.annotations.Nullable;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.ModelAccess;
import org.apache.log4j.Priority;
import com.intellij.openapi.vcs.AbstractVcs;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import com.intellij.openapi.vcs.diff.DiffProvider;
import com.intellij.openapi.vcs.history.VcsRevisionNumber;
import com.intellij.openapi.vcs.changes.ContentRevision;
import com.intellij.openapi.vcs.changes.BinaryContentRevision;
import com.intellij.openapi.vcs.VcsException;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class BaseVersionUtil {
  private BaseVersionUtil() {
  }

  public static boolean isAddedFileStatus(@NotNull FileStatus status) {
    return status == FileStatus.ADDED || status == FileStatus.UNKNOWN || status == FileStatus.IGNORED;
  }

  @Nullable
  public static Object getBaseVersionContent(@NotNull VirtualFile file, @NotNull Project project) {
    if (ModelAccess.instance().canRead()) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("BaseVersionUtil.getBaseVersionContent() is invoked from read action: possible deadlock", new IllegalStateException());
      }
    }
    try {
      AbstractVcs vcs = ProjectLevelVcsManager.getInstance(project).getVcsFor(file);
      if (vcs == null) {
        return null;
      }
      DiffProvider diffProvider = vcs.getDiffProvider();
      if (diffProvider == null) {
        return null;
      }
      VcsRevisionNumber revisionNumber = diffProvider.getCurrentRevision(file);
      if (revisionNumber == null) {
        return null;
      }
      ContentRevision revision = diffProvider.createFileContent(revisionNumber, file);
      if (revision == null) {
        return null;
      }
      if (revision instanceof BinaryContentRevision) {
        return ((BinaryContentRevision) revision).getBinaryContent();
      }
      return revision.getContent();
    } catch (VcsException ex) {
      if (LOG.isEnabledFor(Priority.WARN)) {
        LOG.warn("VcsException during getting base version content: ", ex);
      }
      return null;
    }
  }

  protected static Logger LOG = LogManager.getLogger(BaseVersionUtil.class);
}
