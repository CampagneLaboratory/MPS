/*
 * Copyright 2003-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.vcs.changesmanager;

/*Generated by MPS */

import com.intellij.openapi.vcs.impl.FileStatusProvider;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.vcs.FileStatus;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.workbench.nodesFs.MPSNodeVirtualFile;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.editor.MPSEditorUtil;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.editor.Document;

public class NodeFileStatusProvider implements FileStatusProvider {
  private Project myProject;
  private NodeFileStatusMapping myMapping;

  public NodeFileStatusProvider(@NotNull Project project, @NotNull NodeFileStatusMapping mapping) {
    myProject = project;
    myMapping = mapping;
  }

  public FileStatus getFileStatus(VirtualFile file) {
    if (file instanceof MPSNodeVirtualFile) {
      final MPSNodeVirtualFile nodeFile = (MPSNodeVirtualFile) file;
      final Wrappers._T<SNode> root = new Wrappers._T<SNode>(MPSEditorUtil.getCurrentEditedNode(myProject, nodeFile));
      if (root.value == null) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            root.value = nodeFile.getNode();
          }
        });
      }
      if (root.value != null) {
        return myMapping.getStatus(root.value);
      }
    }
    return null;
  }

  public void refreshFileStatusFromDocument(VirtualFile file, Document document) {
  }
}
