package jetbrains.mps.vcs.platform.mergedriver;

/*Generated by MPS */

import java.util.Arrays;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.InternalFlag;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.io.File;
import com.intellij.openapi.util.SystemInfo;
import org.apache.commons.lang.StringUtils;
import com.intellij.openapi.application.PathManager;
import jetbrains.mps.vcs.core.mergedriver.MergeDriverMain;
import com.intellij.ide.plugins.IdeaPluginDescriptor;
import com.intellij.ide.plugins.PluginManager;
import com.intellij.openapi.extensions.PluginId;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.vcs.diff.merge.MergeSession;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.ide.IdeMain;
import com.intellij.util.PathUtil;

public class CommandLineGenerator {
  private static final Iterable<String> mpsLibJars = Arrays.asList("mps-closures.jar", "mps-collections.jar", "mps-tuples.jar", "mps-core.jar");
  private static Iterable<String> mpsAddJars = Arrays.asList("asm.jar", "diffutils-1.2.1.jar");
  private static final Iterable<String> ideaLibJars = Arrays.asList("jdom.jar", "log4j.jar", "trove4j.jar", "annotations.jar", "commons-lang-2.4.jar", "commons-logging-1.1.1.jar");
  protected static Log log = LogFactory.getLog(CommandLineGenerator.class);

  private CommandLineGenerator() {
  }

  public static String getCommandLine(int vcs) {
    Iterable<String> classpath = getClasspath(vcs == ScriptGenerator.SVN);
    if (InternalFlag.isInternalMode()) {
      classpath = Sequence.fromIterable(classpath).where(new IWhereFilter<String>() {
        public boolean accept(String cpi) {
          return cpi.endsWith(".jar");
        }
      }).concat(ListSequence.fromList(Arrays.asList(InternalRuntimePacker.getPath())));
    }
    String javaExecutable = System.getProperty("java.home") + File.separator + "bin" + File.separator + "java";
    if (SystemInfo.isWindows) {
      javaExecutable = adaptPathForMsysGit(javaExecutable + ".exe");
    }
    String classpathString = StringUtils.join(Sequence.fromIterable(classpath).toListSequence(), File.pathSeparator);
    String escapedLogPath = (PathManager.getLogPath() + File.separator + "mergedriver.log").replace("\\", "\\\\");
    return String.format("\"%s\" -D%s=\"%s\" -cp \"%s\" %s", javaExecutable, MergeDriverMain.LOG_PROPERTY, escapedLogPath, classpathString, MergeDriverMain.class.getName());
  }

  private static String getSvnkitJar() {
    IdeaPluginDescriptor svnPlugin = PluginManager.getPlugin(PluginId.getId("Subversion"));
    assert svnPlugin != null;
    return svnPlugin.getPath() + File.separator + "lib" + File.separator + "svnkit.jar";
  }

  private static String getTextMergerJar() {
    IdeaPluginDescriptor svnPlugin = PluginManager.getPlugin(PluginId.getId("Subversion"));
    assert svnPlugin != null;
    return svnPlugin.getPath() + File.separator + "lib" + File.separator + "sequence-library.jar";
  }

  public static Set<String> getClasspath(boolean withSvnkit) {
    Set<String> classpathItems = SetSequence.fromSet(new LinkedHashSet<String>());
    final Wrappers._T<String> mpsCorePath = new Wrappers._T<String>(PathManager.getLibPath());
    File mpsCore = new File(mpsCorePath.value + File.separator + "mps-core.jar");
    if (mpsCore.exists()) {
      SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(mpsLibJars).select(new ISelector<String, String>() {
        public String select(String it) {
          return mpsCorePath.value + File.separator + it;
        }
      }));
      SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(mpsAddJars).select(new ISelector<String, String>() {
        public String select(String it) {
          return mpsCorePath.value + File.separator + it;
        }
      }));
      SetSequence.fromSet(classpathItems).addElement(PathManager.getHomePath() + File.separator + "plugins" + File.separator + "vcs" + File.separator + "lib" + File.separator + "mps-vcs-core.jar");
    } else {
      mpsCorePath.value = PathManager.getPluginsPath() + File.separator + "mps-core" + File.separator + "lib";
      mpsCore = new File(mpsCorePath.value + File.separator + "mps-core.jar");
      if (mpsCore.exists()) {
        SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(mpsLibJars).select(new ISelector<String, String>() {
          public String select(String it) {
            return mpsCorePath.value + File.separator + it;
          }
        }));
        SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(mpsAddJars).select(new ISelector<String, String>() {
          public String select(String it) {
            return mpsCorePath.value + File.separator + it;
          }
        }));
        SetSequence.fromSet(classpathItems).addElement(PathManager.getPluginsPath() + File.separator + "mps-vcs" + File.separator + "lib" + File.separator + "mps-vcs-core.jar");
      } else {
        SetSequence.fromSet(classpathItems).addSequence(SetSequence.fromSet(getClasspathInternal()));
      }
    }
    SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(ideaLibJars).select(new ISelector<String, String>() {
      public String select(String it) {
        return PathManager.getLibPath() + File.separator + it;
      }
    }));


    if (withSvnkit) {
      SetSequence.fromSet(classpathItems).addElement(getSvnkitJar());
    }
    SetSequence.fromSet(classpathItems).addElement(getTextMergerJar());
    return classpathItems;
  }

  public static Set<String> getClasspathInternal() {
    Set<String> classpathItems = SetSequence.fromSet(new LinkedHashSet<String>());
    final Iterable<String> OTHER_CLASSES = Arrays.asList("jetbrains.mps.internal.collections.runtime.ListSequence", "jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes", "jetbrains.mps.typesystem.inference.TypeChecker", "jetbrains.mps.editor.runtime.impl.LanguagesKeymapManager", "jetbrains.mps.intentions.IntentionsManager", "jetbrains.mps.ide.findusages.FindersManager", "jetbrains.mps.analyzers.runtime.framework.CustomAnalyzerRunner", "jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple");
    Iterable<Class> classes = Arrays.<Class>asList(MergeDriverMain.class, FileUtil.class, MergeSession.class, SModel.class, IdeMain.class);
    classes = Sequence.fromIterable(OTHER_CLASSES).select(new ISelector<String, Class>() {
      public Class select(String cn) {
        try {
          return (Class) Class.forName(cn);
        } catch (ClassNotFoundException e) {
          if (log.isErrorEnabled()) {
            log.error("", e);
          }
          return null;
        }
      }
    }).concat(Sequence.fromIterable(classes));
    SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(classes).select(new ISelector<Class, String>() {
      public String select(Class c) {
        return PathUtil.getJarPathForClass(c);
      }
    }));
    SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(mpsAddJars).select(new ISelector<String, String>() {
      public String select(String it) {
        return PathManager.getLibPath() + File.separator + it;
      }
    }));
    return classpathItems;

  }

  /*package*/ static String adaptPathForMsysGit(String path) {
    return path.replaceFirst("^(\\w):\\\\", "/$1/").replace('\\', '/');
  }
}
