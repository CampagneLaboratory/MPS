package jetbrains.mps.vcs.platform.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.EditableSModel;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.Nullable;
import com.intellij.openapi.vfs.VirtualFile;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.extapi.persistence.FileDataSource;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import com.intellij.openapi.vcs.FileStatus;
import com.intellij.openapi.vcs.FileStatusManager;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.project.AbstractModule;

public class ConflictsUtil {
  public ConflictsUtil() {
  }

  public static boolean isModelOrModuleConflicting(EditableSModel emd, Project project) {
    return getModelFileIfConflicting(emd, project) != null || getModuleFileIfConflicting((emd != null ?
      emd.getModule() :
      null
    ), project) != null;
  }

  @Nullable
  public static VirtualFile getModelFileIfConflicting(@Nullable SModel md, @NotNull Project project) {
    if (md instanceof EditableSModel && md.getSource() instanceof FileDataSource) {
      VirtualFile vf = VirtualFileUtils.getVirtualFile(((FileDataSource) md.getSource()).getFile());
      if (vf != null) {
        FileStatus status = FileStatusManager.getInstance(project).getStatus(vf);
        if (FileStatus.MERGED_WITH_CONFLICTS == status || FileStatus.MERGED_WITH_BOTH_CONFLICTS == status) {
          return vf;
        }
      }
    }
    return null;
  }

  @Nullable
  public static VirtualFile getModuleFileIfConflicting(@Nullable SModule module, @NotNull Project project) {
    if (module instanceof Generator) {
      module = ((Generator) module).getSourceLanguage();
    }
    if (!(module instanceof AbstractModule)) {
      return null;
    }
    VirtualFile vf = VirtualFileUtils.getVirtualFile(((AbstractModule) module).getDescriptorFile());
    if (vf != null) {
      FileStatus status = FileStatusManager.getInstance(project).getStatus(vf);
      if (FileStatus.MERGED_WITH_CONFLICTS == status || FileStatus.MERGED_WITH_BOTH_CONFLICTS == status) {
        return vf;
      }
    }
    return null;
  }
}
