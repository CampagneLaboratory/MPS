package jetbrains.mps.vcs.platform.integration;

/*Generated by MPS */

import com.intellij.openapi.vcs.checkin.CheckinHandler;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.ide.ThreadUtils;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vcs.CheckinProjectPanel;
import com.intellij.openapi.vcs.VcsConfiguration;
import com.intellij.openapi.vcs.ui.RefreshableOnComponent;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import java.awt.GridLayout;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.smodel.SModelFileTracker;
import java.util.Collection;
import java.io.File;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.ArrayList;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.project.OptimizeImportsHelper;
import org.jetbrains.mps.openapi.model.EditableSModel;
import com.intellij.openapi.vcs.checkin.CheckinHandlerFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.vcs.changes.CommitContext;

public class OptimizeImportsCheckinHandler extends CheckinHandler {
  private static final Logger LOG = LogManager.getLogger(ThreadUtils.class);
  private Project myProject;
  private CheckinProjectPanel myPanel;
  public OptimizeImportsCheckinHandler(Project project, CheckinProjectPanel panel) {
    this.myProject = project;
    this.myPanel = panel;
  }
  protected VcsConfiguration getSettings() {
    return VcsConfiguration.getInstance(myProject);
  }
  @Override
  public RefreshableOnComponent getBeforeCheckinConfigurationPanel() {
    final JCheckBox optimizeImportsCheckBox = new JCheckBox("Optimize model imports");
    return new RefreshableOnComponent() {
      @Override
      public JComponent getComponent() {
        JPanel panel = new JPanel(new GridLayout(1, 0));
        panel.add(optimizeImportsCheckBox);
        return panel;
      }
      @Override
      public void restoreState() {
        optimizeImportsCheckBox.setSelected(getSettings().OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT);
      }
      @Override
      public void saveState() {
        getSettings().OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT = optimizeImportsCheckBox.isSelected();
      }
      @Override
      public void refresh() {
      }
    };
  }
  @Override
  public CheckinHandler.ReturnResult beforeCheckin() {
    final jetbrains.mps.project.Project mpsProject = ProjectHelper.toMPSProject(myProject);
    if (getSettings().OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT && mpsProject != null) {
      SModelFileTracker modelFileTracker = SModelFileTracker.getInstance(mpsProject.getRepository());
      Collection<File> affectedFiles = myPanel.getFiles();
      final List<SModel> affectedModels = new ArrayList<SModel>();
      for (File file : affectedFiles) {
        SModel model = modelFileTracker.findModel(FileSystem.getInstance().getFileByPath(file.getAbsolutePath()));
        if (model == null) {
          continue;
        }
        affectedModels.add(model);
      }
      ThreadUtils.assertEDT();
      try {
        // here used to be delayed executeInEDT, which looked odd after explicit assertEDT check 
        // it seems the right way is to have imports optimized before the method returns. 
        mpsProject.getModelAccess().executeCommand(new Runnable() {
          public void run() {
            new OptimizeImportsHelper().optimizeModelsImports(affectedModels);
            for (SModel affectedModel : affectedModels) {
              ((EditableSModel) affectedModel).save();
            }
          }
        });
      } catch (Throwable e) {
        LOG.error("Couldn't optimize imports before commit", e);
      }
    }
    return CheckinHandler.ReturnResult.COMMIT;
  }
  public static class OptimizeImportsCheckinHandlerFactory extends CheckinHandlerFactory {
    public OptimizeImportsCheckinHandlerFactory() {
    }
    @NotNull
    @Override
    public CheckinHandler createHandler(CheckinProjectPanel panel, CommitContext context) {
      return new OptimizeImportsCheckinHandler(panel.getProject(), panel);
    }
  }
}
