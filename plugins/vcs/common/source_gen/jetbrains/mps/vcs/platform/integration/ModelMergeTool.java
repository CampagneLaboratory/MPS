package jetbrains.mps.vcs.platform.integration;

/*Generated by MPS */

import com.intellij.openapi.diff.impl.mergeTool.MergeTool;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Set;
import com.intellij.openapi.fileTypes.FileType;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.diff.DiffRequest;
import com.intellij.openapi.diff.impl.mergeTool.MergeRequestImpl;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.intellij.openapi.vfs.VirtualFile;
import org.apache.log4j.Level;
import com.intellij.openapi.vfs.LocalFileSystem;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import java.io.File;
import jetbrains.mps.vcs.platform.util.MergeBackupUtil;
import com.intellij.openapi.diff.DiffContent;
import jetbrains.mps.persistence.FilePerRootDataSource;
import jetbrains.mps.project.MPSExtentions;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.persistence.PersistenceUtil;
import jetbrains.mps.vcs.util.MergeConstants;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.vcs.diff.ui.merge.MergeModelsDialog;
import javax.swing.SwingUtilities;
import jetbrains.mps.smodel.ModelAccess;
import java.io.IOException;
import com.intellij.openapi.ui.DialogWrapper;
import org.jetbrains.annotations.Nullable;

public class ModelMergeTool extends MergeTool {
  private static final Logger LOG = LogManager.getLogger(ModelMergeTool.class);
  private static final Set<FileType> SUPPORTED_TYPES = SetSequence.fromSetAndArray(new HashSet<FileType>(), ModelDiffTool.DIFF_SUPPORTED_TYPES);

  public ModelMergeTool() {
  }

  @Override
  public void show(final DiffRequest request) {
    MergeRequestImpl mrequest = (MergeRequestImpl) request;
    try {
      final Wrappers._T<VirtualFile> file = new Wrappers._T<VirtualFile>(getFileFromMergeRequest(mrequest));
      if (file.value == null) {
        if (LOG_705910402.isEnabledFor(Level.ERROR)) {
          LOG_705910402.error("No file");
        }
        file.value = LocalFileSystem.getInstance().findFileByPath("/");
      }
      final IFile iFile = FileSystem.getInstance().getFileByPath(file.value.getPath());

      File backupFile = MergeBackupUtil.zipModel(request.getContents(), file.value);
      DiffContent[] contents = mrequest.getContents();
      final Wrappers._T<String> ext = new Wrappers._T<String>(file.value.getExtension());
      if (FilePerRootDataSource.isPerRootPersistenceFile(iFile)) {
        ext.value = MPSExtentions.MODEL;
      }
      SModel baseModel = PersistenceUtil.loadModel(contents[MergeConstants.ORIGINAL].getDocument().getText(), ext.value);
      SModel mineModel = PersistenceUtil.loadModel(new String(contents[MergeConstants.CURRENT].getBytes(), FileUtil.DEFAULT_CHARSET), ext.value);
      SModel newModel = PersistenceUtil.loadModel(new String(contents[MergeConstants.LAST_REVISION].getBytes(), FileUtil.DEFAULT_CHARSET), ext.value);
      if (baseModel == null || mineModel == null || newModel == null) {
        if (LOG_705910402.isEnabledFor(Level.WARN)) {
          LOG_705910402.warn("Couldn't read model, invoking text merge");
        }
        super.show(request);
        return;
      }

      final MergeModelsDialog dialog = new MergeModelsDialog(baseModel, mineModel, newModel, mrequest);
      SwingUtilities.invokeLater(new Runnable() {
        public void run() {
          dialog.toFront();
        }
      });
      dialog.show();
      final SModel resultModel = dialog.getResultModelWithFixedId();
      if (resultModel != null) {
        final Wrappers._T<String> resultContent = new Wrappers._T<String>();
        // <node> 
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            if (FilePerRootDataSource.isPerRootPersistenceFile(iFile)) {
              resultContent.value = PersistenceUtil.savePerRootModel(resultModel, file.value.getExtension().equals(MPSExtentions.MODEL_HEADER));
            } else {
              resultContent.value = PersistenceUtil.saveModel(resultModel, ext.value);
            }
          }
        });
        resolved(mrequest, resultContent.value);
        MergeBackupUtil.packMergeResult(backupFile, file.value.getName(), resultContent.value);
      }
      dialog.unregisterModels();
    } catch (IOException e) {
      LOG.error(null, e);
    }
  }

  @Override
  public boolean canShow(DiffRequest request) {
    if (!(super.canShow(request))) {
      return false;
    }
    DiffContent[] contents = request.getContents();
    if (contents.length != 3) {
      return false;
    }
    FileType[] types = {contents[0].getContentType(), contents[1].getContentType(), contents[2].getContentType()};
    if (!(SetSequence.fromSet(SUPPORTED_TYPES).contains(types[MergeConstants.ORIGINAL]))) {
      return false;
    }
    if (types[MergeConstants.CURRENT] != null && types[MergeConstants.CURRENT] != types[MergeConstants.ORIGINAL] || types[MergeConstants.LAST_REVISION] != null && types[MergeConstants.LAST_REVISION] != types[MergeConstants.ORIGINAL]) {
      return false;
    }
    return true;
  }

  private static void resolved(MergeRequestImpl req, final String result) {
    req.setResult(DialogWrapper.OK_EXIT_CODE);
    final VirtualFile modelFile = getFileFromMergeRequest(req);
    ModelAccess.instance().runWriteInEDT(new Runnable() {
      public void run() {
        try {
          modelFile.setBinaryContent(result.getBytes(FileUtil.DEFAULT_CHARSET));
        } catch (IOException e) {
          if (LOG_705910402.isEnabledFor(Level.ERROR)) {
            LOG_705910402.error("", e);
          }
        }
      }
    });
  }

  @Nullable
  private static VirtualFile getFileFromMergeRequest(MergeRequestImpl mergeRequest) {
    DiffContent resultContent = mergeRequest.getResultContent();
    if (resultContent instanceof MergeRequestImpl.MergeContent) {
      return ((MergeRequestImpl.MergeContent) resultContent).getFile();
    }
    return null;
  }

  protected static Logger LOG_705910402 = LogManager.getLogger(ModelMergeTool.class);

  private static <T> T as_7qvsj_a0a0a0a1a71a1a3(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
