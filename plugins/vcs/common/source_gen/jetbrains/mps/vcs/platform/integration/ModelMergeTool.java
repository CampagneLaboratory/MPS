package jetbrains.mps.vcs.platform.integration;

/*Generated by MPS */

import com.intellij.openapi.diff.impl.mergeTool.MergeTool;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import com.intellij.openapi.diff.DiffRequest;
import com.intellij.openapi.diff.impl.mergeTool.MergeRequestImpl;
import com.intellij.openapi.vfs.VirtualFile;
import org.apache.log4j.Priority;
import com.intellij.openapi.vfs.LocalFileSystem;
import java.io.File;
import jetbrains.mps.vcs.platform.util.MergeBackupUtil;
import com.intellij.openapi.diff.DiffContent;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.persistence.PersistenceUtil;
import jetbrains.mps.vcs.util.MergeConstants;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.vcs.diff.ui.merge.MergeModelsDialog;
import javax.swing.SwingUtilities;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import jetbrains.mps.extapi.model.SModelBase;
import java.io.IOException;
import jetbrains.mps.fileTypes.MPSFileTypeFactory;
import com.intellij.openapi.ui.DialogWrapper;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.annotations.Nullable;

public class ModelMergeTool extends MergeTool {
  private static final Logger LOG = LogManager.getLogger(ModelMergeTool.class);

  public ModelMergeTool() {
  }

  @Override
  public void show(final DiffRequest request) {
    MergeRequestImpl mrequest = (MergeRequestImpl) request;
    try {
      VirtualFile file = getFileFromMergeRequest(mrequest);
      if (file == null) {
        if (LOG_705910402.isEnabledFor(Priority.ERROR)) {
          LOG_705910402.error("No file");
        }
        file = LocalFileSystem.getInstance().findFileByPath("/");
      }
      File backupFile = MergeBackupUtil.zipModel(request.getContents(), file);
      DiffContent[] contents = mrequest.getContents();
      String ext = file.getExtension();
      SModel baseModel = PersistenceUtil.loadModel(contents[MergeConstants.ORIGINAL].getDocument().getText(), ext);
      SModel mineModel = PersistenceUtil.loadModel(new String(contents[MergeConstants.CURRENT].getBytes(), FileUtil.DEFAULT_CHARSET), ext);
      SModel newModel = PersistenceUtil.loadModel(new String(contents[MergeConstants.LAST_REVISION].getBytes(), FileUtil.DEFAULT_CHARSET), ext);
      if (baseModel == null || mineModel == null || newModel == null) {
        if (LOG_705910402.isEnabledFor(Priority.WARN)) {
          LOG_705910402.warn("Couldn't read model, invoking text merge");
        }
        super.show(request);
        return;
      }

      final MergeModelsDialog dialog = new MergeModelsDialog(baseModel, mineModel, newModel, mrequest);
      SwingUtilities.invokeLater(new Runnable() {
        public void run() {
          dialog.toFront();
        }
      });
      dialog.show();
      SModel resultModel = dialog.getResultModelWithFixedId();
      if (resultModel != null) {
        String asString = ModelPersistence.modelToString(as_7qvsj_a0a0a0a41a1a2(resultModel, SModelBase.class).getSModelInternal());
        resolved(mrequest, asString);
        MergeBackupUtil.packMergeResult(backupFile, file.getName(), asString);
      }
      dialog.unregisterModels();
    } catch (IOException e) {
      LOG.error(null, e);
    }
  }

  @Override
  public boolean canShow(DiffRequest request) {
    return super.canShow(request) && request.getContents()[MergeConstants.ORIGINAL].getContentType() == MPSFileTypeFactory.MPS_FILE_TYPE;
  }

  private static void resolved(MergeRequestImpl req, final String result) {
    req.setResult(DialogWrapper.OK_EXIT_CODE);
    final VirtualFile modelFile = getFileFromMergeRequest(req);
    ModelAccess.instance().runWriteInEDT(new Runnable() {
      public void run() {
        try {
          modelFile.setBinaryContent(result.getBytes(FileUtil.DEFAULT_CHARSET));
        } catch (IOException e) {
          if (LOG_705910402.isEnabledFor(Priority.ERROR)) {
            LOG_705910402.error("", e);
          }
        }
      }
    });
  }

  @Nullable
  private static VirtualFile getFileFromMergeRequest(MergeRequestImpl mergeRequest) {
    DiffContent resultContent = mergeRequest.getResultContent();
    if (resultContent instanceof MergeRequestImpl.MergeContent) {
      return ((MergeRequestImpl.MergeContent) resultContent).getFile();
    }
    return null;
  }

  protected static Logger LOG_705910402 = LogManager.getLogger(ModelMergeTool.class);

  private static <T> T as_7qvsj_a0a0a0a41a1a2(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }
}
