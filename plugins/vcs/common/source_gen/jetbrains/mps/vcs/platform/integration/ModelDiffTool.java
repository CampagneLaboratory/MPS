package jetbrains.mps.vcs.platform.integration;

/*Generated by MPS */

import com.intellij.openapi.diff.DiffTool;
import com.intellij.openapi.diff.DiffRequest;
import com.intellij.openapi.diff.DiffContent;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.persistence.def.ModelReadException;
import org.apache.log4j.Priority;
import com.intellij.openapi.diff.DiffManager;
import jetbrains.mps.vcs.diff.ui.ModelDifferenceDialog;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.fileTypes.FileType;
import jetbrains.mps.fileTypes.MPSFileTypeFactory;
import org.jetbrains.annotations.Nullable;
import com.intellij.openapi.diff.DiffViewer;
import java.awt.Window;
import com.intellij.openapi.Disposable;
import com.intellij.openapi.diff.DocumentContent;
import com.intellij.openapi.diff.FileContent;
import jetbrains.mps.smodel.SModelFileTracker;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.vcs.diff.merge.MergeTemporaryModel;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.persistence.PersistenceUtil;
import jetbrains.mps.util.FileUtil;
import java.io.IOException;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ModelDiffTool implements DiffTool {
  public ModelDiffTool() {
  }

  @Override
  public void show(final DiffRequest request) {
    DiffContent[] contents = request.getContents();
    final SModel oldModel;
    final SModel newModel;
    try {
      oldModel = readModel(contents[0]);
      newModel = readModel(contents[1]);
    } catch (ModelReadException e) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("Can't read models", e);
      }
      DiffManager.getInstance().getIdeaDiffTool().show(request);
      return;
    }
    String[] titles = request.getContentTitles();
    new ModelDifferenceDialog(request.getProject(), oldModel, newModel, titles[0], titles[1], request).show();
  }

  @Override
  public boolean canShow(DiffRequest request) {
    DiffContent[] contents = request.getContents();
    return contents.length == 2 && isModelFile(contents[0]) && isModelFile(contents[1]);
  }

  private boolean isModelFile(@NotNull DiffContent contents) {
    FileType type = contents.getContentType();
    if (type == null) {
      return true;
    }
    return type.equals(MPSFileTypeFactory.MPS_FILE_TYPE);
  }

  @Nullable
  @Override
  public DiffViewer createComponent(String string, DiffRequest request, Window window, Disposable disposable) {
    return null;
  }

  private static SModel readModel(DiffContent content) throws ModelReadException {
    if ((content instanceof DocumentContent || content instanceof FileContent) && content.getFile() != null) {
      final SModel model = SModelFileTracker.getInstance().findModel(VirtualFileUtils.toIFile(content.getFile()));

      if (model != null) {
        return model;
      }
    }
    try {
      byte[] bytes = content.getBytes();
      FileType contentType = content.getContentType();
      String ext = (contentType != null ?
        contentType.getDefaultExtension() :
        MPSExtentions.MODEL
      );
      // for added/deleted models create empty model to compare with 
      if (bytes.length == 0) {
        return new MergeTemporaryModel(new SModelReference("", ""), true);
      }
      return PersistenceUtil.loadModel(new String(bytes, FileUtil.DEFAULT_CHARSET), ext);
    } catch (IOException ioe) {
      throw new ModelReadException("Couldn't read content: " + ioe.getMessage(), ioe);
    }
  }

  protected static Logger LOG = LogManager.getLogger(ModelDiffTool.class);
}
