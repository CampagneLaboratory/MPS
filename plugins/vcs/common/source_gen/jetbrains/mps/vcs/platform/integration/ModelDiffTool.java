package jetbrains.mps.vcs.platform.integration;

/*Generated by MPS */

import com.intellij.openapi.diff.DiffTool;
import com.intellij.openapi.fileTypes.FileType;
import jetbrains.mps.fileTypes.MPSFileTypeFactory;
import com.intellij.openapi.diff.DiffRequest;
import com.intellij.openapi.diff.DiffContent;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.persistence.def.ModelReadException;
import org.apache.log4j.Priority;
import com.intellij.openapi.diff.DiffManager;
import jetbrains.mps.vcs.diff.ui.ModelDifferenceDialog;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.annotations.Nullable;
import com.intellij.openapi.diff.DiffViewer;
import java.awt.Window;
import com.intellij.openapi.Disposable;
import com.intellij.openapi.diff.DocumentContent;
import com.intellij.openapi.diff.FileContent;
import jetbrains.mps.smodel.SModelFileTracker;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import jetbrains.mps.vcs.diff.merge.MergeTemporaryModel;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.persistence.PersistenceUtil;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.project.MPSExtentions;
import java.io.IOException;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ModelDiffTool implements DiffTool {
  public static final FileType[] DIFF_SUPPORTED_TYPES = {MPSFileTypeFactory.MPS_FILE_TYPE, MPSFileTypeFactory.MPS_HEADER_FILE_TYPE, MPSFileTypeFactory.MPS_ROOT_FILE_TYPE};

  public ModelDiffTool() {
  }

  @Override
  public void show(final DiffRequest request) {
    DiffContent[] contents = request.getContents();
    final SModel oldModel;
    final SModel newModel;
    try {
      oldModel = readModel(contents[0]);
      newModel = readModel(contents[1]);
    } catch (ModelReadException e) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("Can't read models", e);
      }
      DiffManager.getInstance().getIdeaDiffTool().show(request);
      return;
    }
    if (oldModel == null || newModel == null) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("Can't read models");
      }
      DiffManager.getInstance().getIdeaDiffTool().show(request);
      return;
    }
    String[] titles = request.getContentTitles();
    // support perroot and file persistence 
    FileType[] types = {contents[0].getContentType(), contents[1].getContentType()};
    FileType type = (types[1] == null ?
      types[0] :
      types[1]
    );
    if (type.equals(MPSFileTypeFactory.MPS_FILE_TYPE)) {
      new ModelDifferenceDialog(request.getProject(), oldModel, newModel, titles[0], titles[1], request).show();
    } else {
      assert SModelOperations.getRoots(oldModel, null).size() <= 1;
      assert SModelOperations.getRoots(newModel, null).size() <= 1;
      SNodeId rootId = null;
      if (SModelOperations.getRoots(oldModel, null).size() > 0) {
        rootId = SModelOperations.getRoots(oldModel, null).get(0).getNodeId();
      }
      if (SModelOperations.getRoots(newModel, null).size() > 0) {
        rootId = SModelOperations.getRoots(newModel, null).get(0).getNodeId();
      }
      ModelDifferenceDialog.showRootDifference(request.getProject(), oldModel, newModel, rootId, titles[0], titles[1], null, request);
    }
  }

  @Override
  public boolean canShow(DiffRequest request) {
    DiffContent[] contents = request.getContents();
    if (contents.length != 2) {
      return false;
    }
    FileType[] types = {contents[0].getContentType(), contents[1].getContentType()};
    for (FileType type : DIFF_SUPPORTED_TYPES) {
      if ((types[0] == null || types[0].equals(type)) && (types[1] == null || types[1].equals(type))) {
        return true;
      }
    }
    return false;
  }

  @Nullable
  @Override
  public DiffViewer createComponent(String string, DiffRequest request, Window window, Disposable disposable) {
    return null;
  }

  private static SModel readModel(DiffContent content) throws ModelReadException {
    if ((content instanceof DocumentContent || content instanceof FileContent) && content.getFile() != null) {
      final SModel model = SModelFileTracker.getInstance().findModel(VirtualFileUtils.toIFile(content.getFile()));

      if (model != null) {
        return model;
      }
    }
    try {
      byte[] bytes = content.getBytes();
      FileType contentType = content.getContentType();
      // for added/deleted models create empty model to compare with 
      if (bytes.length == 0) {
        return new MergeTemporaryModel(new SModelReference("", ""), true);
      }
      // <node> 
      // we use same model loader for perroot (to load root or header) and file persistence 
      return PersistenceUtil.loadModel(new String(bytes, FileUtil.DEFAULT_CHARSET), MPSExtentions.MODEL);
    } catch (IOException ioe) {
      throw new ModelReadException("Couldn't read content: " + ioe.getMessage(), ioe);
    }
  }

  protected static Logger LOG = LogManager.getLogger(ModelDiffTool.class);
}
