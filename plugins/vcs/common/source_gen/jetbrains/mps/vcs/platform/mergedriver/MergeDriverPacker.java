package jetbrains.mps.vcs.platform.mergedriver;

/*Generated by MPS */

import java.util.Arrays;
import com.intellij.openapi.application.PathManager;
import java.io.File;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.InternalFlag;
import com.intellij.ide.plugins.IdeaPluginDescriptor;
import com.intellij.ide.plugins.PluginManager;
import com.intellij.openapi.extensions.PluginId;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;

public class MergeDriverPacker {
  private static final Iterable<String> mpsLibJars = Arrays.asList("mps-closures.jar", "mps-collections.jar", "mps-tuples.jar", "mps-core.jar");
  private static Iterable<String> mpsAddJars = Arrays.asList("asm.jar", "diffutils-1.2.1.jar");
  private static final Iterable<String> ideaLibJars = Arrays.asList("xstream.jar", "guava-11.0.1.jar", "jdom.jar", "log4j.jar", "trove4j.jar", "annotations.jar", "commons-lang-2.4.jar", "commons-logging-1.1.1.jar");
  private static final Iterable<String> svnJars = Arrays.asList("svnkit.jar", "sequence-library.jar");
  private static final String MERGEDRIVER_PATH = "mergedriver";
  private static boolean ourUpToDate = false;

  public MergeDriverPacker() {
  }

  public static String getPath() {
    return PathManager.getConfigPath() + File.separator + MERGEDRIVER_PATH;
  }

  private static File getFile() {
    return new File(getPath());
  }

  public static void pack() {
    File tmpDir = FileUtil.createTmpDir();
    getFile().delete();
    Iterable<String> classpathDirs = getClasspath(false);
    for (String classpathDir : Sequence.fromIterable(classpathDirs).where(new IWhereFilter<String>() {
      public boolean accept(String cpd) {
        return cpd.endsWith(".jar");
      }
    })) {
      FileUtil.copyFile(new File(classpathDir), tmpDir);
    }
    if (Sequence.fromIterable(classpathDirs).isEmpty()) {
      FileUtil.write(new File(tmpDir, "dummy.txt"), new byte[0]);
    }

    if (InternalFlag.isInternalMode()) {
      Iterable<String> classpathInternal = Sequence.fromIterable(classpathDirs).where(new IWhereFilter<String>() {
        public boolean accept(String cpi) {
          return !(cpi.endsWith(".jar"));
        }
      });
      FileUtil.zip(InternalRuntimePacker.pack(classpathInternal), new File(tmpDir + File.separator + InternalRuntimePacker.getPath()));
    }
    FileUtil.copyDir(tmpDir, getFile());
    tmpDir.delete();
  }

  public static AbstractInstaller.State packIfNeeded(boolean dryRun) {
    if (!(ourUpToDate)) {
      if (dryRun) {
        if (getFile().exists()) {
          return AbstractInstaller.State.OUTDATED;
        } else {
          return AbstractInstaller.State.NOT_INSTALLED;
        }
      } else {
        pack();
        ourUpToDate = true;
        return AbstractInstaller.State.INSTALLED;
      }
    } else {
      return AbstractInstaller.State.INSTALLED;
    }
  }

  private static Iterable<String> getSvnJars() {
    final IdeaPluginDescriptor svnPlugin = PluginManager.getPlugin(PluginId.getId("Subversion"));
    if (svnPlugin != null) {
      return Sequence.fromIterable(svnJars).select(new ISelector<String, String>() {
        public String select(String it) {
          return svnPlugin.getPath() + File.separator + "lib" + File.separator + it;
        }
      });
    }
    return null;
  }

  private static String getVCSCorePluginPath() {
    IdeaPluginDescriptor vcsCorePlugin = PluginManager.getPlugin(PluginId.getId("jetbrains.mps.vcs"));
    assert vcsCorePlugin != null;
    return vcsCorePlugin.getPath().getPath();
  }

  private static String getMPSCorePluginPath() {
    IdeaPluginDescriptor mpsCorePlugin = PluginManager.getPlugin(PluginId.getId("jetbrains.mps.core"));
    assert mpsCorePlugin != null;
    return mpsCorePlugin.getPath().getPath();
  }

  public static Set<String> getClasspath(boolean withSvnkit) {
    Set<String> classpathItems = SetSequence.fromSet(new LinkedHashSet<String>());
    if (InternalFlag.isInternalMode()) {
      SetSequence.fromSet(classpathItems).addSequence(SetSequence.fromSet(getClasspathInternal()));
    } else {
      final Wrappers._T<String> mpsCorePath = new Wrappers._T<String>(PathManager.getLibPath());
      File mpsCore = new File(mpsCorePath.value + File.separator + "mps-core.jar");
      if (!(mpsCore.exists())) {
        mpsCorePath.value = getMPSCorePluginPath() + File.separator + "lib";
      }
      SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(mpsLibJars).select(new ISelector<String, String>() {
        public String select(String it) {
          return mpsCorePath.value + File.separator + it;
        }
      }));
      SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(mpsAddJars).select(new ISelector<String, String>() {
        public String select(String it) {
          return mpsCorePath.value + File.separator + it;
        }
      }));
      SetSequence.fromSet(classpathItems).addElement(getVCSCorePluginPath() + File.separator + "lib" + File.separator + "mps-vcs-core.jar");
    }

    SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(ideaLibJars).select(new ISelector<String, String>() {
      public String select(String it) {
        return PathManager.getLibPath() + File.separator + it;
      }
    }));
    SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(getSvnJars()));
    return classpathItems;
  }

  private static Set<String> getClasspathInternal() {
    Set<String> classpathItems = SetSequence.fromSet(new LinkedHashSet<String>());
    final IdeaPluginDescriptor mpsCorePlugin = PluginManager.getPlugin(PluginId.getId("jetbrains.mps.core"));
    if (mpsCorePlugin != null) {
      SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(mpsAddJars).select(new ISelector<String, String>() {
        public String select(String it) {
          return mpsCorePlugin.getPath() + File.separator + "lib" + File.separator + it;
        }
      }));
      SetSequence.fromSet(classpathItems).addElement(mpsCorePlugin.getPath() + File.separator + "classes");
      SetSequence.fromSet(classpathItems).addElement(getVCSCorePluginPath() + File.separator + "classes");
    } else {
      SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(mpsAddJars).select(new ISelector<String, String>() {
        public String select(String it) {
          return PathManager.getLibPath() + File.separator + it;
        }
      }));

      final Iterable<String> CLASSPATHS = Arrays.asList("runtime", "kernel", "make-runtime", "generator", "typesystemEngine", "findUsages-runtime", "refactoring-runtime", "analyzers");
      String homePath = PathManager.getHomePath();
      final String corePath = homePath + File.separator + "core";
      SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(CLASSPATHS).select(new ISelector<String, String>() {
        public String select(String it) {
          return corePath + File.separator + it + File.separator + "classes";
        }
      }));

      final String languagesPath = homePath + File.separator + "languages";
      final Iterable<String> OTHER_CLASSES = Arrays.asList("closures", "collections", "tuples");
      SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(OTHER_CLASSES).select(new ISelector<String, String>() {
        public String select(String it) {
          return languagesPath + File.separator + "baseLanguage" + File.separator + it + File.separator + "runtime" + File.separator + "classes";
        }
      }));
      SetSequence.fromSet(classpathItems).addElement(languagesPath + File.separator + "baseLanguage" + File.separator + "baseLanguage" + File.separator + "solutions" + File.separator + "jetbrains.mps.baseLanguage.search" + File.separator + "classes");
      SetSequence.fromSet(classpathItems).addElement(languagesPath + File.separator + "baseLanguage" + File.separator + "baseLanguage" + File.separator + "solutions" + File.separator + "jetbrains.mps.baseLanguage.util" + File.separator + "classes");

      SetSequence.fromSet(classpathItems).addElement(getVCSCorePluginPath() + File.separator + "lib" + File.separator + "classes");
    }
    return classpathItems;

  }
}
