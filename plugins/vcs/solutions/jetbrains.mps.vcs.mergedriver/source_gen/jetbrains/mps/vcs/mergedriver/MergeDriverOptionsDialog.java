package jetbrains.mps.vcs.mergedriver;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import javax.swing.JPanel;
import java.awt.GridLayout;
import java.awt.FlowLayout;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.WindowManager;
import jetbrains.mps.util.NameUtil;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import javax.swing.JComponent;
import jetbrains.mps.ide.dialogs.DialogDimensionsSettings;
import javax.swing.JCheckBox;

public class MergeDriverOptionsDialog extends BaseDialog {
  private JPanel myPanel = new JPanel(new GridLayout(0, 1));
  private JPanel myMainPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
  private MergeDriverOptionsDialog.InstallerCheckBox myGitGlobal;
  private MergeDriverOptionsDialog.InstallerCheckBox myGitRepos;
  private MergeDriverOptionsDialog.InstallerCheckBox mySvn;

  public MergeDriverOptionsDialog(Project project) {
    super(WindowManager.getInstance().getFrame(project), "MPS VCS Add-ons");
    myGitGlobal = new MergeDriverOptionsDialog.InstallerCheckBox(new GitGlobalInstaller(project), "Git global merge driver setting (~/.gitconfig)");
    GitRepositoriesInstaller gitRep = new GitRepositoriesInstaller(project);
    myGitRepos = new MergeDriverOptionsDialog.InstallerCheckBox(gitRep, "Git file attributes for " + NameUtil.formatNumericalString(gitRep.getRootsToInstall(), "repository") + "  (.gitattributes)");
    mySvn = new MergeDriverOptionsDialog.InstallerCheckBox(new SvnInstaller(project), "Subversion custom diff3 cmd (~/.subversion/config)");

    myGitGlobal.addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent e) {
        myGitRepos.setEnabled(myGitGlobal.isSelected());
      }
    });
    myGitGlobal.adIfNeeded();
    myGitRepos.adIfNeeded();
    mySvn.adIfNeeded();
    myMainPanel.add(myPanel);
  }

  protected JComponent getMainComponent() {
    return myMainPanel;
  }

  @Override
  public DialogDimensionsSettings.DialogDimensions getDefaultDimensionSettings() {
    return new DialogDimensionsSettings.DialogDimensions(400, 400, 400, 150);
  }

  @BaseDialog.Button(position = 0, name = "OK", mnemonic = 'O', defaultButton = true)
  public void ok() {
    myGitGlobal.installIfNeeded();
    if (myGitGlobal.myInstaller.getCurrentState() == AbstractInstaller.State.INSTALLED) {
      myGitRepos.installIfNeeded();
    }
    mySvn.installIfNeeded();
    dispose();
  }

  @BaseDialog.Button(position = 1, name = "Cancel", mnemonic = 'C')
  public void cancel() {
    dispose();
  }

  private class InstallerCheckBox extends JCheckBox {
    private AbstractInstaller myInstaller;

    public InstallerCheckBox(AbstractInstaller installer, String name) {
      super(name + ((installer.getCurrentState() == AbstractInstaller.State.OUTDATED ?
        " (update)" :
        ""
      )));
      myInstaller = installer;
    }

    private void adIfNeeded() {
      if (myInstaller.getCurrentState() != AbstractInstaller.State.INSTALLED) {
        myPanel.add(this);
        setSelected(true);
      }
    }

    private void installIfNeeded() {
      if (isSelected() && isEnabled()) {
        myInstaller.install();
      }
    }
  }
}
