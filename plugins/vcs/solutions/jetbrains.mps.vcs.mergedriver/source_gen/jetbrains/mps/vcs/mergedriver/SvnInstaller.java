package jetbrains.mps.vcs.mergedriver;

/*Generated by MPS */

import com.intellij.openapi.project.Project;
import java.io.File;
import jetbrains.mps.workbench.WorkbenchPathManager;
import com.intellij.openapi.ui.Messages;
import java.util.List;
import jetbrains.mps.util.StringsIO;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.io.IOException;
import com.intellij.openapi.util.SystemInfo;

public class SvnInstaller {
  public SvnInstaller() {
  }

  public static void install(Project project) {
    File configFile = new File(WorkbenchPathManager.getUserHome() + File.separator + ".subversion" + File.separator + "config");
    if (!(configFile.exists())) {
      Messages.showErrorDialog(project, "Could not find Subversion configuration file (~/.subversion/config).", "Subversion Config Not Found");
      return;
    }
    if (!(configFile.canWrite()) && configFile.getParentFile().canWrite()) {
      Messages.showErrorDialog(project, "Can't write to Subversion config (~/.subversion).", "Can't Write");
      return;
    }

    List<String> lines = StringsIO.readLines(configFile);
    int lineToReplace = -1;
    for (int i = 0; i < ListSequence.fromList(lines).count(); i++) {
      String line = ListSequence.fromList(lines).getElement(i);
      if (line.trim().startsWith("diff3-cmd")) {
        // Some diff3 is already present 

        Matcher matcher = Pattern.compile("^\\s*diff3-cmd\\s*=\\s*(.+)$").matcher(line);
        if (matcher.matches()) {
          String cmd = matcher.group(1);

          if (cmd.contains("mps-merger.")) {
            // already installed 
            lineToReplace = i;
            break;
          } else {
            // another is installed 

            // TODO integrate with user's merger 
            lineToReplace = i;
            break;
          }
        }
      }
    }

    if (lineToReplace == -1) {
      String commented = ListSequence.fromList(lines).findFirst(new IWhereFilter<String>() {
        public boolean accept(String line) {
          return line.trim().startsWith("# diff3-cmd");
        }
      });
      if (commented != null) {
        lineToReplace = ListSequence.fromList(lines).indexOf(commented);
      } else {
        int helpersStart = ListSequence.fromList(lines).indexOf(ListSequence.fromList(lines).findFirst(new IWhereFilter<String>() {
          public boolean accept(String line) {
            return line.trim().equals("[helpers]");
          }
        }));
        if (helpersStart != -1) {
          // [helpers] section is present, finding next section start 
          int nextStart = ListSequence.fromList(lines).indexOf(ListSequence.fromList(lines).skip(helpersStart + 1).findFirst(new IWhereFilter<String>() {
            public boolean accept(String line) {
              return line.trim().startsWith("[");
            }
          }));
          if (nextStart == -1) {
            // [helpers] is the last section 
            ListSequence.fromList(lines).addElement("");
            lineToReplace = ListSequence.fromList(lines).count() - 1;
          } else {
            Iterable<String> section = ListSequence.fromList(lines).page(helpersStart + 1, nextStart);
            // Finding last non-comment line 
            int nonComment = Sequence.fromIterable(section).indexOf(Sequence.fromIterable(section).findLast(new IWhereFilter<String>() {
              public boolean accept(String line) {
                return !(line.trim().startsWith("#")) && !(line.trim().isEmpty());
              }
            }));
            if (nonComment == -1) {
              lineToReplace = helpersStart + 1;
            } else {
              lineToReplace = nonComment + helpersStart + 1;
            }
            ListSequence.fromList(lines).insertElement(lineToReplace, "");
          }
        }
      }
    }

    String script = createScript(project, configFile.getParentFile());
    if (script != null) {
      String line = String.format("diff3-cmd = %s", script);
      if (lineToReplace == -1) {
        ListSequence.fromList(lines).addElement("[helpers]");
        ListSequence.fromList(lines).addElement(line);
      }
      ListSequence.fromList(lines).setElement(lineToReplace, line);
    }
    try {
      StringsIO.writeLines(configFile, lines);
      Messages.showInfoMessage(project, "Successfully installed MPS merger for subversion", "Subversion Merger Installed");
    } catch (IOException e) {
      Messages.showErrorDialog(project, "Could not update Subversion configuration file (~/.subversion/config)." + e.getMessage(), "Could Not Save Config");
      return;
    }
  }

  private static String createScript(Project project, File svnDir) {
    File scriptFile = new File(svnDir, "mps-merger." + ((SystemInfo.isWindows ?
      "bat" :
      "sh"
    )));
    String[] lines;
    if (SystemInfo.isWindows) {
      lines = new String[]{"@ECHO OFF", "SHIFT", "SHIFT", String.format("%s --svn %8 %7 %9 %4 %2 %6", MergeDriverMain.getCommandLine())};
    } else {
      lines = new String[]{"#/bin/sh", String.format("%s --svn ${10} $9 ${11} $6 $4 $8", MergeDriverMain.getCommandLine())};
    }
    try {
      StringsIO.writeLines(scriptFile, Sequence.fromArray(lines));
      if (SystemInfo.isUnix && !(scriptFile.setExecutable(true))) {
        throw new IOException("can't make script executable");
      }
      return scriptFile.getAbsolutePath();
    } catch (IOException e) {
      Messages.showErrorDialog(project, "Can't create merger script: " + e.getMessage(), "Can't Create Merger Script");
      return null;
    }
  }
}
