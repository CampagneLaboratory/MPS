package jetbrains.mps.vcs.mergedriver;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;
import java.io.FileOutputStream;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.apache.commons.lang.StringUtils;
import java.io.UnsupportedEncodingException;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.intellij.util.PathUtil;

public class MergeDriverMain {
  private MergeDriverMain() {
  }

  public static void main(String[] args) {
    if (args.length < 3) {
      System.err.println("Usage: " + getCommandLine() + " <base> <current> <other> [marker-size]");
      System.exit(2);
    }
    final Wrappers._int markerSize = new Wrappers._int(32);
    if (args.length > 3) {
      markerSize.value = Integer.parseInt(args[3]);
    }
    List<byte[]> contents = Sequence.fromIterable(Sequence.fromArray(args)).take(3).toListSequence().<byte[]>select(new ISelector<String, byte[]>() {
      public byte[] select(String fn) {
        FileInputStream in = null;
        try {
          File file = new File(fn);
          in = new FileInputStream(file);
          byte[] content = new byte[((int) file.length())];
          in.read(content);
          return content;
        } catch (IOException e) {
          return null;
        } finally {
          if (in != null) {
            try {
              in.close();
            } catch (IOException ignored) {
            }
          }
        }
      }
    }).toListSequence();
    FileOutputStream out = null;
    try {
      out = new FileOutputStream(args[1]);
      _FunctionTypes._return_P1_E0<? extends byte[], ? super String> marker = new _FunctionTypes._return_P1_E0<byte[], String>() {
        public byte[] invoke(String m) {
          try {
            return (StringUtils.repeat(m, markerSize.value) + "\n").getBytes("utf-8");
          } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
          }
        }
      };
      out.write(marker.invoke("<"));
      // current 
      out.write(ListSequence.fromList(contents).getElement(1));
      out.write(marker.invoke("="));
      // base 
      out.write(ListSequence.fromList(contents).getElement(0));
      out.write(marker.invoke("="));
      // other 
      out.write(ListSequence.fromList(contents).getElement(2));
      out.write(marker.invoke(">"));
      System.exit(1);
    } catch (IOException ignored) {
      System.exit(2);
    } finally {
      if (out != null) {
        try {
          out.close();
        } catch (IOException ignored) {
        }
      }
    }
  }

  public static String getCommandLine() {
    StringBuilder cmd = new StringBuilder();
    cmd.append('\"').append(System.getProperty("java.home")).append(File.separator).append("bin").append(File.separator).append("java\"");
    cmd.append(" -cp ");
    cmd.append(PathUtil.getJarPathForClass(MergeDriverMain.class)).append(File.pathSeparator);
    cmd.append(PathUtil.getJarPathForClass(ListSequence.class)).append(File.pathSeparator);
    cmd.append(PathUtil.getJarPathForClass(_FunctionTypes.class)).append(File.pathSeparator);
    cmd.append(PathUtil.getJarPathForClass(StringUtils.class));
    cmd.append(" ").append(MergeDriverMain.class.getName());
    return cmd.toString();
  }
}
