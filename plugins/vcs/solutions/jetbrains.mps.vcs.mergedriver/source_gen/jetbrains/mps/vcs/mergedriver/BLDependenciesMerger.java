package jetbrains.mps.vcs.mergedriver;

/*Generated by MPS */

import java.io.File;
import jetbrains.mps.make.java.ModelDependencies;
import java.io.OutputStream;
import jetbrains.mps.util.FileUtil;
import java.io.IOException;
import org.jdom.JDOMException;
import jetbrains.mps.util.JDOMUtil;
import org.jdom.Document;

/*package*/ class BLDependenciesMerger extends AbstractFileMerger {
  /*package*/ BLDependenciesMerger() {
  }

  protected int mergeFiles(File baseFile, File localFile, File latestFile) {
    try {
      ModelDependencies dependencies = loadDependencies(baseFile);
      copyDependencies(loadDependencies(localFile), dependencies);
      copyDependencies(loadDependencies(latestFile), dependencies);

      OutputStream resultStream = getResultStream(localFile);
      saveDependencies(dependencies, resultStream);
      FileUtil.closeFileSafe(resultStream);
      return MERGED;
    } catch (IOException e) {
      e.printStackTrace();
      return FATAL_ERROR;
    } catch (JDOMException e) {
      e.printStackTrace();
      return FATAL_ERROR;
    }
  }

  private static ModelDependencies loadDependencies(File f) throws IOException, JDOMException {
    return ModelDependencies.fromXml(JDOMUtil.loadDocument(f).getRootElement());
  }

  private static void saveDependencies(ModelDependencies deps, OutputStream out) throws IOException {
    JDOMUtil.writeDocument(new Document(deps.toXml()), out);
  }

  private static void copyDependencies(ModelDependencies from, ModelDependencies to) {
    // TODO 
  }
}
