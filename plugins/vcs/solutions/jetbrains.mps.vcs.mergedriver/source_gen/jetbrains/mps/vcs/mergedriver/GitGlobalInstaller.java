package jetbrains.mps.vcs.mergedriver;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.project.Project;
import jetbrains.mps.workbench.WorkbenchPathManager;
import java.io.File;
import com.intellij.openapi.ui.Messages;
import java.util.Scanner;
import java.io.FileNotFoundException;
import java.io.RandomAccessFile;
import java.io.IOException;

public class GitGlobalInstaller {
  protected static Log log = LogFactory.getLog(GitGlobalInstaller.class);

  private GitGlobalInstaller() {
  }

  public static String install(Project project) {
    String globalConfigPath = WorkbenchPathManager.getUserHome() + File.separator + ".gitconfig";
    if (!(new File(globalConfigPath).exists())) {
      Messages.showErrorDialog(project, "Git config (~/.gitconfig) file is not present", "No Git Config");
      return null;
    }
    Scanner sc = null;
    try {
      sc = new Scanner(new File(globalConfigPath));
      while (sc.hasNextLine()) {
        String line = sc.nextLine();
        if (line.matches("\\s*\\[merge\\s+\"mps\"\\]\\s*")) {
          return "Global merge driver is already installed.";
        }
      }
    } catch (FileNotFoundException e) {
      assert false;
      return null;
    } finally {
      if (sc != null) {
        sc.close();
      }
    }


    RandomAccessFile raf = null;
    try {
      raf = new RandomAccessFile(globalConfigPath, "rw");
      raf.seek(raf.length());
      String stringToWrite = "\n[merge \"mps\"]\tname = MPS merge driver\n\tdriver = %s %%O %%A %%B %%L\n";
      stringToWrite = String.format(stringToWrite, MergeDriverMain.getCommandLine());
      stringToWrite = stringToWrite.replace("\n", System.getProperty("line.separator"));
      stringToWrite = stringToWrite.replace("\\", "\\\\");
      raf.write(stringToWrite.getBytes("utf-8"));
      raf.close();
    } catch (IOException e) {
      if (log.isErrorEnabled()) {
        log.error("Writing gitconfig file failed", e);
      }
      Messages.showErrorDialog(project, "Writing gitconfig file failed (" + e.getMessage() + ")", "Writing .gitconfig Failed");
      return null;
    } finally {
      if (raf != null) {
        try {
          raf.close();
        } catch (IOException e) {
          if (log.isErrorEnabled()) {
            log.error("Exception during close", e);
          }
        }
      }
    }

    return "Global merge driver have been successfully installed.";
  }
}
