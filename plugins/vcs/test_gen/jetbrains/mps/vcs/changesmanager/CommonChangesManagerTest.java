package jetbrains.mps.vcs.changesmanager;

/*Generated by MPS */

import java.io.File;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelFqName;
import org.junit.Test;
import jetbrains.mps.TestMain;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import org.junit.Assert;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import com.intellij.openapi.vcs.changes.Change;
import com.intellij.openapi.vcs.changes.ChangeListManager;
import com.intellij.openapi.vcs.checkin.CheckinEnvironment;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import java.util.Arrays;
import java.util.List;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.vcs.diff.ChangeSet;
import com.intellij.openapi.vcs.AbstractVcs;

public class CommonChangesManagerTest {
  private static final File DESTINATION_PROJECT_DIR = new File(FileUtil.getTempDir(), "testConflicts");
  private static final File PROJECT_ARCHIVE = new File("testbench/modules/fugue.zip");
  private static final String PROJECT_FILE = "fugue.mpr";

  private CurrentDifferenceRegistry myRegistry;
  private final Object myWaitLock = new Object();

  public CommonChangesManagerTest() {
  }

  private void waitForChangesManager() {
    final Wrappers._boolean finished = new Wrappers._boolean(false);
    myRegistry.getCommandQueue().addTask(new Runnable() {
      public void run() {
        synchronized (myWaitLock) {
          finished.value = true;
          myWaitLock.notify();
        }
      }
    });
    while (!(finished.value)) {
      synchronized (myWaitLock) {
        try {
          myWaitLock.wait();
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }

  private CurrentDifference getCurrentDifference(String shortName) {
    return myRegistry.getCurrentDifference((EditableSModelDescriptor) SModelRepository.getInstance().getModelDescriptor(SModelFqName.fromString("ru.geevee.fugue." + shortName)));
  }

  @Test
  public void doTest() {
    TestMain.testOnProjectCopy(PROJECT_ARCHIVE, DESTINATION_PROJECT_DIR, PROJECT_FILE, new TestMain.ProjectRunnable() {
      public boolean execute(Project project) {
        try {
          com.intellij.openapi.project.Project ideaProject = ProjectHelper.toIdeaProject(project);
          myRegistry = CurrentDifferenceRegistry.getInstance(ideaProject);
          waitForChangesManager();

          CurrentDifference html = getCurrentDifference("html");
          CurrentDifference ui = getCurrentDifference("ui");
          final CurrentDifference util = getCurrentDifference("util");

          Assert.assertNull(html.getChangeSet());
          Assert.assertNull(ui.getChangeSet());
          Assert.assertNull(util.getChangeSet());

          html.setEnabled(true);
          ui.setEnabled(true);
          util.setEnabled(true);
          waitForChangesManager();

          Assert.assertFalse(ListSequence.fromList(check_orwzer_a0a71a0a3a0a2(html.getChangeSet())).isEmpty());
          Assert.assertFalse(ListSequence.fromList(check_orwzer_a0a81a0a3a0a2(ui.getChangeSet())).isEmpty());
          Assert.assertNull(util.getChangeSet());

          ModelAccess.instance().runWriteActionInCommand(new Runnable() {
            public void run() {
              SModel model = util.getModelDescriptor().getSModel();
              SNode root = ListSequence.fromList(SModelOperations.getRoots(model, "jetbrains.mps.baseLanguage.structure.ClassConcept")).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode r) {
                  return "SearchPanel".equals(SPropertyOperations.getString(r, "name"));
                }
              });
              SPropertyOperations.set(root, "name", "SearchPanelModified");
              SNodeOperations.deleteNode(SLinkOperations.getTarget(root, "superclass", true));
              ListSequence.fromList(SLinkOperations.getTargets(root, "field", true)).clear();
            }
          });
          waitForChangesManager();
          Assert.assertFalse(ListSequence.fromList(check_orwzer_a0a32a0a3a0a2(util.getChangeSet())).isEmpty());

          VirtualFile utilVFile = VirtualFileUtils.getVirtualFile(util.getModelDescriptor().getModelFile());
          Change change = ChangeListManager.getInstance(ideaProject).getChange(utilVFile);
          assert change != null;
          CheckinEnvironment checkinEnvironment = check_orwzer_a0cb0a0d0a0c(ProjectLevelVcsManager.getInstance(ideaProject).getVcsFor(utilVFile));
          assert checkinEnvironment != null;
          checkinEnvironment.commit(Arrays.asList(change), "dumb commit");

          waitForChangesManager();
          Assert.assertNull(util.getChangeSet());

          return true;
        } catch (Throwable e) {
          e.printStackTrace();
          return false;
        }
      }
    }, "jetbrains.mps.vcs", "Git4Idea", "jetbrains.mps.ide.make");
  }

  private static List<ModelChange> check_orwzer_a0a71a0a3a0a2(ChangeSet checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelChanges();
    }
    return null;
  }

  private static List<ModelChange> check_orwzer_a0a81a0a3a0a2(ChangeSet checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelChanges();
    }
    return null;
  }

  private static List<ModelChange> check_orwzer_a0a32a0a3a0a2(ChangeSet checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelChanges();
    }
    return null;
  }

  private static CheckinEnvironment check_orwzer_a0cb0a0d0a0c(AbstractVcs checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getCheckinEnvironment();
    }
    return null;
  }
}
