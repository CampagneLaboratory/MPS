package jetbrains.mps.vcs.changesmanager;

/*Generated by MPS */

import java.io.File;
import jetbrains.mps.util.FileUtil;
import com.intellij.openapi.vcs.changes.ChangeListManager;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelFqName;
import org.junit.Test;
import jetbrains.mps.TestMain;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import org.junit.Assert;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import com.intellij.openapi.vcs.AbstractVcs;
import com.intellij.openapi.vcs.impl.projectlevelman.AllVcses;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import com.intellij.openapi.vcs.changes.Change;
import java.util.Arrays;
import com.intellij.openapi.vcs.changes.VcsDirtyScopeManager;
import jetbrains.mps.vcs.concrete.GitUtils;
import java.util.List;
import com.intellij.openapi.vcs.VcsException;
import java.util.ArrayList;
import com.intellij.openapi.vcs.rollback.RollbackProgressListener;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.vcs.diff.ChangeSet;

public class CommonChangesManagerTest {
  private static final File DESTINATION_PROJECT_DIR = new File(FileUtil.getTempDir(), "testConflicts");
  private static final File PROJECT_ARCHIVE = new File("testbench/modules/fugue.zip");
  private static final String PROJECT_FILE = "fugue.mpr";

  private CurrentDifferenceRegistry myRegistry;
  private final Object myWaitLock = new Object();
  private ChangeListManager myChangeListManager;

  public CommonChangesManagerTest() {
  }

  private void waitForChangesManager() {
    final Wrappers._boolean finished = new Wrappers._boolean(false);
    myRegistry.getCommandQueue().addTask(new Runnable() {
      public void run() {
        synchronized (myWaitLock) {
          finished.value = true;
          myWaitLock.notify();
        }
      }
    });
    while (!(finished.value)) {
      synchronized (myWaitLock) {
        try {
          myWaitLock.wait();
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }

  private void waitForEDT() {
    ApplicationManager.getApplication().invokeAndWait(new Runnable() {
      public void run() {
      }
    }, ModalityState.NON_MODAL);
  }

  private CurrentDifference getCurrentDifference(String shortName) {
    return myRegistry.getCurrentDifference((EditableSModelDescriptor) SModelRepository.getInstance().getModelDescriptor(SModelFqName.fromString("ru.geevee.fugue." + shortName)));
  }

  @Test
  public void doTest() {
    boolean result = TestMain.testOnProjectCopy(PROJECT_ARCHIVE, DESTINATION_PROJECT_DIR, PROJECT_FILE, new TestMain.ProjectRunnable() {
      public boolean execute(Project project) {
        try {
          com.intellij.openapi.project.Project ideaProject = ProjectHelper.toIdeaProject(project);
          myRegistry = CurrentDifferenceRegistry.getInstance(ideaProject);
          waitForChangesManager();

          CurrentDifference html = getCurrentDifference("html");
          CurrentDifference ui = getCurrentDifference("ui");
          final CurrentDifference util = getCurrentDifference("util");

          Assert.assertNull(html.getChangeSet());
          Assert.assertNull(ui.getChangeSet());
          Assert.assertNull(util.getChangeSet());

          html.setEnabled(true);
          ui.setEnabled(true);
          util.setEnabled(true);
          waitForChangesManager();

          Assert.assertTrue(ListSequence.fromList(check_orwzer_a0a71a0a3a0a0d(html.getChangeSet())).isNotEmpty());
          Assert.assertTrue(ListSequence.fromList(check_orwzer_a0a81a0a3a0a0d(ui.getChangeSet())).isNotEmpty());
          Assert.assertNull(util.getChangeSet());

          ModelAccess.instance().runCommandInEDT(new Runnable() {
            public void run() {
              SModel model = util.getModelDescriptor().getSModel();
              SNode root = ListSequence.fromList(SModelOperations.getRoots(model, "jetbrains.mps.baseLanguage.structure.ClassConcept")).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode r) {
                  return "ImageLoader".equals(SPropertyOperations.getString(r, "name"));
                }
              });
              SPropertyOperations.set(root, "name", "ImageLoaderModified");
              ListSequence.fromList(SLinkOperations.getTargets(root, "field", true)).clear();
            }
          }, project);
          ModelAccess.instance().flushEventQueue();

          waitForChangesManager();
          Assert.assertTrue(ListSequence.fromList(check_orwzer_a0a52a0a3a0a0d(util.getChangeSet())).isNotEmpty());

          ModelAccess.instance().runCommandInEDT(new Runnable() {
            public void run() {
              util.getModelDescriptor().save();
            }
          }, project);
          ModelAccess.instance().flushEventQueue();

          AbstractVcs gitVcs = AllVcses.getInstance(ideaProject).getByName("Git");
          assert gitVcs != null;

          myChangeListManager = ChangeListManager.getInstance(ideaProject);
          myChangeListManager.ensureUpToDate(false);
          VirtualFile utilVFile = VirtualFileUtils.getVirtualFile(util.getModelDescriptor().getModelFile());
          Change change = myChangeListManager.getChange(utilVFile);
          assert change != null;
          gitVcs.getCheckinEnvironment().commit(Arrays.asList(change), "dumb commit");
          VcsDirtyScopeManager.getInstance(ideaProject).fileDirty(utilVFile);
          myChangeListManager.ensureUpToDate(false);

          waitForChangesManager();
          Assert.assertNull(util.getChangeSet());

          GitUtils.uncommmit(ideaProject, ideaProject.getBaseDir());
          utilVFile.refresh(false, false);
          VcsDirtyScopeManager.getInstance(ideaProject).fileDirty(utilVFile);
          myChangeListManager.ensureUpToDate(false);

          waitForChangesManager();
          Assert.assertTrue(ListSequence.fromList(check_orwzer_a0a05a0a3a0a0d(util.getChangeSet())).isNotEmpty());

          List<VcsException> exceptions = ListSequence.fromList(new ArrayList<VcsException>());
          gitVcs.getRollbackEnvironment().rollbackChanges(Arrays.asList(myChangeListManager.getChange(utilVFile)), exceptions, RollbackProgressListener.EMPTY);
          if (ListSequence.fromList(exceptions).isNotEmpty()) {
            throw ListSequence.fromList(exceptions).first();
          }

          waitForChangesManager();
          Assert.assertNull(util.getChangeSet());

          return true;
        } catch (Throwable e) {
          e.printStackTrace();
          return false;
        }
      }
    }, "jetbrains.mps.vcs", "Git4Idea", "jetbrains.mps.ide.make");
    Assert.assertTrue(result);
  }

  private static List<ModelChange> check_orwzer_a0a71a0a3a0a0d(ChangeSet checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelChanges();
    }
    return null;
  }

  private static List<ModelChange> check_orwzer_a0a81a0a3a0a0d(ChangeSet checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelChanges();
    }
    return null;
  }

  private static List<ModelChange> check_orwzer_a0a52a0a3a0a0d(ChangeSet checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelChanges();
    }
    return null;
  }

  private static List<ModelChange> check_orwzer_a0a05a0a3a0a0d(ChangeSet checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelChanges();
    }
    return null;
  }
}
