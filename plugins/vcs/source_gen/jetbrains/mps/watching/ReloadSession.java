package jetbrains.mps.watching;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import java.util.Set;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import java.util.LinkedHashSet;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.project.IModule;
import com.intellij.openapi.project.Project;
import java.util.HashSet;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.library.LibraryInitializer;
import jetbrains.mps.reloading.ClassLoaderManager;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.util.CollectionUtil;

/*package*/ class ReloadSession {
  private static final Logger LOG = Logger.getLogger(ReloadSession.class);

  private final Set<EditableSModelDescriptor> myChangedModels = new LinkedHashSet<EditableSModelDescriptor>();
  private final Set<VirtualFile> myNewModelVFiles = new LinkedHashSet<VirtualFile>();
  private final Set<IModule> myChangedModules = new LinkedHashSet<IModule>();
  private final Set<VirtualFile> myNewModuleVFiles = new LinkedHashSet<VirtualFile>();
  private final Set<Project> myChangedProjects = new LinkedHashSet<Project>();
  private Set<String> myDeletedModels = new HashSet<String>();
  private final Set<IModule> myDeletedModules = new HashSet<IModule>();
  private final Set<ModelChangesWatcher.IReloadListener> myReloadListeners;

  public ReloadSession(Set<ModelChangesWatcher.IReloadListener> reloadListeners) {
    myReloadListeners = reloadListeners;
  }

  public void doReload() {
    if (hasAnythingToDo()) {
      ProgressManager.getInstance().run(new Task.Modal(null, "Reloading", false) {
        public void run(@NotNull final ProgressIndicator progressIndicator) {
          fireReloadStarted();
          ReloadSession.LOG.debug("Starting reload for:\n" + ((myChangedModels.size() == 0 ?
            "" :
            "Changed models : " + myChangedModels + "\n"
          )) + ((myChangedModules.size() == 0 ?
            "" :
            "Changed modules : " + myChangedModules + "\n"
          )) + ((myChangedProjects.size() == 0 ?
            "" :
            "Changed projects : " + myChangedProjects + "\n"
          )) + ((myNewModelVFiles.size() == 0 ?
            "" :
            "New models : " + myNewModelVFiles + "\n"
          )) + ((myNewModuleVFiles.size() == 0 ?
            "" :
            "New modules : " + myNewModuleVFiles + "\n"
          )) + ((myDeletedModels.size() == 0 ?
            "" :
            "Deleted models : " + myDeletedModels + "\n"
          )) + ((myDeletedModules.size() == 0 ?
            "" :
            "Deleted modules : " + myDeletedModules + "\n"
          )));
          try {
            if (!(myNewModuleVFiles.isEmpty())) {
              ReloadSession.LOG.info("Reloading libraries.");
              progressIndicator.setText("Reloading libraries... Please wait.");
              ModelAccess.instance().runWriteAction(new Runnable() {
                public void run() {
                  LibraryInitializer.getInstance().update();
                }
              });
            }
            preprocess();
            boolean areModulesUpdated = updateModules(progressIndicator);
            updateModels(progressIndicator);
            if (areModulesUpdated || !(myNewModuleVFiles.isEmpty())) {
              progressIndicator.setText("Reloading classes... Please wait.");
              ReloadSession.LOG.info("Reloading classes.");
              ModelAccess.instance().runWriteAction(new Runnable() {
                public void run() {
                  ClassLoaderManager.getInstance().reloadAll(new EmptyProgressIndicator());
                }
              });
            }
          } finally {
            ReloadSession.LOG.info("Reload finished.");
            fireReloadFinished();
          }
        }
      });
    }
  }

  private void fireReloadStarted() {
    for (ModelChangesWatcher.IReloadListener l : myReloadListeners) {
      l.reloadStarted();
    }
  }

  private void fireReloadFinished() {
    for (ModelChangesWatcher.IReloadListener l : myReloadListeners) {
      l.reloadFinished();
    }
  }

  private void updateModels(final ProgressIndicator progressIndicator) {
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        progressIndicator.setText("Reloading updated models... Please wait.");
        for (final EditableSModelDescriptor model : myChangedModels) {
          try {
            String text = "Reloading " + model.getSModelReference().getSModelFqName();
            ReloadSession.LOG.info(text);
            progressIndicator.setText2(text);
            model.reloadFromDiskSafe();
          } catch (RuntimeException e) {
            ReloadSession.LOG.error(e);
          }
        }
      }
    });
  }

  private boolean updateModules(final ProgressIndicator progressIndicator) {
    boolean isUpdated = false;
    progressIndicator.setText("Reloading updated modules... Please wait.");
    for (final IModule module : myChangedModules) {
      ModelAccess.instance().runWriteInEDT(new Runnable() {
        public void run() {
          String text = "Reloading " + module.getModuleFqName();
          ReloadSession.LOG.info(text);
          progressIndicator.setText2(text);
          module.reloadFromDisk(false);
        }
      });
      isUpdated = true;
    }
    for (final IModule module : myDeletedModules) {
      ModelAccess.instance().runWriteAction(new Runnable() {
        public void run() {
          module.dispose();
          String text = "Unloading removed module " + module.getModuleFqName();
          ReloadSession.LOG.info(text);
          MPSModuleRepository.getInstance().removeModule(module);
          progressIndicator.setText2(text);
        }
      });
      isUpdated = true;
    }
    return isUpdated;
  }

  private void preprocess() {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (VirtualFile virtualFile : myNewModelVFiles) {
          if (!(virtualFile.exists())) {
            continue;
          }
          IModule module = MPSModuleRepository.getInstance().getModuleForModelFile(FileUtil.getCanonicalPath(virtualFile.getPath()));
          if (module != null) {
            myChangedModules.add(module);
          }
        }
        for (String path : myDeletedModels) {
          IModule module = MPSModuleRepository.getInstance().getModuleForModelFile(path);
          if (module != null) {
            myChangedModules.add(module);
          }
        }
        Set<SModelDescriptor> skip = new HashSet<SModelDescriptor>();
        for (SModelDescriptor modelDescriptor : myChangedModels) {
          IModule module = modelDescriptor.getModule();

          if (myChangedModules.contains(module)) {
            ReloadSession.LOG.debug("Skip model " + modelDescriptor + " since we want to reload " + module);
            skip.add(modelDescriptor);
            break;
          }
        }
        Set<Generator> generators = CollectionUtil.filter(Generator.class, myChangedModules);
        myChangedModules.removeAll(generators);
        for (Generator gen : generators) {
          ReloadSession.LOG.debug("Skip generator " + gen + " since we want to reload " + gen.getSourceLanguage());
          myChangedModules.add(gen.getSourceLanguage());
        }
        myChangedModules.removeAll(myDeletedModules);
        myChangedModels.removeAll(skip);
      }
    });
  }

  public boolean hasAnythingToDo() {
    return !((myChangedModels.isEmpty() && myChangedModules.isEmpty() && myChangedProjects.isEmpty() && myNewModelVFiles.isEmpty() && myNewModuleVFiles.isEmpty() && myDeletedModels.isEmpty() && myDeletedModules.isEmpty()));
  }

  public void addChangedModel(EditableSModelDescriptor model) {
    myChangedModels.add(model);
  }

  public void addNewModelFile(VirtualFile vfile) {
    myNewModelVFiles.add(vfile);
  }

  public void addChangedModule(IModule module) {
    myChangedModules.add(module);
  }

  public void addNewModuleFile(VirtualFile vfile) {
    myNewModuleVFiles.add(vfile);
  }

  public void addChangedProject(Project project) {
    myChangedProjects.add(project);
  }

  public void addDeletedModelFilePath(String path) {
    myDeletedModels.add(path);
  }

  public void addDeletedModule(IModule module) {
    myDeletedModules.add(module);
  }
}
