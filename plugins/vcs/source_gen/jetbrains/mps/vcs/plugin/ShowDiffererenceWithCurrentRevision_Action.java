package jetbrains.mps.vcs.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.icons.AllIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.persistence.DataSource;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.extapi.persistence.FileDataSource;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import jetbrains.mps.util.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vcs.FileStatus;
import com.intellij.openapi.vcs.impl.VcsFileStatusProvider;
import jetbrains.mps.persistence.FilePerRootDataSource;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.project.MPSExtentions;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import org.jetbrains.mps.openapi.model.EditableSModel;
import jetbrains.mps.vcs.platform.actions.VcsActionsUtil;

public class ShowDiffererenceWithCurrentRevision_Action extends BaseAction {
  private static final Icon ICON = AllIcons.Actions.Diff;
  public ShowDiffererenceWithCurrentRevision_Action() {
    super("Compare with the Same Repository Version", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    DataSource dataSource = ((SModel) MapSequence.fromMap(_params).get("model")).getSource();
    if (dataSource instanceof FileDataSource) {
      VirtualFile virtualFile = VirtualFileUtils.getVirtualFile(((FileDataSource) ((SModel) MapSequence.fromMap(_params).get("model")).getSource()).getFile());
      if (SNodeOperations.isRoot(((SNode) MapSequence.fromMap(_params).get("node"))) && ProjectLevelVcsManager.getInstance(((Project) MapSequence.fromMap(_params).get("project"))).getVcsFor(virtualFile) != null) {
        FileStatus fileStatus = ((Project) MapSequence.fromMap(_params).get("project")).getComponent(VcsFileStatusProvider.class).getFileStatus(virtualFile);
        return FileStatus.ADDED != fileStatus && FileStatus.UNKNOWN != fileStatus;
      }
    } else if (dataSource instanceof FilePerRootDataSource) {
      if (!(SNodeOperations.isRoot(((SNode) MapSequence.fromMap(_params).get("node"))))) {
        return false;
      }
      String rootName = ModelAccess.instance().runReadAction(new Computable<String>() {
        public String compute() {
          return ((SNode) MapSequence.fromMap(_params).get("node")).getName();
        }
      });
      VirtualFile virtualFile = VirtualFileUtils.getVirtualFile(((FilePerRootDataSource) ((SModel) MapSequence.fromMap(_params).get("model")).getSource()).getFile(rootName + "." + MPSExtentions.MODEL_ROOT));
      if (ProjectLevelVcsManager.getInstance(((Project) MapSequence.fromMap(_params).get("project"))).getVcsFor(virtualFile) != null) {
        FileStatus fileStatus = ((Project) MapSequence.fromMap(_params).get("project")).getComponent(VcsFileStatusProvider.class).getFileStatus(virtualFile);
        return FileStatus.ADDED != fileStatus && FileStatus.UNKNOWN != fileStatus;
      }
    }
    return false;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    {
      boolean enabled = this.isApplicable(event, _params);
      this.setEnabledState(event.getPresentation(), enabled);
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("node", event.getData(MPSCommonDataKeys.NODE));
    if (MapSequence.fromMap(_params).get("node") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(CommonDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("model", event.getData(MPSCommonDataKeys.CONTEXT_MODEL));
    if (MapSequence.fromMap(_params).get("model") == null) {
      return false;
    }
    if (!(MapSequence.fromMap(_params).get("model") instanceof EditableSModel) || ((EditableSModel) MapSequence.fromMap(_params).get("model")).isReadOnly()) {
      return false;
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    VcsActionsUtil.showRootDifference((EditableSModel) ((SModel) MapSequence.fromMap(_params).get("model")), ((SNode) MapSequence.fromMap(_params).get("node")), ((Project) MapSequence.fromMap(_params).get("project")), null);
  }
}
