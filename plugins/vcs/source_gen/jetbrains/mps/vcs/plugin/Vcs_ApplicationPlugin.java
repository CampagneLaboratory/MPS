package jetbrains.mps.vcs.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.applicationplugins.BaseApplicationPlugin;
import com.intellij.openapi.extensions.PluginId;
import com.intellij.openapi.actionSystem.ActionManager;
import jetbrains.mps.ide.actions.Goto_ActionGroup;
import jetbrains.mps.ide.actions.ModelActions_ActionGroup;
import jetbrains.mps.ide.actions.EditorTabActions_ActionGroup;
import jetbrains.mps.ide.actions.NodeActions_ActionGroup;
import jetbrains.mps.ide.actions.LanguageActions_ActionGroup;
import jetbrains.mps.ide.actions.SolutionActions_ActionGroup;
import jetbrains.mps.ide.actions.EditorLeftPanelMenu_ActionGroup;
import java.util.List;
import jetbrains.mps.plugins.pluginparts.custom.BaseCustomApplicationPlugin;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class Vcs_ApplicationPlugin extends BaseApplicationPlugin {
  private PluginId myId = PluginId.getId("jetbrains.mps.vcs");

  public Vcs_ApplicationPlugin() {
  }

  public void createGroups() {
    ActionManager manager = ActionManager.getInstance();
    // actions w/o parameters 
    {
      AddToVcs_Action action = new AddToVcs_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      Annotate_Action action = new Annotate_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      DumpChangesManager_Action action = new DumpChangesManager_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ForceRefreshModelChanges_Action action = new ForceRefreshModelChanges_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      GoToNextChange_Action action = new GoToNextChange_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      GoToPreviousChange_Action action = new GoToPreviousChange_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      IgnoreInVcs_Action action = new IgnoreInVcs_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      InstallCustomMergeDriver_Action action = new InstallCustomMergeDriver_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ReRunMergeFromBackup_Action action = new ReRunMergeFromBackup_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      RollbackChanges_Action action = new RollbackChanges_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ShowDifferencesWithModelOnDisk_Action action = new ShowDifferencesWithModelOnDisk_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    {
      ShowDiffererenesWithCurrentRevision_Action action = new ShowDiffererenesWithCurrentRevision_Action();
      manager.registerAction(action.getActionId(), action, myId);
    }
    // parameterized actions 

    // groups 
    manager.registerAction(AnnotateGroup_ActionGroup.ID, new AnnotateGroup_ActionGroup(), myId);
    manager.registerAction(ChangesStrip_ActionGroup.ID, new ChangesStrip_ActionGroup(), myId);
    manager.registerAction(EditorInternalVCS_ActionGroup.ID, new EditorInternalVCS_ActionGroup(), myId);
    manager.registerAction(GoToVCS_ActionGroup.ID, new GoToVCS_ActionGroup(), myId);
    manager.registerAction(InstallCustomMergeDriverGroup_ActionGroup.ID, new InstallCustomMergeDriverGroup_ActionGroup(), myId);
    manager.registerAction(ShowDiffWithCurrRev_ActionGroup.ID, new ShowDiffWithCurrRev_ActionGroup(), myId);
    manager.registerAction(VCSModelActions_ActionGroup.ID, new VCSModelActions_ActionGroup(), myId);
    manager.registerAction(VCS_ActionGroup.ID, new VCS_ActionGroup(), myId);
  }

  public void adjustInterfaceGroups() {
  }

  public void adjustRegularGroups() {
    this.insertGroupIntoAnother(Goto_ActionGroup.ID, "jetbrains.mps.vcs.plugin.GoToVCS_ActionGroup", Goto_ActionGroup.LABEL_ID_gotoVCS);
    this.insertGroupIntoAnother(ModelActions_ActionGroup.ID, "jetbrains.mps.vcs.plugin.VCSModelActions_ActionGroup", ModelActions_ActionGroup.LABEL_ID_mpsvcs);
    this.insertGroupIntoAnother(EditorTabActions_ActionGroup.ID, "jetbrains.mps.vcs.plugin.ShowDiffWithCurrRev_ActionGroup", EditorTabActions_ActionGroup.LABEL_ID_diff);
    this.insertGroupIntoAnother(NodeActions_ActionGroup.ID, "jetbrains.mps.vcs.plugin.ShowDiffWithCurrRev_ActionGroup", NodeActions_ActionGroup.LABEL_ID_diff);
    this.insertGroupIntoAnother(LanguageActions_ActionGroup.ID, "jetbrains.mps.vcs.plugin.VCS_ActionGroup", LanguageActions_ActionGroup.LABEL_ID_vcs);
    this.insertGroupIntoAnother(SolutionActions_ActionGroup.ID, "jetbrains.mps.vcs.plugin.VCS_ActionGroup", SolutionActions_ActionGroup.LABEL_ID_vcs);
    this.insertGroupIntoAnother(EditorLeftPanelMenu_ActionGroup.ID, "jetbrains.mps.vcs.plugin.AnnotateGroup_ActionGroup", null);
    this.insertGroupIntoAnother("VcsGlobalGroup", "jetbrains.mps.vcs.plugin.InstallCustomMergeDriverGroup_ActionGroup", null);
  }

  public List<BaseCustomApplicationPlugin> initCustomParts() {
    List<BaseCustomApplicationPlugin> res = ListSequence.fromList(new ArrayList<BaseCustomApplicationPlugin>());
    this.addCustomPart(res, new main_CustomApplicationPlugin());
    return res;
  }

  private void addCustomPart(List<BaseCustomApplicationPlugin> plugins, BaseCustomApplicationPlugin plugin) {
    ListSequence.fromList(plugins).addElement(plugin);
    plugin.init();
  }
}
