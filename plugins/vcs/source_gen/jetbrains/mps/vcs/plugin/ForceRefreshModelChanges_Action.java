package jetbrains.mps.vcs.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.vcs.changesmanager.ModelChangesManager;
import com.intellij.openapi.project.Project;
import jetbrains.mps.vcs.changesmanager.ChangesManager;

public class ForceRefreshModelChanges_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(ForceRefreshModelChanges_Action.class);

  public ForceRefreshModelChanges_Action() {
    super("Force Refresh Model Changes", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        SModelDescriptor md = ((SModel) MapSequence.fromMap(_params).get("model")).getModelDescriptor();
        event.getPresentation().setText("Force Refresh Model Changes for " + NameUtil.shortNameFromLongName(md.getLongName()));
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "ForceRefreshModelChanges", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModelDescriptor modelDescriptor = event.getData(MPSDataKeys.CONTEXT_MODEL);
      if (modelDescriptor == null) {
        return false;
      }
      MapSequence.fromMap(_params).put("model", modelDescriptor.getSModel());
    }
    if (MapSequence.fromMap(_params).get("model") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final Wrappers._T<ModelChangesManager> modelChangesManager = new Wrappers._T<ModelChangesManager>();
      final Project project = ((Project) MapSequence.fromMap(_params).get("project"));
      ChangesManager.getInstance(((Project) MapSequence.fromMap(_params).get("project"))).getCommandQueue().runTask(new Runnable() {
        public void run() {
          modelChangesManager.value = ChangesManager.getInstance(project).getModelChangesManager(((SModel) MapSequence.fromMap(_params).get("model")).getModelDescriptor());
          if (modelChangesManager.value != null) {
            modelChangesManager.value.update(null);
          }
        }
      });
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "ForceRefreshModelChanges", t);
      }
    }
  }
}
