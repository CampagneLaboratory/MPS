package jetbrains.mps.vcs.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.generator.TransientModelsModule;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.projectPane.SortUtil;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.vcs.diff.ui.ModelDifferenceDialog;
import jetbrains.mps.vcs.diff.ui.SimpleDiffRequest;
import com.intellij.openapi.project.Project;
import javax.swing.ImageIcon;
import com.intellij.openapi.util.io.StreamUtil;
import com.intellij.util.io.URLUtil;
import java.io.IOException;

public class CompareTransientModels_Action extends GeneratedAction {
  private static final Icon ICON = getIcon();
  protected static Log log = LogFactory.getLog(CompareTransientModels_Action.class);

  public CompareTransientModels_Action() {
    super("Compare Models", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return ((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models")).size() == 2 && ((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models")).get(0) instanceof TransientModelsModule.TransientSModelDescriptor && ((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models")).get(1) instanceof TransientModelsModule.TransientSModelDescriptor && eq_5whyyr_a0a0a0(((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models")).get(0).getLongName(), ((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models")).get(1).getLongName());
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "CompareTransientModels", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("models", event.getData(MPSDataKeys.MODELS));
    if (MapSequence.fromMap(_params).get("models") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final List<SModelDescriptor> sortedModels = SortUtil.sortModels(((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models")));
      ModelAccess.instance().runReadInEDT(new Runnable() {
        public void run() {
          final SModel first = sortedModels.get(0).getSModel();
          final SModel second = sortedModels.get(1).getSModel();
          ApplicationManager.getApplication().invokeLater(new Runnable() {
            public void run() {
              new ModelDifferenceDialog(first, second, new SimpleDiffRequest(((Project) MapSequence.fromMap(_params).get("project")), first.getSModelReference().getSModelFqName().toString(), second.getSModelReference().getSModelFqName().toString())).showDialog();
            }
          });
        }
      });
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "CompareTransientModels", t);
      }
    }
  }

  private static Icon getIcon() {
    try {
      return new ImageIcon(StreamUtil.loadFromStream(URLUtil.openStream(CompareTransientModels_Action.class.getResource("diff.png"))));
    } catch (IOException e) {
      if (log.isWarnEnabled()) {
        log.warn("Couldn't load icon for CompareTransientModels", e);
      }
      return null;
    }
  }

  private static boolean eq_5whyyr_a0a0a0(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
