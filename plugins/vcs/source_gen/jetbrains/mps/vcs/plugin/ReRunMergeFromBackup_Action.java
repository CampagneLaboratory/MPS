package jetbrains.mps.vcs.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import com.intellij.openapi.project.Project;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import java.io.File;
import jetbrains.mps.vcs.platform.util.MergeBackupUtil;
import jetbrains.mps.vcs.util.MergeVersion;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import org.xml.sax.InputSource;
import java.io.StringReader;
import jetbrains.mps.smodel.SModelReference;
import com.intellij.openapi.diff.MergeRequest;
import com.intellij.openapi.diff.DiffRequestFactory;
import com.intellij.openapi.diff.DiffManager;
import java.io.IOException;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import jetbrains.mps.generator.ModelDigestUtil;

public class ReRunMergeFromBackup_Action extends BaseAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(ReRunMergeFromBackup_Action.class);

  public ReRunMergeFromBackup_Action() {
    super("Rerun Merge from Backup", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    ProjectLevelVcsManager manager = ProjectLevelVcsManager.getInstance(((Project) MapSequence.fromMap(_params).get("project")));
    if (manager.getAllVersionedRoots().length == 0) {
      return false;
    }
    if (!(((SModelDescriptor) MapSequence.fromMap(_params).get("model")) instanceof EditableSModelDescriptor)) {
      return false;
    }
    VirtualFile file = VirtualFileUtils.getVirtualFile(ReRunMergeFromBackup_Action.this.getModelFile(_params));
    if (file == null) {
      return false;
    }
    return manager.getVcsFor(file) != null && Sequence.fromIterable(ReRunMergeFromBackup_Action.this.getBackupFiles(_params)).isNotEmpty();
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "ReRunMergeFromBackup", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("model", event.getData(MPSCommonDataKeys.MODEL));
    if (MapSequence.fromMap(_params).get("model") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      for (File backupFile : Sequence.fromIterable(ReRunMergeFromBackup_Action.this.getBackupFiles(_params))) {
        try {
          String[] modelsAsText = MergeBackupUtil.loadZippedModelsAsText(backupFile, MergeVersion.values());
          String mine = modelsAsText[MergeVersion.MINE.ordinal()];
          String base = modelsAsText[MergeVersion.BASE.ordinal()];
          String repository = modelsAsText[MergeVersion.REPOSITORY.ordinal()];

          String uid = ModelPersistence.loadDescriptor(new InputSource(new StringReader(mine))).getUID();
          if (uid == null || !(SModelReference.fromString(uid).equals(((SModelDescriptor) MapSequence.fromMap(_params).get("model")).getSModelReference()))) {
            continue;
          }

          mine = ReRunMergeFromBackup_Action.this.selectMineModel(ModelPersistence.modelToString(((SModelDescriptor) MapSequence.fromMap(_params).get("model")).getSModel()), mine, _params);
          if (mine == null) {
            return;
          }
          MergeRequest mergeRequest = DiffRequestFactory.getInstance().createMergeRequest(mine, repository, base, VirtualFileUtils.getVirtualFile(ReRunMergeFromBackup_Action.this.getModelFile(_params)), ((Project) MapSequence.fromMap(_params).get("project")), null, null);
          mergeRequest.setVersionTitles(new String[]{"Mine", "Base version", "Repository"});
          DiffManager.getInstance().getDiffTool().show(mergeRequest);
          return;
        } catch (IOException e) {
          if (log.isWarnEnabled()) {
            log.warn("", e);
          }
          // Skip this backup 
          continue;
        }
      }
      Messages.showInfoMessage("No suitable backup files for " + ((SModelDescriptor) MapSequence.fromMap(_params).get("model")).getSModelReference().getSModelFqName() + "was not found.", "No Backup Files Found");
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "ReRunMergeFromBackup", t);
      }
    }
  }

  private Iterable<File> getBackupFiles(final Map<String, Object> _params) {
    return MergeBackupUtil.findZipFilesForModelFile(ReRunMergeFromBackup_Action.this.getModelFile(_params).getName());
  }

  private IFile getModelFile(final Map<String, Object> _params) {
    return ((DefaultSModelDescriptor) ((SModelDescriptor) MapSequence.fromMap(_params).get("model"))).getSource().getFile();
  }

  private String selectMineModel(String currentModel, String backUpModel, final Map<String, Object> _params) {
    if (ModelDigestUtil.hash(currentModel).equals(ModelDigestUtil.hash(backUpModel))) {
      return backUpModel;
    } else {
      String current = "Currently Loaded Model";
      String backup = "Backed Up Model";
      String[] options = {current, backup};
      int result = Messages.showDialog("Backed up \"mine\" model is different from current model.\n Which version would you like to use?", "Current model differs from backup.", options, 0, Messages.getQuestionIcon());
      if (result == -1) {
        return null;
      } else if (options[result].equals(current)) {
        return currentModel;
      } else {
        return backUpModel;
      }
    }
  }
}
