/*
 * Copyright 2003-2010 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.vcs.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import com.intellij.openapi.ui.Messages;
import java.io.File;
import java.io.IOException;

import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.vcs.ModelUtils;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.vcs.diff.changes.ChangeSetBuilder;

public class ShowDifference_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(ShowDifference_Action.class);

  private Project project;

  public ShowDifference_Action() {
    super("Show Difference from Files", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "ShowDifference", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    return true;
  }

  protected void cleanup() {
    super.cleanup();
    this.project = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      String inputResult = Messages.showInputDialog(ShowDifference_Action.this.project, "Input name", "Name", null);
      File rootDir = new File(System.getProperty("user.home"), "mydiffs");
      File thisDir = new File(rootDir, inputResult);
      final File oldFile = Sequence.fromIterable(Sequence.fromArray(thisDir.listFiles())).findFirst(new IWhereFilter<File>() {
        public boolean accept(File f) {
          return f.getName().endsWith(".old.mps");
        }
      });
      final File newFile = Sequence.fromIterable(Sequence.fromArray(thisDir.listFiles())).findFirst(new IWhereFilter<File>() {
        public boolean accept(File f) {
          return f.getName().endsWith(".new.mps");
        }
      });
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          try {
            final SModel oldModel = ModelUtils.readModel(oldFile.getAbsolutePath());
            final SModel newModel = ModelUtils.readModel(newFile.getAbsolutePath());
            for (ModelChange change : ListSequence.fromList(ChangeSetBuilder.buildChangeSet(oldModel, newModel).getModelChanges())) {
              System.out.println(change);
            }
          } catch (IOException e) {
            log.error(e);
          }
        }
      });
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "ShowDifference", t);
      }
    }
  }
}
