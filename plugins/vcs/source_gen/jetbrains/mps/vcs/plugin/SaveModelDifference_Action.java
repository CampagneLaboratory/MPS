/*
 * Copyright 2003-2010 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.vcs.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.smodel.SNode;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import java.io.File;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import com.intellij.openapi.vcs.AbstractVcs;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import com.intellij.openapi.vcs.history.VcsRevisionNumber;
import com.intellij.openapi.vcs.changes.ContentRevision;
import java.io.FileWriter;
import java.util.Map;

import jetbrains.mps.util.FileUtil;

public class SaveModelDifference_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(SaveModelDifference_Action.class);

  private SNode node;
  private Project project;

  public SaveModelDifference_Action() {
    super("Save Model Difference", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  protected void doExecute(AnActionEvent e, Map<String, Object> params) {

  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "SaveModelDifference", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    return true;
  }

  protected void cleanup() {
    this.node = null;
    this.project = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      int number = 1;
      File rootDir = new File(System.getProperty("user.home"), "mydiffs");
      File thisDir;
      while (true) {
        thisDir = new File(rootDir, Integer.toString(number));
        if (!(thisDir.exists())) {
          break;
        }
        number++;
      }
      thisDir.mkdir();

      try {
        final Wrappers._T<SModelDescriptor> model = new Wrappers._T<SModelDescriptor>();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            model.value = SaveModelDifference_Action.this.node.getModel().getModelDescriptor();
          }
        });
        VirtualFile file = VirtualFileUtils.getVirtualFile(((EditableSModelDescriptor) model.value).getModelFile());
        AbstractVcs vcs = ProjectLevelVcsManager.getInstance(SaveModelDifference_Action.this.project).getVcsFor(file);
        VcsRevisionNumber revisionNumber = vcs.getDiffProvider().getCurrentRevision(file);
        ContentRevision content = vcs.getDiffProvider().createFileContent(revisionNumber, file);
        FileWriter fw = new FileWriter(new File(thisDir, model.value.getSModelReference().getSModelFqName().getCompactPresentation() + ".old.mps"));
        fw.write(content.getContent());
        fw.close();
        FileUtil.copyFile(new File(file.getPath()), new File(thisDir, model.value.getSModelReference().getSModelFqName().getCompactPresentation() + ".new.mps"));
      } catch (Exception e) {
        if (log.isErrorEnabled()) {
          log.error("", e);
        }
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "SaveModelDifference", t);
      }
    }
  }
}
