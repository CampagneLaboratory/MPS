package jetbrains.mps.vcs.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.workbench.MPSDataKeys;
import java.io.File;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SNode;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import com.intellij.openapi.vcs.AbstractVcs;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vcs.history.VcsRevisionNumber;
import com.intellij.openapi.vcs.changes.ContentRevision;
import java.io.FileWriter;
import jetbrains.mps.util.FileUtil;

public class SaveModelDifference_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(SaveModelDifference_Action.class);

  public SaveModelDifference_Action() {
    super("Save Model Difference", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "SaveModelDifference", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("node", event.getData(MPSDataKeys.NODE));
    if (MapSequence.fromMap(_params).get("node") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      int number = 1;
      File rootDir = new File(System.getProperty("user.home"), "mydiffs");
      File thisDir;
      while (true) {
        thisDir = new File(rootDir, Integer.toString(number));
        if (!(thisDir.exists())) {
          break;
        }
        number++;
      }
      thisDir.mkdir();

      try {
        final Wrappers._T<SModelDescriptor> model = new Wrappers._T<SModelDescriptor>();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            model.value = ((SNode) MapSequence.fromMap(_params).get("node")).getModel().getModelDescriptor();
          }
        });
        VirtualFile file = VirtualFileUtils.getVirtualFile(((EditableSModelDescriptor) model.value).getModelFile());
        AbstractVcs vcs = ProjectLevelVcsManager.getInstance(((Project) MapSequence.fromMap(_params).get("project"))).getVcsFor(file);
        VcsRevisionNumber revisionNumber = vcs.getDiffProvider().getCurrentRevision(file);
        ContentRevision content = vcs.getDiffProvider().createFileContent(revisionNumber, file);
        FileWriter fw = new FileWriter(new File(thisDir, model.value.getSModelReference().getSModelFqName().getCompactPresentation() + ".old.mps"));
        fw.write(content.getContent());
        fw.close();
        FileUtil.copyFile(new File(file.getPath()), new File(thisDir, model.value.getSModelReference().getSModelFqName().getCompactPresentation() + ".new.mps"));
      } catch (Exception e) {
        if (log.isErrorEnabled()) {
          log.error("", e);
        }
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "SaveModelDifference", t);
      }
    }
  }
}
