package jetbrains.mps.vcs.annotation;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.nodeEditor.EditorComponent;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.vfs.IFile;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import com.intellij.openapi.vcs.AbstractVcs;
import com.intellij.openapi.vcs.annotate.AnnotationProvider;
import com.intellij.openapi.vcs.annotate.FileAnnotation;
import com.intellij.openapi.vcs.VcsException;
import java.util.List;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.persistence.def.LineToIdMapper;

public class AnnotationUtil {
  protected static Log log = LogFactory.getLog(AnnotationUtil.class);

  private AnnotationUtil() {
  }

  public static void annotate(EditorComponent editorComponent, Project project) {
    if (project == null) {
      return;
    }
    if (editorComponent == null) {
      return;
    }
    SNode root = editorComponent.getEditedNode();
    SModel model = root.getModel();
    SModelDescriptor modelDescriptor = model.getModelDescriptor();
    if (!((modelDescriptor instanceof EditableSModelDescriptor))) {
      return;
    }
    IFile modelFile = ((EditableSModelDescriptor) modelDescriptor).getModelFile();
    if (modelFile == null) {
      return;
    }
    final VirtualFile file = VirtualFileUtils.getVirtualFile(modelFile);
    final ProjectLevelVcsManager plVcsManager = ProjectLevelVcsManager.getInstance(project);
    final AbstractVcs vcs = plVcsManager.getVcsFor(file);
    if (vcs == null) {
      return;
    }
    final AnnotationProvider annotationProvider = vcs.getAnnotationProvider();
    if (annotationProvider == null) {
      return;
    }

    // TODO with progress monitor 
    FileAnnotation fileAnnotation;
    try {
      fileAnnotation = annotationProvider.annotate(file);
    } catch (VcsException ex) {
      if (log.isErrorEnabled()) {
        log.error("", ex);
      }
      // todo show error 
      return;
    }
    List<SNodeId> lineToId = LineToIdMapper.getLineNumberToNodeIdMap(fileAnnotation.getAnnotatedContent());
    editorComponent.getLeftEditorHighlighter().addTextColumn(new AnnotationColumn(root, fileAnnotation, lineToId));
  }
}
