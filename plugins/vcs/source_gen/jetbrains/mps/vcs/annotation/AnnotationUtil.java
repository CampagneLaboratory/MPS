package jetbrains.mps.vcs.annotation;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.nodeEditor.EditorComponent;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.vfs.IFile;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import com.intellij.openapi.vcs.AbstractVcs;
import com.intellij.openapi.vcs.annotate.AnnotationProvider;
import com.intellij.openapi.vcs.annotate.FileAnnotation;
import com.intellij.openapi.vcs.VcsException;
import java.util.List;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.persistence.def.LineToIdMapper;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;

public class AnnotationUtil {
  protected static Log log = LogFactory.getLog(AnnotationUtil.class);

  private AnnotationUtil() {
  }

  public static void annotate(EditorComponent editorComponent, Project project) {
    if (project == null) {
      return;
    }
    if (editorComponent == null) {
      return;
    }
    SNode root = editorComponent.getEditedNode();
    SModel model = root.getModel();
    SModelDescriptor modelDescriptor = model.getModelDescriptor();
    if (!((modelDescriptor instanceof EditableSModelDescriptor))) {
      return;
    }
    IFile modelFile = ((EditableSModelDescriptor) modelDescriptor).getModelFile();
    if (modelFile == null) {
      return;
    }
    final VirtualFile file = VirtualFileUtils.getVirtualFile(modelFile);
    final ProjectLevelVcsManager plVcsManager = ProjectLevelVcsManager.getInstance(project);
    final AbstractVcs vcs = plVcsManager.getVcsFor(file);
    if (vcs == null) {
      return;
    }
    final AnnotationProvider annotationProvider = vcs.getAnnotationProvider();
    if (annotationProvider == null) {
      return;
    }

    // TODO with progress monitor 
    FileAnnotation fileAnnotation;
    try {
      fileAnnotation = annotationProvider.annotate(file);
    } catch (VcsException ex) {
      if (log.isErrorEnabled()) {
        log.error("", ex);
      }
      // todo show error 
      return;
    }
    List<SNodeId> lineToId = LineToIdMapper.getLineNumberToNodeIdMap(fileAnnotation.getAnnotatedContent());
    editorComponent.getLeftEditorHighlighter().addTextColumn(new AnnotationColumn(root, fileAnnotation, lineToId, vcs, file));
  }

  /*package*/ static Iterable<EditorCell> getCellDescendants(EditorCell cell) {
    return new _FunctionTypes._return_P1_E0<Iterable<EditorCell>, EditorCell>() {
      public Iterable<EditorCell> invoke(final EditorCell c) {
        return new Iterable<EditorCell>() {
          public Iterator<EditorCell> iterator() {
            return new YieldingIterator<EditorCell>() {
              private int __CP__ = 0;
              private EditorCell _5_childCell;
              private Iterator<EditorCell> _5_childCell_it;
              private Iterable<EditorCell> _9_cells;
              private EditorCell _10__yield_3nvpiw_b0a0b0a0a0b;
              private Iterator<EditorCell> _10__yield_3nvpiw_b0a0b0a0a0b_it;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 5:
                      this._5_childCell_it = Sequence.fromIterable((EditorCell_Collection) c).iterator();
                    case 6:
                      if (!(this._5_childCell_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._5_childCell = this._5_childCell_it.next();
                      this.__CP__ = 7;
                      break;
                    case 10:
                      this._10__yield_3nvpiw_b0a0b0a0a0b_it = Sequence.fromIterable(_9_cells).iterator();
                    case 11:
                      if (!(this._10__yield_3nvpiw_b0a0b0a0a0b_it.hasNext())) {
                        this.__CP__ = 6;
                        break;
                      }
                      this._10__yield_3nvpiw_b0a0b0a0a0b = this._10__yield_3nvpiw_b0a0b0a0a0b_it.next();
                      this.__CP__ = 12;
                      break;
                    case 3:
                      if (c instanceof EditorCell_Collection) {
                        this.__CP__ = 4;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 2:
                      this.__CP__ = 3;
                      this.yield(c);
                      return true;
                    case 13:
                      this.__CP__ = 11;
                      this.yield(_10__yield_3nvpiw_b0a0b0a0a0b);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this.__CP__ = 5;
                      break;
                    case 7:
                      this._9_cells = invoke(_5_childCell);
                      this.__CP__ = 10;
                      break;
                    case 12:
                      this.__CP__ = 13;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    }.invoke(cell);
  }
}
