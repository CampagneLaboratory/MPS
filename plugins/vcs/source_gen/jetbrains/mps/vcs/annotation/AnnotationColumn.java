package jetbrains.mps.vcs.annotation;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.leftHighlighter.SimpleLeftTextColumn;
import jetbrains.mps.smodel.SNode;
import com.intellij.openapi.vcs.annotate.FileAnnotation;
import java.util.List;
import jetbrains.mps.smodel.SNodeId;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Map;
import jetbrains.mps.nodeEditor.leftHighlighter.SimpleTextElement;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import com.intellij.openapi.vcs.annotate.LineAnnotationAspect;

public class AnnotationColumn extends SimpleLeftTextColumn {
  public AnnotationColumn(SNode root, FileAnnotation fileAnnotation, List<SNodeId> lineToId) {
    Set<SNodeId> descendantIds = SetSequence.fromSetWithValues(new HashSet<SNodeId>(), ListSequence.fromList(SNodeOperations.getDescendants(root, null, false, new String[]{})).select(new ISelector<SNode, SNodeId>() {
      public SNodeId select(SNode n) {
        return n.getSNodeId();
      }
    }));
    Map<SNode, SimpleTextElement> simpleTextElements = MapSequence.fromMap(new HashMap<SNode, SimpleTextElement>());
    SModel model = SNodeOperations.getModel(root);
    for (final Wrappers._int i = new Wrappers._int(0); i.value < ListSequence.fromList(lineToId).count(); i.value++) {
      SNode node = null;
      SNodeId id = ListSequence.fromList(lineToId).getElement(i.value);
      if (id != null && SetSequence.fromSet(descendantIds).contains(id)) {
        node = model.getNodeById(id);
      }
      if (node == null) {
        continue;
      }
      if (MapSequence.fromMap(simpleTextElements).containsKey(node)) {
        continue;
      }
      final StringBuffer text = new StringBuffer();
      Sequence.fromIterable(Sequence.fromArray(fileAnnotation.getAspects())).visitAll(new IVisitor<LineAnnotationAspect>() {
        public void visit(LineAnnotationAspect a) {
          text.append(" ").append(a.getValue(i.value));
        }
      });
      MapSequence.fromMap(simpleTextElements).put(node, new SimpleTextElement(text.substring(1), node));
    }
    for (SimpleTextElement e : Sequence.fromIterable(MapSequence.fromMap(simpleTextElements).values())) {
      addEntry(e);
    }
  }

  public String getName() {
    return "Annotation";
  }
}
