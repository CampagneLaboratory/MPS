package jetbrains.mps.vcs.annotation;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.leftHighlighter.AbstractLeftColumn;
import java.awt.Font;
import jetbrains.mps.nodeEditor.EditorSettings;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Map;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.awt.Color;
import com.intellij.openapi.vcs.annotate.FileAnnotation;
import com.intellij.openapi.vcs.annotate.LineAnnotationAspect;
import com.intellij.openapi.vcs.AbstractVcs;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.persistence.lines.LineContent;
import jetbrains.mps.vcs.diff.changes.Change;
import java.util.Set;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import com.intellij.openapi.vcs.history.VcsFileRevision;
import com.intellij.openapi.vcs.actions.AnnotationColors;
import jetbrains.mps.vcs.changesmanager.ChangesManager;
import jetbrains.mps.vcs.changesmanager.ModelChangesManager;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.vcs.diff.changes.SetPropertyChange;
import jetbrains.mps.smodel.persistence.lines.PropertyLineContent;
import jetbrains.mps.vcs.diff.changes.SetReferenceChange;
import jetbrains.mps.smodel.persistence.lines.ReferenceLineContent;
import jetbrains.mps.smodel.persistence.lines.NodeLineContent;
import jetbrains.mps.nodeEditor.EditorComponent;
import java.awt.Graphics;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.messageTargets.CellFinder;
import java.util.Collections;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import java.awt.event.MouseEvent;
import java.awt.Cursor;
import com.intellij.openapi.vcs.annotate.LineAnnotationAspectAdapter;
import javax.swing.JPopupMenu;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import com.intellij.openapi.ide.CopyPasteManager;
import com.intellij.openapi.vcs.history.TextTransferrable;
import com.intellij.openapi.vcs.history.VcsRevisionNumber;
import com.intellij.openapi.vcs.FilePath;
import com.intellij.openapi.util.Pair;
import com.intellij.openapi.vcs.versionBrowser.CommittedChangeList;
import jetbrains.mps.vcs.changesmanager.ChangeListener;
import com.intellij.openapi.vcs.FileStatus;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.vcs.changes.BackgroundFromStartOption;
import com.intellij.openapi.progress.ProgressIndicator;
import com.intellij.openapi.vcs.CommittedChangesProvider;
import com.intellij.openapi.vcs.FilePathImpl;
import com.intellij.openapi.vcs.ui.VcsBalloonProblemNotifier;
import com.intellij.openapi.ui.MessageType;
import com.intellij.openapi.vcs.changes.ChangesUtil;
import java.io.File;
import com.intellij.openapi.vcs.changes.ContentRevision;
import jetbrains.mps.vcs.plugin.VcsActionsHelper;
import javax.swing.JFrame;
import com.intellij.openapi.wm.WindowManager;
import jetbrains.mps.project.ModuleContext;
import jetbrains.mps.vcs.diff.ui.ModelDifferenceDialog;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.vcs.diff.ui.RootDifferenceDialog;
import com.intellij.openapi.vcs.VcsException;

public class AnnotationColumn extends AbstractLeftColumn {
  private Font myFont = EditorSettings.getInstance().getDefaultEditorFont();
  private List<AnnotationAspectSubcolumn> myAspectSubcolumns = ListSequence.fromList(new ArrayList<AnnotationAspectSubcolumn>());
  private List<Integer> myPseudoLinesY;
  private List<Integer> myPseudoLinesToFileLines;
  private Map<SNodeId, Integer> myNodeIdToFileLine = MapSequence.fromMap(new HashMap<SNodeId, Integer>());
  private Map<String, Color> myAuthorsToColors = MapSequence.fromMap(new HashMap<String, Color>());
  private FileAnnotation myFileAnnotation;
  private LineAnnotationAspect myAuthorAnnotationAspect;
  private AbstractVcs myVcs;
  private VirtualFile myModelVirtualFile;
  private SModelDescriptor myModelDescriptor;
  private List<LineContent> myFileLineToContent;
  private Map<Change, LineContent> myChangesToLineContents = MapSequence.fromMap(new HashMap<Change, LineContent>());
  private Set<Integer> myCurrentPseudoLines = null;
  private final Object myCurrentPseudoLinesLock = new Object();
  private AnnotationColumn.MyChangeListener myChangeListener = new AnnotationColumn.MyChangeListener();

  public AnnotationColumn(SNode root, FileAnnotation fileAnnotation, List<LineContent> fileLineToContent, AbstractVcs vcs, VirtualFile modelVirtualFile) {
    Set<SNodeId> descendantIds = SetSequence.fromSetWithValues(new HashSet<SNodeId>(), ListSequence.fromList(SNodeOperations.getDescendants(root, null, true, new String[]{})).select(new ISelector<SNode, SNodeId>() {
      public SNodeId select(SNode n) {
        return n.getSNodeId();
      }
    }));
    final SModel model = SNodeOperations.getModel(root);
    myFileAnnotation = fileAnnotation;
    myAuthorAnnotationAspect = Sequence.fromIterable(Sequence.fromArray(myFileAnnotation.getAspects())).findFirst(new IWhereFilter<LineAnnotationAspect>() {
      public boolean accept(LineAnnotationAspect a) {
        return LineAnnotationAspect.AUTHOR.equals(a.getId());
      }
    });
    for (int line = 0; line < ListSequence.fromList(fileLineToContent).count(); line++) {
      SNode node = null;
      SNodeId id = check_5mnya_a0b0e0a(ListSequence.fromList(fileLineToContent).getElement(line));
      if (id != null && SetSequence.fromSet(descendantIds).contains(id)) {
        node = model.getNodeById(id);
      }
      if (node == null) {
        continue;
      }
      if (MapSequence.fromMap(myNodeIdToFileLine).containsKey(id)) {
        MapSequence.fromMap(myNodeIdToFileLine).put(id, getFileLineWithMaxRevision(MapSequence.fromMap(myNodeIdToFileLine).get(id), line));
      } else {
        MapSequence.fromMap(myNodeIdToFileLine).put(id, line);
      }
    }
    for (LineAnnotationAspect aspect : Sequence.fromIterable(Sequence.fromArray(fileAnnotation.getAspects()))) {
      ListSequence.fromList(myAspectSubcolumns).addElement(new AnnotationAspectSubcolumn(aspect));
    }
    ListSequence.fromList(myAspectSubcolumns).addElement(new CommitNumberSubcolumn(myFileAnnotation));
    for (VcsFileRevision revision : ListSequence.fromList(myFileAnnotation.getRevisions())) {
      String author = revision.getAuthor();
      if (!(MapSequence.fromMap(myAuthorsToColors).containsKey(author))) {
        MapSequence.fromMap(myAuthorsToColors).put(author, AnnotationColors.BG_COLORS[MapSequence.fromMap(myAuthorsToColors).count() % AnnotationColors.BG_COLORS.length]);
      }
    }
    myModelVirtualFile = modelVirtualFile;
    myModelDescriptor = model.getModelDescriptor();
    myFileLineToContent = fileLineToContent;
    myVcs = vcs;
    final ChangesManager changesManager = ChangesManager.getInstance(myVcs.getProject());
    changesManager.getCommandQueue().runTask(new Runnable() {
      public void run() {
        ModelChangesManager modelChangesManager = changesManager.getModelChangesManager(model);
        ListSequence.fromList(modelChangesManager.getChangeList()).visitAll(new IVisitor<Change>() {
          public void visit(Change ch) {
            saveChange(ch);
          }
        });
        modelChangesManager.addChangeListener(myChangeListener);
      }
    });
  }

  private void saveChange(Change ch) {
    if (ch instanceof SetPropertyChange) {
      MapSequence.fromMap(myChangesToLineContents).put(ch, new PropertyLineContent(ch.getAffectedNodeId(), ((SetPropertyChange) ch).getProperty()));
    } else if (ch instanceof SetReferenceChange) {
      MapSequence.fromMap(myChangesToLineContents).put(ch, new ReferenceLineContent(ch.getAffectedNodeId(), ((SetReferenceChange) ch).getRole()));
    } else if (ch.getAffectedNodeId() != null) {
      MapSequence.fromMap(myChangesToLineContents).put(ch, new NodeLineContent(ch.getAffectedNodeId()));
    }
  }

  private void assureCurrentPseudoLinesCalculated(EditorComponent component) {
    if (myCurrentPseudoLines == null) {
      myCurrentPseudoLines = SetSequence.fromSet(new HashSet<Integer>());
      for (LineContent lineContent : Sequence.fromIterable(MapSequence.fromMap(myChangesToLineContents).values())) {
        SetSequence.fromSet(myCurrentPseudoLines).addSequence(Sequence.fromIterable(getPseudoLinesForContent(component, lineContent)));
      }
    }
  }

  public String getName() {
    return "Annotations";
  }

  public void paint(final Graphics graphics, final EditorComponent component) {
    graphics.setFont(myFont);
    graphics.setColor(Color.BLACK);
    final Map<AnnotationAspectSubcolumn, Integer> subcolumnToX = MapSequence.fromMap(new HashMap<AnnotationAspectSubcolumn, Integer>());
    int x = 1;
    for (AnnotationAspectSubcolumn subcolumn : ListSequence.fromList(myAspectSubcolumns)) {
      MapSequence.fromMap(subcolumnToX).put(subcolumn, x);
      x += subcolumn.getWidth();
    }
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        synchronized (myCurrentPseudoLinesLock) {
          assureCurrentPseudoLinesCalculated(component);
          for (int pseudoLine = 0; pseudoLine < ListSequence.fromList(myPseudoLinesY).count(); pseudoLine++) {
            int fileLine = ListSequence.fromList(myPseudoLinesToFileLines).getElement(pseudoLine);
            if (!(SetSequence.fromSet(myCurrentPseudoLines).contains(pseudoLine))) {
              if (myAuthorAnnotationAspect != null) {
                String author = myAuthorAnnotationAspect.getValue(fileLine);
                graphics.setColor(MapSequence.fromMap(myAuthorsToColors).get(author));
                int height = (pseudoLine == ListSequence.fromList(myPseudoLinesY).count() - 1 ?
                  component.getHeight() - ListSequence.fromList(myPseudoLinesY).last() :
                  ListSequence.fromList(myPseudoLinesY).getElement(pseudoLine + 1) - ListSequence.fromList(myPseudoLinesY).getElement(pseudoLine)
                );
                graphics.fillRect(0, ListSequence.fromList(myPseudoLinesY).getElement(pseudoLine), getWidth(), height);
              }

              graphics.setColor(StyleAttributes.TEXT_COLOR.combine(null, null));
              for (AnnotationAspectSubcolumn subcolumn : ListSequence.fromList(myAspectSubcolumns)) {
                graphics.drawString(subcolumn.getTextForFileLine(fileLine), MapSequence.fromMap(subcolumnToX).get(subcolumn), graphics.getFontMetrics().getAscent() + ListSequence.fromList(myPseudoLinesY).getElement(pseudoLine));
              }

            }
          }
        }
      }
    });
  }

  public int getWidth() {
    return ListSequence.fromList(myAspectSubcolumns).select(new ISelector<AnnotationAspectSubcolumn, Integer>() {
      public Integer select(AnnotationAspectSubcolumn s) {
        return s.getWidth();
      }
    }).reduceLeft(new ILeftCombinator<Integer, Integer>() {
      public Integer combine(Integer a, Integer b) {
        return a + b;
      }
    }) + 1;
  }

  @Nullable
  private EditorCell findCellForContent(EditorComponent component, @Nullable LineContent content) {
    if (content == null) {
      return null;
    }
    SNode editedNode = component.getEditedNode();
    SNode node = editedNode.getModel().getNodeById(content.getNodeId());
    if (node == null || !(node.isDescendantOf(editedNode, true))) {
      return null;
    }

    if (content instanceof NodeLineContent) {
      return component.getBigValidCellForNode(node);
    } else if (content instanceof PropertyLineContent) {
      return CellFinder.getCellForProperty(component, node, ((PropertyLineContent) content).getName());
    } else if (content instanceof ReferenceLineContent) {
      return CellFinder.getCellForReference(component, node, ((ReferenceLineContent) content).getRole());
    } else {
      return null;
    }

  }

  private Iterable<Integer> getPseudoLinesForContent(EditorComponent component, @Nullable LineContent content) {
    EditorCell cell = findCellForContent(component, content);
    if (cell == null) {
      return Sequence.fromIterable(Collections.<Integer>emptyList());
    }
    final int startPseudoLine = Collections.binarySearch(myPseudoLinesY, cell.getY());
    final Wrappers._int endPseudoLine = new Wrappers._int(Collections.binarySearch(myPseudoLinesY, cell.getY() + cell.getHeight()));
    if (endPseudoLine.value < 0) {
      endPseudoLine.value = -endPseudoLine.value - 1;
    }
    return new _FunctionTypes._return_P0_E0<Iterable<Integer>>() {
      public Iterable<Integer> invoke() {
        return new Iterable<Integer>() {
          public Iterator<Integer> iterator() {
            return new YieldingIterator<Integer>() {
              private int __CP__ = 0;
              private int _2_pseudoLine;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_pseudoLine = startPseudoLine;
                    case 3:
                      if (!(_2_pseudoLine < endPseudoLine.value)) {
                        this.__CP__ = 1;
                        break;
                      }
                      this.__CP__ = 4;
                      break;
                    case 5:
                      _2_pseudoLine++;
                      this.__CP__ = 3;
                      break;
                    case 6:
                      this.__CP__ = 5;
                      this.yield(_2_pseudoLine);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this.__CP__ = 6;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    }.invoke();
  }

  public void relayout(final EditorComponent component) {
    if (component == null || component.isDisposed() || component.getGraphics() == null) {
      return;
    }
    Iterable<EditorCell> nonTrivialCells = Sequence.fromIterable(EditorUtils.getCellDescendants(component.getRootCell())).where(new IWhereFilter<EditorCell>() {
      public boolean accept(EditorCell cell) {
        return cell.getWidth() * cell.getHeight() != 0;
      }
    });
    Set<Integer> yCoordinatesSet = SetSequence.fromSetWithValues(new HashSet<Integer>(), Sequence.fromIterable(nonTrivialCells).select(new ISelector<EditorCell, Integer>() {
      public Integer select(EditorCell cell) {
        return cell.getY();
      }
    }));
    myPseudoLinesY = SetSequence.fromSet(yCoordinatesSet).sort(new ISelector<Integer, Comparable<?>>() {
      public Comparable<?> select(Integer y) {
        return y;
      }
    }, true).toListSequence();
    myPseudoLinesToFileLines = ListSequence.fromList(new ArrayList<Integer>());
    ListSequence.fromList(myPseudoLinesY).visitAll(new IVisitor<Integer>() {
      public void visit(Integer t) {
        ListSequence.fromList(myPseudoLinesToFileLines).addElement(-1);
      }
    });
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (int fileLine = 0; fileLine < ListSequence.fromList(myFileLineToContent).count(); fileLine++) {
          for (int pseudoLine : Sequence.fromIterable(getPseudoLinesForContent(component, ListSequence.fromList(myFileLineToContent).getElement(fileLine)))) {
            int currentFileLine = ListSequence.fromList(myPseudoLinesToFileLines).getElement(pseudoLine);
            ListSequence.fromList(myPseudoLinesToFileLines).setElement(pseudoLine, getFileLineWithMaxRevision(currentFileLine, fileLine));
          }
        }
      }
    });
    for (AnnotationAspectSubcolumn aspectSubcolumn : ListSequence.fromList(myAspectSubcolumns)) {
      aspectSubcolumn.computeWidth(component.getGraphics().getFontMetrics(myFont), myPseudoLinesToFileLines);
    }
  }

  @Override
  public String getTooltipText(MouseEvent event) {
    int fileLine = findFileLineByY(event.getY());
    if (fileLine != -1) {
      return myFileAnnotation.getToolTip(fileLine);
    }
    return null;
  }

  @Nullable
  @Override
  public Cursor getCursor(MouseEvent event, EditorComponent component) {
    return new Cursor(Cursor.HAND_CURSOR);
  }

  @Override
  public void mousePressed(MouseEvent event, EditorComponent component) {
    if (event.getButton() == MouseEvent.BUTTON1 && event.getID() == MouseEvent.MOUSE_RELEASED) {
      event.consume();
      int fileLine = findFileLineByY(event.getY());
      ((LineAnnotationAspectAdapter) myFileAnnotation.getAspects()[0]).doAction(fileLine);
    } else {
      super.mousePressed(event, component);
    }
  }

  @Override
  protected void onClose() {
    myFileAnnotation.dispose();
    ChangesManager.getInstance(myVcs.getProject()).getModelChangesManager(myModelDescriptor).removeChangeListener(myChangeListener);
    AnnotationManager.getInstance(myVcs.getProject()).removeColumn(this);
  }

  private int findPseudoLineByY(int y) {
    int pseudoLine = Collections.binarySearch(myPseudoLinesY, y);
    if (pseudoLine < 0) {
      pseudoLine = -pseudoLine - 2;
    }
    if (pseudoLine < 0 || pseudoLine >= ListSequence.fromList(myPseudoLinesToFileLines).count()) {
      return -1;
    }
    return pseudoLine;
  }

  private int findFileLineByY(int y) {
    int pseudoLine = findPseudoLineByY(y);
    if (pseudoLine != -1) {
      return ListSequence.fromList(myPseudoLinesToFileLines).getElement(pseudoLine);
    }
    return -1;
  }

  @Override
  public JPopupMenu getPopupMenu(MouseEvent event) {
    JPopupMenu menu = new JPopupMenu();
    final int fileLine = findFileLineByY(event.getY());
    menu.add(new AnnotationColumn.ShowDiffFromAnnotationAction(fileLine));
    menu.add(new AbstractAction("Copy revision number") {
      public void actionPerformed(ActionEvent e) {
        String asString = myFileAnnotation.getLineRevisionNumber(fileLine).asString();
        CopyPasteManager.getInstance().setContents(new TextTransferrable(asString, asString));
      }
    });
    return menu;
  }

  private int getFileLineWithMaxRevision(int a, int b) {
    if (b == -1) {
      return a;
    }
    if (a == -1) {
      return b;
    }
    VcsRevisionNumber aRevision = myFileAnnotation.getLineRevisionNumber(a);
    VcsRevisionNumber bRevision = myFileAnnotation.getLineRevisionNumber(b);
    if (bRevision == null) {
      return a;
    }
    if (aRevision == null) {
      return b;
    }
    int c = aRevision.compareTo(bRevision);
    if (c < 0) {
      return b;
    }
    return a;
  }

  private static SNodeId check_5mnya_a0b0e0a(LineContent p) {
    if (null == p) {
      return null;
    }
    return p.getNodeId();
  }

  private static FilePath check_5mnya_a0a2a2a0a0a0a1a1a0b(Pair<CommittedChangeList, FilePath> p) {
    if (null == p) {
      return null;
    }
    return p.getSecond();
  }

  private static FilePath check_5mnya_a0a0c0c0a0a0a0b0b0a1(Pair<CommittedChangeList, FilePath> p) {
    if (null == p) {
      return null;
    }
    return p.getSecond();
  }

  private static CommittedChangeList check_5mnya_a0d0c0a0a0a0b0b0a1(Pair<CommittedChangeList, FilePath> p) {
    if (null == p) {
      return null;
    }
    return p.getFirst();
  }

  private static SNodeId check_5mnya_a0a0a91a8a2a0a0a0a1a1a0b(LineContent p) {
    if (null == p) {
      return null;
    }
    return p.getNodeId();
  }

  private class MyChangeListener implements ChangeListener {
    public MyChangeListener() {
    }

    public void changeUpdateFinished() {
      synchronized (myCurrentPseudoLinesLock) {
        myCurrentPseudoLines = null;
      }
    }

    public void changeUpdateStarted() {
      synchronized (myCurrentPseudoLinesLock) {
        myCurrentPseudoLines = null;
      }
    }

    public void fileStatusChanged(@Nullable FileStatus newFileStatus, @NotNull SModel model) {
    }

    public void changeRemoved(@NotNull Change change, @NotNull SModel model) {
      MapSequence.fromMap(myChangesToLineContents).removeKey(change);
    }

    public void changeAdded(@NotNull Change change, @NotNull SModel model) {
      saveChange(change);
    }
  }

  private class ShowDiffFromAnnotationAction extends AbstractAction {
    private int myFileLine;

    public ShowDiffFromAnnotationAction(int fileLine) {
      super("Show Diff");
      myFileLine = fileLine;
    }

    public void actionPerformed(ActionEvent e) {
      final VcsRevisionNumber revisionNumber = myFileAnnotation.getLineRevisionNumber(myFileLine);
      if (revisionNumber != null) {
        final Project project = myVcs.getProject();
        ProgressManager.getInstance().run(new Task.Backgroundable(project, "Loading revision " + revisionNumber.asString() + " contents", true, BackgroundFromStartOption.getInstance()) {
          public void run(@NotNull ProgressIndicator pi) {
            CommittedChangesProvider provider = myVcs.getCommittedChangesProvider();

            try {
              Pair<CommittedChangeList, FilePath> pair = null;
              if (provider != null) {
                pair = provider.getOneList(myModelVirtualFile, revisionNumber);
              }
              FilePath targetPath = (check_5mnya_a0a0c0c0a0a0a0b0b0a1(pair) == null ?
                new FilePathImpl(myModelVirtualFile) :
                check_5mnya_a0a2a2a0a0a0a1a1a0b(pair)
              );
              CommittedChangeList cl = check_5mnya_a0d0c0a0a0a0b0b0a1(pair);
              if (cl == null) {
                VcsBalloonProblemNotifier.showOverChangesView(project, "Cannot load data for showing diff", MessageType.ERROR);
                return;
              }
              List<com.intellij.openapi.vcs.changes.Change> changes = Sequence.fromIterable(((Iterable<com.intellij.openapi.vcs.changes.Change>) cl.getChanges())).sort(new ISelector<com.intellij.openapi.vcs.changes.Change, Comparable<?>>() {
                public Comparable<?> select(com.intellij.openapi.vcs.changes.Change c) {
                  return ChangesUtil.getFilePath(c).getName().toLowerCase();
                }
              }, true).toListSequence();
              final File ioFile = targetPath.getIOFile();
              com.intellij.openapi.vcs.changes.Change change = ListSequence.fromList(changes).findFirst(new IWhereFilter<com.intellij.openapi.vcs.changes.Change>() {
                public boolean accept(com.intellij.openapi.vcs.changes.Change c) {
                  return c.getAfterRevision() != null && c.getAfterRevision().getFile().getIOFile().equals(ioFile);
                }
              });
              if (change != null) {
                final String name = ioFile.getName();
                change = ListSequence.fromList(changes).findFirst(new IWhereFilter<com.intellij.openapi.vcs.changes.Change>() {
                  public boolean accept(com.intellij.openapi.vcs.changes.Change c) {
                    return c.getAfterRevision() != null && c.getAfterRevision().getFile().getName().equals(name);
                  }
                });

                ContentRevision before = change.getBeforeRevision();
                ContentRevision after = change.getAfterRevision();

                if (pi.isCanceled()) {
                  return;
                }
                pi.setText("Loading model before change");

                final Wrappers._T<SModel> beforeModel = new Wrappers._T<SModel>();
                if (before == null) {
                  beforeModel.value = new SModel(myModelDescriptor.getSModelReference());
                } else {
                  beforeModel.value = VcsActionsHelper.loadModel(before.getContent(), myModelDescriptor);
                }

                if (pi.isCanceled()) {
                  return;
                }

                pi.setText("Loading model after change");
                assert after != null;
                final SModel afterModel = VcsActionsHelper.loadModel(after.getContent(), myModelDescriptor);

                final Wrappers._T<SNode> node = new Wrappers._T<SNode>();
                ModelAccess.instance().runReadAction(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<SNode>() {
                  public SNode invoke() {
                    SNodeId nodeId = check_5mnya_a0a0a91a8a2a0a0a0a1a1a0b(ListSequence.fromList(myFileLineToContent).getElement(myFileLine));
                    node.value = afterModel.getNodeById(nodeId);
                    if ((node.value == null)) {
                      node.value = beforeModel.value.getNodeById(nodeId);
                    }
                    return node.value = SNodeOperations.getContainingRoot(node.value);

                  }
                }));

                final JFrame frame = WindowManager.getInstance().getFrame(project);
                final ModuleContext operationContext = new ModuleContext(myModelDescriptor.getModule(), project);
                final String beforeRevNumber = (before == null ?
                  "<no revision>" :
                  before.getRevisionNumber().asString()
                );
                final String afterRevNumber = after.getRevisionNumber().asString();
                if (node.value == null) {
                  ModelAccess.instance().runReadInEDT(new Runnable() {
                    public void run() {
                      final ModelDifferenceDialog dialog = new ModelDifferenceDialog(operationContext, frame, beforeModel.value, afterModel, "Model Difference", false, new String[]{beforeRevNumber, afterRevNumber});
                      ApplicationManager.getApplication().invokeLater(new Runnable() {
                        public void run() {
                          dialog.showDialog();
                        }
                      });
                    }
                  });

                } else {
                  ModelAccess.instance().runReadInEDT(new Runnable() {
                    public void run() {
                      final RootDifferenceDialog dialog = new RootDifferenceDialog(frame, afterModel, beforeModel.value, false, false);
                      dialog.init(operationContext, node.value, afterRevNumber, beforeRevNumber);
                      ApplicationManager.getApplication().invokeLater(new Runnable() {
                        public void run() {
                          dialog.showDialog();
                        }
                      });
                    }
                  });
                }
              }
            } catch (final VcsException ve) {
              ApplicationManager.getApplication().invokeLater(new Runnable() {
                public void run() {
                  VcsBalloonProblemNotifier.showOverChangesView(project, "Cannot show diff: " + ve.getMessage(), MessageType.ERROR);
                }
              });
            }
          }
        });
      }
    }
  }
}
