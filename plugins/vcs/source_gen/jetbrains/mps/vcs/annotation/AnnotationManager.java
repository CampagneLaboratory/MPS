/*
 * Copyright 2003-2010 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.vcs.annotation;

/*Generated by MPS */

import com.intellij.openapi.components.AbstractProjectComponent;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import java.util.Map;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.vfs.IFile;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import com.intellij.openapi.vcs.AbstractVcs;
import com.intellij.openapi.vcs.annotate.AnnotationProvider;
import com.intellij.openapi.vcs.annotate.FileAnnotation;
import com.intellij.openapi.vcs.VcsException;
import java.util.List;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.persistence.def.LineToIdMapper;

public class AnnotationManager extends AbstractProjectComponent {
  protected static Log log = LogFactory.getLog(AnnotationManager.class);

  private ProjectLevelVcsManager myProjectLevelVcsManager;
  private Map<EditorComponent, AnnotationColumn> myEditorToColumn = MapSequence.fromMap(new HashMap<EditorComponent, AnnotationColumn>());

  public AnnotationManager(Project project, ProjectLevelVcsManager projectLevelVcsManager) {
    super(project);
    myProjectLevelVcsManager = projectLevelVcsManager;
  }

  @Override
  public void disposeComponent() {
  }

  @Override
  public void initComponent() {
  }

  public boolean annotate(EditorComponent editorComponent, boolean dryRun) {
    if (MapSequence.fromMap(myEditorToColumn).containsKey(editorComponent)) {
      if (!(dryRun)) {
        editorComponent.getLeftEditorHighlighter().removeTextColumn(MapSequence.fromMap(myEditorToColumn).get(editorComponent));
        MapSequence.fromMap(myEditorToColumn).removeKey(editorComponent);
      }
      return true;
    }
    SNode root = editorComponent.getEditedNode();
    SModel model = root.getModel();
    SModelDescriptor modelDescriptor = model.getModelDescriptor();
    if (!((modelDescriptor instanceof EditableSModelDescriptor))) {
      return false;
    }
    IFile modelFile = ((EditableSModelDescriptor) modelDescriptor).getModelFile();
    if (modelFile == null) {
      return false;
    }
    final VirtualFile file = VirtualFileUtils.getVirtualFile(modelFile);
    final AbstractVcs vcs = myProjectLevelVcsManager.getVcsFor(file);
    if (vcs == null) {
      return false;
    }
    final AnnotationProvider annotationProvider = vcs.getAnnotationProvider();
    if (annotationProvider == null) {
      return false;
    }

    if (dryRun) {
      return true;
    }
    FileAnnotation fileAnnotation;
    try {
      fileAnnotation = annotationProvider.annotate(file);
    } catch (VcsException ex) {
      if (log.isErrorEnabled()) {
        log.error("", ex);
      }
      // todo show error 
      return false;
    }
    List<SNodeId> lineToId = LineToIdMapper.getLineNumberToNodeIdMap(fileAnnotation.getAnnotatedContent());
    MapSequence.fromMap(myEditorToColumn).put(editorComponent, new AnnotationColumn(root, fileAnnotation, lineToId, vcs, file));
    editorComponent.getLeftEditorHighlighter().addTextColumn(MapSequence.fromMap(myEditorToColumn).get(editorComponent));
    return true;
  }

  public static AnnotationManager getInstance(Project project) {
    return project.getComponent(AnnotationManager.class);
  }
}
