package jetbrains.mps.vcs.annotation;

/*Generated by MPS */

import com.intellij.openapi.components.AbstractProjectComponent;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import java.util.Map;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.vfs.IFile;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import com.intellij.openapi.vcs.AbstractVcs;
import com.intellij.openapi.vcs.FileStatus;
import com.intellij.openapi.vcs.FileStatusManager;
import jetbrains.mps.vcs.changesmanager.ChangesManager;
import jetbrains.mps.smodel.SNodePointer;
import com.intellij.openapi.vcs.annotate.AnnotationProvider;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.vcs.changes.BackgroundFromStartOption;
import com.intellij.openapi.vcs.annotate.FileAnnotation;
import com.intellij.openapi.vcs.VcsException;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import com.intellij.openapi.vcs.AbstractVcsHelper;
import java.util.Arrays;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.progress.ProgressManager;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IMapping;

public class AnnotationManager extends AbstractProjectComponent {
  private ProjectLevelVcsManager myProjectLevelVcsManager;
  private Map<EditorComponent, AnnotationColumn> myEditorToColumn = MapSequence.fromMap(new HashMap<EditorComponent, AnnotationColumn>());

  public AnnotationManager(Project project, ProjectLevelVcsManager projectLevelVcsManager) {
    super(project);
    myProjectLevelVcsManager = projectLevelVcsManager;
  }

  public void annotate(EditorComponent editorComponent) {
    annotate(editorComponent, false);
  }

  public boolean isAnnotateable(EditorComponent editorComponent) {
    return annotate(editorComponent, true);
  }

  private boolean annotate(final EditorComponent editorComponent, boolean dryRun) {
    if (MapSequence.fromMap(myEditorToColumn).containsKey(editorComponent)) {
      if (!(dryRun)) {
        editorComponent.getLeftEditorHighlighter().removeTextColumn(MapSequence.fromMap(myEditorToColumn).get(editorComponent));
        MapSequence.fromMap(myEditorToColumn).removeKey(editorComponent);
      }
      return true;
    }
    final SNode root = editorComponent.getEditedNode();
    SModel model = root.getModel();
    SModelDescriptor modelDescriptor = model.getModelDescriptor();
    if (!((modelDescriptor instanceof EditableSModelDescriptor))) {
      return false;
    }
    IFile modelFile = ((EditableSModelDescriptor) modelDescriptor).getModelFile();
    if (modelFile == null) {
      return false;
    }
    final VirtualFile file = VirtualFileUtils.getVirtualFile(modelFile);
    final AbstractVcs vcs = myProjectLevelVcsManager.getVcsFor(file);
    if (vcs == null) {
      return false;
    }
    FileStatus fileStatus = FileStatusManager.getInstance(myProject).getStatus(file);
    if (fileStatus == FileStatus.UNKNOWN || fileStatus == FileStatus.ADDED || fileStatus == FileStatus.IGNORED) {
      return false;
    }
    if (ChangesManager.getInstance(myProject).getModelChangesManager(model).isAddedNode(new SNodePointer(root))) {
      return false;
    }
    final AnnotationProvider annotationProvider = vcs.getAnnotationProvider();
    if (annotationProvider == null) {
      return false;
    }

    if (dryRun) {
      return true;
    }
    Task.Backgroundable annotateTask = new Task.Backgroundable(myProject, "Retrieving annotations", true, BackgroundFromStartOption.getInstance()) {
      private FileAnnotation myFileAnnotation;
      private VcsException myException;

      public void run(@NotNull ProgressIndicator indicator) {
        try {
          myFileAnnotation = annotationProvider.annotate(file);
        } catch (VcsException e) {
          myException = e;
        }
      }

      @Override
      public void onCancel() {
        onSuccess();
      }

      @Override
      public void onSuccess() {
        if (myException != null) {
          AbstractVcsHelper.getInstance(myProject).showErrors(Arrays.asList(myException), "Exception on retrieving annotation");
        }

        if (myFileAnnotation != null) {
          ModelAccess.instance().runReadAction(new Runnable() {
            public void run() {
              MapSequence.fromMap(myEditorToColumn).put(editorComponent, new AnnotationColumn(root, myFileAnnotation, vcs, file));
              editorComponent.getLeftEditorHighlighter().addTextColumn(MapSequence.fromMap(myEditorToColumn).get(editorComponent));
            }
          });
        }
      }
    };
    ProgressManager.getInstance().run(annotateTask);
    return true;
  }

  public void reannotate(AnnotationColumn column) {
    final EditorComponent editorComponent = findEditorForColumn(column);
    editorComponent.getLeftEditorHighlighter().removeTextColumn(column);
    column.dispose();
    MapSequence.fromMap(myEditorToColumn).removeKey(editorComponent);
    ModelAccess.instance().runReadInEDT(new Runnable() {
      public void run() {
        annotate(editorComponent);
      }
    });
  }

  public void removeColumn(AnnotationColumn column) {
    MapSequence.fromMap(myEditorToColumn).removeKey(findEditorForColumn(column));
  }

  private EditorComponent findEditorForColumn(final AnnotationColumn column) {
    return MapSequence.fromMap(myEditorToColumn).findFirst(new IWhereFilter<IMapping<EditorComponent, AnnotationColumn>>() {
      public boolean accept(IMapping<EditorComponent, AnnotationColumn> m) {
        return m.value() == column;
      }
    }).key();
  }

  public static AnnotationManager getInstance(Project project) {
    return project.getComponent(AnnotationManager.class);
  }
}
