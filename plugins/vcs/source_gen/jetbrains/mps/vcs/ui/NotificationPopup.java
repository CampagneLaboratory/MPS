package jetbrains.mps.vcs.ui;

/*Generated by MPS */

import com.intellij.openapi.wm.IdeFrame;
import javax.swing.JComponent;
import java.awt.Color;
import com.intellij.openapi.wm.impl.IdeFrameImpl;
import com.intellij.ui.popup.FramelessNotificationPopup;
import com.intellij.openapi.ui.popup.JBPopupListener;
import com.intellij.ui.components.panels.Wrapper;
import com.intellij.ui.components.panels.NonOpaquePanel;
import java.awt.Dimension;
import com.intellij.openapi.ui.popup.Balloon;
import com.intellij.openapi.ui.popup.JBPopupFactory;

public class NotificationPopup {
  private final NotificationPopup.PopupDecorator myPopupDecorator;

  public NotificationPopup(IdeFrame frame, JComponent owner, JComponent content, Color backgroud) {
    IdeFrameImpl frameImpl = null;
    if (frame instanceof IdeFrameImpl) {
      frameImpl = (IdeFrameImpl) frame;
    }
    if (frameImpl == null || !(frameImpl.isShowing())) {
      final FramelessNotificationPopup popup = new FramelessNotificationPopup(owner, content, backgroud, true, null);
      myPopupDecorator = new NotificationPopup.PopupDecorator() {
        public void addListener(JBPopupListener listener) {
          popup.getPopup().addListener(listener);
        }

        public void hide() {
          popup.getPopup().cancel();
        }
      };
    } else {
      final Wrapper wrapper = new NonOpaquePanel(content) {
        @Override
        public Dimension getPreferredSize() {
          final Dimension size = super.getPreferredSize();
          if (size.width > 400 || size.height > 200) {
            size.width = 400;
            size.height = 200;
          }
          return size;
        }
      };
      final Balloon balloon = JBPopupFactory.getInstance().createBalloonBuilder(wrapper).setFadeoutTime(5000).setHideOnClickOutside(false).setHideOnFrameResize(false).setHideOnKeyOutside(false).setCloseButtonEnabled(true).setFillColor(backgroud).setShowCallout(false).setClickHandler(null, false).createBalloon();
      frameImpl.getBalloonLayout().add(balloon);
      myPopupDecorator = new NotificationPopup.PopupDecorator() {
        public void addListener(JBPopupListener listener) {
          balloon.addListener(listener);
        }

        public void hide() {
          balloon.hide();
        }
      };
    }
  }

  public void addListener(JBPopupListener listener) {
    myPopupDecorator.addListener(listener);
  }

  public void hide() {
    myPopupDecorator.hide();
  }

  /*package*/ static interface PopupDecorator {
    public void addListener(JBPopupListener listener);
    public void hide();
  }
}
