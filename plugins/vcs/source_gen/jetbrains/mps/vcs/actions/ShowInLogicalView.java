package jetbrains.mps.vcs.actions;

/*Generated by MPS */

import com.intellij.openapi.vcs.actions.AbstractVcsAction;
import com.intellij.openapi.vcs.actions.VcsContext;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.projectPane.ProjectPane;
import jetbrains.mps.fileTypes.MPSFileTypesManager;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.SModelFileTracker;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.ModuleFileTracker;
import com.intellij.openapi.actionSystem.Presentation;

public class ShowInLogicalView extends AbstractVcsAction {
  public ShowInLogicalView() {
  }
  @Override
  protected void actionPerformed(VcsContext e) {
    final Project project = e.getProject();
    final VirtualFile selectedFile = getSelectedFile(e);
    if (selectedFile == null) {
      return;
    }
    assert project != null;
    ProjectPane projectPane = ProjectPane.getInstance(project);
    if (MPSFileTypesManager.instance().isModelFile(selectedFile)) {
      SModel model = ModelAccess.instance().runReadAction(new Computable<SModel>() {
        @Override
        public SModel compute() {
          return SModelFileTracker.getInstance().findModel(VirtualFileUtils.toIFile(selectedFile));
        }
      });
      if (model != null) {
        projectPane.selectModel(model, false);
      }
    } else
    if (MPSFileTypesManager.instance().isModuleFile(selectedFile)) {
      SModule module = ModelAccess.instance().runReadAction(new Computable<SModule>() {
        @Override
        public SModule compute() {
          return ModuleFileTracker.getInstance().getModuleByFile(VirtualFileUtils.toIFile(selectedFile));
        }
      });
      if (module != null) {
        projectPane.selectModule(module, true);
      }
    }
  }
  private VirtualFile getSelectedFile(VcsContext e) {
    VirtualFile[] selectedFiles = e.getSelectedFiles();
    if (selectedFiles.length == 0) {
      return null;
    }
    return selectedFiles[0];
  }
  @Override
  protected void update(VcsContext vcsContext, Presentation presentation) {
    VirtualFile selectedFile = getSelectedFile(vcsContext);
    presentation.setEnabled(MPSFileTypesManager.instance().isModelFile(selectedFile) || MPSFileTypesManager.instance().isModuleFile(selectedFile));
  }
}
