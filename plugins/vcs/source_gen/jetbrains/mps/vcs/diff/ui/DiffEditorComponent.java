package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.EditorMessageOwner;
import jetbrains.mps.nodeEditor.inspector.InspectorEditorComponent;
import java.util.Map;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import java.util.List;
import jetbrains.mps.smodel.event.SModelEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.util.Computable;
import jetbrains.mps.smodel.SNodeId;
import java.awt.Point;
import java.awt.Rectangle;
import jetbrains.mps.nodeEditor.NodeHighlightManager;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class DiffEditorComponent extends EditorComponent implements EditorMessageOwner {
  private InspectorEditorComponent myInspector;
  private Map<ModelChange, ChangeEditorMessage> myChangeToMessage = MapSequence.fromMap(new HashMap<ModelChange, ChangeEditorMessage>());

  public DiffEditorComponent(IOperationContext context, SNode node) {
    super(context);
    myInspector = new InspectorEditorComponent();
    myInspector.setReadOnly(true);
    editNode(node, context);
  }

  public void inspect(SNode node) {
    myInspector.inspectNode(node, getOperationContext());
  }

  public EditorCell createRootCell() {
    return createRootCell(null);
  }

  public InspectorEditorComponent getInspector() {
    return myInspector;
  }

  public EditorCell createRootCell(List<SModelEvent> events) {
    if (getEditedNode() == null || getEditedNode().isDeleted()) {
      EditorContext editorContext = getEditorContext();
      return new EditorCell_Constant(editorContext, getEditedNode(), "");
    }
    return getEditorContext().createRootCell(getEditedNode(), events);
  }

  @Override
  public void editNode(final SNode node, IOperationContext operationContext) {
    super.editNode(node, operationContext);
    setReadOnly(ModelAccess.instance().runReadAction(new Computable<Boolean>() {
      public Boolean compute() {
        return node != null && node.getModel().isNotEditable();
      }
    }));
  }

  public SNode getFirstVisibleNode() {
    return getFirstVisibleNode(getEditedNode());
  }

  private SNode getFirstVisibleNode(SNode node) {
    EditorCell cell = findNodeCell(node);
    if (cell == null) {
      return null;
    }
    if (cell.getY() > getViewport().getViewPosition().y) {
      return node;
    }
    SNode result = null;
    int resultY = Integer.MAX_VALUE;
    for (SNode child : node.getChildrenIterable()) {
      SNode visibleForChild = getFirstVisibleNode(child);
      if (visibleForChild != null) {
        int thisY = findNodeCell(visibleForChild).getY();
        if (thisY < resultY) {
          resultY = thisY;
          result = visibleForChild;
        }
      }
    }
    return result;
  }

  public void synchronizeViewWith(final DiffEditorComponent otherComponent) {
    if (this == otherComponent) {
      return;
    }
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SNode visibleNode = getFirstVisibleNode();
        if (visibleNode != null) {
          SNodeId id = visibleNode.getSNodeId();
          int newRelativePos = getViewport().getViewPosition().y - findNodeCell(visibleNode).getY();
          SNode sNode = otherComponent.getEditedNode();
          if (sNode == null) {
            return;
          }
          SNode nodeById = sNode.getModel().getNodeById(id);
          EditorCell oldCell = otherComponent.findNodeCell(nodeById);
          Point position = getViewport().getViewPosition();
          if (oldCell != null) {
            otherComponent.getViewport().setViewPosition(new Point((int) position.getX(), newRelativePos + oldCell.getY()));
            Rectangle viewRect = otherComponent.getViewport().getViewRect();
            if (viewRect.y + viewRect.height > otherComponent.getHeight()) {
              otherComponent.getViewport().setViewPosition(new Point(viewRect.x, otherComponent.getHeight() - viewRect.height));
            }
          }
        }
      }
    });
  }

  public void highlightChange(ChangeEditorMessage message) {
    if (message.getNode() == null) {
      return;
    }
    MapSequence.fromMap(myChangeToMessage).put(message.getChange(), message);
    getHighlightManager().mark(message);
  }

  public ChangeEditorMessage getMessageForChange(ModelChange change) {
    return MapSequence.fromMap(myChangeToMessage).get(change);
  }

  public void unhighlightAllChanges() {
    final NodeHighlightManager hm = getHighlightManager();
    Sequence.fromIterable(MapSequence.fromMap(myChangeToMessage).values()).visitAll(new IVisitor<ChangeEditorMessage>() {
      public void visit(ChangeEditorMessage m) {
        hm.unmark(m);
      }
    });
    MapSequence.fromMap(myChangeToMessage).clear();
  }
}
