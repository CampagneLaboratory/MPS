package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.vcs.diff.changes.ChangeSet;
import java.util.Map;
import jetbrains.mps.smodel.SNodeId;
import java.util.List;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import jetbrains.mps.smodel.SModel;
import com.intellij.openapi.wm.WindowManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.vcs.diff.changes.ChangeSetBuilder;
import javax.swing.JScrollPane;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import javax.swing.JComponent;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.dialogs.DialogDimensionsSettings;
import jetbrains.mps.workbench.action.BaseAction;
import java.util.Arrays;
import jetbrains.mps.vcs.diff.changes.ChangeType;
import jetbrains.mps.vcs.diff.changes.AddRootChange;
import jetbrains.mps.vcs.diff.changes.DeleteRootChange;

public class ModelDifferenceDialog extends BaseDialog {
  private Project myProject;
  private IOperationContext myOperationContext;
  private ChangeSet myChangeSet;
  private Map<SNodeId, List<ModelChange>> myRootToChange = MapSequence.fromMap(new HashMap<SNodeId, List<ModelChange>>());
  private ModelDifferenceDialog.ModelDifferenceTree myTree;
  private JPanel myPanel = new JPanel(new BorderLayout());
  private boolean myRootsDialogInvoked = false;
  private String[] myContentTitles;

  public ModelDifferenceDialog(Project project, IOperationContext operationContext, SModel oldModel, SModel newModel, String[] contentTitles) {
    super(WindowManager.getInstance().getFrame(project), "Difference for model: " + SModelOperations.getModelName(newModel));
    assert contentTitles.length == 2;
    myContentTitles = contentTitles;
    myProject = project;
    myOperationContext = operationContext;
    myChangeSet = ChangeSetBuilder.buildChangeSet(oldModel, newModel, true);
    fillRootToChange();
    myTree = new ModelDifferenceDialog.ModelDifferenceTree();

    myPanel.add(new JScrollPane(myTree), BorderLayout.CENTER);
  }

  private void fillRootToChange() {
    MapSequence.fromMap(myRootToChange).clear();
    for (ModelChange c : ListSequence.fromList(myChangeSet.getModelChanges())) {
      if (!(MapSequence.fromMap(myRootToChange).containsKey(c.getRootId()))) {
        MapSequence.fromMap(myRootToChange).put(c.getRootId(), ListSequence.fromList(new ArrayList<ModelChange>()));
      }
      ListSequence.fromList(MapSequence.fromMap(myRootToChange).get(c.getRootId())).addElement(c);
    }
  }

  /*package*/ void rebuildChangeSet() {
    ChangeSetBuilder.rebuildChangeSet(myChangeSet);
    fillRootToChange();
    myTree.rebuildLater();
  }

  protected JComponent getMainComponent() {
    return myPanel;
  }

  public ChangeSet getChangeSet() {
    return myChangeSet;
  }

  public String[] getContentTitles() {
    return myContentTitles;
  }

  /*package*/ IOperationContext getOperationContext() {
    return myOperationContext;
  }

  public void invokeRootDifference(final SNodeId rootId) {
    if (myRootsDialogInvoked) {
      return;
    }
    myRootsDialogInvoked = true;
    final Wrappers._T<RootDifferenceDialog> rootDialog = new Wrappers._T<RootDifferenceDialog>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        rootDialog.value = new RootDifferenceDialog(ModelDifferenceDialog.this, rootId, myTree.getNameForRoot(rootId));
      }
    });
    rootDialog.value.showDialog();
    rootDialog.value.toFront();
  }

  /*package*/ void rootDialogClosed() {
    myRootsDialogInvoked = false;
  }

  public List<ModelChange> getChangesForRoot(SNodeId rootId) {
    return MapSequence.fromMap(myRootToChange).get(rootId);
  }

  @Override
  public DialogDimensionsSettings.DialogDimensions getDefaultDimensionSettings() {
    return new DialogDimensionsSettings.DialogDimensions(10, 10, 500, 700);
  }

  public static boolean isNewDiffEnabled() {
    return "true".equals(System.getProperty("mps.newdiff"));
  }

  private class ModelDifferenceTree extends DiffModelTree {
    private ModelDifferenceTree() {
      super(myOperationContext);
    }

    protected Iterable<BaseAction> getRootActions(SNodeId rootId) {
      return Arrays.<BaseAction>asList(new InvokeRootDifferenceAction(ModelDifferenceDialog.this, rootId));
    }

    protected void updateRootCustomPresentation(DiffModelTree.RootTreeNode rootTreeNode) {
      ModelChange firstChange = ListSequence.fromList(MapSequence.fromMap(myRootToChange).get(rootTreeNode.getRootId())).first();
      ChangeType compositeChangeType = ChangeType.CHANGE;
      if (firstChange instanceof AddRootChange || firstChange instanceof DeleteRootChange) {
        compositeChangeType = firstChange.getType();
      }
      rootTreeNode.setColor(compositeChangeType.getTreeColor());
    }

    protected Iterable<SModel> getModels() {
      return Arrays.asList(myChangeSet.getNewModel(), myChangeSet.getOldModel());
    }

    protected Iterable<SNodeId> getAffectedRoots() {
      return MapSequence.fromMap(myRootToChange).keySet();
    }
  }
}
