package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.vcs.diff.changes.ChangeSet;
import java.util.Map;
import jetbrains.mps.smodel.SNodeId;
import java.util.List;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import jetbrains.mps.smodel.SModel;
import com.intellij.openapi.wm.WindowManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.vcs.diff.changes.ChangeSetBuilder;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import javax.swing.JScrollPane;
import javax.swing.JComponent;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ide.dialogs.DialogDimensionsSettings;
import jetbrains.mps.ide.ui.MPSTree;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import javax.swing.JPopupMenu;
import jetbrains.mps.ide.projectPane.Icons;
import javax.swing.Icon;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.icons.IconManager;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.vcs.diff.changes.AddRootChange;
import jetbrains.mps.vcs.diff.changes.ChangeType;
import jetbrains.mps.vcs.diff.changes.DeleteRootChange;
import com.intellij.openapi.actionSystem.ActionGroup;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.action.ActionUtils;

public class ModelDifferenceDialog extends BaseDialog {
  private Project myProject;
  private IOperationContext myOperationContext;
  private ChangeSet myChangeSet;
  private Map<SNodeId, List<ModelChange>> myRootToChange = MapSequence.fromMap(new HashMap<SNodeId, List<ModelChange>>());
  private ModelDifferenceDialog.ModelDifferenceTree myTree;
  private JPanel myPanel = new JPanel(new BorderLayout());
  private boolean myRootsDialogInvoked = false;
  private String[] myContentTitles;

  public ModelDifferenceDialog(Project project, IOperationContext operationContext, SModel oldModel, SModel newModel, String[] contentTitles) {
    super(WindowManager.getInstance().getFrame(project), "Difference for model: " + SModelOperations.getModelName(newModel));
    assert contentTitles.length == 2;
    myContentTitles = contentTitles;
    myProject = project;
    myOperationContext = operationContext;
    myChangeSet = ChangeSetBuilder.buildChangeSet(oldModel, newModel, true);
    for (ModelChange c : ListSequence.fromList(myChangeSet.getModelChanges())) {
      if (!(MapSequence.fromMap(myRootToChange).containsKey(c.getRootId()))) {
        MapSequence.fromMap(myRootToChange).put(c.getRootId(), ListSequence.fromList(new ArrayList<ModelChange>()));
      }
      ListSequence.fromList(MapSequence.fromMap(myRootToChange).get(c.getRootId())).addElement(c);
    }
    myTree = new ModelDifferenceDialog.ModelDifferenceTree();

    myPanel.add(new JScrollPane(myTree), BorderLayout.CENTER);
  }

  protected JComponent getMainComponent() {
    return myPanel;
  }

  public ChangeSet getChangeSet() {
    return myChangeSet;
  }

  public String[] getContentTitles() {
    return myContentTitles;
  }

  /*package*/ IOperationContext getOperationContext() {
    return myOperationContext;
  }

  public void invokeRootDifference(final SNodeId rootId) {
    final ModelDifferenceDialog.RootTreeNode rootTreeNode = findRootTreeNode(rootId);
    assert rootTreeNode != null;
    if (myRootsDialogInvoked) {
      return;
    }
    myRootsDialogInvoked = true;
    final Wrappers._T<RootDifferenceDialog> rootDialog = new Wrappers._T<RootDifferenceDialog>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        rootDialog.value = new RootDifferenceDialog(ModelDifferenceDialog.this, rootId, rootTreeNode.myPresentations);
      }
    });
    rootDialog.value.showDialog();
    rootDialog.value.toFront();
  }

  /*package*/ void rootDialogClosed() {
    myRootsDialogInvoked = false;
  }

  private ModelDifferenceDialog.RootTreeNode findRootTreeNode(SNodeId rootId) {
    MPSTreeNode modelTreeNode = myTree.getRootNode();
    for (MPSTreeNode rootTreeNode : Sequence.fromIterable(modelTreeNode)) {
      if (rootId.equals(((ModelDifferenceDialog.RootTreeNode) rootTreeNode).myRootId)) {
        return ((ModelDifferenceDialog.RootTreeNode) rootTreeNode);
      }
    }
    return null;
  }

  public List<ModelChange> getChangesForRoot(SNodeId rootId) {
    return MapSequence.fromMap(myRootToChange).get(rootId);
  }

  @Override
  public DialogDimensionsSettings.DialogDimensions getDefaultDimensionSettings() {
    return new DialogDimensionsSettings.DialogDimensions(10, 10, 500, 700);
  }

  public static boolean isNewDiffEnabled() {
    return "true".equals(System.getProperty("mps.newdiff"));
  }

  private class ModelDifferenceTree extends MPSTree {
    public ModelDifferenceTree() {
      rebuildNow();
      expandAll();
    }

    protected MPSTreeNode rebuild() {
      final ModelDifferenceDialog.ModelTreeNode modelNode = new ModelDifferenceDialog.ModelTreeNode();
      SetSequence.fromSet(MapSequence.fromMap(myRootToChange).keySet()).<ModelDifferenceDialog.RootTreeNode>select(new ISelector<SNodeId, ModelDifferenceDialog.RootTreeNode>() {
        public ModelDifferenceDialog.RootTreeNode select(SNodeId r) {
          return new ModelDifferenceDialog.RootTreeNode(r);
        }
      }).sort(new ISelector<ModelDifferenceDialog.RootTreeNode, Comparable<?>>() {
        public Comparable<?> select(ModelDifferenceDialog.RootTreeNode rtn) {
          return rtn.myPresentations;
        }
      }, true).visitAll(new IVisitor<ModelDifferenceDialog.RootTreeNode>() {
        public void visit(ModelDifferenceDialog.RootTreeNode rtn) {
          modelNode.add(rtn);
        }
      });
      return modelNode;
    }

    @Override
    public void rebuildNow() {
      super.rebuildNow();
      expandAll();
    }

    @Override
    protected JPopupMenu createPopupMenu(MPSTreeNode node) {
      return null;
    }
  }

  private class ModelTreeNode extends MPSTreeNode {
    public ModelTreeNode() {
      super(myOperationContext);
      setNodeIdentifier("model");
    }

    @Override
    protected void doUpdatePresentation() {
      setText(myChangeSet.getNewModel().getLongName());
      setIcon(Icons.MODEL_ICON);
    }
  }

  private class RootTreeNode extends MPSTreeNode {
    private SNodeId myRootId;
    private String myPresentations;

    public RootTreeNode(SNodeId rootId) {
      super(myOperationContext);
      myRootId = rootId;
      setNodeIdentifier("" + myRootId);

      List<String> presentations = ListSequence.fromList(new ArrayList<String>());
      Icon icon = null;
      for (SModel model : Sequence.fromIterable(Sequence.fromArray(new SModel[]{myChangeSet.getNewModel(), myChangeSet.getOldModel()}))) {
        SNode root = model.getNodeById(myRootId);
        if (root != null) {
          String presentation = root.getPresentation();
          if (!(ListSequence.fromList(presentations).contains(presentation))) {
            ListSequence.fromList(presentations).addElement(presentation);
          }
          if (icon == null) {
            icon = IconManager.getIconFor(root);
          }
        }
      }
      myPresentations = StringUtils.join(presentations, " / ");
      setIcon(icon);
    }

    @Override
    protected void doUpdatePresentation() {
      List<ModelChange> changes = MapSequence.fromMap(myRootToChange).get(myRootId);

      if (ListSequence.fromList(changes).first() instanceof AddRootChange) {
        setColor(ChangeType.ADD.getTreeColor());
      } else if (ListSequence.fromList(changes).first() instanceof DeleteRootChange) {
        setColor(ChangeType.DELETE.getTreeColor());
      } else {
        setColor(ChangeType.CHANGE.getTreeColor());
      }

      List<String> presentations = ListSequence.fromList(new ArrayList<String>());
      Icon icon = null;
      for (SModel model : Sequence.fromIterable(Sequence.fromArray(new SModel[]{myChangeSet.getOldModel(), myChangeSet.getNewModel()}))) {
        SNode root = model.getNodeById(myRootId);
        if (root != null) {
          String presentation = root.getPresentation();
          if (!(ListSequence.fromList(presentations).contains(presentation))) {
            ListSequence.fromList(presentations).addElement(presentation);
          }
          if (icon == null) {
            icon = IconManager.getIconFor(root);
          }
        }
      }
      setText(myPresentations);
    }

    @Override
    public void doubleClick() {
      invokeRootDifference(myRootId);
    }

    @Override
    public ActionGroup getActionGroup() {
      BaseAction defaultAction = new BaseAction("Show Difference") {
        protected void doExecute(AnActionEvent e, Map<String, Object> m) {
          doubleClick();
        }
      };
      return ActionUtils.groupFromActions(defaultAction);
    }
  }
}
