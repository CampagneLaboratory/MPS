package jetbrains.mps.vcs.diff.ui.common;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.vcs.diff.ChangeSet;
import jetbrains.mps.nodeEditor.EditorComponent;
import java.util.List;
import jetbrains.mps.vcs.diff.changes.ModelChange;

public class DiffChangeGroupBuilder extends ChangeGroupBuilder {
  private DiffEditor myLeftEditor;
  private DiffEditor myRightEditor;

  public DiffChangeGroupBuilder(@Nullable ChangeEditorMessage.ConflictChecker conflictChecker, @NotNull ChangeSet changeSet, @NotNull DiffEditor leftEditor, @NotNull DiffEditor rightEditor, boolean inspector) {
    super(conflictChecker, changeSet, inspector);
    myLeftEditor = leftEditor;
    myRightEditor = rightEditor;
    if (inspector) {
      EditorComponent.RebuildListener rebuildListener = new EditorComponent.RebuildListener() {
        public void editorRebuilt(EditorComponent editor) {
          invalidate();
        }
      };
      myLeftEditor.getInspector().addRebuildListener(rebuildListener);
      myRightEditor.getInspector().addRebuildListener(rebuildListener);
    }
  }

  @NotNull
  public EditorComponent getLeftComponent() {
    return myLeftEditor.getEditorComponent(myInspector);
  }

  @NotNull
  public EditorComponent getRightComponent() {
    return myRightEditor.getEditorComponent(myInspector);
  }

  @NotNull
  protected List<ChangeEditorMessage> getLeftMessages(ModelChange change) {
    return myLeftEditor.getMessagesForChange(change);
  }

  @NotNull
  protected List<ChangeEditorMessage> getRightMessages(ModelChange change) {
    return myLeftEditor.getMessagesForChange(change);
  }
}
