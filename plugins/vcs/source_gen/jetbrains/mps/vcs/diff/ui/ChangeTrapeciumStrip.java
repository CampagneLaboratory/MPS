package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import javax.swing.JComponent;
import java.awt.Dimension;
import java.awt.Graphics;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.vcs.diff.changes.ChangeType;
import java.awt.Color;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

public class ChangeTrapeciumStrip extends JComponent {
  private static final int WIDTH = 30;

  private ChangeGroupBuilder myChangeGroupBuilder;

  public ChangeTrapeciumStrip(ChangeGroupBuilder changeGroupBuilder) {
    myChangeGroupBuilder = changeGroupBuilder;
    getLeftEditor().getViewport().addChangeListener(new ChangeTrapeciumStrip.MyViewportChangeListener());
    getRightEditor().getViewport().addChangeListener(new ChangeTrapeciumStrip.MyViewportChangeListener());
    setMinimumSize(new Dimension(WIDTH, 1));
    setPreferredSize(new Dimension(WIDTH, 1));
  }

  @Override
  protected void paintComponent(Graphics g) {
    int leftOffset = getOffset(getLeftEditor());
    int rightOffset = getOffset(getRightEditor());

    for (ChangeGroup group : ListSequence.fromList(myChangeGroupBuilder.getChangeGroups())) {
      int leftStart = group.getLeftStart() + leftOffset;
      int leftEnd = group.getLeftEnd() + leftOffset;
      int rightStart = group.getRightStart() + rightOffset;
      int rightEnd = group.getRightEnd() + rightOffset;

      int[] xx = new int[]{0, getWidth(), getWidth(), 0};
      int[] yy = new int[]{leftStart, rightStart, rightEnd, leftEnd};

      g.setColor((group.isConflicted() ?
        ChangeType.CONFLICT_COLOR :
        group.getChangeType().getColor()
      ));
      g.fillPolygon(xx, yy, 4);
      g.setColor(Color.GRAY);
      g.drawLine(0, leftStart, getWidth() - 1, rightStart);
      g.drawLine(0, leftEnd, getWidth() - 1, rightEnd);
    }
  }

  private DiffEditorComponent getLeftEditor() {
    return myChangeGroupBuilder.getLeftEditorComponent();
  }

  private DiffEditorComponent getRightEditor() {
    return myChangeGroupBuilder.getRightEditorComponent();
  }

  private static int getOffset(DiffEditorComponent editor) {
    return -editor.getViewport().getViewPosition().y + editor.getExternalComponent().getY();
  }

  private class MyViewportChangeListener implements ChangeListener {
    private MyViewportChangeListener() {
    }

    public void stateChanged(ChangeEvent event) {
      repaint();
    }
  }
}
