package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import javax.swing.JComponent;
import jetbrains.mps.vcs.diff.changes.ChangeSet;
import java.awt.Dimension;
import java.awt.Graphics;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.awt.Color;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

public class ChangeTrapeciumStrip extends JComponent {
  private static final int WIDTH = 30;

  private ChangeSet myChangeSet;
  private DiffEditorComponent myLeftEditorComponent;
  private DiffEditorComponent myRightEditorComponent;

  public ChangeTrapeciumStrip(ChangeSet changeSet, DiffEditorComponent leftEditorComponent, DiffEditorComponent rightEditorComponent) {
    myChangeSet = changeSet;
    myLeftEditorComponent = leftEditorComponent;
    myRightEditorComponent = rightEditorComponent;
    myLeftEditorComponent.getViewport().addChangeListener(new ChangeTrapeciumStrip.MyViewportChangeListener());
    myRightEditorComponent.getViewport().addChangeListener(new ChangeTrapeciumStrip.MyViewportChangeListener());
    setMinimumSize(new Dimension(WIDTH, 1));
    setPreferredSize(new Dimension(WIDTH, 1));
  }

  @Override
  protected void paintComponent(Graphics g) {
    for (ModelChange change : ListSequence.fromList(myChangeSet.getModelChanges())) {
      ChangeEditorMessage leftMessage = myLeftEditorComponent.getMessageForChange(change);
      ChangeEditorMessage rightMessage = myRightEditorComponent.getMessageForChange(change);

      assert leftMessage == null && rightMessage == null || leftMessage != null && rightMessage != null;
      if (leftMessage == null) {
        continue;
      }

      int leftStart = leftMessage.getStart(myLeftEditorComponent);
      int leftEnd = leftStart + leftMessage.getHeight(myLeftEditorComponent);
      int rightStart = rightMessage.getStart(myRightEditorComponent);
      int rightEnd = rightStart + rightMessage.getHeight(myRightEditorComponent);

      int leftOffset = -myLeftEditorComponent.getViewport().getViewPosition().y + myLeftEditorComponent.getExternalComponent().getY();
      int rightOffset = -myRightEditorComponent.getViewport().getViewPosition().y + myRightEditorComponent.getExternalComponent().getY();

      leftStart += leftOffset;
      leftEnd += leftOffset;
      rightStart += rightOffset;
      rightEnd += rightOffset;

      int[] xx = new int[]{0, getWidth(), getWidth(), 0};
      int[] yy = new int[]{leftStart, rightStart, rightEnd, leftEnd};
      g.setColor(leftMessage.getColor());
      g.fillPolygon(xx, yy, 4);
      g.setColor(Color.GRAY);
      g.drawLine(0, leftStart, getWidth() - 1, rightStart);
      g.drawLine(0, leftEnd, getWidth() - 1, rightEnd);
    }
  }

  private class MyViewportChangeListener implements ChangeListener {
    private MyViewportChangeListener() {
    }

    public void stateChanged(ChangeEvent event) {
      repaint();
    }
  }
}
