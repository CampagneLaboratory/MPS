package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.leftHighlighter.AbstractFoldingAreaPainter;
import javax.swing.Icon;
import java.util.Map;
import java.awt.Point;
import jetbrains.mps.nodeEditor.EditorComponent;
import java.awt.Graphics;
import java.awt.Color;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ide.projectPane.Icons;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.awt.event.MouseEvent;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import java.awt.Cursor;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.vcs.diff.MergeContext;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.awt.image.BufferedImage;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import javax.swing.ImageIcon;

public class MergeButtonsPainter extends AbstractFoldingAreaPainter {
  private static final int ICON_SIZE = 11;
  private static final int GAP = 3;
  private static final int LEFT_MARGIN = 5;
  private static final int WIDTH = GAP + ICON_SIZE + GAP + ICON_SIZE + GAP + LEFT_MARGIN;
  private static final Icon MIRRORED_APPLY_ICON;

  private ChangeGroupBuilder myChangeGroupBuilder;
  private boolean myHighlightLeft;
  private Map<ChangeGroup, Point> myGroupToButtonCoord = null;
  private ChangeGroup myCurrentGroup = null;
  private MergeButtonsPainter.Action myCurrentAction = null;
  private MergeRootsDialog myDialog;

  public MergeButtonsPainter(MergeRootsDialog dialog, EditorComponent editorComponent, ChangeGroupBuilder changeGroupBuilder) {
    super(editorComponent.getLeftEditorHighlighter());
    myDialog = dialog;
    myChangeGroupBuilder = changeGroupBuilder;
    myHighlightLeft = changeGroupBuilder.getLeftComponent() == editorComponent;
    myChangeGroupBuilder.addInvalidateListener(new ChangeGroupInvalidateListener() {
      public void changeGroupsInvalidated() {
        relayout();
      }
    });
  }

  public int getWeight() {
    return 2;
  }

  @Override
  public int getLeftAreaWidth() {
    return WIDTH;
  }

  @Override
  protected void paintInLocalCoordinates(Graphics graphics) {
    ensureCoordsCalculated();
    /*
      graphics.setColor(Color.GRAY);
      for (ChangeGroup g : SetSequence.fromSet(MapSequence.fromMap(myGroupToButtonCoord).keySet())) {
        int start = g.getStart(myHighlightLeft);
        int end = g.getEnd(myHighlightLeft);
        int x1 = -getLeftHighlighter().getFoldingLineX();
        int x2 = getLeftHighlighter().getRightFoldingAreaWidth();
        graphics.drawLine(x1, start - 1, x2, start - 1);
        graphics.drawLine(x1, end - 1, x2, end - 1);
      }
    */

    for (Point p : Sequence.fromIterable(MapSequence.fromMap(myGroupToButtonCoord).values())) {
      Icon leftIcon = (myHighlightLeft ?
        Icons.EXCLUDE :
        Icons.APPLY
      );
      Icon rightIcon = (myHighlightLeft ?
        MIRRORED_APPLY_ICON :
        Icons.EXCLUDE
      );

      leftIcon.paintIcon(null, graphics, p.x, p.y + 1);
      rightIcon.paintIcon(null, graphics, p.x + GAP + ICON_SIZE, p.y + 1);
    }
  }

  private void ensureCoordsCalculated() {
    if (myGroupToButtonCoord != null) {
      return;
    }

    myGroupToButtonCoord = MapSequence.fromMap(new HashMap<ChangeGroup, Point>());
    int previousStart = Integer.MIN_VALUE;
    for (ChangeGroup changeGroup : ListSequence.fromList(myChangeGroupBuilder.getChangeGroups())) {
      int y = changeGroup.getStart(myHighlightLeft);
      int x = -GAP * 2 - ICON_SIZE * 2 - LEFT_MARGIN;
      if (y < previousStart + GAP + ICON_SIZE) {
        y = previousStart + GAP + ICON_SIZE;
        /*
          x = x + LEFT_MARGIN;
        */
      }
      MapSequence.fromMap(myGroupToButtonCoord).put(changeGroup, new Point(x, y));

      previousStart = y;
    }
  }

  @Override
  public void mouseMoved(MouseEvent event) {
    Tuples._2<ChangeGroup, MergeButtonsPainter.Action> groupAndAction = findGroupAndActionUnder(event.getPoint());
    myCurrentGroup = groupAndAction._0();
    myCurrentAction = groupAndAction._1();
    if (myCurrentAction == null) {
      event.getComponent().setCursor(null);
    } else {
      event.getComponent().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }
  }

  @Override
  public String getToolTipText() {
    return check_85dz7l_a0a5(myCurrentAction);
  }

  @Override
  public void mousePressed(MouseEvent event) {
    if (event.getButton() != MouseEvent.BUTTON1) {
      return;
    }
    if (myCurrentGroup == null || myCurrentAction == null) {
      return;
    }

    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        MergeContext mergeContext = myChangeGroupBuilder.getMergeContext();
        if (myCurrentAction == MergeButtonsPainter.Action.APPLY) {
          mergeContext.applyChanges(myCurrentGroup.getChanges());
        } else if (myCurrentAction == MergeButtonsPainter.Action.EXCLUDE) {
          mergeContext.excludeChanges(myCurrentGroup.getChanges());
        }
        myDialog.rehighlight();
      }
    });
  }

  @Override
  public void mouseExited(MouseEvent event) {
    myCurrentGroup = null;
    myCurrentAction = null;
    event.getComponent().setCursor(null);
  }

  @NotNull
  private Tuples._2<ChangeGroup, MergeButtonsPainter.Action> findGroupAndActionUnder(@NotNull final Point p) {
    ensureCoordsCalculated();

    ChangeGroup changeGroup = ListSequence.fromList(myChangeGroupBuilder.getChangeGroups()).findFirst(new IWhereFilter<ChangeGroup>() {
      public boolean accept(ChangeGroup cg) {
        return MapSequence.fromMap(myGroupToButtonCoord).get(cg).y - GAP / 2 < p.getY() && p.getY() < MapSequence.fromMap(myGroupToButtonCoord).get(cg).y + ICON_SIZE + GAP / 2;
      }
    });
    MergeButtonsPainter.Action action = null;
    if (changeGroup != null) {
      double localX = p.getX() - getLeftHighlighter().getFoldingLineX();
      int cgx = MapSequence.fromMap(myGroupToButtonCoord).get(changeGroup).x;
      if (cgx - GAP / 2 < localX && localX < cgx + ICON_SIZE + GAP / 2) {
        action = (myHighlightLeft ?
          MergeButtonsPainter.Action.EXCLUDE :
          MergeButtonsPainter.Action.APPLY
        );
      } else if (cgx + ICON_SIZE + GAP / 2 < localX && localX < cgx + 2 * ICON_SIZE + 3 * GAP / 2) {
        action = (myHighlightLeft ?
          MergeButtonsPainter.Action.APPLY :
          MergeButtonsPainter.Action.EXCLUDE
        );
      }
      if (action == null) {
        changeGroup = null;
      }
    }
    return MultiTuple.<ChangeGroup,MergeButtonsPainter.Action>from(changeGroup, action);
  }

  @Override
  public void relayout() {
    myGroupToButtonCoord = null;
  }

  public static MergeButtonsPainter addTo(MergeRootsDialog dialog, DiffEditorComponent diffEditor, ChangeGroupBuilder changeGroupBuilder, boolean inspector) {
    EditorComponent editorComponent = (inspector ?
      diffEditor.getInspector() :
      diffEditor
    );
    MergeButtonsPainter painter = new MergeButtonsPainter(dialog, editorComponent, changeGroupBuilder);
    editorComponent.getLeftEditorHighlighter().addFoldingAreaPainter(painter);
    return painter;
  }

  private static String check_85dz7l_a0a5(MergeButtonsPainter.Action p) {
    if (null == p) {
      return null;
    }
    return p.getMessage();
  }

  private static   enum Action {
    APPLY("Apply"),
    EXCLUDE("Exclude");

    private String myMessage;

    Action(String message) {
      myMessage = message;
    }

    public String getMessage() {
      return myMessage;
    }
  }

  static {
    BufferedImage image = new BufferedImage(ICON_SIZE, ICON_SIZE, BufferedImage.TYPE_INT_RGB);
    Graphics2D g2d = ((Graphics2D) image.getGraphics());
    g2d.setTransform(AffineTransform.getScaleInstance(-1, 1));
    Icons.APPLY.paintIcon(null, g2d, -ICON_SIZE, 0);
    MIRRORED_APPLY_ICON = new ImageIcon(image);
  }
}
