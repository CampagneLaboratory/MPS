package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.leftHighlighter.AbstractFoldingAreaPainter;
import java.util.List;
import jetbrains.mps.nodeEditor.EditorComponent;
import java.awt.Graphics;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.awt.event.MouseEvent;
import java.awt.Cursor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import java.awt.Point;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public abstract class ButtonsPainter extends AbstractFoldingAreaPainter {
  protected static final int ICON_SIZE = 11;
  protected static final int GAP = 3;
  protected static final int LEFT_MARGIN = 5;

  private int myWidth;
  private ChangeGroupBuilder myChangeGroupBuilder;
  private boolean myHighlightLeft;
  private List<FoldingAreaButton> myButtons = null;
  private FoldingAreaButton myCurrentButton = null;

  public ButtonsPainter(int iconCount, EditorComponent editorComponent, ChangeGroupBuilder changeGroupBuilder) {
    super(editorComponent.getLeftEditorHighlighter());
    myWidth = (GAP + ICON_SIZE) * iconCount + LEFT_MARGIN;
    myChangeGroupBuilder = changeGroupBuilder;
    myHighlightLeft = changeGroupBuilder.getLeftComponent() == editorComponent;
    myChangeGroupBuilder.addInvalidateListener(new ChangeGroupInvalidateListener() {
      public void changeGroupsInvalidated() {
        relayout();
      }
    });
  }

  protected boolean isHighlightLeft() {
    return myHighlightLeft;
  }

  protected ChangeGroupBuilder getChangeGroupBuilder() {
    return myChangeGroupBuilder;
  }

  public int getWeight() {
    return 2;
  }

  @Override
  public int getLeftAreaWidth() {
    return myWidth;
  }

  @Override
  protected void paintInLocalCoordinates(Graphics graphics) {
    ensureButtonsCreated();

    for (FoldingAreaButton b : ListSequence.fromList(myButtons)) {
      b.paint(graphics);
    }
  }

  private void ensureButtonsCreated() {
    if (myButtons == null) {
      myButtons = ListSequence.fromList(new ArrayList<FoldingAreaButton>());

      int previousStart = Integer.MIN_VALUE;
      for (ChangeGroup cg : ListSequence.fromList(myChangeGroupBuilder.getChangeGroups())) {
        int y = Math.max(cg.getStart(myHighlightLeft), previousStart + GAP + ICON_SIZE);
        ListSequence.fromList(myButtons).addSequence(Sequence.fromIterable(createButtonsForChangeGroup(cg, y)));
        previousStart = y;
      }
    }
  }

  protected abstract Iterable<FoldingAreaButton> createButtonsForChangeGroup(ChangeGroup changeGroup, int y);

  @Override
  public void mouseMoved(MouseEvent event) {
    myCurrentButton = findButtonUnder(event.getPoint());
    if (myCurrentButton == null) {
      event.getComponent().setCursor(null);
    } else {
      event.getComponent().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }
  }

  @Override
  public String getToolTipText() {
    return check_of7u5x_a0a8(myCurrentButton);
  }

  @Override
  public void mousePressed(MouseEvent event) {
    if (event.getButton() == MouseEvent.BUTTON1) {
      check_of7u5x_a0a0a9(myCurrentButton);
    }
  }

  @Override
  public void mouseExited(MouseEvent event) {
    myCurrentButton = null;
    event.getComponent().setCursor(null);
  }

  @Nullable
  private FoldingAreaButton findButtonUnder(@NotNull final Point p) {
    ensureButtonsCreated();

    final int x = p.x - getLeftHighlighter().getFoldingLineX();
    return ListSequence.fromList(myButtons).findFirst(new IWhereFilter<FoldingAreaButton>() {
      public boolean accept(FoldingAreaButton b) {
        return b.getX() - GAP / 2 < x && x < b.getX() + ICON_SIZE + GAP / 2 && b.getY() - ButtonsPainter.GAP / 2 < p.y && p.y < b.getY() + ButtonsPainter.ICON_SIZE + ButtonsPainter.GAP / 2;
      }
    });
  }

  @Override
  public void relayout() {
    myButtons = null;
  }

  private static String check_of7u5x_a0a8(FoldingAreaButton checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getToolTipText();
    }
    return null;
  }

  private static void check_of7u5x_a0a0a9(FoldingAreaButton checkedDotOperand) {
    if (null != checkedDotOperand) {
      checkedDotOperand.performAction();
    }

  }
}
