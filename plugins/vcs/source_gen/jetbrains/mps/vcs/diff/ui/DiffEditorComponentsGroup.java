package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.nodeEditor.CellSelectionListener;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.smodel.ModelAccess;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class DiffEditorComponentsGroup {
  private List<DiffEditorComponent> myDiffEditors = ListSequence.fromList(new ArrayList<DiffEditorComponent>());
  private DiffEditorComponentsGroup.MyCellSelectionListener myCellSelectionListener = new DiffEditorComponentsGroup.MyCellSelectionListener();
  private boolean myViewportSetInProgress = false;

  public DiffEditorComponentsGroup() {
  }

  public void add(DiffEditorComponent diffEditor) {
    ListSequence.fromList(myDiffEditors).addElement(diffEditor);
    diffEditor.addCellSelectionListener(myCellSelectionListener);
    diffEditor.getViewport().addChangeListener(new DiffEditorComponentsGroup.MyViewportChangeListener(diffEditor));
  }

  private static SNodeId check_53tvmj_a0a0a0a0a(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getSNodeId();
    }
    return null;
  }

  private static SNode check_53tvmj_a0a0a0a0a0(EditorCell checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getSNode();
    }
    return null;
  }

  private static SNode check_53tvmj_a0a0a0a1a0a0a0(SModel checkedDotOperand, SNodeId selectionId) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getNodeById(selectionId);
    }
    return null;
  }

  private static SModel check_53tvmj_a0a0a0a0b0a0a0a(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModel();
    }
    return null;
  }

  private class MyCellSelectionListener implements CellSelectionListener {
    public MyCellSelectionListener() {
    }

    public void selectionChanged(EditorComponent component, EditorCell oldSelection, final EditorCell newSelection) {
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          SNodeId selectionId = check_53tvmj_a0a0a0a0a(check_53tvmj_a0a0a0a0a0(newSelection));
          if (selectionId != null) {
            for (DiffEditorComponent diffEditor : ListSequence.fromList(myDiffEditors)) {
              diffEditor.inspect(check_53tvmj_a0a0a0a1a0a0a0(check_53tvmj_a0a0a0a0b0a0a0a(diffEditor.getEditedNode()), selectionId));
            }
          }
        }
      });
    }
  }

  private class MyViewportChangeListener implements ChangeListener {
    private DiffEditorComponent myDiffEditor;

    private MyViewportChangeListener(DiffEditorComponent diffEditor) {
      myDiffEditor = diffEditor;
    }

    public void stateChanged(ChangeEvent event) {
      if (myViewportSetInProgress) {
        return;
      }
      myViewportSetInProgress = true;
      ListSequence.fromList(myDiffEditors).visitAll(new IVisitor<DiffEditorComponent>() {
        public void visit(DiffEditorComponent other) {
          myDiffEditor.synchronizeViewWith(other);
        }
      });
      myViewportSetInProgress = false;
    }
  }
}
