package jetbrains.mps.vcs.diff.changes;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Set;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.internal.collections.runtime.ISetSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SNode;

public class ChangeSetBuilder {
  private SModel myOldModel;
  private SModel myNewModel;
  private ChangeSet myChangeSet;

  private ChangeSetBuilder(SModel oldModel, SModel newModel) {
    myOldModel = oldModel;
    myNewModel = newModel;
    myChangeSet = new ChangeSet(oldModel, newModel);
    buildChanges();
  }

  private void buildChanges() {
    _FunctionTypes._return_P1_E0<? extends Set<SNodeId>, ? super SModel> rootIds = new _FunctionTypes._return_P1_E0<ISetSequence<SNodeId>, SModel>() {
      public ISetSequence<SNodeId> invoke(SModel m) {
        return SetSequence.fromSetWithValues(new HashSet<SNodeId>(), ListSequence.fromList(SModelOperations.getRoots(m, null)).<SNodeId>select(new ISelector<SNode, SNodeId>() {
          public SNodeId select(SNode node) {
            return node.getSNodeId();
          }
        }));
      }
    };
    Set<SNodeId> oldRootIds = rootIds.invoke(myOldModel);
    Set<SNodeId> newRootIds = rootIds.invoke(myNewModel);

    myChangeSet.addAll(SetSequence.fromSet(newRootIds).subtract(SetSequence.fromSet(oldRootIds)).<AddRootChange>select(new ISelector<SNodeId, AddRootChange>() {
      public AddRootChange select(SNodeId r) {
        return new AddRootChange(myChangeSet, r);
      }
    }));
    myChangeSet.addAll(SetSequence.fromSet(oldRootIds).subtract(SetSequence.fromSet(newRootIds)).<DeleteRootChange>select(new ISelector<SNodeId, DeleteRootChange>() {
      public DeleteRootChange select(SNodeId r) {
        return new DeleteRootChange(myChangeSet, r);
      }
    }));
  }

  public static ChangeSet buildChangeSet(SModel oldModel, SModel newModel) {
    return new ChangeSetBuilder(oldModel, newModel).myChangeSet;
  }
}
