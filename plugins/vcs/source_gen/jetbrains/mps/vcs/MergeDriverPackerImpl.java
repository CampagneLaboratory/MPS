package jetbrains.mps.vcs;

/*Generated by MPS */

import jetbrains.mps.vcs.platform.mergedriver.MergeDriverPacker;
import com.intellij.openapi.components.ApplicationComponent;
import com.intellij.openapi.application.PathManager;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.io.File;
import java.util.Arrays;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

public class MergeDriverPackerImpl extends MergeDriverPacker implements ApplicationComponent {
  public MergeDriverPackerImpl() {
  }

  public String getMPSCorePath() {
    return PathManager.getLibPath();
  }

  protected Set<String> getClasspathInternal() {
    Set<String> classpathItems = SetSequence.fromSet(new LinkedHashSet<String>());
    SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(MergeDriverPacker.mpsAddJars).select(new ISelector<String, String>() {
      public String select(String it) {
        return PathManager.getLibPath() + File.separator + it;
      }
    }));

    final Iterable<String> CLASSPATHS = Arrays.asList("runtime", "kernel", "openapi", "make-runtime", "generator", "typesystemEngine", "findUsages-runtime", "refactoring-runtime", "analyzers", "persistence");
    String homePath = PathManager.getHomePath();
    final String corePath = homePath + File.separator + "core";
    SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(CLASSPATHS).select(new ISelector<String, String>() {
      public String select(String it) {
        return corePath + File.separator + it + File.separator + "classes";
      }
    }));

    final String languagesPath = homePath + File.separator + "languages";
    final Iterable<String> OTHER_CLASSES = Arrays.asList("closures", "collections", "tuples");
    SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(OTHER_CLASSES).select(new ISelector<String, String>() {
      public String select(String it) {
        return languagesPath + File.separator + "baseLanguage" + File.separator + it + File.separator + "runtime" + File.separator + "classes";
      }
    }));
    SetSequence.fromSet(classpathItems).addElement(languagesPath + File.separator + "baseLanguage" + File.separator + "baseLanguage" + File.separator + "solutions" + File.separator + "jetbrains.mps.baseLanguage.search" + File.separator + "classes");
    SetSequence.fromSet(classpathItems).addElement(languagesPath + File.separator + "baseLanguage" + File.separator + "baseLanguage" + File.separator + "solutions" + File.separator + "jetbrains.mps.baseLanguage.util" + File.separator + "classes");

    SetSequence.fromSet(classpathItems).addElement(getVCSCorePluginPath() + File.separator + "lib" + File.separator + "classes");
    return classpathItems;

  }

  public void initComponent() {
    MergeDriverPacker.setInstance(this);
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return "MPS-specific Merge Driver Packer implementation";
  }

  public void disposeComponent() {
    MergeDriverPacker.setInstance(null);
  }

  protected String getVCSCoreFileName() {
    return "vcs-core.jar";
  }
}
