package jetbrains.mps.vcs;

/*Generated by MPS */

import com.intellij.openapi.components.ProjectComponent;
import jetbrains.mps.logging.Logger;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import com.intellij.openapi.vcs.changes.ChangeListManager;
import com.intellij.openapi.vcs.changes.ChangeListAdapter;
import com.intellij.util.messages.MessageBusConnection;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.vcs.AbstractVcs;
import com.intellij.openapi.vcs.changes.VcsDirtyScopeImpl;
import com.intellij.openapi.vcs.actions.VcsContextFactory;
import com.intellij.openapi.vcs.changes.ChangeProvider;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import com.intellij.openapi.vcs.VcsException;
import jetbrains.mps.smodel.DiskMemoryConflictResolver;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.smodel.SModel;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.vcs.mergedriver.MergeDriverNotification;
import com.intellij.openapi.vcs.VcsListener;
import jetbrains.mps.InternalFlag;
import jetbrains.mps.ide.vcs.SourceRevision;
import jetbrains.mps.vcs.revision.MPSSourceRevision;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import com.intellij.openapi.vcs.changes.ChangeListManagerImpl;
import com.intellij.openapi.vcs.changes.ChangeListManagerGate;
import com.intellij.openapi.vcs.changes.LocalChangeList;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import com.intellij.openapi.vcs.changes.Change;
import com.intellij.openapi.vcs.FileStatus;
import com.intellij.openapi.vcs.changes.EmptyChangelistBuilder;
import com.intellij.openapi.vcs.changes.ChangeList;
import com.intellij.openapi.vcs.VcsKey;
import com.intellij.openapi.vcs.changes.ContentRevision;

public class MPSVcsManager implements ProjectComponent {
  private static final Logger LOG = Logger.getLogger(MPSVcsManager.class);

  private final Project myProject;
  private final ProjectLevelVcsManager myManager;
  private final ChangeListManager myChangeListManager;
  private volatile boolean myChangeListManagerInitialized = false;
  private final ChangeListAdapter myChangeListUpdateListener = new ChangeListAdapter() {
    public void changeListUpdateDone() {
      myChangeListManagerInitialized = true;
    }
  };
  private MessageBusConnection myMessageBusConnection;

  public MPSVcsManager(Project project, ProjectLevelVcsManager manager, ChangeListManager clmanager) {
    myProject = project;
    myManager = manager;
    myChangeListManager = clmanager;
  }

  /*package*/ boolean isInConflict(final VirtualFile vfile) {
    AbstractVcs vcs = myManager.getVcsFor(vfile);
    if (vcs == null) {
      return false;
    }
    VcsDirtyScopeImpl scope = new VcsDirtyScopeImpl(vcs, myProject);
    scope.addDirtyFile(VcsContextFactory.SERVICE.getInstance().createFilePathOn(vfile));
    ChangeProvider changeProvider = vcs.getChangeProvider();
    if (changeProvider == null) {
      return false;
    }
    final MPSVcsManager.MyChangelistBuilder builder = new MPSVcsManager.MyChangelistBuilder(vfile);
    try {
      changeProvider.getChanges(scope, builder, new EmptyProgressIndicator(), new MPSVcsManager.StubChangeListManagerGate());
    } catch (VcsException e) {
      LOG.error(e);
    }
    return builder.isInConflict();
  }

  public void projectOpened() {
    DiskMemoryConflictResolver.setResolver(new DiskMemoryConflictResolver() {
      public boolean resolveDiskMemoryConflict(IFile file, SModel model) {
        return VcsHelper.resolveDiskMemoryConflict(file, model);
      }
    });
    if (ApplicationManager.getApplication().isUnitTestMode() || myProject.isDefault()) {
      return;
    }
    final MergeDriverNotification mergeDriverNotification = MergeDriverNotification.getInstance(myProject);
    mergeDriverNotification.showNotificationIfNeeded();
    myMessageBusConnection = myProject.getMessageBus().connect();
    VcsListener vcsListener = new VcsListener() {
      public void directoryMappingChanged() {
        mergeDriverNotification.showNotificationIfNeeded();
      }
    };
    myMessageBusConnection.subscribe(ProjectLevelVcsManager.VCS_CONFIGURATION_CHANGED, vcsListener);
    if (InternalFlag.isInternalMode()) {
      SourceRevision.setProvider(new MPSSourceRevision());
    }
  }

  public void projectClosed() {
    check_2eqssr_a0a2(myMessageBusConnection);
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return "VCS Manager";
  }

  public boolean isChangeListManagerInitialized() {
    return myChangeListManagerInitialized;
  }

  public void initComponent() {
    myChangeListManager.addChangeListListener(myChangeListUpdateListener);
  }

  public void disposeComponent() {
    myChangeListManager.removeChangeListListener(myChangeListUpdateListener);
  }

  public List<VirtualFile> getUnversionedFilesFromChangeListManager() {
    return ChangeListManagerImpl.getInstanceImpl(myProject).getUnversionedFiles();
  }

  public static MPSVcsManager getInstance(@NotNull Project project) {
    return project.getComponent(MPSVcsManager.class);
  }

  private static void check_2eqssr_a0a2(MessageBusConnection checkedDotOperand) {
    if (null != checkedDotOperand) {
      checkedDotOperand.disconnect();
    }

  }

  public static class StubChangeListManagerGate implements ChangeListManagerGate {
    public StubChangeListManagerGate() {
    }

    public List<LocalChangeList> getListsCopy() {
      return null;
    }

    @Nullable
    public LocalChangeList findChangeList(String name) {
      return null;
    }

    public LocalChangeList addChangeList(String name, String comment) {
      return null;
    }

    public LocalChangeList findOrCreateList(String name, String comment) {
      return null;
    }

    public void editComment(String name, String comment) {
    }

    public void editName(String oldName, String newName) {
    }

    public void moveChanges(String toList, Collection<Change> changes) {
    }

    public void setListsToDisappear(Collection<String> names) {
    }

    public FileStatus getStatus(VirtualFile virtualFile) {
      return FileStatus.NOT_CHANGED;
    }
  }

  private static class MyChangelistBuilder extends EmptyChangelistBuilder {
    private final VirtualFile myVirtualFile;
    private boolean myIsMergedWithConflict;

    public MyChangelistBuilder(VirtualFile vfile) {
      myVirtualFile = vfile;
    }

    public void processChangeInList(Change change, @Nullable ChangeList changeList, VcsKey vcsKey) {
      processChange(change, vcsKey);
    }

    public void processChangeInList(Change change, String changeListName, VcsKey vcsKey) {
      processChange(change, vcsKey);
    }

    public void processChange(Change change, VcsKey vcsKey) {
      if (change.getFileStatus().equals(FileStatus.MERGED_WITH_CONFLICTS)) {
        ContentRevision contentRevision = change.getAfterRevision();
        if (contentRevision != null) {
          if (contentRevision.getFile().getPresentableUrl().equals(myVirtualFile.getPresentableUrl())) {
            myIsMergedWithConflict = true;
          }
        }
      }
    }

    public boolean isInConflict() {
      return myIsMergedWithConflict;
    }
  }
}
