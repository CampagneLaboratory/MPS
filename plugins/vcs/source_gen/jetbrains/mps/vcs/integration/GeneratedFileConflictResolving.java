package jetbrains.mps.vcs.integration;

/*Generated by MPS */

import com.intellij.openapi.components.AbstractProjectComponent;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import com.intellij.openapi.vcs.FileStatusManager;
import com.intellij.openapi.vcs.changes.VcsDirtyScopeManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.*;
import jetbrains.mps.ide.vfs.IdeaFileSystemProvider;
import com.intellij.openapi.vcs.merge.MergeProvider;
import com.intellij.openapi.vcs.FileStatus;
import com.intellij.openapi.vcs.AbstractVcs;

public class GeneratedFileConflictResolving extends AbstractProjectComponent {
  private ProjectLevelVcsManager myVcsManager;
  private FileStatusManager myFileStatusManager;
  private VcsDirtyScopeManager myDirtyScopeManager;
  private GeneratedFileConflictResolving.MyFileListener myFileListener = new GeneratedFileConflictResolving.MyFileListener();

  public GeneratedFileConflictResolving(Project project, ProjectLevelVcsManager vcsManager, FileStatusManager fileStatusManager, VcsDirtyScopeManager dirtyScopeManager) {
    super(project);
    myVcsManager = vcsManager;
    myFileStatusManager = fileStatusManager;
    myDirtyScopeManager = dirtyScopeManager;
  }

  @Override
  public void initComponent() {
    VirtualFileManager.getInstance().addVirtualFileListener(myFileListener);
  }

  @Override
  public void disposeComponent() {
    VirtualFileManager.getInstance().removeVirtualFileListener(myFileListener);
  }

  private void resolveIfNeeded(VirtualFileEvent e) {
    if (e.getRequestor() == IdeaFileSystemProvider.class) {
      MergeProvider mergeProvider = check_tqtyvq_a0a0a0c(myVcsManager.getVcsFor(e.getFile()));
      if (mergeProvider != null) {
        FileStatus status = myFileStatusManager.getStatus(e.getFile());
        if (status == FileStatus.MERGED_WITH_CONFLICTS || status == FileStatus.MERGED_WITH_BOTH_CONFLICTS || status == FileStatus.MERGED_WITH_PROPERTY_CONFLICTS) {
          mergeProvider.conflictResolvedForFile(e.getFile());
          myDirtyScopeManager.fileDirty(e.getFile());
        }
      }
    }
  }

  private static MergeProvider check_tqtyvq_a0a0a0c(AbstractVcs checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getMergeProvider();
    }
    return null;
  }

  private class MyFileListener extends VirtualFileAdapter {
    public MyFileListener() {
    }

    @Override
    public void beforeFileMovement(VirtualFileMoveEvent event) {
      super.beforeFileMovement(event);    //TODO
    }

    @Override
    public void propertyChanged(VirtualFilePropertyEvent event) {
      super.propertyChanged(event);    //TODO
    }

    @Override
    public void fileCreated(VirtualFileEvent event) {
      super.fileCreated(event);    //TODO
    }

    @Override
    public void fileDeleted(VirtualFileEvent event) {
      super.fileDeleted(event);    //TODO
    }

    @Override
    public void fileMoved(VirtualFileMoveEvent event) {
      super.fileMoved(event);    //TODO
    }

    @Override
    public void fileCopied(VirtualFileCopyEvent event) {
      super.fileCopied(event);    //TODO
    }

    @Override
    public void beforePropertyChange(VirtualFilePropertyEvent event) {
      super.beforePropertyChange(event);    //TODO
    }

    @Override
    public void beforeContentsChange(VirtualFileEvent event) {
      super.beforeContentsChange(event);    //TODO
    }

    @Override
    public void contentsChanged(VirtualFileEvent event) {
      resolveIfNeeded(event);
    }

    @Override
    public void beforeFileDeletion(VirtualFileEvent event) {
      resolveIfNeeded(event);
    }
  }
}
