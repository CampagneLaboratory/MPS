package jetbrains.mps.vcs.integration;

/*Generated by MPS */

import com.intellij.openapi.diff.DiffTool;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.diff.DiffRequest;
import com.intellij.openapi.diff.DiffContent;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.persistence.def.ModelReadException;
import com.intellij.openapi.diff.DiffManager;
import jetbrains.mps.ide.dialogs.BaseDialog;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.project.GlobalOperationContext;
import jetbrains.mps.project.ModuleContext;
import jetbrains.mps.ide.project.ProjectHelper;
import javax.swing.JFrame;
import com.intellij.openapi.wm.WindowManager;
import jetbrains.mps.vcs.diff.ui.ModelDifferenceDialog;
import jetbrains.mps.vcs.diff.ui.OldModelDifferenceDialog;
import com.intellij.openapi.actionSystem.AnAction;
import jetbrains.mps.ide.projectPane.Icons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.fileTypes.FileType;
import jetbrains.mps.fileTypes.MPSFileTypeFactory;
import com.intellij.openapi.diff.DocumentContent;
import com.intellij.openapi.diff.FileContent;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import java.io.IOException;

public class ModelDiffTool implements DiffTool {
  protected static Log log = LogFactory.getLog(ModelDiffTool.class);

  public ModelDiffTool() {
  }

  public void show(final DiffRequest request) {
    DiffContent[] contents = request.getContents();
    final SModel oldModel;
    final SModel newModel;
    try {
      oldModel = readModel(contents[0]);
      newModel = readModel(contents[1]);
    } catch (ModelReadException e) {
      if (log.isErrorEnabled()) {
        log.error("Can't read models", e);
      }
      DiffManager.getInstance().getIdeaDiffTool().show(request);
      return;
    }
    final BaseDialog d = ModelAccess.instance().runReadAction(new Computable<BaseDialog>() {
      public BaseDialog compute() {
        SModelDescriptor modelDescriptor = oldModel.getModelDescriptor();
        if (modelDescriptor == null) {
          modelDescriptor = newModel.getModelDescriptor();
          if (modelDescriptor == null) {
            modelDescriptor = SModelRepository.getInstance().getModelDescriptor(oldModel.getSModelFqName());
          }
        }
        IOperationContext context;
        if (modelDescriptor == null) {
          context = new GlobalOperationContext();
        } else {
          context = new ModuleContext(modelDescriptor.getModule(), ProjectHelper.toMPSProject(request.getProject()));
        }
        boolean modal = !(request.getHints().contains(DiffTool.HINT_SHOW_FRAME));
        JFrame frame = WindowManager.getInstance().getFrame(request.getProject());
        if (isNewDiffEnabled()) {
          return new ModelDifferenceDialog(oldModel, newModel, request);
        } else {
          final OldModelDifferenceDialog d = new OldModelDifferenceDialog(context, frame, oldModel, newModel, request.getWindowTitle(), modal, request.getContentTitles());
          d.addAction(new AnAction("View as Text", "View as Text", Icons.TEXT_ICON) {
            public void actionPerformed(AnActionEvent e) {
              DiffTool ideaDiffTool = DiffManager.getInstance().getIdeaDiffTool();
              if (ideaDiffTool.canShow(request)) {
                d.dispose();
                ideaDiffTool.show(request);
              }
            }
          });
          return d;
        }
      }
    });
    d.showDialog();
  }

  public boolean canShow(DiffRequest request) {
    DiffContent[] contents = request.getContents();
    return contents.length == 2 && isModelFile(contents[0]) && isModelFile(contents[1]);
  }

  private boolean isModelFile(@NotNull DiffContent contents) {
    FileType type = contents.getContentType();
    if (type == null) {
      return true;
    }
    return type.equals(MPSFileTypeFactory.MODEL_FILE_TYPE);
  }

  private static SModel readModel(DiffContent content) throws ModelReadException {
    if (content instanceof DocumentContent || content instanceof FileContent) {
      SModelRepository modelRepository = SModelRepository.getInstance();
      final SModelDescriptor modelDescriptor = modelRepository.findModel(VirtualFileUtils.toIFile(content.getFile()));
      if (modelDescriptor != null) {
        return ModelAccess.instance().runReadAction(new Computable<SModel>() {
          public SModel compute() {
            return modelDescriptor.getSModel();
          }
        });
      }
    }
    try {
      return ModelPersistence.readModel(new String(content.getBytes(), "UTF-8"), false);
    } catch (IOException ioe) {
      throw new ModelReadException("Couldn't read content: " + ioe.getMessage(), ioe);
    }
  }

  public static boolean isNewDiffEnabled() {
    return !("false".equals(System.getProperty("mps.newdiff")));
  }
}
