package jetbrains.mps.vcs.suspicious;

/*Generated by MPS */

import java.util.List;
import java.util.LinkedList;
import com.intellij.util.ui.Timer;
import com.intellij.openapi.application.ApplicationManager;

public abstract class BaseTaskQueue<T> {
  private final Object LOCK = new Object();
  private List<T> myTasks = new LinkedList<T>();
  protected Timer myTimer;
  public BaseTaskQueue() {
    myTimer = new Timer("Task Queue", 500) {
      @Override
      protected void onTimer() throws InterruptedException {
        process();
      }
    };
  }
  public void addTask(T task) {
    synchronized (LOCK) {
      myTasks.add(task);
    }
    if (isProcessingAllowed()) {
      process();
    } else {
      ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {
        public void run() {
          myTimer.resume();
        }
      });
    }
  }
  private void process() {
    myTimer.suspend();
    if (myTasks.isEmpty()) {
      return;
    }
    List<T> tasks;
    synchronized (LOCK) {
      tasks = myTasks;
      myTasks = new LinkedList<T>();
    }
    processTask(tasks);
  }
  protected abstract boolean isProcessingAllowed();
  protected abstract void processTask(List<T> tasks);
}
