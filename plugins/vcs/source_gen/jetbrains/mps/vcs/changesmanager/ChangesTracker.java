package jetbrains.mps.vcs.changesmanager;

/*Generated by MPS */

import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SModelAdapter;

public class ChangesTracker {
  private Project myProject;
  private CurrentDifference myDifference;
  private SimpleCommandQueue myQueue;
  private SModelDescriptor myModelDescriptor;
  private ChangesTracker.MyModelListener myModelListener = new ChangesTracker.MyModelListener();
  private boolean myDisposed = false;

  public ChangesTracker(@NotNull Project project, @NotNull CurrentDifference difference) {
    myDifference = difference;
    myProject = project;
    myModelDescriptor = myDifference.getModelDescriptor();
    myQueue = ChangesManager.getInstance(project).getCommandQueue();
    synchronized (this) {
      myModelDescriptor.addModelListener(myModelListener);
    }
  }

  /*package*/ void scheduleFullUpdate() {
    myQueue.runTask(new Runnable() {
      public void run() {
        // TODO update 
      }
    });
  }

  public void dispose() {
    synchronized (this) {
      if (!(myDisposed)) {
        myDisposed = true;
        myModelDescriptor.removeModelListener(myModelListener);
      }
    }
  }

  public class MyModelListener extends SModelAdapter {
    public MyModelListener() {
    }
  }
}
