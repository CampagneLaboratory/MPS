package jetbrains.mps.vcs.changesmanager;

/*Generated by MPS */

import com.intellij.util.containers.BidirectionalMultiMap;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.event.SModelEvent;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.event.SModelChildEvent;
import jetbrains.mps.smodel.event.SModelRootEvent;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.event.SModelPropertyEvent;
import jetbrains.mps.smodel.event.SModelReferenceEvent;

public class EventConsumingMapping {
  private BidirectionalMultiMap<SNodeId, SModelEvent> myNodesToUnconsumedEvents = new BidirectionalMultiMap<SNodeId, SModelEvent>();

  public EventConsumingMapping() {
  }

  private SModelEvent findConsumerEventForNode(SNode node) {
    Iterable<SModelEvent> eventsForParent = myNodesToUnconsumedEvents.getValues(node.getSNodeId());
    return Sequence.fromIterable(eventsForParent).findFirst(new IWhereFilter<SModelEvent>() {
      public boolean accept(SModelEvent e) {
        return e instanceof SModelChildEvent && ((SModelChildEvent) e).isAdded() || e instanceof SModelRootEvent && ((SModelRootEvent) e).isAdded();
      }
    });
  }

  private void consumeAllForNode(SNode node) {
    final SNodeId id = node.getSNodeId();
    Sequence.fromIterable(((Iterable<SModelEvent>) myNodesToUnconsumedEvents.getValues(id))).where(new IWhereFilter<SModelEvent>() {
      public boolean accept(SModelEvent e) {
        return !(e instanceof SModelRootEvent);
      }
    }).toListSequence().visitAll(new IVisitor<SModelEvent>() {
      public void visit(SModelEvent e) {
        myNodesToUnconsumedEvents.remove(id, e);
      }
    });
  }

  public synchronized void addEvent(SModelEvent event) {
    SNode affectedNode = null;
    if (event instanceof SModelRootEvent) {
      affectedNode = ((SModelRootEvent) event).getRoot();
    } else if (event instanceof SModelChildEvent) {
      affectedNode = ((SModelChildEvent) event).getParent();
    } else if (event instanceof SModelPropertyEvent) {
      affectedNode = ((SModelPropertyEvent) event).getNode();
    } else if (event instanceof SModelReferenceEvent) {
      affectedNode = ((SModelReferenceEvent) event).getReference().getSourceNode();
    }
    assert affectedNode != null;
    // TODO make compact 
    if (event instanceof SModelRootEvent) {
      SModelRootEvent rootEvent = (SModelRootEvent) event;
      SNode root = rootEvent.getRoot();
      assert findConsumerEventForNode(root) == null;
      if (rootEvent.isRemoved()) {
        consumeAllForNode(root);
      }
      myNodesToUnconsumedEvents.put(root.getSNodeId(), event);
    } else if (event instanceof SModelChildEvent) {
      SModelChildEvent childEvent = (SModelChildEvent) event;
      SNode parent = childEvent.getParent();
      if (findConsumerEventForNode(parent) == null) {
        if (childEvent.isRemoved()) {
          consumeAllForNode(childEvent.getChild());
        }
        myNodesToUnconsumedEvents.put(parent.getSNodeId(), event);
      }
    } else if (event instanceof SModelPropertyEvent) {
      SNode node = ((SModelPropertyEvent) event).getNode();
      if (findConsumerEventForNode(node) == null) {
        myNodesToUnconsumedEvents.put(node.getSNodeId(), event);
      }
    } else if (event instanceof SModelReferenceEvent) {
      SNode node = ((SModelReferenceEvent) event).getReference().getSourceNode();
      if (findConsumerEventForNode(node) == null) {
        myNodesToUnconsumedEvents.put(node.getSNodeId(), event);
      }
    }
  }

  public synchronized boolean removeEvent(SModelEvent event) {
    // return true if this event should be processed 
    if (myNodesToUnconsumedEvents.containsValue(event)) {
      myNodesToUnconsumedEvents.removeValue(event);
      return true;
    } else {
      return false;
    }
  }
}
