package jetbrains.mps.vcs.changesmanager.tree;

/*Generated by MPS */

import com.intellij.openapi.components.AbstractProjectComponent;
import jetbrains.mps.ide.projectPane.ProjectPane;
import jetbrains.mps.vcs.changesmanager.CurrentDifferenceRegistry;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.projectPane.logicalview.ProjectTree;

public class ProjectTreeHighlighter extends AbstractProjectComponent {
  private ProjectPane myProjectPane;
  private CurrentDifferenceRegistry myRegistry;
  private TreeHighlighter myTreeHighlighter;
  private FeatureForestMapSupport myFeatureForestMapSupport;

  public ProjectTreeHighlighter(@NotNull Project project, @NotNull ProjectPane projectPane, @NotNull CurrentDifferenceRegistry registry, @NotNull FeatureForestMapSupport featureForestMapSupport) {
    super(project);
    myProjectPane = projectPane;
    myRegistry = registry;
    myFeatureForestMapSupport = featureForestMapSupport;
  }

  @Override
  public void projectOpened() {
    ProjectTree tree = myProjectPane.getTree();
    if (tree != null) {
      registerAndInitHighlighter(tree);
    } else {
      myProjectPane.addComponentCreationListener(new ProjectPane.ComponentCreationListener() {
        public void componentCreated(ProjectPane pane) {
          pane.removeComponentCreationListener(this);
          registerAndInitHighlighter(pane.getTree());
        }
      });
    }
  }

  @Override
  public void projectClosed() {
    if (myTreeHighlighter == null) {
      return;
    } else {
      myTreeHighlighter.dispose();
    }
  }

  private void registerAndInitHighlighter(@NotNull ProjectTree tree) {
    myTreeHighlighter = new TreeHighlighter(myRegistry, myFeatureForestMapSupport, tree, new ProjectTreeFeatureExtractor(), true);
    myTreeHighlighter.init();
  }
}
