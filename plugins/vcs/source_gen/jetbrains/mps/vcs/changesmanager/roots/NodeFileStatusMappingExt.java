package jetbrains.mps.vcs.changesmanager.roots;

/*Generated by MPS */

import jetbrains.mps.plugins.relations.RelationDescriptor;
import jetbrains.mps.vcs.changesmanager.NodeFileStatusMapping;
import com.intellij.openapi.project.Project;
import jetbrains.mps.vcs.changesmanager.CurrentDifferenceRegistry;
import com.intellij.openapi.vcs.FileStatusManager;
import jetbrains.mps.workbench.nodesFs.MPSNodesVirtualFileSystem;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;

public class NodeFileStatusMappingExt extends NodeFileStatusMapping {
  public NodeFileStatusMappingExt(Project project, CurrentDifferenceRegistry registry) {
    super(project, registry);
  }

  @Override
  protected void statusChanged(FileStatusManager fsm, MPSNodesVirtualFileSystem nvfs, SNodePointer nodePointer) {
    super.statusChanged(fsm, nvfs, nodePointer);
    SNode currentNode = nodePointer.getNode();
    for (RelationDescriptor d : ListSequence.fromList(myProject.getComponent(ProjectPluginManager.class).getTabDescriptors())) {
      SNode baseNode = d.getBaseNode(currentNode);
      if (baseNode != null && baseNode != currentNode) {
        fsm.fileStatusChanged(nvfs.getFileFor(baseNode));
        break;
      }
    }

  }
}
