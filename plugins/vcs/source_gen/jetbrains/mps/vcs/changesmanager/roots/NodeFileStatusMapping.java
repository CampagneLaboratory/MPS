package jetbrains.mps.vcs.changesmanager.roots;

/*Generated by MPS */

import com.intellij.openapi.components.AbstractProjectComponent;
import jetbrains.mps.vcs.changesmanager.CurrentDifferenceRegistry;
import java.util.Map;
import jetbrains.mps.smodel.SNodePointer;
import com.intellij.openapi.vcs.FileStatus;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.vcs.changesmanager.CurrentDifferenceListener;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.vcs.FileStatusManager;
import jetbrains.mps.workbench.nodesFs.MPSNodesVirtualFileSystem;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.editorTabs.EditorTabDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.vcs.changesmanager.CurrentDifference;
import java.util.List;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.vcs.diff.changes.AddRootChange;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.vcs.diff.ChangeSet;
import jetbrains.mps.vcs.changesmanager.CurrentDifferenceAdapter;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class NodeFileStatusMapping extends AbstractProjectComponent {
  private final CurrentDifferenceRegistry myRegistry;
  private final Map<SNodePointer, FileStatus> myFileStatusMap = MapSequence.fromMap(new HashMap<SNodePointer, FileStatus>());
  private final CurrentDifferenceListener myGlobalListener = new NodeFileStatusMapping.MyGlobalListener();

  public NodeFileStatusMapping(Project project, CurrentDifferenceRegistry registry) {
    super(project);
    myRegistry = registry;
  }

  @Override
  public void projectOpened() {
    myRegistry.addGlobalDifferenceListener(myGlobalListener);
  }

  @Override
  public void projectClosed() {
    myRegistry.removeGlobalDifferenceListener(myGlobalListener);
  }

  private void statusChanged(@NotNull final SNodePointer nodePointer) {
    final FileStatusManager fsm = FileStatusManager.getInstance(myProject);
    final MPSNodesVirtualFileSystem nvfs = MPSNodesVirtualFileSystem.getInstance();
    fsm.fileStatusChanged(nvfs.getFileFor(nodePointer));
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SNode currentNode = nodePointer.getNode();
        for (EditorTabDescriptor d : ListSequence.fromList(myProject.getComponent(ProjectPluginManager.class).getTabDescriptors())) {
          SNode baseNode = d.getBaseNode(currentNode);
          if (baseNode != null && baseNode != currentNode) {
            fsm.fileStatusChanged(nvfs.getFileFor(baseNode));
            break;
          }
        }
      }
    });
  }

  private void updateNodeStatus(@NotNull final SNodePointer nodePointer) {
    myRegistry.getCommandQueue().runTask(new Runnable() {
      public void run() {
        calcStatus(nodePointer);
        statusChanged(nodePointer);
      }
    });
  }

  private void calcStatus(@NotNull final SNodePointer root) {
    final Wrappers._T<FileStatus> status = new Wrappers._T<FileStatus>(null);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SModelDescriptor modelDescriptor = SModelRepository.getInstance().getModelDescriptor(root.getModelReference());
        if (modelDescriptor instanceof EditableSModelDescriptor) {
          EditableSModelDescriptor emd = (EditableSModelDescriptor) modelDescriptor;
          CurrentDifference diff = myRegistry.getCurrentDifference(emd);
          List<ModelChange> modelChanges = check_onkh7z_a0c0b0a1a4(diff.getChangeSet());
          final SNodeId rootId = root.getNodeId();
          List<ModelChange> rootChanges = ListSequence.fromList(modelChanges).where(new IWhereFilter<ModelChange>() {
            public boolean accept(ModelChange ch) {
              return rootId.equals(ch.getRootId());
            }
          }).toListSequence();
          if (ListSequence.fromList(rootChanges).count() != 0) {
            if (ListSequence.fromList(rootChanges).first() instanceof AddRootChange) {
              status.value = FileStatus.ADDED;
              VirtualFile vf = VirtualFileUtils.getVirtualFile(emd.getModelFile());
              if (vf != null && FileStatusManager.getInstance(myProject).getStatus(vf) == FileStatus.UNKNOWN) {
                status.value = FileStatus.UNKNOWN;
              }
            } else {
              status.value = FileStatus.MODIFIED;
            }
          } else {
            status.value = FileStatus.NOT_CHANGED;
          }
        }
      }
    });
    synchronized (myFileStatusMap) {
      MapSequence.fromMap(myFileStatusMap).put(root, status.value);
    }
  }

  @Nullable
  public FileStatus getStatus(@NotNull final SNode root) {
    final Wrappers._T<SNodePointer> nodePointer = new Wrappers._T<SNodePointer>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        nodePointer.value = new SNodePointer(root);
        myRegistry.getCommandQueue().runTask(new Runnable() {
          public void run() {
            ModelAccess.instance().runReadAction(new Runnable() {
              public void run() {
                SModelDescriptor modelDescriptor = null;
                if (!(root.isDisposed() || SNodeOperations.getModel(root).isDisposed())) {
                  modelDescriptor = SNodeOperations.getModel(root).getModelDescriptor();
                }
                if (modelDescriptor instanceof EditableSModelDescriptor) {
                  myRegistry.getCurrentDifference((EditableSModelDescriptor) modelDescriptor).setEnabled(true);
                }
              }
            });
          }
        });
      }
    });
    synchronized (myFileStatusMap) {
      return MapSequence.fromMap(myFileStatusMap).get(nodePointer.value);
    }
  }

  @Nullable
  public FileStatus getStatus(@NotNull SNodePointer nodePointer) {
    synchronized (myFileStatusMap) {
      return MapSequence.fromMap(myFileStatusMap).get(nodePointer);
    }
  }

  private static List<ModelChange> check_onkh7z_a0c0b0a1a4(ChangeSet checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelChanges();
    }
    return null;
  }

  private class MyGlobalListener extends CurrentDifferenceAdapter {
    private List<SNodePointer> myAffectedRoots = ListSequence.fromList(new ArrayList<SNodePointer>());

    private MyGlobalListener() {
    }

    @Override
    public void changeUpdateFinished() {
      ListSequence.fromList(myAffectedRoots).visitAll(new IVisitor<SNodePointer>() {
        public void visit(SNodePointer np) {
          updateNodeStatus(np);
        }
      });
      ListSequence.fromList(myAffectedRoots).clear();
    }

    private void addAffectedRoot(@NotNull ModelChange change) {
      if (change.getRootId() != null) {
        ListSequence.fromList(myAffectedRoots).addElement(new SNodePointer(change.getChangeSet().getNewModel().getSModelReference(), change.getRootId()));
      }
    }

    @Override
    public void changeAdded(@NotNull ModelChange change) {
      addAffectedRoot(change);
    }

    @Override
    public void changeRemoved(@NotNull ModelChange change) {
      addAffectedRoot(change);
    }
  }
}
