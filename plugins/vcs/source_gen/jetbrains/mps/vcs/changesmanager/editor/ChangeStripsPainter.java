package jetbrains.mps.vcs.changesmanager.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.leftHighlighter.AbstractFoldingAreaPainter;
import java.awt.Color;
import jetbrains.mps.vcs.diff.ui.common.ChangeGroupBuilder;
import org.jetbrains.annotations.NotNull;
import java.awt.Graphics;
import java.awt.Rectangle;
import jetbrains.mps.vcs.diff.ui.common.ChangeGroup;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.vcs.diff.ui.common.Bounds;
import jetbrains.mps.vcs.diff.ui.common.ChangeColors;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

public class ChangeStripsPainter extends AbstractFoldingAreaPainter {
  private static final int AREA_WIDTH = 6;
  private static final int ARROW_HEIGHT = 8;
  private static final Color AREA_FRAME_COLOR = Color.GRAY;

  private ChangesEditorHighlighter myEditorHighlighter;
  private ChangeGroupBuilder myChangeGroupBuilder;

  public ChangeStripsPainter(@NotNull ChangesEditorHighlighter editorHighlighter) {
    super(editorHighlighter.getLeftEditorHighlighter());
    myEditorHighlighter = editorHighlighter;
    myChangeGroupBuilder = new StripsChangeGroupBuilder(myEditorHighlighter);
  }

  public int getWeight() {
    return 0;
  }

  @Override
  protected void paintInLocalCoordinates(Graphics g) {
    Rectangle clipBounds = g.getClipBounds();
    if (clipBounds.x + clipBounds.width < -AREA_WIDTH - 1 || 0 < clipBounds.x) {
      return;
    }
    for (ChangeGroup changeGroup : ListSequence.fromList(myChangeGroupBuilder.getChangeGroups())) {
      Bounds bounds = changeGroup.getBounds(true);
      int y = (int) bounds.start();
      g.setColor(ChangeColors.get(changeGroup.getChangeType()));
      if (bounds.length() <= 1) {
        Graphics2D g2d = ((Graphics2D) g);
        Object oldAntialiasing = g2d.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        int[] xPoints = new int[]{-AREA_WIDTH, -AREA_WIDTH, -1};
        int[] yPoints = new int[]{y, y + ChangeStripsPainter.ARROW_HEIGHT, y + ChangeStripsPainter.ARROW_HEIGHT / 2};
        g.fillPolygon(xPoints, yPoints, 3);

        g.setColor(AREA_FRAME_COLOR);
        g.drawPolygon(xPoints, yPoints, 3);
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, oldAntialiasing);
        continue;
      }
      int height = bounds.length();
      if (height == 0 || y + height < clipBounds.y) {
        continue;
      }
      if (clipBounds.y + clipBounds.height < y) {
        break;
      }
      g.fillRect(-AREA_WIDTH, y, AREA_WIDTH, height);

      g.setColor(AREA_FRAME_COLOR);
      g.drawLine(-AREA_WIDTH, y, 0, y);
      g.drawLine(-AREA_WIDTH, y + height, 0, y + height);
      g.drawLine(-AREA_WIDTH, y, -AREA_WIDTH, y + height);
    }
  }

  @Override
  public int getLeftAreaWidth() {
    return AREA_WIDTH;
  }

  @Override
  public void relayout() {
    myChangeGroupBuilder.invalidate();
  }

  @Override
  public String getToolTipText() {
    // TODO 
    return null;
  }
}
