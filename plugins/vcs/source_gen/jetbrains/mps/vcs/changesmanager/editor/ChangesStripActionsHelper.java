package jetbrains.mps.vcs.changesmanager.editor;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import jetbrains.mps.vcs.diff.ui.common.ChangeGroup;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell;

public class ChangesStripActionsHelper {
  private ChangesStripActionsHelper() {
  }

  @Nullable
  private static ChangeGroup getNeighbourChangeGroup(@NotNull EditorContext editorContext, boolean next) {
    EditorComponent editorComponent = editorContext.getNodeEditorComponent();
    ChangesEditorHighlighter highlighter = check_ikrecr_a0b0a(editorContext.getOperationContext().getComponent(ChangesEditorHighlighterFactory.class), editorComponent);
    return check_ikrecr_a0c0a(highlighter).getNeighbourChangeGroup(check_ikrecr_a0a2a0(editorContext), next);
  }

  public static boolean isNeighbourGroupAvailable(@NotNull EditorContext editorContext, boolean next) {
    return getNeighbourChangeGroup(editorContext, next) != null;
  }

  public static void goToNeighbourGroup(@NotNull EditorContext editorContext, boolean next) {
    ChangeGroup group = getNeighbourChangeGroup(editorContext, next);
    if (group == null) {
      return;
    }
    EditorComponent editorComponent = editorContext.getNodeEditorComponent();
    ChangesEditorHighlighter highlighter = check_ikrecr_a0d0c(editorContext.getOperationContext().getComponent(ChangesEditorHighlighterFactory.class), editorComponent);
    goToY(editorComponent, (int) group.getBounds(true).end());
    goToY(editorComponent, (int) group.getBounds(true).start());
    check_ikrecr_a0g0c(highlighter).showPopupForGroup(group);
  }

  private static void goToY(EditorComponent editorComponent, int y) {
    EditorCell editorCell = editorComponent.findCellWeak(1, y + 1);
    if (editorCell != null) {
      editorComponent.changeSelection(editorCell);
    }
  }

  private static ChangesEditorHighlighter check_ikrecr_a0b0a(ChangesEditorHighlighterFactory checkedDotOperand, EditorComponent editorComponent) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getHighlighter(editorComponent);
    }
    return null;
  }

  private static ChangeStripsPainter check_ikrecr_a0c0a(ChangesEditorHighlighter checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getStripsPainter();
    }
    return null;
  }

  private static EditorCell check_ikrecr_a0a2a0(EditorContext checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getContextCell();
    }
    return null;
  }

  private static ChangesEditorHighlighter check_ikrecr_a0d0c(ChangesEditorHighlighterFactory checkedDotOperand, EditorComponent editorComponent) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getHighlighter(editorComponent);
    }
    return null;
  }

  private static ChangeStripsPainter check_ikrecr_a0g0c(ChangesEditorHighlighter checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getStripsPainter();
    }
    return null;
  }
}
