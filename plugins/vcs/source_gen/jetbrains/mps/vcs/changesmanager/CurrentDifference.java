package jetbrains.mps.vcs.changesmanager;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.vcs.diff.ChangeSet;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.vcs.diff.changes.ModelChange;

public class CurrentDifference {
  protected static Log log = LogFactory.getLog(CurrentDifference.class);

  private Project myProject;
  private SimpleCommandQueue myCommandQueue;
  private EditableSModelDescriptor myModelDescriptor;
  private ChangeSet myChangeSet;
  private List<CurrentDifferenceListener> myListeners = ListSequence.fromList(new ArrayList<CurrentDifferenceListener>());
  private boolean myEnabled = false;

  public CurrentDifference(@NotNull Project project, @NotNull EditableSModelDescriptor modelDescriptor) {
    myProject = project;
    myCommandQueue = ChangesManager.getInstance(project).getCommandQueue();
    myModelDescriptor = modelDescriptor;
  }

  public void dispose() {
  }

  public void addDifferenceListener(@NotNull CurrentDifferenceListener listener) {
    synchronized (myListeners) {
      ListSequence.fromList(myListeners).addElement(listener);
    }
  }

  public void removeDifferenceListener(@NotNull CurrentDifferenceListener listener) {
    synchronized (myListeners) {
      ListSequence.fromList(myListeners).removeElement(listener);
    }
  }

  @NotNull
  private List<CurrentDifferenceListener> copyListeners() {
    synchronized (myListeners) {
      return ListSequence.fromListWithValues(new ArrayList<CurrentDifferenceListener>(), myListeners);
    }
  }

  private void fireEvent(String name, _FunctionTypes._void_P1_E0<? super CurrentDifferenceListener> task) {
    myCommandQueue.assertSoftlyIsCommandThread();
    for (CurrentDifferenceListener listener : ListSequence.fromList(copyListeners())) {
      try {
        task.invoke(listener);
      } catch (Throwable t) {
        if (log.isErrorEnabled()) {
          log.error("Exception on firing " + name + " event", t);
        }
      }
    }
  }

  private void fireChangeAdded(@NotNull final ModelChange change) {
    fireEvent("changeAdded", new _FunctionTypes._void_P1_E0<CurrentDifferenceListener>() {
      public void invoke(CurrentDifferenceListener listener) {
        listener.changeAdded(change);
      }
    });
  }

  private void fireChangeRemoved(@NotNull final ModelChange change) {
    fireEvent("changeRemoved", new _FunctionTypes._void_P1_E0<CurrentDifferenceListener>() {
      public void invoke(CurrentDifferenceListener listener) {
        listener.changeRemoved(change);
      }
    });
  }

  private void fireChangeUpdateStarted() {
    fireEvent("changeUpdateStarted", new _FunctionTypes._void_P1_E0<CurrentDifferenceListener>() {
      public void invoke(CurrentDifferenceListener listener) {
        listener.changeUpdateStarted();
      }
    });
  }

  private void fireChangeUpdateFinished() {
    fireEvent("changeUpdateFinished", new _FunctionTypes._void_P1_E0<CurrentDifferenceListener>() {
      public void invoke(CurrentDifferenceListener listener) {
        listener.changeUpdateFinished();
      }
    });
  }
}
