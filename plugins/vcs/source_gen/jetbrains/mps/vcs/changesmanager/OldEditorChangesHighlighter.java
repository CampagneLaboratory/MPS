package jetbrains.mps.vcs.changesmanager;

/*Generated by MPS */

import com.intellij.openapi.components.AbstractProjectComponent;
import jetbrains.mps.nodeEditor.EditorMessageOwner;
import java.util.Map;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import com.intellij.util.messages.MessageBusConnection;
import jetbrains.mps.nodeEditor.EditorSettingsListener;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import jetbrains.mps.workbench.highlighter.EditorComponentCreateListener;
import jetbrains.mps.nodeEditor.EditorSettings;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.NodeEditorComponent;
import jetbrains.mps.nodeEditor.InspectorTool;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class OldEditorChangesHighlighter extends AbstractProjectComponent implements EditorMessageOwner {
  private Map<EditorComponent, OldEditorComponentChangesHighligher> myEditorsHighlighters = MapSequence.fromMap(new HashMap<EditorComponent, OldEditorComponentChangesHighligher>());
  private MessageBusConnection myMessageBusConnection;
  private EditorSettingsListener myEditorSettingsListener;

  public OldEditorChangesHighlighter(@NotNull final Project project) {
    super(project);
  }

  public void projectOpened() {
    myMessageBusConnection = myProject.getMessageBus().connect();
    myMessageBusConnection.subscribe(EditorComponentCreateListener.EDITOR_COMPONENT_CREATION, new OldEditorChangesHighlighter.MyEditorComponentCreateListener());

    myEditorSettingsListener = new OldEditorChangesHighlighter.MyEditorSettingsListener();
    EditorSettings.getInstance().addEditorSettingsListener(myEditorSettingsListener);
  }

  public void projectClosed() {
    EditorSettings.getInstance().removeEditorSettingsListener(myEditorSettingsListener);
    myMessageBusConnection.disconnect();
  }

  private void addHighighlighter(@NotNull EditorComponent editorComponent, boolean enabled) {
    MapSequence.fromMap(myEditorsHighlighters).put(editorComponent, new OldEditorComponentChangesHighligher(myProject, editorComponent, enabled));
  }

  private void disposeHighlighter(@NotNull EditorComponent editorComponent) {
    if (MapSequence.fromMap(myEditorsHighlighters).containsKey(editorComponent)) {
      MapSequence.fromMap(myEditorsHighlighters).get(editorComponent).dispose();
      MapSequence.fromMap(myEditorsHighlighters).removeKey(editorComponent);
    }
  }

  public void goToNextChange(@NotNull EditorContext editorContext) {
    EditorComponent editorComponent = editorContext.getNodeEditorComponent();
    if (MapSequence.fromMap(myEditorsHighlighters).containsKey(editorComponent)) {
      MapSequence.fromMap(myEditorsHighlighters).get(editorComponent).goToNextChange(editorContext);
    }
  }

  public void goToPreviousChange(@NotNull EditorContext editorContext) {
    EditorComponent editorComponent = editorContext.getNodeEditorComponent();
    if (MapSequence.fromMap(myEditorsHighlighters).containsKey(editorComponent)) {
      MapSequence.fromMap(myEditorsHighlighters).get(editorComponent).goToPreviousChange(editorContext);
    }
  }

  public boolean isPreviousChangeAvailable(@NotNull EditorContext editorContext) {
    EditorComponent editorComponent = editorContext.getNodeEditorComponent();
    if (MapSequence.fromMap(myEditorsHighlighters).containsKey(editorComponent)) {
      return MapSequence.fromMap(myEditorsHighlighters).get(editorComponent).isPreviousChangeAvailable(editorContext);
    }
    return false;
  }

  public boolean isNextChangeAvailable(@NotNull EditorContext editorContext) {
    EditorComponent editorComponent = editorContext.getNodeEditorComponent();
    if (MapSequence.fromMap(myEditorsHighlighters).containsKey(editorComponent)) {
      return MapSequence.fromMap(myEditorsHighlighters).get(editorComponent).isNextChangeAvailable(editorContext);
    }
    return false;
  }

  public void rollbackChanges(@NotNull EditorContext editorContext) {
    EditorComponent editorComponent = editorContext.getNodeEditorComponent();
    if (MapSequence.fromMap(myEditorsHighlighters).containsKey(editorComponent)) {
      MapSequence.fromMap(myEditorsHighlighters).get(editorComponent).rollbackChanges(editorContext);
    }
  }

  public static OldEditorChangesHighlighter getInstance(@NotNull Project project) {
    return project.getComponent(OldEditorChangesHighlighter.class);
  }

  private class MyEditorComponentCreateListener implements EditorComponentCreateListener {
    public MyEditorComponentCreateListener() {
    }

    public void editorComponentCreated(@NotNull EditorComponent editorComponent) {
      if (editorComponent instanceof NodeEditorComponent || editorComponent == myProject.getComponent(InspectorTool.class).getInspector()) {
        addHighighlighter(editorComponent, false);
      }
    }

    public void editorComponentDisposed(@NotNull EditorComponent editorComponent) {
      disposeHighlighter(editorComponent);
    }
  }

  private class MyEditorSettingsListener implements EditorSettingsListener {
    private boolean myLastHighlightChanges = EditorSettings.getInstance().isHighightChanges();

    public MyEditorSettingsListener() {
    }

    public void settingsChanged() {
      boolean currentHighlightChanges = EditorSettings.getInstance().isHighightChanges();
      if (myLastHighlightChanges != currentHighlightChanges) {
        for (OldEditorComponentChangesHighligher changesHighligher : Sequence.fromIterable(MapSequence.fromMap(myEditorsHighlighters).values())) {
          changesHighligher.setEnabled(currentHighlightChanges);
        }
      }
      myLastHighlightChanges = currentHighlightChanges;
    }
  }
}
