package jetbrains.mps.vcs.changesmanager;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.util.ManyToManyMap;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.vfs.IFile;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import com.intellij.openapi.vcs.impl.VcsFileStatusProvider;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.intellij.openapi.vcs.FileStatus;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import jetbrains.mps.smodel.persistence.def.ModelReadException;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.vcs.diff.ChangeSet;
import jetbrains.mps.vcs.diff.ChangeSetBuilder;
import jetbrains.mps.vcs.diff.ChangeSetImpl;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.vcs.diff.changes.AddRootChange;
import jetbrains.mps.vcs.diff.changes.NodeGroupChange;
import jetbrains.mps.vcs.diff.changes.NodeChange;
import java.util.Arrays;
import jetbrains.mps.vcs.diff.changes.DeleteRootChange;
import java.util.Collections;
import jetbrains.mps.smodel.SModelAdapter;
import jetbrains.mps.smodel.event.SModelPropertyEvent;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.vcs.diff.changes.SetPropertyChange;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class ChangesTracking {
  protected static Log log = LogFactory.getLog(ChangesTracking.class);

  private Project myProject;
  private CurrentDifference myDifference;
  private SimpleCommandQueue myQueue;
  private EditableSModelDescriptor myModelDescriptor;
  private ChangesTracking.MyModelListener myModelListener = new ChangesTracking.MyModelListener();
  private boolean myDisposed = false;
  private ManyToManyMap<SNodeId, ModelChange> myNodesToDirectChanges = new ManyToManyMap<SNodeId, ModelChange>();

  public ChangesTracking(@NotNull Project project, @NotNull CurrentDifference difference) {
    myDifference = difference;
    myProject = project;
    myModelDescriptor = myDifference.getModelDescriptor();
    myQueue = CurrentDifferenceRegistry.getInstance(project).getCommandQueue();
    synchronized (this) {
      myModelDescriptor.addModelListener(myModelListener);
    }
  }

  public void dispose() {
    synchronized (this) {
      if (!(myDisposed)) {
        myDisposed = true;
        myModelDescriptor.removeModelListener(myModelListener);
      }
    }
  }

  private void buildCaches() {
    myNodesToDirectChanges.clear();
    for (ModelChange ch : ListSequence.fromList(myDifference.getChangeSet().getModelChanges())) {
      for (SNodeId id : Sequence.fromIterable(getNodeIdsForChange(ch))) {
        myNodesToDirectChanges.addLink(id, ch);
      }
    }
  }

  /*package*/ void scheduleFullUpdate() {
    myQueue.addTask(new Runnable() {
      public void run() {
        update();
      }
    });
  }

  private void update() {
    myQueue.assertSoftlyIsCommandThread();
    if (!(myDifference.isEnabled())) {
      return;
    }
    myDifference.removeChangeSet();

    IFile modelFile = myModelDescriptor.getModelFile();
    if (modelFile == null || !(modelFile.exists())) {
      return;
    }
    VirtualFile modelVFile = VirtualFileUtils.getVirtualFile(modelFile);

    assert myProject.getComponent(VcsFileStatusProvider.class) != null;

    if (modelVFile == null || myProject.getComponent(ProjectLevelVcsManager.class).getVcsFor(modelVFile) == null) {
      return;
    }

    final SModel currentModel = myModelDescriptor.getSModel();
    final Wrappers._T<SModel> baseVersionModel = new Wrappers._T<SModel>(null);
    FileStatus status = myProject.getComponent(VcsFileStatusProvider.class).getFileStatus(modelVFile);
    if (FileStatus.NOT_CHANGED == status) {
      return;
    }
    if (BaseVersionUtil.isAddedFileStatus(status)) {
      baseVersionModel.value = new SModel(currentModel.getSModelReference());
    } else {
      String content = BaseVersionUtil.getBaseVersionContent(modelVFile, myProject);
      if (content == null && status != FileStatus.NOT_CHANGED && !(BaseVersionUtil.isAddedFileStatus(status))) {
        if (log.isErrorEnabled()) {
          log.error("Base version content is null while file status is " + status);
        }
      }
      if (content == null) {
        return;
      }
      try {
        baseVersionModel.value = ModelPersistence.readModel(content, false);
      } catch (ModelReadException e) {
        if (log.isWarnEnabled()) {
          log.warn("", e);
        }
        return;
      }
    }
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ChangeSet changeSet = ChangeSetBuilder.buildChangeSet(baseVersionModel.value, currentModel, true);
        myDifference.setChangeSet((ChangeSetImpl) changeSet);
        buildCaches();
      }
    });
  }

  private void addChange(@NotNull ModelChange change) {
    for (SNodeId id : Sequence.fromIterable(getNodeIdsForChange(change))) {
      myNodesToDirectChanges.addLink(id, change);
    }
    myDifference.addChange(change);
  }

  private void removeChange(@NotNull ModelChange change) {
    myNodesToDirectChanges.clearSecond(change);
    myDifference.removeChange(change);
  }

  private void runUpdateTask(final _FunctionTypes._void_P0_E0 task, SNode currentNode) {
    final List<SNodeId> ancestors = ListSequence.fromList(SNodeOperations.getAncestors(currentNode, null, true)).select(new ISelector<SNode, SNodeId>() {
      public SNodeId select(SNode a) {
        return a.getSNodeId();
      }
    }).toListSequence();
    myQueue.runTask(new Runnable() {
      public void run() {
        if (ListSequence.fromList(ancestors).translate(new ITranslator2<SNodeId, ModelChange>() {
          public Iterable<ModelChange> translate(SNodeId a) {
            return myNodesToDirectChanges.getByFirst(a);
          }
        }).any(new IWhereFilter<ModelChange>() {
          public boolean accept(ModelChange ch) {
            return ch instanceof AddRootChange || ch instanceof NodeGroupChange;
          }
        })) {
          // ignore 
        } else {
          myDifference.getBroadcaster().changeUpdateStarted();
          ModelAccess.instance().runReadAction(new Runnable() {
            public void run() {
              task.invoke();
            }
          });
          myDifference.getBroadcaster().changeUpdateFinished();
        }
      }
    });
  }

  private static Iterable<SNodeId> getNodeIdsForChange(@NotNull ModelChange change) {
    if (change instanceof NodeChange) {
      return Arrays.asList(((NodeChange) change).getAffectedNodeId());
    } else if (change instanceof AddRootChange || change instanceof DeleteRootChange) {
      return Arrays.asList(change.getRootId());
    } else if (change instanceof NodeGroupChange) {
      NodeGroupChange ngc = (NodeGroupChange) change;
      List<SNode> children = change.getChangeSet().getNewModel().getNodeById(ngc.getParentNodeId()).getChildren(ngc.getRole());
      return ListSequence.fromList(children).page(ngc.getResultBegin(), ngc.getResultBegin()).select(new ISelector<SNode, SNodeId>() {
        public SNodeId select(SNode n) {
          return n.getSNodeId();
        }
      });
    }
    return Sequence.fromIterable(Collections.<SNodeId>emptyList());
  }

  private static boolean eq_5iuzi5_a0a0a0a0a0a0e0a0a0a0a0a(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private class MyModelListener extends SModelAdapter {
    public MyModelListener() {
    }

    @Override
    public void propertyChanged(final SModelPropertyEvent event) {
      runUpdateTask(new _FunctionTypes._void_P0_E0() {
        public void invoke() {
          SNodeId nodeId = event.getNode().getSNodeId();
          final String propertyName = event.getPropertyName();
          Set<ModelChange> changes = myNodesToDirectChanges.getByFirst(nodeId);

          ModelChange old = SetSequence.fromSet(changes).findFirst(new IWhereFilter<ModelChange>() {
            public boolean accept(ModelChange ch) {
              return ch instanceof SetPropertyChange && eq_5iuzi5_a0a0a0a0a0a0e0a0a0a0a0a(propertyName, ((SetPropertyChange) ch).getPropertyName());
            }
          });
          if (old != null) {
            removeChange(old);
          }

          ChangeSet cs = myDifference.getChangeSet();
          ChangeSetBuilder builder = ChangeSetBuilder.createBuilder(cs);
          builder.buildPropertyChanges(cs.getOldModel().getNodeById(nodeId), event.getNode(), propertyName);
          ListSequence.fromList(builder.getNewChanges()).visitAll(new IVisitor<ModelChange>() {
            public void visit(ModelChange ch) {
              addChange(ch);
            }
          });
        }
      }, event.getNode());
    }
  }
}
