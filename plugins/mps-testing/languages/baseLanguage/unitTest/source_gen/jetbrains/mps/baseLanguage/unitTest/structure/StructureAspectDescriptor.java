package jetbrains.mps.baseLanguage.unitTest.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAfterTest = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.AfterTest").super_("jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod").parents("jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod").alias("afterTest", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAssertEquals = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.AssertEquals").super_("jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert").parents("jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert").alias("assert equals", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAssertFalse = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.AssertFalse").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder").children(new String[]{"condition"}, new boolean[]{false}).alias("assert false", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAssertInNotNull = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.AssertInNotNull").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder").children(new String[]{"expression"}, new boolean[]{false}).alias("assert is not null", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAssertIsNull = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.AssertIsNull").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder").children(new String[]{"expression"}, new boolean[]{false}).alias("assert is null", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAssertSame = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.AssertSame").super_("jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert").parents("jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert").alias("assert same (\"==\")", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAssertThrows = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.AssertThrows").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder").children(new String[]{"statement", "exceptionType"}, new boolean[]{false, false}).alias("assert throws", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAssertTrue = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.AssertTrue").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder").children(new String[]{"condition"}, new boolean[]{false}).alias("assert true", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBTestCase = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.BTestCase").super_("jetbrains.mps.baseLanguage.structure.ClassConcept").parents("jetbrains.mps.baseLanguage.structure.ClassConcept", "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase").properties("testCaseName").children(new String[]{"testMethodList", "beforeTest", "afterTest"}, new boolean[]{false, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptBeforeTest = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.BeforeTest").super_("jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod").parents("jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod").alias("beforeTest", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBinaryAssert = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder").children(new String[]{"expected", "actual"}, new boolean[]{false, false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptFail = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.Fail").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder").alias("fail", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptITestCase = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.ITestCase").interface_().parents("jetbrains.mps.baseLanguage.unitTest.structure.ITestable", "jetbrains.mps.lang.core.structure.INamedConcept").properties("canNotRunInProcess").create();
  /*package*/ final ConceptDescriptor myConceptITestMethod = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod").interface_().parents("jetbrains.mps.baseLanguage.unitTest.structure.ITestable").create();
  /*package*/ final ConceptDescriptor myConceptITestable = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.ITestable").interface_().create();
  /*package*/ final ConceptDescriptor myConceptMessage = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.Message").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"message"}, new boolean[]{false}).alias("message", "").create();
  /*package*/ final ConceptDescriptor myConceptMessageHolder = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder").interface_().children(new String[]{"message"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptPrepareMethod = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTestMethod = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.TestMethod").super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod").properties("methodName").create();
  /*package*/ final ConceptDescriptor myConceptTestMethodList = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.unitTest.structure.TestMethodList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"testMethod"}, new boolean[]{true}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAfterTest, myConceptAssertEquals, myConceptAssertFalse, myConceptAssertInNotNull, myConceptAssertIsNull, myConceptAssertSame, myConceptAssertThrows, myConceptAssertTrue, myConceptBTestCase, myConceptBeforeTest, myConceptBinaryAssert, myConceptFail, myConceptITestCase, myConceptITestMethod, myConceptITestable, myConceptMessage, myConceptMessageHolder, myConceptPrepareMethod, myConceptTestMethod, myConceptTestMethodList);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0x, conceptFqName)) {
      case 0:
        return myConceptAfterTest;
      case 1:
        return myConceptAssertEquals;
      case 2:
        return myConceptAssertFalse;
      case 3:
        return myConceptAssertInNotNull;
      case 4:
        return myConceptAssertIsNull;
      case 5:
        return myConceptAssertSame;
      case 6:
        return myConceptAssertThrows;
      case 7:
        return myConceptAssertTrue;
      case 8:
        return myConceptBTestCase;
      case 9:
        return myConceptBeforeTest;
      case 10:
        return myConceptBinaryAssert;
      case 11:
        return myConceptFail;
      case 12:
        return myConceptITestCase;
      case 13:
        return myConceptITestMethod;
      case 14:
        return myConceptITestable;
      case 15:
        return myConceptMessage;
      case 16:
        return myConceptMessageHolder;
      case 17:
        return myConceptPrepareMethod;
      case 18:
        return myConceptTestMethod;
      case 19:
        return myConceptTestMethodList;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0x = new String[]{"jetbrains.mps.baseLanguage.unitTest.structure.AfterTest", "jetbrains.mps.baseLanguage.unitTest.structure.AssertEquals", "jetbrains.mps.baseLanguage.unitTest.structure.AssertFalse", "jetbrains.mps.baseLanguage.unitTest.structure.AssertInNotNull", "jetbrains.mps.baseLanguage.unitTest.structure.AssertIsNull", "jetbrains.mps.baseLanguage.unitTest.structure.AssertSame", "jetbrains.mps.baseLanguage.unitTest.structure.AssertThrows", "jetbrains.mps.baseLanguage.unitTest.structure.AssertTrue", "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase", "jetbrains.mps.baseLanguage.unitTest.structure.BeforeTest", "jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert", "jetbrains.mps.baseLanguage.unitTest.structure.Fail", "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase", "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod", "jetbrains.mps.baseLanguage.unitTest.structure.ITestable", "jetbrains.mps.baseLanguage.unitTest.structure.Message", "jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder", "jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod", "jetbrains.mps.baseLanguage.unitTest.structure.TestMethod", "jetbrains.mps.baseLanguage.unitTest.structure.TestMethodList"};
}
