package jetbrains.mps.baseLanguage.unitTest.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;

public class TestMethod_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getTestCase_1216134500045(SNode thisNode) {
    SNode method = thisNode;
    return SNodeOperations.getAncestor(method, "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase", false, false);
  }

  public static String virtual_getTestName_1216136419751(SNode thisNode) {
    SNode method = thisNode;
    return SPropertyOperations.getString(method, "name");
  }

  public static List<SNode> virtual_getThrowableTypes_6204026822016975623(SNode thisNode) {
    List<SNode> result = new ArrayList<SNode>();
    ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "throwsItem", true)));
    ListSequence.fromList(result).addElement(_quotation_createNode_6y0hvj_a0a2a2());
    return result;
  }

  private static SNode _quotation_createNode_6y0hvj_a0a2a2() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Exception")));
    return quotedNode_1;
  }
}
