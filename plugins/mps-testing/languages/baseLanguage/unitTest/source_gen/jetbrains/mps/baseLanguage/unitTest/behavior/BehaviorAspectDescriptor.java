package jetbrains.mps.baseLanguage.unitTest.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myTestMethod__BehaviorDescriptor = new TestMethod__BehaviorDescriptor();
  private final BHDescriptor myBTestCase__BehaviorDescriptor = new BTestCase__BehaviorDescriptor();
  private final BHDescriptor myITestable__BehaviorDescriptor = new ITestable__BehaviorDescriptor();
  private final BHDescriptor myITestCase__BehaviorDescriptor = new ITestCase__BehaviorDescriptor();
  private final BHDescriptor myITestMethod__BehaviorDescriptor = new ITestMethod__BehaviorDescriptor();
  private final BHDescriptor myBeforeTest__BehaviorDescriptor = new BeforeTest__BehaviorDescriptor();
  private final BHDescriptor myAfterTest__BehaviorDescriptor = new AfterTest__BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[7];
    myConceptBehaviorIds[0] = 0x110dc92748eL;
    myConceptBehaviorIds[1] = 0x110dc94e923L;
    myConceptBehaviorIds[2] = 0x11b08a01119L;
    myConceptBehaviorIds[3] = 0x11b2709bd56L;
    myConceptBehaviorIds[4] = 0x11b27438a3dL;
    myConceptBehaviorIds[5] = 0x72682467022fc039L;
    myConceptBehaviorIds[6] = 0x72682467022fd3ddL;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myTestMethod__BehaviorDescriptor;
      case 1:
        return myBTestCase__BehaviorDescriptor;
      case 2:
        return myITestable__BehaviorDescriptor;
      case 3:
        return myITestCase__BehaviorDescriptor;
      case 4:
        return myITestMethod__BehaviorDescriptor;
      case 5:
        return myBeforeTest__BehaviorDescriptor;
      case 6:
        return myAfterTest__BehaviorDescriptor;
      default:
        return null;
    }
  }
}
