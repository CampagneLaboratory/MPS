package jetbrains.mps.lang.test.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.impl.cellActions.CellAction_Comment;

public class AnonymousCellAnnotation_comment_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.lang.core.editor.BaseEditorContextHints.comment"});
  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createNextEditor_7nllh3_a(editorContext, node);
  }
  private EditorCell createNextEditor_7nllh3_a(EditorContext editorContext, SNode node) {
    try {
      editorContext.getCellFactory().pushCellContext();
      editorContext.getCellFactory().removeCellContextHints(new String[]{"jetbrains.mps.lang.core.editor.BaseEditorContextHints.comment"});
      {
        EditorCell editorCell = editorContext.getCellFactory().createEditorCell(node, false, AnonymousCellAnnotation_comment_Editor.class);
        editorCell.setBig(true);
        editorCell.setAction(CellActionType.COMMENT, new CellAction_Comment(node));
        return editorCell;
      }
    } finally {
      editorContext.getCellFactory().popCellContext();
    }
  }
}
