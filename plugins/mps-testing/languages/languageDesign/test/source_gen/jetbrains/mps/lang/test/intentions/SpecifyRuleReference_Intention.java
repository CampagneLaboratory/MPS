package jetbrains.mps.lang.test.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.typesystem.inference.ITypeContextOwner;
import jetbrains.mps.typesystem.inference.DefaultTypecheckingContextOwner;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import jetbrains.mps.typesystem.inference.ITypechecking;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.extapi.model.SModelBase;
import jetbrains.mps.kernel.model.MissingDependenciesFixer;
import jetbrains.mps.intentions.IntentionDescriptor;

public class SpecifyRuleReference_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public SpecifyRuleReference_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.test.structure.NodeRuleCheckOperation";
  }

  public String getPresentation() {
    return "SpecifyRuleReference";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.test.intentions.SpecifyRuleReference_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.test";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c89590386(jetbrains.mps.lang.test.intentions)", "7344575040114344985");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new SpecifyRuleReference_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Specify Rule Reference";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      ITypeContextOwner owner = new DefaultTypecheckingContextOwner();
      SNode root = SNodeOperations.getContainingRoot(node);
      TypeContextManager.getInstance().runTypeCheckingAction(owner, root, new ITypechecking.Action() {
        public void run(TypeCheckingContext p0) {
          SNode nodeToCheck = SNodeOperations.getParent(SNodeOperations.getParent(node));
          p0.checkIfNotChecked(nodeToCheck, true);
          IErrorReporter reporter = p0.getTypeMessageDontCheck(nodeToCheck);
          SNodePointer ref = new SNodePointer(reporter.getRuleModel(), reporter.getRuleId());
          SNode msgStatementAnnotation = AttributeOperations.getAttribute(SNodeOperations.cast(ref.resolve(MPSModuleRepository.getInstance()), "jetbrains.mps.lang.typesystem.structure.ReportErrorStatement"), new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.typesystem.structure.MessageStatementAnnotation"));
          SLinkOperations.setTarget(node, "ruleRef", SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.MessageStatementReference", null), true);
          SLinkOperations.setTarget(SLinkOperations.getTarget(node, "ruleRef", true), "declaration", msgStatementAnnotation, false);
          ((SModelBase) SNodeOperations.getModel(node)).addModelImport(SNodeOperations.getModel(msgStatementAnnotation).getReference(), false);
          MissingDependenciesFixer.fixDependencies(SNodeOperations.getModel(node), true);
          // <node> 
        }
      });
    }

    public IntentionDescriptor getDescriptor() {
      return SpecifyRuleReference_Intention.this;
    }
  }
}
