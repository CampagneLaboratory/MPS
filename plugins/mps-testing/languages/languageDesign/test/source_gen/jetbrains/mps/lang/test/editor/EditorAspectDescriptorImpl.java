package jetbrains.mps.lang.test.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.EditorAspect;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<EditorAspect> getEditorAspects(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<EditorAspect>singletonList(new AnonymousCellAnnotation_Editor());
      case 1:
        return Collections.<EditorAspect>singletonList(new AssertMatch_Editor());
      case 2:
        return Collections.<EditorAspect>singletonList(new BootstrapActionReference_Editor());
      case 3:
        return Collections.<EditorAspect>singletonList(new CheckDataFlowOperation_Editor());
      case 4:
        return Collections.<EditorAspect>singletonList(new CheckNodeDataflow_Editor());
      case 5:
        return Collections.<EditorAspect>singletonList(new CheckNodeForErrors_Editor());
      case 6:
        return Collections.<EditorAspect>singletonList(new EditorComponentExpression_Editor());
      case 7:
        return Collections.<EditorAspect>singletonList(new EditorExpression_Editor());
      case 8:
        return Collections.<EditorAspect>singletonList(new EditorTestCase_Editor());
      case 9:
        return Collections.<EditorAspect>singletonList(new ExpressionContainer_Editor());
      case 10:
        return Collections.<EditorAspect>singletonList(new InvokeActionStatement_Editor());
      case 11:
        return Collections.<EditorAspect>singletonList(new InvokeIntentionStatement_Editor());
      case 12:
        return Collections.<EditorAspect>singletonList(new MPSActionReference_Editor());
      case 13:
        return Collections.<EditorAspect>singletonList(new MockAnnotation_Editor());
      case 14:
        return Collections.<EditorAspect>singletonList(new ModelExpression_Editor());
      case 15:
        return Collections.<EditorAspect>singletonList(new NodeErrorPropety_Editor());
      case 16:
        return Collections.<EditorAspect>singletonList(new NodeOperationsContainer_Editor());
      case 17:
        return Collections.<EditorAspect>singletonList(new NodePropertiesContainer_Editor());
      case 18:
        return Collections.<EditorAspect>singletonList(new NodeReachable_Editor());
      case 19:
        return Collections.<EditorAspect>singletonList(new NodeTypeProperty_Editor());
      case 20:
        return Collections.<EditorAspect>singletonList(new NodeTypeSetProperty_Editor());
      case 21:
        return Collections.<EditorAspect>singletonList(new NodeUnreachable_Editor());
      case 22:
        return Collections.<EditorAspect>singletonList(new NodeWarningProperty_Editor());
      case 23:
        return Collections.<EditorAspect>singletonList(new NodesTestCase_Editor());
      case 24:
        return Collections.<EditorAspect>singletonList(new PressKeyStatement_Editor());
      case 25:
        return Collections.<EditorAspect>singletonList(new ProjectExpression_Editor());
      case 26:
        return Collections.<EditorAspect>singletonList(new ScopesExpectedNode_Editor());
      case 27:
        return Collections.<EditorAspect>singletonList(new ScopesTest_Editor());
      case 28:
        return Collections.<EditorAspect>singletonList(new SimpleNodeTest_Editor());
      case 29:
        return Collections.<EditorAspect>singletonList(new SwitchToInspector_Editor());
      case 30:
        return Collections.<EditorAspect>singletonList(new TestInfo_Editor());
      case 31:
        return Collections.<EditorAspect>singletonList(new TestNode_Editor());
      case 32:
        return Collections.<EditorAspect>singletonList(new TestNodeAnnotation_Editor());
      case 33:
        return Collections.<EditorAspect>singletonList(new TestNodeReference_Editor());
      case 34:
        return Collections.<EditorAspect>singletonList(new TypeKeyStatement_Editor());
      case 35:
        return Collections.<EditorAspect>singletonList(new TypesCheckOperation_Editor());
      case 36:
        return Collections.<EditorAspect>singletonList(new VariableInialized_Editor());
      case 37:
        return Collections.<EditorAspect>singletonList(new VariableLive_Editor());
      default:
    }
    return Collections.emptyList();
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.lang.test.structure.AnonymousCellAnnotation", "jetbrains.mps.lang.test.structure.AssertMatch", "jetbrains.mps.lang.test.structure.BootstrapActionReference", "jetbrains.mps.lang.test.structure.CheckDataFlowOperation", "jetbrains.mps.lang.test.structure.CheckNodeDataflow", "jetbrains.mps.lang.test.structure.CheckNodeForErrors", "jetbrains.mps.lang.test.structure.EditorComponentExpression", "jetbrains.mps.lang.test.structure.EditorExpression", "jetbrains.mps.lang.test.structure.EditorTestCase", "jetbrains.mps.lang.test.structure.ExpressionContainer", "jetbrains.mps.lang.test.structure.InvokeActionStatement", "jetbrains.mps.lang.test.structure.InvokeIntentionStatement", "jetbrains.mps.lang.test.structure.MPSActionReference", "jetbrains.mps.lang.test.structure.MockAnnotation", "jetbrains.mps.lang.test.structure.ModelExpression", "jetbrains.mps.lang.test.structure.NodeErrorPropety", "jetbrains.mps.lang.test.structure.NodeOperationsContainer", "jetbrains.mps.lang.test.structure.NodePropertiesContainer", "jetbrains.mps.lang.test.structure.NodeReachable", "jetbrains.mps.lang.test.structure.NodeTypeProperty", "jetbrains.mps.lang.test.structure.NodeTypeSetProperty", "jetbrains.mps.lang.test.structure.NodeUnreachable", "jetbrains.mps.lang.test.structure.NodeWarningProperty", "jetbrains.mps.lang.test.structure.NodesTestCase", "jetbrains.mps.lang.test.structure.PressKeyStatement", "jetbrains.mps.lang.test.structure.ProjectExpression", "jetbrains.mps.lang.test.structure.ScopesExpectedNode", "jetbrains.mps.lang.test.structure.ScopesTest", "jetbrains.mps.lang.test.structure.SimpleNodeTest", "jetbrains.mps.lang.test.structure.SwitchToInspector", "jetbrains.mps.lang.test.structure.TestInfo", "jetbrains.mps.lang.test.structure.TestNode", "jetbrains.mps.lang.test.structure.TestNodeAnnotation", "jetbrains.mps.lang.test.structure.TestNodeReference", "jetbrains.mps.lang.test.structure.TypeKeyStatement", "jetbrains.mps.lang.test.structure.TypesCheckOperation", "jetbrains.mps.lang.test.structure.VariableInialized", "jetbrains.mps.lang.test.structure.VariableLive"};
}
