package jetbrains.mps.lang.test.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;

public class ScopeTest_DeleteExpectedNodes {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new ScopeTest_DeleteExpectedNodes.ScopeTest_DeleteExpectedNodes_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new ScopeTest_DeleteExpectedNodes.ScopeTest_DeleteExpectedNodes_BACKSPACE(node));
  }
  public static class ScopeTest_DeleteExpectedNodes_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ScopeTest_DeleteExpectedNodes_DELETE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(new UUID(-8825571760360698496l, -7431307307277756308l), 511191073233700873l, 3655334166513314307l, "nodes"))).clear();
      SLinkOperations.setTarget(node, MetaAdapterFactory.getReferenceLink(new UUID(-8825571760360698496l, -7431307307277756308l), 511191073233700873l, 5449224527592117654l, "checkingReference"), null);
    }
  }
  public static class ScopeTest_DeleteExpectedNodes_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ScopeTest_DeleteExpectedNodes_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(new UUID(-8825571760360698496l, -7431307307277756308l), 511191073233700873l, 3655334166513314307l, "nodes"))).clear();
      SLinkOperations.setTarget(node, MetaAdapterFactory.getReferenceLink(new UUID(-8825571760360698496l, -7431307307277756308l), 511191073233700873l, 5449224527592117654l, "checkingReference"), null);
    }
  }
}
