package jetbrains.mps.lang.test.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.test.runtime.NodeCheckerUtil;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.errors.MessageStatus;
import junit.framework.Assert;

public class NodeTypeSystemWarningCheckOperation_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_perform_245688835340859348(SNode thisNode, SNode node) {
    try {
      final SNode operation = thisNode;
      NodeCheckerUtil.checkNodeWithCheckingAction(node, new CheckingAction(operation) {
        public void checkOperation(TypeCheckingContext context) {
          assert SNodeOperations.isInstanceOf(operation, "jetbrains.mps.lang.test.structure.NodeTypeSystemWarningCheckOperation");
          List<IErrorReporter> errorReports = ListSequence.fromList(((List<IErrorReporter>) context.getTypeMessagesDontCheck(getNodeToCheck()))).where(new IWhereFilter<IErrorReporter>() {
            public boolean accept(IErrorReporter it) {
              return it.getMessageStatus() == MessageStatus.WARNING;
            }
          }).toListSequence();

          final String errorString = "node <" + NodeCheckerUtil.nodeWithIdToString(getNodeToCheck()) + "> does not have expected warning message";

          Assert.assertTrue(errorString, NodeCheckerUtil.nodeHasExpectedTypeSystemMessage(errorReports));
        }
      });
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  public static String virtual_getDefaultName_8578280453511146306(SNode thisNode) {
    return "NodeTypeSystemWarningCheck";
  }
}
