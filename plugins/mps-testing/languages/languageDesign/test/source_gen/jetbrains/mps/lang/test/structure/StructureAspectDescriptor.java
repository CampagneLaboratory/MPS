package jetbrains.mps.lang.test.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractNodeAssert = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AbstractNodeAssert").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"nodeToCheck"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractNodeErrorCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptAbstractNodeRuleCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation", "jetbrains.mps.lang.test.structure.IChecksRules").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptAbstractNodeWarningCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptActionReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ActionReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptAnonymousCellAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AnonymousCellAnnotation").super_("jetbrains.mps.lang.test.structure.INodeAnnotation").parents("jetbrains.mps.lang.test.structure.INodeAnnotation", "jetbrains.mps.lang.core.structure.INamedConcept").properties("cellId", "caretPosition", "isLastPosition", "useLabelSelection", "selectionStart", "selectionEnd", "isInInspector").references("nodeRangeSelectionStart", "nodeRangeSelectionEnd").create();
  /*package*/ final ConceptDescriptor myConceptAssertMatch = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AssertMatch").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"before", "after"}, new boolean[]{true, true}).alias("assert match", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBootstrapActionReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.BootstrapActionReference").super_("jetbrains.mps.lang.test.structure.ActionReference").parents("jetbrains.mps.lang.test.structure.ActionReference").properties("actionId").alias("by id:", "").create();
  /*package*/ final ConceptDescriptor myConceptCheckDataFlowOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.CheckDataFlowOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").alias("for dataflow messages", "").create();
  /*package*/ final ConceptDescriptor myConceptCheckNodeDataflow = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.CheckNodeDataflow").super_("jetbrains.mps.lang.test.structure.AbstractNodeAssert").parents("jetbrains.mps.lang.test.structure.AbstractNodeAssert").alias("check node dataflow", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCheckNodeForErrorMessagesOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.CheckNodeForErrorMessagesOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").properties("allowErrors", "allowWarnings").alias("for error messages", "").create();
  /*package*/ final ConceptDescriptor myConceptCheckNodeForErrors = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.CheckNodeForErrors").super_("jetbrains.mps.lang.test.structure.AbstractNodeAssert").parents("jetbrains.mps.lang.test.structure.AbstractNodeAssert").alias("check nodes error messages", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDragMouseStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.DragMouseStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").properties("x", "y").alias("drag mouse", "").create();
  /*package*/ final ConceptDescriptor myConceptEditorComponentExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.EditorComponentExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("editor component", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEditorExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.EditorExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("editor", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEditorOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.EditorOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEditorTestCase = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.EditorTestCase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod", "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase", "jetbrains.mps.lang.core.structure.ISuppressErrors").properties("description").children(new String[]{"nodeToEdit", "result", "code"}, new boolean[]{false, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptExpressionContainer = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ExpressionContainer").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expression"}, new boolean[]{false}).alias("{ expr }", "expression container (used inside test nodes)").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIChecksRules = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.IChecksRules").interface_().create();
  /*package*/ final ConceptDescriptor myConceptINodeAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.INodeAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").create();
  /*package*/ final ConceptDescriptor myConceptIReferenceAttachable = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.IReferenceAttachable").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIRuleReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.IRuleReference").interface_().references("declaration").create();
  /*package*/ final ConceptDescriptor myConceptInvokeActionStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.InvokeActionStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"actionReference"}, new boolean[]{false}).alias("invoke action", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInvokeIntentionStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.InvokeIntentionStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").references("intention").alias("invoke intention", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMPSActionReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.MPSActionReference").super_("jetbrains.mps.lang.test.structure.ActionReference").parents("jetbrains.mps.lang.test.structure.ActionReference").references("action").alias("->", "").create();
  /*package*/ final ConceptDescriptor myConceptMockAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.MockAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").create();
  /*package*/ final ConceptDescriptor myConceptModelExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ModelExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("model", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodeCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeCheckOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().alias("", "tag for checking either type errors or error messages, attached to some node").create();
  /*package*/ final ConceptDescriptor myConceptNodeConstraintsErrorCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeConstraintsErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"errorRef"}, new boolean[]{false}).alias("has constraints error", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeConstraintsWarningCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeConstraintsWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"warningRef"}, new boolean[]{false}).alias("has constraints warning", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeErrorCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").children(new String[]{"errorRef"}, new boolean[]{false}).alias("has error", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeExpectedTypeCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeExpectedTypeCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeTypeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeTypeCheckOperation").alias("has expected type", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeOperationsContainer = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeOperationsContainer").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").children(new String[]{"nodeOperations"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptNodePropertiesContainer = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodePropertiesContainer").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").children(new String[]{"nodeCheckOperations"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptNodeReachable = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeReachable").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").alias("reachable", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeRuleCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation", "jetbrains.mps.lang.test.structure.IReferenceAttachable").abstract_().alias("", "check specific rule").create();
  /*package*/ final ConceptDescriptor myConceptNodeTypeCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").children(new String[]{"type"}, new boolean[]{false}).alias("has type", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeTypeSetCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeSetCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").children(new String[]{"type"}, new boolean[]{true}).alias("has type in", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeTypeSystemErrorCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeSystemErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").alias("has typesystem error", "check for unknown typesystem error").create();
  /*package*/ final ConceptDescriptor myConceptNodeTypeSystemRuleCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptNodeTypeSystemWarningCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeSystemWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").alias("has typesystem warning", "check for unknown typesystem warning").create();
  /*package*/ final ConceptDescriptor myConceptNodeUnknownErrorCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeUnknownErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"errorRef"}, new boolean[]{false}).alias("has error", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeUnknownWarningCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeUnknownWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"warningRef"}, new boolean[]{false}).alias("has warning", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeUnreachable = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeUnreachable").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").alias("unreachable", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeWarningCheckOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").children(new String[]{"warningRef"}, new boolean[]{false}).alias("has warning", "").create();
  /*package*/ final ConceptDescriptor myConceptNodesTestCase = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodesTestCase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier").properties("needsNoWriteAction").children(new String[]{"nodesToCheck", "testMethods", "methods"}, new boolean[]{true, true, true}).create();
  /*package*/ final ConceptDescriptor myConceptNodesTestMethod = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodesTestMethod").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptPressKeyStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.PressKeyStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"keyStrokes"}, new boolean[]{true}).alias("press keys", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPressMouseStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.PressMouseStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").properties("x", "y").children(new String[]{"statementList"}, new boolean[]{false}).alias("press mouse", "").create();
  /*package*/ final ConceptDescriptor myConceptProjectExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ProjectExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("project", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptReportErrorStatementReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ReportErrorStatementReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.test.structure.IRuleReference", "jetbrains.mps.lang.core.structure.BaseConcept").references("declaration").create();
  /*package*/ final ConceptDescriptor myConceptScopesExpectedNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ScopesExpectedNode").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("ref").create();
  /*package*/ final ConceptDescriptor myConceptScopesTest = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ScopesTest").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").references("checkingReference").children(new String[]{"nodes"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptSimpleNodeTest = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.SimpleNodeTest").super_("jetbrains.mps.lang.test.structure.NodesTestMethod").parents("jetbrains.mps.lang.test.structure.NodesTestMethod").alias("test method", "").create();
  /*package*/ final ConceptDescriptor myConceptSwitchToInspector = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.SwitchToInspector").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("switch to inspector", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTestInfo = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TestInfo").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("projectPath", "reOpenProject").create();
  /*package*/ final ConceptDescriptor myConceptTestNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TestNode").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"nodeToCheck"}, new boolean[]{false}).alias("test node", "").create();
  /*package*/ final ConceptDescriptor myConceptTestNodeAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TestNodeAnnotation").super_("jetbrains.mps.lang.test.structure.INodeAnnotation").parents("jetbrains.mps.lang.test.structure.INodeAnnotation", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptTestNodeReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TestNodeReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("declaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTypeKeyStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TypeKeyStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").properties("keys").alias("type", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUnknownRuleReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.UnknownRuleReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.test.structure.IRuleReference").references("declaration").create();
  /*package*/ final ConceptDescriptor myConceptVariableAlive = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.VariableAlive").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").children(new String[]{"var"}, new boolean[]{false}).alias("variable alive", "").create();
  /*package*/ final ConceptDescriptor myConceptVariableInitialized = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.VariableInitialized").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").children(new String[]{"var"}, new boolean[]{false}).alias("variable initialized", "").create();
  /*package*/ final ConceptDescriptor myConceptWarningStatementReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.WarningStatementReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.test.structure.IRuleReference", "jetbrains.mps.lang.core.structure.BaseConcept").references("declaration").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractNodeAssert, myConceptAbstractNodeErrorCheckOperation, myConceptAbstractNodeRuleCheckOperation, myConceptAbstractNodeWarningCheckOperation, myConceptActionReference, myConceptAnonymousCellAnnotation, myConceptAssertMatch, myConceptBootstrapActionReference, myConceptCheckDataFlowOperation, myConceptCheckNodeDataflow, myConceptCheckNodeForErrorMessagesOperation, myConceptCheckNodeForErrors, myConceptDragMouseStatement, myConceptEditorComponentExpression, myConceptEditorExpression, myConceptEditorOperation, myConceptEditorTestCase, myConceptExpressionContainer, myConceptIChecksRules, myConceptINodeAnnotation, myConceptIReferenceAttachable, myConceptIRuleReference, myConceptInvokeActionStatement, myConceptInvokeIntentionStatement, myConceptMPSActionReference, myConceptMockAnnotation, myConceptModelExpression, myConceptNodeCheckOperation, myConceptNodeConstraintsErrorCheckOperation, myConceptNodeConstraintsWarningCheckOperation, myConceptNodeErrorCheckOperation, myConceptNodeExpectedTypeCheckOperation, myConceptNodeOperationsContainer, myConceptNodePropertiesContainer, myConceptNodeReachable, myConceptNodeRuleCheckOperation, myConceptNodeTypeCheckOperation, myConceptNodeTypeSetCheckOperation, myConceptNodeTypeSystemErrorCheckOperation, myConceptNodeTypeSystemRuleCheckOperation, myConceptNodeTypeSystemWarningCheckOperation, myConceptNodeUnknownErrorCheckOperation, myConceptNodeUnknownWarningCheckOperation, myConceptNodeUnreachable, myConceptNodeWarningCheckOperation, myConceptNodesTestCase, myConceptNodesTestMethod, myConceptPressKeyStatement, myConceptPressMouseStatement, myConceptProjectExpression, myConceptReportErrorStatementReference, myConceptScopesExpectedNode, myConceptScopesTest, myConceptSimpleNodeTest, myConceptSwitchToInspector, myConceptTestInfo, myConceptTestNode, myConceptTestNodeAnnotation, myConceptTestNodeReference, myConceptTypeKeyStatement, myConceptUnknownRuleReference, myConceptVariableAlive, myConceptVariableInitialized, myConceptWarningStatementReference);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0pc, conceptFqName)) {
      case 0:
        return myConceptAbstractNodeAssert;
      case 1:
        return myConceptAbstractNodeErrorCheckOperation;
      case 2:
        return myConceptAbstractNodeRuleCheckOperation;
      case 3:
        return myConceptAbstractNodeWarningCheckOperation;
      case 4:
        return myConceptActionReference;
      case 5:
        return myConceptAnonymousCellAnnotation;
      case 6:
        return myConceptAssertMatch;
      case 7:
        return myConceptBootstrapActionReference;
      case 8:
        return myConceptCheckDataFlowOperation;
      case 9:
        return myConceptCheckNodeDataflow;
      case 10:
        return myConceptCheckNodeForErrorMessagesOperation;
      case 11:
        return myConceptCheckNodeForErrors;
      case 12:
        return myConceptDragMouseStatement;
      case 13:
        return myConceptEditorComponentExpression;
      case 14:
        return myConceptEditorExpression;
      case 15:
        return myConceptEditorOperation;
      case 16:
        return myConceptEditorTestCase;
      case 17:
        return myConceptExpressionContainer;
      case 18:
        return myConceptIChecksRules;
      case 19:
        return myConceptINodeAnnotation;
      case 20:
        return myConceptIReferenceAttachable;
      case 21:
        return myConceptIRuleReference;
      case 22:
        return myConceptInvokeActionStatement;
      case 23:
        return myConceptInvokeIntentionStatement;
      case 24:
        return myConceptMPSActionReference;
      case 25:
        return myConceptMockAnnotation;
      case 26:
        return myConceptModelExpression;
      case 27:
        return myConceptNodeCheckOperation;
      case 28:
        return myConceptNodeConstraintsErrorCheckOperation;
      case 29:
        return myConceptNodeConstraintsWarningCheckOperation;
      case 30:
        return myConceptNodeErrorCheckOperation;
      case 31:
        return myConceptNodeExpectedTypeCheckOperation;
      case 32:
        return myConceptNodeOperationsContainer;
      case 33:
        return myConceptNodePropertiesContainer;
      case 34:
        return myConceptNodeReachable;
      case 35:
        return myConceptNodeRuleCheckOperation;
      case 36:
        return myConceptNodeTypeCheckOperation;
      case 37:
        return myConceptNodeTypeSetCheckOperation;
      case 38:
        return myConceptNodeTypeSystemErrorCheckOperation;
      case 39:
        return myConceptNodeTypeSystemRuleCheckOperation;
      case 40:
        return myConceptNodeTypeSystemWarningCheckOperation;
      case 41:
        return myConceptNodeUnknownErrorCheckOperation;
      case 42:
        return myConceptNodeUnknownWarningCheckOperation;
      case 43:
        return myConceptNodeUnreachable;
      case 44:
        return myConceptNodeWarningCheckOperation;
      case 45:
        return myConceptNodesTestCase;
      case 46:
        return myConceptNodesTestMethod;
      case 47:
        return myConceptPressKeyStatement;
      case 48:
        return myConceptPressMouseStatement;
      case 49:
        return myConceptProjectExpression;
      case 50:
        return myConceptReportErrorStatementReference;
      case 51:
        return myConceptScopesExpectedNode;
      case 52:
        return myConceptScopesTest;
      case 53:
        return myConceptSimpleNodeTest;
      case 54:
        return myConceptSwitchToInspector;
      case 55:
        return myConceptTestInfo;
      case 56:
        return myConceptTestNode;
      case 57:
        return myConceptTestNodeAnnotation;
      case 58:
        return myConceptTestNodeReference;
      case 59:
        return myConceptTypeKeyStatement;
      case 60:
        return myConceptUnknownRuleReference;
      case 61:
        return myConceptVariableAlive;
      case 62:
        return myConceptVariableInitialized;
      case 63:
        return myConceptWarningStatementReference;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0pc = new String[]{"jetbrains.mps.lang.test.structure.AbstractNodeAssert", "jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation", "jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation", "jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation", "jetbrains.mps.lang.test.structure.ActionReference", "jetbrains.mps.lang.test.structure.AnonymousCellAnnotation", "jetbrains.mps.lang.test.structure.AssertMatch", "jetbrains.mps.lang.test.structure.BootstrapActionReference", "jetbrains.mps.lang.test.structure.CheckDataFlowOperation", "jetbrains.mps.lang.test.structure.CheckNodeDataflow", "jetbrains.mps.lang.test.structure.CheckNodeForErrorMessagesOperation", "jetbrains.mps.lang.test.structure.CheckNodeForErrors", "jetbrains.mps.lang.test.structure.DragMouseStatement", "jetbrains.mps.lang.test.structure.EditorComponentExpression", "jetbrains.mps.lang.test.structure.EditorExpression", "jetbrains.mps.lang.test.structure.EditorOperation", "jetbrains.mps.lang.test.structure.EditorTestCase", "jetbrains.mps.lang.test.structure.ExpressionContainer", "jetbrains.mps.lang.test.structure.IChecksRules", "jetbrains.mps.lang.test.structure.INodeAnnotation", "jetbrains.mps.lang.test.structure.IReferenceAttachable", "jetbrains.mps.lang.test.structure.IRuleReference", "jetbrains.mps.lang.test.structure.InvokeActionStatement", "jetbrains.mps.lang.test.structure.InvokeIntentionStatement", "jetbrains.mps.lang.test.structure.MPSActionReference", "jetbrains.mps.lang.test.structure.MockAnnotation", "jetbrains.mps.lang.test.structure.ModelExpression", "jetbrains.mps.lang.test.structure.NodeCheckOperation", "jetbrains.mps.lang.test.structure.NodeConstraintsErrorCheckOperation", "jetbrains.mps.lang.test.structure.NodeConstraintsWarningCheckOperation", "jetbrains.mps.lang.test.structure.NodeErrorCheckOperation", "jetbrains.mps.lang.test.structure.NodeExpectedTypeCheckOperation", "jetbrains.mps.lang.test.structure.NodeOperationsContainer", "jetbrains.mps.lang.test.structure.NodePropertiesContainer", "jetbrains.mps.lang.test.structure.NodeReachable", "jetbrains.mps.lang.test.structure.NodeRuleCheckOperation", "jetbrains.mps.lang.test.structure.NodeTypeCheckOperation", "jetbrains.mps.lang.test.structure.NodeTypeSetCheckOperation", "jetbrains.mps.lang.test.structure.NodeTypeSystemErrorCheckOperation", "jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation", "jetbrains.mps.lang.test.structure.NodeTypeSystemWarningCheckOperation", "jetbrains.mps.lang.test.structure.NodeUnknownErrorCheckOperation", "jetbrains.mps.lang.test.structure.NodeUnknownWarningCheckOperation", "jetbrains.mps.lang.test.structure.NodeUnreachable", "jetbrains.mps.lang.test.structure.NodeWarningCheckOperation", "jetbrains.mps.lang.test.structure.NodesTestCase", "jetbrains.mps.lang.test.structure.NodesTestMethod", "jetbrains.mps.lang.test.structure.PressKeyStatement", "jetbrains.mps.lang.test.structure.PressMouseStatement", "jetbrains.mps.lang.test.structure.ProjectExpression", "jetbrains.mps.lang.test.structure.ReportErrorStatementReference", "jetbrains.mps.lang.test.structure.ScopesExpectedNode", "jetbrains.mps.lang.test.structure.ScopesTest", "jetbrains.mps.lang.test.structure.SimpleNodeTest", "jetbrains.mps.lang.test.structure.SwitchToInspector", "jetbrains.mps.lang.test.structure.TestInfo", "jetbrains.mps.lang.test.structure.TestNode", "jetbrains.mps.lang.test.structure.TestNodeAnnotation", "jetbrains.mps.lang.test.structure.TestNodeReference", "jetbrains.mps.lang.test.structure.TypeKeyStatement", "jetbrains.mps.lang.test.structure.UnknownRuleReference", "jetbrains.mps.lang.test.structure.VariableAlive", "jetbrains.mps.lang.test.structure.VariableInitialized", "jetbrains.mps.lang.test.structure.WarningStatementReference"};
}
