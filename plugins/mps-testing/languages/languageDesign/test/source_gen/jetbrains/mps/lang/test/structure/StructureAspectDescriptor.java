package jetbrains.mps.lang.test.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.AbstractNodeAssert", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.ActionReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.AnonymousCellAnnotation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.AssertMatch", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.BootstrapActionReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.CheckDataFlowOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.CheckNodeDataflow", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.CheckNodeForErrorMessagesOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.CheckNodeForErrors", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.DragMouseStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.EditorComponentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.EditorExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.EditorOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.EditorTestCase", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.ExpressionContainer", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.IChecksRules", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.INodeAnnotation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.IReferenceAttachable", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.IRuleReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.InvokeActionStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.InvokeIntentionStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.MPSActionReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.MockAnnotation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.ModelExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeConstraintsErrorCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeConstraintsWarningCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeErrorCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeExpectedTypeCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeOperationsContainer", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodePropertiesContainer", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeReachable", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeTypeCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeTypeSetCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeTypeSystemErrorCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeTypeSystemWarningCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeUnknownErrorCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeUnknownWarningCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeUnreachable", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodeWarningCheckOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodesTestCase", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.NodesTestMethod", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.PressKeyStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.PressMouseStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.ProjectExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.ReportErrorStatementReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.ScopesExpectedNode", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.ScopesTest", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.SimpleNodeTest", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.SwitchToInspector", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.TestInfo", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.TestNode", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.TestNodeAnnotation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.TestNodeReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.TypeKeyStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.UnknownRuleReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.VariableAlive", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.VariableInitialized", null);
    myFqNameToConcept.put("jetbrains.mps.lang.test.structure.WarningStatementReference", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AbstractNodeAssert").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"nodeToCheck"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").abstract_().create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation", "jetbrains.mps.lang.test.structure.IChecksRules").abstract_().create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").abstract_().create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ActionReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AnonymousCellAnnotation").super_("jetbrains.mps.lang.test.structure.INodeAnnotation").parents("jetbrains.mps.lang.test.structure.INodeAnnotation", "jetbrains.mps.lang.core.structure.INamedConcept").properties("cellId", "caretPosition", "isLastPosition", "useLabelSelection", "selectionStart", "selectionEnd", "isInInspector").references("nodeRangeSelectionStart", "nodeRangeSelectionEnd").create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AssertMatch").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"before", "after"}, new boolean[]{true, true}).alias("assert match", "").staticScope(StaticScope.NONE).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.BootstrapActionReference").super_("jetbrains.mps.lang.test.structure.ActionReference").parents("jetbrains.mps.lang.test.structure.ActionReference").properties("actionId").alias("by id:", "").create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.CheckDataFlowOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").alias("for dataflow messages", "").create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.CheckNodeDataflow").super_("jetbrains.mps.lang.test.structure.AbstractNodeAssert").parents("jetbrains.mps.lang.test.structure.AbstractNodeAssert").alias("check node dataflow", "").staticScope(StaticScope.NONE).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.CheckNodeForErrorMessagesOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").properties("allowErrors", "allowWarnings").alias("for error messages", "").create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.CheckNodeForErrors").super_("jetbrains.mps.lang.test.structure.AbstractNodeAssert").parents("jetbrains.mps.lang.test.structure.AbstractNodeAssert").alias("check nodes error messages", "").staticScope(StaticScope.NONE).create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.DragMouseStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").properties("x", "y").alias("drag mouse", "").create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.EditorComponentExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("editor component", "").staticScope(StaticScope.NONE).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.EditorExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("editor", "").staticScope(StaticScope.NONE).create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.EditorOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.EditorTestCase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod", "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase", "jetbrains.mps.lang.core.structure.ISuppressErrors").properties("description").children(new String[]{"nodeToEdit", "result", "code"}, new boolean[]{false, false, false}).create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ExpressionContainer").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expression"}, new boolean[]{false}).alias("{ expr }", "expression container (used inside test nodes)").staticScope(StaticScope.NONE).create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.IChecksRules").interface_().create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.INodeAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").create();
        break;
      case 20:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.IReferenceAttachable").interface_().create();
        break;
      case 21:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.IRuleReference").interface_().references("declaration").create();
        break;
      case 22:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.InvokeActionStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"actionReference"}, new boolean[]{false}).alias("invoke action", "").staticScope(StaticScope.NONE).create();
        break;
      case 23:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.InvokeIntentionStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").references("intention").alias("invoke intention", "").staticScope(StaticScope.NONE).create();
        break;
      case 24:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.MPSActionReference").super_("jetbrains.mps.lang.test.structure.ActionReference").parents("jetbrains.mps.lang.test.structure.ActionReference").references("action").alias("->", "").create();
        break;
      case 25:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.MockAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").create();
        break;
      case 26:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ModelExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("model", "").staticScope(StaticScope.NONE).create();
        break;
      case 27:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeCheckOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().alias("", "tag for checking either type errors or error messages, attached to some node").create();
        break;
      case 28:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeConstraintsErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"errorRef"}, new boolean[]{false}).alias("has constraints error", "").create();
        break;
      case 29:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeConstraintsWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"warningRef"}, new boolean[]{false}).alias("has constraints warning", "").create();
        break;
      case 30:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").children(new String[]{"errorRef"}, new boolean[]{false}).alias("has error", "").create();
        break;
      case 31:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeExpectedTypeCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeTypeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeTypeCheckOperation").alias("has expected type", "").create();
        break;
      case 32:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeOperationsContainer").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").children(new String[]{"nodeOperations"}, new boolean[]{true}).create();
        break;
      case 33:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodePropertiesContainer").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").children(new String[]{"nodeCheckOperations"}, new boolean[]{true}).create();
        break;
      case 34:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeReachable").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").alias("reachable", "").create();
        break;
      case 35:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation", "jetbrains.mps.lang.test.structure.IReferenceAttachable").abstract_().alias("", "check specific rule").create();
        break;
      case 36:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").children(new String[]{"type"}, new boolean[]{false}).alias("has type", "").create();
        break;
      case 37:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeSetCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").children(new String[]{"type"}, new boolean[]{true}).alias("has type in", "").create();
        break;
      case 38:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeSystemErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").alias("has typesystem error", "check for unknown typesystem error").create();
        break;
      case 39:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation").abstract_().create();
        break;
      case 40:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeSystemWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").alias("has typesystem warning", "check for unknown typesystem warning").create();
        break;
      case 41:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeUnknownErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"errorRef"}, new boolean[]{false}).alias("has error", "").create();
        break;
      case 42:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeUnknownWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"warningRef"}, new boolean[]{false}).alias("has warning", "").create();
        break;
      case 43:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeUnreachable").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").alias("unreachable", "").create();
        break;
      case 44:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").children(new String[]{"warningRef"}, new boolean[]{false}).alias("has warning", "").create();
        break;
      case 45:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodesTestCase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier").properties("needsNoWriteAction").children(new String[]{"nodesToCheck", "testMethods", "methods"}, new boolean[]{true, true, true}).create();
        break;
      case 46:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodesTestMethod").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod").abstract_().create();
        break;
      case 47:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.PressKeyStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"keyStrokes"}, new boolean[]{true}).alias("press keys", "").staticScope(StaticScope.NONE).create();
        break;
      case 48:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.PressMouseStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").properties("x", "y").children(new String[]{"statementList"}, new boolean[]{false}).alias("press mouse", "").create();
        break;
      case 49:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ProjectExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("project", "").staticScope(StaticScope.NONE).create();
        break;
      case 50:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ReportErrorStatementReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.test.structure.IRuleReference", "jetbrains.mps.lang.core.structure.BaseConcept").references("declaration").create();
        break;
      case 51:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ScopesExpectedNode").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("ref").create();
        break;
      case 52:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ScopesTest").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").references("checkingReference").children(new String[]{"nodes"}, new boolean[]{true}).create();
        break;
      case 53:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.SimpleNodeTest").super_("jetbrains.mps.lang.test.structure.NodesTestMethod").parents("jetbrains.mps.lang.test.structure.NodesTestMethod").alias("test method", "").create();
        break;
      case 54:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.SwitchToInspector").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("switch to inspector", "").staticScope(StaticScope.NONE).create();
        break;
      case 55:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TestInfo").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("projectPath", "reOpenProject").create();
        break;
      case 56:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TestNode").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"nodeToCheck"}, new boolean[]{false}).alias("test node", "").create();
        break;
      case 57:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TestNodeAnnotation").super_("jetbrains.mps.lang.test.structure.INodeAnnotation").parents("jetbrains.mps.lang.test.structure.INodeAnnotation", "jetbrains.mps.lang.core.structure.INamedConcept").create();
        break;
      case 58:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TestNodeReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("declaration").staticScope(StaticScope.NONE).create();
        break;
      case 59:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TypeKeyStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").properties("keys").alias("type", "").staticScope(StaticScope.NONE).create();
        break;
      case 60:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.UnknownRuleReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.test.structure.IRuleReference").references("declaration").create();
        break;
      case 61:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.VariableAlive").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").children(new String[]{"var"}, new boolean[]{false}).alias("variable alive", "").create();
        break;
      case 62:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.VariableInitialized").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").children(new String[]{"var"}, new boolean[]{false}).alias("variable initialized", "").create();
        break;
      case 63:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.WarningStatementReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.test.structure.IRuleReference", "jetbrains.mps.lang.core.structure.BaseConcept").references("declaration").create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.lang.test.structure.AbstractNodeAssert", "jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation", "jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation", "jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation", "jetbrains.mps.lang.test.structure.ActionReference", "jetbrains.mps.lang.test.structure.AnonymousCellAnnotation", "jetbrains.mps.lang.test.structure.AssertMatch", "jetbrains.mps.lang.test.structure.BootstrapActionReference", "jetbrains.mps.lang.test.structure.CheckDataFlowOperation", "jetbrains.mps.lang.test.structure.CheckNodeDataflow", "jetbrains.mps.lang.test.structure.CheckNodeForErrorMessagesOperation", "jetbrains.mps.lang.test.structure.CheckNodeForErrors", "jetbrains.mps.lang.test.structure.DragMouseStatement", "jetbrains.mps.lang.test.structure.EditorComponentExpression", "jetbrains.mps.lang.test.structure.EditorExpression", "jetbrains.mps.lang.test.structure.EditorOperation", "jetbrains.mps.lang.test.structure.EditorTestCase", "jetbrains.mps.lang.test.structure.ExpressionContainer", "jetbrains.mps.lang.test.structure.IChecksRules", "jetbrains.mps.lang.test.structure.INodeAnnotation", "jetbrains.mps.lang.test.structure.IReferenceAttachable", "jetbrains.mps.lang.test.structure.IRuleReference", "jetbrains.mps.lang.test.structure.InvokeActionStatement", "jetbrains.mps.lang.test.structure.InvokeIntentionStatement", "jetbrains.mps.lang.test.structure.MPSActionReference", "jetbrains.mps.lang.test.structure.MockAnnotation", "jetbrains.mps.lang.test.structure.ModelExpression", "jetbrains.mps.lang.test.structure.NodeCheckOperation", "jetbrains.mps.lang.test.structure.NodeConstraintsErrorCheckOperation", "jetbrains.mps.lang.test.structure.NodeConstraintsWarningCheckOperation", "jetbrains.mps.lang.test.structure.NodeErrorCheckOperation", "jetbrains.mps.lang.test.structure.NodeExpectedTypeCheckOperation", "jetbrains.mps.lang.test.structure.NodeOperationsContainer", "jetbrains.mps.lang.test.structure.NodePropertiesContainer", "jetbrains.mps.lang.test.structure.NodeReachable", "jetbrains.mps.lang.test.structure.NodeRuleCheckOperation", "jetbrains.mps.lang.test.structure.NodeTypeCheckOperation", "jetbrains.mps.lang.test.structure.NodeTypeSetCheckOperation", "jetbrains.mps.lang.test.structure.NodeTypeSystemErrorCheckOperation", "jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation", "jetbrains.mps.lang.test.structure.NodeTypeSystemWarningCheckOperation", "jetbrains.mps.lang.test.structure.NodeUnknownErrorCheckOperation", "jetbrains.mps.lang.test.structure.NodeUnknownWarningCheckOperation", "jetbrains.mps.lang.test.structure.NodeUnreachable", "jetbrains.mps.lang.test.structure.NodeWarningCheckOperation", "jetbrains.mps.lang.test.structure.NodesTestCase", "jetbrains.mps.lang.test.structure.NodesTestMethod", "jetbrains.mps.lang.test.structure.PressKeyStatement", "jetbrains.mps.lang.test.structure.PressMouseStatement", "jetbrains.mps.lang.test.structure.ProjectExpression", "jetbrains.mps.lang.test.structure.ReportErrorStatementReference", "jetbrains.mps.lang.test.structure.ScopesExpectedNode", "jetbrains.mps.lang.test.structure.ScopesTest", "jetbrains.mps.lang.test.structure.SimpleNodeTest", "jetbrains.mps.lang.test.structure.SwitchToInspector", "jetbrains.mps.lang.test.structure.TestInfo", "jetbrains.mps.lang.test.structure.TestNode", "jetbrains.mps.lang.test.structure.TestNodeAnnotation", "jetbrains.mps.lang.test.structure.TestNodeReference", "jetbrains.mps.lang.test.structure.TypeKeyStatement", "jetbrains.mps.lang.test.structure.UnknownRuleReference", "jetbrains.mps.lang.test.structure.VariableAlive", "jetbrains.mps.lang.test.structure.VariableInitialized", "jetbrains.mps.lang.test.structure.WarningStatementReference"};
}
