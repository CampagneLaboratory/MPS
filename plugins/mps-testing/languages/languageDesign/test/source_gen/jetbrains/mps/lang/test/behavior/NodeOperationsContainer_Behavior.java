package jetbrains.mps.lang.test.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class NodeOperationsContainer_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_detachAllErrorOperations_5587533744543326483(SNode thisNode) {
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "nodeOperations", true)).removeWhere(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.test.structure.IAllowsErrors");
      }
    });
  }

  public static void call_createNodeAndAttachReference_428590876657265140(SNode thisNode, SNode reference, IErrorReporter reporter) {
    NodeRuleFactory factory = new NodeRuleFactory(reporter);
    SNode newNode = factory.createNodeFromError(reference);
    if (SNodeOperations.isInstanceOf(newNode, "jetbrains.mps.lang.test.structure.IReferenceAttachable")) {
      SNode node = SNodeOperations.cast(newNode, "jetbrains.mps.lang.test.structure.IReferenceAttachable");
      if (BehaviorReflection.invokeVirtual(Boolean.TYPE, node, "virtual_canAttachReference_2893471348147804024", new Object[]{reference})) {
        BehaviorReflection.invokeVirtual(Void.class, node, "virtual_attachReference_2893471348147987863", new Object[]{reference});
      }
    }
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "nodeOperations", true)).addElement(newNode);
  }
}
