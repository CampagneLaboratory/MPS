package jetbrains.mps.lang.test.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.test.behavior.NodeOperationsContainer_Behavior;
import java.util.List;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.test.runtime.NodeCheckerUtil;
import jetbrains.mps.extapi.model.SModelBase;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.kernel.model.MissingDependenciesFixer;

public class SpecifyRuleReferencesInTests_MigrationScript extends BaseMigrationScript {
  public SpecifyRuleReferencesInTests_MigrationScript(IOperationContext operationContext) {
    super("Specify rule references in tests for tags 'has error' and 'has warning'");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Specify Rule References";
      }

      public String getAdditionalInfo() {
        return "Specify Rule References";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.core.structure.BaseConcept";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SpecifyUtil.isNodeApplicableForSpecification(node);
      }

      public void doUpdateInstanceNode(SNode node) {
        final SNode nodeToCheck = node;
        final SNode operationsContainer = AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.NodeOperationsContainer"));
        NodeOperationsContainer_Behavior.call_detachAllErrorOperations_5587533744543326483(operationsContainer);
        TestsErrorsChecker checker = new TestsErrorsChecker(nodeToCheck);
        final List<IErrorReporter> reporters = checker.getErrorReporters();
        for (IErrorReporter reporter : reporters) {
          SNode ruleNode = NodeCheckerUtil.getRuleNodeFromReporter(reporter);
          NodeOperationsContainer_Behavior.call_createNodeAndAttachReference_428590876657265140(operationsContainer, ruleNode, reporter);
          ((SModelBase) SNodeOperations.getModel(operationsContainer)).addModelImport(SNodeOperations.getModel(ruleNode).getReference(), false);
        }
        MissingDependenciesFixer.fixDependencies(SNodeOperations.getModel(operationsContainer), true);
      }

      public boolean isShowAsIntention() {
        return true;
      }
    });
  }
}
