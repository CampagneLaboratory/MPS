package jetbrains.mps.lang.test.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.annotations.NotNull;

public class ScopesTest_Constraints extends BaseConstraintsDescriptor {
  public ScopesTest_Constraints() {
    super("jetbrains.mps.lang.test.structure.ScopesTest");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("checkingReference", new BaseReferenceConstraintsDescriptor("checkingReference", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_jzm89w_a0a0a0a0a1a0b0a1a1;
          }

          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return new Scope() {
              public Iterable<SNode> getAvailableElements(@Nullable String prefix) {
                List<SNode> nodes = new ArrayList<SNode>();
                for (SReference reference : Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.getParent(SNodeOperations.cast(_context.getContextNode(), "jetbrains.mps.lang.test.structure.ScopesTest"))))) {
                  ListSequence.fromList(nodes).addElement(SLinkOperations.getTargetNode(reference));
                }
                return nodes;
              }

              @Nullable
              public SNode resolve(SNode contextNode, @NotNull String refText) {
                return null;
              }

              @Nullable
              public String getReferenceText(SNode contextNode, @NotNull SNode node) {
                return null;
              }
            };

          }
        };
      }
    });
    return references;
  }

  private static SNodeReference breakingNode_jzm89w_a0a0a0a0a1a0b0a1a1 = new jetbrains.mps.smodel.SNodePointer("r:00000000-0000-4000-0000-011c89590382(jetbrains.mps.lang.test.constraints)", "5449224527592362462");
}
