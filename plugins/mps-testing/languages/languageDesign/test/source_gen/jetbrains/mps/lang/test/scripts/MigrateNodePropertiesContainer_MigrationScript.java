package jetbrains.mps.lang.test.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;

public class MigrateNodePropertiesContainer_MigrationScript extends BaseMigrationScript {
  public MigrateNodePropertiesContainer_MigrationScript(IOperationContext operationContext) {
    super("Migrate Test-Related NodePropertiesContainer to NodeOperationsContainer");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Migrate Test-Related NodePropertiesContainer to NodeOperationsContainer";
      }
      public String getAdditionalInfo() {
        return "Migrate Test-Related NodePropertiesContainer to NodeOperationsContainer";
      }
      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.test.structure.NodePropertiesContainer";
      }
      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }
      public void doUpdateInstanceNode(SNode node) {
        SNode parent = SNodeOperations.getParent(node);
        SNode newAnnotation = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l, -7431307307277756308l), 1215603922101l, "jetbrains.mps.lang.test.structure.NodeOperationsContainer"));
        ListSequence.fromList(SLinkOperations.getChildren(newAnnotation, MetaAdapterFactory.getContainmentLink(new UUID(-8825571760360698496l, -7431307307277756308l), 1215603922101l, 1215604436604l, "nodeOperations"))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(new UUID(-8825571760360698496l, -7431307307277756308l), 1215507532627l, 1215507909023l, "nodeCheckOperations"))));
        AttributeOperations.setAttribute(parent, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.NodeOperationsContainer"), newAnnotation);
        AttributeOperations.setAttribute(parent, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.NodePropertiesContainer"), null);
      }
      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
