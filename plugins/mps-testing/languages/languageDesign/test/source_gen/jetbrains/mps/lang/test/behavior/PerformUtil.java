package jetbrains.mps.lang.test.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.test.scripts.TestsErrorsChecker;
import java.util.List;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.lang.test.runtime.NodeCheckerUtil;
import junit.framework.Assert;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.typesystem.inference.ITypechecking;
import jetbrains.mps.typesystem.inference.ITypeContextOwner;
import jetbrains.mps.typesystem.inference.DefaultTypecheckingContextOwner;
import jetbrains.mps.typesystem.inference.TypeContextManager;

public class PerformUtil {
  public static void checkNodeHasError(SNode operation) {
    assert SNodeOperations.isInstanceOf(operation, "jetbrains.mps.lang.test.structure.IAllowsErrors");
    final SNode nodeToCheck = NodeCheckOperation_Behavior.call_getAnnotatedNode_2912288420882528229(operation);
    TestsErrorsChecker checker = new TestsErrorsChecker(nodeToCheck);
    final List<IErrorReporter> errorReporters = checker.getErrorReportersSpecificType(MessageStatus.ERROR);

    final String errorString = "node <" + NodeCheckerUtil.nodeWithIdToString(nodeToCheck) + "> does not have expected error message";

    Assert.assertTrue(errorString, BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(operation, "jetbrains.mps.lang.test.structure.IAllowsErrors"), "virtual_hasExpectedRuleMessage_5348336190814877000", new Object[]{errorReporters}));
  }




  public static void checkNodeHasWarning(SNode operation) {
    assert SNodeOperations.isInstanceOf(operation, "jetbrains.mps.lang.test.structure.IAllowsErrors");
    final SNode nodeToCheck = NodeCheckOperation_Behavior.call_getAnnotatedNode_2912288420882528229(operation);
    TestsErrorsChecker checker = new TestsErrorsChecker(nodeToCheck);
    final List<IErrorReporter> errorReporters = checker.getErrorReportersSpecificType(MessageStatus.WARNING);

    final String errorString = "node <" + NodeCheckerUtil.nodeWithIdToString(nodeToCheck) + "> does not have expected warning message";

    Assert.assertTrue(errorString, BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(operation, "jetbrains.mps.lang.test.structure.IAllowsErrors"), "virtual_hasExpectedRuleMessage_5348336190814877000", new Object[]{errorReporters}));
  }



  public static void checkNodeWithTypeCheckingAction(final SNode node, ITypechecking.Action checkingAction) {
    ITypeContextOwner owner = new DefaultTypecheckingContextOwner();
    SNode containingRoot = node.getContainingRoot();
    TypeContextManager.getInstance().runTypeCheckingAction(owner, containingRoot, checkingAction);
  }
}
