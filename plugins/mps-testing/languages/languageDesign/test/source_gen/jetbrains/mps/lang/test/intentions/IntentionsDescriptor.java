package jetbrains.mps.lang.test.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionAspectBase;
import jetbrains.mps.intentions.IntentionFactory;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;
import jetbrains.mps.intentions.IntentionsManager;

public final class IntentionsDescriptor extends IntentionAspectBase {
  private final long[] myId2Index;
  private IntentionFactory[] myIntentions0;
  private IntentionFactory[] myIntentions1;
  private IntentionFactory[] myIntentions2;

  public IntentionsDescriptor() {
    myId2Index = new long[3];
    myId2Index[0] = 0x10802efe25aL;
    myId2Index[1] = 0x11db4aad802L;
    myId2Index[2] = 0x7181d929c720809L;
  }

  @Override
  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SConceptId conceptId) {
    final int index = Arrays.binarySearch(myId2Index, conceptId.getIdValue());
    switch (index) {
      case 0:
        // Concept: BaseConcept 
        if (myIntentions0 == null) {
          myIntentions0 = new IntentionFactory[8];
          myIntentions0[0] = new AddTestAnnotation_Intention();
          myIntentions0[1] = new AddOperationsAnnotation_Intention();
          myIntentions0[2] = new AddCellAnnotation_Intention();
          myIntentions0[3] = new AddMockAnnotation_Intention();
          myIntentions0[4] = new AddNodeHasErrorAnnotation_Intention();
          myIntentions0[5] = new AddScopeTestAnnotation_Intention();
          myIntentions0[6] = new AddNodeHasWarningAnnotation_Intention();
          myIntentions0[7] = new SpecifyRuleReferences_Intention();
        }
        return Arrays.asList(myIntentions0);
      case 1:
        // Concept: MessageStatement 
        if (myIntentions1 == null) {
          myIntentions1 = new IntentionFactory[1];
          myIntentions1[0] = new AddMessageAnnotation_Intention();
        }
        return Arrays.asList(myIntentions1);
      case 2:
        // Concept: ScopesTest 
        if (myIntentions2 == null) {
          myIntentions2 = new IntentionFactory[1];
          myIntentions2[0] = new AddScopeExpectedNodes_Intention();
        }
        return Arrays.asList(myIntentions2);
      default:
        return null;
    }
  }

  public void init() {
    IntentionsManager.getInstance().registerIntentionFactory(new AddCellAnnotation_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddMessageAnnotation_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddMockAnnotation_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddNodeHasErrorAnnotation_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddNodeHasWarningAnnotation_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddOperationsAnnotation_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddScopeExpectedNodes_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddScopeTestAnnotation_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddTestAnnotation_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new SpecifyRuleReferences_Intention());
  }
}
