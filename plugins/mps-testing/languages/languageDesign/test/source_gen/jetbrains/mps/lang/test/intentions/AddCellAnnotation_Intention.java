package jetbrains.mps.lang.test.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.inspector.InspectorEditorComponent;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.openapi.editor.selection.Selection;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.selection.NodeRangeSelection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.intentions.IntentionDescriptor;

public class AddCellAnnotation_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public AddCellAnnotation_Intention() {
  }
  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }
  public String getPresentation() {
    return "AddCellAnnotation";
  }
  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.test.intentions.AddCellAnnotation_Intention";
  }
  public String getLanguageFqName() {
    return "jetbrains.mps.lang.test";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return false;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.getNodeAncestor(node, MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l, -7431307307277756308l), 1229187653856l, "jetbrains.mps.lang.test.structure.EditorTestCase"), false, false) != null;
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c89590386(jetbrains.mps.lang.test.intentions)", "1225963656881");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AddCellAnnotation_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add Editor Annotation";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode ancessor = node;
      while (ancessor != null && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(ancessor), MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l, -7431307307277756308l), 1229187653856l, "jetbrains.mps.lang.test.structure.EditorTestCase")))) {
        ancessor = SNodeOperations.getParent(ancessor);
      }
      for (SNode oldAnnotation : SNodeOperations.getNodeDescendants(ancessor, MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l, -7431307307277756308l), 1229194968594l, "jetbrains.mps.lang.test.structure.AnonymousCellAnnotation"), false, new SConcept[]{})) {
        SNodeOperations.deleteNode(oldAnnotation);
      }
      SNode newAnnotation = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.test.structure.AnonymousCellAnnotation", null);
      EditorCell contextCell = editorContext.getContextCell();
      if (editorContext.getEditorComponent() instanceof InspectorEditorComponent) {
        SPropertyOperations.set(newAnnotation, MetaAdapterFactory.getProperty(new UUID(-8825571760360698496l, -7431307307277756308l), 1229194968594l, 1977980803835239937l, "isInInspector"), "" + (true));
      }
      if (contextCell instanceof EditorCell_Label) {
        EditorCell_Label label = (EditorCell_Label) contextCell;
        int caretPosition = label.getCaretPosition();
        if (caretPosition == label.getText().length()) {
          SPropertyOperations.set(newAnnotation, MetaAdapterFactory.getProperty(new UUID(-8825571760360698496l, -7431307307277756308l), 1229194968594l, 1229432188737l, "isLastPosition"), "" + (true));
        } else {
          SPropertyOperations.set(newAnnotation, MetaAdapterFactory.getProperty(new UUID(-8825571760360698496l, -7431307307277756308l), 1229194968594l, 1229194968596l, "caretPosition"), "" + (caretPosition));
        }
        SPropertyOperations.set(newAnnotation, MetaAdapterFactory.getProperty(new UUID(-8825571760360698496l, -7431307307277756308l), 1229194968594l, 1932269937152561478l, "useLabelSelection"), "" + (true));
        SPropertyOperations.set(newAnnotation, MetaAdapterFactory.getProperty(new UUID(-8825571760360698496l, -7431307307277756308l), 1229194968594l, 6268941039745498163l, "selectionStart"), "" + (label.getSelectionStart()));
        SPropertyOperations.set(newAnnotation, MetaAdapterFactory.getProperty(new UUID(-8825571760360698496l, -7431307307277756308l), 1229194968594l, 6268941039745498165l, "selectionEnd"), "" + (label.getSelectionEnd()));
      } else {
        SPropertyOperations.set(newAnnotation, MetaAdapterFactory.getProperty(new UUID(-8825571760360698496l, -7431307307277756308l), 1229194968594l, 1229194968596l, "caretPosition"), "" + (0));
      }
      SPropertyOperations.set(newAnnotation, MetaAdapterFactory.getProperty(new UUID(-8825571760360698496l, -7431307307277756308l), 1229194968594l, 1229194968595l, "cellId"), contextCell.getCellId());
      Selection selection = ((EditorComponent) editorContext.getEditorComponent()).getSelectionManager().getSelection();
      if (selection instanceof NodeRangeSelection) {
        NodeRangeSelection nodeRangeSelection = (NodeRangeSelection) selection;
        SLinkOperations.setTarget(newAnnotation, MetaAdapterFactory.getReferenceLink(new UUID(-8825571760360698496l, -7431307307277756308l), 1229194968594l, 1932269937152203468l, "nodeRangeSelectionStart"), nodeRangeSelection.getFirstNode());
        SLinkOperations.setTarget(newAnnotation, MetaAdapterFactory.getReferenceLink(new UUID(-8825571760360698496l, -7431307307277756308l), 1229194968594l, 1932269937152203469l, "nodeRangeSelectionEnd"), nodeRangeSelection.getLastNode());
      }
      AttributeOperations.setAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.INodeAnnotation"), newAnnotation);
      SelectionUtil.selectNode(editorContext, newAnnotation);
    }
    public IntentionDescriptor getDescriptor() {
      return AddCellAnnotation_Intention.this;
    }
  }
}
