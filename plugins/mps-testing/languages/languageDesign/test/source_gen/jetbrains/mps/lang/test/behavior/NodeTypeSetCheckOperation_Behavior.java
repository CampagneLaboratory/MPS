package jetbrains.mps.lang.test.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import junit.framework.Assert;
import jetbrains.mps.lang.test.runtime.NodeCheckerUtil;

public class NodeTypeSetCheckOperation_Behavior {
  public static void init(SNode thisNode) {
  }
  public static void virtual_perform_245688835340859348(SNode thisNode, SNode node) {
    final SNode operation = thisNode;
    PerformUtil.checkNodeWithTypeCheckingAction(node, new NodeTypeCheckingAction(operation) {
      public void checkOperation(TypeCheckingContext context) {
        if (SNodeOperations.isInstanceOf(operation, MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x15404cb86444497L, "jetbrains.mps.lang.test.structure.NodeTypeSetCheckOperation"))) {
          SNode type1 = context.getTypeDontCheck(getNodeToCheck());
          boolean hasType = false;
          for (SNode type2 : (SLinkOperations.getChildren(SNodeOperations.cast(operation, MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x15404cb86444497L, "jetbrains.mps.lang.test.structure.NodeTypeSetCheckOperation")), MetaAdapterFactory.getContainmentLink(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x15404cb86444497L, 0x15404cb86444498L, "type")))) {
            if (MatchingUtil.matchNodes(type1, type2)) {
              hasType = true;
              break;
            }
          }
          Assert.assertTrue("node type <" + NodeCheckerUtil.nodeWithIdToString(type1) + "> is not in <" + SLinkOperations.getChildren(SNodeOperations.cast(operation, MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x15404cb86444497L, "jetbrains.mps.lang.test.structure.NodeTypeSetCheckOperation")), MetaAdapterFactory.getContainmentLink(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x15404cb86444497L, 0x15404cb86444498L, "type")) + ">", hasType);
        }
      }
    });
  }
  public static String virtual_getDefaultName_8578280453511146306(SNode thisNode) {
    return "NodeTypeSetCheck";
  }
}
