package jetbrains.mps.lang.test.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;

public class MigrateNodeCheckOperationsContainer_MigrationScript extends BaseMigrationScript {
  public MigrateNodeCheckOperationsContainer_MigrationScript(IOperationContext operationContext) {
    super("Migrate NodeCheckOperationsContainer");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Migrate NodeCheckOperationsContainer to NodeOperationsContainer";
      }

      public String getAdditionalInfo() {
        return "Migrate NodeCheckOperationsContainer to NodeOperationsContainer";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.test.structure.NodeCheckOperationsContainer";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode parent = SNodeOperations.getParent(node);
        SNode newAnnotation = SConceptOperations.createNewNode("jetbrains.mps.lang.test.structure.NodeOperationsContainer", null);
        ListSequence.fromList(SLinkOperations.getTargets(newAnnotation, "nodeOperations", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "nodeCheckOperations", true)));
        AttributeOperations.setAttribute(parent, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.NodeOperationsContainer"), newAnnotation);
        AttributeOperations.setAttribute(parent, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.NodeCheckOperationsContainer"), null);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
