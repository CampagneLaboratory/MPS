package jetbrains.mps.lang.test.behavior;

/*Generated by MPS */

import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;

public class NodeRuleFactory {
  private IErrorReporter reporter;

  public NodeRuleFactory(IErrorReporter reporter) {
    this.reporter = reporter;
  }

  public SNode createNodeFromRuleMsg(SNode reference) {
    NodeRuleReference ruleReference = new NodeRuleReference(reference);
    if (ruleReference.getType() == RuleType.TYPESYSTEM) {
      return this.createTypeSystemCheckOperation();
    } else if (ruleReference.getType() == RuleType.CONSTRAINTS) {
      return this.createConstraintsCheckOperation(reference);
    } else if (ruleReference.getType() == RuleType.MESSAGESTATEMENT) {
      return this.createMessageStatementCheckOperation(reference);
    } else {
      return this.createDefaultCheckOperation(reference);
    }
  }

  private SNode createTypeSystemCheckOperation() {
    if (reporter.getMessageStatus() == MessageStatus.ERROR) {
      return SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l, -7431307307277756308l), 428590876651279930l, "jetbrains.mps.lang.test.structure.NodeTypeSystemErrorCheckOperation")));
    } else {
      return SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l, -7431307307277756308l), 8578280453509464010l, "jetbrains.mps.lang.test.structure.NodeTypeSystemWarningCheckOperation")));
    }
  }

  private SNode createConstraintsCheckOperation(SNode reference) {
    SNode result;
    if (reporter.getMessageStatus() == MessageStatus.ERROR) {
      result = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l, -7431307307277756308l), 8333855927540283103l, "jetbrains.mps.lang.test.structure.NodeConstraintsErrorCheckOperation")));
    } else {
      result = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l, -7431307307277756308l), 1215511704609l, "jetbrains.mps.lang.test.structure.NodeWarningCheckOperation")));
    }
    return result;
  }

  private SNode createMessageStatementCheckOperation(SNode reference) {
    SNode result;
    if (reporter.getMessageStatus() == MessageStatus.ERROR) {
      result = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l, -7431307307277756308l), 1215507671101l, "jetbrains.mps.lang.test.structure.NodeErrorCheckOperation")));
    } else {
      result = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l, -7431307307277756308l), 1215511704609l, "jetbrains.mps.lang.test.structure.NodeWarningCheckOperation")));
    }
    return result;
  }

  private SNode createDefaultCheckOperation(SNode reference) {
    SNode result;
    if (reporter.getMessageStatus() == MessageStatus.ERROR) {
      result = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l, -7431307307277756308l), 7835233914436786109l, "jetbrains.mps.lang.test.structure.NodeUnknownErrorCheckOperation")));
    } else {
      result = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l, -7431307307277756308l), 1215511704609l, "jetbrains.mps.lang.test.structure.NodeWarningCheckOperation")));
    }
    return result;
  }

}
