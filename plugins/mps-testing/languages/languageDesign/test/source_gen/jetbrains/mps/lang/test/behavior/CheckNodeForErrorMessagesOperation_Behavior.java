package jetbrains.mps.lang.test.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.test.runtime.NodeCheckerUtil;
import jetbrains.mps.typesystem.inference.ITypechecking;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import junit.framework.Assert;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestMethod_Behavior;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class CheckNodeForErrorMessagesOperation_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_perform_245688835340859348(SNode thisNode, SNode node) {
    try {

      final SNode nodeToCheck = node;
      final SNode operation = thisNode;
      NodeCheckerUtil.checkNodeWithCheckingAction(node, new ITypechecking.Action() {
        @Override
        public void run(TypeCheckingContext typeCheckingContext) {
          typeCheckingContext.checkIfNotChecked(nodeToCheck, true);
          for (SNode child : SNodeOperations.getDescendants(nodeToCheck, "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{})) {
            if (!(NodeCheckerUtil.hasErrorOrWarningCheckOperationTag(child))) {
              IErrorReporter reporter = typeCheckingContext.getTypeMessageDontCheck(child);
              if (reporter != null) {
                String reportError = reporter.reportError() + ". Node '" + NodeCheckerUtil.nodeWithIdToString(child) + "'";
                if (!(SPropertyOperations.getBoolean(operation, "allowErrors"))) {
                  Assert.assertTrue(reportError, reporter.getMessageStatus() != MessageStatus.ERROR);
                }
                if (!(SPropertyOperations.getBoolean(operation, "allowWarnings"))) {
                  Assert.assertTrue(reportError, reporter.getMessageStatus() != MessageStatus.WARNING);
                }
              }
            }
          }
        }
      });
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  public static String virtual_getDefaultName_8578280453511146306(SNode thisNode) {
    return "ErrorMessagesCheck";
  }

  public static String virtual_getPresentation_1213877396640(SNode thisNode) {
    return ITestMethod_Behavior.call_getTestName_1216136419751(thisNode);
  }

  @Deprecated
  public static void call_perform_1215607135205(SNode thisNode, SNode node) {
    BehaviorReflection.invokeVirtual(Void.class, thisNode, "virtual_perform_245688835340859348", new Object[]{node});
  }

  @Deprecated
  public static void callSuper_perform_1215607135205(SNode thisNode, String callerConceptFqName, SNode node) {
    BehaviorManager.getInstance().invokeSuper(Void.class, SNodeOperations.cast(thisNode, "jetbrains.mps.lang.test.structure.CheckNodeForErrorMessagesOperation"), callerConceptFqName, "virtual_perform_245688835340859348", new Class[]{SNode.class, SNode.class}, new Object[]{node});
  }
}
