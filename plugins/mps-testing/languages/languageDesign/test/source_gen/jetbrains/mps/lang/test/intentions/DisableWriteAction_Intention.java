package jetbrains.mps.lang.test.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.test.behavior.NodesTestCase_Behavior;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class DisableWriteAction_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public DisableWriteAction_Intention() {
  }
  public String getConcept() {
    return "jetbrains.mps.lang.test.structure.NodesTestCase";
  }
  public String getPresentation() {
    return "DisableWriteAction";
  }
  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.test.intentions.DisableWriteAction_Intention";
  }
  public String getLanguageFqName() {
    return "jetbrains.mps.lang.test";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return false;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return NodesTestCase_Behavior.call_needsWriteAction_6339244025081193722(node);
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c89590386(jetbrains.mps.lang.test.intentions)", "6339244025081271875");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new DisableWriteAction_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Disable Write Action For This Test";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      SPropertyOperations.set(node, "needsNoWriteAction", "" + (true));
    }
    public IntentionDescriptor getDescriptor() {
      return DisableWriteAction_Intention.this;
    }
  }
}
