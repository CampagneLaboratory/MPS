package jetbrains.mps.lang.test.scripts;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.checkers.INodeChecker;
import jetbrains.mps.typesystemEngine.checker.TypesystemChecker;
import java.util.Set;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.checkers.LanguageChecker;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.projectPane.fileSystem.nodes.NullOperationContext;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class TestsErrorsChecker {
  private SNode node;


  public TestsErrorsChecker(SNode node) {
    this.node = node;
  }



  public List<IErrorReporter> getTypeSystemErrorReporters() {
    List<IErrorReporter> result = ListSequence.fromList(new ArrayList<IErrorReporter>());
    INodeChecker checker = new TypesystemChecker();
    Set<IErrorReporter> errors = checker.getErrors(SNodeOperations.getContainingRoot(node), null);
    for (IErrorReporter errorReporter : errors) {
      if (errorReporter.getSNode().equals(node)) {
        ListSequence.fromList(result).addElement(errorReporter);
      }
    }
    return result;
  }



  public List<IErrorReporter> getConstraintsErrorReporters() {
    List<IErrorReporter> result = ListSequence.fromList(new ArrayList<IErrorReporter>());
    INodeChecker checker = new LanguageChecker();
    IOperationContext context = new NullOperationContext();
    ListSequence.fromList(result).addSequence(SetSequence.fromSet(checker.getErrors(node, context)));
    return result;
  }



  public List<IErrorReporter> getErrorReporters() {
    List<IErrorReporter> result = ListSequence.fromList(new ArrayList<IErrorReporter>());
    ListSequence.fromList(result).addSequence(ListSequence.fromList(getTypeSystemErrorReporters()));
    ListSequence.fromList(result).addSequence(ListSequence.fromList(getConstraintsErrorReporters()));
    return result;
  }



  public List<IErrorReporter> getErrorReportersSpecificType(final MessageStatus errorType) {
    List<IErrorReporter> result = ListSequence.fromList(new ArrayList<IErrorReporter>());
    ListSequence.fromList(result).addSequence(ListSequence.fromList(getErrorReporters()).where(new IWhereFilter<IErrorReporter>() {
      public boolean accept(IErrorReporter it) {
        return it.getMessageStatus() == errorType;
      }
    }));
    return result;
  }


}
