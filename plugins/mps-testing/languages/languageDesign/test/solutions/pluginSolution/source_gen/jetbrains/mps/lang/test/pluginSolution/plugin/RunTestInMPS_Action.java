package jetbrains.mps.lang.test.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import jetbrains.mps.runtime.IClassLoadingModule;
import org.jetbrains.mps.openapi.model.SModel;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import com.intellij.openapi.project.Project;
import jetbrains.mps.lang.test.behavior.NodesTestCase_Behavior;
import jetbrains.mps.logging.Logger;

public class RunTestInMPS_Action extends BaseAction {
  private static final Icon ICON = null;

  public RunTestInMPS_Action() {
    super("Run Test in MPS Process", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get("node")), "jetbrains.mps.lang.test.structure.NodesTestCase");
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "RunTestInMPS", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModel modelDescriptor = event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
      if (modelDescriptor == null) {
        return false;
      }
      MapSequence.fromMap(_params).put("model", modelDescriptor.getSModel());
    }
    if (MapSequence.fromMap(_params).get("model") == null) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node != null) {
      }
      MapSequence.fromMap(_params).put("node", node);
    }
    if (MapSequence.fromMap(_params).get("node") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final Set<SNode> tests = SetSequence.fromSet(new HashSet<SNode>());
      SetSequence.fromSet(tests).addSequence(ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get("node")), "jetbrains.mps.lang.test.structure.NodesTestCase"), "virtual_getTestSet_1216130724401", new Object[]{})).toListSequence());
      for (SNode test : SetSequence.fromSet(tests)) {
        RunTestInMPS_Action.this.runTest(test, _params);
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "RunTestInMPS", t);
    }
  }

  /*package*/ void runTest(final SNode test, final Map<String, Object> _params) {
    try {
      final String className = BehaviorReflection.invokeVirtual(String.class, BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), test, "virtual_getTestCase_1216134500045", new Object[]{}), "virtual_getClassName_1216136193905", new Object[]{});
      final String testName = BehaviorReflection.invokeVirtual(String.class, test, "virtual_getTestName_1216136419751", new Object[]{});
      System.out.println("Test " + className + "." + testName);
      final Class c = ((IClassLoadingModule) ((SModel) MapSequence.fromMap(_params).get("model")).getModelDescriptor().getModule()).getClass(BehaviorReflection.invokeVirtual(String.class, BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), test, "virtual_getTestCase_1216134500045", new Object[]{}), "virtual_getClassName_1216136193905", new Object[]{}));
      final Method meth = c.getMethod("runTest", String.class, String.class, Boolean.TYPE);
      Constructor ctor = c.getConstructor(Project.class, SModel.class);
      final Object testClass = ctor.newInstance(((Project) MapSequence.fromMap(_params).get("project")), ((SModel) MapSequence.fromMap(_params).get("model")).getModelDescriptor());
      Thread thread = new Thread(new Runnable() {
        @Override
        public void run() {
          try {
            meth.invoke(testClass, className + "$" + NodesTestCase_Behavior.getTestBodyName_1224602741295(), testName, true);
          } catch (Throwable e) {
            e.printStackTrace();
          }
        }
      });
      thread.start();
    } catch (Throwable e) {
      e.printStackTrace();
    }
  }

  private static Logger LOG = Logger.getLogger(RunTestInMPS_Action.class);
}
