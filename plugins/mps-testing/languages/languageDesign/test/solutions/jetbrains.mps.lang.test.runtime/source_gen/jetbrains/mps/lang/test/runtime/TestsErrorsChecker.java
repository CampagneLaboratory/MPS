package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.errors.MessageStatus;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.checkers.INodeChecker;
import jetbrains.mps.typesystemEngine.checker.TypesystemChecker;
import jetbrains.mps.checkers.LanguageChecker;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public class TestsErrorsChecker {
  private SNode myRoot;
  private static TestsErrorsChecker.ModelErrorsHolder<IErrorReporter> modelErrorsHolder = new TestsErrorsChecker.ModelErrorsHolder();


  public TestsErrorsChecker(SNode root) {
    this.myRoot = root;
  }



  public Iterable<IErrorReporter> getAllErrors() {
    ModelAccess.assertLegalRead();
    return getModelErrors();
  }



  public Iterable<IErrorReporter> getErrors(SNode node) {
    ModelAccess.assertLegalRead();
    Iterable<IErrorReporter> result = getModelErrors();
    return filterReportersByNode(result, node);
  }



  public Iterable<IErrorReporter> getErrorsSpecificType(SNode node, final MessageStatus errorType) {
    Set<IErrorReporter> result = SetSequence.fromSet(new HashSet<IErrorReporter>());
    SetSequence.fromSet(result).addSequence(Sequence.fromIterable(getErrors(node)).where(new IWhereFilter<IErrorReporter>() {
      public boolean accept(IErrorReporter it) {
        return it.getMessageStatus() == errorType;
      }
    }));
    return result;
  }



  private Iterable<IErrorReporter> getTypeSystemErrors() {
    INodeChecker checker = new TypesystemChecker();
    return checker.getErrors(myRoot, null);
  }



  private Iterable<IErrorReporter> getConstraintsErrors() {
    INodeChecker checker = new LanguageChecker();
    return checker.getErrors(myRoot, null);
  }



  private Iterable<IErrorReporter> filterReportersByNode(final Iterable<IErrorReporter> errors, @NotNull final SNode nodeToCheck) {
    return Sequence.fromIterable(errors).where(new IWhereFilter<IErrorReporter>() {
      public boolean accept(IErrorReporter it) {
        assert it.getSNode() != null;
        return it.getSNode().getNodeId() == nodeToCheck.getNodeId();
      }
    });
  }



  private Iterable<IErrorReporter> getModelErrors() {
    Set<IErrorReporter> cachedErrors = modelErrorsHolder.get(myRoot);
    if (cachedErrors != null) {
      return SetSequence.fromSet(cachedErrors).toListSequence();
    }

    Set<IErrorReporter> result = collectModelErrors();
    return result;
  }



  private Set<IErrorReporter> collectModelErrors() {
    Set<IErrorReporter> result = SetSequence.fromSet(new HashSet<IErrorReporter>());
    SetSequence.fromSet(result).addSequence(Sequence.fromIterable(getTypeSystemErrors()));
    SetSequence.fromSet(result).addSequence(Sequence.fromIterable(getConstraintsErrors()));
    modelErrorsHolder.set(myRoot, result);
    return result;
  }



  private static class ModelErrorsHolder<T> {
    private Set<T> myCachedErrors;
    private SNode myRoot;


    @Nullable
    public Set<T> get(SNode root) {
      if (myCachedErrors != null && sameRoot(root)) {
        return myCachedErrors;
      }
      return null;
    }



    private boolean sameRoot(SNode root) {
      return root == myRoot;
    }



    public void set(SNode root, Set<T> errors) {
      myRoot = root;
      myCachedErrors = SetSequence.fromSet(new HashSet<T>());
      SetSequence.fromSet(myCachedErrors).addSequence(SetSequence.fromSet(errors));
    }
  }
}
