package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.checkers.INodeChecker;
import jetbrains.mps.typesystemEngine.checker.TypesystemChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.checkers.LanguageChecker;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.errors.MessageStatus;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.annotations.Nullable;

public class TestsErrorsChecker {
  private SNode myNode;
  private static TestsErrorsChecker.ModelErrorsHolder<IErrorReporter> modelErrorsHolder = new TestsErrorsChecker.ModelErrorsHolder();


  public TestsErrorsChecker(SNode node) {
    this.myNode = node;
  }



  private Iterable<IErrorReporter> getTypeSystemErrors() {
    INodeChecker checker = new TypesystemChecker();
    return checker.getErrors(SNodeOperations.getContainingRoot(myNode), null);
  }



  private Iterable<IErrorReporter> getConstraintsErrors() {
    INodeChecker checker = new LanguageChecker();
    return checker.getErrors(SNodeOperations.getContainingRoot(myNode), null);
  }



  private Iterable<IErrorReporter> filterReportersByNode(final Iterable<IErrorReporter> errors, final SNode node) {
    return Sequence.fromIterable(errors).where(new IWhereFilter<IErrorReporter>() {
      public boolean accept(IErrorReporter it) {
        return it.getSNode().equals(node);
      }
    });
  }



  public Iterable<IErrorReporter> getErrors() {
    Iterable<IErrorReporter> result = getModelErrors();
    return filterReportersByNode(result, myNode);
  }



  private Iterable<IErrorReporter> getModelErrors() {
    Set<IErrorReporter> cachedErrors = modelErrorsHolder.get(SNodeOperations.getModel(myNode));
    if (cachedErrors != null) {
      return SetSequence.fromSet(cachedErrors).toListSequence();
    }

    Set<IErrorReporter> result = collectModelErrors();
    return result;
  }



  private Set<IErrorReporter> collectModelErrors() {
    Set<IErrorReporter> result = SetSequence.fromSet(new HashSet<IErrorReporter>());
    SetSequence.fromSet(result).addSequence(Sequence.fromIterable(getTypeSystemErrors()));
    SetSequence.fromSet(result).addSequence(Sequence.fromIterable(getConstraintsErrors()));
    modelErrorsHolder.set(SNodeOperations.getModel(myNode), result);
    return result;
  }



  public Iterable<IErrorReporter> getErrorsSpecificType(final MessageStatus errorType) {
    Set<IErrorReporter> result = SetSequence.fromSet(new HashSet<IErrorReporter>());
    SetSequence.fromSet(result).addSequence(Sequence.fromIterable(getErrors()).where(new IWhereFilter<IErrorReporter>() {
      public boolean accept(IErrorReporter it) {
        return it.getMessageStatus() == errorType;
      }
    }));
    return result;
  }



  private static class ModelErrorsHolder<T> {
    private Set<T> cachedErrors;
    private SModel actualModel;


    @Nullable
    public Set<T> get(SModel model) {
      if (cachedErrors != null && model.getModelId() == actualModel.getModelId()) {
        return cachedErrors;
      }
      return null;
    }



    public void set(SModel model, Set<T> errors) {
      actualModel = model;
      cachedErrors = SetSequence.fromSet(new HashSet<T>());
      SetSequence.fromSet(cachedErrors).addSequence(SetSequence.fromSet(errors));
    }
  }


}
