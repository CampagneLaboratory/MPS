package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import com.intellij.ide.DataManager;
import com.intellij.ide.impl.DataManagerImpl;
import jetbrains.mps.openapi.editor.Editor;
import org.jetbrains.mps.openapi.model.SNode;
import javax.swing.SwingUtilities;
import jetbrains.mps.smodel.ModelAccess;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.MPSModuleRepository;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import junit.framework.Assert;
import jetbrains.mps.lang.test.matcher.NodesMatcher;
import java.util.ArrayList;
import jetbrains.mps.intentions.IntentionsManager;
import java.util.Collection;
import jetbrains.mps.util.Pair;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.project.ModuleContext;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import com.intellij.openapi.fileEditor.FileEditorManager;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.workbench.nodesFs.MPSNodesVirtualFileSystem;
import java.lang.reflect.InvocationTargetException;
import jetbrains.mps.nodeEditor.EditorComponent;
import java.awt.event.KeyEvent;
import javax.swing.KeyStroke;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.action.ActionUtils;
import com.intellij.openapi.actionSystem.ActionPlaces;

public class BaseEditorTestBody extends BaseTestBody {
  private static DataManager DATA_MANAGER = new DataManagerImpl();
  public Editor myEditor;
  private SNode myBefore;
  private SNode myResult;
  protected CellReference myStart;
  protected CellReference myFinish;


  public BaseEditorTestBody() {
  }



  public Editor initEditor(final String before, final String after) throws Exception {
    final Exception[] exception = new Exception[1];
    SwingUtilities.invokeAndWait(new Runnable() {
      @Override
      public void run() {
        try {
          BaseEditorTestBody.this.initEditor_internal(before, after);
        } catch (Exception e) {
          exception[0] = e;
        }
      }
    });
    if (exception[0] != null) {
      throw exception[0];
    }
    return this.myEditor;
  }



  private void initEditor_internal(final String before, final String after) throws Exception {
    this.addNodeById(before);
    if (!(after.equals(""))) {
      this.addNodeById(after);
    }
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        BaseEditorTestBody.this.myBefore = BaseEditorTestBody.this.getNodeById(before);
        BaseEditorTestBody.this.myStart = BaseEditorTestBody.this.findCellReference(BaseEditorTestBody.this.getRealNodeById(before));
        if (BaseEditorTestBody.this.myStart == null) {
          throw new IllegalStateException("Cannot find cell reference in the test case 'before'");
        }
        if (!(after.equals(""))) {
          BaseEditorTestBody.this.myResult = BaseEditorTestBody.this.getNodeById(after);
          BaseEditorTestBody.this.myFinish = BaseEditorTestBody.this.findCellReference(BaseEditorTestBody.this.getRealNodeById(after));
        }
        BaseEditorTestBody.this.myEditor = BaseEditorTestBody.openEditor(BaseEditorTestBody.this.myProject, BaseEditorTestBody.this.myModel, BaseEditorTestBody.this.myBefore);
        BaseEditorTestBody.this.myStart.setupSelection(BaseEditorTestBody.this.myEditor);
      }
    });
  }



  private CellReference findCellReference(SNode node) {
    List<SNode> annotations = SNodeOperations.getDescendants(node, "jetbrains.mps.lang.test.structure.AnonymousCellAnnotation", false, new String[]{});
    if (ListSequence.fromList(annotations).isEmpty()) {
      return null;
    }
    return new CellReference(this.getNodeById(SNodeOperations.getParent(ListSequence.fromList(annotations).first()).getNodeId().toString()), ListSequence.fromList(annotations).first(), this.myMap);
  }



  public void checkAssertion() throws Throwable {
    final Wrappers._T<Throwable> throwable = new Wrappers._T<Throwable>(null);
    ModelAccess.instance().flushEventQueue();
    ModelAccess.instance().runCommandInEDT(new Runnable() {
      public void run() {
        if (BaseEditorTestBody.this.myResult != null) {
          try {
            SNode editedNode = ((SNodePointer) BaseEditorTestBody.this.myEditor.getCurrentlyEditedNode()).resolve(MPSModuleRepository.getInstance());
            Map<SNode, SNode> map = MapSequence.fromMap(new HashMap<SNode, SNode>());
            Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), editedNode), ListSequence.fromListAndArray(new ArrayList<SNode>(), BaseEditorTestBody.this.myResult), (Map) map));
            if (BaseEditorTestBody.this.myFinish != null) {
              BaseEditorTestBody.this.myFinish.assertEditor(BaseEditorTestBody.this.myEditor, map);
            }
          } catch (Throwable t) {
            throwable.value = t;
          }
        }
      }
    }, myEditor.getOperationContext().getProject());
    ModelAccess.instance().flushEventQueue();
    if (throwable.value != null) {
      throw throwable.value;
    }
  }



  public void testMethod() throws Throwable {
    try {
      this.testMethodImpl();
      this.checkAssertion();
    } finally {
      SwingUtilities.invokeAndWait(new Runnable() {
        @Override
        public void run() {
          BaseEditorTestBody.closeEditor(BaseEditorTestBody.this.myProject, BaseEditorTestBody.this.myBefore);
        }
      });
    }
  }



  public void testMethodImpl() throws Exception {
  }



  public static void invokeIntention(final String name, final Editor editor, final SNode node) throws Exception {
    SwingUtilities.invokeAndWait(new Runnable() {
      @Override
      public void run() {
        org.jetbrains.mps.openapi.module.ModelAccess modelAccess = editor.getEditorContext().getRepository().getModelAccess();
        modelAccess.executeCommand(new Runnable() {
          public void run() {
            editor.getEditorContext().select(node);
            IntentionsManager.QueryDescriptor query = new IntentionsManager.QueryDescriptor();
            query.setCurrentNodeOnly(true);
            Collection<Pair<IntentionExecutable, SNode>> intentions = IntentionsManager.getInstance().getAvailableIntentions(query, node, editor.getEditorContext());
            for (Pair<IntentionExecutable, SNode> intention : intentions) {
              if (intention.o1.getDescriptor().getPersistentStateKey().equals(name)) {
                intention.o1.execute(intention.o2, editor.getEditorContext());
              }
            }
          }
        });
      }
    });
  }



  public static Editor openEditor(Project project, SModel model, SNode node) {
    IOperationContext context = new ModuleContext(model.getModule(), project);
    return NavigationSupport.getInstance().openNode(context, node, true, !(jetbrains.mps.util.SNodeOperations.isRoot(node)));
  }



  public static void closeEditor(Project project, SNode node) {
    FileEditorManager editorManager = FileEditorManager.getInstance(ProjectHelper.toIdeaProject(project));
    editorManager.closeFile(MPSNodesVirtualFileSystem.getInstance().getFileFor(node));
  }



  public static void typeString(Editor editor, String text) throws InterruptedException, InvocationTargetException {
    typeString((EditorComponent) editor.getCurrentEditorComponent(), text);
  }



  public static void typeString(final EditorComponent editorComponent, final String text) throws InterruptedException, InvocationTargetException {
    SwingUtilities.invokeAndWait(new Runnable() {
      @Override
      public void run() {
        for (char ch : text.toCharArray()) {
          editorComponent.processKeyTyped(new KeyEvent(editorComponent, KeyEvent.KEY_TYPED, 0, 0, 0, ch));
        }
      }
    });
  }



  public static void pressKeys(Editor editor, List<String> keyStrokes) throws InterruptedException, InvocationTargetException {
    BaseEditorTestBody.pressKeys((EditorComponent) editor.getCurrentEditorComponent(), keyStrokes);
  }



  public static void pressKeys(final EditorComponent editorComponent, final List<String> keyStrokes) throws InterruptedException, InvocationTargetException {
    SwingUtilities.invokeAndWait(new Runnable() {
      @Override
      public void run() {
        for (String code : keyStrokes) {
          KeyStroke stroke = KeyStroke.getKeyStroke(code);
          int keyCode = stroke.getKeyCode();
          char keyChar = stroke.getKeyChar();
          if (keyChar == KeyEvent.CHAR_UNDEFINED && keyCode != KeyEvent.VK_UNDEFINED && ((keyCode >= KeyEvent.VK_0 && keyCode <= KeyEvent.VK_9) || (keyCode >= KeyEvent.VK_A && keyCode <= KeyEvent.VK_Z))) {
            // todo it may be worthwhile to also detect other unicode chars from keyCode and supply them into keyChar 
            // There is currently no good complete cross-platform code to char conversion utility, it seems 
            // KEY_PRESSED events may or may not contain a concrete keyChar. Its presence is definitely not a problem 
            keyChar = (char) keyCode;
          }

          editorComponent.processKeyPressed(new KeyEvent(editorComponent, KeyEvent.KEY_PRESSED, 0, stroke.getModifiers(), keyCode, keyChar));
          editorComponent.processKeyReleased(new KeyEvent(editorComponent, KeyEvent.KEY_RELEASED, 0, stroke.getModifiers(), keyCode, keyChar));
        }
      }
    });
  }

  public static void invokeAction(Editor editor, String actionId) throws InvocationTargetException, InterruptedException {
    invokeAction((EditorComponent) editor.getCurrentEditorComponent(), actionId);
  }

  public static void invokeAction(final EditorComponent editorComponent, final String actionId) throws InvocationTargetException, InterruptedException {
    SwingUtilities.invokeAndWait(new Runnable() {
      @Override
      public void run() {
        AnAction action = ActionManager.getInstance().getAction(actionId);
        AnActionEvent event = ActionUtils.createEvent(ActionPlaces.MAIN_MENU, BaseEditorTestBody.DATA_MANAGER.getDataContext(editorComponent));
        action.actionPerformed(event);
      }
    });
    flushEventQueueAfterAction();
  }



  protected static void flushEventQueueAfterAction() throws InvocationTargetException, InterruptedException {
    // flush queue 
    SwingUtilities.invokeAndWait(new Runnable() {
      @Override
      public void run() {
        // empty task 
      }
    });
    ModelAccess.instance().flushEventQueue();

    // some actions (Copy/Paste) are runing one more command later 
    SwingUtilities.invokeAndWait(new Runnable() {
      @Override
      public void run() {
        // empty task 
      }
    });
    ModelAccess.instance().flushEventQueue();
  }
}
