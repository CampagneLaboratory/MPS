package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import jetbrains.mps.nodeEditor.EditorComponent;
import com.intellij.openapi.command.impl.UndoManagerImpl;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.command.undo.UndoManager;
import jetbrains.mps.ide.project.ProjectHelper;
import com.intellij.openapi.command.impl.CurrentEditorProvider;
import com.intellij.openapi.fileEditor.FileEditor;
import com.intellij.openapi.actionSystem.DataContext;
import com.intellij.ide.DataManager;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import java.awt.Component;
import java.awt.KeyboardFocusManager;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import java.lang.reflect.InvocationTargetException;
import javax.swing.SwingUtilities;

public class UndoHelper {
  private final Project myProject;
  private final EditorComponent myEditorComponent;
  private UndoManagerImpl myUndoManager = null;

  public UndoHelper(Project project, EditorComponent component) {
    myProject = project;
    myEditorComponent = component;
  }

  @NotNull
  private UndoManagerImpl getUndoManager() {
    if (myUndoManager == null) {
      myUndoManager = (UndoManagerImpl) UndoManager.getInstance(ProjectHelper.toIdeaProject(myProject));
    }
    return myUndoManager;
  }

  private void hackUndoManager() {
    getUndoManager().setEditorProvider(new CurrentEditorProvider() {
      public FileEditor getCurrentEditor() {
        DataContext context = DataManager.getInstance().getDataContext(myEditorComponent);
        return MPSCommonDataKeys.FILE_EDITOR.getData(context);
      }
    });
  }

  private void unhackUndoManager() {
    // the dirtiest hack : copy of the platform's FocusBasedCurrentEditorProvider 
    getUndoManager().setEditorProvider(new CurrentEditorProvider() {
      public FileEditor getCurrentEditor() {
        final Component owner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
        return PlatformDataKeys.FILE_EDITOR.getData(DataManager.getInstance().getDataContext(owner));
      }
    });
  }

  public void runUndoableInEDTAndWait(final Runnable runnable) throws InvocationTargetException, InterruptedException {
    SwingUtilities.invokeAndWait(new Runnable() {
      public void run() {
        UndoHelper.this.hackUndoManager();
        runnable.run();
        UndoHelper.this.unhackUndoManager();
      }
    });
  }

}
