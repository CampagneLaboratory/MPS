package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.project.Project;
import jetbrains.mps.lang.test.util.TestLightRunState;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.generator.impl.CloneUtil;

public abstract class BaseTransformationTest4 implements TransformationTest {
  private TestRunner myRunner;

  private SModel myModel;
  private SModel myTransientModel;
  private Project myProject;


  private void initTestRunner() {
    TestLightRunState runState = TransformationTestLightRunner.getRunState(Thread.currentThread().getId());
    if (runState.isRunning()) {
      setTestRunner(new TransformationTestLightRunner());
    } else {
      setTestRunner(new TransformationTestRunner());
    }
  }



  public BaseTransformationTest4() {
    initTestRunner();
  }



  @Override
  public void setTestRunner(TestRunner runner) {
    myRunner = runner;
  }



  @Override
  public TestRunner getTestRunner() {
    return myRunner;
  }



  public BaseTransformationTest4(Project project, SModel modelDescriptor) {
    this();
    myProject = project;
    myModel = modelDescriptor;
  }



  public void initTest(@NotNull String projectName, final String model) throws Exception {
    initTest(projectName, model, false, false);
  }



  public void initTest(@NotNull String projectName, final String model, boolean uiTest, boolean reOpenProject) throws Exception {
    myRunner.initTest(this, projectName, model, uiTest, reOpenProject);
  }



  public void runTest(String className, final String methodName, final boolean runInCommand) throws Throwable {
    myRunner.runTest(this, className, methodName, runInCommand);
  }



  @Override
  public void init() {
    this.myTransientModel = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModule());
    new CloneUtil(this.myModel, this.myTransientModel).cloneModelWithImports();
    TemporaryModels.getInstance().addMissingImports(myTransientModel);
  }



  @Override
  public void dispose() {
    TemporaryModels.getInstance().dispose(myTransientModel);
    myTransientModel = null;
  }

  @Override
  public SModel getModelDescriptor() {
    return myModel;
  }

  @Override
  public void setModelDescriptor(SModel descriptor) {
    myModel = descriptor;
  }

  @Override
  public SModel getTransientModelDescriptor() {
    return myTransientModel;
  }

  @Override
  public Project getProject() {
    return myProject;
  }

  @Override
  public void setProject(Project project) {
    myProject = project;
  }
}
