package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.Project;
import jetbrains.mps.kernel.model.TemporaryModelOwner;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.idea.LoggerFactory;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.ProjectModels;
import jetbrains.mps.generator.impl.CloneUtil;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.smodel.SModelRepository;

public abstract class BaseTransformationTest4 implements TransformationTest {
  public static final String PATH_MACRO_PREFIX = "path.macro.";
  private TransformationTestRunner myRunner = new TransformationTestRunner();
  private SModelDescriptor myModel;
  private SModelDescriptor myTransientModel;
  private Project myProject;
  private TemporaryModelOwner myModelOwner;

  public BaseTransformationTest4() {
    Logger.setFactory(LoggerFactory.getInstance());
  }

  public BaseTransformationTest4(Project project, SModelDescriptor modelDescriptor) {
    this();
    // todo: ever used? 
    myProject = project;
    myModel = modelDescriptor;
  }

  @Override
  public void setTestRunner(TransformationTestRunner ttr) {
    this.myRunner = ttr;
  }

  @Override
  public TransformationTestRunner getTestRunner() {
    return myRunner;
  }

  public void initTest(@NotNull String projectName, final String model) throws Exception {
    initTest(projectName, model, false, false);
  }

  public void initTest(@NotNull String projectName, final String model, boolean uiTest, boolean reOpenProject) throws Exception {
    myRunner.initTest(this, projectName, model, uiTest, reOpenProject);
  }

  public void runTest(String className, final String methodName, final boolean runInCommand) throws Throwable {
    myRunner.runTest(this, className, methodName, runInCommand);
  }

  @Override
  public void init() {
    this.myModelOwner = new TemporaryModelOwner();
    this.myTransientModel = ProjectModels.createDescriptorFor(true);
    CloneUtil.cloneModelWithImports(this.myModel.getSModel(), this.myTransientModel.getSModel(), false);
    SModelOperations.validateLanguagesAndImports(this.myTransientModel.getSModel(), false, false);
    SModelRepository.getInstance().registerModelDescriptor(this.myTransientModel, this.myModelOwner);
  }

  @Override
  public SModelDescriptor getModelDescriptor() {
    return myModel;
  }

  @Override
  public void setModelDescriptor(SModelDescriptor descriptor) {
    myModel = descriptor;
  }

  @Override
  public SModelDescriptor getTransientModelDescriptor() {
    return myTransientModel;
  }

  @Override
  public Project getProject() {
    return myProject;
  }

  @Override
  public void setProject(Project project) {
    myProject = project;
  }

  @Override
  public TemporaryModelOwner getModelOwner() {
    return myModelOwner;
  }
}
