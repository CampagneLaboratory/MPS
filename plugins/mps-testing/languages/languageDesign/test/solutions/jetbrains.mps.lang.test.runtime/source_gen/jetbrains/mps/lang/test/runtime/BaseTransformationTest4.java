package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.project.Project;
import java.lang.reflect.Method;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.idea.LoggerFactory;
import java.lang.reflect.InvocationTargetException;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.generator.impl.CloneUtil;

public abstract class BaseTransformationTest4 implements TransformationTest {
  public static final String PATH_MACRO_PREFIX = "path.macro.";
  private TransformationTestRunner myRunner = new TransformationTestRunner();
  private SModel myModel;
  private SModel myTransientModel;
  private Project myProject;

  public BaseTransformationTest4() {
    try {
      Method method = null;
      boolean isIDEA12 = true;
      for (Method m : Logger.class.getDeclaredMethods()) {
        if (m.getName().equals("setFactory")) {
          method = m;
          isIDEA12 = method.getParameterTypes()[0].equals(Logger.Factory.class);
          break;
        }
      }
      method.invoke(null, (isIDEA12 ?
        LoggerFactory.class.getDeclaredMethod("getInstance").invoke(null) :
        LoggerFactory.class
      ));
    } catch (IllegalAccessException e) {
    } catch (InvocationTargetException e) {
    } catch (NoSuchMethodException e) {
    }

  }

  public BaseTransformationTest4(Project project, SModel modelDescriptor) {
    this();
    // todo: ever used? 
    myProject = project;
    myModel = modelDescriptor;
  }

  @Override
  public void setTestRunner(TransformationTestRunner ttr) {
    this.myRunner = ttr;
  }

  @Override
  public TransformationTestRunner getTestRunner() {
    return myRunner;
  }

  public void initTest(@NotNull String projectName, final String model) throws Exception {
    initTest(projectName, model, false, false);
  }

  public void initTest(@NotNull String projectName, final String model, boolean uiTest, boolean reOpenProject) throws Exception {
    myRunner.initTest(this, projectName, model, uiTest, reOpenProject);
  }

  public void runTest(String className, final String methodName, final boolean runInCommand) throws Throwable {
    myRunner.runTest(this, className, methodName, runInCommand);
  }

  @Override
  public void init() {
    this.myTransientModel = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModule());
    CloneUtil.cloneModelWithImports(this.myModel, this.myTransientModel, false);
    TemporaryModels.getInstance().addMissingImports(myTransientModel);
  }

  @Override
  public void dispose() {
    TemporaryModels.getInstance().dispose(myTransientModel);
    myTransientModel = null;
  }

  @Override
  public SModel getModelDescriptor() {
    return myModel;
  }

  @Override
  public void setModelDescriptor(SModel descriptor) {
    myModel = descriptor;
  }

  @Override
  public SModel getTransientModelDescriptor() {
    return myTransientModel;
  }

  @Override
  public Project getProject() {
    return myProject;
  }

  @Override
  public void setProject(Project project) {
    myProject = project;
  }
}
