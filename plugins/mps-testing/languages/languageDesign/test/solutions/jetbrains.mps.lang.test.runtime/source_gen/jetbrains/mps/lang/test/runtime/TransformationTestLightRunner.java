package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.Project;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.util.MacrosFactory;
import java.io.File;
import jetbrains.mps.project.ProjectManager;
import java.io.IOException;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class TransformationTestLightRunner extends TransformationTestRunner {


  @Override
  public void initTest(@NotNull final TransformationTest test, @NotNull String projectPath, String modelName, boolean uiTest, boolean reopenProject) throws Exception {
    final Project testProject = findProject(projectPath);
    doInitTest(test, testProject, modelName);
    // todo: try removing this line 
    ModelAccess.instance().flushEventQueue();
  }



  @Override
  public void runTest(@NotNull final TransformationTest projectTest, String className, final String methodName, boolean runInCommand) throws Throwable {
    super.runTest(projectTest, className, methodName, runInCommand);
  }



  @Nullable
  private Project findProject(@NotNull String projectPath) {
    String expandedProjectPath = MacrosFactory.getGlobal().expandPath(projectPath);
    File projectFile = new File(expandedProjectPath);
    for (Project project : ProjectManager.getInstance().getOpenProjects()) {
      if (TransformationTestLightRunner.projectHasPath(project, projectFile)) {
        return project;
      }
    }
    return null;
  }



  private static boolean projectHasPath(Project project, File path) {
    File projectFile = project.getProjectFile();
    if (projectFile == null) {
      return false;
    }
    try {
      String myProjectPath = projectFile.getCanonicalPath();
      String newProjectPath = path.getCanonicalPath();
      return myProjectPath.equals(newProjectPath);
    } catch (IOException e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Cannot access the project file in container", e);
      }
    }
    return false;
  }


  protected static Logger LOG = LogManager.getLogger(TransformationTestLightRunner.class);
}
