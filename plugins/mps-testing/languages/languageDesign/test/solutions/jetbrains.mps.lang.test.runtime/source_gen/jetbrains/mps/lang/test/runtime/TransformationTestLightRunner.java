package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.Project;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.util.Computable;
import java.util.Collection;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import jetbrains.mps.project.ProjectManager;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;

public class TransformationTestLightRunner extends TransformationTestRunner {
  @Override
  public void initTest(@NotNull final TransformationTest test, @NotNull String projectPath, String modelName, boolean reopenProject) throws Exception {
    final Project testProject = findProject(modelName);
    if (testProject == null) {
      throw new IllegalStateException("Cannot execute test in-process : the context project containing the model " + modelName + " was not found");
    }
    doInitTest(test, testProject, modelName);
    ModelAccess.instance().flushEventQueue();
  }

  @Override
  public void runTest(@NotNull final TransformationTest projectTest, String className, final String methodName, boolean runInCommand) throws Throwable {
    super.runTest(projectTest, className, methodName, runInCommand);
  }

  @Nullable
  private Project findProject(String modelName) {
    SModel contextModel = findModel(modelName);
    final SModule contextModule = check_1frbnp_a0b0e(contextModel);
    if (contextModule == null) {
      return null;
    }
    return ModelAccess.instance().runReadAction(new Computable<Project>() {
      public Project compute() {
        Collection<SModule> runtimeDeps = new GlobalModuleDependenciesManager(contextModule).getModules(GlobalModuleDependenciesManager.Deptype.EXECUTE);
        for (Project project : ProjectManager.getInstance().getOpenProjects()) {
          SRepository repo = project.getRepository();
          boolean found = true;
          for (SModule module : CollectionSequence.fromCollection(runtimeDeps)) {
            if (repo.getModule(module.getModuleId()) == null) {
              found = false;
            }
          }
          if (found) {
            return project;
          }
        }
        return null;
      }
    });
  }
  private static SModule check_1frbnp_a0b0e(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }
}
