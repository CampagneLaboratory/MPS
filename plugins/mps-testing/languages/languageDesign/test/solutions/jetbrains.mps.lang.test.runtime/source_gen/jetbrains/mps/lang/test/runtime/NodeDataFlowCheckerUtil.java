package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.dataFlow.DataFlowManager;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;
import java.util.List;
import java.util.Set;
import jetbrains.mps.lang.dataFlow.framework.AnalysisResult;
import jetbrains.mps.lang.dataFlow.framework.VarSet;
import jetbrains.mps.lang.dataFlow.framework.analyzers.InitializedVariablesAnalyzer;
import jetbrains.mps.lang.dataFlow.framework.analyzers.LivenessAnalyzer;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import junit.framework.Assert;
import jetbrains.mps.internal.collections.runtime.SetSequence;

public class NodeDataFlowCheckerUtil {


  public NodeDataFlowCheckerUtil() {
  }



  public static void checkDataFlow(final SNode node) {
    Program program = DataFlowManager.getInstance().buildProgramFor(node);
    Instruction instruction;
    List<Instruction> instructions = program.getInstructionsFor(node);
    Set<Instruction> unreachable = program.getUnreachableInstructions();
    AnalysisResult<VarSet> initialized = program.analyze(new InitializedVariablesAnalyzer());
    AnalysisResult<VarSet> live = program.analyze(new LivenessAnalyzer());
    for (SNode child : ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.NodeOperationsContainer")) != null);
      }
    })) {
      assert AttributeOperations.getAttribute(child, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.NodeOperationsContainer")) != null;
      SNode container = AttributeOperations.getAttribute(child, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.NodeOperationsContainer"));
      for (SNode operation : SLinkOperations.getTargets(container, "nodeOperations", true)) {
        if (ListSequence.fromList(instructions).isNotEmpty()) {
          instruction = program.getInstructionsFor(child).get(0);
        } else {
          continue;
        }

        if (SNodeOperations.isInstanceOf(operation, "jetbrains.mps.lang.test.structure.NodeReachable")) {
          Assert.assertFalse("instruction <" + instruction + "> is unreachable", SetSequence.fromSet(unreachable).contains(instruction));
        }

        if (SNodeOperations.isInstanceOf(operation, "jetbrains.mps.lang.test.structure.NodeUnreachable")) {
          Assert.assertTrue("instruction <" + instruction + "> is reachable", SetSequence.fromSet(unreachable).contains(instruction));
        }

        if (SNodeOperations.isInstanceOf(operation, "jetbrains.mps.lang.test.structure.VariableInitialized")) {
          Set<Object> vars = (Set<Object>) initialized.get(instruction);
          SNode var = SLinkOperations.getTarget(SNodeOperations.cast(operation, "jetbrains.mps.lang.test.structure.VariableInitialized"), "var", true);
          Assert.assertTrue("variable <" + var + "> is not initialized", SetSequence.fromSet(vars).contains(SLinkOperations.getTarget(var, "variableDeclaration", false)));
        }

        if (SNodeOperations.isInstanceOf(operation, "jetbrains.mps.lang.test.structure.VariableAlive")) {
          Set<Object> vars = (Set<Object>) live.get(instruction);
          SNode var = SLinkOperations.getTarget(SNodeOperations.cast(operation, "jetbrains.mps.lang.test.structure.VariableInitialized"), "var", true);
          Assert.assertTrue("variable <" + var + "> is not alive", SetSequence.fromSet(vars).contains(SLinkOperations.getTarget(var, "variableDeclaration", false)));
        }
      }
    }
  }


}
