package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.test.util.TestLightRunState;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.generator.impl.CloneUtil;

public abstract class BaseTransformationTest implements TransformationTest {
  private Project myProject;
  private SModel myModel;

  private SModel myTransientModel;
  private TestRunner myRunner;

  public boolean isExecutionInProcess() {
    return check_c18na_a0a6(System.getProperty(TestLightRunState.LIGHT_EXEC_FLAG));
  }

  private void initTestRunner() {
    if (isExecutionInProcess()) {
      setTestRunner(new TransformationTestLightRunner());
    } else {
      setTestRunner(new TransformationTestRunner());
    }
  }

  public BaseTransformationTest() {
    initTestRunner();
  }

  public BaseTransformationTest(Project project, SModel modelDescriptor) {
    this();
    myProject = project;
    myModel = modelDescriptor;
  }

  @Override
  public void setTestRunner(TestRunner runner) {
    myRunner = runner;
  }

  @Override
  public TestRunner getTestRunner() {
    return myRunner;
  }

  public void initTest(@NotNull String projectName, final String model) throws Exception {
    initTest(projectName, model, false);
  }

  public void initTest(@NotNull String projectName, final String model, boolean reOpenProject) throws Exception {
    myRunner.initTest(this, projectName, model, reOpenProject);
  }

  public void runTest(String className, final String methodName, final boolean runInCommand) throws Throwable {
    myRunner.runTest(this, className, methodName, runInCommand);
  }

  @Override
  public void init() {
    this.myTransientModel = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModule());
    new CloneUtil(this.myModel, this.myTransientModel).cloneModelWithAllImports();
  }

  @Override
  public void dispose() {
    TemporaryModels.getInstance().dispose(myTransientModel);
    myTransientModel = null;
  }
  @Override
  public SModel getModelDescriptor() {
    return myModel;
  }
  @Override
  public void setModelDescriptor(SModel descriptor) {
    myModel = descriptor;
  }
  @Override
  public void setTransientModelDescriptor(SModel descriptor) {
    myTransientModel = descriptor;
  }
  @Override
  public SModel getTransientModelDescriptor() {
    return myTransientModel;
  }
  @Override
  public Project getProject() {
    return myProject;
  }
  @Override
  public void setProject(Project project) {
    myProject = project;
  }
  private static boolean check_c18na_a0a6(String checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.equals("true");
    }
    return false;
  }
}
