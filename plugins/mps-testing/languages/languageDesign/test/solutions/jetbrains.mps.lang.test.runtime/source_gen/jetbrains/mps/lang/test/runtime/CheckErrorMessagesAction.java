package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import junit.framework.Assert;
import jetbrains.mps.errors.MessageStatus;

public class CheckErrorMessagesAction implements Runnable {
  private SNode node;
  private boolean allowsWarnings;
  private boolean allowsErrors;

  public CheckErrorMessagesAction(SNode node, boolean allowsWarnings, boolean allowsErrors) {
    this.node = node;
    this.allowsWarnings = allowsWarnings;
    this.allowsErrors = allowsErrors;
  }

  @Override
  public void run() {
    TestsErrorsChecker checker = new TestsErrorsChecker(SNodeOperations.getContainingRoot(node));
    List<SNode> descendants = SNodeOperations.getDescendants(node, "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{});
    final Iterable<IErrorReporter> reporters = checker.getAllErrors();
    for (IErrorReporter reporter : reporters) {
      SNode child = reporter.getSNode();
      assert child != null;
      if (!(ListSequence.fromList(descendants).contains(child))) {
        continue;
      }
      if (hasErrorOrWarningCheckOperationTag(child)) {
        continue;
      }
      final String messageString = getErrorString(reporter, child);
      checkWarnings(reporter, messageString);
      checkErrors(reporter, messageString);
    }
  }

  private static boolean hasErrorOrWarningCheckOperationTag(SNode node) {
    if (AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.NodeOperationsContainer")) == null) {
      return false;
    }
    SNode container = AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.NodeOperationsContainer"));
    for (SNode property : SLinkOperations.getChildren(container, MetaAdapterFactory.getContainmentLink(new UUID(-8825571760360698496l, -7431307307277756308l), 1215603922101l, 1215604436604l, "nodeOperations"))) {
      if (SNodeOperations.isInstanceOf(property, "jetbrains.mps.lang.test.structure.IChecksRules")) {
        return true;
      }
    }
    return false;
  }

  private void checkWarnings(IErrorReporter reporter, String warningMsg) {
    if (!(allowsWarnings)) {
      Assert.assertTrue(warningMsg, reporter.getMessageStatus() != MessageStatus.WARNING);
    }
  }

  private void checkErrors(IErrorReporter reporter, String errorMsg) {
    if (!(allowsErrors)) {
      Assert.assertTrue(errorMsg, reporter.getMessageStatus() != MessageStatus.ERROR);
    }
  }

  private String getErrorString(IErrorReporter reporter, SNode node) {
    return reporter.reportError() + ". Node '" + NodeCheckerUtil.nodeWithIdToString(node) + "'";
  }
}
