package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.project.Project;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class BaseTestBody {
  public SModel myModel;
  public Project myProject;
  protected Map<SNode, SNode> myMap;
  private List<SNode> myCopies;
  public BaseTestBody() {
    this.myMap = MapSequence.fromMap(new HashMap<SNode, SNode>());
    this.myCopies = ListSequence.fromList(new ArrayList<SNode>());
  }
  public void addNodeById(final String id) throws Exception {
    myProject.getModelAccess().executeCommand(new Runnable() {
      public void run() {
        SNode node = BaseTestBody.this.myModel.getNode(SNodeId.fromString(id));
        SNode copy = CopyUtil.copy(node, BaseTestBody.this.myMap, true);
        for (SNode a : ListSequence.fromList(SNodeOperations.getDescendants(copy, "jetbrains.mps.lang.test.structure.INodeAnnotation", false, new String[]{}))) {
          SNodeOperations.deleteNode(a);
        }
        BaseTestBody.this.myModel.addRootNode(copy);
        ListSequence.fromList(BaseTestBody.this.myCopies).addElement(copy);
      }
    });
  }
  public SNode getNodeById(String id) {
    return MapSequence.fromMap(this.myMap).get(this.myModel.getNode(SNodeId.fromString(id)));
  }
  public SNode getRealNodeById(String id) {
    return this.myModel.getNode(SNodeId.fromString(id));
  }
}
