package jetbrains.mps.lang.test.util;

/*Generated by MPS */

import org.apache.log4j.Level;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class TestLightRunState implements Comparable<TestLightRunState> {
  public static final String LIGHT_EXEC_FLAG = "mps.light.execution";

  private volatile TestLightRunStateEnum myValue;

  public TestLightRunState() {
    myValue = TestLightRunStateEnum.IDLE;
  }
  public TestLightRunStateEnum get() {
    return myValue;
  }
  public void set(TestLightRunStateEnum value) {
    myValue = value;
  }
  public void advance(TestLightRunStateEnum value) {
    assert myValue.compareTo(value) < 0;
    set(value);
  }
  public void reset() {
    if (!(isTerminated())) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Run was not terminated properly");
      }
    }
    set(TestLightRunStateEnum.IDLE);
  }
  private int ordinal() {
    return myValue.ordinal();
  }
  public boolean greater(TestLightRunStateEnum another) {
    return this.ordinal() > another.ordinal();
  }
  public boolean greater(TestLightRunState another) {
    return this.ordinal() > another.ordinal();
  }
  @Override
  public int compareTo(@NotNull TestLightRunState another) {
    return myValue.compareTo(another.myValue);
  }
  public boolean isInitialized() {
    return myValue == TestLightRunStateEnum.INITIALIZED;
  }
  public boolean isReady() {
    return myValue == TestLightRunStateEnum.READYTOEXECUTE;
  }
  public boolean isRunning() {
    return myValue == TestLightRunStateEnum.RUNNING;
  }
  public boolean isTerminating() {
    return myValue == TestLightRunStateEnum.TERMINATING;
  }
  public boolean isTerminated() {
    return myValue == TestLightRunStateEnum.TERMINATED;
  }

  protected static Logger LOG = LogManager.getLogger(TestLightRunState.class);
}
