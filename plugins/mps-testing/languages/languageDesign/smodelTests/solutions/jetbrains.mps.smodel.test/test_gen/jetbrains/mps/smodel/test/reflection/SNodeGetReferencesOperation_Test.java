package jetbrains.mps.smodel.test.reflection;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import junit.framework.Assert;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.references.UnregisteredNodes;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

@MPSLaunch
public class SNodeGetReferencesOperation_Test extends BaseTransformationTest {
  @Test
  public void test_size() throws Throwable {
    this.initTest("${mps_home}", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection@tests)", false);
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferencesOperation_Test$TestBody", "test_size", true);
  }
  @Test
  public void test_target() throws Throwable {
    this.initTest("${mps_home}", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection@tests)", false);
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferencesOperation_Test$TestBody", "test_target", true);
  }
  @Test
  public void test_linkDeclaration() throws Throwable {
    this.initTest("${mps_home}", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection@tests)", false);
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferencesOperation_Test$TestBody", "test_linkDeclaration", true);
  }
  @Test
  public void test_forSpecializedLink() throws Throwable {
    this.initTest("${mps_home}", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection@tests)", false);
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferencesOperation_Test$TestBody", "test_forSpecializedLink", true);
  }
  @Test
  public void test_roles() throws Throwable {
    this.initTest("${mps_home}", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection@tests)", false);
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferencesOperation_Test$TestBody", "test_roles", true);
  }
  @Test
  public void test_resolveInfo() throws Throwable {
    this.initTest("${mps_home}", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection@tests)", false);
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferencesOperation_Test$TestBody", "test_resolveInfo", true);
  }
  @Test
  public void test_unspecifiedReferences() throws Throwable {
    this.initTest("${mps_home}", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection@tests)", false);
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferencesOperation_Test$TestBody", "test_unspecifiedReferences", true);
  }
  @Test
  public void test_unresolvedReference() throws Throwable {
    this.initTest("${mps_home}", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection@tests)", false);
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferencesOperation_Test$TestBody", "test_unresolvedReference", true);
  }
  @Test
  public void test_forNull() throws Throwable {
    this.initTest("${mps_home}", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection@tests)", false);
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferencesOperation_Test$TestBody", "test_forNull", true);
  }
  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_size() throws Exception {
      this.addNodeById("2906110183022219846");
      this.addNodeById("2906110183022219807");
      this.addNodeById("2906110183022219843");
      this.addNodeById("2906110183022354865");
      this.addNodeById("2906110183022432276");
      Assert.assertTrue(Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022219808"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).isEmpty());
      Assert.assertEquals(3, Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022219844"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).count());
    }
    public void test_target() throws Exception {
      this.addNodeById("2906110183022219846");
      this.addNodeById("2906110183022219807");
      this.addNodeById("2906110183022219843");
      this.addNodeById("2906110183022354865");
      this.addNodeById("2906110183022432276");
      TestUtilities.assertEquals(Sequence.fromArray(new SNode[]{SNodeOperations.cast(this.getNodeById("2906110183022219847"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 278471160714141637l, "jetbrains.mps.lang.smodelTests.structure.Root")), SNodeOperations.cast(this.getNodeById("2906110183022219848"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 278471160714141631l, "jetbrains.mps.lang.smodelTests.structure.Child")), SNodeOperations.cast(this.getNodeById("2906110183022311236"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 34342663958604621l, "jetbrains.mps.lang.smodelTests.structure.ChildSubConcept"))}), Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022219844"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).select(new ISelector<SReference, SNode>() {
        public SNode select(SReference it) {
          return SLinkOperations.getTargetNode(it);
        }
      }));
    }
    public void test_linkDeclaration() throws Exception {
      this.addNodeById("2906110183022219846");
      this.addNodeById("2906110183022219807");
      this.addNodeById("2906110183022219843");
      this.addNodeById("2906110183022354865");
      this.addNodeById("2906110183022432276");
      TestUtilities.assertEquals(Sequence.fromArray(new SNode[]{SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851399l, "root")), SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851400l, "leftChild")), SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851401l, "rightChild"))}), Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022219844"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).select(new ISelector<SReference, SNode>() {
        public SNode select(SReference it) {
          return SLinkOperations.findLinkDeclaration(it);
        }
      }));
    }
    public void test_forSpecializedLink() throws Exception {
      this.addNodeById("2906110183022219846");
      this.addNodeById("2906110183022219807");
      this.addNodeById("2906110183022219843");
      this.addNodeById("2906110183022354865");
      this.addNodeById("2906110183022432276");
      TestUtilities.assertEquals(Sequence.fromArray(new SNode[]{SNodeOperations.cast(this.getNodeById("2906110183022311236"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 34342663958604621l, "jetbrains.mps.lang.smodelTests.structure.ChildSubConcept"))}), Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022354866"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 2854075155748534270l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept")))).where(new IWhereFilter<SReference>() {
        public boolean accept(SReference it) {
          return SLinkOperations.findLinkDeclaration(it) == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851401l, "rightChild"));
        }
      }).select(new ISelector<SReference, SNode>() {
        public SNode select(SReference it) {
          return SLinkOperations.getTargetNode(it);
        }
      }));
      Assert.assertTrue(Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022354866"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 2854075155748534270l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept")))).where(new IWhereFilter<SReference>() {
        public boolean accept(SReference it) {
          return SLinkOperations.findLinkDeclaration(it) == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 2854075155748534270l, 2854075155748534272l, "specializedRightChild"));
        }
      }).isEmpty());
    }
    public void test_roles() throws Exception {
      this.addNodeById("2906110183022219846");
      this.addNodeById("2906110183022219807");
      this.addNodeById("2906110183022219843");
      this.addNodeById("2906110183022354865");
      this.addNodeById("2906110183022432276");
      TestUtilities.assertEquals(Sequence.fromArray(new String[]{SPropertyOperations.getString(SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851399l, "root")), MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599776563l, "role")), SPropertyOperations.getString(SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851400l, "leftChild")), MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599776563l, "role")), SPropertyOperations.getString(SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851401l, "rightChild")), MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599776563l, "role"))}), Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022219844"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).select(new ISelector<SReference, String>() {
        public String select(SReference it) {
          return SLinkOperations.getRole(it);
        }
      }));
    }
    public void test_resolveInfo() throws Exception {
      this.addNodeById("2906110183022219846");
      this.addNodeById("2906110183022219807");
      this.addNodeById("2906110183022219843");
      this.addNodeById("2906110183022354865");
      this.addNodeById("2906110183022432276");
      // Resolving references by accessing .target node: 
      Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022219844"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).visitAll(new IVisitor<SReference>() {
        public void visit(SReference it) {
          SLinkOperations.getTargetNode(it);
        }
      });
      Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022219844"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).select(new ISelector<SReference, String>() {
        public String select(SReference it) {
          return SLinkOperations.getResolveInfo(it);
        }
      }).visitAll(new IVisitor<String>() {
        public void visit(String it) {
          Assert.assertNotNull(it);
        }
      });
    }
    public void test_unspecifiedReferences() throws Exception {
      this.addNodeById("2906110183022219846");
      this.addNodeById("2906110183022219807");
      this.addNodeById("2906110183022219843");
      this.addNodeById("2906110183022354865");
      this.addNodeById("2906110183022432276");
      // Adding one unspecified reference and checking if it was added properly 
      int initialSize = Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022432277"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).count();
      String unspecifiedReferenceName = this.addUnspecifiedReference(SNodeOperations.cast(this.getNodeById("2906110183022432277"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")), SNodeOperations.cast(this.getNodeById("2906110183022219849"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 278471160714141636l, "jetbrains.mps.lang.smodelTests.structure.GrandChild")));
      Assert.assertEquals(initialSize + 1, Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022432277"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).count());
      // Checking if unspecified reference is working properly 
      Iterable<SReference> unspecifiedReferences = Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022432277"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).where(new IWhereFilter<SReference>() {
        public boolean accept(SReference it) {
          return (SLinkOperations.findLinkDeclaration(it) == null);
        }
      });
      Assert.assertEquals(1, Sequence.fromIterable(unspecifiedReferences).count());
      SReference theReference = Sequence.fromIterable(unspecifiedReferences).first();
      Assert.assertEquals(unspecifiedReferenceName, SLinkOperations.getRole(theReference));
      Assert.assertEquals(SNodeOperations.cast(this.getNodeById("2906110183022219849"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 278471160714141636l, "jetbrains.mps.lang.smodelTests.structure.GrandChild")), SLinkOperations.getTargetNode(theReference));
    }
    public void test_unresolvedReference() throws Exception {
      this.addNodeById("2906110183022219846");
      this.addNodeById("2906110183022219807");
      this.addNodeById("2906110183022219843");
      this.addNodeById("2906110183022354865");
      this.addNodeById("2906110183022432276");
      SLinkOperations.getTarget(SNodeOperations.cast(this.getNodeById("2906110183022219844"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")), MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851399l, "root"));
      SLinkOperations.getTarget(SNodeOperations.cast(this.getNodeById("2906110183022219844"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")), MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851400l, "leftChild"));
      SLinkOperations.getTarget(SNodeOperations.cast(this.getNodeById("2906110183022219844"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")), MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851401l, "rightChild"));

      SLinkOperations.getTarget(SNodeOperations.cast(this.getNodeById("2906110183022354866"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 2854075155748534270l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept")), MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851399l, "root"));
      SLinkOperations.getTarget(SNodeOperations.cast(this.getNodeById("2906110183022354866"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 2854075155748534270l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept")), MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851400l, "leftChild"));
      SLinkOperations.getTarget(SNodeOperations.cast(this.getNodeById("2906110183022354866"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 2854075155748534270l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept")), MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851401l, "rightChild"));

      int initialSize = Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022432277"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).count();
      Assert.assertTrue(Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022432277"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).where(new IWhereFilter<SReference>() {
        public boolean accept(SReference it) {
          return (SLinkOperations.getTargetNode(it) == null);
        }
      }).isEmpty());
      SLinkOperations.getTarget(SNodeOperations.cast(this.getNodeById("2906110183022432277"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")), MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851399l, "root")).delete();
      UnregisteredNodes.instance().clear();
      Assert.assertEquals(initialSize, Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022432277"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).count());
      Iterable<SReference> brokenReferences = Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022432277"), MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer")))).where(new IWhereFilter<SReference>() {
        public boolean accept(SReference it) {
          return jetbrains.mps.util.SNodeOperations.getTargetNodeSilently(it) == null;
        }
      });
      Assert.assertEquals(1, Sequence.fromIterable(brokenReferences).count());
      SReference theReference = Sequence.fromIterable(brokenReferences).first();
      Assert.assertEquals(SPropertyOperations.getString(SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851399l, "root")), MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599776563l, "role")), SLinkOperations.getRole(theReference));
      Assert.assertEquals(SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l, -8216104078447456642l), 8758390115028851398l, 8758390115028851399l, "root")), SLinkOperations.findLinkDeclaration(theReference));
      Assert.assertNotNull(SLinkOperations.getResolveInfo(theReference));
    }
    public void test_forNull() throws Exception {
      this.addNodeById("2906110183022219846");
      this.addNodeById("2906110183022219807");
      this.addNodeById("2906110183022219843");
      this.addNodeById("2906110183022354865");
      this.addNodeById("2906110183022432276");
      SNode nullNode = null;
      Assert.assertTrue(Sequence.fromIterable(SNodeOperations.getReferences(nullNode)).isEmpty());
      SReference nullReference = null;
      Assert.assertNull(SLinkOperations.findLinkDeclaration(nullReference));
      Assert.assertNull(SLinkOperations.getRole(nullReference));
      Assert.assertNull(SLinkOperations.getTargetNode(nullReference));
      Assert.assertNull(SLinkOperations.getResolveInfo(nullReference));
    }
    public String addUnspecifiedReference(SNode input, SNode referenceTarget) {
      String referenceName = "unspecifiedReference";
      SNodeAccessUtil.setReferenceTarget(input, referenceName, referenceTarget);
      return referenceName;
    }
  }
}
