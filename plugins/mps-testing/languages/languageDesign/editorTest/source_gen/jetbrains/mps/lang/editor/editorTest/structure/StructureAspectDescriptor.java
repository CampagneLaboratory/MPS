package jetbrains.mps.lang.editor.editorTest.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAttractsFocusBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.AttractsFocusBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").children(new String[]{"child"}, new boolean[]{false}).alias("attracts focus", "").create();
  /*package*/ final ConceptDescriptor myConceptBinaryExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.BinaryExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").children(new String[]{"left", "right"}, new boolean[]{false, false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBracesBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.BracesBlock").super_("jetbrains.mps.lang.editor.editorTest.structure.TestBlockList").parents("jetbrains.mps.lang.editor.editorTest.structure.TestBlockList", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").create();
  /*package*/ final ConceptDescriptor myConceptBracesStubBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.BracesStubBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").alias("braces stub", "").create();
  /*package*/ final ConceptDescriptor myConceptClassReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.ClassReference").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").references("class").alias("classref", "").create();
  /*package*/ final ConceptDescriptor myConceptComposition = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.Composition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"children"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptDelTestAbstractChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.DelTestAbstractChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
  /*package*/ final ConceptDescriptor myConceptDelTestChild1 = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.DelTestChild1").super_("jetbrains.mps.lang.editor.editorTest.structure.DelTestAbstractChild").parents("jetbrains.mps.lang.editor.editorTest.structure.DelTestAbstractChild").create();
  /*package*/ final ConceptDescriptor myConceptDelTestChildContainer = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.DelTestChildContainer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"child"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptDelTestRoot = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.DelTestRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"container"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptIBaseTestBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").interface_().create();
  /*package*/ final ConceptDescriptor myConceptInspectorBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.InspectorBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").children(new String[]{"block"}, new boolean[]{false}).alias("inspector", "").create();
  /*package*/ final ConceptDescriptor myConceptIntegerLiteral = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.IntegerLiteral").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").properties("value").create();
  /*package*/ final ConceptDescriptor myConceptNonEmptyProperty = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.NonEmptyProperty").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").properties("value").alias("non-empty-property", "").create();
  /*package*/ final ConceptDescriptor myConceptNotEditableVaraileReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.NotEditableVaraileReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").references("variableDeclaration").alias("{<{variableDeclaration}>} not editable", "").create();
  /*package*/ final ConceptDescriptor myConceptPlusExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.PlusExpression").super_("jetbrains.mps.lang.editor.editorTest.structure.BinaryExpression").parents("jetbrains.mps.lang.editor.editorTest.structure.BinaryExpression").alias("+", "").create();
  /*package*/ final ConceptDescriptor myConceptReferenceAnnotataion = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.ReferenceAnnotataion").super_("jetbrains.mps.lang.core.structure.LinkAttribute").parents("jetbrains.mps.lang.core.structure.LinkAttribute").create();
  /*package*/ final ConceptDescriptor myConceptSideTranformWrapper = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.SideTranformWrapper").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").properties("rightOpen").children(new String[]{"child"}, new boolean[]{false}).alias("side-transform-wrapper", "").create();
  /*package*/ final ConceptDescriptor myConceptSimplePropertyAttribute = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.SimplePropertyAttribute").super_("jetbrains.mps.lang.core.structure.PropertyAttribute").parents("jetbrains.mps.lang.core.structure.PropertyAttribute").create();
  /*package*/ final ConceptDescriptor myConceptSimplePropertyContainer = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.SimplePropertyContainer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("property").create();
  /*package*/ final ConceptDescriptor myConceptStubBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.StubBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").alias("stub", "").create();
  /*package*/ final ConceptDescriptor myConceptTestBlockList = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.TestBlockList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").children(new String[]{"statement"}, new boolean[]{true}).alias("{", "").create();
  /*package*/ final ConceptDescriptor myConceptVariableDeclarationBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").create();
  /*package*/ final ConceptDescriptor myConceptVariableDeclarationReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").references("var").create();
  /*package*/ final ConceptDescriptor myConceptVerticalLayoutBlockList = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.editorTest.structure.VerticalLayoutBlockList").super_("jetbrains.mps.lang.editor.editorTest.structure.TestBlockList").parents("jetbrains.mps.lang.editor.editorTest.structure.TestBlockList", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock").alias("vericalLayout", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAttractsFocusBlock, myConceptBinaryExpression, myConceptBracesBlock, myConceptBracesStubBlock, myConceptClassReference, myConceptComposition, myConceptDelTestAbstractChild, myConceptDelTestChild1, myConceptDelTestChildContainer, myConceptDelTestRoot, myConceptIBaseTestBlock, myConceptInspectorBlock, myConceptIntegerLiteral, myConceptNonEmptyProperty, myConceptNotEditableVaraileReference, myConceptPlusExpression, myConceptReferenceAnnotataion, myConceptSideTranformWrapper, myConceptSimplePropertyAttribute, myConceptSimplePropertyContainer, myConceptStubBlock, myConceptTestBlockList, myConceptVariableDeclarationBlock, myConceptVariableDeclarationReference, myConceptVerticalLayoutBlockList);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0cb, conceptFqName)) {
      case 0:
        return myConceptAttractsFocusBlock;
      case 1:
        return myConceptBinaryExpression;
      case 2:
        return myConceptBracesBlock;
      case 3:
        return myConceptBracesStubBlock;
      case 4:
        return myConceptClassReference;
      case 5:
        return myConceptComposition;
      case 6:
        return myConceptDelTestAbstractChild;
      case 7:
        return myConceptDelTestChild1;
      case 8:
        return myConceptDelTestChildContainer;
      case 9:
        return myConceptDelTestRoot;
      case 10:
        return myConceptIBaseTestBlock;
      case 11:
        return myConceptInspectorBlock;
      case 12:
        return myConceptIntegerLiteral;
      case 13:
        return myConceptNonEmptyProperty;
      case 14:
        return myConceptNotEditableVaraileReference;
      case 15:
        return myConceptPlusExpression;
      case 16:
        return myConceptReferenceAnnotataion;
      case 17:
        return myConceptSideTranformWrapper;
      case 18:
        return myConceptSimplePropertyAttribute;
      case 19:
        return myConceptSimplePropertyContainer;
      case 20:
        return myConceptStubBlock;
      case 21:
        return myConceptTestBlockList;
      case 22:
        return myConceptVariableDeclarationBlock;
      case 23:
        return myConceptVariableDeclarationReference;
      case 24:
        return myConceptVerticalLayoutBlockList;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0cb = new String[]{"jetbrains.mps.lang.editor.editorTest.structure.AttractsFocusBlock", "jetbrains.mps.lang.editor.editorTest.structure.BinaryExpression", "jetbrains.mps.lang.editor.editorTest.structure.BracesBlock", "jetbrains.mps.lang.editor.editorTest.structure.BracesStubBlock", "jetbrains.mps.lang.editor.editorTest.structure.ClassReference", "jetbrains.mps.lang.editor.editorTest.structure.Composition", "jetbrains.mps.lang.editor.editorTest.structure.DelTestAbstractChild", "jetbrains.mps.lang.editor.editorTest.structure.DelTestChild1", "jetbrains.mps.lang.editor.editorTest.structure.DelTestChildContainer", "jetbrains.mps.lang.editor.editorTest.structure.DelTestRoot", "jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock", "jetbrains.mps.lang.editor.editorTest.structure.InspectorBlock", "jetbrains.mps.lang.editor.editorTest.structure.IntegerLiteral", "jetbrains.mps.lang.editor.editorTest.structure.NonEmptyProperty", "jetbrains.mps.lang.editor.editorTest.structure.NotEditableVaraileReference", "jetbrains.mps.lang.editor.editorTest.structure.PlusExpression", "jetbrains.mps.lang.editor.editorTest.structure.ReferenceAnnotataion", "jetbrains.mps.lang.editor.editorTest.structure.SideTranformWrapper", "jetbrains.mps.lang.editor.editorTest.structure.SimplePropertyAttribute", "jetbrains.mps.lang.editor.editorTest.structure.SimplePropertyContainer", "jetbrains.mps.lang.editor.editorTest.structure.StubBlock", "jetbrains.mps.lang.editor.editorTest.structure.TestBlockList", "jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationBlock", "jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationReference", "jetbrains.mps.lang.editor.editorTest.structure.VerticalLayoutBlockList"};
}
