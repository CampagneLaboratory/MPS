package jetbrains.mps.ide.java.stubManagers;

/*Generated by MPS */

import jetbrains.mps.smodel.persistence.AbstractModelRootManager;
import java.util.Collection;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.project.IModule;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.smodel.LanguageID;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import jetbrains.mps.stubs.BaseStubModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.descriptor.source.StubModelDataSource;

public class JavaSourceStubs extends AbstractModelRootManager {
  public JavaSourceStubs() {
  }

  public Collection<SModelDescriptor> load(@NotNull ModelRoot root, IModule module) {
    List<SModelDescriptor> result = ListSequence.fromList(new ArrayList<SModelDescriptor>());
    IFile file = FileSystem.getInstance().getFileByPath(root.getPath());
    if (file.exists() && file.isDirectory()) {
      JavaSourceStubs.this.getModelDescriptors(result, "", file, LanguageID.JAVA, module);
    } else {
      // ... 
      throw new RuntimeException("Java source stubs: " + root.getPath() + " isn't a good path");
    }
    return result;
  }

  /*package*/ void getModelDescriptors(List<SModelDescriptor> result, String pkg, IFile dir, String languageId, IModule module) {
    List<IFile> subdirs = ListSequence.fromList(new ArrayList<IFile>());
    List<IFile> files = ListSequence.fromList(new ArrayList<IFile>());

    for (IFile c : ListSequence.fromList(dir.getChildren())) {
      if (c.isDirectory()) {
        subdirs.add(c);
      } else if (c.getName().endsWith(MPSExtentions.DOT_JAVAFILE)) {
        files.add(c);
      }
    }

    // Depth first 

    for (IFile subdir : ListSequence.fromList(subdirs)) {
      String newPkg = (pkg.equals("") ?
        subdir.getName() :
        pkg + "." + subdir.getName()
      );
      JavaSourceStubs.this.getModelDescriptors(result, newPkg, subdir, languageId, module);
    }

    if (!(files.isEmpty())) {
      SModelReference modelReference = StubHelper.uidForPackageInStubs(pkg, languageId, module.getModuleReference());
      BaseStubModelDescriptor smd;

      if (SModelRepository.getInstance().getModelDescriptor(modelReference) != null) {
        SModelDescriptor descriptor = SModelRepository.getInstance().getModelDescriptor(modelReference);
        assert descriptor instanceof BaseStubModelDescriptor;
        smd = (BaseStubModelDescriptor) descriptor;

      } else {

        smd = new JavaSourceStubModelDescriptor(modelReference, new JavaSourceStubModelDS(module.getModuleReference(), dir.getPath()), module);

        for (IFile file : ListSequence.fromList(files)) {
          ((StubModelDataSource) smd.getSource()).addPath(file.getPath());
        }

      }

      ListSequence.fromList(result).addElement(smd);
    }

  }
}
