package jetbrains.mps.ide.java.stubManagers;

/*Generated by MPS */

import jetbrains.mps.smodel.descriptor.source.StubModelDataSource;
import jetbrains.mps.findUsages.fastfind.FastFindSupportProvider;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.project.structure.modules.ModuleReference;
import java.util.Set;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.nodeidmap.ForeignNodeIdMap;
import jetbrains.mps.ide.java.newparser.JavaParser;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.io.File;
import jetbrains.mps.util.FileUtil;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.java.parser.FeatureKind;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.java.newparser.JavaParseException;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.util.Collection;
import jetbrains.mps.smodel.descriptor.NodeDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.findUsages.fastfind.FastFindSupport;

public class JavaSourceStubModelDS extends StubModelDataSource implements FastFindSupportProvider {
  private static Logger LOG = Logger.getLogger(JavaSourceStubModelDS.class);

  private boolean myModelLoaded = false;

  public JavaSourceStubModelDS(ModuleReference origin) {
    super(origin);
  }

  protected Set<Language> getLanguagesToImport() {
    Set<String> moduleIds = SetSequence.fromSet(new HashSet<String>());
    SetSequence.fromSet(moduleIds).addElement(MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("f3061a53-9226-4cc5-a443-f952ceaf5816")).getModuleReference().getModuleId().toString());
    Iterable<Language> languages = SetSequence.fromSet(moduleIds).select(new ISelector<String, Language>() {
      public Language select(String it) {
        return ((Language) MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString(it)));
      }
    });
    return SetSequence.fromSetWithValues(new HashSet<Language>(), languages);
  }

  @Override
  public ModelLoadResult loadSModel(IModule module, SModelDescriptor descriptor, ModelLoadingState state) {

    SModel model = new SModel(descriptor.getSModelReference(), new ForeignNodeIdMap());

    for (Language l : getLanguagesToImport()) {
      model.addLanguage(l.getModuleReference());
      module.addUsedLanguage(l.getModuleReference());
    }

    JavaParser parser = new JavaParser();

    for (String path : CollectionSequence.fromCollection(getPaths())) {
      File f = new File(path);
      String code = FileUtil.read(f);

      try {

        List<SNode> nodes = parser.parse(code, model.getLongName(), FeatureKind.CLASS_STUB, true).getNodes();
        for (SNode n : ListSequence.fromList(nodes)) {
          model.addRoot(n);
        }
      } catch (JavaParseException e) {
        LOG.error("Error while parsing java file " + path + ": " + e.getMessage());
      }
    }

    myModelLoaded = true;

    return new ModelLoadResult(model, ModelLoadingState.FULLY_LOADED);
  }

  public List<SNode> parseFile(String contents, SModel model) throws JavaParseException {
    JavaParser parser = new JavaParser();
    return parser.parse(contents, SModelOperations.getModelName(model), FeatureKind.CLASS_STUB, true).getNodes();
  }

  public Collection<NodeDescriptor> getNodeDescriptors() {
    if (myModelLoaded) {
      System.err.println("Model has already been loaded");
    } else {
      System.err.println("Model HAS NOT been loaded");
    }
    return new HashSet<NodeDescriptor>();
  }

  @Nullable
  public FastFindSupport getFastFindSupport() {
    // <node> 
    return null;
  }
}
