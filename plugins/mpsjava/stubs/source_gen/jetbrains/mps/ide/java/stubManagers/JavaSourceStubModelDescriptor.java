package jetbrains.mps.ide.java.stubManagers;

/*Generated by MPS */

import jetbrains.mps.stubs.BaseStubModelDescriptor;
import jetbrains.mps.smodel.descriptor.NodesNavigationContributor;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SModelReference;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.smodel.descriptor.NodeDescriptor;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.java.newparser.JavaParseException;

public class JavaSourceStubModelDescriptor extends BaseStubModelDescriptor implements NodesNavigationContributor {
  private static Logger LOG = Logger.getLogger(JavaSourceStubModelDescriptor.class);

  public JavaSourceStubModelDescriptor(SModelReference modelReference, JavaSourceStubModelDS source, SModule module) {
    super(modelReference, source, module);
  }

  @NotNull
  @Override
  public JavaSourceStubModelDS getSource() {
    return (JavaSourceStubModelDS) super.getSource();
  }

  public Collection<NodeDescriptor> getNodeDescriptors() {
    return getSource().getNodeDescriptors();
  }

  public void reparseOneFile(final String contents) {
    final JavaSourceStubModelDS ds = getSource();


    // FIXME change write actions, commands 
    // we need read access to get model roots, etc. but then we need write to update it 
    // therefore we take write at once 
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        try {
          final SModel myModel = getSModel();
          List<SNode> nodes = ds.parseFile(contents, myModel);

          // replace existing nodes with matching names 
          List<SNode> roots = SModelOperations.getRoots(myModel, null);
          for (SNode node : ListSequence.fromList(nodes)) {

            SNodeId nodeId = node.getSNodeId();
            final SNode root = myModel.getNodeById(nodeId);

            final SNode theNode = node;

            ModelAccess.instance().runUndoTransparentCommand(new Runnable() {
              public void run() {
                if ((root == null)) {
                  SModelOperations.addRootNode(myModel, theNode);
                } else {
                  SNodeOperations.detachNode(root);
                  // <node> 
                  SNodeOperations.deleteNode(root);
                  SModelOperations.addRootNode(myModel, theNode);
                }
              }
            }, null);
          }

        } catch (JavaParseException e) {
          LOG.error("Error while parsing java file: " + e.getMessage());
        }
      }
    });
  }
}
