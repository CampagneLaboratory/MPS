package jetbrains.mps.ide.java.util;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.java.parser.FeatureKind;
import jetbrains.mps.smodel.SModel;
import java.awt.datatransfer.Transferable;
import com.intellij.ide.CopyPasteManagerEx;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import jetbrains.mps.project.IModule;
import jetbrains.mps.ide.java.parser.JavaCompiler;
import java.util.List;
import javax.swing.JOptionPane;
import jetbrains.mps.nodeEditor.datatransfer.NodePaster;
import jetbrains.mps.datatransfer.PasteEnv;
import jetbrains.mps.ide.java.parser.ConversionFailedException;

public class JavaPaster {
  private static Logger LOG = Logger.getLogger(JavaPaster.class);

  public JavaPaster() {
  }

  public void pasteJava(SNode anchor, IOperationContext operationContext, FeatureKind featureKind) {
    String javaCode = getStringFromClipboard();
    if (javaCode == null) {
      return;
    }
    pasteJavaAsNode(anchor, anchor.getModel(), javaCode, operationContext, featureKind);
  }

  public void pasteJavaAsClass(SModel model, IOperationContext operationContext) {
    String javaCode = getStringFromClipboard();
    if (javaCode == null) {
      return;
    }
    pasteJavaAsNode(null, model, javaCode, operationContext, FeatureKind.CLASS);
  }

  public String getStringFromClipboard() {
    Transferable contents = null;
    for (Transferable trf : CopyPasteManagerEx.getInstanceEx().getAllContents()) {
      if (trf != null && trf.isDataFlavorSupported(DataFlavor.stringFlavor)) {
        contents = trf;
      }
      break;
    }
    if (contents == null) {
      return null;
    }
    if (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {
      try {
        Object data = contents.getTransferData(DataFlavor.stringFlavor);
        if (data instanceof String) {
          return (String) data;
        }
      } catch (UnsupportedFlavorException ex) {
        return null;
      } catch (IOException ex) {
        LOG.error(ex);
      }
    }
    return null;
  }

  public void pasteJavaAsNode(SNode anchor, SModel model, String javaCode, IOperationContext operationContext, FeatureKind featureKind) {
    IModule module = model.getModelDescriptor().getModule();
    JavaCompiler javaCompiler = new JavaCompiler(operationContext, module, null, false, model);
    try {
      List<SNode> nodes = javaCompiler.compileIsolated(javaCode, featureKind);
      if (nodes.isEmpty()) {
        JOptionPane.showMessageDialog(null, "nothing to paste as Java", "ERROR", JOptionPane.ERROR_MESSAGE);
        return;
      }
      NodePaster nodePaster = new NodePaster(nodes);
      if (featureKind != FeatureKind.CLASS) {
        NodePaster.NodeAndRole nodeAndRole = nodePaster.getActualAnchorNode(anchor, anchor.getRole_());
        if (nodeAndRole == null) {
          return;
        }
        nodePaster.paste(nodeAndRole.myNode, PasteEnv.NODE_EDITOR);
      } else {
        nodePaster.pasteAsRoots(model);
      }
    } catch (ConversionFailedException ex) {
      JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
    }
  }
}
