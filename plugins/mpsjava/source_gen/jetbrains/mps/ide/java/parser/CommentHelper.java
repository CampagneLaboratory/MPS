package jetbrains.mps.ide.java.parser;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Arrays;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.apache.commons.lang.StringUtils;

public class CommentHelper {
  public CommentHelper() {
  }

  public static List<String> splitString(char[] content, int[] lineends, int start, int end) {
    List<String> result = ListSequence.<String>fromList(new ArrayList<String>());
    for (int i = Math.abs(Arrays.binarySearch(lineends, start) + 1); i < lineends.length && lineends[i] <= end; ++i) {
      ListSequence.<String>fromList(result).addElement(new String(content, start, lineends[i] - start));
      start = lineends[i] + 1;
    }
    if (start < end) {
      ListSequence.<String>fromList(result).addElement(new String(content, start, end - start));
    }
    return result;
  }

  public static List<String> processLines(Iterable<String> lines, String start, String end) {
    // remove start and end (if any) tags, indent 
    List<String> result = ListSequence.<String>fromList(new ArrayList<String>());
    if (Sequence.<String>fromIterable(lines).isEmpty()) {
      return result;
    }
    // remove start prefix 
    if (StringUtils.trim(Sequence.<String>fromIterable(lines).first()).equals(start)) {
      lines = Sequence.<String>fromIterable(lines).skip(1);
    } else if (Sequence.<String>fromIterable(lines).first().startsWith(start)) {
      ListSequence.<String>fromList(result).addElement(Sequence.<String>fromIterable(lines).first().substring(start.length()));
      lines = Sequence.<String>fromIterable(lines).skip(1);
    }
    // find common indent for nonempty lines 
    if (Sequence.<String>fromIterable(lines).isNotEmpty()) {
      int mintrim = Sequence.<String>fromIterable(lines).first().length();
      for (String line : Sequence.<String>fromIterable(lines)) {
        if (StringUtils.isNotEmpty(line)) {
          mintrim = Math.min(mintrim, line.length() - StringUtils.stripStart(line, " \n\r\t").length());
        }
      }
      boolean trimok = mintrim > 0;
      String prefix = Sequence.<String>fromIterable(lines).first().substring(0, mintrim);
      for (String line : Sequence.<String>fromIterable(lines)) {
        if (StringUtils.isNotEmpty(line)) {
          trimok = trimok && line.startsWith(prefix);
        }
      }
      for (String line : Sequence.<String>fromIterable(lines)) {
        ListSequence.<String>fromList(result).addElement((trimok && StringUtils.isNotEmpty(line) ?
          line.substring(mintrim) :
          line
        ));
      }
    }
    if (StringUtils.isNotEmpty(end) && ListSequence.<String>fromList(result).isNotEmpty()) {
      if (StringUtils.trim(ListSequence.<String>fromList(result).last()).equals(end)) {
        ListSequence.<String>fromList(result).removeLastElement();
      } else if (ListSequence.<String>fromList(result).last().endsWith(end)) {
        String last = ListSequence.<String>fromList(result).removeLastElement();
        ListSequence.<String>fromList(result).addElement(last.substring(0, last.length() - end.length()));
      }
    }
    return result;
  }

  public static List<String> processJavadoc(Iterable<String> lines) {
    return processLines(lines, "/**", "*/");
  }

  public static List<String> processComment(Iterable<String> lines) {
    if (Sequence.<String>fromIterable(lines).first().startsWith("//")) {
      return processLines(lines, "//", null);
    } else {
      return processLines(lines, "/*", "*/");
    }
  }
}
