package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.applicationplugins.BaseApplicationPlugin;
import com.intellij.openapi.extensions.PluginId;
import jetbrains.mps.ide.actions.SolutionActions_ActionGroup;
import jetbrains.mps.ide.actions.GeneratorNewActions_ActionGroup;
import jetbrains.mps.ide.actions.LanguageNewActions_ActionGroup;
import jetbrains.mps.ide.actions.SolutionNewActions_ActionGroup;
import java.util.List;
import jetbrains.mps.plugins.pluginparts.custom.BaseCustomApplicationPlugin;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.workbench.action.BaseKeymapChanges;

public class Java_ApplicationPlugin extends BaseApplicationPlugin {
  private PluginId myId = PluginId.getId("jetbrains.mps.ide.java");

  public Java_ApplicationPlugin() {
  }

  public PluginId getId() {
    return myId;
  }

  public void createGroups() {
    // actions w/o parameters 
    addAction(new ChangeMethodSignature_Action());
    addAction(new ConvertAnonymousClass_Action());
    addAction(new GetModelContentsFromSource_Action());
    addAction(new GetModuleContentsFromSource_Action());
    addAction(new MakeFieldFinal_Action());
    addAction(new MakeFieldStatic_Action());
    addAction(new MigrateSourcesToMPS_Action());
    addAction(new MoveStaticField_Action());
    addAction(new MoveStaticMethod_Action());
    addAction(new NewModelFromSource_Action());
    addAction(new PasteAsJavaClass_Action());
    addAction(new PasteAsJavaMethods_Action());
    addAction(new PasteAsJavaStatements_Action());
    addAction(new RenameMethod_Action());
    addAction(new ResolveStubReferencesToMPSGlobal_Action());
    addAction(new ResolveStubReferencesToMPS_Action());
    // groups 
    addGroup(new EditorPopup_ActionGroup());
    addGroup(new ModelActions_ActionGroup());
    addGroup(new ModelNewActions_ActionGroup());
    addGroup(new RefactoringAdditions_ActionGroup());
    addGroup(new SolutionActionsEx_ActionGroup());
  }

  public void adjustRegularGroups() {
    insertGroupIntoAnother(SolutionActionsEx_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_contents);
    insertGroupIntoAnother(ModelNewActions_ActionGroup.ID, GeneratorNewActions_ActionGroup.ID, GeneratorNewActions_ActionGroup.LABEL_ID_newModel);
    insertGroupIntoAnother(ModelNewActions_ActionGroup.ID, LanguageNewActions_ActionGroup.ID, LanguageNewActions_ActionGroup.LABEL_ID_newModel);
    insertGroupIntoAnother(ModelNewActions_ActionGroup.ID, SolutionNewActions_ActionGroup.ID, SolutionNewActions_ActionGroup.LABEL_ID_newModel);
    insertGroupIntoAnother(RefactoringAdditions_ActionGroup.ID, "jetbrains.mps.ide.platform.actions.NodeRefactoring_ActionGroup", null);
    insertGroupIntoAnother(ModelActions_ActionGroup.ID, jetbrains.mps.ide.actions.ModelActions_ActionGroup.ID, jetbrains.mps.ide.actions.ModelActions_ActionGroup.LABEL_ID_paste);
    insertGroupIntoAnother(EditorPopup_ActionGroup.ID, "EditorPopup_ActionGrouppaste", null);
  }

  public List<BaseCustomApplicationPlugin> initCustomParts() {
    List<BaseCustomApplicationPlugin> res = ListSequence.fromList(new ArrayList<BaseCustomApplicationPlugin>());
    addCustomPart(res, new PasteJavaTextAsNodes_CustomApplicationPlugin());
    return res;
  }

  public List<BaseKeymapChanges> initKeymaps() {
    List<BaseKeymapChanges> res = ListSequence.fromList(new ArrayList<BaseKeymapChanges>());
    ListSequence.fromList(res).addElement(new Default_KeymapChanges());
    return res;
  }

  private void addCustomPart(List<BaseCustomApplicationPlugin> plugins, BaseCustomApplicationPlugin plugin) {
    ListSequence.fromList(plugins).addElement(plugin);
    plugin.init();
  }
}
