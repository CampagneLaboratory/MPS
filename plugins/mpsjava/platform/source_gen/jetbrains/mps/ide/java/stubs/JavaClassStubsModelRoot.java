package jetbrains.mps.ide.java.stubs;

/*Generated by MPS */

import jetbrains.mps.extapi.persistence.ModelRootBase;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SModelId;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.smodel.LanguageID;
import org.jetbrains.mps.openapi.persistence.Memento;
import jetbrains.mps.reloading.ClassPathFactory;
import java.io.IOException;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import jetbrains.mps.smodel.BaseSModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.extapi.persistence.FolderSetDataSource;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;

public class JavaClassStubsModelRoot extends ModelRootBase {
  private String myPath = "";

  public JavaClassStubsModelRoot() {
  }

  public String getType() {
    return JavaClassStubConstants.STUB_TYPE;
  }

  public String getPresentation() {
    return myPath + "(java stubs)";
  }

  public SModel getModel(SModelId id) {
    // todo implement 
    return null;
  }

  public Iterable<SModel> getModels() {
    List<SModel> result = ListSequence.fromList(new ArrayList<SModel>());
    IClassPathItem cp = create(myPath);
    getModelDescriptors(result, myPath, cp, "", LanguageID.JAVA, getModule());
    return result;
  }

  public boolean isReadOnly() {
    return true;
  }

  public boolean canCreateModel(String string) {
    return false;
  }

  public SModel createModel(String string) {
    return null;
  }

  public void save(Memento memento) {
    memento.put("path", myPath);
  }

  public void load(Memento memento) {
    myPath = memento.get("path");
  }

  public String getPath() {
    return myPath;
  }

  public void setPath(String path) {
    myPath = path;
  }

  private IClassPathItem create(String path) {
    try {
      return ClassPathFactory.getInstance().createFromPathFS(path, "JavaStubs");
    } catch (IOException e) {
      e.printStackTrace();
      // To change body of catch statement use File | Settings | File Templates. 
    }
    return null;
  }

  public void getModelDescriptors(List<SModel> result, String startPath, IClassPathItem cp, String prefix, String languageId, SModule module) {
    for (String subpackage : cp.getSubpackages(prefix)) {
      if (cp.getRootClasses(subpackage).iterator().hasNext()) {
        SModelReference modelReference = StubHelper.uidForPackageInStubs(subpackage, languageId, module.getModuleReference());
        BaseSModelDescriptor smd;
        if (SModelRepository.getInstance().getModelDescriptor(modelReference) != null) {
          SModelDescriptor descriptor = SModelRepository.getInstance().getModelDescriptor(modelReference);
          assert descriptor instanceof JavaClassStubModelDescriptor;
          smd = (JavaClassStubModelDescriptor) descriptor;
          ListSequence.fromList(result).addElement(descriptor);
        } else {
          smd = new JavaClassStubModelDescriptor(modelReference, new FolderSetDataSource(), this);
          ListSequence.fromList(result).addElement(smd);
        }
        ((FolderSetDataSource) smd.getSource()).addPath(child(startPath, subpackage), this);
      }
      getModelDescriptors(result, startPath, cp, subpackage, languageId, module);
    }
  }

  private String child(String startPath, String prefix) {
    IFile file = FileSystem.getInstance().getFileByPath((startPath.endsWith(".jar") ?
      startPath + "!/" :
      startPath
    ));
    for (String child : prefix.split("\\.")) {
      file = file.getDescendant(child);
    }
    return file.getPath();
  }

  @Override
  public int hashCode() {
    return myPath.hashCode();
  }

  @Override
  public boolean equals(Object object) {
    if (this == object) {
      return true;
    }
    if (object == null || getClass() != object.getClass()) {
      return false;
    }
    return myPath.equals(((JavaClassStubsModelRoot) object).myPath);
  }
}
