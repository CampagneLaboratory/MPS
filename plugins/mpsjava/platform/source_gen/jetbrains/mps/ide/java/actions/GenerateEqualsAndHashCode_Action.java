package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.smodel.SReference;

public class GenerateEqualsAndHashCode_Action extends BaseAction {
  private static final Icon ICON = null;
  public GenerateEqualsAndHashCode_Action() {
    super("equals() and hashCode", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    SNode classConcept = GenerateEqualsAndHashCode_Action.this.getClassConcept(_params);
    return !(Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>) ((Class) Object.class), classConcept, "jetbrains.mps.baseLanguage.structure.Classifier", "call_methods_5292274854859311639", new Object[]{})).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode method) {
        return "equals".equals(SPropertyOperations.getString(method, "name")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method, "returnType", true), "jetbrains.mps.baseLanguage.structure.BooleanType");
      }
    })) && Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>) ((Class) Object.class), classConcept, "jetbrains.mps.baseLanguage.structure.ClassConcept", "call_fields_5292274854859383272", new Object[]{})).isNotEmpty();
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "GenerateEqualsAndHashCode", t);
      }
      this.disable(event.getPresentation());
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("node", event.getData(MPSCommonDataKeys.NODE));
    if (MapSequence.fromMap(_params).get("node") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("editorContext", event.getData(MPSEditorDataKeys.EDITOR_CONTEXT));
    if (MapSequence.fromMap(_params).get("editorContext") == null) {
      return false;
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      SNode classConcept = GenerateEqualsAndHashCode_Action.this.getClassConcept(_params);
      SNodeReference[] fields;
      fields = Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>) ((Class) Object.class), classConcept, "jetbrains.mps.baseLanguage.structure.ClassConcept", "call_fields_5292274854859383272", new Object[]{})).select(new ISelector<SNode, SNodePointer>() {
        public SNodePointer select(SNode it) {
          return new SNodePointer(it);
        }
      }).toGenericArray(SNodePointer.class);

      SelectFieldsDialog selectFieldsDialog = new SelectFieldsDialog(fields, true, ((EditorContext) MapSequence.fromMap(_params).get("editorContext")).getOperationContext().getProject());
      selectFieldsDialog.setTitle("Choose fields to be included in equals() and hashCode()");
      selectFieldsDialog.show();

      if (!(selectFieldsDialog.isOK())) {
        return;
      }

      SNodeReference[] selectedFields = Sequence.fromIterable(((Iterable<SNodeReference>) selectFieldsDialog.getSelectedElements())).toGenericArray(SNodeReference.class);
      final SNode thisExp = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ThisExpression", null);
      final SNode equalsDeclaration = _quotation_createNode_x9xljz_a0m0a(thisExp, thisExp, classConcept, classConcept);
      SNode thatDeclaration = SLinkOperations.getTarget(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(equalsDeclaration, "body", true), "statement", true)).last(), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"), "localVariableDeclaration", true);

      SNode thatRef = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference", null);
      SLinkOperations.setTarget(thatRef, "variableDeclaration", thatDeclaration, false);
      SNode fieldRefLocal = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference", null);
      SNode fieldRefOperation = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", null);

      for (SNodeReference fieldPtr : selectedFields) {
        SNode field = SNodeOperations.cast(((SNodePointer) fieldPtr).resolve(MPSModuleRepository.getInstance()), "jetbrains.mps.baseLanguage.structure.FieldDeclaration");

        SLinkOperations.setTarget(fieldRefLocal, "variableDeclaration", field, false);
        SLinkOperations.setTarget(fieldRefOperation, "fieldDeclaration", field, false);
        SNode checkStmt;
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.PrimitiveType")) {
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.FloatType")) {
            checkStmt = _quotation_createNode_x9xljz_a0a0a0f0u0a(thatRef, SNodeOperations.copyNode(fieldRefOperation), SNodeOperations.copyNode(fieldRefLocal));
          } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.DoubleType")) {
            checkStmt = _quotation_createNode_x9xljz_a0a0a0a5a02a0(thatRef, SNodeOperations.copyNode(fieldRefOperation), SNodeOperations.copyNode(fieldRefLocal));
          } else {
            checkStmt = _quotation_createNode_x9xljz_a0a0a0a5a02a0_0(thatRef, SNodeOperations.copyNode(fieldRefOperation), SNodeOperations.copyNode(fieldRefLocal));
          }
        } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.ArrayType")) {
          checkStmt = _quotation_createNode_x9xljz_a0a0a5a02a0(SNodeOperations.copyNode(fieldRefLocal), thatRef, SNodeOperations.copyNode(fieldRefOperation));
        } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
          checkStmt = _quotation_createNode_x9xljz_a0a0b5a02a0(thatRef, SNodeOperations.copyNode(fieldRefOperation), SNodeOperations.copyNode(fieldRefLocal), SNodeOperations.copyNode(fieldRefLocal), thatRef, SNodeOperations.copyNode(fieldRefOperation));
        } else {
          checkStmt = _quotation_createNode_x9xljz_a0a0a5a02a0_0(thatRef, SNodeOperations.copyNode(fieldRefOperation), SNodeOperations.copyNode(fieldRefLocal), SNodeOperations.copyNode(fieldRefLocal), thatRef, SNodeOperations.copyNode(fieldRefOperation));
        }
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(equalsDeclaration, "body", true), "statement", true)).addElement(checkStmt);
      }
      SNodeFactoryOperations.addNewChild(SLinkOperations.getTarget(equalsDeclaration, "body", true), "statement", "jetbrains.mps.baseLanguage.structure.Statement");
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(equalsDeclaration, "body", true), "statement", true)).addElement(_quotation_createNode_x9xljz_a0a22a0());
      ListSequence.fromList(SLinkOperations.getTargets(classConcept, "member", true)).addElement(equalsDeclaration);
      // Method equals() is generated, now hashCode method body generation begins  
      SNode hashCodeDeclaration = ListSequence.fromList(SLinkOperations.getTargets(classConcept, "member", true)).addElement(_quotation_createNode_x9xljz_a0a0z0a());
      SNode resultDeclaration = _quotation_createNode_x9xljz_a0ab0a();
      SNode resultReference = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference", null);
      SLinkOperations.setTarget(resultReference, "variableDeclaration", SLinkOperations.getTarget(resultDeclaration, "localVariableDeclaration", true), false);
      SNode tempDeclaration = _quotation_createNode_x9xljz_a0db0a();
      SNode tempReference = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference", null);
      SLinkOperations.setTarget(tempReference, "variableDeclaration", SLinkOperations.getTarget(tempDeclaration, "localVariableDeclaration", true), false);
      if (Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>) ((Class) Object.class), classConcept, "jetbrains.mps.baseLanguage.structure.ClassConcept", "call_fields_5292274854859383272", new Object[]{})).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "type", true), "jetbrains.mps.baseLanguage.structure.DoubleType");
        }
      })) {
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(hashCodeDeclaration, "body", true), "statement", true)).addElement(tempDeclaration);
      }
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(hashCodeDeclaration, "body", true), "statement", true)).addElement(resultDeclaration);
      for (SNodeReference fieldPtr : selectedFields) {
        final SNode field = SNodeOperations.cast(((SNodePointer) fieldPtr).resolve(MPSModuleRepository.getInstance()), "jetbrains.mps.baseLanguage.structure.FieldDeclaration");
        SLinkOperations.setTarget(fieldRefLocal, "variableDeclaration", field, false);
        SNode calcStatement;
        SNode mulExpression = _quotation_createNode_x9xljz_a0d0ib0a(resultReference);
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.IntegerType")) {
          calcStatement = _quotation_createNode_x9xljz_a0a0e0ib0a(resultReference, SNodeOperations.copyNode(fieldRefLocal), mulExpression);
        } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.LongType")) {
          calcStatement = _quotation_createNode_x9xljz_a0a0a4a43a0(mulExpression, SNodeOperations.copyNode(fieldRefLocal), SNodeOperations.copyNode(fieldRefLocal), resultReference);
        } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.ByteType") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.CharType") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.ShortType")) {
          calcStatement = _quotation_createNode_x9xljz_a0a0b4a43a0(SNodeOperations.copyNode(fieldRefLocal), mulExpression, resultReference);
        } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.DoubleType")) {
          ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(hashCodeDeclaration, "body", true), "statement", true)).addElement(_quotation_createNode_x9xljz_a0a0a2e0ib0a(tempReference, SNodeOperations.copyNode(fieldRefLocal), SNodeOperations.copyNode(fieldRefLocal)));
          calcStatement = _quotation_createNode_x9xljz_a0b0c4a43a0(resultReference, mulExpression, tempReference, tempReference);
        } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.FloatType")) {
          calcStatement = _quotation_createNode_x9xljz_a0a0d4a43a0(resultReference, mulExpression, SNodeOperations.copyNode(fieldRefLocal), SNodeOperations.copyNode(fieldRefLocal));
        } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.StringType")) {
          calcStatement = _quotation_createNode_x9xljz_a0a0e4a43a0(resultReference, mulExpression, SNodeOperations.copyNode(fieldRefLocal), SNodeOperations.copyNode(fieldRefLocal));
        } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.ArrayType")) {
          calcStatement = _quotation_createNode_x9xljz_a0a0f4a43a0(mulExpression, SNodeOperations.copyNode(fieldRefLocal), SNodeOperations.copyNode(fieldRefLocal), resultReference);
        } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field, "type", true), "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
          calcStatement = _quotation_createNode_x9xljz_a0a0g4a43a0(SNodeOperations.copyNode(fieldRefLocal), SNodeOperations.copyNode(fieldRefLocal), mulExpression, resultReference);
        } else {
          calcStatement = _quotation_createNode_x9xljz_a0a0a4a43a0_0(SNodeOperations.copyNode(fieldRefLocal), SNodeOperations.copyNode(fieldRefLocal), mulExpression, resultReference);
        }
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(hashCodeDeclaration, "body", true), "statement", true)).addElement(calcStatement);
      }
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(hashCodeDeclaration, "body", true), "statement", true)).addElement(_quotation_createNode_x9xljz_a0a53a0(resultReference));
      ((EditorContext) MapSequence.fromMap(_params).get("editorContext")).select(equalsDeclaration);
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "GenerateEqualsAndHashCode", t);
      }
    }
  }
  private SNode getClassConcept(final Map<String, Object> _params) {
    return SNodeOperations.getAncestor(((SNode) ((SNode) MapSequence.fromMap(_params).get("node"))), "jetbrains.mps.baseLanguage.structure.ClassConcept", true, false);
  }
  protected static Logger LOG = LogManager.getLogger(GenerateEqualsAndHashCode_Action.class);
  private static SNode _quotation_createNode_x9xljz_a0m0a(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    SNode quotedNode_15 = null;
    SNode quotedNode_16 = null;
    SNode quotedNode_17 = null;
    SNode quotedNode_18 = null;
    SNode quotedNode_19 = null;
    SNode quotedNode_20 = null;
    SNode quotedNode_21 = null;
    SNode quotedNode_22 = null;
    SNode quotedNode_23 = null;
    SNode quotedNode_24 = null;
    SNode quotedNode_25 = null;
    SNode quotedNode_26 = null;
    SNode quotedNode_27 = null;
    SNode quotedNode_28 = null;
    SNode quotedNode_29 = null;
    SNode quotedNode_30 = null;
    SNode quotedNode_31 = null;
    SNode quotedNode_32 = null;
    SNode quotedNode_33 = null;
    SNode quotedNode_34 = null;
    SNode quotedNode_35 = null;
    SNode quotedNode_36 = null;
    SNode quotedNode_37 = null;
    SNode quotedNode_38 = null;
    SNode quotedNode_39 = null;
    SNode quotedNode_40 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_5, "name", "equals");
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanType", null, null, false);
    quotedNode_5.addChild("returnType", quotedNode_6);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, false);
    quotedNode_5.addChild("visibility", quotedNode_7);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement", null, null, false);
    quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_21 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, false);
    quotedNode_29 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_29, "value", "true");
    quotedNode_21.addChild("expression", quotedNode_29);
    quotedNode_16.addChild("statement", quotedNode_21);
    quotedNode_11.addChild("ifTrue", quotedNode_16);
    quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.EqualsExpression", null, null, false);
    quotedNode_22 = (SNode) parameter_1;
    if (quotedNode_22 != null) {
      quotedNode_17.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_22));
    }
    quotedNode_23 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", null, null, false);
    quotedNode_17.addChild("rightExpression", quotedNode_23);
    quotedNode_11.addChild("condition", quotedNode_17);
    quotedNode_8.addChild("statement", quotedNode_11);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement", null, null, false);
    quotedNode_18 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_24 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, false);
    quotedNode_30 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_30, "value", "false");
    quotedNode_24.addChild("expression", quotedNode_30);
    quotedNode_18.addChild("statement", quotedNode_24);
    quotedNode_12.addChild("ifTrue", quotedNode_18);
    quotedNode_19 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.OrExpression", null, null, false);
    quotedNode_25 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.EqualsExpression", null, null, false);
    quotedNode_31 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", null, null, false);
    quotedNode_25.addChild("leftExpression", quotedNode_31);
    quotedNode_32 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral", null, null, false);
    quotedNode_25.addChild("rightExpression", quotedNode_32);
    quotedNode_19.addChild("leftExpression", quotedNode_25);
    quotedNode_26 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_33 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_37 = (SNode) parameter_2;
    if (quotedNode_37 != null) {
      quotedNode_33.addChild("operand", HUtil.copyIfNecessary(quotedNode_37));
    }
    quotedNode_38 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null, null, false);
    quotedNode_38.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_38, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object.getClass():java.lang.Class")));
    quotedNode_33.addChild("operation", quotedNode_38);
    quotedNode_26.addChild("leftExpression", quotedNode_33);
    quotedNode_34 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_39 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", null, null, false);
    quotedNode_34.addChild("operand", quotedNode_39);
    quotedNode_40 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null, null, false);
    quotedNode_40.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_40, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object.getClass():java.lang.Class")));
    quotedNode_34.addChild("operation", quotedNode_40);
    quotedNode_26.addChild("rightExpression", quotedNode_34);
    quotedNode_19.addChild("rightExpression", quotedNode_26);
    quotedNode_12.addChild("condition", quotedNode_19);
    quotedNode_8.addChild("statement", quotedNode_12);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.Statement", null, null, false);
    quotedNode_8.addChild("statement", quotedNode_13);
    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null, null, false);
    quotedNode_20 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_20, "name", "that");
    quotedNode_27 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_27, "classifier", (SNode) parameter_3);
    quotedNode_20.addChild("type", quotedNode_27);
    quotedNode_28 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, false);
    quotedNode_35 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_35, "classifier", (SNode) parameter_4);
    quotedNode_28.addChild("type", quotedNode_35);
    quotedNode_36 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", null, null, false);
    quotedNode_28.addChild("expression", quotedNode_36);
    quotedNode_20.addChild("initializer", quotedNode_28);
    quotedNode_14.addChild("localVariableDeclaration", quotedNode_20);
    quotedNode_8.addChild("statement", quotedNode_14);
    quotedNode_5.addChild("body", quotedNode_8);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_9, "name", "o");
    quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_15.setReference("classifier", SReference.create("classifier", quotedNode_15, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    quotedNode_9.addChild("type", quotedNode_15);
    quotedNode_5.addChild("parameter", quotedNode_9);
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstance", null, null, false);
    quotedNode_10.setReference("annotation", SReference.create("annotation", quotedNode_10, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Override")));
    quotedNode_5.addChild("annotation", quotedNode_10);
    SNodeAccessUtil.setReferenceTarget(quotedNode_23, "variableDeclaration", quotedNode_9);
    SNodeAccessUtil.setReferenceTarget(quotedNode_31, "variableDeclaration", quotedNode_9);
    SNodeAccessUtil.setReferenceTarget(quotedNode_36, "variableDeclaration", quotedNode_9);
    SNodeAccessUtil.setReferenceTarget(quotedNode_39, "variableDeclaration", quotedNode_9);
    return quotedNode_5;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0a0f0u0a(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement", null, null, false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, false);
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_10, "value", "false");
    quotedNode_7.addChild("expression", quotedNode_10);
    quotedNode_5.addChild("statement", quotedNode_7);
    quotedNode_4.addChild("ifTrue", quotedNode_5);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_8, "value", "0");
    quotedNode_6.addChild("rightExpression", quotedNode_8);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, false);
    quotedNode_9.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_9, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Float.compare(float,float):int")));
    quotedNode_9.setReference("classConcept", SReference.create("classConcept", quotedNode_9, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Float")));
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_13 = (SNode) parameter_1;
    if (quotedNode_13 != null) {
      quotedNode_11.addChild("operand", HUtil.copyIfNecessary(quotedNode_13));
    }
    quotedNode_14 = (SNode) parameter_2;
    if (quotedNode_14 != null) {
      quotedNode_11.addChild("operation", HUtil.copyIfNecessary(quotedNode_14));
    }
    quotedNode_9.addChild("actualArgument", quotedNode_11);
    quotedNode_12 = (SNode) parameter_3;
    if (quotedNode_12 != null) {
      quotedNode_9.addChild("actualArgument", HUtil.copyIfNecessary(quotedNode_12));
    }
    quotedNode_6.addChild("leftExpression", quotedNode_9);
    quotedNode_4.addChild("condition", quotedNode_6);
    return quotedNode_4;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0a0a5a02a0(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement", null, null, false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_7, "value", "0");
    quotedNode_5.addChild("rightExpression", quotedNode_7);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, false);
    quotedNode_8.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_8, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Double.compare(double,double):int")));
    quotedNode_8.setReference("classConcept", SReference.create("classConcept", quotedNode_8, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Double")));
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_13 = (SNode) parameter_1;
    if (quotedNode_13 != null) {
      quotedNode_10.addChild("operand", HUtil.copyIfNecessary(quotedNode_13));
    }
    quotedNode_14 = (SNode) parameter_2;
    if (quotedNode_14 != null) {
      quotedNode_10.addChild("operation", HUtil.copyIfNecessary(quotedNode_14));
    }
    quotedNode_8.addChild("actualArgument", quotedNode_10);
    quotedNode_11 = (SNode) parameter_3;
    if (quotedNode_11 != null) {
      quotedNode_8.addChild("actualArgument", HUtil.copyIfNecessary(quotedNode_11));
    }
    quotedNode_5.addChild("leftExpression", quotedNode_8);
    quotedNode_4.addChild("condition", quotedNode_5);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, false);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_12, "value", "false");
    quotedNode_9.addChild("expression", quotedNode_12);
    quotedNode_6.addChild("statement", quotedNode_9);
    quotedNode_4.addChild("ifTrue", quotedNode_6);
    return quotedNode_4;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0a0a5a02a0_0(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement", null, null, false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_10 = (SNode) parameter_1;
    if (quotedNode_10 != null) {
      quotedNode_7.addChild("operand", HUtil.copyIfNecessary(quotedNode_10));
    }
    quotedNode_11 = (SNode) parameter_2;
    if (quotedNode_11 != null) {
      quotedNode_7.addChild("operation", HUtil.copyIfNecessary(quotedNode_11));
    }
    quotedNode_5.addChild("rightExpression", quotedNode_7);
    quotedNode_8 = (SNode) parameter_3;
    if (quotedNode_8 != null) {
      quotedNode_5.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_8));
    }
    quotedNode_4.addChild("condition", quotedNode_5);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, false);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_12, "value", "false");
    quotedNode_9.addChild("expression", quotedNode_12);
    quotedNode_6.addChild("statement", quotedNode_9);
    quotedNode_4.addChild("ifTrue", quotedNode_6);
    return quotedNode_4;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0a5a02a0(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement", null, null, false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotExpression", null, null, false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, false);
    quotedNode_7.setReference("classConcept", SReference.create("classConcept", quotedNode_7, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.util(JDK/java.util@java_stub)"), facade.createNodeId("~Arrays")));
    quotedNode_7.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_7, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object.equals(java.lang.Object):boolean")));
    quotedNode_9 = (SNode) parameter_1;
    if (quotedNode_9 != null) {
      quotedNode_7.addChild("actualArgument", HUtil.copyIfNecessary(quotedNode_9));
    }
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_12 = (SNode) parameter_2;
    if (quotedNode_12 != null) {
      quotedNode_10.addChild("operand", HUtil.copyIfNecessary(quotedNode_12));
    }
    quotedNode_13 = (SNode) parameter_3;
    if (quotedNode_13 != null) {
      quotedNode_10.addChild("operation", HUtil.copyIfNecessary(quotedNode_13));
    }
    quotedNode_7.addChild("actualArgument", quotedNode_10);
    quotedNode_5.addChild("expression", quotedNode_7);
    quotedNode_4.addChild("condition", quotedNode_5);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_11, "value", "false");
    quotedNode_8.addChild("expression", quotedNode_11);
    quotedNode_6.addChild("statement", quotedNode_8);
    quotedNode_4.addChild("ifTrue", quotedNode_6);
    return quotedNode_4;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0b5a02a0(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4, Object parameter_5, Object parameter_6) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    SNode quotedNode_15 = null;
    SNode quotedNode_16 = null;
    SNode quotedNode_17 = null;
    SNode quotedNode_18 = null;
    SNode quotedNode_19 = null;
    SNode quotedNode_20 = null;
    SNode quotedNode_21 = null;
    SNode quotedNode_22 = null;
    SNode quotedNode_23 = null;
    SNode quotedNode_24 = null;
    SNode quotedNode_25 = null;
    SNode quotedNode_26 = null;
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement", null, null, false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, false);
    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_14, "value", "false");
    quotedNode_10.addChild("expression", quotedNode_14);
    quotedNode_8.addChild("statement", quotedNode_10);
    quotedNode_7.addChild("ifTrue", quotedNode_8);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null, null, false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotExpression", null, null, false);
    quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_20 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null, null, false);
    quotedNode_20.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_20, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~String.equals(java.lang.Object):boolean")));
    quotedNode_24 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_25 = (SNode) parameter_1;
    if (quotedNode_25 != null) {
      quotedNode_24.addChild("operand", HUtil.copyIfNecessary(quotedNode_25));
    }
    quotedNode_26 = (SNode) parameter_2;
    if (quotedNode_26 != null) {
      quotedNode_24.addChild("operation", HUtil.copyIfNecessary(quotedNode_26));
    }
    quotedNode_20.addChild("actualArgument", quotedNode_24);
    quotedNode_15.addChild("operation", quotedNode_20);
    quotedNode_21 = (SNode) parameter_3;
    if (quotedNode_21 != null) {
      quotedNode_15.addChild("operand", HUtil.copyIfNecessary(quotedNode_21));
    }
    quotedNode_11.addChild("expression", quotedNode_15);
    quotedNode_9.addChild("ifTrue", quotedNode_11);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral", null, null, false);
    quotedNode_12.addChild("rightExpression", quotedNode_16);
    quotedNode_17 = (SNode) parameter_4;
    if (quotedNode_17 != null) {
      quotedNode_12.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_17));
    }
    quotedNode_9.addChild("condition", quotedNode_12);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_18 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral", null, null, false);
    quotedNode_13.addChild("rightExpression", quotedNode_18);
    quotedNode_19 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_22 = (SNode) parameter_5;
    if (quotedNode_22 != null) {
      quotedNode_19.addChild("operand", HUtil.copyIfNecessary(quotedNode_22));
    }
    quotedNode_23 = (SNode) parameter_6;
    if (quotedNode_23 != null) {
      quotedNode_19.addChild("operation", HUtil.copyIfNecessary(quotedNode_23));
    }
    quotedNode_13.addChild("leftExpression", quotedNode_19);
    quotedNode_9.addChild("ifFalse", quotedNode_13);
    quotedNode_7.addChild("condition", quotedNode_9);
    return quotedNode_7;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0a5a02a0_0(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4, Object parameter_5, Object parameter_6) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    SNode quotedNode_15 = null;
    SNode quotedNode_16 = null;
    SNode quotedNode_17 = null;
    SNode quotedNode_18 = null;
    SNode quotedNode_19 = null;
    SNode quotedNode_20 = null;
    SNode quotedNode_21 = null;
    SNode quotedNode_22 = null;
    SNode quotedNode_23 = null;
    SNode quotedNode_24 = null;
    SNode quotedNode_25 = null;
    SNode quotedNode_26 = null;
    SNode quotedNode_27 = null;
    SNode quotedNode_28 = null;
    SNode quotedNode_29 = null;
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement", null, null, false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, false);
    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_14, "value", "false");
    quotedNode_10.addChild("expression", quotedNode_14);
    quotedNode_8.addChild("statement", quotedNode_10);
    quotedNode_7.addChild("ifTrue", quotedNode_8);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null, null, false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotExpression", null, null, false);
    quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_20 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null, null, false);
    quotedNode_20.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_20, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object.equals(java.lang.Object):boolean")));
    quotedNode_24 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_26 = (SNode) parameter_1;
    if (quotedNode_26 != null) {
      quotedNode_24.addChild("operand", HUtil.copyIfNecessary(quotedNode_26));
    }
    quotedNode_27 = (SNode) parameter_2;
    if (quotedNode_27 != null) {
      quotedNode_24.addChild("operation", HUtil.copyIfNecessary(quotedNode_27));
    }
    quotedNode_20.addChild("actualArgument", quotedNode_24);
    quotedNode_15.addChild("operation", quotedNode_20);
    quotedNode_21 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_25 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, false);
    quotedNode_28 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_28.setReference("classifier", SReference.create("classifier", quotedNode_28, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    quotedNode_25.addChild("type", quotedNode_28);
    quotedNode_29 = (SNode) parameter_3;
    if (quotedNode_29 != null) {
      quotedNode_25.addChild("expression", HUtil.copyIfNecessary(quotedNode_29));
    }
    quotedNode_21.addChild("expression", quotedNode_25);
    quotedNode_15.addChild("operand", quotedNode_21);
    quotedNode_11.addChild("expression", quotedNode_15);
    quotedNode_9.addChild("ifTrue", quotedNode_11);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral", null, null, false);
    quotedNode_12.addChild("rightExpression", quotedNode_16);
    quotedNode_17 = (SNode) parameter_4;
    if (quotedNode_17 != null) {
      quotedNode_12.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_17));
    }
    quotedNode_9.addChild("condition", quotedNode_12);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_18 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral", null, null, false);
    quotedNode_13.addChild("rightExpression", quotedNode_18);
    quotedNode_19 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_22 = (SNode) parameter_5;
    if (quotedNode_22 != null) {
      quotedNode_19.addChild("operand", HUtil.copyIfNecessary(quotedNode_22));
    }
    quotedNode_23 = (SNode) parameter_6;
    if (quotedNode_23 != null) {
      quotedNode_19.addChild("operation", HUtil.copyIfNecessary(quotedNode_23));
    }
    quotedNode_13.addChild("leftExpression", quotedNode_19);
    quotedNode_9.addChild("ifFalse", quotedNode_13);
    quotedNode_7.addChild("condition", quotedNode_9);
    return quotedNode_7;
  }
  private static SNode _quotation_createNode_x9xljz_a0a22a0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", "true");
    quotedNode_1.addChild("expression", quotedNode_2);
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0z0a() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_1, "name", "hashCode");
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType", null, null, false);
    quotedNode_1.addChild("returnType", quotedNode_2);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, false);
    quotedNode_1.addChild("visibility", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_1.addChild("body", quotedNode_4);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstance", null, null, false);
    quotedNode_5.setReference("annotation", SReference.create("annotation", quotedNode_5, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Override")));
    quotedNode_1.addChild("annotation", quotedNode_5);
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x9xljz_a0ab0a() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null, null, false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "name", "result");
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType", null, null, false);
    quotedNode_2.addChild("type", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_4, "value", "0");
    quotedNode_2.addChild("initializer", quotedNode_4);
    quotedNode_1.addChild("localVariableDeclaration", quotedNode_2);
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x9xljz_a0db0a() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null, null, false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "name", "temp");
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LongType", null, null, false);
    quotedNode_2.addChild("type", quotedNode_3);
    quotedNode_1.addChild("localVariableDeclaration", quotedNode_2);
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_x9xljz_a0d0ib0a(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.MulExpression", null, null, false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_3, "value", "31");
    quotedNode_2.addChild("leftExpression", quotedNode_3);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_2.addChild("rightExpression", HUtil.copyIfNecessary(quotedNode_4));
    }
    return quotedNode_2;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0a4a43a0(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    SNode quotedNode_15 = null;
    SNode quotedNode_16 = null;
    SNode quotedNode_17 = null;
    SNode quotedNode_18 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression", null, null, false);
    quotedNode_9 = (SNode) parameter_1;
    if (quotedNode_9 != null) {
      quotedNode_7.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_9));
    }
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType", null, null, false);
    quotedNode_10.addChild("type", quotedNode_11);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BitwiseXorExpression", null, null, false);
    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ShiftRightExpression", null, null, false);
    quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_17, "value", "32");
    quotedNode_16.addChild("rightExpression", quotedNode_17);
    quotedNode_18 = (SNode) parameter_2;
    if (quotedNode_18 != null) {
      quotedNode_16.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_18));
    }
    quotedNode_14.addChild("expression", quotedNode_16);
    quotedNode_13.addChild("rightExpression", quotedNode_14);
    quotedNode_15 = (SNode) parameter_3;
    if (quotedNode_15 != null) {
      quotedNode_13.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_15));
    }
    quotedNode_12.addChild("expression", quotedNode_13);
    quotedNode_10.addChild("expression", quotedNode_12);
    quotedNode_7.addChild("rightExpression", quotedNode_10);
    quotedNode_6.addChild("rValue", quotedNode_7);
    quotedNode_8 = (SNode) parameter_4;
    if (quotedNode_8 != null) {
      quotedNode_6.addChild("lValue", HUtil.copyIfNecessary(quotedNode_8));
    }
    quotedNode_5.addChild("expression", quotedNode_6);
    return quotedNode_5;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0b4a43a0(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression", null, null, false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, false);
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType", null, null, false);
    quotedNode_8.addChild("type", quotedNode_10);
    quotedNode_11 = (SNode) parameter_1;
    if (quotedNode_11 != null) {
      quotedNode_8.addChild("expression", HUtil.copyIfNecessary(quotedNode_11));
    }
    quotedNode_6.addChild("rightExpression", quotedNode_8);
    quotedNode_9 = (SNode) parameter_2;
    if (quotedNode_9 != null) {
      quotedNode_6.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_9));
    }
    quotedNode_5.addChild("rValue", quotedNode_6);
    quotedNode_7 = (SNode) parameter_3;
    if (quotedNode_7 != null) {
      quotedNode_5.addChild("lValue", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_4.addChild("expression", quotedNode_5);
    return quotedNode_4;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0a2e0ib0a(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, false);
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_5.addChild("lValue", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null, null, false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, false);
    quotedNode_8.setReference("classConcept", SReference.create("classConcept", quotedNode_8, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Double")));
    quotedNode_8.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_8, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Double.doubleToLongBits(double):long")));
    quotedNode_11 = (SNode) parameter_2;
    if (quotedNode_11 != null) {
      quotedNode_8.addChild("actualArgument", HUtil.copyIfNecessary(quotedNode_11));
    }
    quotedNode_7.addChild("ifTrue", quotedNode_8);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LongLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_9, "value", "0L");
    quotedNode_7.addChild("ifFalse", quotedNode_9);
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatingPointConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_13, "value", "0.0");
    quotedNode_12.addChild("rightExpression", quotedNode_13);
    quotedNode_14 = (SNode) parameter_3;
    if (quotedNode_14 != null) {
      quotedNode_12.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_14));
    }
    quotedNode_10.addChild("expression", quotedNode_12);
    quotedNode_7.addChild("condition", quotedNode_10);
    quotedNode_5.addChild("rValue", quotedNode_7);
    quotedNode_4.addChild("expression", quotedNode_5);
    return quotedNode_4;
  }
  private static SNode _quotation_createNode_x9xljz_a0b0c4a43a0(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    SNode quotedNode_15 = null;
    SNode quotedNode_16 = null;
    SNode quotedNode_17 = null;
    SNode quotedNode_18 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, false);
    quotedNode_7 = (SNode) parameter_1;
    if (quotedNode_7 != null) {
      quotedNode_6.addChild("lValue", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression", null, null, false);
    quotedNode_9 = (SNode) parameter_2;
    if (quotedNode_9 != null) {
      quotedNode_8.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_9));
    }
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType", null, null, false);
    quotedNode_10.addChild("type", quotedNode_11);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BitwiseXorExpression", null, null, false);
    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ShiftRightExpression", null, null, false);
    quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_17, "value", "32");
    quotedNode_16.addChild("rightExpression", quotedNode_17);
    quotedNode_18 = (SNode) parameter_3;
    if (quotedNode_18 != null) {
      quotedNode_16.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_18));
    }
    quotedNode_14.addChild("expression", quotedNode_16);
    quotedNode_13.addChild("rightExpression", quotedNode_14);
    quotedNode_15 = (SNode) parameter_4;
    if (quotedNode_15 != null) {
      quotedNode_13.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_15));
    }
    quotedNode_12.addChild("expression", quotedNode_13);
    quotedNode_10.addChild("expression", quotedNode_12);
    quotedNode_8.addChild("rightExpression", quotedNode_10);
    quotedNode_6.addChild("rValue", quotedNode_8);
    quotedNode_5.addChild("expression", quotedNode_6);
    return quotedNode_5;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0e0ib0a(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, false);
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_5.addChild("lValue", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression", null, null, false);
    quotedNode_8 = (SNode) parameter_2;
    if (quotedNode_8 != null) {
      quotedNode_7.addChild("rightExpression", HUtil.copyIfNecessary(quotedNode_8));
    }
    quotedNode_9 = (SNode) parameter_3;
    if (quotedNode_9 != null) {
      quotedNode_7.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_9));
    }
    quotedNode_5.addChild("rValue", quotedNode_7);
    quotedNode_4.addChild("expression", quotedNode_5);
    return quotedNode_4;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0d4a43a0(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    SNode quotedNode_15 = null;
    SNode quotedNode_16 = null;
    SNode quotedNode_17 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, false);
    quotedNode_7 = (SNode) parameter_1;
    if (quotedNode_7 != null) {
      quotedNode_6.addChild("lValue", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression", null, null, false);
    quotedNode_9 = (SNode) parameter_2;
    if (quotedNode_9 != null) {
      quotedNode_8.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_9));
    }
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null, null, false);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, false);
    quotedNode_12.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_12, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Float.floatToIntBits(float):int")));
    quotedNode_12.setReference("classConcept", SReference.create("classConcept", quotedNode_12, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Float")));
    quotedNode_15 = (SNode) parameter_3;
    if (quotedNode_15 != null) {
      quotedNode_12.addChild("actualArgument", HUtil.copyIfNecessary(quotedNode_15));
    }
    quotedNode_11.addChild("ifTrue", quotedNode_12);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_13, "value", "0");
    quotedNode_11.addChild("ifFalse", quotedNode_13);
    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_16, "value", "0.0f");
    quotedNode_14.addChild("rightExpression", quotedNode_16);
    quotedNode_17 = (SNode) parameter_4;
    if (quotedNode_17 != null) {
      quotedNode_14.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_17));
    }
    quotedNode_11.addChild("condition", quotedNode_14);
    quotedNode_10.addChild("expression", quotedNode_11);
    quotedNode_8.addChild("rightExpression", quotedNode_10);
    quotedNode_6.addChild("rValue", quotedNode_8);
    quotedNode_5.addChild("expression", quotedNode_6);
    return quotedNode_5;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0e4a43a0(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    SNode quotedNode_15 = null;
    SNode quotedNode_16 = null;
    SNode quotedNode_17 = null;
    SNode quotedNode_18 = null;
    SNode quotedNode_19 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, false);
    quotedNode_7 = (SNode) parameter_1;
    if (quotedNode_7 != null) {
      quotedNode_6.addChild("lValue", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression", null, null, false);
    quotedNode_9 = (SNode) parameter_2;
    if (quotedNode_9 != null) {
      quotedNode_8.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_9));
    }
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null, null, false);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_12, "value", "0");
    quotedNode_11.addChild("ifFalse", quotedNode_12);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral", null, null, false);
    quotedNode_13.addChild("rightExpression", quotedNode_15);
    quotedNode_16 = (SNode) parameter_3;
    if (quotedNode_16 != null) {
      quotedNode_13.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_16));
    }
    quotedNode_11.addChild("condition", quotedNode_13);
    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, false);
    quotedNode_17.setReference("classConcept", SReference.create("classConcept", quotedNode_17, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~String")));
    quotedNode_17.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_17, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~String.valueOf(java.lang.Object):java.lang.String")));
    quotedNode_19 = (SNode) parameter_4;
    if (quotedNode_19 != null) {
      quotedNode_17.addChild("actualArgument", HUtil.copyIfNecessary(quotedNode_19));
    }
    quotedNode_14.addChild("operand", quotedNode_17);
    quotedNode_18 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null, null, false);
    quotedNode_18.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_18, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~String.hashCode():int")));
    quotedNode_14.addChild("operation", quotedNode_18);
    quotedNode_11.addChild("ifTrue", quotedNode_14);
    quotedNode_10.addChild("expression", quotedNode_11);
    quotedNode_8.addChild("rightExpression", quotedNode_10);
    quotedNode_6.addChild("rValue", quotedNode_8);
    quotedNode_5.addChild("expression", quotedNode_6);
    return quotedNode_5;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0f4a43a0(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    SNode quotedNode_15 = null;
    SNode quotedNode_16 = null;
    SNode quotedNode_17 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression", null, null, false);
    quotedNode_9 = (SNode) parameter_1;
    if (quotedNode_9 != null) {
      quotedNode_7.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_9));
    }
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null, null, false);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_12, "value", "0");
    quotedNode_11.addChild("ifFalse", quotedNode_12);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, false);
    quotedNode_13.setReference("classConcept", SReference.create("classConcept", quotedNode_13, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.util(JDK/java.util@java_stub)"), facade.createNodeId("~Arrays")));
    quotedNode_13.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_13, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.util(JDK/java.util@java_stub)"), facade.createNodeId("~Arrays.hashCode(double[]):int")));
    quotedNode_15 = (SNode) parameter_2;
    if (quotedNode_15 != null) {
      quotedNode_13.addChild("actualArgument", HUtil.copyIfNecessary(quotedNode_15));
    }
    quotedNode_11.addChild("ifTrue", quotedNode_13);
    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral", null, null, false);
    quotedNode_14.addChild("rightExpression", quotedNode_16);
    quotedNode_17 = (SNode) parameter_3;
    if (quotedNode_17 != null) {
      quotedNode_14.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_17));
    }
    quotedNode_11.addChild("condition", quotedNode_14);
    quotedNode_10.addChild("expression", quotedNode_11);
    quotedNode_7.addChild("rightExpression", quotedNode_10);
    quotedNode_6.addChild("rValue", quotedNode_7);
    quotedNode_8 = (SNode) parameter_4;
    if (quotedNode_8 != null) {
      quotedNode_6.addChild("lValue", HUtil.copyIfNecessary(quotedNode_8));
    }
    quotedNode_5.addChild("expression", quotedNode_6);
    return quotedNode_5;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0g4a43a0(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    SNode quotedNode_15 = null;
    SNode quotedNode_16 = null;
    SNode quotedNode_17 = null;
    SNode quotedNode_18 = null;
    SNode quotedNode_19 = null;
    SNode quotedNode_20 = null;
    SNode quotedNode_21 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression", null, null, false);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null, null, false);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_12, "value", "0");
    quotedNode_11.addChild("ifFalse", quotedNode_12);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral", null, null, false);
    quotedNode_13.addChild("rightExpression", quotedNode_15);
    quotedNode_16 = (SNode) parameter_1;
    if (quotedNode_16 != null) {
      quotedNode_13.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_16));
    }
    quotedNode_11.addChild("condition", quotedNode_13);
    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_19 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, false);
    quotedNode_20 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_20.setReference("classifier", SReference.create("classifier", quotedNode_20, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    quotedNode_19.addChild("type", quotedNode_20);
    quotedNode_21 = (SNode) parameter_2;
    if (quotedNode_21 != null) {
      quotedNode_19.addChild("expression", HUtil.copyIfNecessary(quotedNode_21));
    }
    quotedNode_17.addChild("expression", quotedNode_19);
    quotedNode_14.addChild("operand", quotedNode_17);
    quotedNode_18 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null, null, false);
    quotedNode_18.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_18, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object.hashCode():int")));
    quotedNode_14.addChild("operation", quotedNode_18);
    quotedNode_11.addChild("ifTrue", quotedNode_14);
    quotedNode_9.addChild("expression", quotedNode_11);
    quotedNode_7.addChild("rightExpression", quotedNode_9);
    quotedNode_10 = (SNode) parameter_3;
    if (quotedNode_10 != null) {
      quotedNode_7.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_10));
    }
    quotedNode_6.addChild("rValue", quotedNode_7);
    quotedNode_8 = (SNode) parameter_4;
    if (quotedNode_8 != null) {
      quotedNode_6.addChild("lValue", HUtil.copyIfNecessary(quotedNode_8));
    }
    quotedNode_5.addChild("expression", quotedNode_6);
    return quotedNode_5;
  }
  private static SNode _quotation_createNode_x9xljz_a0a0a4a43a0_0(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    SNode quotedNode_15 = null;
    SNode quotedNode_16 = null;
    SNode quotedNode_17 = null;
    SNode quotedNode_18 = null;
    SNode quotedNode_19 = null;
    SNode quotedNode_20 = null;
    SNode quotedNode_21 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression", null, null, false);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null, null, false);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_12, "value", "0");
    quotedNode_11.addChild("ifFalse", quotedNode_12);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null, null, false);
    quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral", null, null, false);
    quotedNode_13.addChild("rightExpression", quotedNode_15);
    quotedNode_16 = (SNode) parameter_1;
    if (quotedNode_16 != null) {
      quotedNode_13.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_16));
    }
    quotedNode_11.addChild("condition", quotedNode_13);
    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_19 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, false);
    quotedNode_20 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_20.setReference("classifier", SReference.create("classifier", quotedNode_20, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    quotedNode_19.addChild("type", quotedNode_20);
    quotedNode_21 = (SNode) parameter_2;
    if (quotedNode_21 != null) {
      quotedNode_19.addChild("expression", HUtil.copyIfNecessary(quotedNode_21));
    }
    quotedNode_17.addChild("expression", quotedNode_19);
    quotedNode_14.addChild("operand", quotedNode_17);
    quotedNode_18 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null, null, false);
    quotedNode_18.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_18, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object.hashCode():int")));
    quotedNode_14.addChild("operation", quotedNode_18);
    quotedNode_11.addChild("ifTrue", quotedNode_14);
    quotedNode_9.addChild("expression", quotedNode_11);
    quotedNode_7.addChild("rightExpression", quotedNode_9);
    quotedNode_10 = (SNode) parameter_3;
    if (quotedNode_10 != null) {
      quotedNode_7.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_10));
    }
    quotedNode_6.addChild("rValue", quotedNode_7);
    quotedNode_8 = (SNode) parameter_4;
    if (quotedNode_8 != null) {
      quotedNode_6.addChild("lValue", HUtil.copyIfNecessary(quotedNode_8));
    }
    quotedNode_5.addChild("expression", quotedNode_6);
    return quotedNode_5;
  }
  private static SNode _quotation_createNode_x9xljz_a0a53a0(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("expression", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }
}
