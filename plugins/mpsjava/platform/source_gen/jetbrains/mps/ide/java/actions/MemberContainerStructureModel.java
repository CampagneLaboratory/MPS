package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.ide.platform.dialogs.choosers.NodeTreeModel;
import com.intellij.ide.structureView.StructureViewModel;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import com.intellij.ide.structureView.ModelListener;
import com.intellij.ide.structureView.FileEditorPositionListener;
import org.jetbrains.annotations.Nullable;

public class MemberContainerStructureModel extends NodeTreeModel implements StructureViewModel {
  private final SNodePointer container;
  private final SNodePointer[] members;

  public MemberContainerStructureModel(SNode memberContainer) {
    container = new SNodePointer(memberContainer);
    members = ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), memberContainer, "virtual_getMembers_1213877531970", new Object[]{})).select(new ISelector<SNode, SNodePointer>() {
      public SNodePointer select(SNode it) {
        return new SNodePointer(it);
      }
    }).where(new IWhereFilter<SNodePointer>() {
      public boolean accept(SNodePointer it) {
        return !(it.equals(container));
      }
    }).toGenericArray(SNodePointer.class);
  }

  public SNodePointer[] getRootNodes() {
    return new SNodePointer[]{container};
  }

  public SNodePointer[] getChildren(SNodePointer node) {
    if (node.equals(container)) {
      return members;
    } else {
      return new SNodePointer[0];
    }
  }

  public boolean shouldEnterElement(Object object) {
    return false;
  }

  public void dispose() {
  }

  public void removeModelListener(ModelListener listener) {
  }

  public void addModelListener(ModelListener listener) {
  }

  public void removeEditorPositionListener(FileEditorPositionListener listener) {
  }

  public void addEditorPositionListener(FileEditorPositionListener listener) {
  }

  @Nullable
  public Object getCurrentEditorElement() {
    return null;
  }
}
