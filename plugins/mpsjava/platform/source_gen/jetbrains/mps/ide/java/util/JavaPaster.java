package jetbrains.mps.ide.java.util;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.java.newparser.FeatureKind;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SModel;
import java.awt.datatransfer.Transferable;
import com.intellij.ide.CopyPasteManagerEx;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.ide.java.newparser.JavaParser;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import javax.swing.JOptionPane;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.ide.java.newparser.JavaParseException;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.ArrayList;
import jetbrains.mps.ide.datatransfer.SModelDataFlavor;

public class JavaPaster {
  private static Logger LOG = LogManager.getLogger(JavaPaster.class);

  public JavaPaster() {
  }

  public void pasteJava(SNode anchor, IOperationContext operationContext, FeatureKind featureKind, Project project) {
    String javaCode = getStringFromClipboard();
    if (javaCode == null) {
      return;
    }
    pasteJavaAsNode(anchor, anchor.getModel(), javaCode, operationContext, featureKind, project);
  }

  public void pasteJavaAsClass(SModel model, IOperationContext operationContext, Project project) {
    String javaCode = getStringFromClipboard();
    if (javaCode == null) {
      return;
    }
    pasteJavaAsNode(null, model, javaCode, operationContext, FeatureKind.CLASS, project);
  }

  public String getStringFromClipboard() {
    Transferable contents = null;
    for (Transferable trf : CopyPasteManagerEx.getInstanceEx().getAllContents()) {
      if (trf != null && trf.isDataFlavorSupported(DataFlavor.stringFlavor)) {
        contents = trf;
      }
      break;
    }
    if (contents == null) {
      return null;
    }
    if (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {
      try {
        Object data = contents.getTransferData(DataFlavor.stringFlavor);
        if (data instanceof String) {
          return (String) data;
        }
      } catch (UnsupportedFlavorException ex) {
        return null;
      } catch (IOException ex) {
        LOG.error(null, ex);
      }
    }
    return null;
  }

  public void pasteJavaAsNode(SNode anchor, final SModel model, String javaCode, IOperationContext operationContext, FeatureKind featureKind, Project project) {
    SModule module = model.getModule();
    JavaParser parser = new JavaParser();

    try {
      List<SNode> nodes = parser.parse(javaCode, SModelOperations.getModelName(model), featureKind, true).getNodes();

      if (ListSequence.fromList(nodes).isEmpty()) {
        JOptionPane.showMessageDialog(null, "nothing to paste as Java", "ERROR", JOptionPane.ERROR_MESSAGE);
        return;
      }
      switch (featureKind) {
        case CLASS:
          ListSequence.fromList(nodes).visitAll(new IVisitor<SNode>() {
            public void visit(SNode node) {
              SModelOperations.addRootNode(model, node);
            }
          });
          break;
        case CLASS_CONTENT:
          for (SNode node : ListSequence.fromList(nodes)) {
            if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
              pasteMember(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"), anchor, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"));
            } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
              pasteMember(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"), anchor, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"));
            } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
              pasteMember(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.FieldDeclaration"), anchor, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"));
            } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
              pasteMember(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"), anchor, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"));
            } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")) {
              pasteMember(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"), anchor, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"));
            } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration")) {
              pasteMember(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration"), anchor, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Annotation"));
            } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Classifier")) {
              pasteMember(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Classifier"), anchor, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"));
            }
          }
          break;
        case STATEMENTS:
          for (SNode node : ListSequence.fromList(nodes)) {
            pasteAtAnchorInRole(node, anchor, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList"), SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", "statement"));
          }
          break;
        default:
      }

      // trying to resolve names when nodes are already in a model 
      JavaParser.tryResolveUnknowns(nodes);
      JavaParser.tryResolveDynamicRefs(nodes);

    } catch (JavaParseException ex) {
      JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
    }
  }

  private static boolean pasteAtAnchorInRole(SNode node, SNode anchor, SNode parentConcept, SNode role) {
    SNode parent = SNodeOperations.getAncestor(anchor, NameUtil.nodeFQName(parentConcept), true, false);
    if ((parent == null)) {
      return false;
    }
    anchor = SNodeOperations.getAncestor(anchor, NameUtil.nodeFQName(SLinkOperations.getTarget(role, "target", false)), true, false);
    if ((anchor == null) || SNodeOperations.getParent(anchor) != parent) {
      parent.addChild(SPropertyOperations.getString(role, "role"), node);
    } else {
      jetbrains.mps.util.SNodeOperations.insertChild(parent, SPropertyOperations.getString(role, "role"), node, anchor, true);
    }
    return true;
  }

  private static boolean pasteMember(SNode member, SNode anchor, SNode parentConcept) {
    SNode parent = SNodeOperations.getAncestor(anchor, NameUtil.nodeFQName(parentConcept), true, false);
    if ((parent == null)) {
      return false;
    }
    while ((anchor != null) && SNodeOperations.getParent(anchor) != parent) {
      anchor = SNodeOperations.getParent(anchor);
    }
    int index = -1;
    if (SNodeOperations.isInstanceOf(anchor, "jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
      index = ListSequence.fromList(SNodeOperations.getChildren(parent, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.Classifier", "member"))).indexOf(SNodeOperations.cast(anchor, "jetbrains.mps.baseLanguage.structure.ClassifierMember"));
    }
    if (index == -1) {
      ListSequence.fromList(SLinkOperations.getTargets(parent, "member", true)).addElement(member);
    } else {
      ListSequence.fromList(SNodeOperations.getChildren(parent, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.Classifier", "member"))).insertElement(index, member);
    }
    return true;
  }

  public static List<SNode> getStatementsFromJavaText(String javaCode, SModel model, IOperationContext context, Project project) {
    SModule module = model.getModule();
    try {
      JavaParser.JavaParseResult result = new JavaParser().parse(javaCode, SModelOperations.getModelName(model), FeatureKind.STATEMENTS, true);
      String msg = result.getErrorMsg();
      if (msg != null) {
        LOG.error(msg);
      }
      return result.getNodes();
    } catch (JavaParseException e) {
      LOG.error("Exception happened while parsing java code: ", e);
    }
    return new ArrayList<SNode>();
  }

  public static boolean areDataAvailableInClipboard() {
    Transferable trf = CopyPasteManagerEx.getInstanceEx().getContents();
    if (trf == null || trf.isDataFlavorSupported(SModelDataFlavor.sNode)) {
      return false;
    }
    if (trf.isDataFlavorSupported(DataFlavor.stringFlavor)) {
      return true;
    }
    return false;
  }
}
