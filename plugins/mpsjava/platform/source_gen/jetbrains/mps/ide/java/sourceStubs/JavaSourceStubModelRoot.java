package jetbrains.mps.ide.java.sourceStubs;

/*Generated by MPS */

import jetbrains.mps.extapi.persistence.ModelRootBase;
import jetbrains.mps.logging.Logger;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SModelId;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.persistence.Memento;

public class JavaSourceStubModelRoot extends ModelRootBase {

  private static Logger LOG = Logger.getLogger(JavaSourceStubModelRoot.class);

  private String myPath = "";


  public JavaSourceStubModelRoot() {
  }

  @Override
  public String getType() {
    return "java_source_stubs";
  }



  @Override
  public String getPresentation() {
    return myPath + "(java source stubs)";
  }



  @Override
  public SModel getModel(SModelId id) {
    // TODO 
    return null;
  }



  @Override
  public Iterable<SModel> getModels() {
    LOG.info("Hello there!");

    IFile path = FileSystem.getInstance().getFileByPath(myPath);
    Set<SModel> models = getModels(path, "");
    SetSequence.fromSet(models).visitAll(new IVisitor<SModel>() {
      public void visit(SModel it) {
        register(it);
      }
    });
    return models;
  }



  private Set<SModel> getModels(IFile dir, String pkg) {

    Set<SModel> models = SetSequence.fromSet(new HashSet<SModel>());

    JavaSrcDataSource dataSource = new JavaSrcDataSource(dir, this);
    boolean thereAreJavaFiles = dataSource.getAvailableStreams().iterator().hasNext();

    if (thereAreJavaFiles) {

      SModelFqName fqName = new SModelFqName(pkg, "java_stub");
      jetbrains.mps.smodel.SModelId modelId = jetbrains.mps.smodel.SModelId.foreign(fqName.getStereotype(), getModule().getModuleId().toString(), fqName.getLongName());

      SModelReference modelRef = new SModelReference(fqName, modelId);

      JavaSourceStubModelDescriptor model = new JavaSourceStubModelDescriptor(modelRef, dataSource, pkg);
      SetSequence.fromSet(models).addElement(model);
    }

    // should be one line: dir.getChildren().where cannot be entered... 
    Iterable<IFile> children = dir.getChildren();
    Iterable<IFile> subDirs = Sequence.fromIterable(children).where(new IWhereFilter<IFile>() {
      public boolean accept(IFile it) {
        return it.isDirectory();
      }
    });

    for (IFile subDir : Sequence.fromIterable(subDirs)) {
      String subPkg = (pkg.equals("") ?
        subDir.getName() :
        pkg + "." + subDir.getName()
      );
      Set<SModel> set = getModels(subDir, subPkg);
      SetSequence.fromSet(models).addSequence(SetSequence.fromSet(set));
    }

    return models;
  }



  @Override
  public boolean canCreateModel(String string) {
    return false;
  }



  @Override
  public SModel createModel(String string) {
    return null;
  }



  @Override
  public void save(Memento memento) {
    memento.put("path", myPath);
  }



  @Override
  public void load(Memento memento) {
    myPath = memento.get("path");
    myPath = "/home/danilla/jb/MpsSimple/something";
  }



  public String getPath() {
    // <node> 
    return "/home/danilla/jb/MpsSimple/something";
  }



  public void setPath(String path) {
    myPath = path;
  }



}
