package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import com.intellij.featureStatistics.FeatureUsageTracker;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SNodePointer;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.awt.Rectangle;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import java.awt.Point;
import com.intellij.ui.awt.RelativePoint;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.ide.editor.util.GoToHelper;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.logging.Logger;

public class GoToInheritedClassifier_Action extends BaseAction {
  private static final Icon ICON = null;

  public GoToInheritedClassifier_Action() {
    super("Go to Inherited Classifiers", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get("classifierNode")), "jetbrains.mps.baseLanguage.structure.ClassConcept") || SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get("classifierNode")), "jetbrains.mps.baseLanguage.structure.Interface");
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "GoToInheritedClassifier", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node != null) {
        if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
          node = null;
        }
      }
      MapSequence.fromMap(_params).put("classifierNode", node);
    }
    if (MapSequence.fromMap(_params).get("classifierNode") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("selectedCell", event.getData(MPSEditorDataKeys.EDITOR_CELL));
    if (MapSequence.fromMap(_params).get("selectedCell") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("editorComponent", event.getData(MPSEditorDataKeys.EDITOR_COMPONENT));
    if (MapSequence.fromMap(_params).get("editorComponent") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("editorContext", event.getData(MPSEditorDataKeys.EDITOR_CONTEXT));
    if (MapSequence.fromMap(_params).get("editorContext") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSCommonDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.gotoImplementation");
      final List<String> finderClasses = ListSequence.fromList(new ArrayList<String>());
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          if (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get("classifierNode")), "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
            ListSequence.fromList(finderClasses).addElement("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder");
          } else {
            ListSequence.fromList(finderClasses).addElement("jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder");
            ListSequence.fromList(finderClasses).addElement("jetbrains.mps.baseLanguage.findUsages.DerivedInterfaces_Finder");
          }
        }
      });

      final List<SNodePointer> nodes = ListSequence.fromList(new ArrayList<SNodePointer>());

      ProgressManager.getInstance().run(new Task.Modal(((Project) MapSequence.fromMap(_params).get("project")), "Searching...", true) {
        public void run(@NotNull final ProgressIndicator p) {
          ModelAccess.instance().runReadAction(new Runnable() {
            public void run() {
              for (String finderClass : ListSequence.fromList(finderClasses)) {
                List<SNode> list = FindUtils.executeFinder(finderClass, ((SNode) MapSequence.fromMap(_params).get("classifierNode")), GlobalScope.getInstance(), new ProgressMonitorAdapter(p));
                ListSequence.fromList(nodes).addSequence(ListSequence.fromList(list).select(new ISelector<SNode, SNodePointer>() {
                  public SNodePointer select(SNode it) {
                    return new SNodePointer(it);
                  }
                }));
                ListSequence.fromList(nodes).addSequence(ListSequence.fromList(list).where(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.EnumClass");
                  }
                }).translate(new ITranslator2<SNode, SNodePointer>() {
                  public Iterable<SNodePointer> translate(SNode it) {
                    return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.EnumClass"), "enumConstant", true)).select(new ISelector<SNode, SNodePointer>() {
                      public SNodePointer select(SNode e) {
                        return new SNodePointer(e);
                      }
                    });
                  }
                }));
              }
            }
          });
        }
      });

      Rectangle cellBounds = ((EditorCell) MapSequence.fromMap(_params).get("selectedCell")).getBounds();
      Point point = new Point(((int) cellBounds.getMinX()), ((int) cellBounds.getMaxY()));
      RelativePoint relPoint = new RelativePoint(((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")), point);

      GoToHelper.showInheritedClassesMenu(nodes, relPoint, ProjectHelper.toMPSProject(((Project) MapSequence.fromMap(_params).get("project"))));
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "GoToInheritedClassifier", t);
    }
  }

  private static Logger LOG = Logger.getLogger(GoToInheritedClassifier_Action.class);
}
