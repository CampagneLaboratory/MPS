package jetbrains.mps.ide.java.platform.refactorings;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.refactorings.IntroduceFieldRefactoring;
import com.intellij.openapi.project.Project;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.IntroduceVariableRefactoring;
import javax.swing.JComponent;
import javax.swing.JPanel;
import java.awt.GridBagLayout;
import javax.swing.border.TitledBorder;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButton;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.FieldInitializationPlace;
import com.intellij.openapi.application.ApplicationInfo;
import java.lang.reflect.InvocationTargetException;
import java.awt.GridBagConstraints;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import org.jetbrains.annotations.Nullable;
import java.awt.Insets;

public class IntroduceFieldDialog extends IntroduceVariableDialog {
  private IntroduceFieldRefactoring myRefactoring;
  private final boolean isStatic;

  public IntroduceFieldDialog(Project project, IntroduceFieldRefactoring refactoring, EditorContext editorContext, boolean isStatic) {
    super(project, "Introduce Field", editorContext);
    this.myRefactoring = refactoring;
    this.isStatic = isStatic;
    init();
  }

  @Override
  public IntroduceVariableRefactoring getRefactoring() {
    return this.myRefactoring;
  }

  private JComponent createInitDestinationPanel() {
    JPanel result = new JPanel(new GridBagLayout());
    result.setBorder(new TitledBorder("Initialize in"));
    ButtonGroup group = new ButtonGroup();
    JRadioButton method = this.createButton(0, FieldInitializationPlace.METHOD, result, group);
    JRadioButton field = this.createButton(1, FieldInitializationPlace.FIELD, result, group);
    FieldInitializationPlace staticPlace = null;
    for (FieldInitializationPlace place : FieldInitializationPlace.class.getEnumConstants()) {
      if (place.getName().equals("STATICINIT")) {
        staticPlace = place;
      }
    }
    JRadioButton contructor = this.createButton(2, (isStatic ?
      staticPlace :
      FieldInitializationPlace.CONSTRUCTOR
    ), result, group);
    boolean isInitInFieldAvailable = false;
    try {
      isInitInFieldAvailable = (Boolean) IntroduceFieldRefactoring.class.getDeclaredMethod((ApplicationInfo.getInstance().getMajorVersion().equals("12") ?
        "isInitialyzeInFieldAvailable" :
        "isInitializeInFieldAvailable"
      )).invoke(this.myRefactoring);
    } catch (IllegalAccessException e) {
    } catch (InvocationTargetException e) {
    } catch (NoSuchMethodException e) {
    }
    if (isInitInFieldAvailable) {
      field.setSelected(true);
    } else {
      field.setEnabled(false);
      contructor.setEnabled(false);
    }
    method.setSelected(true);
    return result;
  }

  private JRadioButton createButton(int y, final FieldInitializationPlace place, JPanel result, ButtonGroup group) {
    final JRadioButton button = new JRadioButton(place.getName());
    GridBagConstraints c = new GridBagConstraints();
    c.anchor = GridBagConstraints.LINE_START;
    c.gridy = y;
    c.weightx = 1.0;
    result.add(button, c);
    group.add(button);
    button.addChangeListener(new ChangeListener() {
      @Override
      public void stateChanged(ChangeEvent p0) {
        if (button.isSelected()) {
          IntroduceFieldDialog.this.myRefactoring.setFieldInitializationPlace(place);
        }
      }
    });
    return button;
  }

  @Nullable
  @Override
  protected JComponent createCenterPanel() {
    initPanel();
    int gridy = 1;
    GridBagConstraints c;
    c = new GridBagConstraints();
    c.fill = GridBagConstraints.HORIZONTAL;
    c.gridx = 1;
    c.gridy = 0;
    addIsFinal(c);
    c = new GridBagConstraints();
    c.fill = GridBagConstraints.BOTH;
    c.insets = new Insets(3, 3, 3, 3);
    c.gridx = 0;
    c.gridy = gridy;
    c.weightx = 1;
    c.weighty = 0;
    myPanel.add(createInitDestinationPanel(), c);
    c = new GridBagConstraints();
    c.fill = GridBagConstraints.BOTH;
    c.gridx = 1;
    c.gridy = gridy++;
    addVisibilityPanel(c);
    if (getRefactoring().hasDuplicates()) {
      addReplacingAll(gridy++);
    }
    c = new GridBagConstraints();
    c.gridy = gridy;
    c.weighty = 1;
    myPanel.add(new JPanel(), c);
    return myPanel;
  }
}
