package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import java.util.List;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class OverrideImplementMethodInEnumConstantAction {
  private Project myProject;
  private SNode mySelectedNode;
  private EditorContext myEditorContext;
  private boolean myIsOverride;


  public OverrideImplementMethodInEnumConstantAction(Project project, SNode selectedNode, EditorContext editorContext, boolean isOverride) {
    myProject = project;
    mySelectedNode = selectedNode;
    myEditorContext = editorContext;
    this.myIsOverride = isOverride;
  }



  public void run() {
    final SNode contextEnumConstant = ModelAccess.instance().runReadAction(new Computable<SNode>() {
      public SNode compute() {
        return SNodeOperations.getAncestor(mySelectedNode, "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration", true, false);
      }
    });
    final SNode contextMember = ModelAccess.instance().runReadAction(new Computable<SNode>() {
      public SNode compute() {
        return SNodeOperations.getAncestor(mySelectedNode, "jetbrains.mps.baseLanguage.structure.ClassifierMember", true, false);
      }
    });
    final SNodeReference[] methods = ModelAccess.instance().runReadAction(new Computable<SNodeReference[]>() {
      @Override
      public SNodeReference[] compute() {
        List<SNode> methodsToOverride = (myIsOverride ? BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), contextEnumConstant, "virtual_getMethodsToOverride_5418393554803767537", new Object[]{}) : BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), contextEnumConstant, "virtual_getMethodsToImplement_5418393554803775106", new Object[]{}));
        List<SNode> allSuperClassifiers = BehaviorReflection.invokeNonVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(SNodeOperations.getParent(contextEnumConstant), "jetbrains.mps.baseLanguage.structure.EnumClass"), "jetbrains.mps.baseLanguage.structure.ClassConcept", "call_getAllSuperClassifiers_4892662966716545618", new Object[]{});
        ListSequence.fromList(allSuperClassifiers).addElement(SNodeOperations.cast(SNodeOperations.getParent(contextEnumConstant), "jetbrains.mps.baseLanguage.structure.Classifier"));
        return OverrideImplementMethodsDialog.toNodePointers(OverrideImplementMethodsDialog.sortMethods(allSuperClassifiers, methodsToOverride));
      }
    });

    final OverrideImplementMethodsDialog dialog = new OverrideImplementMethodsDialog(methods, ProjectHelper.toIdeaProject(myProject)) {
      @Override
      protected boolean showInsertOverride() {
        return myIsOverride;
      }
    };

    dialog.setTitle((myIsOverride ? "Select Methods to Override" : "Select Methods to Implement"));
    dialog.show();

    if (dialog.isOK()) {
      final Iterable<SNodeReference> selectedElements = (Iterable<SNodeReference>) dialog.getSelectedElements();

      ModelAccess.instance().runCommandInEDT(new Runnable() {
        @Override
        public void run() {
          List<SNode> selection = Sequence.fromIterable(selectedElements).select(new ISelector<SNodeReference, SNode>() {
            public SNode select(SNodeReference it) {
              return SNodeOperations.cast(((SNodePointer) it).resolve(MPSModuleRepository.getInstance()), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
            }
          }).toListSequence();
          OverrideImplementMethodsHelper helper = new OverrideImplementMethodsInEnumHelper(myProject, SNodeOperations.cast(SNodeOperations.getParent(contextEnumConstant), "jetbrains.mps.baseLanguage.structure.EnumClass"), contextEnumConstant, contextMember, dialog.isRemoveAttributes(), dialog.isInsertOverrideAnnotation(), dialog.isAddReturn());
          List<SNode> insertedMethods = helper.insertMethods(selection);
          if (insertedMethods.isEmpty()) {
            return;
          }
          SNode firstMethod = ListSequence.fromList(insertedMethods).first();
          SNode nodeToSelect;
          if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(firstMethod, "body", true), "statement", true)).isNotEmpty()) {
            nodeToSelect = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(firstMethod, "body", true), "statement", true)).first();
          } else {
            nodeToSelect = firstMethod;
          }
          myEditorContext.flushEvents();
          myEditorContext.getSelectionManager().setSelection(nodeToSelect);
        }
      }, myProject);
    }
  }


}
