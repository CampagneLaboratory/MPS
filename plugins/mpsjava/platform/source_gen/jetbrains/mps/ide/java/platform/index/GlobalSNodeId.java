package jetbrains.mps.ide.java.platform.index;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SNodeId;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class GlobalSNodeId {
  private String myModelReference;
  private String myNodeId;

  /*package*/ GlobalSNodeId(String modelReference, String nodeId) {
    assert modelReference != null;
    assert nodeId != null;
    myModelReference = modelReference;
    myNodeId = nodeId;
  }

  public SNode getNode() {
    SModelReference sModelReference = PersistenceFacade.getInstance().createModelReference(getModelReference());
    SModel sModelDescriptor = SModelRepository.getInstance().getModelDescriptor(sModelReference);
    return (sModelDescriptor == null ? null : sModelDescriptor.getNode(SNodeId.fromString(getNodeId())));
  }

  @Override
  public int hashCode() {
    return getNodeId().hashCode();
  }

  @Override
  public boolean equals(Object other) {
    if (other instanceof GlobalSNodeId) {
      GlobalSNodeId otherNodeId = (GlobalSNodeId) other;
      return getModelReference().equals(otherNodeId.getModelReference()) && getNodeId().equals(otherNodeId.getNodeId());
    }
    return false;

  }
  public final String getModelReference() {
    return myModelReference;
  }

  public final String getNodeId() {
    return myNodeId;
  }

  public static GlobalSNodeId createSNodeId(SReference reference) {
    SModelReference modelReference;
    org.jetbrains.mps.openapi.model.SNodeId nodeId;
    if (reference == null || (modelReference = reference.getTargetSModelReference()) == null || (nodeId = reference.getTargetNodeId()) == null) {
      return null;
    }
    return new GlobalSNodeId(normalize(modelReference).toString(), nodeId.toString());
  }

  public static GlobalSNodeId createSNodeId(SNode node) {
    return new GlobalSNodeId(normalize(SNodeOperations.getModel(node).getReference()).toString(), node.getNodeId().toString());
  }

  private static SModelReference normalize(SModelReference reference) {
    // workaroung for https://youtrack.jetbrains.com/issue/MPS-22385 
    return (reference.getModuleReference() == null || !(reference.getModelId().isGloballyUnique()) ? reference : new jetbrains.mps.smodel.SModelReference(null, reference.getModelId(), reference.getModelName()));
  }
}
