package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.platform.refactoring.MoveNodeDialog;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import jetbrains.mps.smodel.MPSModuleRepository;

public class MoveStaticMethodExecutable implements MoveStaticMemberExecutable {

  @Override
  public void execute(MPSProject project, final SNode target, final MoveRefactoringRunnable runnable) {
    final SNode whereToMove;
    whereToMove = MoveNodeDialog.getSelectedObject(project.getProject(), target, new MoveNodeDialog.NodeFilter("Select class to move: refactoring can't be applied to selected node") {
      @Override
      public boolean check(SNode selectedObject, SNode nodeToMove, SModel modelOfSelectedNode) {
        return SNodeOperations.isInstanceOf(selectedObject, "jetbrains.mps.baseLanguage.structure.ClassConcept") && !(ListSequence.fromList(SNodeOperations.getAncestors(nodeToMove, null, false)).contains(selectedObject));
      }
    });

    if (whereToMove == null) {
      return;
    }
    ModelAccess.instance().runReadInEDT(new Runnable() {
      @Override
      public void run() {
        SNode node = ((SNode) target);
        if (!(SNodeUtil.isAccessible(node, MPSModuleRepository.getInstance()))) {
          return;
        }
        SNode node1 = ((SNode) whereToMove);
        if (!(SNodeUtil.isAccessible(node1, MPSModuleRepository.getInstance()))) {
          return;
        }

        runnable.run(whereToMove);
      }
    });
  }



}
