package jetbrains.mps.ide.java.newparser;

/*Generated by MPS */

import jetbrains.mps.stubs.BaseStubModelDescriptor;
import jetbrains.mps.smodel.descriptor.NodesNavigationContributor;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.project.IModule;
import java.util.Collection;
import jetbrains.mps.smodel.descriptor.NodeDescriptor;
import jetbrains.mps.smodel.descriptor.source.ModelDataSource;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class JavaSourceStubModelDescriptor extends BaseStubModelDescriptor implements NodesNavigationContributor {
  public JavaSourceStubModelDescriptor(SModelReference modelReference, JavaSourceStubModelDS source, IModule module) {
    super(modelReference, source, module);
  }

  public Collection<NodeDescriptor> getNodeDescriptors() {
    return ((JavaSourceStubModelDS) getSource()).getNodeDescriptors();
  }

  public void reparseOneFile(final String contents) {
    final ModelDataSource ds = getSource();
    assert ds instanceof JavaSourceStubModelDS;


    // FIXME change write actions, commands 
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {

        final SModel myModel = getSModel();
        List<SNode> nodes = ((JavaSourceStubModelDS) ds).parseFile(contents, myModel);

        // replace existing nodes with matching names 
        List<SNode> roots = SModelOperations.getRoots(myModel, null);
        for (SNode node : ListSequence.fromList(nodes)) {
          // <node> 
          // TODO use myModel/.getNodeById 
          // <node> 

          SNodeId nodeId = node.getSNodeId();
          final SNode root = myModel.getNodeById(nodeId);

          final SNode theNode = node;

          ModelAccess.instance().runWriteActionInCommand(new Runnable() {
            public void run() {
              if ((root == null)) {
                SModelOperations.addRootNode(myModel, theNode);
              } else {
                SNodeOperations.detachNode(root);
                // <node> 
                SNodeOperations.deleteNode(root);
                SModelOperations.addRootNode(myModel, theNode);
              }
            }
          });
          // <node> 
          // <node> 

        }
      }
    });
  }
}
