package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.Project;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.ArrayList;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class OverrideImplementMethodsInEnumHelper extends OverrideImplementMethodsHelper {
  private SNode enumConstant;


  public OverrideImplementMethodsInEnumHelper(Project project, SNode target, SNode enumConstant, SNode contextMember, boolean removeAttributes, boolean insertOverride, boolean needReturnKW) {
    super(project, target, contextMember, removeAttributes, insertOverride, needReturnKW);
    this.enumConstant = enumConstant;
  }



  public List<SNode> insertMethods(List<SNode> baseMethods) {
    int index = (myContextMember != null && SNodeOperations.isInstanceOf(myContextMember, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration") && SNodeOperations.getParent(myContextMember) == enumConstant ? ListSequence.fromList(SLinkOperations.getTargets(enumConstant, "method", true)).indexOf(SNodeOperations.cast(myContextMember, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) + 1 : -1);
    List<SNode> result = new ArrayList<SNode>();
    for (SNode m : baseMethods) {
      SNode baseMethod = SNodeOperations.cast(m, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
      SNode method = SNodeOperations.cast(BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), baseMethod, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "call_getMethodToImplement_69709522611978987", new Object[]{myClassConcept}), "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
      SPropertyOperations.set(method, "isAbstract", "" + (false));
      SLinkOperations.setTarget(method, "body", SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(myClassConcept), "jetbrains.mps.baseLanguage.structure.StatementList", null), true);
      if (index != -1) {
        ListSequence.fromList(SLinkOperations.getTargets(enumConstant, "method", true)).insertElement(index++, method);
      } else {
        ListSequence.fromList(SLinkOperations.getTargets(enumConstant, "method", true)).addElement(method);
      }
      update(method, baseMethod);
      ListSequence.fromList(result).addElement(method);
    }
    return result;
  }


}
