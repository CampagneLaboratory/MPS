package jetbrains.mps.ide.java.platform.highlighters;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.checking.EditorCheckerAdapter;
import java.util.Set;
import jetbrains.mps.nodeEditor.EditorMessage;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.smodel.event.SModelEvent;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.search.ClassifierSuccessors;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.project.IndexNotReadyException;
import jetbrains.mps.baseLanguage.util.OverridingMethodsFinder;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Iterator;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.event.SModelRootEvent;
import jetbrains.mps.smodel.event.SModelFileChangedEvent;
import jetbrains.mps.smodel.event.SModelChildEvent;
import jetbrains.mps.smodel.event.SModelReferenceEvent;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.smodel.event.SModelPropertyEvent;

public class OverrideMethodsChecker extends EditorCheckerAdapter {
  private static final int MAX_MESSAGE_NUMBER = 5;
  private static final String LF = "\n";
  private static final String TOOLTIP_INDENT = LF + "    ";
  private boolean myIndexWasNotReady;
  public OverrideMethodsChecker() {
  }
  @Override
  public Set<EditorMessage> createMessages(SNode rootNode, List<SModelEvent> events, boolean wasCheckedOnce, EditorContext editorContext) {
    Iterable<SNode> classifiers = ListSequence.fromList(SNodeOperations.getNodeDescendants(rootNode, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier"), true, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, "jetbrains.mps.baseLanguage.structure.ClassConcept")) || SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107796713796l, "jetbrains.mps.baseLanguage.structure.Interface"));
      }
    });
    this.myIndexWasNotReady = !(ClassifierSuccessors.getInstance().isIndexReady(editorContext.getOperationContext().getProject()));
    if (Sequence.fromIterable(classifiers).isEmpty() || this.myIndexWasNotReady) {
      return Collections.<EditorMessage>emptySet();
    }
    Set<EditorMessage> result = SetSequence.fromSet(new HashSet<EditorMessage>());
    for (SNode containedClassifier : Sequence.fromIterable(classifiers)) {
      // each classifier here is instance of ClassConcept or Interface 
      try {
        collectOverridenMethods(containedClassifier, result);
      } catch (IndexNotReadyException indexNotReady) {
        // Catching IndexNotReadyException for now. In general suggestion of IDEA developers was to start using 
        // DaemonCodeAnalyzer for background highlighting processes execution 
        myIndexWasNotReady = true;
      }
      collectOverridingMethods(containedClassifier, result);
    }
    return result;
  }
  private void collectOverridingMethods(SNode container, Set<EditorMessage> messages) {
    OverridingMethodsFinder finder = new OverridingMethodsFinder(container);
    for (SNode overridingMethod : SetSequence.fromSet(finder.getOverridingMethods())) {
      StringBuffer tooltip = new StringBuffer();
      int messageCounter = 0;
      Set<Tuples._2<SNode, SNode>> overridenMethods = finder.getOverridenMethods(overridingMethod);
      boolean overrides = SPropertyOperations.getBoolean(overridingMethod, MetaAdapterFactory.getProperty(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123165l, 1178608670077l, "isAbstract")) || SetSequence.fromSet(overridenMethods).where(new IWhereFilter<Tuples._2<SNode, SNode>>() {
        public boolean accept(Tuples._2<SNode, SNode> it) {
          return !(SPropertyOperations.getBoolean(it._0(), MetaAdapterFactory.getProperty(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123165l, 1178608670077l, "isAbstract")));
        }
      }).isNotEmpty();
      for (Iterator<Tuples._2<SNode, SNode>> it = SetSequence.fromSet(overridenMethods).iterator(); it.hasNext();) {
        SNode overridenClassifier = it.next()._1();
        tooltip.append((overrides ? "Overrides" : "Implements"));
        tooltip.append(" method in '");
        tooltip.append(getClassifierPresentation(overridenClassifier));
        tooltip.append("'");
        if (it.hasNext()) {
          tooltip.append(LF);
          if (++messageCounter == MAX_MESSAGE_NUMBER) {
            tooltip.append("...");
            break;
          }
        }
      }
      SetSequence.fromSet(messages).addElement(new OverridingMethodEditorMessage(overridingMethod, this, tooltip.toString(), overrides));
    }
  }
  private void collectOverridenMethods(SNode container, Set<EditorMessage> messages) {
    List<SNode> derivedClassifiers = ClassifierSuccessors.getInstance().getDerivedClassifiers(container, GlobalScope.getInstance());
    if (ListSequence.fromList(derivedClassifiers).isEmpty()) {
      return;
    }
    boolean isInterface = SNodeOperations.isInstanceOf(container, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107796713796l, "jetbrains.mps.baseLanguage.structure.Interface"));
    StringBuffer superClassifierTooltip = new StringBuffer();
    if (ListSequence.fromList(derivedClassifiers).count() > MAX_MESSAGE_NUMBER) {
      superClassifierTooltip.append((isInterface ? "Has implementations" : "Has subclasses"));
    } else {
      superClassifierTooltip.append((isInterface ? "Is implemented by" : "Is subclassed by"));
      for (SNode subClassifier : ListSequence.fromList(derivedClassifiers)) {
        superClassifierTooltip.append(TOOLTIP_INDENT);
        superClassifierTooltip.append(getClassifierPresentation(subClassifier));
        if (SNodeOperations.isInstanceOf(subClassifier, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1083245097125l, "jetbrains.mps.baseLanguage.structure.EnumClass"))) {
          for (SNode enumConstant : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(subClassifier, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1083245097125l, "jetbrains.mps.baseLanguage.structure.EnumClass")), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1083245097125l, 1083245396908l, "enumConstant")))) {
            superClassifierTooltip.append(TOOLTIP_INDENT);
            superClassifierTooltip.append(getEnumConstantPresentation(enumConstant));
          }
        }
      }
    }
    SetSequence.fromSet(messages).addElement(new SubclassedClassifierEditorMessage(container, this, superClassifierTooltip.toString(), isInterface));

    Map<String, Set<SNode>> nameToMethodsMap = MapSequence.fromMap(new HashMap<String, Set<SNode>>());
    for (SNode method : Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>) ((Class) Object.class), container, "jetbrains.mps.baseLanguage.structure.Classifier", "call_methods_5292274854859311639", new Object[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return OverridingMethodsFinder.canBeOverriden(it);
      }
    })) {
      SetSequence.fromSet(OverridingMethodsFinder.safeGet(nameToMethodsMap, SPropertyOperations.getString(method, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")))).addElement(method);
    }
    if (MapSequence.fromMap(nameToMethodsMap).isEmpty()) {
      return;
    }
    Map<SNode, Set<SNode>> overridenToOverridingMethodsMap = createOverridenToOverridingMethodsMap(nameToMethodsMap, derivedClassifiers);
    for (SNode overridenMethod : SetSequence.fromSet(MapSequence.fromMap(overridenToOverridingMethodsMap).keySet())) {
      if (SPropertyOperations.getBoolean(overridenMethod, MetaAdapterFactory.getProperty(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123132l, 1181808852946l, "isFinal"))) {
        continue;
      }
      boolean overriden = !(SPropertyOperations.getBoolean(overridenMethod, MetaAdapterFactory.getProperty(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123165l, 1178608670077l, "isAbstract")));
      StringBuffer tooltip = new StringBuffer("Is ");
      tooltip.append((overriden ? "overriden" : "implemented"));
      tooltip.append(" in");
      int messageCounter = 0;
      for (Iterator<SNode> it = SetSequence.fromSet(MapSequence.fromMap(overridenToOverridingMethodsMap).get(overridenMethod)).iterator(); it.hasNext();) {
        SNode overridingMethod = it.next();
        tooltip.append(TOOLTIP_INDENT);
        tooltip.append(getPresentation(SNodeOperations.getParent(overridingMethod)));
        if (++messageCounter == MAX_MESSAGE_NUMBER && it.hasNext()) {
          tooltip.append(TOOLTIP_INDENT);
          tooltip.append("...");
          break;
        }
      }
      SetSequence.fromSet(messages).addElement(new OverridenMethodEditorMessage(overridenMethod, this, tooltip.toString(), overriden));
    }
  }
  private Map<SNode, Set<SNode>> createOverridenToOverridingMethodsMap(Map<String, Set<SNode>> nameToMethodsMap, Iterable<SNode> derivedClassifiers) {
    Map<SNode, Set<SNode>> result = MapSequence.fromMap(new HashMap<SNode, Set<SNode>>());
    for (SNode derivedClassifier : Sequence.fromIterable(derivedClassifiers)) {
      for (final SNode derivedClassifierMethod : Sequence.fromIterable(OverridingMethodsFinder.getInstanceMethods(derivedClassifier)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return OverridingMethodsFinder.canOverride(it);
        }
      })) {
        Set<SNode> similarMethods = MapSequence.fromMap(nameToMethodsMap).get(SPropertyOperations.getString(derivedClassifierMethod, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")));
        if (similarMethods == null) {
          continue;
        }
        SNode overridenMethod = SetSequence.fromSet(similarMethods).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return BehaviorReflection.invokeNonVirtual(Boolean.TYPE, it, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "call_hasSameSignature_1213877350435", new Object[]{derivedClassifierMethod});
          }
        });
        if (overridenMethod != null) {
          Set<SNode> overridingMethods = OverridingMethodsFinder.safeGet(result, overridenMethod);
          SetSequence.fromSet(overridingMethods).addElement(derivedClassifierMethod);
          if (SetSequence.fromSet(overridingMethods).count() > MAX_MESSAGE_NUMBER) {
            SetSequence.fromSet(similarMethods).removeElement(overridenMethod);
            if (SetSequence.fromSet(similarMethods).isEmpty()) {
              MapSequence.fromMap(nameToMethodsMap).removeKey(SPropertyOperations.getString(derivedClassifierMethod, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")));
              if (MapSequence.fromMap(nameToMethodsMap).isEmpty()) {
                return result;
              }
            }
          }
        }
      }
    }
    return result;
  }
  @Override
  public boolean hasDramaticalEvent(List<SModelEvent> events) {
    if (this.myIndexWasNotReady) {
      return true;
    }
    for (SModelEvent event : ListSequence.fromList(events)) {
      if (event instanceof SModelRootEvent || event instanceof SModelFileChangedEvent) {
        return true;
      }
      if (event instanceof SModelChildEvent) {
        SModelChildEvent childEvent = (SModelChildEvent) event;
        SNode child = childEvent.getChild();
        SNode parent = childEvent.getParent();
        String childRole = childEvent.getChildRole();
        // Class or Interface was added/removed 
        if (SNodeOperations.isInstanceOf(child, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107796713796l, "jetbrains.mps.baseLanguage.structure.Interface")) || SNodeOperations.isInstanceOf(child, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, "jetbrains.mps.baseLanguage.structure.ClassConcept")) || SNodeOperations.isInstanceOf(child, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1170345865475l, "jetbrains.mps.baseLanguage.structure.AnonymousClass")) || SNodeOperations.isInstanceOf(child, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1182160077978l, "jetbrains.mps.baseLanguage.structure.AnonymousClassCreator"))) {
          return true;
        }
        // method was added/removed from containing Classifier 
        if (SNodeOperations.isInstanceOf(child, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123165l, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) && SNodeOperations.isInstanceOf(parent, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
          return true;
        }
        // one of extendedInterface/superclass/implementedInterface child elements was added/removed 
        if (SNodeOperations.isInstanceOf(child, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, "jetbrains.mps.baseLanguage.structure.ClassifierType")) && (SPropertyOperations.getString(SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107796713796l, 1107797138135l, "extendedInterface")), MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599776563l, "role")).equals(childRole) || SPropertyOperations.getString(SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, 1165602531693l, "superclass")), MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599776563l, "role")).equals(childRole) || SPropertyOperations.getString(SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, 1095933932569l, "implementedInterface")), MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599776563l, "role")).equals(childRole))) {
          return true;
        }
        // parameter was added/removed 
        if (SNodeOperations.isInstanceOf(child, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068498886292l, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration")) && SPropertyOperations.getString(SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123132l, 1068580123134l, "parameter")), MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599776563l, "role")).equals(childRole)) {
          return true;
        }
        if (SNodeOperations.isInstanceOf(child, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068431790189l, "jetbrains.mps.baseLanguage.structure.Type")) && isParameterType(child)) {
          return true;
        }
      }
      if (event instanceof SModelReferenceEvent) {
        SModelReferenceEvent referenceEvent = (SModelReferenceEvent) event;
        SReference reference = referenceEvent.getReference();
        SNode sourceNode = reference.getSourceNode();
        String referenceRole = reference.getRole();
        if (SPropertyOperations.getString(SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier")), MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599776563l, "role")).equals(referenceRole) && SNodeOperations.isInstanceOf(sourceNode, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, "jetbrains.mps.baseLanguage.structure.ClassifierType")) && (SNodeOperations.isInstanceOf(SNodeOperations.getParent(sourceNode), MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier")))) {
          return true;
        }
        if (SPropertyOperations.getString(SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1170345865475l, 1170346070688l, "classifier")), MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599776563l, "role")).equals(referenceRole) && SNodeOperations.isInstanceOf(sourceNode, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1170345865475l, "jetbrains.mps.baseLanguage.structure.AnonymousClass"))) {
          return true;
        }
        if (SNodeOperations.isInstanceOf(sourceNode, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068431790189l, "jetbrains.mps.baseLanguage.structure.Type")) && isParameterType(sourceNode)) {
          return true;
        }
      }
      if (event instanceof SModelPropertyEvent) {
        SModelPropertyEvent propertyEvent = (SModelPropertyEvent) event;
        SNode node = propertyEvent.getNode();
        if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123132l, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"))) {
          return true;
        }
      }
    }
    return false;
  }
  private String getPresentation(SNode node) {
    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
      return getClassifierPresentation(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier")));
    }
    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1083245299891l, "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration"))) {
      return getEnumConstantPresentation(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1083245299891l, "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration")));
    }
    return BehaviorReflection.invokeVirtual(String.class, node, "virtual_getPresentation_1213877396640", new Object[]{});
  }
  private String getClassifierPresentation(SNode classifier) {
    return BehaviorReflection.invokeVirtual(String.class, classifier, "virtual_getFqName_1213877404258", new Object[]{});
  }
  private String getEnumConstantPresentation(SNode enumConstantDeclaration) {
    return BehaviorReflection.invokeVirtual(String.class, enumConstantDeclaration, "virtual_getFqName_1213877404258", new Object[]{});
  }
  private static boolean isParameterType(SNode type) {
    SNode parent = SNodeOperations.getParent(type);
    if (SNodeOperations.isInstanceOf(parent, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068498886292l, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"))) {
      return true;
    }
    if (SNodeOperations.isInstanceOf(parent, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068431790189l, "jetbrains.mps.baseLanguage.structure.Type"))) {
      return isParameterType(parent);
    }
    return false;
  }
}
