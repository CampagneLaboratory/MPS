package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Priority;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.ide.java.newparser.DirParser;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.io.File;
import jetbrains.mps.ide.java.newparser.JavaParseException;
import javax.swing.JOptionPane;
import java.awt.Frame;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.progress.EmptyProgressMonitor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MigrateSourcesToMPS_Action extends BaseAction {
  private static final Icon ICON = null;

  public MigrateSourcesToMPS_Action() {
    super("Migrate Sources to MPS", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    ModuleDescriptor moduleDescr = ((IModule) MapSequence.fromMap(_params).get("module")).getModuleDescriptor();
    return moduleDescr != null && !(moduleDescr.getSourcePaths().isEmpty());
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "MigrateSourcesToMPS", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSCommonDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("module", event.getData(MPSCommonDataKeys.MODULE));
    if (MapSequence.fromMap(_params).get("module") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      ModuleDescriptor moduleDescr = ((IModule) MapSequence.fromMap(_params).get("module")).getModuleDescriptor();
      if (moduleDescr == null || moduleDescr.getSourcePaths().isEmpty()) {
        return;
      }

      DirParser dirParser = new DirParser(((IModule) MapSequence.fromMap(_params).get("module")), ((MPSProject) MapSequence.fromMap(_params).get("project")));
      for (String path : CollectionSequence.fromCollection(moduleDescr.getSourcePaths())) {
        dirParser.addDirectory(new File(path));
      }
      try {
        dirParser.parseDirs();
      } catch (JavaParseException e) {
        // TODO think how to handle these 
        JOptionPane.showMessageDialog(((Frame) MapSequence.fromMap(_params).get("frame")), e.getMessage(), "Error while importing java code", JOptionPane.ERROR_MESSAGE);
        throw new RuntimeException(e);
      }

      moduleDescr.getSourcePaths().clear();

      ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "MigrateSourcesToMPS", t);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(MigrateSourcesToMPS_Action.class);
}
