package jetbrains.mps.ide.java.platform.fastFind;

/*Generated by MPS */

import org.jetbrains.mps.openapi.persistence.indexing.NodeNavigationContributor;
import com.intellij.openapi.components.ApplicationComponent;
import java.util.Collection;
import org.jetbrains.mps.openapi.persistence.indexing.NodeDescriptor;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.project.Project;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.persistence.indexing.FastGoToRegistry;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

public class JavaSourceStubNavigationContributor implements NodeNavigationContributor, ApplicationComponent {
  public JavaSourceStubNavigationContributor() {
  }

  public Collection<NodeDescriptor> getNodeDescriptors(final Collection<SModel> collection, Project project) {
    List<NodeDescriptor> nodes = ListSequence.fromList(new ArrayList<NodeDescriptor>());

    for (SModel model : CollectionSequence.fromCollection(collection)) {
      for (SNode root : Sequence.fromIterable(model.getRootNodes())) {
        final String name = root.getName();

        if (name == null || "".equals(name)) {
          continue;
        }
        if (!(root instanceof jetbrains.mps.smodel.SNode)) {
          continue;
        }

        final SNode rootNode = root;

        ListSequence.fromList(nodes).addElement(new NodeDescriptor() {
          public String getName() {
            return name;
          }

          public SConcept getConcept() {
            return rootNode.getConcept();
          }

          public SNodeReference getNodeReference() {
            return new SNodePointer((jetbrains.mps.smodel.SNode) rootNode);
          }
        });
      }
    }

    return nodes;
  }

  public void initComponent() {
    FastGoToRegistry.getInstance().setNavigationContributor("java_source_stubs", this);
  }

  public void disposeComponent() {
    FastGoToRegistry.getInstance().setNavigationContributor("java_source_stubs", null);
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return "Java source stubs navigation contributor";
  }
}
