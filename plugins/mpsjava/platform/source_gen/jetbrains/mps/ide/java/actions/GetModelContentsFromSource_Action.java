package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.IModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.generator.TransientModelsModule;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.extapi.model.EditableSModel;
import jetbrains.mps.ide.ui.filechoosers.treefilechooser.TreeFileChooser;
import org.jetbrains.mps.openapi.model.SModel;
import java.io.File;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.vfs.IFile;
import java.awt.Frame;
import jetbrains.mps.ide.java.newparser.DirParser;
import jetbrains.mps.ide.java.newparser.JavaParseException;
import jetbrains.mps.logging.Logger;

public class GetModelContentsFromSource_Action extends BaseAction {
  private static final Icon ICON = null;

  public GetModelContentsFromSource_Action() {
    super("Get Model Contents from Source", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    IModule module = ((SModel) MapSequence.fromMap(_params).get("model")).getModule();
    if (module == null) {
      return false;
    }
    return !(module instanceof TransientModelsModule);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "GetModelContentsFromSource", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSCommonDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("model", event.getData(MPSCommonDataKeys.MODEL));
    if (MapSequence.fromMap(_params).get("model") == null) {
      return false;
    }
    if (!(MapSequence.fromMap(_params).get("model") instanceof EditableSModel) || ((EditableSModel) MapSequence.fromMap(_params).get("model")).isReadOnly()) {
      return false;
    }
    MapSequence.fromMap(_params).put("mpsProject", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("mpsProject") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {


      // FIXME this action was just switched from old JavaCompiler to new DirParser 
      // Now it ignores model, and does exactly the same as new models from source 
      // It should be either deleted or changed 

      IModule module = ((SModel) MapSequence.fromMap(_params).get("model")).getModule();
      TreeFileChooser treeFileChooser = new TreeFileChooser();
      treeFileChooser.setDirectoriesAreAlwaysVisible(true);
      treeFileChooser.setMode(TreeFileChooser.MODE_DIRECTORIES);
      final SModel sModel = ((SModel) MapSequence.fromMap(_params).get("model")).getSModel();
      String generatorOutputPath = module.getGeneratorOutputPath();
      File initial = null;
      File output = new File(generatorOutputPath);
      if (output.exists()) {
        initial = output;
        File sourceRoot = new File(initial.getParentFile(), "source");
        if (!(sourceRoot.exists())) {
          sourceRoot = new File(initial.getParentFile(), "src");
        }
        initial = sourceRoot;
        if (sourceRoot.exists()) {
          File modelSource = new File(sourceRoot, NameUtil.pathFromNamespace(SNodeOperations.getModelLongName(sModel)));
          if (modelSource.exists()) {
            initial = modelSource;
          }
        }
      }
      if (initial != null) {
        treeFileChooser.setInitialFile(FileSystem.getInstance().getFileByPath(initial.getAbsolutePath()));
      }
      IFile result = treeFileChooser.showDialog(((Frame) MapSequence.fromMap(_params).get("frame")));
      if (result != null) {
        DirParser dirParser = new DirParser(module, null, new File(result.getPath()));
        try {
          dirParser.parseDirs();
        } catch (JavaParseException e) {
          // TODO properly handle it 
          throw new RuntimeException(e);
        }
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "GetModelContentsFromSource", t);
    }
  }

  private static Logger LOG = Logger.getLogger(GetModelContentsFromSource_Action.class);
}
