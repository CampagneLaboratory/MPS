package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.platform.refactoring.MoveNodeDialog;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import jetbrains.mps.smodel.MPSModuleRepository;

public class MoveStaticFieldExecutable implements MoveStaticMemberExecutable {

  /**
   * Shared between workbench action and plugin MoveContributor
   */
  @Override
  public void execute(MPSProject project, final SNode target, final MoveRefactoringRunnable runnable) {
    final SNode whereToMove;
    whereToMove = MoveNodeDialog.getSelectedObject(project.getProject(), target, new MoveNodeDialog.NodeFilter("Select class to move: refactoring can't be applied to selected node") {
      @Override
      public boolean check(SNode selectedObject, SNode nodeToMove, SModel modelOfSelectedObject) {
        return SNodeOperations.isInstanceOf(selectedObject, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier")) && !(ListSequence.fromList(SNodeOperations.getNodeAncestors(nodeToMove, null, false)).contains(selectedObject));
      }
    });

    if (whereToMove == null) {
      return;
    }
    ModelAccess.instance().runReadInEDT(new Runnable() {
      @Override
      public void run() {
        SNode node = ((SNode) target);
        if (!(SNodeUtil.isAccessible(node, MPSModuleRepository.getInstance()))) {
          return;
        }
        jetbrains.mps.smodel.SNode node1 = ((jetbrains.mps.smodel.SNode) whereToMove);
        if (!(SNodeUtil.isAccessible(node1, MPSModuleRepository.getInstance()))) {
          return;
        }

        runnable.run(whereToMove);
      }
    });
  }

}
