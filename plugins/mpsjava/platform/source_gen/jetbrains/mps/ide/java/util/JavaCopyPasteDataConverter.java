package jetbrains.mps.ide.java.util;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import jetbrains.mps.ide.datatransfer.CopyPasteUtil;
import jetbrains.mps.ide.MPSCoreComponents;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.datatransfer.TextPasteUtil;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.java.newparser.FeatureKind;
import jetbrains.mps.datatransfer.PasteNodeData;
import jetbrains.mps.ide.datatransfer.SNodeTransferable;

public class JavaCopyPasteDataConverter implements ApplicationComponent, CopyPasteUtil.IDataConverter {
  private static final int MIN_TEXT_LENGTH_TO_CONVERT = 100;

  public JavaCopyPasteDataConverter(MPSCoreComponents coreComponents) {
  }

  @Override
  public void initComponent() {
    CopyPasteUtil.setDataConverter(this);
  }

  @Override
  public void disposeComponent() {
    CopyPasteUtil.setDataConverter(null);
  }

  @NonNls
  @NotNull
  @Override
  public String getComponentName() {
    return "Java-specific CopyPaste Data Converter implementation";
  }

  @Override
  public boolean canPasteAsNodes(SModel model, SNode anchor) {
    String text = TextPasteUtil.getStringFromClipboard();
    return text != null && text.length() > MIN_TEXT_LENGTH_TO_CONVERT;
  }

  @Override
  public void pasteAsNodes(SModel model, SNode anchor, Project project) {
    String text = TextPasteUtil.getStringFromClipboard();
    if (text != null && text.length() > MIN_TEXT_LENGTH_TO_CONVERT) {
      new JavaPaster().pasteJavaAsNode(anchor, model, text, null, FeatureKind.STATEMENTS, project);
    }
  }

  @Override
  public PasteNodeData getPasteNodeData(SModel model, Project project) {
    // requires write action :( 
    String text = TextPasteUtil.getStringFromClipboard();
    if (text != null && text.length() > MIN_TEXT_LENGTH_TO_CONVERT) {
      SNodeTransferable transferable = new SNodeTransferable(JavaPaster.getStatementsFromJavaText(text, model, null, project), text);
      return transferable.createNodeData();
    }
    return null;
  }
}
