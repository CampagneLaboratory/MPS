package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.project.Project;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class GenerateGettersAndSetters_Action extends BaseAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(GenerateGettersAndSetters_Action.class);

  public GenerateGettersAndSetters_Action() {
    super("Getter and Setter", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    SNode classConcept = GenerateGettersAndSetters_Action.this.getClassConcept(_params);
    return classConcept != null && Sequence.fromIterable(GenerateGettersAndSetters_Action.this.getFieldDeclarationsWithoutGetterOrSetter(classConcept, _params)).isNotEmpty();
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "GenerateGettersAndSetters", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("node", event.getData(MPSCommonDataKeys.NODE));
    if (MapSequence.fromMap(_params).get("node") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("editorContext", event.getData(MPSEditorDataKeys.EDITOR_CONTEXT));
    if (MapSequence.fromMap(_params).get("editorContext") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      SNode classConcept = GenerateGettersAndSetters_Action.this.getClassConcept(_params);
      SNodePointer[] fields;
      fields = Sequence.fromIterable(GenerateGettersAndSetters_Action.this.getFieldDeclarationsWithoutGetterOrSetter(classConcept, _params)).select(new ISelector<SNode, SNodePointer>() {
        public SNodePointer select(SNode it) {
          return new SNodePointer(it);
        }
      }).toGenericArray(SNodePointer.class);

      SelectFieldsDialog selectFieldsDialog = new SelectFieldsDialog(fields, false, ((EditorContext) MapSequence.fromMap(_params).get("editorContext")).getOperationContext().getProject());
      selectFieldsDialog.setTitle("Select Fields to Generate Getters and Setters");
      selectFieldsDialog.show();

      if (!(selectFieldsDialog.isOK())) {
        return;
      }

      SNodePointer[] selectedFields = Sequence.fromIterable(((Iterable<SNodePointer>) selectFieldsDialog.getSelectedElements())).toGenericArray(SNodePointer.class);

      SNode lastAdded = null;
      Project project = ((EditorContext) MapSequence.fromMap(_params).get("editorContext")).getOperationContext().getProject();
      for (SNodePointer fieldPtr : selectedFields) {
        final SNode field = SNodeOperations.cast(fieldPtr.getNode(), "jetbrains.mps.baseLanguage.structure.FieldDeclaration");
        final String getterName = GenerateGettersAndSettersUtil.getFieldGetterName(field, project);
        SNode fieldReference = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference", null);
        SLinkOperations.setTarget(fieldReference, "variableDeclaration", field, false);
        ListSequence.fromList(SLinkOperations.getTargets(classConcept, "method", true)).addElement(new GenerateGettersAndSetters_Action.QuotationClass_lel3v6_a0a0e0o0a0e().createNode(SLinkOperations.getTarget(field, "type", true), fieldReference, getterName));

        final String setterName = GenerateGettersAndSettersUtil.getFieldSetterName(field, project);
        String parameterName = GenerateGettersAndSettersUtil.getParameterNameForField(field, project);
        lastAdded = ListSequence.fromList(SLinkOperations.getTargets(classConcept, "method", true)).addElement(new GenerateGettersAndSetters_Action.QuotationClass_lel3v6_a0a0a8a41a0a4().createNode(SNodeOperations.copyNode(fieldReference), SLinkOperations.getTarget(field, "type", true), parameterName, setterName));
      }
      if (lastAdded != null) {
        ((EditorContext) MapSequence.fromMap(_params).get("editorContext")).select(lastAdded);
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "GenerateGettersAndSetters", t);
    }
  }

  private SNode getClassConcept(final Map<String, Object> _params) {
    return SNodeOperations.getAncestor(((SNode) ((SNode) MapSequence.fromMap(_params).get("node"))), "jetbrains.mps.baseLanguage.structure.ClassConcept", true, false);
  }

  private Iterable<SNode> getFieldDeclarationsWithoutGetterOrSetter(final SNode classConcept, final Map<String, Object> _params) {
    final Project project = ((EditorContext) MapSequence.fromMap(_params).get("editorContext")).getOperationContext().getProject();
    return ListSequence.fromList(SLinkOperations.getTargets(classConcept, "field", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode field) {
        final String setterName = GenerateGettersAndSettersUtil.getFieldSetterName(field, project);
        final String getterName = GenerateGettersAndSettersUtil.getFieldGetterName(field, project);
        return !(ListSequence.fromList(SLinkOperations.getTargets(classConcept, "method", true)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode method) {
            return getterName.equals(SPropertyOperations.getString(method, "name")) && ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).isEmpty();
          }
        })) && !(ListSequence.fromList(SLinkOperations.getTargets(classConcept, "method", true)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode method) {
            return setterName.equals(SPropertyOperations.getString(method, "name")) && (int) ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).count() == 1;
          }
        }));
      }
    });
  }

  public static class QuotationClass_lel3v6_a0a0e0o0a0e {
    public QuotationClass_lel3v6_a0a0e0o0a0e() {
    }

    public SNode createNode(Object parameter_13, Object parameter_14, Object parameter_15) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_7 = quotedNode_1;
        quotedNode1_7.setProperty("name", (String) parameter_15);
        {
          quotedNode_2 = (SNode) parameter_13;
          SNode quotedNode1_8;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_8 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_8 = quotedNode_2;
          }
          if (quotedNode1_8 != null) {
            quotedNode_1.addChild("returnType", HUtil.copyIfNecessary(quotedNode1_8));
          }
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, GlobalScope.getInstance(), false);
          SNode quotedNode1_9 = quotedNode_3;
          quotedNode_1.addChild("visibility", quotedNode1_9);
        }
        {
          quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
          SNode quotedNode1_10 = quotedNode_4;
          {
            quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
            SNode quotedNode1_11 = quotedNode_5;
            {
              quotedNode_6 = (SNode) parameter_14;
              SNode quotedNode1_12;
              if (_parameterValues_129834374.contains(quotedNode_6)) {
                quotedNode1_12 = HUtil.copyIfNecessary(quotedNode_6);
              } else {
                _parameterValues_129834374.add(quotedNode_6);
                quotedNode1_12 = quotedNode_6;
              }
              if (quotedNode1_12 != null) {
                quotedNode_5.addChild("expression", HUtil.copyIfNecessary(quotedNode1_12));
              }
            }
            quotedNode_4.addChild("statement", quotedNode1_11);
          }
          quotedNode_1.addChild("body", quotedNode1_10);
        }
        result = quotedNode1_7;
      }
      return result;
    }
  }

  public static class QuotationClass_lel3v6_a0a0a8a41a0a4 {
    public QuotationClass_lel3v6_a0a0a8a41a0a4() {
    }

    public SNode createNode(Object parameter_21, Object parameter_22, Object parameter_23, Object parameter_24) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      SNode quotedNode_7 = null;
      SNode quotedNode_8 = null;
      SNode quotedNode_9 = null;
      SNode quotedNode_10 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_11 = quotedNode_1;
        quotedNode1_11.setProperty("name", (String) parameter_24);
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VoidType", null, null, GlobalScope.getInstance(), false);
          SNode quotedNode1_12 = quotedNode_2;
          quotedNode_1.addChild("returnType", quotedNode1_12);
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, GlobalScope.getInstance(), false);
          SNode quotedNode1_13 = quotedNode_3;
          quotedNode_1.addChild("visibility", quotedNode1_13);
        }
        {
          quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
          SNode quotedNode1_14 = quotedNode_4;
          {
            quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
            SNode quotedNode1_15 = quotedNode_6;
            {
              quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, GlobalScope.getInstance(), false);
              SNode quotedNode1_16 = quotedNode_8;
              {
                quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterReference", null, null, GlobalScope.getInstance(), false);
                SNode quotedNode1_17 = quotedNode_9;
                quotedNode_8.addChild("rValue", quotedNode1_17);
              }
              {
                quotedNode_10 = (SNode) parameter_21;
                SNode quotedNode1_18;
                if (_parameterValues_129834374.contains(quotedNode_10)) {
                  quotedNode1_18 = HUtil.copyIfNecessary(quotedNode_10);
                } else {
                  _parameterValues_129834374.add(quotedNode_10);
                  quotedNode1_18 = quotedNode_10;
                }
                if (quotedNode1_18 != null) {
                  quotedNode_8.addChild("lValue", HUtil.copyIfNecessary(quotedNode1_18));
                }
              }
              quotedNode_6.addChild("expression", quotedNode1_16);
            }
            quotedNode_4.addChild("statement", quotedNode1_15);
          }
          quotedNode_1.addChild("body", quotedNode1_14);
        }
        {
          quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null, null, GlobalScope.getInstance(), false);
          SNode quotedNode1_19 = quotedNode_5;
          quotedNode1_19.setProperty("name", (String) parameter_23);
          {
            quotedNode_7 = (SNode) parameter_22;
            SNode quotedNode1_20;
            if (_parameterValues_129834374.contains(quotedNode_7)) {
              quotedNode1_20 = HUtil.copyIfNecessary(quotedNode_7);
            } else {
              _parameterValues_129834374.add(quotedNode_7);
              quotedNode1_20 = quotedNode_7;
            }
            if (quotedNode1_20 != null) {
              quotedNode_5.addChild("type", HUtil.copyIfNecessary(quotedNode1_20));
            }
          }
          quotedNode_1.addChild("parameter", quotedNode1_19);
        }
        result = quotedNode1_11;
      }
      quotedNode_9.setReferenceTarget("variableDeclaration", quotedNode_5);
      return result;
    }
  }
}
