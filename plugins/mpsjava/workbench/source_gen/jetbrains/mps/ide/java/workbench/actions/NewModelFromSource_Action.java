package jetbrains.mps.ide.java.workbench.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Priority;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.project.MPSProject;
import javax.swing.JOptionPane;
import java.awt.Frame;
import jetbrains.mps.ide.ui.dialogs.properties.MPSPropertiesConfigurable;
import jetbrains.mps.ide.ui.dialogs.properties.ModulePropertiesConfigurable;
import com.intellij.openapi.options.ex.SingleConfigurableEditor;
import com.intellij.openapi.project.Project;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.dialogs.project.creation.NewModelDialog;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.ui.filechoosers.treefilechooser.TreeFileChooser;
import java.io.File;
import jetbrains.mps.ide.java.actions.ImportSourcesIntoModelUtils;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.ide.java.newparser.DirParser;
import jetbrains.mps.ide.java.newparser.JavaParseException;
import java.io.IOException;
import jetbrains.mps.ide.projectPane.ProjectPane;
import javax.swing.tree.TreeNode;
import jetbrains.mps.ide.StereotypeProvider;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class NewModelFromSource_Action extends BaseAction {
  private static final Icon ICON = null;

  public NewModelFromSource_Action() {
    super("Models from Java Sources", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (!(((SModule) MapSequence.fromMap(_params).get("module")) instanceof AbstractModule)) {
      return false;
    }

    String stereotype = NewModelFromSource_Action.this.getStereotype(_params);
    if (stereotype == null) {
      return true;
    }
    for (String availableStereotype : SModelStereotype.values) {
      if (stereotype.equals(availableStereotype)) {
        return true;
      }
    }
    return false;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "NewModelFromSource", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSCommonDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("ideaProject", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("ideaProject") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("module", event.getData(MPSCommonDataKeys.CONTEXT_MODULE));
    if (MapSequence.fromMap(_params).get("module") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("treeNode", event.getData(MPSCommonDataKeys.TREE_NODE));
    if (MapSequence.fromMap(_params).get("treeNode") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      ModelAccess modelAccess = ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
      if (!(((SModule) MapSequence.fromMap(_params).get("module")).getModelRoots().iterator().hasNext())) {
        int code = JOptionPane.showConfirmDialog(((Frame) MapSequence.fromMap(_params).get("frame")), "There are no model roots. Do you want to create one?", "", JOptionPane.YES_NO_OPTION);
        if (code == JOptionPane.YES_OPTION) {
          MPSPropertiesConfigurable configurable = new ModulePropertiesConfigurable(((SModule) MapSequence.fromMap(_params).get("module")), ((MPSProject) MapSequence.fromMap(_params).get("project")));
          final SingleConfigurableEditor configurableEditor = new SingleConfigurableEditor(((Project) MapSequence.fromMap(_params).get("ideaProject")), configurable, "#MPSPropertiesConfigurable");
          configurableEditor.show();
        }
        return;
      }
      if (!(((SModule) MapSequence.fromMap(_params).get("module")).getModelRoots().iterator().hasNext())) {
        JOptionPane.showMessageDialog(((Frame) MapSequence.fromMap(_params).get("frame")), "Can't create a model in solution with no model roots", "Can't create model", JOptionPane.ERROR_MESSAGE);
        return;
      }
      final Wrappers._T<NewModelDialog> dialog = new Wrappers._T<NewModelDialog>();
      modelAccess.runReadAction(new Runnable() {
        public void run() {
          String stereotype = NewModelFromSource_Action.this.getStereotype(_params);
          dialog.value = new NewModelDialog(((MPSProject) MapSequence.fromMap(_params).get("project")), (AbstractModule) ((SModule) MapSequence.fromMap(_params).get("module")), NewModelFromSource_Action.this.getNamespace(_params), stereotype, NewModelFromSource_Action.this.isStrict(_params));
        }
      });
      dialog.value.show();
      SModel result = dialog.value.getResult();
      if (result != null) {
        TreeFileChooser treeFileChooser = new TreeFileChooser();
        treeFileChooser.setDirectoriesAreAlwaysVisible(true);
        treeFileChooser.setMode(TreeFileChooser.MODE_DIRECTORIES);
        final SModel sModel = result;
        File initial = ImportSourcesIntoModelUtils.getInitialDirectoryForImport((AbstractModule) ((SModule) MapSequence.fromMap(_params).get("module")), SNodeOperations.getModelLongName(sModel));
        if (initial != null) {
          treeFileChooser.setInitialFile(FileSystem.getInstance().getFileByPath(initial.getAbsolutePath()));
        }
        IFile resultFile = treeFileChooser.showDialog(((Frame) MapSequence.fromMap(_params).get("frame")));
        if (resultFile != null) {
          final DirParser dirParser = new DirParser(((SModule) MapSequence.fromMap(_params).get("module")), ((MPSProject) MapSequence.fromMap(_params).get("project")), FileSystem.getInstance().getFileByPath(resultFile.getPath()));
          // we cannot take write action inside try, because it's implemented through 
          // ... Runnable() { void run() } 
          // Also I don't want to show error dialog while in write action 
          final Wrappers._T<JavaParseException> parseException = new Wrappers._T<JavaParseException>(null);
          modelAccess.runWriteAction(new Runnable() {
            public void run() {
              try {
                dirParser.parseDirs();
              } catch (JavaParseException e) {
                parseException.value = e;
              } catch (IOException e) {
                // FIXME 
                throw new RuntimeException(e);
              }
            }
          });
          if (parseException.value != null) {
            JOptionPane.showMessageDialog(((Frame) MapSequence.fromMap(_params).get("frame")), parseException.value.getMessage(), "Parse error", JOptionPane.ERROR_MESSAGE);
          }
        }
        SModel modelDescriptor = result;
        ProjectPane.getInstance(((MPSProject) MapSequence.fromMap(_params).get("project"))).selectModel(modelDescriptor, false);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "NewModelFromSource", t);
      }
    }
  }

  protected String getStereotype(final Map<String, Object> _params) {
    if (((TreeNode) MapSequence.fromMap(_params).get("treeNode")) instanceof StereotypeProvider) {
      return ((StereotypeProvider) ((TreeNode) MapSequence.fromMap(_params).get("treeNode"))).getStereotype();
    }
    return null;
  }

  protected boolean isStrict(final Map<String, Object> _params) {
    if (((TreeNode) MapSequence.fromMap(_params).get("treeNode")) instanceof StereotypeProvider) {
      return ((StereotypeProvider) ((TreeNode) MapSequence.fromMap(_params).get("treeNode"))).isStrict();
    }
    return false;
  }

  protected String getNamespace(final Map<String, Object> _params) {
    return null;
  }

  protected static Logger LOG = LogManager.getLogger(NewModelFromSource_Action.class);
}
