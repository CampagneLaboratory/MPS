package jetbrains.mps.ide.java.sourceStubs;

/*Generated by MPS */

import jetbrains.mps.extapi.persistence.ModelRootBase;
import jetbrains.mps.vfs.FileSystemListener;
import jetbrains.mps.logging.Logger;
import org.jetbrains.annotations.NotNull;
import java.util.Set;
import org.jetbrains.mps.openapi.persistence.MultiStreamDataSource;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.vfs.FileSystem;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SModelId;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.persistence.Memento;
import jetbrains.mps.progress.ProgressMonitor;

public class JavaSourceStubModelRoot extends ModelRootBase implements FileSystemListener {

  private static Logger LOG = Logger.getLogger(JavaSourceStubModelRoot.class);

  @NotNull
  private String myPath = "";
  private Set<MultiStreamDataSource> myDataSources = SetSequence.fromSet(new HashSet<MultiStreamDataSource>());


  public JavaSourceStubModelRoot() {
  }

  @Override
  public boolean equals(Object o) {
    if (o == null) {
      return false;
    }
    if (!(this.getClass().equals(o.getClass()))) {
      return false;
    }
    return myPath.equals(((JavaSourceStubModelRoot) o).myPath);
  }

  @Override
  public int hashCode() {
    return myPath.hashCode();
  }

  @Override
  public String getType() {
    return "java_source_stubs";
  }



  @Override
  public String getPresentation() {
    return myPath + "(java source stubs)";
  }



  @Override
  public void attach() {
    super.attach();
    FileSystem.getInstance().addListener(this);
  }



  @Override
  public void dispose() {
    FileSystem.getInstance().removeListener(this);
    super.dispose();
  }

  @Override
  public SModel getModel(SModelId id) {
    // TODO 
    return null;
  }

  protected MultiStreamDataSource newDataSource(IFile dir) {
    return new MPSJavaSrcDataSource(dir, this);
  }

  @Override
  public Iterable<SModel> loadModels() {
    IFile path = FileSystem.getInstance().getFileByPath(myPath);
    Set<SModel> models = getModels(path, "");
    // TODO this is probably wrong... models should be registered elsewhere 
    SetSequence.fromSet(models).visitAll(new IVisitor<SModel>() {
      public void visit(SModel it) {
        register(it);
      }
    });
    return models;
  }



  private Set<SModel> getModels(IFile dir, String pkg) {

    Set<SModel> models = SetSequence.fromSet(new HashSet<SModel>());

    MultiStreamDataSource dataSource = newDataSource(dir);
    boolean thereAreJavaFiles = dataSource.getAvailableStreams().iterator().hasNext();

    if (thereAreJavaFiles) {

      SModelFqName fqName = new SModelFqName(pkg, "java_stub");
      SModelId modelId = jetbrains.mps.smodel.SModelId.foreign(fqName.getStereotype(), getModule().getModuleId().toString(), fqName.getLongName());

      SModelReference modelRef = new SModelReference(fqName, modelId);

      JavaSourceStubModelDescriptor model = new JavaSourceStubModelDescriptor(modelRef, dataSource, pkg);
      SetSequence.fromSet(models).addElement(model);

      SetSequence.fromSet(myDataSources).addElement(dataSource);
    }

    // should be one line: dir.getChildren().where cannot be entered... 
    Iterable<IFile> children = dir.getChildren();
    Iterable<IFile> subDirs = Sequence.fromIterable(children).where(new IWhereFilter<IFile>() {
      public boolean accept(IFile it) {
        return it.isDirectory();
      }
    });

    for (IFile subDir : Sequence.fromIterable(subDirs)) {
      String subPkg = (pkg.equals("") ?
        subDir.getName() :
        pkg + "." + subDir.getName()
      );
      Set<SModel> set = getModels(subDir, subPkg);
      SetSequence.fromSet(models).addSequence(SetSequence.fromSet(set));
    }

    return models;
  }



  @Override
  public boolean canCreateModel(String string) {
    return false;
  }



  @Override
  public SModel createModel(String string) {
    return null;
  }



  @Override
  public void save(Memento memento) {
    memento.put("path", myPath);
  }



  @Override
  public void load(Memento memento) {
    myPath = memento.get("path");
  }



  public String getPath() {
    return myPath;
  }



  public void setPath(String path) {
    myPath = path;
  }




  @Override
  public IFile getFileToListen() {
    return FileSystem.getInstance().getFileByPath(myPath);
  }

  @Override
  public Iterable<FileSystemListener> getListenerDependencies() {
    // <node> 
    return null;
  }

  @Override
  public void update(ProgressMonitor monitor, FileSystemListener.FileSystemEvent event) {
    LOG.info("HEY!!! FS CHANGED !!!");
  }
}
