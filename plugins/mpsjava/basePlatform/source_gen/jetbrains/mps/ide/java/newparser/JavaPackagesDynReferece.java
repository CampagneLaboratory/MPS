package jetbrains.mps.ide.java.newparser;

/*Generated by MPS */

import jetbrains.mps.smodel.DynamicReference;
import java.util.List;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Iterator;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IMapping;

public class JavaPackagesDynReferece extends DynamicReference {
  private List<String> myPackages;
  private Map<String, Integer> myPkgOrder;

  public JavaPackagesDynReferece(String role, SNode source, String resolveInfo, List<String> packages) {
    super(role, source, null, resolveInfo);
    myPackages = packages;
    myPkgOrder = MapSequence.fromMap(new HashMap<String, Integer>(ListSequence.fromList(myPackages).count()));
    int k = 0;
    {
      Iterator<String> p_it = ListSequence.fromList(myPackages).iterator();
      String p_var;
      while (p_it.hasNext()) {
        p_var = p_it.next();
        MapSequence.fromMap(myPkgOrder).put(p_var, k++);
      }
    }
  }

  protected SNode getTargetNode_internal(boolean silently) {
    String name = getResolveInfo();

    Map<String, SModel> suitableModels = MapSequence.fromMap(new HashMap<String, SModel>());

    SModel ourModel = getSourceNode().getModel().getModelDescriptor();
    SModule ourModule = SModelRepository.getInstance().getOwner(ourModel);

    {
      Iterator<SModel> model_it = Sequence.fromIterable(ourModule.getModuleScope().getModels()).iterator();
      SModel model_var;
      while (model_it.hasNext()) {
        model_var = model_it.next();
        String modelName = model_var.getModelName();
        int atSign = modelName.lastIndexOf('@');
        if (atSign > 0) {
          modelName = modelName.substring(0, atSign);
        }
        if (MapSequence.fromMap(myPkgOrder).get(modelName) != null) {
          MapSequence.fromMap(suitableModels).put(modelName, model_var);
        }
      }
    }

    Iterable<SModel> suitableModelz = MapSequence.fromMap(suitableModels).sort(new ISelector<IMapping<String, SModel>, Integer>() {
      public Integer select(IMapping<String, SModel> it) {
        return MapSequence.fromMap(myPkgOrder).get(it.key());
      }
    }, true).select(new ISelector<IMapping<String, SModel>, SModel>() {
      public SModel select(IMapping<String, SModel> it) {
        return it.value();
      }
    });

    {
      Iterator<SModel> model_it = Sequence.fromIterable(suitableModelz).iterator();
      SModel model_var;
      while (model_it.hasNext()) {
        model_var = model_it.next();
        for (SNode n : Sequence.fromIterable(model_var.getRootNodes())) {
          if (name.equals(n.getName())) {
            // <node> 
            return (SNode) n;
          }
        }
      }
    }

    return null;
  }
}
