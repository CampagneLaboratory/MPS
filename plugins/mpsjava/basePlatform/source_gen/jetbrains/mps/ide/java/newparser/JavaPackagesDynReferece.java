package jetbrains.mps.ide.java.newparser;

/*Generated by MPS */

import jetbrains.mps.smodel.DynamicReference;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class JavaPackagesDynReferece extends DynamicReference {
  private List<String> myPackages;

  public JavaPackagesDynReferece(String role, SNode source, String resolveInfo, List<String> packages) {
    super(role, source, null, resolveInfo);
    myPackages = packages;
  }

  protected SNode getTargetNode_internal(boolean silently) {
    String name = getResolveInfo();
    for (String pkg : ListSequence.fromList(myPackages)) {
      List<SModelDescriptor> descs = SModelRepository.getInstance().getModelDescriptorsByModelName(pkg);
      if (descs == null || ListSequence.fromList(descs).count() != 1) {
        continue;
      }
      SModel mdl = ListSequence.fromList(descs).getElement(0).getSModel();

      for (SNode n : ListSequence.fromList(SModelOperations.getRoots(mdl, null))) {
        if (name.equals(n.getName())) {
          return n;
        }
      }
    }

    return null;
  }
}
