package jetbrains.mps.ide.java.newparser;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.ModelAccess;
import java.util.Map;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import java.io.IOException;
import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.extapi.model.SModelBase;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.DynamicReference;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.vfs.IFileUtils;
import java.util.HashSet;
import javax.swing.SwingUtilities;
import java.lang.reflect.InvocationTargetException;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.StaticReference;
import jetbrains.mps.internal.collections.runtime.backports.Deque;
import jetbrains.mps.internal.collections.runtime.DequeSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.smodel.SModelRepository;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import org.jetbrains.mps.openapi.persistence.ModelFactory;
import jetbrains.mps.persistence.PersistenceRegistry;
import jetbrains.mps.project.SModuleOperations;
import org.jetbrains.mps.openapi.model.EditableSModel;
import org.jetbrains.annotations.Nullable;

public class MultipleFilesParser {
  private static final Logger LOG = LogManager.getLogger(MultipleFilesParser.class);

  private SModule myModule;
  private SModel myModel;
  private boolean myPerRoot;
  private SRepository myRepository;
  private ModelAccess myModelAccess;


  private JavaParser myJavaParser = new JavaParser();
  private Map<String, Set<SNode>> classesPerPackage = MapSequence.fromMap(new HashMap<String, Set<SNode>>());
  private Map<String, List<IFile>> filesPerPackage = MapSequence.fromMap(new HashMap<String, List<IFile>>());
  private List<SModel> myModels = ListSequence.fromList(new ArrayList<SModel>());
  private List<SNode> myRoots = ListSequence.fromList(new ArrayList<SNode>());
  private List<SNode> myAttachedRoots = ListSequence.fromList(new ArrayList<SNode>());
  private List<IFile> mySuccessfulFiles = ListSequence.fromList(new ArrayList<IFile>());

  private boolean wasDefaultPkg = false;
  private int myRootCount = 0;


  public MultipleFilesParser(SModule module, SRepository repository) {
    this(module, repository, false);
  }



  public MultipleFilesParser(SModule module, SRepository repository, boolean perRoot) {
    myModule = module;
    myPerRoot = perRoot;
    myRepository = repository;
    myModelAccess = repository.getModelAccess();
  }



  public MultipleFilesParser(SModel model, SRepository repository) {
    myModel = model;
    myRepository = repository;
    myModelAccess = repository.getModelAccess();
  }



  public void convertToMps(final List<IFile> files, ProgressMonitor progress) throws JavaParseException, IOException {

    progress.start("Converting...", 31);

    // first we build AST 
    final ProgressMonitor parseProgress = progress.subTask(1);
    parseProgress.start("Parsing...", ListSequence.fromList(files).count());

    // read action needed only because java parser does new node<Concept> 

    myModelAccess.runReadAction(new Runnable() {
      public void run() {
        for (IFile file : ListSequence.fromList(files)) {
          try {
            parseFile(file);
            parseProgress.advance(1);

          } catch (JavaParseException e) {
          } catch (IOException e) {
          }
        }
      }
    });

    parseProgress.done();


    int rootCount = 0;

    // now we attach the models and try to resolve      

    runCommand("roots creation pass", new Runnable() {
      public void run() {

        if (myModel == null) {
          ((AbstractModule) myModule).addDependency(PersistenceFacade.getInstance().createModuleReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065(JDK)"), false);

          for (String pakage : SetSequence.fromSet(MapSequence.fromMap(classesPerPackage).keySet())) {
            final SModel model = registerModelForPackage(pakage);
            if (model == null) {
              continue;
            }

            ((SModelBase) model).addLanguage(PersistenceFacade.getInstance().createModuleReference("f3061a53-9226-4cc5-a443-f952ceaf5816(jetbrains.mps.baseLanguage)"));

            Set<SNode> roots = MapSequence.fromMap(classesPerPackage).get(pakage);
            SetSequence.fromSet(roots).visitAll(new IVisitor<SNode>() {
              public void visit(SNode it) {
                model.addRootNode(it);
              }
            });

            ListSequence.fromList(mySuccessfulFiles).addSequence(ListSequence.fromList(MapSequence.fromMap(filesPerPackage).get(pakage)));
            ListSequence.fromList(myAttachedRoots).addSequence(SetSequence.fromSet(roots));

            ListSequence.fromList(myModels).addElement(model);
          }

        } else {
          // todo maybe do something clever with packages <-> java imports 
          // with regard to model where we put it all 
          for (SNode root : ListSequence.fromList(myRoots)) {
            // todo be more accurate with duplicates 
            myModel.addRootNode(root);
          }
          myAttachedRoots = myRoots;
        }

        ((AbstractModule) myModule).addUsedLanguage(PersistenceFacade.getInstance().createModuleReference("f3061a53-9226-4cc5-a443-f952ceaf5816(jetbrains.mps.baseLanguage)"));

        JavaParser.tryResolveUnknowns(myAttachedRoots);

      }
    });

    myRootCount = myAttachedRoots.size();

    ProgressMonitor resolveProgress = progress.subTask(30);
    tryResolveRefs(myAttachedRoots, FeatureKind.CLASS, resolveProgress);
    progress.done();
  }



  public void tryResolveRefs(Iterable<SNode> nodes, FeatureKind level, ProgressMonitor progress) {
    progress.start("Resolving...", 10);

    if (FeatureKind.CLASS.equals(level)) {
      resolveUpdatePass("top level references", nodes, new _FunctionTypes._return_P1_E0<Iterable<SReference>, SNode>() {
        public Iterable<SReference> invoke(SNode node) {
          return getTopLevelRefs(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Classifier"));
        }
      }, progress.subTask(1));
    }

    if (FeatureKind.CLASS_CONTENT.equals(level) || FeatureKind.CLASS.equals(level)) {
      resolveUpdatePass("field/method type references", nodes, new _FunctionTypes._return_P1_E0<Iterable<SReference>, SNode>() {
        public Iterable<SReference> invoke(SNode node) {
          return getFieldAndMethodTypeRefs(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"));
        }
      }, progress.subTask(1));
    }

    resolveUpdatePass("type references", nodes, new _FunctionTypes._return_P1_E0<Iterable<SReference>, SNode>() {
      public Iterable<SReference> invoke(SNode node) {
        return getVarTypeRefs(node);
      }
    }, progress.subTask(1));

    resolveUpdatePass("variable references", nodes, new _FunctionTypes._return_P1_E0<Iterable<SReference>, SNode>() {
      public Iterable<SReference> invoke(SNode node) {
        return getVariableRefs(node);
      }
    }, progress.subTask(1));

    resolveUpdatePass("dot operands", nodes, new _FunctionTypes._return_P1_E0<ISequence<SReference>, SNode>() {
      public ISequence<SReference> invoke(SNode node) {
        return ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.DotExpression", false, new String[]{})).translate(new ITranslator2<SNode, SReference>() {
          public Iterable<SReference> translate(SNode it) {
            return deepReferences(SLinkOperations.getTarget(it, "operand", true));
          }
        });
      }
    }, progress.subTask(1));

    resolveUpdatePass("dot operations", nodes, new _FunctionTypes._return_P1_E0<ISequence<SReference>, SNode>() {
      public ISequence<SReference> invoke(SNode node) {
        return ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.DotExpression", false, new String[]{})).translate(new ITranslator2<SNode, SReference>() {
          public Iterable<SReference> translate(SNode it) {
            if (Sequence.fromIterable(deepReferences(SLinkOperations.getTarget(it, "operand", true))).any(new IWhereFilter<SReference>() {
              public boolean accept(SReference it) {
                return (SReference) it instanceof DynamicReference;
              }
            })) {
              return ListSequence.fromList(new ArrayList<SReference>());
            } else {
              if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "operation", true), "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")) {
                return Sequence.<SReference>singleton(SNodeOperations.getReference(SNodeOperations.cast(SLinkOperations.getTarget(it, "operation", true), "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"), SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", "fieldDeclaration")));
              } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "operation", true), "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
                return Sequence.<SReference>singleton(SNodeOperations.getReference(SNodeOperations.cast(SLinkOperations.getTarget(it, "operation", true), "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"), SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", "instanceMethodDeclaration")));
              } else {
                return ListSequence.fromList(new ArrayList<SReference>());
              }
            }
          }
        });
      }
    }, progress.subTask(1));

    resolveUpdatePass("classifiers in static access", nodes, new _FunctionTypes._return_P1_E0<List<SReference>, SNode>() {
      public List<SReference> invoke(SNode node) {
        List<SReference> result = ListSequence.fromList(new ArrayList<SReference>());

        ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.StaticMethodCall", false, new String[]{})).select(new ISelector<SNode, SReference>() {
          public SReference select(SNode it) {
            return SNodeOperations.getReference(it, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", "classConcept"));
          }
        }));
        ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.StaticFieldReference", false, new String[]{})).select(new ISelector<SNode, SReference>() {
          public SReference select(SNode it) {
            return SNodeOperations.getReference(it, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldReference", "classifier"));
          }
        }));

        return result;
      }
    }, progress.subTask(1));

    resolveUpdatePass("static member references", nodes, new _FunctionTypes._return_P1_E0<List<SReference>, SNode>() {
      public List<SReference> invoke(SNode node) {
        List<SReference> result = ListSequence.fromList(new ArrayList<SReference>());

        ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.StaticMethodCall", false, new String[]{})).select(new ISelector<SNode, SReference>() {
          public SReference select(SNode it) {
            return SNodeOperations.getReference(it, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", "staticMethodDeclaration"));
          }
        }));
        ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.StaticFieldReference", false, new String[]{})).select(new ISelector<SNode, SReference>() {
          public SReference select(SNode it) {
            return SNodeOperations.getReference(it, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldReference", "staticFieldDeclaration"));
          }
        }));

        return result;
      }
    }, progress.subTask(1));

    resolveUpdatePass("remaining references", nodes, new _FunctionTypes._return_P1_E0<Iterable<SReference>, SNode>() {
      public Iterable<SReference> invoke(SNode node) {
        return deepReferences(node);
      }
    }, progress.subTask(1));

    codeTransformPass(nodes, progress.subTask(1));

    removeJavaImportsPass(nodes, progress.subTask(1));

    progress.done();
  }



  public List<IFile> getSuccessfulFiles() {
    return mySuccessfulFiles;
  }



  public List<SModel> getModels() {
    return myModels;
  }



  private void parseFile(IFile file) throws JavaParseException, IOException {
    String contents = IFileUtils.getTextContents(file);
    JavaParser.JavaParseResult parseResult = myJavaParser.parseCompilationUnit(contents);
    String pkg = parseResult.getPackage();

    if (pkg == null) {
      // default package (i.e. none), bad 
      if (!(wasDefaultPkg)) {
        LOG.error("default package is not supported in java source directory input (first such file in dir: " + file.getName() + ")");
        wasDefaultPkg = true;
      }
      return;
    }

    IFile dir = file.getParent();
    if (!(DirParser.checkPackageMatchesSourceDirectory(pkg, dir))) {
      LOG.error("package " + pkg + " doesn't match directory " + dir.getPath() + " (in file " + file.getName() + ")");
      return;
    }

    Iterable<SNode> roots = parseResult.getNodes();

    Set<SNode> classesInPackage = MapSequence.fromMap(classesPerPackage).get(pkg);
    if (classesInPackage == null) {
      classesInPackage = SetSequence.fromSet(new HashSet<SNode>(Sequence.fromIterable(roots).count()));
      MapSequence.fromMap(classesPerPackage).put(pkg, classesInPackage);
    }
    SetSequence.fromSet(classesInPackage).addSequence(Sequence.fromIterable(roots));

    List<IFile> files = MapSequence.fromMap(filesPerPackage).get(pkg);
    if (files == null) {
      files = ListSequence.fromList(new ArrayList<IFile>());
      MapSequence.fromMap(filesPerPackage).put(pkg, files);
    }
    ListSequence.fromList(files).addElement(file);

    ListSequence.fromList(myRoots).addSequence(Sequence.fromIterable(roots));
    myRootCount += Sequence.fromIterable(roots).count();

  }



  private void runCommand(String name, final Runnable runnable) {
    if (SwingUtilities.isEventDispatchThread()) {
      myModelAccess.executeCommand(runnable);

    } else {
      try {
        SwingUtilities.invokeAndWait(new Runnable() {
          public void run() {
            myModelAccess.executeCommand(runnable);
          }
        });

      } catch (InterruptedException e) {
        LOG.error(name + " was interrupted", e);
      } catch (InvocationTargetException e) {
        LOG.error("Exception in " + name, e.getCause());
      }
    }
  }


  private Set<SReference> myVisitedRefs = SetSequence.fromSet(new HashSet<SReference>());


  private void resolveUpdatePass(String name, final Iterable<SNode> nodes, final _FunctionTypes._return_P1_E0<? extends Iterable<SReference>, ? super SNode> extractor, final ProgressMonitor progress) {
    final Map<SNodeReference, List<SReference>> resolveMap = MapSequence.fromMap(new HashMap<SNodeReference, List<SReference>>());
    progress.start(name, Sequence.fromIterable(nodes).count() + 1);

    myModelAccess.runReadAction(new Runnable() {
      public void run() {

        for (SNode node : Sequence.fromIterable(nodes)) {

          if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.INamedConcept")) {
            progress.step("class: " + SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name"));
          }

          Iterable<SReference> refs = extractor.invoke(node);
          resolveRefs(refs, resolveMap);

          SetSequence.fromSet(myVisitedRefs).addSequence(Sequence.fromIterable(refs));
          progress.advance(1);
        }

      }
    });

    progress.step("updating references...");

    runCommand(name, new Runnable() {
      public void run() {
        updateReference(resolveMap);
      }
    });

    progress.advance(1);
    progress.done();
  }



  private void codeTransformPass(final Iterable<SNode> nodes, final ProgressMonitor progress) {
    progress.start("Code transforms", Sequence.fromIterable(nodes).count() * 4 + 1);
    final TypeChecker typeChecker = TypeChecker.getInstance();

    // all this can be replaced by one map old -> new 
    final List<SNode> toReplaceWithArrayLength = ListSequence.fromList(new ArrayList<SNode>());
    final Map<SNode, SNode> enumConstRefs = MapSequence.fromMap(new HashMap<SNode, SNode>());
    final Map<SNode, SNode> staticMethodQualifiers = MapSequence.fromMap(new HashMap<SNode, SNode>());
    final Map<SNode, SNode> staticFieldQualifiers = MapSequence.fromMap(new HashMap<SNode, SNode>());

    myModelAccess.runReadAction(new Runnable() {
      public void run() {
        for (SNode node : Sequence.fromIterable(nodes)) {

          for (SNode fieldRefOp : ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", false, new String[]{}))) {

            SReference fieldRef = SNodeOperations.getReference(fieldRefOp, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", "fieldDeclaration"));
            if (!(fieldRef instanceof DynamicReference && "length".equals((((DynamicReference) fieldRef).getResolveInfo())))) {
              continue;
            }

            SNode operand = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(fieldRefOp), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true);

            Iterable<SReference> operandRefs = SNodeOperations.getReferences(operand);
            if (Sequence.fromIterable(operandRefs).any(new IWhereFilter<SReference>() {
              public boolean accept(SReference it) {
                return it instanceof DynamicReference;
              }
            })) {
              continue;
            }

            SNode operandType = typeChecker.getTypeOf(operand);
            if (SNodeOperations.isInstanceOf(operandType, "jetbrains.mps.baseLanguage.structure.ArrayType")) {
              ListSequence.fromList(toReplaceWithArrayLength).addElement(fieldRefOp);
            }
          }

          progress.advance(1);

          for (SNode localCall : ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.LocalMethodCall", false, new String[]{}))) {
            SNode smc = transformLocalCall(localCall);
            if ((smc == null)) {
              continue;
            }
            MapSequence.fromMap(staticMethodQualifiers).put(localCall, smc);
          }

          progress.advance(1);

          TypeChecker typeChecker = TypeChecker.getInstance();

          for (SNode swicthCase : ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.SwitchCase", false, new String[]{}))) {
            SNode subst = transformUnqualifedEnumUnderSwitch(swicthCase, typeChecker);
            if ((subst == null)) {
              continue;
            }
            MapSequence.fromMap(enumConstRefs).put(SNodeOperations.cast(SLinkOperations.getTarget(swicthCase, "expression", true), "jetbrains.mps.baseLanguage.structure.VariableReference"), subst);
          }


          progress.advance(1);

          for (SNode varRef : ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.VariableReference", false, new String[]{}))) {
            SNode exp = transformLocalNameRef(varRef);
            if ((exp != null)) {
              MapSequence.fromMap(staticFieldQualifiers).put(varRef, exp);
              continue;
            }

            SNode subst = transformUnqualifedEnum(varRef);
            if ((subst == null)) {
              continue;
            }
            MapSequence.fromMap(enumConstRefs).put(varRef, subst);
          }

          progress.advance(1);
        }

      }
    });

    progress.step("updating models...");

    runCommand("Code transforms", new Runnable() {
      public void run() {
        for (SNode fieldRefOp : ListSequence.fromList(toReplaceWithArrayLength)) {
          SNodeOperations.replaceWithNewChild(fieldRefOp, "jetbrains.mps.baseLanguage.structure.ArrayLengthOperation");
        }
        for (IMapping<SNode, SNode> pair : MapSequence.fromMap(enumConstRefs)) {
          SNodeOperations.replaceWithAnother(pair.key(), pair.value());
        }
        for (IMapping<SNode, SNode> pair : MapSequence.fromMap(staticMethodQualifiers)) {
          SNodeOperations.replaceWithAnother(pair.key(), pair.value());
        }
        for (IMapping<SNode, SNode> pair : MapSequence.fromMap(staticFieldQualifiers)) {
          SNodeOperations.replaceWithAnother(pair.key(), pair.value());
        }

      }
    });

    progress.advance(1);
    progress.done();
  }



  private void removeJavaImportsPass(final Iterable<SNode> nodes, final ProgressMonitor progress) {
    progress.start("Removing java imports", Sequence.fromIterable(nodes).count() + 1);
    final Map<SNode, Iterable<SNode>> toRemove = MapSequence.fromMap(new HashMap<SNode, Iterable<SNode>>());

    myRepository.getModelAccess().runReadAction(new Runnable() {
      public void run() {

        for (SNode node : Sequence.fromIterable(nodes)) {
          progress.advance(1);

          if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
            continue;
          }
          if ((AttributeOperations.getAttribute(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Classifier"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.JavaImports"))) == null)) {
            continue;
          }

          MapSequence.fromMap(toRemove).put(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Classifier"), getImportsToRemove(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Classifier")));
        }
      }
    });

    runCommand("removing java imports", new Runnable() {
      public void run() {
        for (SNode node : SetSequence.fromSet(MapSequence.fromMap(toRemove).keySet())) {
          Iterable<SNode> imps = MapSequence.fromMap(toRemove).get(node);
          Sequence.fromIterable(imps).visitAll(new IVisitor<SNode>() {
            public void visit(SNode it) {
              SNodeOperations.deleteNode(it);
            }
          });

          SNode importAnnotation = AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.JavaImports")));
          if (ListSequence.fromList(SLinkOperations.getTargets(importAnnotation, "entries", true)).isEmpty()) {
            SNodeOperations.deleteNode(importAnnotation);
          }
        }
      }
    });

    progress.advance(1);
    progress.done();

  }



  private SNode transformUnqualifedEnum(SNode varRef) {
    // FIXME share or re-use code with the corresponding NonTypesystemRule 

    if (!(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(varRef), "jetbrains.mps.baseLanguage.structure.VariableReference"))) {
      return null;
    }
    SReference ref = SNodeOperations.getReference(varRef, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", "variableDeclaration"));
    if (!(ref instanceof DynamicReference)) {
      return null;
    }

    if (ref.getTargetNode() != null) {
      return null;
    }

    SNode root = SNodeOperations.getContainingRoot(varRef);
    if (!(SNodeOperations.isInstanceOf(root, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
      return null;
    }
    SNode javaImports = AttributeOperations.getAttribute(SNodeOperations.cast(root, "jetbrains.mps.baseLanguage.structure.Classifier"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.JavaImports")));
    if ((javaImports == null)) {
      return null;
    }

    // now we can try to search 
    SNode gateway = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IYetUnresolved", null);

    final String enumConstName = ((DynamicReference) ref).getResolveInfo();
    for (SNode singleNameImport : Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>) ((Class) Object.class), javaImports, "jetbrains.mps.baseLanguage.structure.JavaImports", "call_staticSingleName_5230012391903395274", new Object[]{}))) {
      if (!(enumConstName.equals(BehaviorReflection.invokeNonVirtual(String.class, singleNameImport, "jetbrains.mps.baseLanguage.structure.Tokens", "call_lastToken_1296023605440030462", new Object[]{})))) {
        continue;
      }

      String enumClassCandidateName = BehaviorReflection.invokeNonVirtual(String.class, singleNameImport, "jetbrains.mps.baseLanguage.structure.Tokens", "call_withoutLastToken_6148840541591441572", new Object[]{});
      SNode enumClassCandidate = BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), gateway, "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "call_findClass_5230012391932867419", new Object[]{varRef, enumClassCandidateName});
      if ((enumClassCandidate == null)) {
        // seems like there is no need to continue 
        // we had import of the form: import static <class>.<ourName> 
        // if we meet <ourName> in java code then it must strictly reference this import, not any other 
        return null;
      }
      if (!(SNodeOperations.isInstanceOf(enumClassCandidate, "jetbrains.mps.baseLanguage.structure.EnumClass"))) {
        return null;
      }

      // Q: maybe not findFirst, but rather fail if there are more than one... 
      SNode enumConst = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(enumClassCandidate, "jetbrains.mps.baseLanguage.structure.EnumClass"), "enumConstant", true)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return enumConstName.equals(SPropertyOperations.getString(it, "name"));
        }
      });

      if ((enumConst == null)) {
        return null;
      }

      // success 
      SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumConstantReference", null);
      SLinkOperations.setTarget(result, "enumClass", SNodeOperations.cast(enumClassCandidate, "jetbrains.mps.baseLanguage.structure.EnumClass"), false);
      SLinkOperations.setTarget(result, "enumConstantDeclaration", enumConst, false);

      return result;
    }

    for (SNode onDemandImport : Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>) ((Class) Object.class), javaImports, "jetbrains.mps.baseLanguage.structure.JavaImports", "call_staticOnDemand_5230012391903366883", new Object[]{}))) {
      SNode claz = BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), gateway, "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "call_findClass_5230012391932867419", new Object[]{varRef, SPropertyOperations.getString(onDemandImport, "tokens")});
      if ((claz == null)) {
        continue;
      }
      if (!(SNodeOperations.isInstanceOf(claz, "jetbrains.mps.baseLanguage.structure.EnumClass"))) {
        continue;
      }

      SNode enumConst = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(claz, "jetbrains.mps.baseLanguage.structure.EnumClass"), "enumConstant", true)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return enumConstName.equals(SPropertyOperations.getString(it, "name"));
        }
      });
      if ((enumConst == null)) {
        continue;
      }

      SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumConstantReference", null);
      SLinkOperations.setTarget(result, "enumClass", SNodeOperations.cast(claz, "jetbrains.mps.baseLanguage.structure.EnumClass"), false);
      SLinkOperations.setTarget(result, "enumConstantDeclaration", enumConst, false);

      return result;
    }

    return null;
  }



  private SNode transformUnqualifedEnumUnderSwitch(SNode switchCase, TypeChecker typeChecker) {
    // FIXME share or re-use code with the corresponding NonTypesystemRule 

    SNode caseExp = SLinkOperations.getTarget(switchCase, "expression", true);
    if (!(SNodeOperations.isInstanceOf(caseExp, "jetbrains.mps.baseLanguage.structure.VariableReference"))) {
      return null;
    }
    SReference ref = SNodeOperations.getReference(SNodeOperations.cast(caseExp, "jetbrains.mps.baseLanguage.structure.VariableReference"), SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", "variableDeclaration"));
    if (!(ref instanceof DynamicReference)) {
      return null;
    }

    final String enumConstName = ((DynamicReference) ref).getResolveInfo();

    SNode scrutenee = SLinkOperations.getTarget(SNodeOperations.getAncestor(caseExp, "jetbrains.mps.baseLanguage.structure.SwitchStatement", false, false), "expression", true);
    if ((scrutenee == null)) {
      return null;
    }

    SNode scruteneeType = typeChecker.getTypeOf(scrutenee);
    if (!(SNodeOperations.isInstanceOf(scruteneeType, "jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
      return null;
    }

    SNode claz = SLinkOperations.getTarget(SNodeOperations.cast(scruteneeType, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false);
    if (!(SNodeOperations.isInstanceOf(claz, "jetbrains.mps.baseLanguage.structure.EnumClass"))) {
      return null;
    }

    SNode enumConst = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(claz, "jetbrains.mps.baseLanguage.structure.EnumClass"), "enumConstant", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals(enumConstName);
      }
    });
    SNode enumConstRef = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumConstantReference", null);
    SLinkOperations.setTarget(enumConstRef, "enumClass", SNodeOperations.cast(claz, "jetbrains.mps.baseLanguage.structure.EnumClass"), false);
    SLinkOperations.setTarget(enumConstRef, "enumConstantDeclaration", enumConst, false);

    return enumConstRef;
  }




  private SNode transformLocalCall(SNode localCall) {
    // FIXME share or re-use code with the corresponding NonTypesystemRule 

    SReference ref = SNodeOperations.getReference(localCall, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.LocalMethodCall", "method"));
    if (!(ref instanceof StaticReference)) {
      return null;
    }
    SNode target = ref.getTargetNode();
    if (!(SNodeOperations.isInstanceOf(target, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"))) {
      return null;
    }

    // now check whether it's in another class 
    SNode thisClass = SNodeOperations.getAncestor(localCall, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
    SNode thatClass = SNodeOperations.getAncestor(target, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
    // it should be ok to use ==, I think 
    if (thisClass == thatClass) {
      // same class, such local method call is ok in baseLanguage 
      return null;
    }

    // different class, let's make this call non-local, but qualified 
    SNode smc = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null);
    SLinkOperations.setTarget(smc, "classConcept", thatClass, false);
    SLinkOperations.setTarget(smc, "baseMethodDeclaration", SNodeOperations.cast(target, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"), false);
    for (SNode arg : ListSequence.fromList(SLinkOperations.getTargets(localCall, "actualArgument", true))) {
      ListSequence.fromList(SLinkOperations.getTargets(smc, "actualArgument", true)).addElement(SNodeOperations.copyNode(arg));
    }

    return smc;
  }



  private SNode transformLocalNameRef(SNode varRef) {
    // it's either EnumConstReference or StaticFieldReference 

    // FIXME share or re-use code with the corresponding NonTypesystemRule 

    SReference ref = SNodeOperations.getReference(varRef, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", "variableDeclaration"));
    if (!(ref instanceof StaticReference)) {
      return null;
    }
    SNode target = ref.getTargetNode();
    if (!(SNodeOperations.isInstanceOf(target, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"))) {
      return null;
    }

    // now check whether it's in another class 
    SNode thisClass = SNodeOperations.getAncestor(varRef, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
    SNode thatClass = SNodeOperations.getAncestor(target, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
    // it should be ok to use ==, I think 
    if (thisClass == thatClass) {
      // same class, such local method call is ok in baseLanguage 
      return null;
    }

    // different class, let's make this reference non-local, but qualified 
    SNode sfr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticFieldReference", null);
    SLinkOperations.setTarget(sfr, "classifier", thatClass, false);
    SLinkOperations.setTarget(sfr, "variableDeclaration", SNodeOperations.cast(target, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"), false);

    return sfr;
  }




  private Iterable<SNode> getImportsToRemove(SNode root) {
    // FIXME share or re-use code with the corresponding NonTypesystemRule 

    final Map<String, SNode> importsByName = MapSequence.fromMap(new HashMap<String, SNode>());
    ListSequence.fromList(SLinkOperations.getTargets(AttributeOperations.getAttribute(root, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.JavaImports"))), "entries", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SPropertyOperations.getBoolean(it, "onDemand"));
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        MapSequence.fromMap(importsByName).put(BehaviorReflection.invokeNonVirtual(String.class, it, "jetbrains.mps.baseLanguage.structure.Tokens", "call_lastToken_1296023605440030462", new Object[]{}), it);

      }
    });

    boolean unknownPresent = false;
    boolean dynRefsPresent = false;
    Set<SNode> retain = SetSequence.fromSet(new HashSet<SNode>());

    Deque<SNode> stack = DequeSequence.fromDeque(new LinkedList<SNode>());
    DequeSequence.fromDeque(stack).pushElement(root);

    while (DequeSequence.fromDeque(stack).isNotEmpty()) {
      SNode node = DequeSequence.fromDeque(stack).popElement();
      DequeSequence.fromDeque(stack).addSequence(ListSequence.fromList(SNodeOperations.getChildren(node)));

      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.IYetUnresolved")) {
        unknownPresent = true;
        break;
      }

      Iterable<? extends SReference> refs = node.getReferences();
      for (SReference ref : Sequence.fromIterable(refs)) {
        if (!(ref instanceof DynamicReference)) {
          continue;
        }

        dynRefsPresent = true;

        String resolveInfo = ((DynamicReference) ref).getResolveInfo();
        SetSequence.fromSet(retain).addElement(MapSequence.fromMap(importsByName).get(resolveInfo));
      }
    }

    // retain all imports if 'unknown' concepts still present 
    if (unknownPresent) {
      return null;
    }
    // on the other hand, if everything is resolved, remove all imports altogether 
    if (dynRefsPresent == false) {
      // quick-fix 
      return SLinkOperations.getTargets(AttributeOperations.getAttribute(root, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.JavaImports"))), "entries", true);
    }
    // removing only those single-type imports that didn't get into retain set 
    // quick fix 
    Iterable<SNode> unneeded = Sequence.fromIterable(MapSequence.fromMap(importsByName).values()).subtract(SetSequence.fromSet(retain));
    return unneeded;
  }



  private Iterable<SReference> getTopLevelRefs(SNode node) {
    final List<SReference> refs = ListSequence.fromList(new ArrayList<SReference>());

    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      ListSequence.fromList(refs).addSequence(Sequence.fromIterable(SNodeOperations.getReferences(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "superclass", true))));
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "implementedInterface", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          ListSequence.fromList(refs).addSequence(Sequence.fromIterable(deepReferences(it)));
        }
      });

    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Interface")) {
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Interface"), "extendedInterface", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          ListSequence.fromList(refs).addSequence(Sequence.fromIterable(deepReferences(it)));
        }
      });
    }

    for (SNode inner : ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.Classifier", false, new String[]{}))) {
      if (SNodeOperations.isInstanceOf(inner, "jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
        continue;
      }
      ListSequence.fromList(refs).addSequence(Sequence.fromIterable(getTopLevelRefs(inner)));
    }

    return refs;
  }



  private Iterable<SReference> getFieldAndMethodTypeRefs(SNode node) {
    List<SReference> refs = ListSequence.fromList(new ArrayList<SReference>());
    Iterable<SNode> members = (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Classifier") ?
      SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Classifier"), "member", true) :
      Sequence.<SNode>singleton(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"))
    );

    for (SNode member : Sequence.fromIterable(members)) {
      if (SNodeOperations.isInstanceOf(member, "jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
        ListSequence.fromList(refs).addSequence(Sequence.fromIterable(deepReferences(SLinkOperations.getTarget(SNodeOperations.cast(member, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"), "type", true))));

      } else if (SNodeOperations.isInstanceOf(member, "jetbrains.mps.baseLanguage.structure.MethodDeclaration")) {
        ListSequence.fromList(refs).addSequence(Sequence.fromIterable(deepReferences(SLinkOperations.getTarget(SNodeOperations.cast(member, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "returnType", true))));
        for (SNode param : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(member, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "parameter", true))) {
          ListSequence.fromList(refs).addSequence(Sequence.fromIterable(deepReferences(SLinkOperations.getTarget(param, "type", true))));
        }
        for (SNode thrws : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(member, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "throwsItem", true))) {
          ListSequence.fromList(refs).addSequence(Sequence.fromIterable(deepReferences(thrws)));
        }

      } else if (SNodeOperations.isInstanceOf(member, "jetbrains.mps.baseLanguage.structure.Classifier")) {
        ListSequence.fromList(refs).addSequence(Sequence.fromIterable(getFieldAndMethodTypeRefs(member)));
      }
    }

    return refs;
  }



  private Iterable<SReference> getVarTypeRefs(SNode node) {
    List<SReference> refs = ListSequence.fromList(new ArrayList<SReference>());

    for (SNode block : ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.StatementList", false, new String[]{}))) {

      for (SNode varDecl : ListSequence.fromList(SNodeOperations.getDescendants(block, "jetbrains.mps.baseLanguage.structure.VariableDeclaration", false, new String[]{}))) {
        ListSequence.fromList(refs).addSequence(Sequence.fromIterable(deepReferences(SLinkOperations.getTarget(varDecl, "type", true))));
      }
    }

    return refs;
  }



  private Iterable<SReference> getVariableRefs(SNode node) {
    return ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.VariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.StaticFieldReference"));
      }
    }).select(new ISelector<SNode, SReference>() {
      public SReference select(SNode it) {
        return SNodeOperations.getReference(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.VariableReference"), SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", "variableDeclaration"));
      }
    });
  }



  private Iterable<SReference> getDotExpLeftParts(SNode node) {
    return ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.DotExpression", false, new String[]{})).translate(new ITranslator2<SNode, SReference>() {
      public Iterable<SReference> translate(SNode it) {
        return deepReferences(SLinkOperations.getTarget(it, "operand", true));
      }
    });
  }



  private void resolveRefs(Iterable<SReference> refs, Map<SNodeReference, List<SReference>> result) {
    for (SReference ref : refs) {
      if (!(ref instanceof DynamicReference)) {
        continue;
      }
      if (SetSequence.fromSet(myVisitedRefs).contains((SReference) ref)) {
        continue;
      }

      SNode target = ref.getTargetNode();
      if (target == null) {
        continue;
      }

      SNode source = ref.getSourceNode();
      SModelReference targetModel = target.getModel().getReference();

      SReference staticRef = StaticReference.create(ref.getRole(), source, targetModel, target.getNodeId());

      List<SReference> nodeRefs = MapSequence.fromMap(result).get(source.getReference());
      if (nodeRefs == null) {
        nodeRefs = ListSequence.fromList(new ArrayList<SReference>());
        MapSequence.fromMap(result).put(source.getReference(), nodeRefs);
      }
      ListSequence.fromList(nodeRefs).addElement((SReference) staticRef);
    }
  }



  private void updateReference(Map<SNodeReference, List<SReference>> refMap) {
    for (SNodeReference nodeRef : SetSequence.fromSet(MapSequence.fromMap(refMap).keySet())) {
      final SNode node = nodeRef.resolve(myRepository);
      if (node == null) {
        continue;
      }
      ListSequence.fromList(MapSequence.fromMap(refMap).get(nodeRef)).visitAll(new IVisitor<SReference>() {
        public void visit(SReference it) {

          SModelReference targetModelRef = it.getTargetSModelReference();
          ((SModelInternal) node.getModel()).addModelImport(targetModelRef, true);

          node.setReference(it.getRole(), it);
        }
      });
    }
  }



  public static Iterable<SReference> deepReferences(SNode node) {

    List<SReference> refs = ListSequence.fromList(new ArrayList<SReference>());
    ListSequence.fromList(refs).addSequence(Sequence.fromIterable(SNodeOperations.getReferences(node)));
    for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(node))) {
      ListSequence.fromList(refs).addSequence(Sequence.fromIterable(deepReferences(child)));
    }

    return refs;

    // generator for yield broken? 
  }



  private SModel registerModelForPackage(String fqName) {

    // FIXME uses not our myRepository (SRepository doesn't have getModelsByName) 
    SModel modelDescriptor = SModelRepository.getInstance().getModelDescriptor(fqName);
    if (modelDescriptor != null) {
      if (!(Sequence.fromIterable(((Iterable<SModel>) myModule.getModels())).contains(modelDescriptor))) {
        // <node> 
        // <node> 
        return createModel(fqName);
      }
      // package is already present... 
      // maybe we shouldn't touch it then, maybe it should be an option 
      return modelDescriptor;
    } else {
      return createModel(fqName);
    }
  }

  private SModel createModel(String packageName) {
    // first check if it is possible 
    if (getRootToCreateModel(packageName) == null) {
      LOG.error("Cannot create model " + packageName + " in module " + myModule.getModuleName());
      return null;
    }

    ModelRoot modelRoot = getRootToCreateModel(packageName);
    SModel modelDescr;

    if (myPerRoot) {
      ModelFactory factory = PersistenceRegistry.getInstance().getFolderModelFactory("file-per-root");
      modelDescr = SModuleOperations.createModelWithAdjustments(packageName, modelRoot, factory);
    } else {
      modelDescr = SModuleOperations.createModelWithAdjustments(packageName, modelRoot);
    }
    assert modelDescr != null;

    ((EditableSModel) modelDescr).save();
    return modelDescr;
  }

  @Nullable
  private ModelRoot getRootToCreateModel(String packageName) {
    for (ModelRoot root : Sequence.fromIterable(myModule.getModelRoots())) {
      if (root.canCreateModel(packageName)) {
        return root;
      }
    }
    return null;
  }


}
