package jetbrains.mps.ide.java.newparser;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.io.File;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.SModuleOperations;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import jetbrains.mps.util.NameUtil;

public class DirParser {
  private static final Logger LOG = LogManager.getLogger(DirParser.class);
  private List<SModel> myAffectedModels = ListSequence.fromList(new ArrayList<SModel>());
  private List<File> mySourceDirs;
  private SModule myModule;
  private Project myProject;
  private JavaParser myJavaParser = new JavaParser();

  public DirParser(SModule module, Project project) {
    myModule = module;
    myProject = project;
  }

  public DirParser(SModule module, Project project, File sourceDir) {
    this(module, project);
    mySourceDirs = ListSequence.fromListAndArray(new ArrayList<File>(), sourceDir);
  }

  public List<SNode> parseDir(JavaParser parser, File dir) throws JavaParseException {
    List<SNode> result = new ArrayList<SNode>();

    if (dir == null || !(dir.exists()) || !(dir.isDirectory())) {
      throw new IllegalArgumentException("Bad directory");
    }

    for (File file : dir.listFiles()) {
      if (file.isDirectory() || !(file.getName().endsWith(".java"))) {
        continue;
      }
      String code = FileUtil.read(file);
      List<SNode> oneFileRoots = parser.parse(code, "", FeatureKind.CLASS, true).getNodes();
      ListSequence.fromList(result).addSequence(ListSequence.fromList(oneFileRoots));
    }

    return result;
  }

  public void addDirectory(File dir) {
    ListSequence.fromList(mySourceDirs).addElement(dir);
  }

  public void parseDirs() throws JavaParseException {
    for (File sourceDir : ListSequence.fromList(mySourceDirs)) {
      addSourceFromDirectory(sourceDir);
    }

    ModelAccess.instance().runUndoTransparentCommand(new Runnable() {
      @Override
      public void run() {
        for (SModel m : ListSequence.fromList(myAffectedModels)) {
          Iterable<SNode> roots = SModelOperations.getRoots(m, null);
          JavaParser.tryResolveUnknowns(roots);
          JavaParser.tryResolveDynamicRefs(roots);
        }
      }
    }, myProject);

  }

  public void addSourceFromDirectory(final File dir) throws JavaParseException {
    assert dir.isDirectory();

    // packages which match the directory 
    // in the proper case: there should be only one 
    final Wrappers._T<String> pkg = new Wrappers._T<String>(null);
    final Wrappers._T<JavaParseException> javaParseException = new Wrappers._T<JavaParseException>(null);
    final Wrappers._boolean wasDefaultPkg = new Wrappers._boolean(false);
    final List<SNode> roots = new ArrayList<SNode>();

    for (final File file : dir.listFiles()) {
      if (file.isDirectory()) {
        addSourceFromDirectory(file);

      } else if (file.getName().endsWith(".java")) {
        MPSModuleRepository.getInstance().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            try {
              JavaParser.JavaParseResult parseRes = parseFile(file);
              String p = parseRes.getPackage();

              if (p == null) {
                // default package (i.e. none), bad 
                if (!(wasDefaultPkg.value)) {
                  LOG.error("default package is not supported in java source directory input (first such file in dir: " + file.getName() + ")");
                  wasDefaultPkg.value = true;
                }
                return;
              }
              if (pkg.value == null) {
                if (DirParser.checkPackageMatchesSourceDirectory(p, dir)) {
                  pkg.value = p;
                } else {
                  LOG.error("package " + p + " doesn't match directory " + dir.getAbsolutePath() + " (in file " + file.getName() + ")");
                  return;
                }

              } else if (!(pkg.value.equals(p))) {
                LOG.error("different packages in directory " + dir.getAbsolutePath() + ", namely " + pkg.value + " and " + p);
                return;
              }
              ListSequence.fromList(roots).addSequence(ListSequence.fromList(parseRes.getNodes()));
            } catch (JavaParseException e) {
              javaParseException.value = e;
            }
          }
        });

        if (javaParseException.value != null) {
          throw new JavaParseException(javaParseException.value);
        }
      }
    }

    // do model stuff 
    final String finalPkg = pkg.value;
    if (pkg.value != null && ListSequence.fromList(roots).count() > 0) {
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        @Override
        public void run() {
          SModel mdl = registerModelForPackage(finalPkg);

          if (mdl != null) {
            ((SModelInternal) mdl).addLanguage(ModuleRepositoryFacade.getInstance().getModule("jetbrains.mps.baseLanguage", Language.class).getModuleReference());
            for (SNode r : ListSequence.fromList(roots)) {
              SModelOperations.addRootNode(mdl, r);
            }
            ListSequence.fromList(myAffectedModels).addElement(mdl);
          }
        }
      });
    } else {
      LOG.info("skipping directory " + dir.getAbsolutePath());
    }
  }

  private JavaParser.JavaParseResult parseFile(File file) throws JavaParseException {
    String contents = FileUtil.read(file);
    return myJavaParser.parseCompilationUnit(contents);
  }

  private SModel registerModelForPackage(String fqName) {
    SModel modelDescriptor = SModelRepository.getInstance().getModelDescriptor(fqName);
    if (modelDescriptor != null) {
      if (!(Sequence.fromIterable(((Iterable<SModel>) myModule.getModels())).contains(modelDescriptor))) {
        LOG.error("model with fq name " + fqName + " is not owned by module " + myModule.getModuleName());
        return null;
      }
      // package is already present... 
      // maybe we shouldn't touch it then, maybe it should be an option 
      return modelDescriptor;
    } else {
      return createModel(fqName);
    }
  }

  private SModel createModel(String packageName) {
    // first check if it is possible 
    if (getRootToCreateModel(packageName) == null) {
      LOG.error("Cannot create model " + packageName + " in module " + myModule.getModuleName());
      return null;
    }

    SModel modelDescr = SModuleOperations.createModelWithAdjustments(packageName, getRootToCreateModel(packageName));
    assert modelDescr != null;

    return modelDescr;
  }

  @Nullable
  private ModelRoot getRootToCreateModel(String packageName) {
    for (ModelRoot root : Sequence.fromIterable(myModule.getModelRoots())) {
      if (root.canCreateModel(packageName)) {
        return root;
      }
    }
    return null;
  }

  public static boolean checkPackageMatchesSourceDirectory(String pkg, File sourceDir) {
    String pathPostfix = NameUtil.pathFromNamespace(pkg);
    return sourceDir.getAbsolutePath().endsWith(pathPostfix);
  }
}
