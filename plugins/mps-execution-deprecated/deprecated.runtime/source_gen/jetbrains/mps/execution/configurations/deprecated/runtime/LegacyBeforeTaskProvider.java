package jetbrains.mps.execution.configurations.deprecated.runtime;

/*Generated by MPS */

import jetbrains.mps.util.annotation.ToRemove;
import com.intellij.execution.BeforeRunTaskProvider;
import com.intellij.openapi.util.Key;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.openapi.actionSystem.DataContext;
import com.intellij.execution.runners.ExecutionEnvironment;
import java.lang.reflect.Method;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import org.apache.log4j.Priority;
import java.lang.reflect.InvocationTargetException;
import com.intellij.openapi.project.Project;
import com.intellij.execution.BeforeRunTask;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

/**
 * Fixes MPS-11832 for old mps run configurations.
 */
@Deprecated
@ToRemove(version = 2.0)
public class LegacyBeforeTaskProvider extends BeforeRunTaskProvider<LegacyBeforeTaskProvider.MakeTask> {
  private static final Key<LegacyBeforeTaskProvider.MakeTask> KEY = Key.create("Legacy");

  @Deprecated
  public LegacyBeforeTaskProvider() {
  }

  @Override
  public Key<LegacyBeforeTaskProvider.MakeTask> getId() {
    return KEY;
  }

  @Override
  public String getName() {
    return "Make";
  }

  @Override
  public String getDescription(LegacyBeforeTaskProvider.MakeTask task) {
    return "Make";
  }

  @Override
  public boolean isConfigurable() {
    return false;
  }

  @Override
  public LegacyBeforeTaskProvider.MakeTask createTask(RunConfiguration runConfiguration) {
    if (hasMake(runConfiguration)) {
      return new LegacyBeforeTaskProvider.MakeTask();
    }
    return null;
  }

  @Override
  public boolean configureTask(RunConfiguration runConfiguration, LegacyBeforeTaskProvider.MakeTask task) {
    return hasMake(runConfiguration);
  }

  private boolean hasMake(RunConfiguration runConfiguration) {
    try {
      if (getMethod(runConfiguration) != null) {
        return true;
      }
    } catch (NoSuchMethodException e) {
    }
    return false;
  }

  @Override
  public boolean canExecuteTask(RunConfiguration configuration, LegacyBeforeTaskProvider.MakeTask task) {
    return true;
  }

  @Override
  public boolean executeTask(DataContext context, RunConfiguration configuration, ExecutionEnvironment env, LegacyBeforeTaskProvider.MakeTask task) {
    try {
      Method make = getMethod(configuration);
      if (make == null) {
        return false;
      }
      return (Boolean) make.invoke(configuration, PlatformDataKeys.PROJECT.getData(context));
    } catch (NoSuchMethodException e) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("", e);
      }
    } catch (InvocationTargetException e) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("", e);
      }
    } catch (IllegalAccessException e) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("", e);
      }
    } catch (ClassCastException e) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("", e);
      }
    }
    return false;
  }

  private Method getMethod(RunConfiguration configuration) throws NoSuchMethodException {
    return configuration.getClass().getMethod("make", Project.class);
  }

  public static class MakeTask extends BeforeRunTask<LegacyBeforeTaskProvider.MakeTask> {
    public MakeTask() {
      super(KEY);
      setEnabled(true);
    }
  }

  protected static Logger LOG = LogManager.getLogger(LegacyBeforeTaskProvider.class);
}
