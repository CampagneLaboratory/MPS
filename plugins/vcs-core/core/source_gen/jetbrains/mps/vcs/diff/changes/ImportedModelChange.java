package jetbrains.mps.vcs.diff.changes;

/*Generated by MPS */

import jetbrains.mps.smodel.SModelReference;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.vcs.diff.ChangeSet;
import jetbrains.mps.smodel.SModel;

public class ImportedModelChange extends DependencyChange {
  private SModelReference myModelReference;

  public ImportedModelChange(@NotNull ChangeSet changeSet, @NotNull SModelReference modelReference, boolean delete) {
    super(changeSet, delete);
    myModelReference = modelReference;
  }

  public SModelReference getModelReference() {
    return myModelReference;
  }

  @Override
  public String toString() {
    return ((isDelete() ?
      "Delete" :
      "Add"
    )) + " imported model " + myModelReference;
  }

  @NotNull
  @Override
  protected ModelChange createOppositeChange() {
    return new ImportedModelChange(getChangeSet().getOppositeChangeSet(), myModelReference, !(isDelete()));
  }

  @Override
  public void apply(@NotNull SModel model, @NotNull NodeCopier nodeCopier) {
    if (isDelete()) {
      ((ABCDE) model).deleteModelImport(myModelReference);
    } else {
      ((ABCDE) model).addModelImport(myModelReference, false);
    }
  }
}
