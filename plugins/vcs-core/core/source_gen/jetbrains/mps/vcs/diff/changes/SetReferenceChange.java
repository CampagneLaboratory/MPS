package jetbrains.mps.vcs.diff.changes;

/*Generated by MPS */

import jetbrains.mps.smodel.SModelReference;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.vcs.diff.ChangeSet;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.DynamicReference;
import jetbrains.mps.smodel.StaticReference;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class SetReferenceChange extends NodeChange {
  private String myRole;
  private SModelReference myTargetModelReference;
  private SNodeId myTargetNodeId;
  private String myResolveInfo;
  private boolean myResolveInfoOnly;

  public SetReferenceChange(@NotNull ChangeSet changeSet, @NotNull SNodeId sourceNodeId, @NotNull String role, @Nullable SModelReference targetModelReference, @Nullable SNodeId targetNodeId, @Nullable String resolveInfo) {
    super(changeSet, sourceNodeId);
    myRole = role;
    myTargetModelReference = targetModelReference;
    // if target node id is null and resolve info is not-null it's dynamic reference 
    myTargetNodeId = targetNodeId;
    myResolveInfo = resolveInfo;

    // check if only resolve info for static reference changed - then it cannot conflict with other changes 
    SReference oldRef = check_mgdhcs_a0i0f(changeSet.getOldModel().getNode(getAffectedNodeId()), myRole, this);
    myResolveInfoOnly = eq_mgdhcs_a0a0a9a5(check_mgdhcs_a0a0a9a5(oldRef), targetModelReference) && eq_mgdhcs_a0a0a9a5_0(check_mgdhcs_a0a0a9a5_0(oldRef), targetNodeId) && targetNodeId != null;
  }

  @NotNull
  public String getRole() {
    return myRole;
  }

  @Nullable
  public SModelReference getTargetModelReference() {
    return myTargetModelReference;
  }

  @Nullable
  public SNodeId getTargetNodeId() {
    return myTargetNodeId;
  }

  @Nullable
  public String getResolveInfo() {
    return myResolveInfo;
  }

  @Override
  public void apply(@NotNull SModel model, @NotNull NodeCopier nodeCopier) {
    SNode node = model.getNode(getAffectedNodeId());
    assert node != null;
    if (myTargetNodeId == null && myResolveInfo == null) {
      node.setReferenceTarget(myRole, null);
    } else {
      SModelReference targetModelReference = (myTargetModelReference == null ?
        model.getReference() :
        myTargetModelReference
      );
      SReference reference;
      if (myTargetNodeId == null) {
        reference = new DynamicReference(myRole, node, targetModelReference, myResolveInfo);
      } else {
        reference = new StaticReference(myRole, node, targetModelReference, myTargetNodeId, myResolveInfo);
      }
      node.setReferenceTarget(myRole, null);
      node.setReference(reference.getRole(), reference);
    }
  }

  @Override
  public boolean isNonConflicting() {
    return myResolveInfoOnly;
  }

  @Override
  public String toString() {
    String targetString = (myTargetModelReference == null ?
      "" + myTargetNodeId :
      String.format("%s|%s", myTargetModelReference, myTargetNodeId)
    );
    return String.format("Set reference in role %s for node %s to %s [resolveInfo=%s]", myRole, getAffectedNodeId(), targetString, myResolveInfo);
  }

  @Override
  public String getDescription() {
    // TODO consider dynamic references 
    SReference oldRef = getChangeSet().getOldModel().getNode(getAffectedNodeId()).getReference(myRole);
    SReference newRef = getChangeSet().getNewModel().getNode(getAffectedNodeId()).getReference(myRole);
    if (oldRef == null) {
      return String.format("Added %s reference", myRole);
    }
    if (newRef == null) {
      return String.format("Removed %s reference", myRole);
    }
    String what = "target";
    _FunctionTypes._return_P1_E0<? extends String, ? super SReference> formatRef = null;
    if (neq_mgdhcs_a0h0n(oldRef.getTargetSModelReference(), newRef.getTargetSModelReference())) {
      formatRef = new _FunctionTypes._return_P1_E0<String, SReference>() {
        public String invoke(SReference ref) {
          return String.format("[model=%s,\n  id=%s, resolveInfo=%s]", ref.getTargetSModelReference(), ref.getTargetNodeId(), ((jetbrains.mps.smodel.SReference) ref).getResolveInfo());
        }
      };
    }
    if (neq_mgdhcs_a0i0n(oldRef.getTargetNodeId(), newRef.getTargetNodeId())) {
      formatRef = new _FunctionTypes._return_P1_E0<String, SReference>() {
        public String invoke(SReference ref) {
          return String.format("[id=%s, resolveInfo=%s]", ref.getTargetNodeId(), ref.getTargetNodeId());
        }
      };
    }
    if (neq_mgdhcs_a0j0n(((jetbrains.mps.smodel.SReference) oldRef).getResolveInfo(), ((jetbrains.mps.smodel.SReference) newRef).getResolveInfo())) {
      what = "resolve info";
      formatRef = new _FunctionTypes._return_P1_E0<String, SReference>() {
        public String invoke(SReference ref) {
          return String.format("'%s'", ((jetbrains.mps.smodel.SReference) ref).getResolveInfo());
        }
      };
    }
    if (formatRef == null) {
      return toString();
    } else {
      return String.format("Changed %s reference %s from\n  %s\n  to\n  %s", myRole, what, formatRef.invoke(oldRef), formatRef.invoke(newRef));
    }
  }

  @NotNull
  @Override
  protected ModelChange createOppositeChange() {
    SNode node = getChangeSet().getOldModel().getNode(getAffectedNodeId());
    assert node != null;
    SReference ref = node.getReference(getRole());
    SModelReference targetModel = check_mgdhcs_a0d0o(ref);
    if (eq_mgdhcs_a0e0o(getChangeSet().getOldModel().getReference(), targetModel)) {
      // This is internal reference 
      targetModel = null;
    }

    return new SetReferenceChange(getChangeSet().getOppositeChangeSet(), getAffectedNodeId(), getRole(), targetModel, check_mgdhcs_e0a6a41(ref), check_mgdhcs_f0a6a41(((jetbrains.mps.smodel.SReference) ref)));
  }

  private static SReference check_mgdhcs_a0i0f(SNode checkedDotOperand, String myRole, SetReferenceChange checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getReference(myRole);
    }
    return null;
  }

  private static SModelReference check_mgdhcs_a0a0a9a5(SReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getTargetSModelReference();
    }
    return null;
  }

  private static SNodeId check_mgdhcs_a0a0a9a5_0(SReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getTargetNodeId();
    }
    return null;
  }

  private static SModelReference check_mgdhcs_a0d0o(SReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getTargetSModelReference();
    }
    return null;
  }

  private static SNodeId check_mgdhcs_e0a6a41(SReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getTargetNodeId();
    }
    return null;
  }

  private static String check_mgdhcs_f0a6a41(jetbrains.mps.smodel.SReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getResolveInfo();
    }
    return null;
  }

  private static boolean eq_mgdhcs_a0a0a9a5(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_mgdhcs_a0a0a9a5_0(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean neq_mgdhcs_a0h0n(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean neq_mgdhcs_a0i0n(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean neq_mgdhcs_a0j0n(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean eq_mgdhcs_a0e0o(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
