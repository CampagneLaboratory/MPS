package jetbrains.mps.vcs.diff.changes;

/*Generated by MPS */

import jetbrains.mps.vcs.diff.ChangeSet;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.extapi.model.SModelBase;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public abstract class ModelChange {
  private ChangeSet myChangeSet;
  private ModelChange myOpposite = null;

  protected ModelChange(@NotNull ChangeSet changeSet) {
    myChangeSet = changeSet;
  }

  @NotNull
  public final ChangeSet getChangeSet() {
    return myChangeSet;
  }

  @Nullable
  public SNodeId getRootId() {
    return null;
  }

  public abstract void apply(@NotNull SModel model, @NotNull NodeCopier nodeCopier);

  public ModelChange getOppositeChange() {
    if (myOpposite == null) {
      myOpposite = createOppositeChange();
      myOpposite.myOpposite = this;
    }
    return myOpposite;
  }

  @NotNull
  protected abstract ModelChange createOppositeChange();

  @NotNull
  public abstract ChangeType getType();

  public boolean isNonConflicting() {
    // true - change can never conflict with other change and should be ignored if connected change exists (e.g. resolveInfo change) 
    return false;
  }

  @Override
  public abstract String toString();

  public abstract String getDescription();

  public static void rollbackChanges(Iterable<ModelChange> changes) {
    assert Sequence.fromIterable(changes).isNotEmpty();
    final jetbrains.mps.smodel.SModel model = as_dy9g5o_a0a0b0m(Sequence.fromIterable(changes).first().getChangeSet().getNewModel(), SModelBase.class).getSModelInternal();
    final NodeCopier nc = new NodeCopier(model);
    Iterable<ModelChange> oppositeChanges = Sequence.fromIterable(changes).select(new ISelector<ModelChange, ModelChange>() {
      public ModelChange select(ModelChange ch) {
        return ch.getOppositeChange();
      }
    });
    for (ModelChange ch : Sequence.fromIterable(oppositeChanges)) {
      if (ch instanceof NodeGroupChange) {
        ((NodeGroupChange) ch).prepare();
      }
    }
    Sequence.fromIterable(oppositeChanges).visitAll(new IVisitor<ModelChange>() {
      public void visit(ModelChange ch) {
        ch.apply(model.getModelDescriptor(), nc);
      }
    });
    nc.restoreIds(true);
  }

  private static <T> T as_dy9g5o_a0a0b0m(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }
}
