package jetbrains.mps.vcs.core.mergedriver;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.tmatesoft.svn.core.wc.SVNDiffOptions;
import org.tmatesoft.svn.core.internal.wc.FSMergerBySequence;
import de.regnis.q.sequence.line.QSequenceLineRAData;
import de.regnis.q.sequence.line.QSequenceLineRAByteData;
import java.io.ByteArrayOutputStream;
import org.tmatesoft.svn.core.internal.wc.SVNDiffConflictChoiceStyle;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.io.IOException;

/*package*/ class TextMerger extends AbstractContentMerger {
  public TextMerger() {
  }

  @Nullable
  public Tuples._2<Integer, byte[]> mergeContents(byte[] baseContent, byte[] localContent, byte[] latestContent) {
    try {
      SVNDiffOptions diffOptions = null;
      FSMergerBySequence merger = new FSMergerBySequence(myConflictStart, mySeparator, myConflictEnd);
      QSequenceLineRAData baseData = new QSequenceLineRAByteData(baseContent);
      QSequenceLineRAData localData = new QSequenceLineRAByteData(localContent);
      QSequenceLineRAData latestData = new QSequenceLineRAByteData(latestContent);
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      try {
        int mergeResult = merger.merge(baseData, localData, latestData, diffOptions, out, SVNDiffConflictChoiceStyle.CHOOSE_MODIFIED_LATEST);
        return MultiTuple.<Integer,byte[]>from((mergeResult == FSMergerBySequence.CONFLICTED ?
          CONFLICTS :
          MERGED
        ), out.toByteArray());
      } catch (IOException e) {
        return null;
      }
    } catch (NoClassDefFoundError e) {
      return MultiTuple.<Integer,byte[]>from(CONFLICTS, localContent);
    }
  }
}
