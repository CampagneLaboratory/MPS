package jetbrains.mps.vcspersistence;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.persistence.ModelFactory;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.persistence.PersistenceUtil;
import java.io.InputStream;
import java.io.IOException;
import java.io.ByteArrayInputStream;
import java.util.Collections;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.util.ReadUtil;
import jetbrains.mps.smodel.SModelHeader;
import org.xml.sax.InputSource;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.smodel.InvalidSModel;
import jetbrains.mps.smodel.LazyEditableSModelBase;
import org.jetbrains.mps.openapi.persistence.NullDataSource;
import org.jetbrains.mps.openapi.persistence.ModelSaveException;
import jetbrains.mps.smodel.persistence.def.ModelReadException;

public class VCSPersistenceUtil {
  public static SModel loadModel(final byte[] content, String extension) {
    // returns null if an error occured, as its predcessor in PersistenceUtil. 
    // [MM] not sure this is correct, just left it unchanged 

    SModel oldModel = loadFromOldMPSPersistence(content);
    if (oldModel != null) {
      return oldModel;
    }

    ModelFactory factory = PersistenceFacade.getInstance().getModelFactory(extension);
    if (factory == null) {
      return null;
    }
    try {
      SModel model = factory.load(new PersistenceUtil.StreamDataSourceBase() {
        @Override
        public InputStream openInputStream() throws IOException {
          return new ByteArrayInputStream(content);
        }
      }, Collections.singletonMap(ModelFactory.OPTION_CONTENT_ONLY, Boolean.TRUE.toString()));
      model.load();
      return model;
    } catch (IOException ex) {
      return null;
    }
  }

  public static SModel loadModel(IFile file) {
    InputStream input = null;
    try {
      input = file.openInputStream();
      byte[] bytes = ReadUtil.read(input);
      return loadModel(bytes, file.getName().substring(file.getName().lastIndexOf(".")));
    } catch (IOException e) {
      return null;
    } finally {
      if (input != null) {
        try {
          input.close();
        } catch (IOException e) {
          // do nothing 
        }
      }
    }
  }

  private static SModel loadFromOldMPSPersistence(final byte[] content) {
    SModelHeader header;
    try {
      header = VCSPersistenceSupport.loadDescriptor(new InputSource(new ByteArrayInputStream(content)));
    } catch (IOException e) {
      return null;
    }

    try {
      final ModelLoadResult readModel = VCSPersistenceSupport.readModel(header, new PersistenceUtil.StreamDataSourceBase() {
        @Override
        public InputStream openInputStream() throws IOException {
          return new ByteArrayInputStream(content);
        }
      }, ModelLoadingState.FULLY_LOADED);

      jetbrains.mps.smodel.SModel model = readModel.getModel();
      if (model instanceof InvalidSModel) {
        return null;
      }

      return new LazyEditableSModelBase(header.getModelReference(), new NullDataSource()) {
        protected ModelLoadResult loadSModel(ModelLoadingState p0) {
          return readModel;
        }
        protected boolean saveModel() throws IOException, ModelSaveException {
          throw new UnsupportedOperationException();
        }
      };
    } catch (ModelReadException e) {
      return null;
    }
  }
}
