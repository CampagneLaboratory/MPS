package jetbrains.mps.smodel.persistence.def.v6;

/*Generated by MPS */

import jetbrains.mps.smodel.persistence.def.IModelWriter;
import org.jdom.Document;
import jetbrains.mps.smodel.SModel;
import org.jdom.Element;
import jetbrains.mps.vcspersistence.VCSPersistenceSupport;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.smodel.SModelLegacy;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import jetbrains.mps.smodel.persistence.def.DocUtil;
import org.jetbrains.mps.openapi.model.SReference;

public class ModelWriter6 implements IModelWriter {
  private VersionUtil myHelper;
  protected int getModelPersistenceVersion() {
    return 6;
  }
  @Override
  public Document saveModel(SModel sourceModel) {
    myHelper = new VersionUtil(sourceModel);
    Element rootElement = new Element(VCSPersistenceSupport.MODEL);
    rootElement.setAttribute(VCSPersistenceSupport.MODEL_UID, sourceModel.getReference().toString());
    Element persistenceElement = new Element(VCSPersistenceSupport.PERSISTENCE);
    persistenceElement.setAttribute(VCSPersistenceSupport.PERSISTENCE_VERSION, getModelPersistenceVersion() + "");
    rootElement.addContent(persistenceElement);
    // languages 
    for (SModuleReference languageNamespace : new SModelLegacy(sourceModel).importedLanguages()) {
      Element languageElem = new Element(VCSPersistenceSupport.LANGUAGE);
      languageElem.setAttribute(VCSPersistenceSupport.NAMESPACE, languageNamespace.toString());
      rootElement.addContent(languageElem);
    }
    // languages engaged on generation 
    for (SModuleReference languageNamespace : sourceModel.engagedOnGenerationLanguages()) {
      Element languageElem = new Element(VCSPersistenceSupport.LANGUAGE_ENGAGED_ON_GENERATION);
      languageElem.setAttribute(VCSPersistenceSupport.NAMESPACE, languageNamespace.toString());
      rootElement.addContent(languageElem);
    }
    // devkits 
    for (SModuleReference devkitNamespace : sourceModel.importedDevkits()) {
      Element devkitElem = new Element(VCSPersistenceSupport.DEVKIT);
      devkitElem.setAttribute(VCSPersistenceSupport.NAMESPACE, devkitNamespace.toString());
      rootElement.addContent(devkitElem);
    }
    // imports 
    for (SModel.ImportElement importElement : sourceModel.importedModels()) {
      Element importElem = new Element(VCSPersistenceSupport.IMPORT_ELEMENT);
      importElem.setAttribute(VCSPersistenceSupport.MODEL_IMPORT_INDEX, "" + myHelper.genImportIndex(importElement));
      importElem.setAttribute(VCSPersistenceSupport.MODEL_UID, importElement.getModelReference().toString());
      importElem.setAttribute(VCSPersistenceSupport.VERSION, "" + importElement.getUsedVersion());
      rootElement.addContent(importElem);
    }
    for (SModel.ImportElement importElement : sourceModel.getImplicitImportsSupport().getAdditionalModelVersions()) {
      Element importElem = new Element(VCSPersistenceSupport.IMPORT_ELEMENT);
      importElem.setAttribute(VCSPersistenceSupport.MODEL_IMPORT_INDEX, "" + myHelper.genImportIndex(importElement));
      importElem.setAttribute(VCSPersistenceSupport.MODEL_UID, importElement.getModelReference().toString());
      importElem.setAttribute(VCSPersistenceSupport.VERSION, "" + importElement.getUsedVersion());
      importElem.setAttribute(VCSPersistenceSupport.IMPLICIT, "yes");
      rootElement.addContent(importElem);
    }
    // roots 
    saveRootStubs(rootElement, sourceModel);
    // only for quick roots access 
    for (SNode root : sourceModel.getRootNodes()) {
      saveNode(rootElement, root, true);
    }
    return new Document(rootElement);
  }
  @Override
  public Map<String, Document> saveModelAsMultiStream(SModel sourceModel) {
    throw new UnsupportedOperationException();
  }
  protected void saveRootStubs(Element parent, SModel model) {
    Element roots = new Element("root_stubs");
    for (SNode root : model.getRootNodes()) {
      saveNode(roots, root, false);
    }
    parent.addContent(roots);
  }
  protected void saveNode(Element parentElement, SNode node, boolean saveChildren) {
    Element element = new Element(VCSPersistenceSupport.NODE);
    DocUtil.setNotNullAttribute(element, VCSPersistenceSupport.ROLE, myHelper.genRole(node));
    // DocUtil.setNotNullAttribute(element, ModelPersistence.ROLE_ID, myHelper.genRoleId(node)); 
    element.setAttribute(VCSPersistenceSupport.TYPE, myHelper.genType(node));
    // DocUtil.setNotNullAttribute(element, ModelPersistence.TYPE_ID, myHelper.genTypeId(node)); 
    element.setAttribute(VCSPersistenceSupport.ID, node.getNodeId().toString());
    for (String propertyName : node.getPropertyNames()) {
      Element propertyElement = new Element(VCSPersistenceSupport.PROPERTY);
      propertyElement.setAttribute(VCSPersistenceSupport.NAME, myHelper.genName(node, propertyName));
      // DocUtil.setNotNullAttribute(propertyElement, ModelPersistence.NAME_ID, myHelper.genNameId(node, propertyName)); 
      DocUtil.setNotNullAttribute(propertyElement, VCSPersistenceSupport.VALUE, node.getProperty(propertyName));
      element.addContent(propertyElement);
    }
    for (SReference reference : node.getReferences()) {
      Element linkElement = new Element(VCSPersistenceSupport.LINK);
      linkElement.setAttribute(VCSPersistenceSupport.ROLE, myHelper.genRole(reference));
      // DocUtil.setNotNullAttribute(linkElement, ModelPersistence.ROLE_ID, myHelper.genRoleId(reference)); 
      linkElement.setAttribute(VCSPersistenceSupport.TARGET_NODE_ID, myHelper.genTarget(reference));
      DocUtil.setNotNullAttribute(linkElement, VCSPersistenceSupport.RESOLVE_INFO, ((jetbrains.mps.smodel.SReference) reference).getResolveInfo());
      element.addContent(linkElement);
    }
    if (saveChildren) {
      for (SNode childNode : node.getChildren()) {
        saveNode(element, childNode, true);
      }
    }
    parentElement.addContent(element);
  }
}
