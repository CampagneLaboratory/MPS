package jetbrains.mps.smodel.persistence.def.v4;

/*Generated by MPS */

import jetbrains.mps.smodel.persistence.def.IModelWriter;
import jetbrains.mps.smodel.persistence.def.IReferencePersister;
import org.jdom.Document;
import jetbrains.mps.smodel.SModel;
import org.jdom.Element;
import jetbrains.mps.vcspersistence.VCSPersistenceSupport;
import jetbrains.mps.smodel.DefaultSModel;
import java.util.Set;
import java.util.HashSet;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.smodel.SModelLegacy;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.persistence.def.VisibleModelElements;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import jetbrains.mps.smodel.persistence.def.DocUtil;
import org.jetbrains.mps.openapi.model.SReference;

public class ModelWriter4 implements IModelWriter {
  protected IReferencePersister getReferencePersister() {
    return new ReferencePersister4();
  }
  protected int getModelPersistenceVersion() {
    return 4;
  }
  @Override
  public Document saveModel(SModel sourceModel) {
    Element rootElement = new Element(VCSPersistenceSupport.MODEL);
    rootElement.setAttribute(VCSPersistenceSupport.MODEL_UID, sourceModel.getReference().toString());
    Element persistenceElement = new Element(VCSPersistenceSupport.PERSISTENCE);
    persistenceElement.setAttribute(VCSPersistenceSupport.PERSISTENCE_VERSION, getModelPersistenceVersion() + "");
    rootElement.addContent(persistenceElement);
    if (sourceModel instanceof DefaultSModel) {
      saveRefactorings(rootElement, (DefaultSModel) sourceModel);
    }
    // languages 
    Set<String> writtenAspects = new HashSet<String>();
    for (SModuleReference languageNamespace : new SModelLegacy(sourceModel).importedLanguages()) {
      Element languageElem = new Element(VCSPersistenceSupport.LANGUAGE);
      languageElem.setAttribute(VCSPersistenceSupport.NAMESPACE, languageNamespace.toString());
      rootElement.addContent(languageElem);
    }
    for (SModel.ImportElement aspectElement : sourceModel.getImplicitImportsSupport().getAdditionalModelVersions()) {
      SModelReference modelReference = aspectElement.getModelReference();
      if (modelReference == null) {
        continue;
      }
      if (!(writtenAspects.contains(modelReference.toString()))) {
        writtenAspects.add(modelReference.toString());
        writeAspect(sourceModel, rootElement, modelReference);
      }
    }
    // languages engaged on generation 
    for (SModuleReference languageNamespace : sourceModel.engagedOnGenerationLanguages()) {
      Element languageElem = new Element(VCSPersistenceSupport.LANGUAGE_ENGAGED_ON_GENERATION);
      languageElem.setAttribute(VCSPersistenceSupport.NAMESPACE, languageNamespace.toString());
      rootElement.addContent(languageElem);
    }
    // devkits 
    for (SModuleReference devkitNamespace : sourceModel.importedDevkits()) {
      Element devkitElem = new Element(VCSPersistenceSupport.DEVKIT);
      devkitElem.setAttribute(VCSPersistenceSupport.NAMESPACE, devkitNamespace.toString());
      rootElement.addContent(devkitElem);
    }
    // imports 
    Element maxRefID = new Element("maxImportIndex");
    rootElement.addContent(maxRefID);
    int maxImport = 0;
    for (SModel.ImportElement importElement : sourceModel.importedModels()) {
      maxImport = Math.max(maxImport, importElement.getReferenceID());
    }
    for (SModel.ImportElement importElement : sourceModel.importedModels()) {
      Element importElem = new Element(VCSPersistenceSupport.IMPORT_ELEMENT);
      if (importElement.getReferenceID() < 0) {
        importElement.setReferenceID(++maxImport);
      }
      importElem.setAttribute(VCSPersistenceSupport.MODEL_IMPORT_INDEX, "" + importElement.getReferenceID());
      SModelReference modelReference = importElement.getModelReference();
      importElem.setAttribute(VCSPersistenceSupport.MODEL_UID, modelReference.toString());
      importElem.setAttribute(VCSPersistenceSupport.VERSION, "" + importElement.getUsedVersion());
      org.jetbrains.mps.openapi.model.SModel importedModelDescriptor = SModelRepository.getInstance().getModelDescriptor(modelReference);
      rootElement.addContent(importElem);
    }
    maxRefID.setAttribute(VCSPersistenceSupport.VALUE, "" + maxImport);
    VisibleModelElements visibleModelElements = new DOMVisibleModelElements(rootElement);
    for (SNode root : sourceModel.getRootNodes()) {
      saveNode(rootElement, root, visibleModelElements);
    }
    Document document = new Document();
    document.setRootElement(rootElement);
    return document;
  }
  @Override
  public Map<String, Document> saveModelAsMultiStream(SModel sourceModel) {
    throw new UnsupportedOperationException();
  }
  protected void saveRefactorings(Element rootElement, DefaultSModel sourceModel) {
    // noinspection deprecation 
    Element history = sourceModel.getRefactoringHistoryElement();
    if (history != null) {
      Element copy = (Element) history.clone();
      copy.detach();
      rootElement.addContent(copy);
    }
  }
  private void writeAspect(SModel sourceModel, Element parent, SModelReference aspectReference) {
    int modelVersion = VersionUtil.getLanguageAspectModelVersion(sourceModel, aspectReference);
    Element aspectModelElement = new Element(VCSPersistenceSupport.LANGUAGE_ASPECT);
    aspectModelElement.setAttribute(VCSPersistenceSupport.MODEL_UID, aspectReference.toString());
    aspectModelElement.setAttribute(VCSPersistenceSupport.VERSION, "" + modelVersion);
    parent.addContent(aspectModelElement);
  }
  public void saveNode(Element container, SNode node) {
    saveNode(container, null, node, true, null);
  }
  private void saveNode(Element parentElement, SNode node, VisibleModelElements visibleModelElements) {
    saveNode(parentElement, null, node, false, visibleModelElements);
  }
  private void saveNode(Element parentElement, String elementName, SNode node, boolean useUIDs, VisibleModelElements visibleModelElements) {
    String theElementName = elementName;
    if (theElementName == null) {
      theElementName = VCSPersistenceSupport.NODE;
    }
    int modelVersion = VersionUtil.getNodeLanguageVersion(node);
    Element element = new Element(theElementName);
    final String role = node.getRoleInParent();
    DocUtil.setNotNullAttribute(element, VCSPersistenceSupport.ROLE, VersionUtil.formVersionedString(role, VersionUtil.getRoleVersion(node)));
    element.setAttribute(VCSPersistenceSupport.TYPE, VersionUtil.formVersionedString(node.getConcept().getQualifiedName(), modelVersion));
    element.setAttribute(VCSPersistenceSupport.ID, node.getNodeId().toString());
    // properties ... 
    for (String propertyName : node.getPropertyNames()) {
      Element propertyElement = new Element(VCSPersistenceSupport.PROPERTY);
      element.addContent(propertyElement);
      propertyElement.setAttribute(VCSPersistenceSupport.NAME, VersionUtil.formVersionedString(propertyName, modelVersion));
      DocUtil.setNotNullAttribute(propertyElement, VCSPersistenceSupport.VALUE, node.getProperty(propertyName));
    }
    // references ... 
    IReferencePersister referencePersister = getReferencePersister();
    for (SReference reference : node.getReferences()) {
      referencePersister.saveReference(element, reference, useUIDs, visibleModelElements);
    }
    // children ... 
    for (SNode childNode : node.getChildren()) {
      saveNode(element, null, childNode, useUIDs, visibleModelElements);
    }
    parentElement.addContent(element);
  }
}
