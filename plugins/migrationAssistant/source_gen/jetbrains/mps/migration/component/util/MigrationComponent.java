package jetbrains.mps.migration.component.util;

/*Generated by MPS */

import com.intellij.openapi.components.AbstractProjectComponent;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import com.intellij.openapi.project.Project;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.module.SDependency;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.apache.log4j.Level;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MigrationComponent extends AbstractProjectComponent {
  private Map<SModule, MigrationDescriptor> loadedDescriptors = MapSequence.fromMap(new HashMap<SModule, MigrationDescriptor>());

  public MigrationComponent(Project project) {
    super(project);
  }

  public MigrationDescriptor loadMigrationDescriptor(SModule module) {
    final ClassLoader loader = ClassLoaderManager.getInstance().getClassLoader(module);
    try {
      Class descriptorClass = Class.forName(MigrationsUtil.getDescriptorFQName(module), true, loader);
      return (MigrationDescriptor) descriptorClass.newInstance();
    } catch (ClassNotFoundException e) {
      return null;
    } catch (IllegalAccessException e) {
      return null;
    } catch (InstantiationException e) {
      return null;
    }
  }

  public MigrationDescriptor getMigrationDescriptor(SModule module) {
    if (MapSequence.fromMap(loadedDescriptors).get(module) == null) {
      MapSequence.fromMap(loadedDescriptors).put(module, loadMigrationDescriptor(module));
    }
    return MapSequence.fromMap(loadedDescriptors).get(module);
  }

  public boolean isApplied(final MigrationScriptReference script, AbstractModule module) {
    return Sequence.fromIterable(MigrationsUtil.checkDependenciesVersions(module)).any(new IWhereFilter<Tuples._3<SModule, Integer, Integer>>() {
      public boolean accept(Tuples._3<SModule, Integer, Integer> it) {
        return eq_gd1mrb_a0a0a0a0a0a0a4(it._0().getModuleReference(), script.getModuleReference()) && (int) it._1() > script.getFromVersion();
      }
    });
  }

  public boolean isAppliedForAllMyDeps(final MigrationScriptReference script, final AbstractModule module) {
    Iterable<SDependency> declaredDependencies = module.getDeclaredDependencies();
    Set<SModule> dependencies = SetSequence.fromSetWithValues(new HashSet<SModule>(), Sequence.fromIterable(declaredDependencies).translate(new ITranslator2<SDependency, SModule>() {
      public Iterable<SModule> translate(SDependency it) {
        return new GlobalModuleDependenciesManager(module).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE);
      }
    }));
    SetSequence.fromSet(dependencies).addElement(module);
    return SetSequence.fromSet(dependencies).all(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return isApplied(script, (AbstractModule) it);
      }
    });
  }

  public Iterable<MigrationScript> fetchAvailableScriptsForModule(final AbstractModule module) {
    return Sequence.fromIterable(MigrationsUtil.getDependenciesToMigrate(module)).select(new ISelector<Tuples._3<SModule, Integer, Integer>, MigrationScript>() {
      public MigrationScript select(Tuples._3<SModule, Integer, Integer> dep) {
        SModule depModule = dep._0();
        int current = (int) dep._1();
        MigrationDescriptor md = getMigrationDescriptor(depModule);
        if (md == null) {
          if (LOG.isEnabledFor(Level.WARN)) {
            LOG.warn("Could not load migration descriptor for language " + depModule + ".");
          }
        }
        MigrationScript script = check_gd1mrb_a0e0a0a0a6(md, current);
        if (script == null) {
          if (LOG.isEnabledFor(Level.WARN)) {
            LOG.warn("Could not load migration script for language " + depModule + ", version " + current + ".");
          }
          return null;
        }
        if (!(script.applicableToModule(module))) {
          return script;
        }
        boolean available = Sequence.fromIterable(script.requiresData()).all(new IWhereFilter<MigrationScriptReference>() {
          public boolean accept(MigrationScriptReference it) {
            return isAppliedForAllMyDeps(it, module);
          }
        });
        if (available) {
          return script;
        }
        return null;
      }
    });
  }

  public Iterable<Tuples._2<MigrationScript, AbstractModule>> fetchAvailableScripts(jetbrains.mps.project.Project project) {
    Iterable<? extends SModule> projectModules = project.getModules();
    return Sequence.fromIterable(projectModules).translate(new ITranslator2<SModule, Tuples._2<MigrationScript, AbstractModule>>() {
      public Iterable<Tuples._2<MigrationScript, AbstractModule>> translate(SModule module) {
        final AbstractModule abstractModule = (AbstractModule) module;
        return Sequence.fromIterable(fetchAvailableScriptsForModule(abstractModule)).select(new ISelector<MigrationScript, Tuples._2<MigrationScript, AbstractModule>>() {
          public Tuples._2<MigrationScript, AbstractModule> select(MigrationScript script) {
            return MultiTuple.<MigrationScript,AbstractModule>from(script, abstractModule);
          }
        });
      }
    });
  }


  protected static Logger LOG = LogManager.getLogger(MigrationComponent.class);

  private static MigrationScript check_gd1mrb_a0e0a0a0a6(MigrationDescriptor checkedDotOperand, int current) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getScript(current);
    }
    return null;
  }

  private static boolean eq_gd1mrb_a0a0a0a0a0a0a4(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
