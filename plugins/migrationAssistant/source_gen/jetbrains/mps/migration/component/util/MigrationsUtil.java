package jetbrains.mps.migration.component.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.project.AbstractModule;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.Language;

public class MigrationsUtil {

  public static final String MIGRATIONS_MODEL_NAME = "migrations";


  public static String getMigrationModelName(SModule module) {
    return module.getModuleName() + "." + MIGRATIONS_MODEL_NAME;
  }




  public static SModel getMigrationModel(final SModule module) {
    Iterable<SModel> models = module.getModels();
    return Sequence.fromIterable(models).findFirst(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return eq_7hm1hv_a0a0a0a0a0b0g(it.getModelName(), module.getModuleName() + "." + MIGRATIONS_MODEL_NAME);
      }
    });
  }



  public static String getDescriptorFQName(SModule module) {
    return SModelOperations.getModelName(getMigrationModel(module)) + "." + getDescriptorClassName(module);
  }



  public static String getDescriptorClassName(SModule module) {
    return "MigrationDescriptorImpl";
  }



  public static Iterable<Tuples._3<SModule, Integer, Integer>> checkDependenciesVersions(AbstractModule module) {
    module.validateLanguageVersions();
    List<Tuples._3<SModule, Integer, Integer>> result = ListSequence.fromList(new ArrayList<Tuples._3<SModule, Integer, Integer>>());
    for (SLanguage lang : SetSequence.fromSet(module.getUsedLanguages())) {
      if (module.getModuleDescriptor().getLanguageVersions().get(lang.getId()) != lang.getLanguageVersion()) {
        ListSequence.fromList(result).addElement(MultiTuple.<SModule,Integer,Integer>from(lang.getSourceModule(), module.getModuleDescriptor().getLanguageVersions().get(lang.getId()), as_7hm1hv_a0c0a0a0a0c0m(lang.getSourceModule(), Language.class).getLanguageVersion()));
      }
    }
    return result;
  }



  private static boolean eq_7hm1hv_a0a0a0a0a0b0g(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static <T> T as_7hm1hv_a0c0a0a0a0c0m(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
