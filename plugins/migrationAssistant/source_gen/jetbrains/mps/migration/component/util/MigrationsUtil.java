package jetbrains.mps.migration.component.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.project.AbstractModule;
import org.apache.log4j.Level;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.language.SLanguageId;
import jetbrains.mps.smodel.adapter.IdHelper;
import org.jetbrains.mps.openapi.module.SDependency;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MigrationsUtil {

  public static final String MIGRATIONS_MODEL_NAME = "migrations";


  public static String getMigrationModelName(SModule module) {
    return module.getModuleName() + "." + MIGRATIONS_MODEL_NAME;
  }

  public static SModel getMigrationModel(final SModule module) {
    Iterable<SModel> models = module.getModels();
    return Sequence.fromIterable(models).findFirst(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return eq_7hm1hv_a0a0a0a0a0b0e(it.getModelName(), module.getModuleName() + "." + MIGRATIONS_MODEL_NAME);
      }
    });
  }

  public static String getDescriptorFQName(SModule module) {
    return SModelOperations.getModelName(getMigrationModel(module)) + "." + getDescriptorClassName(module);
  }

  public static String getDescriptorClassName(SModule module) {
    return "MigrationDescriptorImpl";
  }

  public static Iterable<Tuples._3<SModule, Integer, Integer>> getDependenciesToMigrate(final AbstractModule module) {
    return Sequence.fromIterable(checkDependenciesVersions(module)).where(new IWhereFilter<Tuples._3<SModule, Integer, Integer>>() {
      public boolean accept(Tuples._3<SModule, Integer, Integer> item) {
        if ((int) item._1() > (int) item._2()) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("Module " + module + " depends on version " + (int) item._1() + " of module " + item._0() + " which is higher than available version (" + (int) item._2() + ")");
          }
        } else if ((int) item._1() < (int) item._2()) {
          return true;
        }
        return false;
      }
    });
  }

  public static Iterable<Tuples._3<SModule, Integer, Integer>> checkDependenciesVersions(AbstractModule module) {
    module.validateLanguageVersions();
    List<Tuples._3<SModule, Integer, Integer>> result = ListSequence.fromList(new ArrayList<Tuples._3<SModule, Integer, Integer>>());
    for (SLanguage lang : SetSequence.fromSet(module.getUsedLanguages())) {
      if (module.getModuleDescriptor().getLanguageVersions().get(lang.getId()) != lang.getLanguageVersion()) {
        ListSequence.fromList(result).addElement(MultiTuple.<SModule,Integer,Integer>from(lang.getSourceModule(), module.getModuleDescriptor().getLanguageVersions().get(lang.getId()), as_7hm1hv_a0c0a0a0a0c0i(lang.getSourceModule(), Language.class).getLanguageVersion()));
      }
    }
    return result;
  }

  public static void executeScript(MigrationScript script, AbstractModule module) {
    SLanguageId languageId = IdHelper.getLanguageId(script.getReference().getModuleReference().getModuleId());
    assert module.getModuleDescriptor().getLanguageVersions().get(languageId) == script.getReference().getFromVersion();
    script.execute(module);
    module.getModuleDescriptor().getLanguageVersions().put(languageId, script.getReference().getFromVersion() + 1);
    module.setChanged();
  }

  public static boolean isApplied(final MigrationScriptReference script, AbstractModule module) {
    return !(Sequence.fromIterable(MigrationsUtil.checkDependenciesVersions(module)).any(new IWhereFilter<Tuples._3<SModule, Integer, Integer>>() {
      public boolean accept(Tuples._3<SModule, Integer, Integer> it) {
        return eq_7hm1hv_a0a0a0a0a0a0a0k(it._0().getModuleReference(), script.getModuleReference()) && (int) it._1() <= script.getFromVersion();
      }
    }));
  }

  public static boolean isAppliedForAllMyDeps(final MigrationScriptReference script, final AbstractModule module) {
    Iterable<SDependency> declaredDependencies = module.getDeclaredDependencies();
    Set<SModule> dependencies = SetSequence.fromSetWithValues(new HashSet<SModule>(), Sequence.fromIterable(declaredDependencies).translate(new ITranslator2<SDependency, SModule>() {
      public Iterable<SModule> translate(SDependency it) {
        return new GlobalModuleDependenciesManager(module).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE);
      }
    }));
    SetSequence.fromSet(dependencies).addElement(module);
    return SetSequence.fromSet(dependencies).all(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return isApplied(script, (AbstractModule) it);
      }
    });
  }

  protected static Logger LOG = LogManager.getLogger(MigrationsUtil.class);

  private static boolean eq_7hm1hv_a0a0a0a0a0b0e(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static <T> T as_7hm1hv_a0c0a0a0a0c0i(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static boolean eq_7hm1hv_a0a0a0a0a0a0a0k(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
