package jetbrains.mps.migration.component.util;

/*Generated by MPS */

import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.vfs.IFile;
import java.io.OutputStreamWriter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.io.IOException;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.util.FileUtil;

public class MigrationDataUtil {
  public static void saveData(AbstractModule module, Iterable<Tuples._2<MigrationScriptReference, String>> data) {
    IFile file = getDataFile(module);
    try {
      OutputStreamWriter writer = new OutputStreamWriter(file.openOutputStream());
      for (Tuples._2<MigrationScriptReference, String> p : Sequence.fromIterable(data)) {
        writer.write(p._0().serialize());
        writer.write(":");
        writer.write(p._1());
        writer.write("\n");
      }
      writer.close();
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public static Iterable<Tuples._2<MigrationScriptReference, String>> loadData(AbstractModule module) {
    IFile file = getDataFile(module);
    List<Tuples._2<MigrationScriptReference, String>> result = ListSequence.fromList(new ArrayList<Tuples._2<MigrationScriptReference, String>>());
    try {
      BufferedReader reader = new BufferedReader(new InputStreamReader(file.openInputStream()));
      for (String line; (line = reader.readLine()) != null;) {
        int sepInd = line.indexOf(':');
        ListSequence.fromList(result).addElement(MultiTuple.<MigrationScriptReference,String>from(MigrationScriptReference.deserialize(line.substring(0, sepInd)), line.substring(sepInd + 1)));
      }
      reader.close();
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
    return result;
  }

  public static void addData(AbstractModule module, MigrationScriptReference script, String data) {
    List<Tuples._2<MigrationScriptReference, String>> loadedData = Sequence.fromIterable(loadData(module)).toListSequence();
    ListSequence.fromList(loadedData).addElement(MultiTuple.<MigrationScriptReference,String>from(script, data));
    saveData(module, loadedData);
  }

  public static String readData(AbstractModule module, final MigrationScriptReference script) {
    List<Tuples._2<MigrationScriptReference, String>> loadedData = Sequence.fromIterable(loadData(module)).toListSequence();
    return ListSequence.fromList(loadedData).where(new IWhereFilter<Tuples._2<MigrationScriptReference, String>>() {
      public boolean accept(Tuples._2<MigrationScriptReference, String> it) {
        return eq_hzite5_a0a0a0a0a0a0b0d(it._0(), script);
      }
    }).first()._1();
  }

  public static IFile getDataFile(AbstractModule module) {
    return FileSystem.getInstance().getFileByPath(FileUtil.getNameWithoutExtension(module.getDescriptorFile().getPath()) + ".migration");
  }

  private static boolean eq_hzite5_a0a0a0a0a0a0b0d(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
