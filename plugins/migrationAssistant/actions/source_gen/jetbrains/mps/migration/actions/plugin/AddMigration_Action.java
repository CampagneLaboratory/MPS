package jetbrains.mps.migration.actions.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.migration.component.util.MigrationsUtil;
import jetbrains.mps.smodel.Language;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Level;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.dialogs.project.creation.NewModelDialog;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.smodel.SModelStereotype;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class AddMigration_Action extends BaseAction {
  private static final Icon ICON = null;

  public AddMigration_Action() {
    super("Add Migration Script to Module", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (((SModule) MapSequence.fromMap(_params).get("module")) == null && ((SModel) MapSequence.fromMap(_params).get("migrationModel")) == null) {
      return false;
    }
    if (((SModel) MapSequence.fromMap(_params).get("migrationModel")) != null && MigrationsUtil.getMigrationModel(((SModel) MapSequence.fromMap(_params).get("migrationModel")).getModule()) != ((SModel) MapSequence.fromMap(_params).get("migrationModel"))) {
      return false;
    }
    // we cannot now create migration scripts in solutions 
    if (((SModule) MapSequence.fromMap(_params).get("module")) != null && !(((SModule) MapSequence.fromMap(_params).get("module")) instanceof Language)) {
      return false;
    }

    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "AddMigration", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("module", event.getData(MPSCommonDataKeys.MODULE));
    {
      SModel modelDescriptor = event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
      if (modelDescriptor == null) {
        return false;
      }
      MapSequence.fromMap(_params).put("migrationModel", modelDescriptor);
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      SModel migrationModel = ((SModel) MapSequence.fromMap(_params).get("migrationModel"));
      if (migrationModel == null) {
        migrationModel = MigrationsUtil.getMigrationModel(((SModule) MapSequence.fromMap(_params).get("module")));
      }
      if (migrationModel == null) {
        migrationModel = AddMigration_Action.this.createMigrationModel(_params);
      }
      if (migrationModel == null) {
        return;
      }
      SModule module = migrationModel.getModule();
      int currentVersion = ((Language) module).getLanguageVersion();
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "AddMigration", t);
      }
    }
  }

  private SModel createMigrationModel(final Map<String, Object> _params) {
    final Wrappers._T<NewModelDialog> dialog = new Wrappers._T<NewModelDialog>();
    ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        dialog.value = new NewModelDialog(((MPSProject) MapSequence.fromMap(_params).get("project")), (AbstractModule) ((SModule) MapSequence.fromMap(_params).get("module")), MigrationsUtil.getMigrationModelName(((SModule) MapSequence.fromMap(_params).get("module"))), SModelStereotype.NONE, true);
      }
    });
    dialog.value.show();
    return dialog.value.getResult();
  }

  protected static Logger LOG = LogManager.getLogger(AddMigration_Action.class);
}
