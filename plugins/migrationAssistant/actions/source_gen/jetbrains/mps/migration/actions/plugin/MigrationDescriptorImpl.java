package jetbrains.mps.migration.actions.plugin;

/*Generated by MPS */

import jetbrains.mps.migration.component.util.MigrationDescriptor;
import jetbrains.mps.migration.component.util.MigrationScript;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class MigrationDescriptorImpl implements MigrationDescriptor {
  private Iterable<MigrationScript> myScripts = ListSequence.fromList(new ArrayList<MigrationScript>());

  public Iterable<MigrationScript> getScripts(int fromVersion, int toVersion) {
    final Wrappers._int _fromVersion = new Wrappers._int(fromVersion);
    List<MigrationScript> result = ListSequence.fromList(new ArrayList<MigrationScript>());
    while (_fromVersion.value < toVersion) {
      MigrationScript nextScript = Sequence.fromIterable(myScripts).findFirst(new IWhereFilter<MigrationScript>() {
        public boolean accept(MigrationScript it) {
          return it.fromVersion() == _fromVersion.value;
        }
      });
      if (nextScript == null) {
        return null;
      }
      ListSequence.fromList(result).addElement(nextScript);
      _fromVersion.value = nextScript.toVersion();
    }
    if (_fromVersion.value == toVersion) {
      return result;
    } else {
      return null;
    }
  }
}
