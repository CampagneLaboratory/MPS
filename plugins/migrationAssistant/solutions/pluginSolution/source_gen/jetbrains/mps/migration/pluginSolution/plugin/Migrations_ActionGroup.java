package jetbrains.mps.migration.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.GeneratedActionGroup;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.migration.global.ProjectMigration;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.migration.global.ProjectMigrationsRegistry;
import com.intellij.openapi.extensions.PluginId;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.migration.component.util.MigrationComponent;
import jetbrains.mps.ide.migration.MigrationManager;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.smodel.query.CommandUtil;
import jetbrains.mps.smodel.query.QueryExecutionContext;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.migration.component.util.MigrationsUtil;
import jetbrains.mps.smodel.SLanguageHierarchy;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.migration.runtime.base.MigrationScript;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import org.jetbrains.annotations.Nullable;

public class Migrations_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = LogManager.getLogger(Migrations_ActionGroup.class);
  public static final String ID = "jetbrains.mps.migration.pluginSolution.plugin.Migrations_ActionGroup";
  private Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());
  public Migrations_ActionGroup() {
    super("Migrations", ID);
    this.setIsInternal(false);
    this.setPopup(true);
    try {
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }
  public void doUpdate(AnActionEvent event) {
    try {
      Migrations_ActionGroup.this.removeAll();

      Migrations_ActionGroup.this.addAction("jetbrains.mps.migration.pluginSolution.plugin.ExecuteRerunnableMigrations_Action");
      Migrations_ActionGroup.this.addSeparator();

      // project migrations 
      for (ProjectMigration pm : ListSequence.fromList(ProjectMigrationsRegistry.getInstance().getMigrations())) {
        Migrations_ActionGroup.this.addParameterizedAction(new RunProjectMigration_Action(pm), PluginId.getId("jetbrains.mps.migration.pluginSolution"), pm);
      }
      Migrations_ActionGroup.this.addSeparator();
      // language migrations 
      Project project = event.getData(MPSCommonDataKeys.PROJECT);
      MPSProject mpsProject = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      final MigrationComponent mc = ((MigrationComponent) project.getComponent(MigrationManager.class));
      Set<SLanguage> languages = SetSequence.fromSet(new HashSet<SLanguage>());
      {
        final SearchScope scope = CommandUtil.createScope(mpsProject);
        QueryExecutionContext context = new QueryExecutionContext() {
          public SearchScope getDefaultSearchScope() {
            return scope;
          }
        };
        for (SModule module : Sequence.fromIterable(CommandUtil.modules(CommandUtil.createConsoleScope(null, false, context))).where(new IWhereFilter<SModule>() {
          public boolean accept(SModule it) {
            return MigrationsUtil.isModuleMigrateable(it);
          }
        })) {
          SetSequence.fromSet(languages).addSequence(SetSequence.fromSet(new SLanguageHierarchy(module.getUsedLanguages()).getExtended()));
        }
      }
      SetSequence.fromSet(languages).visitAll(new IVisitor<SLanguage>() {
        public void visit(SLanguage it) {
          for (int ver = 0; ver < it.getLanguageVersion(); ver++) {
            MigrationScript script = mc.fetchScript(new MigrationScriptReference(it, ver), true);
            if (script == null) {
              continue;
            }
            Migrations_ActionGroup.this.addParameterizedAction(new RunMigration_Action(script), PluginId.getId("jetbrains.mps.migration.pluginSolution"), script);
          }
        }
      });
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }
  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }
  public boolean isStrict() {
    return false;
  }
}
