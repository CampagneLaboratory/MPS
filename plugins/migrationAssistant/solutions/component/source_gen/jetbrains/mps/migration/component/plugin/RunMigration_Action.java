package jetbrains.mps.migration.component.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.lang.migration.runtime.base.MigrationScript;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.lang.smodel.query.runtime.CommandUtil;
import jetbrains.mps.project.Project;
import jetbrains.mps.lang.smodel.query.runtime.QueryExecutionContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.module.SModule;

public class RunMigration_Action extends BaseAction {
  private static final Icon ICON = null;
  private MigrationScript script;
  public RunMigration_Action(MigrationScript script_par) {
    super("Run", "", ICON);
    this.script = script_par;
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    event.getPresentation().setText(RunMigration_Action.this.script.getCaption());
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    {
      final SearchScope scope = CommandUtil.createScope(((Project) event.getData(MPSCommonDataKeys.MPS_PROJECT)));
      QueryExecutionContext context = new QueryExecutionContext() {
        public SearchScope getDefaultSearchScope() {
          return scope;
        }
      };
      Sequence.fromIterable(CommandUtil.modules(CommandUtil.createConsoleScope(null, false, context))).visitAll(new IVisitor<SModule>() {
        public void visit(SModule it) {
          RunMigration_Action.this.script.execute(it);
        }
      });
    }
  }
  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(script_State((MigrationScript) this.script));
    res.append("!");
    return res.toString();
  }
  public static String script_State(MigrationScript object) {
    return object.getDescriptor().getLanguage().getQualifiedName() + ":" + object.getDescriptor().getFromVersion();
  }
}
