package jetbrains.mps.migration.component.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import org.apache.log4j.Level;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MigrationsUtil {
  public static String getDescriptorFQName(SModule module) {
    return module.getModuleName() + "." + LanguageAspect.MIGRATION.getName() + "." + BehaviorReflection.invokeNonVirtualStatic(String.class, SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.migration.structure.MigrationScript")), "call_getGeneratedClassName_8648538385393994830", new Object[]{});
  }
  public static boolean isMigrationNeeded(AbstractModule module, MigrationScriptReference languageVersions) {
    int currentVersion = languageVersions.getLanguage().getLanguageVersion();
    if (languageVersions.getFromVersion() > currentVersion) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Module " + module + " depends on version " + languageVersions.getFromVersion() + " of module " + languageVersions.getLanguage() + " which is higher than available version (" + currentVersion + ")");
      }
      return false;
    }
    return languageVersions.getFromVersion() < currentVersion;
  }
  public static Iterable<MigrationScriptReference> getLanguageVersions(SModule module) {
    List<MigrationScriptReference> result = ListSequence.fromList(new ArrayList<MigrationScriptReference>());
    for (SLanguage lang : SetSequence.fromSet(((AbstractModule) module).getAllUsedLanguages())) {
      int ver = ((AbstractModule) module).getUsedLanguageVersion(lang);
      if (ver != lang.getLanguageVersion()) {
        ListSequence.fromList(result).addElement(new MigrationScriptReference(lang, ver));
      }
    }
    return result;
  }
  public static boolean isApplied(MigrationScriptReference script, SModule module) {
    return !(((AbstractModule) module).getAllUsedLanguages().contains(script.getLanguage())) || script.getFromVersion() < module.getUsedLanguageVersion(script.getLanguage());
  }
  public static Set<SModule> getModuleDependencies(SModule module) {
    Set<SModule> dependencies = SetSequence.fromSetWithValues(new HashSet<SModule>(), new GlobalModuleDependenciesManager(module).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE));
    SetSequence.fromSet(dependencies).addElement(module);
    return dependencies;
  }
  public static boolean isAppliedForAllMyDeps(final MigrationScriptReference script, SModule module) {
    return SetSequence.fromSet(getModuleDependencies(module)).ofType(AbstractModule.class).all(new IWhereFilter<AbstractModule>() {
      public boolean accept(AbstractModule it) {
        return isApplied(script, it);
      }
    });
  }
  protected static Logger LOG = LogManager.getLogger(MigrationsUtil.class);
}
