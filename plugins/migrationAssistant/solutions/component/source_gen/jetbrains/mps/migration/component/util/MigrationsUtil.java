package jetbrains.mps.migration.component.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.apache.log4j.Level;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import java.util.Set;
import org.jetbrains.mps.openapi.module.SDependency;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MigrationsUtil {
  public static String getDescriptorFQName(SModule module) {
    return module.getModuleName() + "." + LanguageAspect.MIGRATION.getName() + "." + BehaviorReflection.invokeNonVirtualStatic(String.class, SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.migration.structure.MigrationScript")), "call_getGeneratedClassName_8648538385393994830", new Object[]{});
  }
  @Deprecated
  public static Iterable<Tuples._3<SModule, Integer, Integer>> getDependenciesToMigrate(final AbstractModule module) {
    return Sequence.fromIterable(getLanguageVersions(module)).where(new IWhereFilter<Tuples._3<SModule, Integer, Integer>>() {
      public boolean accept(Tuples._3<SModule, Integer, Integer> item) {
        return isMigrationNeeded(module, item);
      }
    });
  }
  public static boolean isMigrationNeeded(AbstractModule module, Tuples._3<SModule, Integer, Integer> languageVersions) {
    if ((int) languageVersions._1() > (int) languageVersions._2()) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Module " + module + " depends on version " + (int) languageVersions._1() + " of module " + languageVersions._0() + " which is higher than available version (" + (int) languageVersions._2() + ")");
      }
    } else if ((int) languageVersions._1() < (int) languageVersions._2()) {
      return true;
    }
    return false;
  }
  public static Iterable<Tuples._3<SModule, Integer, Integer>> getLanguageVersions(AbstractModule module) {
    module.validateLanguageVersions();
    List<Tuples._3<SModule, Integer, Integer>> result = ListSequence.fromList(new ArrayList<Tuples._3<SModule, Integer, Integer>>());
    for (SLanguage lang : SetSequence.fromSet(module.getUsedLanguages())) {
      Integer ver = module.getModuleDescriptor().getLanguageVersions().get(lang);
      if (ver == null) {
        if (LOG.isEnabledFor(Level.WARN)) {
          LOG.warn("no version for language " + lang.getQualifiedName() + " in " + module.getModuleName());
        }
      } else {
        if (ver != lang.getLanguageVersion()) {
          ListSequence.fromList(result).addElement(MultiTuple.<SModule,Integer,Integer>from(lang.getSourceModule(), ver, as_7hm1hv_a0c0a0a0a0a1a2a3(lang.getSourceModule(), Language.class).getLanguageVersion()));
        }
      }
    }
    return result;
  }
  public static boolean isApplied(final MigrationScriptReference script, AbstractModule module) {
    return !(Sequence.fromIterable(MigrationsUtil.getLanguageVersions(module)).any(new IWhereFilter<Tuples._3<SModule, Integer, Integer>>() {
      public boolean accept(Tuples._3<SModule, Integer, Integer> it) {
        return eq_7hm1hv_a0a0a0a0a0a0a0e(it._0().getModuleReference(), script.getModuleReference()) && (int) it._1() <= script.getFromVersion();
      }
    }));
  }
  public static Set<SModule> getModuleDependencies(final SModule module) {
    Iterable<SDependency> declaredDependencies = module.getDeclaredDependencies();
    Set<SModule> dependencies = SetSequence.fromSetWithValues(new HashSet<SModule>(), Sequence.fromIterable(declaredDependencies).translate(new ITranslator2<SDependency, SModule>() {
      public Iterable<SModule> translate(SDependency it) {
        return new GlobalModuleDependenciesManager(module).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE);
      }
    }));
    SetSequence.fromSet(dependencies).addElement(module);
    return dependencies;
  }
  public static boolean isAppliedForAllMyDeps(final MigrationScriptReference script, SModule module) {
    return SetSequence.fromSet(getModuleDependencies(module)).all(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return isApplied(script, (AbstractModule) it);
      }
    });
  }
  protected static Logger LOG = LogManager.getLogger(MigrationsUtil.class);
  private static <T> T as_7hm1hv_a0c0a0a0a0a1a2a3(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static boolean eq_7hm1hv_a0a0a0a0a0a0a0e(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
