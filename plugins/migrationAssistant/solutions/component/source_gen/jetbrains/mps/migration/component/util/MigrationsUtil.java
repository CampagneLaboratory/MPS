package jetbrains.mps.migration.component.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.project.Solution;
import jetbrains.mps.ide.migration.ScriptApplied;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.ide.migration.MigrationScriptApplied;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.ide.migration.RefactoringLogApplied;
import jetbrains.mps.lang.migration.runtime.base.RefactoringLogReference;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import jetbrains.mps.smodel.SLanguageHierarchy;

public class MigrationsUtil {
  public static Iterable<SModule> getMigrateableModulesFromProject(Project p) {
    Iterable<? extends SModule> modules = p.getModulesWithGenerators();
    return Sequence.fromIterable(modules).where(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return MigrationsUtil.isModuleMigrateable(it);
      }
    }).ofType(SModule.class);
  }

  public static boolean isModuleMigrateable(SModule m) {
    return !((m instanceof DevKit)) && !((Solution.isBootstrapSolution(m.getModuleReference()))) && !((m.isReadOnly()));
  }

  public static Iterable<ScriptApplied.ScriptAppliedReference> getAllSteps(SModule module) {
    List<ScriptApplied.ScriptAppliedReference> result = ListSequence.fromList(new ArrayList<ScriptApplied.ScriptAppliedReference>());
    for (SLanguage lang : SetSequence.fromSet(getUsedLanguages(module))) {
      int currentLangVersion = lang.getLanguageVersion();
      int ver = module.getUsedLanguageVersion(lang);

      ver = Math.max(ver, 0);
      currentLangVersion = Math.max(currentLangVersion, 0);

      for (int i = ver; i < currentLangVersion; i++) {
        ListSequence.fromList(result).addElement(new MigrationScriptApplied.MigrationScriptAppliedReference(new MigrationScriptReference(lang, i), module));
      }
    }
    for (SModule dep : SetSequence.fromSet(getModuleDependencies(module))) {
      int currentDepVersion = ((AbstractModule) dep).getModuleVersion();
      int ver = ((AbstractModule) module).getDependencyVersion(dep);

      ver = Math.max(ver, 0);
      currentDepVersion = Math.max(currentDepVersion, 0);

      for (int i = ver; i < currentDepVersion; i++) {
        ListSequence.fromList(result).addElement(new RefactoringLogApplied.RefactoringLogAppliedReference(new RefactoringLogReference(dep, i), module));
      }
    }
    return result;
  }
  public static Set<SModule> getModuleDependencies(SModule module) {
    Set<SModule> dependencies = SetSequence.fromSetWithValues(new HashSet<SModule>(), new GlobalModuleDependenciesManager(module).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE));
    SetSequence.fromSet(dependencies).addElement(module);
    return dependencies;
  }
  public static Set<SLanguage> getUsedLanguages(SModule module) {
    return new SLanguageHierarchy(module.getUsedLanguages()).getExtended();
  }
}
