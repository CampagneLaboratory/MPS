package jetbrains.mps.ide.migration;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;
import jetbrains.mps.ide.findusages.model.SearchResults;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.adapter.structure.concept.SAbstractConceptAdapter;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.util.IterableUtil;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.model.SReference;

public class MigrationCheckUtil {
  public static _FunctionTypes._void_P0_E0 getShowUsagesCallback(final Project p) {
    return new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        // show nodes with no language defined for them 
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            jetbrains.mps.project.Project mpsProject = ProjectHelper.toMPSProject(p);
            Iterable<SModule> modules = ((Iterable<SModule>) mpsProject.getModulesWithGenerators());
            Iterable<SNode> problems = MigrationCheckUtil.getProblemNodes(modules);
            List<SearchResult<jetbrains.mps.smodel.SNode>> results = Sequence.fromIterable(problems).select(new ISelector<SNode, SearchResult<jetbrains.mps.smodel.SNode>>() {
              public SearchResult<jetbrains.mps.smodel.SNode> select(SNode it) {
                return new SearchResult<jetbrains.mps.smodel.SNode>(((jetbrains.mps.smodel.SNode) it), "Language not found");
              }
            }).toListSequence();
            p.getComponent(UsagesViewTool.class).show(new SearchResults<jetbrains.mps.smodel.SNode>(Collections.<jetbrains.mps.smodel.SNode>emptySet(), results), "");
          }
        });
      }
    };
  }

  public static Iterable<SNode> getProblemNodes(Iterable<SModule> modules) {
    return Sequence.fromIterable(modules).translate(new ITranslator2<SModule, SModel>() {
      public Iterable<SModel> translate(SModule it) {
        return it.getModels();
      }
    }).ofType(SModel.class).translate(new ITranslator2<SModel, SNode>() {
      public Iterable<SNode> translate(SModel it) {
        return SModelOperations.nodes(it, null);
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        SAbstractConceptAdapter concept = (SAbstractConceptAdapter) it.getConcept();
        if (concept.getConceptDescriptor() == null) {
          return true;
        }

        // in case of props, refs, links, list should be better than set 

        List<SProperty> props = IterableUtil.asList(concept.getProperties());
        for (SProperty p : Sequence.fromIterable(it.getProperties())) {
          if (!(props.contains(p))) {
            return true;
          }
        }

        List<SContainmentLink> links = IterableUtil.asList(concept.getContainmentLinks());
        for (SNode n : Sequence.fromIterable(it.getChildren())) {
          if (!(links.contains(n.getContainmentLink()))) {
            return true;
          }
        }

        List<SReferenceLink> refs = IterableUtil.asList(concept.getReferenceLinks());
        for (SReference r : Sequence.fromIterable(it.getReferences())) {
          if (!(refs.contains(r.getLink()))) {
            return true;
          }
        }
        return false;
      }
    });
  }
}
