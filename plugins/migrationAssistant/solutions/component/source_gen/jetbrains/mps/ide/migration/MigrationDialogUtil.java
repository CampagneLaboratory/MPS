package jetbrains.mps.ide.migration;

/*Generated by MPS */

import com.intellij.openapi.project.Project;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.migration.global.ProjectMigration;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.intellij.openapi.ui.Messages;

public class MigrationDialogUtil {
  private static final int MIGRATIONS_TO_SHOW_COUNT = 3;

  public static boolean showMigrationConfirmation(Project p, final Iterable<SModule> modules, final MigrationManager m) {
    final StringBuilder text = new StringBuilder();
    text.append("This project needs to be migrated.\n");

    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        Iterable<String> migrations;
        migrations = Sequence.fromIterable(m.getProjectMigrationsToApply()).select(new ISelector<ProjectMigration, String>() {
          public String select(ProjectMigration it) {
            return it.getDescription();
          }
        });
        if (Sequence.fromIterable(migrations).isNotEmpty()) {
          text.append("  Project migrations to be executed:\n");
          Sequence.fromIterable(migrations).take(MIGRATIONS_TO_SHOW_COUNT).visitAll(new IVisitor<String>() {
            public void visit(String it) {
              text.append("    ").append(it).append("\n");
            }
          });
          if (Sequence.fromIterable(migrations).count() > MIGRATIONS_TO_SHOW_COUNT) {
            text.append("    ...and ").append(Sequence.fromIterable(migrations).count() - MIGRATIONS_TO_SHOW_COUNT).append(" more\n");
          }
        }

        migrations = ListSequence.fromList(m.getModuleMigrationsToApply(modules)).select(new ISelector<ScriptApplied.ScriptAppliedReference, String>() {
          public String select(ScriptApplied.ScriptAppliedReference it) {
            return it.getKindDescription(it.resolve(m.getMigrationComponent(), false));
          }
        }).distinct();
        if (Sequence.fromIterable(migrations).isNotEmpty()) {
          text.append("  Language migrations to be executed:\n");
          Sequence.fromIterable(migrations).take(MIGRATIONS_TO_SHOW_COUNT).visitAll(new IVisitor<String>() {
            public void visit(String it) {
              text.append("    ").append(it).append("\n");
            }
          });
          if (Sequence.fromIterable(migrations).count() > MIGRATIONS_TO_SHOW_COUNT) {
            text.append("    ...and ").append(Sequence.fromIterable(migrations).count() - MIGRATIONS_TO_SHOW_COUNT).append(" more\n");
          }
        }
      }
    });

    text.append("\nIn case the migration is postponed, this notification will not appear until the project is reopened.\n");
    text.append("Migration Assistant can be invoked at any time by clicking Tools->Run Migration Assistant.\n");
    text.append("Would you like to reload project and start the migration immediately?");

    int result = Messages.showYesNoDialog(p, text.toString(), "Migration Required", "Migrate", "Postpone", null);
    return result == Messages.YES;
  }
  public static void showNoMigrationMessage(Project p) {
    Messages.showMessageDialog(p, "None of the modules in project require migration.\n" + "Migration assistant will not be started.", "Migration Not Required", null);
  }
}
