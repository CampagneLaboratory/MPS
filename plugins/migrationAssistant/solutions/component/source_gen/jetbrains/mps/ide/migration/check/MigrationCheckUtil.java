package jetbrains.mps.ide.migration.check;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.Collection;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Set;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConceptFeature;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.util.IterableUtil;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.module.ReloadableModule;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.classloading.ModuleClassLoaderSupport;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.module.SDependency;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.IFileUtils;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.util.FileUtil;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.adapter.structure.language.SLanguageAdapter;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class MigrationCheckUtil {
  public static boolean haveProblems(Iterable<SModule> modules, @Nullable _FunctionTypes._void_P1_E0<? super Double> progressCallback) {
    return CollectionSequence.fromCollection(getProblems(modules, progressCallback, 1)).isNotEmpty();
  }

  public static Collection<Problem> getProblems(Iterable<SModule> modules, @Nullable _FunctionTypes._void_P1_E0<? super Double> progressCallback, int maxErrors) {
    List<Problem> result = ListSequence.fromList(new ArrayList<Problem>());

    Collection<DependencyProblem> badModuleProblems = findBadModules(modules, maxErrors);
    ListSequence.fromList(result).addSequence(CollectionSequence.fromCollection(badModuleProblems));

    maxErrors -= CollectionSequence.fromCollection(badModuleProblems).count();
    if (maxErrors == 0) {
      return result;
    }

    Collection<BinaryModelProblem> badModelProblems = findBinaryModels(modules, maxErrors);
    ListSequence.fromList(result).addSequence(CollectionSequence.fromCollection(badModelProblems));

    maxErrors -= CollectionSequence.fromCollection(badModelProblems).count();
    if (maxErrors == 0) {
      return result;
    }

    // find missing languages 
    Collection<LanguageMissingProblem> missingLangProblems = findMissingLanguages(modules, maxErrors);
    ListSequence.fromList(result).addSequence(CollectionSequence.fromCollection(missingLangProblems));

    maxErrors -= CollectionSequence.fromCollection(missingLangProblems).count();
    if (maxErrors == 0) {
      return result;
    }

    Set<SLanguage> missingLangs = SetSequence.fromSet(new HashSet<SLanguage>());
    SetSequence.fromSet(missingLangs).addSequence(CollectionSequence.fromCollection(missingLangProblems).select(new ISelector<LanguageMissingProblem, SLanguage>() {
      public SLanguage select(LanguageMissingProblem it) {
        return it.getLanguage();
      }
    }));

    if (progressCallback != null) {
      progressCallback.invoke(0.1);
    }

    // find missing concepts, when language's not missing 
    // find missing concept features when concept's not mising 
    Set<SAbstractConcept> missingConcepts = SetSequence.fromSet(new HashSet<SAbstractConcept>());
    Set<SConceptFeature> missingFeatures = SetSequence.fromSet(new HashSet<SConceptFeature>());

    int modulesCount = Sequence.fromIterable(modules).count();
    int processedModules = 0;
    for (SModule module : Sequence.fromIterable(modules)) {
      for (SNode node : Sequence.fromIterable(allNodes(module.getModels()))) {
        SConcept concept = node.getConcept();
        if (!(concept.isValid())) {
          if (SetSequence.fromSet(missingLangs).contains(concept.getLanguage()) || SetSequence.fromSet(missingConcepts).contains(concept)) {
            continue;
          }
          SetSequence.fromSet(missingConcepts).addElement(concept);
          ListSequence.fromList(result).addElement(new ConceptMissingProblem(concept, node));

          maxErrors--;
          if (maxErrors == 0) {
            return result;
          }

          continue;
        }

        // in case of props, refs, links, list should be better than set 
        List<SProperty> props = IterableUtil.asList(concept.getProperties());
        for (SProperty p : Sequence.fromIterable(node.getProperties())) {
          if (props.contains(p) || SetSequence.fromSet(missingFeatures).contains(p)) {
            continue;
          }
          SetSequence.fromSet(missingFeatures).addElement(p);
          ListSequence.fromList(result).addElement(new ConceptFeatureMissingProblem(p, node));

          maxErrors--;
          if (maxErrors == 0) {
            return result;
          }
        }

        List<SContainmentLink> links = IterableUtil.asList(concept.getContainmentLinks());
        for (SNode n : Sequence.fromIterable(node.getChildren())) {
          SContainmentLink l = n.getContainmentLink();
          if (links.contains(l) || SetSequence.fromSet(missingFeatures).contains(l)) {
            continue;
          }
          SetSequence.fromSet(missingFeatures).addElement(l);
          ListSequence.fromList(result).addElement(new ConceptFeatureMissingProblem(l, node));

          maxErrors--;
          if (maxErrors == 0) {
            return result;
          }
        }

        List<SReferenceLink> refs = IterableUtil.asList(concept.getReferenceLinks());
        for (SReference r : Sequence.fromIterable(node.getReferences())) {
          SReferenceLink l = r.getLink();
          if (refs.contains(l) || SetSequence.fromSet(missingFeatures).contains(l)) {
            continue;
          }
          SetSequence.fromSet(missingFeatures).addElement(l);
          ListSequence.fromList(result).addElement(new ConceptFeatureMissingProblem(l, node));

          maxErrors--;
          if (maxErrors == 0) {
            return result;
          }
        }
      }

      processedModules++;
      if (progressCallback != null) {
        progressCallback.invoke(0.9 * processedModules / modulesCount);
      }
    }

    return result;
  }

  private static Collection<DependencyProblem> findBadModules(Iterable<SModule> modules, int maxErrors) {
    final List<DependencyProblem> rv = ListSequence.fromList(new ArrayList<DependencyProblem>());
    Sequence.fromIterable(modules).ofType(ReloadableModule.class).where(new IWhereFilter<ReloadableModule>() {
      public boolean accept(ReloadableModule it) {
        return ModuleClassLoaderSupport.canCreate(it);
      }
    }).visitAll(new IVisitor<ReloadableModule>() {
      public void visit(final ReloadableModule module) {
        Iterable<SDependency> deps = module.getDeclaredDependencies();
        Sequence.fromIterable(deps).where(new IWhereFilter<SDependency>() {
          public boolean accept(SDependency it) {
            return it.getTarget() == null;
          }
        }).visitAll(new IVisitor<SDependency>() {
          public void visit(SDependency dep) {
            ListSequence.fromList(rv).addElement(new DependencyProblem(module, String.format("Unresolved dependency in module %s: Module %s not found in repository", module.getModuleName(), dep.getTargetModule().getModuleName())));
          }
        });
      }
    });
    return ListSequence.fromList(rv).take(maxErrors).toListSequence();
  }

  private static Collection<BinaryModelProblem> findBinaryModels(Iterable<SModule> modules, int maxErrors) {
    return Sequence.fromIterable(modules).where(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return !(it.isPackaged());
      }
    }).ofType(AbstractModule.class).translate(new ITranslator2<AbstractModule, BinaryModelProblem>() {
      public Iterable<BinaryModelProblem> translate(AbstractModule it) {
        return getBinaryModelsUnder(it);
      }
    }).take(maxErrors).toListSequence();
  }

  public static Collection<BinaryModelProblem> getBinaryModelsUnder(final AbstractModule module) {
    List<BinaryModelProblem> rv = ListSequence.fromList(new ArrayList<BinaryModelProblem>());

    IFile moduleFile = module.getDescriptorFile();
    if (moduleFile == null) {
      return rv;
    }

    List<IFile> allFiles = IFileUtils.getAllFiles(moduleFile.getParent());
    Iterable<IFile> binFiles = ListSequence.fromList(allFiles).where(new IWhereFilter<IFile>() {
      public boolean accept(IFile it) {
        return MPSExtentions.MODEL_BINARY.equals(FileUtil.getExtension(it.getName()));
      }
    });
    ListSequence.fromList(rv).addSequence(Sequence.fromIterable(binFiles).select(new ISelector<IFile, BinaryModelProblem>() {
      public BinaryModelProblem select(IFile it) {
        return new BinaryModelProblem(module, String.format("Can't load binary model: module %s, file %s. Convert the model in MPS 3.1 or remove the model file before migrating. See https://youtrack.jetbrains.com/issue/MPS-21587", module.getModuleName(), it.getPath()));
      }
    }));

    return rv;
  }

  private static Collection<LanguageMissingProblem> findMissingLanguages(Iterable<SModule> modules, int maxErrors) {
    // we can add here an additional chank for "used", "exported", "generated into" languages etc.,  
    // but I'm not sure this is needed. All we need in migration is working concepts. 

    // the node in the map is an example of language use to show it to the user 
    final Map<SLanguage, SNode> problemLangs = MapSequence.fromMap(new HashMap<SLanguage, SNode>());
    Sequence.fromIterable(allNodes(Sequence.fromIterable(modules).translate(new ITranslator2<SModule, SModel>() {
      public Iterable<SModel> translate(SModule it) {
        return it.getModels();
      }
    }))).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SLanguage lang = it.getConcept().getLanguage();
        if (((SLanguageAdapter) lang).getLanguageDescriptor() == null) {
          MapSequence.fromMap(problemLangs).put(lang, it);
        }
      }
    });

    final Set<LanguageMissingProblem> problems = SetSequence.fromSet(new HashSet<LanguageMissingProblem>());
    MapSequence.fromMap(problemLangs).take(maxErrors).visitAll(new IVisitor<IMapping<SLanguage, SNode>>() {
      public void visit(IMapping<SLanguage, SNode> it) {
        if (it.key().getSourceModule() == null) {
          SetSequence.fromSet(problems).addElement(new LanguageAbsentInRepoProblem(it.key(), it.value()));
        } else {
          SetSequence.fromSet(problems).addElement(new LanguageNotLoadedProblem(it.key(), it.value()));
        }
      }
    });
    return problems;
  }

  private static Iterable<SNode> allNodes(Iterable<SModel> mods) {
    return Sequence.fromIterable(mods).ofType(SModel.class).translate(new ITranslator2<SModel, SNode>() {
      public Iterable<SNode> translate(SModel it) {
        return SModelOperations.nodes(it, null);
      }
    });
  }
}
