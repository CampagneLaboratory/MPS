package jetbrains.mps.ide.migration.wizard;

/*Generated by MPS */

import jetbrains.mps.ide.migration.MigrationManager;
import com.intellij.ui.components.JBList;
import java.util.Set;
import java.util.HashSet;
import com.intellij.openapi.project.Project;
import javax.swing.JLabel;
import java.awt.BorderLayout;
import javax.swing.DefaultListModel;
import java.util.Collections;
import javax.swing.JPanel;
import javax.swing.BorderFactory;
import com.intellij.ui.components.JBScrollPane;
import javax.swing.SwingUtilities;
import jetbrains.mps.persistence.PersistenceRegistry;
import jetbrains.mps.ide.ThreadUtils;

public class MigrationsProgressStep extends MigrationStep {
  public static final String ID = "progress";
  private boolean myFinished;
  private boolean[] mySuccess;
  private MigrationManager myManager;
  private JBList myList;
  private Set<String> myExecuted = new HashSet<String>();
  public MigrationsProgressStep(Project project, MigrationManager manager, boolean[] success) {
    super(project, "Migration In Progress", ID);
    myManager = manager;
    mySuccess = success;
    createComponent();
  }
  @Override
  protected final void createComponent() {
    super.createComponent();
    myComponent.add(new JLabel("Applying migrations:"), BorderLayout.NORTH);
    myList = new JBList(new DefaultListModel());
    myList.setCellRenderer(new MigrationsListRenderer(myExecuted, Collections.emptySet()));
    JPanel listPanel = new JPanel(new BorderLayout(5, 5));
    listPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(0, 0, 2, 0), BorderFactory.createEtchedBorder()));
    listPanel.add(new JBScrollPane(myList), BorderLayout.CENTER);
    myComponent.add(listPanel, BorderLayout.CENTER);
  }
  @Override
  public Runnable getAutostartTask() {
    return new Runnable() {
      public void run() {
        doRun();
      }
    };
  }
  private void doRun() {
    // if this assert fails, following invokeLater()s is not needed 
    assert !(SwingUtilities.isEventDispatchThread());
    PersistenceRegistry.getInstance().disableFastFindUsages();
    mySuccess[0] = true;
    do {
      final MigrationManager.MigrationState result = myManager.nextStep();
      if (result instanceof MigrationManager.Step) {
        final String step = ((MigrationManager.Step) result).getDescription();
        final DefaultListModel model = (DefaultListModel) myList.getModel();
        ThreadUtils.runInUIThreadAndWait(new Runnable() {
          @Override
          public void run() {
            model.addElement(step);
            myList.ensureIndexIsVisible(model.indexOf(step));
            myList.repaint();
          }
        });
        ThreadUtils.runInUIThreadAndWait(new Runnable() {
          @Override
          public void run() {
            mySuccess[0] = ((MigrationManager.Step) result).execute();
          }
        });
      } else
      if (result instanceof MigrationManager.Conflict) {
        mySuccess[0] = false;
      } else
      if (result instanceof MigrationManager.Error) {
        mySuccess[0] = false;
      } else
      if (result instanceof MigrationManager.Finished) {
        break;
      } else {
        assert false;
      }
    } while (mySuccess[0]);
    PersistenceRegistry.getInstance().enableFastFindUsages();
    myFinished = true;
  }
  @Override
  public Object getNextStepId() {
    if (mySuccess[0]) {
      return MigrationsFinishedStep.ID;
    } else {
      return MigrationsErrorStep.ID;
    }
  }
  @Override
  public Object getPreviousStepId() {
    return null;
  }
  @Override
  public boolean isComplete() {
    return myFinished;
  }
  @Override
  public boolean canBeCancelled() {
    return false;
  }
}
