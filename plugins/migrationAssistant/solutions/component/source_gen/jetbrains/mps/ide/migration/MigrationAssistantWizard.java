package jetbrains.mps.ide.migration;

/*Generated by MPS */

import com.intellij.ide.wizard.AbstractWizardEx;
import com.intellij.openapi.project.Project;
import java.util.Arrays;
import jetbrains.mps.ide.migration.wizard.InitialStep;
import jetbrains.mps.ide.migration.wizard.MigrationsProgressStep;
import jetbrains.mps.ide.migration.wizard.MigrationsErrorStep;
import java.awt.Dimension;
import jetbrains.mps.ide.migration.wizard.MigrationStep;
import com.intellij.openapi.application.ApplicationManager;
import javax.swing.SwingUtilities;

public class MigrationAssistantWizard extends AbstractWizardEx {
  public MigrationAssistantWizard(Project project, MigrationManager manager) {
    super("Migration Assistant Wizard", project, Arrays.asList(new InitialStep(project), new MigrationsProgressStep(project, manager), new MigrationsErrorStep(project)));
    Dimension oldSize = super.getPreferredSize();
    setSize(((int) oldSize.getWidth()), ((int) (oldSize.getHeight() + 90)));
  }

  @Override
  public boolean isAutoAdjustable() {
    return false;
  }
  @Override
  protected void updateStep() {
    super.updateStep();
    getCancelButton().setEnabled(((MigrationStep) getCurrentStepObject()).canBeCancelled());
  }
  @Override
  protected void doNextAction() {
    super.doNextAction();
    final Runnable task = ((MigrationStep) getCurrentStepObject()).getAutostartTask();
    if (task == null) {
      return;
    }

    ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {
      public void run() {
        task.run();
        SwingUtilities.invokeLater(new Runnable() {
          public void run() {
            updateStep();
          }
        });
      }
    });

  }
  public boolean isFinishSuccessful() {
    return ((MigrationsProgressStep) mySteps.get(1)).isSuccessfull();
  }
}
