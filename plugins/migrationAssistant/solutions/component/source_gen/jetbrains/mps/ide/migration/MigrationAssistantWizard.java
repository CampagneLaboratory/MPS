package jetbrains.mps.ide.migration;

/*Generated by MPS */

import com.intellij.ide.wizard.AbstractWizardEx;
import com.intellij.openapi.project.Project;
import java.util.Arrays;
import jetbrains.mps.ide.migration.wizard.InitialStep;
import jetbrains.mps.ide.migration.wizard.MigrationsProgressStep;
import jetbrains.mps.ide.migration.wizard.MigrationsFinishedStep;
import jetbrains.mps.ide.migration.wizard.MigrationsErrorStep;
import jetbrains.mps.ide.migration.wizard.MigrationStep;
import com.intellij.openapi.application.ApplicationManager;
import javax.swing.SwingUtilities;

public class MigrationAssistantWizard extends AbstractWizardEx {
  public MigrationAssistantWizard(Project project, MigrationManager manager, boolean[] success) {
    super("Migration Assistant Wizard", project, Arrays.asList(new InitialStep(project), new MigrationsProgressStep(project, manager, success), new MigrationsFinishedStep(project), new MigrationsErrorStep(project)));
  }
  @Override
  protected void updateStep() {
    super.updateStep();
    getCancelButton().setEnabled(((MigrationStep) getCurrentStepObject()).canBeCancelled());
  }
  @Override
  protected void doNextAction() {
    super.doNextAction();
    final Runnable task = ((MigrationStep) getCurrentStepObject()).getAutostartTask();
    if (task != null) {
      ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {
        @Override
        public void run() {
          task.run();
          SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
              updateStep();
            }
          });
        }
      });
    }
  }
}
