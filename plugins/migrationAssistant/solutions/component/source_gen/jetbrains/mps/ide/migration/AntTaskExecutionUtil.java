package jetbrains.mps.ide.migration;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.migration.component.util.MigrationsUtil;
import jetbrains.mps.ide.migration.check.MigrationCheckUtil;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.MPSModuleRepository;

public class AntTaskExecutionUtil {
  public static boolean migrate(final Project project) throws Exception {
    MigrationManager m = ProjectHelper.toIdeaProject(project).getComponent(MigrationManager.class);
    if (!(m.isMigrationRequired())) {
      return false;
    }

    while (true) {
      // we don't know which options are "better" so we "select" no one 
      MigrationManager.MigrationStep step = m.nextProjectStep(MapSequence.fromMap(new HashMap<String, Object>()), true);
      if (step == null) {
        break;
      }
      if (!(step.execute())) {
        throw new Exception("Problem on executing cleanup migrations");
      }
    }

    List<Tuples._3<SModule, SLanguage, Integer>> missingMigrations = m.getMissingMigrations();
    if (ListSequence.fromList(missingMigrations).isNotEmpty()) {
      throw new Exception("Some migrations are missing");
    }

    final Wrappers._boolean ok = new Wrappers._boolean(true);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        Iterable<SModule> modules = MigrationsUtil.getMigrateableModulesFromProject(project);
        ok.value = !(MigrationCheckUtil.haveProblems(modules, new _FunctionTypes._void_P1_E0<Double>() {
          public void invoke(Double fraction) {
          }
        }));
      }
    });
    if (!(ok.value)) {
      throw new Exception("Pre-check failed");
    }

    while (true) {
      MigrationManager.MigrationStep step = m.nextProjectStep(MapSequence.fromMap(new HashMap<String, Object>()), false);
      if (step == null) {
        break;
      }
      if (!(step.execute())) {
        throw new Exception("Problem on executing project migrations");
      }
    }

    while (true) {
      MigrationManager.MigrationStep step = m.nextLanguageStep();
      if (step == null) {
        break;
      }
      if (!(step.execute())) {
        throw new Exception("Problem on executing language migrations");
      }
    }

    ModelAccess.instance().runWriteInEDT(new Runnable() {
      public void run() {
        MPSModuleRepository.getInstance().saveAll();
      }
    });

    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        Iterable<SModule> modules = MigrationsUtil.getMigrateableModulesFromProject(project);
        ok.value = MigrationCheckUtil.haveProblems(modules, new _FunctionTypes._void_P1_E0<Double>() {
          public void invoke(Double fraction) {
          }
        });
      }
    });
    if (!(ok.value)) {
      throw new Exception("Post-check failed");
    }

    return true;
  }
}
