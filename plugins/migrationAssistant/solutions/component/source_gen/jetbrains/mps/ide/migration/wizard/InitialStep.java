package jetbrains.mps.ide.migration.wizard;

/*Generated by MPS */

import java.util.Map;
import java.util.HashMap;
import javax.swing.JComponent;
import com.intellij.openapi.project.Project;
import javax.swing.JPanel;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.util.ui.JBInsets;
import java.awt.BorderLayout;
import com.intellij.ui.IdeBorderFactory;
import javax.swing.JTextPane;
import com.intellij.openapi.ui.Messages;
import java.awt.Dimension;
import com.intellij.uiDesigner.core.GridConstraints;
import javax.swing.BoxLayout;
import java.util.List;
import jetbrains.mps.migration.global.ProjectMigration;
import jetbrains.mps.migration.global.ProjectMigrationsRegistry;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.migration.global.ProjectMigrationWithOptions;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.migration.global.ProjectOptionsRegistry;
import com.intellij.ide.wizard.AbstractWizardStepEx;
import com.intellij.ide.wizard.CommitStepException;

public class InitialStep extends MigrationStep {
  public static final String ID = "initial";

  /**
   * due to wizard architecture we need this hacky way of passing data from one step to another
   */
  private static final Map<String, Object> ourOptions = new HashMap<String, Object>();

  private Map<String, JComponent> myComponents = new HashMap<String, JComponent>();

  public InitialStep(Project project) {
    super(project, "Migration Required", ID);
    createComponent();
  }

  @Override
  protected final void createComponent() {
    super.createComponent();
    JPanel pagePanel = new JPanel(new GridLayoutManager(2, 1, new JBInsets(5, 5, 5, 0), -1, -1));
    myComponent.add(pagePanel, BorderLayout.CENTER);

    JPanel infoHolder = new JPanel(new BorderLayout());
    infoHolder.setBorder(IdeBorderFactory.createTitledBorder("Description", true));
    JTextPane info = new JTextPane();
    Messages.installHyperlinkSupport(info);
    info.setText("Welcome to Migration Assistant!<br>" + "MPS has detected that your project requires migration before it can be used with this version of the product.<br>" + "This wizard will guide you through the migration process. It's going to take a while.<br>" + "Select Next to proceed with migration or Cancel if you wish to postpone it.");
    info.setPreferredSize(new Dimension(300, 220));
    infoHolder.add(info, BorderLayout.CENTER);
    pagePanel.add(infoHolder, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null));

    final JPanel settingsPanel = new JPanel();
    settingsPanel.setLayout(new BoxLayout(settingsPanel, BoxLayout.Y_AXIS));
    settingsPanel.setBorder(IdeBorderFactory.createTitledBorder("Settings", true));
    pagePanel.add(settingsPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null));

    List<ProjectMigration> pMig = ProjectMigrationsRegistry.getInstance().getMigrations();
    ListSequence.fromList(pMig).ofType(ProjectMigrationWithOptions.class).where(new IWhereFilter<ProjectMigrationWithOptions>() {
      public boolean accept(ProjectMigrationWithOptions it) {
        return it.shouldBeExecuted(ProjectHelper.toMPSProject(myProject));
      }
    }).translate(new ITranslator2<ProjectMigrationWithOptions, String>() {
      public Iterable<String> translate(ProjectMigrationWithOptions it) {
        return it.getOptionIds();
      }
    }).visitAll(new IVisitor<String>() {
      public void visit(String it) {
        JComponent c = ProjectOptionsRegistry.getInstance().createComponentForOption(it);
        myComponents.put(it, c);
        settingsPanel.add(c);
      }
    });
  }

  @Override
  public Object getNextStepId() {
    return MigrationsProgressStep.ID;
  }

  @Override
  public Object getPreviousStepId() {
    return null;
  }

  public static Map<String, Object> getOptions() {
    return ourOptions;
  }

  @Override
  public void commit(AbstractWizardStepEx.CommitType commitType) throws CommitStepException {
    super.commit(commitType);

    ourOptions.clear();
    for (String id : myComponents.keySet()) {
      JComponent c = myComponents.get(id);
      Object val = ProjectOptionsRegistry.getInstance().getValueFromComponent(c);
      ourOptions.put(id, val);
    }
  }
}
