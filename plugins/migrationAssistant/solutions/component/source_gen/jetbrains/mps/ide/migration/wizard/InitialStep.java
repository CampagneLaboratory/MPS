package jetbrains.mps.ide.migration.wizard;

/*Generated by MPS */

import java.util.Map;
import java.util.HashMap;
import javax.swing.JComponent;
import com.intellij.openapi.project.Project;
import java.awt.GridBagLayout;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import java.awt.Insets;
import javax.swing.BorderFactory;
import javax.swing.JTextPane;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import jetbrains.mps.migration.global.ProjectMigration;
import jetbrains.mps.migration.global.ProjectMigrationsRegistry;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.migration.global.ProjectMigrationWithOptions;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.migration.global.ProjectOptionsRegistry;
import com.intellij.ide.wizard.AbstractWizardStepEx;
import com.intellij.ide.wizard.CommitStepException;

public class InitialStep extends MigrationStep {
  public static final String ID = "initial";

  /**
   * due to wizard architecture we need this hacky way of passing data from one step to another
   */
  private static final Map<String, Object> ourOptions = new HashMap<String, Object>();

  private Map<String, JComponent> myComponents = new HashMap<String, JComponent>();

  public InitialStep(Project project) {
    super(project, "Migration Required", ID);
    createComponent();
  }

  @Override
  protected final void createComponent() {
    super.createComponent();
    GridBagLayout layout = new GridBagLayout();
    final JPanel pagePanel = new JPanel(layout);
    myComponent.add(pagePanel, BorderLayout.CENTER);

    final Insets insets = new Insets(0, 0, 0, 0);
    JPanel infoHolder = new JPanel(new BorderLayout());
    infoHolder.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));
    JTextPane info = new JTextPane();
    info.setContentType("text/html");
    info.setText("Welcome to Migration Assistant!<br><br>MPS has detected that your project requires migration before it can be used with this version of the product.<br><br>This wizard will guide you through the migration process. It's going to take a while.<br><br>Select Next to proceed with migration or Cancel if you wish to postpone it.");
    info.setEditable(false);
    info.setFocusable(false);
    info.setBorder(BorderFactory.createLoweredBevelBorder());
    info.setPreferredSize(new Dimension(300, 220));
    infoHolder.add(info, BorderLayout.CENTER);
    pagePanel.add(infoHolder, new GridBagConstraints(0, 0, 1, 1, 1.0, 1.0, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.BOTH, insets, 0, 0));

    // project migration options 
    final Wrappers._int y = new Wrappers._int(1);
    List<ProjectMigration> pMig = ProjectMigrationsRegistry.getInstance().getMigrations();
    ListSequence.fromList(pMig).ofType(ProjectMigrationWithOptions.class).where(new IWhereFilter<ProjectMigrationWithOptions>() {
      public boolean accept(ProjectMigrationWithOptions it) {
        return it.shouldBeExecuted(ProjectHelper.toMPSProject(myProject));
      }
    }).translate(new ITranslator2<ProjectMigrationWithOptions, String>() {
      public Iterable<String> translate(ProjectMigrationWithOptions it) {
        return it.getOptionIds();
      }
    }).visitAll(new IVisitor<String>() {
      public void visit(String it) {
        JComponent c = ProjectOptionsRegistry.getInstance().createComponentForOption(it);
        myComponents.put(it, c);
        pagePanel.add(c, new GridBagConstraints(0, y.value++, 1, 1, 0, 1, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.HORIZONTAL, insets, 5, 0));

      }
    });
  }

  @Override
  public Object getNextStepId() {
    return MigrationsProgressStep.ID;
  }

  @Override
  public Object getPreviousStepId() {
    return null;
  }

  public static Map<String, Object> getOptions() {
    return ourOptions;
  }

  @Override
  public void commit(AbstractWizardStepEx.CommitType commitType) throws CommitStepException {
    super.commit(commitType);

    ourOptions.clear();
    for (String id : myComponents.keySet()) {
      JComponent c = myComponents.get(id);
      Object val = ProjectOptionsRegistry.getInstance().getValueFromComponent(c);
      ourOptions.put(id, val);
    }
  }
}
