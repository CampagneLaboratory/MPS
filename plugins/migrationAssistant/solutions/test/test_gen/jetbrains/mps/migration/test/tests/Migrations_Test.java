package jetbrains.mps.migration.test.tests;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import java.util.Set;
import org.jetbrains.mps.openapi.language.SLanguage;
import java.util.Map;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptBase;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.migration.runtime.base.DataCollector;
import jetbrains.mps.ide.migration.ScriptApplied;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.migration.runtime.base.MigrationScript;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.migration.component.util.MigrationComponent;

public class Migrations_Test extends TestCase {
  public void test_test() throws Exception {
  }
  /*package*/ static class MockModule extends AbstractModule {
    private ModuleDescriptor myModuleDescriptor;
    private Set<SLanguage> myUsedLanguages;
    public MockModule(String name, Map<SLanguage, Integer> usedLanguages) {
      setModuleReference(new ModuleReference(name, ModuleId.foreign(name)));
      myModuleDescriptor = new ModuleDescriptor();
      myUsedLanguages = MapSequence.fromMap(usedLanguages).keySet();
      MapSequence.fromMap(usedLanguages).visitAll(new IVisitor<IMapping<SLanguage, Integer>>() {
        public void visit(IMapping<SLanguage, Integer> it) {
          myModuleDescriptor.getLanguageVersions().put(it.key(), it.value());
        }
      });
    }
    public ModuleDescriptor getModuleDescriptor() {
      return myModuleDescriptor;
    }
    public Set<SLanguage> getAllUsedLanguages() {
      return myUsedLanguages;
    }
  }

  /*package*/ static class MockMigrationScript extends MigrationScriptBase {
    private MigrationScriptReference myReference;
    public MockMigrationScript(SLanguage lang, int version) {
      myReference = new MigrationScriptReference(lang, version);
    }
    public MigrationScriptReference getDescriptor() {
      return myReference;
    }
    public SNode execute(SModule moduleToMigrate, DataCollector dataCollector) {
      return null;
    }
    public String getCaption() {
      return "'script " + myReference.getFromVersion() + " in language " + myReference.getLanguage() + "'";
    }
  }

  public static Iterable<ScriptApplied> test() {
    final List<SLanguage> languages = ListSequence.fromListAndArray(new ArrayList<SLanguage>(), MetaAdapterFactory.getLanguage(new UUID(239, 0), "lang0"), MetaAdapterFactory.getLanguage(new UUID(239, 1), "lang1"));
    List<MigrationScript> scripts = ListSequence.fromListAndArray(new ArrayList<MigrationScript>(), new Migrations_Test.MockMigrationScript(ListSequence.fromList(languages).getElement(0), 0) {
      public Iterable<MigrationScriptReference> executeAfter() {
        return Sequence.<MigrationScriptReference>singleton(new Migrations_Test.MockMigrationScript(ListSequence.fromList(languages).getElement(1), 0).getDescriptor());
      }
    }, new Migrations_Test.MockMigrationScript(ListSequence.fromList(languages).getElement(1), 0) {
      public Iterable<MigrationScriptReference> executeAfter() {
        Sequence.<MigrationScriptReference>singleton(new Migrations_Test.MockMigrationScript(ListSequence.fromList(languages).getElement(0), 0).getDescriptor());
        return null;
      }
    });


    List<SModule> modules = ListSequence.fromListAndArray(new ArrayList<SModule>(), new Migrations_Test.MockModule("module0", MapSequence.<SLanguage, Integer>fromMapAndKeysArray(new HashMap<SLanguage, Integer>(), ListSequence.fromList(languages).getElement(0), ListSequence.fromList(languages).getElement(1)).withValues(0, 0)), new Migrations_Test.MockModule("module1", MapSequence.<SLanguage, Integer>fromMapAndKeysArray(new HashMap<SLanguage, Integer>(), ListSequence.fromList(languages).getElement(0), ListSequence.fromList(languages).getElement(1)).withValues(0, 0)));


    List<ScriptApplied> migrations = ListSequence.fromListAndArray(new ArrayList<ScriptApplied>(), new ScriptApplied(ListSequence.fromList(scripts).getElement(1), ListSequence.fromList(modules).getElement(0)), new ScriptApplied(ListSequence.fromList(scripts).getElement(0), ListSequence.fromList(modules).getElement(0)));

    return ListSequence.fromList(migrations).where(new IWhereFilter<ScriptApplied>() {
      public boolean accept(ScriptApplied it) {
        return MigrationComponent.isAvailable(it);
      }
    });
  }

}
