package jetbrains.mps.migration.actions.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Level;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class CorrectLanguageVersion_Action extends BaseAction {
  private static final Icon ICON = null;
  public CorrectLanguageVersion_Action() {
    super("Correct Language Version", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (!(((SModule) MapSequence.fromMap(_params).get("module")) instanceof Language)) {
      return false;
    }
    Language lang = ((Language) ((SModule) MapSequence.fromMap(_params).get("module")));
    SModel mig = LanguageAspect.MIGRATION.get(lang);
    if (mig == null) {
      return false;
    }
    int maxFrom = SPropertyOperations.getInteger(ListSequence.fromList(SModelOperations.getRoots(((SModel) mig), "jetbrains.mps.lang.migration.structure.AbstractMigrationScript")).sort(new ISelector<SNode, Integer>() {
      public Integer select(SNode it) {
        return SPropertyOperations.getInteger(it, "fromVersion");
      }
    }, false).first(), "fromVersion");
    return lang.getLanguageVersion() != maxFrom + 1;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "CorrectLanguageVersion", t);
      }
      this.disable(event.getPresentation());
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("module", event.getData(MPSCommonDataKeys.MODULE));
    if (MapSequence.fromMap(_params).get("module") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      Language lang = ((Language) ((SModule) MapSequence.fromMap(_params).get("module")));
      SModel mig = LanguageAspect.MIGRATION.get(lang);
      int maxFrom = SPropertyOperations.getInteger(ListSequence.fromList(SModelOperations.getRoots(((SModel) mig), "jetbrains.mps.lang.migration.structure.AbstractMigrationScript")).sort(new ISelector<SNode, Integer>() {
        public Integer select(SNode it) {
          return SPropertyOperations.getInteger(it, "fromVersion");
        }
      }, false).first(), "fromVersion");
      lang.getModuleDescriptor().setVersion(maxFrom + 1);
      lang.setChanged();
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "CorrectLanguageVersion", t);
      }
    }
  }
  protected static Logger LOG = LogManager.getLogger(CorrectLanguageVersion_Action.class);
}
