package jetbrains.mps.execution.configurations.deprecated.runtime;

/*Generated by MPS */

import jetbrains.mps.util.annotation.ToRemove;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.process.ProcessNotCreatedException;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import java.io.File;
import java.io.IOException;
import org.apache.log4j.Priority;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

/**
 * Use commands language for starting processes in mps
 */
@Deprecated
@ToRemove(version = 2.0)
public class ClassRunner extends BaseRunner {
  private ProcessBuilder myProcessBuilder;

  @Deprecated
  public ClassRunner(ConfigRunParameters parameters) {
    super(parameters);
  }

  public Process run(final SNode node, @NotNull final String className) throws ProcessNotCreatedException {
    final List<String> params = ListSequence.fromList(new ArrayList<String>());
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        addJavaCommand(params);
        addClassPath(params, node);
        addVmOptions(params);
        ListSequence.fromList(params).addElement(className);
        addProgramParameters(params);
        ClassRunner.this.myProcessBuilder = new ProcessBuilder(params);

        String workingDir = myRunParameters.getWorkingDirectory();
        if (workingDir != null && (workingDir != null && workingDir.length() > 0)) {
          ClassRunner.this.myProcessBuilder.directory(new File(workingDir));
        }
      }
    });

    try {
      return this.myProcessBuilder.start();
    } catch (IOException e) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("Can't run class " + className + ": " + e.getMessage(), e);
      }
      throw new ProcessNotCreatedException(e.getMessage(), e, this.getCommandLine());
    } catch (NullPointerException npe) {
      String message = "Can't run class " + className + ". One of the command line arguments is null:\n" + params;
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error(message, npe);
      }
      throw new ProcessNotCreatedException(message, npe, this.getCommandLine());
    }
  }

  public String getCommandString() {
    return this.getCommandString(this.myProcessBuilder);
  }

  protected static Logger LOG = LogManager.getLogger(ClassRunner.class);
}
