package jetbrains.mps.execution.lib;

/*Generated by MPS */

import jetbrains.mps.execution.api.settings.SettingsEditorEx;
import jetbrains.mps.execution.lib.ui.MultiConceptChooser;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.options.ConfigurationException;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.intellij.openapi.util.Factory;

public class MultiConceptNode_Configuration_Editor extends SettingsEditorEx<MultiConceptNode_Configuration> {
  private MultiConceptChooser myChooser;

  public void disposeEditor() {
  }

  @NotNull
  public MultiConceptChooser createEditor() {
    myChooser = new MultiConceptChooser(myTargets);
    return myChooser;
  }

  public void applyEditorTo(final MultiConceptNode_Configuration configuration) throws ConfigurationException {
    configuration.setNode(myChooser.getNode());
  }

  public void resetEditorFrom(final MultiConceptNode_Configuration configuration) {
    myChooser.setNode(configuration.getNode());
  }

  private List<Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>> myTargets;

  public MultiConceptNode_Configuration_Editor(final List<Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>> targets) {
    super(new Factory<MultiConceptNode_Configuration>() {
      public MultiConceptNode_Configuration create() {
        return new MultiConceptNode_Configuration(targets);
      }
    });
    myTargets = targets;
  }
}
