package jetbrains.mps.execution.lib;

/*Generated by MPS */

import jetbrains.mps.execution.api.settings.IPersistentConfiguration;
import jetbrains.mps.execution.api.settings.ITemplatePersistentConfiguration;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.execution.api.settings.SettingsEditorEx;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;

public class NodeBySeveralConcepts_Configuration implements IPersistentConfiguration, ITemplatePersistentConfiguration {
  protected static Log log = LogFactory.getLog(NodeBySeveralConcepts_Configuration.class);

  @NotNull
  private NodeBySeveralConcepts_Configuration.MyState myState = new NodeBySeveralConcepts_Configuration.MyState();
  private final List<Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>> myTargets;
  private SettingsEditorEx<NodeBySeveralConcepts_Configuration> myEditorEx;

  public NodeBySeveralConcepts_Configuration(List<Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>> targets) {
    myTargets = targets;
  }

  public void checkConfiguration() throws RuntimeConfigurationException {
    {
      final SNode node = getNode();
      if (node == null) {
        throw new RuntimeConfigurationException("Node is not specified.");
      }
      final Wrappers._boolean accept = new Wrappers._boolean();
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          accept.value = isValid(node);
        }
      });
      if (!(accept.value)) {
        throw new RuntimeConfigurationException("Node is not valid.");
      }
    }
  }

  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    element.addContent(XmlSerializer.serialize(myState));
  }

  @Override
  public void readExternal(Element element) throws InvalidDataException {
    if (element == null) {
      throw new InvalidDataException("Cant read " + this + ": element is null.");
    }
    XmlSerializer.deserializeInto(myState, (Element) element.getChildren().get(0));
  }

  public String getNodeId() {
    return myState.myNodeId;
  }

  public String getModelId() {
    return myState.myModelId;
  }

  public void setNodeId(String value) {
    myState.myNodeId = value;
  }

  public void setModelId(String value) {
    myState.myModelId = value;
  }

  @Nullable
  public SNode getNode() {
    final SNodePointer pointer = getNodePointer();
    final Wrappers._T<SNode> node = new Wrappers._T<SNode>();
    ModelAccess.instance().runReadAction(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        return node.value = check_38tk9z_a0a0a2a0(pointer);
      }
    }));
    return node.value;
  }

  @Nullable
  public SNodePointer getNodePointer() {
    if (this.getModelId() == null || this.getNodeId() == null) {
      return null;
    }
    return new SNodePointer(this.getModelId(), this.getNodeId());
  }

  public void setNode(@Nullable final SNode node) {
    if (node == null) {
      this.setModelId(null);
      this.setNodeId(null);
    } else {
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          NodeBySeveralConcepts_Configuration.this.setModelId(node.getModel().getModelDescriptor().getSModelReference().toString());
          NodeBySeveralConcepts_Configuration.this.setNodeId(node.getSNodeId().toString());
        }
      });
    }
  }

  private boolean isValid(final SNode node) {
    return ListSequence.fromList(myTargets).findFirst(new IWhereFilter<Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>>() {
      public boolean accept(Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>> it) {
        _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> function = it._1();
        if (SNodeOperations.isInstanceOf(node, NameUtil.nodeFQName(((SNode) it._0())))) {
          if (function != null) {
            return function.invoke(node);
          } else {
            return true;
          }
        }
        return false;
      }
    }) != null;
  }

  @Override
  public NodeBySeveralConcepts_Configuration clone() {
    NodeBySeveralConcepts_Configuration clone = null;
    try {
      clone = createCloneTemplate();
      clone.myState = (NodeBySeveralConcepts_Configuration.MyState) myState.clone();
      return clone;
    } catch (CloneNotSupportedException ex) {
      if (log.isErrorEnabled()) {
        log.error("", ex);
      }
    }
    return clone;
  }

  public NodeBySeveralConcepts_Configuration createCloneTemplate() {
    return new NodeBySeveralConcepts_Configuration(myTargets);
  }

  public NodeBySeveralConcepts_Configuration_Editor getEditor() {
    return new NodeBySeveralConcepts_Configuration_Editor(myTargets);
  }

  public SettingsEditorEx<NodeBySeveralConcepts_Configuration> getEditorEx() {
    if (myEditorEx == null) {
      myEditorEx = getEditor();
    }
    return myEditorEx;
  }

  private static SNode check_38tk9z_a0a0a2a0(SNodePointer checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getNode();
    }
    return null;
  }

  public class MyState {
    public String myNodeId;
    public String myModelId;

    public MyState() {
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
      NodeBySeveralConcepts_Configuration.MyState state = new NodeBySeveralConcepts_Configuration.MyState();
      state.myNodeId = myNodeId;
      state.myModelId = myModelId;
      return state;
    }
  }
}
