package jetbrains.mps.execution.lib.ui;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNodeReference;
import java.util.Map;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.ide.platform.dialogs.choosers.NodeChooserDialog;
import jetbrains.mps.workbench.MPSDataKeys;
import com.intellij.ide.DataManager;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.logging.Logger;

public abstract class AbstractMainNodeChooser extends BaseChooserComponent {
  private SNodeReference myNodePointer;
  private final Map<IJavaNodeChangeListener, _FunctionTypes._void_P1_E0<? super SNode>> myLegacyListenersMap = MapSequence.fromMap(new HashMap<IJavaNodeChangeListener, _FunctionTypes._void_P1_E0<? super SNode>>());
  private final List<_FunctionTypes._void_P1_E0<? super SNode>> myListeners = ListSequence.fromList(new ArrayList<_FunctionTypes._void_P1_E0<? super SNode>>());

  public AbstractMainNodeChooser() {
    this.init(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent p0) {

        final FindUsagesManager findUsegesManager = FindUsagesManager.getInstance();
        final ProgressMonitor progressAdapter = new EmptyProgressMonitor();

        final Wrappers._T<List<SNodeReference>> toChooseFrom = new Wrappers._T<List<SNodeReference>>();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            toChooseFrom.value = ListSequence.fromList(findToChooseFromOnInit(findUsegesManager, progressAdapter)).select(new ISelector<SNode, SNodeReference>() {
              public SNodeReference select(SNode it) {
                return ((SNodeReference) new SNodePointer(it));
              }
            }).toListSequence();
          }
        });

        final NodeChooserDialog chooserDialog = new NodeChooserDialog(MPSDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(AbstractMainNodeChooser.this)), toChooseFrom.value);
        chooserDialog.show();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            setNode(chooserDialog.getResultNode());
          }
        });
      }
    });

    addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent event) {
        final String text = getText();
        if ((text == null || text.length() == 0)) {
          setNode(null);
          return;
        }
        final int lastDot = text.lastIndexOf(".");
        if (lastDot <= 0) {
          setNode(null);
          return;
        }

        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            Iterable<SModel> models = getModels(text.substring(0, lastDot));
            SNode foundNode = null;
            for (SModel model : Sequence.fromIterable(models)) {
              if (!(model instanceof DefaultSModelDescriptor)) {
                LOG.error("Unknown kind of model " + model);
              }
              Iterable<SNode> nodes = findNodes(((DefaultSModelDescriptor) model).getSModel(), text);
              if (!(Sequence.fromIterable(nodes).isEmpty())) {
                foundNode = Sequence.fromIterable(nodes).first();
                break;
              }
            }
            setNode(foundNode);
          }
        });
      }
    });
  }

  protected abstract Iterable<SNode> findNodes(jetbrains.mps.smodel.SModel model, String fqName);

  protected abstract Iterable<SModel> getModels(String model);

  protected abstract List<SNode> findToChooseFromOnInit(FindUsagesManager manager, ProgressMonitor monitor);

  public SNode getNode() {
    return ((SNodePointer) this.myNodePointer).getNode();
  }

  public void setNode(SNode node) {
    if (check_wlpn4v_a0a0i(((SNodePointer) this.myNodePointer), this) == node) {
      return;
    }
    if (node == null) {
      if (this.myNodePointer == null) {
        this.setText(null);
        return;
      } else {
        myNodePointer = null;
      }
    } else {
      this.myNodePointer = new SNodePointer(node);
      this.setText(getFqName(node));
    }
    this.fireNodeChanged();
  }

  public String getFqName(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.INamedConcept")) {
      return BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "virtual_getFqName_1213877404258", new Object[]{});
    } else {
      String longName = SNodeOperations.getModel(node).getLongName();
      if (longName.equals("")) {
        return node.getNodeId().toString();
      }
      return longName + "." + node.getNodeId().toString();
    }
  }

  public void addNodeChangeListener(@NotNull final IJavaNodeChangeListener listener) {
    _FunctionTypes._void_P1_E0<? super SNode> function = new _FunctionTypes._void_P1_E0<SNode>() {
      public void invoke(SNode node) {
        listener.nodeChanged(node);
      }
    };
    MapSequence.fromMap(myLegacyListenersMap).put(listener, function);
    ListSequence.fromList(this.myListeners).addElement(function);
  }

  public void addNodeChangeListener(@NotNull _FunctionTypes._void_P1_E0<? super SNode> listener) {
    ListSequence.fromList(this.myListeners).addElement(listener);
  }

  public void removeNodeChangeListener(IJavaNodeChangeListener listener) {
    ListSequence.fromList(this.myListeners).removeElement(MapSequence.fromMap(myLegacyListenersMap).get(listener));
    MapSequence.fromMap(myLegacyListenersMap).removeKey(listener);
  }

  private void fireNodeChanged() {
    ListSequence.fromList(this.myListeners).visitAll(new IVisitor<_FunctionTypes._void_P1_E0<? super SNode>>() {
      public void visit(_FunctionTypes._void_P1_E0<? super SNode> it) {
        it.invoke(((SNodePointer) AbstractMainNodeChooser.this.myNodePointer).getNode());
      }
    });
  }

  @Override
  public void dispose() {
    super.dispose();
    ListSequence.fromList(myListeners).clear();
  }

  private static Logger LOG = Logger.getLogger(AbstractMainNodeChooser.class);

  private static SNode check_wlpn4v_a0a0i(SNodePointer checkedDotOperand, AbstractMainNodeChooser checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getNode();
    }
    return null;
  }
}
