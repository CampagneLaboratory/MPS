package jetbrains.mps.execution.lib.ui;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import java.util.Set;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.ScopeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class NodeByConceptChooser extends NodeChooser {
  @NotNull
  private String myTargetConcept;
  @Nullable
  private _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> myAcceptor;
  private final ModulesWithLanguagesScope myScope;
  public NodeByConceptChooser() {
    this("jetbrains.mps.lang.core.structure.BaseConcept", null);
  }
  public NodeByConceptChooser(@NonNls String conceptFqName, @Nullable _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> acceptor) {
    super();

    myTargetConcept = conceptFqName;
    myAcceptor = acceptor;

    Language language = ModelAccess.instance().runReadAction(new Computable<Language>() {
      public Language compute() {
        return (Language) getTargetConceptNode().getModel().getModule();
      }
    });

    myScope = new ModulesWithLanguagesScope(GlobalScope.getInstance(), Sequence.<Language>singleton(language));
  }
  public String getTargetConcept() {
    return myTargetConcept;
  }
  public SNode getTargetConceptNode() {
    return (SNode) SModelUtil.findConceptDeclaration(myTargetConcept);
  }
  public void setTargetConcept(String targetConcept) {
    myTargetConcept = targetConcept;
  }
  public void setTargetConcept(SNode targetConcept) {
    myTargetConcept = BehaviorReflection.invokeVirtual(String.class, targetConcept, "virtual_getFqName_1213877404258", new Object[]{});
  }
  public _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> getAcceptor() {
    return myAcceptor;
  }
  public void setAcceptor(_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> acceptor) {
    myAcceptor = acceptor;
  }
  @Override
  protected List<SNode> findToChooseFromOnInit(FindUsagesFacade manager, ProgressMonitor monitor) {
    SAbstractConcept concept = SConceptRepository.getInstance().getConcept(myTargetConcept);
    Set<SNode> instances = ((Set) manager.findInstances(myScope, Collections.singleton(concept), false, monitor));
    if (this.myAcceptor == null) {
      return ListSequence.fromListWithValues(new ArrayList<SNode>(), instances);
    } else {
      return ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<SNode>(), instances)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return NodeByConceptChooser.this.myAcceptor.invoke(it);
        }
      }).toListSequence();
    }
  }
  @Override
  protected Iterable<SModel> getModels(String model) {
    return ScopeOperations.getModelsByName(myScope, model);
  }
  @Override
  protected Iterable<SNode> findNodes(SModel model, final String fqName) {
    return ListSequence.fromList(SModelOperations.getNodes(((SModel) model), null)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        if (!(SNodeOperations.isInstanceOf(it, myTargetConcept))) {
          return false;
        }
        if (myAcceptor == null) {
          return getFqName(it).equals(fqName);
        } else {
          return myAcceptor.invoke(it) && getFqName(it).equals(fqName);
        }
      }
    });
  }
}
