package jetbrains.mps.execution.lib;

/*Generated by MPS */

import jetbrains.mps.execution.api.settings.SettingsEditorEx;
import jetbrains.mps.execution.lib.ui.NodeByConceptChooser;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.SNode;
import com.intellij.openapi.util.Factory;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.project.GlobalScope;
import com.intellij.openapi.options.ConfigurationException;

public class NodeByConcept_Configuration_Editor extends SettingsEditorEx<NodeByConcept_Configuration> {
  private NodeByConceptChooser myChooser;
  private String myConcept;
  private _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> myIsValid;

  public NodeByConcept_Configuration_Editor(final String concept, final _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> isValid) {
    super(new Factory<NodeByConcept_Configuration>() {
      public NodeByConcept_Configuration create() {
        return new NodeByConcept_Configuration(concept, isValid);
      }
    });
    myConcept = concept;
    myIsValid = isValid;
  }

  public void disposeEditor() {
  }

  @NotNull
  public NodeByConceptChooser createEditor() {
    myChooser = new NodeByConceptChooser();
    myChooser.setTargetConcept((SNode) SModelUtil.findConceptDeclaration(myConcept, GlobalScope.getInstance()));
    myChooser.setAcceptor(myIsValid);
    return myChooser;
  }

  public void applyEditorTo(final NodeByConcept_Configuration configuration) throws ConfigurationException {
    configuration.setNode(myChooser.getNode());
  }

  public void resetEditorFrom(final NodeByConcept_Configuration configuration) {
    myChooser.setNode(configuration.getNode());
  }
}
