package jetbrains.mps.execution.lib.ui;

/*Generated by MPS */

import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.SModelRepository;
import java.util.Set;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelReference;
import java.util.List;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.generator.TransientModelsModule;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import org.jetbrains.annotations.Nullable;

public class GlobalFilteredScope extends GlobalScope {
  public GlobalFilteredScope(MPSModuleRepository moduleRepository, SModelRepository repository) {
    super(moduleRepository, repository);
  }

//  public Set<IModule> getVisibleModules() {
//    Iterable<IModule> s = Sequence.fromClosure(new ISequenceClosure<IModule>() {
//      public Iterable<IModule> iterable() {
//        return myMPSModuleRepository.getAllModules();
//      }
//    });
//    return SetSequence.fromSetAndArray(new HashSet(), Sequence.fromIterable(s).where(new IWhereFilter<IModule>() {
//      public boolean accept(IModule it) {
//        return GlobalFilteredScope.this.acceptModule(it);
//      }
//    }));
//  }

//  public SModelDescriptor getModelDescriptor(SModelReference reference) {
//    SModelDescriptor descriptor = myModelRepository.getModelDescriptor(reference);
//    if (this.acceptModel(descriptor)) {
//      return descriptor;
//    }
//    return null;
//  }

  public List<SModelDescriptor> getModelDescriptors(final String modelName) {
    return Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModelDescriptor>() {
      public Iterable<SModelDescriptor> iterable() {
        return myModelRepository.getModelDescriptorsByModelName(modelName);
      }
    })).where(new IWhereFilter<SModelDescriptor>() {
      public boolean accept(SModelDescriptor it) {
        return GlobalFilteredScope.this.acceptModel(it);
      }
    }).toListSequence();
  }

//  public List<SModelDescriptor> getModelDescriptors() {
//    return Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModelDescriptor>() {
//      public Iterable<SModelDescriptor> iterable() {
//        return myModelRepository.getModelDescriptors();
//      }
//    })).where(new IWhereFilter<SModelDescriptor>() {
//      public boolean accept(SModelDescriptor it) {
//        return GlobalFilteredScope.this.acceptModel(it);
//      }
//    }).toListSequence();
//  }

  protected boolean acceptModel(SModelDescriptor descriptor) {
    if (SModelStereotype.isUserModel(descriptor) && !(SModelStereotype.isGeneratorModel(descriptor))) {
      return acceptModule(descriptor.getModule());
    }
    return false;
  }

  protected boolean acceptModule(IModule m) {
    if (m instanceof TransientModelsModule || m instanceof Generator) {
      return false;
    }
    Iterable<IModule> requiredModules = getRequiredModules();
    if (requiredModules == null || Sequence.fromIterable(requiredModules).isEmpty()) {
      return true;
    }
    for (IModule module : Sequence.fromIterable(requiredModules)) {
      if (new GlobalModuleDependenciesManager(module).getUsedLanguages().contains(module)) {
        return true;
      }
    }
    return false;
  }

  @Nullable
  protected Iterable<IModule> getRequiredModules() {
    return null;
  }
}
