package jetbrains.mps.execution.lib.ui;

/*Generated by MPS */

import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeReference;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import com.intellij.openapi.project.Project;
import jetbrains.mps.workbench.MPSDataKeys;
import com.intellij.ide.DataManager;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.ide.platform.dialogs.choosers.NodeChooserDialog;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.MPSModuleRepository;

public abstract class NodeChooser extends TextFieldWithBrowseButton.NoPathCompletion {
  @Nullable
  private SNodeReference myNodePointer;
  private final List<_FunctionTypes._void_P1_E0<? super SNode>> myListeners = ListSequence.fromList(new ArrayList<_FunctionTypes._void_P1_E0<? super SNode>>());
  public NodeChooser() {
    addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent p0) {
        final FindUsagesFacade findUsegesManager = FindUsagesFacade.getInstance();
        Project project = MPSDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(NodeChooser.this));

        final Wrappers._T<List<SNodeReference>> toChooseFrom = new Wrappers._T<List<SNodeReference>>();
        ProgressManager.getInstance().run(new Task.Modal(project, "Searching for nodes", false) {
          public void run(@NotNull final ProgressIndicator indicator) {
            ModelAccess.instance().runReadAction(new Runnable() {
              public void run() {
                toChooseFrom.value = ListSequence.fromList(findToChooseFromOnInit(findUsegesManager, new ProgressMonitorAdapter(indicator))).select(new ISelector<SNode, SNodeReference>() {
                  public SNodeReference select(SNode it) {
                    return ((SNodeReference) new SNodePointer(it));
                  }
                }).toListSequence();
              }
            });
          }
        });

        final NodeChooserDialog chooserDialog = new NodeChooserDialog(project, toChooseFrom.value);
        chooserDialog.show();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            SNode resultNode = chooserDialog.getResultNode();
            if (resultNode != null) {
              setNode(resultNode);
            }
          }
        });
      }
    });

    addKeyListener(new KeyAdapter() {
      @Override
      public void keyReleased(KeyEvent event) {
        final String text = getText();
        if ((text == null || text.length() == 0)) {
          setNode(null);
          return;
        }
        final int lastDot = text.lastIndexOf(".");
        if (lastDot <= 0) {
          setNode(null);
          return;
        }

        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            Iterable<SModel> models = getModels(text.substring(0, lastDot));
            SNode foundNode = null;
            for (SModel model : Sequence.fromIterable(models)) {
              Iterable<SNode> nodes = findNodes(model, text);
              if (!(Sequence.fromIterable(nodes).isEmpty())) {
                foundNode = Sequence.fromIterable(nodes).first();
                break;
              }
            }
            setNode(foundNode);
          }
        });
      }
    });
  }
  protected abstract Iterable<SNode> findNodes(SModel model, String fqName);
  protected abstract Iterable<SModel> getModels(String model);
  protected abstract List<SNode> findToChooseFromOnInit(FindUsagesFacade manager, ProgressMonitor monitor);
  public SNode getNode() {
    return check_qnl8bg_a0a6(((SNodePointer) this.myNodePointer), this);
  }
  public void setNode(SNode node) {
    if (check_qnl8bg_a0a0h(((SNodePointer) this.myNodePointer), this) == node) {
      return;
    }
    if (node == null) {
      if (this.myNodePointer == null) {
        this.setText(null);
        return;
      } else {
        myNodePointer = null;
      }
    } else {
      this.myNodePointer = new SNodePointer(node);
      this.setText(getFqName(node));
    }
    this.fireNodeChanged();
  }
  public String getFqName(SNode node) {
    String modelName = SNodeOperations.getModel(node).getModelName();

    String nodeName;
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.INamedConcept")) {
      nodeName = SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"));
    } else {
      nodeName = node.getNodeId().toString();
    }

    if ((modelName == null || modelName.length() == 0)) {
      return nodeName;
    }
    return modelName + "." + nodeName;
  }
  public void addNodeChangeListener(@NotNull _FunctionTypes._void_P1_E0<? super SNode> listener) {
    ListSequence.fromList(this.myListeners).addElement(listener);
  }
  private void fireNodeChanged() {
    ListSequence.fromList(this.myListeners).visitAll(new IVisitor<_FunctionTypes._void_P1_E0<? super SNode>>() {
      public void visit(_FunctionTypes._void_P1_E0<? super SNode> it) {
        it.invoke(check_qnl8bg_a0a0a0a0a0k(((SNodePointer) NodeChooser.this.myNodePointer), NodeChooser.this));
      }
    });
  }
  @Override
  public void dispose() {
    super.dispose();
    ListSequence.fromList(myListeners).clear();
  }
  private static SNode check_qnl8bg_a0a6(SNodePointer checkedDotOperand, NodeChooser checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(MPSModuleRepository.getInstance());
    }
    return null;
  }
  private static SNode check_qnl8bg_a0a0h(SNodePointer checkedDotOperand, NodeChooser checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(MPSModuleRepository.getInstance());
    }
    return null;
  }
  private static SNode check_qnl8bg_a0a0a0a0a0k(SNodePointer checkedDotOperand, NodeChooser checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(MPSModuleRepository.getInstance());
    }
    return null;
  }
}
