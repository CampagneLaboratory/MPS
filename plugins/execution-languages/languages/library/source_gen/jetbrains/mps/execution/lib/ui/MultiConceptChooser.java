package jetbrains.mps.execution.lib.ui;

/*Generated by MPS */

import jetbrains.mps.util.annotation.ToRemove;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import java.util.Set;
import java.util.Collections;
import jetbrains.mps.findUsages.SearchType;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.ScopeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

/**
 * Use NodeBySeveralConceptChooser
 */
@Deprecated
@ToRemove(version = 3.0)
public class MultiConceptChooser extends AbstractMainNodeChooser {
  @NotNull
  private final List<Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>> myTargetConcepts = ListSequence.fromList(new ArrayList<Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>>());
  private final ModulesWithLanguagesScope myScope;

  @Deprecated
  public MultiConceptChooser(Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>... targets) {
    this(Sequence.fromIterable(Sequence.fromArray(targets)).toListSequence());
  }

  @Deprecated
  public MultiConceptChooser(List<Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>> targets) {
    ListSequence.fromList(myTargetConcepts).addSequence(ListSequence.fromList(targets).select(new ISelector<Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>, Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>>() {
      public Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>> select(Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>> it) {
        return MultiTuple.<SNode,_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>from((it._0() == null ?
          SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept") :
          it._0()
        ), it._1());
      }
    }));

    final Iterable<Language> modules = ListSequence.fromList(myTargetConcepts).select(new ISelector<Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>, Language>() {
      public Language select(final Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>> it) {
        return ModelAccess.instance().runReadAction(new Computable<Language>() {
          public Language compute() {
            return (Language) SNodeOperations.getModel(it._0()).getModelDescriptor().getModule();
          }
        });
      }
    });

    myScope = new ModulesWithLanguagesScope(GlobalScope.getInstance(), modules);
  }

  protected List<SNode> findToChooseFromOnInit(final FindUsagesManager manager, final ProgressMonitor monitor) {
    return (List<SNode>) (ListSequence.fromList(myTargetConcepts).translate(new ITranslator2<Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>, SNode>() {
      public Iterable<SNode> translate(Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>> it) {
        SNode targetConcept = it._0();
        final _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> function = it._1();
        SConcept concept = SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(targetConcept));
        Set<SNode> instances = ((Set) manager.findUsages(Collections.singleton(concept), SearchType.INSTANCES, myScope, monitor));
        if (function == null) {
          return ListSequence.fromListWithValues(new ArrayList<SNode>(), instances);
        } else {
          return ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<SNode>(), instances)).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return function.invoke(it);
            }
          }).toListSequence();
        }
      }
    }).toListSequence());
  }

  protected Iterable<SModel> getModels(String model) {
    return ScopeOperations.getModelsByName(myScope, model);
  }

  protected Iterable<SNode> findNodes(jetbrains.mps.smodel.SModel model, final String fqName) {
    return ListSequence.fromList(SModelOperations.getNodes(((jetbrains.mps.smodel.SModel) model), null)).where(new IWhereFilter<SNode>() {
      public boolean accept(final SNode node) {
        return ListSequence.fromList(myTargetConcepts).findFirst(new IWhereFilter<Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>>>() {
          public boolean accept(Tuples._2<SNode, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>> it) {
            SNode targetConcept = it._0();
            _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> function = it._1();
            if (!(SNodeOperations.isInstanceOf(node, NameUtil.nodeFQName(targetConcept)))) {
              return false;
            }
            if (function == null) {
              return getFqName(node).equals(fqName);
            } else {
              return function.invoke(node) && getFqName(node).equals(fqName);
            }
          }
        }) != null;
      }
    });
  }
}
