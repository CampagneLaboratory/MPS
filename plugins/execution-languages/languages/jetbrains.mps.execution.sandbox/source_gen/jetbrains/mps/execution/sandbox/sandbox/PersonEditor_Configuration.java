package jetbrains.mps.execution.sandbox.sandbox;

/*Generated by MPS */

import jetbrains.mps.execution.api.settings.IPersistentConfiguration;
import jetbrains.mps.execution.api.settings.ITemplatePersistentConfiguration;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;
import org.apache.log4j.Priority;
import jetbrains.mps.execution.api.settings.SettingsEditorEx;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class PersonEditor_Configuration implements IPersistentConfiguration, ITemplatePersistentConfiguration {
  @NotNull
  private PersonEditor_Configuration.MyState myState = new PersonEditor_Configuration.MyState();

  public void checkConfiguration() throws RuntimeConfigurationException {
    if (!(check_s1toyp_a0a0a(this.getName()))) {
      throw new RuntimeConfigurationException("Name should contain only letterts and spaces.");
    }
    if (!(check_s1toyp_a0b0a(this.getEmail()))) {
      throw new RuntimeConfigurationException("Email should be valid.");
    }
  }

  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    element.addContent(XmlSerializer.serialize(myState));
  }

  @Override
  public void readExternal(Element element) throws InvalidDataException {
    if (element == null) {
      throw new InvalidDataException("Cant read " + this + ": element is null.");
    }
    XmlSerializer.deserializeInto(myState, (Element) element.getChildren().get(0));
  }

  public String getName() {
    return myState.myName;
  }

  public String getEmail() {
    return myState.myEmail;
  }

  public void setName(String value) {
    myState.myName = value;
  }

  public void setEmail(String value) {
    myState.myEmail = value;
  }

  @Override
  public PersonEditor_Configuration clone() {
    PersonEditor_Configuration clone = null;
    try {
      clone = createCloneTemplate();
      clone.myState = (PersonEditor_Configuration.MyState) myState.clone();
      return clone;
    } catch (CloneNotSupportedException ex) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("", ex);
      }
    }
    return clone;
  }

  public class MyState {
    public String myName;
    public String myEmail;

    public MyState() {
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
      PersonEditor_Configuration.MyState state = new PersonEditor_Configuration.MyState();
      state.myName = myName;
      state.myEmail = myEmail;
      return state;
    }
  }

  public PersonEditor_Configuration() {
  }

  private SettingsEditorEx<PersonEditor_Configuration> myEditorEx;

  public PersonEditor_Configuration createCloneTemplate() {
    return new PersonEditor_Configuration();
  }

  public PersonEditor_Configuration_Editor getEditor() {
    return new PersonEditor_Configuration_Editor();
  }

  public SettingsEditorEx<PersonEditor_Configuration> getEditorEx() {
    if (myEditorEx == null) {
      myEditorEx = getEditor();
    }
    return myEditorEx;
  }

  protected static Logger LOG = LogManager.getLogger(PersonEditor_Configuration.class);

  private static boolean check_s1toyp_a0a0a(String checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.matches("(\\w|\\s)*");
    }
    return false;
  }

  private static boolean check_s1toyp_a0b0a(String checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.matches("(\\w|\\.)*@(\\w|\\.)*");
    }
    return false;
  }
}
