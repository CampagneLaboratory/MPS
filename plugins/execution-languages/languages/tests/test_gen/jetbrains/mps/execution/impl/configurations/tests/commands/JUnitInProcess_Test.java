package jetbrains.mps.execution.impl.configurations.tests.commands;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import java.util.List;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestRunState;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestEventsDispatcher;
import jetbrains.mps.execution.configurations.implementation.plugin.plugin.Executor;
import jetbrains.mps.execution.configurations.implementation.plugin.plugin.JUnitLightExecutor;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.execution.api.commands.OutputRedirector;
import jetbrains.mps.baseLanguage.unitTest.execution.client.UnitTestProcessListener;
import jetbrains.mps.execution.api.commands.ProcessHandlerBuilder;
import junit.framework.Assert;
import com.intellij.execution.ExecutionException;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelReference;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestNodeWrapperFactory;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

@MPSLaunch
public class JUnitInProcess_Test extends BaseTransformationTest {
  @Test
  public void test_startSimpleTestCase() throws Throwable {
    this.initTest("${mps_home}", "r:e2bad6d6-3029-4bc3-b44d-49863f32d863(jetbrains.mps.execution.impl.configurations.tests.commands@tests)", false);
    this.runTest("jetbrains.mps.execution.impl.configurations.tests.commands.JUnitInProcess_Test$TestBody", "test_startSimpleTestCase", false);
  }
  @Test
  public void test_startFailedTestCase() throws Throwable {
    this.initTest("${mps_home}", "r:e2bad6d6-3029-4bc3-b44d-49863f32d863(jetbrains.mps.execution.impl.configurations.tests.commands@tests)", false);
    this.runTest("jetbrains.mps.execution.impl.configurations.tests.commands.JUnitInProcess_Test$TestBody", "test_startFailedTestCase", false);
  }
  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_startSimpleTestCase() throws Exception {
      this.checkTests(this.wrapTests(Sequence.<String>singleton("SimpleTestCase_Test")), ListSequence.fromList(new ArrayList<ITestNodeWrapper>()));
    }
    public void test_startFailedTestCase() throws Exception {
      this.checkTests(ListSequence.fromList(new ArrayList<ITestNodeWrapper>()), this.wrapTests(Sequence.<String>singleton("FailedTestCase_Test")));
    }
    public void checkTests(final List<ITestNodeWrapper> success, final List<ITestNodeWrapper> failure) {
      try {
        List<ITestNodeWrapper> testNodes = ListSequence.fromList(success).union(ListSequence.fromList(failure)).toListSequence();
        final TestRunState runState = new TestRunState(testNodes);
        TestEventsDispatcher eventsDispatcher = new TestEventsDispatcher(runState);

        Executor processExecutor;
        processExecutor = new JUnitLightExecutor(testNodes, eventsDispatcher);
        if (LOG.isInfoEnabled()) {
          LOG.info("Starting in-process-execution");
        }
        ProcessHandler process = processExecutor.execute();
        final Wrappers._T<CheckTestStateListener> checkListener = new Wrappers._T<CheckTestStateListener>();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            checkListener.value = new CheckTestStateListener(success, failure);
            runState.addListener(checkListener.value);
          }
        });
        OutputRedirector.redirect(process, new UnitTestProcessListener(eventsDispatcher));
        int exitcode = ProcessHandlerBuilder.startAndWait(process, 30 * 1000);
        if (exitcode != ListSequence.fromList(failure).count()) {
          Assert.fail("Exit code must be equal to " + ListSequence.fromList(failure).count() + ", but " + exitcode);
        } else if (exitcode < 0) {
          Assert.fail("Process is running for too long");
        }
        if (!(checkListener.value.getMessages().equals(""))) {
          Assert.fail(checkListener.value.getMessages());
        }
      } catch (ExecutionException e) {
        Assert.fail(e.getMessage());
      }
    }
    public List<ITestNodeWrapper> wrapTests(final Iterable<String> names) {
      final List<ITestNodeWrapper> result = ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          SModel model = SModelRepository.getInstance().getModelDescriptor(new SModelReference("jetbrains.mps.execution.impl.configurations.tests.commands.sandbox2", "tests"));
          for (final String name : names) {
            SNode mainNode = ListSequence.fromList(SModelOperations.getRoots(model, "jetbrains.mps.lang.core.structure.INamedConcept")).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return eq_a45m2_a0a0a0a0a0a0a1a0a0a0a1a3c(SPropertyOperations.getString(it, "name"), name);
              }
            });
            assert mainNode != null;
            ListSequence.fromList(result).addElement(TestNodeWrapperFactory.tryToWrap(mainNode));
          }
        }
      });
      return result;
    }
    private static boolean eq_a45m2_a0a0a0a0a0a0a1a0a0a0a1a3c(Object a, Object b) {
      return (a != null ? a.equals(b) : a == b);
    }
  }
  protected static Logger LOG = LogManager.getLogger(JUnitInProcess_Test.class);
}
