package jetbrains.mps.execution.configurations.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.execution.api.configurations.BaseMpsBeforeTaskProvider;
import com.intellij.openapi.util.Key;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNodeReference;
import com.intellij.openapi.project.Project;
import com.intellij.execution.runners.ExecutionEnvironment;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.generator.ModelGenerationStatusManager;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.make.IMakeService;
import java.util.concurrent.Future;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.smodel.resources.ModelsToResources;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;

public class MakeNodePointers_BeforeTask extends BaseMpsBeforeTaskProvider<MakeNodePointers_BeforeTask.MakeNodePointers_BeforeTask_RunTask> {
  private static final Key<MakeNodePointers_BeforeTask.MakeNodePointers_BeforeTask_RunTask> KEY = Key.create("jetbrains.mps.execution.configurations.pluginSolution.plugin.MakeNodePointers_BeforeTask");
  public MakeNodePointers_BeforeTask() {
    super("MakeNodePointers", "Make");
  }
  protected MakeNodePointers_BeforeTask.MakeNodePointers_BeforeTask_RunTask createTaskImpl() {
    return new MakeNodePointers_BeforeTask.MakeNodePointers_BeforeTask_RunTask();
  }
  public Key<MakeNodePointers_BeforeTask.MakeNodePointers_BeforeTask_RunTask> getId() {
    return KEY;
  }
  public static class MakeNodePointers_BeforeTask_RunTask extends BaseMpsBeforeTaskProvider.BaseMpsBeforeRunTask<MakeNodePointers_BeforeTask.MakeNodePointers_BeforeTask_RunTask> {
    private List<SNodeReference> myNodePointers;
    public MakeNodePointers_BeforeTask_RunTask() {
      super(KEY);
    }
    public boolean configure(List<SNodeReference> nodePointers) {
      myNodePointers = nodePointers;
      return true;
    }
    public boolean execute(Project project, ExecutionEnvironment environment) {
      Iterable<SModel> models = ListSequence.fromList(myNodePointers).where(new IWhereFilter<SNodeReference>() {
        public boolean accept(SNodeReference it) {
          return it != null;
        }
      }).select(new ISelector<SNodeReference, SModel>() {
        public SModel select(SNodeReference it) {
          return (SModel) SNodeOperations.getModelFromNodeReference(((SNodePointer) it));
        }
      }).distinct().where(new IWhereFilter<SModel>() {
        public boolean accept(SModel it) {
          return ModelGenerationStatusManager.getInstance().generationRequired(it);
        }
      });
      if (Sequence.fromIterable(models).isEmpty()) {
        return true;
      }

      MakeSession session = new MakeSession(new ProjectOperationContext(ProjectHelper.toMPSProject(project)), null, true);
      if (IMakeService.INSTANCE.get().openNewSession(session)) {
        Future<IResult> future = IMakeService.INSTANCE.get().make(session, new ModelsToResources(new ProjectOperationContext(ProjectHelper.toMPSProject(project)), models).resources(false));
        IResult result = null;
        try {
          result = future.get();
        } catch (CancellationException ignore) {
        } catch (InterruptedException ignore) {
        } catch (ExecutionException ignore) {
        }
        return result != null && result.isSucessful();
      }
      return true;
    }
  }
}
