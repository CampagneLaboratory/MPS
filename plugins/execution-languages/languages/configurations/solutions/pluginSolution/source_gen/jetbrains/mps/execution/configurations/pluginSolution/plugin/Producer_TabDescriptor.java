package jetbrains.mps.execution.configurations.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.relations.RelationDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Producer_TabDescriptor extends RelationDescriptor {
  public Producer_TabDescriptor() {
  }

  public String getTitle() {
    return "Producer";
  }

  public int compareTo(RelationDescriptor descriptor) {
    return new Producer_Order().compare(this, descriptor);
  }

  public void startListening() {
    throw new RuntimeException("NOT IMPLEMENTED");
  }

  public SNode getBaseNode(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.execution.configurations.structure.RunConfigurationProducer")) {
      return SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.execution.configurations.structure.RunConfigurationProducer"), "configuration", true), "persistentConfiguration", false);
    }
    return null;
  }

  public boolean isApplicable(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.execution.configurations.structure.RunConfiguration");
  }

  public List<SNode> getNodes(SNode node) {
    final SNode nodeFinal = node;
    return ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(node), "jetbrains.mps.execution.configurations.structure.RunConfigurationProducer")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(SLinkOperations.getTarget(it, "configuration", true), "persistentConfiguration", false) == nodeFinal;
      }
    }).toListSequence();
  }

  public boolean isSingle() {
    return false;
  }

  public List<SNode> getConcepts(final SNode node) {
    return ListSequence.fromListAndArray(new ArrayList<SNode>(), SConceptOperations.findConceptDeclaration("jetbrains.mps.execution.configurations.structure.RunConfigurationProducer"));
  }

  public SNode createNode(final SNode node, final SNode concept) {
    SNode producer = SConceptOperations.createNewNode("jetbrains.mps.execution.configurations.structure.RunConfigurationProducer", null);
    SLinkOperations.setTarget(producer, "configuration", createPersistentConfigurationType_rqzr2x_a0b0a0(node), true);
    SModelOperations.addRootNode(SNodeOperations.getModel(node), producer);
    return producer;
  }

  private static SNode createPersistentConfigurationType_rqzr2x_a0b0a0(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.execution.settings.structure.PersistentConfigurationType", null, GlobalScope.getInstance(), false);
    n1.setReferenceTarget("persistentConfiguration", (SNode) p0);
    return n1;
  }
}
