package jetbrains.mps.execution.configurations.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractRunConfigurationExecutor = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.AbstractRunConfigurationExecutor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.execution.common.structure.IGeneratedToClass", "jetbrains.mps.execution.settings.structure.PersistentConfigurationAssistent").properties("configurationName", "canRun").references("runConfiguration").children(new String[]{"execute", "beforeTask"}, new boolean[]{false, true}).abstract_().alias("abstract executor", "").create();
  /*package*/ final ConceptDescriptor myConceptBeforeTask = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.BeforeTask").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.structure.structure.IStructureDeprecatable", "jetbrains.mps.execution.common.structure.IGeneratedToClass").children(new String[]{"execute", "parameter"}, new boolean[]{false, true}).alias("before task", "").create();
  /*package*/ final ConceptDescriptor myConceptBeforeTaskCall = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.BeforeTaskCall").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("beforeTask").children(new String[]{"parameter"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptBeforeTaskParameter = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.BeforeTaskParameter").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptBeforeTaskParameterReference = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.BeforeTaskParameterReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference").references("parameterDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConfigurationFromExecutorReference = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.ConfigurationFromExecutorReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.INamedConcept").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConsoleCreator = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.ConsoleCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"project", "viewer"}, new boolean[]{false, false}).alias("console", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConsoleType = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.ConsoleType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("console", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCreate_ConceptFunction = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.Create_ConceptFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("create", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDebuggerSettings_Parameter = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.DebuggerSettings_Parameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("debuggerSettings", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEnvironmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.EnvironmentExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("environment", "execution environment").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExecuteBeforeTask_ConceptFunction = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.ExecuteBeforeTask_ConceptFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("execute", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExecuteConfiguration_Function = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.ExecuteConfiguration_Function").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.baseLanguage.structure.ILocalVariableElementList").alias("execute", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExecutor_Parameter = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.Executor_Parameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("executor", "").create();
  /*package*/ final ConceptDescriptor myConceptGetProjectOperation = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.GetProjectOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").alias("project", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptModelSource = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.ModelSource").super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").parents("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").alias("model (deprecated)", "").create();
  /*package*/ final ConceptDescriptor myConceptModuleSource = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.ModuleSource").super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").parents("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").alias("module (deprecated)", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeListSource = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.NodeListSource").super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").parents("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").references("concept").alias("nlist", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeSource = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.NodeSource").super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").parents("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").references("concept").alias("node", "").create();
  /*package*/ final ConceptDescriptor myConceptProjectSource = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.ProjectSource").super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").parents("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").alias("project", "").create();
  /*package*/ final ConceptDescriptor myConceptProject_Parameter = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.Project_Parameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("project", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRunConfiguration = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.RunConfiguration").super_("jetbrains.mps.execution.settings.structure.PersistentConfiguration").parents("jetbrains.mps.execution.settings.structure.PersistentConfiguration").references("configurationKind").children(new String[]{"editor", "icon"}, new boolean[]{false, false}).alias("run configuration", "").create();
  /*package*/ final ConceptDescriptor myConceptRunConfigurationCreator = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.RunConfigurationCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").references("configuration").children(new String[]{"configurationName"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRunConfigurationExecutor = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.RunConfigurationExecutor").super_("jetbrains.mps.execution.configurations.structure.AbstractRunConfigurationExecutor").parents("jetbrains.mps.execution.configurations.structure.AbstractRunConfigurationExecutor").properties("canDebug").children(new String[]{"debuggerConfiguration"}, new boolean[]{false}).alias("executor", "").create();
  /*package*/ final ConceptDescriptor myConceptRunConfigurationKind = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.RunConfigurationKind").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.execution.common.structure.IGeneratedToClass").children(new String[]{"icon"}, new boolean[]{false}).alias("run configuration kind", "").create();
  /*package*/ final ConceptDescriptor myConceptRunConfigurationProducer = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.RunConfigurationProducer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.execution.common.structure.IGeneratedToClass").children(new String[]{"configuration", "produce"}, new boolean[]{false, true}).alias("producer", "").create();
  /*package*/ final ConceptDescriptor myConceptRunConfigurationProducerPart = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.RunConfigurationProducerPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.execution.common.structure.IGeneratedToClass").children(new String[]{"create", "source"}, new boolean[]{false, false}).alias("produce", "").create();
  /*package*/ final ConceptDescriptor myConceptRunConfigurationSource = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().alias("source", "").create();
  /*package*/ final ConceptDescriptor myConceptSModelSource = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.SModelSource").super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").parents("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").alias("model", "").create();
  /*package*/ final ConceptDescriptor myConceptSModuleSource = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.SModuleSource").super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").parents("jetbrains.mps.execution.configurations.structure.RunConfigurationSource").alias("module", "").create();
  /*package*/ final ConceptDescriptor myConceptSource_ConceptFunctionParameter = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.Source_ConceptFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("source", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptStartProcessHandlerStatement = new ConceptDescriptorBuilder("jetbrains.mps.execution.configurations.structure.StartProcessHandlerStatement").super_("jetbrains.mps.baseLanguage.structure.ReturnStatement").parents("jetbrains.mps.baseLanguage.structure.ReturnStatement").children(new String[]{"process", "tool"}, new boolean[]{false, false}).alias("start process handler", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractRunConfigurationExecutor, myConceptBeforeTask, myConceptBeforeTaskCall, myConceptBeforeTaskParameter, myConceptBeforeTaskParameterReference, myConceptConfigurationFromExecutorReference, myConceptConsoleCreator, myConceptConsoleType, myConceptCreate_ConceptFunction, myConceptDebuggerSettings_Parameter, myConceptEnvironmentExpression, myConceptExecuteBeforeTask_ConceptFunction, myConceptExecuteConfiguration_Function, myConceptExecutor_Parameter, myConceptGetProjectOperation, myConceptModelSource, myConceptModuleSource, myConceptNodeListSource, myConceptNodeSource, myConceptProjectSource, myConceptProject_Parameter, myConceptRunConfiguration, myConceptRunConfigurationCreator, myConceptRunConfigurationExecutor, myConceptRunConfigurationKind, myConceptRunConfigurationProducer, myConceptRunConfigurationProducerPart, myConceptRunConfigurationSource, myConceptSModelSource, myConceptSModuleSource, myConceptSource_ConceptFunctionParameter, myConceptStartProcessHandlerStatement);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0jb, conceptFqName)) {
      case 0:
        return myConceptAbstractRunConfigurationExecutor;
      case 1:
        return myConceptBeforeTask;
      case 2:
        return myConceptBeforeTaskCall;
      case 3:
        return myConceptBeforeTaskParameter;
      case 4:
        return myConceptBeforeTaskParameterReference;
      case 5:
        return myConceptConfigurationFromExecutorReference;
      case 6:
        return myConceptConsoleCreator;
      case 7:
        return myConceptConsoleType;
      case 8:
        return myConceptCreate_ConceptFunction;
      case 9:
        return myConceptDebuggerSettings_Parameter;
      case 10:
        return myConceptEnvironmentExpression;
      case 11:
        return myConceptExecuteBeforeTask_ConceptFunction;
      case 12:
        return myConceptExecuteConfiguration_Function;
      case 13:
        return myConceptExecutor_Parameter;
      case 14:
        return myConceptGetProjectOperation;
      case 15:
        return myConceptModelSource;
      case 16:
        return myConceptModuleSource;
      case 17:
        return myConceptNodeListSource;
      case 18:
        return myConceptNodeSource;
      case 19:
        return myConceptProjectSource;
      case 20:
        return myConceptProject_Parameter;
      case 21:
        return myConceptRunConfiguration;
      case 22:
        return myConceptRunConfigurationCreator;
      case 23:
        return myConceptRunConfigurationExecutor;
      case 24:
        return myConceptRunConfigurationKind;
      case 25:
        return myConceptRunConfigurationProducer;
      case 26:
        return myConceptRunConfigurationProducerPart;
      case 27:
        return myConceptRunConfigurationSource;
      case 28:
        return myConceptSModelSource;
      case 29:
        return myConceptSModuleSource;
      case 30:
        return myConceptSource_ConceptFunctionParameter;
      case 31:
        return myConceptStartProcessHandlerStatement;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0jb = new String[]{"jetbrains.mps.execution.configurations.structure.AbstractRunConfigurationExecutor", "jetbrains.mps.execution.configurations.structure.BeforeTask", "jetbrains.mps.execution.configurations.structure.BeforeTaskCall", "jetbrains.mps.execution.configurations.structure.BeforeTaskParameter", "jetbrains.mps.execution.configurations.structure.BeforeTaskParameterReference", "jetbrains.mps.execution.configurations.structure.ConfigurationFromExecutorReference", "jetbrains.mps.execution.configurations.structure.ConsoleCreator", "jetbrains.mps.execution.configurations.structure.ConsoleType", "jetbrains.mps.execution.configurations.structure.Create_ConceptFunction", "jetbrains.mps.execution.configurations.structure.DebuggerSettings_Parameter", "jetbrains.mps.execution.configurations.structure.EnvironmentExpression", "jetbrains.mps.execution.configurations.structure.ExecuteBeforeTask_ConceptFunction", "jetbrains.mps.execution.configurations.structure.ExecuteConfiguration_Function", "jetbrains.mps.execution.configurations.structure.Executor_Parameter", "jetbrains.mps.execution.configurations.structure.GetProjectOperation", "jetbrains.mps.execution.configurations.structure.ModelSource", "jetbrains.mps.execution.configurations.structure.ModuleSource", "jetbrains.mps.execution.configurations.structure.NodeListSource", "jetbrains.mps.execution.configurations.structure.NodeSource", "jetbrains.mps.execution.configurations.structure.ProjectSource", "jetbrains.mps.execution.configurations.structure.Project_Parameter", "jetbrains.mps.execution.configurations.structure.RunConfiguration", "jetbrains.mps.execution.configurations.structure.RunConfigurationCreator", "jetbrains.mps.execution.configurations.structure.RunConfigurationExecutor", "jetbrains.mps.execution.configurations.structure.RunConfigurationKind", "jetbrains.mps.execution.configurations.structure.RunConfigurationProducer", "jetbrains.mps.execution.configurations.structure.RunConfigurationProducerPart", "jetbrains.mps.execution.configurations.structure.RunConfigurationSource", "jetbrains.mps.execution.configurations.structure.SModelSource", "jetbrains.mps.execution.configurations.structure.SModuleSource", "jetbrains.mps.execution.configurations.structure.Source_ConceptFunctionParameter", "jetbrains.mps.execution.configurations.structure.StartProcessHandlerStatement"};
}
