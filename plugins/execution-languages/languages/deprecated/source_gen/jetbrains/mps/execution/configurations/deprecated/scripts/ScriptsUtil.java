package jetbrains.mps.execution.configurations.deprecated.scripts;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SModelReference;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.smodel.StaticReference;

public class ScriptsUtil {
  public ScriptsUtil() {
  }

  public static Iterable<SModel.ImportElement> getImports(final SModel model, final String longName) {
    return Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModel.ImportElement>() {
      public Iterable<SModel.ImportElement> iterable() {
        return model.importedModels();
      }
    })).where(new IWhereFilter<SModel.ImportElement>() {
      public boolean accept(SModel.ImportElement it) {
        return it.getModelReference().getLongName().equals(longName);
      }
    });
  }

  public static void updateReferencesToModel(final SNode node, String longName, SModelReference newModelReference) {
    List<SModel.ImportElement> imports = Sequence.fromIterable(ScriptsUtil.getImports(SNodeOperations.getModel(node), longName)).toListSequence();
    ListSequence.fromList(imports).visitAll(new IVisitor<SModel.ImportElement>() {
      public void visit(SModel.ImportElement it) {
        SNodeOperations.getModel(node).deleteModelImport(it.getModelReference());
      }
    });

    SNodeOperations.getModel(node).addModelImport(newModelReference, false);
    for (SNode chileNode : ListSequence.fromList(SNodeOperations.getDescendants(node, null, true, new String[]{}))) {
      for (SReference ref : Sequence.fromIterable(chileNode.getReferences())) {
        if (ref.getTargetSModelReference().getLongName().equals(longName)) {
          ((jetbrains.mps.smodel.SReference) ref).setTargetSModelReference(newModelReference);
        }
      }
    }
  }

  public static void updateReferencesToClassifier(SNode node, String modelLongName, String classifierName, SModelReference newModelReference, SNode newNodeToReference) {
    boolean found = false;
    for (SNode childNode : ListSequence.fromList(SNodeOperations.getDescendants(node, null, true, new String[]{}))) {
      for (SReference ref : Sequence.fromIterable(childNode.getReferences())) {
        String resolveInfo = ((jetbrains.mps.smodel.SReference) ref).getResolveInfo();
        if (ref.getTargetSModelReference().getLongName().equals(modelLongName) && ((resolveInfo != null && resolveInfo.length() > 0) && resolveInfo.contains(classifierName))) {
          found = true;
          ((jetbrains.mps.smodel.SReference) ref).setTargetSModelReference(newModelReference);
          if (ref instanceof StaticReference) {
            ((StaticReference) ref).setTargetNodeId(newNodeToReference.getNodeId());
          }
        }
      }
    }
    if (found) {
      SNodeOperations.getModel(node).addModelImport(newModelReference, false);
    }
  }
}
