package jetbrains.mps.execution.commands.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.intentions.IntentionDescriptor;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class ConvertToList_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ConvertToList_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.execution.commands.structure.ListCommandPart";
  }

  public String getPresentation() {
    return "ConvertToList";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.execution.commands.intentions.ConvertToList_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    if (editorContext.getSelectedNode() != node && !(isVisibleInChild(node, editorContext.getSelectedNode(), editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromList(SLinkOperations.getTargets(node, "items", true)).isNotEmpty();
  }

  private boolean isVisibleInChild(final SNode node, final SNode childNode, final EditorContext editorContext) {
    return eq_63cojg_a0a0i(SNodeOperations.getContainingLinkRole(childNode), "items");
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:611f7e3f-ffc4-4896-a805-c9fe694989ca(jetbrains.mps.execution.commands.intentions)", "2168104298250389155");
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ConvertToList_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  private static boolean eq_63cojg_a0a0i(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Convert Items to Explicit List Creation";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      List<SNode> items = SLinkOperations.getTargets(node, "items", true);
      ListSequence.fromList(items).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SNodeOperations.detachNode(it);
        }
      });
      SLinkOperations.setTarget(node, "list", new ConvertToList_Intention.QuotationClass_63cojg_a0a0c0b0().createNode(items), true);
    }

    public IntentionDescriptor getDescriptor() {
      return ConvertToList_Intention.this;
    }
  }

  public static class QuotationClass_63cojg_a0a0c0b0 {
    public QuotationClass_63cojg_a0a0c0b0() {
    }

    public SNode createNode(Object parameter_6) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericNewExpression", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_4 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit", null, null, GlobalScope.getInstance(), false);
          SNode quotedNode1_5 = quotedNode_2;
          {
            List<SNode> nodes = (List<SNode>) parameter_6;
            for (SNode child : nodes) {
              quotedNode_2.addChild("initValue", HUtil.copyIfNecessary(child));
            }
          }
          quotedNode_1.addChild("creator", quotedNode1_5);
        }
        result = quotedNode1_4;
      }
      return result;
    }
  }
}
