package jetbrains.mps.execution.commands.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.node.EditorAspectDescriptor;
import jetbrains.mps.openapi.editor.node.EditorAspect;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public EditorAspect getAspect(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return new CommandBuilderExpression_Editor();
      case 1:
        return new CommandDebuggerOperation_Editor();
      case 2:
        return new CommandDeclaration_Editor();
      case 3:
        return new CommandParameterAssignment_Editor();
      case 4:
        return new CommandParameterReference_Editor();
      case 5:
        return new CommandPartLengthOperation_Editor();
      case 6:
        return new CommandPartToListOperation_Editor();
      case 7:
        return new CommandProcessType_Editor();
      case 8:
        return new CommandReferenceExpression_Editor();
      case 9:
        return new CommandType_Editor();
      case 10:
        return new DebuggerSettingsCommandParameterDeclaration_Editor();
      case 11:
        return new ExecuteCommandPart_Editor();
      case 12:
        return new ExplicitCommandParameterDeclaration_Editor();
      case 13:
        return new KeyValueCommandPart_Editor();
      case 14:
        return new ListCommandPart_Editor();
      case 15:
        return new NewProcessBuilderExpression_Editor();
      case 16:
        return new PropertyCommandPart_Editor();
      case 17:
        return new RedirectOutputExpression_Editor();
      case 18:
        return new ReportErrorStatement_Editor();
      case 19:
        return new StartAndWaitOperation_Editor();
      default:
    }
    return null;
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.execution.commands.structure.CommandBuilderExpression", "jetbrains.mps.execution.commands.structure.CommandDebuggerOperation", "jetbrains.mps.execution.commands.structure.CommandDeclaration", "jetbrains.mps.execution.commands.structure.CommandParameterAssignment", "jetbrains.mps.execution.commands.structure.CommandParameterReference", "jetbrains.mps.execution.commands.structure.CommandPartLengthOperation", "jetbrains.mps.execution.commands.structure.CommandPartToListOperation", "jetbrains.mps.execution.commands.structure.CommandProcessType", "jetbrains.mps.execution.commands.structure.CommandReferenceExpression", "jetbrains.mps.execution.commands.structure.CommandType", "jetbrains.mps.execution.commands.structure.DebuggerSettingsCommandParameterDeclaration", "jetbrains.mps.execution.commands.structure.ExecuteCommandPart", "jetbrains.mps.execution.commands.structure.ExplicitCommandParameterDeclaration", "jetbrains.mps.execution.commands.structure.KeyValueCommandPart", "jetbrains.mps.execution.commands.structure.ListCommandPart", "jetbrains.mps.execution.commands.structure.NewProcessBuilderExpression", "jetbrains.mps.execution.commands.structure.PropertyCommandPart", "jetbrains.mps.execution.commands.structure.RedirectOutputExpression", "jetbrains.mps.execution.commands.structure.ReportErrorStatement", "jetbrains.mps.execution.commands.structure.StartAndWaitOperation"};
}
