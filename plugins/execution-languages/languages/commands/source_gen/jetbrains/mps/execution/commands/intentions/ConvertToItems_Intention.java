package jetbrains.mps.execution.commands.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ConvertToItems_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ConvertToItems_Intention() {
  }
  public String getConcept() {
    return "jetbrains.mps.execution.commands.structure.ListCommandPart";
  }
  public String getPresentation() {
    return "ConvertToItems";
  }
  public String getPersistentStateKey() {
    return "jetbrains.mps.execution.commands.intentions.ConvertToItems_Intention";
  }
  public String getLanguageFqName() {
    return "jetbrains.mps.execution.commands";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return true;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    if (editorContext.getSelectedNode() != node && !(isVisibleInChild(node, editorContext.getSelectedNode(), editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    SNode list = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(new UUID(-921973991802319051l, -8446196034130110353l), 6868250101935610313l, 6868250101935610315l, "list"));
    if ((list == null) || !(SNodeOperations.isInstanceOf(list, "jetbrains.mps.baseLanguage.structure.GenericNewExpression"))) {
      return false;
    }
    SNode creator = SLinkOperations.getTarget(SNodeOperations.cast(list, "jetbrains.mps.baseLanguage.structure.GenericNewExpression"), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1145552977093l, 1145553007750l, "creator"));
    return SNodeOperations.isInstanceOf(creator, "jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator") && ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(creator, "jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator"), MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l, -7182180101671965361l), 1237721394592l, 1237721435808l, "initValue"))).isNotEmpty();
  }
  private boolean isVisibleInChild(final SNode node, final SNode childNode, final EditorContext editorContext) {
    return eq_icoqxr_a0a0k(SNodeOperations.getContainingLinkRole(childNode), "list");
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:611f7e3f-ffc4-4896-a805-c9fe694989ca(jetbrains.mps.execution.commands.intentions)", "2168104298250372811");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ConvertToItems_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Convert Explicit List Creation to Items";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode list = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(new UUID(-921973991802319051l, -8446196034130110353l), 6868250101935610313l, 6868250101935610315l, "list"));
      SNodeOperations.detachNode(list);
      ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(new UUID(-921973991802319051l, -8446196034130110353l), 6868250101935610313l, 2168104298250244983l, "items"))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(list, "jetbrains.mps.baseLanguage.structure.GenericNewExpression"), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1145552977093l, 1145553007750l, "creator")), "jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator"), MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l, -7182180101671965361l), 1237721394592l, 1237721435808l, "initValue"))));
    }
    public IntentionDescriptor getDescriptor() {
      return ConvertToItems_Intention.this;
    }
  }
  private static boolean eq_icoqxr_a0a0k(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
