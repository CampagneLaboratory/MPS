package jetbrains.mps.lang.editor.figures.library;

/*Generated by MPS */

import jetbrains.jetpad.projectional.view.RectView;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.views.ResizableContentView;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.model.property.ValueProperty;
import jetbrains.jetpad.projectional.view.PolyLineView;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.jetpad.projectional.view.View;

public class BoxFigure extends RectView implements ResizableContentView {
  private static int DEFAULT_WIDTH = 80;
  private static int DEFAULT_HEIGHT = 60;

  public Property<Integer> figureWidth = new ValueProperty<Integer>(DEFAULT_WIDTH);
  public Property<Integer> figureHeight = new ValueProperty<Integer>(DEFAULT_HEIGHT);
  public Property<Integer> lineWidth = new ValueProperty<Integer>(1);

  private PolyLineView myPolyLine = new PolyLineView();


  public BoxFigure() {
    background().set(Color.WHITE);

    myPolyLine.color().set(Color.GRAY);
    children().add(myPolyLine);

    new Mapper<BoxFigure, BoxFigure>(this, this) {
      @Override
      protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
        super.registerSynchronizers(configuration);
        configuration.add(Synchronizers.forProperty(figureWidth, new Runnable() {
          public void run() {
            adjustPolyLinePoints();
          }
        }));
        configuration.add(Synchronizers.forProperty(figureWidth, new Runnable() {
          public void run() {
            prop(PREFERRED_SIZE).set(new Vector(figureWidth.get(), figureHeight.get()));
          }
        }));
        configuration.add(Synchronizers.forProperty(figureHeight, new Runnable() {
          public void run() {
            adjustPolyLinePoints();
          }
        }));
        configuration.add(Synchronizers.forProperty(figureHeight, new Runnable() {
          public void run() {
            prop(PREFERRED_SIZE).set(new Vector(figureWidth.get(), figureHeight.get()));
          }
        }));
        configuration.add(Synchronizers.forProperty(lineWidth, new Runnable() {
          public void run() {
            adjustPolyLinePoints();
          }
        }));
        configuration.add(Synchronizers.forProperty(lineWidth, myPolyLine.width()));
      }
    }.attachRoot();
  }

  @Override
  protected void doValidate(View.ValidationContext context) {
    Vector prefSize = prop(PREFERRED_SIZE).get();
    figureWidth.set(prefSize.x);
    figureHeight.set(prefSize.y);
    super.doValidate(context);
    Vector newDimension = myPolyLine.bounds().get().dimension;
    if (!(newDimension.equals(dimension().get()))) {
      dimension().set(newDimension);
      super.validate();
    }
  }

  private void adjustPolyLinePoints() {
    int width = figureWidth.get();
    int height = figureHeight.get();
    int lw = lineWidth.get();
    int lw2 = lw / 2;
    Vector origin = bounds().get().origin;

    myPolyLine.points.clear();
    myPolyLine.points.add(new Vector(lw2, lw2).add(origin));
    myPolyLine.points.add(new Vector(width - lw, lw2).add(origin));
    myPolyLine.points.add(new Vector(width - lw, height - lw).add(origin));
    myPolyLine.points.add(new Vector(lw2, height - lw).add(origin));
    myPolyLine.points.add(new Vector(lw2, lw2).add(origin));
  }
}
