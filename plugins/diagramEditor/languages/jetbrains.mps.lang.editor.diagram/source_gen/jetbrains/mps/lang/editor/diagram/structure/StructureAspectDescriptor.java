package jetbrains.mps.lang.editor.diagram.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractArgument = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.AbstractArgument").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptAbstractDiagramCreation = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.AbstractDiagramCreation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").references("concept").children(new String[]{"query"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptAbstractFigureReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.AbstractFigureReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptActionGroup = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.ActionGroup").super_("jetbrains.mps.lang.editor.diagram.structure.PaletteElement").parents("jetbrains.mps.lang.editor.diagram.structure.PaletteElement").children(new String[]{"elements"}, new boolean[]{true}).alias("group", "").create();
  /*package*/ final ConceptDescriptor myConceptActionReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.ActionReference").super_("jetbrains.mps.lang.editor.diagram.structure.PaletteElement").parents("jetbrains.mps.lang.editor.diagram.structure.PaletteElement").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptAttributedFigureReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.AttributedFigureReference").super_("jetbrains.mps.lang.editor.diagram.structure.AbstractFigureReference").parents("jetbrains.mps.lang.editor.diagram.structure.AbstractFigureReference").references("figureAttribute").create();
  /*package*/ final ConceptDescriptor myConceptBLQueryArgument = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.BLQueryArgument").super_("jetbrains.mps.lang.editor.diagram.structure.AbstractArgument").parents("jetbrains.mps.lang.editor.diagram.structure.AbstractArgument").children(new String[]{"query"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptCellModel_Diagram = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.CellModel_Diagram").super_("jetbrains.mps.lang.editor.structure.EditorCellModel").parents("jetbrains.mps.lang.editor.structure.EditorCellModel", "jetbrains.mps.lang.editor.structure.Synchronizeable").children(new String[]{"diagramElements", "elementsCreation", "connectorCreation", "paletteDeclaration"}, new boolean[]{true, true, true, false}).alias("diagram", "").create();
  /*package*/ final ConceptDescriptor myConceptCellModel_DiagramConnector = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.CellModel_DiagramConnector").super_("jetbrains.mps.lang.editor.structure.EditorCellModel").parents("jetbrains.mps.lang.editor.structure.EditorCellModel", "jetbrains.mps.lang.editor.structure.Synchronizeable").children(new String[]{"input", "output"}, new boolean[]{false, false}).alias("diagram connector", "").create();
  /*package*/ final ConceptDescriptor myConceptCellModel_DiagramNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.CellModel_DiagramNode").super_("jetbrains.mps.lang.editor.structure.EditorCellModel").parents("jetbrains.mps.lang.editor.structure.EditorCellModel", "jetbrains.mps.lang.editor.structure.Synchronizeable").children(new String[]{"figure", "parameters", "inputPort", "outputPort"}, new boolean[]{false, true, false, false}).alias("diagram node", "").create();
  /*package*/ final ConceptDescriptor myConceptCellModel_DiagramPort = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.CellModel_DiagramPort").super_("jetbrains.mps.lang.editor.structure.EditorCellModel").parents("jetbrains.mps.lang.editor.structure.EditorCellModel", "jetbrains.mps.lang.editor.structure.Synchronizeable").properties("input").alias("diagram port", "").create();
  /*package*/ final ConceptDescriptor myConceptConnectionEnd = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.ConnectionEnd").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptConnectionEndBLQuery = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.ConnectionEndBLQuery").super_("jetbrains.mps.lang.editor.diagram.structure.ConnectionEnd").parents("jetbrains.mps.lang.editor.diagram.structure.ConnectionEnd").children(new String[]{"pointID", "targetNode"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptCreationActionReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.CreationActionReference").super_("jetbrains.mps.lang.editor.diagram.structure.ActionReference").parents("jetbrains.mps.lang.editor.diagram.structure.ActionReference").properties("iconPath").references("elementsCreation").alias("creation", "").create();
  /*package*/ final ConceptDescriptor myConceptCustomElementReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.CustomElementReference").super_("jetbrains.mps.lang.editor.diagram.structure.PaletteElement").parents("jetbrains.mps.lang.editor.diagram.structure.PaletteElement").references("customElement").alias("custom", "").create();
  /*package*/ final ConceptDescriptor myConceptDiagramConnectorCanCreateHandler = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.DiagramConnectorCanCreateHandler").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
  /*package*/ final ConceptDescriptor myConceptDiagramConnectorCreation = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.DiagramConnectorCreation").super_("jetbrains.mps.lang.editor.diagram.structure.AbstractDiagramCreation").parents("jetbrains.mps.lang.editor.diagram.structure.AbstractDiagramCreation").children(new String[]{"canCreate", "handler"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptDiagramConnectorCreationHandler = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.DiagramConnectorCreationHandler").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
  /*package*/ final ConceptDescriptor myConceptDiagramElement = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.DiagramElement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptDiagramElementBLQuery = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.DiagramElementBLQuery").super_("jetbrains.mps.lang.editor.diagram.structure.DiagramElement").parents("jetbrains.mps.lang.editor.diagram.structure.DiagramElement").children(new String[]{"query"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptDiagramElementCreationHandler = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.DiagramElementCreationHandler").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
  /*package*/ final ConceptDescriptor myConceptDiagramElementsCreation = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.DiagramElementsCreation").super_("jetbrains.mps.lang.editor.diagram.structure.AbstractDiagramCreation").parents("jetbrains.mps.lang.editor.diagram.structure.AbstractDiagramCreation").children(new String[]{"handler"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptExternalFigureReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.ExternalFigureReference").super_("jetbrains.mps.lang.editor.diagram.structure.AbstractFigureReference").parents("jetbrains.mps.lang.editor.diagram.structure.AbstractFigureReference").references("figure").create();
  /*package*/ final ConceptDescriptor myConceptFigureParameterMapping = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.FigureParameterMapping").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"argument"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptFromIdFunctionParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.FromIdFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("fromId", "").create();
  /*package*/ final ConceptDescriptor myConceptFromNodeFunctionParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.FromNodeFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("from", "").create();
  /*package*/ final ConceptDescriptor myConceptLinkArgument = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.LinkArgument").super_("jetbrains.mps.lang.editor.diagram.structure.AbstractArgument").parents("jetbrains.mps.lang.editor.diagram.structure.AbstractArgument").references("link").create();
  /*package*/ final ConceptDescriptor myConceptNodeFunctionParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.NodeFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("node", "").create();
  /*package*/ final ConceptDescriptor myConceptPalette = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.Palette").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"elements"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptPaletteElement = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.PaletteElement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptPropertyArgument = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.PropertyArgument").super_("jetbrains.mps.lang.editor.diagram.structure.AbstractArgument").parents("jetbrains.mps.lang.editor.diagram.structure.AbstractArgument").references("property").create();
  /*package*/ final ConceptDescriptor myConceptSeparator = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.Separator").super_("jetbrains.mps.lang.editor.diagram.structure.PaletteElement").parents("jetbrains.mps.lang.editor.diagram.structure.PaletteElement").properties("text").alias("separator", "").create();
  /*package*/ final ConceptDescriptor myConceptThisEditorNodeExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.ThisEditorNodeExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("this", "").create();
  /*package*/ final ConceptDescriptor myConceptToIdFunctionParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.ToIdFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("toId", "").create();
  /*package*/ final ConceptDescriptor myConceptToNodeFunctionParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.ToNodeFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("to", "").create();
  /*package*/ final ConceptDescriptor myConceptXFunctionParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.XFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("x", "").create();
  /*package*/ final ConceptDescriptor myConceptYFunctionParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.diagram.structure.YFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("y", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractArgument, myConceptAbstractDiagramCreation, myConceptAbstractFigureReference, myConceptActionGroup, myConceptActionReference, myConceptAttributedFigureReference, myConceptBLQueryArgument, myConceptCellModel_Diagram, myConceptCellModel_DiagramConnector, myConceptCellModel_DiagramNode, myConceptCellModel_DiagramPort, myConceptConnectionEnd, myConceptConnectionEndBLQuery, myConceptCreationActionReference, myConceptCustomElementReference, myConceptDiagramConnectorCanCreateHandler, myConceptDiagramConnectorCreation, myConceptDiagramConnectorCreationHandler, myConceptDiagramElement, myConceptDiagramElementBLQuery, myConceptDiagramElementCreationHandler, myConceptDiagramElementsCreation, myConceptExternalFigureReference, myConceptFigureParameterMapping, myConceptFromIdFunctionParameter, myConceptFromNodeFunctionParameter, myConceptLinkArgument, myConceptNodeFunctionParameter, myConceptPalette, myConceptPaletteElement, myConceptPropertyArgument, myConceptSeparator, myConceptThisEditorNodeExpression, myConceptToIdFunctionParameter, myConceptToNodeFunctionParameter, myConceptXFunctionParameter, myConceptYFunctionParameter);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0ob, conceptFqName)) {
      case 0:
        return myConceptAbstractArgument;
      case 1:
        return myConceptAbstractDiagramCreation;
      case 2:
        return myConceptAbstractFigureReference;
      case 3:
        return myConceptActionGroup;
      case 4:
        return myConceptActionReference;
      case 5:
        return myConceptAttributedFigureReference;
      case 6:
        return myConceptBLQueryArgument;
      case 7:
        return myConceptCellModel_Diagram;
      case 8:
        return myConceptCellModel_DiagramConnector;
      case 9:
        return myConceptCellModel_DiagramNode;
      case 10:
        return myConceptCellModel_DiagramPort;
      case 11:
        return myConceptConnectionEnd;
      case 12:
        return myConceptConnectionEndBLQuery;
      case 13:
        return myConceptCreationActionReference;
      case 14:
        return myConceptCustomElementReference;
      case 15:
        return myConceptDiagramConnectorCanCreateHandler;
      case 16:
        return myConceptDiagramConnectorCreation;
      case 17:
        return myConceptDiagramConnectorCreationHandler;
      case 18:
        return myConceptDiagramElement;
      case 19:
        return myConceptDiagramElementBLQuery;
      case 20:
        return myConceptDiagramElementCreationHandler;
      case 21:
        return myConceptDiagramElementsCreation;
      case 22:
        return myConceptExternalFigureReference;
      case 23:
        return myConceptFigureParameterMapping;
      case 24:
        return myConceptFromIdFunctionParameter;
      case 25:
        return myConceptFromNodeFunctionParameter;
      case 26:
        return myConceptLinkArgument;
      case 27:
        return myConceptNodeFunctionParameter;
      case 28:
        return myConceptPalette;
      case 29:
        return myConceptPaletteElement;
      case 30:
        return myConceptPropertyArgument;
      case 31:
        return myConceptSeparator;
      case 32:
        return myConceptThisEditorNodeExpression;
      case 33:
        return myConceptToIdFunctionParameter;
      case 34:
        return myConceptToNodeFunctionParameter;
      case 35:
        return myConceptXFunctionParameter;
      case 36:
        return myConceptYFunctionParameter;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0ob = new String[]{"jetbrains.mps.lang.editor.diagram.structure.AbstractArgument", "jetbrains.mps.lang.editor.diagram.structure.AbstractDiagramCreation", "jetbrains.mps.lang.editor.diagram.structure.AbstractFigureReference", "jetbrains.mps.lang.editor.diagram.structure.ActionGroup", "jetbrains.mps.lang.editor.diagram.structure.ActionReference", "jetbrains.mps.lang.editor.diagram.structure.AttributedFigureReference", "jetbrains.mps.lang.editor.diagram.structure.BLQueryArgument", "jetbrains.mps.lang.editor.diagram.structure.CellModel_Diagram", "jetbrains.mps.lang.editor.diagram.structure.CellModel_DiagramConnector", "jetbrains.mps.lang.editor.diagram.structure.CellModel_DiagramNode", "jetbrains.mps.lang.editor.diagram.structure.CellModel_DiagramPort", "jetbrains.mps.lang.editor.diagram.structure.ConnectionEnd", "jetbrains.mps.lang.editor.diagram.structure.ConnectionEndBLQuery", "jetbrains.mps.lang.editor.diagram.structure.CreationActionReference", "jetbrains.mps.lang.editor.diagram.structure.CustomElementReference", "jetbrains.mps.lang.editor.diagram.structure.DiagramConnectorCanCreateHandler", "jetbrains.mps.lang.editor.diagram.structure.DiagramConnectorCreation", "jetbrains.mps.lang.editor.diagram.structure.DiagramConnectorCreationHandler", "jetbrains.mps.lang.editor.diagram.structure.DiagramElement", "jetbrains.mps.lang.editor.diagram.structure.DiagramElementBLQuery", "jetbrains.mps.lang.editor.diagram.structure.DiagramElementCreationHandler", "jetbrains.mps.lang.editor.diagram.structure.DiagramElementsCreation", "jetbrains.mps.lang.editor.diagram.structure.ExternalFigureReference", "jetbrains.mps.lang.editor.diagram.structure.FigureParameterMapping", "jetbrains.mps.lang.editor.diagram.structure.FromIdFunctionParameter", "jetbrains.mps.lang.editor.diagram.structure.FromNodeFunctionParameter", "jetbrains.mps.lang.editor.diagram.structure.LinkArgument", "jetbrains.mps.lang.editor.diagram.structure.NodeFunctionParameter", "jetbrains.mps.lang.editor.diagram.structure.Palette", "jetbrains.mps.lang.editor.diagram.structure.PaletteElement", "jetbrains.mps.lang.editor.diagram.structure.PropertyArgument", "jetbrains.mps.lang.editor.diagram.structure.Separator", "jetbrains.mps.lang.editor.diagram.structure.ThisEditorNodeExpression", "jetbrains.mps.lang.editor.diagram.structure.ToIdFunctionParameter", "jetbrains.mps.lang.editor.diagram.structure.ToNodeFunctionParameter", "jetbrains.mps.lang.editor.diagram.structure.XFunctionParameter", "jetbrains.mps.lang.editor.diagram.structure.YFunctionParameter"};
}
