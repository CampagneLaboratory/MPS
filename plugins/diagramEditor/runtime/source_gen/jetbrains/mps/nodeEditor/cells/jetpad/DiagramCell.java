package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.EditorCell_WithComponent;
import jetbrains.jetpad.projectional.view.awt.ViewContainerComponent;
import jetbrains.mps.nodeEditor.cells.jetpad.model.MPSDiagram;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import javax.swing.JComponent;
import jetbrains.mps.nodeEditor.cells.jetpad.mappers.RootMapper;
import java.awt.Dimension;

public class DiagramCell extends EditorCell_Collection implements EditorCell_WithComponent {
  private ViewContainerComponent myComponent;
  private MPSDiagram myDiagram;


  public DiagramCell(EditorContext editorContext, SNode node) {
    super(editorContext, node, new CellLayout_Horizontal(), null);
    myDiagram = new MPSDiagram(this);
  }

  public MPSDiagram getMPSDiagram() {
    return myDiagram;
  }

  public JComponent getComponent() {
    if (myComponent == null) {
      RootMapper rootMapper = new RootMapper(myDiagram);
      myComponent = new ViewContainerComponent();
      rootMapper.attachRoot();
      myComponent.container(rootMapper.getTarget());
    }
    return myComponent;
  }

  @Override
  protected void relayoutImpl() {
    super.relayoutImpl();
    getComponent().doLayout();
    Dimension preferredSize = getComponent().getPreferredSize();
    getComponent().setSize(preferredSize);
    setWidth(getComponent().getWidth() + myGapLeft + myGapRight);
    setHeight(getComponent().getHeight());
  }

  @Override
  public void onAdd() {
    super.onAdd();
    getEditor().getCellTracker().addComponentCell(this);
  }

  @Override
  public void onRemove() {
    getEditor().getCellTracker().removeComponentCell(this);
    super.onRemove();
  }

  @Override
  public void setX(int x) {
    getComponent().setLocation(x, myComponent.getY());
    super.setX(x);
  }

  @Override
  public void setY(int y) {
    getComponent().setLocation(myComponent.getX(), y);
    super.setY(y);
  }

  @Override
  public void moveTo(int x, int y) {
    super.moveTo(x, y);
    getComponent().setLocation(myX, myY);
  }

  @Override
  public boolean isDrawBorder() {
    return false;
  }
}
