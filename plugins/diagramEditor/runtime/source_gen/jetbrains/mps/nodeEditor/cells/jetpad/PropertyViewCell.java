package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cells.EditorCell_Basic;
import jetbrains.jetpad.model.property.Property;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.util.Pair;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.awt.Graphics;
import jetbrains.mps.nodeEditor.cells.ParentSettings;
import jetbrains.mps.smodel.NodeReadAccessCasterInEditor;
import jetbrains.mps.util.Computable;

public abstract class PropertyViewCell extends EditorCell_Basic {
  protected Property myProperty;

  protected PropertyViewCell(EditorContext editorContext, SNode node) {
    super(editorContext, node);
  }

  public PropertyViewCell(EditorContext editorContext, SNode node, Property property, String propertyName) {
    this(editorContext, node);
    this.myProperty = property;
    synchronizeViewWithModel();
    getEditor().addCellDependentOnNodeProperty(this, new Pair<SNodeReference, String>(new SNodePointer(node), propertyName));
  }

  @Override
  public void paintContent(Graphics g, ParentSettings parentSettingssss) {
  }




  @Override
  public void synchronizeViewWithModel() {
    NodeReadAccessCasterInEditor.runCleanPropertyAccessAction(new Computable<String>() {
      public String compute() {
        synchronizePropertyWithModel();
        return myProperty.get().toString();
      }
    });
    requestRelayout();
  }

  protected abstract void synchronizePropertyWithModel();
}
