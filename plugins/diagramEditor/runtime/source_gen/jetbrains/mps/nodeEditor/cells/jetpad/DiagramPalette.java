package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import javax.swing.JPanel;
import com.intellij.uiDesigner.core.GridLayoutManager;
import jetbrains.mps.openapi.editor.cells.SubstituteInfo;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.actionSystem.ToggleAction;
import com.intellij.uiDesigner.core.GridConstraints;
import javax.swing.JLabel;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPartExt;
import jetbrains.mps.nodeEditor.cellMenu.BasicCellContext;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import javax.swing.SwingConstants;
import javax.swing.JComponent;

public class DiagramPalette extends JPanel {
  private JPanel myBlockActionPanel = new JPanel(new GridLayoutManager(1, 1));
  private JPanel myConnectorActionPanel = new JPanel(new GridLayoutManager(1, 1));

  private SubstituteInfo mySubstituteInfo;
  private DefaultActionGroup myBlockActionGroup = new DefaultActionGroup();
  private DefaultActionGroup myConnectorActionGroup = new DefaultActionGroup();
  private DiagramCell myDiagramCell;
  private List<SubstituteAction> myAllBlockSubstituteActions = ListSequence.fromList(new ArrayList<SubstituteAction>());
  private List<SubstituteAction> myAllConnectorSubstituteActions = ListSequence.fromList(new ArrayList<SubstituteAction>());
  private ToggleAction mySelectedToggleAction;

  public DiagramPalette(DiagramCell diagramCell) {
    super(new GridLayoutManager(4, 1));
    myDiagramCell = diagramCell;
    GridConstraints constraints = new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null);
    add(new JLabel("Blocks"), constraints);
    constraints.setRow(1);
    add(myBlockActionPanel, constraints);

    constraints.setRow(2);
    add(new JLabel("Connectors"), constraints);
    constraints.setRow(3);
    add(myConnectorActionPanel, constraints);
  }



  public void setAllBlockSubstituteInfoPartExt(SubstituteInfoPartExt[] exts) {
    for (SubstituteInfoPartExt ext : exts) {
      ListSequence.fromList(myAllBlockSubstituteActions).addSequence(ListSequence.fromList(ext.createActions(new BasicCellContext(myDiagramCell.getSNode()), myDiagramCell.getContext())));
    }
    updateActions(myBlockActionGroup, myAllBlockSubstituteActions, myBlockActionPanel);
  }

  public void setAllConnectorSubstituteInfoPartExt(SubstituteInfoPartExt[] exts) {
    for (SubstituteInfoPartExt ext : exts) {
      ListSequence.fromList(myAllConnectorSubstituteActions).addSequence(ListSequence.fromList(ext.createActions(new BasicCellContext(myDiagramCell.getSNode()), myDiagramCell.getContext())));
    }
    updateActions(myConnectorActionGroup, myAllConnectorSubstituteActions, myConnectorActionPanel);

  }



  public SubstituteInfo getSubstituteInfo() {
    return mySubstituteInfo;
  }



  /*package*/ void setSubstituteInfo(final SubstituteInfo substituteInfo) {
    mySubstituteInfo = substituteInfo;
  }

  public DiagramCell getDiagramCell() {
    return myDiagramCell;
  }



  /*package*/ void unselectActionWhichWasSelected(ToggleAction actionWhisIsSelected) {
    if (mySelectedToggleAction != actionWhisIsSelected) {
      check_1eehpg_a0a0a02(mySelectedToggleAction);
      mySelectedToggleAction = actionWhisIsSelected;
    }
  }

  /*package*/ void unselectActionWhichWasSelected() {
    mySelectedToggleAction = null;
  }



  private void updateActions(DefaultActionGroup actionGroup, List<SubstituteAction> actions, JPanel actionPanel) {
    actionGroup.removeAll();
    for (SubstituteAction action : ListSequence.fromList(actions)) {
      DiagramCell.DiagramSubstituteActionWraper actionWrapper = ((DiagramCell.DiagramSubstituteActionWraper) action);
      ToggleAction substituteButton = new DiagramPaletteButton(this, action, actionWrapper.getMatchingText(""), actionWrapper.getMatchingText(""), actionWrapper.getIconFor(""));
      actionGroup.add(substituteButton);
    }
    GridConstraints gridConstraints = new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null);
    ActionToolbar elementsToolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, actionGroup, true);
    elementsToolbar.setOrientation(SwingConstants.VERTICAL);
    JComponent blockActionPanel = elementsToolbar.getComponent();
    actionPanel.removeAll();
    actionPanel.add(blockActionPanel, gridConstraints);

  }




  private static void check_1eehpg_a0a0a02(ToggleAction checkedDotOperand) {
    if (null != checkedDotOperand) {
      checkedDotOperand.setSelected(null, false);
    }

  }
}
