package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.jetpad.projectional.diagram.view.PolylineConnection;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.nodeEditor.cells.CellFinderUtil;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public abstract class ConnectorViewCell extends GenericViewCell {
  private PolylineConnection myConnection;

  public ConnectorViewCell(EditorContext editorContext, SNode node, CellLayout cellLayout, AbstractCellListHandler handler) {
    super(editorContext, node, cellLayout, handler);
  }

  public ConnectorViewCell(EditorContext editorContext, SNode node) {
    super(editorContext, node, new CellLayout_Indent(), null);
  }

  public PolylineConnection getConnection() {
    return myConnection;
  }

  public void setConnection(PolylineConnection connection) {
    myConnection = connection;
  }

  protected View findConnectionEnd(DiagramViewCell diagramCell, final SNode node) {
    return findConnectionEnd(diagramCell, node, null);
  }

  protected View findConnectionEnd(DiagramViewCell diagramCell, final SNode node, String connectionPointName) {
    GenericViewCell cell = CellFinderUtil.findChildByConditionAndClass(diagramCell, new Condition<EditorCell>() {
      @Override
      public boolean met(EditorCell cell) {
        return cell.isBig() && cell.getSNode().equals(node);
      }
    }, GenericViewCell.class, true);

    if (cell == null) {
      return null;
    }

    if (connectionPointName != null) {
      Queue<View> queue = QueueSequence.fromQueue(new LinkedList<View>());
      QueueSequence.fromQueue(queue).addLastElement(cell.getView());
      while (QueueSequence.fromQueue(queue).isNotEmpty()) {
        View nextView = QueueSequence.fromQueue(queue).removeFirstElement();
        if (nextView instanceof ConnectionPointView && connectionPointName.equals(nextView.prop(ConnectionPointView.ID).get())) {
          return nextView;
        }
        QueueSequence.fromQueue(queue).addSequence(ListSequence.fromList(nextView.children()));
      }
    }
    return cell.getView();
  }

  public boolean updateConnectionEnds(DiagramViewCell rootCell) {
    View connectorView = getView();
    View fromView = getOutputView(rootCell);
    View toView = getInputView(rootCell);
    if (fromView != null && toView != null) {
      if (connectorView.parent().get() != null) {
        connectorView.parent().get().children().remove(connectorView.parent().get().children().indexOf(connectorView));
      }
      connectorView.invalidate();
      myConnection.toView().set(toView);
      myConnection.fromView().set(fromView);
      return true;
    }
    return false;

  }

  public abstract View getInputView(DiagramViewCell rootCell);

  public abstract View getOutputView(DiagramViewCell rootCell);
}
