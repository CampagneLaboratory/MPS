package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cells.EditorCell_Basic;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.model.property.ReadableProperty;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.util.Pair;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.awt.Graphics;
import jetbrains.mps.nodeEditor.cells.ParentSettings;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;

public class PropertyMapperCell extends EditorCell_Basic {
  protected Property myViewProperty;
  protected ReadableProperty myModelProperty;
  protected String myPropertyName;

  protected PropertyMapperCell(EditorContext editorContext, SNode node) {
    super(editorContext, node);
  }

  public PropertyMapperCell(EditorContext editorContext, SNode node, Property<?> viewProperty, ReadableProperty<?> modelProperty, String propertyName) {
    this(editorContext, node);
    this.myViewProperty = viewProperty;
    this.myModelProperty = modelProperty;
    myPropertyName = propertyName;
    getEditor().addCellDependentOnNodeProperty(this, new Pair<SNodeReference, String>(new SNodePointer(node), myPropertyName));
  }

  @Override
  public void paintContent(Graphics g, ParentSettings parentSettings) {
  }




  @Override
  public void synchronizeViewWithModel() {
    myViewProperty.set(myModelProperty.get());
    requestRelayout();
  }

  public void updateModel() {
    ModelAccess.instance().tryWrite(new Runnable() {
      public void run() {
        String groupId = ModelAccess.instance().runReadAction(new Computable<String>() {
          public String compute() {
            return getCellId() + "_" + getSNode().getNodeId().toString();
          }
        });
        getContext().flushEvents();
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            getSNode().setProperty(myPropertyName, (myViewProperty.get() == null ? null : myViewProperty.get().toString()));
          }
        }, null, groupId, false, getContext().getOperationContext().getProject());
      }
    });
  }
}
