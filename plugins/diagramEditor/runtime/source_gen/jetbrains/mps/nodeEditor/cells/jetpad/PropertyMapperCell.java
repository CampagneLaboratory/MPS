package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cells.EditorCell_Basic;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.model.property.ReadableProperty;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import java.awt.Graphics;
import jetbrains.mps.nodeEditor.cells.ParentSettings;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.mps.smodel.ModelAccess;

public abstract class PropertyMapperCell extends EditorCell_Basic {
  protected Property myViewProperty;
  protected ReadableProperty myModelProperty;
  private String myCommandId;

  public PropertyMapperCell(EditorContext editorContext, SNode node) {
    super(editorContext, node);
    myModelProperty = createModelProperty();
    myCommandId = getCellId() + "_" + getSNode().getNodeId().toString();
  }

  @Override
  public void paintContent(Graphics g, ParentSettings parentSettings) {
  }

  public void registerSynchronizers(Mapper.SynchronizersConfiguration configuration, Property viewProperty) {
    assert myViewProperty == null;
    myViewProperty = viewProperty;
    configuration.add(Synchronizers.forProperty(myModelProperty, viewProperty));
    // TODO: create Writable model property and use it in synchronizer 
    configuration.add(Synchronizers.forProperty(viewProperty, new Runnable() {
      public void run() {
        ModelAccess.instance().tryWrite(new Runnable() {
          public void run() {
            ModelAccess.instance().runWriteActionInCommand(new Runnable() {
              public void run() {
                setModelPropertyValue((myViewProperty.get() == null ? null : myViewProperty.get().toString()));
              }
            }, null, myCommandId, false, getContext().getOperationContext().getProject());
          }
        });
      }
    }));
  }

  protected abstract ReadableProperty createModelProperty();

  protected abstract void setModelPropertyValue(String value);

  @Override
  public void synchronizeViewWithModel() {
    if (myViewProperty == null) {
      return;
    }
    myViewProperty.set(myModelProperty.get());
    requestRelayout();
  }
}
