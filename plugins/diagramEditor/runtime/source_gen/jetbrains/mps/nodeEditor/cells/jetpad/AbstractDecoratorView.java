package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.jetpad.projectional.view.GroupView;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.jetpad.projectional.view.PolyLineView;
import jetbrains.jetpad.values.Color;

public abstract class AbstractDecoratorView extends GroupView {
  protected static final int SELECTION_SQUARE_HALF_WIDTH = 3;
  protected GroupView myErrorView;
  protected GroupView mySelectionView;


  public AbstractDecoratorView() {
    initSynchronizers();
  }



  protected View getSelectionView() {
    if (mySelectionView == null) {
      mySelectionView = createSelectionView();
    }
    return mySelectionView;
  }

  protected View getErrorView() {
    if (myErrorView == null) {
      myErrorView = createErrorView();
    }
    return myErrorView;
  }

  private void initSynchronizers() {
    new Mapper<AbstractDecoratorView, AbstractDecoratorView>(this, this) {
      @Override
      protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
        super.registerSynchronizers(configuration);
      }
    }.attachRoot();
  }



  protected abstract GroupView createSelectionView();

  protected abstract GroupView createErrorView();





  public void setSelected(boolean isSelected) {
    if (isSelected) {
      children().add(getSelectionView());
    } else {
      children().remove(getSelectionView());
    }
  }



  public void setError(boolean isError) {
    if (isError) {
      children().add(getErrorView());
    } else {
      children().remove(getErrorView());
    }
  }



  protected View createSelectionRect(Vector origin) {
    PolyLineView selectionRect = new AbstractDecoratorView.SimplePolylineView();
    selectionRect.background().set(Color.LIGHT_GRAY);
    selectionRect.color().set(Color.GRAY);
    selectionRect.points.add(new Vector(origin.x - SELECTION_SQUARE_HALF_WIDTH, origin.y - SELECTION_SQUARE_HALF_WIDTH));
    selectionRect.points.add(new Vector(origin.x + SELECTION_SQUARE_HALF_WIDTH, origin.y - SELECTION_SQUARE_HALF_WIDTH));
    selectionRect.points.add(new Vector(origin.x + SELECTION_SQUARE_HALF_WIDTH, origin.y + SELECTION_SQUARE_HALF_WIDTH));
    selectionRect.points.add(new Vector(origin.x - SELECTION_SQUARE_HALF_WIDTH, origin.y + SELECTION_SQUARE_HALF_WIDTH));
    selectionRect.points.add(new Vector(origin.x - SELECTION_SQUARE_HALF_WIDTH, origin.y - SELECTION_SQUARE_HALF_WIDTH));
    return selectionRect;
  }



  public static class SimplePolylineView extends PolyLineView {
    @Override
    protected boolean contains(Vector vector) {
      return false;
    }
  }
}
