package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.jetpad.projectional.view.ViewPropertySpec;
import jetbrains.jetpad.geometry.Rectangle;
import jetbrains.jetpad.projectional.view.ViewPropertyKind;
import jetbrains.jetpad.projectional.view.PolyLineView;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.projectional.view.GroupView;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public abstract class RectDecoratorView extends AbstractDecoratorView {
  public static final ViewPropertySpec<Rectangle> BOUNDS = new ViewPropertySpec<Rectangle>("bounds", ViewPropertyKind.RELAYOUT, null);

  protected PolyLineView myErrorPolylineView;


  public Property<Rectangle> rectBounds() {
    return prop(BOUNDS);
  }



  protected GroupView createErrorView() {
    GroupView result = new GroupView();
    myErrorPolylineView = new RectDecoratorView.SimplePolylineView();
    myErrorPolylineView.color().set(Color.RED);
    result.children().add(myErrorPolylineView);
    return result;
  }



  protected GroupView createSelectionView() {
    return new GroupView();
  }

  public static class SimplePolylineView extends PolyLineView {
    @Override
    protected boolean contains(Vector vector) {
      return false;
    }
  }




  @Override
  protected void doValidate(View.ValidationContext context) {
    super.doValidate(context);
    if (mySelectionView != null) {
      PolyLineView selectionFrame = new PolyLineView();
      selectionFrame.color().set(Color.GRAY);
      updateSelectionPolyline(selectionFrame);
      mySelectionView.children().clear();
      mySelectionView.children().add(selectionFrame);
      for (Vector point : Sequence.fromIterable(getSelectionPoints())) {
        mySelectionView.children().add(createSelectionRect(point));
      }
    }
    if (myErrorView != null) {
      updateSelectionPolyline(myErrorPolylineView);
    }
    super.doValidate(context);
  }

  private void updateSelectionPolyline(PolyLineView polylineView) {
    Rectangle bounds = rectBounds().get();
    polylineView.points.clear();
    polylineView.points.addAll(ListSequence.fromListAndArray(new ArrayList<Vector>(), new Vector(bounds.origin.x - 1, bounds.origin.y - 1), new Vector(bounds.origin.x + bounds.dimension.x, bounds.origin.y - 1), new Vector(bounds.origin.x + bounds.dimension.x, bounds.origin.y + bounds.dimension.y), new Vector(bounds.origin.x - 1, bounds.origin.y + bounds.dimension.y), new Vector(bounds.origin.x - 1, bounds.origin.y - 1)));
  }



  protected abstract Iterable<Vector> getSelectionPoints();
}
