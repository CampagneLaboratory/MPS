package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.jetpad.model.property.Property;
import jetbrains.mps.project.Project;
import jetbrains.jetpad.model.event.EventHandler;
import jetbrains.jetpad.model.property.PropertyChangeEvent;
import jetbrains.mps.smodel.UndoRunnable;

public abstract class WritableModelProperty<T> extends ReadableModelProperty<T> implements Property<T> {
  private String myCommandId;
  private Project myProject;

  public WritableModelProperty(String commandId, Project project) {
    myCommandId = commandId;
    myProject = project;
    addHandler(new EventHandler<PropertyChangeEvent<T>>() {
      public void onEvent(PropertyChangeEvent<T> event) {
        safeSetModelPropertyValue(event.getNewValue());
      }
    });
  }

  protected void safeSetModelPropertyValue(final T t) {
    myProject.getModelAccess().executeCommand(new UndoRunnable.Base(null, myCommandId) {
      public void run() {
        setModelPropertyValue(t);
      }
    });
  }

  protected abstract void setModelPropertyValue(T value);
}
