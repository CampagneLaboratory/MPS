package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.jetpad.projectional.view.GroupView;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.geometry.Vector;
import java.util.List;
import jetbrains.jetpad.geometry.Segment;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.projectional.view.LineView;

public class ConnectorDecoratorView extends AbstractDecoratorView {
  private static final int CROSS_LENGTH = 5;
  protected GroupView mySelectionView;
  protected ConnectorDecoratorView.CrossView myErrorView;


  protected View getSelectionView() {
    if (mySelectionView == null) {
      mySelectionView = createSelectionView();
    }
    return mySelectionView;
  }

  protected View getErrorView() {
    if (myErrorView == null) {
      myErrorView = createErrorView();
    }
    return myErrorView;
  }



  private Vector getErrorPoint(List<Segment> segments) {
    if (ListSequence.fromList(segments).isEmpty()) {
      return null;
    }
    double sumLength = 0;
    for (Segment segment : ListSequence.fromList(segments)) {
      sumLength += segment.length();
    }
    if (sumLength == 0) {
      return ListSequence.fromList(segments).first().start;
    }
    double halfLength = sumLength / 2.0;
    sumLength = 0;
    for (Segment segment : ListSequence.fromList(segments)) {
      double currentLength = segment.length();
      if (sumLength + currentLength >= halfLength) {
        Vector se = segment.end.sub(segment.start);
        double d = (halfLength - sumLength) / se.length();
        double xToAdd = se.x * d;
        double yToAdd = se.y * d;
        Vector result = segment.start.add(new Vector(((int) xToAdd), ((int) yToAdd)));
        return result;
      }
      sumLength += currentLength;
    }
    return null;

  }




  private ConnectorDecoratorView.CrossView createErrorView() {
    ConnectorDecoratorView.CrossView result = new ConnectorDecoratorView.CrossView();
    result.firstLine.color().set(Color.RED);
    result.secondLine.color().set(Color.RED);
    return result;
  }

  private GroupView createSelectionView() {
    return new GroupView();
  }

  public void updateErrorView(List<Segment> segments) {
    Vector errorPoint = getErrorPoint(segments);
    if (myErrorView == null) {
      return;
    }
    int x = errorPoint.x;
    int y = errorPoint.y;
    myErrorView.firstLine.start().set(new Vector(x - CROSS_LENGTH, y - CROSS_LENGTH));
    myErrorView.firstLine.end().set(new Vector(x + CROSS_LENGTH, y + CROSS_LENGTH));
    myErrorView.secondLine.start().set(new Vector(x + CROSS_LENGTH, y - CROSS_LENGTH));
    myErrorView.secondLine.end().set(new Vector(x - CROSS_LENGTH, y + CROSS_LENGTH));
    myErrorView.invalidate();
  }



  public void updateSelectionView(List<Segment> segments) {
    if (mySelectionView == null) {
      return;
    }
    mySelectionView.children().clear();
    if (ListSequence.fromList(segments).count() == 1) {
      Segment segment = ListSequence.fromList(segments).first();
      mySelectionView.children().add(createBlackSelectionRect(new Vector((segment.end.x + segment.start.x) / 2, (segment.end.y + segment.start.y) / 2)));
    }
    for (Segment segment : ListSequence.fromList(segments)) {
      if (neq_2z6621_a0a0d0o(segment, ListSequence.fromList(segments).last())) {
        mySelectionView.children().add(createBlackSelectionRect(segment.end));
      }
      if (segment.length() > SELECTION_SQUARE_WIDTH * 10) {
        mySelectionView.children().add(createBlackSelectionRect(new Vector((segment.end.x + segment.start.x) / 2, (segment.end.y + segment.start.y) / 2)));
      }
    }
    mySelectionView.invalidate();
  }



  private static class CrossView extends GroupView {
    public final LineView firstLine = new LineView();
    public final LineView secondLine = new LineView();

    public CrossView() {
      children().add(firstLine);
      children().add(secondLine);
    }
  }



  private static boolean neq_2z6621_a0a0d0o(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }
}
