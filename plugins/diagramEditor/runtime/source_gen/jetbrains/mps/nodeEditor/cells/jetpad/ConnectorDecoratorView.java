package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.jetpad.geometry.Segment;
import jetbrains.jetpad.projectional.view.ViewPropertySpec;
import jetbrains.jetpad.projectional.view.ViewPropertyKind;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.jetpad.projectional.view.GroupView;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.projectional.view.LineView;

public class ConnectorDecoratorView extends AbstractDecoratorView {
  private static final int CROSS_LENGTH = 4;
  protected ConnectorDecoratorView.CrossView myCrossErrorView;
  private Iterable<Segment> mySegments;
  public static final ViewPropertySpec<Boolean> IS_VALID = new ViewPropertySpec<Boolean>("isValid", ViewPropertyKind.RELAYOUT, true);


  public void setSegments(Iterable<Segment> segments) {
    mySegments = segments;
  }

  public Property<Boolean> isValid() {
    return prop(IS_VALID);
  }




  @Override
  protected void doValidate(View.ValidationContext context) {
    if (mySegments == null) {
      return;
    }
    super.doValidate(context);
    updateErrorView();
    updateSelectionView();
    super.doValidate(context);
  }



  private Vector getErrorPoint() {
    if (Sequence.fromIterable(mySegments).isEmpty()) {
      return null;
    }
    double sumLength = 0;
    for (Segment segment : Sequence.fromIterable(mySegments)) {
      sumLength += segment.length();
    }
    if (sumLength == 0) {
      return Sequence.fromIterable(mySegments).first().start;
    }
    double halfLength = sumLength / 2.0;
    sumLength = 0;
    for (Segment segment : Sequence.fromIterable(mySegments)) {
      double currentLength = segment.length();
      if (sumLength + currentLength >= halfLength) {
        Vector se = segment.end.sub(segment.start);
        double d = (halfLength - sumLength) / se.length();
        double xToAdd = se.x * d;
        double yToAdd = se.y * d;
        Vector result = segment.start.add(new Vector(((int) xToAdd), ((int) yToAdd)));
        return result;
      }
      sumLength += currentLength;
    }
    return null;

  }




  protected GroupView createErrorView() {
    GroupView result = new GroupView();
    myCrossErrorView = new ConnectorDecoratorView.CrossView();
    myCrossErrorView.firstLine.color().set(Color.RED);
    myCrossErrorView.secondLine.color().set(Color.RED);
    result.children().add(myCrossErrorView);
    return result;
  }

  protected GroupView createSelectionView() {
    return new GroupView();
  }

  private void updateErrorView() {
    if (myCrossErrorView == null) {
      return;
    }
    Vector errorPoint = getErrorPoint();
    if (errorPoint == null) {
      return;
    }
    int x = errorPoint.x;
    int y = errorPoint.y;
    myCrossErrorView.firstLine.start().set(new Vector(x - CROSS_LENGTH, y - CROSS_LENGTH));
    myCrossErrorView.firstLine.end().set(new Vector(x + CROSS_LENGTH, y + CROSS_LENGTH));
    myCrossErrorView.secondLine.start().set(new Vector(x + CROSS_LENGTH, y - CROSS_LENGTH));
    myCrossErrorView.secondLine.end().set(new Vector(x - CROSS_LENGTH, y + CROSS_LENGTH));
  }



  private void updateSelectionView() {
    if (mySelectionView == null) {
      return;
    }
    mySelectionView.children().clear();
    for (Segment segment : Sequence.fromIterable(mySegments)) {
      if (neq_2z6621_a0a0c0s(segment, Sequence.fromIterable(mySegments).last())) {
        mySelectionView.children().add(createSelectionRect(segment.end));
      }
      if (segment.length() > SELECTION_SQUARE_HALF_WIDTH * 20) {
        mySelectionView.children().add(createSelectionRect(new Vector((segment.end.x + segment.start.x) / 2, (segment.end.y + segment.start.y) / 2)));
      }
    }
  }



  private static class CrossView extends GroupView {
    public final LineView firstLine = new ConnectorDecoratorView.CrossView.SimpleLineView();
    public final LineView secondLine = new ConnectorDecoratorView.CrossView.SimpleLineView();

    public CrossView() {
      children().add(firstLine);
      children().add(secondLine);
    }

    private static class SimpleLineView extends LineView {


      @Override
      protected boolean contains(Vector vector) {
        return false;
      }
    }
  }



  private static boolean neq_2z6621_a0a0c0s(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }
}
