package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.jetpad.projectional.diagram.view.DiagramNodeView;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.jetpad.model.property.ReadableProperty;
import jetbrains.mps.nodeEditor.cells.CellFinderUtil;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.geometry.Vector;

public abstract class BlockCell extends GenericMapperCell<DiagramNodeView> {
  public BlockCell(EditorContext editorContext, SNode node, @NotNull ReadableProperty<Integer> x, @NotNull ReadableProperty<Integer> y) {
    super(editorContext, node);
    setXProperty(x);
    setYProperty(y);
  }

  @Override
  public void synchronizeViewWithModel() {
    DiagramCell cell = ((DiagramCell) CellFinderUtil.findParent(this, new Condition<EditorCell_Collection>() {
      public boolean met(EditorCell_Collection parent) {
        return parent instanceof DiagramCell;
      }
    }));
    if (cell == null) {
      return;
    }
    Mapper<? super SNode, ?> descendantMapper = cell.getRootMapper().getDescendantMapper(getSNode());
    if (descendantMapper != null) {
      ((View) descendantMapper.getTarget()).moveTo(new Vector(getXProperty().get(), getYProperty().get()));
      ((View) descendantMapper.getTarget()).invalidate();
      requestRelayout();
    }
  }

  private ReadableProperty<Integer> myXProperty;

  public ReadableProperty<Integer> getXProperty() {
    return this.myXProperty;
  }

  private void setXProperty(ReadableProperty<Integer> value) {
    this.myXProperty = value;
  }

  private ReadableProperty<Integer> myYProperty;

  public ReadableProperty<Integer> getYProperty() {
    return this.myYProperty;
  }

  private void setYProperty(ReadableProperty<Integer> value) {
    this.myYProperty = value;
  }
}
