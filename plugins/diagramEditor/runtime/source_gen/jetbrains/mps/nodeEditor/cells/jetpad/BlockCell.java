package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.jetpad.model.event.EventHandler;
import jetbrains.jetpad.model.property.PropertyChangeEvent;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.DiagramNodeView;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.views.NodeDecoratorView;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.geometry.Vector;
import java.util.ListIterator;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.openapi.editor.cells.EditorCell;

public abstract class BlockCell extends AbstractJetpadCell {
  public BlockCell(EditorContext editorContext, SNode node) {
    super(editorContext, node);
  }



  protected void registerPositionProperties(final ReadableModelProperty<Integer> xProperty, final ReadableModelProperty<Integer> yProperty) {
    addModelProperty(xProperty);
    addModelProperty(yProperty);

    EventHandler<PropertyChangeEvent<Integer>> handler = new EventHandler<PropertyChangeEvent<Integer>>() {
      public void onEvent(PropertyChangeEvent<Integer> p0) {
        moveView(xProperty, yProperty);
      }
    };
    xProperty.addHandler(handler);
    yProperty.addHandler(handler);
  }

  public abstract Mapper<SNode, DiagramNodeView> createMapper();

  public abstract Mapper<SNode, NodeDecoratorView> createDecorationMapper();

  private void moveView(ReadableModelProperty<Integer> xProperty, ReadableModelProperty<Integer> yProperty) {
    DiagramCell cell = getDiagramCell();
    if (cell == null) {
      return;
    }
    Mapper<? super SNode, ?> descendantMapper = cell.getRootMapper().getDescendantMapper(getSNode());
    if (descendantMapper != null) {
      ((View) descendantMapper.getTarget()).moveTo(new Vector(xProperty.get(), yProperty.get()));
      ((View) descendantMapper.getTarget()).invalidate();
      requestRelayout();
    }
  }

  protected String getContentViewMapperSource() {
    return getSNode().getNodeId().toString();
  }

  protected Mapper<SNode, DiagramNodeView> getBlockMapper() {
    return (Mapper<SNode, DiagramNodeView>) getDiagramCell().getRootMapper().getDescendantMapper(getSNode());
  }

  protected View getContentView() {
    Mapper<SNode, DiagramNodeView> blockMapper = getBlockMapper();
    if (blockMapper == null || blockMapper.getTarget() == null || blockMapper.getTarget().contentView.children().size() == 0) {
      return null;
    }
    return blockMapper.getTarget().contentView.children().get(0);
  }

  protected void syncPortNodes(Iterable<? extends SNode> ports, ListIterator<SNode> portsIterator, Set<SNode> existingPorts) {
    for (SNode nextPort : Sequence.fromIterable(ports)) {
      EditorCell portCell = getContext().createNodeCell(nextPort);
      if (!(portCell instanceof PortCell)) {
        continue;
      }
      syncToNextNode(portsIterator, existingPorts, nextPort, portCell);
    }
    purgeTailNodes(portsIterator);
  }

  protected void syncPortObjects(Iterable ports, ListIterator portsIterator, Set existingPorts) {
    for (Object port : ports) {
      if (existingPorts.contains(port)) {
        syncToNextObject(portsIterator, existingPorts, port);
      } else {
        portsIterator.add(port);
        existingPorts.add(port);
      }
    }
    while (portsIterator.hasNext()) {
      portsIterator.next();
      portsIterator.remove();
    }
  }

  private void syncToNextObject(ListIterator listIterator, Set elementsSet, Object next) {
    while (listIterator.hasNext()) {
      Object nextFromList = listIterator.next();
      if (nextFromList == next) {
        return;
      }
      listIterator.remove();
      elementsSet.remove(nextFromList);
    }
    assert false : "Next element was not found in passed listIterator";
  }
}
