package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.jetpad.model.event.EventHandler;
import jetbrains.jetpad.model.property.PropertyChangeEvent;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.DiagramNodeView;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.geometry.Vector;

public abstract class BlockCell extends AbstractJetpadCell {
  public BlockCell(EditorContext editorContext, SNode node) {
    super(editorContext, node);
  }

  protected void registerPositionProperties(final ReadableModelProperty<Integer> xProperty, final ReadableModelProperty<Integer> yProperty) {
    addModelProperty(xProperty);
    addModelProperty(yProperty);

    EventHandler<PropertyChangeEvent<Integer>> handler = new EventHandler<PropertyChangeEvent<Integer>>() {
      public void onEvent(PropertyChangeEvent<Integer> p0) {
        moveView(xProperty, yProperty);
      }
    };
    xProperty.addHandler(handler);
    yProperty.addHandler(handler);
  }

  public abstract Mapper<SNode, DiagramNodeView> createMapper();

  private void moveView(ReadableModelProperty<Integer> xProperty, ReadableModelProperty<Integer> yProperty) {
    DiagramCell cell = getDiagramCell();
    if (cell == null) {
      return;
    }
    Mapper<? super SNode, ?> descendantMapper = cell.getRootMapper().getDescendantMapper(getSNode());
    if (descendantMapper != null) {
      ((View) descendantMapper.getTarget()).moveTo(new Vector(xProperty.get(), yProperty.get()));
      ((View) descendantMapper.getTarget()).invalidate();
      requestRelayout();
    }
  }
}
