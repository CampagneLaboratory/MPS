package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.DiagramNodeView;
import jetbrains.mps.nodeEditor.cells.CellFinderUtil;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.geometry.Vector;

public abstract class BlockCell extends AbstractJetpadCell {
  public BlockCell(EditorContext editorContext, SNode node) {
    super(editorContext, node);

    String commandId = getCellId() + "_" + node.getNodeId().toString();
    setXProperty(new WritableModelProperty<Integer>(commandId, getContext().getOperationContext().getProject()) {
      protected Integer getModelPropertyValue() {
        return getXPositionFromModel();
      }

      protected void setModelPropertyValue(Integer value) {
        setXPositionToModel(value);
      }
    });
    setYProperty(new WritableModelProperty<Integer>(commandId, getContext().getOperationContext().getProject()) {
      protected Integer getModelPropertyValue() {
        return getYPositionFromModel();
      }

      protected void setModelPropertyValue(Integer value) {
        setYPositionToModel(value);
      }
    });
    addModelProperty(getXProperty());
    addModelProperty(getYProperty());
  }

  protected abstract Integer getXPositionFromModel();

  protected void setXPositionToModel(Integer value) {
  }

  protected abstract Integer getYPositionFromModel();

  protected void setYPositionToModel(Integer value) {
  }

  public abstract Mapper<SNode, DiagramNodeView> createMapper();

  @Override
  public void synchronizeViewWithModel() {
    super.synchronizeViewWithModel();
    // TODO: if we can use synchronizers to move target View then this code can e replaced with just calling super.. 
    DiagramCell cell = ((DiagramCell) CellFinderUtil.findParent(this, new Condition<EditorCell_Collection>() {
      public boolean met(EditorCell_Collection parent) {
        return parent instanceof DiagramCell;
      }
    }));
    if (cell == null) {
      return;
    }
    Mapper<? super SNode, ?> descendantMapper = cell.getRootMapper().getDescendantMapper(getSNode());
    if (descendantMapper != null) {
      ((View) descendantMapper.getTarget()).moveTo(new Vector(getXProperty().get(), getYProperty().get()));
      ((View) descendantMapper.getTarget()).invalidate();
      requestRelayout();
    }
  }

  private WritableModelProperty<Integer> myXProperty;

  public WritableModelProperty<Integer> getXProperty() {
    return this.myXProperty;
  }

  private void setXProperty(WritableModelProperty<Integer> value) {
    this.myXProperty = value;
  }

  private WritableModelProperty<Integer> myYProperty;

  public WritableModelProperty<Integer> getYProperty() {
    return this.myYProperty;
  }

  private void setYProperty(WritableModelProperty<Integer> value) {
    this.myYProperty = value;
  }
}
