package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.jetpad.projectional.view.GroupView;
import jetbrains.jetpad.projectional.view.PolyLineView;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.geometry.Rectangle;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class PortDecoratorView extends AbstractDecoratorView {
  protected GroupView mySelectionView;
  protected PolyLineView myErrorView;

  public PortDecoratorView() {
  }

  protected View getSelectionView() {
    if (mySelectionView == null) {
      mySelectionView = createSelectionView();
    }
    return mySelectionView;
  }

  protected View getErrorView() {
    if (myErrorView == null) {
      myErrorView = createErrorView();
    }
    return myErrorView;
  }

  protected PolyLineView createErrorView() {
    PolyLineView errorView = new PolyLineView();
    errorView.color().set(Color.RED);
    return errorView;
  }



  protected GroupView createSelectionView() {
    return new GroupView();
  }




  private void fillSelectionView(Rectangle bounds) {
    mySelectionView.children().clear();
    mySelectionView.children().add(createBlackSelectionRect(bounds.origin));
    mySelectionView.children().add(createBlackSelectionRect(bounds.origin.add(new Vector(bounds.dimension.x, 0))));
    mySelectionView.children().add(createBlackSelectionRect(bounds.origin.add(new Vector(bounds.dimension.x, bounds.dimension.y))));
    mySelectionView.children().add(createBlackSelectionRect(bounds.origin.add(new Vector(0, bounds.dimension.y))));
    mySelectionView.invalidate();
  }

  public void updateSelectionDecorator(Rectangle bounds) {
    if (mySelectionView == null) {
      return;
    }
    if (eq_dou52n_a0b0l(mySelectionView.bounds().get().dimension, bounds.dimension)) {
      if (neq_dou52n_a0a0b0l(mySelectionView.bounds().get().origin, bounds.origin)) {
        mySelectionView.moveTo(bounds.origin);
      }
    } else {
      fillSelectionView(bounds);
    }
    mySelectionView.invalidate();
  }

  private void fillErrorView(Rectangle bounds) {
    myErrorView.points.clear();
    myErrorView.points.addAll(ListSequence.fromListAndArray(new ArrayList<Vector>(), new Vector(bounds.origin.x, bounds.origin.y), new Vector(bounds.origin.x + bounds.dimension.x, bounds.origin.y), new Vector(bounds.origin.x + bounds.dimension.x, bounds.origin.y + bounds.dimension.y), new Vector(bounds.origin.x, bounds.origin.y + bounds.dimension.y), new Vector(bounds.origin.x, bounds.origin.y)));
  }

  public void updateErrorDecorator(Rectangle bounds) {
    if (myErrorView == null) {
      return;
    }
    if (eq_dou52n_a0b0n(myErrorView.bounds().get().dimension, bounds.dimension)) {
      if (neq_dou52n_a0a0b0n(myErrorView.bounds().get().origin, bounds.origin)) {
        myErrorView.moveTo(bounds.origin);
      }
    } else {
      fillErrorView(bounds);
    }
    myErrorView.invalidate();
  }




  private static boolean neq_dou52n_a0a0b0l(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }

  private static boolean eq_dou52n_a0b0l(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean neq_dou52n_a0a0b0n(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }

  private static boolean eq_dou52n_a0b0n(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
