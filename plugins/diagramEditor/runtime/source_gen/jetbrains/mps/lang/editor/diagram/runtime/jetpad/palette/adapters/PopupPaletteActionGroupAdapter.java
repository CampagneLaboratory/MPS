package jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.adapters;

/*Generated by MPS */

import com.intellij.openapi.actionSystem.ActionGroup;
import com.intellij.openapi.actionSystem.Toggleable;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.DiagramPalette;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.openapi.PaletteActionGroup;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnAction;
import org.jetbrains.annotations.Nullable;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.openapi.PaletteElement;

public class PopupPaletteActionGroupAdapter extends ActionGroup implements Toggleable {
  private DiagramPalette myPalette;
  private PaletteActionGroup myPaletteActionGroup;


  public PopupPaletteActionGroupAdapter(final DiagramPalette palette, PaletteActionGroup group) {
    super(group.getText(), group.getText(), group.getIcon());
    assert group.isPopup();
    setPopup(true);
    myPaletteActionGroup = group;
    myPalette = palette;
    setDefaultIcon(true);
  }



  @NotNull
  public AnAction[] getChildren(@Nullable AnActionEvent event) {
    return Sequence.fromIterable(Sequence.fromArray(myPaletteActionGroup.getElements())).select(new ISelector<PaletteElement, AnAction>() {
      public AnAction select(PaletteElement element) {
        return PaletteElementFactory.createPaletteElementAdapter(myPalette, element);
      }
    }).toGenericArray(AnAction.class);
  }



  @Override
  public void actionPerformed(AnActionEvent event) {
    super.actionPerformed(event);
    event.getPresentation().putClientProperty(SELECTED_PROPERTY, true);
  }
}
