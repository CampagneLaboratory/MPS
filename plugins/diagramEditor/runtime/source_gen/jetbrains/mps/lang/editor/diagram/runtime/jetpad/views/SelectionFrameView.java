package jetbrains.mps.lang.editor.diagram.runtime.jetpad.views;

/*Generated by MPS */

import jetbrains.jetpad.projectional.view.GroupView;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.model.property.ValueProperty;
import jetbrains.jetpad.geometry.Rectangle;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.geometry.Vector;

public class SelectionFrameView extends GroupView {
  public Property<Color> color = new ValueProperty<Color>(Color.BLACK);
  public Property<Integer> lineWidth = new ValueProperty<Integer>(1);
  public Property<Rectangle> bounds = new ValueProperty<Rectangle>(new Rectangle(0, 0, 0, 0));

  private final NonFocusablePolyLineView myBorderView = new NonFocusablePolyLineView();


  public SelectionFrameView() {
    children().add(myBorderView);
    new Mapper<SelectionFrameView, SelectionFrameView>(this, this) {
      @Override
      protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
        super.registerSynchronizers(configuration);
        configuration.add(Synchronizers.forProperty(color, myBorderView.color()));
        configuration.add(Synchronizers.forProperty(bounds, new Runnable() {
          public void run() {
            updateBorderView(bounds.get(), lineWidth.get());
          }
        }));
        configuration.add(Synchronizers.forProperties(lineWidth, myBorderView.width()));
      }
    }.attachRoot();
  }

  private void updateBorderView(Rectangle bounds, int lineWidth) {
    int leftShift = lineWidth - lineWidth / 2;
    int dimensionShift = ((lineWidth & 1) == 0 ? lineWidth - 1 : lineWidth);
    Rectangle frameBounds = new Rectangle(bounds.origin.sub(new Vector(leftShift, leftShift)), bounds.dimension.add(new Vector(dimensionShift, dimensionShift)));

    Vector topLeft = frameBounds.origin;
    Vector bottomRight = topLeft.add(frameBounds.dimension);

    myBorderView.points.clear();
    myBorderView.points.add(new Vector(topLeft.x, topLeft.y));
    myBorderView.points.add(new Vector(bottomRight.x, topLeft.y));
    myBorderView.points.add(new Vector(bottomRight.x, bottomRight.y));
    myBorderView.points.add(new Vector(topLeft.x, bottomRight.y));
    myBorderView.points.add(new Vector(topLeft.x, topLeft.y));
  }
}
