package jetbrains.mps.lang.editor.diagram.runtime.jetpad.views;

/*Generated by MPS */

import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.model.property.ValueProperty;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.model.collections.list.ObservableList;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.jetpad.model.collections.list.ObservableArrayList;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.mapper.MapperFactory;
import jetbrains.jetpad.geometry.Rectangle;
import java.util.ListIterator;
import jetbrains.jetpad.geometry.Segment;

public class ResizableSelectionFrameView extends AbstractExternalFrameView {
  public Property<Boolean> resizable = new ValueProperty<Boolean>(false);
  public Property<Boolean> showSideHandler = new ValueProperty<Boolean>(true);
  public Property<Integer> selectionLineWidth = new ValueProperty<Integer>(1);
  public Property<Color> color = new ValueProperty<Color>(Color.BLACK);
  public Property<Color> backgroundColor = new ValueProperty<Color>(Color.LIGHT_GRAY);

  private ObservableList<Vector> myCornerResizeHandlePositions = new ObservableArrayList<Vector>();
  private ObservableList<Vector> mySideResizeHandlePositions = new ObservableArrayList<Vector>();


  public ResizableSelectionFrameView() {
    new Mapper<ResizableSelectionFrameView, ResizableSelectionFrameView>(this, this) {
      @Override
      protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
        super.registerSynchronizers(configuration);
        configuration.add(Synchronizers.forProperty(resizable, new Runnable() {
          public void run() {
            updateCornerResizeHandlePositions(resizable.get(), frameRectangle.get());
          }
        }));
        configuration.add(Synchronizers.forProperty(frameRectangle, new Runnable() {
          public void run() {
            updateCornerResizeHandlePositions(resizable.get(), frameRectangle.get());
          }
        }));
        configuration.add(Synchronizers.forProperty(resizable, new Runnable() {
          public void run() {
            updateSideResizeHandlePositions(resizable.get(), showSideHandler.get(), frameRectangle.get());
          }
        }));
        configuration.add(Synchronizers.forProperty(showSideHandler, new Runnable() {
          public void run() {
            updateSideResizeHandlePositions(resizable.get(), showSideHandler.get(), frameRectangle.get());
          }
        }));
        configuration.add(Synchronizers.forProperty(frameRectangle, new Runnable() {
          public void run() {
            updateSideResizeHandlePositions(resizable.get(), showSideHandler.get(), frameRectangle.get());
          }
        }));
        configuration.add(Synchronizers.forConstantRole(this, ResizableSelectionFrameView.this, childSubList(), new MapperFactory<ResizableSelectionFrameView, SelectionFrameView>() {
          public Mapper<? extends ResizableSelectionFrameView, ? extends SelectionFrameView> createMapper(ResizableSelectionFrameView decoratorView) {
            return new Mapper<ResizableSelectionFrameView, SelectionFrameView>(decoratorView, new SelectionFrameView()) {
              @Override
              protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
                super.registerSynchronizers(configuration);
                configuration.add(Synchronizers.forProperty(color, getTarget().color));
                configuration.add(Synchronizers.forProperty(frameWidth, getTarget().frameWidth));
                configuration.add(Synchronizers.forProperty(internalsBounds, getTarget().internalsBounds));
                configuration.add(Synchronizers.forProperty(selectionLineWidth, getTarget().lineWidth));
              }
            };
          }
        }));
        configuration.add(Synchronizers.forObservableRole(this, myCornerResizeHandlePositions, childSubList(), new MapperFactory<Vector, ResizeHandleView>() {
          public Mapper<? extends Vector, ? extends ResizeHandleView> createMapper(Vector position) {
            return createResizeHanleMapper(position);
          }
        }));
        configuration.add(Synchronizers.forObservableRole(this, mySideResizeHandlePositions, childSubList(), new MapperFactory<Vector, ResizeHandleView>() {
          public Mapper<? extends Vector, ? extends ResizeHandleView> createMapper(Vector position) {
            return createResizeHanleMapper(position);
          }
        }));
      }
    }.attachRoot();
  }

  private Mapper<? extends Vector, ? extends ResizeHandleView> createResizeHanleMapper(Vector position) {
    return new Mapper<Vector, ResizeHandleView>(position, new ResizeHandleView(position)) {
      @Override
      protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
        super.registerSynchronizers(configuration);
        configuration.add(Synchronizers.forProperty(color, getTarget().color));
        configuration.add(Synchronizers.forProperty(backgroundColor, getTarget().backgroundColor));
      }
    };
  }

  private void updateCornerResizeHandlePositions(boolean resizable, Rectangle rectangle) {
    if (!(resizable)) {
      myCornerResizeHandlePositions.clear();
      return;
    }
    ListIterator<Vector> iterator = myCornerResizeHandlePositions.listIterator();
    for (Vector nextPoint : rectangle.getBoundPoints()) {
      if (iterator.hasNext()) {
        Vector next = iterator.next();
        if (nextPoint.equals(next)) {
          continue;
        }
        iterator.remove();
      }
      iterator.add(nextPoint);
    }
  }

  private void updateSideResizeHandlePositions(boolean resizable, boolean visible, Rectangle rectangle) {
    if (!(resizable) || !(visible)) {
      mySideResizeHandlePositions.clear();
      return;
    }
    for (Segment nextSegment : rectangle.getBoundSegments()) {
      if (nextSegment.length() < 4 * ResizeHandleView.DEFAULT_HALF_WIDTH) {
        mySideResizeHandlePositions.clear();
        return;
      }
    }

    ListIterator<Vector> iterator = mySideResizeHandlePositions.listIterator();
    for (Segment nextSegment : rectangle.getBoundSegments()) {
      Vector nextPoint = nextSegment.end.sub(nextSegment.start).div(2).add(nextSegment.start);
      if (iterator.hasNext()) {
        Vector next = iterator.next();
        if (nextPoint.equals(next)) {
          continue;
        }
        iterator.remove();
      }
      iterator.add(nextPoint);
    }
  }
}
