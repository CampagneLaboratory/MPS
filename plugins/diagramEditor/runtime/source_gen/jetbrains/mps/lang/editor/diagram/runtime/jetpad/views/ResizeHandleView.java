package jetbrains.mps.lang.editor.diagram.runtime.jetpad.views;

/*Generated by MPS */

import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.model.property.ValueProperty;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.mapper.Synchronizers;

public class ResizeHandleView extends NonFocusablePolyLineView {
  public static final int DEFAULT_HALF_WIDTH = 3;

  public Property<Color> color = new ValueProperty<Color>(Color.GRAY);
  public Property<Color> backgroundColor = new ValueProperty<Color>(Color.LIGHT_GRAY);
  public Property<Integer> halfWidth = new ValueProperty<Integer>(DEFAULT_HALF_WIDTH);
  public Property<Vector> centerLocation = new ValueProperty<Vector>(new Vector(0, 0));


  public ResizeHandleView() {
    new Mapper<ResizeHandleView, ResizeHandleView>(this, this) {
      @Override
      protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
        super.registerSynchronizers(configuration);
        configuration.add(Synchronizers.forProperty(color, color()));
        configuration.add(Synchronizers.forProperty(backgroundColor, background()));
        configuration.add(Synchronizers.forProperty(halfWidth, new Runnable() {
          public void run() {
            updateLocation(centerLocation.get(), halfWidth.get());
          }
        }));
        configuration.add(Synchronizers.forProperty(centerLocation, new Runnable() {
          public void run() {
            updateLocation(centerLocation.get(), halfWidth.get());
          }
        }));
      }
    }.attachRoot();
  }

  public ResizeHandleView(Vector location) {
    this();
    centerLocation.set(location);
  }

  private void updateLocation(Vector location, int halfWidth) {
    points.clear();
    points.add(new Vector(location.x - halfWidth, location.y - halfWidth));
    points.add(new Vector(location.x + halfWidth, location.y - halfWidth));
    points.add(new Vector(location.x + halfWidth, location.y + halfWidth));
    points.add(new Vector(location.x - halfWidth, location.y + halfWidth));
    points.add(new Vector(location.x - halfWidth, location.y - halfWidth));
  }
}
