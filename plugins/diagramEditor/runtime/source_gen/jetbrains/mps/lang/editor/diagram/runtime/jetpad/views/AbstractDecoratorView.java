package jetbrains.mps.lang.editor.diagram.runtime.jetpad.views;

/*Generated by MPS */

import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.projectional.view.GroupView;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.model.property.ValueProperty;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.model.collections.list.ObservableSingleItemList;
import jetbrains.jetpad.model.transform.Transformers;
import jetbrains.jetpad.projectional.diagram.util.SubList;
import jetbrains.jetpad.model.collections.list.ObservableList;
import jetbrains.jetpad.mapper.MapperFactory;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.jetpad.projectional.view.PolyLineView;
import jetbrains.jetpad.values.Color;

public abstract class AbstractDecoratorView<SelectionView extends View, ErrorView extends View> extends GroupView {
  protected static final int SELECTION_SQUARE_HALF_WIDTH = 3;
  public final Property<Boolean> hasError = new ValueProperty<Boolean>(false);
  public final Property<Boolean> isSelected = new ValueProperty<Boolean>(false);


  public AbstractDecoratorView() {
    attachMapper();
  }

  protected abstract SelectionView createSelectionView();

  protected abstract void registerSelectionViewSynchronizers(Mapper.SynchronizersConfiguration configuration, SelectionView selectionView);

  protected abstract ErrorView createErrorView();

  protected abstract void registerErrorViewSynchronizers(Mapper.SynchronizersConfiguration configuration, ErrorView errorView);

  private void attachMapper() {
    new Mapper<AbstractDecoratorView, AbstractDecoratorView>(this, this) {
      @Override
      protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
        super.registerSynchronizers(configuration);
        configuration.add(Synchronizers.forObservableRole(this, new ObservableSingleItemList<Boolean>(), Transformers.<Boolean,Boolean,Boolean>addFirstWithCondition(Boolean.TRUE, hasError), new SubList<View>() {
          protected ObservableList<View> getBaseList() {
            return children();
          }
        }, new MapperFactory<Boolean, View>() {
          public Mapper<? extends Boolean, ? extends View> createMapper(Boolean error) {
            return new Mapper<Boolean, ErrorView>(error, createErrorView()) {
              @Override
              protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
                super.registerSynchronizers(configuration);
                registerErrorViewSynchronizers(configuration, getTarget());
              }
            };
          }
        }));
        configuration.add(Synchronizers.forObservableRole(this, new ObservableSingleItemList<Boolean>(), Transformers.<Boolean,Boolean,Boolean>addFirstWithCondition(Boolean.TRUE, isSelected), new SubList<View>() {
          protected ObservableList<View> getBaseList() {
            return children();
          }
        }, new MapperFactory<Boolean, View>() {
          public Mapper<? extends Boolean, ? extends View> createMapper(Boolean selected) {
            return new Mapper<Boolean, SelectionView>(selected, createSelectionView()) {
              @Override
              protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
                super.registerSynchronizers(configuration);
                registerSelectionViewSynchronizers(configuration, getTarget());
              }
            };
          }
        }));
      }
    }.attachRoot();
  }



  protected View createSelectionRect(Vector origin) {
    // TODO: extract separate class SelectionRectangleView from this code 
    PolyLineView selectionRect = new NonFocusablePolyLineView();
    selectionRect.background().set(Color.LIGHT_GRAY);
    selectionRect.color().set(Color.GRAY);
    selectionRect.points.add(new Vector(origin.x - SELECTION_SQUARE_HALF_WIDTH, origin.y - SELECTION_SQUARE_HALF_WIDTH));
    selectionRect.points.add(new Vector(origin.x + SELECTION_SQUARE_HALF_WIDTH, origin.y - SELECTION_SQUARE_HALF_WIDTH));
    selectionRect.points.add(new Vector(origin.x + SELECTION_SQUARE_HALF_WIDTH, origin.y + SELECTION_SQUARE_HALF_WIDTH));
    selectionRect.points.add(new Vector(origin.x - SELECTION_SQUARE_HALF_WIDTH, origin.y + SELECTION_SQUARE_HALF_WIDTH));
    selectionRect.points.add(new Vector(origin.x - SELECTION_SQUARE_HALF_WIDTH, origin.y - SELECTION_SQUARE_HALF_WIDTH));
    return selectionRect;
  }
}
