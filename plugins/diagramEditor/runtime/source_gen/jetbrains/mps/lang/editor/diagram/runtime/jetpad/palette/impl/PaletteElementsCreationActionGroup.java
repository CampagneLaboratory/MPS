package jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.impl;

/*Generated by MPS */

import jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.openapi.PaletteActionGroup;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPartExt;
import jetbrains.mps.openapi.editor.cells.SubstituteInfo;
import java.util.List;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.openapi.PaletteToggleAction;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.openapi.PaletteElement;
import javax.swing.Icon;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.action.ModelActions;
import jetbrains.mps.smodel.action.DefaultChildNodeSetter;

public class PaletteElementsCreationActionGroup implements PaletteActionGroup {
  private SubstituteInfoPartExt mySubstituteInfoPartExt;
  private SubstituteInfo mySubstituteInfo;
  private List<PaletteToggleAction> myActions = ListSequence.fromList(new ArrayList<PaletteToggleAction>());
  private EditorContext myEditorContext;
  private SNode myContainer;
  private SNode myChildConcept;
  private SNode myLink;
  private _FunctionTypes._void_P3_E0<? super SNode, ? super Integer, ? super Integer> myCallback;

  public PaletteElementsCreationActionGroup(SNode container, SNode childNodeConcept, SNode containingLink, final _FunctionTypes._void_P3_E0<? super SNode, ? super Integer, ? super Integer> setNodePositionCallback, EditorContext editorContext) {
    myEditorContext = editorContext;
    myContainer = container;
    myChildConcept = childNodeConcept;
    myLink = containingLink;
    myCallback = setNodePositionCallback;
    updateActions(myContainer, myChildConcept, myLink, myCallback, myEditorContext);
  }

  public PaletteElement getDefaultElement() {
    return ListSequence.fromList(myActions).first();
  }

  public PaletteElement[] getElements() {
    updateActions(myContainer, myChildConcept, myLink, myCallback, myEditorContext);
    return ListSequence.fromList(myActions).toGenericArray(PaletteToggleAction.class);
  }

  public boolean isPopup() {
    return true;
  }

  public Icon getIcon() {
    return check_ipwmos_a0a21(getDefaultElement(), this);
  }

  public String getText() {
    return check_ipwmos_a0a31(getDefaultElement(), this);
  }

  private void updateActions(final SNode container, final SNode childNodeConcept, final SNode containingLink, final _FunctionTypes._void_P3_E0<? super SNode, ? super Integer, ? super Integer> setNodePositionCallback, final EditorContext editorContext) {
    ListSequence.fromList(myActions).clear();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (SubstituteAction action : ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(container, null, childNodeConcept, new DefaultChildNodeSetter(containingLink), editorContext.getOperationContext()))) {
          PaletteElementsCreationAction paletteAction = new PaletteElementsCreationAction(action, setNodePositionCallback, editorContext);
          ListSequence.fromList(myActions).addElement(paletteAction);
        }
      }
    });
  }



  private static Icon check_ipwmos_a0a21(PaletteElement checkedDotOperand, PaletteElementsCreationActionGroup checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getIcon();
    }
    return null;
  }

  private static String check_ipwmos_a0a31(PaletteElement checkedDotOperand, PaletteElementsCreationActionGroup checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getText();
    }
    return null;
  }
}
