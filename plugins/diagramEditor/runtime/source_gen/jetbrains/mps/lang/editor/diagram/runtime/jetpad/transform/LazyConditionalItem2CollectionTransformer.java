package jetbrains.mps.lang.editor.diagram.runtime.jetpad.transform;

/*Generated by MPS */

import jetbrains.jetpad.model.transform.BaseTransformer;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.model.collections.list.ObservableList;
import jetbrains.jetpad.model.transform.Transformation;
import jetbrains.jetpad.model.collections.list.ObservableSingleItemList;
import jetbrains.jetpad.model.event.EventHandler;
import jetbrains.jetpad.model.property.PropertyChangeEvent;
import jetbrains.jetpad.model.event.Registration;

public abstract class LazyConditionalItem2CollectionTransformer<ItemT> extends BaseTransformer<Property<Boolean>, ObservableList<ItemT>> {
  public Transformation<Property<Boolean>, ObservableList<ItemT>> transform(Property<Boolean> condition) {
    return transform(condition, new ObservableSingleItemList<ItemT>());
  }

  public Transformation<Property<Boolean>, ObservableList<ItemT>> transform(final Property<Boolean> condition, final ObservableList<ItemT> list) {
    EventHandler<PropertyChangeEvent<Boolean>> conditionHandler = new EventHandler<PropertyChangeEvent<Boolean>>() {
      public void onEvent(PropertyChangeEvent<Boolean> event) {
        if (event.getNewValue()) {
          list.add(getItem());
        } else {
          list.remove(getItem());
        }
      }
    };
    if (condition.get()) {
      list.add(getItem());
    }
    final Registration registration = condition.addHandler(conditionHandler);
    return new Transformation<Property<Boolean>, ObservableList<ItemT>>() {
      public Property<Boolean> getSource() {
        return condition;
      }

      public ObservableList<ItemT> getTarget() {
        return list;
      }

      public void dispose() {
        registration.remove();
      }
    };
  }

  protected abstract ItemT getItem();
}
