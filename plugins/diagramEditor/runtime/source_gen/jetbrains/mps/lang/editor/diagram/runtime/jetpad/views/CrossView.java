package jetbrains.mps.lang.editor.diagram.runtime.jetpad.views;

/*Generated by MPS */

import jetbrains.jetpad.projectional.view.GroupView;
import jetbrains.jetpad.projectional.view.LineView;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.model.property.ValueProperty;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.jetpad.model.event.EventHandler;
import jetbrains.jetpad.model.property.PropertyChangeEvent;

public class CrossView extends GroupView {
  private final LineView myFirstLine = new NonFocusableLineView();
  private final LineView mySecondLine = new NonFocusableLineView();
  public Property<Color> color = new ValueProperty<Color>(Color.BLACK);
  public Property<Integer> segmentLength = new ValueProperty<Integer>(0);
  public Property<Vector> centerLocation = new ValueProperty<Vector>();

  public CrossView() {
    children().add(myFirstLine);
    mySecondLine.color().set(Color.RED);
    children().add(mySecondLine);
    initHandlers();
  }

  private void initHandlers() {
    color.addHandler(new EventHandler<PropertyChangeEvent<Color>>() {
      public void onEvent(PropertyChangeEvent<Color> event) {
        myFirstLine.color().set(color.get());
        mySecondLine.color().set(color.get());
      }
    });
    centerLocation.addHandler(new EventHandler<PropertyChangeEvent<Vector>>() {
      public void onEvent(PropertyChangeEvent<Vector> event) {
        updateCross();
      }
    });
    segmentLength.addHandler(new EventHandler<PropertyChangeEvent<Integer>>() {
      public void onEvent(PropertyChangeEvent<Integer> event) {
        updateCross();
      }
    });
  }

  private void updateCross() {
    int x = centerLocation.get().x;
    int y = centerLocation.get().y;
    int length = segmentLength.get();

    myFirstLine.start().set(new Vector(x - length, y - length));
    myFirstLine.end().set(new Vector(x + length, y + length));
    mySecondLine.start().set(new Vector(x + length, y - length));
    mySecondLine.end().set(new Vector(x - length, y + length));
  }
}
