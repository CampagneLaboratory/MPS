package jetbrains.mps.lang.editor.diagram.runtime.jetpad.views;

/*Generated by MPS */

import jetbrains.jetpad.projectional.view.GroupView;
import jetbrains.jetpad.projectional.view.PolyLineView;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.geometry.Rectangle;
import jetbrains.jetpad.model.property.ValueProperty;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.model.property.WritableProperty;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public abstract class RectDecoratorView extends AbstractDecoratorView<GroupView, PolyLineView> {
  public Property<Rectangle> bounds = new ValueProperty<Rectangle>(new Rectangle(0, 0, 0, 0));


  protected PolyLineView createErrorView() {
    PolyLineView result = new NonFocusablePolyLineView();
    result.color().set(Color.RED);
    return result;
  }

  protected void registerErrorViewSynchronizers(Mapper.SynchronizersConfiguration configuration) {
    configuration.add(Synchronizers.forProperty(bounds, new WritableProperty<Rectangle>() {
      public void set(Rectangle bounds) {
        updatePolylineFrame(getErrorView(), bounds);
      }
    }));
  }

  protected GroupView createSelectionView() {
    GroupView result = new GroupView();
    return result;
  }

  protected void registerSelectionViewSynchronizers(Mapper.SynchronizersConfiguration configuration) {
    configuration.add(Synchronizers.forProperty(bounds, new WritableProperty<Rectangle>() {
      public void set(Rectangle bounds) {
        updateSelectionView(bounds);
      }
    }));
  }

  private void updateSelectionView(Rectangle bounds) {
    PolyLineView selectionFrame = new NonFocusablePolyLineView();
    updatePolylineFrame(selectionFrame, bounds);
    getSelectionView().children().clear();
    getSelectionView().children().add(selectionFrame);
    for (Vector point : Sequence.fromIterable(getSelectionPoints(bounds))) {
      getSelectionView().children().add(createSelectionRect(point));
    }
  }

  private void updatePolylineFrame(PolyLineView polylineView, Rectangle bounds) {
    polylineView.points.clear();
    polylineView.points.addAll(ListSequence.fromListAndArray(new ArrayList<Vector>(), new Vector(bounds.origin.x - 1, bounds.origin.y - 1), new Vector(bounds.origin.x + bounds.dimension.x, bounds.origin.y - 1), new Vector(bounds.origin.x + bounds.dimension.x, bounds.origin.y + bounds.dimension.y), new Vector(bounds.origin.x - 1, bounds.origin.y + bounds.dimension.y), new Vector(bounds.origin.x - 1, bounds.origin.y - 1)));
  }



  protected abstract Iterable<Vector> getSelectionPoints(Rectangle bounds);
}
