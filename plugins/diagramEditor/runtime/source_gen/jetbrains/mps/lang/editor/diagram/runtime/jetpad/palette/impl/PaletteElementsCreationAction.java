package jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.impl;

/*Generated by MPS */

import jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.openapi.PaletteToggleAction;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.openapi.editor.EditorContext;
import javax.swing.Icon;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.action.NodeSubstituteActionWrapper;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.jetpad.projectional.view.ViewTrait;
import jetbrains.jetpad.projectional.view.ViewTraitBuilder;
import jetbrains.jetpad.projectional.view.ViewEvents;
import jetbrains.jetpad.projectional.view.ViewEventHandler;
import jetbrains.jetpad.event.MouseEvent;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.smodel.SNodeUtil;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.ide.icons.IdeIcons;

public class PaletteElementsCreationAction implements PaletteToggleAction {
  private SubstituteAction mySubstituteAction;
  private EditorContext myEditorContext;
  private int myX;
  private int myY;
  private Icon myIcon;
  private String myPresentation;



  public PaletteElementsCreationAction(SubstituteAction action, final _FunctionTypes._void_P3_E0<? super SNode, ? super Integer, ? super Integer> setNodePositionCallback, EditorContext editorContext) {
    mySubstituteAction = new NodeSubstituteActionWrapper(action) {
      @Override
      public SNode substitute(@Nullable EditorContext context, String string) {
        SNode result = super.substitute(context, string);
        setNodePositionCallback.invoke(result, myX, myY);
        return result;
      }
    };
    myEditorContext = editorContext;
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        myIcon = getIconInternal();
        myPresentation = mySubstituteAction.getMatchingText("");
      }
    });

  }

  /*package*/ SubstituteAction getSubstituteAction() {
    return mySubstituteAction;
  }

  public ViewTrait getTrait() {
    return new ViewTraitBuilder().on(ViewEvents.MOUSE_PRESSED, new ViewEventHandler<MouseEvent>() {
      public void handle(View view, MouseEvent event) {
        if (view.viewAt(event.location()) != view) {
          return;
        }
        if (!(view.focused().get())) {
          view.container().focusedView().set(view);
        }
        myX = event.x();
        myY = event.y();
        final boolean[] result = new boolean[]{false};
        myEditorContext.getRepository().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            result[0] = mySubstituteAction.canSubstitute("");
          }
        });
        if (!(result[0])) {
          return;
        }
        ModelAccess.instance().executeCommand(new Runnable() {
          public void run() {
            mySubstituteAction.substitute(myEditorContext, "");
          }
        }, myEditorContext.getOperationContext().getProject());

        event.consume();
      }
    }).build();
  }



  public Icon getIcon() {
    return myIcon;
  }

  private Icon getIconInternal() {
    Icon icon;
    SNode iconNode = mySubstituteAction.getIconNode("");
    if (iconNode != null) {

      icon = ((SNodeUtil.isInstanceOfConceptDeclaration(iconNode) && !((mySubstituteAction.isReferentPresentation()))) ? IconManager.getIconForConceptFQName(NameUtil.nodeFQName(iconNode)) : IconManager.getIconFor(iconNode));
    } else {
      icon = IdeIcons.DEFAULT_ICON;
    }
    return icon;
  }

  public String getText() {
    return myPresentation;
  }
}
