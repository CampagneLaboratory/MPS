package jetbrains.mps.lang.editor.diagram.runtime.plugin;

/*Generated by MPS */

import javax.swing.JPanel;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import java.awt.BorderLayout;
import java.util.List;
import com.intellij.openapi.actionSystem.AnAction;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import javax.swing.JLabel;
import jetbrains.mps.openapi.editor.cells.SubstituteInfo;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import com.intellij.openapi.actionSystem.ToggleAction;
import com.intellij.icons.AllIcons;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.ModelAccess;
import javax.swing.JComponent;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import jetbrains.mps.workbench.action.ActionUtils;
import org.jetbrains.annotations.Nullable;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;

public class PalettePanel extends JPanel {
  private DiagramCell myDiagramCell;
  private DiagramCell.TunableNodeSubstituteAction mySelectedSubstituteAction;
  private JPanel myBlockActionPanel = new JPanel(new BorderLayout());
  private JPanel myConnectorActionPanel = new JPanel(new BorderLayout());
  private List<AnAction> myBlockToggleActions = ListSequence.fromList(new ArrayList<AnAction>());
  private List<AnAction> myConnectorToggleActions = ListSequence.fromList(new ArrayList<AnAction>());

  public PalettePanel() {
    super(new GridBagLayout());
    GridBagConstraints c = new GridBagConstraints();
    c.gridx = 0;
    c.gridy = 0;
    c.anchor = GridBagConstraints.NORTHWEST;

    add(new JLabel("Blocks"), c);
    c.gridy = 1;
    add(myBlockActionPanel, c);
    c.gridy = 2;
    add(new JLabel("Connectors"), c);
    c.gridy = 3;
    add(myConnectorActionPanel, c);
  }

  private void updateToggleActions() {
    ListSequence.fromList(myBlockToggleActions).clear();
    ListSequence.fromList(myConnectorToggleActions).clear();

    SubstituteInfo substituteInfo = myDiagramCell.getSubstituteInfo();
    substituteInfo.invalidateActions();
    for (SubstituteAction action : ListSequence.fromList(substituteInfo.getMatchingActions("", false))) {
      DiagramCell.TunableNodeSubstituteAction tunableAction = ((DiagramCell.TunableNodeSubstituteAction) action);
      tunableAction.setSubstitutable(false);
      tunableAction.setIsInitializing(false);
      ToggleAction substituteAction = new PalettePanel.SubstituteToggleAction(action.getMatchingText(""), action.getMatchingText(""), AllIcons.Actions.Refresh, tunableAction);
      if (tunableAction.isBlockAction()) {
        ListSequence.fromList(myBlockToggleActions).addElement(substituteAction);
      } else {
        ListSequence.fromList(myConnectorToggleActions).addElement(substituteAction);
      }
    }

  }

  public void setDiagramCell(@NotNull DiagramCell diagramCell) {
    myDiagramCell = diagramCell;
    mySelectedSubstituteAction = null;
    update();
  }

  public DiagramCell getDiagramCell() {
    return myDiagramCell;
  }

  public SubstituteAction getSelectedSubstituteAction() {
    return mySelectedSubstituteAction;
  }

  private void update() {
    ModelAccess.instance().runReadInEDT(new Runnable() {
      public void run() {
        updateToggleActions();
        JComponent blockActionPanel = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, ActionUtils.groupFromActions(ListSequence.fromList(myBlockToggleActions).toGenericArray(AnAction.class)), true).getComponent();
        myBlockActionPanel.removeAll();
        myBlockActionPanel.add(blockActionPanel, BorderLayout.WEST);
        JComponent connectorActionPanel = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, ActionUtils.groupFromActions(ListSequence.fromList(myConnectorToggleActions).toGenericArray(AnAction.class)), true).getComponent();
        myConnectorActionPanel.removeAll();
        myConnectorActionPanel.add(connectorActionPanel, BorderLayout.WEST);
      }
    });
  }



  private class SubstituteToggleAction extends ToggleAction {
    private boolean mySelected;
    private DiagramCell.TunableNodeSubstituteAction mySubstituteAction;

    public SubstituteToggleAction(@Nullable String text, @Nullable String description, @Nullable Icon icon, DiagramCell.TunableNodeSubstituteAction action) {
      super(text, description, icon);
      mySubstituteAction = action;
    }

    public boolean isSelected(AnActionEvent event) {
      return mySelected;
    }



    public void setSelected(AnActionEvent event, boolean state) {
      mySelected = state;
      mySubstituteAction.setSubstitutable(mySelected);
      if (mySelected) {
        mySelectedSubstituteAction = mySubstituteAction;
        for (AnAction anAction : ListSequence.fromList(myBlockToggleActions)) {
          if (anAction != this && anAction instanceof ToggleAction) {
            ((ToggleAction) anAction).setSelected(event, false);
          }
        }
      }
    }
  }
}
