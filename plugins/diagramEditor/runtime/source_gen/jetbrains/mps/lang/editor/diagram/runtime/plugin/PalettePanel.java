package jetbrains.mps.lang.editor.diagram.runtime.plugin;

/*Generated by MPS */

import javax.swing.JPanel;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import java.awt.BorderLayout;
import java.util.List;
import com.intellij.openapi.actionSystem.AnAction;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.actionSystem.ActionGroup;
import com.intellij.openapi.actionSystem.ToggleAction;
import com.intellij.icons.AllIcons;
import jetbrains.mps.workbench.action.ActionUtils;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.ModelAccess;
import javax.swing.JComponent;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import org.jetbrains.annotations.Nullable;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;

public class PalettePanel extends JPanel {
  private DiagramCell myDiagramCell;
  private SubstituteAction mySelectedSubstituteAction;
  private JPanel myActionPanel = new JPanel(new BorderLayout());
  private List<AnAction> myToggleActions = ListSequence.fromList(new ArrayList<AnAction>());

  public PalettePanel() {
    super(new BorderLayout());
    add(myActionPanel, BorderLayout.NORTH);
  }

  private ActionGroup createButtonsGroup() {
    ListSequence.fromList(myToggleActions).clear();
    for (SubstituteAction action : ListSequence.fromList(myDiagramCell.getCommonSubstituteInfo().getMatchingActions("", false))) {
      ToggleAction substituteAction = new PalettePanel.SubstituteToggleAction(action.getMatchingText(""), action.getMatchingText(""), AllIcons.Actions.Refresh, action);
      ListSequence.fromList(myToggleActions).addElement(substituteAction);
    }

    return ActionUtils.groupFromActions(ListSequence.fromList(myToggleActions).toGenericArray(AnAction.class));
  }

  public void setDiagramCell(@NotNull DiagramCell diagramCell) {
    myDiagramCell = diagramCell;
    update();
  }

  public SubstituteAction getSelectedSubstituteAction() {
    return mySelectedSubstituteAction;
  }

  private void update() {
    ModelAccess.instance().runReadInEDT(new Runnable() {
      public void run() {
        JComponent buttonsPanel = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, createButtonsGroup(), true).getComponent();
        myActionPanel.removeAll();
        myActionPanel.add(buttonsPanel, BorderLayout.WEST);
      }
    });
  }



  private class SubstituteToggleAction extends ToggleAction {
    private boolean mySelected;
    private SubstituteAction mySubstituteAction;

    public SubstituteToggleAction(@Nullable String text, @Nullable String description, @Nullable Icon icon, SubstituteAction action) {
      super(text, description, icon);
      mySubstituteAction = action;
    }

    public boolean isSelected(AnActionEvent event) {
      return mySelected;
    }



    public void setSelected(AnActionEvent event, boolean state) {
      mySelected = state;
      if (mySelected) {
        mySelectedSubstituteAction = mySubstituteAction;
        for (AnAction anAction : ListSequence.fromList(myToggleActions)) {
          if (anAction != this && anAction instanceof ToggleAction) {
            ((ToggleAction) anAction).setSelected(event, false);
          }
        }
      }
    }
  }
}
