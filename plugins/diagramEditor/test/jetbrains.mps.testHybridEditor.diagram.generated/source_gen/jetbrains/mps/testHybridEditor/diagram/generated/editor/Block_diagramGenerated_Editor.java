package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.editor.figures.sandbox.AttributedMPSBlockView;
import jetbrains.mps.nodeEditor.cells.jetpad.GenericViewCell;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.jetpad.model.property.Property;
import jetbrains.mps.nodeEditor.cells.jetpad.PropertyViewCell;
import jetbrains.jetpad.geometry.Vector;

public class Block_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramNode_70mnj_a(editorContext, node);
  }

  private EditorCell createDiagramNode_70mnj_a(final EditorContext editorContext, final SNode node) {
    final AttributedMPSBlockView view = new AttributedMPSBlockView();
    final GenericViewCell editorCell = GenericViewCell.createViewCell(editorContext, node, view);
    createDiagramNode_70mnj_a0(editorCell, editorContext, node, view.text);
    createDiagramNode_70mnj_b0(editorCell, editorContext, node, view.x);
    createDiagramNode_70mnj_c0(editorCell, editorContext, node, view.y);
    for (SNode child : ListSequence.fromList(SLinkOperations.getTargets(node, "inputPorts", true))) {
      createViewForChildNode(child, editorCell, view.inputs, editorContext);
    }
    for (SNode child : ListSequence.fromList(SLinkOperations.getTargets(node, "outputPorts", true))) {
      createViewForChildNode(child, editorCell, view.outputs, editorContext);
    }
    view.dimension().set(Block_diagramGenerated_Editor._StyleParameter_QueryFunction_70mnj_a0a((editorCell == null ? null : editorCell.getContext()), (editorCell == null ? null : editorCell.getSNode())));
    ModelAccess.instance().runCommandInEDT(new Runnable() {
      public void run() {
        new Mapper<View, SNode>(view, node) {
          @Override
          protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
            configuration.add(Synchronizers.forProperty(view.text, new Runnable() {
              public void run() {
                String groupId = ModelAccess.instance().runReadAction(new Computable<String>() {
                  public String compute() {
                    return editorCell.getCellId() + "_" + node.getNodeId().toString();
                  }
                });
                editorCell.getContext().flushEvents();
                ModelAccess.instance().runWriteActionInCommand(new Runnable() {
                  public void run() {
                    SPropertyOperations.set(node, "name", view.text.get());
                  }
                }, null, groupId, false, editorContext.getOperationContext().getProject());
              }
            }));
            configuration.add(Synchronizers.forProperty(view.x, new Runnable() {
              public void run() {
                String groupId = ModelAccess.instance().runReadAction(new Computable<String>() {
                  public String compute() {
                    return editorCell.getCellId() + "_" + node.getNodeId().toString();
                  }
                });
                editorCell.getContext().flushEvents();
                ModelAccess.instance().runWriteActionInCommand(new Runnable() {
                  public void run() {
                    SPropertyOperations.set(node, "x", "" + (view.x.get()));
                  }
                }, null, groupId, false, editorContext.getOperationContext().getProject());
              }
            }));
            configuration.add(Synchronizers.forProperty(view.y, new Runnable() {
              public void run() {
                String groupId = ModelAccess.instance().runReadAction(new Computable<String>() {
                  public String compute() {
                    return editorCell.getCellId() + "_" + node.getNodeId().toString();
                  }
                });
                editorCell.getContext().flushEvents();
                ModelAccess.instance().runWriteActionInCommand(new Runnable() {
                  public void run() {
                    SPropertyOperations.set(node, "y", "" + (view.y.get()));
                  }
                }, null, groupId, false, editorContext.getOperationContext().getProject());
              }
            }));
          }
        }.attachRoot();
      }
    }, editorContext.getOperationContext().getProject());
    view.visible().set(true);
    editorCell.setCellId("DiagramNode_70mnj_a");
    editorCell.setBig(true);
    return editorCell;

  }

  public static void createViewForChildNode(SNode childNode, GenericViewCell parentCell, View parentView, EditorContext editorContext) {
    GenericViewCell childCell = (GenericViewCell) editorContext.createNodeCell(childNode);
    parentCell.addEditorCell(childCell);

    View childView = childCell.getView();
    View oldParent = childView.parent().get();
    if (oldParent != null) {
      oldParent.children().remove(oldParent.children().indexOf(childView));
    }
    parentView.children().add(childView);
  }

  private static void createDiagramNode_70mnj_a0(EditorCell_Collection editorCell, EditorContext editorContext, final SNode node, Property property) {
    PropertyViewCell propertyCell = new PropertyViewCell(editorContext, node, property, "name") {
      protected void synchronizePropertyWithModel() {
        myProperty.set(SPropertyOperations.getString(((SNode) getSNode()), "name"));
      }
    };
    editorCell.addEditorCell(propertyCell);
  }

  private static void createDiagramNode_70mnj_b0(EditorCell_Collection editorCell, EditorContext editorContext, final SNode node, Property property) {
    PropertyViewCell propertyCell = new PropertyViewCell(editorContext, node, property, "x") {
      protected void synchronizePropertyWithModel() {
        myProperty.set(SPropertyOperations.getInteger(((SNode) getSNode()), "x"));
      }
    };
    editorCell.addEditorCell(propertyCell);
  }

  private static void createDiagramNode_70mnj_c0(EditorCell_Collection editorCell, EditorContext editorContext, final SNode node, Property property) {
    PropertyViewCell propertyCell = new PropertyViewCell(editorContext, node, property, "y") {
      protected void synchronizePropertyWithModel() {
        myProperty.set(SPropertyOperations.getInteger(((SNode) getSNode()), "y"));
      }
    };
    editorCell.addEditorCell(propertyCell);
  }

  private static Vector _StyleParameter_QueryFunction_70mnj_a0a(EditorContext editorContext, SNode node) {
    return new Vector(75, 75);
  }
}
