package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.BlockCell;
import jetbrains.mps.nodeEditor.cells.jetpad.PropertyMapperCell;
import jetbrains.mps.nodeEditor.cells.jetpad.ReadableModelProperty;
import jetbrains.jetpad.model.collections.list.ObservableList;
import jetbrains.jetpad.model.collections.list.ObservableArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.Pair;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.nodeEditor.cells.jetpad.WritableModelProperty;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.HashSet;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.DiagramNodeView;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.mapper.MapperFactory;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.nodeEditor.cells.jetpad.PortCell;
import jetbrains.mps.lang.editor.figures.sandbox.BlockContentView;
import jetbrains.jetpad.model.property.WritableProperty;
import jetbrains.jetpad.geometry.Rectangle;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.nodeEditor.cells.jetpad.NodeDecoratorView;
import jetbrains.jetpad.model.property.ReadableProperty;
import jetbrains.mps.nodeEditor.cells.jetpad.PortDecoratorView;
import jetbrains.mps.diagram.dataflow.view.BlockView;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.projectional.diagram.view.RootTrait;
import jetbrains.jetpad.projectional.diagram.view.MoveHandler;
import jetbrains.mps.nodeEditor.cells.jetpad.AbstractJetpadCell;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.nodeEditor.cells.jetpad.JetpadUtils;
import jetbrains.jetpad.projectional.view.ViewTraitBuilder;
import jetbrains.jetpad.projectional.view.ViewEvents;
import jetbrains.jetpad.projectional.view.ViewEventHandler;
import jetbrains.jetpad.event.KeyEvent;
import jetbrains.jetpad.event.Key;
import jetbrains.jetpad.event.ModifierKey;

public class Block_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramNode_70mnj_a(editorContext, node);
  }

  private EditorCell createDiagramNode_70mnj_a(final EditorContext editorContext, final SNode node) {
    BlockCell editorCell = new Block_diagramGenerated_Editor.BlockCellImpl_70mnj_a(editorContext, node);
    editorCell.setCellId("DiagramNode_70mnj_a");
    editorCell.setBig(true);
    return editorCell;
  }

  private class BlockCellImpl_70mnj_a extends BlockCell {
    private final PropertyMapperCell<String> myPropertyCell_70mnj_a0a;
    private final PropertyMapperCell<Boolean> myPropertyCell_70mnj_a1a;
    private final ReadableModelProperty<Integer> myXProperty;
    private final ReadableModelProperty<Integer> myYProperty;
    private final ObservableList<SNode> myInputPorts = new ObservableArrayList<SNode>();
    private final ObservableList<SNode> myOutputPorts = new ObservableArrayList<SNode>();

    private BlockCellImpl_70mnj_a(EditorContext editorContext, final SNode node) {
      super(editorContext, node);
      myPropertyCell_70mnj_a0a = new PropertyMapperCell<String>(editorContext, node) {
        protected String getModelPropertyValueImpl() {
          return SPropertyOperations.getString(node, "name");
        }

        protected void setModelPropertyValueImpl(String value) {
          SPropertyOperations.set(node, "name", value);
        }
      };
      addEditorCell(myPropertyCell_70mnj_a0a);
      myPropertyCell_70mnj_a0a.getEditor().addCellDependentOnNodeProperty(myPropertyCell_70mnj_a0a, new Pair<SNodeReference, String>(new SNodePointer(node), "name"));
      myPropertyCell_70mnj_a1a = new PropertyMapperCell<Boolean>(editorContext, node) {
        protected Boolean getModelPropertyValueImpl() {
          return SPropertyOperations.getBoolean(node, "myBooleanProperty");
        }

        protected void setModelPropertyValueImpl(Boolean value) {
          SPropertyOperations.set(node, "myBooleanProperty", "" + (value));
        }
      };
      addEditorCell(myPropertyCell_70mnj_a1a);
      myPropertyCell_70mnj_a1a.getEditor().addCellDependentOnNodeProperty(myPropertyCell_70mnj_a1a, new Pair<SNodeReference, String>(new SNodePointer(node), "myBooleanProperty"));
      myXProperty = new WritableModelProperty<Integer>(getCellId() + "_" + node.getNodeId().toString(), getContext().getOperationContext().getProject()) {
        protected Integer getModelPropertyValue() {
          return SPropertyOperations.getInteger(node, "x");
        }

        protected void setModelPropertyValue(Integer value) {
          SPropertyOperations.set(node, "x", "" + (value));
        }
      };
      getEditor().addCellDependentOnNodeProperty(this, new Pair<SNodeReference, String>(new SNodePointer(node), "x"));
      myYProperty = new WritableModelProperty<Integer>(getCellId() + "_" + node.getNodeId().toString(), getContext().getOperationContext().getProject()) {
        protected Integer getModelPropertyValue() {
          return SPropertyOperations.getInteger(node, "y");
        }

        protected void setModelPropertyValue(Integer value) {
          SPropertyOperations.set(node, "y", "" + (value));
        }
      };
      getEditor().addCellDependentOnNodeProperty(this, new Pair<SNodeReference, String>(new SNodePointer(node), "y"));
      registerPositionProperties(myXProperty, myYProperty);
      synchronize();
    }

    public void synchronize() {
      super.synchronizeViewWithModel();
      myPropertyCell_70mnj_a0a.synchronize();
      myPropertyCell_70mnj_a1a.synchronize();
      syncPortNodes(SLinkOperations.getTargets(getSNode(), "inputPorts", true), myInputPorts.listIterator(), new HashSet<SNode>(myInputPorts));
      syncPortNodes(SLinkOperations.getTargets(getSNode(), "outputPorts", true), myOutputPorts.listIterator(), new HashSet<SNode>(myOutputPorts));
    }

    public Mapper<SNode, DiagramNodeView> createMapper() {
      return new Mapper<SNode, DiagramNodeView>(getSNode(), createDiagramNodeView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forObservableRole(this, myInputPorts, getTarget().inputs.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode portNode) {
              return ((PortCell) getDirectChildCell(portNode)).createMapper();
            }
          }));
          configuration.add(Synchronizers.forObservableRole(this, myOutputPorts, getTarget().outputs.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode portNode) {
              return ((PortCell) getDirectChildCell(portNode)).createMapper();
            }
          }));

          configuration.add(Synchronizers.forConstantRole(this, getSource().getNodeId().toString(), getTarget().contentView.children(), new MapperFactory<String, BlockContentView>() {
            public Mapper<? extends String, ? extends BlockContentView> createMapper(String block) {
              return new Mapper<String, BlockContentView>(block, new BlockContentView()) {
                @Override
                protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
                  super.registerSynchronizers(configuration);
                  myPropertyCell_70mnj_a0a.registerSynchronizers(configuration, getTarget().text());
                  myPropertyCell_70mnj_a1a.registerSynchronizers(configuration, getTarget().isClicked);
                }
              };
            }
          }));
          configuration.add(Synchronizers.forProperty(getTarget().bounds(), new WritableProperty<Rectangle>() {
            public void set(Rectangle rect) {
              DiagramCell diagramCell = getDiagramCell();
              if (diagramCell == null) {
                return;
              }
              setX(rect.origin.x + diagramCell.getX());
              setY(rect.origin.y + diagramCell.getY());
              setWidth(rect.dimension.x);
              setHeight(rect.dimension.y);
            }
          }));

          configuration.add(Synchronizers.forProperty(getTarget().focused(), new Runnable() {
            public void run() {
              if (getTarget().focused().get()) {
                SelectionUtil.selectCell(getContext(), getSNode(), getCellId());
              }
            }
          }));
        }
      };
    }

    public Mapper<SNode, NodeDecoratorView> createDecorationMapper() {
      return new Mapper<SNode, NodeDecoratorView>(getSNode(), new NodeDecoratorView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          DiagramCell diagramCell = getDiagramCell();
          if (diagramCell == null) {
            return;
          }
          final Mapper<? super SNode, ?> descendantMapper = getDiagramCell().getRootMapper().getDescendantMapper(getSNode());
          if (descendantMapper == null) {
            return;
          }
          configuration.add(Synchronizers.forProperty(myErrorItem, getTarget().hasError));
          configuration.add(Synchronizers.forProperty(((DiagramNodeView) descendantMapper.getTarget()).focused(), getTarget().isSelected));
          ReadableProperty<Rectangle> bounds = ((DiagramNodeView) descendantMapper.getTarget()).rect.bounds();
          configuration.add(Synchronizers.forProperty(bounds, getTarget().rectBounds()));
          configuration.add(Synchronizers.forObservableRole(this, myInputPorts, getTarget().inputPortDecotatorView.children(), new MapperFactory<SNode, PortDecoratorView>() {
            public Mapper<? extends SNode, ? extends PortDecoratorView> createMapper(SNode portNode) {
              return ((PortCell) getDirectChildCell(portNode)).createDecorationMapper();
            }
          }));
          configuration.add(Synchronizers.forObservableRole(this, myOutputPorts, getTarget().outputPortDecotatorView.children(), new MapperFactory<SNode, PortDecoratorView>() {
            public Mapper<? extends SNode, ? extends PortDecoratorView> createMapper(SNode portNode) {
              return ((PortCell) getDirectChildCell(portNode)).createDecorationMapper();
            }
          }));

        }
      };
    }

    private DiagramNodeView createDiagramNodeView() {
      final BlockView blockView = new BlockView();
      blockView.minimalSize().set(new Vector(10, 10));
      blockView.rect.background().set(Color.TRANSPARENT);
      blockView.padding().set(0);

      blockView.moveTo(new Vector(myXProperty.get(), myYProperty.get()));
      blockView.contentView.prop(RootTrait.MOVE_HANDLER).set(new MoveHandler() {
        public void move(Vector delta) {
          myXProperty.set(myXProperty.get() + delta.x);
          myYProperty.set(myYProperty.get() + delta.y);
        }
      });
      AbstractJetpadCell.configureView(blockView, BlockCellImpl_70mnj_a.this, new _FunctionTypes._return_P0_E0<Boolean>() {
        public Boolean invoke() {
          return true;
        }
      });

      blockView.prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
      blockView.rect.prop(JetpadUtils.SOURCE).set(getSNode());
      blockView.addTrait(new ViewTraitBuilder().on(ViewEvents.KEY_PRESSED, new ViewEventHandler<KeyEvent>() {
        @Override
        public void handle(View view, KeyEvent e) {
          if (!(blockView.focused().get())) {
            return;
          }
          if (e.is(Key.T)) {
            blockView.setPortsDirection(blockView.getPortsDirection().turnClockwise());
          } else if (e.is(Key.T, ModifierKey.SHIFT)) {
            blockView.setPortsDirection(blockView.getPortsDirection().turnCounterclockwise());
          }
        }
      }).build());
      return blockView;
    }
  }
}
