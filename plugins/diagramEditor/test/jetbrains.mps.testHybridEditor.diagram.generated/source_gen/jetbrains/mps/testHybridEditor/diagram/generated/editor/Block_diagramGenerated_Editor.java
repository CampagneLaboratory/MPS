package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.PropertyMapperCell;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.nodeEditor.cells.jetpad.BlockCell;
import jetbrains.mps.nodeEditor.cells.jetpad.JetpadUtils;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.DiagramNodeView;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.jetpad.mapper.MapperFactory;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.nodeEditor.cells.jetpad.PortCell;
import jetbrains.mps.lang.editor.figures.sandbox.BlockContentView;
import jetbrains.mps.util.Pair;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.diagram.dataflow.view.BlockView;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.jetpad.projectional.diagram.view.RootTrait;
import jetbrains.jetpad.projectional.diagram.view.MoveHandler;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.jetpad.projectional.diagram.view.DeleteHandler;

public class Block_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramNode_70mnj_a(editorContext, node);
  }

  private EditorCell createDiagramNode_70mnj_a(final EditorContext editorContext, final SNode node) {
    final PropertyMapperCell parameterPropertyCell_70mnj_a0a = new PropertyMapperCell(editorContext, node) {
      protected PropertyMapperCell.WritableModelProperty createModelProperty() {
        return new PropertyMapperCell.WritableModelProperty<String>() {
          protected String getModelPropertyValue() {
            return SPropertyOperations.getString(node, "name");
          }

          protected void setModelPropertyValue(String value) {
            SPropertyOperations.set(node, "name", value);
          }
        };
      }
    };
    final PropertyMapperCell parameterPropertyCell_70mnj_a1a = new PropertyMapperCell(editorContext, node) {
      protected PropertyMapperCell.WritableModelProperty createModelProperty() {
        return new PropertyMapperCell.WritableModelProperty<Boolean>() {
          protected Boolean getModelPropertyValue() {
            return SPropertyOperations.getBoolean(node, "myBooleanProperty");
          }

          protected void setModelPropertyValue(Boolean value) {
            SPropertyOperations.set(node, "myBooleanProperty", "" + (value));
          }
        };
      }
    };
    BlockCell editorCell = new BlockCell(editorContext, node, JetpadUtils.modelProperty(new Computable<Integer>() {
      public Integer compute() {
        return SNodeOperations.getIndexInParent(node) / 2 * 150 + 10;
      }
    }), JetpadUtils.modelProperty(new Computable<Integer>() {
      public Integer compute() {
        return SPropertyOperations.getInteger(node, "y");
      }
    })) {
      public Mapper<SNode, DiagramNodeView> getMapper() {
        final Mapper<SNode, DiagramNodeView> mapper = new Mapper<SNode, DiagramNodeView>(node, createDiagramNodeView_70mnj_a(editorContext, node, this)) {
          @Override
          protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
            super.registerSynchronizers(configuration);
            configuration.add(Synchronizers.forSimpleRole(this, SLinkOperations.getTargets(node, "inputPorts", true), getTarget().inputs.children(), new MapperFactory<SNode, View>() {
              public Mapper<? extends SNode, ? extends View> createMapper(SNode mapperNode) {
                EditorCell portCell = editorContext.createNodeCell(mapperNode);
                if (portCell instanceof PortCell) {
                  addEditorCell(portCell);
                  return ((PortCell) portCell).getMapper();
                }
                return null;
              }
            }));
            configuration.add(Synchronizers.forSimpleRole(this, SLinkOperations.getTargets(node, "outputPorts", true), getTarget().outputs.children(), new MapperFactory<SNode, View>() {
              public Mapper<? extends SNode, ? extends View> createMapper(SNode mapperNode) {
                EditorCell portCell = editorContext.createNodeCell(mapperNode);
                if (portCell instanceof PortCell) {
                  addEditorCell(portCell);
                  return ((PortCell) portCell).getMapper();
                }
                return null;
              }
            }));

            configuration.add(Synchronizers.forConstantRole(this, getSource().getNodeId().toString(), getTarget().contentView.children(), new MapperFactory<String, BlockContentView>() {
              public Mapper<? extends String, ? extends BlockContentView> createMapper(String block) {
                return new Mapper<String, BlockContentView>(block, new BlockContentView()) {
                  @Override
                  protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
                    super.registerSynchronizers(configuration);
                    parameterPropertyCell_70mnj_a0a.registerSynchronizers(configuration, getTarget().text());
                    parameterPropertyCell_70mnj_a1a.registerSynchronizers(configuration, getTarget().isClicked);
                  }
                };
              }
            }));
          }
        };
        return mapper;
      }
    };
    editorCell.addEditorCell(parameterPropertyCell_70mnj_a0a);
    editorCell.addEditorCell(parameterPropertyCell_70mnj_a1a);
    parameterPropertyCell_70mnj_a0a.getEditor().addCellDependentOnNodeProperty(parameterPropertyCell_70mnj_a0a, new Pair<SNodeReference, String>(new SNodePointer(node), "name"));
    parameterPropertyCell_70mnj_a1a.getEditor().addCellDependentOnNodeProperty(parameterPropertyCell_70mnj_a1a, new Pair<SNodeReference, String>(new SNodePointer(node), "myBooleanProperty"));
    editorCell.getEditor().addCellDependentOnNodeProperty(editorCell, new Pair<SNodeReference, String>(new SNodePointer(node), "y"));

    editorCell.setCellId("DiagramNode_70mnj_a");
    editorCell.setBig(true);
    return editorCell;
  }

  private DiagramNodeView createDiagramNodeView_70mnj_a(final EditorContext editorContext, final SNode node, final BlockCell blockCell) {
    final BlockView blockView = new BlockView();
    blockView.rect.background().set(Color.TRANSPARENT);
    blockView.padding().set(0);

    blockView.moveTo(new Vector(blockCell.getXProperty().get(), blockCell.getYProperty().get()));
    blockView.rect.prop(RootTrait.MOVE_HANDLER).set(new MoveHandler() {
      public void move(final Vector delta) {
        String groupId = ModelAccess.instance().runReadAction(new Computable<String>() {
          public String compute() {
            return blockCell.getCellId() + "_" + node.getNodeId().toString();
          }
        });
        editorContext.flushEvents();

        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
          }
        }, null, groupId, false, editorContext.getOperationContext().getProject());
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            SPropertyOperations.set(node, "y", "" + (SPropertyOperations.getInteger(node, "y") + delta.y));
          }
        }, null, groupId, false, editorContext.getOperationContext().getProject());

        blockView.moveTo(new Vector(blockCell.getXProperty().get(), blockCell.getYProperty().get()));
        blockView.invalidate();
      }
    });

    blockView.focusable().set(true);
    blockView.prop(RootTrait.DELETE_HANDLER).set(new DeleteHandler() {
      public boolean canDelete() {
        return true;
      }

      public void delete() {
        editorContext.getRepository().getModelAccess().executeCommand(new Runnable() {
          public void run() {
            SNodeOperations.deleteNode(node);
          }
        });
      }
    });

    blockView.prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
    blockView.rect.prop(JetpadUtils.SOURCE).set(node);

    return blockView;
  }
}
