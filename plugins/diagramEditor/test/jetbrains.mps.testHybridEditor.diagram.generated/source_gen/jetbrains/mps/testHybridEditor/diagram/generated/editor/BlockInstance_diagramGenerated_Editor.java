package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.editor.figures.sandbox.BlockInstanceView;
import jetbrains.mps.nodeEditor.cells.jetpad.GenericViewCell;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.jetpad.projectional.view.ViewTraitBuilder;
import jetbrains.jetpad.projectional.view.ViewEvents;
import jetbrains.jetpad.projectional.view.ViewEventHandler;
import jetbrains.jetpad.event.MouseEvent;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.smodel.ModelAccess;

public class BlockInstance_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramNode_gju6mh_a(editorContext, node);
  }

  private EditorCell createDiagramNode_gju6mh_a(final EditorContext editorContext, final SNode node) {
    final BlockInstanceView view = new BlockInstanceView();
    GenericViewCell editorCell = GenericViewCell.createViewCell(editorContext, node, view);
    view.x.set(SPropertyOperations.getInteger(node, "x"));
    view.y.set(SPropertyOperations.getInteger(node, "y"));
    view.text.set(SPropertyOperations.getString(node, "name"));
    view.inputPortNames.addAll(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "metaBlock", false), "inMetaPorts", true)).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(it, "name");
      }
    }).toListSequence());
    view.outputPortNames.addAll(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "metaBlock", false), "outMetaPorts", true)).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(it, "name");
      }
    }).toListSequence());
    view.addTrait(new ViewTraitBuilder().on(ViewEvents.MOUSE_RELEASED, new ViewEventHandler<MouseEvent>() {
      @Override
      public void handle(View v, MouseEvent e) {
        ModelAccess.instance().runCommandInEDT(new Runnable() {
          public void run() {
            SPropertyOperations.set(node, "x", "" + (view.x.get()));
            SPropertyOperations.set(node, "y", "" + (view.y.get()));
            SPropertyOperations.set(node, "name", view.text.get());
          }
        }, editorContext.getOperationContext().getProject());
      }
    }).build());

    view.visible().set(true);
    editorCell.setCellId("DiagramNode_gju6mh_a");
    editorCell.setBig(true);
    return editorCell;

  }
}
