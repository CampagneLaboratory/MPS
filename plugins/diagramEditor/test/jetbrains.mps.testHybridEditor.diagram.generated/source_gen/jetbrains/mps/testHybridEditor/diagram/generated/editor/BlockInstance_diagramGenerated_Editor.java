package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.PropertyMapperCell;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.jetpad.model.collections.list.ObservableList;
import jetbrains.jetpad.model.collections.list.ObservableArrayList;
import jetbrains.mps.nodeEditor.cells.jetpad.BlockCell;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.DiagramNodeView;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.jetpad.mapper.MapperFactory;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.projectional.view.RectView;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.mps.nodeEditor.cells.jetpad.JetpadUtils;
import jetbrains.jetpad.projectional.view.ViewTraitBuilder;
import jetbrains.jetpad.projectional.view.ViewEvents;
import jetbrains.jetpad.projectional.view.ViewEventHandler;
import jetbrains.jetpad.event.MouseEvent;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import jetbrains.mps.lang.editor.figures.sandbox.BlockContentView;
import jetbrains.mps.util.Computable;
import jetbrains.mps.util.Pair;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.diagram.dataflow.view.BlockView;
import jetbrains.jetpad.projectional.diagram.view.RootTrait;
import jetbrains.jetpad.projectional.diagram.view.MoveHandler;
import jetbrains.jetpad.projectional.diagram.view.DeleteHandler;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class BlockInstance_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramNode_gju6mh_a(editorContext, node);
  }

  private EditorCell createDiagramNode_gju6mh_a(final EditorContext editorContext, final SNode node) {
    final PropertyMapperCell parameterPropertyCell_gju6mh_a0a = new PropertyMapperCell<String>(editorContext, node) {
      protected String getModelPropertyValueImpl() {
        return SPropertyOperations.getString(node, "name");
      }

      protected void setModelPropertyValueImpl(String value) {
        SPropertyOperations.set(node, "name", value);
      }
    };
    final ObservableList<SNode> inputPorts = new ObservableArrayList<SNode>();
    final ObservableList<SNode> outputPorts = new ObservableArrayList<SNode>();
    BlockCell editorCell = new BlockCell(editorContext, node) {
      protected void initPorts() {
      }

      protected Integer getXPositionFromModel() {
        return SPropertyOperations.getInteger(node, "x");
      }

      protected Integer getYPositionFromModel() {
        return SPropertyOperations.getInteger(node, "y");
      }

      @Override
      protected void setXPositionToModel(Integer x) {
        SPropertyOperations.set(node, "x", "" + (x));
      }

      @Override
      protected void setYPositionToModel(Integer y) {
        SPropertyOperations.set(node, "y", "" + (y));
      }

      public Mapper<SNode, DiagramNodeView> createMapper() {
        final Mapper<SNode, DiagramNodeView> mapper = new Mapper<SNode, DiagramNodeView>(node, createDiagramNodeView_gju6mh_a(editorContext, node, this)) {
          @Override
          protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
            super.registerSynchronizers(configuration);
            configuration.add(Synchronizers.forSimpleRole(this, ListSequence.fromIterable(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "metaBlock", false), "inMetaPorts", true)), getTarget().inputs.children(), new MapperFactory<SNode, View>() {
              public Mapper<? extends SNode, ? extends View> createMapper(final SNode id) {
                Mapper<SNode, RectView> mapper = new Mapper<SNode, RectView>(id, new RectView()) {
                  @Override
                  protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
                    super.registerSynchronizers(configuration);
                    getTarget().background().set(Color.LIGHT_GRAY);
                    getTarget().dimension().set(new Vector(10, 10));
                    getTarget().prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
                    getTarget().prop(JetpadUtils.SOURCE).set(node);
                    getTarget().prop(JetpadUtils.ID).set(id);

                  }
                };

                return mapper;
              }
            }));
            configuration.add(Synchronizers.forSimpleRole(this, ListSequence.fromIterable(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "metaBlock", false), "outMetaPorts", true)), getTarget().outputs.children(), new MapperFactory<SNode, View>() {
              public Mapper<? extends SNode, ? extends View> createMapper(final SNode id) {
                Mapper<SNode, RectView> mapper = new Mapper<SNode, RectView>(id, new RectView()) {
                  @Override
                  protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
                    super.registerSynchronizers(configuration);
                    getTarget().background().set(Color.GRAY);
                    getTarget().dimension().set(new Vector(10, 10));
                    getTarget().addTrait(new ViewTraitBuilder().on(ViewEvents.MOUSE_DRAGGED, new ViewEventHandler<MouseEvent>() {
                      @Override
                      public void handle(View view, MouseEvent e) {
                        DiagramCell diagramCell = getDiagramCell();
                        if (diagramCell == null) {
                          return;
                        }
                        if (!(diagramCell.hasConnectionDragFeedback())) {
                          diagramCell.showConnectionDragFeedback(getTarget());
                        }
                        diagramCell.updateConnectionDragFeedback(e.location());
                      }
                    }).on(ViewEvents.MOUSE_RELEASED, new ViewEventHandler<MouseEvent>() {
                      @Override
                      public void handle(View view, MouseEvent e) {
                        DiagramCell diagramCell = getDiagramCell();
                        if (diagramCell == null || !(diagramCell.hasConnectionDragFeedback())) {
                          return;
                        }
                        diagramCell.updateConnectionDragFeedback(e.location());
                        diagramCell.createNewDiagramElement(e.location().x, e.location().y);
                      }
                    }).build());
                    getTarget().prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
                    getTarget().prop(JetpadUtils.SOURCE).set(node);
                    getTarget().prop(JetpadUtils.ID).set(id);

                  }
                };

                return mapper;
              }
            }));

            configuration.add(Synchronizers.forConstantRole(this, getSource().getNodeId().toString(), getTarget().contentView.children(), new MapperFactory<String, BlockContentView>() {
              public Mapper<? extends String, ? extends BlockContentView> createMapper(String block) {
                return new Mapper<String, BlockContentView>(block, new BlockContentView()) {
                  @Override
                  protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
                    super.registerSynchronizers(configuration);
                    parameterPropertyCell_gju6mh_a0a.registerSynchronizers(configuration, getTarget().text());
                    configuration.add(Synchronizers.forProperty(JetpadUtils.modelProperty(new Computable<Boolean>() {
                      public Boolean compute() {
                        return true;
                      }
                    }), getTarget().isClicked));
                  }
                };
              }
            }));
          }
        };
        return mapper;
      }
    };
    // TODO: move this registeration to the runtime code 
    editorCell.addEditorCell(parameterPropertyCell_gju6mh_a0a);

    parameterPropertyCell_gju6mh_a0a.getEditor().addCellDependentOnNodeProperty(parameterPropertyCell_gju6mh_a0a, new Pair<SNodeReference, String>(new SNodePointer(node), "name"));
    editorCell.getEditor().addCellDependentOnNodeProperty(editorCell, new Pair<SNodeReference, String>(new SNodePointer(node), "x"));
    editorCell.getEditor().addCellDependentOnNodeProperty(editorCell, new Pair<SNodeReference, String>(new SNodePointer(node), "y"));

    editorCell.setCellId("DiagramNode_gju6mh_a");
    editorCell.setBig(true);
    return editorCell;
  }

  private DiagramNodeView createDiagramNodeView_gju6mh_a(final EditorContext editorContext, final SNode node, final BlockCell blockCell) {
    final BlockView blockView = new BlockView();
    blockView.rect.background().set(Color.TRANSPARENT);
    blockView.padding().set(0);

    blockView.moveTo(new Vector(blockCell.getXProperty().get(), blockCell.getYProperty().get()));
    blockView.rect.prop(RootTrait.MOVE_HANDLER).set(new MoveHandler() {
      public void move(Vector delta) {
        blockCell.getXProperty().set(blockCell.getXProperty().get() + delta.x);
        blockCell.getYProperty().set(blockCell.getYProperty().get() + delta.y);
      }
    });

    blockView.focusable().set(true);
    blockView.prop(RootTrait.DELETE_HANDLER).set(new DeleteHandler() {
      public boolean canDelete() {
        return true;
      }

      public void delete() {
        editorContext.getRepository().getModelAccess().executeCommand(new Runnable() {
          public void run() {
            SNodeOperations.deleteNode(node);
          }
        });
      }
    });

    blockView.prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
    blockView.rect.prop(JetpadUtils.SOURCE).set(node);

    return blockView;
  }
}
