package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.PortCell;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.view.RectView;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.jetpad.projectional.view.ViewTraitBuilder;
import jetbrains.jetpad.projectional.view.ViewEvents;
import jetbrains.jetpad.projectional.view.ViewEventHandler;
import jetbrains.jetpad.event.MouseEvent;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import jetbrains.mps.nodeEditor.cells.jetpad.JetpadUtils;

public class OutputPort_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramPort_16y7ix_a(editorContext, node);
  }

  private EditorCell createDiagramPort_16y7ix_a(final EditorContext editorContext, final SNode node) {
    final EditorCell editorCell = new PortCell(editorContext, node) {
      public Mapper<SNode, RectView> getMapper() {
        Mapper<SNode, RectView> mapper = new Mapper<SNode, RectView>(node, new RectView()) {
          @Override
          protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
            super.registerSynchronizers(configuration);
            getTarget().background().set(Color.GRAY);
            getTarget().dimension().set(new Vector(10, 10));
            getTarget().addTrait(new ViewTraitBuilder().on(ViewEvents.MOUSE_DRAGGED, new ViewEventHandler<MouseEvent>() {
              @Override
              public void handle(View view, MouseEvent e) {
                DiagramCell diagramCell = getDiagramCell();
                if (diagramCell == null) {
                  return;
                }
                if (!(diagramCell.hasConnectionDragFeedback())) {
                  diagramCell.showConnectionDragFeedback(getTarget());
                }
                diagramCell.updateConnectionDragFeedback(e.location());
              }
            }).on(ViewEvents.MOUSE_RELEASED, new ViewEventHandler<MouseEvent>() {
              @Override
              public void handle(View view, MouseEvent e) {
                DiagramCell diagramCell = getDiagramCell();
                if (diagramCell == null || !(diagramCell.hasConnectionDragFeedback())) {
                  return;
                }
                diagramCell.updateConnectionDragFeedback(e.location());
                diagramCell.createNewDiagramElement(e.location().x, e.location().y);
              }
            }).build());
            getTarget().prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
            getTarget().prop(JetpadUtils.SOURCE).set(getSource());
          }
        };

        return mapper;
      }
    };
    editorCell.setBig(true);


    editorCell.setCellId("DiagramPort_16y7ix_a");
    editorCell.setBig(true);

    return editorCell;
  }
}
