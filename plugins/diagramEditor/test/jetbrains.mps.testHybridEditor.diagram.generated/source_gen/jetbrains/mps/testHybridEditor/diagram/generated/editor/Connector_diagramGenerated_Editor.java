package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.jetpad.projectional.diagram.view.PolylineConnection;
import jetbrains.mps.nodeEditor.cells.jetpad.ConnectorViewCell;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.nodeEditor.cells.CellFinderUtil;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.nodeEditor.cells.jetpad.GenericViewCell;

public class Connector_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramConnector_9iys9b_a(editorContext, node);
  }

  private EditorCell createDiagramConnector_9iys9b_a(final EditorContext editorContext, final SNode node) {
    PolylineConnection connection = new PolylineConnection();
    final ConnectorViewCell editorCell = new ConnectorViewCell(editorContext, node) {
      public View getInputView(EditorCell rootCell) {
        final SNode port = ListSequence.fromList(SLinkOperations.getTargets(node, "inputPort", false)).first();
        if (port == null) {
          return null;
        }
        EditorCell cell = CellFinderUtil.findChildByCondition(rootCell, new Condition<EditorCell>() {
          public boolean met(EditorCell foundCell) {
            return foundCell.isBig() && foundCell.getSNode().equals(port);
          }
        }, true);
        if (cell instanceof GenericViewCell) {
          return ((GenericViewCell) cell).getView();
        }
        return null;
      }

      public View getOutputView(EditorCell rootCell) {
        final SNode port = ListSequence.fromList(SLinkOperations.getTargets(node, "outputPort", false)).first();
        if (port == null) {
          return null;
        }
        EditorCell cell = CellFinderUtil.findChildByCondition(rootCell, new Condition<EditorCell>() {
          public boolean met(EditorCell foundCell) {
            return foundCell.isBig() && foundCell.getSNode().equals(port);
          }
        }, true);

        if (cell instanceof GenericViewCell) {
          return ((GenericViewCell) cell).getView();
        }
        return null;
      }
    };
    editorCell.setConnection(connection);
    editorCell.setView(connection.view());
    editorCell.setCellId("DiagramConnector_9iys9b_a");
    editorCell.setBig(true);

    return editorCell;
  }
}
