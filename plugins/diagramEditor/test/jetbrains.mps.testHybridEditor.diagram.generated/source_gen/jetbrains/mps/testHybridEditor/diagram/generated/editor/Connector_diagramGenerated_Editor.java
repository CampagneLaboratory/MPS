package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.ConnectorCell;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.PolyLineConnection;
import jetbrains.jetpad.model.property.ReadableProperty;
import jetbrains.mps.nodeEditor.cells.jetpad.JetpadUtils;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.model.property.WritableProperty;
import jetbrains.jetpad.projectional.view.View;

public class Connector_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramConnector_9iys9b_a(editorContext, node);
  }

  private EditorCell createDiagramConnector_9iys9b_a(final EditorContext editorContext, final SNode node) {
    final ConnectorCell editorCell = new ConnectorCell(editorContext, node) {



      public Mapper<SNode, PolyLineConnection> getMapper() {
        return new Mapper<SNode, PolyLineConnection>(node, new PolyLineConnection()) {
          @Override
          protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
            super.registerSynchronizers(configuration);
            ReadableProperty<SNode> port_9iys9b_a0 = JetpadUtils.modelProperty(new Computable<SNode>() {
              public SNode compute() {
                return SLinkOperations.getTarget(node, "inputPort", false);
              }
            });
            configuration.add(Synchronizers.forProperty(port_9iys9b_a0, new WritableProperty<SNode>() {
              public void set(SNode port) {
                Mapper<? super SNode, ?> descendantMapper = getParent().getDescendantMapper(port);
                getTarget().toView().set((port == null ? null : (descendantMapper == null ? null : ((View) descendantMapper.getTarget()))));

              }
            }));
            ReadableProperty<SNode> port_9iys9b_a0_0 = JetpadUtils.modelProperty(new Computable<SNode>() {
              public SNode compute() {
                return SLinkOperations.getTarget(node, "outputPort", false);
              }
            });
            configuration.add(Synchronizers.forProperty(port_9iys9b_a0_0, new WritableProperty<SNode>() {
              public void set(SNode port) {
                Mapper<? super SNode, ?> descendantMapper = getParent().getDescendantMapper(port);
                getTarget().fromView().set((port == null ? null : (descendantMapper == null ? null : ((View) descendantMapper.getTarget()))));
                if (getTarget().fromView().get() == null || getTarget().toView().get() == null) {
                  getTarget().fromView().set(null);
                  getTarget().toView().set(null);
                }

              }
            }));
          }
        };
      }
    };
    editorCell.setBig(true);

    editorCell.setCellId("DiagramConnector_9iys9b_a");
    editorCell.setBig(true);

    return editorCell;
  }
}
