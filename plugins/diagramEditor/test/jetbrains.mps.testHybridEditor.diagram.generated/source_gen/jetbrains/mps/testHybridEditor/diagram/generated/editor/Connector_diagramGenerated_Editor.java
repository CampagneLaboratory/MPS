package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.ConnectorCell;
import jetbrains.jetpad.model.property.Property;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.jetpad.model.property.ValueProperty;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.PolyLineConnection;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.jetpad.model.property.WritableProperty;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.geometry.Rectangle;
import jetbrains.jetpad.projectional.view.GroupView;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import jetbrains.jetpad.model.property.ReadableProperty;
import java.util.List;
import jetbrains.jetpad.geometry.Segment;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.nodeEditor.cells.jetpad.AbstractJetpadCell;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.jetpad.projectional.view.PolyLineView;
import jetbrains.jetpad.values.Color;
import java.util.ArrayList;

public class Connector_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramConnector_9iys9b_a(editorContext, node);
  }

  private EditorCell createDiagramConnector_9iys9b_a(final EditorContext editorContext, final SNode node) {
    final ConnectorCell editorCell = new Connector_diagramGenerated_Editor.ConnectorCellImpl_9iys9b_a(editorContext, node);
    editorCell.setCellId("DiagramConnector_9iys9b_a");
    editorCell.setBig(true);
    return editorCell;
  }

  public class ConnectorCellImpl_9iys9b_a extends ConnectorCell {
    protected Property<Tuples._1<SNode>> myInputPort = new ValueProperty<Tuples._1<SNode>>();
    protected Property<Tuples._1<SNode>> myOutputPort = new ValueProperty<Tuples._1<SNode>>();

    private ConnectorCellImpl_9iys9b_a(EditorContext editorContext, SNode node) {
      super(editorContext, node);
      synchronize();
    }

    public Mapper<SNode, PolyLineConnection> createMapper() {
      return new Mapper<SNode, PolyLineConnection>(getSNode(), createConnection()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forProperty(getTarget().view().focused(), new Runnable() {
            public void run() {
              if (getTarget().view().focused().get()) {
                SelectionUtil.selectCell(getContext(), getSNode(), getCellId());
              }
            }
          }));
          configuration.add(Synchronizers.forProperty(myInputPort, new WritableProperty<Tuples._1<SNode>>() {
            public void set(Tuples._1<SNode> port) {
              getTarget().toView().set(getTargetView(port));
            }

            private View getTargetView(Tuples._1<SNode> port) {
              Mapper<? super SNode, ?> descendantMapper = getParent().getDescendantMapper(port._0());
              if (descendantMapper == null) {
                return null;
              }
              return (View) descendantMapper.getTarget();
            }
          }));
          configuration.add(Synchronizers.forProperty(myOutputPort, new WritableProperty<Tuples._1<SNode>>() {
            public void set(Tuples._1<SNode> port) {
              getTarget().fromView().set(getTargetView(port));
              if (getTarget().fromView().get() == null || getTarget().toView().get() == null) {
                getTarget().fromView().set(null);
                getTarget().toView().set(null);
              }
            }

            private View getTargetView(Tuples._1<SNode> port) {
              Mapper<? super SNode, ?> descendantMapper = getParent().getDescendantMapper(port._0());
              if (descendantMapper == null) {
                return null;
              }
              return (View) descendantMapper.getTarget();
            }
          }));
          configuration.add(Synchronizers.forProperty(getTarget().view().bounds(), new WritableProperty<Rectangle>() {
            public void set(Rectangle rect) {
              myXValueProperty = rect.origin.x;
              myYValueProperty = rect.origin.y;
              myWidthValueProperty = rect.dimension.x;
              myHeightValueProperty = rect.dimension.y;
            }
          }));

        }
      };
    }



    public Mapper<SNode, View> createDecorationMapper() {
      return new Mapper<SNode, View>(getSNode(), new GroupView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          DiagramCell diagramCell = getDiagramCell();
          if (diagramCell == null) {
            return;
          }
          final Mapper<? super SNode, ?> descendantMapper = getDiagramCell().getRootMapper().getDescendantMapper(getSNode());
          if (descendantMapper == null) {
            return;
          }
          ReadableProperty<Boolean> isValid = ((PolyLineConnection) descendantMapper.getTarget()).view().valid();
          final GroupView errorView = createErrorView();
          configuration.add(Synchronizers.forProperty(myErrorItem, new WritableProperty<Boolean>() {
            public void set(Boolean source) {
              if (source) {
                getTarget().children().add(errorView);
              } else {
                getTarget().children().remove(errorView);
              }
            }
          }));
          configuration.add(Synchronizers.forProperty(isValid, new WritableProperty<Boolean>() {
            public void set(Boolean isValid) {
              if (isValid) {
                List<Segment> segmentList = ((PolyLineConnection) descendantMapper.getTarget()).getSegments();
                if (segmentList.isEmpty()) {
                  return;
                }
                Vector errorPoint = getErrorPoint(segmentList);
                updateErrorView(errorPoint, errorView);
              }
            }
          }));
          final GroupView selectionView = new GroupView();
          configuration.add(Synchronizers.forProperty(((PolyLineConnection) descendantMapper.getTarget()).view().focused(), new WritableProperty<Boolean>() {
            public void set(Boolean source) {
              if (source) {
                getTarget().children().add(selectionView);
              } else {
                getTarget().children().remove(selectionView);
              }
            }
          }));
          configuration.add(Synchronizers.forProperty(isValid, new WritableProperty<Boolean>() {
            public void set(Boolean isValid) {
              if (isValid) {
                List<Segment> segments = ((PolyLineConnection) descendantMapper.getTarget()).getSegments();
                updateSelectionView(segments, selectionView);
              }
            }
          }));

        }
      };
    }




    public void synchronize() {
      myInputPort.set(MultiTuple.<SNode>from(SLinkOperations.getTarget(getSNode(), "inputPort", false)));
      myOutputPort.set(MultiTuple.<SNode>from(SLinkOperations.getTarget(getSNode(), "outputPort", false)));
    }

    private PolyLineConnection createConnection() {
      PolyLineConnection connection = new PolyLineConnection();
      AbstractJetpadCell.configureView(connection.view(), ConnectorCellImpl_9iys9b_a.this, new _FunctionTypes._return_P0_E0<Boolean>() {
        public Boolean invoke() {
          return true;
        }
      });

      return connection;
    }



    private Vector getErrorPoint(List<Segment> segments) {
      if (ListSequence.fromList(segments).isEmpty()) {
        return null;
      }
      double sumLength = 0;
      for (Segment segment : ListSequence.fromList(segments)) {
        sumLength += segment.length();
      }
      if (sumLength == 0) {
        return ListSequence.fromList(segments).first().start;
      }
      double halfLength = sumLength / 2.0;
      sumLength = 0;
      for (Segment segment : ListSequence.fromList(segments)) {
        double currentLength = segment.length();
        if (sumLength + currentLength >= halfLength) {
          Vector se = segment.end.sub(segment.start);
          double d = (halfLength - sumLength) / se.length();
          double xToAdd = se.x * d;
          double yToAdd = se.y * d;
          Vector result = segment.start.add(new Vector(((int) xToAdd), ((int) yToAdd)));
          return result;
        }
        sumLength += currentLength;
      }
      return null;

    }




    private GroupView createErrorView() {
      GroupView result = new GroupView();
      PolyLineView firstLine = new PolyLineView();
      PolyLineView secondLine = new PolyLineView();
      firstLine.color().set(Color.RED);
      secondLine.color().set(Color.RED);
      result.children().add(firstLine);
      result.children().add(secondLine);
      return result;
    }

    private void updateErrorView(Vector errorPoint, final GroupView errorView) {
      int x = errorPoint.x;
      int y = errorPoint.y;
      PolyLineView firstLine = ((PolyLineView) errorView.children().get(0));
      PolyLineView secondLine = ((PolyLineView) errorView.children().get(1));
      firstLine.points.clear();
      secondLine.points.clear();
      firstLine.points.addAll(ListSequence.fromListAndArray(new ArrayList<Vector>(), new Vector(x - 5, y - 5), new Vector(x + 5, y + 5)));
      secondLine.points.addAll(ListSequence.fromListAndArray(new ArrayList<Vector>(), new Vector(x + 5, y - 5), new Vector(x - 5, y + 5)));
      errorView.invalidate();
    }



    private void updateSelectionView(List<Segment> segments, final GroupView selectionView) {
      selectionView.children().clear();
      selectionView.children().add(AbstractJetpadCell.createBlackSelectionRect(ListSequence.fromList(segments).first().start));
      for (Segment segment : ListSequence.fromList(segments)) {
        selectionView.children().add(AbstractJetpadCell.createBlackSelectionRect(segment.end));
        if (segment.length() > SELECTION_SQUARE_WIDTH * 10) {
          selectionView.children().add(AbstractJetpadCell.createBlackSelectionRect(new Vector((segment.end.x + segment.start.x) / 2, (segment.end.y + segment.start.y) / 2)));
        }
      }
      selectionView.invalidate();
    }


  }
}
