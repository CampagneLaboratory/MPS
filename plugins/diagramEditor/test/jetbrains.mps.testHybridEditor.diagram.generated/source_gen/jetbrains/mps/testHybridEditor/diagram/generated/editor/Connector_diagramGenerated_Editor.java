package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.ConnectorCell;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.PolyLineConnection;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.jetpad.model.property.ReadableProperty;
import jetbrains.mps.nodeEditor.cells.jetpad.JetpadUtils;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.jetpad.model.property.WritableProperty;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.nodeEditor.cells.jetpad.AbstractJetpadCell;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class Connector_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramConnector_9iys9b_a(editorContext, node);
  }

  private EditorCell createDiagramConnector_9iys9b_a(final EditorContext editorContext, final SNode node) {
    final ConnectorCell editorCell = new Connector_diagramGenerated_Editor.ConnectorCellImpl_9iys9b_a(editorContext, node);
    editorCell.setCellId("DiagramConnector_9iys9b_a");
    editorCell.setBig(true);
    return editorCell;
  }

  private class ConnectorCellImpl_9iys9b_a extends ConnectorCell {
    private ConnectorCellImpl_9iys9b_a(EditorContext editorContext, SNode node) {
      super(editorContext, node);
      synchronize();
    }

    public Mapper<SNode, PolyLineConnection> createMapper() {
      return new Mapper<SNode, PolyLineConnection>(getSNode(), createConnection()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forProperty(getTarget().view().focused(), new Runnable() {
            public void run() {
              SelectionUtil.selectCell(getContext(), getSNode(), getCellId());
            }
          }));
          final SNode node = getSNode();
          ReadableProperty<SNode> port_9iys9b_a0 = JetpadUtils.modelProperty(new Computable<SNode>() {
            public SNode compute() {
              return SLinkOperations.getTarget(node, "inputPort", false);
            }
          });
          configuration.add(Synchronizers.forProperty(port_9iys9b_a0, new WritableProperty<SNode>() {
            public void set(SNode port) {
              getTarget().toView().set(getTargetView(port));
            }

            private View getTargetView(SNode port) {
              Mapper<? super SNode, ?> descendantMapper = getParent().getDescendantMapper(port);
              if (descendantMapper == null) {
                return null;
              }
              return (View) descendantMapper.getTarget();
            }
          }));
          ReadableProperty<SNode> port_9iys9b_a0_0 = JetpadUtils.modelProperty(new Computable<SNode>() {
            public SNode compute() {
              return SLinkOperations.getTarget(node, "outputPort", false);
            }
          });
          configuration.add(Synchronizers.forProperty(port_9iys9b_a0_0, new WritableProperty<SNode>() {
            public void set(SNode port) {
              getTarget().fromView().set(getTargetView(port));
              if (getTarget().fromView().get() == null || getTarget().toView().get() == null) {
                getTarget().fromView().set(null);
                getTarget().toView().set(null);
              }
            }

            private View getTargetView(SNode port) {
              Mapper<? super SNode, ?> descendantMapper = getParent().getDescendantMapper(port);
              if (descendantMapper == null) {
                return null;
              }
              return (View) descendantMapper.getTarget();
            }
          }));
        }
      };
    }

    protected void synchronize() {
    }



    private PolyLineConnection createConnection() {
      PolyLineConnection connection = new PolyLineConnection();
      AbstractJetpadCell.configureView(connection.view(), ConnectorCellImpl_9iys9b_a.this, new _FunctionTypes._return_P0_E0<Boolean>() {
        public Boolean invoke() {
          return true;
        }
      });

      return connection;
    }
  }
}
