package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.openapi.PaletteToggleAction;
import jetbrains.jetpad.projectional.view.ViewTrait;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import org.jetbrains.mps.openapi.model.SNode;
import javax.swing.Icon;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.jetpad.projectional.view.ViewTraitBuilder;
import jetbrains.jetpad.projectional.view.ViewEvents;
import jetbrains.jetpad.projectional.view.ViewEventHandler;
import jetbrains.jetpad.event.MouseEvent;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class MyBlockCreationAction implements PaletteToggleAction {
  private ViewTrait myTrait;
  private DiagramCell myDiagramCell;
  private SNode myMetaBlock;
  private String myText;
  private Icon myIcon;
  public MyBlockCreationAction(DiagramCell diagramCell, final SNode block) {
    myDiagramCell = diagramCell;
    myMetaBlock = block;
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        myText = SPropertyOperations.getString(block, "name");
        myIcon = IconManager.getIconFor(myMetaBlock);
      }
    });
  }
  protected ViewTrait getTrait() {
    if (myTrait == null) {
      myTrait = new ViewTraitBuilder().on(ViewEvents.MOUSE_PRESSED, new ViewEventHandler<MouseEvent>() {
        public void handle(View view, final MouseEvent event) {
          if (view.viewAt(event.location()) != view) {
            return;
          }
          if (!(view.focused().get())) {
            view.container().focusedView().set(view);
          }
          ModelAccess.instance().runWriteActionInCommand(new Runnable() {
            public void run() {
              SNode newBlockInstance = SConceptOperations.createNewNode("jetbrains.mps.testHybridEditor.structure.BlockInstance", null);
              SLinkOperations.setTarget(newBlockInstance, "metaBlock", myMetaBlock, false);
              SPropertyOperations.set(newBlockInstance, "x", "" + (event.x()));
              SPropertyOperations.set(newBlockInstance, "y", "" + (event.y()));
              ListSequence.fromList(SLinkOperations.getTargets(((SNode) myDiagramCell.getSNode()), "newBlocks", true)).addElement(newBlockInstance);
            }
          });
          event.consume();
        }
      }).build();
    }
    return myTrait;
  }

  public void onClick() {
    myDiagramCell.setExternalTrait(getTrait());
  }
  public Icon getIcon() {
    return myIcon;
  }
  public String getText() {
    return myText;
  }
}
