package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import jetbrains.mps.nodeEditor.cellMenu.CompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.BasicCellContext;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPartExt;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.DiagramView;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.mapper.MapperFactory;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.nodeEditor.cells.jetpad.BlockCell;
import jetbrains.jetpad.projectional.diagram.view.Connection;
import jetbrains.mps.nodeEditor.cells.jetpad.ConnectorCell;
import jetbrains.jetpad.projectional.diagram.view.PolyLineConnection;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramDecoratorView;
import java.util.Set;
import java.util.HashSet;
import java.util.ListIterator;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.jetpad.projectional.diagram.view.ConnectionRoutingView;
import jetbrains.jetpad.projectional.diagram.layout.OrthogonalRouter;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class Diagram_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_tb7paq_a(editorContext, node);
  }

  private EditorCell createCollection_tb7paq_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_tb7paq_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createCollection_tb7paq_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_tb7paq_b0(editorContext, node));
    editorCell.addEditorCell(this.createDiagram_tb7paq_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_tb7paq_d0(editorContext, node));
    editorCell.addEditorCell(this.createDiagram_tb7paq_e0(editorContext, node));
    return editorCell;
  }

  private EditorCell createCollection_tb7paq_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_tb7paq_a0");
    editorCell.addEditorCell(this.createConstant_tb7paq_a0a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_tb7paq_b0a(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_tb7paq_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "diagram");
    editorCell.setCellId("Constant_tb7paq_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_tb7paq_b0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createConstant_tb7paq_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "version-1:");
    editorCell.setCellId("Constant_tb7paq_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createDiagram_tb7paq_c0(final EditorContext editorContext, final SNode node) {
    jetbrains.mps.openapi.editor.cells.EditorCell_Collection wrappingCollection = EditorCell_Collection.createHorizontal(editorContext, node);
    wrappingCollection.setSelectable(false);
    final DiagramCell editorCell = new Diagram_diagramGenerated_Editor.DiagramCellImpl_tb7paq_c0(editorContext, node);
    editorCell.setCellId("Diagram_tb7paq_c0");
    wrappingCollection.addEditorCell(editorCell);
    return wrappingCollection;
  }

  private class DiagramCellImpl_tb7paq_c0 extends DiagramCell {
    private DiagramCellImpl_tb7paq_c0(EditorContext editorContext, SNode node) {
      super(editorContext, node);
      setCommonSubstituteInfo(new CompositeSubstituteInfo(editorContext, new BasicCellContext(node), new SubstituteInfoPartExt[]{createNewDiagramNodeActions(getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.Block"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "blocks"), new _FunctionTypes._void_P3_E0<SNode, Integer, Integer>() {
        public void invoke(SNode node, Integer x, Integer y) {
          SNode a = SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.Block");
          SNodeFactoryOperations.addNewChild(a, "inputPorts", "jetbrains.mps.testHybridEditor.structure.InputPort");
          SNodeFactoryOperations.addNewChild(a, "outputPorts", "jetbrains.mps.testHybridEditor.structure.OutputPort");
          SPropertyOperations.set(a, "x", "" + (x));
          SPropertyOperations.set(a, "y", "" + (y));
        }
      }), createNewDiagramConnectorActions(getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.Connector"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "connectors"), new _FunctionTypes._return_P4_E0<Boolean, SNode, Object, SNode, Object>() {
        public Boolean invoke(SNode from, Object fromId, SNode to, Object toId) {
          return SNodeOperations.isInstanceOf(from, "jetbrains.mps.testHybridEditor.structure.OutputPort") && SNodeOperations.isInstanceOf(to, "jetbrains.mps.testHybridEditor.structure.InputPort");
        }
      }, new _FunctionTypes._void_P5_E0<SNode, SNode, Object, SNode, Object>() {
        public void invoke(SNode node, SNode from, Object fromId, SNode to, Object toId) {
          SNode connector = SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.Connector");
          SLinkOperations.setTarget(connector, "outputPort", SNodeOperations.cast(from, "jetbrains.mps.testHybridEditor.structure.OutputPort"), false);
          SLinkOperations.setTarget(connector, "inputPort", SNodeOperations.cast(to, "jetbrains.mps.testHybridEditor.structure.InputPort"), false);
        }
      })}));
      synchronize();
    }

    public Mapper<SNode, DiagramView> createMapper(SNode node) {
      return new Mapper<SNode, DiagramView>(node, createDiagramView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forObservableRole(this, myBlocks, getTarget().itemsView.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode node) {
              return ((BlockCell) getDirectChildCell(node)).createMapper();
            }
          }));
          configuration.add(Synchronizers.forObservableRole(this, myConnectors, getTarget().connections, new MapperFactory<SNode, Connection>() {
            public Mapper<? extends SNode, ? extends Connection> createMapper(SNode node) {
              return ((ConnectorCell) getDirectChildCell(node)).createMapper();
            }
          }));
          configuration.add(Synchronizers.forObservableRole(this, myConnectionSingleList, getTarget().connections, new MapperFactory<PolyLineConnection, Connection>() {
            public Mapper<? extends PolyLineConnection, ? extends Connection> createMapper(PolyLineConnection source) {
              return new Mapper<PolyLineConnection, Connection>(source, source) {};
            }
          }));

        }
      };
    }




    public Mapper<SNode, DiagramDecoratorView> createDecorationMapper(SNode node) {
      return new Mapper<SNode, DiagramDecoratorView>(getSNode(), new DiagramDecoratorView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forObservableRole(this, myBlocks, getTarget().itemsDecotatorView.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode node) {
              return ((BlockCell) getDirectChildCell(node)).createDecorationMapper();
            }
          }));
          configuration.add(Synchronizers.forObservableRole(this, myConnectors, getTarget().connectorsDecotatorView.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode node) {
              return ((ConnectorCell) getDirectChildCell(node)).createDecorationMapper();
            }
          }));
        }
      };
    }

    public void synchronize() {
      Set<SNode> existingBlocks = new HashSet<SNode>(myBlocks);
      ListIterator<SNode> blocksIterator = myBlocks.listIterator();
      Set<SNode> existingConnectors = new HashSet<SNode>(myConnectors);
      ListIterator<SNode> connectorsIterator = myConnectors.listIterator();
      for (SNode nextElement : ListSequence.fromList(SLinkOperations.getTargets(getSNode(), "blocks", true))) {
        if (existingBlocks.contains(nextElement)) {
          syncToNextNode(blocksIterator, existingBlocks, nextElement);
          getDirectChildCell(nextElement).synchronize();
          continue;
        } else if (existingConnectors.contains(nextElement)) {
          syncToNextNode(connectorsIterator, existingConnectors, nextElement);
          getDirectChildCell(nextElement).synchronize();
          continue;
        }

        EditorCell cell = getContext().createNodeCell(nextElement);
        if (cell instanceof BlockCell) {
          addEditorCell(cell);
          blocksIterator.add(nextElement);
          existingBlocks.add(nextElement);
        } else if (cell instanceof ConnectorCell) {
          addEditorCell(cell);
          connectorsIterator.add(nextElement);
          existingConnectors.add(nextElement);
        }
      }
      for (SNode nextElement : ListSequence.fromList(SLinkOperations.getTargets(getSNode(), "connectors", true))) {
        if (existingBlocks.contains(nextElement)) {
          syncToNextNode(blocksIterator, existingBlocks, nextElement);
          getDirectChildCell(nextElement).synchronize();
          continue;
        } else if (existingConnectors.contains(nextElement)) {
          syncToNextNode(connectorsIterator, existingConnectors, nextElement);
          getDirectChildCell(nextElement).synchronize();
          continue;
        }

        EditorCell cell = getContext().createNodeCell(nextElement);
        if (cell instanceof BlockCell) {
          addEditorCell(cell);
          blocksIterator.add(nextElement);
          existingBlocks.add(nextElement);
        } else if (cell instanceof ConnectorCell) {
          addEditorCell(cell);
          connectorsIterator.add(nextElement);
          existingConnectors.add(nextElement);
        }
      }
      purgeTailNodes(blocksIterator);
      purgeTailNodes(connectorsIterator);
    }

    private DiagramView createDiagramView() {
      ConnectionRoutingView diagramView = new ConnectionRoutingView(new OrthogonalRouter());
      return diagramView;
    }
  }

  private EditorCell createConstant_tb7paq_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "version-2:");
    editorCell.setCellId("Constant_tb7paq_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createDiagram_tb7paq_e0(final EditorContext editorContext, final SNode node) {
    jetbrains.mps.openapi.editor.cells.EditorCell_Collection wrappingCollection = EditorCell_Collection.createHorizontal(editorContext, node);
    wrappingCollection.setSelectable(false);
    final DiagramCell editorCell = new Diagram_diagramGenerated_Editor.DiagramCellImpl_tb7paq_e0(editorContext, node);
    editorCell.setCellId("Diagram_tb7paq_e0");
    wrappingCollection.addEditorCell(editorCell);
    return wrappingCollection;
  }

  private class DiagramCellImpl_tb7paq_e0 extends DiagramCell {
    private DiagramCellImpl_tb7paq_e0(EditorContext editorContext, SNode node) {
      super(editorContext, node);
      setCommonSubstituteInfo(new CompositeSubstituteInfo(editorContext, new BasicCellContext(node), new SubstituteInfoPartExt[]{createNewDiagramNodeActions(getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.BlockInstance"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "newBlocks"), new _FunctionTypes._void_P3_E0<SNode, Integer, Integer>() {
        public void invoke(SNode node, Integer x, Integer y) {
          SPropertyOperations.set(SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "name", "block");
          SPropertyOperations.set(SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "x", "" + (x));
          SPropertyOperations.set(SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "y", "" + (y));
        }
      }), createNewDiagramConnectorActions(getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.ConnectorInstance"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "newConnectors"), new _FunctionTypes._return_P4_E0<Boolean, SNode, Object, SNode, Object>() {
        public Boolean invoke(SNode from, Object fromId, SNode to, Object toId) {
          return SNodeOperations.isInstanceOf(from, "jetbrains.mps.testHybridEditor.structure.BlockInstance") && fromId instanceof SNode && SNodeOperations.isInstanceOf(to, "jetbrains.mps.testHybridEditor.structure.BlockInstance") && toId instanceof SNode && eq_tb7paq_a0a0a0a0d1a2a0a1a0m(SNodeOperations.getContainingLinkDeclaration(((SNode) toId)), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.MetaBlock", "inMetaPorts"));
        }
      }, new _FunctionTypes._void_P5_E0<SNode, SNode, Object, SNode, Object>() {
        public void invoke(SNode node, SNode from, Object fromId, SNode to, Object toId) {
          SNode connector = SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.ConnectorInstance");
          SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "source", true), "block", SNodeOperations.cast(from, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), false);
          final SNode port = ((SNode) fromId);
          SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "source", true), "metaPort", ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(from, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "metaBlock", false), "outMetaPorts", true)).findFirst(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return eq_tb7paq_a0a0a0a0a2a3a0a0e1a2a0a1a0m(it, port);
            }
          }), false);
          SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "target", true), "block", SNodeOperations.cast(to, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), false);
          SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "target", true), "metaPort", (SNode) toId, false);
        }
      })}));
      synchronize();
    }

    public Mapper<SNode, DiagramView> createMapper(SNode node) {
      return new Mapper<SNode, DiagramView>(node, createDiagramView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forObservableRole(this, myBlocks, getTarget().itemsView.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode node) {
              return ((BlockCell) getDirectChildCell(node)).createMapper();
            }
          }));
          configuration.add(Synchronizers.forObservableRole(this, myConnectors, getTarget().connections, new MapperFactory<SNode, Connection>() {
            public Mapper<? extends SNode, ? extends Connection> createMapper(SNode node) {
              return ((ConnectorCell) getDirectChildCell(node)).createMapper();
            }
          }));
          configuration.add(Synchronizers.forObservableRole(this, myConnectionSingleList, getTarget().connections, new MapperFactory<PolyLineConnection, Connection>() {
            public Mapper<? extends PolyLineConnection, ? extends Connection> createMapper(PolyLineConnection source) {
              return new Mapper<PolyLineConnection, Connection>(source, source) {};
            }
          }));

        }
      };
    }




    public Mapper<SNode, DiagramDecoratorView> createDecorationMapper(SNode node) {
      return new Mapper<SNode, DiagramDecoratorView>(getSNode(), new DiagramDecoratorView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forObservableRole(this, myBlocks, getTarget().itemsDecotatorView.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode node) {
              return ((BlockCell) getDirectChildCell(node)).createDecorationMapper();
            }
          }));
          configuration.add(Synchronizers.forObservableRole(this, myConnectors, getTarget().connectorsDecotatorView.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode node) {
              return ((ConnectorCell) getDirectChildCell(node)).createDecorationMapper();
            }
          }));
        }
      };
    }

    public void synchronize() {
      Set<SNode> existingBlocks = new HashSet<SNode>(myBlocks);
      ListIterator<SNode> blocksIterator = myBlocks.listIterator();
      Set<SNode> existingConnectors = new HashSet<SNode>(myConnectors);
      ListIterator<SNode> connectorsIterator = myConnectors.listIterator();
      for (SNode nextElement : ListSequence.fromList(SLinkOperations.getTargets(getSNode(), "newBlocks", true))) {
        if (existingBlocks.contains(nextElement)) {
          syncToNextNode(blocksIterator, existingBlocks, nextElement);
          getDirectChildCell(nextElement).synchronize();
          continue;
        } else if (existingConnectors.contains(nextElement)) {
          syncToNextNode(connectorsIterator, existingConnectors, nextElement);
          getDirectChildCell(nextElement).synchronize();
          continue;
        }

        EditorCell cell = getContext().createNodeCell(nextElement);
        if (cell instanceof BlockCell) {
          addEditorCell(cell);
          blocksIterator.add(nextElement);
          existingBlocks.add(nextElement);
        } else if (cell instanceof ConnectorCell) {
          addEditorCell(cell);
          connectorsIterator.add(nextElement);
          existingConnectors.add(nextElement);
        }
      }
      for (SNode nextElement : ListSequence.fromList(SLinkOperations.getTargets(getSNode(), "newConnectors", true))) {
        if (existingBlocks.contains(nextElement)) {
          syncToNextNode(blocksIterator, existingBlocks, nextElement);
          getDirectChildCell(nextElement).synchronize();
          continue;
        } else if (existingConnectors.contains(nextElement)) {
          syncToNextNode(connectorsIterator, existingConnectors, nextElement);
          getDirectChildCell(nextElement).synchronize();
          continue;
        }

        EditorCell cell = getContext().createNodeCell(nextElement);
        if (cell instanceof BlockCell) {
          addEditorCell(cell);
          blocksIterator.add(nextElement);
          existingBlocks.add(nextElement);
        } else if (cell instanceof ConnectorCell) {
          addEditorCell(cell);
          connectorsIterator.add(nextElement);
          existingConnectors.add(nextElement);
        }
      }
      purgeTailNodes(blocksIterator);
      purgeTailNodes(connectorsIterator);
    }

    private DiagramView createDiagramView() {
      ConnectionRoutingView diagramView = new ConnectionRoutingView(new OrthogonalRouter());
      return diagramView;
    }
  }

  private static boolean eq_tb7paq_a0a0a0a0d1a2a0a1a0m(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_tb7paq_a0a0a0a0a2a3a0a0e1a2a0a1a0m(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
