package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.PortCell;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.view.RectView;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.mps.nodeEditor.cells.jetpad.JetpadUtils;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.jetpad.model.property.WritableProperty;
import jetbrains.jetpad.geometry.Rectangle;
import jetbrains.mps.nodeEditor.cells.jetpad.AbstractJetpadCell;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.jetpad.projectional.view.View;

public class InputPort_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramPort_cfffa6_a(editorContext, node);
  }

  private EditorCell createDiagramPort_cfffa6_a(final EditorContext editorContext, final SNode node) {
    final EditorCell editorCell = new InputPort_diagramGenerated_Editor.PortCellImpl_cfffa6_a(editorContext, node);
    editorCell.setCellId("DiagramPort_cfffa6_a");
    editorCell.setBig(true);
    return editorCell;
  }

  private class PortCellImpl_cfffa6_a extends PortCell {
    private PortCellImpl_cfffa6_a(EditorContext editorContext, SNode node) {
      super(editorContext, node);
      synchronize();
    }

    public Mapper<SNode, RectView> createMapper() {
      return new Mapper<SNode, RectView>(getSNode(), createPortView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          getTarget().background().set(Color.LIGHT_GRAY);
          getTarget().dimension().set(new Vector(10, 10));
          getTarget().prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
          configuration.add(Synchronizers.forProperty(getTarget().focused(), new Runnable() {
            public void run() {
              if (getTarget().focused().get()) {
                SelectionUtil.selectCell(getContext(), getSNode(), getCellId());
              }
            }
          }));
          configuration.add(Synchronizers.forProperty(getTarget().bounds(), new WritableProperty<Rectangle>() {
            public void set(Rectangle rect) {
              myXValueProperty = rect.origin.x;
              myYValueProperty = rect.origin.y;
              myWidthValueProperty = rect.dimension.x;
              myHeightValueProperty = rect.dimension.y;
            }
          }));

        }
      };
    }

    public void synchronize() {
    }

    private RectView createPortView() {
      RectView portView = new RectView();
      AbstractJetpadCell.configureView(portView, PortCellImpl_cfffa6_a.this, new _FunctionTypes._return_P0_E0<Boolean>() {
        public Boolean invoke() {
          return true;
        }
      });
      portView.prop(JetpadUtils.SOURCE).set(getSNode());

      return portView;
    }



    public Mapper<SNode, View> createDecorationMapper() {
      return null;
    }
  }
}
