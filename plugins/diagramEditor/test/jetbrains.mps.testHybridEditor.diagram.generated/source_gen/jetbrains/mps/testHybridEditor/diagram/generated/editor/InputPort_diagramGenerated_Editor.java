package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.jetpad.projectional.view.RectView;
import jetbrains.mps.nodeEditor.cells.jetpad.GenericViewCell;
import jetbrains.jetpad.projectional.view.ViewTraitBuilder;
import jetbrains.jetpad.projectional.view.ViewEvents;
import jetbrains.jetpad.projectional.view.ViewEventHandler;
import jetbrains.jetpad.event.MouseEvent;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.geometry.Vector;

public class InputPort_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramNode_cfffa6_a(editorContext, node);
  }

  private EditorCell createDiagramNode_cfffa6_a(final EditorContext editorContext, final SNode node) {
    final RectView view = new RectView();
    GenericViewCell editorCell = GenericViewCell.createViewCell(editorContext, node, view);
    view.background().set(InputPort_diagramGenerated_Editor._StyleParameter_QueryFunction_cfffa6_a0a((editorCell == null ? null : editorCell.getContext()), (editorCell == null ? null : editorCell.getSNode())));
    view.dimension().set(InputPort_diagramGenerated_Editor._StyleParameter_QueryFunction_cfffa6_a1a((editorCell == null ? null : editorCell.getContext()), (editorCell == null ? null : editorCell.getSNode())));
    view.addTrait(new ViewTraitBuilder().on(ViewEvents.MOUSE_RELEASED, new ViewEventHandler<MouseEvent>() {
      @Override
      public void handle(View v, MouseEvent e) {
        ModelAccess.instance().runCommandInEDT(new Runnable() {
          public void run() {
          }
        }, editorContext.getOperationContext().getProject());
      }
    }).build());

    view.visible().set(true);
    editorCell.setCellId("DiagramNode_cfffa6_a");
    editorCell.setBig(true);
    return editorCell;

  }

  private static Color _StyleParameter_QueryFunction_cfffa6_a0a(EditorContext editorContext, SNode node) {
    return Color.LIGHT_GRAY;
  }

  private static Vector _StyleParameter_QueryFunction_cfffa6_a1a(EditorContext editorContext, SNode node) {
    return new Vector(10, 10);
  }
}
