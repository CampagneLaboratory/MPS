package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import jetbrains.mps.nodeEditor.cellMenu.CompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.BasicCellContext;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPartExt;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.DiagramView;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.mapper.MapperFactory;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.nodeEditor.cells.jetpad.BlockCell;
import jetbrains.jetpad.projectional.diagram.view.Connection;
import jetbrains.mps.nodeEditor.cells.jetpad.ConnectorCell;
import jetbrains.jetpad.model.property.WritableProperty;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.views.DiagramDecoratorView;
import java.util.Set;
import java.util.HashSet;
import java.util.ListIterator;
import jetbrains.jetpad.projectional.diagram.view.ConnectionRoutingView;
import jetbrains.jetpad.projectional.diagram.layout.OrthogonalRouter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.DiagramPalette;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.impl.PaletteElementsCreationActionGroup;
import javax.swing.Icon;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.openapi.PaletteSeparator;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.impl.PaletteConnectorCreationActionGroup;

public class Diagram_diagram_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagram"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_32adaa_a(editorContext, node);
  }

  private EditorCell createCollection_32adaa_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCanBeSynchronized(true);
    editorCell.setCellId("Collection_32adaa_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createCollection_32adaa_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_32adaa_b0(editorContext, node));
    editorCell.addEditorCell(this.createDiagram_32adaa_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_32adaa_d0(editorContext, node));
    editorCell.addEditorCell(this.createDiagram_32adaa_e0(editorContext, node));
    return editorCell;
  }

  private EditorCell createCollection_32adaa_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_32adaa_a0");
    editorCell.addEditorCell(this.createConstant_32adaa_a0a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_32adaa_b0a(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_32adaa_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "diagram");
    editorCell.setCellId("Constant_32adaa_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_32adaa_b0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createConstant_32adaa_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "version-1:");
    editorCell.setCellId("Constant_32adaa_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createDiagram_32adaa_c0(EditorContext editorContext, SNode node) {
    DiagramCell editorCell = new Diagram_diagram_Editor.DiagramCellImpl_32adaa_c0(editorContext, node);
    editorCell.setCellId("Diagram_32adaa_c0");
    return editorCell;
  }

  private class DiagramCellImpl_32adaa_c0 extends DiagramCell {
    private DiagramCellImpl_32adaa_c0(EditorContext editorContext, SNode node) {
      super(editorContext, node);
      setSubstituteInfo(new CompositeSubstituteInfo(editorContext, new BasicCellContext(node), new SubstituteInfoPartExt[]{createNewDiagramNodeActions(getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.Block"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "blocks"), new _FunctionTypes._void_P3_E0<SNode, Integer, Integer>() {
        public void invoke(SNode node, Integer x, Integer y) {
          SNodeFactoryOperations.addNewChild(node, "inputPorts", "jetbrains.mps.testHybridEditor.structure.InputPort");
          SNodeFactoryOperations.addNewChild(node, "outputPorts", "jetbrains.mps.testHybridEditor.structure.OutputPort");
          SPropertyOperations.set(node, "x", "" + (x));
          SPropertyOperations.set(node, "y", "" + (y));
        }
      }), createNewDiagramConnectorActions(getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.Connector"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "connectors"), new _FunctionTypes._return_P4_E0<Boolean, SNode, Object, SNode, Object>() {
        public Boolean invoke(SNode from, Object fromId, SNode to, Object toId) {
          return SNodeOperations.isInstanceOf(from, "jetbrains.mps.testHybridEditor.structure.OutputPort") && SNodeOperations.isInstanceOf(to, "jetbrains.mps.testHybridEditor.structure.InputPort");
        }
      }, new _FunctionTypes._void_P5_E0<SNode, SNode, Object, SNode, Object>() {
        public void invoke(SNode node, SNode from, Object fromId, SNode to, Object toId) {
          SLinkOperations.setTarget(node, "outputPort", SNodeOperations.cast(from, "jetbrains.mps.testHybridEditor.structure.OutputPort"), false);
          SLinkOperations.setTarget(node, "inputPort", SNodeOperations.cast(to, "jetbrains.mps.testHybridEditor.structure.InputPort"), false);
        }
      })}));
      synchronize();
    }



    protected SubstituteInfoPartExt[] createPaletteBlockSubstituteInfoPartExts() {
      return new SubstituteInfoPartExt[]{createNewDiagramNodeActions(getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.Block"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "blocks"), new _FunctionTypes._void_P3_E0<SNode, Integer, Integer>() {
        public void invoke(SNode node, Integer x, Integer y) {
          SNodeFactoryOperations.addNewChild(node, "inputPorts", "jetbrains.mps.testHybridEditor.structure.InputPort");
          SNodeFactoryOperations.addNewChild(node, "outputPorts", "jetbrains.mps.testHybridEditor.structure.OutputPort");
          SPropertyOperations.set(node, "x", "" + (x));
          SPropertyOperations.set(node, "y", "" + (y));
        }
      })};
    }

    protected SubstituteInfoPartExt[] createPaletteConnectorSubstituteInfoPartExts() {
      return new SubstituteInfoPartExt[]{createNewDiagramConnectorActions(getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.Connector"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "connectors"), new _FunctionTypes._return_P4_E0<Boolean, SNode, Object, SNode, Object>() {
        public Boolean invoke(SNode from, Object fromId, SNode to, Object toId) {
          return SNodeOperations.isInstanceOf(from, "jetbrains.mps.testHybridEditor.structure.OutputPort") && SNodeOperations.isInstanceOf(to, "jetbrains.mps.testHybridEditor.structure.InputPort");
        }
      }, new _FunctionTypes._void_P5_E0<SNode, SNode, Object, SNode, Object>() {
        public void invoke(SNode node, SNode from, Object fromId, SNode to, Object toId) {
          SLinkOperations.setTarget(node, "outputPort", SNodeOperations.cast(from, "jetbrains.mps.testHybridEditor.structure.OutputPort"), false);
          SLinkOperations.setTarget(node, "inputPort", SNodeOperations.cast(to, "jetbrains.mps.testHybridEditor.structure.InputPort"), false);
        }
      })};
    }

    public Mapper<SNode, DiagramView> createMapper(SNode node) {
      return new Mapper<SNode, DiagramView>(node, createDiagramView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forObservableRole(this, myBlocks, getTarget().itemsView.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode node) {
              return ((BlockCell) getDirectChildCell(node)).createMapper();
            }
          }));
          configuration.add(Synchronizers.forObservableRole(this, myConnectors, getTarget().connections, new MapperFactory<SNode, Connection>() {
            public Mapper<? extends SNode, ? extends Connection> createMapper(SNode node) {
              return ((ConnectorCell) getDirectChildCell(node)).createMapper();
            }
          }));
          configuration.add(Synchronizers.forProperty(myIsShowingDragFeedBack, new WritableProperty<Boolean>() {
            public void set(Boolean showDragFeedBack) {
              if (showDragFeedBack) {
                getTarget().connections.add(myDragConnection);
              } else {
                getTarget().connections.remove(myDragConnection);
              }
            }
          }));

        }
      };
    }

    public Mapper<SNode, DiagramDecoratorView> createDecorationMapper(SNode node) {
      return new Mapper<SNode, DiagramDecoratorView>(getSNode(), new DiagramDecoratorView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forObservableRole(this, myBlocks, getTarget().itemsDecotatorView.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode node) {
              return ((BlockCell) getDirectChildCell(node)).createDecorationMapper();
            }
          }));
          configuration.add(Synchronizers.forObservableRole(this, myConnectors, getTarget().connectorsDecotatorView.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode node) {
              return ((ConnectorCell) getDirectChildCell(node)).createDecorationMapper();
            }
          }));
        }
      };
    }

    public void synchronize() {
      Set<SNode> existingBlocks = new HashSet<SNode>(myBlocks);
      ListIterator<SNode> blocksIterator = myBlocks.listIterator();
      Set<SNode> existingConnectors = new HashSet<SNode>(myConnectors);
      ListIterator<SNode> connectorsIterator = myConnectors.listIterator();
      syncDiagramElements(SLinkOperations.getTargets(getSNode(), "blocks", true), blocksIterator, existingBlocks, connectorsIterator, existingConnectors);
      syncDiagramElements(SLinkOperations.getTargets(getSNode(), "connectors", true), blocksIterator, existingBlocks, connectorsIterator, existingConnectors);
      purgeTailNodes(blocksIterator);
      purgeTailNodes(connectorsIterator);
    }

    private DiagramView createDiagramView() {
      ConnectionRoutingView diagramView = new ConnectionRoutingView(new OrthogonalRouter());
      return diagramView;
    }
  }

  private EditorCell createConstant_32adaa_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "version-2:");
    editorCell.setCellId("Constant_32adaa_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createDiagram_32adaa_e0(EditorContext editorContext, SNode node) {
    DiagramCell editorCell = new Diagram_diagram_Editor.DiagramCellImpl_32adaa_e0(editorContext, node);
    editorCell.setCellId("Diagram_32adaa_e0");
    return editorCell;
  }

  private class DiagramCellImpl_32adaa_e0 extends DiagramCell {
    private DiagramCellImpl_32adaa_e0(EditorContext editorContext, SNode node) {
      super(editorContext, node);
      setSubstituteInfo(new CompositeSubstituteInfo(editorContext, new BasicCellContext(node), new SubstituteInfoPartExt[]{createNewDiagramNodeActions(getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.BlockInstance"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "newBlocks"), new _FunctionTypes._void_P3_E0<SNode, Integer, Integer>() {
        public void invoke(SNode node, Integer x, Integer y) {
          SPropertyOperations.set(SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "name", "block");
          SPropertyOperations.set(SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "x", "" + (x));
          SPropertyOperations.set(SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "y", "" + (y));
        }
      }), createNewDiagramConnectorActions(getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.ConnectorInstance"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "newConnectors"), new _FunctionTypes._return_P4_E0<Boolean, SNode, Object, SNode, Object>() {
        public Boolean invoke(SNode from, Object fromId, SNode to, Object toId) {
          return SNodeOperations.isInstanceOf(from, "jetbrains.mps.testHybridEditor.structure.BlockInstance") && fromId instanceof SNode && SNodeOperations.isInstanceOf(to, "jetbrains.mps.testHybridEditor.structure.BlockInstance") && toId instanceof SNode && eq_32adaa_a0a0a0a0d1a2a0a1a0m(SNodeOperations.getContainingLinkDeclaration(((SNode) toId)), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.MetaBlock", "inMetaPorts"));
        }
      }, new _FunctionTypes._void_P5_E0<SNode, SNode, Object, SNode, Object>() {
        public void invoke(SNode node, SNode from, Object fromId, SNode to, Object toId) {
          SNode connector = SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.ConnectorInstance");
          SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "source", true), "block", SNodeOperations.cast(from, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), false);
          final SNode port = ((SNode) fromId);
          SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "source", true), "metaPort", ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(from, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "metaBlock", false), "outMetaPorts", true)).findFirst(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return eq_32adaa_a0a0a0a0a2a3a0a0e1a2a0a1a0m(it, port);
            }
          }), false);
          SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "target", true), "block", SNodeOperations.cast(to, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), false);
          SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "target", true), "metaPort", (SNode) toId, false);
        }
      })}));
      setPalette(new Diagram_diagramGenerated_Editor.DiagramCellImpl_tb7paq_e0.DiagramPaletteImpl_tb7paq_a4a(this));
      synchronize();
    }



    protected SubstituteInfoPartExt[] createPaletteBlockSubstituteInfoPartExts() {
      return new SubstituteInfoPartExt[]{createNewDiagramNodeActions(getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.BlockInstance"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "newBlocks"), new _FunctionTypes._void_P3_E0<SNode, Integer, Integer>() {
        public void invoke(SNode node, Integer x, Integer y) {
          SPropertyOperations.set(SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "name", "block");
          SPropertyOperations.set(SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "x", "" + (x));
          SPropertyOperations.set(SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "y", "" + (y));
        }
      })};
    }

    protected SubstituteInfoPartExt[] createPaletteConnectorSubstituteInfoPartExts() {
      return new SubstituteInfoPartExt[]{createNewDiagramConnectorActions(getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.ConnectorInstance"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "newConnectors"), new _FunctionTypes._return_P4_E0<Boolean, SNode, Object, SNode, Object>() {
        public Boolean invoke(SNode from, Object fromId, SNode to, Object toId) {
          return SNodeOperations.isInstanceOf(from, "jetbrains.mps.testHybridEditor.structure.BlockInstance") && fromId instanceof SNode && SNodeOperations.isInstanceOf(to, "jetbrains.mps.testHybridEditor.structure.BlockInstance") && toId instanceof SNode && eq_32adaa_a0a0a0a0d0a0a0d21(SNodeOperations.getContainingLinkDeclaration(((SNode) toId)), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.MetaBlock", "inMetaPorts"));
        }
      }, new _FunctionTypes._void_P5_E0<SNode, SNode, Object, SNode, Object>() {
        public void invoke(SNode node, SNode from, Object fromId, SNode to, Object toId) {
          SNode connector = SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.ConnectorInstance");
          SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "source", true), "block", SNodeOperations.cast(from, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), false);
          final SNode port = ((SNode) fromId);
          SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "source", true), "metaPort", ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(from, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "metaBlock", false), "outMetaPorts", true)).findFirst(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return eq_32adaa_a0a0a0a0a2a3a0a0e0a0a0d21(it, port);
            }
          }), false);
          SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "target", true), "block", SNodeOperations.cast(to, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), false);
          SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "target", true), "metaPort", (SNode) toId, false);
        }
      })};
    }

    public Mapper<SNode, DiagramView> createMapper(SNode node) {
      return new Mapper<SNode, DiagramView>(node, createDiagramView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forObservableRole(this, myBlocks, getTarget().itemsView.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode node) {
              return ((BlockCell) getDirectChildCell(node)).createMapper();
            }
          }));
          configuration.add(Synchronizers.forObservableRole(this, myConnectors, getTarget().connections, new MapperFactory<SNode, Connection>() {
            public Mapper<? extends SNode, ? extends Connection> createMapper(SNode node) {
              return ((ConnectorCell) getDirectChildCell(node)).createMapper();
            }
          }));
          configuration.add(Synchronizers.forProperty(myIsShowingDragFeedBack, new WritableProperty<Boolean>() {
            public void set(Boolean showDragFeedBack) {
              if (showDragFeedBack) {
                getTarget().connections.add(myDragConnection);
              } else {
                getTarget().connections.remove(myDragConnection);
              }
            }
          }));

        }
      };
    }

    public Mapper<SNode, DiagramDecoratorView> createDecorationMapper(SNode node) {
      return new Mapper<SNode, DiagramDecoratorView>(getSNode(), new DiagramDecoratorView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forObservableRole(this, myBlocks, getTarget().itemsDecotatorView.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode node) {
              return ((BlockCell) getDirectChildCell(node)).createDecorationMapper();
            }
          }));
          configuration.add(Synchronizers.forObservableRole(this, myConnectors, getTarget().connectorsDecotatorView.children(), new MapperFactory<SNode, View>() {
            public Mapper<? extends SNode, ? extends View> createMapper(SNode node) {
              return ((ConnectorCell) getDirectChildCell(node)).createDecorationMapper();
            }
          }));
        }
      };
    }

    public void synchronize() {
      Set<SNode> existingBlocks = new HashSet<SNode>(myBlocks);
      ListIterator<SNode> blocksIterator = myBlocks.listIterator();
      Set<SNode> existingConnectors = new HashSet<SNode>(myConnectors);
      ListIterator<SNode> connectorsIterator = myConnectors.listIterator();
      syncDiagramElements(SLinkOperations.getTargets(getSNode(), "newBlocks", true), blocksIterator, existingBlocks, connectorsIterator, existingConnectors);
      syncDiagramElements(SLinkOperations.getTargets(getSNode(), "newConnectors", true), blocksIterator, existingBlocks, connectorsIterator, existingConnectors);
      purgeTailNodes(blocksIterator);
      purgeTailNodes(connectorsIterator);
    }

    private DiagramView createDiagramView() {
      ConnectionRoutingView diagramView = new ConnectionRoutingView(new OrthogonalRouter());
      return diagramView;
    }

    private class DiagramPaletteImpl_tb7paq_a4a extends DiagramPalette {
      private DiagramPaletteImpl_tb7paq_a4a(DiagramCell diagramCell) {
        super(diagramCell);
        addPaletteElement(new PaletteElementsCreationActionGroup(diagramCell, getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.BlockInstance"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "newBlocks"), new _FunctionTypes._void_P3_E0<SNode, Integer, Integer>() {
          public void invoke(SNode node, Integer x, Integer y) {
            SPropertyOperations.set(SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "name", "block");
            SPropertyOperations.set(SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "x", "" + (x));
            SPropertyOperations.set(SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "y", "" + (y));
          }
        }) {
          @Override
          public Icon getIcon() {
            return IconManager.loadIcon("/Users/simon/work/mps/plugins/diagramEditor/test/jetbrains.mps.testHybridEditor/icons/block.png", false);
          }
        });
        addPaletteElement(new PaletteSeparator() {
          public Icon getIcon() {
            return null;
          }

          public String getText() {
            return "";
          }
        });
        addPaletteElement(new PaletteConnectorCreationActionGroup(diagramCell, getSNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.ConnectorInstance"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "newConnectors"), new _FunctionTypes._return_P4_E0<Boolean, SNode, Object, SNode, Object>() {
          public Boolean invoke(SNode from, Object fromId, SNode to, Object toId) {
            return SNodeOperations.isInstanceOf(from, "jetbrains.mps.testHybridEditor.structure.BlockInstance") && fromId instanceof SNode && SNodeOperations.isInstanceOf(to, "jetbrains.mps.testHybridEditor.structure.BlockInstance") && toId instanceof SNode && eq_tb7paq_a0a0a0a0e0a0a3a0i21(SNodeOperations.getContainingLinkDeclaration(((SNode) toId)), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.MetaBlock", "inMetaPorts"));
          }
        }, new _FunctionTypes._void_P5_E0<SNode, SNode, Object, SNode, Object>() {
          public void invoke(SNode node, SNode from, Object fromId, SNode to, Object toId) {
            SNode connector = SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.ConnectorInstance");
            SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "source", true), "block", SNodeOperations.cast(from, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), false);
            final SNode port = ((SNode) fromId);
            SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "source", true), "metaPort", ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(from, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), "metaBlock", false), "outMetaPorts", true)).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return eq_tb7paq_a0a0a0a0a2a3a0a0f0a0a3a0i21(it, port);
              }
            }), false);
            SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "target", true), "block", SNodeOperations.cast(to, "jetbrains.mps.testHybridEditor.structure.BlockInstance"), false);
            SLinkOperations.setTarget(SLinkOperations.getTarget(connector, "target", true), "metaPort", (SNode) toId, false);
          }
        }) {});
        createPalette();
      }
    }
  }

  private static boolean eq_32adaa_a0a0a0a0d1a2a0a1a0m(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_32adaa_a0a0a0a0a2a3a0a0e1a2a0a1a0m(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_32adaa_a0a0a0a0d0a0a0d21(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_32adaa_a0a0a0a0a2a3a0a0e0a0a0d21(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_tb7paq_a0a0a0a0e0a0a3a0i21(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_tb7paq_a0a0a0a0a2a3a0a0f0a0a3a0i21(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
