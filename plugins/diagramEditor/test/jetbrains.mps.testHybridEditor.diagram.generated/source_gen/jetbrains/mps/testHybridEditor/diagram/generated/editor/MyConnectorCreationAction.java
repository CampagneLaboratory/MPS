package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.lang.editor.diagram.runtime.jetpad.palette.openapi.PaletteToggleAction;
import jetbrains.jetpad.projectional.view.ViewTrait;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import javax.swing.Icon;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.jetpad.projectional.view.ViewTraitBuilder;
import jetbrains.jetpad.projectional.view.ViewEvents;
import jetbrains.jetpad.projectional.view.ViewEventHandler;
import jetbrains.jetpad.event.MouseEvent;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.nodeEditor.cells.jetpad.JetpadUtils;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class MyConnectorCreationAction implements PaletteToggleAction {
  private ViewTrait myTrait;
  private DiagramCell myDiagramCell;
  private String myText;
  private Icon myIcon;
  public MyConnectorCreationAction(DiagramCell diagramCell) {
    myDiagramCell = diagramCell;
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        myText = "Connector";
        myIcon = IconManager.getIconForConceptFQName("jetbrains.mps.testHybridEditor.structure.ConnectorInstance");
      }
    });
  }
  protected ViewTrait getTrait() {
    if (myTrait == null) {
      myTrait = new ViewTraitBuilder().on(ViewEvents.MOUSE_DRAGGED, new ViewEventHandler<MouseEvent>() {
        @Override
        public void handle(View view, MouseEvent event) {
          if (!(myDiagramCell.hasConnectionDragFeedback())) {
            View sourceView = view.viewAt(event.location());
            if (sourceView == null || !(check_lbjacb_a0a1a0a0a0b0a0a0a0a0f(sourceView.prop(JetpadUtils.CONNECTION_SOURCE).get()))) {
              return;
            }
            myDiagramCell.showConnectionDragFeedback(sourceView);
          }
          myDiagramCell.updateConnectionDragFeedback(event.location());
        }
      }).on(ViewEvents.MOUSE_RELEASED, new ViewEventHandler<MouseEvent>() {
        @Override
        public void handle(View view, MouseEvent event) {
          if (!(myDiagramCell.hasConnectionDragFeedback())) {
            return;
          }
          myDiagramCell.hideConnectionDragFeedback();
          final DiagramCell.ConnectionInfo connectionInfo = myDiagramCell.getConnectionInfo();
          final Wrappers._boolean result = new Wrappers._boolean(false);
          ModelAccess.instance().runReadAction(new Runnable() {
            public void run() {
              if (connectionInfo.isValid() && SNodeOperations.isInstanceOf(connectionInfo.getFromNode(), MetaAdapterFactory.getConcept(new UUID(-7982035075869357830l, -5979686021354407916l), 2353136177974080669l, "jetbrains.mps.testHybridEditor.structure.BlockInstance")) && connectionInfo.getFromId() instanceof SNode && SNodeOperations.isInstanceOf(connectionInfo.getToNode(), MetaAdapterFactory.getConcept(new UUID(-7982035075869357830l, -5979686021354407916l), 2353136177974080669l, "jetbrains.mps.testHybridEditor.structure.BlockInstance")) && connectionInfo.getToId() instanceof SNode && eq_lbjacb_a0a0a0a0a0a4a0a0b0a0a0a0a5(SNodeOperations.getContainingLinkDeclaration(((SNode) connectionInfo.getToId())), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.MetaBlock", "inMetaPorts"))) {
                result.value = true;
              }
            }
          });
          if (!(result.value)) {
            return;
          }
          ModelAccess.instance().runWriteActionInCommand(new Runnable() {
            public void run() {
              SNode connectorInstance = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-7982035075869357830l, -5979686021354407916l), 2353136177974088982l, "jetbrains.mps.testHybridEditor.structure.ConnectorInstance"));
              SLinkOperations.setTarget(connectorInstance, MetaAdapterFactory.getContainmentLink(new UUID(-7982035075869357830l, -5979686021354407916l), 2353136177974088982l, 5288989961863964096l, "source"), SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-7982035075869357830l, -5979686021354407916l), 5288989961863963745l, "jetbrains.mps.testHybridEditor.structure.ConnectorEndInstance")));
              SLinkOperations.setTarget(connectorInstance, MetaAdapterFactory.getContainmentLink(new UUID(-7982035075869357830l, -5979686021354407916l), 2353136177974088982l, 5288989961863964102l, "target"), SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-7982035075869357830l, -5979686021354407916l), 5288989961863963745l, "jetbrains.mps.testHybridEditor.structure.ConnectorEndInstance")));
              SLinkOperations.setTarget(SLinkOperations.getTarget(connectorInstance, MetaAdapterFactory.getContainmentLink(new UUID(-7982035075869357830l, -5979686021354407916l), 2353136177974088982l, 5288989961863964096l, "source")), MetaAdapterFactory.getReferenceLink(new UUID(-7982035075869357830l, -5979686021354407916l), 5288989961863963745l, 5288989961863964092l, "block"), SNodeOperations.cast(connectionInfo.getFromNode(), MetaAdapterFactory.getConcept(new UUID(-7982035075869357830l, -5979686021354407916l), 2353136177974080669l, "jetbrains.mps.testHybridEditor.structure.BlockInstance")));
              SLinkOperations.setTarget(SLinkOperations.getTarget(connectorInstance, MetaAdapterFactory.getContainmentLink(new UUID(-7982035075869357830l, -5979686021354407916l), 2353136177974088982l, 5288989961863964096l, "source")), MetaAdapterFactory.getReferenceLink(new UUID(-7982035075869357830l, -5979686021354407916l), 5288989961863963745l, 5288989961863964093l, "metaPort"), ((SNode) connectionInfo.getFromId()));
              SLinkOperations.setTarget(SLinkOperations.getTarget(connectorInstance, MetaAdapterFactory.getContainmentLink(new UUID(-7982035075869357830l, -5979686021354407916l), 2353136177974088982l, 5288989961863964102l, "target")), MetaAdapterFactory.getReferenceLink(new UUID(-7982035075869357830l, -5979686021354407916l), 5288989961863963745l, 5288989961863964092l, "block"), SNodeOperations.cast(connectionInfo.getToNode(), MetaAdapterFactory.getConcept(new UUID(-7982035075869357830l, -5979686021354407916l), 2353136177974080669l, "jetbrains.mps.testHybridEditor.structure.BlockInstance")));
              SLinkOperations.setTarget(SLinkOperations.getTarget(connectorInstance, MetaAdapterFactory.getContainmentLink(new UUID(-7982035075869357830l, -5979686021354407916l), 2353136177974088982l, 5288989961863964102l, "target")), MetaAdapterFactory.getReferenceLink(new UUID(-7982035075869357830l, -5979686021354407916l), 5288989961863963745l, 5288989961863964093l, "metaPort"), ((SNode) connectionInfo.getToId()));
              ListSequence.fromList(SLinkOperations.getChildren(((SNode) myDiagramCell.getSNode()), MetaAdapterFactory.getContainmentLink(new UUID(-7982035075869357830l, -5979686021354407916l), 725186580883451585l, 2353136177974093280l, "newConnectors"))).addElement(connectorInstance);
            }
          });
          event.consume();

        }
      }).build();
    }
    return myTrait;
  }


  public void onClick() {
    myDiagramCell.setExternalTrait(getTrait());
  }
  public Icon getIcon() {
    return myIcon;
  }
  public String getText() {
    return myText;
  }
  private static boolean check_lbjacb_a0a1a0a0a0b0a0a0a0a0f(Boolean checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.booleanValue();
    }
    return false;
  }
  private static boolean eq_lbjacb_a0a0a0a0a0a4a0a0b0a0a0a0a5(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
