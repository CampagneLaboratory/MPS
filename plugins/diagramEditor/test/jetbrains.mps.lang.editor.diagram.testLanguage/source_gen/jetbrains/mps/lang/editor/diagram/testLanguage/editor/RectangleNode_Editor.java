package jetbrains.mps.lang.editor.diagram.testLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.BlockCell;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.DiagramNodeView;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.mapper.MapperFactory;
import jetbrains.mps.lang.editor.figures.sandbox.MPSRectView;
import jetbrains.jetpad.model.property.WritableProperty;
import jetbrains.jetpad.geometry.Rectangle;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.views.NodeDecoratorView;

public class RectangleNode_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramNode_t2nwzx_a(editorContext, node);
  }

  private EditorCell createDiagramNode_t2nwzx_a(final EditorContext editorContext, final SNode node) {
    BlockCell editorCell = new RectangleNode_Editor.BlockCellImpl_t2nwzx_a(editorContext, node);
    editorCell.setCellId("DiagramNode_t2nwzx_a");
    editorCell.setBig(true);
    return editorCell;
  }

  private class BlockCellImpl_t2nwzx_a extends BlockCell {
    private BlockCellImpl_t2nwzx_a(EditorContext editorContext, final SNode node) {
      super(editorContext, node);
      synchronize();
    }

    public void synchronize() {
      super.synchronizeViewWithModel();
    }

    public Mapper<SNode, DiagramNodeView> createMapper() {
      return new Mapper<SNode, DiagramNodeView>(getSNode(), createDiagramNodeView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          final DiagramNodeView diagramNodeView = getTarget();
          configuration.add(Synchronizers.forConstantRole(this, getContentViewMapperSource(), getTarget().contentView.children(), new MapperFactory<String, MPSRectView>() {
            public Mapper<? extends String, ? extends MPSRectView> createMapper(String block) {
              return new Mapper<String, MPSRectView>(block, new MPSRectView()) {
                @Override
                protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
                  super.registerSynchronizers(configuration);
                }
              };
            }
          }));
          configuration.add(Synchronizers.forProperty(getTarget().bounds(), new WritableProperty<Rectangle>() {
            public void set(Rectangle rect) {
              DiagramCell diagramCell = getDiagramCell();
              if (diagramCell == null) {
                return;
              }
              setX(rect.origin.x + diagramCell.getX());
              setY(rect.origin.y + diagramCell.getY());
              setWidth(rect.dimension.x);
              setHeight(rect.dimension.y);
            }
          }));

          configuration.add(Synchronizers.forProperty(getTarget().focused(), new Runnable() {
            public void run() {
              if (getTarget().focused().get()) {
                SelectionUtil.selectCell(getContext(), getSNode(), getCellId());
              }
            }
          }));
        }
      };
    }

    public Mapper<SNode, NodeDecoratorView> createDecorationMapper() {
      return new Mapper<SNode, NodeDecoratorView>(getSNode(), new NodeDecoratorView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          DiagramCell diagramCell = getDiagramCell();
          if (diagramCell == null) {
            return;
          }
          Mapper<SNode, DiagramNodeView> blockMapper = getBlockMapper();
          if (blockMapper == null) {
            return;
          }
          configuration.add(Synchronizers.forProperty(myErrorItem, getTarget().hasError));
          configuration.add(Synchronizers.forProperty(blockMapper.getTarget().focused(), getTarget().isSelected));
          MPSRectView contentView = (MPSRectView) getContentView();
          configuration.add(Synchronizers.forProperty(contentView.bounds(), getTarget().bounds));

        }
      };
    }
  }
}
