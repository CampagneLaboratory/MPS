package jetbrains.mps.testHybridEditor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBlock = new ConceptDescriptorBuilder("jetbrains.mps.testHybridEditor.structure.Block").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("x", "y", "myBooleanProperty").children(new String[]{"inputPorts", "outputPorts"}, new boolean[]{true, true}).alias("block", "").create();
  /*package*/ final ConceptDescriptor myConceptBlockExt = new ConceptDescriptorBuilder("jetbrains.mps.testHybridEditor.structure.BlockExt").super_("jetbrains.mps.testHybridEditor.structure.Block").parents("jetbrains.mps.testHybridEditor.structure.Block").references("mb").create();
  /*package*/ final ConceptDescriptor myConceptBlockInstance = new ConceptDescriptorBuilder("jetbrains.mps.testHybridEditor.structure.BlockInstance").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("x", "y", "width", "height", "myBooleanProperty").references("metaBlock").create();
  /*package*/ final ConceptDescriptor myConceptConnector = new ConceptDescriptorBuilder("jetbrains.mps.testHybridEditor.structure.Connector").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").references("outputPort", "inputPort").create();
  /*package*/ final ConceptDescriptor myConceptConnectorEndInstance = new ConceptDescriptorBuilder("jetbrains.mps.testHybridEditor.structure.ConnectorEndInstance").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("block", "metaPort").create();
  /*package*/ final ConceptDescriptor myConceptConnectorInstance = new ConceptDescriptorBuilder("jetbrains.mps.testHybridEditor.structure.ConnectorInstance").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("iconPath").children(new String[]{"source", "target"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptDiagram = new ConceptDescriptorBuilder("jetbrains.mps.testHybridEditor.structure.Diagram").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"blocks", "connectors", "newBlocks", "newConnectors"}, new boolean[]{true, true, true, true}).create();
  /*package*/ final ConceptDescriptor myConceptInputPort = new ConceptDescriptorBuilder("jetbrains.mps.testHybridEditor.structure.InputPort").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptMetaBlock = new ConceptDescriptorBuilder("jetbrains.mps.testHybridEditor.structure.MetaBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("iconPath", "path").children(new String[]{"inMetaPorts", "outMetaPorts"}, new boolean[]{true, true}).create();
  /*package*/ final ConceptDescriptor myConceptMetaPort = new ConceptDescriptorBuilder("jetbrains.mps.testHybridEditor.structure.MetaPort").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptOutputPort = new ConceptDescriptorBuilder("jetbrains.mps.testHybridEditor.structure.OutputPort").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBlock, myConceptBlockExt, myConceptBlockInstance, myConceptConnector, myConceptConnectorEndInstance, myConceptConnectorInstance, myConceptDiagram, myConceptInputPort, myConceptMetaBlock, myConceptMetaPort, myConceptOutputPort);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0o, conceptFqName)) {
      case 0:
        return myConceptBlock;
      case 1:
        return myConceptBlockExt;
      case 2:
        return myConceptBlockInstance;
      case 3:
        return myConceptConnector;
      case 4:
        return myConceptConnectorEndInstance;
      case 5:
        return myConceptConnectorInstance;
      case 6:
        return myConceptDiagram;
      case 7:
        return myConceptInputPort;
      case 8:
        return myConceptMetaBlock;
      case 9:
        return myConceptMetaPort;
      case 10:
        return myConceptOutputPort;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0o = new String[]{"jetbrains.mps.testHybridEditor.structure.Block", "jetbrains.mps.testHybridEditor.structure.BlockExt", "jetbrains.mps.testHybridEditor.structure.BlockInstance", "jetbrains.mps.testHybridEditor.structure.Connector", "jetbrains.mps.testHybridEditor.structure.ConnectorEndInstance", "jetbrains.mps.testHybridEditor.structure.ConnectorInstance", "jetbrains.mps.testHybridEditor.structure.Diagram", "jetbrains.mps.testHybridEditor.structure.InputPort", "jetbrains.mps.testHybridEditor.structure.MetaBlock", "jetbrains.mps.testHybridEditor.structure.MetaPort", "jetbrains.mps.testHybridEditor.structure.OutputPort"};
}
