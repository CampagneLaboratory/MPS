package jetbrains.mps.testHybridEditor.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_all_ports_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_all_ports_NonTypesystemRule() {
  }
  public void applyRule(final SNode block, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    boolean result = true;
    for (SNode port : ListSequence.fromList(SLinkOperations.getTargets(block, "inputPorts", true))) {
      boolean portResult = false;
      for (SNode connector : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(block), "jetbrains.mps.testHybridEditor.structure.Diagram"), "connectors", true))) {
        portResult = portResult || eq_p42nu0_a0a0a0b0b0b(SLinkOperations.getTarget(connector, "inputPort", false), port);
      }
      result = result && portResult;
    }
    for (SNode port : ListSequence.fromList(SLinkOperations.getTargets(block, "outputPorts", true))) {
      boolean portResult = false;
      for (SNode connector : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(block), "jetbrains.mps.testHybridEditor.structure.Diagram"), "connectors", true))) {
        portResult = portResult || eq_p42nu0_a0a0a0b0c0b(SLinkOperations.getTarget(connector, "outputPort", false), port);
      }
      result = result && portResult;
    }
    if (!(result)) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(block, "all ports must be connected", "r:ad8f2b18-3038-4a9d-ad27-aa5680bf8421(jetbrains.mps.testHybridEditor.typesystem)", "884514646183091769", null, errorTarget);
      }
    }
  }
  public String getApplicableConceptFQName() {
    return "jetbrains.mps.testHybridEditor.structure.Block";
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }
  public boolean overrides() {
    return false;
  }
  private static boolean eq_p42nu0_a0a0a0b0b0b(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_p42nu0_a0a0a0b0c0b(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
