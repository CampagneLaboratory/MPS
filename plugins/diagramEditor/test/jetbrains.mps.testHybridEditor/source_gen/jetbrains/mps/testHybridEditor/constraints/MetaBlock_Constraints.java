package jetbrains.mps.testHybridEditor.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.UUID;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class MetaBlock_Constraints extends BaseConstraintsDescriptor {
  public MetaBlock_Constraints() {
    super(MetaIdFactory.conceptId(new UUID(-7982035075869357830l, -5979686021354407916l), 2353136177973871304l));
  }
  public String getAlternativeIcon(SNode node) {
    SModule module = SNodeOperations.getModel(node).getModule();
    if (!(module instanceof AbstractModule)) {
      return null;
    }
    return MacrosFactory.forModule(((AbstractModule) module)).expandPath(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(new UUID(-7982035075869357830l, -5979686021354407916l), 2353136177973871304l, 9168054762589307856l, "iconPath")));
  }
}
