package jetbrains.mps.lang.editor.diagram.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseEditorTestBody;
import jetbrains.mps.openapi.editor.Editor;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.nodeEditor.cells.jetpad.BlockCell;
import junit.framework.Assert;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.views.NodeDecoratorView;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.nodeEditor.cells.jetpad.JetpadUtils;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.views.SelectionFrameView;

@MPSLaunch
public class BlockDecoratorTest_Test extends BaseTransformationTest {
  public BlockDecoratorTest_Test() {
  }
  @Test
  public void test_BlockDecoratorTest() throws Throwable {
    this.initTest("${mps_home}", "r:e41d7e03-7ef3-4161-a48a-e48d8152e422(jetbrains.mps.lang.editor.diagram.tests@tests)");
    this.runTest("jetbrains.mps.lang.editor.diagram.tests.BlockDecoratorTest_Test$TestBody", "testMethod", false);
  }
  @MPSLaunch
  public static class TestBody extends BaseEditorTestBody {
    public TestBody() {
    }
    @Override
    public void testMethodImpl() throws Exception {
      final Editor editor = TestBody.this.initEditor("141381309807688262", "141381309807688282");
      EditorComponent editorComponent = (EditorComponent) editor.getCurrentEditorComponent();
      Mapper descendantMapper;
      final Wrappers._T<SNode> node = new Wrappers._T<SNode>();
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          node.value = SNodeOperations.cast(TestBody.this.getNodeById("141381309807688263"), "jetbrains.mps.lang.editor.diagram.testLanguage.structure.NodeWithName");
        }
      });
      descendantMapper = DecoratorTestRunner.prepareAndGetMapper(node.value, editorComponent, BlockCell.class);
      Assert.assertTrue(descendantMapper != null);
      Assert.assertTrue(descendantMapper.getTarget() != null);
      Assert.assertTrue(descendantMapper.getTarget() instanceof NodeDecoratorView);
      NodeDecoratorView nodeDecoratorView = ((NodeDecoratorView) descendantMapper.getTarget());
      Assert.assertTrue(nodeDecoratorView.hasError.get());
      View errorView = Sequence.fromIterable(JetpadUtils.getAllChildren(nodeDecoratorView)).findFirst(new IWhereFilter<View>() {
        public boolean accept(View it) {
          return it instanceof SelectionFrameView;
        }
      });
      Assert.assertTrue(errorView != null);
      Assert.assertTrue(errorView.visible().get());


    }
  }
}
