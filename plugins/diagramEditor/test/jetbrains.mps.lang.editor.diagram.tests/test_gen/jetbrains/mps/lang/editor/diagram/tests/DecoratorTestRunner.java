package jetbrains.mps.lang.editor.diagram.tests;

/*Generated by MPS */

import jetbrains.jetpad.mapper.Mapper;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.EditorComponent;
import java.lang.reflect.InvocationTargetException;
import javax.swing.SwingUtilities;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.editor.checkers.ModelProblemMessage;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.openapi.editor.message.EditorMessageOwner;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.CellFinderUtil;
import jetbrains.mps.nodeEditor.cells.jetpad.AbstractJetpadCell;
import jetbrains.mps.nodeEditor.cells.ParentSettings;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;

public class DecoratorTestRunner {
  public static Mapper prepareAndGetMapper(final SNode node, final EditorComponent editorComponent, final Class cellClass) throws InterruptedException, InvocationTargetException {
    SwingUtilities.invokeAndWait(new Runnable() {
      public void run() {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            editorComponent.getHighlightManager().mark(new ModelProblemMessage(node, MessageStatus.ERROR, null, "error", new EditorMessageOwner() {}));
            editorComponent.getHighlightManager().repaintAndRebuildEditorMessages();
          }
        });
      }
    });
    SwingUtilities.invokeAndWait(new Runnable() {
      public void run() {
        EditorCell portCell = CellFinderUtil.findChildByClass(editorComponent.getRootCell(), cellClass, true);
        if (portCell instanceof AbstractJetpadCell) {
          ((AbstractJetpadCell) portCell).paint(null, new ParentSettings());
        }
      }
    });
    return getMapper(node, editorComponent);
  }

  public static Mapper getMapper(final SNode node, EditorComponent editorComponent) {
    final Wrappers._T<Mapper<? super SNode, ?>> descendantMapper = new Wrappers._T<Mapper<? super SNode, ?>>();

    final DiagramCell diagramCell = CellFinderUtil.findChildByClass(editorComponent.getRootCell(), DiagramCell.class, true);
    if (diagramCell == null) {
      return null;
    }
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        descendantMapper.value = diagramCell.getDecorationRootMapper().getDescendantMapper(node);
      }
    });
    return descendantMapper.value;
  }
}
