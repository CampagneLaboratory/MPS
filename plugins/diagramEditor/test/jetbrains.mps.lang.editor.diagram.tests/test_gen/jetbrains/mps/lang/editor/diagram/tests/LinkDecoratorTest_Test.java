package jetbrains.mps.lang.editor.diagram.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest4;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseEditorTestBody;
import jetbrains.mps.openapi.editor.Editor;
import jetbrains.mps.nodeEditor.EditorComponent;
import javax.swing.SwingUtilities;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.editor.checkers.ModelProblemMessage;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.openapi.editor.message.EditorMessageOwner;
import jetbrains.mps.nodeEditor.cells.jetpad.ConnectorCell;
import jetbrains.mps.nodeEditor.cells.CellFinderUtil;
import jetbrains.mps.nodeEditor.cells.ParentSettings;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.jetpad.mapper.Mapper;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import junit.framework.Assert;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.views.ConnectorDecoratorView;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.nodeEditor.cells.jetpad.JetpadUtils;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.views.CrossView;

@MPSLaunch
public class LinkDecoratorTest_Test extends BaseTransformationTest4 {
  public LinkDecoratorTest_Test() {
  }

  @Test
  public void test_LinkDecoratorTest() throws Throwable {
    this.initTest("${mps_home}", "r:e41d7e03-7ef3-4161-a48a-e48d8152e422(jetbrains.mps.lang.editor.diagram.tests@tests)");
    this.runTest("jetbrains.mps.lang.editor.diagram.tests.LinkDecoratorTest_Test$TestBody", "testMethod", false);
  }

  @MPSLaunch
  public static class TestBody extends BaseEditorTestBody {
    public TestBody() {
    }

    @Override
    public void testMethodImpl() throws Exception {
      final Editor editor = TestBody.this.initEditor("1638882350373488135", "1560508619093517333");
      final EditorComponent editorComponent = (EditorComponent) editor.getCurrentEditorComponent();
      SwingUtilities.invokeAndWait(new Runnable() {
        public void run() {
          ModelAccess.instance().runReadAction(new Runnable() {
            public void run() {
              editorComponent.getHighlightManager().mark(new ModelProblemMessage(SNodeOperations.cast(TestBody.this.getNodeById("1638882350373488142"), "jetbrains.mps.lang.editor.diagram.testLanguage.structure.OutputToInputPortConnector"), MessageStatus.ERROR, null, "error", new EditorMessageOwner() {}));
              editorComponent.getHighlightManager().repaintAndRebuildEditorMessages();
            }
          });
        }
      });
      SwingUtilities.invokeAndWait(new Runnable() {
        public void run() {
          ConnectorCell connectorCell = CellFinderUtil.findChildByClass(editorComponent.getRootCell(), ConnectorCell.class, true);
          connectorCell.paint(null, new ParentSettings());
        }
      });
      final Wrappers._T<Mapper<? super SNode, ?>> descendantMapper = new Wrappers._T<Mapper<? super SNode, ?>>();
      final DiagramCell diagramCell = CellFinderUtil.findChildByClass(editorComponent.getRootCell(), DiagramCell.class, true);
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          descendantMapper.value = diagramCell.getDecorationRootMapper().getDescendantMapper(((SNode) SNodeOperations.cast(TestBody.this.getNodeById("1638882350373488142"), "jetbrains.mps.lang.editor.diagram.testLanguage.structure.OutputToInputPortConnector")));
        }
      });
      Assert.assertTrue(descendantMapper.value != null);
      Assert.assertTrue(descendantMapper.value.getTarget() != null && descendantMapper.value.getTarget() instanceof ConnectorDecoratorView);
      ConnectorDecoratorView connectorDecoratorView = (ConnectorDecoratorView) descendantMapper.value.getTarget();
      Assert.assertTrue(connectorDecoratorView.hasError.get());
      View cross = Sequence.fromIterable(JetpadUtils.getAllChildren(connectorDecoratorView)).findFirst(new IWhereFilter<View>() {
        public boolean accept(View it) {
          return it instanceof CrossView;
        }
      });
      Assert.assertTrue(cross != null && cross.visible().get());

    }
  }
}
