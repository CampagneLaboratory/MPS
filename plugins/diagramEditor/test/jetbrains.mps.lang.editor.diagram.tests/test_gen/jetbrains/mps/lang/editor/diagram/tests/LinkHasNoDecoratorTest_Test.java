package jetbrains.mps.lang.editor.diagram.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest4;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseEditorTestBody;
import jetbrains.mps.openapi.editor.Editor;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import junit.framework.Assert;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.views.ConnectorDecoratorView;

@MPSLaunch
public class LinkHasNoDecoratorTest_Test extends BaseTransformationTest4 {
  public LinkHasNoDecoratorTest_Test() {
  }

  @Test
  public void test_LinkHasNoDecoratorTest() throws Throwable {
    this.initTest("${mps_home}", "r:e41d7e03-7ef3-4161-a48a-e48d8152e422(jetbrains.mps.lang.editor.diagram.tests@tests)");
    this.runTest("jetbrains.mps.lang.editor.diagram.tests.LinkHasNoDecoratorTest_Test$TestBody", "testMethod", false);
  }

  @MPSLaunch
  public static class TestBody extends BaseEditorTestBody {
    public TestBody() {
    }

    @Override
    public void testMethodImpl() throws Exception {
      final Editor editor = TestBody.this.initEditor("83003444452668150", "83003444452668142");
      final EditorComponent editorComponent = (EditorComponent) editor.getCurrentEditorComponent();
      final Wrappers._T<Mapper> descendantMapper = new Wrappers._T<Mapper>();
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          descendantMapper.value = DecoratorTestRunner.getMapper(SNodeOperations.cast(TestBody.this.getNodeById("1560508619093671384"), "jetbrains.mps.lang.editor.diagram.testLanguage.structure.OutputToInputPortConnector"), editorComponent);
        }
      });
      Assert.assertTrue(descendantMapper.value != null);
      Assert.assertTrue(descendantMapper.value.getTarget() != null);
      Assert.assertTrue(descendantMapper.value.getTarget() instanceof ConnectorDecoratorView);
      Assert.assertFalse(((ConnectorDecoratorView) descendantMapper.value.getTarget()).hasError.get());
    }
  }
}
