package jetbrains.mps.testHybridEditor.diagram.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cells.jetpad.AbstractJetpadEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.OutputPortCell;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.view.RectView;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.geometry.Vector;
import java.util.Collection;
import java.util.Collections;

public class OutputPortEditor extends AbstractJetpadEditor {


  @Override
  public EditorCell createEditorCell(EditorContext context, final SNode node) {
    OutputPortCell outputPortCell = new OutputPortCell(context, node) {
      public Mapper<SNode, RectView> getMapper() {
        Mapper<SNode, RectView> mapper = new Mapper<SNode, RectView>(node, new RectView()) {
          @Override
          protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
            super.registerSynchronizers(configuration);
          }
        };
        RectView view = mapper.getTarget();
        view.background().set(Color.GRAY);
        view.dimension().set(new Vector(10, 10));

        return mapper;
      }
    };
    outputPortCell.setBig(true);
    return outputPortCell;
  }

  @Override
  public Collection<String> getContextHints() {
    return Collections.singletonList("jetbrains.mps.testHybridEditor.editor.HybridHints.diagram");
  }


}
