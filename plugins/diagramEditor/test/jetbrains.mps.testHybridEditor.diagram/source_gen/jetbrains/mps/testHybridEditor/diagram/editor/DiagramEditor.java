package jetbrains.mps.testHybridEditor.diagram.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cells.jetpad.AbstractJetpadEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.DiagramView;
import jetbrains.jetpad.projectional.diagram.view.ConnectionRoutingView;
import jetbrains.jetpad.projectional.diagram.layout.OrthogonalRouter;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.jetpad.mapper.MapperFactory;
import jetbrains.mps.nodeEditor.cells.jetpad.BlockCell;
import jetbrains.jetpad.projectional.diagram.view.Connection;
import jetbrains.mps.nodeEditor.cells.jetpad.ConnectorCell;
import jetbrains.mps.nodeEditor.cellMenu.CompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.BasicCellContext;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPartExt;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.nodeEditor.cells.jetpad.mappers.RootMapper;
import jetbrains.jetpad.projectional.view.awt.ViewContainerComponent;
import java.util.Collection;
import java.util.Collections;

public class DiagramEditor extends AbstractJetpadEditor {
  @Override
  public EditorCell createEditorCell(final EditorContext editorContext, final SNode diagramNode) {

    final DiagramCell diagramCell = new DiagramCell(editorContext, diagramNode) {


      public Mapper<SNode, DiagramView> getMapper() {
        return new Mapper<SNode, DiagramView>(diagramNode, new ConnectionRoutingView(new OrthogonalRouter())) {


          @Override
          protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
            super.registerSynchronizers(configuration);
            configuration.add(Synchronizers.<SNode,View>forSimpleRole(this, SLinkOperations.getTargets(diagramNode, "blocks", true), getTarget().itemsView.children(), new MapperFactory<SNode, View>() {
              public Mapper<? extends SNode, ? extends View> createMapper(SNode node) {
                EditorCell blockCell = editorContext.createNodeCell(node);
                if (blockCell instanceof BlockCell) {
                  addEditorCell(blockCell);
                  return ((BlockCell) blockCell).getMapper();
                }
                return null;
              }
            }));
            configuration.add(Synchronizers.<SNode,Connection>forSimpleRole(this, SLinkOperations.getTargets(diagramNode, "connectors", true), getTarget().connections, new MapperFactory<SNode, Connection>() {
              public Mapper<? extends SNode, ? extends Connection> createMapper(SNode node) {
                EditorCell connectorCell = editorContext.createNodeCell(node);
                if (connectorCell instanceof ConnectorCell) {
                  addEditorCell(connectorCell);
                  return ((ConnectorCell) connectorCell).getMapper();
                }
                return null;
              }
            }));
          }
        };
      }
    };
    diagramCell.setSubstituteInfo(new CompositeSubstituteInfo(editorContext, new BasicCellContext(diagramNode), new SubstituteInfoPartExt[]{diagramCell.createNewDiagramNodeActions(diagramNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.Block"), SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram", "blocks"), new _FunctionTypes._void_P3_E0<SNode, Integer, Integer>() {
      public void invoke(SNode node, Integer x, Integer y) {
        SNode block = SNodeOperations.cast(node, "jetbrains.mps.testHybridEditor.structure.Block");
        SPropertyOperations.set(block, "name", "newBlock");
        SPropertyOperations.set(block, "x", "" + (x));
        SPropertyOperations.set(block, "y", "" + (y));
      }
    })}));

    RootMapper mapper = new RootMapper(diagramNode, diagramCell.getMapper(), ((ViewContainerComponent) diagramCell.getComponent()).container());
    mapper.attachRoot();

    return diagramCell;
  }

  @Override
  public Collection<String> getContextHints() {
    return Collections.singletonList("jetbrains.mps.testHybridEditor.editor.HybridHints.diagram");
  }
}
