package jetbrains.mps.testHybridEditor.diagram.editor;

/*Generated by MPS */

import jetbrains.jetpad.projectional.view.GroupView;
import jetbrains.jetpad.projectional.view.RectView;
import jetbrains.jetpad.projectional.view.TextView;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.jetpad.projectional.diagram.base.GridDirection;
import jetbrains.jetpad.geometry.Rectangle;
import java.util.List;
import jetbrains.jetpad.geometry.Vector;
import java.util.ArrayList;
import jetbrains.mps.nodeEditor.cells.jetpad.BlockViewPortLayouter;
import java.util.Iterator;

public class MPSBlockView extends GroupView {
  private RectView myRectView;
  private TextView myTextView;
  private final GroupView inputs = new GroupView();
  private final GroupView outputs = new GroupView();
  private final Map<SNode, View> portToViewMap = MapSequence.fromMap(new HashMap<SNode, View>());
  private GridDirection myDir = GridDirection.RIGHT;



  public MPSBlockView() {
    children().add(inputs);
    children().add(outputs);
  }

  public void setTextView(TextView textView) {
    myTextView = textView;
    attach(this, textView);
  }

  public void setRectView(RectView rectView) {
    myRectView = rectView;
    attach(this, rectView);
  }

  public GroupView getInputView() {
    return inputs;
  }

  public GroupView getOutputView() {
    return outputs;
  }

  public void addInputPort(View inputPortView, SNode port) {
    attach(inputs, inputPortView);
    MapSequence.fromMap(portToViewMap).put(port, inputPortView);
  }

  private void attach(View parent, View inputPortView) {
    if (inputPortView.parent() != null) {
      inputPortView.parent().children().remove(inputPortView.parent().children().indexOf(inputPortView));
    }
    parent.children().add(inputPortView);
  }

  public void addOutputPort(View outputPortView, SNode port) {
    attach(outputs, outputPortView);
    MapSequence.fromMap(portToViewMap).put(port, outputPortView);
  }

  public View getViewByPort(SNode port) {
    return MapSequence.fromMap(portToViewMap).get(port);
  }

  @Override
  protected void doValidate(View.ValidationContext context) {
    super.doValidate(context);
    Rectangle labelRect = myTextView.bounds().get();
    myRectView.dimension().set(myRectView.dimension().get().max(labelRect.dimension));
    layoutPorts(inputs.children(), myDir.opposite());
    layoutPorts(outputs.children(), myDir);
    super.doValidate(context);

  }

  private void layoutPorts(List<View> views, GridDirection dir) {
    List<Vector> viewDimensions = new ArrayList<Vector>(views.size());
    for (View v : views) {
      viewDimensions.add(v.bounds().get().dimension);
    }
    Rectangle bounds = new Rectangle(myRectView.bounds().get().origin, myRectView.dimension().get());
    List<Vector> viewOrigins = new BlockViewPortLayouter(bounds).layoutPorts(viewDimensions, dir);
    Iterator<Vector> originIter = viewOrigins.iterator();
    for (View v : views) {
      v.moveTo(originIter.next());
    }
  }



}
