package jetbrains.mps.testHybridEditor.diagram.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cells.jetpad.AbstractJetpadEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.ConnectorCell;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import jetbrains.mps.nodeEditor.cells.jetpad.OutputPortCell;
import jetbrains.mps.nodeEditor.cells.CellFinderUtil;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.nodeEditor.cells.jetpad.InputPortCell;
import java.util.Collection;
import java.util.Collections;

public class ConnectorEditor extends AbstractJetpadEditor {
  @Override
  public EditorCell createEditorCell(EditorContext context, final SNode node) {
    ConnectorCell cell = new ConnectorCell(context, node) {
      public boolean connectWithEnds(DiagramCell diagramCell) {
        OutputPortCell outputPort = CellFinderUtil.findChildByConditionAndClass(diagramCell, new Condition<EditorCell>() {
          public boolean met(EditorCell cell) {
            return cell.isBig() && cell.getSNode().equals(SLinkOperations.getTarget(node, "outputPort", false));
          }
        }, OutputPortCell.class, true);

        InputPortCell inputPort = CellFinderUtil.findChildByConditionAndClass(diagramCell, new Condition<EditorCell>() {
          public boolean met(EditorCell cell) {
            return cell.isBig() && cell.getSNode().equals(SLinkOperations.getTarget(node, "inputPort", false));
          }
        }, InputPortCell.class, true);

        if (inputPort == null || outputPort == null) {
          return false;
        }

        getConnector().input.set(inputPort.getPort());
        getConnector().output.set(outputPort.getPort());
        return true;
      }
    };
    cell.setBig(true);

    return cell;
  }

  @Override
  public Collection<String> getContextHints() {
    return Collections.singletonList("jetbrains.mps.testHybridEditor.editor.HybridHints.diagram");
  }


}
