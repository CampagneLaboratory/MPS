package jetbrains.mps.execution.settings.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptApplyTo_Function = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.ApplyTo_Function").super_("jetbrains.mps.execution.settings.structure.EditorOperationDeclaration").parents("jetbrains.mps.execution.settings.structure.EditorOperationDeclaration").alias("apply to", "").create();
  /*package*/ final ConceptDescriptor myConceptCheckProperitesOperation = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.CheckProperitesOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation").references("checkProperties").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCheckProperties_Function = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.CheckProperties_Function").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.baseLanguage.classifiers.structure.IMember").alias("check", "").create();
  /*package*/ final ConceptDescriptor myConceptConfiguration_Parameter = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.Configuration_Parameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("configuration", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCreateEditor_Function = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.CreateEditor_Function").super_("jetbrains.mps.execution.settings.structure.EditorOperationDeclaration").parents("jetbrains.mps.execution.settings.structure.EditorOperationDeclaration").alias("create", "").create();
  /*package*/ final ConceptDescriptor myConceptDeprecatedAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.DeprecatedAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").properties("since", "comment").create();
  /*package*/ final ConceptDescriptor myConceptDispose_Function = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.Dispose_Function").super_("jetbrains.mps.execution.settings.structure.EditorOperationDeclaration").parents("jetbrains.mps.execution.settings.structure.EditorOperationDeclaration").alias("dispose", "").create();
  /*package*/ final ConceptDescriptor myConceptEditorExpression = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.EditorExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("persistentPropertyDeclaration").alias("editor", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEditorOperationCall = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.EditorOperationCall").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").references("editorOperationDeclaration").children(new String[]{"arguments"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEditorOperationDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.EditorOperationDeclaration").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptEditorPropertyDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.EditorPropertyDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptEditorPropertyReference = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.EditorPropertyReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference").references("editorPropertyDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetEditorOperation = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.GetEditorOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").alias("editor", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGridBagConstraints = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.GridBagConstraints").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("constraintsKind").children(new String[]{"order"}, new boolean[]{false}).alias("grid bag constraints", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIPersistentPropertyHolder = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.IPersistentPropertyHolder").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"persistentProperty"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptPersistentConfiguration = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.PersistentConfiguration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.execution.settings.structure.IPersistentPropertyHolder", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier", "jetbrains.mps.execution.common.structure.IGeneratedToClass").children(new String[]{"editor", "checkProperties", "methods"}, new boolean[]{false, false, true}).create();
  /*package*/ final ConceptDescriptor myConceptPersistentConfigurationAssistent = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.PersistentConfigurationAssistent").interface_().references("configuration").create();
  /*package*/ final ConceptDescriptor myConceptPersistentConfigurationMethod = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.PersistentConfigurationMethod").super_("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration").parents("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptPersistentConfigurationTemplate = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.PersistentConfigurationTemplate").super_("jetbrains.mps.execution.settings.structure.PersistentConfiguration").parents("jetbrains.mps.execution.settings.structure.PersistentConfiguration").children(new String[]{"templateParameter"}, new boolean[]{true}).alias("persistent configuration template", "").create();
  /*package*/ final ConceptDescriptor myConceptPersistentConfigurationTemplateInitializer = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.PersistentConfigurationTemplateInitializer").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").references("template").children(new String[]{"parameter"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPersistentConfigurationType = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.PersistentConfigurationType").super_("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").parents("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").references("persistentConfiguration").alias("configuration", "persistent configuration type").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPersistentPropertyDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.PersistentPropertyDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptPersistentPropertyReferenceOperation = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.PersistentPropertyReferenceOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").references("variableDeclaration").alias("", "persistent property reference").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptReportConfigurationErrorStatement = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.ReportConfigurationErrorStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expression"}, new boolean[]{false}).alias("report error", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptResetFrom_Function = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.ResetFrom_Function").super_("jetbrains.mps.execution.settings.structure.EditorOperationDeclaration").parents("jetbrains.mps.execution.settings.structure.EditorOperationDeclaration").alias("reset from", "").create();
  /*package*/ final ConceptDescriptor myConceptSettingsEditor = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.SettingsEditor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"createEditor", "applyTo", "resetFrom", "dispose", "propertyDeclaration"}, new boolean[]{false, false, false, false, true}).create();
  /*package*/ final ConceptDescriptor myConceptSettingsEditorType = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.SettingsEditorType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").references("configuration").alias("editor", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateParameter = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.TemplateParameter").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration").alias("template parameter", "").create();
  /*package*/ final ConceptDescriptor myConceptTemplateParameterReference = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.TemplateParameterReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference").references("constructorParameterDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplatePersistentConfigurationType = new ConceptDescriptorBuilder("jetbrains.mps.execution.settings.structure.TemplatePersistentConfigurationType").super_("jetbrains.mps.execution.settings.structure.PersistentConfigurationType").parents("jetbrains.mps.execution.settings.structure.PersistentConfigurationType").references("template").alias("template configuration", "template configuration reference").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptApplyTo_Function, myConceptCheckProperitesOperation, myConceptCheckProperties_Function, myConceptConfiguration_Parameter, myConceptCreateEditor_Function, myConceptDeprecatedAnnotation, myConceptDispose_Function, myConceptEditorExpression, myConceptEditorOperationCall, myConceptEditorOperationDeclaration, myConceptEditorPropertyDeclaration, myConceptEditorPropertyReference, myConceptGetEditorOperation, myConceptGridBagConstraints, myConceptIPersistentPropertyHolder, myConceptPersistentConfiguration, myConceptPersistentConfigurationAssistent, myConceptPersistentConfigurationMethod, myConceptPersistentConfigurationTemplate, myConceptPersistentConfigurationTemplateInitializer, myConceptPersistentConfigurationType, myConceptPersistentPropertyDeclaration, myConceptPersistentPropertyReferenceOperation, myConceptReportConfigurationErrorStatement, myConceptResetFrom_Function, myConceptSettingsEditor, myConceptSettingsEditorType, myConceptTemplateParameter, myConceptTemplateParameterReference, myConceptTemplatePersistentConfigurationType);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0hb, conceptFqName)) {
      case 0:
        return myConceptApplyTo_Function;
      case 1:
        return myConceptCheckProperitesOperation;
      case 2:
        return myConceptCheckProperties_Function;
      case 3:
        return myConceptConfiguration_Parameter;
      case 4:
        return myConceptCreateEditor_Function;
      case 5:
        return myConceptDeprecatedAnnotation;
      case 6:
        return myConceptDispose_Function;
      case 7:
        return myConceptEditorExpression;
      case 8:
        return myConceptEditorOperationCall;
      case 9:
        return myConceptEditorOperationDeclaration;
      case 10:
        return myConceptEditorPropertyDeclaration;
      case 11:
        return myConceptEditorPropertyReference;
      case 12:
        return myConceptGetEditorOperation;
      case 13:
        return myConceptGridBagConstraints;
      case 14:
        return myConceptIPersistentPropertyHolder;
      case 15:
        return myConceptPersistentConfiguration;
      case 16:
        return myConceptPersistentConfigurationAssistent;
      case 17:
        return myConceptPersistentConfigurationMethod;
      case 18:
        return myConceptPersistentConfigurationTemplate;
      case 19:
        return myConceptPersistentConfigurationTemplateInitializer;
      case 20:
        return myConceptPersistentConfigurationType;
      case 21:
        return myConceptPersistentPropertyDeclaration;
      case 22:
        return myConceptPersistentPropertyReferenceOperation;
      case 23:
        return myConceptReportConfigurationErrorStatement;
      case 24:
        return myConceptResetFrom_Function;
      case 25:
        return myConceptSettingsEditor;
      case 26:
        return myConceptSettingsEditorType;
      case 27:
        return myConceptTemplateParameter;
      case 28:
        return myConceptTemplateParameterReference;
      case 29:
        return myConceptTemplatePersistentConfigurationType;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0hb = new String[]{"jetbrains.mps.execution.settings.structure.ApplyTo_Function", "jetbrains.mps.execution.settings.structure.CheckProperitesOperation", "jetbrains.mps.execution.settings.structure.CheckProperties_Function", "jetbrains.mps.execution.settings.structure.Configuration_Parameter", "jetbrains.mps.execution.settings.structure.CreateEditor_Function", "jetbrains.mps.execution.settings.structure.DeprecatedAnnotation", "jetbrains.mps.execution.settings.structure.Dispose_Function", "jetbrains.mps.execution.settings.structure.EditorExpression", "jetbrains.mps.execution.settings.structure.EditorOperationCall", "jetbrains.mps.execution.settings.structure.EditorOperationDeclaration", "jetbrains.mps.execution.settings.structure.EditorPropertyDeclaration", "jetbrains.mps.execution.settings.structure.EditorPropertyReference", "jetbrains.mps.execution.settings.structure.GetEditorOperation", "jetbrains.mps.execution.settings.structure.GridBagConstraints", "jetbrains.mps.execution.settings.structure.IPersistentPropertyHolder", "jetbrains.mps.execution.settings.structure.PersistentConfiguration", "jetbrains.mps.execution.settings.structure.PersistentConfigurationAssistent", "jetbrains.mps.execution.settings.structure.PersistentConfigurationMethod", "jetbrains.mps.execution.settings.structure.PersistentConfigurationTemplate", "jetbrains.mps.execution.settings.structure.PersistentConfigurationTemplateInitializer", "jetbrains.mps.execution.settings.structure.PersistentConfigurationType", "jetbrains.mps.execution.settings.structure.PersistentPropertyDeclaration", "jetbrains.mps.execution.settings.structure.PersistentPropertyReferenceOperation", "jetbrains.mps.execution.settings.structure.ReportConfigurationErrorStatement", "jetbrains.mps.execution.settings.structure.ResetFrom_Function", "jetbrains.mps.execution.settings.structure.SettingsEditor", "jetbrains.mps.execution.settings.structure.SettingsEditorType", "jetbrains.mps.execution.settings.structure.TemplateParameter", "jetbrains.mps.execution.settings.structure.TemplateParameterReference", "jetbrains.mps.execution.settings.structure.TemplatePersistentConfigurationType"};
}
