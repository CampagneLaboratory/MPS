package jetbrains.mps.xml.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ReplaceNodeWithItsContent_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ReplaceNodeWithItsContent_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.xml.structure.Content";
  }

  public String getPresentation() {
    return "ReplaceNodeWithItsContent";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.xml.intentions.ReplaceNodeWithItsContent_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.xml";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.xml.structure.ContentList") && ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), node, "virtual_getSubcontents_1213877224308", new Object[]{})).isNotEmpty();
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c89590587(jetbrains.mps.xml.intentions)", "1195647309117");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ReplaceNodeWithItsContent_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Replace Node with Its Content";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode s = node;
      for (SNode subContent : ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), node, "virtual_getSubcontents_1213877224308", new Object[]{}))) {
        SNodeOperations.insertNextSiblingChild(s, subContent);
        s = subContent;
      }
      SNodeOperations.deleteNode(node);
    }

    public IntentionDescriptor getDescriptor() {
      return ReplaceNodeWithItsContent_Intention.this;
    }
  }
}
