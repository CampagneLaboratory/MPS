package jetbrains.mps.core.xml.sax.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptXMLSAXAttributeHandler = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXAttributeHandler").super_("jetbrains.mps.core.xml.sax.structure.XMLSAXHandlerFunction").parents("jetbrains.mps.core.xml.sax.structure.XMLSAXHandlerFunction").alias("attribute handler", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXAttributeHandler_value = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXAttributeHandler_value").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("value", "attribute value").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXAttributeReference = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXAttributeReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("attribute").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXAttributeRule = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXAttributeRule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("isRequired").children(new String[]{"handler"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXBreakStatement = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXBreakStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"result"}, new boolean[]{false}).alias("break parser", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXChildHandler = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXChildHandler").super_("jetbrains.mps.core.xml.sax.structure.XMLSAXHandlerFunction").parents("jetbrains.mps.core.xml.sax.structure.XMLSAXHandlerFunction").alias("child handler", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXChildHandler_childObject = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXChildHandler_childObject").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("child", "parsed child object").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXChildRule = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXChildRule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").properties("tagName", "overrideTag").references("rule").children(new String[]{"condition", "handler", "actualArgument"}, new boolean[]{false, false, true}).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXChildRuleCondition = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXChildRuleCondition").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXFieldDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXFieldDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"type"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXFieldReference = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXFieldReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("declaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXHandlerFunction = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXHandlerFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXHandler_resultObject = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXHandler_resultObject").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("result", "an object").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXLocatorExpression = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXLocatorExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("locator", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXNodeCreator = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXNodeCreator").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("create", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXNodeRule = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXNodeRule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.lang.core.structure.INamedConcept").properties("tagName", "isCompact").children(new String[]{"type", "params", "attrs", "children", "text", "creator", "validator"}, new boolean[]{false, true, true, true, false, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXNodeRuleParam = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXNodeRuleParam").super_("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").alias("", "parameter").create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXNodeRuleParamRef = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXNodeRuleParamRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("param").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXNodeValidator = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXNodeValidator").super_("jetbrains.mps.core.xml.sax.structure.XMLSAXHandlerFunction").parents("jetbrains.mps.core.xml.sax.structure.XMLSAXHandlerFunction").alias("validate", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXParser = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXParser").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.lang.core.structure.INamedConcept").references("root").children(new String[]{"parameters", "nodes", "fields", "globalText"}, new boolean[]{true, true, true, false}).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXTextHandler = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXTextHandler").super_("jetbrains.mps.core.xml.sax.structure.XMLSAXHandlerFunction").parents("jetbrains.mps.core.xml.sax.structure.XMLSAXHandlerFunction").alias("text handler", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXTextHandler_value = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXTextHandler_value").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("value", "text value").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLSAXTextRule = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.sax.structure.XMLSAXTextRule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"handler"}, new boolean[]{false}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptXMLSAXAttributeHandler, myConceptXMLSAXAttributeHandler_value, myConceptXMLSAXAttributeReference, myConceptXMLSAXAttributeRule, myConceptXMLSAXBreakStatement, myConceptXMLSAXChildHandler, myConceptXMLSAXChildHandler_childObject, myConceptXMLSAXChildRule, myConceptXMLSAXChildRuleCondition, myConceptXMLSAXFieldDeclaration, myConceptXMLSAXFieldReference, myConceptXMLSAXHandlerFunction, myConceptXMLSAXHandler_resultObject, myConceptXMLSAXLocatorExpression, myConceptXMLSAXNodeCreator, myConceptXMLSAXNodeRule, myConceptXMLSAXNodeRuleParam, myConceptXMLSAXNodeRuleParamRef, myConceptXMLSAXNodeValidator, myConceptXMLSAXParser, myConceptXMLSAXTextHandler, myConceptXMLSAXTextHandler_value, myConceptXMLSAXTextRule);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0ab, conceptFqName)) {
      case 0:
        return myConceptXMLSAXAttributeHandler;
      case 1:
        return myConceptXMLSAXAttributeHandler_value;
      case 2:
        return myConceptXMLSAXAttributeReference;
      case 3:
        return myConceptXMLSAXAttributeRule;
      case 4:
        return myConceptXMLSAXBreakStatement;
      case 5:
        return myConceptXMLSAXChildHandler;
      case 6:
        return myConceptXMLSAXChildHandler_childObject;
      case 7:
        return myConceptXMLSAXChildRule;
      case 8:
        return myConceptXMLSAXChildRuleCondition;
      case 9:
        return myConceptXMLSAXFieldDeclaration;
      case 10:
        return myConceptXMLSAXFieldReference;
      case 11:
        return myConceptXMLSAXHandlerFunction;
      case 12:
        return myConceptXMLSAXHandler_resultObject;
      case 13:
        return myConceptXMLSAXLocatorExpression;
      case 14:
        return myConceptXMLSAXNodeCreator;
      case 15:
        return myConceptXMLSAXNodeRule;
      case 16:
        return myConceptXMLSAXNodeRuleParam;
      case 17:
        return myConceptXMLSAXNodeRuleParamRef;
      case 18:
        return myConceptXMLSAXNodeValidator;
      case 19:
        return myConceptXMLSAXParser;
      case 20:
        return myConceptXMLSAXTextHandler;
      case 21:
        return myConceptXMLSAXTextHandler_value;
      case 22:
        return myConceptXMLSAXTextRule;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0ab = new String[]{"jetbrains.mps.core.xml.sax.structure.XMLSAXAttributeHandler", "jetbrains.mps.core.xml.sax.structure.XMLSAXAttributeHandler_value", "jetbrains.mps.core.xml.sax.structure.XMLSAXAttributeReference", "jetbrains.mps.core.xml.sax.structure.XMLSAXAttributeRule", "jetbrains.mps.core.xml.sax.structure.XMLSAXBreakStatement", "jetbrains.mps.core.xml.sax.structure.XMLSAXChildHandler", "jetbrains.mps.core.xml.sax.structure.XMLSAXChildHandler_childObject", "jetbrains.mps.core.xml.sax.structure.XMLSAXChildRule", "jetbrains.mps.core.xml.sax.structure.XMLSAXChildRuleCondition", "jetbrains.mps.core.xml.sax.structure.XMLSAXFieldDeclaration", "jetbrains.mps.core.xml.sax.structure.XMLSAXFieldReference", "jetbrains.mps.core.xml.sax.structure.XMLSAXHandlerFunction", "jetbrains.mps.core.xml.sax.structure.XMLSAXHandler_resultObject", "jetbrains.mps.core.xml.sax.structure.XMLSAXLocatorExpression", "jetbrains.mps.core.xml.sax.structure.XMLSAXNodeCreator", "jetbrains.mps.core.xml.sax.structure.XMLSAXNodeRule", "jetbrains.mps.core.xml.sax.structure.XMLSAXNodeRuleParam", "jetbrains.mps.core.xml.sax.structure.XMLSAXNodeRuleParamRef", "jetbrains.mps.core.xml.sax.structure.XMLSAXNodeValidator", "jetbrains.mps.core.xml.sax.structure.XMLSAXParser", "jetbrains.mps.core.xml.sax.structure.XMLSAXTextHandler", "jetbrains.mps.core.xml.sax.structure.XMLSAXTextHandler_value", "jetbrains.mps.core.xml.sax.structure.XMLSAXTextRule"};
}
