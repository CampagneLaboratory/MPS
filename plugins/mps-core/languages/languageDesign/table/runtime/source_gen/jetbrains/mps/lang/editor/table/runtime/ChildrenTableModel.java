package jetbrains.mps.lang.editor.table.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public abstract class ChildrenTableModel extends AbstractTableModel_optimized {
  private SNode myParentNode;
  private SNode myChildLinkDeclaration;
  private List<TableRow> myTableRows;
  private Map<TableRow, SNode> myRowToNodeMap = MapSequence.fromMap(new HashMap<TableRow, SNode>());
  public ChildrenTableModel(@NotNull SNode parentNode, @NotNull SNode childLinkDeclaration, boolean keepSameSizeRows) {
    super(keepSameSizeRows);
    myParentNode = parentNode;
    myChildLinkDeclaration = childLinkDeclaration;
  }
  public abstract TableRow createTableRow(SNode childNode, int rowNumber);
  @Override
  public void removeRow(int index) {
    TableRow row = getRow(index);
    SNode rowNode = MapSequence.fromMap(myRowToNodeMap).get(row);
    SNodeOperations.deleteNode(rowNode);
  }
  @Override
  public List<TableRow> getRows() {
    if (myTableRows == null) {
      myTableRows = ListSequence.fromList(new ArrayList<TableRow>());
      for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(myParentNode, myChildLinkDeclaration))) {
        TableRow row = createTableRow(child, ListSequence.fromList(myTableRows).count());
        ListSequence.fromList(myTableRows).addElement(row);
        MapSequence.fromMap(myRowToNodeMap).put(row, child);
      }
      assert ListSequence.fromList(myTableRows).isNotEmpty();
    }
    return myTableRows;
  }
  @Override
  public void createNewRow(int index) {
    int rowCount = getRowCount();
    assert index <= rowCount;
    SNode newRowNode = SConceptOperations.createNewNode(SNodeOperations.asSConcept(SLinkOperations.getTarget(myChildLinkDeclaration, MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599976176l, "target"))));
    if (index == rowCount) {
      myParentNode.addChild(SPropertyOperations.getString(myChildLinkDeclaration, MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599776563l, "role")), newRowNode);
    } else {
      SNodeOperations.insertPrevSiblingChild(MapSequence.fromMap(myRowToNodeMap).get(getRow(index)), newRowNode);
    }
  }
}
