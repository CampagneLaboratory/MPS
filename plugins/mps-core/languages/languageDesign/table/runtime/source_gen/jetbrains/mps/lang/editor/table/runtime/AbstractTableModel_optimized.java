package jetbrains.mps.lang.editor.table.runtime;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public abstract class AbstractTableModel_optimized implements TableModel_optimized {
  private boolean myKeepSameSizeRows;

  public AbstractTableModel_optimized(boolean keepSameSizeRows) {
    myKeepSameSizeRows = keepSameSizeRows;
  }

  @Override
  public TableRow getRow(int index) {
    return ListSequence.fromList(getRows()).getElement(index);
  }

  @Override
  public int getRowCount() {
    return ListSequence.fromList(getRows()).count();
  }

  @Override
  public void removeColumn(int index) {
    for (TableRow row : ListSequence.fromList(getRows())) {
      row.removeCell(index);
    }
  }

  @Override
  public void createNewColumn(final int index) {
    if (myKeepSameSizeRows) {
      ListSequence.fromList(getRows()).visitAll(new IVisitor<TableRow>() {
        public void visit(TableRow it) {
          it.createNewCell(index);
        }
      });
    } else {
      getRow(0).createNewCell(index);
    }
  }

  @Override
  public int getColumnCount() {
    return getRow(0).getColumnCount();
  }
}
