package jetbrains.mps.core.properties.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;
import java.util.List;
import jetbrains.mps.text.TextUnit;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.text.impl.RegularTextUnit;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final long[] myId2Index;
  public TextGenAspectDescriptor() {
    myId2Index = new long[4];
    myId2Index[0] = 0x36fb0dc9fd3a2754L;
    myId2Index[1] = 0x36fb0dc9fd3a3ac1L;
    myId2Index[2] = 0x36fb0dc9fd3a3ac2L;
    myId2Index[3] = 0x36fb0dc9fd3a3ad9L;
  }
  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SConceptId id) {
    final int index = Arrays.binarySearch(myId2Index, id.getIdValue());
    switch (index) {
      case 0:
        return new PropertiesFile_TextGen();
      case 1:
        return new PropertiesDeclaration_TextGen();
      case 2:
        return new PropertiesLine_TextGen();
      case 3:
        return new PropertiesComment_TextGen();
      default:
        return null;
    }
  }

  @NotNull
  @Override
  public List<TextUnit> breakdownToUnits(@NotNull SModel model) {
    ArrayList<TextUnit> rv = new ArrayList<TextUnit>();
    for (SNode root : model.getRootNodes()) {
      if (root.isInstanceOfConcept(MetaAdapterFactory.getConcept(0x58f98fef90ad4b72L, 0xa390fad66ec7005aL, 0x36fb0dc9fd3a2754L, "jetbrains.mps.core.properties.structure.PropertiesFile"))) {
        String fname = getFileName_PropertiesFile(root);
        String ext = getFileExtension_PropertiesFile(root);
        rv.add(new RegularTextUnit(root, (ext == null ? fname : (fname + '.' + ext))));
        continue;
      }
    }
    return rv;
  }
  private static String getFileName_PropertiesFile(SNode node) {
    return node.getName();
  }
  private static String getFileExtension_PropertiesFile(SNode node) {
    return "properties";
  }
}
