package jetbrains.mps.core.properties.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptPropertiesComment = new ConceptDescriptorBuilder("jetbrains.mps.core.properties.structure.PropertiesComment").super_("jetbrains.mps.core.properties.structure.PropertiesLine").parents("jetbrains.mps.core.properties.structure.PropertiesLine").properties("text").alias("#", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPropertiesDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.core.properties.structure.PropertiesDeclaration").super_("jetbrains.mps.core.properties.structure.PropertiesLine").parents("jetbrains.mps.core.properties.structure.PropertiesLine", "jetbrains.mps.lang.core.structure.INamedConcept").properties("value").alias("property", "").create();
  /*package*/ final ConceptDescriptor myConceptPropertiesFile = new ConceptDescriptorBuilder("jetbrains.mps.core.properties.structure.PropertiesFile").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.traceable.structure.UnitConcept").children(new String[]{"lines"}, new boolean[]{true}).alias("properties file", "").create();
  /*package*/ final ConceptDescriptor myConceptPropertiesLine = new ConceptDescriptorBuilder("jetbrains.mps.core.properties.structure.PropertiesLine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").alias("<empty line>", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptPropertiesComment, myConceptPropertiesDeclaration, myConceptPropertiesFile, myConceptPropertiesLine);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0h, conceptFqName)) {
      case 0:
        return myConceptPropertiesComment;
      case 1:
        return myConceptPropertiesDeclaration;
      case 2:
        return myConceptPropertiesFile;
      case 3:
        return myConceptPropertiesLine;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0h = new String[]{"jetbrains.mps.core.properties.structure.PropertiesComment", "jetbrains.mps.core.properties.structure.PropertiesDeclaration", "jetbrains.mps.core.properties.structure.PropertiesFile", "jetbrains.mps.core.properties.structure.PropertiesLine"};
}
