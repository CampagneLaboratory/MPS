package jetbrains.mps.core.xml.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptXmlAttribute = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlAttribute").super_("jetbrains.mps.core.xml.structure.XmlBaseAttribute").parents("jetbrains.mps.core.xml.structure.XmlBaseAttribute", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("attrName").children(new String[]{"value"}, new boolean[]{true}).alias("attribute", "").create();
  /*package*/ final ConceptDescriptor myConceptXmlBaseAttribute = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlBaseAttribute").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptXmlBaseElement = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlBaseElement").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptXmlBasePrologElement = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlBasePrologElement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.core.xml.structure.XmlPrologElement").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptXmlCDATA = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlCDATA").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent").properties("content").alias("<![CDATA", "").create();
  /*package*/ final ConceptDescriptor myConceptXmlCharRef = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlCharRef").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent").properties("charCode").alias("&#", "single character").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXmlCharRefValue = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlCharRefValue").super_("jetbrains.mps.core.xml.structure.XmlValuePart").parents("jetbrains.mps.core.xml.structure.XmlValuePart", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("charCode").alias("&#", "single character").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXmlComment = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlComment").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent", "jetbrains.mps.core.xml.structure.XmlPrologElement").children(new String[]{"lines"}, new boolean[]{true}).alias("<!--", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXmlCommentLine = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlCommentLine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("text").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXmlContent = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlContent").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.core.xml.structure.XmlPart").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptXmlDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlDeclaration").super_("jetbrains.mps.core.xml.structure.XmlBasePrologElement").parents("jetbrains.mps.core.xml.structure.XmlBasePrologElement", "jetbrains.mps.core.xml.structure.XmlPrologElement").properties("version", "encoding", "standalone").alias("<?xml", "xml declaration").create();
  /*package*/ final ConceptDescriptor myConceptXmlDoctypeDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlDoctypeDeclaration").super_("jetbrains.mps.core.xml.structure.XmlBasePrologElement").parents("jetbrains.mps.core.xml.structure.XmlBasePrologElement", "jetbrains.mps.core.xml.structure.XmlPrologElement").properties("doctypeName").children(new String[]{"externalId"}, new boolean[]{false}).alias("<!DOCTYPE", "xml doctype declaration").create();
  /*package*/ final ConceptDescriptor myConceptXmlDocument = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlDocument").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"prolog", "rootElement"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptXmlElement = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlElement").super_("jetbrains.mps.core.xml.structure.XmlBaseElement").parents("jetbrains.mps.core.xml.structure.XmlBaseElement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("tagName", "shortEmptyNotation").children(new String[]{"attributes", "content"}, new boolean[]{true, true}).alias("<element/>", "").create();
  /*package*/ final ConceptDescriptor myConceptXmlEntityRef = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlEntityRef").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent").properties("entityName").alias("&", "entity reference").create();
  /*package*/ final ConceptDescriptor myConceptXmlEntityRefValue = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlEntityRefValue").super_("jetbrains.mps.core.xml.structure.XmlValuePart").parents("jetbrains.mps.core.xml.structure.XmlValuePart", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("entityName").alias("&", "entity reference").create();
  /*package*/ final ConceptDescriptor myConceptXmlExternalId = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlExternalId").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("publicId", "systemId", "isPublic").create();
  /*package*/ final ConceptDescriptor myConceptXmlFile = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlFile").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.traceable.structure.UnitConcept").children(new String[]{"document"}, new boolean[]{false}).alias("xml file", "").create();
  /*package*/ final ConceptDescriptor myConceptXmlNoSpaceValue = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlNoSpaceValue").super_("jetbrains.mps.core.xml.structure.XmlValuePart").parents("jetbrains.mps.core.xml.structure.XmlValuePart").alias("<-no space->", "concatenates two values without spaces").create();
  /*package*/ final ConceptDescriptor myConceptXmlPart = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlPart").interface_().create();
  /*package*/ final ConceptDescriptor myConceptXmlProcessingInstruction = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlProcessingInstruction").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent", "jetbrains.mps.core.xml.structure.XmlPrologElement").properties("target", "rawData").alias("<?", "processing instruction").create();
  /*package*/ final ConceptDescriptor myConceptXmlProlog = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlProlog").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"elements"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptXmlPrologElement = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlPrologElement").interface_().parents("jetbrains.mps.core.xml.structure.XmlPart").create();
  /*package*/ final ConceptDescriptor myConceptXmlText = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlText").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("text", "plain text").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXmlTextValue = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlTextValue").super_("jetbrains.mps.core.xml.structure.XmlValuePart").parents("jetbrains.mps.core.xml.structure.XmlValuePart", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("text").alias("text", "attribute value contains of text and entity references").create();
  /*package*/ final ConceptDescriptor myConceptXmlValuePart = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlValuePart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().alias("", "attribute value").create();
  /*package*/ final ConceptDescriptor myConceptXmlWhitespace = new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlWhitespace").super_("jetbrains.mps.core.xml.structure.XmlBasePrologElement").parents("jetbrains.mps.core.xml.structure.XmlBasePrologElement", "jetbrains.mps.core.xml.structure.XmlPrologElement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptXmlAttribute, myConceptXmlBaseAttribute, myConceptXmlBaseElement, myConceptXmlBasePrologElement, myConceptXmlCDATA, myConceptXmlCharRef, myConceptXmlCharRefValue, myConceptXmlComment, myConceptXmlCommentLine, myConceptXmlContent, myConceptXmlDeclaration, myConceptXmlDoctypeDeclaration, myConceptXmlDocument, myConceptXmlElement, myConceptXmlEntityRef, myConceptXmlEntityRefValue, myConceptXmlExternalId, myConceptXmlFile, myConceptXmlNoSpaceValue, myConceptXmlPart, myConceptXmlProcessingInstruction, myConceptXmlProlog, myConceptXmlPrologElement, myConceptXmlText, myConceptXmlTextValue, myConceptXmlValuePart, myConceptXmlWhitespace);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0eb, conceptFqName)) {
      case 0:
        return myConceptXmlAttribute;
      case 1:
        return myConceptXmlBaseAttribute;
      case 2:
        return myConceptXmlBaseElement;
      case 3:
        return myConceptXmlBasePrologElement;
      case 4:
        return myConceptXmlCDATA;
      case 5:
        return myConceptXmlCharRef;
      case 6:
        return myConceptXmlCharRefValue;
      case 7:
        return myConceptXmlComment;
      case 8:
        return myConceptXmlCommentLine;
      case 9:
        return myConceptXmlContent;
      case 10:
        return myConceptXmlDeclaration;
      case 11:
        return myConceptXmlDoctypeDeclaration;
      case 12:
        return myConceptXmlDocument;
      case 13:
        return myConceptXmlElement;
      case 14:
        return myConceptXmlEntityRef;
      case 15:
        return myConceptXmlEntityRefValue;
      case 16:
        return myConceptXmlExternalId;
      case 17:
        return myConceptXmlFile;
      case 18:
        return myConceptXmlNoSpaceValue;
      case 19:
        return myConceptXmlPart;
      case 20:
        return myConceptXmlProcessingInstruction;
      case 21:
        return myConceptXmlProlog;
      case 22:
        return myConceptXmlPrologElement;
      case 23:
        return myConceptXmlText;
      case 24:
        return myConceptXmlTextValue;
      case 25:
        return myConceptXmlValuePart;
      case 26:
        return myConceptXmlWhitespace;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0eb = new String[]{"jetbrains.mps.core.xml.structure.XmlAttribute", "jetbrains.mps.core.xml.structure.XmlBaseAttribute", "jetbrains.mps.core.xml.structure.XmlBaseElement", "jetbrains.mps.core.xml.structure.XmlBasePrologElement", "jetbrains.mps.core.xml.structure.XmlCDATA", "jetbrains.mps.core.xml.structure.XmlCharRef", "jetbrains.mps.core.xml.structure.XmlCharRefValue", "jetbrains.mps.core.xml.structure.XmlComment", "jetbrains.mps.core.xml.structure.XmlCommentLine", "jetbrains.mps.core.xml.structure.XmlContent", "jetbrains.mps.core.xml.structure.XmlDeclaration", "jetbrains.mps.core.xml.structure.XmlDoctypeDeclaration", "jetbrains.mps.core.xml.structure.XmlDocument", "jetbrains.mps.core.xml.structure.XmlElement", "jetbrains.mps.core.xml.structure.XmlEntityRef", "jetbrains.mps.core.xml.structure.XmlEntityRefValue", "jetbrains.mps.core.xml.structure.XmlExternalId", "jetbrains.mps.core.xml.structure.XmlFile", "jetbrains.mps.core.xml.structure.XmlNoSpaceValue", "jetbrains.mps.core.xml.structure.XmlPart", "jetbrains.mps.core.xml.structure.XmlProcessingInstruction", "jetbrains.mps.core.xml.structure.XmlProlog", "jetbrains.mps.core.xml.structure.XmlPrologElement", "jetbrains.mps.core.xml.structure.XmlText", "jetbrains.mps.core.xml.structure.XmlTextValue", "jetbrains.mps.core.xml.structure.XmlValuePart", "jetbrains.mps.core.xml.structure.XmlWhitespace"};
}
