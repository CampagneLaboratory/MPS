package jetbrains.mps.core.xml.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.KeyMapImpl;
import jetbrains.mps.openapi.editor.cells.KeyMapAction;
import jetbrains.mps.editor.runtime.cells.KeyMapActionImpl;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import java.util.List;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class XmlTextValue_text extends KeyMapImpl {
  public XmlTextValue_text() {
    this.setApplicableToEveryModel(false);
    KeyMapAction action;
    action = new XmlTextValue_text.XmlTextValue_text_Action0();
    this.putAction("any", "\"", action);
    action = new XmlTextValue_text.XmlTextValue_text_Action1();
    this.putAction("any", "&", action);
  }
  public static class XmlTextValue_text_Action0 extends KeyMapActionImpl {
    public XmlTextValue_text_Action0() {
      super.setCaretPolicy(KeyMapAction.CARET_AT_INTERMEDIATE_POSITION);
      this.setShownInPopupMenu(false);
    }
    public String getDescriptionText() {
      return "insert &quot;";
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeUtil.isInstanceOf(contextNode, SConceptRepository.getInstance().getConcept("jetbrains.mps.core.xml.structure.XmlTextValue")))) {
        return false;
      }
      return this.canExecute_internal(editorContext, contextNode, this.getSelectedNodes(editorContext));
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private boolean canExecute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (!(editorContext.getSelectedCell() instanceof EditorCell_Label)) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.xml.structure.XmlValuePart")) || !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.core.xml.structure.XmlAttribute"))) {
        return false;
      }
      return isNotEmptyString(SPropertyOperations.getString(node, "text"));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      int index = ((EditorCell_Label) editorContext.getSelectedCell()).getCaretPosition();
      SNode attr = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.core.xml.structure.XmlAttribute");
      int currIndex = ListSequence.fromList(SLinkOperations.getTargets(attr, "value", true)).indexOf(node);

      String currText = SPropertyOperations.getString(node, "text");
      if (index < currText.length()) {
        SNode newText = SModelOperations.createNewNode(SNodeOperations.getModel(node), null, "jetbrains.mps.core.xml.structure.XmlTextValue");
        SPropertyOperations.set(newText, "text", currText.substring(index));
        SPropertyOperations.set(node, "text", currText.substring(0, index));
        ListSequence.fromList(SLinkOperations.getTargets(attr, "value", true)).insertElement(currIndex + 1, newText);
      }
      SNode newRef = SModelOperations.createNewNode(SNodeOperations.getModel(node), null, "jetbrains.mps.core.xml.structure.XmlEntityRefValue");
      SPropertyOperations.set(newRef, "entityName", "quot");
      ListSequence.fromList(SLinkOperations.getTargets(attr, "value", true)).insertElement(currIndex + 1, newRef);
      editorContext.selectWRTFocusPolicy(newRef);
    }
    public String getKeyStroke() {
      return " \"";
    }
    private static boolean isNotEmptyString(String str) {
      return str != null && str.length() > 0;
    }
  }
  public static class XmlTextValue_text_Action1 extends KeyMapActionImpl {
    public XmlTextValue_text_Action1() {
      super.setCaretPolicy(KeyMapAction.CARET_AT_INTERMEDIATE_POSITION);
      this.setShownInPopupMenu(false);
    }
    public String getDescriptionText() {
      return "insert entity reference";
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeUtil.isInstanceOf(contextNode, SConceptRepository.getInstance().getConcept("jetbrains.mps.core.xml.structure.XmlTextValue")))) {
        return false;
      }
      return this.canExecute_internal(editorContext, contextNode, this.getSelectedNodes(editorContext));
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private boolean canExecute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (!(editorContext.getSelectedCell() instanceof EditorCell_Label)) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.xml.structure.XmlValuePart")) || !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.core.xml.structure.XmlAttribute"))) {
        return false;
      }
      return isNotEmptyString(SPropertyOperations.getString(node, "text"));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      int index = ((EditorCell_Label) editorContext.getSelectedCell()).getCaretPosition();
      SNode attr = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.core.xml.structure.XmlAttribute");
      int currIndex = ListSequence.fromList(SLinkOperations.getTargets(attr, "value", true)).indexOf(node);

      String currText = SPropertyOperations.getString(node, "text");
      if (index < currText.length()) {
        SNode newText = SModelOperations.createNewNode(SNodeOperations.getModel(node), null, "jetbrains.mps.core.xml.structure.XmlTextValue");
        SPropertyOperations.set(newText, "text", currText.substring(index));
        SPropertyOperations.set(node, "text", currText.substring(0, index));
        ListSequence.fromList(SLinkOperations.getTargets(attr, "value", true)).insertElement(currIndex + 1, newText);
      }
      SNode newRef = SModelOperations.createNewNode(SNodeOperations.getModel(node), null, "jetbrains.mps.core.xml.structure.XmlEntityRefValue");
      ListSequence.fromList(SLinkOperations.getTargets(attr, "value", true)).insertElement(currIndex + 1, newRef);
      editorContext.selectWRTFocusPolicy(newRef);
    }
    public String getKeyStroke() {
      return " &";
    }
    private static boolean isNotEmptyString(String str) {
      return str != null && str.length() > 0;
    }
  }
}
