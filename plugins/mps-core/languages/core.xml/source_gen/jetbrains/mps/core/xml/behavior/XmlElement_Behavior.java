package jetbrains.mps.core.xml.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class XmlElement_Behavior {
  public static void init(SNode thisNode) {
  }
  public static boolean call_isMultiline_8886258982030574875(SNode thisNode) {
    boolean multiline = false;
    for (SNode n : SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(5160134014823646133l, -7982110198386724200l), 6666499814681415858l, 1622293396948928802l, "content"))) {
      if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.core.xml.structure.XmlBaseElement")) {
        multiline = true;
      } else if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.core.xml.structure.XmlComment")) {
        if (ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(n, "jetbrains.mps.core.xml.structure.XmlComment"), MetaAdapterFactory.getContainmentLink(new UUID(5160134014823646133l, -7982110198386724200l), 6666499814681299064l, 1622293396949036151l, "lines"))).count() > 1) {
          multiline = true;
        }
      } else if ((n != null) && (SNodeOperations.getPrevSibling(n) != null)) {
        // <node> 
        // <node> 
      }
    }
    return multiline;
  }
}
