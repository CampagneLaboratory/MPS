package jetbrains.mps.console.actions.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Priority;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.smodel.SModelStereotype;
import com.intellij.openapi.project.Project;
import jetbrains.mps.console.tool.ConsoleTool;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ShowGenerationPlan_Action extends BaseAction {
  private static final Icon ICON = null;

  public ShowGenerationPlan_Action() {
    super("Show Generation Plan", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "ShowGenerationPlan", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("model", event.getData(MPSCommonDataKeys.MODEL));
    if (MapSequence.fromMap(_params).get("model") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final Wrappers._T<SNode> command = new Wrappers._T<SNode>();
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          command.value = SConceptOperations.createNewNode("jetbrains.mps.console.ideCommands.structure.ShowGenPlan", null);
          SLinkOperations.setTarget(command.value, "targetModel", SConceptOperations.createNewNode("jetbrains.mps.console.ideCommands.structure.ModelReference", null), true);
          SPropertyOperations.set(SLinkOperations.getTarget(command.value, "targetModel", true), "fqName", ((SModel) MapSequence.fromMap(_params).get("model")).getModelName());
          SPropertyOperations.set(SLinkOperations.getTarget(command.value, "targetModel", true), "name", SNodeOperations.getModelLongName(((SModel) MapSequence.fromMap(_params).get("model"))));
          SPropertyOperations.set(SLinkOperations.getTarget(command.value, "targetModel", true), "stereotype", SModelStereotype.getStereotype(((SModel) MapSequence.fromMap(_params).get("model"))));
        }
      });
      ((Project) MapSequence.fromMap(_params).get("project")).getComponent(ConsoleTool.class).executeCommand(command.value, null);
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "ShowGenerationPlan", t);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(ShowGenerationPlan_Action.class);
}
