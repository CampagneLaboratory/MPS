package jetbrains.mps.console.tool;

/*Generated by MPS */

import jetbrains.mps.ide.tools.BaseProjectTool;
import javax.swing.JPanel;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.UIEditorComponent;
import jetbrains.mps.project.ModuleContext;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindowAnchor;
import javax.swing.JComponent;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModelInternal;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import javax.swing.JButton;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class ConsoleTool extends BaseProjectTool implements ConsoleStream {
  private JPanel myMainComponent;
  private SModel myModel;
  private SNode myRoot;
  private UIEditorComponent myEditor;
  private SNode myLastCommand;
  private ModuleContext myContext;


  public ConsoleTool(Project project) {
    super(project, "Console", -1, null, ToolWindowAnchor.BOTTOM, false);
  }



  @Override
  public JComponent getComponent() {
    if (myMainComponent == null) {
      initMainComponent();
    }
    return myMainComponent;
  }



  protected void initMainComponent() {
    final jetbrains.mps.project.Project project = ProjectHelper.toMPSProject(getProject());
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        ConsoleTool.this.myContext = new ModuleContext(myModel.getModule(), project);
        ConsoleTool.this.myEditor = new UIEditorComponent(ProjectHelper.toMPSProject(getProject()).getRepository(), null);
        ((SModelInternal) myModel).addLanguage(PersistenceFacade.getInstance().createModuleReference("de1ad86d-6e50-4a02-b306-d4d17f64c375(jetbrains.mps.console.lang)"));
        ((SModelInternal) myModel).addLanguage(PersistenceFacade.getInstance().createModuleReference("1a8554c4-eb84-43ba-8c34-6f0d90c6e75a(jetbrains.mps.console.lang.commands)"));
        ((SModelInternal) myModel).addLanguage(PersistenceFacade.getInstance().createModuleReference("f3061a53-9226-4cc5-a443-f952ceaf5816(jetbrains.mps.baseLanguage)"));
        ConsoleTool.this.myRoot = SModelOperations.createNewRootNode(myModel, "jetbrains.mps.console.lang.structure.Console", null);
        myEditor.editNode(myRoot, myContext);
      }
    });
    nextCommand();

    myMainComponent = new JPanel();
    myMainComponent.setLayout(new BorderLayout());
    myMainComponent.add(myEditor, BorderLayout.CENTER);

    JPanel btnPanel = new JPanel();
    myMainComponent.add(btnPanel, BorderLayout.SOUTH);
    btnPanel.setLayout(new FlowLayout());
    btnPanel.add(new JButton(new AbstractAction("Execute") {
      public void actionPerformed(ActionEvent p0) {
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            TemporaryModels.getInstance().addMissingModuleImports(myModel);
            myLastCommand = ListSequence.fromList(SLinkOperations.getTargets(myRoot, "item", true)).last();
            if ((myLastCommand != null)) {
              BehaviorReflection.invokeVirtual(Void.class, myLastCommand, "virtual_execute_757553790980855637", new Object[]{project, new ConsoleStream() {
                public void addText(String text) {
                  System.out.print(text);
                }

                public void addNode(SNode node) {
                  System.out.print(node.getPresentation());
                }

                public void addNewLine() {
                  System.out.println("");
                }
              }});
            }
          }
        });
        nextCommand();
      }
    }));
    btnPanel.add(new JButton(new AbstractAction("Prev") {
      public void actionPerformed(ActionEvent p0) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            if ((SNodeOperations.getPrevSibling(myLastCommand) == null)) {

              return;
            }
            myLastCommand = SNodeOperations.cast(SNodeOperations.getPrevSibling(myLastCommand), "jetbrains.mps.console.lang.structure.Command");
            // <node> 
          }
        });
      }
    }));
    btnPanel.add(new JButton(new AbstractAction("Next") {
      public void actionPerformed(ActionEvent p0) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            if ((SNodeOperations.getNextSibling(myLastCommand) == null)) {
              return;
            }
            myLastCommand = SNodeOperations.cast(SNodeOperations.getNextSibling(myLastCommand), "jetbrains.mps.console.lang.structure.Command");
            // <node> 
          }
        });
      }
    }));
  }



  private void nextCommand() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        // <node> 
        // <node> 
      }
    });
  }



  @Override
  protected boolean isInitiallyAvailable() {
    return true;
  }



  @Override
  protected void doRegister() {
    super.doRegister();
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        ConsoleTool.this.myModel = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModule());
      }
    });
  }



  @Override
  protected void doUnregister() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        TemporaryModels.getInstance().dispose(myModel);
      }
    });
    super.doUnregister();
  }



  @Override
  protected void createTool(boolean b) {
  }



  private SNode getLastResult() {
    SNode last = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(myRoot, "item", true)).last(), "jetbrains.mps.console.lang.commands.structure.BLCommandResult");
    if (last != null) {
      return last;
    }
    return SLinkOperations.addNewChild(myRoot, "item", "jetbrains.mps.console.lang.commands.structure.BLCommandResult");
  }



  private SNode getLastResultLine() {
    SNode last = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(myRoot, "item", true)).last(), "jetbrains.mps.console.lang.commands.structure.BLCommandResult");
    if (last == null) {
      last = SLinkOperations.addNewChild(myRoot, "item", "jetbrains.mps.console.lang.commands.structure.BLCommandResult");
    }
    SNode lastLine = ListSequence.fromList(SLinkOperations.getTargets(last, "line", true)).last();
    if (lastLine == null) {
      lastLine = SLinkOperations.addNewChild(last, "line", "jetbrains.mps.console.lang.commands.structure.BLCommandResultLine");
    }

    return lastLine;
  }



  public void addText(String text) {
    ListSequence.fromList(SLinkOperations.getTargets(getLastResultLine(), "part", true)).addElement(_quotation_createNode_xg3v07_a0a0a72(text));
  }

  public void addNode(SNode node) {
    SNode n = _quotation_createNode_xg3v07_a0a0cb();
    SLinkOperations.setTarget(n, "target", node, false);
    ListSequence.fromList(SLinkOperations.getTargets(getLastResultLine(), "part", true)).addElement(n);
  }

  public void addNewLine() {
    SNode last = getLastResult();
    SLinkOperations.addNewChild(last, "line", "jetbrains.mps.console.lang.commands.structure.BLCommandResultLine");
  }

  private static SNode _quotation_createNode_xg3v07_a0a0a72(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.lang.commands.structure.TextResultPart", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "text", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_xg3v07_a0a0cb() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.lang.commands.structure.NodeResultPart", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }
}
