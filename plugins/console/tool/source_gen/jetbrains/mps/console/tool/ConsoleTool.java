package jetbrains.mps.console.tool;

/*Generated by MPS */

import jetbrains.mps.ide.tools.BaseProjectTool;
import javax.swing.JPanel;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.UIEditorComponent;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindowAnchor;
import javax.swing.JComponent;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.ModuleContext;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import javax.swing.JButton;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.kernel.model.TempModelCreator;

public class ConsoleTool extends BaseProjectTool {
  private JPanel myMainComponent;
  private SModel myModel;
  private SNode myRoot;
  private UIEditorComponent myEditor;
  private SNode myLastCommand;


  public ConsoleTool(Project project) {
    super(project, "Console", -1, null, ToolWindowAnchor.BOTTOM, false);
  }



  @Override
  public JComponent getComponent() {
    if (myMainComponent == null) {
      initMainComponent();
    }
    return myMainComponent;
  }



  protected void initMainComponent() {
    final jetbrains.mps.project.Project project = ProjectHelper.toMPSProject(getProject());
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        ConsoleTool.this.myEditor = new UIEditorComponent(new ModuleContext(myModel.getModule(), project), null);
        ((SModelInternal) myModel).addLanguage(ModuleRepositoryFacade.getInstance().getModule("jetbrains.mps.console.lang", Language.class).getModuleReference());
        ((SModelInternal) myModel).addLanguage(ModuleRepositoryFacade.getInstance().getModule("jetbrains.mps.console.lang.commands", Language.class).getModuleReference());
        ((SModelInternal) myModel).addLanguage(ModuleRepositoryFacade.getInstance().getModule("jetbrains.mps.baseLanguage", Language.class).getModuleReference());
        ConsoleTool.this.myRoot = SModelOperations.createNewRootNode(myModel, "jetbrains.mps.console.lang.structure.Console", null);
      }
    });
    nextCommand();

    myMainComponent = new JPanel();
    myMainComponent.setLayout(new BorderLayout());
    myMainComponent.add(myEditor, BorderLayout.CENTER);

    JPanel btnPanel = new JPanel();
    myMainComponent.add(btnPanel, BorderLayout.SOUTH);
    btnPanel.setLayout(new FlowLayout());
    btnPanel.add(new JButton(new AbstractAction("Execute") {
      public void actionPerformed(ActionEvent p0) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            if ((myLastCommand != null)) {
              BehaviorReflection.invokeVirtual(Void.class, myLastCommand, "virtual_execute_757553790980855637", new Object[]{project});
            }
          }
        });
        nextCommand();
      }
    }));
    btnPanel.add(new JButton(new AbstractAction("Prev") {
      public void actionPerformed(ActionEvent p0) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            if ((SNodeOperations.getPrevSibling(myLastCommand) == null)) {
              return;
            }
            myLastCommand = SNodeOperations.cast(SNodeOperations.getPrevSibling(myLastCommand), "jetbrains.mps.console.lang.structure.ConsoleCommand");
            myEditor.editNode(myLastCommand);
          }
        });
      }
    }));
    btnPanel.add(new JButton(new AbstractAction("Next") {
      public void actionPerformed(ActionEvent p0) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            if ((SNodeOperations.getNextSibling(myLastCommand) == null)) {
              return;
            }
            myLastCommand = SNodeOperations.cast(SNodeOperations.getNextSibling(myLastCommand), "jetbrains.mps.console.lang.structure.ConsoleCommand");
            myEditor.editNode(myLastCommand);
          }
        });
      }
    }));
  }



  private void nextCommand() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        ConsoleTool.this.myLastCommand = ListSequence.fromList(SLinkOperations.getTargets(myRoot, "command", true)).addElement(SConceptOperations.createNewNode("jetbrains.mps.console.lang.commands.structure.BaseLanguageCommand", null));
        myEditor.editNode(myLastCommand);
      }
    });
  }



  @Override
  protected boolean isInitiallyAvailable() {
    return true;
  }



  @Override
  protected void doRegister() {
    super.doRegister();
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        ConsoleTool.this.myModel = TempModelCreator.createTempModel();
      }
    });
  }



  @Override
  protected void doUnregister() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        TempModelCreator.disposeTempModel(myModel);
      }
    });
    super.doUnregister();
  }



  @Override
  protected void createTool(boolean b) {
  }
}
