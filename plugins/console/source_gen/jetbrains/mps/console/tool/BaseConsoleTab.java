package jetbrains.mps.console.tool;

/*Generated by MPS */

import javax.swing.JPanel;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.openapi.fileEditor.FileEditor;
import jetbrains.mps.nodeEditor.UIEditorComponent;
import jetbrains.mps.nodeEditor.Highlighter;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.CustomShortcutSet;
import javax.swing.KeyStroke;
import java.awt.event.KeyEvent;
import com.intellij.openapi.actionSystem.ShortcutSet;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import com.intellij.ide.PasteProvider;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import org.apache.log4j.Priority;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.workbench.action.ActionUtils;
import com.intellij.openapi.actionSystem.ActionManager;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.DataContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import java.awt.datatransfer.Transferable;
import com.intellij.ide.CopyPasteManagerEx;
import jetbrains.mps.ide.datatransfer.SModelDataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.nodeEditor.datatransfer.NodePaster;
import jetbrains.mps.persistence.PersistenceUtil;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SModelReference;
import java.util.Scanner;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.openapi.actionSystem.MouseShortcut;
import java.awt.event.MouseEvent;
import java.awt.BorderLayout;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionPlaces;
import javax.swing.JScrollPane;
import com.intellij.ui.ScrollPaneFactory;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import com.intellij.openapi.wm.IdeFocusManager;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public abstract class BaseConsoleTab extends JPanel {
  protected ConsoleTool myTool;
  protected SModel myModel;
  protected SNode myRoot;
  protected FileEditor myFileEditor;
  protected UIEditorComponent myEditor;
  protected Highlighter myHighlighter;
  protected String myTabTitle;


  public String getTitle() {
    return myTabTitle;
  }



  public SModel getConsoleModel() {
    return myModel;
  }



  public EditorComponent getEditorComponent() {
    return myEditor;
  }



  public SNode getRoot() {
    return myRoot;
  }



  public ConsoleTool getConsoleTool() {
    return myTool;
  }



  protected void addBuiltInImports() {
    Language base = ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("de1ad86d-6e50-4a02-b306-d4d17f64c375(jetbrains.mps.console.base)"), Language.class);
    Collection<Language> languages = ModuleRepositoryFacade.getInstance().getAllModules(Language.class);
    for (Language l : CollectionSequence.fromCollection(languages)) {
      if (l != base && !(l.getAllExtendedLanguages().contains(base))) {
        continue;
      }
      ((SModelInternal) myModel).addLanguage(l.getModuleReference());
      ((AbstractModule) myModel.getModule()).addUsedLanguage(l.getModuleReference());
      ((SModelInternal) (myModel)).addModelImport(l.getStructureModelDescriptor().getReference(), false);
      ((AbstractModule) myModel.getModule()).addDependency(l.getModuleReference(), false);
    }
    ((SModelInternal) myModel).addDevKit(PersistenceFacade.getInstance().createModuleReference("fbc25dd2-5da4-483a-8b19-70928e1b62d7(jetbrains.mps.devkit.general-purpose)"));
    ((AbstractModule) myModel.getModule()).addUsedDevkit(PersistenceFacade.getInstance().createModuleReference("fbc25dd2-5da4-483a-8b19-70928e1b62d7(jetbrains.mps.devkit.general-purpose)"));
  }



  protected void validateImports() {
    for (SModuleReference devKit : ListSequence.fromListWithValues(new ArrayList<SModuleReference>(), ((SModelInternal) myModel).importedDevkits())) {
      ((SModelInternal) myModel).deleteDevKit(devKit);
    }
    for (SModuleReference language : ListSequence.fromListWithValues(new ArrayList<SModuleReference>(), ((SModelInternal) myModel).importedLanguages())) {
      ((SModelInternal) myModel).deleteLanguage(language);
    }
    for (jetbrains.mps.smodel.SModel.ImportElement model : ListSequence.fromListWithValues(new ArrayList<jetbrains.mps.smodel.SModel.ImportElement>(), ((SModelInternal) myModel).importedModels())) {
      ((SModelInternal) myModel).deleteModelImport(model.getModelReference());
    }
    addBuiltInImports();
    TemporaryModels.getInstance().addMissingImports(myModel);
  }



  protected BaseAction registerKeyShortcut(BaseAction a, int key) {
    return registerShortcutSet(a, new CustomShortcutSet(KeyStroke.getKeyStroke(key, KeyEvent.CTRL_MASK)));
  }



  protected BaseAction registerShortcutSet(BaseAction a, ShortcutSet shortcutSet) {
    a.registerCustomShortcutSet(shortcutSet, myEditor);
    return a;
  }



  protected void createEditor() {
    this.myEditor = new UIEditorComponent(check_6q36mf_a0a0a0a62(ProjectHelper.toMPSProject(myTool.getProject())), null) {
      @Nullable
      @Override
      public Object getData(@NonNls String key) {
        if (PlatformDataKeys.FILE_EDITOR.is(key)) {
          return myFileEditor;
        }
        if (PlatformDataKeys.PASTE_PROVIDER.is(key)) {
          PasteProvider parentPasteProvider = as_6q36mf_a0a0a1a0a0a0a0ab(super.getData(key), PasteProvider.class);
          return (myTool.getPasteAsRef() ? new BaseConsoleTab.MyPasteProvider(parentPasteProvider) : parentPasteProvider);
        }
        return super.getData(key);
      }

      @Override
      public boolean isReadOnly() {
        final SNode selectedNode = getSelectedNode();
        final Wrappers._boolean editable = new Wrappers._boolean(false);
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            if (selectedNode != null) {
              EditorCell selectedCell = getSelectedCell();
              if (eq_6q36mf_a0a1a0a0a0a0a2a1a0a0a0ab(check_6q36mf_a0a1a0a0c0b0a0a0a62(selectedCell), SLinkOperations.getTarget(myRoot, "commandHolder", true)) && check_6q36mf_a0b0a0a2a1a0a0a0ab(selectedCell)) {
                editable.value = false;
              } else {
                editable.value = SNodeOperations.getAncestor(selectedNode, "jetbrains.mps.console.base.structure.CommandHolder", true, false) == SLinkOperations.getTarget(myRoot, "commandHolder", true);
              }
            } else {
              List<SNode> selectedNodes = getSelectedNodes();
              if (selectedNodes != null) {
                editable.value = ListSequence.fromList(selectedNodes).all(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SNodeOperations.getAncestor(it, "jetbrains.mps.console.base.structure.CommandHolder", false, false) == SLinkOperations.getTarget(myRoot, "commandHolder", true);
                  }
                });
              }
            }
          }
        });
        return !(editable.value);
      }
    };
    myEditor.editNode(myRoot);
  }




  protected void createConsoleModel() {
    this.myModel = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModuleWithSourceAndClassesGen());
    if (myModel == null) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("Error: could not create console model");
      }
      return;
    }
  }



  public void disposeConsoleTab() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        if (myEditor != null) {
          myEditor.dispose();
        }
        TemporaryModels.getInstance().dispose(myModel);
      }
    });
    myHighlighter.removeAdditionalEditorComponent(myEditor);
  }



  protected class ExecuteClosureAction extends BaseAction {
    public ExecuteClosureAction() {
      super("Execute Closure");
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> map) {
      ActionUtils.updateAndPerformAction(((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.console.actions.ExecuteActionAttachedToCurrentNode_Action")), event);
    }
  }



  public class MyPasteProvider implements PasteProvider {

    private PasteProvider myDefaultPasteProvider;


    public MyPasteProvider(PasteProvider defaultPasteProvider) {
      myDefaultPasteProvider = defaultPasteProvider;
    }



    public void performPaste(@NotNull final DataContext context) {
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          SNodeReference pastingNodeReference = null;
          try {
            for (Transferable trf : CopyPasteManagerEx.getInstanceEx().getAllContents()) {
              if (trf != null && trf.isDataFlavorSupported(SModelDataFlavor.sNodeReference)) {
                pastingNodeReference = (SNodeReference) trf.getTransferData(SModelDataFlavor.sNodeReference);
              }
              break;
            }
          } catch (UnsupportedFlavorException ignored) {
          } catch (IOException ignored) {
          }
          EditorCell currentCell = myEditor.getSelectedCell();
          SNode referenceTarget = check_6q36mf_a0d0a0a5jb(pastingNodeReference);
          if (referenceTarget != null && currentCell != null && !(check_6q36mf_a0a4a0a0f53(check_6q36mf_a0a0e0a0a5jb(pastingNodeReference), myModel))) {
            SNode refContainer = SConceptOperations.createNewNode("jetbrains.mps.console.base.structure.PastedNodeReference", null);
            SLinkOperations.setTarget(refContainer, "target", referenceTarget, false);
            NodePaster paster = new NodePaster(ListSequence.fromListAndArray(new ArrayList<SNode>(), refContainer));
            if (paster.canPaste(currentCell)) {
              paster.paste(currentCell);
            } else if (paster.canPasteWithRemove(myEditor.getSelectedNodes())) {
              paster.pasteWithRemove(myEditor.getSelectedNodes());
            }
            TemporaryModels.getInstance().addMissingImports(myModel);
          } else {
            check_6q36mf_a0a0e0a0a5jb_0(myDefaultPasteProvider, context);
          }
        }
      });
    }

    public boolean isPastePossible(@NotNull DataContext context) {
      return true;
    }

    public boolean isPasteEnabled(@NotNull DataContext context) {
      return true;
    }
  }



  protected abstract void loadHistory(String state);



  @Nullable
  public String saveHistory() {
    final Wrappers._T<String> result = new Wrappers._T<String>(null);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        try {
          result.value = (myModel == null ? null : PersistenceUtil.saveModel(myModel, MPSExtentions.MODEL));
        } catch (Exception e) {
          if (LOG.isEnabledFor(Priority.WARN)) {
            LOG.warn("Error on console model saving", e);
          }
        }
      }
    });
    return result.value;
  }



  protected ConsoleContext getConsoleContext() {
    return new ConsoleContext() {
      public Project getProject() {
        return ProjectHelper.toMPSProject(myTool.getProject());
      }

      public BaseConsoleTab getConsoleTab() {
        return BaseConsoleTab.this;
      }
    };
  }



  protected SNode getLastReponse() {
    SNode last = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(myRoot, "history", true), "item", true)).last(), "jetbrains.mps.console.base.structure.Response");
    if (last != null) {
      return last;
    }
    return SLinkOperations.addNewChild(SLinkOperations.getTarget(myRoot, "history", true), "item", "jetbrains.mps.console.base.structure.Response");
  }



  protected void addNodeImports(SNode node) {
    for (SNode subNode : ListSequence.fromList(SNodeOperations.getDescendants(node, null, true, new String[]{}))) {
      SModuleReference usedLanguage = subNode.getConcept().getLanguage().getSourceModule().getModuleReference();
      if (!(((SModelInternal) myModel).importedLanguages().contains(usedLanguage))) {
        ((SModelInternal) myModel).addLanguage(usedLanguage);
        ((AbstractModule) myModel.getModule()).addUsedLanguage(usedLanguage);
      }
      for (SReference ref : Sequence.fromIterable(SNodeOperations.getReferences(subNode))) {
        SModelReference usedModel = ref.getTargetSModelReference();
        if (usedModel != null && !(((SModelInternal) myModel).importedModels().contains(usedModel))) {
          ((SModelInternal) myModel).addModelImport(usedModel, false);
          ((AbstractModule) myModel.getModule()).addDependency(SNodeOperations.getModel(SLinkOperations.getTargetNode(ref)).getModule().getModuleReference(), false);
        }
      }
    }
  }



  protected ConsoleStream getConsoleStream() {
    return new ConsoleStream() {
      public void addText(String text) {
        Scanner scanner = new Scanner(text);
        while (scanner.hasNextLine()) {
          String line = scanner.nextLine();
          if ((line != null && line.length() > 0)) {
            ListSequence.fromList(SLinkOperations.getTargets(getLastReponse(), "item", true)).addElement(_quotation_createNode_6q36mf_a0a0a1a1a0a0a0a74(line));
          }
          if (scanner.hasNextLine() || text.charAt(text.length() - 1) == '\n') {
            SLinkOperations.addNewChild(getLastReponse(), "item", "jetbrains.mps.console.base.structure.NewLineResponseItem");
          }
        }
      }

      public void addNode(SNode node) {
        addNodeImports(node);
        SLinkOperations.setTarget(SLinkOperations.addNewChild(getLastReponse(), "item", "jetbrains.mps.console.base.structure.NodeResponseItem"), "node", node, true);
      }
    };
  }




  public BaseConsoleTab(ConsoleTool tool, String title, @Nullable String history) {
    myTool = tool;
    myTabTitle = title;
    initConsoleTab(history);
  }



  protected void registerActions(DefaultActionGroup group) {
    registerShortcutSet(new BaseConsoleTab.ExecuteClosureAction(), new CustomShortcutSet(new MouseShortcut(MouseEvent.BUTTON1, 0, 1)));
  }



  protected void initConsoleTab(@Nullable final String history) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        createConsoleModel();
        addBuiltInImports();
        loadHistory(history);
        createEditor();
        myFileEditor = new ConsoleFileEditor(myEditor);
      }
    });

    this.setLayout(new BorderLayout());


    DefaultActionGroup group = new DefaultActionGroup();
    registerActions(group);
    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, false);
    JPanel toolbarComponent = new JPanel(new BorderLayout());
    toolbarComponent.add(toolbar.getComponent(), BorderLayout.CENTER);

    this.add(toolbarComponent, BorderLayout.WEST);
    JPanel editorPanel = new JPanel(new BorderLayout());
    editorPanel.add(myEditor);
    JScrollPane scrollPane = ScrollPaneFactory.createScrollPane(editorPanel);
    scrollPane.getVerticalScrollBar().setBlockIncrement(10);
    this.add(scrollPane, BorderLayout.CENTER);
    this.add(myEditor.getUpperPanel(), BorderLayout.NORTH);

    myHighlighter = check_6q36mf_a0t0cc(myTool.getProject());
    myHighlighter.addAdditionalEditorComponent(myEditor);
  }



  public void execute(final SNode command, @Nullable final Runnable executeBefore, @Nullable final Runnable executeAfter) {
    addNodeImports(command);
    SLinkOperations.setTarget(SLinkOperations.getTarget(myRoot, "commandHolder", true), "command", SNodeOperations.copyNode(command), true);
    myTool.selectTab(this);
    BehaviorReflection.invokeVirtual(Void.class, command, "virtual_execute_6854397602732226506", new Object[]{getConsoleContext(), getConsoleStream(), new Runnable() {
      public void run() {
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(myRoot, "history", true), "item", true)).addElement(_quotation_createNode_6q36mf_a0a0a0a0c0a3a65(command));
        check_6q36mf_a1a0a0c0a3a65(executeBefore);
      }
    }, new Runnable() {
      public void run() {
        check_6q36mf_a0a0a0d0a3a65(executeAfter);
      }
    }});
  }



  public void selectNode(final SNode nodeToSelect) {
    myTool.getToolWindow().activate(new Runnable() {
      public void run() {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            myEditor.selectNode(nodeToSelect);
            getEditorComponent().ensureSelectionVisible();
            IdeFocusManager.getInstance(myTool.getProject()).requestFocus(myEditor, false);
          }
        });
      }
    });
    myTool.selectTab(this);
  }


  protected static Logger LOG = LogManager.getLogger(BaseConsoleTab.class);

  private static SRepository check_6q36mf_a0a0a0a62(Project checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getRepository();
    }
    return null;
  }

  private static boolean check_6q36mf_a0b0a0a2a1a0a0a0ab(EditorCell checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.isBig();
    }
    return false;
  }

  private static SNode check_6q36mf_a0a1a0a0c0b0a0a0a62(EditorCell checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getSNode();
    }
    return null;
  }

  private static SNode check_6q36mf_a0d0a0a5jb(SNodeReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(MPSModuleRepository.getInstance());
    }
    return null;
  }

  private static boolean check_6q36mf_a0a4a0a0f53(SModelReference checkedDotOperand, SModel myModel) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.equals(myModel.getReference());
    }
    return false;
  }

  private static SModelReference check_6q36mf_a0a0e0a0a5jb(SNodeReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelReference();
    }
    return null;
  }

  private static void check_6q36mf_a0a0e0a0a5jb_0(PasteProvider checkedDotOperand, DataContext context) {
    if (null != checkedDotOperand) {
      checkedDotOperand.performPaste(context);
    }

  }

  private static SNode _quotation_createNode_6q36mf_a0a0a1a1a0a0a0a74(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.TextResponseItem", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "text", (String) parameter_1);
    return quotedNode_2;
  }

  private static Highlighter check_6q36mf_a0t0cc(com.intellij.openapi.project.Project checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getComponent(Highlighter.class);
    }
    return null;
  }

  private static SNode _quotation_createNode_6q36mf_a0a0a0a0c0a3a65(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.CommandHolder", null, null, false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("command", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static void check_6q36mf_a1a0a0c0a3a65(Runnable checkedDotOperand) {
    if (null != checkedDotOperand) {
      checkedDotOperand.run();
    }

  }

  private static void check_6q36mf_a0a0a0d0a3a65(Runnable checkedDotOperand) {
    if (null != checkedDotOperand) {
      checkedDotOperand.run();
    }

  }

  private static <T> T as_6q36mf_a0a0a1a0a0a0a0ab(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static boolean eq_6q36mf_a0a1a0a0a0a0a2a1a0a0a0ab(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
