package jetbrains.mps.console.tool;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.ui.content.tabs.PinToolwindowTabAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.icons.AllIcons;
import jetbrains.mps.workbench.action.BaseAction;
import java.util.Map;

public class HistoryConsoleTab extends BaseConsoleTab {


  public HistoryConsoleTab(ConsoleTool tool, String title, @Nullable String history) {
    super(tool, title, history);
  }



  protected void loadHistory(final String state) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SModel loadedModel = loadHistoryModel(state);
        myRoot = SModelOperations.createNewRootNode(myModel, "jetbrains.mps.console.base.structure.OutputConsoleRoot", null);
        if (loadedModel == null || ListSequence.fromList(SModelOperations.getRoots(loadedModel, "jetbrains.mps.console.base.structure.OutputConsoleRoot")).isEmpty()) {
          SLinkOperations.setTarget(myRoot, "history", SConceptOperations.createNewNode("jetbrains.mps.console.base.structure.History", null), true);
        } else {
          SLinkOperations.setTarget(myRoot, "history", SLinkOperations.getTarget(ListSequence.fromList(SModelOperations.getRoots(loadedModel, "jetbrains.mps.console.base.structure.OutputConsoleRoot")).first(), "history", true), true);
        }
        SLinkOperations.setTarget(myRoot, "commandHolder", SConceptOperations.createNewNode("jetbrains.mps.console.base.structure.CommandHolder", null), true);
        TemporaryModels.getInstance().addMissingImports(myModel);
      }
    });
  }



  protected void registerActions(DefaultActionGroup group) {
    super.registerActions(group);
    group.add(new HistoryConsoleTab.CloseAction());
    group.add(new PinToolwindowTabAction() {
      @Override
      public void update(AnActionEvent event) {
        super.update(event);
        event.getPresentation().setIcon(AllIcons.General.Pin_tab);
        event.getPresentation().setEnabledAndVisible(true);
      }
    });
  }



  private class CloseAction extends BaseAction {
    public CloseAction() {
      super("Close", "Close tab", AllIcons.Actions.Cancel);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      myTool.closeTab(HistoryConsoleTab.this);
    }
  }


}
