package jetbrains.mps.console.tool;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.persistence.PersistenceUtil;
import jetbrains.mps.project.MPSExtentions;
import org.apache.log4j.Priority;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.nodeEditor.UIEditorComponent;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.annotations.NonNls;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.project.Project;

public class HistoryConsoleTab extends BaseConsoleTab {

  private SNode myHistory;


  public HistoryConsoleTab(ConsoleTool tool, String title, @Nullable String history) {
    super(tool, title, history);
  }



  protected void loadHistory(final String state) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SModel loadedModel = null;
        if (state != null) {
          try {
            loadedModel = PersistenceUtil.loadModel(state, MPSExtentions.MODEL);
          } catch (Exception e) {
            if (LOG.isEnabledFor(Priority.ERROR)) {
              LOG.error("Error on loading console history", e);
            }
          }
        }
        if (loadedModel == null || ListSequence.fromList(SModelOperations.getRoots(loadedModel, "jetbrains.mps.console.base.structure.History")).isEmpty()) {
          myHistory = SConceptOperations.createNewNode("jetbrains.mps.console.base.structure.History", null);
        } else {
          myHistory = ListSequence.fromList(SModelOperations.getRoots(loadedModel, "jetbrains.mps.console.base.structure.History")).first();
        }
        SModelOperations.addRootNode(myModel, myHistory);
        TemporaryModels.getInstance().addMissingImports(myModel);
      }
    });
  }



  protected void createEditor() {
    this.myEditor = new UIEditorComponent(check_ihqhbd_a0a0a0a7(ProjectHelper.toMPSProject(myTool.getProject())), null) {
      @Nullable
      @Override
      public Object getData(@NonNls String key) {
        if (PlatformDataKeys.FILE_EDITOR.is(key)) {
          return myFileEditor;
        }
        return super.getData(key);
      }
    };
    myEditor.editNode(myHistory);
  }



  protected void registerActions(DefaultActionGroup group) {
    super.registerActions(group);
    group.add(new HistoryConsoleTab.CloseAction());
  }



  private class CloseAction extends BaseAction {
    public CloseAction() {
      super("Close", "Close tab", IconContainer.ICON_c0a0l);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      myTool.closeTab(HistoryConsoleTab.this);
    }
  }



  protected SNode getHistory() {
    return myHistory;
  }


  protected static Logger LOG = LogManager.getLogger(HistoryConsoleTab.class);

  private static SRepository check_ihqhbd_a0a0a0a7(Project checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getRepository();
    }
    return null;
  }
}
