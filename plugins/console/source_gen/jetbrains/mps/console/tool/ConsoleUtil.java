package jetbrains.mps.console.tool;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SModel;
import javax.swing.SwingUtilities;
import org.apache.log4j.Priority;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.script.ScriptBuilder;
import jetbrains.mps.make.facet.IFacet;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.make.script.IScriptController;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.make.script.IOption;
import jetbrains.mps.make.script.IQuery;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.make.IMakeService;
import java.util.concurrent.Future;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.smodel.resources.ModelsToResources;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.concurrent.ExecutionException;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ConsoleUtil {


  public static String getGeneratedModelName(ConsoleContext context) {
    return context.getConsoleTab().getConsoleModel().getModelName() + ".Main";
  }



  public static boolean make(final Project project, final SModel model) {
    if (SwingUtilities.isEventDispatchThread()) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("Must be called not from EDT");
      }
      return false;
    }

    IScript scr = new ScriptBuilder().withFacetNames(new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("jetbrains.mps.make.facets.JavaCompile"), new IFacet.Name("jetbrains.mps.make.facets.ReloadClasses"), new IFacet.Name("jetbrains.mps.make.facets.Make")).withFinalTarget(new ITarget.Name("jetbrains.mps.make.facets.Make.make")).toScript();
    IScriptController ctl = new IScriptController.Stub(new IConfigMonitor.Stub() {
      @Override
      public <T extends IOption> T relayQuery(IQuery<T> query) {
        return query.defaultOption();
      }
    }, new IJobMonitor.Stub());

    IOperationContext projectOperationContext = new ProjectOperationContext(project);
    MakeSession session = new MakeSession(projectOperationContext, null, true);
    if (IMakeService.INSTANCE.get().openNewSession(session)) {
      Future<IResult> future = IMakeService.INSTANCE.get().make(session, new ModelsToResources(projectOperationContext, Sequence.<SModel>singleton(model)).resources(false), scr, ctl);
      try {
        return future.get().isSucessful();
      } catch (InterruptedException e) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Error on making temporary model", e);
        }
      } catch (ExecutionException e) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Error on making temporary model", e);
        }
      }
    }
    return false;
  }


  protected static Logger LOG = LogManager.getLogger(ConsoleUtil.class);
}
