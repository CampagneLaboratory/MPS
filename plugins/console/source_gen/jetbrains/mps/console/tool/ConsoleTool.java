package jetbrains.mps.console.tool;

/*Generated by MPS */

import com.intellij.openapi.components.State;
import com.intellij.openapi.components.Storage;
import com.intellij.openapi.components.StoragePathMacros;
import jetbrains.mps.ide.tools.BaseProjectTool;
import com.intellij.openapi.components.PersistentStateComponent;
import javax.swing.JPanel;
import org.jetbrains.mps.openapi.model.SModel;
import javax.swing.JComboBox;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.UIEditorComponent;
import com.intellij.openapi.fileEditor.FileEditor;
import jetbrains.mps.project.ModuleContext;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindowAnchor;
import javax.swing.JComponent;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.project.AbstractModule;
import java.awt.BorderLayout;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import java.awt.event.KeyEvent;
import com.intellij.openapi.actionSystem.CustomShortcutSet;
import com.intellij.openapi.actionSystem.MouseShortcut;
import java.awt.event.MouseEvent;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.KeyStroke;
import com.intellij.openapi.actionSystem.ShortcutSet;
import javax.swing.JScrollPane;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.ide.findusages.model.scopes.ProjectScope;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.console.actions.ClosureHoldingNodeUtil;
import jetbrains.mps.workbench.action.ActionUtils;
import jetbrains.mps.persistence.PersistenceUtil;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

@State(name = "ConsoleHistory", storages = @Storage(file = StoragePathMacros.WORKSPACE_FILE)
)
public class ConsoleTool extends BaseProjectTool implements PersistentStateComponent<ConsoleTool.MyState> {
  private static final String PROJECT_SCOPE = "in project";
  private static final String GLOBAL_SCOPE = "globally";

  private JPanel myMainComponent;
  private SModel myModel;
  private ConsoleTool.MyState loadedState;
  private JComboBox myScopeCombo;

  private SNode myHistRoot;
  private UIEditorComponent myHistEditor;
  private SNode myNewCommand = null;
  private SNode myCursor = null;

  private SNode myCommandRoot;
  private UIEditorComponent myCommandEditor;
  private FileEditor myCommandFileEditor;

  private ModuleContext myContext;



  public ConsoleTool(Project project) {
    super(project, "Console", -1, IconContainer.ICON_d0a02, ToolWindowAnchor.BOTTOM, false);
  }



  @Override
  public JComponent getComponent() {
    if (myMainComponent == null) {
      initMainComponent();
    }
    return myMainComponent;
  }



  protected void initMainComponent() {
    final jetbrains.mps.project.Project project = ProjectHelper.toMPSProject(getProject());
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {

        loadHistory();

        ConsoleTool.this.myHistEditor = new UIEditorComponent(ProjectHelper.toMPSProject(getProject()).getRepository(), null) {
          @Override
          public boolean isReadOnly() {
            return true;
          }
        };
        myHistEditor.setFocusable(false);

        ConsoleTool.this.myCommandEditor = new UIEditorComponent(ProjectHelper.toMPSProject(getProject()).getRepository(), null) {
          @Nullable
          @Override
          public Object getData(@NonNls String key) {
            if (PlatformDataKeys.FILE_EDITOR.equals(key)) {
              return myCommandFileEditor;
            }
            return super.getData(key);
          }
        };
        myCommandFileEditor = new ConsoleFileEditor(myCommandEditor);
        Language base = ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("de1ad86d-6e50-4a02-b306-d4d17f64c375(jetbrains.mps.console.base)"), Language.class);
        Collection<Language> languages = ModuleRepositoryFacade.getInstance().getAllModules(Language.class);
        for (Language l : CollectionSequence.fromCollection(languages)) {
          if (l != base && !(l.getAllExtendedLanguages().contains(base))) {
            continue;
          }
          ((SModelInternal) myModel).addLanguage(l.getModuleReference());
          ((AbstractModule) myModel.getModule()).addUsedLanguage(l.getModuleReference());
        }
        ((SModelInternal) myModel).addDevKit(PersistenceFacade.getInstance().createModuleReference("fbc25dd2-5da4-483a-8b19-70928e1b62d7(jetbrains.mps.devkit.general-purpose)"));
        ((AbstractModule) myModel.getModule()).addUsedDevkit(PersistenceFacade.getInstance().createModuleReference("fbc25dd2-5da4-483a-8b19-70928e1b62d7(jetbrains.mps.devkit.general-purpose)"));

        ConsoleTool.this.myContext = new ModuleContext(myModel.getModule(), project);

        myHistEditor.editNode(myHistRoot, myContext);
        myCommandEditor.editNode(myCommandRoot, myContext);
      }
    });

    myMainComponent = new JPanel();
    myMainComponent.setLayout(new BorderLayout());
    myMainComponent.add(createScopeComponent(), BorderLayout.SOUTH);
    myMainComponent.add(getToolbarComponent(project), BorderLayout.WEST);
    myMainComponent.add(createEditorsComponent(), BorderLayout.CENTER);
  }



  private JComponent getToolbarComponent(jetbrains.mps.project.Project project) {
    DefaultActionGroup group = new DefaultActionGroup();
    group.add(registerKeyShortcut(new ConsoleTool.ExecuteAction(project), KeyEvent.VK_ENTER));
    group.add(registerKeyShortcut(new ConsoleTool.PrevCmdAction(), KeyEvent.VK_UP));
    group.add(registerKeyShortcut(new ConsoleTool.NextCmdAction(), KeyEvent.VK_DOWN));
    group.add(registerKeyShortcut(new ConsoleTool.ClearAction(), KeyEvent.VK_BACK_SPACE));
    group.add(registerShortcutSet(new ConsoleTool.ExecuteClosureAction(), new CustomShortcutSet(new MouseShortcut(MouseEvent.BUTTON1, KeyEvent.CTRL_MASK, 1))));
    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, false);

    JPanel res = new JPanel(new BorderLayout());
    res.add(toolbar.getComponent(), BorderLayout.CENTER);
    return res;
  }



  private BaseAction registerKeyShortcut(BaseAction a, int key) {
    return registerShortcutSet(a, new CustomShortcutSet(KeyStroke.getKeyStroke(key, KeyEvent.CTRL_MASK)));
  }



  private BaseAction registerShortcutSet(BaseAction a, ShortcutSet shortcutSet) {
    a.registerCustomShortcutSet(shortcutSet, myCommandEditor);
    a.registerCustomShortcutSet(shortcutSet, myHistEditor);
    return a;
  }



  private JScrollPane createEditorsComponent() {
    JPanel editorsPanel = new JPanel(new BorderLayout());
    editorsPanel.add(myHistEditor, BorderLayout.CENTER);
    editorsPanel.add(myCommandEditor, BorderLayout.SOUTH);
    // todo:  
    // <node> 
    // <node> 
    return new JScrollPane(editorsPanel);
  }



  private JComponent createScopeComponent() {
    myScopeCombo = new JComboBox(new String[]{PROJECT_SCOPE, GLOBAL_SCOPE});
    JPanel res = new JPanel(new BorderLayout());
    res.add(new JPanel(), BorderLayout.CENTER);
    res.add(myScopeCombo, BorderLayout.EAST);
    return res;
  }



  private SNode lastCmd() {
    SNode cur = ListSequence.fromList(SLinkOperations.getTargets(myHistRoot, "item", true)).last();
    while ((cur != null) && !(SNodeOperations.isInstanceOf(cur, "jetbrains.mps.console.base.structure.CommandHolder"))) {
      cur = SNodeOperations.cast(SNodeOperations.getPrevSibling(cur), "jetbrains.mps.console.base.structure.HistoryItem");
    }
    return SNodeOperations.cast(cur, "jetbrains.mps.console.base.structure.CommandHolder");
  }



  private SNode getPrevCmd(SNode cmd) {
    SNode item = cmd;
    do {
      item = SNodeOperations.cast(SNodeOperations.getPrevSibling(item), "jetbrains.mps.console.base.structure.HistoryItem");
    } while ((item != null) && !(SNodeOperations.isInstanceOf(item, "jetbrains.mps.console.base.structure.CommandHolder")));

    return SNodeOperations.cast(item, "jetbrains.mps.console.base.structure.CommandHolder");
  }

  private SNode getNextCmd(SNode cmd) {
    SNode item = cmd;
    do {
      item = SNodeOperations.cast(SNodeOperations.getNextSibling(item), "jetbrains.mps.console.base.structure.HistoryItem");
    } while ((item != null) && !(SNodeOperations.isInstanceOf(item, "jetbrains.mps.console.base.structure.CommandHolder")));

    return SNodeOperations.cast(item, "jetbrains.mps.console.base.structure.CommandHolder");
  }

  @Override
  protected boolean isInitiallyAvailable() {
    return true;
  }



  @Override
  protected void doRegister() {
    super.doRegister();
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        ConsoleTool.this.myModel = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModuleWithSourceAndClassesGen());
      }
    });
  }



  @Override
  protected void doUnregister() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        if (myHistEditor != null) {
          myHistEditor.dispose();
        }
        if (myCommandEditor != null) {
          myCommandEditor.dispose();
        }
        TemporaryModels.getInstance().dispose(myModel);
      }
    });
    super.doUnregister();
  }



  @Override
  protected void createTool(boolean b) {
  }



  private SNode getLastResult() {
    SNode last = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(myHistRoot, "item", true)).last(), "jetbrains.mps.console.base.structure.CommandResult");
    if (last != null) {
      return last;
    }
    return SLinkOperations.addNewChild(myHistRoot, "item", "jetbrains.mps.console.base.structure.CommandResult");
  }



  private SNode getLastResultLine() {
    SNode last = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(myHistRoot, "item", true)).last(), "jetbrains.mps.console.base.structure.CommandResult");
    if (last == null) {
      last = SLinkOperations.addNewChild(myHistRoot, "item", "jetbrains.mps.console.base.structure.CommandResult");
    }
    SNode lastLine = ListSequence.fromList(SLinkOperations.getTargets(last, "line", true)).last();
    if (lastLine == null) {
      lastLine = SLinkOperations.addNewChild(last, "line", "jetbrains.mps.console.base.structure.CommandResultLine");
    }

    return lastLine;
  }



  private class ExecuteAction extends BaseAction {
    private jetbrains.mps.project.Project myProject;

    public ExecuteAction(jetbrains.mps.project.Project project) {
      super("Execute", "Execute last command", IconContainer.ICON_c0a1ac);
      ExecuteAction.this.myProject = project;
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          myCursor = null;
          TemporaryModels.getInstance().addMissingImports(myModel);
          final SNode lastCmd = SLinkOperations.getTarget(myCommandRoot, "command", true);
          if ((lastCmd == null)) {
            return;
          }

          final SNode willBeLastHist = SNodeOperations.copyNode(myCommandRoot);
          final SNode res = _quotation_createNode_xg3v07_a0g0a0a2ac();
          final SearchScope scope = (myScopeCombo.getSelectedItem() == ConsoleTool.PROJECT_SCOPE ?
            new ProjectScope(myProject) :
            GlobalScope.getInstance()
          );
          BehaviorReflection.invokeVirtual(Void.class, SNodeOperations.cast(lastCmd, "jetbrains.mps.console.base.structure.Command"), "virtual_execute_757553790980855637", new Object[]{new ConsoleContext() {
            public jetbrains.mps.project.Project getProject() {
              return myProject;
            }

            public SearchScope getScope() {
              return scope;
            }
          }, new ConsoleStream() {
            public void addText(String text) {
              checkResultAvailable();
              ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(res, "line", true)).last(), "part", true)).addElement(_quotation_createNode_xg3v07_a0a1a0a0b0a8a0a0c25(text));
            }

            public void addNode(SNode node) {
              checkResultAvailable();
              SLinkOperations.setTarget(SLinkOperations.addNewChild(ListSequence.fromList(SLinkOperations.getTargets(res, "line", true)).last(), "part", "jetbrains.mps.console.base.structure.NodeResultPart"), "target", ((SNode) node), false);
            }

            public void addAction(String text, _FunctionTypes._void_P0_E0 action) {
              checkResultAvailable();
              SNode result = _quotation_createNode_xg3v07_a0b0c0a1a0i0a0a2ac();
              SPropertyOperations.set(result, "text", text);
              ClosureHoldingNodeUtil.getInstance().register(result, action);
              ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(res, "line", true)).last(), "part", true)).addElement(result);
            }

            public void addNewLine() {
              checkResultAvailable();
              SLinkOperations.addNewChild(res, "line", "jetbrains.mps.console.base.structure.CommandResultLine");
            }

            private void checkResultAvailable() {
              if ((SNodeOperations.getNextSibling(willBeLastHist) == null)) {
                SNodeOperations.insertNextSiblingChild(willBeLastHist, res);
              }
            }
          }, new Runnable() {
            public void run() {
              ListSequence.fromList(SLinkOperations.getTargets(myHistRoot, "item", true)).addElement(willBeLastHist);
              SLinkOperations.setTarget(myCommandRoot, "command", null, true);
              myCursor = null;
              myNewCommand = null;
            }
          }});
        }
      });
    }
  }



  private class ClearAction extends BaseAction {
    public ClearAction() {
      super("Clear", "Clear console window", IconContainer.ICON_c0a0cc);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      SLinkOperations.getTargets(myHistRoot, "item", true).clear();
      SLinkOperations.setTarget(myCommandRoot, "command", null, true);
    }
  }



  private class PrevCmdAction extends BaseAction {
    public PrevCmdAction() {
      super("Prev", "Previous command", IconContainer.ICON_c0a0ec);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      SNode lastCmd = lastCmd();
      if ((lastCmd == null)) {
        return;
      }

      SNode newCursor;
      if (myCursor == null) {
        newCursor = lastCmd;
        myNewCommand = SNodeOperations.copyNode(myCommandRoot);
      } else {
        newCursor = getPrevCmd(myCursor);
      }
      if ((newCursor == null)) {
        return;
      }
      myCursor = newCursor;
      SLinkOperations.setTarget(myCommandRoot, "command", SNodeOperations.copyNode(SLinkOperations.getTarget(myCursor, "command", true)), true);
    }
  }



  private class NextCmdAction extends BaseAction {
    public NextCmdAction() {
      super("Next", "Next command", IconContainer.ICON_c0a0gc);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      if ((myCursor == null)) {
        return;
      }

      SNode newCursor = getNextCmd(myCursor);
      if (!((newCursor == null))) {
        myCursor = newCursor;
        SLinkOperations.setTarget(myCommandRoot, "command", SNodeOperations.copyNode(SLinkOperations.getTarget(myCursor, "command", true)), true);
      } else {
        myCursor = null;
        SLinkOperations.setTarget(myCommandRoot, "command", SNodeOperations.copyNode(SLinkOperations.getTarget(myNewCommand, "command", true)), true);
      }
    }
  }



  private class ExecuteClosureAction extends BaseAction {
    public ExecuteClosureAction() {
      super("Execute Closure");
    }

    protected void doExecute(final AnActionEvent event, Map<String, Object> map) {
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          ActionUtils.updateAndPerformAction(ActionManager.getInstance().getAction("jetbrains.mps.console.actions.ExecuteClosureAttachedToCurrentNode_Action"), event);
        }
      });
    }
  }



  public static class MyState {
    public String state;
  }



  public void loadHistory() {
    SModel loadedModel = (loadedState == null ?
      null :
      PersistenceUtil.loadModel(loadedState.state, MPSExtentions.MODEL)
    );
    if (loadedModel == null || ListSequence.fromList(SModelOperations.getRoots(loadedModel, "jetbrains.mps.console.base.structure.History")).isEmpty()) {
      myHistRoot = SModelOperations.createNewRootNode(myModel, "jetbrains.mps.console.base.structure.History", null);
    } else {
      myHistRoot = ListSequence.fromList(SModelOperations.getRoots(loadedModel, "jetbrains.mps.console.base.structure.History")).first();
      SModelOperations.addRootNode(myModel, myHistRoot);
    }
    this.myCommandRoot = SModelOperations.createNewRootNode(myModel, "jetbrains.mps.console.base.structure.CommandHolder", null);
    TemporaryModels.getInstance().addMissingImports(myModel);
    loadedState = null;
  }



  public void loadState(ConsoleTool.MyState state) {
    loadedState = state;
  }



  @Nullable
  public ConsoleTool.MyState getState() {
    final ConsoleTool.MyState result = new ConsoleTool.MyState();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        try {
          result.state = PersistenceUtil.saveModel(myModel, MPSExtentions.MODEL);
        } catch (Exception ignored) {
          // todo: log 
        }
      }
    });
    return (result.state == null ?
      null :
      result
    );
  }



  private static SNode _quotation_createNode_xg3v07_a0g0a0a2ac() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.CommandResult", null, null, GlobalScope.getInstance(), false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.CommandResultLine", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.addChild("line", quotedNode_2);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_xg3v07_a0a1a0a0b0a8a0a0c25(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.TextResultPart", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "text", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_xg3v07_a0b0c0a1a0i0a0a2ac() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.NodeWithClosure", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }
}
