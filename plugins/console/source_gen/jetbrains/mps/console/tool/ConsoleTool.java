package jetbrains.mps.console.tool;

/*Generated by MPS */

import jetbrains.mps.ide.tools.BaseProjectTool;
import javax.swing.JPanel;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.UIEditorComponent;
import jetbrains.mps.project.ModuleContext;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindowAnchor;
import javax.swing.JComponent;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import java.awt.event.KeyEvent;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.JScrollPane;
import java.awt.BorderLayout;
import javax.swing.JComboBox;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class ConsoleTool extends BaseProjectTool implements ConsoleStream {
  private JPanel myMainComponent;
  private SModel myModel;

  private SNode myHistRoot;
  private UIEditorComponent myHistEditor;
  private SNode myNewCommand = null;
  private SNode myCursor = null;

  private SNode myCommandRoot;
  private UIEditorComponent myCommandEditor;

  private ModuleContext myContext;



  public ConsoleTool(Project project) {
    super(project, "Console", -1, IconContainer.ICON_d0a41, ToolWindowAnchor.BOTTOM, false);
  }



  @Override
  public JComponent getComponent() {
    if (myMainComponent == null) {
      initMainComponent();
    }
    return myMainComponent;
  }



  protected void initMainComponent() {
    final jetbrains.mps.project.Project project = ProjectHelper.toMPSProject(getProject());
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        ConsoleTool.this.myHistEditor = new UIEditorComponent(ProjectHelper.toMPSProject(getProject()).getRepository(), null) {
          @Override
          public boolean isReadOnly() {
            return true;
          }
        };
        myHistEditor.setFocusable(false);

        ConsoleTool.this.myCommandEditor = new UIEditorComponent(ProjectHelper.toMPSProject(getProject()).getRepository(), null);

        Language[] langs = new Language[]{ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("de1ad86d-6e50-4a02-b306-d4d17f64c375(jetbrains.mps.console.base)"), Language.class), ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("1a8554c4-eb84-43ba-8c34-6f0d90c6e75a(jetbrains.mps.console.blCommand)"), Language.class), ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("f3061a53-9226-4cc5-a443-f952ceaf5816(jetbrains.mps.baseLanguage)"), Language.class), ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("a5e4de53-46a3-44da-aab3-68fdf1c34ed0(jetbrains.mps.console.ideCommands)"), Language.class)};
        for (Language l : langs) {
          ((SModelInternal) myModel).addLanguage(l.getModuleReference());
          ((AbstractModule) myModel.getModule()).addUsedLanguage(l.getModuleReference());
        }

        ConsoleTool.this.myContext = new ModuleContext(myModel.getModule(), project);

        ConsoleTool.this.myHistRoot = SModelOperations.createNewRootNode(myModel, "jetbrains.mps.console.base.structure.History", null);
        myHistEditor.editNode(myHistRoot, myContext);

        ConsoleTool.this.myCommandRoot = SModelOperations.createNewRootNode(myModel, "jetbrains.mps.console.base.structure.CommandHolder", null);
        myCommandEditor.editNode(myCommandRoot, myContext);
      }
    });

    DefaultActionGroup group = new DefaultActionGroup();

    group.add(registerShortcut(new ConsoleTool.ExecuteAction(project), KeyEvent.VK_ENTER, KeyEvent.CTRL_MASK));
    group.add(registerShortcut(new ConsoleTool.PrevCmdAction(), KeyEvent.VK_UP, KeyEvent.CTRL_MASK));
    group.add(registerShortcut(new ConsoleTool.NextCmdAction(), KeyEvent.VK_DOWN, KeyEvent.CTRL_MASK));
    group.add(registerShortcut(new ConsoleTool.ClearAction(), KeyEvent.VK_BACK_SPACE, KeyEvent.CTRL_MASK));
    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, false);

    myMainComponent = new JPanel();
    myMainComponent.setLayout(new GridBagLayout());
    GridBagConstraints c = new GridBagConstraints(0, 0, 0, 0, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0);

    c.gridx = 0;
    c.gridy = 1;
    c.gridwidth = 2;
    c.gridheight = 1;
    c.weightx = 1.0;
    c.weighty = 0.0;
    c.anchor = GridBagConstraints.EAST;
    c.fill = GridBagConstraints.NONE;
    myMainComponent.add(createScopeComponent(), c);

    c.gridx = 0;
    c.gridy = 0;
    c.gridwidth = 1;
    c.gridheight = 1;
    c.weightx = 0.0;
    c.weighty = 1.0;
    c.anchor = GridBagConstraints.NORTH;
    c.fill = GridBagConstraints.VERTICAL;
    myMainComponent.add(toolbar.getComponent(), c);

    c.gridx = 1;
    c.gridy = 0;
    c.gridwidth = 1;
    c.gridheight = 1;
    c.weightx = 1.0;
    c.weighty = 1.0;
    c.anchor = GridBagConstraints.CENTER;
    c.fill = GridBagConstraints.BOTH;
    myMainComponent.add(createEditorsComponent(), c);
  }



  private BaseAction registerShortcut(BaseAction a, int key, int mod) {
    a.registerCustomShortcutSet(key, mod, myCommandEditor);
    a.registerCustomShortcutSet(key, mod, myHistEditor);
    return a;
  }



  private JScrollPane createEditorsComponent() {
    JPanel editorsPanel = new JPanel(new BorderLayout());
    editorsPanel.add(myHistEditor, BorderLayout.CENTER);
    editorsPanel.add(myCommandEditor, BorderLayout.SOUTH);
    return new JScrollPane(editorsPanel);
  }



  private JComponent createScopeComponent() {
    return new JComboBox(new String[]{"in project", "globally"});
  }



  private SNode lastCmd() {
    SNode cur = ListSequence.fromList(SLinkOperations.getTargets(myHistRoot, "item", true)).last();
    while ((cur != null) && !(SNodeOperations.isInstanceOf(cur, "jetbrains.mps.console.base.structure.CommandHolder"))) {
      cur = SNodeOperations.cast(SNodeOperations.getPrevSibling(cur), "jetbrains.mps.console.base.structure.HistoryItem");
    }
    return SNodeOperations.cast(cur, "jetbrains.mps.console.base.structure.CommandHolder");
  }



  private SNode getPrevCmd(SNode cmd) {
    SNode item = cmd;
    do {
      item = SNodeOperations.cast(SNodeOperations.getPrevSibling(item), "jetbrains.mps.console.base.structure.HistoryItem");
    } while ((item != null) && !(SNodeOperations.isInstanceOf(item, "jetbrains.mps.console.base.structure.CommandHolder")));

    return SNodeOperations.cast(item, "jetbrains.mps.console.base.structure.CommandHolder");
  }

  private SNode getNextCmd(SNode cmd) {
    SNode item = cmd;
    do {
      item = SNodeOperations.cast(SNodeOperations.getNextSibling(item), "jetbrains.mps.console.base.structure.HistoryItem");
    } while ((item != null) && !(SNodeOperations.isInstanceOf(item, "jetbrains.mps.console.base.structure.CommandHolder")));

    return SNodeOperations.cast(item, "jetbrains.mps.console.base.structure.CommandHolder");
  }

  @Override
  protected boolean isInitiallyAvailable() {
    return true;
  }



  @Override
  protected void doRegister() {
    super.doRegister();
    getToolWindow().setSplitMode(true, null);
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        ConsoleTool.this.myModel = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModuleWithSourceAndClassesGen());
      }
    });
  }



  @Override
  protected void doUnregister() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        TemporaryModels.getInstance().dispose(myModel);
      }
    });
    super.doUnregister();
  }



  @Override
  protected void createTool(boolean b) {
  }



  private SNode getLastResult() {
    SNode last = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(myHistRoot, "item", true)).last(), "jetbrains.mps.console.base.structure.CommandResult");
    if (last != null) {
      return last;
    }
    return SLinkOperations.addNewChild(myHistRoot, "item", "jetbrains.mps.console.base.structure.CommandResult");
  }



  private SNode getLastResultLine() {
    SNode last = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(myHistRoot, "item", true)).last(), "jetbrains.mps.console.base.structure.CommandResult");
    if (last == null) {
      last = SLinkOperations.addNewChild(myHistRoot, "item", "jetbrains.mps.console.base.structure.CommandResult");
    }
    SNode lastLine = ListSequence.fromList(SLinkOperations.getTargets(last, "line", true)).last();
    if (lastLine == null) {
      lastLine = SLinkOperations.addNewChild(last, "line", "jetbrains.mps.console.base.structure.CommandResultLine");
    }

    return lastLine;
  }



  public void addText(String text) {
    ListSequence.fromList(SLinkOperations.getTargets(getLastResultLine(), "part", true)).addElement(_quotation_createNode_xg3v07_a0a0a24(text));
  }



  public void addNode(SNode node) {
    SNode n = _quotation_createNode_xg3v07_a0a0sb();
    SLinkOperations.setTarget(n, "target", node, false);
    ListSequence.fromList(SLinkOperations.getTargets(getLastResultLine(), "part", true)).addElement(n);
  }



  public void addNewLine() {
    SNode last = getLastResult();
    SLinkOperations.addNewChild(last, "line", "jetbrains.mps.console.base.structure.CommandResultLine");
  }



  private class ExecuteAction extends BaseAction {
    private jetbrains.mps.project.Project myProject;

    public ExecuteAction(jetbrains.mps.project.Project project) {
      super("Execute", "Execute last command", IconContainer.ICON_c0a1wb);
      ExecuteAction.this.myProject = project;
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          myCursor = null;
          TemporaryModels.getInstance().addMissingModuleImports(myModel);
          final SNode lastCmd = SLinkOperations.getTarget(myCommandRoot, "command", true);
          if ((lastCmd == null)) {
            return;
          }

          final SNode lastHist = ListSequence.fromList(SLinkOperations.getTargets(myHistRoot, "item", true)).last();
          final SNode res = _quotation_createNode_xg3v07_a0g0a0a2wb();
          BehaviorReflection.invokeVirtual(Void.class, SNodeOperations.cast(lastCmd, "jetbrains.mps.console.base.structure.Command"), "virtual_execute_757553790980855637", new Object[]{new ConsoleContext() {
            public jetbrains.mps.project.Project getProject() {
              return myProject;
            }

            public SearchScope getScope() {
              return myProject.getScope();
            }
          }, new ConsoleStream() {
            public void addText(String text) {
              checkResultAvailable();
              ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(res, "line", true)).last(), "part", true)).addElement(_quotation_createNode_xg3v07_a0a1a0a0b0a7a0a0c84(text));
            }

            public void addNode(SNode node) {
              checkResultAvailable();
              SLinkOperations.setTarget(SLinkOperations.addNewChild(ListSequence.fromList(SLinkOperations.getTargets(res, "line", true)).last(), "part", "jetbrains.mps.console.base.structure.NodeResultPart"), "target", ((SNode) node), false);
            }

            public void addNewLine() {
              checkResultAvailable();
              SLinkOperations.addNewChild(res, "line", "jetbrains.mps.console.base.structure.CommandResultLine");
            }

            private void checkResultAvailable() {
              if ((SNodeOperations.getNextSibling(lastHist) == null)) {
                SNodeOperations.insertNextSiblingChild(lastHist, res);
              }
            }
          }, new Runnable() {
            public void run() {
              ListSequence.fromList(SLinkOperations.getTargets(myHistRoot, "item", true)).addElement(SNodeOperations.copyNode(myCommandRoot));
              SLinkOperations.setTarget(myCommandRoot, "command", null, true);
              myCursor = null;
              myNewCommand = null;
            }
          }});
        }
      });
    }
  }



  private class ClearAction extends BaseAction {
    public ClearAction() {
      super("Clear", "Clear console window", IconContainer.ICON_c0a0yb);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      SLinkOperations.getTargets(myHistRoot, "item", true).clear();
      SLinkOperations.setTarget(myCommandRoot, "command", null, true);
    }
  }



  private class PrevCmdAction extends BaseAction {
    public PrevCmdAction() {
      super("Prev", "Previous command", IconContainer.ICON_c0a0ac);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      SNode lastCmd = lastCmd();
      if ((lastCmd == null)) {
        return;
      }

      SNode newCursor;
      if (myCursor == null) {
        newCursor = lastCmd;
        myNewCommand = SNodeOperations.copyNode(myCommandRoot);
      } else {
        newCursor = getPrevCmd(myCursor);
      }
      if ((newCursor == null)) {
        return;
      }
      myCursor = newCursor;
      SLinkOperations.setTarget(myCommandRoot, "command", SNodeOperations.copyNode(SLinkOperations.getTarget(myCursor, "command", true)), true);
    }
  }



  private class NextCmdAction extends BaseAction {
    public NextCmdAction() {
      super("Next", "Next command", IconContainer.ICON_c0a0cc);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      if ((myCursor == null)) {
        return;
      }

      SNode newCursor = getNextCmd(myCursor);
      if (!((newCursor == null))) {
        myCursor = newCursor;
        SLinkOperations.setTarget(myCommandRoot, "command", SNodeOperations.copyNode(SLinkOperations.getTarget(myCursor, "command", true)), true);
      } else {
        myCursor = null;
        SLinkOperations.setTarget(myCommandRoot, "command", SNodeOperations.copyNode(SLinkOperations.getTarget(myNewCommand, "command", true)), true);
      }
    }
  }

  private static SNode _quotation_createNode_xg3v07_a0a0a24(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.TextResultPart", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "text", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_xg3v07_a0a0sb() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.NodeResultPart", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_xg3v07_a0g0a0a2wb() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.CommandResult", null, null, GlobalScope.getInstance(), false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.CommandResultLine", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.addChild("line", quotedNode_2);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_xg3v07_a0a1a0a0b0a7a0a0c84(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.TextResultPart", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "text", (String) parameter_1);
    return quotedNode_2;
  }
}
