package jetbrains.mps.console.tool;

/*Generated by MPS */

import com.intellij.openapi.components.State;
import com.intellij.openapi.components.Storage;
import com.intellij.openapi.components.StoragePathMacros;
import jetbrains.mps.ide.tools.BaseTabbedProjectTool;
import com.intellij.openapi.components.PersistentStateComponent;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.project.Project;
import jetbrains.mps.icons.MPSIcons;
import com.intellij.openapi.wm.ToolWindowAnchor;
import org.jetbrains.annotations.Nullable;
import javax.swing.Icon;
import jetbrains.mps.plugins.tool.IComponentDisposer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

@State(name = "ConsoleHistory", storages = @Storage(file = StoragePathMacros.WORKSPACE_FILE)
)
public class ConsoleTool extends BaseTabbedProjectTool implements PersistentStateComponent<ConsoleTool.MyState> {

  private ConsoleTool.MyState loadedState;
  private List<ConsoleTab> myTabs = ListSequence.fromList(new ArrayList<ConsoleTab>());


  public ConsoleTool(Project project) {
    super(project, "Console", -1, MPSIcons.ToolWindows.OpenTerminal_13x13, ToolWindowAnchor.BOTTOM, true);
  }



  public Project getProject() {
    return super.getProject();
  }



  @Override
  protected boolean isInitiallyAvailable() {
    return true;
  }



  public ConsoleTab addNewConsoleTab(@Nullable String title, @Nullable String history, @Nullable Icon icon) {
    if (icon == null) {
      icon = MPSIcons.ToolWindows.OpenTerminal_13x13;
    }
    if (title == null) {
      title = "";
    }
    ConsoleTab tab = new ConsoleTab(this, title, history);
    ListSequence.fromList(myTabs).addElement(tab);
    addTab(tab, title, icon, new IComponentDisposer<ConsoleTab>() {
      public void disposeComponent(ConsoleTab ct) {
        ListSequence.fromList(myTabs).removeElement(ct);
        ct.disposeConsoleTab();
      }
    });
    return tab;
  }



  @Override
  protected void doRegister() {
    super.doRegister();
    initTabs();
  }



  private void initTabs() {
    if (loadedState != null) {
      int n = Math.max(loadedState.histories.size(), loadedState.titles.size());
      for (int i = 0; i < n; i++) {
        String title = (loadedState.titles.size() > i ? loadedState.titles.get(i) : null);
        String history = (loadedState.histories.size() > i ? loadedState.histories.get(i) : null);
        ConsoleTab tab = addNewConsoleTab((n == 1 ? null : title), history, null);
        getContentManager().getContent(tab).setPinned(true);
      }
    }
    if (ListSequence.fromList(myTabs).count() == 0) {
      ConsoleTab tab = addNewConsoleTab(null, null, null);
      getContentManager().getContent(tab).setPinned(true);
    }
  }



  public static class MyState {
    public ArrayList<String> histories = new ArrayList<String>();
    public ArrayList<String> titles = new ArrayList<String>();
  }



  public void loadState(ConsoleTool.MyState state) {
    loadedState = state;
  }



  public void executeCommand(final SNode command, @Nullable Runnable executeAfter) {
    final Wrappers._T<String> title = new Wrappers._T<String>(null);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        title.value = BehaviorReflection.invokeVirtual(String.class, command, "virtual_getPresentation_1213877396640", new Object[]{});
      }
    });
    addNewConsoleTab(title.value, null, null).executeCommand(command, executeAfter);
  }



  @Nullable
  public ConsoleTool.MyState getState() {
    ConsoleTool.MyState result = new ConsoleTool.MyState();
    for (ConsoleTab tab : ListSequence.fromList(myTabs)) {
      if (!(getContentManager().getContent(tab).isPinned())) {
        break;
      }
      String history = tab.getHistory();
      String title = tab.getTitle();
      if (history == null && title == null) {
        break;
      }
      result.histories.add(history);
      result.titles.add(title);
    }
    return result;
  }


}
