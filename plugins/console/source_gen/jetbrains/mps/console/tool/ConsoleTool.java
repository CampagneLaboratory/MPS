package jetbrains.mps.console.tool;

/*Generated by MPS */

import com.intellij.openapi.components.State;
import com.intellij.openapi.components.Storage;
import com.intellij.openapi.components.StoragePathMacros;
import jetbrains.mps.ide.tools.BaseProjectTool;
import com.intellij.openapi.components.PersistentStateComponent;
import javax.swing.JPanel;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.UIEditorComponent;
import com.intellij.openapi.fileEditor.FileEditor;
import jetbrains.mps.nodeEditor.Highlighter;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindowAnchor;
import javax.swing.JComponent;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.smodel.ModelAccess;
import org.apache.log4j.Priority;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import com.intellij.ide.PasteProvider;
import java.awt.BorderLayout;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import java.awt.event.KeyEvent;
import com.intellij.openapi.actionSystem.CustomShortcutSet;
import com.intellij.openapi.actionSystem.MouseShortcut;
import java.awt.event.MouseEvent;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.KeyStroke;
import com.intellij.openapi.actionSystem.ShortcutSet;
import javax.swing.JScrollPane;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import java.awt.Color;
import com.intellij.ui.ScrollPaneFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.Scanner;
import javax.swing.SwingUtilities;
import jetbrains.mps.workbench.action.ActionUtils;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.DataContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import java.awt.datatransfer.Transferable;
import com.intellij.ide.CopyPasteManagerEx;
import jetbrains.mps.ide.datatransfer.SModelDataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.datatransfer.NodePaster;
import jetbrains.mps.persistence.PersistenceUtil;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.model.SModelReference;

@State(name = "ConsoleHistory", storages = @Storage(file = StoragePathMacros.WORKSPACE_FILE)
)
public class ConsoleTool extends BaseProjectTool implements PersistentStateComponent<ConsoleTool.MyState> {

  private JPanel myMainComponent;
  private SModel myModel;
  private ConsoleTool.MyState loadedState;

  private SNode myHistRoot;
  private UIEditorComponent myHistEditor;
  private SNode myNewCommand = null;
  private SNode myCursor = null;

  private SNode myCommandRoot;
  private UIEditorComponent myCommandEditor;
  private FileEditor myCommandFileEditor;

  private Highlighter myHighlighter;



  public ConsoleTool(Project project) {
    super(project, "Console", -1, IconContainer.ICON_d0a71, ToolWindowAnchor.BOTTOM, false);
  }



  @Override
  public JComponent getComponent() {
    return myMainComponent;
  }



  private void addBuiltInImports() {
    Language base = ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("de1ad86d-6e50-4a02-b306-d4d17f64c375(jetbrains.mps.console.base)"), Language.class);
    Collection<Language> languages = ModuleRepositoryFacade.getInstance().getAllModules(Language.class);
    for (Language l : CollectionSequence.fromCollection(languages)) {
      if (l != base && !(l.getAllExtendedLanguages().contains(base))) {
        continue;
      }
      ((SModelInternal) myModel).addLanguage(l.getModuleReference());
      ((AbstractModule) myModel.getModule()).addUsedLanguage(l.getModuleReference());
    }
    ((SModelInternal) myModel).addDevKit(PersistenceFacade.getInstance().createModuleReference("fbc25dd2-5da4-483a-8b19-70928e1b62d7(jetbrains.mps.devkit.general-purpose)"));
    ((AbstractModule) myModel.getModule()).addUsedDevkit(PersistenceFacade.getInstance().createModuleReference("fbc25dd2-5da4-483a-8b19-70928e1b62d7(jetbrains.mps.devkit.general-purpose)"));
  }



  private void validateImports() {
    for (SModuleReference devKit : ListSequence.fromListWithValues(new ArrayList<SModuleReference>(), ((SModelInternal) myModel).importedDevkits())) {
      ((SModelInternal) myModel).deleteDevKit(devKit);
    }
    for (SModuleReference language : ListSequence.fromListWithValues(new ArrayList<SModuleReference>(), ((SModelInternal) myModel).importedLanguages())) {
      ((SModelInternal) myModel).deleteLanguage(language);
    }
    for (jetbrains.mps.smodel.SModel.ImportElement model : ListSequence.fromListWithValues(new ArrayList<jetbrains.mps.smodel.SModel.ImportElement>(), ((SModelInternal) myModel).importedModels())) {
      ((SModelInternal) myModel).deleteModelImport(model.getModelReference());
    }
    addBuiltInImports();
    TemporaryModels.getInstance().addMissingImports(myModel);
  }



  protected void initMainComponent() {
    jetbrains.mps.project.Project project = ProjectHelper.toMPSProject(getProject());
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {

        if (myModel == null) {
          if (LOG.isEnabledFor(Priority.ERROR)) {
            LOG.error("Error on loading history: model does not exist");
          }
          return;
        }

        loadHistory();

        ConsoleTool.this.myHistEditor = new UIEditorComponent(ProjectHelper.toMPSProject(getProject()).getRepository(), null) {
          @Override
          public boolean isReadOnly() {
            return true;
          }
        };
        myHistEditor.setFocusable(false);

        ConsoleTool.this.myCommandEditor = new UIEditorComponent(ProjectHelper.toMPSProject(getProject()).getRepository(), null) {
          @Nullable
          @Override
          public Object getData(@NonNls String key) {
            if (PlatformDataKeys.FILE_EDITOR.is(key)) {
              return myCommandFileEditor;
            }
            if (PlatformDataKeys.PASTE_PROVIDER.is(key)) {
              return new ConsoleTool.MyPasteProvider((PasteProvider) super.getData(key));
            }
            return super.getData(key);
          }
        };
        myCommandFileEditor = new ConsoleFileEditor(myCommandEditor);
        addBuiltInImports();
        myHistEditor.editNode(myHistRoot);
        myCommandEditor.editNode(myCommandRoot);
      }
    });

    myMainComponent = new JPanel();
    myMainComponent.setLayout(new BorderLayout());
    myMainComponent.add(getToolbarComponent(project), BorderLayout.WEST);
    myMainComponent.add(createEditorsComponent(), BorderLayout.CENTER);

    myHighlighter = check_xg3v07_a0i0z(getProject(), this);
    myHighlighter.addAdditionalEditorComponent(myCommandEditor);
  }



  private JComponent getToolbarComponent(jetbrains.mps.project.Project project) {
    DefaultActionGroup group = new DefaultActionGroup();
    group.add(registerKeyShortcut(new ConsoleTool.ExecuteAction(project), KeyEvent.VK_ENTER));
    group.add(registerKeyShortcut(new ConsoleTool.PrevCmdAction(), KeyEvent.VK_UP));
    group.add(registerKeyShortcut(new ConsoleTool.NextCmdAction(), KeyEvent.VK_DOWN));
    group.add(registerKeyShortcut(new ConsoleTool.ClearAction(), KeyEvent.VK_BACK_SPACE));
    registerShortcutSet(new ConsoleTool.ExecuteClosureAction(), new CustomShortcutSet(new MouseShortcut(MouseEvent.BUTTON1, 0, 1)));
    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, false);

    JPanel res = new JPanel(new BorderLayout());
    res.add(toolbar.getComponent(), BorderLayout.CENTER);
    return res;
  }



  private BaseAction registerKeyShortcut(BaseAction a, int key) {
    return registerShortcutSet(a, new CustomShortcutSet(KeyStroke.getKeyStroke(key, KeyEvent.CTRL_MASK)));
  }



  private BaseAction registerShortcutSet(BaseAction a, ShortcutSet shortcutSet) {
    a.registerCustomShortcutSet(shortcutSet, myCommandEditor);
    a.registerCustomShortcutSet(shortcutSet, myHistEditor);
    return a;
  }



  private JScrollPane createEditorsComponent() {
    JPanel editorsPanel = new JPanel(new BorderLayout());
    JPanel historyPanel = new JPanel(new BorderLayout());
    JPanel spacePanel = new JPanel();
    spacePanel.setBackground((StyleRegistry.getInstance() == null ?
      Color.white :
      StyleRegistry.getInstance().getEditorBackground()
    ));
    historyPanel.add(spacePanel, BorderLayout.CENTER);
    historyPanel.add(myHistEditor, BorderLayout.SOUTH);
    editorsPanel.add(historyPanel, BorderLayout.CENTER);
    editorsPanel.add(myCommandEditor, BorderLayout.SOUTH);
    JScrollPane scrollPane = ScrollPaneFactory.createScrollPane(editorsPanel);
    scrollPane.getVerticalScrollBar().setUnitIncrement(10);
    return scrollPane;
  }



  private SNode lastCmd() {
    SNode cur = ListSequence.fromList(SLinkOperations.getTargets(myHistRoot, "item", true)).last();
    while ((cur != null) && !(SNodeOperations.isInstanceOf(cur, "jetbrains.mps.console.base.structure.CommandHolder"))) {
      cur = SNodeOperations.cast(SNodeOperations.getPrevSibling(cur), "jetbrains.mps.console.base.structure.HistoryItem");
    }
    return SNodeOperations.cast(cur, "jetbrains.mps.console.base.structure.CommandHolder");
  }



  private SNode getPrevCmd(SNode cmd) {
    SNode item = cmd;
    do {
      item = SNodeOperations.cast(SNodeOperations.getPrevSibling(item), "jetbrains.mps.console.base.structure.HistoryItem");
    } while ((item != null) && !(SNodeOperations.isInstanceOf(item, "jetbrains.mps.console.base.structure.CommandHolder")));

    return SNodeOperations.cast(item, "jetbrains.mps.console.base.structure.CommandHolder");
  }

  private SNode getNextCmd(SNode cmd) {
    SNode item = cmd;
    do {
      item = SNodeOperations.cast(SNodeOperations.getNextSibling(item), "jetbrains.mps.console.base.structure.HistoryItem");
    } while ((item != null) && !(SNodeOperations.isInstanceOf(item, "jetbrains.mps.console.base.structure.CommandHolder")));

    return SNodeOperations.cast(item, "jetbrains.mps.console.base.structure.CommandHolder");
  }

  @Override
  protected boolean isInitiallyAvailable() {
    return true;
  }



  @Override
  protected void doRegister() {
    super.doRegister();
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        ConsoleTool.this.myModel = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModuleWithSourceAndClassesGen());
      }
    });
    initMainComponent();
  }



  @Override
  protected void doUnregister() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        if (myHistEditor != null) {
          myHistEditor.dispose();
        }
        if (myCommandEditor != null) {
          myCommandEditor.dispose();
        }
        TemporaryModels.getInstance().dispose(myModel);
      }
    });
    myHighlighter.removeAdditionalEditorComponent(myCommandEditor);
    super.doUnregister();
  }



  @Override
  protected void createTool() {
  }



  private SNode getLastResult() {
    SNode last = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(myHistRoot, "item", true)).last(), "jetbrains.mps.console.base.structure.CommandResult");
    if (last != null) {
      return last;
    }
    return SLinkOperations.addNewChild(myHistRoot, "item", "jetbrains.mps.console.base.structure.CommandResult");
  }



  private SNode getLastResultLine() {
    SNode last = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(myHistRoot, "item", true)).last(), "jetbrains.mps.console.base.structure.CommandResult");
    if (last == null) {
      last = SLinkOperations.addNewChild(myHistRoot, "item", "jetbrains.mps.console.base.structure.CommandResult");
    }
    SNode lastLine = ListSequence.fromList(SLinkOperations.getTargets(last, "line", true)).last();
    if (lastLine == null) {
      lastLine = SLinkOperations.addNewChild(last, "line", "jetbrains.mps.console.base.structure.CommandResultLine");
    }

    return lastLine;
  }



  private class ExecuteAction extends BaseAction {
    private jetbrains.mps.project.Project myProject;

    public ExecuteAction(jetbrains.mps.project.Project project) {
      super("Execute", "Execute last command", IconContainer.ICON_c0a1zb);
      ExecuteAction.this.myProject = project;
    }

    @Override
    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          myCursor = null;
          TemporaryModels.getInstance().addMissingImports(myModel);
          final SNode lastCmd = SLinkOperations.getTarget(myCommandRoot, "command", true);
          if ((lastCmd == null)) {
            return;
          }
          final SNode willBeLastHist = SNodeOperations.copyNode(myCommandRoot);
          final SNode res = SConceptOperations.createNewNode("jetbrains.mps.console.base.structure.CommandResult", null);
          SLinkOperations.addNewChild(res, "line", "jetbrains.mps.console.base.structure.CommandResultLine");
          BehaviorReflection.invokeVirtual(Void.class, SNodeOperations.cast(lastCmd, "jetbrains.mps.console.base.structure.Command"), "virtual_execute_6854397602732226506", new Object[]{new ConsoleContext() {
            public jetbrains.mps.project.Project getProject() {
              return myProject;
            }

            public SModel getConsoleModel() {
              return myModel;
            }
          }, new ConsoleStream() {
            public void addText(String text) {
              checkResultAvailable();
              Scanner scanner = new Scanner(text);
              while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                if ((line != null && line.length() > 0)) {
                  ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(res, "line", true)).last(), "part", true)).addElement(_quotation_createNode_xg3v07_a0a0a1a2a0a0b0a7a0a0c15(line));
                }
                if (scanner.hasNextLine() || text.charAt(text.length() - 1) == '\n') {
                  SLinkOperations.addNewChild(res, "line", "jetbrains.mps.console.base.structure.CommandResultLine");
                }
              }
            }

            public void addNode(SNode node) {
              checkResultAvailable();
              for (SNode subNode : ListSequence.fromList(SNodeOperations.getDescendants(node, null, true, new String[]{}))) {
                SModuleReference usedLanguage = subNode.getConcept().getLanguage().getSourceModule().getModuleReference();
                if (!(((SModelInternal) myModel).importedLanguages().contains(usedLanguage))) {
                  ((SModelInternal) myModel).addLanguage(usedLanguage);
                  ((AbstractModule) myModel.getModule()).addUsedLanguage(usedLanguage);
                }
              }
              SLinkOperations.setTarget(SLinkOperations.addNewChild(ListSequence.fromList(SLinkOperations.getTargets(res, "line", true)).last(), "part", "jetbrains.mps.console.base.structure.NodeResultPart"), "node", node, true);
            }

            private void checkResultAvailable() {
              if ((SNodeOperations.getNextSibling(willBeLastHist) == null)) {
                SNodeOperations.insertNextSiblingChild(willBeLastHist, res);
              }
            }
          }, new Runnable() {
            public void run() {
              ListSequence.fromList(SLinkOperations.getTargets(myHistRoot, "item", true)).addElement(willBeLastHist);
              SNodeOperations.deleteNode(SLinkOperations.getTarget(myCommandRoot, "command", true));
              myCursor = null;
              myNewCommand = null;
            }
          }, new Runnable() {
            public void run() {
              ModelAccess.instance().runWriteActionInCommand(new Runnable() {
                public void run() {
                  TemporaryModels.getInstance().addMissingImports(myModel);
                }
              });
              // todo: this is a hack - activate is not required there because command can activate some other component 
              SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                  ProjectHelper.toIdeaProject(myProject).getComponent(ConsoleTool.class).getToolWindow().activate(new Runnable() {
                    public void run() {
                      myCommandEditor.scrollRectToVisible(myCommandEditor.getBounds());
                    }
                  });
                }
              });
            }
          }});
        }
      });
    }
  }



  private class ClearAction extends BaseAction {
    public ClearAction() {
      super("Clear", "Clear console window", IconContainer.ICON_c0a0bc);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      SLinkOperations.getTargets(myHistRoot, "item", true).clear();
      validateImports();
    }
  }



  private class PrevCmdAction extends BaseAction {
    public PrevCmdAction() {
      super("Prev", "Previous command", IconContainer.ICON_c0a0dc);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      SNode lastCmd = lastCmd();
      if ((lastCmd == null)) {
        return;
      }

      SNode newCursor;
      if (myCursor == null) {
        newCursor = lastCmd;
        myNewCommand = SNodeOperations.copyNode(myCommandRoot);
      } else {
        newCursor = getPrevCmd(myCursor);
        if ((newCursor == null)) {
          return;
        }
        SNode myCursorCommand = SLinkOperations.getTarget(myCursor, "command", true);
        SNode myCursorNew = SConceptOperations.createNewNode("jetbrains.mps.console.base.structure.ModifiedCommandHistoryItem", null);
        SLinkOperations.setTarget(myCursorNew, "command", myCursorCommand, true);
        SLinkOperations.setTarget(myCursorNew, "modifiedCommand", SLinkOperations.getTarget(myCommandRoot, "command", true), true);
        SNodeOperations.replaceWithAnother(myCursor, myCursorNew);
      }
      if ((newCursor == null)) {
        return;
      }
      myCursor = newCursor;
      SLinkOperations.setTarget(myCommandRoot, "command", SNodeOperations.copyNode(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), myCursor, "virtual_getCommandToEdit_691634242167796942", new Object[]{})), true);
    }
  }



  private class NextCmdAction extends BaseAction {
    public NextCmdAction() {
      super("Next", "Next command", IconContainer.ICON_c0a0fc);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      if ((myCursor == null)) {
        return;
      }
      SNode newCursor = getNextCmd(myCursor);

      SNode myCursorCommand = SLinkOperations.getTarget(myCursor, "command", true);
      SNode myCursorNew = SConceptOperations.createNewNode("jetbrains.mps.console.base.structure.ModifiedCommandHistoryItem", null);
      SLinkOperations.setTarget(myCursorNew, "command", myCursorCommand, true);
      SLinkOperations.setTarget(myCursorNew, "modifiedCommand", SLinkOperations.getTarget(myCommandRoot, "command", true), true);
      SNodeOperations.replaceWithAnother(myCursor, myCursorNew);

      if (!((newCursor == null))) {
        myCursor = newCursor;
        SLinkOperations.setTarget(myCommandRoot, "command", SNodeOperations.copyNode(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), myCursor, "virtual_getCommandToEdit_691634242167796942", new Object[]{})), true);
      } else {
        myCursor = null;
        SLinkOperations.setTarget(myCommandRoot, "command", SNodeOperations.copyNode(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), myNewCommand, "virtual_getCommandToEdit_691634242167796942", new Object[]{})), true);
      }
    }
  }



  private class ExecuteClosureAction extends BaseAction {
    public ExecuteClosureAction() {
      super("Execute Closure");
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> map) {
      ActionUtils.updateAndPerformAction(((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.console.actions.ExecuteActionAttachedToCurrentNode_Action")), event);
    }
  }



  private class MyPasteProvider implements PasteProvider {

    private PasteProvider myDefaultPasteProvider;


    public MyPasteProvider(PasteProvider defaultPasteProvider) {
      myDefaultPasteProvider = defaultPasteProvider;
    }



    public void performPaste(@NotNull final DataContext context) {
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          SNodeReference pastingNodeReference = null;
          try {
            for (Transferable trf : CopyPasteManagerEx.getInstanceEx().getAllContents()) {
              if (trf != null && trf.isDataFlavorSupported(SModelDataFlavor.sNodeReference)) {
                pastingNodeReference = (SNodeReference) trf.getTransferData(SModelDataFlavor.sNodeReference);
              }
              break;
            }
          } catch (UnsupportedFlavorException ignored) {
          } catch (IOException ignored) {
          }
          EditorCell currentCell = myCommandEditor.getSelectedCell();
          SNode referenceTarget = check_xg3v07_a0d0a0a5jc(pastingNodeReference);
          if (referenceTarget != null && currentCell != null && !(check_xg3v07_a0a4a0a0f16(check_xg3v07_a0a0e0a0a5jc(pastingNodeReference), myModel))) {
            SNode refContainer = SConceptOperations.createNewNode("jetbrains.mps.console.base.structure.PastedNodeReference", null);
            SLinkOperations.setTarget(refContainer, "target", referenceTarget, false);
            NodePaster paster = new NodePaster(ListSequence.fromListAndArray(new ArrayList<SNode>(), refContainer));
            paster.paste(currentCell);
            TemporaryModels.getInstance().addMissingImports(myModel);
          } else {
            myDefaultPasteProvider.performPaste(context);
          }
        }
      });
    }

    public boolean isPastePossible(@NotNull DataContext context) {
      return true;
    }

    public boolean isPasteEnabled(@NotNull DataContext context) {
      return true;
    }
  }



  public static class MyState {
    public String state;
  }



  public void loadHistory() {
    SModel loadedModel = null;
    if (loadedState != null) {
      loadedModel = PersistenceUtil.loadModel(loadedState.state, MPSExtentions.MODEL);
    }
    if (loadedModel == null || ListSequence.fromList(SModelOperations.getRoots(loadedModel, "jetbrains.mps.console.base.structure.History")).isEmpty()) {
      if (loadedState != null) {
        if (LOG.isEnabledFor(Priority.WARN)) {
          LOG.warn("Error on loading history: invalid saved data");
        }
      }
      myHistRoot = SModelOperations.createNewRootNode(myModel, "jetbrains.mps.console.base.structure.History", null);
    } else {
      myHistRoot = ListSequence.fromList(SModelOperations.getRoots(loadedModel, "jetbrains.mps.console.base.structure.History")).first();
      SModelOperations.addRootNode(myModel, myHistRoot);
    }
    this.myCommandRoot = SModelOperations.createNewRootNode(myModel, "jetbrains.mps.console.base.structure.CommandHolder", null);
    TemporaryModels.getInstance().addMissingImports(myModel);

    loadedState = null;
  }



  public void loadState(ConsoleTool.MyState state) {
    loadedState = state;
  }



  @Nullable
  public ConsoleTool.MyState getState() {
    final ConsoleTool.MyState result = new ConsoleTool.MyState();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        try {
          result.state = (myModel == null ?
            null :
            PersistenceUtil.saveModel(myModel, MPSExtentions.MODEL)
          );
        } catch (Exception e) {
          if (LOG.isEnabledFor(Priority.WARN)) {
            LOG.warn("Error on console model saving", e);
          }
        }
      }
    });
    return (result.state == null ?
      null :
      result
    );
  }


  protected static Logger LOG = LogManager.getLogger(ConsoleTool.class);

  private static Highlighter check_xg3v07_a0i0z(Project checkedDotOperand, ConsoleTool checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getComponent(Highlighter.class);
    }
    return null;
  }

  private static SNode _quotation_createNode_xg3v07_a0a0a1a2a0a0b0a7a0a0c15(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.TextResultPart", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "text", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode check_xg3v07_a0d0a0a5jc(SNodeReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(MPSModuleRepository.getInstance());
    }
    return null;
  }

  private static boolean check_xg3v07_a0a4a0a0f16(SModelReference checkedDotOperand, SModel myModel) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.equals(myModel.getReference());
    }
    return false;
  }

  private static SModelReference check_xg3v07_a0a0e0a0a5jc(SNodeReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelReference();
    }
    return null;
  }
}
