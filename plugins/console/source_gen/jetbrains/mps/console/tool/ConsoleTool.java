package jetbrains.mps.console.tool;

/*Generated by MPS */

import jetbrains.mps.ide.tools.BaseProjectTool;
import javax.swing.JPanel;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.UIEditorComponent;
import jetbrains.mps.project.ModuleContext;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindowAnchor;
import javax.swing.JComponent;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.awt.BorderLayout;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class ConsoleTool extends BaseProjectTool implements ConsoleStream {
  private JPanel myMainComponent;
  private SModel myModel;
  private SNode myRoot;
  private UIEditorComponent myEditor;
  private ModuleContext myContext;

  private SNode myNewCommand = null;
  private SNode myCursor = null;


  public ConsoleTool(Project project) {
    super(project, "Console", -1, IconContainer.ICON_d0a9, ToolWindowAnchor.BOTTOM, false);
  }



  @Override
  public JComponent getComponent() {
    if (myMainComponent == null) {
      initMainComponent();
    }
    return myMainComponent;
  }



  protected void initMainComponent() {
    final jetbrains.mps.project.Project project = ProjectHelper.toMPSProject(getProject());
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        ConsoleTool.this.myContext = new ModuleContext(myModel.getModule(), project);
        ConsoleTool.this.myEditor = new UIEditorComponent(ProjectHelper.toMPSProject(getProject()).getRepository(), null);
        Language[] langs = new Language[]{ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("de1ad86d-6e50-4a02-b306-d4d17f64c375(jetbrains.mps.console.base)"), Language.class), ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("1a8554c4-eb84-43ba-8c34-6f0d90c6e75a(jetbrains.mps.console.blCommand)"), Language.class), ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("f3061a53-9226-4cc5-a443-f952ceaf5816(jetbrains.mps.baseLanguage)"), Language.class)};
        for (Language l : langs) {
          ((SModelInternal) myModel).addLanguage(l.getModuleReference());
          ((AbstractModule) myModel.getModule()).addUsedLanguage(l.getModuleReference());
        }
        ConsoleTool.this.myRoot = SModelOperations.createNewRootNode(myModel, "jetbrains.mps.console.base.structure.Console", null);
        myEditor.editNode(myRoot, myContext);
      }
    });

    myMainComponent = new JPanel();
    myMainComponent.setLayout(new BorderLayout());
    myMainComponent.add(myEditor, BorderLayout.CENTER);

    DefaultActionGroup group = new DefaultActionGroup();
    group.add(new ConsoleTool.ExecuteAction(project));
    group.add(new ConsoleTool.PrevCmdAction());
    group.add(new ConsoleTool.NextCmdAction());
    group.add(new ConsoleTool.ClearAction());
    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, false);
    myMainComponent.add(toolbar.getComponent(), BorderLayout.WEST);
  }



  private SNode getPrevCmd(SNode cmd) {
    SNode item = cmd;
    do {
      item = SNodeOperations.cast(SNodeOperations.getPrevSibling(item), "jetbrains.mps.console.base.structure.ConsoleItem");
    } while ((item != null) && !(SNodeOperations.isInstanceOf(item, "jetbrains.mps.console.base.structure.Command")));

    return SNodeOperations.cast(item, "jetbrains.mps.console.base.structure.Command");
  }

  private SNode getNextCmd(SNode cmd) {
    SNode item = cmd;
    do {
      item = SNodeOperations.cast(SNodeOperations.getNextSibling(item), "jetbrains.mps.console.base.structure.ConsoleItem");
    } while ((item != null) && !(SNodeOperations.isInstanceOf(item, "jetbrains.mps.console.base.structure.Command")));

    return SNodeOperations.cast(item, "jetbrains.mps.console.base.structure.Command");
  }

  @Override
  protected boolean isInitiallyAvailable() {
    return true;
  }



  @Override
  protected void doRegister() {
    super.doRegister();
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        ConsoleTool.this.myModel = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModuleWithSourceAndClassesGen());
      }
    });
  }



  @Override
  protected void doUnregister() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        TemporaryModels.getInstance().dispose(myModel);
      }
    });
    super.doUnregister();
  }



  @Override
  protected void createTool(boolean b) {
  }



  private SNode getLastResult() {
    SNode last = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(myRoot, "item", true)).last(), "jetbrains.mps.console.base.structure.CommandResult");
    if (last != null) {
      return last;
    }
    return SLinkOperations.addNewChild(myRoot, "item", "jetbrains.mps.console.base.structure.CommandResult");
  }



  private SNode getLastResultLine() {
    SNode last = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(myRoot, "item", true)).last(), "jetbrains.mps.console.base.structure.CommandResult");
    if (last == null) {
      last = SLinkOperations.addNewChild(myRoot, "item", "jetbrains.mps.console.base.structure.CommandResult");
    }
    SNode lastLine = ListSequence.fromList(SLinkOperations.getTargets(last, "line", true)).last();
    if (lastLine == null) {
      lastLine = SLinkOperations.addNewChild(last, "line", "jetbrains.mps.console.base.structure.CommandResultLine");
    }

    return lastLine;
  }



  public void addText(String text) {
    ListSequence.fromList(SLinkOperations.getTargets(getLastResultLine(), "part", true)).addElement(_quotation_createNode_xg3v07_a0a0a92(text));
  }

  public void addNode(SNode node) {
    SNode n = _quotation_createNode_xg3v07_a0a0eb();
    SLinkOperations.setTarget(n, "target", node, false);
    ListSequence.fromList(SLinkOperations.getTargets(getLastResultLine(), "part", true)).addElement(n);
  }

  public void addNewLine() {
    SNode last = getLastResult();
    SLinkOperations.addNewChild(last, "line", "jetbrains.mps.console.base.structure.CommandResultLine");
  }







  private class ExecuteAction extends BaseAction {
    private jetbrains.mps.project.Project myProject;

    public ExecuteAction(jetbrains.mps.project.Project project) {
      super("Execute", "Execute last command", IconContainer.ICON_c0a1lb);
      ExecuteAction.this.myProject = project;
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          myCursor = null;
          TemporaryModels.getInstance().addMissingModuleImports(myModel);
          final SNode lastCmd = ListSequence.fromList(SLinkOperations.getTargets(myRoot, "item", true)).last();
          if (!(SNodeOperations.isInstanceOf(lastCmd, "jetbrains.mps.console.base.structure.Command"))) {
            return;
          }

          final SNode res = _quotation_createNode_xg3v07_a0f0a0a2lb();
          BehaviorReflection.invokeVirtual(Void.class, SNodeOperations.cast(lastCmd, "jetbrains.mps.console.base.structure.Command"), "virtual_execute_757553790980855637", new Object[]{ExecuteAction.this.myProject, new ConsoleStream() {
            public void addText(String text) {
              checkResultAvailable();
              ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(res, "line", true)).last(), "part", true)).addElement(_quotation_createNode_xg3v07_a0a1a0a0b0a6a0a0c73(text));
            }

            public void addNode(SNode node) {
              checkResultAvailable();
              SLinkOperations.setTarget(SLinkOperations.addNewChild(ListSequence.fromList(SLinkOperations.getTargets(res, "line", true)).last(), "part", "jetbrains.mps.console.base.structure.NodeResultPart"), "target", node, false);
            }

            public void addNewLine() {
              checkResultAvailable();
              SLinkOperations.addNewChild(res, "line", "jetbrains.mps.console.base.structure.CommandResultLine");
            }

            private void checkResultAvailable() {
              if ((SNodeOperations.getNextSibling(lastCmd) == null)) {
                SNodeOperations.insertNextSiblingChild(lastCmd, res);
              }
            }
          }});
        }
      });
    }
  }

  private class ClearAction extends BaseAction {
    public ClearAction() {
      super("Clear", "Clear console window", IconContainer.ICON_c0a0mb);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      SLinkOperations.getTargets(myRoot, "item", true).clear();
      SLinkOperations.addNewChild(myRoot, "item", "jetbrains.mps.console.base.structure.ConsoleItem");
    }
  }

  private class PrevCmdAction extends BaseAction {
    public PrevCmdAction() {
      super("Prev", "Previous command", IconContainer.ICON_c0a0nb);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      SNode lastCmd = ListSequence.fromList(SLinkOperations.getTargets(myRoot, "item", true)).last();
      if ((lastCmd == null)) {
        return;
      }
      SNode newCursor;
      if (myCursor == null) {
        assert SNodeOperations.isInstanceOf(lastCmd, "jetbrains.mps.console.base.structure.Command");
        myNewCommand = SNodeOperations.cast(lastCmd, "jetbrains.mps.console.base.structure.Command");
        newCursor = getPrevCmd(SNodeOperations.cast(lastCmd, "jetbrains.mps.console.base.structure.Command"));
      } else {
        newCursor = getPrevCmd(SNodeOperations.cast(myCursor, "jetbrains.mps.console.base.structure.Command"));
      }
      if ((newCursor == null)) {
        return;
      }
      myCursor = newCursor;
      SNodeOperations.replaceWithAnother(lastCmd, SNodeOperations.copyNode(myCursor));
    }
  }

  private class NextCmdAction extends BaseAction {
    public NextCmdAction() {
      super("Next", "Next command", IconContainer.ICON_c0a0ob);
    }

    protected void doExecute(AnActionEvent event, Map<String, Object> arg) {
      SNode lastCmd = ListSequence.fromList(SLinkOperations.getTargets(myRoot, "item", true)).last();
      if ((lastCmd == null)) {
        return;
      }
      if ((myCursor == null)) {
        return;
      }
      SNode newCursor = getNextCmd(SNodeOperations.cast(myCursor, "jetbrains.mps.console.base.structure.Command"));
      if (!((newCursor == null))) {
        myCursor = newCursor;
        SNodeOperations.replaceWithAnother(lastCmd, SNodeOperations.copyNode(myCursor));
      } else {
        myCursor = null;
        SNodeOperations.replaceWithAnother(lastCmd, SNodeOperations.copyNode(myNewCommand));
      }
    }
  }

  private static SNode _quotation_createNode_xg3v07_a0a0a92(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.TextResultPart", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "text", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_xg3v07_a0a0eb() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.NodeResultPart", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_xg3v07_a0f0a0a2lb() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.CommandResult", null, null, GlobalScope.getInstance(), false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.CommandResultLine", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.addChild("line", quotedNode_2);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_xg3v07_a0a1a0a0b0a6a0a0c73(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.TextResultPart", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "text", (String) parameter_1);
    return quotedNode_2;
  }
}
