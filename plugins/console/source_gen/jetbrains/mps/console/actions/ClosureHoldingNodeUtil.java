package jetbrains.mps.console.actions;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.concurrent.atomic.AtomicInteger;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ClosureHoldingNodeUtil {

  private static ClosureHoldingNodeUtil myInstance;

  private Map<Integer, _FunctionTypes._void_P0_E0> allActions;

  private AtomicInteger keyGenerator;


  private ClosureHoldingNodeUtil() {
    allActions = MapSequence.fromMap(new HashMap<Integer, _FunctionTypes._void_P0_E0>());
    keyGenerator = new AtomicInteger();
  }



  public static ClosureHoldingNodeUtil getInstance() {
    if (myInstance == null) {
      myInstance = new ClosureHoldingNodeUtil();
    }
    return myInstance;
  }



  public void register(SNode node, _FunctionTypes._void_P0_E0 closure) {
    // todo: unregister (weak hashmap)? 
    int id = keyGenerator.incrementAndGet();
    SPropertyOperations.set(node, "closureId", "" + (id));
    MapSequence.fromMap(allActions).put(id, closure);
  }



  public _FunctionTypes._void_P0_E0 getClosure(SNode node) {
    return MapSequence.fromMap(allActions).get(SPropertyOperations.getInteger(node, "closureId"));
  }



  public void executeClosure(SNode node) {
    getClosure(node).invoke();
  }
}
