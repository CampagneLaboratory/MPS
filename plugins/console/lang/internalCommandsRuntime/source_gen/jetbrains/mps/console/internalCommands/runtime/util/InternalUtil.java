package jetbrains.mps.console.internalCommands.runtime.util;

/*Generated by MPS */

import jetbrains.mps.InternalFlag;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.generator.ModelGenerationStatusManager;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.ide.make.actions.MakeActionImpl;
import jetbrains.mps.ide.make.actions.MakeActionParameters;

public class InternalUtil {


  public static boolean getInternalFlag() {
    return InternalFlag.isInternalMode();
  }



  public static boolean setInternalFlag(boolean flag) {
    InternalFlag.getInstance().setInternalFlag(flag);
    return getInternalFlag();
  }



  public static void make(Project project, final Iterable<SModel> models_, final Iterable<? extends Iterable<SModel>> models__, final Iterable<SModule> modules_, final Iterable<? extends Iterable<SModule>> modules__, final boolean dirtyOnly) {
    ProjectOperationContext context = new ProjectOperationContext(project);
    final Iterable<SModel> models = Sequence.fromIterable(models_).concat(Sequence.fromIterable(models__).translate(new ITranslator2<Iterable<SModel>, SModel>() {
      public Iterable<SModel> translate(Iterable<SModel> it) {
        return it;
      }
    }));
    final Iterable<SModule> modules = Sequence.fromIterable(modules_).concat(Sequence.fromIterable(modules__).translate(new ITranslator2<Iterable<SModule>, SModule>() {
      public Iterable<SModule> translate(Iterable<SModule> it) {
        return it;
      }
    }));

    final Wrappers._T<Iterable<SModel>> modelsToGenerate = new Wrappers._T<Iterable<SModel>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        if (Sequence.fromIterable(models_).isEmpty() && Sequence.fromIterable(models__).isEmpty() && Sequence.fromIterable(modules_).isEmpty() && Sequence.fromIterable(modules__).isEmpty()) {
          modelsToGenerate.value = ((Iterable<SModel>) SModelRepository.getInstance().getModelDescriptors());
        } else {
          modelsToGenerate.value = Sequence.fromIterable(models).concat(Sequence.fromIterable(modules).translate(new ITranslator2<SModule, SModel>() {
            public Iterable<SModel> translate(SModule it) {
              return it.getModels();
            }
          }));
        }
        if (dirtyOnly) {
          final ModelGenerationStatusManager mgsm = ModelGenerationStatusManager.getInstance();
          modelsToGenerate.value = Sequence.fromIterable(modelsToGenerate.value).where(new IWhereFilter<SModel>() {
            public boolean accept(SModel it) {
              return mgsm.generationRequired(it);
            }
          });
        }
      }
    });
    new MakeActionImpl(context, new MakeActionParameters(context, modelsToGenerate.value, null, null, null), dirtyOnly).executeAction();
  }


}
