package jetbrains.mps.console.scripts.runtime.util;

/*Generated by MPS */

import jetbrains.mps.console.tool.ConsoleContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import javax.swing.SwingUtilities;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.ModelAccess;

public class ScriptsUtil {


  public static void executeScript(final ConsoleContext context, SNode script) {
    final Iterable<SNode> commands = BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), script, "virtual_getCommands_1734392475491235554", new Object[]{});
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        executeCommands(context, Sequence.fromIterable(commands).toListSequence(), 0);
      }
    });
  }



  public static void executeCommands(final ConsoleContext context, final List<SNode> commands, final int startWith) {
    if (startWith == ListSequence.fromList(commands).count()) {
      return;
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        context.getConsoleTab().execute(ListSequence.fromList(commands).getElement(startWith), null, new Runnable() {
          public void run() {
            executeCommands(context, commands, startWith + 1);
          }
        });
      }
    });
  }


}
