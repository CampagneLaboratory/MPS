package jetbrains.mps.console.blCommand.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.console.tool.ConsoleContext;
import jetbrains.mps.console.tool.ConsoleStream;
import jetbrains.mps.smodel.ModelAccess;
import java.util.Collection;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.console.blCommand.runtime.util.CommandUtil;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;

public class ShowBrokenReferences_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_execute_757553790980855637(final SNode thisNode, ConsoleContext c, final ConsoleStream console, final Runnable callback) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        callback.run();
        Collection<SReference> brokenReferences = CommandUtil.brokenReferences(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SLinkOperations.getTarget(thisNode, "scopeSubTree", true), "virtual_getTargetNode_3575813534625153815", new Object[]{}));
        for (SReference ref : CollectionSequence.fromCollection(brokenReferences)) {
          console.addText("model id = " + ref.getTargetSModelReference());
          console.addNewLine();
          console.addText("node  id = " + ref.getTargetNodeId());
          console.addNewLine();
          console.addNewLine();
        }
      }
    });
  }
}
