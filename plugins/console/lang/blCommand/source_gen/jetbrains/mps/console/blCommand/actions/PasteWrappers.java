package jetbrains.mps.console.blCommand.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.datatransfer.PasteWrapper;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.datatransfer.PasteWrapperContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public class PasteWrappers {
  public static List<PasteWrapper> createPasteWrappers() {
    List<PasteWrapper> result = ListSequence.fromList(new ArrayList<PasteWrapper>());
    ListSequence.fromList(result).addElement(new PasteWrapper() {
      public String getSourceConceptFqName() {
        return "jetbrains.mps.baseLanguage.structure.Expression";
      }

      public String getTargetConceptFqName() {
        return "jetbrains.mps.console.base.structure.Command";
      }

      public SNode wrap(PasteWrapperContext _context) {
        return createBLExpression_sma98h_a0a0a(SNodeOperations.cast(HUtil.copyIfNecessary(_context.getSourceNode()), "jetbrains.mps.baseLanguage.structure.Expression"));
      }
    });
    return result;
  }

  private static SNode createBLExpression_sma98h_a0a0a(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.blCommand.structure.BLExpression", null, false);
    n1.addChild("expression", (SNode) p0);
    return n1;
  }
}
