package jetbrains.mps.console.ideCommands.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.console.tool.ConsoleContext;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;

public class NodeStatisticsTarget_Behavior {
  public static void init(SNode thisNode) {
  }

  public static Iterable<Tuples._2<String, Integer>> virtual_getStat_7490254719527247609(SNode thisNode, ConsoleContext context) {
    SNode targetNode = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SLinkOperations.getTarget(thisNode, "target", true), "virtual_getTargetNode_3575813534625153815", new Object[]{});
    List<SNode> subNodes = SNodeOperations.getDescendants(targetNode, null, false, new String[]{});
    int references = 0;
    int properties = 0;
    for (SNode node : subNodes) {
      references += IterableUtil.asCollection(node.getReferences()).size();
      properties += jetbrains.mps.util.SNodeOperations.getProperties(node).keySet().size();
    }
    List<Tuples._2<String, Integer>> result = ListSequence.fromList(new ArrayList<Tuples._2<String, Integer>>());
    ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("Nodes", ListSequence.fromList(subNodes).count()));
    ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("References", references));
    ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("Properties", properties));

    return result;
  }

  public static List<SNode> virtual_getNodes_5207260697411458163(SNode thisNode, ConsoleContext context) {
    return SNodeOperations.getDescendants(SLinkOperations.getTarget(thisNode, "target", true), null, false, new String[]{});
  }
}
