package jetbrains.mps.console.ideCommands.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.openapi.project.Project;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ide.ui.dialogs.properties.MPSPropertiesConfigurable;
import jetbrains.mps.ide.ui.dialogs.properties.ModulePropertiesConfigurable;
import org.jetbrains.mps.openapi.ui.persistence.Tab;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import com.intellij.openapi.options.ex.SingleConfigurableEditor;
import javax.swing.SwingUtilities;
import org.jetbrains.mps.openapi.module.SRepository;

public class ClickableGenerator_Behavior {
  public static void init(SNode thisNode) {
  }
  public static void virtual_execute_8517397753922085153(SNode thisNode, final Project project) {
    final SModule module = check_cte1s_a0a0a0(ProjectHelper.toMPSProject(project)).getModule(ModuleId.fromString(SPropertyOperations.getString(thisNode, "moduleId")));

    final MPSPropertiesConfigurable configurable = new ModulePropertiesConfigurable(module, ProjectHelper.toMPSProject(project));
    Iterable<Tab> tabs = Sequence.fromClosure(new ISequenceClosure<Tab>() {
      public Iterable<Tab> iterable() {
        return new Iterable<Tab>() {
          public Iterator<Tab> iterator() {
            return new YieldingIterator<Tab>() {
              private int __CP__ = 0;
              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_i = 0;
                    case 3:
                      if (!(_2_i < configurable.getTabsCount())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this.__CP__ = 4;
                      break;
                    case 5:
                      _2_i++;
                      this.__CP__ = 3;
                      break;
                    case 6:
                      this.__CP__ = 5;
                      this.yield(configurable.getTab(_2_i));
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this.__CP__ = 6;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
              private int _2_i;
            };
          }
        };
      }
    });
    Sequence.fromIterable(tabs).where(new IWhereFilter<Tab>() {
      public boolean accept(Tab it) {
        return it instanceof ModulePropertiesConfigurable.GeneratorAdvancesTab;
      }
    }).visitAll(new IVisitor<Tab>() {
      public void visit(Tab it) {
        configurable.selectTab(it);
      }
    });
    final SingleConfigurableEditor configurableEditor = new SingleConfigurableEditor(ProjectHelper.toIdeaProject(ProjectHelper.toMPSProject(project)), configurable, "#MPSPropertiesConfigurable");
    configurable.setParentForCallBack(configurableEditor);
    SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        configurableEditor.show();
      }
    });
  }
  public static boolean virtual_canExecute_3282455643657932881(SNode thisNode) {
    return isNotEmptyString(SPropertyOperations.getString(thisNode, "moduleId"));
  }
  private static SRepository check_cte1s_a0a0a0(jetbrains.mps.project.Project checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getRepository();
    }
    return null;
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
