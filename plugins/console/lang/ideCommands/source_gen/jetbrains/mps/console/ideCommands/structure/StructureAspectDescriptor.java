package jetbrains.mps.console.ideCommands.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbsractMake = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.AbsractMake").super_("jetbrains.mps.console.blCommand.structure.QueryExpression").parents("jetbrains.mps.console.blCommand.structure.QueryExpression").children(new String[]{"argument"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptActionCallDeclaredParameter = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.ActionCallDeclaredParameter").super_("jetbrains.mps.console.ideCommands.structure.ActionCallParameter").parents("jetbrains.mps.console.ideCommands.structure.ActionCallParameter").references("declaration").create();
  /*package*/ final ConceptDescriptor myConceptActionCallGlobalParameter = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.ActionCallGlobalParameter").super_("jetbrains.mps.console.ideCommands.structure.ActionCallParameter").parents("jetbrains.mps.console.ideCommands.structure.ActionCallParameter").references("declaration").create();
  /*package*/ final ConceptDescriptor myConceptActionCallParameter = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.ActionCallParameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"value"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptCallActionExpression = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.CallActionExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.console.blCommand.structure.ConsoleExpression").references("action").children(new String[]{"parameter"}, new boolean[]{true}).alias("#callAction", "call an IDE action with custom parameters").create();
  /*package*/ final ConceptDescriptor myConceptClean = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.Clean").super_("jetbrains.mps.console.ideCommands.structure.AbsractMake").parents("jetbrains.mps.console.ideCommands.structure.AbsractMake").alias("#clean", "clean files *.generated").create();
  /*package*/ final ConceptDescriptor myConceptClickableGenerator = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.ClickableGenerator").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.base.structure.IClickable").properties("moduleId").create();
  /*package*/ final ConceptDescriptor myConceptGlobalStatisticTarget = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.GlobalStatisticTarget").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.ideCommands.structure.IStatisticsTarget", "jetbrains.mps.console.ideCommands.structure.INodeSetReference").alias("global", "").create();
  /*package*/ final ConceptDescriptor myConceptINodeSetReference = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.INodeSetReference").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIStatisticsTarget = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.IStatisticsTarget").interface_().create();
  /*package*/ final ConceptDescriptor myConceptMake = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.Make").super_("jetbrains.mps.console.ideCommands.structure.AbsractMake").parents("jetbrains.mps.console.ideCommands.structure.AbsractMake").alias("#make", "make models").create();
  /*package*/ final ConceptDescriptor myConceptModelProperties = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.ModelProperties").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"targetModel"}, new boolean[]{false}).alias("#modelProperties", "").create();
  /*package*/ final ConceptDescriptor myConceptModelReference = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.ModelReference").super_("jetbrains.mps.lang.smodel.structure.ModelReferenceExpression").parents("jetbrains.mps.lang.smodel.structure.ModelReferenceExpression").alias("model", "").create();
  /*package*/ final ConceptDescriptor myConceptModelStatisticsTarget = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.ModelStatisticsTarget").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.ideCommands.structure.IStatisticsTarget", "jetbrains.mps.console.ideCommands.structure.INodeSetReference").children(new String[]{"target"}, new boolean[]{false}).alias("model", "").create();
  /*package*/ final ConceptDescriptor myConceptModuleProperties = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.ModuleProperties").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"targetModule"}, new boolean[]{false}).alias("#moduleProperties", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeReference = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.NodeReference").super_("jetbrains.mps.lang.smodel.structure.NodeRefExpression").parents("jetbrains.mps.lang.smodel.structure.NodeRefExpression").alias("node", "").create();
  /*package*/ final ConceptDescriptor myConceptOfAspectOperation = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.OfAspectOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.console.blCommand.structure.ConsoleOperation").references("requestedAspect").alias("ofAspect", "filter models by their aspect").create();
  /*package*/ final ConceptDescriptor myConceptProjectStatisticsTarget = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.ProjectStatisticsTarget").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.ideCommands.structure.IStatisticsTarget", "jetbrains.mps.console.ideCommands.structure.INodeSetReference").alias("project", "").create();
  /*package*/ final ConceptDescriptor myConceptRebuildProjectCommand = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.RebuildProjectCommand").super_("jetbrains.mps.console.base.structure.InterpretedCommand").parents("jetbrains.mps.console.base.structure.InterpretedCommand", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"model"}, new boolean[]{false}).abstract_().alias("#rebuild project", "clean and make").create();
  /*package*/ final ConceptDescriptor myConceptRemoveGenSources = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.RemoveGenSources").super_("jetbrains.mps.console.ideCommands.structure.AbsractMake").parents("jetbrains.mps.console.ideCommands.structure.AbsractMake").alias("#removeGenSources", "remove source_gen").create();
  /*package*/ final ConceptDescriptor myConceptShowBrokenReferences = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.ShowBrokenReferences").super_("jetbrains.mps.console.base.structure.InterpretedCommand").parents("jetbrains.mps.console.base.structure.InterpretedCommand").children(new String[]{"target"}, new boolean[]{false}).alias("#showBrokenRefs", "show broken references").create();
  /*package*/ final ConceptDescriptor myConceptShowGenPlan = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.ShowGenPlan").super_("jetbrains.mps.console.base.structure.InterpretedCommand").parents("jetbrains.mps.console.base.structure.InterpretedCommand").children(new String[]{"targetModel"}, new boolean[]{false}).alias("#showGenPlan", "show the generation plan").create();
  /*package*/ final ConceptDescriptor myConceptStatCommand = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.StatCommand").super_("jetbrains.mps.console.base.structure.InterpretedCommand").parents("jetbrains.mps.console.base.structure.InterpretedCommand").children(new String[]{"target"}, new boolean[]{false}).alias("#stat", "display useful statistics").create();
  /*package*/ final ConceptDescriptor myConceptSubtreeStatisticsTarget = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.SubtreeStatisticsTarget").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.ideCommands.structure.IStatisticsTarget", "jetbrains.mps.console.ideCommands.structure.INodeSetReference").children(new String[]{"target"}, new boolean[]{false}).alias("node", "").create();
  /*package*/ final ConceptDescriptor myConceptUnloadModelsCommand = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.UnloadModelsCommand").super_("jetbrains.mps.console.base.structure.InterpretedCommand").parents("jetbrains.mps.console.base.structure.InterpretedCommand", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").abstract_().alias("#unload models", "").create();
  /*package*/ final ConceptDescriptor myConceptWithDependencies = new ConceptDescriptorBuilder("jetbrains.mps.console.ideCommands.structure.WithDependencies").super_("jetbrains.mps.console.blCommand.structure.QueryParameter").parents("jetbrains.mps.console.blCommand.structure.QueryParameter").alias("withDependencies", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbsractMake, myConceptActionCallDeclaredParameter, myConceptActionCallGlobalParameter, myConceptActionCallParameter, myConceptCallActionExpression, myConceptClean, myConceptClickableGenerator, myConceptGlobalStatisticTarget, myConceptINodeSetReference, myConceptIStatisticsTarget, myConceptMake, myConceptModelProperties, myConceptModelReference, myConceptModelStatisticsTarget, myConceptModuleProperties, myConceptNodeReference, myConceptOfAspectOperation, myConceptProjectStatisticsTarget, myConceptRebuildProjectCommand, myConceptRemoveGenSources, myConceptShowBrokenReferences, myConceptShowGenPlan, myConceptStatCommand, myConceptSubtreeStatisticsTarget, myConceptUnloadModelsCommand, myConceptWithDependencies);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0db, conceptFqName)) {
      case 0:
        return myConceptAbsractMake;
      case 1:
        return myConceptActionCallDeclaredParameter;
      case 2:
        return myConceptActionCallGlobalParameter;
      case 3:
        return myConceptActionCallParameter;
      case 4:
        return myConceptCallActionExpression;
      case 5:
        return myConceptClean;
      case 6:
        return myConceptClickableGenerator;
      case 7:
        return myConceptGlobalStatisticTarget;
      case 8:
        return myConceptINodeSetReference;
      case 9:
        return myConceptIStatisticsTarget;
      case 10:
        return myConceptMake;
      case 11:
        return myConceptModelProperties;
      case 12:
        return myConceptModelReference;
      case 13:
        return myConceptModelStatisticsTarget;
      case 14:
        return myConceptModuleProperties;
      case 15:
        return myConceptNodeReference;
      case 16:
        return myConceptOfAspectOperation;
      case 17:
        return myConceptProjectStatisticsTarget;
      case 18:
        return myConceptRebuildProjectCommand;
      case 19:
        return myConceptRemoveGenSources;
      case 20:
        return myConceptShowBrokenReferences;
      case 21:
        return myConceptShowGenPlan;
      case 22:
        return myConceptStatCommand;
      case 23:
        return myConceptSubtreeStatisticsTarget;
      case 24:
        return myConceptUnloadModelsCommand;
      case 25:
        return myConceptWithDependencies;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0db = new String[]{"jetbrains.mps.console.ideCommands.structure.AbsractMake", "jetbrains.mps.console.ideCommands.structure.ActionCallDeclaredParameter", "jetbrains.mps.console.ideCommands.structure.ActionCallGlobalParameter", "jetbrains.mps.console.ideCommands.structure.ActionCallParameter", "jetbrains.mps.console.ideCommands.structure.CallActionExpression", "jetbrains.mps.console.ideCommands.structure.Clean", "jetbrains.mps.console.ideCommands.structure.ClickableGenerator", "jetbrains.mps.console.ideCommands.structure.GlobalStatisticTarget", "jetbrains.mps.console.ideCommands.structure.INodeSetReference", "jetbrains.mps.console.ideCommands.structure.IStatisticsTarget", "jetbrains.mps.console.ideCommands.structure.Make", "jetbrains.mps.console.ideCommands.structure.ModelProperties", "jetbrains.mps.console.ideCommands.structure.ModelReference", "jetbrains.mps.console.ideCommands.structure.ModelStatisticsTarget", "jetbrains.mps.console.ideCommands.structure.ModuleProperties", "jetbrains.mps.console.ideCommands.structure.NodeReference", "jetbrains.mps.console.ideCommands.structure.OfAspectOperation", "jetbrains.mps.console.ideCommands.structure.ProjectStatisticsTarget", "jetbrains.mps.console.ideCommands.structure.RebuildProjectCommand", "jetbrains.mps.console.ideCommands.structure.RemoveGenSources", "jetbrains.mps.console.ideCommands.structure.ShowBrokenReferences", "jetbrains.mps.console.ideCommands.structure.ShowGenPlan", "jetbrains.mps.console.ideCommands.structure.StatCommand", "jetbrains.mps.console.ideCommands.structure.SubtreeStatisticsTarget", "jetbrains.mps.console.ideCommands.structure.UnloadModelsCommand", "jetbrains.mps.console.ideCommands.structure.WithDependencies"};
}
