package jetbrains.mps.console.base.util;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.annotations.NotNull;

public abstract class SubconceptsScope extends Scope {

  protected SNode concept;
  protected SModel model;


  public SubconceptsScope(SNode concept, SModel model) {
    this.concept = concept;
    this.model = model;
  }



  public abstract String getName(SNode child);

  public Iterable<SNode> getAvailableElements(@Nullable final String prefix) {
    SConceptOperations.getAllSubConcepts(concept, model, GlobalScope.getInstance());
    Iterable<SNode> seq = SConceptOperations.getAllSubConcepts(concept, model, GlobalScope.getInstance());
    if (prefix == null || prefix.isEmpty()) {
      return seq;
    }
    return Sequence.fromIterable(seq).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        String name = getName(it);
        return name != null && name.startsWith(prefix);
      }
    });
  }

  @Nullable
  public SNode resolve(SNode contextNode, @NotNull String refText) {
    SNode result = null;
    for (SNode n : Sequence.fromIterable(getAvailableElements(null))) {
      String name = getName(n);
      if (name.equals(refText)) {
        if (result == null) {
          result = n;
        } else {
          return null;
        }
      }
    }
    return result;
  }

  @Nullable
  public String getReferenceText(SNode contextNode, @NotNull SNode node) {
    String result = getName(node);
    for (SNode n : Sequence.fromIterable(getAvailableElements(null))) {
      if (n == node) {
        continue;
      }
      String name = getName(n);
      if (name.equals(result)) {
        // ambiguity 
        return null;
      }
    }
    return result;
  }
}
