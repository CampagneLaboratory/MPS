package jetbrains.mps.console.lang.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.Project;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.script.ScriptBuilder;
import jetbrains.mps.make.facet.IFacet;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.project.facets.JavaModuleOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.facets.JavaModuleFacet;
import jetbrains.mps.make.script.IScriptController;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.make.script.IOption;
import jetbrains.mps.make.script.IQuery;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.script.IPropertiesPool;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import java.util.Collections;
import jetbrains.mps.project.ModuleContext;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.make.IMakeService;
import java.util.concurrent.Future;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.smodel.resources.ModelsToResources;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.resources.CResource;
import javax.swing.SwingUtilities;
import jetbrains.mps.compiler.IClassesData;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.classloading.ClassLoaderManager;
import java.lang.reflect.Method;
import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.ExecutionException;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.logging.Logger;

public class ConsoleCommand_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_execute_757553790980855637(final SNode thisNode, Project p) {
    final IScript scr = new ScriptBuilder().withFacetNames(new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("jetbrains.mps.make.facets.JavaCompile"), new IFacet.Name("jetbrains.mps.make.facets.Make")).withFinalTarget(new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compileToMemory")).toScript();

    final IClassPathItem classPath = JavaModuleOperations.createClassPathItem(SNodeOperations.getModel(thisNode).getModule().getFacet(JavaModuleFacet.class).getClassPath(), "console");

    IScriptController ctl = new IScriptController.Stub(new IConfigMonitor.Stub() {
      @Override
      public <T extends IOption> T relayQuery(IQuery<T> query) {
        return query.defaultOption();
      }
    }, new IJobMonitor.Stub()) {
      @Override
      public void setup(IPropertiesPool ppool) {
        super.setup(ppool);
        Tuples._1<Iterable<IClassPathItem>> params = (Tuples._1<Iterable<IClassPathItem>>) ppool.properties(new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compileToMemory"), Object.class);
        if (params != null) {
          params._0(Collections.<IClassPathItem>singletonList(classPath));
        }
      }
    };

    ModuleContext context = new ModuleContext(SNodeOperations.getModel(thisNode).getModule(), p);
    MakeSession session = new MakeSession(context, null, true);
    if (IMakeService.INSTANCE.get().openNewSession(session)) {
      Future<IResult> future = IMakeService.INSTANCE.get().make(session, new ModelsToResources(context, Sequence.<SModel>singleton(SNodeOperations.getModel(thisNode))).resources(false), scr, ctl);
      try {
        IResult result = future.get();
        if (result.isSucessful()) {
          final CResource out = (CResource) Sequence.fromIterable(result.output()).first();
          SwingUtilities.invokeLater(new Runnable() {
            public void run() {
              final IClassesData cd = out.classes();
              if (cd == null) {
                return;
              }

              final Wrappers._T<ClassLoader> loader = new Wrappers._T<ClassLoader>();
              ModelAccess.instance().runReadAction(new Runnable() {
                public void run() {
                  SModel m = SNodeOperations.getModel(thisNode);
                  loader.value = cd.getClassLoader(ClassLoaderManager.getInstance().getClassLoader(m.getModule()));
                }
              });
              try {
                Method[] methods = Class.forName("jetbrains.mps.execution.Main", true, loader.value).getMethods();
                for (Method method : methods) {
                  if (method.getName().equals("main")) {
                    method.invoke(new String[0]);
                  }
                }
              } catch (ClassNotFoundException ignore) {
                LOG.warning("Exception on query loading", ignore);
              } catch (IllegalAccessException ignore) {
                LOG.warning("Exception on query loading", ignore);
              } catch (InvocationTargetException ignore) {
                LOG.warning("Exception on query loading", ignore);
              }
            }
          });
        }
      } catch (InterruptedException ignore) {
      } catch (ExecutionException ignore) {
      }
    }
  }

  @Deprecated
  public static void call_execute_757553790980855637(SNode thisNode, Project p) {
    BehaviorReflection.invokeVirtual(Void.class, thisNode, "virtual_execute_757553790980855637", new Object[]{p});
  }

  @Deprecated
  public static void callSuper_execute_757553790980855637(SNode thisNode, String callerConceptFqName, Project p) {
    BehaviorManager.getInstance().invokeSuper(Void.class, SNodeOperations.cast(thisNode, "jetbrains.mps.console.lang.structure.ConsoleCommand"), callerConceptFqName, "virtual_execute_757553790980855637", new Class[]{SNode.class, Project.class}, new Object[]{p});
  }

  private static Logger LOG = Logger.getLogger(ConsoleCommand_Behavior.class);
}
