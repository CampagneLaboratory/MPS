package jetbrains.mps.console.base.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class NodeReferenceResultPart_Constraints extends BaseConstraintsDescriptor {
  public NodeReferenceResultPart_Constraints() {
    super("jetbrains.mps.console.base.structure.NodeReferenceResultPart");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("clickableReferenceTarget", new BaseReferenceConstraintsDescriptor("clickableReferenceTarget", this) {
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          }

          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            return (SNodeOperations.isInstanceOf(_context.getParameterNode(), "jetbrains.mps.lang.core.structure.INamedConcept") ?
              (SPropertyOperations.getString(SNodeOperations.cast(_context.getParameterNode(), "jetbrains.mps.lang.core.structure.INamedConcept"), "name")) :
              "node"
            );
          }
        };
      }
    });
    return references;
  }
}
