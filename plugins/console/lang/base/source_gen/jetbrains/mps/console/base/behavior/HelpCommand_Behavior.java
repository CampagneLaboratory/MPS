package jetbrains.mps.console.base.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.console.tool.ConsoleContext;
import jetbrains.mps.console.tool.ConsoleStream;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import org.apache.log4j.Priority;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class HelpCommand_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_doExecute_3321948346081469500(SNode thisNode, ConsoleContext context, ConsoleStream console) {
    final Language base = ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("de1ad86d-6e50-4a02-b306-d4d17f64c375(jetbrains.mps.console.base)"), Language.class);
    Iterable<Language> consoleLanguages = ModuleRepositoryFacade.getInstance().getAllExtendingLanguages(ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("de1ad86d-6e50-4a02-b306-d4d17f64c375(jetbrains.mps.console.base)"), Language.class));
    consoleLanguages = Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<Language>() {
      public Iterable<Language> iterable() {
        return new Iterable<Language>() {
          public Iterator<Language> iterator() {
            return new YieldingIterator<Language>() {
              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this.__CP__ = 1;
                      this.yield(base);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    })).concat(Sequence.fromIterable(consoleLanguages));
    console.addText(Sequence.fromIterable(SNodeOperations.ofConcept(Sequence.fromIterable(consoleLanguages).translate(new ITranslator2<Language, SModel>() {
      public Iterable<SModel> translate(Language it) {
        return it.getModels();
      }
    }).translate(new ITranslator2<SModel, SNode>() {
      public Iterable<SNode> translate(SModel it) {
        return it.getRootNodes();
      }
    }), SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.ConceptDeclaration"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ListSequence.fromList(SLinkOperations.getTargets(it, "implements", true)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SLinkOperations.getTarget(it, "intfc", false) == SNodeOperations.getNode("r:359b1d2b-77c4-46df-9bf2-b25cbea32254(jetbrains.mps.console.base.structure)", "473081947981012231");
          }
        });
      }
    }).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        try {
          return BehaviorReflection.invokeVirtualStatic(String.class, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(((SNode) it))), "virtual_getHelp_473081947982699339", new Object[]{});
        } catch (RuntimeException e) {
          if (LOG.isEnabledFor(Priority.WARN)) {
            LOG.warn("Concept " + BehaviorReflection.invokeVirtual(String.class, it, "virtual_getFqName_1213877404258", new Object[]{}) + " implements ConsoleHelpProvider but does not implement getHelp() method", e);
          }
          return "";
        }
      }
    }).foldLeft("", new ILeftCombinator<String, String>() {
      public String combine(String s, String it) {
        return ((s == null || s.length() == 0) ?
          it :
          s + "\n" + it
        );
      }
    }));
  }

  public static String virtual_getHelp_473081947982699339(SAbstractConcept thisConcept) {
    String result = "Constructions available in console:\n\n";
    result += "?                      command       display this help\n";
    return result;

  }

  protected static Logger LOG = LogManager.getLogger(HelpCommand_Behavior.class);
}
