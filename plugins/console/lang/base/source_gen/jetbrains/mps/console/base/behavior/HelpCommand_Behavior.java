package jetbrains.mps.console.base.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.console.tool.ConsoleContext;
import jetbrains.mps.console.tool.ConsoleStream;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IListSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import org.apache.log4j.Priority;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.internal.collections.runtime.IRightCombinator;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class HelpCommand_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_doExecute_3321948346081469500(SNode thisNode, ConsoleContext context, ConsoleStream console) {
    final Language base = ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("de1ad86d-6e50-4a02-b306-d4d17f64c375(jetbrains.mps.console.base)"), Language.class);
    Iterable<Language> consoleLanguages = ModuleRepositoryFacade.getInstance().getAllExtendingLanguages(ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("de1ad86d-6e50-4a02-b306-d4d17f64c375(jetbrains.mps.console.base)"), Language.class));
    consoleLanguages = Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<Language>() {
      public Iterable<Language> iterable() {
        return new Iterable<Language>() {
          public Iterator<Language> iterator() {
            return new YieldingIterator<Language>() {
              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this.__CP__ = 1;
                      this.yield(base);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    })).concat(Sequence.fromIterable(consoleLanguages));
    Iterable<? extends Iterable<String>> result = Sequence.fromIterable(SNodeOperations.ofConcept(Sequence.fromIterable(consoleLanguages).translate(new ITranslator2<Language, SModel>() {
      public Iterable<SModel> translate(Language it) {
        return it.getModels();
      }
    }).translate(new ITranslator2<SModel, SNode>() {
      public Iterable<SNode> translate(SModel it) {
        return it.getRootNodes();
      }
    }), "jetbrains.mps.lang.structure.structure.ConceptDeclaration")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SPropertyOperations.getBoolean(it, "abstract")) && SConceptOperations.isSubConceptOf(it, "jetbrains.mps.console.base.structure.ConsoleHelpProvider");
      }
    }).toListSequence().select(new ISelector<SNode, IListSequence<String>>() {
      public IListSequence<String> select(SNode it) {
        try {
          SNode chp = (SNode) it;
          return ListSequence.fromListAndArray(new ArrayList<String>(), BehaviorReflection.invokeVirtualStatic(String.class, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(chp)), "virtual_getDisplayString_7006261637493126103", new Object[]{}), BehaviorReflection.invokeVirtualStatic(String.class, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(chp)), "virtual_getKind_7006261637493126084", new Object[]{}), BehaviorReflection.invokeVirtualStatic(String.class, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(chp)), "virtual_getShortHelp_473081947982699339", new Object[]{}));
        } catch (RuntimeException e) {
          if (LOG.isEnabledFor(Priority.WARN)) {
            LOG.warn("Concept " + BehaviorReflection.invokeVirtual(String.class, it, "virtual_getFqName_1213877404258", new Object[]{}) + " implements ConsoleHelpProvider but does not implement getHelp() method", e);
          }
          try {
            return ListSequence.fromListAndArray(new ArrayList<String>(), BehaviorReflection.invokeVirtualStatic(String.class, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(((SNode) it))), "virtual_getDisplayString_7006261637493126103", new Object[]{}), "", "");
          } catch (RuntimeException e1) {
            return ListSequence.fromListAndArray(new ArrayList<String>(), SPropertyOperations.getString(it, "name"), "", "");
          }
        }
      }
    }).toListSequence();
    List<List<String>> resultList = ListSequence.fromListWithValues(new ArrayList<List<String>>(), Sequence.fromIterable(result).select(new ISelector<Iterable<String>, IListSequence<String>>() {
      public IListSequence<String> select(Iterable<String> it) {
        return Sequence.fromIterable(it).toListSequence();
      }
    }));

    List<Integer> maxLens = ListSequence.fromList(new LinkedList<Integer>());
    for (int i = 0; i < ListSequence.fromList(resultList).select(new ISelector<List<String>, Integer>() {
      public Integer select(List<String> it) {
        return ListSequence.fromList(it).count();
      }
    }).foldRight(0, new IRightCombinator<Integer, Integer>() {
      public Integer combine(Integer it, Integer s) {
        return Math.max(s, it);
      }
    }); i++) {
      int maxLength = 0;
      for (List<String> row : ListSequence.fromList(resultList)) {
        int length = check_x46ur7_a0a0b0h0a(ListSequence.fromList(row).getElement(i));
        if (length > maxLength) {
          maxLength = length;
        }
      }
      ListSequence.fromList(maxLens).addElement(maxLength);
    }

    StringBuilder output = new StringBuilder();
    for (List<String> row : ListSequence.fromList(resultList)) {
      for (int i = 0; i < ListSequence.fromList(maxLens).count(); i++) {
        output.append((ListSequence.fromList(row).getElement(i) == null ? "" : ListSequence.fromList(row).getElement(i)));
        if (i < ListSequence.fromList(maxLens).count() - 1) {
          for (int j = check_x46ur7_a0a0b0a0k0a(ListSequence.fromList(row).getElement(i)); j < ListSequence.fromList(maxLens).getElement(i) + 2; j++) {
            output.append(" ");
          }
        }
      }
      output.append("\n");
    }
    console.addText("Constructions available in console:\n\n");
    console.addText(output.toString());
  }

  public static String virtual_getShortHelp_473081947982699339(SAbstractConcept thisConcept) {
    return "display this help";
  }

  protected static Logger LOG = LogManager.getLogger(HelpCommand_Behavior.class);

  private static int check_x46ur7_a0a0b0h0a(String checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.length();
    }
    return 0;
  }

  private static int check_x46ur7_a0a0b0a0k0a(String checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.length();
    }
    return 0;
  }
}
