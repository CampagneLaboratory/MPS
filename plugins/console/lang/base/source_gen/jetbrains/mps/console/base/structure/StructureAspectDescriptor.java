package jetbrains.mps.console.base.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptCommand = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.Command").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.base.structure.ConsoleHelpProvider").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptCommandHolder = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.CommandHolder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.base.structure.HistoryItem", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"command"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptConsoleHelpProvider = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.ConsoleHelpProvider").interface_().create();
  /*package*/ final ConceptDescriptor myConceptConsoleRoot = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.ConsoleRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"history", "commandHolder"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptGeneratedCommand = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.GeneratedCommand").super_("jetbrains.mps.console.base.structure.Command").parents("jetbrains.mps.console.base.structure.Command").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptHelpCommand = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.HelpCommand").super_("jetbrains.mps.console.base.structure.InterpretedCommand").parents("jetbrains.mps.console.base.structure.InterpretedCommand", "jetbrains.mps.console.base.structure.ConsoleHelpProvider").children(new String[]{"target"}, new boolean[]{false}).alias("?", "help").create();
  /*package*/ final ConceptDescriptor myConceptHelpConceptReference = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.HelpConceptReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("command").create();
  /*package*/ final ConceptDescriptor myConceptHistory = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.History").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"item"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptHistoryItem = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.HistoryItem").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIActionHolder = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.IActionHolder").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIClickable = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.IClickable").interface_().parents("jetbrains.mps.console.base.structure.IActionHolder").properties("text").create();
  /*package*/ final ConceptDescriptor myConceptINodeWithReference = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.INodeWithReference").interface_().parents("jetbrains.mps.console.base.structure.IActionHolder").properties("referencePresentation").references("target").create();
  /*package*/ final ConceptDescriptor myConceptInterpretedCommand = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.InterpretedCommand").super_("jetbrains.mps.console.base.structure.Command").parents("jetbrains.mps.console.base.structure.Command").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptModifiedCommandHistoryItem = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.ModifiedCommandHistoryItem").super_("jetbrains.mps.console.base.structure.CommandHolder").parents("jetbrains.mps.console.base.structure.CommandHolder").children(new String[]{"modifiedCommand"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptNewLineResponseItem = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.NewLineResponseItem").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.base.structure.ResponseItem").create();
  /*package*/ final ConceptDescriptor myConceptNodeReferencePresentation = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.NodeReferencePresentation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.base.structure.INodeWithReference").create();
  /*package*/ final ConceptDescriptor myConceptNodeReferenceString = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.NodeReferenceString").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.base.structure.INodeWithReference").create();
  /*package*/ final ConceptDescriptor myConceptNodeResponseItem = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.NodeResponseItem").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.base.structure.ResponseItem").children(new String[]{"node"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptNodeWithClosure = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.NodeWithClosure").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.base.structure.IClickable").create();
  /*package*/ final ConceptDescriptor myConceptOutputConsoleRoot = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.OutputConsoleRoot").super_("jetbrains.mps.console.base.structure.ConsoleRoot").parents("jetbrains.mps.console.base.structure.ConsoleRoot").create();
  /*package*/ final ConceptDescriptor myConceptPastedNodeReference = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.PastedNodeReference").super_("jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression").parents("jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.console.base.structure.INodeWithReference").alias("pastedNodeRef", "").create();
  /*package*/ final ConceptDescriptor myConceptResponse = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.Response").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.base.structure.HistoryItem", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"item"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptResponseItem = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.ResponseItem").interface_().create();
  /*package*/ final ConceptDescriptor myConceptTextResponseItem = new ConceptDescriptorBuilder("jetbrains.mps.console.base.structure.TextResponseItem").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.base.structure.ResponseItem").properties("text").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCommand, myConceptCommandHolder, myConceptConsoleHelpProvider, myConceptConsoleRoot, myConceptGeneratedCommand, myConceptHelpCommand, myConceptHelpConceptReference, myConceptHistory, myConceptHistoryItem, myConceptIActionHolder, myConceptIClickable, myConceptINodeWithReference, myConceptInterpretedCommand, myConceptModifiedCommandHistoryItem, myConceptNewLineResponseItem, myConceptNodeReferencePresentation, myConceptNodeReferenceString, myConceptNodeResponseItem, myConceptNodeWithClosure, myConceptOutputConsoleRoot, myConceptPastedNodeReference, myConceptResponse, myConceptResponseItem, myConceptTextResponseItem);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0bb, conceptFqName)) {
      case 0:
        return myConceptCommand;
      case 1:
        return myConceptCommandHolder;
      case 2:
        return myConceptConsoleHelpProvider;
      case 3:
        return myConceptConsoleRoot;
      case 4:
        return myConceptGeneratedCommand;
      case 5:
        return myConceptHelpCommand;
      case 6:
        return myConceptHelpConceptReference;
      case 7:
        return myConceptHistory;
      case 8:
        return myConceptHistoryItem;
      case 9:
        return myConceptIActionHolder;
      case 10:
        return myConceptIClickable;
      case 11:
        return myConceptINodeWithReference;
      case 12:
        return myConceptInterpretedCommand;
      case 13:
        return myConceptModifiedCommandHistoryItem;
      case 14:
        return myConceptNewLineResponseItem;
      case 15:
        return myConceptNodeReferencePresentation;
      case 16:
        return myConceptNodeReferenceString;
      case 17:
        return myConceptNodeResponseItem;
      case 18:
        return myConceptNodeWithClosure;
      case 19:
        return myConceptOutputConsoleRoot;
      case 20:
        return myConceptPastedNodeReference;
      case 21:
        return myConceptResponse;
      case 22:
        return myConceptResponseItem;
      case 23:
        return myConceptTextResponseItem;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0bb = new String[]{"jetbrains.mps.console.base.structure.Command", "jetbrains.mps.console.base.structure.CommandHolder", "jetbrains.mps.console.base.structure.ConsoleHelpProvider", "jetbrains.mps.console.base.structure.ConsoleRoot", "jetbrains.mps.console.base.structure.GeneratedCommand", "jetbrains.mps.console.base.structure.HelpCommand", "jetbrains.mps.console.base.structure.HelpConceptReference", "jetbrains.mps.console.base.structure.History", "jetbrains.mps.console.base.structure.HistoryItem", "jetbrains.mps.console.base.structure.IActionHolder", "jetbrains.mps.console.base.structure.IClickable", "jetbrains.mps.console.base.structure.INodeWithReference", "jetbrains.mps.console.base.structure.InterpretedCommand", "jetbrains.mps.console.base.structure.ModifiedCommandHistoryItem", "jetbrains.mps.console.base.structure.NewLineResponseItem", "jetbrains.mps.console.base.structure.NodeReferencePresentation", "jetbrains.mps.console.base.structure.NodeReferenceString", "jetbrains.mps.console.base.structure.NodeResponseItem", "jetbrains.mps.console.base.structure.NodeWithClosure", "jetbrains.mps.console.base.structure.OutputConsoleRoot", "jetbrains.mps.console.base.structure.PastedNodeReference", "jetbrains.mps.console.base.structure.Response", "jetbrains.mps.console.base.structure.ResponseItem", "jetbrains.mps.console.base.structure.TextResponseItem"};
}
