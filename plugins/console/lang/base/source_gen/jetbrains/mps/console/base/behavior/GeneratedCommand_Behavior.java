package jetbrains.mps.console.base.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.command.base.runtime.ConsoleContext;
import jetbrains.mps.command.base.runtime.ConsoleStream;
import com.intellij.openapi.application.ApplicationManager;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.console.tool.BaseConsoleTab;
import jetbrains.mps.console.tool.ConsoleUtil;
import javax.swing.SwingUtilities;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.classloading.ClassLoaderManager;
import java.lang.reflect.Method;
import jetbrains.mps.smodel.ModelAccess;
import org.apache.log4j.Level;
import java.lang.reflect.InvocationTargetException;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class GeneratedCommand_Behavior {
  public static void init(SNode thisNode) {
  }
  public static void virtual_execute_6854397602732226506(SNode thisNode, final ConsoleContext context, final ConsoleStream console, final Runnable beforeCallback, final Runnable afterCallback) {
    ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {
      public void run() {
        final SModel model = ((BaseConsoleTab) context.getOutputWindow()).getConsoleModel();
        boolean result = ConsoleUtil.make(context.getProject(), model);
        if (!(result)) {
          return;
        }
        SwingUtilities.invokeLater(new Runnable() {
          public void run() {
            try {
              SModule module = model.getModule();
              String name = model.getModelName() + ".Main";
              Class<?> aClass = ClassLoaderManager.getInstance().getClass(module, name);
              if (aClass == null) {
                throw new ClassNotFoundException("No class " + name + " for module " + module);
              }
              Method[] methods = aClass.getMethods();
              for (final Method method : methods) {
                if (method.getName().equals("execute")) {
                  beforeCallback.run();
                  ModelAccess.instance().runWriteActionInCommand(new Runnable() {
                    public void run() {
                      try {
                        method.invoke(null, new Object[]{context, console});
                      } catch (IllegalAccessException ignore) {
                        if (LOG.isEnabledFor(Level.ERROR)) {
                          LOG.error("Exception on query loading", ignore);
                        }
                      } catch (InvocationTargetException ignore) {
                        if (LOG.isEnabledFor(Level.ERROR)) {
                          LOG.error("Exception on query loading", ignore);
                        }
                      }
                    }
                  });
                  afterCallback.run();
                }
              }
            } catch (ClassNotFoundException ignore) {
              if (LOG.isEnabledFor(Level.ERROR)) {
                LOG.error("Exception on query loading", ignore);
              }
            }
          }
        });
      }
    });
  }
  protected static Logger LOG = LogManager.getLogger(GeneratedCommand_Behavior.class);
}
