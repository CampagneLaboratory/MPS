package jetbrains.mps.console.base.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.console.tool.ConsoleContext;
import jetbrains.mps.console.tool.ConsoleStream;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.messages.MessagesViewTool;
import com.intellij.openapi.application.ApplicationManager;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.console.tool.ConsoleUtil;
import javax.swing.SwingUtilities;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.classloading.ClassLoaderManager;
import java.lang.reflect.Method;
import org.apache.log4j.Priority;
import java.lang.reflect.InvocationTargetException;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import com.intellij.openapi.project.Project;

public class GeneratedCommand_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_execute_6854397602732226506(SNode thisNode, final ConsoleContext context, final ConsoleStream console, final Runnable beforeCallback, final Runnable afterCallback) {
    check_3fkcai_a0a0(ProjectHelper.toIdeaProject(context.getProject()).getComponent(MessagesViewTool.class));
    ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {
      public void run() {
        final SModel model = context.getConsoleTab().getConsoleModel();
        try {
          boolean result = ConsoleUtil.make(context.getProject(), model);
          if (!(result)) {
            return;
          }
        } finally {
          SwingUtilities.invokeLater(new Runnable() {
            public void run() {
              check_3fkcai_a0a0a0a0b0a0a0a0b0a(ProjectHelper.toIdeaProject(context.getProject())).setShowToolAfterAddingMessage(true);
            }
          });
        }
        SwingUtilities.invokeLater(new Runnable() {
          public void run() {
            ModelAccess.instance().runWriteActionInCommand(new Runnable() {
              public void run() {
                try {
                  final ClassLoader loader = ClassLoaderManager.getInstance().getClassLoader(model.getModule());
                  String name = ConsoleUtil.getGeneratedModelName(context);

                  Method[] methods = Class.forName(name, true, loader).getMethods();
                  for (Method method : methods) {
                    if (method.getName().equals("execute")) {
                      beforeCallback.run();
                      method.invoke(null, new Object[]{context, console});
                      afterCallback.run();
                      return;
                    }
                  }
                } catch (ClassNotFoundException ignore) {
                  if (LOG.isEnabledFor(Priority.ERROR)) {
                    LOG.error("Exception on query loading", ignore);
                  }
                } catch (IllegalAccessException ignore) {
                  if (LOG.isEnabledFor(Priority.ERROR)) {
                    LOG.error("Exception on query loading", ignore);
                  }
                } catch (InvocationTargetException ignore) {
                  if (LOG.isEnabledFor(Priority.ERROR)) {
                    LOG.error("Exception on query loading", ignore);
                  }
                }
              }
            });
          }
        });
      }
    });
  }

  protected static Logger LOG = LogManager.getLogger(GeneratedCommand_Behavior.class);

  private static void check_3fkcai_a0a0(MessagesViewTool checkedDotOperand) {
    if (null != checkedDotOperand) {
      checkedDotOperand.setShowToolAfterAddingMessage(false);
    }

  }

  private static MessagesViewTool check_3fkcai_a0a0a0a0b0a0a0a0b0a(Project checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getComponent(MessagesViewTool.class);
    }
    return null;
  }
}
