package jetbrains.mps.console.base.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.Project;
import jetbrains.mps.console.tool.ConsoleStream;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.quickQueryLanguage.pluginSolution.plugin.QuickQueryUtils;
import javax.swing.SwingUtilities;
import jetbrains.mps.classloading.ClassLoaderManager;
import java.lang.reflect.Method;
import org.apache.log4j.Priority;
import java.lang.reflect.InvocationTargetException;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class GeneratedCommand_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_execute_757553790980855637(SNode thisNode, final Project p, final ConsoleStream console) {
    final SNode n = thisNode;

    ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {
      public void run() {
        final Wrappers._T<SModel> model = new Wrappers._T<SModel>();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            model.value = SNodeOperations.getModel(n);
          }
        });

        boolean result = QuickQueryUtils.make(p, model.value);
        if (!(result)) {
          return;
        }

        SwingUtilities.invokeLater(new Runnable() {
          public void run() {
            ModelAccess.instance().runWriteActionInCommand(new Runnable() {
              public void run() {
                try {
                  final ClassLoader loader = ClassLoaderManager.getInstance().getClassLoader(model.value.getModule());
                  String name = Console_Behavior.call_getGeneratedName_5211727872447036782(SNodeOperations.cast(SNodeOperations.getParent(n), "jetbrains.mps.console.base.structure.Console"));

                  Method[] methods = Class.forName(name, true, loader).getMethods();
                  for (Method method : methods) {
                    if (method.getName().equals("execute")) {
                      method.invoke(null, new Object[]{console});
                    }
                  }
                } catch (ClassNotFoundException ignore) {
                  if (LOG.isEnabledFor(Priority.WARN)) {
                    LOG.warn("Exception on query loading", ignore);
                  }
                } catch (IllegalAccessException ignore) {
                  if (LOG.isEnabledFor(Priority.WARN)) {
                    LOG.warn("Exception on query loading", ignore);
                  }
                } catch (InvocationTargetException ignore) {
                  if (LOG.isEnabledFor(Priority.WARN)) {
                    LOG.warn("Exception on query loading", ignore);
                  }
                }
              }
            });
          }
        });
      }
    });
  }

  protected static Logger LOG = LogManager.getLogger(GeneratedCommand_Behavior.class);
}
