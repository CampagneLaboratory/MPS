package jetbrains.mps.console.base.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new AbstractPrintExpression_Editor()));
      case 1:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BLCommand_Editor()));
      case 2:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BLExpression_Editor()));
      case 3:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new CommandHolder_Editor()));
      case 4:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new ConsoleRoot_Editor()));
      case 5:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new ExceptionHolder_Editor()));
      case 6:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new HelpCommand_Editor()));
      case 7:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new HelpConceptReference_Editor()));
      case 8:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new History_Editor()));
      case 9:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new IClickable_Editor()));
      case 10:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new INodeWithReference_Editor()));
      case 11:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new InterpretedCommand_Editor()));
      case 12:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new NewLineResponseItem_Editor()));
      case 13:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new NodeResponseItem_Editor()));
      case 14:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new OutputConsoleRoot_Editor()));
      case 15:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new PastedNodeReference_Editor()));
      case 16:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new Response_Editor()));
      case 17:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new TextResponseItem_Editor()));
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0c, descriptor.getConceptFqName())) {
      case 0:
        if ("jetbrains.mps.console.base.editor.ClickableEditorComponent".equals(editorComponentId)) {
          return collectEditorComponents(descriptor, editorComponentId, Collections.<ConceptEditorComponent>singletonList(new ClickableEditorComponent()));
        }
        break;
      case 1:
        if ("jetbrains.mps.console.base.editor.INodeWithReference_EditorComponent".equals(editorComponentId)) {
          return collectEditorComponents(descriptor, editorComponentId, Collections.<ConceptEditorComponent>singletonList(new INodeWithReference_EditorComponent()));
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.console.base.structure.AbstractPrintExpression", "jetbrains.mps.console.base.structure.BLCommand", "jetbrains.mps.console.base.structure.BLExpression", "jetbrains.mps.console.base.structure.CommandHolder", "jetbrains.mps.console.base.structure.ConsoleRoot", "jetbrains.mps.console.base.structure.ExceptionHolder", "jetbrains.mps.console.base.structure.HelpCommand", "jetbrains.mps.console.base.structure.HelpConceptReference", "jetbrains.mps.console.base.structure.History", "jetbrains.mps.console.base.structure.IClickable", "jetbrains.mps.console.base.structure.INodeWithReference", "jetbrains.mps.console.base.structure.InterpretedCommand", "jetbrains.mps.console.base.structure.NewLineResponseItem", "jetbrains.mps.console.base.structure.NodeResponseItem", "jetbrains.mps.console.base.structure.OutputConsoleRoot", "jetbrains.mps.console.base.structure.PastedNodeReference", "jetbrains.mps.console.base.structure.Response", "jetbrains.mps.console.base.structure.TextResponseItem"};
  private static String[] stringSwitchCases_xbvbvu_a0a0c = new String[]{"jetbrains.mps.console.base.structure.IClickable", "jetbrains.mps.console.base.structure.INodeWithReference"};
}
