package jetbrains.mps.console.base.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new CommandHolder_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new CommandResult_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new CommandResultLine_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new ConsoleDump_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new ConsoleRoot_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ConsoleScript_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new History_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new IClickable_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new INodeWithReference_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new InterpretedCommand_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new NodeResultPart_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new PastedNodeReference_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new TextResultPart_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        if ("jetbrains.mps.console.base.editor.ClickableEditorComponent".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new ClickableEditorComponent());
        }
        break;
      case 1:
        if ("jetbrains.mps.console.base.editor.INodeWithReference_EditorComponent".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new INodeWithReference_EditorComponent());
        }
        break;
      default:
    }
    return Collections.emptyList();
  }



  public Collection<ConceptEditorHint> getHints() {
    return Collections.emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.console.base.structure.CommandHolder", "jetbrains.mps.console.base.structure.CommandResult", "jetbrains.mps.console.base.structure.CommandResultLine", "jetbrains.mps.console.base.structure.ConsoleDump", "jetbrains.mps.console.base.structure.ConsoleRoot", "jetbrains.mps.console.base.structure.ConsoleScript", "jetbrains.mps.console.base.structure.History", "jetbrains.mps.console.base.structure.IClickable", "jetbrains.mps.console.base.structure.INodeWithReference", "jetbrains.mps.console.base.structure.InterpretedCommand", "jetbrains.mps.console.base.structure.NodeResultPart", "jetbrains.mps.console.base.structure.PastedNodeReference", "jetbrains.mps.console.base.structure.TextResultPart"};
  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"jetbrains.mps.console.base.structure.IClickable", "jetbrains.mps.console.base.structure.INodeWithReference"};
}
