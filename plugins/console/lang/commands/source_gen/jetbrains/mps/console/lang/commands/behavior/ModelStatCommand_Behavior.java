package jetbrains.mps.console.lang.commands.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.Project;
import jetbrains.mps.console.tool.ConsoleStream;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.util.NodesIterable;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.util.SNodeOperations;
import javax.swing.JOptionPane;

public class ModelStatCommand_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_execute_757553790980855637(final SNode thisNode, Project p, ConsoleStream console) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SModel model = SModelRepository.getInstance().getModelDescriptor(SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "model", true), "fqName"));
        int references = 0;
        int properties = 0;

        final StringBuilder messageText = new StringBuilder();
        for (SNode node : new NodesIterable(model)) {
          references += IterableUtil.asCollection(node.getReferences()).size();
          properties += SNodeOperations.getProperties(node).keySet().size();
        }
        messageText.append("Roots : ").append(IterableUtil.asCollection(model.getRootNodes()).size()).append("\n");
        messageText.append("Nodes : ").append(SNodeOperations.nodesCount(model)).append("\n");
        messageText.append("References : ").append(references).append("\n");
        messageText.append("Properties : ").append(properties).append("\n");

        JOptionPane.showMessageDialog(null, messageText);
      }
    });
  }
}
