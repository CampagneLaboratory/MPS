package jetbrains.mps.console.blCommand.runtime.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.Collection;
import jetbrains.mps.findUsages.FindUsagesManager;
import java.util.Collections;
import jetbrains.mps.progress.EmptyProgressMonitor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.project.ProjectHelper;
import org.apache.log4j.Level;
import jetbrains.mps.console.tool.ConsoleStream;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.console.actions.ClosureHoldingNodeUtil;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.ide.findusages.model.SearchResult;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.console.tool.ConsoleContext;
import java.io.StringWriter;
import java.io.PrintWriter;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.module.SearchScope;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;

public class CommandUtil {

  public static Iterable<SNode> nodes(ConsoleScope scope) {
    return Sequence.fromIterable(models(scope)).translate(new ITranslator2<SModel, SNode>() {
      public Iterable<SNode> translate(SModel it) {
        return SModelOperations.nodes(it, null);
      }
    });
  }

  public static Iterable<SReference> references(ConsoleScope scope) {
    return Sequence.fromIterable(nodes(scope)).translate(new ITranslator2<SNode, SReference>() {
      public Iterable<SReference> translate(SNode it) {
        return SNodeOperations.getReferences(it);
      }
    });
  }

  public static Iterable<SModel> models(ConsoleScope scope) {
    Iterable<SModel> allModels = scope.getSearchScope().getModels();
    return (scope.includeReadOnly() ? allModels : Sequence.fromIterable(allModels).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return !(it.isReadOnly());
      }
    }));
  }

  public static Iterable<SModule> modules(ConsoleScope scope) {
    Iterable<SModule> allModules = scope.getSearchScope().getModules();
    return (scope.includeReadOnly() ? allModules : Sequence.fromIterable(allModules).where(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return !(it.isReadOnly());
      }
    }));
  }

  public static Collection<SReference> usages(ConsoleScope scope, SNode node) {
    // todo: readOnly 
    Collection<SReference> result = FindUsagesManager.getInstance().findUsages(scope.getSearchScope(), Collections.<SNode>singleton(node), new EmptyProgressMonitor());
    return result;
  }

  public static Collection<SNode> instances(ConsoleScope scope, SAbstractConcept concept) {
    // todo: readOnly 
    return FindUsagesManager.getInstance().findInstances(scope.getSearchScope(), Collections.singleton(concept), false, new EmptyProgressMonitor());
  }

  public static void show(Project p, SearchResults results) {
    try {
      check_1pinza_a0a0a0n(ProjectHelper.toIdeaProject(p)).show(results, "No results to show");
    } catch (Exception e) {
      if (LOG.isEnabledFor(Level.WARN)) {
        LOG.warn("Exception in showing custom console result", e);
      }
    }
  }

  public static void printClosure(ConsoleStream console, _FunctionTypes._void_P0_E0 closure, String text) {
    SNode nodeWithClosure = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-2442401883381282302l, -5546511894809623691l), 1111629987770987206l, "jetbrains.mps.console.base.structure.NodeWithClosure")));
    SPropertyOperations.set(nodeWithClosure, MetaAdapterFactory.getProperty(new UUID(-2442401883381282302l, -5546511894809623691l), 2348043250037290416l, 3894227536041201194l, "text"), text);
    ClosureHoldingNodeUtil.getInstance().register(nodeWithClosure, closure);
    console.addNode(nodeWithClosure);
  }

  public static void printSequence(ConsoleStream console, final Project project, final _FunctionTypes._return_P0_E0<? extends SearchResults> results, int resultsCount, String resultDescription) {
    if (resultsCount == 0) {
      console.addText("empty sequence");
    } else {
      CommandUtil.printClosure(console, new _FunctionTypes._void_P0_E0() {
        public void invoke() {
          CommandUtil.show(project, results.invoke());
        }
      }, resultsCount + " " + resultDescription);
    }
  }

  public static SearchResults nodesToResults(Iterable<SNodeReference> nodes, final SRepository repository) {
    final SearchResults<SNode> res = new SearchResults<SNode>();
    Sequence.fromIterable(nodes).where(new IWhereFilter<SNodeReference>() {
      public boolean accept(SNodeReference it) {
        return check_1pinza_a0a0a0a0b0t(it, repository) != null;
      }
    }).visitAll(new IVisitor<SNodeReference>() {
      public void visit(SNodeReference it) {
        res.getSearchResults().add(new SearchResult<SNode>(check_1pinza_a0a0a0a0a0b0t(it, repository), "usage"));
      }
    });
    return res;
  }

  public static SearchResults modelsToResults(Iterable<SModelReference> models, final SRepository repository) {
    final SearchResults<SModel> res = new SearchResults<SModel>();
    Sequence.fromIterable(models).where(new IWhereFilter<SModelReference>() {
      public boolean accept(SModelReference it) {
        return check_1pinza_a0a0a0a0b0v(it, repository) != null;
      }
    }).visitAll(new IVisitor<SModelReference>() {
      public void visit(SModelReference it) {
        res.getSearchResults().add(new SearchResult<SModel>(check_1pinza_a0a0a0a0a0b0v(it, repository), "usage"));
      }
    });
    return res;
  }

  public static SearchResults modulesToResults(Iterable<SModuleReference> modules, final SRepository repository) {
    final SearchResults<SModule> res = new SearchResults<SModule>();
    Sequence.fromIterable(modules).where(new IWhereFilter<SModuleReference>() {
      public boolean accept(SModuleReference it) {
        return check_1pinza_a0a0a0a0b0x(it, repository) != null;
      }
    }).visitAll(new IVisitor<SModuleReference>() {
      public void visit(SModuleReference it) {
        res.getSearchResults().add(new SearchResult<SModule>(check_1pinza_a0a0a0a0a0b0x(it, repository), "usage"));
      }
    });
    return res;
  }

  public static SNodeReference getNodeReference(SNode aNode) {
    return check_1pinza_a0a52(aNode);
  }
  public static SNodeReference getReferenceReference(SReference aReference) {
    return check_1pinza_a0a62(check_1pinza_a0a0ab(aReference));
  }
  public static SModelReference getModelReference(SModel aModel) {
    return check_1pinza_a0a72(aModel);
  }
  public static SModuleReference getModuleReference(SModule aModule) {
    return check_1pinza_a0a82(aModule);
  }

  public static void addNodeReference(ConsoleStream console, SNode target) {
    SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-2442401883381282302l, -5546511894809623691l), 2348043250037383180l, "jetbrains.mps.console.base.structure.NodeReferencePresentation")));
    SLinkOperations.setTarget(node, MetaAdapterFactory.getReferenceLink(new UUID(-2442401883381282302l, -5546511894809623691l), 3939645998855102389l, 328850564588043375l, "target"), target);
    console.addNode(node);
  }

  public static void registerAnalyzeStacktraceDialogClosure(ConsoleContext context, ConsoleStream console, Throwable exception) {
    StringWriter writer = new StringWriter();
    exception.printStackTrace(new PrintWriter(writer));

    SNode exceptionHolder = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(1911026821630280634l, -8343922105556474022l), 6558068108107691796l, "jetbrains.mps.console.blCommand.structure.ExceptionHolder")));
    SPropertyOperations.set(exceptionHolder, MetaAdapterFactory.getProperty(new UUID(1911026821630280634l, -8343922105556474022l), 6558068108107691796l, 6558068108108282025l, "stackTrace"), writer.toString());
    SPropertyOperations.set(exceptionHolder, MetaAdapterFactory.getProperty(new UUID(-2442401883381282302l, -5546511894809623691l), 2348043250037290416l, 3894227536041201194l, "text"), exception.getClass().getName());
    console.addNode(exceptionHolder);
  }

  public static ConsoleScope createConsoleScope(@Nullable final SearchScope searchScope, final boolean includeReadOnly, final ConsoleContext context) {
    return new ConsoleScope() {

      private SearchScope mySearchScope = (searchScope == null ? context.getDefaultSearchscope() : searchScope);

      public SearchScope getSearchScope() {
        return mySearchScope;
      }
      public boolean includeReadOnly() {
        return includeReadOnly;
      }
    };
  }

  protected static Logger LOG = LogManager.getLogger(CommandUtil.class);
  private static UsagesViewTool check_1pinza_a0a0a0n(com.intellij.openapi.project.Project checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getComponent(UsagesViewTool.class);
    }
    return null;
  }
  private static SNode check_1pinza_a0a0a0a0b0t(SNodeReference checkedDotOperand, SRepository repository) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(repository);
    }
    return null;
  }
  private static SNode check_1pinza_a0a0a0a0a0b0t(SNodeReference checkedDotOperand, SRepository repository) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(repository);
    }
    return null;
  }
  private static SModel check_1pinza_a0a0a0a0b0v(SModelReference checkedDotOperand, SRepository repository) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(repository);
    }
    return null;
  }
  private static SModel check_1pinza_a0a0a0a0a0b0v(SModelReference checkedDotOperand, SRepository repository) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(repository);
    }
    return null;
  }
  private static SModule check_1pinza_a0a0a0a0b0x(SModuleReference checkedDotOperand, SRepository repository) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(repository);
    }
    return null;
  }
  private static SModule check_1pinza_a0a0a0a0a0b0x(SModuleReference checkedDotOperand, SRepository repository) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(repository);
    }
    return null;
  }
  private static SNodeReference check_1pinza_a0a52(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getReference();
    }
    return null;
  }
  private static SNodeReference check_1pinza_a0a62(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getReference();
    }
    return null;
  }
  private static SNode check_1pinza_a0a0ab(SReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getSourceNode();
    }
    return null;
  }
  private static SModelReference check_1pinza_a0a72(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getReference();
    }
    return null;
  }
  private static SModuleReference check_1pinza_a0a82(SModule checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModuleReference();
    }
    return null;
  }
}
