package jetbrains.mps.console.blCommand.runtime.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.util.FlattenIterable;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.findUsages.FindUsagesManager;
import java.util.Collections;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;

public class CommandUtil {
  public static Iterable<SNode> allNodes(SearchScope scope) {
    return new FlattenIterable<SNode>(((Collection<Iterable<SNode>>) Sequence.fromIterable(allModels(scope)).select(new ISelector<SModel, Iterable<SNode>>() {
      public Iterable<SNode> select(SModel it) {
        return SNodeUtil.getDescendants(it);
      }
    }).toListSequence()));
  }



  public static Iterable<SReference> allReferences(SearchScope scope) {
    return Sequence.fromIterable(allNodes(scope)).translate(new ITranslator2<SNode, SReference>() {
      public Iterable<SReference> translate(SNode it) {
        return SNodeOperations.getReferences(it);
      }
    });
  }



  public static Iterable<SModel> allModels(SearchScope scope) {
    Iterable<SModel> allModels = scope.getModels();
    return Sequence.fromIterable(allModels).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return !(it.isReadOnly());
      }
    });
  }



  public static Iterable<SModule> allModules(SearchScope scope) {
    Iterable<SModule> allModules = scope.getModules();
    return Sequence.fromIterable(allModules).where(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return !(it.isReadOnly());
      }
    });
  }



  public static void show(Project p, SearchResults results) {
    ProjectHelper.toIdeaProject(p).getComponent(UsagesViewTool.class).show(results);
  }



  public static SearchResults nodesToResults(Iterable<SNode> nodes) {
    final SearchResults<SNode> res = new SearchResults<SNode>();
    Sequence.fromIterable(nodes).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        res.getSearchResults().add(new SearchResult<SNode>(it, "usage"));
      }
    });
    return res;
  }



  public static SearchResults refsToResults(Iterable<SReference> nodes) {
    final SearchResults<SNode> res = new SearchResults<SNode>();
    Sequence.fromIterable(nodes).visitAll(new IVisitor<SReference>() {
      public void visit(SReference it) {
        res.getSearchResults().add(new SearchResult<SNode>(it.getSourceNode(), "usage"));
      }
    });
    return res;
  }



  public static SearchResults modelsToResults(Iterable<SModel> models) {
    final SearchResults<SModel> res = new SearchResults<SModel>();
    Sequence.fromIterable(models).visitAll(new IVisitor<SModel>() {
      public void visit(SModel it) {
        res.getSearchResults().add(new SearchResult<SModel>(it, "usage"));
      }
    });
    return res;
  }



  public static SearchResults modulesToResults(Iterable<SModule> modules) {
    final SearchResults<SModule> res = new SearchResults<SModule>();
    Sequence.fromIterable(modules).visitAll(new IVisitor<SModule>() {
      public void visit(SModule it) {
        res.getSearchResults().add(new SearchResult<SModule>(it, "usage"));
      }
    });
    return res;
  }



  public static Collection<SReference> usages(SearchScope scope, SNode node) {
    return FindUsagesManager.getInstance().findUsages(scope, Collections.<SNode>singleton(node), new EmptyProgressMonitor());
  }



  public static Collection<SNode> instances(SearchScope scope, SNode concept) {
    String cName = NameUtil.nodeFQName(concept);
    SAbstractConcept c = SConceptRepository.getInstance().getConcept(cName);
    return FindUsagesManager.getInstance().findInstances(scope, Collections.singleton(c), false, new EmptyProgressMonitor());
  }


}
