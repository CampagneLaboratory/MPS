package jetbrains.mps.console.blCommand.runtime.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.Collection;
import jetbrains.mps.findUsages.FindUsagesManager;
import java.util.Collections;
import jetbrains.mps.progress.EmptyProgressMonitor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;
import org.apache.log4j.Priority;
import jetbrains.mps.console.tool.ConsoleStream;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.console.actions.ClosureHoldingNodeUtil;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.console.tool.ConsoleContext;
import java.io.StringWriter;
import java.io.PrintWriter;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.ide.findusages.model.scopes.ProjectScope;
import jetbrains.mps.console.tool.ConsoleTool;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import javax.swing.SwingUtilities;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class CommandUtil {


  public static Iterable<SNode> nodes(ConsoleScope scope) {
    return Sequence.fromIterable(models(scope)).translate(new ITranslator2<SModel, SNode>() {
      public Iterable<SNode> translate(SModel it) {
        return SModelOperations.getNodes(it, null);
      }
    });
  }



  public static Iterable<SReference> references(ConsoleScope scope) {
    return Sequence.fromIterable(nodes(scope)).translate(new ITranslator2<SNode, SReference>() {
      public Iterable<SReference> translate(SNode it) {
        return SNodeOperations.getReferences(it);
      }
    });
  }



  public static Iterable<SModel> models(ConsoleScope scope) {
    Iterable<SModel> allModels = scope.getSearchScope().getModels();
    return (scope.includeReadOnly() ? allModels : Sequence.fromIterable(allModels).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return !(it.isReadOnly());
      }
    }));
  }



  public static Iterable<SModule> modules(ConsoleScope scope) {
    Iterable<SModule> allModules = scope.getSearchScope().getModules();
    return (scope.includeReadOnly() ? allModules : Sequence.fromIterable(allModules).where(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return !(it.isReadOnly());
      }
    }));
  }



  public static Collection<SReference> usages(ConsoleScope scope, SNode node) {
    // todo: readOnly 
    Collection<SReference> result = FindUsagesManager.getInstance().findUsages(scope.getSearchScope(), Collections.<SNode>singleton(node), new EmptyProgressMonitor());
    return result;
  }



  public static Collection<SNode> instances(ConsoleScope scope, String conceptName) {
    // todo: readOnly 
    SAbstractConcept c = SConceptRepository.getInstance().getConcept(conceptName);
    return FindUsagesManager.getInstance().findInstances(scope.getSearchScope(), Collections.singleton(c), false, new EmptyProgressMonitor());
  }



  public static void show(Project p, SearchResults results) {
    try {
      ProjectHelper.toIdeaProject(p).getComponent(UsagesViewTool.class).show(results, "No results to show");
    } catch (Exception e) {
      if (LOG.isEnabledFor(Priority.WARN)) {
        LOG.warn("Exception in showing custom console result", e);
      }
    }
  }



  public static void printClosure(ConsoleStream console, _FunctionTypes._void_P0_E0 closure, String text) {
    SNode nodeWithClosure = SConceptOperations.createNewNode("jetbrains.mps.console.base.structure.NodeWithClosure", null);
    SPropertyOperations.set(nodeWithClosure, "text", text);
    ClosureHoldingNodeUtil.getInstance().register(nodeWithClosure, closure);
    console.addNode(nodeWithClosure);
  }



  public static void printSequence(ConsoleStream console, final Project project, final SearchResults results, int resultsCount, String resultDescription) {
    CommandUtil.printClosure(console, new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        CommandUtil.show(project, results);
      }
    }, (resultsCount == 0 ? "empty sequence" : resultsCount + " " + resultDescription));
  }



  public static SearchResults nodesToResults(Iterable<SNode> nodes) {
    final SearchResults<SNode> res = new SearchResults<SNode>();
    Sequence.fromIterable(nodes).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        res.getSearchResults().add(new SearchResult<SNode>(it, "usage"));
      }
    });
    return res;
  }



  public static SearchResults refsToResults(Iterable<SReference> references) {
    final SearchResults<SNode> res = new SearchResults<SNode>();
    Sequence.fromIterable(references).visitAll(new IVisitor<SReference>() {
      public void visit(SReference it) {
        res.getSearchResults().add(new SearchResult<SNode>(it.getSourceNode(), "usage"));
      }
    });
    return res;
  }



  public static SearchResults modelsToResults(Iterable<SModel> models) {
    final SearchResults<SModel> res = new SearchResults<SModel>();
    Sequence.fromIterable(models).visitAll(new IVisitor<SModel>() {
      public void visit(SModel it) {
        res.getSearchResults().add(new SearchResult<SModel>(it, "usage"));
      }
    });
    return res;
  }



  public static SearchResults modulesToResults(Iterable<? extends SModule> modules) {
    final SearchResults<SModule> res = new SearchResults<SModule>();
    Sequence.fromIterable(modules).visitAll(new IVisitor<SModule>() {
      public void visit(SModule it) {
        res.getSearchResults().add(new SearchResult<SModule>(it, "usage"));
      }
    });
    return res;
  }



  public static void addNodeReference(ConsoleStream console, SNode target) {
    SNode node = SConceptOperations.createNewNode("jetbrains.mps.console.base.structure.NodeReferencePresentation", null);
    SLinkOperations.setTarget(node, "target", target, false);
    console.addNode(node);
  }



  public static void registerAnalyzeStacktraceDialogClosure(ConsoleContext context, ConsoleStream console, Throwable exception) {
    StringWriter writer = new StringWriter();
    exception.printStackTrace(new PrintWriter(writer));

    SNode exceptionHolder = SConceptOperations.createNewNode("jetbrains.mps.console.blCommand.structure.ExceptionHolder", null);
    SPropertyOperations.set(exceptionHolder, "stackTrace", writer.toString());
    SPropertyOperations.set(exceptionHolder, "text", exception.getClass().getName());
    console.addNode(exceptionHolder);
  }



  public static ConsoleScope createConsoleScope(@Nullable final SearchScope searchScope, final boolean includeReadOnly, final ConsoleContext context) {
    return new ConsoleScope() {

      private SearchScope mySearchScope = (searchScope == null ? new ProjectScope(context.getProject()) : searchScope);


      public SearchScope getSearchScope() {
        return mySearchScope;
      }

      public boolean includeReadOnly() {
        return includeReadOnly;
      }
    };
  }



  public static void executeScript(ConsoleContext context, SNode script) {
    final ConsoleTool consoleTool = check_1pinza_a0a0hb(ProjectHelper.toIdeaProject(context.getProject()));
    final Iterable<SNode> commands = BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), script, "virtual_getCommands_2197843344734463936", new Object[]{});
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        executeCommands(consoleTool, Sequence.fromIterable(commands).toListSequence(), 0);
      }
    });
  }



  public static void executeCommands(final ConsoleTool consoleTool, final List<SNode> commands, final int startWith) {
    if (startWith == ListSequence.fromList(commands).count()) {
      return;
    }
    consoleTool.executeCommand(ListSequence.fromList(commands).getElement(startWith), new Runnable() {
      public void run() {
        executeCommands(consoleTool, commands, startWith + 1);
      }
    });
  }


  protected static Logger LOG = LogManager.getLogger(CommandUtil.class);

  private static ConsoleTool check_1pinza_a0a0hb(com.intellij.openapi.project.Project checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getComponent(ConsoleTool.class);
    }
    return null;
  }
}
