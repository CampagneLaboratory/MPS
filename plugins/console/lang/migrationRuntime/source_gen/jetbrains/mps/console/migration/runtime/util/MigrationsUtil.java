package jetbrains.mps.console.migration.runtime.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.classloading.ClassLoaderManager;

public class MigrationsUtil {


  public static SModel getMigrationModel(final SModule module) {
    Iterable<SModel> models = module.getModels();
    return Sequence.fromIterable(models).findFirst(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return eq_7hm1hv_a0a0a0a0a0b0b(SModelOperations.getModelName(it), module.getModuleName() + "." + "migrations");
      }
    });
  }



  public static String getDescriptorFQName(SModule module) {
    return SModelOperations.getModelName(getMigrationModel(module)) + "." + getDescriptorClassName(module);
  }



  public static String getDescriptorClassName(SModule module) {
    return "MigrationDescriptorImpl";
  }



  public static MigrationDescriptor getMigrationDescriptor(SModule module) {
    final ClassLoader loader = ClassLoaderManager.getInstance().getClassLoader(module);
    try {
      Class descriptorClass = Class.forName(getDescriptorFQName(module), true, loader);
      return (MigrationDescriptor) descriptorClass.newInstance();
    } catch (ClassNotFoundException e) {
      return null;
    } catch (IllegalAccessException e) {
      return null;
    } catch (InstantiationException e) {
      return null;
    }
  }

  private static boolean eq_7hm1hv_a0a0a0a0a0b0b(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
