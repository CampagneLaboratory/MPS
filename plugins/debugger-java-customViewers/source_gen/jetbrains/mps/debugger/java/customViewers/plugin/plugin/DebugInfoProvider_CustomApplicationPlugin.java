package jetbrains.mps.debugger.java.customViewers.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.custom.BaseCustomApplicationPlugin;
import java.util.Set;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.debug.api.breakpoints.ILocationBreakpoint;
import com.intellij.openapi.project.Project;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.extensions.PluginId;
import com.intellij.ide.plugins.PluginManager;
import jetbrains.mps.debug.api.BreakpointCreatorsManager;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.util.Mapper2;
import jetbrains.mps.debug.api.Debuggers;
import jetbrains.mps.debug.api.DebuggerNotPresentException;
import jetbrains.mps.logging.Logger;

public class DebugInfoProvider_CustomApplicationPlugin extends BaseCustomApplicationPlugin {
  private Set<Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>>> myCreators = SetSequence.fromSet(new HashSet<Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>>>());

  public DebugInfoProvider_CustomApplicationPlugin() {
  }

  public void doInit() {
    PluginId debuggerPlugin = PluginManager.getPluginByClassName("jetbrains.mps.debug.api.BreakpointCreatorsManager");
    if (debuggerPlugin == null) {
      return;
    }
    BreakpointCreatorsManager manager = BreakpointCreatorsManager.getInstance();
    if (manager == null) {
      return;
    }

    // next lines needed for to be sure that all classes in dispose() loaded after init() 
    // basically: this code do nothing, but class loading 
    SetSequence.fromSet(DebugInfoProvider_CustomApplicationPlugin.this.myCreators).visitAll(new IVisitor<Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>>>() {
      public void visit(Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>> it) {
      }
    });

    {
      Mapper2<SNode, Project, ILocationBreakpoint> creator = new Mapper2<SNode, Project, ILocationBreakpoint>() {
        public ILocationBreakpoint value(SNode debuggableNode, Project project) {
          try {
            return Debuggers.getInstance().getDebuggerByNameSafe("Java").createBreakpoint(debuggableNode, "JAVA_LINE_BREAKPOINT", project);
          } catch (DebuggerNotPresentException e) {
            LOG.warning("Exception while creating breakpoint for node" + debuggableNode, e);
            return null;
          }

        }
      };
      manager.addConceptBreakpointCreator("jetbrains.mps.baseLanguage.structure.Statement", creator);
    }
    {
      Mapper2<SNode, Project, ILocationBreakpoint> creator = new Mapper2<SNode, Project, ILocationBreakpoint>() {
        public ILocationBreakpoint value(SNode debuggableNode, Project project) {
          try {
            return Debuggers.getInstance().getDebuggerByNameSafe("Java").createBreakpoint(debuggableNode, "JAVA_FIELD_BREAKPOINT", project);
          } catch (DebuggerNotPresentException e) {
            LOG.warning("Exception while creating breakpoint for node" + debuggableNode, e);
            return null;
          }

        }
      };
      manager.addConceptBreakpointCreator("jetbrains.mps.baseLanguage.structure.FieldDeclaration", creator);
      manager.addConceptBreakpointCreator("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration", creator);
    }
  }

  public void doDispose() {
    PluginId debuggerPlugin = PluginManager.getPluginByClassName("jetbrains.mps.debug.api.BreakpointCreatorsManager");
    if (debuggerPlugin == null) {
      return;
    }
    final BreakpointCreatorsManager manager = BreakpointCreatorsManager.getInstance();
    if (manager == null) {
      return;
    }
    manager.removeConceptBreakpointCreator("jetbrains.mps.baseLanguage.structure.Statement");
    manager.removeConceptBreakpointCreator("jetbrains.mps.baseLanguage.structure.FieldDeclaration");
    manager.removeConceptBreakpointCreator("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
    SetSequence.fromSet(DebugInfoProvider_CustomApplicationPlugin.this.myCreators).visitAll(new IVisitor<Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>>>() {
      public void visit(Tuples._2<_FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode>, _FunctionTypes._return_P2_E0<? extends ILocationBreakpoint, ? super SNode, ? super Project>> it) {
        manager.removeBreakpointCreator(it);
      }
    });
    SetSequence.fromSet(DebugInfoProvider_CustomApplicationPlugin.this.myCreators).clear();
  }

  private static Logger LOG = Logger.getLogger(DebugInfoProvider_CustomApplicationPlugin.class);
}
