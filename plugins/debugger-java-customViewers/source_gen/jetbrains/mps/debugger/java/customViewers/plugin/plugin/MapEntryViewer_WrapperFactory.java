package jetbrains.mps.debugger.java.customViewers.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.debugger.java.api.state.proxy.ValueWrapperFactory;
import jetbrains.mps.debugger.java.api.state.proxy.ValueWrapper;
import jetbrains.mps.debugger.java.api.state.proxy.JavaValue;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.debugger.java.api.evaluation.EvaluationUtils;
import jetbrains.mps.debugger.java.api.evaluation.EvaluationException;
import com.sun.jdi.Value;
import java.util.List;
import jetbrains.mps.debugger.java.api.state.watchables.CustomJavaWatchable;
import jetbrains.mps.debugger.java.api.evaluation.proxies.IObjectValueProxy;
import java.util.Collections;
import java.util.ArrayList;
import jetbrains.mps.debugger.java.api.state.proxy.ValueUtil;
import jetbrains.mps.debugger.java.api.evaluation.proxies.ProxyEqualsUtil;

public class MapEntryViewer_WrapperFactory extends ValueWrapperFactory {
  public MapEntryViewer_WrapperFactory() {
  }

  public ValueWrapper createValueWrapper(JavaValue value) {
    return new MapEntryViewer_WrapperFactory.MapEntryViewerWrapper(value);
  }

  @Override
  public boolean canWrapValue(@NotNull final JavaValue javaValue) {
    return EvaluationUtils.consumeEvaluationException(new EvaluationUtils.EvaluationInvocatable<Boolean>() {
      public Boolean invoke() throws EvaluationException {
        Value value = javaValue.getValue();
        if (value == null) {
          return false;
        }
        if (!(EvaluationUtils.getInstance().instanceOf(value.type(), "Ljava/util/Map$Entry;", value.virtualMachine()))) {
          return false;
        }
        return true;
      }
    }, false);
  }

  public static class MapEntryViewerWrapper extends ValueWrapper {
    private final String myPresentation;

    public MapEntryViewerWrapper(JavaValue value) {
      super(value);
      myPresentation = getValuePresentationImpl();
    }

    protected List<CustomJavaWatchable> getSubvaluesImpl() {
      return EvaluationUtils.consumeEvaluationException(new EvaluationUtils.EvaluationInvocatable<List<CustomJavaWatchable>>() {
        public List<CustomJavaWatchable> invoke() throws EvaluationException {
          return getSubvaluesImpl((IObjectValueProxy) myValueProxy);
        }
      }, Collections.<CustomJavaWatchable>emptyList());
    }

    protected List<CustomJavaWatchable> getSubvaluesImpl(IObjectValueProxy value) throws EvaluationException {
      List<CustomJavaWatchable> result = new ArrayList<CustomJavaWatchable>();
      IObjectValueProxy key = ((IObjectValueProxy) value.invokeMethod("getKey", "()Ljava/lang/Object;", getThreadReference()));
      IObjectValueProxy entryValue = ((IObjectValueProxy) value.invokeMethod("getValue", "()Ljava/lang/Object;", getThreadReference()));
      result.add(new CollectionsWatchables.MyWatchable_key(ValueUtil.getInstance().fromJDI(key.getJDIValue(), getThreadReference()), "key"));
      result.add(new CollectionsWatchables.MyWatchable_value(ValueUtil.getInstance().fromJDI(entryValue.getJDIValue(), getThreadReference()), "value"));
      return result;
    }

    private String getValuePresentationImpl() {
      return EvaluationUtils.consumeEvaluationException(new EvaluationUtils.EvaluationInvocatable<String>() {
        public String invoke() throws EvaluationException {
          return getValuePresentation((IObjectValueProxy) myValueProxy);
        }
      }, super.getValuePresentation());
    }

    public String getValuePresentation() {
      return myPresentation;
    }

    protected String getValuePresentation(IObjectValueProxy value) throws EvaluationException {
      IObjectValueProxy key = ((IObjectValueProxy) value.invokeMethod("getKey", "()Ljava/lang/Object;", getThreadReference()));
      IObjectValueProxy entryValue = ((IObjectValueProxy) value.invokeMethod("getValue", "()Ljava/lang/Object;", getThreadReference()));
      return "[" + ((ProxyEqualsUtil.javaEquals(key, null) ?
        "null" :
        (String) (((IObjectValueProxy) key.invokeMethod("toString", "()Ljava/lang/String;", getThreadReference()))).getJavaValue()
      )) + "] = " + ((ProxyEqualsUtil.javaEquals(entryValue, null) ?
        "null" :
        (String) (((IObjectValueProxy) entryValue.invokeMethod("toString", "()Ljava/lang/String;", getThreadReference()))).getJavaValue()
      ));
    }
  }
}
