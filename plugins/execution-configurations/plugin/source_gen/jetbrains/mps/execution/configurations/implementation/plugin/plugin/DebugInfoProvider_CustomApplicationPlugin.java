package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.custom.BaseCustomApplicationPlugin;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.extensions.PluginId;
import com.intellij.ide.plugins.PluginManager;
import jetbrains.mps.debug.api.DebugInfoManager;
import jetbrains.mps.util.Mapper2;
import jetbrains.mps.smodel.SNode;
import com.intellij.openapi.project.Project;
import jetbrains.mps.debug.api.breakpoints.ILocationBreakpoint;
import jetbrains.mps.debug.api.Debuggers;
import jetbrains.mps.debug.api.DebuggerNotPresentException;

public class DebugInfoProvider_CustomApplicationPlugin extends BaseCustomApplicationPlugin {
  protected static Log log = LogFactory.getLog(DebugInfoProvider_CustomApplicationPlugin.class);

  public DebugInfoProvider_CustomApplicationPlugin() {
  }

  public void doInit() {
    PluginId debuggerPlugin = PluginManager.getPluginByClassName("jetbrains.mps.debug.api.DebugInfoManager");
    if (debuggerPlugin == null) {
      return;
    }
    DebugInfoManager manager = DebugInfoManager.getInstance();
    if (manager == null) {
      return;
    }
    {
      Mapper2<SNode, Project, ILocationBreakpoint> creator = new Mapper2<SNode, Project, ILocationBreakpoint>() {
        public ILocationBreakpoint value(SNode debuggableNode, Project project) {
          try {
            return Debuggers.getInstance().getDebuggerByNameSafe("Java").createBreakpoint(debuggableNode, "JAVA_LINE_BREAKPOINT", project);
          } catch (DebuggerNotPresentException e) {
            if (log.isWarnEnabled()) {
              log.warn("Exception while creating breakpoint for node" + debuggableNode, e);
            }
            return null;
          }

        }
      };
      manager.addConceptBreakpointCreator("jetbrains.mps.baseLanguage.structure.Statement", creator);
    }
    {
      Mapper2<SNode, Project, ILocationBreakpoint> creator = new Mapper2<SNode, Project, ILocationBreakpoint>() {
        public ILocationBreakpoint value(SNode debuggableNode, Project project) {
          try {
            return Debuggers.getInstance().getDebuggerByNameSafe("Java").createBreakpoint(debuggableNode, "JAVA_FIELD_BREAKPOINT", project);
          } catch (DebuggerNotPresentException e) {
            if (log.isWarnEnabled()) {
              log.warn("Exception while creating breakpoint for node" + debuggableNode, e);
            }
            return null;
          }

        }
      };
      manager.addConceptBreakpointCreator("jetbrains.mps.baseLanguage.structure.FieldDeclaration", creator);
      manager.addConceptBreakpointCreator("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration", creator);
    }
  }

  public void doDispose() {
    PluginId debuggerPlugin = PluginManager.getPluginByClassName("jetbrains.mps.debug.api.DebugInfoManager");
    if (debuggerPlugin == null) {
      return;
    }
    DebugInfoManager manager = DebugInfoManager.getInstance();
    if (manager == null) {
      return;
    }
    manager.removeConceptBreakpointCreator("jetbrains.mps.baseLanguage.structure.Statement");
    manager.removeConceptBreakpointCreator("jetbrains.mps.baseLanguage.structure.FieldDeclaration");
    manager.removeConceptBreakpointCreator("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
  }
}
