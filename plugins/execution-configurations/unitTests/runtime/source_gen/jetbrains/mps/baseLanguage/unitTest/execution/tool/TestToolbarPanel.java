package jetbrains.mps.baseLanguage.unitTest.execution.tool;

/*Generated by MPS */

import javax.swing.JPanel;
import com.intellij.openapi.project.Project;
import java.awt.BorderLayout;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import javax.swing.SwingConstants;
import com.intellij.openapi.actionSystem.ToggleAction;
import com.intellij.execution.testframework.TestsUIUtil;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.AnAction;
import jetbrains.mps.ide.findusages.view.icons.Icons;
import com.intellij.openapi.actionSystem.CustomShortcutSet;
import com.intellij.openapi.keymap.KeymapManager;
import com.intellij.openapi.actionSystem.IdeActions;
import jetbrains.mps.ide.ui.MPSTreeNode;

public class TestToolbarPanel extends JPanel {
  private TestTree tree;
  private FailedTestOccurenceNavigator navigator;
  private Project project;

  public TestToolbarPanel(Project project, TestTree tree, FailedTestOccurenceNavigator navigator) {
    super(new BorderLayout());
    this.project = project;
    this.tree = tree;
    this.navigator = navigator;
    this.setLayout(new BorderLayout());
    this.init();
  }

  private void init() {
    final DefaultActionGroup actionGroup = new DefaultActionGroup();
    actionGroup.addAll(this.createHidePassedAction(), this.cteateTrackRunningAction());
    actionGroup.addSeparator();
    actionGroup.addAll(this.createCollapseAllAction(), this.createExpandAllAction());
    actionGroup.addSeparator();
    actionGroup.addAll(this.createNextOccurrenceAction(), this.createPreviousOccurrenceAction());
    actionGroup.addSeparator();
    actionGroup.addAction(this.createSelectFirstFailedAction());
    ActionToolbar toolbarActions = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, actionGroup, true);
    toolbarActions.setOrientation(SwingConstants.HORIZONTAL);
    this.add(toolbarActions.getComponent(), BorderLayout.WEST);
  }

  private ToggleAction createHidePassedAction() {
    return new ToggleAction("Hide Passed", "Hide passed tests", TestsUIUtil.loadIcon("hidePassed")) {
      {
        this.setSelected(null, UnitTestOptions.isHidePased());
      }

      public void setSelected(AnActionEvent event, boolean value) {
        UnitTestOptions.setHidePased(value);
        TestToolbarPanel.this.tree.hidePassed(value);
      }

      public boolean isSelected(AnActionEvent p0) {
        return UnitTestOptions.isHidePased();
      }
    };
  }

  private ToggleAction cteateTrackRunningAction() {
    return new ToggleAction("Track Running Test", "Select currently running test in tree", TestsUIUtil.loadIcon("trackTests")) {
      {
        this.setSelected(null, UnitTestOptions.isTrackRunning());
      }

      public void setSelected(AnActionEvent event, boolean trackRunning) {
        UnitTestOptions.setTrackRunning(trackRunning);
      }

      public boolean isSelected(AnActionEvent event) {
        return UnitTestOptions.isTrackRunning();
      }
    };
  }

  private AnAction createCollapseAllAction() {
    return new AnAction("Collapse All", "Collapse all test suites", Icons.COLLAPSE_ICON) {
      {
        this.registerCustomShortcutSet(new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_COLLAPSE_ALL)), TestToolbarPanel.this.tree);
      }

      public void actionPerformed(AnActionEvent p0) {
        MPSTreeNode root = TestToolbarPanel.this.tree.getRootNode();
        MPSTreeNode child = (MPSTreeNode) root.getFirstChild();
        while (child != null) {
          TestToolbarPanel.this.tree.collapseAll(child);
          child = (MPSTreeNode) child.getNextSibling();
        }
      }
    };
  }

  private AnAction createExpandAllAction() {
    return new AnAction("Expand All", "Expande all test suites", Icons.EXPAND_ICON) {
      {
        this.registerCustomShortcutSet(new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_EXPAND_ALL)), TestToolbarPanel.this.tree);
      }

      public void actionPerformed(AnActionEvent p0) {
        TestToolbarPanel.this.tree.expandAll();
      }
    };
  }

  private AnAction createNextOccurrenceAction() {
    return new AnAction("Next Failed Test", "Navigate to the next occurrence", Icons.NEXT_ICON) {
      {
        this.registerCustomShortcutSet(new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_NEXT_OCCURENCE)), TestToolbarPanel.this.tree);
      }

      public void actionPerformed(AnActionEvent p0) {
        if (TestToolbarPanel.this.navigator.hasNextOccurence()) {
          TestToolbarPanel.this.navigator.goNextOccurence();
        }
      }
    };
  }

  private AnAction createPreviousOccurrenceAction() {
    return new AnAction("Previous Failed Test", "Navigate to the previous occurrence", Icons.PREVIOUS_ICON) {
      {
        this.registerCustomShortcutSet(new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_PREVIOUS_OCCURENCE)), TestToolbarPanel.this.tree);
      }

      public void actionPerformed(AnActionEvent p0) {
        if (TestToolbarPanel.this.navigator.hasPreviousOccurence()) {
          TestToolbarPanel.this.navigator.goPreviousOccurence();
        }
      }
    };
  }

  private ToggleAction createSelectFirstFailedAction() {
    return new ToggleAction("Select First Failed Test When Finished", "", TestsUIUtil.loadIcon("selectFirstDefect")) {
      {
        this.setSelected(null, UnitTestOptions.isSelectFirstFailded());
      }

      public void setSelected(AnActionEvent event, boolean setectFirstFailed) {
        UnitTestOptions.setSelectFirstFailded(setectFirstFailed);
      }

      public boolean isSelected(AnActionEvent event) {
        return UnitTestOptions.isSelectFirstFailded();
      }
    };
  }

  private AnAction createRerunFailedTestAction() {
    return new AnAction("Rerun Failed Tests", "Rerun only tests that failed/crached after last run", TestsUIUtil.loadIcon("rerunFailedTests")) {
      public void actionPerformed(AnActionEvent p0) {
        if (TestToolbarPanel.this.tree.hasFailedTests()) {
          TestToolbarPanel.this.tree.buildFailedTestTree();
        }
      }
    };
  }
}
