package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.execution.api.JavaRunParameters_Configuration;
import java.util.List;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import com.intellij.execution.process.ProcessHandler;
import com.intellij.execution.ExecutionException;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TempRunIdManager;
import jetbrains.mps.baseLanguage.unitTest.execution.client.Junit_Command;
import com.intellij.execution.process.ProcessAdapter;
import com.intellij.execution.process.ProcessEvent;
import jetbrains.mps.baseLanguage.execution.api.JavaRunParameters;
import jetbrains.mps.util.test.CachesUtil;

public class JUnitExecutor implements Executor {
  private final JavaRunParameters_Configuration myJavaRunParameters;
  private final List<ITestNodeWrapper> myTestNodes;

  public JUnitExecutor(JavaRunParameters_Configuration javaRunParameters, List<ITestNodeWrapper> testNodes) {
    myJavaRunParameters = javaRunParameters;
    myTestNodes = testNodes;
  }

  @Override
  public ProcessHandler execute() throws ExecutionException {
    final int runId = TempRunIdManager.getInstance().acquireId();
    ProcessHandler commandProcess = new Junit_Command().createProcess(myTestNodes, this.prepareJavaParamsForTests(runId));
    commandProcess.addProcessListener(new ProcessAdapter() {
      @Override
      public void processTerminated(ProcessEvent p0) {
        TempRunIdManager.getInstance().releaseId(runId);
      }
    });
    return commandProcess;
  }

  public JavaRunParameters prepareJavaParamsForTests(int runId) {
    String runIdString = "-D" + CachesUtil.PROPERTY_RUN_ID + "=\"" + runId + "\"";
    JavaRunParameters_Configuration javaRunParams = myJavaRunParameters;
    JavaRunParameters parameters = javaRunParams.getJavaRunParameters().clone();
    String vmFromJava = javaRunParams.getJavaRunParameters().getVmOptions();
    if (vmFromJava == null) {
      vmFromJava = "";
    }
    parameters.setVmOptions(vmFromJava + " " + runIdString);
    return parameters;
  }

}
