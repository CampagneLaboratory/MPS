package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.execution.api.configurations.BaseMpsRunConfiguration;
import jetbrains.mps.execution.api.settings.IPersistentConfiguration;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.unitTest.execution.settings.JUnitSettings_Configuration;
import jetbrains.mps.baseLanguage.execution.api.JavaRunParameters_Configuration;
import com.intellij.openapi.project.Project;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;
import jetbrains.mps.baseLanguage.unitTest.execution.settings.ClonableList;
import jetbrains.mps.baseLanguage.unitTest.execution.settings.JUnitRunTypes2;
import java.util.List;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.configurations.RunProfileState;
import com.intellij.execution.Executor;
import com.intellij.execution.runners.ExecutionEnvironment;
import com.intellij.execution.ExecutionException;
import com.intellij.openapi.options.SettingsEditor;
import com.intellij.openapi.util.JDOMExternalizable;
import com.intellij.execution.runners.ProgramRunner;
import com.intellij.execution.configurations.ConfigurationInfoProvider;
import jetbrains.mps.execution.api.settings.SettingsEditorEx;

public class JUnitTests_Configuration extends BaseMpsRunConfiguration implements IPersistentConfiguration {
  protected static Log log = LogFactory.getLog(JUnitTests_Configuration.class);

  @NotNull
  private JUnitTests_Configuration.MyState myState = new JUnitTests_Configuration.MyState();
  private JUnitSettings_Configuration myJUnitSettings = new JUnitSettings_Configuration();
  private JavaRunParameters_Configuration myJavaRunParameters = new JavaRunParameters_Configuration();

  public JUnitTests_Configuration(Project project, JUnitTests_Configuration_Factory factory, String name) {
    super(project, factory, name);
  }

  public void checkConfiguration() throws RuntimeConfigurationException {
    this.getJUnitSettings().checkConfiguration();
  }

  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    element.addContent(XmlSerializer.serialize(myState));
    {
      Element fieldElement = new Element("myJUnitSettings");
      myJUnitSettings.writeExternal(fieldElement);
      element.addContent(fieldElement);
    }
    {
      Element fieldElement = new Element("myJavaRunParameters");
      myJavaRunParameters.writeExternal(fieldElement);
      element.addContent(fieldElement);
    }
  }

  @Override
  public void readExternal(Element element) throws InvalidDataException {
    if (element == null) {
      throw new InvalidDataException("Cant read " + this + ": element is null.");
    }
    XmlSerializer.deserializeInto(myState, (Element) element.getChildren().get(0));
    {
      Element fieldElement = element.getChild("myJUnitSettings");
      if (fieldElement != null) {
        myJUnitSettings.readExternal(fieldElement);
      } else {
        if (log.isDebugEnabled()) {
          log.debug("Element " + "myJUnitSettings" + " in " + this.getClass().getName() + " was null.");
        }
      }
    }
    {
      Element fieldElement = element.getChild("myJavaRunParameters");
      if (fieldElement != null) {
        myJavaRunParameters.readExternal(fieldElement);
      } else {
        if (log.isDebugEnabled()) {
          log.debug("Element " + "myJavaRunParameters" + " in " + this.getClass().getName() + " was null.");
        }
      }
    }
  }

  public String getModel() {
    return myState.myModel;
  }

  public String getModule() {
    return myState.myModule;
  }

  public ClonableList<String> getTestCases() {
    return myState.myTestCases;
  }

  public ClonableList<String> getTestMethods() {
    return myState.myTestMethods;
  }

  public JUnitRunTypes2 getRunType() {
    return myState.myRunType;
  }

  public JUnitSettings_Configuration getJUnitSettings() {
    return myJUnitSettings;
  }

  public JavaRunParameters_Configuration getJavaRunParameters() {
    return myJavaRunParameters;
  }

  public void setModel(String value) {
    myState.myModel = value;
  }

  public void setModule(String value) {
    myState.myModule = value;
  }

  public void setTestCases(ClonableList<String> value) {
    myState.myTestCases = value;
  }

  public void setTestMethods(ClonableList<String> value) {
    myState.myTestMethods = value;
  }

  public void setRunType(JUnitRunTypes2 value) {
    myState.myRunType = value;
  }

  public List<SNodePointer> getTestsToMake() {
    return this.getJUnitSettings().getTestsToMake(ProjectHelper.toMPSProject(this.getProject()));
  }

  public void migrate() {
    if (isNotEmpty_p90f5h_a0a0q(this.getModel())) {
      this.getJUnitSettings().setModel(this.getModel());
      this.setModel(null);
    }
    if (isNotEmpty_p90f5h_a0b0q(this.getModule())) {
      this.getJUnitSettings().setModule(this.getModule());
      this.setModule(null);
    }
    if (this.getTestCases() != null && !(this.getTestCases().isEmpty())) {
      this.getJUnitSettings().getTestCases().addAll(this.getTestCases());
      this.setTestCases(null);
    }
    if (this.getTestMethods() != null && !(this.getTestMethods().isEmpty())) {
      this.getJUnitSettings().getTestMethods().addAll(this.getTestMethods());
      this.setTestMethods(null);
    }
    if (this.getRunType() != null) {
      this.getJUnitSettings().setRunType(this.getRunType());
      this.setRunType(null);
    }
  }

  @Override
  public JUnitTests_Configuration clone() {
    JUnitTests_Configuration clone = null;
    try {
      clone = createCloneTemplate();
      clone.myState = (JUnitTests_Configuration.MyState) myState.clone();
      clone.myJUnitSettings = (JUnitSettings_Configuration) myJUnitSettings.clone();
      clone.myJavaRunParameters = (JavaRunParameters_Configuration) myJavaRunParameters.clone();
      return clone;
    } catch (CloneNotSupportedException ex) {
      if (log.isErrorEnabled()) {
        log.error("", ex);
      }
    }
    return clone;
  }

  @Nullable
  public RunProfileState getState(@NotNull Executor executor, @NotNull ExecutionEnvironment environment) throws ExecutionException {
    return new JUnitTests_Configuration_RunProfileState(this, executor, environment);
  }

  @Nullable
  public SettingsEditor<JDOMExternalizable> getRunnerSettingsEditor(ProgramRunner runner) {
    return null;
  }

  public JDOMExternalizable createRunnerSettings(ConfigurationInfoProvider provider) {
    return null;
  }

  public SettingsEditorEx<JUnitTests_Configuration> getConfigurationEditor() {
    return (SettingsEditorEx<JUnitTests_Configuration>) getEditor();
  }

  public JUnitTests_Configuration createCloneTemplate() {
    return (JUnitTests_Configuration) super.clone();
  }

  public SettingsEditorEx<? extends IPersistentConfiguration> getEditor() {
    return new JUnitTests_Configuration_Editor(myJUnitSettings.getEditor(), myJavaRunParameters.getEditor());
  }

  @Override
  public boolean canExecute(String executorId) {
    return JUnitTests_Configuration_RunProfileState.canExecute(executorId);
  }

  public Object[] createMakeNodePointersTask() {
    return new Object[]{this.getTestsToMake()};
  }

  public static boolean isNotEmpty_p90f5h_a0a0q(String str) {
    return str != null && str.length() > 0;
  }

  public static boolean isNotEmpty_p90f5h_a0b0q(String str) {
    return str != null && str.length() > 0;
  }

  public class MyState {
    public String myModel;
    public String myModule;
    public ClonableList<String> myTestCases = new ClonableList<String>();
    public ClonableList<String> myTestMethods = new ClonableList<String>();
    public JUnitRunTypes2 myRunType;

    public MyState() {
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
      JUnitTests_Configuration.MyState state = new JUnitTests_Configuration.MyState();
      state.myModel = myModel;
      state.myModule = myModule;
      if (myTestCases != null) {
        state.myTestCases = myTestCases.clone();
      }
      if (myTestMethods != null) {
        state.myTestMethods = myTestMethods.clone();
      }
      state.myRunType = myRunType;
      return state;
    }
  }
}
