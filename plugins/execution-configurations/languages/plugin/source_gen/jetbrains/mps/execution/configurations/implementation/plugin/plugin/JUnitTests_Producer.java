package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import java.util.List;
import com.intellij.execution.junit.RuntimeConfigurationProducer;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.plugins.runconfigs.MPSPsiElement;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.unitTest.execution.settings.TestUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.baseLanguage.unitTest.execution.settings.JUnitRunTypes2;
import jetbrains.mps.project.IModule;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestNodeWrapperFactory;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class JUnitTests_Producer {
  private static String CONFIGURATION_FACTORY_CLASS_NAME = "jetbrains.mps.execution.configurations.implementation.plugin.plugin.JUnitTests_Configuration_Factory";

  public JUnitTests_Producer() {
  }

  public static List<RuntimeConfigurationProducer> getProducers(ConfigurationType configurationType) {
    List<RuntimeConfigurationProducer> creators = ListSequence.fromList(new ArrayList<RuntimeConfigurationProducer>());
    ListSequence.fromList(creators).addElement(new JUnitTests_Producer.ProducerPart_Model_f2w1m9_a(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    ListSequence.fromList(creators).addElement(new JUnitTests_Producer.ProducerPart_IModule_f2w1m9_b(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    ListSequence.fromList(creators).addElement(new JUnitTests_Producer.ProducerPart_MPSProject_f2w1m9_c(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    ListSequence.fromList(creators).addElement(new JUnitTests_Producer.ProducerPart_Node_f2w1m9_d(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    ListSequence.fromList(creators).addElement(new JUnitTests_Producer.ProducerPart_Node_f2w1m9_e(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    ListSequence.fromList(creators).addElement(new JUnitTests_Producer.ProducerPart_NlistITestCase_f2w1m9_f(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    ListSequence.fromList(creators).addElement(new JUnitTests_Producer.ProducerPart_NlistITestMethod_f2w1m9_g(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    return creators;
  }

  public static class ProducerPart_Model_f2w1m9_a extends BaseConfigCreator<SModel> {
    public ProducerPart_Model_f2w1m9_a(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }

    protected boolean isApplicable(Object source) {
      return source instanceof SModel;
    }

    protected JUnitTests_Configuration doCreateConfiguration(final SModel source) {
      setSourceElement(new MPSPsiElement(source));
      if (Sequence.fromIterable(TestUtils.getModelTests(source)).isEmpty()) {
        return null;
      }
      String name = SModelOperations.getModelName(source);
      JUnitTests_Configuration configuration = new JUnitTests_Configuration(getContext().getProject(), (JUnitTests_Configuration_Factory) getConfigurationFactory(), "Tests in '" + NameUtil.shortNameFromLongName(name) + "'");
      configuration.getJUnitSettings().setRunType(JUnitRunTypes2.MODEL);
      configuration.getJUnitSettings().setModel(source.getSModelFqName().toString());
      return configuration;
    }

    @Override
    public JUnitTests_Producer.ProducerPart_Model_f2w1m9_a clone() {
      return (JUnitTests_Producer.ProducerPart_Model_f2w1m9_a) super.clone();
    }
  }

  public static class ProducerPart_IModule_f2w1m9_b extends BaseConfigCreator<IModule> {
    public ProducerPart_IModule_f2w1m9_b(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }

    protected boolean isApplicable(Object source) {
      return source instanceof IModule;
    }

    protected JUnitTests_Configuration doCreateConfiguration(final IModule source) {
      setSourceElement(new MPSPsiElement(source));
      // commented out due to perfomance problems 
      // <node> 
      String name = source.getModuleFqName();
      JUnitTests_Configuration configuration = new JUnitTests_Configuration(getContext().getProject(), (JUnitTests_Configuration_Factory) getConfigurationFactory(), "Tests in '" + NameUtil.shortNameFromLongName(name) + "'");
      configuration.getJUnitSettings().setRunType(JUnitRunTypes2.MODULE);
      configuration.getJUnitSettings().setModule(source.getModuleFqName());
      return configuration;
    }

    @Override
    public JUnitTests_Producer.ProducerPart_IModule_f2w1m9_b clone() {
      return (JUnitTests_Producer.ProducerPart_IModule_f2w1m9_b) super.clone();
    }
  }

  public static class ProducerPart_MPSProject_f2w1m9_c extends BaseConfigCreator<MPSProject> {
    public ProducerPart_MPSProject_f2w1m9_c(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }

    protected boolean isApplicable(Object source) {
      return source instanceof MPSProject;
    }

    protected JUnitTests_Configuration doCreateConfiguration(final MPSProject source) {
      setSourceElement(new MPSPsiElement(source));
      // commented out due to perfomance problems 
      // <node> 
      JUnitTests_Configuration configuration = new JUnitTests_Configuration(getContext().getProject(), (JUnitTests_Configuration_Factory) getConfigurationFactory(), "All Tests in Project");
      configuration.getJUnitSettings().setRunType(JUnitRunTypes2.PROJECT);
      return configuration;
    }

    @Override
    public JUnitTests_Producer.ProducerPart_MPSProject_f2w1m9_c clone() {
      return (JUnitTests_Producer.ProducerPart_MPSProject_f2w1m9_c) super.clone();
    }
  }

  public static class ProducerPart_Node_f2w1m9_d extends BaseConfigCreator<SNode> {
    public ProducerPart_Node_f2w1m9_d(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }

    protected boolean isApplicable(Object source) {
      return source instanceof SNode && SNodeOperations.isInstanceOf(((SNode) source), "jetbrains.mps.lang.core.structure.BaseConcept");
    }

    protected JUnitTests_Configuration doCreateConfiguration(final SNode source) {
      setSourceElement(new MPSPsiElement(source));
      SNode method = TestNodeWrapperFactory.findWrappableAncestor(source, false);
      if (method == null) {
        return null;
      }
      ITestNodeWrapper wrapper = TestNodeWrapperFactory.tryToWrap(method);
      if (wrapper == null || wrapper.isTestCase()) {
        return null;
      }

      JUnitTests_Configuration configuration = new JUnitTests_Configuration(getContext().getProject(), (JUnitTests_Configuration_Factory) getConfigurationFactory(), wrapper.getName());
      configuration.getJUnitSettings().setRunType(JUnitRunTypes2.METHOD);
      configuration.getJUnitSettings().setTestMethods(TestUtils.nodeToCloneableList(method));
      return configuration;
    }

    @Override
    public JUnitTests_Producer.ProducerPart_Node_f2w1m9_d clone() {
      return (JUnitTests_Producer.ProducerPart_Node_f2w1m9_d) super.clone();
    }
  }

  public static class ProducerPart_Node_f2w1m9_e extends BaseConfigCreator<SNode> {
    public ProducerPart_Node_f2w1m9_e(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }

    protected boolean isApplicable(Object source) {
      return source instanceof SNode && SNodeOperations.isInstanceOf(((SNode) source), "jetbrains.mps.lang.core.structure.BaseConcept");
    }

    protected JUnitTests_Configuration doCreateConfiguration(final SNode source) {
      setSourceElement(new MPSPsiElement(source));
      SNode method = TestNodeWrapperFactory.findWrappableAncestor(source, false);
      if (method != null && TestNodeWrapperFactory.tryToWrap(method) != null) {
        // we check if we are inside a test method; do not run the whole test case if we are 
        return null;
      }
      SNode testNode = SNodeOperations.cast(TestNodeWrapperFactory.findWrappableAncestor(source, true), "jetbrains.mps.lang.core.structure.INamedConcept");
      if (testNode == null) {
        return null;
      }

      ITestNodeWrapper wrapper = TestNodeWrapperFactory.tryToWrap(testNode);
      if (wrapper == null || Sequence.fromIterable(wrapper.getTestMethods()).isEmpty()) {
        return null;
      }

      JUnitTests_Configuration configuration = new JUnitTests_Configuration(getContext().getProject(), (JUnitTests_Configuration_Factory) getConfigurationFactory(), SPropertyOperations.getString(testNode, "name"));
      configuration.getJUnitSettings().setRunType(JUnitRunTypes2.NODE);
      configuration.getJUnitSettings().setTestCases(TestUtils.nodeToCloneableList(testNode));
      return configuration;
    }

    @Override
    public JUnitTests_Producer.ProducerPart_Node_f2w1m9_e clone() {
      return (JUnitTests_Producer.ProducerPart_Node_f2w1m9_e) super.clone();
    }
  }

  public static class ProducerPart_NlistITestCase_f2w1m9_f extends BaseConfigCreator<List<SNode>> {
    public ProducerPart_NlistITestCase_f2w1m9_f(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }

    protected boolean isApplicable(Object source) {
      if (!(source instanceof List)) {
        return false;
      }
      for (Object obj : (List) source) {
        if (!(obj instanceof SNode && SNodeOperations.isInstanceOf(((SNode) obj), "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))) {
          return false;
        }
      }
      return true;
    }

    protected JUnitTests_Configuration doCreateConfiguration(final List<SNode> source) {
      setSourceElement(new MPSPsiElement(source));
      boolean containsTest = false;
      for (SNode testCase : source) {
        if (ListSequence.fromList(((List<SNode>) BehaviorManager.getInstance().invoke(Object.class, testCase, "virtual_getTestMethods_2148145109766218395", new Class[]{SNode.class}))).isNotEmpty()) {
          containsTest = true;
          break;
        }
      }
      if (!(containsTest)) {
        return null;
      }

      JUnitTests_Configuration configuration = new JUnitTests_Configuration(getContext().getProject(), (JUnitTests_Configuration_Factory) getConfigurationFactory(), SPropertyOperations.getString(SNodeOperations.cast(ListSequence.fromList(source).first(), "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"), "name") + ",...");
      configuration.getJUnitSettings().setRunType(JUnitRunTypes2.NODE);
      configuration.getJUnitSettings().setTestCases(TestUtils.nodesToCloneableList(source));
      return configuration;
    }

    @Override
    public JUnitTests_Producer.ProducerPart_NlistITestCase_f2w1m9_f clone() {
      return (JUnitTests_Producer.ProducerPart_NlistITestCase_f2w1m9_f) super.clone();
    }
  }

  public static class ProducerPart_NlistITestMethod_f2w1m9_g extends BaseConfigCreator<List<SNode>> {
    public ProducerPart_NlistITestMethod_f2w1m9_g(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }

    protected boolean isApplicable(Object source) {
      if (!(source instanceof List)) {
        return false;
      }
      for (Object obj : (List) source) {
        if (!(obj instanceof SNode && SNodeOperations.isInstanceOf(((SNode) obj), "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod"))) {
          return false;
        }
      }
      return true;
    }

    protected JUnitTests_Configuration doCreateConfiguration(final List<SNode> source) {
      setSourceElement(new MPSPsiElement(source));
      JUnitTests_Configuration configuration = new JUnitTests_Configuration(getContext().getProject(), (JUnitTests_Configuration_Factory) getConfigurationFactory(), ((String) BehaviorManager.getInstance().invoke(Object.class, ListSequence.fromList(source).first(), "virtual_getTestName_1216136419751", new Class[]{SNode.class})) + ",...");
      configuration.getJUnitSettings().setRunType(JUnitRunTypes2.METHOD);
      configuration.getJUnitSettings().setTestMethods(TestUtils.nodesToCloneableList(source));
      return configuration;
    }

    @Override
    public JUnitTests_Producer.ProducerPart_NlistITestMethod_f2w1m9_g clone() {
      return (JUnitTests_Producer.ProducerPart_NlistITestMethod_f2w1m9_g) super.clone();
    }
  }
}
