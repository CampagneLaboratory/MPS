package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import java.util.Map;
import java.io.File;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.model.SModel;
import com.intellij.openapi.project.Project;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.smodel.tempmodel.TempModule;
import jetbrains.mps.project.structure.model.ModelRootDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class DeployScriptCreator {
  /**
   * Nooooo, dont do that!
   */
  public static final Map<Long, File> ourScriptsPath = Collections.synchronizedMap(MapSequence.fromMap(new HashMap<Long, File>()));

  public static Tuples._2<SModel, File> createDeployScript(Project project, List<SNodeReference> plugins) {
    DeployScriptCreator.TempModuleWithDescriptorFile module = new DeployScriptCreator.TempModuleWithDescriptorFile();
    MPSModuleRepository.getInstance().registerModule(module, module);
    SModel model = TemporaryModels.getInstance().create(false, TempModuleOptions.forExistingModule(module));
    Tuples._2<SNode, File> nodeAndFile = createDeployScriptInternal(project, plugins, module.getBaseDirectory());
    model.addRootNode(nodeAndFile._0());
    SModelOperations.validateLanguagesAndImports(model, true, true);
    return MultiTuple.<SModel,File>from(model, nodeAndFile._1());
  }

  private static Tuples._2<SNode, File> createDeployScriptInternal(Project project, List<SNodeReference> plugins, File baseDir) {
    SNode deployProject = SConceptOperations.createNewNode("jetbrains.mps.build.structure.BuildProject", null);
    SPropertyOperations.set(deployProject, "name", "deploy");
    SPropertyOperations.set(deployProject, "fileName", "deploy.xml");
    SPropertyOperations.set(deployProject, "internalBaseDirectory", "" + (createPathFromFullPath(baseDir, project.getBasePath())));

    SLinkOperations.getTargets(deployProject, "plugins", true).add(SConceptOperations.createNewNode("jetbrains.mps.build.structure.BuildJavaPlugin", null));
    SLinkOperations.getTargets(deployProject, "plugins", true).add(SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMPSPlugin", null));

    Iterable<SNode> pluginNodes = ListSequence.fromList(plugins).select(new ISelector<SNodeReference, SNode>() {
      public SNode select(SNodeReference it) {
        return it.resolve(MPSModuleRepository.getInstance());
      }
    }).ofType(SNode.class);
    Iterable<SNode> projects = Sequence.fromIterable(pluginNodes).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.getContainingRoot(it);
      }
    }).ofType(SNode.class).distinct();

    for (SNode projectNode : Sequence.fromIterable(projects)) {
      ListSequence.fromList(SLinkOperations.getTargets(deployProject, "dependencies", true)).addElement(_quotation_createNode_ppcj9p_a0a0a11a2(projectNode));
    }

    SLinkOperations.setNewChild(deployProject, "layout", "jetbrains.mps.build.structure.BuildLayout");
    for (SNode plugin : Sequence.fromIterable(pluginNodes)) {
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(deployProject, "layout", true), "children", true)).addElement(_quotation_createNode_ppcj9p_a0a0a41a2(plugin));
    }

    return MultiTuple.<SNode,File>from(deployProject, new File(baseDir, BehaviorReflection.invokeNonVirtual(String.class, deployProject, "jetbrains.mps.build.structure.BuildProject", "call_getOutputFileName_4915877860351551360", new Object[]{})));
  }

  private static SNode createPathFromFullPath(File baseDir, String fullPath) {
    return createPath(makeRelative(baseDir.getAbsolutePath(), fullPath));
  }

  private static SNode createPath(String relativePath) {
    String[] parts = relativePath.split("/");
    SNode path = _quotation_createNode_ppcj9p_a0b0e();
    SNode compositePart = SLinkOperations.getTarget(path, "compositePart", true);
    for (String part : parts) {
      SPropertyOperations.set(compositePart, "head", part);
      SLinkOperations.setNewChild(compositePart, "tail", "jetbrains.mps.build.structure.BuildCompositePath");
      compositePart = SLinkOperations.getTarget(compositePart, "tail", true);
    }
    SNodeOperations.deleteNode(compositePart);

    return path;
  }

  private static String makeRelative(String basePath, String fullPath) {
    if ((fullPath == null || fullPath.length() == 0)) {
      return "";
    }
    String normalizedFull = FileUtil.getAbsolutePath(fullPath).replace("\\", "/");
    String normalizedBase = FileUtil.getAbsolutePath(basePath).replace("\\", "/");
    return FileUtil.getRelativePath(normalizedFull, normalizedBase, "/");
  }

  private static class TempModuleWithDescriptorFile extends TempModule {
    private final File myDescriptorFile;
    private final File myBaseDir;

    private TempModuleWithDescriptorFile() {
      super(Collections.<ModelRootDescriptor>emptySet(), true, false);
      myBaseDir = FileUtil.createTmpDir();
      myDescriptorFile = new File(myBaseDir, "module.msd");
    }

    @Override
    public IFile getDescriptorFile() {
      return FileSystem.getInstance().getFileByPath(myDescriptorFile.getAbsolutePath().replace("\\", "/"));
    }

    public File getBaseDirectory() {
      return myBaseDir;
    }

    public boolean isPackaged() {
      // don't ask 
      return false;
    }
  }

  private static SNode _quotation_createNode_ppcj9p_a0a0a11a2(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildProjectDependency", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "script", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ppcj9p_a0a0a41a2(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildLayout_Import", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "target", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_ppcj9p_a0b0e() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildSourceProjectRelativePath", null, null, GlobalScope.getInstance(), false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildCompositePath", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "head", "");
    quotedNode_1.addChild("compositePart", quotedNode_2);
    return quotedNode_1;
  }
}
