package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import java.io.PrintStream;
import java.io.PipedInputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import com.intellij.util.WaitFor;

public class FakeProcess extends Process {
  private final PrintStream myOldOut;
  private final PrintStream myOldErr;
  private final PipedInputStream myInputOut;
  private final PipedInputStream myInputErr;
  private int myExitCode = -1;
  private boolean myDestroyed = false;

  public FakeProcess() {
    myOldOut = System.out;
    myOldErr = System.err;
    myInputOut = new PipedInputStream();
    myInputErr = new PipedInputStream();
  }

  public void init() throws IOException {
    PrintStream newOut = new PrintStream(new PipedOutputStream(myInputOut), true);
    PrintStream newErr = new PrintStream(new PipedOutputStream(myInputErr), true);

    System.setOut(new PrintStream(new CompositeStream(myOldOut, newOut)));
    System.setErr(new PrintStream(new CompositeStream(myOldErr, newErr)));
  }

  public void setExitCode(int code) {
    myExitCode = code;
  }

  public void destroy() {
    assert !(myDestroyed);
    myDestroyed = true;
    System.setOut(myOldOut);
    System.setErr(myOldErr);
  }
  public int exitValue() {
    assert false;
    return myExitCode;
  }
  public InputStream getErrorStream() {
    return myInputErr;
  }
  public InputStream getInputStream() {
    return myInputOut;
  }
  public OutputStream getOutputStream() {
    assert false;
    return null;
  }
  public int waitFor() throws InterruptedException {
    new WaitFor() {
      protected boolean condition() {
        return myDestroyed;
      }
    };
    return myExitCode;
  }
}
