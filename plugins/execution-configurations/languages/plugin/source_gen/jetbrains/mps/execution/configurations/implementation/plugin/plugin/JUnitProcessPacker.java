package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import com.intellij.openapi.project.Project;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestRunState;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestEventsDispatcher;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.baseLanguage.unitTest.execution.tool.UnitTestViewComponent;
import jetbrains.mps.baseLanguage.unitTest.execution.client.UnitTestProcessListener;
import com.intellij.execution.ui.ConsoleView;
import jetbrains.mps.execution.api.configurations.ConsoleCreator;
import jetbrains.mps.ide.actions.StandaloneMPSStackTraceFilter;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class JUnitProcessPacker {
  private final Project myProject;
  private final TestRunState myRunState;
  private final TestEventsDispatcher myEventsDispatcher;


  public JUnitProcessPacker(Project project, TestRunState runState, TestEventsDispatcher eventsDispatcher) {
    this.myProject = project;
    this.myRunState = runState;
    this.myEventsDispatcher = eventsDispatcher;
  }



  public JUnitProcessPack packProcess(ProcessHandler process) {
    UnitTestViewComponent viewComponent = createTestViewComponent(myRunState, process);

    UnitTestProcessListener testListener = new UnitTestProcessListener(myEventsDispatcher);

    return JUnitProcessPack.create(process, viewComponent, testListener);
  }



  private UnitTestViewComponent createTestViewComponent(TestRunState runState, final ProcessHandler process) {
    ConsoleView console = ConsoleCreator.createConsoleView(myProject, false);
    console.addMessageFilter(new StandaloneMPSStackTraceFilter(myProject));
    return new UnitTestViewComponent(myProject, new ProjectOperationContext(ProjectHelper.toMPSProject(myProject)), console, runState, new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        if (process != null) {
          process.destroyProcess();
        }
      }
    });
  }


}
