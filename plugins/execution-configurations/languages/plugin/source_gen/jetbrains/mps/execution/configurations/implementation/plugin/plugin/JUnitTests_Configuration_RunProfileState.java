package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import com.intellij.execution.configurations.RunProfileState;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.runners.ExecutionEnvironment;
import com.intellij.execution.Executor;
import com.intellij.execution.configurations.ConfigurationPerRunnerSettings;
import com.intellij.execution.configurations.RunnerSettings;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.ExecutionResult;
import com.intellij.execution.runners.ProgramRunner;
import com.intellij.execution.ExecutionException;
import com.intellij.openapi.project.Project;
import jetbrains.mps.baseLanguage.unitTest.execution.settings.JUnitSettings_Configuration;
import java.util.List;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestRunState;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestEventsDispatcher;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.baseLanguage.unitTest.execution.tool.UnitTestViewComponent;
import com.intellij.execution.process.ProcessListener;
import jetbrains.mps.baseLanguage.unitTest.execution.client.UnitTestProcessListener;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.execution.api.configurations.DefaultExecutionResult;
import jetbrains.mps.execution.api.configurations.DefaultExecutionConsole;
import com.intellij.execution.executors.DefaultRunExecutor;

public class JUnitTests_Configuration_RunProfileState implements RunProfileState {
  @NotNull
  private final JUnitTests_Configuration myRunConfiguration;
  @NotNull
  private final ExecutionEnvironment myEnvironment;
  public JUnitTests_Configuration_RunProfileState(@NotNull JUnitTests_Configuration configuration, @NotNull Executor executor, @NotNull ExecutionEnvironment environment) {
    myRunConfiguration = configuration;
    myEnvironment = environment;
  }
  public ConfigurationPerRunnerSettings getConfigurationSettings() {
    return null;
  }
  public RunnerSettings getRunnerSettings() {
    return null;
  }
  @Nullable
  public ExecutionResult execute(Executor executor, @NotNull ProgramRunner runner) throws ExecutionException {
    Project project = myEnvironment.getProject();
    boolean hasLock = JUnitLightExecutor.acquireLock();
    JUnitSettings_Configuration jUnitSettings = myRunConfiguration.getJUnitSettings();
    List<ITestNodeWrapper> testNodes = jUnitSettings.getTests(ProjectHelper.toMPSProject(project), hasLock);
    TestRunState runState = new TestRunState(testNodes);
    TestEventsDispatcher eventsDispatcher = new TestEventsDispatcher(runState);
    jetbrains.mps.execution.configurations.implementation.plugin.plugin.Executor processExecutor;
    if (hasLock && jUnitSettings.canLightExecute(testNodes)) {
      processExecutor = new JUnitLightExecutor(testNodes, eventsDispatcher);
    } else {
      if (hasLock) {
        JUnitLightExecutor.releaseLock();
      }
      processExecutor = new JUnitExecutor(jUnitSettings, myRunConfiguration.getJavaRunParameters(), testNodes);
    }
    ProcessHandler process = processExecutor.execute();
    final UnitTestViewComponent testViewComponent = myRunConfiguration.createTestViewComponent(runState, process);
    ProcessListener listener = new UnitTestProcessListener(eventsDispatcher);
    _FunctionTypes._void_P0_E0 disposeHandler = new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        testViewComponent.dispose();
      }
    };
    {
      ProcessHandler _processHandler = process;
      _processHandler.addProcessListener(listener);
      return new DefaultExecutionResult(_processHandler, new DefaultExecutionConsole(testViewComponent, disposeHandler));
    }
  }
  public static boolean canExecute(String executorId) {
    if (DefaultRunExecutor.EXECUTOR_ID.equals(executorId)) {
      return true;
    }
    return false;
  }
}
