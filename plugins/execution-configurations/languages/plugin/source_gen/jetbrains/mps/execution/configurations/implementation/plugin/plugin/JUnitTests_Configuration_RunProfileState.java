package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import com.intellij.execution.configurations.RunProfileState;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.runners.ExecutionEnvironment;
import com.intellij.execution.Executor;
import com.intellij.execution.configurations.ConfigurationPerRunnerSettings;
import com.intellij.execution.configurations.RunnerSettings;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.ExecutionResult;
import com.intellij.execution.runners.ProgramRunner;
import com.intellij.execution.ExecutionException;
import com.intellij.openapi.project.Project;
import java.util.List;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestRunState;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestEventsDispatcher;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TempRunIdManager;
import jetbrains.mps.util.test.CachesUtil;
import jetbrains.mps.baseLanguage.execution.api.JavaRunParameters_Configuration;
import jetbrains.mps.baseLanguage.execution.api.JavaRunParameters;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.baseLanguage.unitTest.execution.client.Junit_Command;
import com.intellij.execution.process.ProcessAdapter;
import com.intellij.execution.process.ProcessEvent;
import jetbrains.mps.baseLanguage.unitTest.execution.tool.UnitTestViewComponent;
import com.intellij.execution.process.ProcessListener;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.execution.api.configurations.DefaultExecutionResult;
import jetbrains.mps.execution.api.configurations.DefaultExecutionConsole;
import com.intellij.execution.executors.DefaultRunExecutor;

public class JUnitTests_Configuration_RunProfileState implements RunProfileState {
  @NotNull
  private final JUnitTests_Configuration myRunConfiguration;
  @NotNull
  private final ExecutionEnvironment myEnvironment;

  public JUnitTests_Configuration_RunProfileState(@NotNull JUnitTests_Configuration configuration, @NotNull Executor executor, @NotNull ExecutionEnvironment environment) {
    myRunConfiguration = configuration;
    myEnvironment = environment;
  }

  public ConfigurationPerRunnerSettings getConfigurationSettings() {
    return null;
  }

  public RunnerSettings getRunnerSettings() {
    return null;
  }

  @Nullable
  public ExecutionResult execute(Executor executor, @NotNull ProgramRunner runner) throws ExecutionException {
    Project project = myEnvironment.getProject();
    List<ITestNodeWrapper> nodeWrappers = myRunConfiguration.getJUnitSettings().getTests(ProjectHelper.toMPSProject(project));
    JUnitProcessPack processPack;
    if (myRunConfiguration.getJUnitSettings().getLightExec() && JUnitLightExecutor.accept(nodeWrappers)) {
      JUnitLightExecutor lightExecutor = new JUnitLightExecutor(nodeWrappers, project);
      processPack = lightExecutor.execute();
    } else {
      TestRunState runState = new TestRunState(nodeWrappers);
      TestEventsDispatcher eventsDispatcher = new TestEventsDispatcher(runState);

      final int runId = TempRunIdManager.getInstance().acquireId();
      String runIdString = "-D" + CachesUtil.PROPERTY_RUN_ID + "=\"" + runId + "\"";
      JavaRunParameters_Configuration javaRunParams = myRunConfiguration.getJavaRunParameters();
      JavaRunParameters parameters = javaRunParams.getJavaRunParameters().clone();
      String vmFromJava = javaRunParams.getJavaRunParameters().getVmOptions();
      if (vmFromJava == null) {
        vmFromJava = "";
      }
      parameters.setVmOptions(vmFromJava + " " + runIdString);
      ProcessHandler process = new Junit_Command().createProcess(nodeWrappers, parameters);
      process.addProcessListener(new ProcessAdapter() {
        @Override
        public void processTerminated(ProcessEvent p0) {
          TempRunIdManager.getInstance().releaseId(runId);
        }
      });
      processPack = new JUnitProcessPacker(project, runState, eventsDispatcher).packProcess(process);
    }

    ProcessHandler process = processPack.getProcess();
    final UnitTestViewComponent testViewComponent = processPack.getTestViewComponent();
    ProcessListener listener = processPack.getListener();
    _FunctionTypes._void_P0_E0 disposeHandler = new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        testViewComponent.dispose();
      }
    };
    {
      ProcessHandler _processHandler = process;
      _processHandler.addProcessListener(listener);
      return new DefaultExecutionResult(_processHandler, new DefaultExecutionConsole(testViewComponent, disposeHandler));
    }
  }

  public static boolean canExecute(String executorId) {
    if (DefaultRunExecutor.EXECUTOR_ID.equals(executorId)) {
      return true;
    }
    return false;
  }
}
