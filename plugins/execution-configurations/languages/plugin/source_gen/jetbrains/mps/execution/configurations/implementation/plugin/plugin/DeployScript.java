package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import com.intellij.openapi.project.Project;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import org.jetbrains.mps.openapi.model.SNode;
import java.io.File;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.SModelOperations;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.make.IMakeService;
import java.util.concurrent.Future;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.smodel.resources.ModelsToResources;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.generator.fileGenerator.FileGenerationUtil;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.tempmodel.TempModule;
import java.util.Collections;
import jetbrains.mps.project.structure.model.ModelRootDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;

public class DeployScript {
  private final DeployScript.TemporalModuleWithDescriptorFile myModule;
  private final Project myProject;
  private final SModel myModel;
  private final String myDeployScriptPath;


  public DeployScript(Project project, List<SNodeReference> plugins) {
    myProject = project;
    myModule = new DeployScript.TemporalModuleWithDescriptorFile();
    MPSModuleRepository.getInstance().registerModule(myModule, myModule);

    SModel model = TemporaryModels.getInstance().create(false, TempModuleOptions.forExistingModule(myModule));

    SNode deployScriptNode = DeployScriptCreator.createDeployScript(myProject, plugins, myModule.getBaseDirectory());
    model.addRootNode(deployScriptNode);
    myDeployScriptPath = new File(myModule.getBaseDirectory(), BehaviorReflection.invokeNonVirtual(String.class, deployScriptNode, "jetbrains.mps.build.structure.BuildProject", "call_getOutputFileName_4915877860351551360", new Object[]{})).getAbsolutePath();

    SModelOperations.validateLanguagesAndImports(model, true, true);
  }



  @Nullable
  public String make() {
    MakeSession session = new MakeSession(new ProjectOperationContext(ProjectHelper.toMPSProject(myProject)), null, true);
    if (IMakeService.INSTANCE.get().openNewSession(session)) {
      Future<IResult> future = IMakeService.INSTANCE.get().make(session, new ModelsToResources(new ProjectOperationContext(ProjectHelper.toMPSProject(myProject)), Sequence.<SModel>singleton(myModel)).resources(false));
      IResult result = null;
      try {
        result = future.get();
      } catch (CancellationException ignore) {
      } catch (InterruptedException ignore) {
      } catch (ExecutionException ignore) {
      }
      if (result == null || !(result.isSucessful())) {
        return null;
      }
      return myDeployScriptPath;
    }
    return null;
  }



  public File getArtifactsDir() {
    return new File(new File(myDeployScriptPath).getParentFile(), "build" + File.separator + "artifacts" + File.separator + "deploy");
  }



  public void dispose() {
    FileUtil.delete(myModule.getBaseDirectory());
    FileUtil.delete(new File(myModule.getOutputPath().getPath().replace("/", File.separator)));
    FileUtil.delete(new File(FileGenerationUtil.getCachesDir(myModule.getOutputPath()).getPath().replace("/", File.separator)));

    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        MPSModuleRepository.getInstance().unregisterModule(myModule, ProjectHelper.toMPSProject(myProject));
      }
    });
  }



  private static class TemporalModuleWithDescriptorFile extends TempModule {
    private final File myDescriptorFile;
    private final File myBaseDir;

    private TemporalModuleWithDescriptorFile() {
      super(Collections.<ModelRootDescriptor>emptySet(), true, false);
      myBaseDir = FileUtil.createTmpDir();
      myDescriptorFile = new File(myBaseDir, "module.msd");
    }

    @Override
    public IFile getDescriptorFile() {
      return FileSystem.getInstance().getFileByPath(myDescriptorFile.getAbsolutePath().replace("\\", "/"));
    }

    public File getBaseDirectory() {
      return myBaseDir;
    }

    public boolean isPackaged() {
      // don't ask 
      return false;
    }
  }
}
