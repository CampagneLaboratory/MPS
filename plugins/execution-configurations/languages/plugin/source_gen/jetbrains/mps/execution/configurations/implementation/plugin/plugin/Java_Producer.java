package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import java.util.List;
import com.intellij.execution.junit.RuntimeConfigurationProducer;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.execution.api.configurations.BaseMpsProducer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.plugins.runconfigs.MPSPsiElement;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.intellij.execution.impl.RunManagerImpl;

public class Java_Producer {
  private static String CONFIGURATION_FACTORY_CLASS_NAME = "jetbrains.mps.execution.configurations.implementation.plugin.plugin.Java_Configuration_Factory";
  public Java_Producer() {
  }
  public static List<RuntimeConfigurationProducer> getProducers(ConfigurationType configurationType) {
    List<RuntimeConfigurationProducer> creators = ListSequence.fromList(new ArrayList<RuntimeConfigurationProducer>());
    ListSequence.fromList(creators).addElement(new Java_Producer.ProducerPart_NodeClassConcept_d1i8dk_a(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    ListSequence.fromList(creators).addElement(new Java_Producer.ProducerPart_NodeStaticMethodDeclaration_d1i8dk_b(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    ListSequence.fromList(creators).addElement(new Java_Producer.ProducerPart_NodeIMainClass_d1i8dk_c(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    return creators;
  }
  public static class ProducerPart_NodeClassConcept_d1i8dk_a extends BaseMpsProducer<SNode> {
    public ProducerPart_NodeClassConcept_d1i8dk_a(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }
    protected boolean isApplicable(Object source) {
      return source instanceof SNode && SNodeOperations.isInstanceOf(((SNode) source), MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, "jetbrains.mps.baseLanguage.structure.ClassConcept"));
    }
    protected Java_Configuration doCreateConfiguration(final SNode source) {
      setSourceElement(new MPSPsiElement(source));
      if ((BehaviorReflection.invokeNonVirtual((Class<SNode>) ((Class) Object.class), source, "jetbrains.mps.baseLanguage.structure.ClassConcept", "call_getMainMethod_1213877355884", new Object[]{}) == null)) {
        return null;
      }
      Java_Configuration configuration = ((Java_Configuration) getConfigurationFactory().createConfiguration("" + "Class " + SPropertyOperations.getString(source, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")), (Java_Configuration) RunManagerImpl.getInstanceImpl(getContext().getProject()).getConfigurationTemplate(getConfigurationFactory()).getConfiguration()));
      configuration.getNode().setNode(source);
      return configuration;
    }
    @Override
    public Java_Producer.ProducerPart_NodeClassConcept_d1i8dk_a clone() {
      return (Java_Producer.ProducerPart_NodeClassConcept_d1i8dk_a) super.clone();
    }
  }
  public static class ProducerPart_NodeStaticMethodDeclaration_d1i8dk_b extends BaseMpsProducer<SNode> {
    public ProducerPart_NodeStaticMethodDeclaration_d1i8dk_b(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }
    protected boolean isApplicable(Object source) {
      return source instanceof SNode && SNodeOperations.isInstanceOf(((SNode) source), MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1081236700938l, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
    }
    protected Java_Configuration doCreateConfiguration(final SNode source) {
      setSourceElement(new MPSPsiElement(source));
      if (!(BehaviorReflection.invokeNonVirtual(Boolean.TYPE, source, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration", "call_isMainMethod_1213877536670", new Object[]{}))) {
        return null;
      }
      SNode classifier = SNodeOperations.getNodeAncestor(source, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier"), false, false);
      if ((classifier == null)) {
        return null;
      }
      Java_Configuration configuration = ((Java_Configuration) getConfigurationFactory().createConfiguration("" + "Class " + SPropertyOperations.getString(classifier, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")), (Java_Configuration) RunManagerImpl.getInstanceImpl(getContext().getProject()).getConfigurationTemplate(getConfigurationFactory()).getConfiguration()));
      configuration.getNode().setNode(classifier);
      return configuration;
    }
    @Override
    public Java_Producer.ProducerPart_NodeStaticMethodDeclaration_d1i8dk_b clone() {
      return (Java_Producer.ProducerPart_NodeStaticMethodDeclaration_d1i8dk_b) super.clone();
    }
  }
  public static class ProducerPart_NodeIMainClass_d1i8dk_c extends BaseMpsProducer<SNode> {
    public ProducerPart_NodeIMainClass_d1i8dk_c(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }
    protected boolean isApplicable(Object source) {
      return source instanceof SNode && SNodeOperations.isInstanceOf(((SNode) source), MetaAdapterFactory.getConcept(new UUID(5525638636287967733l, -8459132261929236328l), 4666195181811081429l, "jetbrains.mps.execution.util.structure.IMainClass"));
    }
    protected Java_Configuration doCreateConfiguration(final SNode source) {
      setSourceElement(new MPSPsiElement(source));
      if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, source, "virtual_isNodeRunnable_4666195181811081448", new Object[]{}))) {
        return null;
      }
      String name = (SNodeOperations.isInstanceOf(source, MetaAdapterFactory.getConcept(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, "jetbrains.mps.lang.core.structure.INamedConcept")) ? SPropertyOperations.getString(SNodeOperations.cast(source, MetaAdapterFactory.getConcept(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, "jetbrains.mps.lang.core.structure.INamedConcept")), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")) : BehaviorReflection.invokeVirtual(String.class, source, "virtual_getUnitName_4666195181811081431", new Object[]{}));
      Java_Configuration configuration = ((Java_Configuration) getConfigurationFactory().createConfiguration("" + "Node " + name, (Java_Configuration) RunManagerImpl.getInstanceImpl(getContext().getProject()).getConfigurationTemplate(getConfigurationFactory()).getConfiguration()));
      configuration.getNode().setNode(source);
      return configuration;
    }
    @Override
    public Java_Producer.ProducerPart_NodeIMainClass_d1i8dk_c clone() {
      return (Java_Producer.ProducerPart_NodeIMainClass_d1i8dk_c) super.clone();
    }
  }
}
