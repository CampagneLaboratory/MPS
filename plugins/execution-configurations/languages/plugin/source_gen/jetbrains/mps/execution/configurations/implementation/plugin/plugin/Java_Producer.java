package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import java.util.List;
import com.intellij.execution.junit.RuntimeConfigurationProducer;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.plugins.runconfigs.MPSPsiElement;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.intellij.execution.impl.RunManagerImpl;
import jetbrains.mps.baseLanguage.execution.api.Java_Command;

public class Java_Producer {
  private static String CONFIGURATION_FACTORY_CLASS_NAME = "jetbrains.mps.execution.configurations.implementation.plugin.plugin.Java_Configuration_Factory";

  public Java_Producer() {
  }

  public static List<RuntimeConfigurationProducer> getProducers(ConfigurationType configurationType) {
    List<RuntimeConfigurationProducer> creators = ListSequence.fromList(new ArrayList<RuntimeConfigurationProducer>());
    ListSequence.fromList(creators).addElement(new Java_Producer.ProducerPart_NodeClassConcept_d1i8dk_a(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    ListSequence.fromList(creators).addElement(new Java_Producer.ProducerPart_NodeStaticMethodDeclaration_d1i8dk_b(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    ListSequence.fromList(creators).addElement(new Java_Producer.ProducerPart_NodeIMainClass_d1i8dk_c(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    return creators;
  }

  public static class ProducerPart_NodeClassConcept_d1i8dk_a extends BaseConfigCreator<SNode> {
    public ProducerPart_NodeClassConcept_d1i8dk_a(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }

    protected boolean isApplicable(Object source) {
      return source instanceof SNode && SNodeOperations.isInstanceOf(((SNode) source), "jetbrains.mps.baseLanguage.structure.ClassConcept");
    }

    protected Java_Configuration doCreateConfiguration(final SNode source) {
      setSourceElement(new MPSPsiElement(source));
      if ((((SNode) BehaviorManager.getInstance().invoke(Object.class, source, "call_getMainMethod_1213877355884", new Class[]{SNode.class})) == null)) {
        return null;
      }
      Java_Configuration configuration = ((Java_Configuration) getConfigurationFactory().createConfiguration("Class " + SPropertyOperations.getString(source, "name"), (Java_Configuration) RunManagerImpl.getInstanceImpl(getContext().getProject()).getConfigurationTemplate(getConfigurationFactory()).getConfiguration()));
      configuration.getNode().setNode(source);
      return configuration;
    }

    @Override
    public Java_Producer.ProducerPart_NodeClassConcept_d1i8dk_a clone() {
      return (Java_Producer.ProducerPart_NodeClassConcept_d1i8dk_a) super.clone();
    }
  }

  public static class ProducerPart_NodeStaticMethodDeclaration_d1i8dk_b extends BaseConfigCreator<SNode> {
    public ProducerPart_NodeStaticMethodDeclaration_d1i8dk_b(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }

    protected boolean isApplicable(Object source) {
      return source instanceof SNode && SNodeOperations.isInstanceOf(((SNode) source), "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
    }

    protected Java_Configuration doCreateConfiguration(final SNode source) {
      setSourceElement(new MPSPsiElement(source));
      if (!(((Boolean) BehaviorManager.getInstance().invoke(Boolean.class, source, "call_isMainMethod_1213877536670", new Class[]{SNode.class})))) {
        return null;
      }
      SNode classifier = SNodeOperations.getAncestor(source, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
      if ((classifier == null)) {
        return null;
      }
      Java_Configuration configuration = ((Java_Configuration) getConfigurationFactory().createConfiguration("Class " + SPropertyOperations.getString(classifier, "name"), (Java_Configuration) RunManagerImpl.getInstanceImpl(getContext().getProject()).getConfigurationTemplate(getConfigurationFactory()).getConfiguration()));
      configuration.getNode().setNode(classifier);
      return configuration;
    }

    @Override
    public Java_Producer.ProducerPart_NodeStaticMethodDeclaration_d1i8dk_b clone() {
      return (Java_Producer.ProducerPart_NodeStaticMethodDeclaration_d1i8dk_b) super.clone();
    }
  }

  public static class ProducerPart_NodeIMainClass_d1i8dk_c extends BaseConfigCreator<SNode> {
    public ProducerPart_NodeIMainClass_d1i8dk_c(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }

    protected boolean isApplicable(Object source) {
      return source instanceof SNode && SNodeOperations.isInstanceOf(((SNode) source), "jetbrains.mps.execution.util.structure.IMainClass");
    }

    protected Java_Configuration doCreateConfiguration(final SNode source) {
      setSourceElement(new MPSPsiElement(source));
      if (!((((Boolean) BehaviorManager.getInstance().invoke(Boolean.class, source, "virtual_isNodeRunnable_4666195181811081448", new Class[]{SNode.class})) && Java_Command.isUnitNode(source)))) {
        return null;
      }
      String name = (SNodeOperations.isInstanceOf(source, "jetbrains.mps.lang.core.structure.INamedConcept") ?
        SPropertyOperations.getString(SNodeOperations.cast(source, "jetbrains.mps.lang.core.structure.INamedConcept"), "name") :
        ((String) BehaviorManager.getInstance().invoke(Object.class, source, "virtual_getUnitName_4666195181811081431", new Class[]{SNode.class}))
      );
      Java_Configuration configuration = ((Java_Configuration) getConfigurationFactory().createConfiguration("Node " + name, (Java_Configuration) RunManagerImpl.getInstanceImpl(getContext().getProject()).getConfigurationTemplate(getConfigurationFactory()).getConfiguration()));
      configuration.getNode().setNode(source);
      return configuration;
    }

    @Override
    public Java_Producer.ProducerPart_NodeIMainClass_d1i8dk_c clone() {
      return (Java_Producer.ProducerPart_NodeIMainClass_d1i8dk_c) super.clone();
    }
  }
}
