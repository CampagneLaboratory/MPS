package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import com.intellij.openapi.project.Project;
import jetbrains.mps.lang.test.util.TestLightRunState;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestRunState;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestEventsDispatcher;
import jetbrains.mps.baseLanguage.unitTest.execution.server.TestLightExecutor;
import java.util.concurrent.Future;
import jetbrains.mps.baseLanguage.unitTest.execution.server.TestExecutor;
import com.intellij.openapi.application.ApplicationManager;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class JUnitLightExecutor {

  private final Iterable<ITestNodeWrapper> myNodes;
  private final Project myProject;
  private final Filter<ITestNodeWrapper> myFilter = new JUnitLightExecutor.DefaultFilter();
  private static volatile boolean ourRunInProgress = false;


  public JUnitLightExecutor(Iterable<ITestNodeWrapper> testNodeWrappers, Project project) {
    ourRunInProgress = true;
    myNodes = testNodeWrappers;
    myProject = project;
  }



  public static synchronized boolean accept(Iterable<ITestNodeWrapper> nodes) {
    // allowing only one instance to be light-executed 
    if (ourRunInProgress) {
      return false;
    }
    System.setProperty(TestLightRunState.LIGHT_EXEC_FLAG, "true");
    return new JUnitLightExecutor.DefaultFilter().accept(nodes);
  }




  public JUnitProcessPack execute() {
    try {
      final Iterable<? extends ITestNodeWrapper> nodes = myFilter.filter(myNodes);
      TestRunState runState = new TestRunState(nodes);
      TestEventsDispatcher eventsDispatcher = new TestEventsDispatcher(runState);

      TestLightExecutor executor = new TestLightExecutor(eventsDispatcher, nodes);
      final Future<?> future = doExecute(executor);
      final FakeProcessHandler process = new FakeProcessHandler(future, executor);

      JUnitProcessPack packProcess = new JUnitProcessPacker(myProject, runState, eventsDispatcher).packProcess(process);
      return packProcess;
    } finally {
      dispose();
    }
  }



  private Future<?> doExecute(final TestExecutor executor) {
    return ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {
      @Override
      public void run() {
        try {
          executor.init();
          executor.execute();
        } finally {
          JUnitLightExecutor.this.dispose();
        }
      }
    });
  }



  private void dispose() {
    ourRunInProgress = false;
  }



  private static class DefaultFilter implements Filter<ITestNodeWrapper> {
    @Override
    public boolean accept(Iterable<? extends ITestNodeWrapper> ts) {
      return true;
      // TODO REMOVE!!! 
      // <node> 
    }



    @Override
    public Iterable<? extends ITestNodeWrapper> filter(final Iterable<? extends ITestNodeWrapper> ts) {
      final List<ITestNodeWrapper> seq = ListSequence.fromList(new LinkedList<ITestNodeWrapper>());
      ModelAccess.instance().runReadAction(new Runnable() {
        @Override
        public void run() {
          ListSequence.fromList(seq).addSequence(Sequence.fromIterable(ts).where(new IWhereFilter<ITestNodeWrapper>() {
            public boolean accept(ITestNodeWrapper it) {
              SNode root = SNodeOperations.getContainingRoot(it.getNode());
              return SNodeOperations.isInstanceOf(root, "jetbrains.mps.lang.test.structure.NodesTestCase") || SNodeOperations.isInstanceOf(root, "jetbrains.mps.lang.test.structure.EditorTestCase");
            }
          }));
        }
      });
      return seq;
    }
  }


}
