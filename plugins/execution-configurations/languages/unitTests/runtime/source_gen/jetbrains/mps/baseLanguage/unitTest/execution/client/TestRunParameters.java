package jetbrains.mps.baseLanguage.unitTest.execution.client;

/*Generated by MPS */

import jetbrains.mps.util.annotation.ToRemove;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.project.facets.JavaModuleFacet;

/**
 * ITestable instances only specify whether they need mps start or not; wrappers provide classpath for them
 */
@Deprecated
@ToRemove(version = 2.1)
public class TestRunParameters {
  private String myTestRunner;
  private List<String> myVmParameters;
  private List<String> myClassPath;

  @Deprecated
  public TestRunParameters() {
    myTestRunner = "jetbrains.mps.baseLanguage.unitTest.execution.server.TestRunner";
    myVmParameters = ListSequence.fromList(new ArrayList<String>());
    myClassPath = ListSequence.fromList(new ArrayList<String>());
    ListSequence.fromList(myClassPath).addSequence(SetSequence.fromSet(MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("f618e99a-2641-465c-bb54-31fe76f9e285")).getFacet(JavaModuleFacet.class).getClassPath()));
  }

  public void setTestRunner(String name) {
    myTestRunner = name;
  }

  public String getTestRunner() {
    return myTestRunner;
  }

  public void setVmParameters(List<String> parameters) {
    myVmParameters = parameters;
  }

  public List<String> getVmParameters() {
    return myVmParameters;
  }

  public void setClassPath(List<String> classPath) {
    myClassPath = classPath;
  }

  public List<String> getClassPath() {
    return myClassPath;
  }

  @Override
  public boolean equals(Object obj) {
    if (!(obj instanceof TestRunParameters)) {
      return false;
    }
    TestRunParameters parameters = (TestRunParameters) obj;
    boolean result = eq_mls2ap_a0a2a01(myTestRunner, parameters.myTestRunner);
    result = result && eq_mls2ap_a0a0d0k(myVmParameters, parameters.myVmParameters);
    result = result && eq_mls2ap_a0a0e0k(myClassPath, parameters.myClassPath);
    return result;
  }

  @Override
  public int hashCode() {
    return myTestRunner.hashCode() + myClassPath.hashCode() + myVmParameters.hashCode();
  }

  private static boolean eq_mls2ap_a0a2a01(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_mls2ap_a0a0d0k(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_mls2ap_a0a0e0k(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
