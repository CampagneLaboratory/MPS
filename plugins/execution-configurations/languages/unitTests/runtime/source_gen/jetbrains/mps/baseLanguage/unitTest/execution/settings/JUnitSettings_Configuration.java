package jetbrains.mps.baseLanguage.unitTest.execution.settings;

/*Generated by MPS */

import jetbrains.mps.execution.api.settings.IPersistentConfiguration;
import jetbrains.mps.execution.api.settings.ITemplatePersistentConfiguration;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;
import jetbrains.mps.execution.lib.ClonableList;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.execution.configurations.implementation.plugin.plugin.JUnitLightExecutor;
import java.util.List;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNodeReference;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.apache.log4j.Level;
import jetbrains.mps.execution.api.settings.SettingsEditorEx;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class JUnitSettings_Configuration implements IPersistentConfiguration, ITemplatePersistentConfiguration {
  @NotNull
  private JUnitSettings_Configuration.MyState myState = new JUnitSettings_Configuration.MyState();

  public void checkConfiguration() throws RuntimeConfigurationException {
    if (this.getRunType() == null) {
      throw new RuntimeConfigurationException("Type of test not selected.");
    }
    if (this.getRunType() != null) {
      // We do not validate, only check if there is something to test, since validating everything be very slow 
      // see MPS-8781 JUnit run configuration check method performance. 
      if (eq_jtq3ac_a0c0b0a0b(this.getRunType(), JUnitRunTypes.PROJECT)) {
        return;
      }
      if (!(hasTests(ProjectHelper.toMPSProject(myProject)))) {
        throw new RuntimeConfigurationException("Could not find tests to run.");
      }
    }
  }

  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    element.addContent(XmlSerializer.serialize(myState));
  }

  @Override
  public void readExternal(Element element) throws InvalidDataException {
    if (element == null) {
      throw new InvalidDataException("Cant read " + this + ": element is null.");
    }
    XmlSerializer.deserializeInto(myState, (Element) element.getChildren().get(0));
  }

  public String getModel() {
    return myState.myModel;
  }

  public String getModule() {
    return myState.myModule;
  }

  public boolean getLightExec() {
    return myState.myLightExec;
  }

  public ClonableList<String> getTestCases() {
    return myState.myTestCases;
  }

  public ClonableList<String> getTestMethods() {
    return myState.myTestMethods;
  }

  public JUnitRunTypes getRunType() {
    return myState.myRunType;
  }

  public void setModel(String value) {
    myState.myModel = value;
  }

  public void setModule(String value) {
    myState.myModule = value;
  }

  public void setLightExec(boolean value) {
    myState.myLightExec = value;
  }

  public void setTestCases(ClonableList<String> value) {
    myState.myTestCases = value;
  }

  public void setTestMethods(ClonableList<String> value) {
    myState.myTestMethods = value;
  }

  public void setRunType(JUnitRunTypes value) {
    myState.myRunType = value;
  }

  public boolean canLightExecute(Iterable<ITestNodeWrapper> testNodes) {
    if (this.getLightExec() && !(JUnitLightExecutor.isLightRunInProgress())) {
      if (new LightExecutionFilter().accept(testNodes)) {
        return true;
      }
    }
    return false;
  }

  public List<ITestNodeWrapper> getTests(final Project project) {
    if (this.getRunType() == null) {
      return null;
    }
    Iterable<ITestNodeWrapper> testNodes = this.getRunType().collect(this, project);
    if (canLightExecute(testNodes)) {
      return Sequence.fromIterable(new LightExecutionFilter().filter(testNodes)).toListSequence();
    }

    return Sequence.fromIterable(testNodes).toListSequence();
  }

  public boolean hasTests(final Project project) {
    final boolean[] hasTests = {true};
    final JUnitSettings_Configuration settings = this;
    if (this.getRunType() != null) {
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          hasTests[0] = JUnitSettings_Configuration.this.getRunType().hasTests(settings, project);
        }
      });
    }
    return hasTests[0];
  }

  public List<ITestNodeWrapper> getTestsUnderProgress(final Project project) {
    if (this.getRunType() == null) {
      return ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
    }
    return Sequence.fromIterable(this.getRunType().collect(this, project, true)).toListSequence();
  }

  public List<SNodeReference> getTestsToMake(final Project project) {
    final List<ITestNodeWrapper>[] stuffToTest = (List<ITestNodeWrapper>[]) new List[1];
    ApplicationManager.getApplication().invokeAndWait(new Runnable() {
      @Override
      public void run() {
        stuffToTest[0] = getTestsUnderProgress(project);
      }
    }, ModalityState.NON_MODAL);
    return ListSequence.fromList(stuffToTest[0]).select(new ISelector<ITestNodeWrapper, SNodeReference>() {
      public SNodeReference select(ITestNodeWrapper it) {
        return it.getNodePointer();
      }
    }).toListSequence();
  }

  @Override
  public JUnitSettings_Configuration clone() {
    JUnitSettings_Configuration clone = null;
    try {
      clone = createCloneTemplate();
      clone.myState = (JUnitSettings_Configuration.MyState) myState.clone();
      return clone;
    } catch (CloneNotSupportedException ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", ex);
      }
    }
    return clone;
  }

  public class MyState {
    public String myModel;
    public String myModule;
    public boolean myLightExec = true;
    public ClonableList<String> myTestCases = new ClonableList<String>();
    public ClonableList<String> myTestMethods = new ClonableList<String>();
    public JUnitRunTypes myRunType = JUnitRunTypes.PROJECT;

    public MyState() {
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
      JUnitSettings_Configuration.MyState state = new JUnitSettings_Configuration.MyState();
      state.myModel = myModel;
      state.myModule = myModule;
      state.myLightExec = myLightExec;
      if (myTestCases != null) {
        state.myTestCases = myTestCases.clone();
      }
      if (myTestMethods != null) {
        state.myTestMethods = myTestMethods.clone();
      }
      state.myRunType = myRunType;
      return state;
    }
  }

  public JUnitSettings_Configuration(com.intellij.openapi.project.Project project) {
    myProject = project;
  }

  private final com.intellij.openapi.project.Project myProject;
  private SettingsEditorEx<JUnitSettings_Configuration> myEditorEx;

  public JUnitSettings_Configuration createCloneTemplate() {
    return new JUnitSettings_Configuration(myProject);
  }

  public JUnitSettings_Configuration_Editor getEditor() {
    return new JUnitSettings_Configuration_Editor(myProject);
  }

  public SettingsEditorEx<JUnitSettings_Configuration> getEditorEx() {
    if (myEditorEx == null) {
      myEditorEx = getEditor();
    }
    return myEditorEx;
  }

  protected static Logger LOG = LogManager.getLogger(JUnitSettings_Configuration.class);

  private static boolean eq_jtq3ac_a0c0b0a0b(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
