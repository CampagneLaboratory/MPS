package jetbrains.mps.baseLanguage.unitTest.execution.settings;

/*Generated by MPS */

import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.ide.ui.dialogs.properties.choosers.CommonChoosers;
import java.util.Collections;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.progress.EmptyProgressMonitor;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class ModuleChooser extends TextFieldWithBrowseButton.NoPathCompletion {
  private final List<SModuleReference> myCheckedModules = ListSequence.fromList(new ArrayList<SModuleReference>());
  public ModuleChooser() {
    addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent p0) {
        ModuleChooser.this.collectModules();
        StringBuilder result = new StringBuilder();
        SModuleReference ref = CommonChoosers.showDialogModuleChooser(null, "", ModuleChooser.this.myCheckedModules, Collections.EMPTY_LIST);
        if (ref != null) {
          result.append(ref.getModuleName());
          ModuleChooser.this.setText(result.toString());
        }
      }
    });
  }
  private void collectModules() {
    ListSequence.fromList(this.myCheckedModules).clear();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SAbstractConcept concept = SConceptRepository.getInstance().getConcept("jetbrains.mps.baseLanguage.unitTest.structure.ITestCase");
        Set<SNode> usages = FindUsagesFacade.getInstance().findInstances(GlobalScope.getInstance(), Collections.singleton(concept), false, new EmptyProgressMonitor());
        Set<SNode> us = ((Set) usages);
        for (SNode node : us) {
          SModel model = SNodeOperations.getModel(node);
          SModel md = model;
          SModuleReference module = md.getModule().getModuleReference();
          if (ListSequence.fromList(ModuleChooser.this.myCheckedModules).contains(module)) {
            continue;
          }
          ListSequence.fromList(ModuleChooser.this.myCheckedModules).addElement(module);
        }
      }
    });
  }
}
