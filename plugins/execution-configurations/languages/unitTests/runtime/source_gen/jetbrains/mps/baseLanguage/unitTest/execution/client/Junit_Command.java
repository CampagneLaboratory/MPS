package jetbrains.mps.baseLanguage.unitTest.execution.client;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.File;
import com.intellij.execution.process.ProcessHandler;
import java.util.List;
import jetbrains.mps.baseLanguage.execution.api.JavaRunParameters;
import com.intellij.execution.ExecutionException;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.execution.api.Java_Command;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.debug.api.IDebugger;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import java.util.ArrayList;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Set;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.LinkedHashSet;
import jetbrains.mps.debug.api.run.IDebuggerConfiguration;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.debug.api.IDebuggerSettings;
import jetbrains.mps.debugger.java.api.settings.LocalConnectionSettings;
import jetbrains.mps.debug.api.Debuggers;

public class Junit_Command {
  protected static Log log = LogFactory.getLog(Junit_Command.class);

  private String myDebuggerSettings_String;
  private String myVirtualMachineParameter_String;
  private String myJrePath_String;
  private File myWorkingDirectory_File = new File(System.getProperty("user.home"));

  public Junit_Command() {
  }

  public Junit_Command setDebuggerSettings_String(String debuggerSettings) {
    if (debuggerSettings != null) {
      myDebuggerSettings_String = debuggerSettings;
    }
    return this;
  }

  public Junit_Command setVirtualMachineParameter_String(String virtualMachineParameter) {
    if (virtualMachineParameter != null) {
      myVirtualMachineParameter_String = virtualMachineParameter;
    }
    return this;
  }

  public Junit_Command setJrePath_String(String jrePath) {
    if (jrePath != null) {
      myJrePath_String = jrePath;
    }
    return this;
  }

  public Junit_Command setWorkingDirectory_File(File workingDirectory) {
    if (workingDirectory != null) {
      myWorkingDirectory_File = workingDirectory;
    }
    return this;
  }

  public ProcessHandler createProcess(List<ITestNodeWrapper> tests, JavaRunParameters javaRunParameters) throws ExecutionException {
    return new Junit_Command().setVirtualMachineParameter_String(check_u7m9j_a1a0a0a(javaRunParameters)).setJrePath_String((check_u7m9j_a0c0a0a0(javaRunParameters) ?
      javaRunParameters.jrePath() :
      null
    )).setWorkingDirectory_File((isEmpty_yo2c7x_a0a0a0a0a4(check_u7m9j_a0a3a0a0a(javaRunParameters)) ?
      null :
      new File(javaRunParameters.workingDirectory())
    )).setDebuggerSettings_String(myDebuggerSettings_String).createProcess(tests);
  }

  public ProcessHandler createProcess(List<ITestNodeWrapper> tests) throws ExecutionException {
    if (tests == null) {
      throw new ExecutionException("Tests to run are null.");
    }
    Tuples._2<List<ITestNodeWrapper>, Tuples._3<String, List<String>, List<String>>> testsToRun = Junit_Command.getTestsToRunWithParameters(tests);
    if (ListSequence.fromList(testsToRun._0()).isEmpty()) {
      throw new ExecutionException("Could not find tests to run.");
    }
    return new Java_Command().setVirtualMachineParameter_String(IterableUtils.join(ListSequence.fromList(testsToRun._1()._1()), " ") + (((myVirtualMachineParameter_String != null && myVirtualMachineParameter_String.length() > 0) ?
      " " + myVirtualMachineParameter_String :
      ""
    ))).setClassPath_ListString(ListSequence.fromList(testsToRun._1()._2()).union(ListSequence.fromList(Junit_Command.getClasspath(testsToRun._0()))).toListSequence()).setJrePath_String(myJrePath_String).setWorkingDirectory_File(myWorkingDirectory_File).setProgramParameter_String(Junit_Command.getProgramParameters(testsToRun._0())).setDebuggerSettings_String(myDebuggerSettings_String).createProcess(testsToRun._1()._0());
  }

  public static IDebugger getDebugger() {
    return getDebuggerConfiguration().getDebugger();
  }

  private static String getProgramParameters(final List<ITestNodeWrapper> tests) {
    final Wrappers._T<List<String>> testsCommandLine = new Wrappers._T<List<String>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        testsCommandLine.value = ListSequence.fromList(new ArrayList<String>(ListSequence.fromList(tests).count()));
        for (ITestNodeWrapper test : ListSequence.fromList(tests)) {
          List<String> parametersPart = ListSequence.fromListAndArray(new ArrayList<String>(), (test.isTestCase() ?
            "-c" :
            "-m"
          ), test.getFqName());
          ListSequence.fromList(testsCommandLine.value).addSequence(ListSequence.fromList(parametersPart));
        }
      }
    });
    return IterableUtils.join(ListSequence.fromList(testsCommandLine.value), " ");
  }

  private static Tuples._2<List<ITestNodeWrapper>, Tuples._3<String, List<String>, List<String>>> getTestsToRunWithParameters(@NotNull List<ITestNodeWrapper> tests) throws ExecutionException {
    final Wrappers._T<List<ITestNodeWrapper>> _tests = new Wrappers._T<List<ITestNodeWrapper>>(tests);
    final Wrappers._T<Tuples._3<String, List<String>, List<String>>> runParams = new Wrappers._T<Tuples._3<String, List<String>, List<String>>>();
    final Wrappers._T<List<ITestNodeWrapper>> testsToRun = new Wrappers._T<List<ITestNodeWrapper>>();
    final Wrappers._T<String> skipped = new Wrappers._T<String>();
    _tests.value = ListSequence.fromList(_tests.value).where(new IWhereFilter<ITestNodeWrapper>() {
      public boolean accept(ITestNodeWrapper it) {
        return it != null;
      }
    }).toListSequence();
    if (ListSequence.fromList(_tests.value).isEmpty()) {
      final Wrappers._T<Tuples._3<String, List<String>, List<String>>> defaultRunParameters = new Wrappers._T<Tuples._3<String, List<String>, List<String>>>();
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          defaultRunParameters.value = AbstractTestWrapper.getDefaultRunParameters();
        }
      });
      return MultiTuple.<List<ITestNodeWrapper>,Tuples._3<String, List<String>, List<String>>>from(ListSequence.fromList(new ArrayList<ITestNodeWrapper>()), defaultRunParameters.value);
    }
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        runParams.value = ListSequence.fromList(_tests.value).first().getTestRunParameters();
        testsToRun.value = ListSequence.fromList(_tests.value).where(new IWhereFilter<ITestNodeWrapper>() {
          public boolean accept(ITestNodeWrapper it) {
            return eq_yo2c7x_a0a0a0a0a0a0b0a0a0a0g0c(it.getTestRunParameters(), runParams.value);
          }
        }).toListSequence();
        skipped.value = IterableUtils.join(ListSequence.fromList(_tests.value).where(new IWhereFilter<ITestNodeWrapper>() {
          public boolean accept(ITestNodeWrapper it) {
            return neq_yo2c7x_a0a0a0a0a0a0a2a0a0a0a6a2(it.getTestRunParameters(), runParams.value);
          }
        }).select(new ISelector<ITestNodeWrapper, String>() {
          public String select(ITestNodeWrapper it) {
            return it.getName();
          }
        }), " ");
      }
    });
    if (isNotEmpty_yo2c7x_a0h0c(skipped.value)) {
      if (log.isWarnEnabled()) {
        log.warn("All tests could not be executed together. Skipped " + skipped.value);
      }
    }
    return MultiTuple.<List<ITestNodeWrapper>,Tuples._3<String, List<String>, List<String>>>from(testsToRun.value, runParams.value);
  }

  private static List<String> getClasspath(final List<ITestNodeWrapper> tests) {
    final Set<IModule> uniqueModules = SetSequence.fromSet(new HashSet<IModule>());
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (ITestNodeWrapper testable : tests) {
          IModule module = testable.getNodePointer().getModel().getModule();
          SetSequence.fromSet(uniqueModules).addElement(module);
        }
      }
    });
    Set<String> classpath = SetSequence.fromSet(new LinkedHashSet<String>());
    for (IModule module : uniqueModules) {
      SetSequence.fromSet(classpath).addSequence(ListSequence.fromList(Java_Command.getClasspath(module, true)));
    }
    return SetSequence.fromSet(classpath).toListSequence();
  }

  public static IDebuggerConfiguration getDebuggerConfiguration() {
    return new IDebuggerConfiguration() {
      @Nullable
      public IDebuggerSettings createDebuggerSettings() {
        return new LocalConnectionSettings(true);
      }

      public IDebugger getDebugger() {
        return Debuggers.getInstance().getDebuggerByName("Java");
      }
    };
  }

  private static String check_u7m9j_a1a0a0a(JavaRunParameters checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.vmOptions();
    }
    return null;
  }

  private static boolean check_u7m9j_a0c0a0a0(JavaRunParameters checkedDotOperand) {
    if (null != checkedDotOperand) {
      return (boolean) checkedDotOperand.useAlternativeJre();
    }
    return false;
  }

  private static String check_u7m9j_a0a3a0a0a(JavaRunParameters checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.workingDirectory();
    }
    return null;
  }

  public static boolean isEmpty_yo2c7x_a0a0a0a0a4(String str) {
    return str == null || str.length() == 0;
  }

  private static boolean eq_yo2c7x_a0a0a0a0a0a0b0a0a0a0g0c(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean neq_yo2c7x_a0a0a0a0a0a0a2a0a0a0a6a2(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  public static boolean isNotEmpty_yo2c7x_a0h0c(String str) {
    return str != null && str.length() > 0;
  }
}
