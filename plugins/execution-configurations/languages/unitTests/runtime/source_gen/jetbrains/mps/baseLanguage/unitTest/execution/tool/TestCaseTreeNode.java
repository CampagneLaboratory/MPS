package jetbrains.mps.baseLanguage.unitTest.execution.tool;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.openapi.navigation.NavigationSupport;

public class TestCaseTreeNode extends BaseTestTreeNode {
  @NotNull
  protected final ITestNodeWrapper myTestCase;
  public TestCaseTreeNode(@NotNull IOperationContext operationContext, @NotNull ITestNodeWrapper testCase) {
    super(operationContext);
    myTestCase = testCase;
    setNodeIdentifier(((SNodePointer) myTestCase.getNodePointer()).toString());
    setText(SPropertyOperations.getString(SNodeOperations.cast(myTestCase.getNode(), MetaAdapterFactory.getConcept(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, "jetbrains.mps.lang.core.structure.INamedConcept")), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")));
    setAdditionalText(SModelStereotype.withoutStereotype(myTestCase.getNodePointer().getModelReference().getModelName()));
  }
  public String getClassName() {
    final Wrappers._T<String> className = new Wrappers._T<String>(null);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        className.value = myTestCase.getFqName();
      }
    });
    return className.value;
  }
  @Override
  public void doubleClick() {
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        NavigationSupport.getInstance().openNode(getOperationContext(), myTestCase.getNode(), true, false);
      }
    });
  }
  @Override
  public int getToggleClickCount() {
    return -1;
  }
  @Override
  public Object getUserObject() {
    return myTestCase;
  }
}
