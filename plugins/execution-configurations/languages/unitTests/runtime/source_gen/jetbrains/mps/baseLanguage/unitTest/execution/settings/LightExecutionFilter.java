package jetbrains.mps.baseLanguage.unitTest.execution.settings;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class LightExecutionFilter implements Filter<ITestNodeWrapper> {
  @Override
  public boolean accept(Iterable<ITestNodeWrapper> ts) {
    return true;
    // TODO REMOVE!!! 
    // <node> 
  }

  @Override
  public Iterable<ITestNodeWrapper> filter(final Iterable<ITestNodeWrapper> ts) {
    final List<ITestNodeWrapper> seq = ListSequence.fromList(new LinkedList<ITestNodeWrapper>());
    ModelAccess.instance().runReadAction(new Runnable() {
      @Override
      public void run() {
        ListSequence.fromList(seq).addSequence(Sequence.fromIterable(ts).where(new IWhereFilter<ITestNodeWrapper>() {
          public boolean accept(ITestNodeWrapper it) {
            SNode root = SNodeOperations.getContainingRoot(it.getNode());
            return SNodeOperations.isInstanceOf(root, "jetbrains.mps.lang.test.structure.EditorTestCase") || SNodeOperations.isInstanceOf(root, "jetbrains.mps.lang.test.structure.NodesTestCase");
          }
        }));
      }
    });
    return seq;
  }
}
