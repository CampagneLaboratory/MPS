package jetbrains.mps.baseLanguage.unitTest.execution.settings;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.execution.lib.PointerUtils;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestNodeWrapperFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.annotations.Nls;
import jetbrains.mps.smodel.SModelRepository;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.util.SubProgressKind;

public class TestUtils {
  public TestUtils() {
  }
  @NotNull
  public static Iterable<ITestNodeWrapper> wrapPointerStrings(@Nullable final Iterable<String> strings) {
    if (strings == null) {
      return Sequence.fromIterable(Collections.<ITestNodeWrapper>emptyList());
    }
    return Sequence.fromClosure(new ISequenceClosure<ITestNodeWrapper>() {
      public Iterable<ITestNodeWrapper> iterable() {
        return new Iterable<ITestNodeWrapper>() {
          public Iterator<ITestNodeWrapper> iterator() {
            return new YieldingIterator<ITestNodeWrapper>() {
              private int __CP__ = 0;
              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_pointerString_it = strings.iterator();
                    case 3:
                      if (!(this._2_pointerString_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._2_pointerString = this._2_pointerString_it.next();
                      this.__CP__ = 4;
                      break;
                    case 7:
                      if (_6_node != null) {
                        this.__CP__ = 8;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 11:
                      if (_10_wrapper != null) {
                        this.__CP__ = 12;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 13:
                      this.__CP__ = 3;
                      this.yield(_10_wrapper);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this._6_node = check_6qi07j_a0a0a0a0a1a1(((SNodePointer) PointerUtils.stringToPointer(_2_pointerString)));
                      this.__CP__ = 7;
                      break;
                    case 8:
                      this._10_wrapper = TestNodeWrapperFactory.tryToWrap(_6_node);
                      this.__CP__ = 11;
                      break;
                    case 12:
                      this.__CP__ = 13;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
              private String _2_pointerString;
              private Iterator<String> _2_pointerString_it;
              private SNode _6_node;
              private ITestNodeWrapper _10_wrapper;
            };
          }
        };
      }
    });
  }

  @Nullable
  public static SModel getModel(@Nls String modelName) {
    if ((modelName == null || modelName.length() == 0)) {
      return null;
    }

    return SModelRepository.getInstance().getModelDescriptor(modelName);
  }

  @Nullable
  public static SModule getModule(@Nls String moduleName) {
    if ((moduleName == null || moduleName.length() == 0)) {
      return null;
    }
    return MPSModuleRepository.getInstance().getModuleByFqName(moduleName);
  }

  public static Iterable<ITestNodeWrapper> getModelTests(@NotNull SModel model, ProgressMonitor monitor, boolean breakOnFirstFound) {
    Iterable<ITestNodeWrapper> result = Sequence.fromIterable(Collections.<ITestNodeWrapper>emptyList());
    Iterable<SNode> roots = (Iterable<SNode>) model.getRootNodes();
    monitor.start("model " + model.getModelName(), IterableUtil.asCollection(roots).size());
    try {
      for (SNode root : Sequence.fromIterable(roots)) {
        if (monitor.isCanceled()) {
          return null;
        }
        ITestNodeWrapper wrappedNode = TestNodeWrapperFactory.tryToWrap(root);
        if (wrappedNode != null) {
          result = Sequence.fromIterable(result).concat(Sequence.singleton(wrappedNode));
          if (breakOnFirstFound) {
            return result;
          }
        }
        monitor.advance(1);
      }
    } finally {
      monitor.done();
    }
    return result;
  }

  public static Iterable<ITestNodeWrapper> getModuleTests(@NotNull SModule module, ProgressMonitor monitor, boolean breakOnFirstFound) {
    Iterable<ITestNodeWrapper> result = Sequence.fromIterable(Collections.<ITestNodeWrapper>emptyList());
    Iterable<SModel> models = module.getModels();
    monitor.start("Fetching tests from module " + module.getModuleName(), IterableUtil.asCollection(models).size());
    try {
      for (SModel model : Sequence.fromIterable(models)) {
        if (SModelStereotype.isUserModel(model)) {
          Iterable<ITestNodeWrapper> modelTests = TestUtils.getModelTests(model, monitor.subTask(1), false);
          if (monitor.isCanceled()) {
            return null;
          }
          result = Sequence.fromIterable(result).concat(Sequence.fromIterable(modelTests));
          if (breakOnFirstFound && Sequence.fromIterable(modelTests).isNotEmpty()) {
            return result;
          }
        }
        monitor.advance(1);
      }
    } finally {
      monitor.done();
    }
    return result;
  }

  public static Iterable<ITestNodeWrapper> getProjectTests(@NotNull Project project, ProgressMonitor monitor, boolean breakOnFirstFound) {
    Iterable<ITestNodeWrapper> result = Sequence.fromIterable(Collections.<ITestNodeWrapper>emptyList());

    Iterable<? extends SModule> projectModules = project.getModules();
    monitor.start("Fetching tests from modules", 2 * IterableUtil.asCollection(projectModules).size());

    try {
      for (SModule module : Sequence.fromIterable(projectModules)) {
        Iterable<ITestNodeWrapper> moduleTests = TestUtils.getModuleTests(module, monitor.subTask(1, SubProgressKind.REPLACING), breakOnFirstFound);
        if (monitor.isCanceled()) {
          return null;
        }
        result = Sequence.fromIterable(result).concat(Sequence.fromIterable(moduleTests));
        monitor.advance(1);
        if (breakOnFirstFound && Sequence.fromIterable(moduleTests).isNotEmpty()) {
          return result;
        }
      }
    } finally {
      monitor.done();
    }
    return result;
  }
  private static SNode check_6qi07j_a0a0a0a0a1a1(SNodePointer checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(MPSModuleRepository.getInstance());
    }
    return null;
  }
}
