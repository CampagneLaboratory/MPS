package jetbrains.mps.baseLanguage.unitTest.execution.settings;

/*Generated by MPS */

import jetbrains.mps.util.annotation.ToRemove;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.annotations.Nls;
import jetbrains.mps.smodel.SModelReference;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestNodeWrapperFactory;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.project.Project;

public class TestUtils {
  @Deprecated
  @ToRemove(version = 2.1)
  public static final String SEPARATOR = "#";
  private static final String POINTER_SEPARATOR = "%";

  public TestUtils() {
  }

  @Nullable
  public static SNodePointer stringToPointer(@Nls String pointerString) {
    if ((pointerString == null || pointerString.length() == 0)) {
      return null;
    }
    String[] split = pointerString.split(POINTER_SEPARATOR);
    SModelReference smodelId = SModelReference.fromString(split[0]);
    SNodeId id = jetbrains.mps.smodel.SNodeId.fromString(split[1]);
    return new SNodePointer(smodelId, id);
  }

  public static String pointerToString(@NotNull final SNodePointer pointer) {
    final Wrappers._T<String> value = new Wrappers._T<String>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        value.value = pointer.getModel().getSModelReference().toString() + POINTER_SEPARATOR + pointer.resolve(MPSModuleRepository.getInstance()).getNodeId().toString();
      }
    });
    return value.value;
  }

  @NotNull
  public static Iterable<ITestNodeWrapper> wrapPointerStrings(@Nullable final Iterable<String> strings) {
    if (strings == null) {
      return Sequence.fromIterable(Collections.<ITestNodeWrapper>emptyList());
    }
    return Sequence.fromClosure(new ISequenceClosure<ITestNodeWrapper>() {
      public Iterable<ITestNodeWrapper> iterable() {
        return new Iterable<ITestNodeWrapper>() {
          public Iterator<ITestNodeWrapper> iterator() {
            return new YieldingIterator<ITestNodeWrapper>() {
              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_pointerString_it = Sequence.fromIterable(strings).iterator();
                    case 3:
                      if (!(this._2_pointerString_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._2_pointerString = this._2_pointerString_it.next();
                      this.__CP__ = 4;
                      break;
                    case 7:
                      if (_6_node != null) {
                        this.__CP__ = 8;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 11:
                      if (_10_wrapper != null) {
                        this.__CP__ = 12;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 13:
                      this.__CP__ = 3;
                      this.yield(_10_wrapper);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this._6_node = check_6qi07j_a0a0a0a0a1a5(stringToPointer(_2_pointerString));
                      this.__CP__ = 7;
                      break;
                    case 8:
                      this._10_wrapper = TestNodeWrapperFactory.tryToWrap(_6_node);
                      this.__CP__ = 11;
                      break;
                    case 12:
                      this.__CP__ = 13;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }

              private String _2_pointerString;
              private Iterator<String> _2_pointerString_it;
              private SNode _6_node;
              private ITestNodeWrapper _10_wrapper;
            };
          }
        };
      }
    });
  }

  public static ClonableList nodesToCloneableList(List<SNode> nodes) {
    return new ClonableList(ListSequence.fromList(nodes).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return TestUtils.pointerToString(new SNodePointer(it));
      }
    }).toListSequence());
  }

  public static ClonableList nodeToCloneableList(SNode node) {
    return new ClonableList(TestUtils.pointerToString(new SNodePointer(node)));
  }

  @Nullable
  @Deprecated
  @ToRemove(version = 2.1)
  public static ITestNodeWrapper getTestMethod(@Nls String caseName, @Nls final String methodName) {
    if ((caseName == null || caseName.length() == 0) || (methodName == null || methodName.length() == 0)) {
      return null;
    }
    ITestNodeWrapper caseNodeWrapper = getTestCase(caseName);
    if (caseNodeWrapper == null) {
      return null;
    }
    Iterable<ITestNodeWrapper> methods = caseNodeWrapper.getTestMethods();
    return Sequence.fromIterable(methods).findFirst(new IWhereFilter<ITestNodeWrapper>() {
      public boolean accept(ITestNodeWrapper it) {
        return it.getName().equals(methodName);
      }
    });
  }

  @Nullable
  @Deprecated
  @ToRemove(version = 2.1)
  public static ITestNodeWrapper getTestMethod(@Nls String fullMethodName) {
    if ((fullMethodName == null || fullMethodName.length() == 0)) {
      return null;
    }
    int separatorIndex = fullMethodName.lastIndexOf(SEPARATOR);
    if (separatorIndex < 0) {
      return null;
    }
    return TestUtils.getTestMethod(fullMethodName.substring(0, separatorIndex), fullMethodName.substring(separatorIndex + 1));
  }

  @Nullable
  @Deprecated
  @ToRemove(version = 2.1)
  public static ITestNodeWrapper getTestCase(@Nls String nodeName) {
    if (nodeName == null) {
      return null;
    }
    SNode node = SModelUtil.findNodeByFQName(nodeName, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept"), GlobalScope.getInstance());
    if (node == null) {
      return null;
    }
    return TestNodeWrapperFactory.tryToWrap(node);
  }

  @Nullable
  public static SModel getModel(@Nls String modelName) {
    if ((modelName == null || modelName.length() == 0)) {
      return null;
    }

    return SModelRepository.getInstance().getModelDescriptor(SModelReference.fromString(modelName));
  }

  @Nullable
  public static IModule getModule(@Nls String moduleName) {
    if ((moduleName == null || moduleName.length() == 0)) {
      return null;
    }
    return MPSModuleRepository.getInstance().getModuleByFqName(moduleName);
  }

  public static Iterable<ITestNodeWrapper> getModelTests(@NotNull SModel model) {
    return Sequence.fromIterable(((Iterable<SNode>) model.getRootNodes())).select(new ISelector<SNode, ITestNodeWrapper>() {
      public ITestNodeWrapper select(SNode it) {
        return TestNodeWrapperFactory.tryToWrap(it);
      }
    }).where(new IWhereFilter<ITestNodeWrapper>() {
      public boolean accept(ITestNodeWrapper it) {
        return it != null;
      }
    });
  }

  public static Iterable<ITestNodeWrapper> getModuleTests(@NotNull final SModule module) {
    return Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModel>() {
      public Iterable<SModel> iterable() {
        return module.getModels();
      }
    })).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return SModelStereotype.isUserModel(it);
      }
    }).translate(new ITranslator2<SModel, ITestNodeWrapper>() {
      public Iterable<ITestNodeWrapper> translate(SModel model) {
        return TestUtils.getModelTests(model);
      }
    });
  }

  public static Iterable<ITestNodeWrapper> getProjectTests(@NotNull Project project) {
    return Sequence.fromIterable(((Iterable<SModule>) project.getModules())).translate(new ITranslator2<SModule, ITestNodeWrapper>() {
      public Iterable<ITestNodeWrapper> translate(SModule module) {
        return TestUtils.getModuleTests(module);
      }
    });
  }

  private static SNode check_6qi07j_a0a0a0a0a1a5(SNodePointer checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(MPSModuleRepository.getInstance());
    }
    return null;
  }
}
