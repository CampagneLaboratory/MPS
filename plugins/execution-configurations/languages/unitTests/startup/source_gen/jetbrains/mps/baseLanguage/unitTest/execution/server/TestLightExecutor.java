package jetbrains.mps.baseLanguage.unitTest.execution.server;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.unitTest.execution.client.TestEventsDispatcher;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.lang.test.util.TestLightRunState;
import jetbrains.mps.lang.test.util.TestLightRunStateEnum;
import org.junit.runner.JUnitCore;
import org.junit.runner.Request;
import org.junit.runner.notification.StoppedByUserException;
import com.intellij.util.WaitFor;
import org.jetbrains.annotations.NotNull;
import org.junit.runner.notification.RunListener;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class TestLightExecutor extends AbstractTestExecutor {
  private static final int TERMINATION_CODE = 137;

  private final TestEventsDispatcher myDispatcher;
  private final Iterable<? extends ITestNodeWrapper> myNodes;
  private final TestsClassStorage myTestClassStorage = new TestsClassStorage();
  private final TestLightRunState myTestRunState;

  public TestLightExecutor(TestEventsDispatcher dispatcher, Iterable<? extends ITestNodeWrapper> nodes, TestLightRunState testRunState) {
    myDispatcher = dispatcher;
    myNodes = nodes;
    myTestRunState = testRunState;
  }

  @Override
  public void init() {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Initializing TestLightExecutor");
    }
  }

  @Override
  public void dispose() {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Disposing TestLightExecutor");
    }
    myTestRunState.advance(TestLightRunStateEnum.TERMINATED);
  }

  public void setReady() {
    myTestRunState.advance(TestLightRunStateEnum.READYTOEXECUTE);
  }

  @Override
  protected void doExecute(JUnitCore core, Iterable<Request> requests) throws Throwable {
    assert myTestRunState.isInitialized();
    waitWhileNotReady();
    myTestRunState.advance(TestLightRunStateEnum.RUNNING);
    System.setProperty(TestLightRunState.LIGHT_EXEC_FLAG, "true");
    try {
      super.doExecute(core, requests);
    } catch (StoppedByUserException exception) {
      terminateProcess(TERMINATION_CODE);
    }
  }

  private void waitWhileNotReady() {
    new WaitFor() {
      @Override
      protected boolean condition() {
        return myTestRunState.get() == TestLightRunStateEnum.READYTOEXECUTE;
      }
    };
  }

  public void terminateRun() {
    if (myTestRunState.isTerminated()) {
      return;
    }
    stopRun();
  }

  /*package*/ void terminateProcess(int code) {
    myTestRunState.advance(TestLightRunStateEnum.TERMINATING);
    stopRun();
    String terminateMessage = "Process finished with exit code " + code;
    if (LOG.isInfoEnabled()) {
      LOG.info(terminateMessage);
    }
    myDispatcher.onProcessTerminated(terminateMessage);
  }

  private void stopRun() {
    AbstractTestExecutor.StoppableRunner currentRunner = this.getCurrentRunner();
    assert currentRunner != null;
    currentRunner.pleaseStop();
  }

  @NotNull
  @Override
  protected TestsContributor createTestsContributor() {
    return new NodeWrappersTestsContributor(myNodes, myTestClassStorage);
  }

  @NotNull
  @Override
  protected RunListener createListener(Iterable<Request> requests) {
    return new TestLightRunListener(this, ListSequence.fromIterable(requests).size());
  }

  public TestEventsDispatcher getDispatcher() {
    return myDispatcher;
  }

  protected static Logger LOG = LogManager.getLogger(TestLightExecutor.class);
}
