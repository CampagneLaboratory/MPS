package jetbrains.mps.baseLanguage.unitTest.execution.server;

/*Generated by MPS */

import java.io.IOException;
import java.util.List;
import java.util.LinkedList;
import java.io.File;
import java.io.LineNumberReader;
import java.io.FileReader;
import java.util.ArrayList;
import org.junit.runner.Request;

public class CommandLineTestsContributor implements TestsContributor {
  private String[] myArgs;

  public CommandLineTestsContributor(String[] args) throws IOException {
    myArgs = inlineFilesContents(args);
  }

  private String[] inlineFilesContents(String[] args) throws IOException {
    List<String> newArgs = new LinkedList<String>();
    for (int num = 0; num < args.length; ++num) {
      String curArg = args[num];
      if ("-f".equals(curArg)) {
        String filename = myArgs[num++];
        List<String> fileContents = parseRequestFromFile(filename);
        newArgs.addAll(fileContents);
      } else {
        newArgs.add(curArg);
      }
    }
    return newArgs.toArray(new String[1]);
  }

  private List<String> parseRequestFromFile(String filename) throws IOException {
    new File(filename).deleteOnExit();
    LineNumberReader reader = new LineNumberReader(new FileReader(filename));
    List<String> fileContents = new ArrayList<String>();
    while (true) {
      String line = reader.readLine();
      if (line == null) {
        break;
      }
      if (line.length() == 0) {
        continue;
      }
      fileContents.add(line);
    }
    return fileContents;
  }

  @Override
  public boolean isInitialized() {
    return true;
  }

  @Override
  public Iterable<Request> gatherTests() throws IOException, ClassNotFoundException {
    List<Request> requests = new LinkedList<Request>();
    int i = 0;
    while (i < myArgs.length) {
      if ("-c".equals(myArgs[i])) {
        i++;
        requests.add(parseRequestFromClass(myArgs[i]));
      } else
      if ("-m".equals(myArgs[i])) {
        i++;
        parseRequestFromMethod(requests, myArgs[i]);
      }
      i++;
    }
    return requests;
  }

  private void parseRequestFromMethod(List<Request> requests, String s) throws ClassNotFoundException {
    int index = s.lastIndexOf('.');
    String testCase = s.substring(0, index);
    String method = s.substring(index + 1);
    requests.add(Request.method(Class.forName(testCase), method));
  }

  private Request parseRequestFromClass(String className) throws ClassNotFoundException {
    return Request.aClass(Class.forName(className));
  }


}
