package jetbrains.mps.baseLanguage.unitTest.execution.server;

/*Generated by MPS */

import org.junit.runner.Request;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class LightExecutionFilter implements Filter {
  @Override
  public boolean accept(final Request request) throws Filter.FilterException {
    assert request instanceof TestNodeRequest;
    final ITestNodeWrapper testNodeWrapper = ((TestNodeRequest) request).getTestNode();
    final Filter.FilterException[] result = {null};
    ModelAccess.instance().runReadAction(new Runnable() {
      @Override
      public void run() {
        SNode testNode = testNodeWrapper.getNode();
        SNode rootNode = SNodeOperations.getContainingRoot(testNode);
        if (!(SNodeOperations.isInstanceOf(testNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b08a01119L, "jetbrains.mps.baseLanguage.unitTest.structure.ITestable")))) {
          result[0] = new Filter.FilterException("The test concept must be an instance on ITestable concept. Test " + testNodeWrapper.getName() + " is ignored.");
        }
        if (BehaviorReflection.invokeNonVirtualStatic(Boolean.TYPE, SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.test.structure.TestInfo")), "call_reOpenProject_1031873601093419509", new Object[]{SNodeOperations.getModel(rootNode)})) {
          result[0] = new Filter.FilterException("The project properties given in the TestInfo file is impossible to set in-process. Test " + testNodeWrapper.getName() + " is ignored.");
        }
        if (SNodeOperations.isInstanceOf(testNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))) {
          if (!(BehaviorReflection.invokeNonVirtual(Boolean.TYPE, SNodeOperations.cast(testNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase")), "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase", "call_canRunInProcess_6436735966448788391", new Object[]{}))) {
            result[0] = new Filter.FilterException("The test is set not to be executed in-process. Test " + testNodeWrapper.getName() + " is ignored.");
          }

        }
        // cannot run (in-process) test methods from TestCase, which is not executable in the same process 
        if (SNodeOperations.isInstanceOf(rootNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))) {
          if (!(BehaviorReflection.invokeNonVirtual(Boolean.TYPE, SNodeOperations.cast(rootNode, MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase")), "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase", "call_canRunInProcess_6436735966448788391", new Object[]{}))) {
            result[0] = new Filter.FilterException("The test is set not to be executed in-process. Test " + testNodeWrapper.getName() + " is ignored.");
          }

        }
      }
    });
    if (result[0] != null) {
      throw result[0];
    }
    return true;
  }
}
