package jetbrains.mps.baseLanguage.unitTest.execution.server;

/*Generated by MPS */

import org.junit.runner.Request;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class LightExecutionFilter implements Filter {
  @Override
  public boolean accept(final Request request) {
    assert request instanceof TestNodeRequest;
    final ITestNodeWrapper testNodeWrapper = ((TestNodeRequest) request).getTestNode();
    final boolean[] result = {true};
    ModelAccess.instance().runReadAction(new Runnable() {
      @Override
      public void run() {
        SNode testNode = testNodeWrapper.getNode();
        SNode rootNode = SNodeOperations.getContainingRoot(testNode);
        if (!(SNodeOperations.isInstanceOf(testNode, "jetbrains.mps.baseLanguage.unitTest.structure.ITestable"))) {
          result[0] = false;
          return;
        }
        if (BehaviorReflection.invokeNonVirtualStatic(Boolean.TYPE, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.test.structure.TestInfo"))), "call_reOpenProject_1031873601093419509", new Object[]{SNodeOperations.getModel(rootNode)})) {
          result[0] = false;
          return;
        }
        if (SNodeOperations.isInstanceOf(testNode, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase")) {
          result[0] = BehaviorReflection.invokeNonVirtual(Boolean.TYPE, SNodeOperations.cast(testNode, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"), "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase", "call_canRunInProcess_6436735966448788391", new Object[]{});
          return;
        }
        // cannot run (in-process) test methods from TestCase, which is not executable in the same process 
        if (SNodeOperations.isInstanceOf(rootNode, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase")) {
          result[0] = BehaviorReflection.invokeNonVirtual(Boolean.TYPE, SNodeOperations.cast(rootNode, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"), "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase", "call_canRunInProcess_6436735966448788391", new Object[]{});
          return;
        }
      }
    });
    return result[0];
  }
}
