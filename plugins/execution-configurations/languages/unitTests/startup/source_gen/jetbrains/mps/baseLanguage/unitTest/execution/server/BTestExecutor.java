package jetbrains.mps.baseLanguage.unitTest.execution.server;

/*Generated by MPS */

import java.io.PrintStream;
import org.jetbrains.annotations.NotNull;
import org.junit.runner.notification.RunListener;
import org.junit.runner.Request;
import java.io.IOException;

public class BTestExecutor extends AbstractTestExecutor {
  private final String[] myArgs;
  private final CommandOutputStream myOutStream;
  private final CommandOutputStream myErrStream;

  public BTestExecutor(String[] args) {
    myArgs = args;
    myOutStream = new CommandOutputStream(System.out);
    myErrStream = new CommandOutputStream(System.err);
  }

  public void init() {
    System.setOut(new PrintStream(myOutStream));
    System.setErr(new PrintStream(myErrStream));
  }

  public void dispose() {
    System.setOut(myOutStream.getOldStream());
    System.setErr(myErrStream.getOldStream());
  }

  @NotNull
  @Override
  protected RunListener createListener(Iterable<Request> iterable) {
    return new DefaultRunListener(myOutStream);
  }

  @NotNull
  @Override
  protected TestsContributor createTestsContributor() {
    try {
      return new CommandLineTestsContributor(myArgs);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public static void main(String[] args) throws ClassNotFoundException, IOException {
    BTestExecutor executor = new BTestExecutor(args);
    try {
      executor.run();
    } catch (Throwable t) {
      executor.processThrowable(t);
    }
    executor.exit();
  }

  protected void run() {
    init();
    execute();
    dispose();
  }

  protected void processThrowable(Throwable t) {
    t.printStackTrace(System.err);
    System.exit(123);
  }

  protected void exit() {
    DefaultRunListener listener = ((DefaultRunListener) this.getListener());
    if (listener == null) {
      System.exit(-123);
    } else {
      System.exit(listener.getFailureCount());
    }
  }
}
