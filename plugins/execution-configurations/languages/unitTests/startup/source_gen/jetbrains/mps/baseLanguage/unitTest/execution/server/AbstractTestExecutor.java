package jetbrains.mps.baseLanguage.unitTest.execution.server;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import org.junit.runner.Request;
import org.junit.runner.JUnitCore;
import org.apache.log4j.Level;
import jetbrains.mps.RuntimeFlags;
import org.jetbrains.annotations.NotNull;
import org.junit.runner.notification.RunListener;
import org.junit.runner.Runner;
import org.junit.runner.notification.RunNotifier;
import org.junit.runner.Description;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public abstract class AbstractTestExecutor implements TestExecutor {
  private AbstractTestExecutor.StoppableRunner myCurrentRunner = null;


  @Nullable
  public AbstractTestExecutor.StoppableRunner getCurrentRunner() {
    return myCurrentRunner;
  }



  @Override
  public void execute() {
    try {
      TestsContributor testsContributor = createTestsContributor();
      Iterable<Request> requests = testsContributor.gatherTests();
      JUnitCore jUnitCore = prepareJUnitCore(requests);
      doExecute(jUnitCore, requests);
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Exception in the test framework", t);
      }
    } finally {
      assert !(RuntimeFlags.isTestMode());
      this.dispose();
    }
  }



  protected JUnitCore prepareJUnitCore(Iterable<Request> requests) {
    JUnitCore core = new JUnitCore();
    core.addListener(createListener(requests));
    return core;
  }



  protected void doExecute(JUnitCore core, Iterable<Request> requests) throws Throwable {
    for (Request request : requests) {
      myCurrentRunner = new AbstractTestExecutor.StoppableRunner(request.getRunner());
      core.run(myCurrentRunner);
    }
  }



  @NotNull
  protected abstract TestsContributor createTestsContributor();



  @NotNull
  protected abstract RunListener createListener(Iterable<Request> requests);



  protected static class StoppableRunner extends Runner {
    private final Runner myRunner;
    private RunNotifier myNotifier = null;


    public StoppableRunner(Runner runner) {
      myRunner = runner;
    }



    public Description getDescription() {
      return myRunner.getDescription();
    }



    public void run(RunNotifier notifier) {
      myNotifier = notifier;
      myRunner.run(notifier);
    }



    public void pleaseStop() {
      assert myNotifier != null;
      myNotifier.pleaseStop();
    }
  }

  protected static Logger LOG = LogManager.getLogger(AbstractTestExecutor.class);
}
