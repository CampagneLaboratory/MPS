package jetbrains.mps.baseLanguage.unitTest.execution.server;

/*Generated by MPS */

import java.io.FilterOutputStream;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.io.IOException;

public class CompositeOutputStream extends FilterOutputStream {
  private List<FilterOutputStream> myStreams = ListSequence.fromList(new LinkedList<FilterOutputStream>());
  public CompositeOutputStream(FilterOutputStream main, FilterOutputStream... streams) {
    super(main);
    ListSequence.fromList(myStreams).addSequence(Sequence.fromArray(streams));
  }

  public void addOutputStream(FilterOutputStream stream) {
    ListSequence.fromList(myStreams).addElement(stream);
  }

  @Override
  public void write(int i) throws IOException {
    super.write(i);
    for (FilterOutputStream stream : ListSequence.fromList(myStreams)) {
      stream.write(i);
    }
  }

  @Override
  public void write(byte[] array, int i, int i1) throws IOException {
    super.write(array, i, i1);
    for (FilterOutputStream stream : ListSequence.fromList(myStreams)) {
      stream.write(array, i, i1);
    }
  }

  @Override
  public void write(byte[] array) throws IOException {
    super.write(array);
    for (FilterOutputStream stream : ListSequence.fromList(myStreams)) {
      stream.write(array);
    }
  }
}
