package jetbrains.mps.web.core.server;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import com.sun.net.httpserver.HttpServer;
import java.io.File;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;
import java.io.IOException;
import java.io.StringWriter;
import java.io.PrintWriter;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.ProjectManager;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.io.FileNotFoundException;
import com.intellij.ide.plugins.IdeaPluginDescriptor;
import com.intellij.ide.plugins.PluginManager;
import org.apache.log4j.Priority;
import java.net.InetSocketAddress;
import com.intellij.openapi.application.ApplicationManager;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MpsHttpServer implements ApplicationComponent {
  private HttpServer server;
  private File htmlFolder;
  private final Map<String, Handler> handlers = MapSequence.fromMap(new HashMap<String, Handler>());
  private final HttpHandler httpHandler = new HttpHandler() {
    public void handle(HttpExchange exchange) throws IOException {
      String requestMethod = exchange.getRequestMethod();
      if (requestMethod.equalsIgnoreCase("GET")) {
        String uri = exchange.getRequestURI().toString();
        if (LOG.isInfoEnabled()) {
          LOG.info("was given uri: " + uri);
        }
        try {
          if (uri.startsWith("/rest/projects.json")) {
            handleProjectsListRequest(exchange);
          } else if (uri.startsWith("/rest/p/")) {
            handleProjectRequest(uri, exchange);
          } else if ((uri == null || uri.length() == 0) || uri.equals("/")) {
            // redirect on the knee 
            handleStaticRequest("/index.html", exchange);
          } else {
            handleStaticRequest(uri, exchange);
          }
        } catch (Exception e) {
          StringWriter writer = new StringWriter();
          PrintWriter printer = new PrintWriter(writer);
          e.printStackTrace(printer);
          printer.flush();
          HttpUtil.doResponse(writer.toString(), "text/plain", 500, exchange);
        }
      }
    }



    public void handleProjectsListRequest(HttpExchange exchange) {
      String projectsJson = "{ \"projects\": [" + IterableUtils.join(Sequence.fromIterable(Sequence.fromArray(ProjectManager.getInstance().getOpenProjects())).select(new ISelector<Project, String>() {
        public String select(Project it) {
          return String.format("{\"name\" : \"%s\", \"id\" : \"%s\"}", it.getName(), it.getName());
        }
      }), ", ") + "]}";
      HttpUtil.doJsonResponse(projectsJson, exchange);
    }



    public void handleProjectRequest(String rawUri, HttpExchange exchange) throws Exception {
      String uri = rawUri.substring("/rest/p/".length());
      if (!(uri.contains("/"))) {
        HttpUtil.doResponse("uri doesnt't contains \"/\" after project name", "text/plain", 404, exchange);
        return;
      }
      final String projectId = uri.substring(0, uri.indexOf("/"));
      String requestUri = uri.substring(uri.indexOf("/"));

      Project project = Sequence.fromIterable(Sequence.fromArray(ProjectManager.getInstance().getOpenProjects())).findFirst(new IWhereFilter<Project>() {
        public boolean accept(Project it) {
          return it.getName().equals(projectId);
        }
      });
      if (project == null) {
        HttpUtil.doResponse("project " + projectId + " wasn't opened", "text/plain", 404, exchange);
        return;
      }

      for (String prefix : SetSequence.fromSet(MapSequence.fromMap(handlers).keySet())) {
        if (requestUri.startsWith(prefix)) {
          MapSequence.fromMap(handlers).get(prefix).handle(requestUri, project, exchange);
          return;
        }
      }

      HttpUtil.doResponse("project handler doesn't found for request \"" + requestUri + "\" with source uri: " + rawUri, "text/plain", 404, exchange);
    }



    public void handleStaticRequest(String uri, HttpExchange exchange) throws IOException {
      if (uri.contains("..")) {
        HttpUtil.doResponse(uri + " contains prohibited substring \"..\"", "text/plain", 403, exchange);
        return;
      }
      if (htmlFolder == null) {
        throw new FileNotFoundException();
      }

      if (uri.startsWith("/")) {
        uri = uri.substring(1);
      }
      if (uri.contains("?")) {
        uri = uri.substring(0, uri.indexOf("?"));
      }
      exchange.getResponseHeaders().set("Cache-Control", "max-age=300");
      HttpUtil.doResponse(new File(htmlFolder, uri.replace("/", File.separator)), exchange);
    }
  };


  public void initComponent() {
    IdeaPluginDescriptor plugin = PluginManager.getPlugin(PluginManager.getPluginByClassName(MpsHttpServer.this.getClass().getName()));
    if (plugin == null) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("Can not find plugin by class name " + MpsHttpServer.this.getClass().getName());
      }
    } else {
      htmlFolder = new File(plugin.getPath(), "html");
      if (!(htmlFolder.exists())) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Can not return static content: html folder was not found by path " + htmlFolder.getAbsolutePath());
        }
      }
    }

    try {
      server = HttpServer.create(new InetSocketAddress(8080), 0);
      server.createContext("/", httpHandler);
      server.start();
    } catch (IOException e) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("Exception while initializing MpsHttpServer", e);
      }
    }
  }



  public void disposeComponent() {
    if (server != null) {
      server.stop(0);
    }
  }



  public static MpsHttpServer getInstance() {
    return ApplicationManager.getApplication().getComponent(MpsHttpServer.class);
  }



  /**
   * 
   * 
   * @param prefix something like "/nodeId"
   */
  public void registerHandler(String prefix, Handler handler) {
    MapSequence.fromMap(handlers).put(prefix, handler);
  }



  public void unregisterHandler(final Handler handler) {
    List<String> prefixesToRemove = SetSequence.fromSet(MapSequence.fromMap(handlers).keySet()).where(new IWhereFilter<String>() {
      public boolean accept(String it) {
        return MapSequence.fromMap(handlers).get(it) == handler;
      }
    }).toListSequence();
    ListSequence.fromList(prefixesToRemove).visitAll(new IVisitor<String>() {
      public void visit(String it) {
        MapSequence.fromMap(handlers).removeKey(it);
      }
    });
  }



  @NonNls
  @NotNull
  public String getComponentName() {
    return MpsHttpServer.class.getName();
  }

  protected static Logger LOG = LogManager.getLogger(MpsHttpServer.class);
}
