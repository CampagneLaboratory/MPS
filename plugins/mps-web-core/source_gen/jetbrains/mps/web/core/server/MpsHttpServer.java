package jetbrains.mps.web.core.server;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import com.sun.net.httpserver.HttpServer;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;
import java.io.IOException;
import java.net.InetSocketAddress;
import org.apache.log4j.Priority;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MpsHttpServer implements ApplicationComponent {
  private HttpServer server;
  private final Map<String, Handler> handlers = MapSequence.fromMap(new HashMap<String, Handler>());
  private final HttpHandler httpHandler = new HttpHandler() {
    public void handle(HttpExchange exchange) throws IOException {
    }
  };


  public void initComponent() {
    try {
      server = HttpServer.create(new InetSocketAddress(80), 0);
      server.createContext("/", httpHandler);
      server.start();
    } catch (IOException e) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("Exception while initializing MpsHttpServer", e);
      }
    }
  }



  public void disposeComponent() {
    if (server != null) {
      server.stop(0);
    }
  }



  public void registerHandler(String prefix, Handler handler) {
    MapSequence.fromMap(handlers).put(prefix, handler);
  }



  public void unregisterHandler(final Handler handler) {
    List<String> prefixesToRemove = SetSequence.fromSet(MapSequence.fromMap(handlers).keySet()).where(new IWhereFilter<String>() {
      public boolean accept(String it) {
        return MapSequence.fromMap(handlers).get(it) == handler;
      }
    }).toListSequence();
    ListSequence.fromList(prefixesToRemove).visitAll(new IVisitor<String>() {
      public void visit(String it) {
        MapSequence.fromMap(handlers).removeKey(it);
      }
    });
  }



  @NonNls
  @NotNull
  public String getComponentName() {
    return MpsHttpServer.class.getName();
  }

  protected static Logger LOG = LogManager.getLogger(MpsHttpServer.class);
}
