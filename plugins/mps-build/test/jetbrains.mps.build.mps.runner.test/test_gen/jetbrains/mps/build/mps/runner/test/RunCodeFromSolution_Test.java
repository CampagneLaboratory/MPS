package jetbrains.mps.build.mps.runner.test;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import junit.framework.Assert;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.ant.execution.Ant_Command;
import com.intellij.execution.ExecutionException;
import jetbrains.mps.execution.api.commands.OutputRedirector;
import com.intellij.execution.process.ProcessAdapter;
import com.intellij.execution.process.ProcessEvent;
import com.intellij.openapi.util.Key;
import com.intellij.execution.process.ProcessOutputTypes;
import jetbrains.mps.execution.api.commands.ProcessHandlerBuilder;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.build.behavior.BuildProject_Behavior;
import jetbrains.mps.build.util.Context;

@MPSLaunch
public class RunCodeFromSolution_Test extends BaseTransformationTest {
  @Test
  public void test_runBuildSimpleCode() throws Throwable {
    this.initTest("${mps_home}", "r:cced89f7-d5c2-463a-b754-a486d525dd67(jetbrains.mps.build.mps.runner.test@tests)", false);
    this.runTest("jetbrains.mps.build.mps.runner.test.RunCodeFromSolution_Test$TestBody", "test_runBuildSimpleCode", true);
  }
  @Test
  public void test_callOtherSolution() throws Throwable {
    this.initTest("${mps_home}", "r:cced89f7-d5c2-463a-b754-a486d525dd67(jetbrains.mps.build.mps.runner.test@tests)", false);
    this.runTest("jetbrains.mps.build.mps.runner.test.RunCodeFromSolution_Test$TestBody", "test_callOtherSolution", true);
  }
  @Test
  public void test_useIFile() throws Throwable {
    this.initTest("${mps_home}", "r:cced89f7-d5c2-463a-b754-a486d525dd67(jetbrains.mps.build.mps.runner.test@tests)", false);
    this.runTest("jetbrains.mps.build.mps.runner.test.RunCodeFromSolution_Test$TestBody", "test_useIFile", true);
  }
  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_runBuildSimpleCode() throws Exception {
      IFile f = FileSystem.getInstance().getFileByPath(".");
      System.out.println("current directory is #" + f.getPath() + "#");
      this.runAndCheck("../plugins/mps-build/test/test1.xml");
    }
    public void test_callOtherSolution() throws Exception {
      this.runAndCheck("../plugins/mps-build/test/test2.xml");
    }
    public void test_useIFile() throws Exception {
      this.runAndCheck("../plugins/mps-build/test/test3.xml");
    }
    public void runAndCheck(String scriptPath) {
      IFile scriptFile = FileSystem.getInstance().getFileByPath(scriptPath);
      IFile scriptDir = scriptFile.getParent();

      assert scriptDir != null;
      assert scriptFile != null;

      // remove ok.log file if any 
      IFile okFile = scriptDir.getDescendant("ok.log");
      if (okFile.exists() && !(okFile.delete())) {
        Assert.fail("Cannot delete " + okFile.getPath());
      }

      ProcessHandler process = null;
      try {
        process = new Ant_Command().createProcess(scriptFile.getPath());
      } catch (ExecutionException ex) {
        ex.printStackTrace();
        Assert.fail("Exception during execution.");
      }
      OutputRedirector.redirect(process, new ProcessAdapter() {
        @Override
        public void onTextAvailable(ProcessEvent event, Key key) {
          if (ProcessOutputTypes.STDERR.equals(key)) {
            // print errors 
            System.err.print(event.getText());
          } else {
            System.out.print(event.getText());
          }
        }
      });
      int exitCode = ProcessHandlerBuilder.startAndWait(process);
      if (exitCode != 0) {
        Assert.fail("Exit with code " + exitCode);
      }

      // check and delete ok.log file 
      FileSystem.getInstance().refresh(okFile);
      if (!(okFile.exists())) {
        Assert.fail("Test failed.");
      }
      okFile.delete();
    }
    public void runAndCheck(SNode buildScript) {
      String scriptPath = BuildProject_Behavior.call_getScriptsPath_4796668409958419284(buildScript, Context.defaultContext());
      if (scriptPath == null) {
        Assert.fail("Cannot find build script location");
      }
      scriptPath = scriptPath + "/" + BuildProject_Behavior.call_getOutputFileName_4915877860351551360(buildScript);
      this.runAndCheck(scriptPath);
    }
  }
}
