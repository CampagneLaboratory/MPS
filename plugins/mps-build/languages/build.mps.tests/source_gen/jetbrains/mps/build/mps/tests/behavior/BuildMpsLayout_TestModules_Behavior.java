package jetbrains.mps.build.mps.tests.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.build.util.VisibleArtifacts;
import jetbrains.mps.build.util.RequiredDependenciesBuilder;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.build.mps.tests.util.ModulePlugins;
import jetbrains.mps.build.mps.util.MPSModulesClosure;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.build.util.DependenciesHelper;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class BuildMpsLayout_TestModules_Behavior {
  public static void init(SNode thisNode) {
  }
  public static boolean call_hasModule_4560297596904469365(SNode thisNode, final SNode module) {
    return ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(3891333323013573211l, -7392620776726838882l), 4560297596904469357l, 4560297596904469360l, "modules"))).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return BehaviorReflection.invokeVirtual(Boolean.TYPE, it, "virtual_contains_4560297596904469640", new Object[]{module});
      }
    }) != null;
  }
  public static void virtual_fetchDependencies_5908258303322131137(SNode thisNode, VisibleArtifacts artifacts, RequiredDependenciesBuilder builder) {
    SNode project = artifacts.getProject();
    TemplateQueryContext genContext = artifacts.getGenContext();

    // fetch required plugins 
    // we may want to have an option about that? 
    // like load plugins: = all (default) | none | <list of plugins> 
    ModulePlugins plugins = new ModulePlugins(project, genContext);
    plugins.collect(new MPSModulesClosure(ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(3891333323013573211l, -7392620776726838882l), 4560297596904469357l, 4560297596904469360l, "modules"))).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), it, "virtual_getModules_4560297596904469651", new Object[]{});
      }
    })).trackDevkits().runtimeClosure());
    for (SNode plugin : Sequence.fromIterable(plugins.getDependency())) {
      SNode pluginArtifact;
      if (SNodeOperations.getContainingRoot(thisNode) != SNodeOperations.getContainingRoot(plugin)) {
        pluginArtifact = SNodeOperations.as(artifacts.findArtifact(plugin), "jetbrains.mps.build.structure.BuildLayout_Node");
      } else {
        pluginArtifact = SNodeOperations.as(artifacts.findArtifact(artifacts.toOriginalNode(plugin)), "jetbrains.mps.build.structure.BuildLayout_Node");
      }
      if (pluginArtifact != null) {
        builder.add(pluginArtifact, plugin);
      }
    }

    // fetch modules 
    Iterable<SNode> originalModules = ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(3891333323013573211l, -7392620776726838882l), 4560297596904469357l, 4560297596904469360l, "modules"))).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), it, "virtual_getModules_4560297596904469651", new Object[]{});
      }
    });
    Iterable<SNode> modules = Sequence.fromIterable(new MPSModulesClosure(originalModules).trackDevkits().designtimeClosure().getAllModules()).union(Sequence.fromIterable(originalModules));
    for (SNode m : Sequence.fromIterable(modules)) {
      SNode artifact;
      SNode originalModule = DependenciesHelper.getOriginalNode(m, genContext);
      VisibleArtifacts currentArtifacts = artifacts;
      artifact = SNodeOperations.as(currentArtifacts.findArtifact(originalModule), "jetbrains.mps.build.structure.BuildLayout_Node");
      if (artifact != null) {
        builder.add(SNodeOperations.as(DependenciesHelper.getOriginalNode(artifact, genContext), "jetbrains.mps.build.structure.BuildLayout_Node"), originalModule);
      } else if (SNodeOperations.isInstanceOf(originalModule, "jetbrains.mps.build.mps.structure.BuildMps_DevKit")) {
        artifact = SNodeOperations.as(currentArtifacts.findArtifact(SLinkOperations.getTarget(SNodeOperations.cast(originalModule, "jetbrains.mps.build.mps.structure.BuildMps_DevKit"), MetaAdapterFactory.getContainmentLink(new UUID(934837630734519964l, -6831122735637083229l), 322010710375871467l, 322010710375956261l, "path"))), "jetbrains.mps.build.structure.BuildLayout_Node");
        if (artifact != null) {
          builder.add(SNodeOperations.as(DependenciesHelper.getOriginalNode(artifact, genContext), "jetbrains.mps.build.structure.BuildLayout_Node"), originalModule);
        }
      }
    }
  }
  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, SNode child) {
    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.build.mps.structure.BuildMps_AbstractModule") || SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.build.mps.structure.BuildMps_Group")) {
      SNode project = SNodeOperations.cast(SNodeOperations.getContainingRoot(thisNode), "jetbrains.mps.build.structure.BuildProject");
      if (project != null) {
        return BehaviorReflection.invokeVirtual(Scope.class, project, "virtual_getScope_7722139651431880752", new Object[]{kind, "parts", 0});
      }
    }
    return null;
  }
}
