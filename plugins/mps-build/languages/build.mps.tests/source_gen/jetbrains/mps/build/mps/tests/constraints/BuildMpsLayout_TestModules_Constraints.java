package jetbrains.mps.build.mps.tests.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;

public class BuildMpsLayout_TestModules_Constraints extends BaseConstraintsDescriptor {
  public BuildMpsLayout_TestModules_Constraints() {
    super("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules");
  }

  @Override
  public boolean hasOwnCanBeChildMethod() {
    return true;
  }

  @Override
  public boolean canBeChild(@Nullable SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext, @Nullable final CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAChild(node, parentNode, link, childConcept, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
    }

    return result;
  }

  public static boolean static_canBeAChild(SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.build.structure.BuildProject") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(parentNode, "jetbrains.mps.build.structure.BuildProject"), "plugins", true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.mps.tests.structure.BuildModuleTestsPlugin");
      }
    }) || parentNode.getConcept().getQualifiedName().startsWith("jetbrains.mps.lang.generator");
    /*
      Scope scope = Scope.getScope(SNodeOperations.getAncestor(parentNode, "jetbrains.mps.build.structure.BuildProject", true, false), "dependencies", 0, SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildProject"));
      if (scope == null) {
        return false;
      }
      Iterable<SNode> seq = Sequence.fromIterable(scope.getAvailableElements("mps")).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return "mps".equals(check_e4054c_a0a0a0a0a2b0a(SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildProject")));
        }
      });
      for (SNode snode : Sequence.fromIterable(seq)) {
        System.err.println(snode);
      }
      Sequence.fromIterable(seq).isNotEmpty();
    */
  }

  private static String check_e4054c_a0a0a0a0a2b0a(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return SPropertyOperations.getString(checkedDotOperand, "name");
    }
    return null;
  }

  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:09cf4c23-1b4d-4723-ac0b-a240d2fdcc67(jetbrains.mps.build.mps.tests.constraints)", "3655813416643587820");
}
