package jetbrains.mps.build.mps.tests.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.util.containers.ConcurrentHashSet;
import jetbrains.mps.build.util.GenerationUtil;
import jetbrains.mps.build.mps.util.MPSModulesClosure;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.build.mps.util.RequiredPlugins;

public class ModulePlugins {
  private static final String KEY = "modulePluginDependency";
  private final TemplateQueryContext myContext;
  private final SNode myInitialProject;
  private final ConcurrentHashSet<SNode> myDependency;
  public ModulePlugins(SNode initialProject, TemplateQueryContext context) {
    myContext = context;
    myInitialProject = initialProject;
    myDependency = GenerationUtil.<SNode>getSessionSet(initialProject, context, ModulePlugins.KEY);
  }
  public void collect(MPSModulesClosure closure) {
    List<SNode> initialPlugins = ListSequence.fromList(new ArrayList<SNode>());
    for (final SNode module : Sequence.fromIterable(closure.getAllModules())) {
      List<SNode> projectPlugins = SNodeOperations.getDescendants(SNodeOperations.cast(SNodeOperations.getContainingRoot(module), "jetbrains.mps.build.structure.BuildProject"), "jetbrains.mps.build.mps.structure.BuildMps_IdeaPlugin", false, new String[]{});
      for (SNode plugin : ListSequence.fromList(projectPlugins)) {
        if (ListSequence.fromList(SLinkOperations.getChildren(plugin, MetaAdapterFactory.getContainmentLink(new UUID(934837630734519964l, -6831122735637083229l), 6592112598314498932l, 6592112598314499050l, "content"))).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return BehaviorReflection.invokeVirtual(Boolean.TYPE, it, "virtual_exports_6547494638219603457", new Object[]{module});
          }
        }) != null) {
          ListSequence.fromList(initialPlugins).addElement(plugin);
          break;
        }
      }
    }

    myDependency.addAll(initialPlugins);

    RequiredPlugins requiredPlugins = new RequiredPlugins(myContext, myInitialProject, initialPlugins);
    for (SNode plugin : Sequence.fromIterable(requiredPlugins.returnDependencies())) {
      myDependency.add(plugin);
    }
  }
  public Iterable<SNode> getDependency() {
    return myDependency;
  }
}
