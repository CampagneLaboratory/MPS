package jetbrains.mps.build.mps.tests.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBuildModuleTestsPlugin = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.tests.structure.BuildModuleTestsPlugin").super_("jetbrains.mps.build.structure.BuildPlugin").parents("jetbrains.mps.build.structure.BuildPlugin", "jetbrains.mps.build.structure.BuildExternalDependency").alias("module-testing", "adds ability to execute module tests to the project").create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_TestModule = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModule").super_("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules_Content").parents("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules_Content").references("module").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_TestModuleGroup = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModuleGroup").super_("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules_Content").parents("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules_Content").references("group").create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_TestModules = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules").super_("jetbrains.mps.build.structure.BuildAspect").parents("jetbrains.mps.build.structure.BuildAspect", "jetbrains.mps.build.structure.BuildExternalDependency", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"haltonfailure", "modules"}, new boolean[]{false, true}).alias("test modules", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_TestModules_Content = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules_Content").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBuildModuleTestsPlugin, myConceptBuildMpsLayout_TestModule, myConceptBuildMpsLayout_TestModuleGroup, myConceptBuildMpsLayout_TestModules, myConceptBuildMpsLayout_TestModules_Content);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0i, conceptFqName)) {
      case 0:
        return myConceptBuildModuleTestsPlugin;
      case 1:
        return myConceptBuildMpsLayout_TestModule;
      case 2:
        return myConceptBuildMpsLayout_TestModuleGroup;
      case 3:
        return myConceptBuildMpsLayout_TestModules;
      case 4:
        return myConceptBuildMpsLayout_TestModules_Content;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0i = new String[]{"jetbrains.mps.build.mps.tests.structure.BuildModuleTestsPlugin", "jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModule", "jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModuleGroup", "jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules", "jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules_Content"};
}
