package jetbrains.mps.build.mps.util;

/*Generated by MPS */

import jetbrains.mps.build.util.VisibleArtifacts;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Stack;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IterableUtils;

public class ArtifactsRelativePathHelper {
  private VisibleArtifacts artifacts;
  private Map<SNode, String> prefixes = MapSequence.fromMap(new HashMap<SNode, String>());
  public ArtifactsRelativePathHelper(VisibleArtifacts output, SNode anchor) {
    this.artifacts = output;

    final Wrappers._T<SNode> parent = new Wrappers._T<SNode>(output.parent(anchor));
    StringBuilder sb = new StringBuilder();
    while (parent.value != null) {
      MapSequence.fromMap(prefixes).put(parent.value, sb.toString());
      if (SNodeOperations.isInstanceOf(parent.value, "jetbrains.mps.build.structure.BuildLayout_Folder")) {
        for (SNode sfolder : ListSequence.fromList(SNodeOperations.getAllSiblings(parent.value, false)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildLayout_Folder") && it != parent.value && equalFolders(SNodeOperations.cast(parent.value, "jetbrains.mps.build.structure.BuildLayout_Folder"), SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildLayout_Folder"));
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildLayout_Folder");
          }
        })) {
          MapSequence.fromMap(prefixes).put(sfolder, sb.toString());
        }
      }
      parent.value = output.parent(parent.value);
      sb.append("../");
    }
  }
  public String getRelativePath(SNode node) throws ArtifactsRelativePathHelper.RelativePathException {
    Stack<SNode> names = new Stack<SNode>();
    names.push(node);
    SNode parent = artifacts.parent(node);
    while (parent != null) {
      if (MapSequence.fromMap(prefixes).containsKey(parent)) {
        break;
      }
      names.push(parent);
      parent = artifacts.parent(parent);
    }
    if (parent == null) {
      throw new ArtifactsRelativePathHelper.RelativePathException("no common folder");
    }
    StringBuilder result = new StringBuilder(MapSequence.fromMap(prefixes).get(parent));
    while (!(names.isEmpty())) {
      SNode elem = names.pop();
      boolean lastElement = names.isEmpty();
      if (SNodeOperations.isInstanceOf(elem, "jetbrains.mps.build.structure.BuildLayout_TransparentContainer")) {
        continue;
      }
      result.append(getNodeName(elem, lastElement));
      if (!(lastElement)) {
        result.append("/");
      }
    }
    return result.toString();
  }
  private String getNodeName(SNode node, boolean isLast) throws ArtifactsRelativePathHelper.RelativePathException {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.build.structure.BuildLayout_Folder")) {
      return getBSName(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.build.structure.BuildLayout_Folder"), MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 7389400916848050060l, 4380385936562148502l, "containerName")));
    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.build.structure.BuildLayout_Copy") && isLast) {
      SNode fileset = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.build.structure.BuildLayout_Copy"), MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 9184644532456496017l, 5248329904287857082l, "fileset"));
      if (SNodeOperations.isInstanceOf(fileset, "jetbrains.mps.build.structure.BuildInputSingleFile")) {
        return BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(SNodeOperations.cast(fileset, "jetbrains.mps.build.structure.BuildInputSingleFile"), MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 5248329904287794582l, 5248329904287794586l, "path")), "virtual_getLastSegment_1368030936106771141", new Object[]{null});
      } else {
        throw new ArtifactsRelativePathHelper.RelativePathException("cannot build relative path for copy, fileset is " + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(node), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")));
      }
    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.build.structure.BuildLayout_File") && isLast) {
      return BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.build.structure.BuildLayout_File"), MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 9126048691955220717l, 9126048691955220762l, "path")), "virtual_getLastSegment_1368030936106771141", new Object[]{null});
    }
    throw new ArtifactsRelativePathHelper.RelativePathException("cannot build relative path for " + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(node), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")));
  }
  private String getBSName(SNode string) throws ArtifactsRelativePathHelper.RelativePathException {
    if (ListSequence.fromList(SLinkOperations.getChildren(string, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 4380385936562003279l, 4903714810883783243l, "parts"))).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildTextStringPart"));
      }
    })) {
      throw new ArtifactsRelativePathHelper.RelativePathException("macros are not allowed");
    }
    return IterableUtils.join(ListSequence.fromList(SLinkOperations.getChildren(string, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 4380385936562003279l, 4903714810883783243l, "parts"))).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildTextStringPart"), MetaAdapterFactory.getProperty(new UUID(8755280088213897754l, -5075149991798053422l), 4903714810883702019l, 4903714810883755350l, "text"));
      }
    }), " ");
  }
  private boolean equalFolders(SNode left, SNode right) {
    if (SNodeOperations.getParent(left) != SNodeOperations.getParent(right)) {
      return false;
    }
    if (ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(left, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 7389400916848050060l, 4380385936562148502l, "containerName")), MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 4380385936562003279l, 4903714810883783243l, "parts"))).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildTextStringPart");
      }
    }) && ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(right, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 7389400916848050060l, 4380385936562148502l, "containerName")), MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 4380385936562003279l, 4903714810883783243l, "parts"))).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildTextStringPart");
      }
    })) {
      return eq_fa9ylc_a0a0b0g(SPropertyOperations.getString(left, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")), SPropertyOperations.getString(right, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")));
    }
    return false;
  }
  public static class RelativePathException extends Exception {
    public RelativePathException(String p0) {
      super(p0);
    }
  }
  private static boolean eq_fa9ylc_a0a0b0g(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
