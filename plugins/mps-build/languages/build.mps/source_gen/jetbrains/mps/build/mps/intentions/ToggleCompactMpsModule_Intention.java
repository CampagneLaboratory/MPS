package jetbrains.mps.build.mps.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ToggleCompactMpsModule_Intention extends BaseIntention {
  public ToggleCompactMpsModule_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.build.mps.structure.BuildMps_AbstractModule";
  }

  public String getPresentation() {
    return "ToggleCompactMpsModule";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.build.mps.intentions.ToggleCompactMpsModule_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:e8fca550-89ba-41bb-ae28-dc9cae640a8a(jetbrains.mps.build.mps.intentions)", "8369506495128778230");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return (SPropertyOperations.getBoolean(node, "compact") ?
      "Unfold " + SPropertyOperations.getString(node, "name") :
      "Fold " + SPropertyOperations.getString(node, "name")
    );
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SPropertyOperations.set(node, "compact", "" + (!(SPropertyOperations.getBoolean(node, "compact"))));
  }
}
