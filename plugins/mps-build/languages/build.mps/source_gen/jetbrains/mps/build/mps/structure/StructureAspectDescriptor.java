package jetbrains.mps.build.mps.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBuildLayout_ToBinaryCopyProcessor = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildLayout_ToBinaryCopyProcessor").super_("jetbrains.mps.build.structure.BuildLayout_CopyProcessor").parents("jetbrains.mps.build.structure.BuildLayout_CopyProcessor").properties("stripImplementation").alias("convert *.mps into *.mpb (binary format)", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMPSPlugin = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMPSPlugin").super_("jetbrains.mps.build.structure.BuildPlugin").parents("jetbrains.mps.build.structure.BuildPlugin", "jetbrains.mps.build.structure.BuildExternalDependency").alias("mps", "adds MPS capabilities (packaging, generation) to the project").create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsAspect = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMpsAspect").super_("jetbrains.mps.build.structure.BuildAspect").parents("jetbrains.mps.build.structure.BuildAspect").properties("bootstrap", "testGeneration", "excludes", "generationMaxHeapSizeInMb", "generationMaxPermSizeInMb").alias("mps settings", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_FolderWithSources = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMpsLayout_FolderWithSources").super_("jetbrains.mps.build.mps.structure.BuildMpsLayout_ModuleSources").parents("jetbrains.mps.build.mps.structure.BuildMpsLayout_ModuleSources", "jetbrains.mps.build.structure.BuildLayout_InJarNode").alias("folder with sources of", "MPS module").create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_ModuleJars = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMpsLayout_ModuleJars").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node").properties("stripImplementation").references("module").children(new String[]{"jarLocations"}, new boolean[]{true}).alias("module", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_ModuleSources = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMpsLayout_ModuleSources").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node", "jetbrains.mps.build.structure.BuildLayout_InJarNode").properties("modelsOnly", "stripImplementation").references("module").alias("sources of", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_ModuleXml = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMpsLayout_ModuleXml").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node").references("module").children(new String[]{"jarLocations"}, new boolean[]{true}).alias("module descriptor of", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_ModuleXml_CustomJarLocation = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMpsLayout_ModuleXml_CustomJarLocation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("packagedLocation").children(new String[]{"path"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_Plugin = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMpsLayout_Plugin").super_("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").parents("jetbrains.mps.build.structure.BuildLayout_AbstractContainer", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.build.structure.BuildSource_SingleFolder").properties("stripImplementation").references("plugin").alias("plugin", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_PluginDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMpsLayout_PluginDescriptor").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node").references("plugin").alias("plugin descriptor of", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_AbstractModule = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_AbstractModule").super_("jetbrains.mps.build.structure.BuildProjectPart").parents("jetbrains.mps.build.structure.BuildProjectPart", "jetbrains.mps.lang.core.structure.INamedConcept").properties("uuid", "compact").children(new String[]{"path"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_Branding = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_Branding").super_("jetbrains.mps.build.structure.BuildProjectPart").parents("jetbrains.mps.build.structure.BuildProjectPart", "jetbrains.mps.build.structure.BuildSource_FilesetProjectPart").properties("major", "minor", "eap").children(new String[]{"splashScreen", "aboutScreen", "company", "buildNumber", "buildDate", "icon32", "icon16", "icon32opaque", "icon128", "welcomeCaption", "welcomeSlogan", "welcomeLogo", "dialogImage", "updateWebsite", "plugins", "shortName", "fullName", "codename", "whatsnew", "help", "stats", "feedbackUrl", "textColor"}, new boolean[]{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}).alias("idea branding", "name, version and images of your custom IDE").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_BrandingCompany = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_BrandingCompany").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"name", "url"}, new boolean[]{false, false}).alias("company information", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_BrandingHelp = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_BrandingHelp").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"url", "root", "file"}, new boolean[]{false, false, false}).alias("help", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_BrandingStats = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_BrandingStats").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"settings", "service"}, new boolean[]{false, false}).alias("statistics service", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_BrandingUpdateSite = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_BrandingUpdateSite").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"checkUrl", "updateUrl", "updateChannel"}, new boolean[]{false, false, false}).alias("update website", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_DevKit = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_DevKit").super_("jetbrains.mps.build.mps.structure.BuildMps_AbstractModule").parents("jetbrains.mps.build.mps.structure.BuildMps_AbstractModule").children(new String[]{"extends", "exports"}, new boolean[]{true, true}).alias("devkit", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_DevKitExport = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_DevKitExport").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_DevKitExportLanguage = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage").super_("jetbrains.mps.build.mps.structure.BuildMps_DevKitExport").parents("jetbrains.mps.build.mps.structure.BuildMps_DevKitExport").references("language").alias("language <{language}>", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_DevKitExportSolution = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution").super_("jetbrains.mps.build.mps.structure.BuildMps_DevKitExport").parents("jetbrains.mps.build.mps.structure.BuildMps_DevKitExport").references("solution").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_DevKitRef = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_DevKitRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("devkit").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ExtractedModuleDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency").super_("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").parents("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").children(new String[]{"dependency"}, new boolean[]{false}).alias("(extracted)", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_Generator = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_Generator").super_("jetbrains.mps.build.mps.structure.BuildMps_Module").parents("jetbrains.mps.build.mps.structure.BuildMps_Module", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("sourceLanguage").alias("generator", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_GeneratorOptions = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_GeneratorOptions").super_("jetbrains.mps.build.structure.BuildProjectPart").parents("jetbrains.mps.build.structure.BuildProjectPart", "jetbrains.mps.lang.core.structure.INamedConcept").properties("strict", "parallel", "parallelThreads", "inplace", "hideWarnings").alias("generator options", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_Group = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_Group").super_("jetbrains.mps.build.structure.BuildProjectPart").parents("jetbrains.mps.build.structure.BuildProjectPart", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"modules"}, new boolean[]{true}).alias("mps group", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_IdeaPlugin = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_IdeaPlugin").super_("jetbrains.mps.build.structure.BuildProjectPart").parents("jetbrains.mps.build.structure.BuildProjectPart", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.build.structure.BuildStringContainer").properties("id").children(new String[]{"name", "description", "containerName", "version", "content", "dependencies", "pluginXml", "vendor", "xml"}, new boolean[]{false, false, false, false, true, true, false, false, true}).alias("idea plugin", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_IdeaPluginContent = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginContent").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_IdeaPluginDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("target").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_IdeaPluginGroup = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginGroup").super_("jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginContent").parents("jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginContent").references("group").children(new String[]{"customPackaging"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_IdeaPluginGroupCustomModule = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginGroupCustomModule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("target").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_IdeaPluginModule = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginModule").super_("jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginContent").parents("jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginContent").properties("customPackaging").references("target").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_IdeaPluginVendor = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginVendor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("url", "name").children(new String[]{"icon16"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_Language = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_Language").super_("jetbrains.mps.build.mps.structure.BuildMps_Module").parents("jetbrains.mps.build.mps.structure.BuildMps_Module").children(new String[]{"runtime", "generator"}, new boolean[]{true, false}).alias("language", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_Module = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_Module").super_("jetbrains.mps.build.mps.structure.BuildMps_AbstractModule").parents("jetbrains.mps.build.mps.structure.BuildMps_AbstractModule", "jetbrains.mps.build.structure.BuildSource_CompilablePart", "jetbrains.mps.build.structure.BuildExternalDependency").properties("doNotCompile").children(new String[]{"sources", "dependencies"}, new boolean[]{true, true}).abstract_().alias("module", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleDependencyExtendLanguage = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage").super_("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").parents("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").references("language").alias("extends <{language}>", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleDependencyJar = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar").super_("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").parents("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").children(new String[]{"path", "customLocation"}, new boolean[]{false, false}).alias("jar", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleDependencyOnDevKit = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnDevKit").super_("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").parents("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").references("devkit").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleDependencyOnJavaModule = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule").super_("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").parents("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").properties("reexport").references("module").alias("<{module}>", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleDependencyOnModule = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule").super_("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").parents("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").properties("reexport").references("module").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleDependencyUseLanguage = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage").super_("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").parents("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency").references("language").alias("use <{language}>", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleJarRuntime = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleJarRuntime").super_("jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime").parents("jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime").children(new String[]{"path", "customLocation"}, new boolean[]{false, false}).alias("jar", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleJavaSource = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleJavaSource").super_("jetbrains.mps.build.mps.structure.BuildMps_ModuleSource").parents("jetbrains.mps.build.mps.structure.BuildMps_ModuleSource", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("isGenerated").children(new String[]{"folder"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleModelRoot = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleModelRoot").super_("jetbrains.mps.build.mps.structure.BuildMps_ModuleSource").parents("jetbrains.mps.build.mps.structure.BuildMps_ModuleSource").children(new String[]{"folder"}, new boolean[]{false}).alias("model root", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleRuntime = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleSolutionRuntime = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime").super_("jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime").parents("jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime").references("solution").alias("solution <{solution}>", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleSource = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleSource").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_ModuleTestSource = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_ModuleTestSource").super_("jetbrains.mps.build.mps.structure.BuildMps_ModuleSource").parents("jetbrains.mps.build.mps.structure.BuildMps_ModuleSource", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("isGenerated").children(new String[]{"folder"}, new boolean[]{false}).alias("test source", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMps_Solution = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.BuildMps_Solution").super_("jetbrains.mps.build.mps.structure.BuildMps_Module").parents("jetbrains.mps.build.mps.structure.BuildMps_Module").properties("sourcesKind").alias("solution", "").create();
  /*package*/ final ConceptDescriptor myConceptGeneratorInternal_BuildMps_Module = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.GeneratorInternal_BuildMps_Module").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("targetModule").create();
  /*package*/ final ConceptDescriptor myConceptGeneratorInternal_BuildSourcePath = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.GeneratorInternal_BuildSourcePath").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("targetPath").create();
  /*package*/ final ConceptDescriptor myConceptGeneratorInternal_String = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.structure.GeneratorInternal_String").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("path").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBuildLayout_ToBinaryCopyProcessor, myConceptBuildMPSPlugin, myConceptBuildMpsAspect, myConceptBuildMpsLayout_FolderWithSources, myConceptBuildMpsLayout_ModuleJars, myConceptBuildMpsLayout_ModuleSources, myConceptBuildMpsLayout_ModuleXml, myConceptBuildMpsLayout_ModuleXml_CustomJarLocation, myConceptBuildMpsLayout_Plugin, myConceptBuildMpsLayout_PluginDescriptor, myConceptBuildMps_AbstractModule, myConceptBuildMps_Branding, myConceptBuildMps_BrandingCompany, myConceptBuildMps_BrandingHelp, myConceptBuildMps_BrandingStats, myConceptBuildMps_BrandingUpdateSite, myConceptBuildMps_DevKit, myConceptBuildMps_DevKitExport, myConceptBuildMps_DevKitExportLanguage, myConceptBuildMps_DevKitExportSolution, myConceptBuildMps_DevKitRef, myConceptBuildMps_ExtractedModuleDependency, myConceptBuildMps_Generator, myConceptBuildMps_GeneratorOptions, myConceptBuildMps_Group, myConceptBuildMps_IdeaPlugin, myConceptBuildMps_IdeaPluginContent, myConceptBuildMps_IdeaPluginDependency, myConceptBuildMps_IdeaPluginGroup, myConceptBuildMps_IdeaPluginGroupCustomModule, myConceptBuildMps_IdeaPluginModule, myConceptBuildMps_IdeaPluginVendor, myConceptBuildMps_Language, myConceptBuildMps_Module, myConceptBuildMps_ModuleDependency, myConceptBuildMps_ModuleDependencyExtendLanguage, myConceptBuildMps_ModuleDependencyJar, myConceptBuildMps_ModuleDependencyOnDevKit, myConceptBuildMps_ModuleDependencyOnJavaModule, myConceptBuildMps_ModuleDependencyOnModule, myConceptBuildMps_ModuleDependencyUseLanguage, myConceptBuildMps_ModuleJarRuntime, myConceptBuildMps_ModuleJavaSource, myConceptBuildMps_ModuleModelRoot, myConceptBuildMps_ModuleRuntime, myConceptBuildMps_ModuleSolutionRuntime, myConceptBuildMps_ModuleSource, myConceptBuildMps_ModuleTestSource, myConceptBuildMps_Solution, myConceptGeneratorInternal_BuildMps_Module, myConceptGeneratorInternal_BuildSourcePath, myConceptGeneratorInternal_String);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0dc, conceptFqName)) {
      case 0:
        return myConceptBuildLayout_ToBinaryCopyProcessor;
      case 1:
        return myConceptBuildMPSPlugin;
      case 2:
        return myConceptBuildMpsAspect;
      case 3:
        return myConceptBuildMpsLayout_FolderWithSources;
      case 4:
        return myConceptBuildMpsLayout_ModuleJars;
      case 5:
        return myConceptBuildMpsLayout_ModuleSources;
      case 6:
        return myConceptBuildMpsLayout_ModuleXml;
      case 7:
        return myConceptBuildMpsLayout_ModuleXml_CustomJarLocation;
      case 8:
        return myConceptBuildMpsLayout_Plugin;
      case 9:
        return myConceptBuildMpsLayout_PluginDescriptor;
      case 10:
        return myConceptBuildMps_AbstractModule;
      case 11:
        return myConceptBuildMps_Branding;
      case 12:
        return myConceptBuildMps_BrandingCompany;
      case 13:
        return myConceptBuildMps_BrandingHelp;
      case 14:
        return myConceptBuildMps_BrandingStats;
      case 15:
        return myConceptBuildMps_BrandingUpdateSite;
      case 16:
        return myConceptBuildMps_DevKit;
      case 17:
        return myConceptBuildMps_DevKitExport;
      case 18:
        return myConceptBuildMps_DevKitExportLanguage;
      case 19:
        return myConceptBuildMps_DevKitExportSolution;
      case 20:
        return myConceptBuildMps_DevKitRef;
      case 21:
        return myConceptBuildMps_ExtractedModuleDependency;
      case 22:
        return myConceptBuildMps_Generator;
      case 23:
        return myConceptBuildMps_GeneratorOptions;
      case 24:
        return myConceptBuildMps_Group;
      case 25:
        return myConceptBuildMps_IdeaPlugin;
      case 26:
        return myConceptBuildMps_IdeaPluginContent;
      case 27:
        return myConceptBuildMps_IdeaPluginDependency;
      case 28:
        return myConceptBuildMps_IdeaPluginGroup;
      case 29:
        return myConceptBuildMps_IdeaPluginGroupCustomModule;
      case 30:
        return myConceptBuildMps_IdeaPluginModule;
      case 31:
        return myConceptBuildMps_IdeaPluginVendor;
      case 32:
        return myConceptBuildMps_Language;
      case 33:
        return myConceptBuildMps_Module;
      case 34:
        return myConceptBuildMps_ModuleDependency;
      case 35:
        return myConceptBuildMps_ModuleDependencyExtendLanguage;
      case 36:
        return myConceptBuildMps_ModuleDependencyJar;
      case 37:
        return myConceptBuildMps_ModuleDependencyOnDevKit;
      case 38:
        return myConceptBuildMps_ModuleDependencyOnJavaModule;
      case 39:
        return myConceptBuildMps_ModuleDependencyOnModule;
      case 40:
        return myConceptBuildMps_ModuleDependencyUseLanguage;
      case 41:
        return myConceptBuildMps_ModuleJarRuntime;
      case 42:
        return myConceptBuildMps_ModuleJavaSource;
      case 43:
        return myConceptBuildMps_ModuleModelRoot;
      case 44:
        return myConceptBuildMps_ModuleRuntime;
      case 45:
        return myConceptBuildMps_ModuleSolutionRuntime;
      case 46:
        return myConceptBuildMps_ModuleSource;
      case 47:
        return myConceptBuildMps_ModuleTestSource;
      case 48:
        return myConceptBuildMps_Solution;
      case 49:
        return myConceptGeneratorInternal_BuildMps_Module;
      case 50:
        return myConceptGeneratorInternal_BuildSourcePath;
      case 51:
        return myConceptGeneratorInternal_String;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0dc = new String[]{"jetbrains.mps.build.mps.structure.BuildLayout_ToBinaryCopyProcessor", "jetbrains.mps.build.mps.structure.BuildMPSPlugin", "jetbrains.mps.build.mps.structure.BuildMpsAspect", "jetbrains.mps.build.mps.structure.BuildMpsLayout_FolderWithSources", "jetbrains.mps.build.mps.structure.BuildMpsLayout_ModuleJars", "jetbrains.mps.build.mps.structure.BuildMpsLayout_ModuleSources", "jetbrains.mps.build.mps.structure.BuildMpsLayout_ModuleXml", "jetbrains.mps.build.mps.structure.BuildMpsLayout_ModuleXml_CustomJarLocation", "jetbrains.mps.build.mps.structure.BuildMpsLayout_Plugin", "jetbrains.mps.build.mps.structure.BuildMpsLayout_PluginDescriptor", "jetbrains.mps.build.mps.structure.BuildMps_AbstractModule", "jetbrains.mps.build.mps.structure.BuildMps_Branding", "jetbrains.mps.build.mps.structure.BuildMps_BrandingCompany", "jetbrains.mps.build.mps.structure.BuildMps_BrandingHelp", "jetbrains.mps.build.mps.structure.BuildMps_BrandingStats", "jetbrains.mps.build.mps.structure.BuildMps_BrandingUpdateSite", "jetbrains.mps.build.mps.structure.BuildMps_DevKit", "jetbrains.mps.build.mps.structure.BuildMps_DevKitExport", "jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage", "jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution", "jetbrains.mps.build.mps.structure.BuildMps_DevKitRef", "jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency", "jetbrains.mps.build.mps.structure.BuildMps_Generator", "jetbrains.mps.build.mps.structure.BuildMps_GeneratorOptions", "jetbrains.mps.build.mps.structure.BuildMps_Group", "jetbrains.mps.build.mps.structure.BuildMps_IdeaPlugin", "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginContent", "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginDependency", "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginGroup", "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginGroupCustomModule", "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginModule", "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginVendor", "jetbrains.mps.build.mps.structure.BuildMps_Language", "jetbrains.mps.build.mps.structure.BuildMps_Module", "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency", "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage", "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar", "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnDevKit", "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule", "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule", "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage", "jetbrains.mps.build.mps.structure.BuildMps_ModuleJarRuntime", "jetbrains.mps.build.mps.structure.BuildMps_ModuleJavaSource", "jetbrains.mps.build.mps.structure.BuildMps_ModuleModelRoot", "jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime", "jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime", "jetbrains.mps.build.mps.structure.BuildMps_ModuleSource", "jetbrains.mps.build.mps.structure.BuildMps_ModuleTestSource", "jetbrains.mps.build.mps.structure.BuildMps_Solution", "jetbrains.mps.build.mps.structure.GeneratorInternal_BuildMps_Module", "jetbrains.mps.build.mps.structure.GeneratorInternal_BuildSourcePath", "jetbrains.mps.build.mps.structure.GeneratorInternal_String"};
}
