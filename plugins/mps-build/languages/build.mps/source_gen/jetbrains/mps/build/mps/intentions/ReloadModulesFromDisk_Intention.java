package jetbrains.mps.build.mps.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Iterator;
import jetbrains.mps.build.mps.util.PathConverter;
import jetbrains.mps.build.mps.util.VisibleModules;
import jetbrains.mps.build.mps.util.ModuleLoader;

public class ReloadModulesFromDisk_Intention extends BaseIntention implements Intention {
  private static Logger LOG = Logger.getLogger(ReloadModulesFromDisk_Intention.class);

  public ReloadModulesFromDisk_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.build.structure.BuildProject";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Reload modules from disk";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.build.mps.structure.BuildMps_AbstractModule", false, new String[]{})).isNotEmpty();
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    {
      Iterator<SNode> module_it = ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.build.mps.structure.BuildMps_AbstractModule", false, new String[]{})).iterator();
      SNode module_var;
      while (module_it.hasNext()) {
        module_var = module_it.next();
        PathConverter pathConverter = new PathConverter(node);

        try {
          VisibleModules visible = new VisibleModules(node, null);
          visible.collect();
          new ModuleLoader(module_var, visible, pathConverter, null).importRequired();
        } catch (ModuleLoader.ModuleLoaderException ex) {
          LOG.error(ex.getMessage(), ex);
          // TODO report? 
        }
      }
    }
  }

  public String getLocationString() {
    return "jetbrains.mps.build.mps.intentions";
  }
}
