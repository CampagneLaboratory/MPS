package jetbrains.mps.build.mps.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.structure.modules.DevkitDescriptor;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.project.structure.modules.GeneratorDescriptor;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.project.structure.model.ModelRootDescriptor;
import jetbrains.mps.persistence.PersistenceRegistry;
import jetbrains.mps.persistence.DefaultModelRoot;
import jetbrains.mps.build.mps.behavior.BuildMps_Solution_Behavior;
import jetbrains.mps.project.ProjectPathUtil;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.build.util.Context;
import jetbrains.mps.project.facets.TestsFacet;
import jetbrains.mps.project.facets.TestsFacetImpl;
import jetbrains.mps.vfs.FileSystem;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.build.mps.behavior.BuildMps_Generator_Behavior;
import java.util.LinkedHashMap;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public class ModuleChecker {
  private static final String CORE_LANGUAGE_UID = "ceab5195-25ea-4f22-9b92-103b95ca8c0c";
  private static final String DESCRIPTOR_LANGUAGE_UID = "f4ad079d-bc71-4ffb-9600-9328705cf998";
  private final TemplateQueryContext myGenContext;
  private final SNode myModule;
  private final SNode myOriginalModule;
  private final ModuleDescriptor myModuleDescriptor;
  private final IFile myModuleSourceDir;
  private final VisibleModules myVisibleModules;
  private final PathConverter myPathConverter;
  private final ModuleChecker.Reporter myReporter;


  public ModuleChecker(SNode module, SNode originalModule, VisibleModules visible, PathConverter pathConverter, TemplateQueryContext genContext, IFile moduleSourceDir, ModuleDescriptor moduleDescriptor, ModuleChecker.Reporter reporter) {
    myGenContext = genContext;
    myModule = module;
    myOriginalModule = originalModule;
    myVisibleModules = visible;
    myPathConverter = pathConverter;
    myModuleSourceDir = moduleSourceDir;
    myModuleDescriptor = moduleDescriptor;
    myReporter = reporter;
  }



  public void check(ModuleChecker.CheckType type) {
    if (type.doFullImport) {
      SPropertyOperations.set(myModule, "compact", "" + (false));
    }

    if (myModuleDescriptor == null) {
      report("module descriptor is null for " + SPropertyOperations.getString(myModule, "name"), myModule);
      return;
    }

    if (!(checkModuleReference(type))) {
      return;
    }

    if (SNodeOperations.isInstanceOf(myModule, "jetbrains.mps.build.mps.structure.BuildMps_DevKit")) {
      if (!(myModuleDescriptor instanceof DevkitDescriptor)) {
        report("imported file is not a devkit file " + SPropertyOperations.getString(myModule, "name"), myOriginalModule);
        return;
      }
      checkDevkit(type);
    }

    if (SNodeOperations.isInstanceOf(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Module")) {
      checkModule(type);
    }
  }



  private void checkModule(ModuleChecker.CheckType type) {
    if (SNodeOperations.isInstanceOf(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Language")) {
      if (!(myModuleDescriptor instanceof LanguageDescriptor)) {
        report("imported file is not a language file " + SPropertyOperations.getString(myModule, "name"), myOriginalModule);
        return;
      }
    }
    if (SNodeOperations.isInstanceOf(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Solution")) {
      if (!(myModuleDescriptor instanceof SolutionDescriptor)) {
        report("imported file is not a solution file " + SPropertyOperations.getString(myModule, "name"), myOriginalModule);
        return;
      }
    }

    SNode module = SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Module");

    List<SNode> previous = ListSequence.fromList(SLinkOperations.getTargets(module, "dependencies", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency");
      }
    }).toListSequence();

    collectDependencies(type, previous);

    if (type.doFullImport) {
      collectLocalDependencies();
    }

    if (SNodeOperations.isInstanceOf(module, "jetbrains.mps.build.mps.structure.BuildMps_Language")) {
      checkLanguage(type, previous);
    }

    collectSources(type);

    if (type.doPartialImport) {
      ListSequence.fromList(SLinkOperations.getTargets(module, "dependencies", true)).removeSequence(ListSequence.fromList(previous));
    }

    if (type.doFullImport) {
      optimizeDeps();
    }
  }



  public boolean checkModuleReference(ModuleChecker.CheckType type) {
    SModuleReference moduleReference = myModuleDescriptor.getModuleReference();

    String expectedModuleName = moduleReference.getModuleName();
    if (SNodeOperations.isInstanceOf(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Generator")) {
      expectedModuleName = ((GeneratorDescriptor) myModuleDescriptor).getGeneratorUID();
    }
    if (type.doCheck && (neq_yr5c5g_a0a0e0r(SPropertyOperations.getString(myModule, "name"), expectedModuleName))) {
      report("name in import doesn't match file content " + SPropertyOperations.getString(myModule, "name") + ", should be: " + expectedModuleName, myOriginalModule);
      return false;
    }
    if (type.doPartialImport) {
      SPropertyOperations.set(myModule, "name", expectedModuleName);
    }

    String expectedModuleUUID = moduleReference.getModuleId().toString();
    if (type.doCheck && neq_yr5c5g_a0a8a71(SPropertyOperations.getString(myModule, "uuid"), expectedModuleUUID)) {
      report("module id in import doesn't match file content " + SPropertyOperations.getString(myModule, "name") + ", should be: " + moduleReference.getModuleId().toString(), myOriginalModule);
      return false;
    }
    if (type.doPartialImport) {
      SPropertyOperations.set(myModule, "uuid", moduleReference.getModuleId().toString());
    }

    return true;
  }



  public void checkDevkit(ModuleChecker.CheckType type) {
    DevkitDescriptor descriptor = (DevkitDescriptor) myModuleDescriptor;
    SNode devKit = SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_DevKit");

    List<SNode> prevExt = ListSequence.fromListWithValues(new ArrayList<SNode>(), SLinkOperations.getTargets(devKit, "extends", true));
    List<SNode> prevExp = ListSequence.fromListWithValues(new ArrayList<SNode>(), SLinkOperations.getTargets(devKit, "exports", true));

    for (SModuleReference module : descriptor.getExtendedDevkits()) {
      final SNode resolved = SNodeOperations.as(myVisibleModules.resolve(module.getModuleName(), module.getModuleId().toString()), "jetbrains.mps.build.mps.structure.BuildMps_DevKit");
      if (resolved == null) {
        report("cannot find devkit in dependencies: " + module.getModuleName(), myModule);
        continue;
      }

      if (type.doCheck && !(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_DevKit"), "extends", true)).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return asOriginal(SLinkOperations.getTarget(it, "devkit", false)) == resolved;
        }
      }))) {
        report("extends devkit dependency should be extracted into build script: " + module.toString(), myOriginalModule);
      }

      if (type.doPartialImport) {
        SNode ul = ListSequence.fromList(prevExt).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SLinkOperations.getTarget(it, "devkit", false) == resolved;
          }
        });
        if (ul == null) {
          ul = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_DevKitRef", null);
          SLinkOperations.setTarget(ul, "devkit", resolved, false);
          ListSequence.fromList(SLinkOperations.getTargets(devKit, "extends", true)).addElement(ul);
        } else {
          ListSequence.fromList(prevExt).removeElement(ul);
        }
      }
    }

    for (SModuleReference module : descriptor.getExportedLanguages()) {
      final SNode resolved = SNodeOperations.as(myVisibleModules.resolve(module.getModuleName(), module.getModuleId().toString()), "jetbrains.mps.build.mps.structure.BuildMps_Language");
      if (resolved == null) {
        report("cannot find exported languages in dependencies: " + module.getModuleName(), myModule);
        continue;
      }

      if (type.doCheck && !(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_DevKit"), "exports", true)).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage") && asOriginal(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage"), "language", false)) == resolved;
        }
      }))) {
        report("export language dependency should be extracted into build script: " + module.toString(), myOriginalModule);
      }

      if (type.doPartialImport) {
        SNode ul = SNodeOperations.as(ListSequence.fromList(prevExp).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage") && SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage"), "language", false) == resolved;
          }
        }), "jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage");
        if (ul == null) {
          ul = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage", null);
          SLinkOperations.setTarget(ul, "language", resolved, false);
          ListSequence.fromList(SLinkOperations.getTargets(devKit, "exports", true)).addElement(ul);
        } else {
          ListSequence.fromList(prevExp).removeElement(ul);
        }
      }
    }

    // import devkit 
    for (SModuleReference module : descriptor.getExportedSolutions()) {
      final SNode resolved = SNodeOperations.as(myVisibleModules.resolve(module.getModuleName(), module.getModuleId().toString()), "jetbrains.mps.build.mps.structure.BuildMps_Solution");
      if (resolved == null) {
        report("cannot find exported solution in dependencies: " + module.getModuleName(), myModule);
        continue;
      }

      if (type.doCheck && !(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_DevKit"), "exports", true)).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution") && asOriginal(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution"), "solution", false)) == resolved;
        }
      }))) {
        report("export solution dependency should be extracted into build script: " + module.toString(), myOriginalModule);
      }

      if (type.doPartialImport) {
        SNode ul = SNodeOperations.as(ListSequence.fromList(prevExp).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution") && SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution"), "solution", false) == resolved;
          }
        }), "jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution");
        if (ul == null) {
          ul = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution", null);
          SLinkOperations.setTarget(ul, "solution", resolved, false);
          ListSequence.fromList(SLinkOperations.getTargets(devKit, "exports", true)).addElement(ul);
        } else {
          ListSequence.fromList(prevExp).removeElement(ul);
        }
      }
    }

    if (type.doPartialImport) {
      ListSequence.fromList(SLinkOperations.getTargets(devKit, "extends", true)).removeSequence(ListSequence.fromList(prevExt));
      ListSequence.fromList(SLinkOperations.getTargets(devKit, "exports", true)).removeSequence(ListSequence.fromList(prevExp));
    }
  }



  public void checkLanguage(ModuleChecker.CheckType type, List<SNode> previous) {
    checkRuntime(type);
    checkLanguageDeps(type, previous);
    checkGenerators(type);
  }



  public void checkRuntime(ModuleChecker.CheckType type) {
    LanguageDescriptor descriptor = (LanguageDescriptor) myModuleDescriptor;
    SNode module = SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Language");

    List<SNode> previous = ListSequence.fromListWithValues(new ArrayList<SNode>(), SLinkOperations.getTargets(module, "runtime", true));

    for (SModuleReference runtimeModule : descriptor.getRuntimeModules()) {
      final SNode resolved = SNodeOperations.as(myVisibleModules.resolve(runtimeModule.getModuleName(), runtimeModule.getModuleId().toString()), "jetbrains.mps.build.mps.structure.BuildMps_Solution");
      if (resolved == null) {
        report("cannot find runtime solution in dependencies: " + runtimeModule.getModuleName(), myModule);
        continue;
      }

      if (type.doCheck && !(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Language"), "runtime", true)).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime") && asOriginal(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime"), "solution", false)) == resolved;
        }
      }))) {
        report("runtime solution should be extracted into build script: " + runtimeModule.toString(), myOriginalModule);
      }

      if (type.doPartialImport) {
        SNode ul = SNodeOperations.as(ListSequence.fromList(previous).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime") && SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime"), "solution", false) == resolved;
          }
        }), "jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime");
        if (ul == null) {
          ul = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime", null);
          SLinkOperations.setTarget(ul, "solution", resolved, false);
          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Language"), "runtime", true)).addElement(ul);
        } else {
          ListSequence.fromList(previous).removeElement(ul);
        }
      }
    }
  }



  public void checkLanguageDeps(ModuleChecker.CheckType type, List<SNode> previous) {
    LanguageDescriptor descriptor = (LanguageDescriptor) myModuleDescriptor;
    SNode language = SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Language");

    boolean importsCore = false;
    boolean importsDescriptor = false;
    for (SModuleReference extendedLang : descriptor.getExtendedLanguages()) {
      if (!(importsCore) && CORE_LANGUAGE_UID.equals(extendedLang.getModuleId().toString())) {
        importsCore = true;
      }
      if (!(importsDescriptor) && DESCRIPTOR_LANGUAGE_UID.equals(extendedLang.getModuleId().toString())) {
        importsDescriptor = true;
      }

      final SNode resolved = SNodeOperations.as(myVisibleModules.resolve(extendedLang.getModuleName(), extendedLang.getModuleId().toString()), "jetbrains.mps.build.mps.structure.BuildMps_Language");
      if (resolved == null) {
        report("cannot find extended language in dependencies: " + extendedLang.getModuleName(), myModule);
        continue;
      }

      if (type.doCheck && !(ListSequence.fromList(SLinkOperations.getTargets(language, "dependencies", true)).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          SNode em = SNodeOperations.as(it, "jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency");
          return em != null && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(em, "dependency", true), "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage") && asOriginal(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(em, "dependency", true), "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage"), "language", false)) == resolved;
        }
      }))) {
        report("extends language dependency should be extracted into build script: " + extendedLang.toString(), myOriginalModule);
      }

      if (type.doPartialImport) {
        SNode res = ListSequence.fromList(previous).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "dependency", true), "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage") && SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(it, "dependency", true), "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage"), "language", false) == resolved;
          }
        });
        if (res == null) {
          res = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency", null);
          SNode ul = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage", null);
          SLinkOperations.setTarget(ul, "language", resolved, false);
          SLinkOperations.setTarget(res, "dependency", ul, true);
          ListSequence.fromList(SLinkOperations.getTargets(language, "dependencies", true)).addElement(res);
        } else {
          ListSequence.fromList(previous).removeElement(res);
        }
      }
    }

    if (!(importsCore) && type.doFullImport) {
      SNode resolved = SNodeOperations.as(myVisibleModules.resolve("jetbrains.mps.lang.core", CORE_LANGUAGE_UID), "jetbrains.mps.build.mps.structure.BuildMps_Language");
      if (resolved == null) {
        report("cannot find jetbrains.mps.lang.core language in dependencies for " + SPropertyOperations.getString(myModule, "name"), myModule);
      } else {
        SNode ul = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage", null);
        SLinkOperations.setTarget(ul, "language", resolved, false);
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Module"), "dependencies", true)).addElement(ul);
      }
    }
    if (!(importsDescriptor) && type.doFullImport) {
      SNode resolved = SNodeOperations.as(myVisibleModules.resolve("jetbrains.mps.lang.descriptor", DESCRIPTOR_LANGUAGE_UID), "jetbrains.mps.build.mps.structure.BuildMps_Language");
      if (resolved == null) {
        report("cannot find jetbrains.mps.lang.descriptor language in dependencies for " + SPropertyOperations.getString(myModule, "name"), myModule);
      } else {
        SNode ul = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage", null);
        SLinkOperations.setTarget(ul, "language", resolved, false);
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Module"), "dependencies", true)).addElement(ul);
      }
    }
  }



  public void collectSources(ModuleChecker.CheckType type) {
    SNode module = SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Module");
    Iterable<ModelRootDescriptor> modelRoots = myModuleDescriptor.getModelRootDescriptors();
    boolean hasModels = false;
    for (ModelRootDescriptor modelRootDescriptor : modelRoots) {
      if (!(PersistenceRegistry.DEFAULT_MODEL_ROOT.equals(modelRootDescriptor.getType()))) {
        continue;
      }

      DefaultModelRoot mr = new DefaultModelRoot();
      mr.load(modelRootDescriptor.getMemento());
      for (String path : mr.getFiles(DefaultModelRoot.SOURCE_ROOTS)) {
        if (path == null) {
          continue;
        }
        SNode p = ListSequence.fromList(convertPath(path, myOriginalModule)).first();
        if (p == null) {
          continue;
        }

        if (type.doFullImport) {
          SNode mroot = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleModelRoot", null);
          SLinkOperations.setTarget(mroot, "folder", p, true);
          ListSequence.fromList(SLinkOperations.getTargets(module, "sources", true)).addElement(mroot);
        }
        hasModels = true;
      }
    }

    List<String> res = new ArrayList<String>();
    for (String sp : myModuleDescriptor.getSourcePaths()) {
      res.add(sp);
    }
    String genPath = null;
    if (!(SNodeOperations.isInstanceOf(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Solution")) || (BuildMps_Solution_Behavior.call_hasSources_7354447573576714831(SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Solution")) && hasModels)) {
      IFile genPathFile = ProjectPathUtil.getGeneratorOutputPath(myModuleSourceDir, myModuleDescriptor);
      if (genPathFile != null) {
        genPath = genPathFile.getPath();
        res.add(genPath);
      }
    }

    // wat? 
    String localPath = BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(module, "path", true), "virtual_getLocalPath_5481553824944787364", new Object[]{(myGenContext != null ? Context.defaultContext(myGenContext) : Context.defaultContext())});
    String testPath = null;
    if (localPath != null) {
      TestsFacet testsFacet = TestsFacetImpl.fromModuleDescriptor(myModuleDescriptor, FileSystem.getInstance().getFileByPath(localPath));
      boolean hasTests = SNodeOperations.isInstanceOf(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Solution") && BuildMps_Solution_Behavior.call_hasTestsSources_7354447573575923452(SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Solution"));
      if (testsFacet != null && hasTests) {
        IFile testsPathFile = testsFacet.getTestsOutputPath();
        if (testsPathFile != null) {
          testPath = testsPathFile.getPath();
        }
      }
    }

    boolean doNotCompile = myModuleDescriptor instanceof SolutionDescriptor && (!(((SolutionDescriptor) myModuleDescriptor).getCompileInMPS()) || (res.isEmpty() && (testPath == null || testPath.length() == 0)));
    if (type.doCheck && SPropertyOperations.getBoolean(module, "doNotCompile") != doNotCompile) {
      report("compile in MPS flag doesn't match file content " + SPropertyOperations.getString(myModule, "name") + ", should be: " + doNotCompile, myOriginalModule);
    }
    if (type.doPartialImport) {
      SPropertyOperations.set(module, "doNotCompile", "" + (doNotCompile));
    }

    if (type.doFullImport) {
      for (String path : res) {
        SNode p = ListSequence.fromList(convertPath(path, myOriginalModule)).first();
        if (p == null) {
          continue;
        }
        SNode javaSource = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleJavaSource", null);
        SLinkOperations.setTarget(javaSource, "folder", SConceptOperations.createNewNode("jetbrains.mps.build.structure.BuildInputSingleFolder", null), true);
        SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(javaSource, "folder", true), "jetbrains.mps.build.structure.BuildInputSingleFolder"), "path", p, true);
        SPropertyOperations.set(javaSource, "isGenerated", "" + (path.equals(genPath)));
        ListSequence.fromList(SLinkOperations.getTargets(module, "sources", true)).addElement(javaSource);
      }

      if (testPath != null) {
        SNode p = ListSequence.fromList(convertPath(testPath, myOriginalModule)).first();
        if (p != null) {
          SNode testSource = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleTestSource", null);
          SLinkOperations.setTarget(testSource, "folder", SConceptOperations.createNewNode("jetbrains.mps.build.structure.BuildInputSingleFolder", null), true);
          SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(testSource, "folder", true), "jetbrains.mps.build.structure.BuildInputSingleFolder"), "path", p, true);
          SPropertyOperations.set(testSource, "isGenerated", "" + (true));
          ListSequence.fromList(SLinkOperations.getTargets(module, "sources", true)).addElement(testSource);
        }
      }
    }
  }



  public void collectDependencies(ModuleChecker.CheckType type, List<SNode> previous) {
    SNode module = SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Module");

    Map<String, Boolean> usedModuleIds = new HashMap<String, Boolean>();
    Set<String> extractedModules = new HashSet<String>();
    for (SNode dep : SLinkOperations.getTargets(module, "dependencies", true)) {
      boolean extracted = false;
      if (SNodeOperations.isInstanceOf(dep, "jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency")) {
        dep = SLinkOperations.getTarget(SNodeOperations.cast(dep, "jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency"), "dependency", true);
        extracted = true;
      }
      if (SNodeOperations.isInstanceOf(dep, "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule")) {
        SNode onModule = SNodeOperations.cast(dep, "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule");
        boolean existing = (usedModuleIds.containsKey(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, "module", false), "uuid")) ? usedModuleIds.get(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, "module", false), "uuid")) : false);
        usedModuleIds.put(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, "module", false), "uuid"), SPropertyOperations.getBoolean(onModule, "reexport") || existing);
        if (extracted) {
          extractedModules.add(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, "module", false), "uuid"));
        }
      }
    }

    Map<SNode, SNode> seen = new HashMap<SNode, SNode>();

    Set<Dependency> dependencies = SetSequence.fromSetWithValues(new HashSet<Dependency>(), myModuleDescriptor.getDependencies());

    // todo: hack 
    if (type.doFullImport) {
      if (SNodeOperations.isInstanceOf(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Generator")) {
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Generator"), "dependencies", true)).addElement(createBuildMps_ModuleDependencyOnModule_yr5c5g_a0a0a0a11a92(BuildMps_Generator_Behavior.call_getSourceLanguage_9200313594510517119(SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Generator"))));
      }
    }

    for (Dependency dependency : dependencies) {
      SModuleReference moduleRef = dependency.getModuleRef();
      if (moduleRef.getModuleName().contains("#") && !(SNodeOperations.isInstanceOf(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Generator"))) {
        report("modules except generators cannot depend on generator: `" + moduleRef.getModuleName() + "'", myOriginalModule);
      }
    }

    // resolve all dependencies 
    Map<SNode, Boolean> depsToReexport = new LinkedHashMap<SNode, Boolean>();
    for (Dependency dep : dependencies) {
      boolean reexport = dep.isReexport();
      SModuleReference moduleRef = dep.getModuleRef();
      final Wrappers._T<SNode> resolved = new Wrappers._T<SNode>();
      String targetName = moduleRef.getModuleName();
      resolved.value = SNodeOperations.as(myVisibleModules.resolve(targetName, moduleRef.getModuleId().toString()), "jetbrains.mps.build.mps.structure.BuildMps_Module");
      if (resolved.value == null) {
        report("dependency on a module not visible from current build project: " + dep.getModuleRef().toString(), myOriginalModule);
        continue;
      }

      Boolean alreadyReexport = depsToReexport.get(resolved.value);
      if (alreadyReexport != null && alreadyReexport.booleanValue()) {
        continue;
      }
      depsToReexport.put(resolved.value, reexport);

      // import required 
      if (type.doPartialImport) {
        SNode prev = seen.get(resolved.value);
        if (prev != null) {
          if (reexport) {
            SPropertyOperations.set(prev, "reexport", "" + (true));
          }
          continue;
        }

        SNode extr = ListSequence.fromList(previous).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "dependency", true), "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule") && SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(it, "dependency", true), "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule"), "module", false) == resolved.value;
          }
        });

        if (extr == null) {
          extr = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency", null);
          SNode res = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule", null);
          SLinkOperations.setTarget(extr, "dependency", res, true);
          SLinkOperations.setTarget(res, "module", resolved.value, false);
          ListSequence.fromList(SLinkOperations.getTargets(module, "dependencies", true)).addElement(extr);
        } else {
          ListSequence.fromList(previous).removeElement(extr);
        }
        seen.put(resolved.value, SNodeOperations.cast(SLinkOperations.getTarget(extr, "dependency", true), "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule"));
        SPropertyOperations.set(SNodeOperations.cast(SLinkOperations.getTarget(extr, "dependency", true), "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule"), "reexport", "" + (reexport));
      }
    }

    // check & create 
    if (type.doFullImport || type.doCheck) {
      for (Map.Entry<SNode, Boolean> entry : depsToReexport.entrySet()) {
        SNode resolved = entry.getKey();
        boolean reexport = entry.getValue().booleanValue();

        boolean found = false;

        if (usedModuleIds.containsKey(SPropertyOperations.getString(resolved, "uuid"))) {
          found = true;
          boolean foundReexport = usedModuleIds.get(SPropertyOperations.getString(resolved, "uuid"));
          if (foundReexport != reexport && extractedModules.contains(SPropertyOperations.getString(resolved, "uuid")) && type.doCheck) {
            report("wrong reexport status for dependency in build script for: " + SPropertyOperations.getString(resolved, "name"), myOriginalModule);
          }
        }

        if (!(extractedModules.contains(SPropertyOperations.getString(resolved, "uuid"))) && type.doCheck) {
          report("dependencies should be extracted into build script: " + SPropertyOperations.getString(resolved, "name"), myOriginalModule);
        }

        if (!(found) && type.doFullImport) {
          SNode res = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule", null);
          SLinkOperations.setTarget(res, "module", resolved, false);
          SPropertyOperations.set(res, "reexport", "" + (reexport));
          ListSequence.fromList(SLinkOperations.getTargets(module, "dependencies", true)).addElement(res);
        }
      }
    }

    // java stubs: jars 
    for (String path : myModuleDescriptor.getAdditionalJavaStubPaths()) {
      final SNode p = ListSequence.fromList(convertPath(path, myOriginalModule)).first();
      if (p == null) {
        continue;
      }

      if (path.endsWith(".jar")) {
        if (type.doCheck) {
          final String relPath = BehaviorReflection.invokeVirtual(String.class, p, "virtual_getRelativePath_5481553824944787371", new Object[]{});
          if (!(ListSequence.fromList(SLinkOperations.getTargets(module, "dependencies", true)).any(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              SNode dep = (SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency") ? SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency"), "dependency", true) : it);
              return SNodeOperations.isInstanceOf(dep, "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar") && eq_yr5c5g_a0a1a0a0a0a0b0a0d0x0db(BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(SNodeOperations.cast(dep, "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar"), "path", true), "virtual_getRelativePath_5481553824944787371", new Object[]{}), relPath);
            }
          }))) {
            report("jar stub library should be extracted into build script: " + relPath, myOriginalModule);
          }
        }

        if (type.doPartialImport) {
          SNode extr = ListSequence.fromList(previous).findFirst(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "dependency", true), "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar") && eq_yr5c5g_a0a0a0a0a0a0a0c0d0x0db(BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(it, "dependency", true), "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar"), "path", true), "virtual_getRelativePath_5481553824944787371", new Object[]{}), BehaviorReflection.invokeVirtual(String.class, p, "virtual_getRelativePath_5481553824944787371", new Object[]{}));
            }
          });

          if (extr == null) {
            extr = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency", null);
            SNode jar = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar", null);
            SLinkOperations.setTarget(jar, "path", p, true);
            SLinkOperations.setTarget(extr, "dependency", jar, true);
            ListSequence.fromList(SLinkOperations.getTargets(module, "dependencies", true)).addElement(extr);
          } else {
            ListSequence.fromList(previous).removeElement(extr);
          }
        }
      } else {
        report("only jar stub libraries are supported, found: " + path, myOriginalModule);
      }
    }
  }



  private void checkGenerators(ModuleChecker.CheckType type) {
    SNode language = SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Language");
    LanguageDescriptor languageDescriptor = (LanguageDescriptor) myModuleDescriptor;
    String langName = languageDescriptor.getModuleReference().getModuleName();

    if (languageDescriptor.getGenerators().size() > 1) {
      report("more than one generator for language `" + langName + "'", myOriginalModule);
      return;
    }
    if (languageDescriptor.getGenerators().isEmpty()) {
      if (type.doCheck && (SLinkOperations.getTarget(language, "generator", true) != null)) {
        report("no generators in module descriptor for `" + langName + "'", myOriginalModule);
      }
      if (type.doPartialImport) {
        SLinkOperations.setTarget(language, "generator", null, true);
      }
      return;
    }

    GeneratorDescriptor generatorDescriptor = languageDescriptor.getGenerators().get(0);
    String generatorName = generatorDescriptor.getGeneratorUID();
    if (generatorName != null && !(generatorName.startsWith(langName + "#"))) {
      report("wrong generator name `" + generatorName + "', should start with `" + langName + "#'", myOriginalModule);
      return;
    }

    if (type.doCheck && (SLinkOperations.getTarget(language, "generator", true) == null)) {
      report("language generator should be extracted for `" + langName + "'", myOriginalModule);
      return;
    }
    if (type.doPartialImport & (SLinkOperations.getTarget(language, "generator", true) == null)) {
      SLinkOperations.setTarget(language, "generator", SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_Generator", null), true);
    }

    ModuleChecker moduleCheckerForGenerator = new ModuleChecker(SLinkOperations.getTarget(language, "generator", true), SLinkOperations.getTarget(language, "generator", true), myVisibleModules, myPathConverter, myGenContext, myModuleSourceDir, generatorDescriptor, myReporter);
    moduleCheckerForGenerator.check(type);
    if (type.doFullImport) {
      // propagate collected generator dependencies up to generator's source language dependencies. 
      // do it at runtime only (doFullImport == true) as extracted dependencies are enough to reconstruct  
      // complete set of dependencies 
      Set<SNode> alreadyInDeps = unwrapExtractedDeps(language);
      SetSequence.fromSet(alreadyInDeps).addElement(language);
      Set<SNode> generatorDeps = unwrapExtractedDeps(SLinkOperations.getTarget(language, "generator", true));
      for (SNode dep : generatorDeps) {
        SNode extraDep = dep;
        if (SNodeOperations.isInstanceOf(dep, "jetbrains.mps.build.mps.structure.BuildMps_Generator")) {
          // generator depends on another generator, use dependant generator's language as our dependency 
          extraDep = SLinkOperations.getTarget(SNodeOperations.cast(dep, "jetbrains.mps.build.mps.structure.BuildMps_Generator"), "sourceLanguage", false);
        }
        if (SetSequence.fromSet(alreadyInDeps).contains(extraDep)) {
          continue;
        }
        SNode newDep = SModelOperations.createNewNode(SNodeOperations.getModel(language), null, "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule");
        SLinkOperations.setTarget(newDep, "module", extraDep, false);
        ListSequence.fromList(SLinkOperations.getTargets(language, "dependencies", true)).addElement(newDep);
        SetSequence.fromSet(alreadyInDeps).addElement(extraDep);
      }
    }
  }

  private static Set<SNode> unwrapExtractedDeps(SNode module) {
    // unwrap extracted dependencies into true dependencies, find dependencies from modules 
    Iterable<SNode> moduleExtractedDependencies = SNodeOperations.ofConcept(SLinkOperations.getTargets(module, "dependencies", true), "jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency");
    Set<SNode> moduleDependencies = SetSequence.fromSet(new HashSet<SNode>());
    SetSequence.fromSet(moduleDependencies).addSequence(ListSequence.fromList(SLinkOperations.getTargets(module, "dependencies", true)));
    SetSequence.fromSet(moduleDependencies).removeSequence(Sequence.fromIterable(moduleExtractedDependencies));
    SetSequence.fromSet(moduleDependencies).addSequence(Sequence.fromIterable(moduleExtractedDependencies).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "dependency", true) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "dependency", true);
      }
    }));
    return SetSequence.fromSetWithValues(new HashSet<SNode>(), Sequence.fromIterable(SNodeOperations.ofConcept(moduleDependencies, "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "module", false) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "module", false);
      }
    }));
  }

  private void optimizeDeps() {
    SNode module = SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Module");
    List<SNode> deps = ListSequence.fromListWithValues(new ArrayList<SNode>(), SLinkOperations.getTargets(module, "dependencies", true));
    Map<String, SNode> ndeps = MapSequence.fromMap(new HashMap<String, SNode>());
    Set<String> extendedLanguages = SetSequence.fromSet(new HashSet<String>());
    Set<String> usedLanguages = SetSequence.fromSet(new HashSet<String>());
    for (SNode originalDep : deps) {
      SNode dep = (SNodeOperations.isInstanceOf(originalDep, "jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency") ? SLinkOperations.getTarget(SNodeOperations.cast(originalDep, "jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency"), "dependency", true) : originalDep);
      if (SNodeOperations.isInstanceOf(dep, "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule")) {
        SNode depOnModule = SNodeOperations.cast(dep, "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule");
        String uuid = SPropertyOperations.getString(SLinkOperations.getTarget(depOnModule, "module", false), "uuid");
        if (MapSequence.fromMap(ndeps).containsKey(uuid)) {
          SPropertyOperations.set(MapSequence.fromMap(ndeps).get(uuid), "reexport", "" + (SPropertyOperations.getBoolean(MapSequence.fromMap(ndeps).get(uuid), "reexport") || SPropertyOperations.getBoolean(depOnModule, "reexport")));
          SNodeOperations.deleteNode(originalDep);
          continue;
        }
        MapSequence.fromMap(ndeps).put(uuid, depOnModule);
      } else if (SNodeOperations.isInstanceOf(dep, "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage")) {
        SNode extLang = SNodeOperations.cast(dep, "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage");
        String uuid = SPropertyOperations.getString(SLinkOperations.getTarget(extLang, "language", false), "uuid");
        if (SetSequence.fromSet(extendedLanguages).contains(uuid)) {
          SNodeOperations.deleteNode(originalDep);
          continue;
        }
        SetSequence.fromSet(extendedLanguages).addElement(uuid);
      } else if (SNodeOperations.isInstanceOf(dep, "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage")) {
        SNode extLang = SNodeOperations.cast(dep, "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage");
        String uuid = SPropertyOperations.getString(SLinkOperations.getTarget(extLang, "language", false), "uuid");
        if (SetSequence.fromSet(usedLanguages).contains(uuid)) {
          SNodeOperations.deleteNode(originalDep);
          continue;
        }
        SetSequence.fromSet(usedLanguages).addElement(uuid);
      }
    }
    for (SNode dep : ListSequence.fromListWithValues(new ArrayList<SNode>(), SLinkOperations.getTargets(module, "dependencies", true))) {
      if (SNodeOperations.isInstanceOf(dep, "jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency")) {
        SNodeOperations.replaceWithAnother(dep, SLinkOperations.getTarget(SNodeOperations.cast(dep, "jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency"), "dependency", true));
      }
    }
  }

  private void collectLocalDependencies() {
    SNode module = SNodeOperations.cast(myModule, "jetbrains.mps.build.mps.structure.BuildMps_Module");
    Iterable<SModuleReference> usedLanguages = myModuleDescriptor.getUsedLanguages();
    Iterable<SModuleReference> usedDevkits = myModuleDescriptor.getUsedDevkits();

    for (SModuleReference lang : usedLanguages) {
      SNode resolved = SNodeOperations.as(myVisibleModules.resolve(lang.getModuleName(), lang.getModuleId().toString()), "jetbrains.mps.build.mps.structure.BuildMps_Language");
      if (resolved == null) {
        report("cannot find used language in dependencies: " + lang.getModuleName(), myModule);
        continue;
      }
      SNode ul = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage", null);
      SLinkOperations.setTarget(ul, "language", resolved, false);
      ListSequence.fromList(SLinkOperations.getTargets(module, "dependencies", true)).addElement(ul);
    }
    for (SModuleReference devkit : usedDevkits) {
      SNode resolved = SNodeOperations.as(myVisibleModules.resolve(devkit.getModuleName(), devkit.getModuleId().toString()), "jetbrains.mps.build.mps.structure.BuildMps_DevKit");
      if (resolved == null) {
        report("cannot find used devkit in dependencies: " + devkit.getModuleName(), myModule);
        continue;
      }
      SNode ud = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnDevKit", null);
      SLinkOperations.setTarget(ud, "devkit", resolved, false);
      ListSequence.fromList(SLinkOperations.getTargets(module, "dependencies", true)).addElement(ud);
    }
  }



  private List<SNode> convertPath(String path, SNode anchor) {
    try {
      return myPathConverter.convertPath(path, SNodeOperations.getModel(myModule));
    } catch (PathConverter.PathConvertException ex) {
      report(ex.getMessage(), anchor, ex);
      return null;
    }
  }

  private void report(String message, SNode node) {
    myReporter.report(message, node, null);
  }

  private void report(String message, SNode node, Exception cause) {
    myReporter.report(message, node, cause);
  }

  private SNode asOriginal(SNode node) {
    if (SNodeOperations.getContainingRoot(node) == SNodeOperations.getContainingRoot(myModule)) {
      return node;
    }
    return (myGenContext != null ? myGenContext.getOriginalCopiedInputNode(node) : node);
  }



  public static   enum CheckType {
    CHECK(true, false, false),
    LOAD_IMPORTANT_PART(false, true, false),
    LOAD_ALL(true, false, true);

    public final boolean doCheck;
    public final boolean doPartialImport;
    public final boolean doFullImport;

    CheckType(boolean doCheck, boolean doPartialImport, boolean doFullImport) {
      this.doCheck = doCheck;
      this.doPartialImport = doPartialImport;
      this.doFullImport = doFullImport;
    }
  }

  public static class Reporter {
    private final TemplateQueryContext myGenContext;

    public Reporter(TemplateQueryContext genContext) {
      myGenContext = genContext;
    }

    public void report(String message, SNode node, Exception cause) {
      if (myGenContext == null) {
        throw new ModuleLoaderException(message, node, cause);
      }

      myGenContext.showErrorMessage(node, message);
    }
  }

  private static SNode createBuildMps_ModuleDependencyOnModule_yr5c5g_a0a0a0a11a92(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule", null, false);
    n1.setProperty("reexport", "" + false);
    n1.setReferenceTarget("module", (SNode) p0);
    return n1;
  }

  private static boolean neq_yr5c5g_a0a0e0r(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }

  private static boolean neq_yr5c5g_a0a8a71(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }

  private static boolean eq_yr5c5g_a0a1a0a0a0a0b0a0d0x0db(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_yr5c5g_a0a0a0a0a0a0a0c0d0x0db(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
