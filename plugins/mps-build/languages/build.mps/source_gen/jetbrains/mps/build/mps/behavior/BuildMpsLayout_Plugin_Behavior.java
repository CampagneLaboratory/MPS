package jetbrains.mps.build.mps.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.build.behavior.BuildString_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.build.util.UnpackHelper;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.build.util.DependenciesHelper;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.build.util.Context;

public class BuildMpsLayout_Plugin_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_appendName_1368030936106665465(SNode thisNode, SNode parent, StringBuilder sb) {
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.build.structure.BuildLayout_Container")) {
      sb.append("/");
    }
    sb.append(BuildString_Behavior.call_getText_4380385936562005550(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "plugin", false), "containerName", true), null));
  }

  public static void virtual_unpack_7128123785277710736(SNode thisNode, UnpackHelper helper, Iterable<Object> artifacts) {
    // TODO extract! (it is a copy of Folder behavior) 
    SNode parent = helper.parent(thisNode);
    String parentLocation = helper.contentLocations().get(parent);
    String folderLocation = parentLocation + "/" + BuildString_Behavior.call_getText_4380385936562005550(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "plugin", false), "containerName", true), helper.getMacroHelper());
    helper.locations().put(thisNode, folderLocation);
    helper.contentLocations().put(thisNode, folderLocation);
    for (SNode ic : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "children", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildLayout_ImportContent");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildLayout_ImportContent");
      }
    })) {
      SNode node = SNodeOperations.as(SLinkOperations.getTarget(ic, "target", false), "jetbrains.mps.build.structure.BuildLayout_PathElement");
      if ((node != null)) {
        // note: if node is imported directly - do not override its original location 
        if (!(helper.locations().containsKey(node))) {
          helper.locations().put(node, folderLocation);
        }
        if (!(helper.contentLocations().containsKey(node))) {
          helper.contentLocations().put(node, folderLocation);
        }
      }
    }
  }

  public static String virtual_location_7117056644539862594(SNode thisNode, DependenciesHelper helper, Object artifactId) {
    if (artifactId instanceof SNode) {
      SNode node = (SNode) artifactId;
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.build.mps.structure.BuildMps_AbstractModule")) {
        final Wrappers._T<SNode> module = new Wrappers._T<SNode>(SNodeOperations.cast(node, "jetbrains.mps.build.mps.structure.BuildMps_AbstractModule"));
        boolean isGenerator = SNodeOperations.isInstanceOf(module.value, "jetbrains.mps.build.mps.structure.BuildMps_Generator");
        if (isGenerator) {
          module.value = BuildMps_Generator_Behavior.call_getSourceLanguage_9200313594510517119(SNodeOperations.cast(module.value, "jetbrains.mps.build.mps.structure.BuildMps_Generator"));
        }
        SNode container = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "plugin", false), "content", true)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return BehaviorReflection.invokeVirtual(Boolean.TYPE, it, "virtual_exports_6547494638219603457", new Object[]{module.value});
          }
        });
        if ((container != null)) {
          // todo: seems to be rather messy 
          SNode group = SNodeOperations.as(container, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginGroup");
          if ((group != null) && BuildMps_IdeaPluginGroup_Behavior.call_isCustomPackaging_8301447434616552323(group, module.value)) {
            return null;
          }
          if (SNodeOperations.isInstanceOf(container, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginModule") && SPropertyOperations.getBoolean(SNodeOperations.as(container, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginModule"), "customPackaging")) {
            return null;
          }
          return helper.locations().get(thisNode) + "/languages/" + ((group != null ? SPropertyOperations.getString(SLinkOperations.getTarget(group, "group", false), "name") + "/" : "")) + SPropertyOperations.getString(module.value, "name") + ((isGenerator ? "-generator" : "")) + ".jar";
        }
        return null;
      }
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPlugin")) {
        return helper.locations().get(thisNode);
      }
    }
    return BehaviorReflection.invokeSuper(String.class, thisNode, "jetbrains.mps.build.structure.BuildLayout_AbstractContainer", "virtual_location_7117056644539862594", new Object[]{helper, artifactId});
  }

  public static boolean virtual_exports_6547494638219603457(SNode thisNode, Object artifactId) {
    // TODO extract! (it is a copy of Folder behavior) 
    if (artifactId instanceof SNode) {
      final SNode node = (SNode) artifactId;
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPlugin")) {
        return SLinkOperations.getTarget(thisNode, "plugin", false) == node;
      }
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.build.structure.BuildLayout_Node")) {
        return ListSequence.fromList(SLinkOperations.getTargets(thisNode, "children", true)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildLayout_ImportContent") && SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildLayout_ImportContent"), "target", false) == node;
          }
        });
      }
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.build.mps.structure.BuildMps_AbstractModule")) {
        final Wrappers._T<SNode> module = new Wrappers._T<SNode>(SNodeOperations.cast(node, "jetbrains.mps.build.mps.structure.BuildMps_AbstractModule"));
        if (SNodeOperations.isInstanceOf(module.value, "jetbrains.mps.build.mps.structure.BuildMps_Generator")) {
          module.value = BuildMps_Generator_Behavior.call_getSourceLanguage_9200313594510517119(SNodeOperations.cast(module.value, "jetbrains.mps.build.mps.structure.BuildMps_Generator"));
        }
        SNode container = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "plugin", false), "content", true)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return BehaviorReflection.invokeVirtual(Boolean.TYPE, it, "virtual_exports_6547494638219603457", new Object[]{module.value});
          }
        });
        SNode group = SNodeOperations.as(container, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginGroup");
        if ((group != null) && BuildMps_IdeaPluginGroup_Behavior.call_isCustomPackaging_8301447434616552323(group, module.value)) {
          return false;
        }
        if (SNodeOperations.isInstanceOf(container, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginModule") && SPropertyOperations.getBoolean(SNodeOperations.as(container, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginModule"), "customPackaging")) {
          return false;
        }
        return container != null;
      }
    }
    return BehaviorReflection.invokeSuper(Boolean.TYPE, thisNode, "jetbrains.mps.build.structure.BuildLayout_AbstractContainer", "virtual_exports_6547494638219603457", new Object[]{artifactId});
  }

  public static String virtual_getChildrenOutputDir_WithMacro_4701820937132344011(SNode thisNode, Context context) {
    return BuildMpsLayout_Plugin_Behavior.call_getOutputPath_WithMacro_280273048052535414(thisNode, context);
  }

  public static String call_getOutputPath_WithMacro_280273048052535414(SNode thisNode, Context context) {
    if ((SNodeOperations.getParent(thisNode) != null) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(thisNode), "jetbrains.mps.build.structure.BuildLayout_Container")) {
      String parentChildrenTargetDir = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(SNodeOperations.getParent(thisNode), "jetbrains.mps.build.structure.BuildLayout_Container"), "virtual_getChildrenOutputDir_WithMacro_4701820937132344011", new Object[]{context});
      return parentChildrenTargetDir + "/" + BuildString_Behavior.call_getText_4380385936562005550(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "plugin", false), "containerName", true), context.getMacros(thisNode));
    }
    return null;
  }

  public static String virtual_getApproximateName_5610619299014531547(SNode thisNode) {
    return BuildString_Behavior.call_getText_4380385936562005550(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "plugin", false), "containerName", true), null);
  }

  public static boolean virtual_isFolder_1368030936106753980(SNode thisNode) {
    return true;
  }

  public static SNode call_findGroup_8301447434616448040(SNode thisNode, final SNode module) {
    return SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "plugin", false), "content", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginGroup") && ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginGroup"), "group", false), "modules", true)).contains(module);
      }
    }).first(), "jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginGroup");
  }
}
