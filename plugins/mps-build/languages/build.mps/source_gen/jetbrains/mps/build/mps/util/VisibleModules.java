package jetbrains.mps.build.mps.util;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.TransientModelsModule;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.build.util.DependenciesHelper;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SModelReference;

public class VisibleModules {
  private List<SNode> allModules = new ArrayList<SNode>();
  private Map<String, SNode> moduleByName = new HashMap<String, SNode>();
  private Map<String, SNode> moduleById = new HashMap<String, SNode>();
  private SNode project;
  private TemplateQueryContext genContext;

  public VisibleModules(SNode project, @Nullable TemplateQueryContext genContext) {
    this.project = project;
    this.genContext = genContext;
    if (genContext == null && SNodeOperations.getModel(project).getModule() instanceof TransientModelsModule) {
      throw new IllegalArgumentException("cannot instantiate VisibleModules for transient model without generation context");
    }
  }

  public void collect() {
    Queue<SNode> queue = QueueSequence.fromQueue(new LinkedList<SNode>());
    QueueSequence.fromQueue(queue).addLastElement(project);
    Set<SNode> seen = SetSequence.fromSet(new HashSet<SNode>());
    while (QueueSequence.fromQueue(queue).isNotEmpty()) {
      SNode project = QueueSequence.fromQueue(queue).removeFirstElement();
      for (SNode dep : SLinkOperations.getTargets(project, "dependencies", true)) {
        SNode projectDependency = SNodeOperations.as(dep, "jetbrains.mps.build.structure.BuildProjectDependency");
        if (projectDependency == null) {
          continue;
        }

        SNode depproj = SLinkOperations.getTarget(projectDependency, "script", false);
        if ((depproj == null)) {
          SReference ref = SNodeOperations.getReference(projectDependency, SLinkOperations.findLinkDeclaration("jetbrains.mps.build.structure.BuildProjectDependency", "script"));
          report("cannot find dependent build script " + SLinkOperations.getResolveInfo(ref) + " in model " + check_xuwpka_a0a1a4a1a3a6(ref.getTargetSModelReference()), projectDependency);
        }
        depproj = SNodeOperations.as(DependenciesHelper.getOriginalNode(depproj, genContext), "jetbrains.mps.build.structure.BuildProject");
        if (depproj != null && seen.add(depproj)) {
          QueueSequence.fromQueue(queue).addLastElement(depproj);
        }
      }
      ListSequence.fromList(allModules).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(project, "jetbrains.mps.build.mps.structure.BuildMps_AbstractModule", false, new String[]{})));
    }
    for (SNode module : allModules) {
      if (moduleById.containsKey(SPropertyOperations.getString(module, "uuid"))) {
        report("found two modules with the same id: " + SPropertyOperations.getString(module, "uuid"), project);
      }
      moduleById.put(SPropertyOperations.getString(module, "uuid"), module);
      if (moduleByName.containsKey(SPropertyOperations.getString(module, "name"))) {
        report("found two modules with the same name: " + SPropertyOperations.getString(module, "name"), project);
      }
      moduleByName.put(SPropertyOperations.getString(module, "name"), module);
    }
  }

  protected void report(String message, SNode anchor) {
    if (genContext != null) {
      genContext.showErrorMessage(anchor, message);
    }
  }

  public SNode resolve(String moduleName, String moduleId) {
    SNode result = null;
    if (moduleId != null) {
      result = moduleById.get(moduleId);
    }
    if (result == null && moduleName != null) {
      result = moduleByName.get(moduleName);
    }
    return result;
  }

  private static String check_xuwpka_a0a1a4a1a3a6(SModelReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelName();
    }
    return null;
  }
}
