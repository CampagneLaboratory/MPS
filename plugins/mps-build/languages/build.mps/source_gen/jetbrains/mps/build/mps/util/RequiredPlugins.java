package jetbrains.mps.build.mps.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.util.containers.ConcurrentHashSet;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.build.util.GenerationUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.build.util.DependenciesHelper;

public class RequiredPlugins {
  private static final String KEY = "pluginDependency";
  private final TemplateQueryContext myContext;
  private final ConcurrentHashSet<SNode> myDependency;
  private final SNode myRoot;
  private final List<SNode> myPlugins = ListSequence.fromList(new ArrayList<SNode>());
  public RequiredPlugins(SNode project, TemplateQueryContext genContext) {
    myContext = genContext;
    ListSequence.fromList(myPlugins).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(project, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPlugin", false, new String[]{})));
    myRoot = project;
    myDependency = GenerationUtil.<SNode>getSessionSet(project, genContext, KEY);
  }
  public RequiredPlugins(TemplateQueryContext genContext, SNode initialPlugin) {
    myContext = genContext;
    ListSequence.fromList(myPlugins).addElement(initialPlugin);
    myRoot = SNodeOperations.getContainingRoot(initialPlugin);
    myDependency = GenerationUtil.<SNode>getSessionSet(SNodeOperations.as(myRoot, "jetbrains.mps.build.structure.BuildProject"), genContext, KEY);
  }
  public RequiredPlugins(TemplateQueryContext genContext, SNode root, Iterable<SNode> initialPlugins) {
    myContext = genContext;
    ListSequence.fromList(myPlugins).addSequence(Sequence.fromIterable(initialPlugins));
    myRoot = root;
    myDependency = GenerationUtil.<SNode>getSessionSet(SNodeOperations.as(myRoot, "jetbrains.mps.build.structure.BuildProject"), genContext, KEY);
  }
  public void collectDependencies() {
    Set<SNode> visited = SetSequence.fromSet(new LinkedHashSet<SNode>());
    for (SNode plugin : ListSequence.fromList(myPlugins)) {
      collectDependencies(plugin, visited);
    }
    myDependency.addAll(SetSequence.fromSet(visited).subtract(ListSequence.fromList(myPlugins)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    }).toListSequence());
  }
  public Iterable<SNode> returnDependencies() {
    Set<SNode> visited = SetSequence.fromSet(new LinkedHashSet<SNode>());
    for (SNode plugin : ListSequence.fromList(myPlugins)) {
      collectDependencies(plugin, visited);
    }
    return SetSequence.fromSet(visited).subtract(ListSequence.fromList(myPlugins)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    }).toListSequence();
  }
  private void collectDependencies(SNode plugin, Set<SNode> visited) {
    SetSequence.fromSet(visited).addElement(plugin);
    for (SNode dependency : ListSequence.fromList(SLinkOperations.getChildren(plugin, MetaAdapterFactory.getContainmentLink(new UUID(934837630734519964l, -6831122735637083229l), 6592112598314498932l, 6592112598314499028l, "dependencies")))) {
      SNode dependencyPlugin = SLinkOperations.getTarget(dependency, MetaAdapterFactory.getReferenceLink(new UUID(934837630734519964l, -6831122735637083229l), 6592112598314499027l, 6592112598314499066l, "target"));
      if (SNodeOperations.getContainingRoot(dependencyPlugin) != myRoot) {
        dependencyPlugin = SNodeOperations.as(DependenciesHelper.getOriginalNode(dependencyPlugin, myContext), "jetbrains.mps.build.mps.structure.BuildMps_IdeaPlugin");
        if (dependencyPlugin == null) {
          continue;
        }
      }
      if (!(SetSequence.fromSet(visited).contains(dependencyPlugin))) {
        collectDependencies(dependencyPlugin, visited);
      }
    }
  }
  public Iterable<SNode> getDependency() {
    return myDependency;
  }
  public Iterable<SNode> getDependencyInsideCurrent() {
    return myPlugins;
  }
}
