package jetbrains.mps.build.mps.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.build.util.DependenciesHelper;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class RequiredPlugins {
  private final TemplateQueryContext myContext;
  private Iterable<SNode> myDependency;
  private final List<SNode> myPlugins = ListSequence.fromList(new ArrayList<SNode>());

  public RequiredPlugins(TemplateQueryContext genContext, SNode project) {
    this(genContext, SNodeOperations.getDescendants(project, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPlugin", false, new String[]{}));
  }

  public RequiredPlugins(TemplateQueryContext genContext, Iterable<SNode> initialPlugins) {
    myContext = genContext;
    ListSequence.fromList(myPlugins).addSequence(Sequence.fromIterable(initialPlugins));
  }

  public void collectDependency() {
    Set<SNode> visited = SetSequence.fromSet(new LinkedHashSet<SNode>());
    for (SNode plugin : ListSequence.fromList(myPlugins)) {
      collectDependencies(plugin, visited);
    }
    myDependency = SetSequence.fromSet(visited).subtract(ListSequence.fromList(myPlugins)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.as(DependenciesHelper.getOriginalNode(it, myContext), "jetbrains.mps.build.mps.structure.BuildMps_IdeaPlugin");
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    });
  }

  private void collectDependencies(SNode plugin, Set<SNode> visited) {
    SetSequence.fromSet(visited).addElement(plugin);
    for (SNode dependency : ListSequence.fromList(SLinkOperations.getTargets(plugin, "dependencies", true))) {
      if (!(SetSequence.fromSet(visited).contains(SLinkOperations.getTarget(dependency, "target", false)))) {
        collectDependencies(SLinkOperations.getTarget(dependency, "target", false), visited);
      }
    }
  }

  public Iterable<SNode> getDependency() {
    return myDependency;
  }
}
