package jetbrains.mps.build.mps.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.build.util.DescendantsScope;
import jetbrains.mps.build.behavior.BuildPlugin_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.build.util.VisibleArtifacts;
import jetbrains.mps.build.util.RequiredDependenciesBuilder;
import jetbrains.mps.build.util.DependenciesHelper;
import jetbrains.mps.build.mps.util.VisibleModules;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.core.behavior.ScopeProvider_Behavior;
import jetbrains.mps.build.util.ScopeUtil;
import jetbrains.mps.scope.CompositeScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.build.behavior.BuildProject_Behavior;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class BuildMPSPlugin_Behavior {
  public static void init(SNode thisNode) {
  }

  public static Scope virtual_getLayoutScope_1224588814561807654(SNode thisNode, SNode kind) {
    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.build.mps.structure.BuildMps_AbstractModule") || SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.build.mps.structure.BuildMps_Group") || SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPlugin")) {
      return DescendantsScope.forNamedElements(BuildPlugin_Behavior.call_getProject_1224588814561866657(thisNode), SLinkOperations.findLinkDeclaration("jetbrains.mps.build.structure.BuildProject", "parts"), kind);
    }

    return null;
  }

  public static void virtual_fetchDependencies_5908258303322131137(SNode thisNode, VisibleArtifacts artifacts, RequiredDependenciesBuilder builder) {

    SNode project = artifacts.getProject();
    DependenciesHelper helper = new DependenciesHelper(artifacts.getGenContext(), artifacts.getProject());
    VisibleModules visibleModules = new VisibleModules(project, artifacts.getGenContext());
    visibleModules.collect();
    BuildMPSPlugin_Behavior.call_findModule_3643570831019325688(thisNode, visibleModules, "jetbrains.mps.ant", "77c9a130-703f-4530-bf21-6580757768d0", artifacts, builder, helper);

    SNode originalProject = SNodeOperations.as(DependenciesHelper.getOriginalNode(project, artifacts.getGenContext()), "jetbrains.mps.build.structure.BuildProject");
    SNode mpsCoreModule = SNodeOperations.as(ScopeProvider_Behavior.call_getScope_7722139651431880752(originalProject, SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildSource_JavaModule"), "parts", 0).resolve(originalProject, "mps-core"), "jetbrains.mps.build.structure.BuildSource_JavaModule");
    if ((mpsCoreModule != null)) {
      SNode mpsCoreJar = SNodeOperations.as(artifacts.findArtifact(mpsCoreModule), "jetbrains.mps.build.structure.BuildLayout_Node");
      if ((mpsCoreJar != null)) {
        helper.artifacts().put("mps-core", mpsCoreJar);
        builder.add(mpsCoreJar, mpsCoreModule);
      }

      SNode mpsCore = SNodeOperations.as(SNodeOperations.getContainingRoot(mpsCoreModule), "jetbrains.mps.build.structure.BuildProject");
      Scope visibleJarsScope = ScopeUtil.getVisibleJarsScope(mpsCore);
      SNode jdom = visibleJarsScope.resolve(mpsCore, "IDEA::lib/jdom.jar");
      if ((jdom != null)) {
        SNode jdomJar = SNodeOperations.as(artifacts.findArtifact(jdom), "jetbrains.mps.build.structure.BuildLayout_Node");
        if ((jdomJar != null)) {
          helper.artifacts().put("jdom", jdomJar);
          builder.add(jdomJar, jdom);
        }
      }
      SNode log4j = visibleJarsScope.resolve(mpsCore, "IDEA::lib/log4j.jar");
      if ((log4j != null)) {
        SNode log4jJar = SNodeOperations.as(artifacts.findArtifact(log4j), "jetbrains.mps.build.structure.BuildLayout_Node");
        if ((log4jJar != null)) {
          helper.artifacts().put("log4j", log4jJar);
          builder.add(log4jJar, log4j);
        }
      }
    }

  }

  public static Scope virtual_getProjectStructureScope_3734116213129936182(SNode thisNode, final SNode kind) {
    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.build.mps.structure.BuildMps_AbstractModule") || SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.build.mps.structure.BuildMps_IdeaPlugin") || SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.build.mps.structure.BuildMps_Group")) {
      return new CompositeScope(Sequence.fromIterable(BuildProject_Behavior.call_getVisibleProjects_1224588814561807665(BuildPlugin_Behavior.call_getProject_1224588814561866657(thisNode), false)).select(new ISelector<SNode, DescendantsScope>() {
        public DescendantsScope select(SNode it) {
          return DescendantsScope.forNamedElements(it, SLinkOperations.findLinkDeclaration("jetbrains.mps.build.structure.BuildProject", "parts"), kind);
        }
      }).concat(Sequence.fromIterable(Sequence.<DescendantsScope>singleton(DescendantsScope.forNamedElements(BuildPlugin_Behavior.call_getProject_1224588814561866657(thisNode), SLinkOperations.findLinkDeclaration("jetbrains.mps.build.structure.BuildProject", "parts"), kind)))).toGenericArray(DescendantsScope.class));
    }
    return null;
  }

  public static void call_findModule_3643570831019325688(SNode thisNode, VisibleModules visibleModules, String fqName, String uid, VisibleArtifacts artifacts, RequiredDependenciesBuilder builder, DependenciesHelper helper) {
    SNode module = visibleModules.resolve(fqName, uid);
    if ((module != null)) {
      if (SNodeOperations.getContainingRoot(module) != SNodeOperations.getContainingRoot(thisNode)) {
        SNode moduleJar = SNodeOperations.as(artifacts.findArtifact(module), "jetbrains.mps.build.structure.BuildLayout_Node");
        if (moduleJar != null) {
          helper.artifacts().put(SPropertyOperations.getString(module, "uuid"), moduleJar);
          builder.add(moduleJar, module);
        }
      }
    }
  }
}
