package jetbrains.mps.build.workflow.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBwfAntStatement = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfAntStatement").super_("jetbrains.mps.build.workflow.structure.BwfStatement").parents("jetbrains.mps.build.workflow.structure.BwfStatement").children(new String[]{"element"}, new boolean[]{false}).alias("ant", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfAntTaskBundleDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfAntTaskBundleDeclaration").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart").properties("resource").references("classpath").alias("ant task bundle", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfAntTaskDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfAntTaskDeclaration").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart", "jetbrains.mps.lang.core.structure.INamedConcept").properties("classname").references("classpath").alias("ant taskdef", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfCustomMacro = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfCustomMacro").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart").children(new String[]{"elements"}, new boolean[]{true}).alias("custom macro", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("path").create();
  /*package*/ final ConceptDescriptor myConceptBwfFileSet = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfFileSet").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"elements"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptBwfJavaClassPath = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaClassPath").super_("jetbrains.mps.build.workflow.structure.BwfJavaDependency").parents("jetbrains.mps.build.workflow.structure.BwfJavaDependency").children(new String[]{"classpath"}, new boolean[]{false}).alias("cp", "classpath value").create();
  /*package*/ final ConceptDescriptor myConceptBwfJavaDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBwfJavaDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaDescriptor").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart").alias("java descriptor", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfJavaLibrary = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaLibrary").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"classpath"}, new boolean[]{true}).alias("java library", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfJavaLibraryReference = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaLibraryReference").super_("jetbrains.mps.build.workflow.structure.BwfJavaDependency").parents("jetbrains.mps.build.workflow.structure.BwfJavaDependency").references("target").alias("library", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfJavaModule = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaModule").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart", "jetbrains.mps.lang.core.structure.INamedConcept").properties("outputFolder", "generateDebugInfo", "heapSize", "noWarnings", "compiler", "javaLevelSource", "javaLevelTarget", "compilerOptions").children(new String[]{"sources", "resources", "dependencies", "taskDeps", "prepareStatements"}, new boolean[]{false, false, true, true, true}).alias("compile java module", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfJavaModuleReference = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaModuleReference").super_("jetbrains.mps.build.workflow.structure.BwfJavaDependency").parents("jetbrains.mps.build.workflow.structure.BwfJavaDependency").references("target").create();
  /*package*/ final ConceptDescriptor myConceptBwfMacro = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfMacro").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart", "jetbrains.mps.lang.core.structure.INamedConcept").properties("defaultValue", "exportToProperiesFile", "isLocation", "uninitialized").alias("macro", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfMacroListImport = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfMacroListImport").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart").properties("prefix", "propertiesFile").alias("import macros", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfPathDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfPathDeclaration").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"content"}, new boolean[]{true}).alias("path", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfPathReference = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfPathReference").super_("jetbrains.mps.core.xml.structure.XmlBaseElement").parents("jetbrains.mps.core.xml.structure.XmlBaseElement").references("target").alias("<pathref <{target}>>", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfProject = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfProject").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").properties("temporaryFolder", "baseDirectory").children(new String[]{"parts", "imports"}, new boolean[]{true, true}).alias("build workflow project", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfProjectPart = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfProjectPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBwfProjectPartStatement = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfProjectPartStatement").super_("jetbrains.mps.build.workflow.structure.BwfStatement").parents("jetbrains.mps.build.workflow.structure.BwfStatement").children(new String[]{"part"}, new boolean[]{false}).alias("project part", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfStatement = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfStatement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").alias("<empty>", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfSubTask = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfSubTask").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"after", "before", "statements"}, new boolean[]{true, true, true}).alias("subtask", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfSubTaskDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfSubTaskDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("target").create();
  /*package*/ final ConceptDescriptor myConceptBwfTask = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfTask").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"dependencies", "subTasks"}, new boolean[]{true, true}).alias("task", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfTaskDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfTaskDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("target").create();
  /*package*/ final ConceptDescriptor myConceptBwfTaskLibrary = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfTaskLibrary").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"parts", "imports"}, new boolean[]{true, true}).alias("build tasks library", "").create();
  /*package*/ final ConceptDescriptor myConceptBwfTaskLibraryDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfTaskLibraryDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("target").create();
  /*package*/ final ConceptDescriptor myConceptBwfTaskPart = new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfTaskPart").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart", "jetbrains.mps.lang.core.structure.ScopeProvider").references("task").children(new String[]{"subTasks", "additionalDependencies"}, new boolean[]{true, true}).alias("task part", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBwfAntStatement, myConceptBwfAntTaskBundleDeclaration, myConceptBwfAntTaskDeclaration, myConceptBwfCustomMacro, myConceptBwfDependency, myConceptBwfFileSet, myConceptBwfJavaClassPath, myConceptBwfJavaDependency, myConceptBwfJavaDescriptor, myConceptBwfJavaLibrary, myConceptBwfJavaLibraryReference, myConceptBwfJavaModule, myConceptBwfJavaModuleReference, myConceptBwfMacro, myConceptBwfMacroListImport, myConceptBwfPathDeclaration, myConceptBwfPathReference, myConceptBwfProject, myConceptBwfProjectPart, myConceptBwfProjectPartStatement, myConceptBwfStatement, myConceptBwfSubTask, myConceptBwfSubTaskDependency, myConceptBwfTask, myConceptBwfTaskDependency, myConceptBwfTaskLibrary, myConceptBwfTaskLibraryDependency, myConceptBwfTaskPart);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0fb, conceptFqName)) {
      case 0:
        return myConceptBwfAntStatement;
      case 1:
        return myConceptBwfAntTaskBundleDeclaration;
      case 2:
        return myConceptBwfAntTaskDeclaration;
      case 3:
        return myConceptBwfCustomMacro;
      case 4:
        return myConceptBwfDependency;
      case 5:
        return myConceptBwfFileSet;
      case 6:
        return myConceptBwfJavaClassPath;
      case 7:
        return myConceptBwfJavaDependency;
      case 8:
        return myConceptBwfJavaDescriptor;
      case 9:
        return myConceptBwfJavaLibrary;
      case 10:
        return myConceptBwfJavaLibraryReference;
      case 11:
        return myConceptBwfJavaModule;
      case 12:
        return myConceptBwfJavaModuleReference;
      case 13:
        return myConceptBwfMacro;
      case 14:
        return myConceptBwfMacroListImport;
      case 15:
        return myConceptBwfPathDeclaration;
      case 16:
        return myConceptBwfPathReference;
      case 17:
        return myConceptBwfProject;
      case 18:
        return myConceptBwfProjectPart;
      case 19:
        return myConceptBwfProjectPartStatement;
      case 20:
        return myConceptBwfStatement;
      case 21:
        return myConceptBwfSubTask;
      case 22:
        return myConceptBwfSubTaskDependency;
      case 23:
        return myConceptBwfTask;
      case 24:
        return myConceptBwfTaskDependency;
      case 25:
        return myConceptBwfTaskLibrary;
      case 26:
        return myConceptBwfTaskLibraryDependency;
      case 27:
        return myConceptBwfTaskPart;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0fb = new String[]{"jetbrains.mps.build.workflow.structure.BwfAntStatement", "jetbrains.mps.build.workflow.structure.BwfAntTaskBundleDeclaration", "jetbrains.mps.build.workflow.structure.BwfAntTaskDeclaration", "jetbrains.mps.build.workflow.structure.BwfCustomMacro", "jetbrains.mps.build.workflow.structure.BwfDependency", "jetbrains.mps.build.workflow.structure.BwfFileSet", "jetbrains.mps.build.workflow.structure.BwfJavaClassPath", "jetbrains.mps.build.workflow.structure.BwfJavaDependency", "jetbrains.mps.build.workflow.structure.BwfJavaDescriptor", "jetbrains.mps.build.workflow.structure.BwfJavaLibrary", "jetbrains.mps.build.workflow.structure.BwfJavaLibraryReference", "jetbrains.mps.build.workflow.structure.BwfJavaModule", "jetbrains.mps.build.workflow.structure.BwfJavaModuleReference", "jetbrains.mps.build.workflow.structure.BwfMacro", "jetbrains.mps.build.workflow.structure.BwfMacroListImport", "jetbrains.mps.build.workflow.structure.BwfPathDeclaration", "jetbrains.mps.build.workflow.structure.BwfPathReference", "jetbrains.mps.build.workflow.structure.BwfProject", "jetbrains.mps.build.workflow.structure.BwfProjectPart", "jetbrains.mps.build.workflow.structure.BwfProjectPartStatement", "jetbrains.mps.build.workflow.structure.BwfStatement", "jetbrains.mps.build.workflow.structure.BwfSubTask", "jetbrains.mps.build.workflow.structure.BwfSubTaskDependency", "jetbrains.mps.build.workflow.structure.BwfTask", "jetbrains.mps.build.workflow.structure.BwfTaskDependency", "jetbrains.mps.build.workflow.structure.BwfTaskLibrary", "jetbrains.mps.build.workflow.structure.BwfTaskLibraryDependency", "jetbrains.mps.build.workflow.structure.BwfTaskPart"};
}
