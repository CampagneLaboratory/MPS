package jetbrains.mps.build.workflow.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {

  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BwfAntStatement_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new BwfAntTaskBundleDeclaration_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new BwfAntTaskDeclaration_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new BwfCustomMacro_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new BwfDependency_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new BwfFileSet_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new BwfJavaClassPath_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new BwfJavaDependency_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new BwfJavaDescriptor_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new BwfJavaLibrary_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new BwfJavaLibraryReference_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new BwfJavaModule_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new BwfJavaModuleReference_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new BwfMacro_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new BwfMacroListImport_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new BwfPathDeclaration_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new BwfPathReference_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new BwfProject_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new BwfProjectPart_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new BwfProjectPartStatement_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new BwfStatement_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new BwfSubTask_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new BwfSubTaskDependency_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new BwfTask_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new BwfTaskDependency_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new BwfTaskLibrary_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new BwfTaskLibraryDependency_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new BwfTaskPart_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    return Collections.<ConceptEditorComponent>emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"jetbrains.mps.build.workflow.structure.BwfAntStatement", "jetbrains.mps.build.workflow.structure.BwfAntTaskBundleDeclaration", "jetbrains.mps.build.workflow.structure.BwfAntTaskDeclaration", "jetbrains.mps.build.workflow.structure.BwfCustomMacro", "jetbrains.mps.build.workflow.structure.BwfDependency", "jetbrains.mps.build.workflow.structure.BwfFileSet", "jetbrains.mps.build.workflow.structure.BwfJavaClassPath", "jetbrains.mps.build.workflow.structure.BwfJavaDependency", "jetbrains.mps.build.workflow.structure.BwfJavaDescriptor", "jetbrains.mps.build.workflow.structure.BwfJavaLibrary", "jetbrains.mps.build.workflow.structure.BwfJavaLibraryReference", "jetbrains.mps.build.workflow.structure.BwfJavaModule", "jetbrains.mps.build.workflow.structure.BwfJavaModuleReference", "jetbrains.mps.build.workflow.structure.BwfMacro", "jetbrains.mps.build.workflow.structure.BwfMacroListImport", "jetbrains.mps.build.workflow.structure.BwfPathDeclaration", "jetbrains.mps.build.workflow.structure.BwfPathReference", "jetbrains.mps.build.workflow.structure.BwfProject", "jetbrains.mps.build.workflow.structure.BwfProjectPart", "jetbrains.mps.build.workflow.structure.BwfProjectPartStatement", "jetbrains.mps.build.workflow.structure.BwfStatement", "jetbrains.mps.build.workflow.structure.BwfSubTask", "jetbrains.mps.build.workflow.structure.BwfSubTaskDependency", "jetbrains.mps.build.workflow.structure.BwfTask", "jetbrains.mps.build.workflow.structure.BwfTaskDependency", "jetbrains.mps.build.workflow.structure.BwfTaskLibrary", "jetbrains.mps.build.workflow.structure.BwfTaskLibraryDependency", "jetbrains.mps.build.workflow.structure.BwfTaskPart"};
}
