package jetbrains.mps.build.workflow.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.Set;
import java.util.LinkedHashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.build.workflow.constraints.TaskLibrariesHelper;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_BwfTaskLibrary_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_BwfTaskLibrary_NonTypesystemRule() {
  }

  public void applyRule(final SNode lib, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Set<SNode> libsSet = new LinkedHashSet<SNode>();
    libsSet.add(lib);
    for (SNode tldep : SLinkOperations.getTargets(lib, "imports", true)) {
      libsSet.add(SLinkOperations.getTarget(tldep, "target", false));
    }

    TaskLibrariesHelper.closure(libsSet);
    for (SNode n : SNodeOperations.getDescendants(lib, null, true)) {
      for (SReference ref : SNodeOperations.getReferences(n)) {
        SNode targetNode = ref.getTargetNodeSilently();
        if (targetNode != null && !(libsSet.contains(targetNode.getTopmostAncestor()))) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(n, "broken reference, target is not imported", "r:aa7cee44-7e41-4ff3-b944-4eb707b62ad6(jetbrains.mps.build.workflow.typesystem)", "1117643560963219163", null, errorTarget);
          }
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.build.workflow.structure.BwfTaskLibrary";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getId(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
