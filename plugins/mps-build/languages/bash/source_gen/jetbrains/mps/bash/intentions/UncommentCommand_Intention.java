package jetbrains.mps.bash.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class UncommentCommand_Intention extends BaseIntention {
  public UncommentCommand_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  public String getPresentation() {
    return "UncommentCommand";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.bash.intentions.UncommentCommand_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:449f0c54-6de9-4a62-8b1d-d95ab9261c6a(jetbrains.mps.bash.intentions@1_0)", "3138930635767444923");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Uncomment This Line";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SNodeOperations.getAncestor(node, "jetbrains.mps.bash.structure.CommentedCommandList", true, false) != null);
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode commentedCommandList = SNodeOperations.getAncestor(node, "jetbrains.mps.bash.structure.CommentedCommandList", true, false);
    SNodeOperations.replaceWithAnother(commentedCommandList, SLinkOperations.getTarget(commentedCommandList, "commandList", true));
  }
}
