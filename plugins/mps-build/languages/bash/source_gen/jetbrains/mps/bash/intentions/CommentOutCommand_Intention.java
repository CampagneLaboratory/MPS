package jetbrains.mps.bash.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class CommentOutCommand_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public CommentOutCommand_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  public String getPresentation() {
    return "CommentOutCommand";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.bash.intentions.CommentOutCommand_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SNodeOperations.getAncestor(node, "jetbrains.mps.bash.structure.CommandList", true, false) != null) && !((SNodeOperations.getAncestor(node, "jetbrains.mps.bash.structure.CommentedCommandList", true, false) != null));
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:0c717a24-7cfd-444b-8c1a-bb7f81471ed8(jetbrains.mps.bash.intentions)", "1109366303090554669");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new CommentOutCommand_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Comment Out This Line";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode commandList = SNodeOperations.getAncestor(node, "jetbrains.mps.bash.structure.CommandList", true, false);
      SNode commentedCommandList = SNodeFactoryOperations.createNewNode("jetbrains.mps.bash.structure.CommentedCommandList", null);
      SNodeOperations.replaceWithAnother(commandList, commentedCommandList);
      SLinkOperations.setTarget(commentedCommandList, "commandList", commandList, true);
    }

    public IntentionDescriptor getDescriptor() {
      return CommentOutCommand_Intention.this;
    }
  }
}
