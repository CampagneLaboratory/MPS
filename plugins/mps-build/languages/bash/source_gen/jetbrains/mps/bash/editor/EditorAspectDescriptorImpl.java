package jetbrains.mps.bash.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.node.EditorAspectDescriptor;
import jetbrains.mps.openapi.editor.node.EditorAspect;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public EditorAspect getAspect(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return new AbstractCommand_Editor();
      case 1:
        return new AppendingOutputErrorRedirection_Editor();
      case 2:
        return new AppendingOutputRedirection_Editor();
      case 3:
        return new Argument_Editor();
      case 4:
        return new ArgumentList_Editor();
      case 5:
        return new ArgumentListReference_Editor();
      case 6:
        return new ArgumentReference_Editor();
      case 7:
        return new ArithmeticCommand_Editor();
      case 8:
        return new ArithmeticExpansion_Editor();
      case 9:
        return new AsyncTerminator_Editor();
      case 10:
        return new BaseAssingmentExpression_Editor();
      case 11:
        return new BaseCommandSubstitution_Editor();
      case 12:
        return new BaseVariableAssingment_Editor();
      case 13:
        return new BasedIntegerLiteral_Editor();
      case 14:
        return new BasicParameterExpansion_Editor();
      case 15:
        return new BinaryArithmeticExpression_Editor();
      case 16:
        return new BinaryConditionalExpression_Editor();
      case 17:
        return new BracketConditionalExpression_Editor();
      case 18:
        return new BracketExpression_Editor();
      case 19:
        return new CaseClause_Editor();
      case 20:
        return new CaseCommand_Editor();
      case 21:
        return new CaseTerminator_Editor();
      case 22:
        return new CombiningConditionalExpression_Editor();
      case 23:
        return new Command_Editor();
      case 24:
        return new CommandList_Editor();
      case 25:
        return new CommandTerminator_Editor();
      case 26:
        return new CommentedCommandList_Editor();
      case 27:
        return new CommentedFollowingCommandList_Editor();
      case 28:
        return new CommentedText_Editor();
      case 29:
        return new ConditionalCommand_Editor();
      case 30:
        return new ConditionalOperation_Editor();
      case 31:
        return new DecimalConstant_Editor();
      case 32:
        return new DuplicateInputFileDiscriptor_Editor();
      case 33:
        return new DuplicateOutputFileDiscriptor_Editor();
      case 34:
        return new ElifCommand_Editor();
      case 35:
        return new ExternalCommandCall_Editor();
      case 36:
        return new ExternalCommandDeclaration_Editor();
      case 37:
        return new FollowingCommandList_Editor();
      case 38:
        return new FollowingPipeline_Editor();
      case 39:
        return new ForCommand_Editor();
      case 40:
        return new ForeachCommand_Editor();
      case 41:
        return new FreeCommand_Editor();
      case 42:
        return new FunctionCallCommand_Editor();
      case 43:
        return new FunctionDeclaration_Editor();
      case 44:
        return new GeneralizedWord_Editor();
      case 45:
        return new GroupingCommand_Editor();
      case 46:
        return new HeadCommandList_Editor();
      case 47:
        return new HeadPipeline_Editor();
      case 48:
        return new HereDocumentRedirection_Editor();
      case 49:
        return new HereStringRedirection_Editor();
      case 50:
        return new HexIntegerLiteral_Editor();
      case 51:
        return new IfCommand_Editor();
      case 52:
        return new InputLines_Editor();
      case 53:
        return new InputRedirection_Editor();
      case 54:
        return new NotCommand_Editor();
      case 55:
        return new Option_Editor();
      case 56:
        return new OptionReference_Editor();
      case 57:
        return new OptionSet_Editor();
      case 58:
        return new OptionSetReference_Editor();
      case 59:
        return new OptionWithParam_Editor();
      case 60:
        return new OptionWithParamReference_Editor();
      case 61:
        return new OutputErrorRedirection_Editor();
      case 62:
        return new OutputRedirection_Editor();
      case 63:
        return new PostVariableExpression_Editor();
      case 64:
        return new PreVariableExpression_Editor();
      case 65:
        return new QuotedWord_Editor();
      case 66:
        return new QuotesCommandSubstitution_Editor();
      case 67:
        return new ReadingWritingRedirection_Editor();
      case 68:
        return new RedirectedCommand_Editor();
      case 69:
        return new SelectCommand_Editor();
      case 70:
        return new SemicolonTerminator_Editor();
      case 71:
        return new ShellScript_Editor();
      case 72:
        return new SimpleCommand_Editor();
      case 73:
        return new SimpleWord_Editor();
      case 74:
        return new StringConditionalExpression_Editor();
      case 75:
        return new TildeExpansion_Editor();
      case 76:
        return new UnaryArithmeticExpression_Editor();
      case 77:
        return new UnaryConditionalExpression_Editor();
      case 78:
        return new UntilLoopCommand_Editor();
      case 79:
        return new VariableNameDeclaration_Editor();
      case 80:
        return new VariableReference_Editor();
      case 81:
        return new WhileLoopCommand_Editor();
      case 82:
        return new WordList_Editor();
      default:
    }
    return null;
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.AppendingOutputErrorRedirection", "jetbrains.mps.bash.structure.AppendingOutputRedirection", "jetbrains.mps.bash.structure.Argument", "jetbrains.mps.bash.structure.ArgumentList", "jetbrains.mps.bash.structure.ArgumentListReference", "jetbrains.mps.bash.structure.ArgumentReference", "jetbrains.mps.bash.structure.ArithmeticCommand", "jetbrains.mps.bash.structure.ArithmeticExpansion", "jetbrains.mps.bash.structure.AsyncTerminator", "jetbrains.mps.bash.structure.BaseAssingmentExpression", "jetbrains.mps.bash.structure.BaseCommandSubstitution", "jetbrains.mps.bash.structure.BaseVariableAssingment", "jetbrains.mps.bash.structure.BasedIntegerLiteral", "jetbrains.mps.bash.structure.BasicParameterExpansion", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.BracketConditionalExpression", "jetbrains.mps.bash.structure.BracketExpression", "jetbrains.mps.bash.structure.CaseClause", "jetbrains.mps.bash.structure.CaseCommand", "jetbrains.mps.bash.structure.CaseTerminator", "jetbrains.mps.bash.structure.CombiningConditionalExpression", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.CommandList", "jetbrains.mps.bash.structure.CommandTerminator", "jetbrains.mps.bash.structure.CommentedCommandList", "jetbrains.mps.bash.structure.CommentedFollowingCommandList", "jetbrains.mps.bash.structure.CommentedText", "jetbrains.mps.bash.structure.ConditionalCommand", "jetbrains.mps.bash.structure.ConditionalOperation", "jetbrains.mps.bash.structure.DecimalConstant", "jetbrains.mps.bash.structure.DuplicateInputFileDiscriptor", "jetbrains.mps.bash.structure.DuplicateOutputFileDiscriptor", "jetbrains.mps.bash.structure.ElifCommand", "jetbrains.mps.bash.structure.ExternalCommandCall", "jetbrains.mps.bash.structure.ExternalCommandDeclaration", "jetbrains.mps.bash.structure.FollowingCommandList", "jetbrains.mps.bash.structure.FollowingPipeline", "jetbrains.mps.bash.structure.ForCommand", "jetbrains.mps.bash.structure.ForeachCommand", "jetbrains.mps.bash.structure.FreeCommand", "jetbrains.mps.bash.structure.FunctionCallCommand", "jetbrains.mps.bash.structure.FunctionDeclaration", "jetbrains.mps.bash.structure.GeneralizedWord", "jetbrains.mps.bash.structure.GroupingCommand", "jetbrains.mps.bash.structure.HeadCommandList", "jetbrains.mps.bash.structure.HeadPipeline", "jetbrains.mps.bash.structure.HereDocumentRedirection", "jetbrains.mps.bash.structure.HereStringRedirection", "jetbrains.mps.bash.structure.HexIntegerLiteral", "jetbrains.mps.bash.structure.IfCommand", "jetbrains.mps.bash.structure.InputLines", "jetbrains.mps.bash.structure.InputRedirection", "jetbrains.mps.bash.structure.NotCommand", "jetbrains.mps.bash.structure.Option", "jetbrains.mps.bash.structure.OptionReference", "jetbrains.mps.bash.structure.OptionSet", "jetbrains.mps.bash.structure.OptionSetReference", "jetbrains.mps.bash.structure.OptionWithParam", "jetbrains.mps.bash.structure.OptionWithParamReference", "jetbrains.mps.bash.structure.OutputErrorRedirection", "jetbrains.mps.bash.structure.OutputRedirection", "jetbrains.mps.bash.structure.PostVariableExpression", "jetbrains.mps.bash.structure.PreVariableExpression", "jetbrains.mps.bash.structure.QuotedWord", "jetbrains.mps.bash.structure.QuotesCommandSubstitution", "jetbrains.mps.bash.structure.ReadingWritingRedirection", "jetbrains.mps.bash.structure.RedirectedCommand", "jetbrains.mps.bash.structure.SelectCommand", "jetbrains.mps.bash.structure.SemicolonTerminator", "jetbrains.mps.bash.structure.ShellScript", "jetbrains.mps.bash.structure.SimpleCommand", "jetbrains.mps.bash.structure.SimpleWord", "jetbrains.mps.bash.structure.StringConditionalExpression", "jetbrains.mps.bash.structure.TildeExpansion", "jetbrains.mps.bash.structure.UnaryArithmeticExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression", "jetbrains.mps.bash.structure.UntilLoopCommand", "jetbrains.mps.bash.structure.VariableNameDeclaration", "jetbrains.mps.bash.structure.VariableReference", "jetbrains.mps.bash.structure.WhileLoopCommand", "jetbrains.mps.bash.structure.WordList"};
}
