package jetbrains.mps.build.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.concurrent.ConcurrentMap;
import jetbrains.mps.build.util.GenerationUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.build.util.Context;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class BuildLayout_CopyProcessor_Behavior {
  public static void init(SNode thisNode) {
  }

  public static String call_getTempFolder_1330375798096391716(SNode thisNode, TemplateQueryContext genContext) {
    SNode project = SNodeOperations.getAncestor(thisNode, "jetbrains.mps.build.structure.BuildProject", false, false);
    ConcurrentMap<SNode, String> map = GenerationUtil.<SNode,String>getTransientMap(project, genContext, "handlerOutputPath");
    String outpath = map.get(thisNode);
    if (outpath != null) {
      return outpath;
    }

    String name = "default";
    SNode copyNode = SNodeOperations.as(SNodeOperations.getParent(thisNode), "jetbrains.mps.build.structure.BuildLayout_CustomCopy");
    if ((copyNode != null)) {
      name = BuildLayout_CopyProcessor_Behavior.filesetName_1330375798101726877(SLinkOperations.getTarget(copyNode, "fileset", true));
    }
    outpath = Context.defaultContext(genContext).getTempPath(thisNode, name, "customProcessors", BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_getTaskName_1330375798060763184", new Object[]{}));
    map.put(thisNode, outpath);
    return outpath;
  }

  public static String filesetName_1330375798101726877(SNode fileset) {
    if (SNodeOperations.isInstanceOf(fileset, "jetbrains.mps.build.structure.BuildInputSingleFile")) {
      return BuildLayout_CopyProcessor_Behavior.representativeName_1330375798101242503(SLinkOperations.getTarget(SNodeOperations.cast(fileset, "jetbrains.mps.build.structure.BuildInputSingleFile"), "path", true));
    } else if (SNodeOperations.isInstanceOf(fileset, "jetbrains.mps.build.structure.BuildInputFiles")) {
      return BuildLayout_CopyProcessor_Behavior.representativeName_1330375798101242503(SLinkOperations.getTarget(SNodeOperations.cast(fileset, "jetbrains.mps.build.structure.BuildInputFiles"), "dir", true));
    }
    return "copy";
  }

  public static String representativeName_1330375798101242503(SNode path) {
    StringBuilder res = new StringBuilder();
    if (SNodeOperations.isInstanceOf(path, "jetbrains.mps.build.structure.BuildRelativePath")) {
      SNode compositePart = SLinkOperations.getTarget(SNodeOperations.cast(path, "jetbrains.mps.build.structure.BuildRelativePath"), "compositePart", true);
      while (compositePart != null) {
        String name = SPropertyOperations.getString(compositePart, "head");
        if (name.indexOf("{") == -1 && name.indexOf("}") == -1 && name.indexOf("$") == -1) {
          if (res.length() > 0) {
            res.append("-");
          }
          res.append(name);
        }
        compositePart = BuildRelativePath_Behavior.next_8654221991637156927(compositePart);
      }
    } else {
      res.append(BehaviorReflection.invokeVirtual(String.class, path, "virtual_getLastSegment_1368030936106771141", new Object[]{null}));
    }
    if (res.length() == 0) {
      res.append("container");
    }
    return res.toString();
  }

  @Deprecated
  public static String call_getTaskName_1330375798060763184(SNode thisNode) {
    return BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_getTaskName_1330375798060763184", new Object[]{});
  }

  @Deprecated
  public static String callSuper_getTaskName_1330375798060763184(SNode thisNode, String callerConceptFqName) {
    return BehaviorManager.getInstance().invokeSuper(String.class, SNodeOperations.cast(thisNode, "jetbrains.mps.build.structure.BuildLayout_CopyProcessor"), callerConceptFqName, "virtual_getTaskName_1330375798060763184", new Class[]{SNode.class}, new Object[]{});
  }
}
