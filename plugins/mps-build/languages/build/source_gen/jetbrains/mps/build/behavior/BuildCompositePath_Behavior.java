package jetbrains.mps.build.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.build.util.MacroHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.build.util.Context;

public class BuildCompositePath_Behavior {
  public static void init(SNode thisNode) {
    SPropertyOperations.set(thisNode, "head", "");
  }

  public static String call_getPath_8618885170173674800(SNode thisNode) {
    if ((SLinkOperations.getTarget(thisNode, "tail", true) != null)) {
      return SPropertyOperations.getString(thisNode, "head") + "/" + BuildCompositePath_Behavior.call_getPath_8618885170173674800(SLinkOperations.getTarget(thisNode, "tail", true));
    }
    return SPropertyOperations.getString(thisNode, "head");
  }

  public static String call_getLastSegment_1368030936106771152(SNode thisNode, MacroHelper helper) {
    SNode last = thisNode;
    while ((SLinkOperations.getTarget(last, "tail", true) != null)) {
      last = SLinkOperations.getTarget(last, "tail", true);
    }
    return SPropertyOperations.getString(last, "head");
  }

  public static String call_getPathToHead_3968971886499106107(SNode thisNode) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(thisNode), "jetbrains.mps.build.structure.BuildCompositePath")) {
      return BuildCompositePath_Behavior.call_getPathToHead_3968971886499106107(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "jetbrains.mps.build.structure.BuildCompositePath")) + "/" + SPropertyOperations.getString(thisNode, "head");
    }
    return SPropertyOperations.getString(thisNode, "head");
  }

  public static List<String> call_getHeadSuggestions_4959435991187212109(SNode thisNode, String basePath) {
    String relativePath = basePath;
    if (relativePath == null) {
      return ListSequence.fromList(new ArrayList<String>());
    }

    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(thisNode), "jetbrains.mps.build.structure.BuildCompositePath")) {
      relativePath += "/" + BuildCompositePath_Behavior.call_getPathToHead_3968971886499106107(SNodeOperations.cast(SNodeOperations.getParent(thisNode), "jetbrains.mps.build.structure.BuildCompositePath"));
    }

    IFile file = FileSystem.getInstance().getFileByPath(relativePath);
    if (!(file.exists())) {
      return ListSequence.fromList(new ArrayList<String>());
    }
    List<IFile> children = file.getChildren();
    Iterable<String> names = ListSequence.fromList(children).select(new ISelector<IFile, String>() {
      public String select(IFile it) {
        return it.getName();
      }
    });
    if (file.getParent() != null) {
      names = Sequence.fromIterable(names).union(Sequence.fromIterable(Sequence.<String>singleton("..")));
    }
    return Sequence.fromIterable(names).sort(new ISelector<String, Comparable<?>>() {
      public Comparable<?> select(String it) {
        return it;
      }
    }, true).toListSequence();
  }

  public static IFile call_getFile_841084130032784919(SNode thisNode, Context context) {
    String basePath = BuildRelativePath_Behavior.call_getBasePath_4959435991187140515(SNodeOperations.getAncestor(thisNode, "jetbrains.mps.build.structure.BuildRelativePath", false, false), context);
    if ((basePath == null || basePath.length() == 0)) {
      return null;
    }

    basePath += "/" + BuildCompositePath_Behavior.call_getPathToHead_3968971886499106107(thisNode);
    return FileSystem.getInstance().getFileByPath(basePath);
  }
}
