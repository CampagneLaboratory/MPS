package jetbrains.mps.build.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.build.util.Context;
import jetbrains.mps.build.util.RelativePathHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.scope.ModelPlusImportedScope;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.build.util.ScopeUtil;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.build.util.DescendantsScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.scope.EmptyScope;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.LinkedHashSet;
import java.util.Set;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.scope.CompositeScope;

public class BuildProject_Behavior {
  public static void init(SNode thisNode) {
  }
  public static boolean call_isPackaged_4129895186893455885(SNode thisNode, Context context) {
    RelativePathHelper relativePathHelper = context.getRelativePathHelper(SNodeOperations.getModel(thisNode));
    return relativePathHelper == null;
  }
  @Nullable
  public static String call_getBasePath_4959435991187146924(SNode thisNode, Context context) {
    RelativePathHelper relativePathHelper = context.getRelativePathHelper(SNodeOperations.getModel(thisNode));
    if (relativePathHelper == null) {
      // model is packaged, i.e. no base path for it 
      return null;
    }
    if (isNotEmptyString(SPropertyOperations.getString(thisNode, MetaAdapterFactory.getProperty(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 5204048710541015587l, "internalBaseDirectory")))) {
      try {
        return relativePathHelper.makeAbsolute(SPropertyOperations.getString(thisNode, MetaAdapterFactory.getProperty(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 5204048710541015587l, "internalBaseDirectory")));
      } catch (RelativePathHelper.PathException ex) {
        // no idea - use default path 
      }
    }
    return relativePathHelper.getBasePath();
  }
  @Nullable
  public static String call_getScriptsPath_4796668409958419284(SNode thisNode, Context context) {
    if ((SLinkOperations.getTarget(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 4796668409958418110l, "scriptsDir")) != null)) {
      return BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 4796668409958418110l, "scriptsDir")), "virtual_getLocalPath_5481553824944787364", new Object[]{context});
    }
    return BuildProject_Behavior.call_getBasePath_4959435991187146924(thisNode, context);
  }
  public static String call_getOutputFileName_4915877860351551360(SNode thisNode) {
    return (isEmptyString(SPropertyOperations.getString(thisNode, MetaAdapterFactory.getProperty(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 4915877860348071612l, "fileName"))) ? "build.xml" : SPropertyOperations.getString(thisNode, MetaAdapterFactory.getProperty(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 4915877860348071612l, "fileName")));
  }
  public static String call_getBasePathRelativeToScriptsPath_5178006408628632053(SNode thisNode, Context context) {
    String scriptsPath = BuildProject_Behavior.call_getScriptsPath_4796668409958419284(thisNode, context);
    String basePath = BuildProject_Behavior.call_getBasePath_4959435991187146924(thisNode, context);
    try {
      return new RelativePathHelper(scriptsPath).makeRelative(basePath);
    } catch (RelativePathHelper.PathException ex) {
      if (context.getGenerationContext() != null) {
        TemplateQueryContext generationContext = context.getGenerationContext();
        generationContext.showErrorMessage(thisNode, "cannot calculate relative path: " + ex.getMessage());
      }
      return null;
    }
  }
  public static Scope call_getScope_1224588814561808649(SNode thisNode, SNode kind, String role) {
    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.build.structure.BuildExternalLayout")) {
      return new ModelPlusImportedScope(SNodeOperations.getModel(thisNode), true, NameUtil.nodeFQName(kind));
    }

    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.build.structure.BuildProject")) {
      final SNode _this = thisNode;
      return ScopeUtil.where(new ModelPlusImportedScope(SNodeOperations.getModel(thisNode), true, NameUtil.nodeFQName(kind)), new _FunctionTypes._return_P1_E0<Boolean, SNode>() {
        public Boolean invoke(SNode n) {
          return n != _this && !(Sequence.fromIterable(BuildProject_Behavior.call_getVisibleProjects_1224588814561807665(SNodeOperations.cast(n, "jetbrains.mps.build.structure.BuildProject"), false)).contains(_this));
        }
      });
    }

    // NOTE: references in project structure and layout should be unordered, thus 
    //       we do not need index/child parameters here 
    if ("layout".equals(role)) {
      if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.build.structure.BuildSource_FilesetProjectPart")) {
        return DescendantsScope.forNamedElements(thisNode, SLinkOperations.findLinkDeclaration("jetbrains.mps.build.structure.BuildProject", "parts"), kind);
      }
      for (SNode plugin : ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 6647099934206700656l, "plugins")))) {
        Scope layoutScope = BehaviorReflection.invokeVirtual(Scope.class, plugin, "virtual_getLayoutScope_1224588814561807654", new Object[]{kind});
        if (layoutScope != null) {
          return layoutScope;
        }
      }
    } else if ("parts".equals(role)) {
      for (SNode plugin : ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 6647099934206700656l, "plugins")))) {
        Scope projectScope = BehaviorReflection.invokeVirtual(Scope.class, plugin, "virtual_getProjectStructureScope_3734116213129936182", new Object[]{kind});
        if (projectScope != null) {
          return projectScope;
        }
      }
    }
    return new EmptyScope();
  }
  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, final SNode child) {
    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.build.structure.BuildMacro")) {
      return BuildProject_Behavior.call_getBuildMacroScope_3767587139141108514(thisNode, child, SetSequence.fromSet(new HashSet<SNode>()));
    }

    if (child != null) {
      return BuildProject_Behavior.call_getScope_1224588814561808649(thisNode, kind, SNodeOperations.getContainingLinkRole(child));
    }
    return new EmptyScope();
  }
  public static Scope virtual_getScope_7722139651431880752(SNode thisNode, SNode kind, String role, int index) {
    return BuildProject_Behavior.call_getScope_1224588814561808649(thisNode, kind, role);
  }
  public static Iterable<SNode> call_getVisibleProjects_1224588814561807665(final SNode thisNode, boolean directDependenciesOnly) {
    if (directDependenciesOnly) {
      return ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 5617550519002745381l, "dependencies"))).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildProjectDependency") && SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildProjectDependency"), MetaAdapterFactory.getReferenceLink(new UUID(8755280088213897754l, -5075149991798053422l), 4993211115183325728l, 5617550519002745380l, "script")) != thisNode;
        }
      }).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildProjectDependency"), MetaAdapterFactory.getReferenceLink(new UUID(8755280088213897754l, -5075149991798053422l), 4993211115183325728l, 5617550519002745380l, "script"));
        }
      });
    } else {
      LinkedHashSet<SNode> result = new LinkedHashSet<SNode>();
      BuildProject_Behavior.call_collectVisibleProjects_1224588814561808211(thisNode, result, thisNode);
      result.remove(thisNode);
      return result;
    }
  }
  public static void call_collectVisibleProjects_1224588814561808211(SNode thisNode, Set<SNode> result, SNode current) {
    if (!(result.add(current))) {
      return;
    }
    for (SNode dep : ListSequence.fromList(SLinkOperations.getChildren(current, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 5617550519002745381l, "dependencies")))) {
      if (!(SNodeOperations.isInstanceOf(dep, "jetbrains.mps.build.structure.BuildProjectDependency"))) {
        continue;
      }
      BuildProject_Behavior.call_collectVisibleProjects_1224588814561808211(thisNode, result, SLinkOperations.getTarget(SNodeOperations.cast(dep, "jetbrains.mps.build.structure.BuildProjectDependency"), MetaAdapterFactory.getReferenceLink(new UUID(8755280088213897754l, -5075149991798053422l), 4993211115183325728l, 5617550519002745380l, "script")));
    }
  }
  public static Scope call_getBuildMacroScope_3767587139141108514(SNode thisNode, final SNode child, final Set<SNode> visited) {
    if (SetSequence.fromSet(visited).contains(thisNode)) {
      return new EmptyScope();
    }
    SetSequence.fromSet(visited).addElement(thisNode);
    Scope rootScope = ScopeUtil.simpleRoleScope(thisNode, SLinkOperations.findLinkDeclaration("jetbrains.mps.build.structure.BuildProject", "macros"));
    SNode containingProject = SNodeOperations.getAncestor(child, "jetbrains.mps.build.structure.BuildProject", false, false);
    if (neq_save77_a0e0l(containingProject, thisNode)) {
      // we are imported => give away only public macro 
      rootScope = ScopeUtil.where(rootScope, new _FunctionTypes._return_P1_E0<Boolean, SNode>() {
        public Boolean invoke(SNode node) {
          return BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(node, "jetbrains.mps.build.structure.BuildMacro"), "virtual_isPublic_6547494638219688113", new Object[]{});
        }
      });
    }
    if ((containingProject != null)) {
      final Wrappers._T<SNode> definedMacro = new Wrappers._T<SNode>();
      if (ListSequence.fromList(SLinkOperations.getChildren(containingProject, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 5617550519002745378l, "macros"))).contains(child)) {
        definedMacro.value = SNodeOperations.cast(child, "jetbrains.mps.build.structure.BuildMacro");
      } else {
        definedMacro.value = ListSequence.fromList(SLinkOperations.getChildren(containingProject, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 5617550519002745378l, "macros"))).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return ListSequence.fromList(SNodeOperations.getDescendants(it, null, false, new String[]{})).contains(child);
          }
        });
      }
      if ((definedMacro.value != null)) {
        // we can only see what was strictly before us 
        rootScope = ScopeUtil.where(rootScope, new _FunctionTypes._return_P1_E0<Boolean, SNode>() {
          public Boolean invoke(SNode visibleNode) {
            return !(ListSequence.fromList(SNodeOperations.getNextSiblings(definedMacro.value, false)).contains(visibleNode)) && !((eq_save77_a0a0a0a0a0b0a1a2a5a11(definedMacro.value, visibleNode)));
          }
        });
      }
    }

    List<Scope> scopes = ListSequence.fromList(new ArrayList<Scope>());
    ListSequence.fromList(scopes).addElement(rootScope);
    ListSequence.fromList(scopes).addSequence(ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 5617550519002745381l, "dependencies"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildProjectDependency");
      }
    }).select(new ISelector<SNode, Scope>() {
      public Scope select(SNode it) {
        return BuildProject_Behavior.call_getBuildMacroScope_3767587139141108514(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildProjectDependency"), MetaAdapterFactory.getReferenceLink(new UUID(8755280088213897754l, -5075149991798053422l), 4993211115183325728l, 5617550519002745380l, "script")), child, visited);
      }
    }));
    ListSequence.fromList(scopes).addSequence(Sequence.fromIterable(ScopeUtil.imported(ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 5617550519002745381l, "dependencies"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildProjectDependency"));
      }
    }), SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildMacro"), child)));

    return new CompositeScope(ListSequence.fromList(scopes).toGenericArray(Scope.class)) {
      @Override
      public Iterable<SNode> getAvailableElements(@Nullable String prefix) {
        return Sequence.fromIterable(super.getAvailableElements(prefix)).distinct();
      }
    };
  }
  public static boolean call_canEditBaseDir_631271972590018330(SNode thisNode) {
    return true;
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
  private static boolean neq_save77_a0e0l(Object a, Object b) {
    return !(((a != null ? a.equals(b) : a == b)));
  }
  private static boolean eq_save77_a0a0a0a0a0b0a1a2a5a11(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
