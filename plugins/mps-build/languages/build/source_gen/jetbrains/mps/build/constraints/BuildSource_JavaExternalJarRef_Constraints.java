package jetbrains.mps.build.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.build.util.ScopeUtil;
import jetbrains.mps.scope.ModelPlusImportedScope;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;

public class BuildSource_JavaExternalJarRef_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_u5rckp_a0a2a0a0a1a0b0a1a0 = new SNodePointer("r:5076fdb3-19c3-4563-aa26-7ace7591e78d(jetbrains.mps.build.constraints)", "5610619299014309456");

  public BuildSource_JavaExternalJarRef_Constraints() {
    super("jetbrains.mps.build.structure.BuildSource_JavaExternalJarRef");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("jar", new BaseReferenceConstraintsDescriptor("jar", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          }

          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            SNode contextProject = SNodeOperations.getAncestor(_context.getContextNode(), "jetbrains.mps.build.structure.BuildProject", true, false);
            String target = null;
            if ((contextProject != null)) {
              Scope importedArtifactsScope = ScopeUtil.getVisibleJarsScope(contextProject);
              if (importedArtifactsScope != null && !(importedArtifactsScope instanceof ModelPlusImportedScope)) {
                target = importedArtifactsScope.getReferenceText(_context.getContextNode(), _context.getParameterNode());
              }
            }
            if (target == null) {
              target = (SNodeOperations.isInstanceOf(_context.getParameterNode(), "jetbrains.mps.build.structure.BuildInputSingleFile") ?
                BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(SNodeOperations.cast(_context.getParameterNode(), "jetbrains.mps.build.structure.BuildInputSingleFile"), "path", true), "virtual_getRelativePath_5481553824944787371", new Object[]{}) :
                BehaviorReflection.invokeVirtual(String.class, _context.getParameterNode(), "virtual_getPresentation_1213877396640", new Object[]{})
              );
            }
            return target;
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_u5rckp_a0a2a0a0a1a0b0a1a0;
          }

          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            {
              SNode contextProject = SNodeOperations.getAncestor(_context.getContextNode(), "jetbrains.mps.build.structure.BuildProject", true, false);
              if ((contextProject != null)) {
                return ScopeUtil.getVisibleJarsScope(contextProject);
              }
              return new ModelPlusImportedScope(_context.getModel(), false, operationContext.getScope(), "jetbrains.mps.build.structure.BuildSource_SingleFile");
            }
          }
        };
      }
    });
    return references;
  }
}
