package jetbrains.mps.build.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.build.behavior.BuildProject_Behavior;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ProjectDependency {
  private final TemplateQueryContext myGenContext;
  private final SNode myProject;
  private final List<Tuples._2<SNode, String>> myDependency = ListSequence.fromList(new ArrayList<Tuples._2<SNode, String>>());

  public ProjectDependency(TemplateQueryContext genContext, SNode project) {
    myGenContext = genContext;
    myProject = project;
  }

  public ProjectDependency collectDependencies() {
    Iterable<SNode> list = ListSequence.fromList(SLinkOperations.getTargets(myProject, "dependencies", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildProjectDependency") && (SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildProjectDependency"), "artifacts", true) == null) && !(BuildProject_Behavior.call_isPackaged_4129895186893455885(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildProjectDependency"), "script", false), Context.defaultContext(myGenContext)));
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildProjectDependency");
      }
    });

    String basePath = BuildProject_Behavior.call_getBasePath_4959435991187146924(myProject, Context.defaultContext(myGenContext));
    if ((basePath == null || basePath.length() == 0)) {
      return this;
    }
    final RelativePathHelper helper = new RelativePathHelper(basePath);

    ListSequence.fromList(myDependency).addSequence(Sequence.fromIterable(list).select(new ISelector<SNode, Tuples._2<SNode, String>>() {
      public Tuples._2<SNode, String> select(SNode it) {
        return MultiTuple.<SNode,String>from(SLinkOperations.getTarget(it, "script", false), calculatePath(it, helper));
      }
    }));

    return this;
  }

  private String calculatePath(SNode node, RelativePathHelper helper) {
    SNode script = SLinkOperations.getTarget(node, "script", false);
    String filePath = BuildProject_Behavior.call_getScriptsPath_4796668409958419284(script, Context.defaultContext(myGenContext));
    if (filePath == null) {
      myGenContext.showErrorMessage(script, "no script path for required script " + SPropertyOperations.getString(script, "name"));
      return ".";
    }
    try {
      String relative = helper.makeRelative(filePath);
      if ((relative == null || relative.length() == 0)) {
        return BuildProject_Behavior.call_getOutputFileName_4915877860351551360(script);
      }
      if (!(relative.endsWith("/"))) {
        relative += "/";
      }
      return relative + BuildProject_Behavior.call_getOutputFileName_4915877860351551360(script);
    } catch (RelativePathHelper.PathException ex) {
      myGenContext.showErrorMessage(node, "cannot calculate relative path: " + ex.getMessage());
      return "????";
    }
  }

  public List<Tuples._2<SNode, String>> getDependencies() {
    return myDependency;
  }
}
