package jetbrains.mps.build.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.TransientModelsModule;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.SReference;

public class FetchDependenciesProcessor {
  private TemplateQueryContext genContext;
  private SNode project;
  public FetchDependenciesProcessor(SNode project, TemplateQueryContext genContext) {
    this.genContext = genContext;
    this.project = project;
  }
  public void process() {
    VisibleArtifacts artifacts = new VisibleArtifacts(project, genContext);
    artifacts.collect();
    UnpackHelper helper = new UnpackHelper(artifacts, genContext);
    for (SNode dep : SNodeOperations.getNodeDescendants(project, MetaAdapterFactory.getInterfaceConcept(new UUID(8755280088213897754l, -5075149991798053422l), 841011766566205091l, "jetbrains.mps.build.structure.BuildExternalDependency"), false, new SAbstractConcept[]{})) {
      BehaviorReflection.invokeVirtual(Void.class, dep, "virtual_fetchDependencies_5908258303322131137", new Object[]{artifacts, new FetchDependenciesProcessor.RequiredDependenciesBuilderImpl(artifacts, dep, helper)});
    }
    helper.eval();

    List<SNode> statements = helper.getStatements();
    if (!(ListSequence.fromList(statements).isEmpty())) {
      SNode wf = SModelOperations.createNewNode(SNodeOperations.getModel(project), null, SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(8755280088213897754l, -5075149991798053422l), 4701820937132281259l, "jetbrains.mps.build.structure.BuildCustomWorkflow")));
      SNode taskpart = SModelOperations.createNewNode(SNodeOperations.getModel(project), null, SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(7605046100638320544l, -5004325039833383149l), 3961775458390032824l, "jetbrains.mps.build.workflow.structure.BwfTaskPart")));
      SLinkOperations.setTarget(taskpart, MetaAdapterFactory.getReferenceLink(new UUID(7605046100638320544l, -5004325039833383149l), 3961775458390032824l, 3961775458390032825l, "task"), SLinkOperations.getTarget(_quotation_createNode_t02zqv_a0a2a7a3(), MetaAdapterFactory.getReferenceLink(new UUID(7605046100638320544l, -5004325039833383149l), 2769948622284574294l, 2769948622284574295l, "target")));
      ListSequence.fromList(SLinkOperations.getChildren(wf, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 4701820937132281259l, 4701820937132281260l, "parts"))).addElement(taskpart);
      SNode stask = SModelOperations.createNewNode(SNodeOperations.getModel(project), null, SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(7605046100638320544l, -5004325039833383149l), 2769948622284546677l, "jetbrains.mps.build.workflow.structure.BwfSubTask")));
      SPropertyOperations.set(stask, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"), "fetch");
      ListSequence.fromList(SLinkOperations.getChildren(taskpart, MetaAdapterFactory.getContainmentLink(new UUID(7605046100638320544l, -5004325039833383149l), 3961775458390032824l, 3961775458390032826l, "subTasks"))).addElement(stask);
      ListSequence.fromList(SLinkOperations.getChildren(stask, MetaAdapterFactory.getContainmentLink(new UUID(7605046100638320544l, -5004325039833383149l), 2769948622284546677l, 2769948622284606050l, "statements"))).addSequence(ListSequence.fromList(statements));
      ListSequence.fromList(SLinkOperations.getChildren(project, MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l, -5075149991798053422l), 5617550519002745363l, 3542413272732620719l, "aspects"))).addElement(wf);
    }
  }
  private class RequiredDependenciesBuilderImpl implements RequiredDependenciesBuilder {
    protected final VisibleArtifacts artifacts;
    protected final SNode dep;
    private final UnpackHelper helper;
    public RequiredDependenciesBuilderImpl(VisibleArtifacts artifacts, SNode dep, UnpackHelper helper) {
      this.artifacts = artifacts;
      this.dep = dep;
      this.helper = helper;
    }
    @Override
    public void add(SNode node) {
      if (!(check(node))) {
        return;
      }
      helper.add(node, false, null);
    }
    @Override
    public void add(SNode node, Object artifactId) {
      if (!(check(node))) {
        return;
      }
      if (!(checkArtifactId(artifactId))) {
        // false is possible only when artifactId is SNode from transient model 
        artifactId = artifacts.toOriginalNode((SNode) artifactId);
      }
      helper.add(node, false, artifactId);
    }
    @Override
    public void addWithContent(SNode node) {
      if (!(check(node))) {
        return;
      }
      helper.add(node, true, null);
    }
    private boolean check(SNode node) {
      if (SNodeOperations.getModel(node).getModule() instanceof TransientModelsModule) {
        genContext.showErrorMessage(dep, "returned dependency in transient model: " + jetbrains.mps.util.SNodeOperations.getDebugText(node));
        return false;
      }
      if (!(artifacts.contains(node))) {
        genContext.showErrorMessage(dep, "returned node which is not available in dependencies: " + jetbrains.mps.util.SNodeOperations.getDebugText(node));
        return false;
      }
      return true;
    }
    private boolean checkArtifactId(Object artifactId) {
      if (artifactId instanceof SNode && ((SNode) artifactId).getModel().getModule() instanceof TransientModelsModule) {
        // <node> 
        genContext.showWarningMessage(dep, "FIXME registering artifact from transient model");
        return false;
      }
      return true;
    }
  }
  private static SNode _quotation_createNode_t02zqv_a0a2a7a3() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.workflow.structure.BwfTaskDependency", null, null, false);
    quotedNode_1.setReference(MetaAdapterFactory.getReferenceLink(new UUID(7605046100638320544l, -5004325039833383149l), 2769948622284574294l, 2769948622284574295l, "target"), SReference.create(MetaAdapterFactory.getReferenceLink(new UUID(7605046100638320544l, -5004325039833383149l), 2769948622284574294l, 2769948622284574295l, "target"), quotedNode_1, facade.createModelReference("r:14f06230-41df-42af-9a25-81de46539bf1(jetbrains.mps.build.workflow.accessories)"), facade.createNodeId("7128123785277844790")));
    return quotedNode_1;
  }
}
