package jetbrains.mps.build.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildAspect_Editor()));
      case 1:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildCompositePath_Editor()));
      case 2:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildCustomWorkflow_Editor()));
      case 3:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildDependency_Editor()));
      case 4:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildExternalLayout_Editor()));
      case 5:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildExternalLayoutDependency_Editor()));
      case 6:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildFileExcludeSelector_Editor()));
      case 7:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildFileIncludeSelector_Editor()));
      case 8:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildFileIncludesSelector_Editor()));
      case 9:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildFileSelector_Editor()));
      case 10:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildFolderMacro_Editor()));
      case 11:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildInputFiles_Editor()));
      case 12:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildInputFolders_Editor()));
      case 13:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildInputResourceSet_Editor()));
      case 14:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildInputSingleFile_Editor()));
      case 15:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildInputSingleFolder_Editor()));
      case 16:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildJavaPlugin_Editor()));
      case 17:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_Editor()));
      case 18:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_AbstractCopy_Editor()));
      case 19:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_Comment_Editor()));
      case 20:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_CompileOutputOf_Editor()));
      case 21:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_CopyFilterFixCRLF_Editor()));
      case 22:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_CopyFilterReplaceRegex_Editor()));
      case 23:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_CopyFilterReplaceTokens_Editor()));
      case 24:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_CopyFlattenMapper_Editor()));
      case 25:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_CopyGlobMapper_Editor()));
      case 26:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_CopyHandler_Editor()));
      case 27:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_CopyRegexMapper_Editor()));
      case 28:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_CustomCopy_Editor()));
      case 29:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_EchoProperties_Editor()));
      case 30:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_EchoPropertyEntry_Editor()));
      case 31:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_EchoXml_Editor()));
      case 32:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_ExportAsJavaLibrary_Editor()));
      case 33:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_File_Editor()));
      case 34:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_FileStub_Editor()));
      case 35:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_Filemode_Editor()));
      case 36:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_Files_Editor()));
      case 37:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_FilesOf_Editor()));
      case 38:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_Import_Editor()));
      case 39:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_ImportContent_Editor()));
      case 40:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_JarManifest_Editor()));
      case 41:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_JarManifest_Attribute_Editor()));
      case 42:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_JarManifest_Section_Editor()));
      case 43:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_NamedContainer_Editor()));
      case 44:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_Node_Editor()));
      case 45:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_Tar_Editor()));
      case 46:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildLayout_TransparentContainer_Editor()));
      case 47:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildMacro_Editor()));
      case 48:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildNamedLayout_Editor()));
      case 49:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildPlugin_Editor()));
      case 50:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildProject_Editor()));
      case 51:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildProjectDependency_Editor()));
      case 52:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildProjectPart_Editor()));
      case 53:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSourceArchiveRelativePath_Editor()));
      case 54:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSourceMacroRelativePath_Editor()));
      case 55:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSourcePath_Editor()));
      case 56:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSourceProjectRelativePath_Editor()));
      case 57:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaCP_Editor()));
      case 58:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaClassFolder_Editor()));
      case 59:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaContentFolder_Editor()));
      case 60:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaContentRoot_Editor()));
      case 61:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependency_Editor()));
      case 62:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependencyExternalJar_Editor()));
      case 63:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependencyExternalJarInFolder_Editor()));
      case 64:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependencyFileset_Editor()));
      case 65:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependencyJar_Editor()));
      case 66:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependencyLibrary_Editor()));
      case 67:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependencyModule_Editor()));
      case 68:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaExternalJarFolderRef_Editor()));
      case 69:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaExternalJarRef_Editor()));
      case 70:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaFiles_Editor()));
      case 71:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaJar_Editor()));
      case 72:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaJars_Editor()));
      case 73:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaLibrary_Editor()));
      case 74:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaLibraryCP_Editor()));
      case 75:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaLibraryElement_Editor()));
      case 76:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaLibraryExternalJar_Editor()));
      case 77:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaLibraryExternalJarFolder_Editor()));
      case 78:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaModule_Editor()));
      case 79:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaModuleOptions_Editor()));
      case 80:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaOptions_Editor()));
      case 81:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaResources_Editor()));
      case 82:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildSource_JavaSources_Editor()));
      case 83:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildString_Editor()));
      case 84:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildStringNotEmpty_Editor()));
      case 85:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildStringPart_Editor()));
      case 86:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildTextStringPart_Editor()));
      case 87:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildVarRefStringPart_Editor()));
      case 88:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildVariableMacro_Editor()));
      case 89:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildVariableMacroInitValue_Editor()));
      case 90:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildVariableMacroInitWithDate_Editor()));
      case 91:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildVariableMacroInitWithString_Editor()));
      case 92:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new BuildVariableMacroInitWithValueFromFile_Editor()));
      case 93:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildSource_Folder_Editor()));
      case 94:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildSource_JarFolder_Editor()));
      case 95:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildSource_JavaJar_Editor()));
      case 96:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildSource_JavaLibrary_Editor()));
      case 97:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildSource_JavaModule_Editor()));
      case 98:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildSource_SingleFile_Editor()));
      case 99:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new GeneratorInternal_IWorkflowParticipantReference_Editor()));
      case 100:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new GeneratorInternal_IWorkfowParticipants_Editor()));
      case 101:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new GeneratorInternal_LibraryArtifacts_Editor()));
      case 102:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new GeneratorInternal_ProjectDependency_Editor()));
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0c, descriptor.getConceptFqName())) {
      case 0:
        if ("jetbrains.mps.build.editor.BuildLayout_containerElements".equals(editorComponentId)) {
          return collectEditorComponents(descriptor, editorComponentId, Collections.<ConceptEditorComponent>singletonList(new BuildLayout_containerElements()));
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.build.structure.BuildAspect", "jetbrains.mps.build.structure.BuildCompositePath", "jetbrains.mps.build.structure.BuildCustomWorkflow", "jetbrains.mps.build.structure.BuildDependency", "jetbrains.mps.build.structure.BuildExternalLayout", "jetbrains.mps.build.structure.BuildExternalLayoutDependency", "jetbrains.mps.build.structure.BuildFileExcludeSelector", "jetbrains.mps.build.structure.BuildFileIncludeSelector", "jetbrains.mps.build.structure.BuildFileIncludesSelector", "jetbrains.mps.build.structure.BuildFileSelector", "jetbrains.mps.build.structure.BuildFolderMacro", "jetbrains.mps.build.structure.BuildInputFiles", "jetbrains.mps.build.structure.BuildInputFolders", "jetbrains.mps.build.structure.BuildInputResourceSet", "jetbrains.mps.build.structure.BuildInputSingleFile", "jetbrains.mps.build.structure.BuildInputSingleFolder", "jetbrains.mps.build.structure.BuildJavaPlugin", "jetbrains.mps.build.structure.BuildLayout", "jetbrains.mps.build.structure.BuildLayout_AbstractCopy", "jetbrains.mps.build.structure.BuildLayout_Comment", "jetbrains.mps.build.structure.BuildLayout_CompileOutputOf", "jetbrains.mps.build.structure.BuildLayout_CopyFilterFixCRLF", "jetbrains.mps.build.structure.BuildLayout_CopyFilterReplaceRegex", "jetbrains.mps.build.structure.BuildLayout_CopyFilterReplaceTokens", "jetbrains.mps.build.structure.BuildLayout_CopyFlattenMapper", "jetbrains.mps.build.structure.BuildLayout_CopyGlobMapper", "jetbrains.mps.build.structure.BuildLayout_CopyHandler", "jetbrains.mps.build.structure.BuildLayout_CopyRegexMapper", "jetbrains.mps.build.structure.BuildLayout_CustomCopy", "jetbrains.mps.build.structure.BuildLayout_EchoProperties", "jetbrains.mps.build.structure.BuildLayout_EchoPropertyEntry", "jetbrains.mps.build.structure.BuildLayout_EchoXml", "jetbrains.mps.build.structure.BuildLayout_ExportAsJavaLibrary", "jetbrains.mps.build.structure.BuildLayout_File", "jetbrains.mps.build.structure.BuildLayout_FileStub", "jetbrains.mps.build.structure.BuildLayout_Filemode", "jetbrains.mps.build.structure.BuildLayout_Files", "jetbrains.mps.build.structure.BuildLayout_FilesOf", "jetbrains.mps.build.structure.BuildLayout_Import", "jetbrains.mps.build.structure.BuildLayout_ImportContent", "jetbrains.mps.build.structure.BuildLayout_JarManifest", "jetbrains.mps.build.structure.BuildLayout_JarManifest_Attribute", "jetbrains.mps.build.structure.BuildLayout_JarManifest_Section", "jetbrains.mps.build.structure.BuildLayout_NamedContainer", "jetbrains.mps.build.structure.BuildLayout_Node", "jetbrains.mps.build.structure.BuildLayout_Tar", "jetbrains.mps.build.structure.BuildLayout_TransparentContainer", "jetbrains.mps.build.structure.BuildMacro", "jetbrains.mps.build.structure.BuildNamedLayout", "jetbrains.mps.build.structure.BuildPlugin", "jetbrains.mps.build.structure.BuildProject", "jetbrains.mps.build.structure.BuildProjectDependency", "jetbrains.mps.build.structure.BuildProjectPart", "jetbrains.mps.build.structure.BuildSourceArchiveRelativePath", "jetbrains.mps.build.structure.BuildSourceMacroRelativePath", "jetbrains.mps.build.structure.BuildSourcePath", "jetbrains.mps.build.structure.BuildSourceProjectRelativePath", "jetbrains.mps.build.structure.BuildSource_JavaCP", "jetbrains.mps.build.structure.BuildSource_JavaClassFolder", "jetbrains.mps.build.structure.BuildSource_JavaContentFolder", "jetbrains.mps.build.structure.BuildSource_JavaContentRoot", "jetbrains.mps.build.structure.BuildSource_JavaDependency", "jetbrains.mps.build.structure.BuildSource_JavaDependencyExternalJar", "jetbrains.mps.build.structure.BuildSource_JavaDependencyExternalJarInFolder", "jetbrains.mps.build.structure.BuildSource_JavaDependencyFileset", "jetbrains.mps.build.structure.BuildSource_JavaDependencyJar", "jetbrains.mps.build.structure.BuildSource_JavaDependencyLibrary", "jetbrains.mps.build.structure.BuildSource_JavaDependencyModule", "jetbrains.mps.build.structure.BuildSource_JavaExternalJarFolderRef", "jetbrains.mps.build.structure.BuildSource_JavaExternalJarRef", "jetbrains.mps.build.structure.BuildSource_JavaFiles", "jetbrains.mps.build.structure.BuildSource_JavaJar", "jetbrains.mps.build.structure.BuildSource_JavaJars", "jetbrains.mps.build.structure.BuildSource_JavaLibrary", "jetbrains.mps.build.structure.BuildSource_JavaLibraryCP", "jetbrains.mps.build.structure.BuildSource_JavaLibraryElement", "jetbrains.mps.build.structure.BuildSource_JavaLibraryExternalJar", "jetbrains.mps.build.structure.BuildSource_JavaLibraryExternalJarFolder", "jetbrains.mps.build.structure.BuildSource_JavaModule", "jetbrains.mps.build.structure.BuildSource_JavaModuleOptions", "jetbrains.mps.build.structure.BuildSource_JavaOptions", "jetbrains.mps.build.structure.BuildSource_JavaResources", "jetbrains.mps.build.structure.BuildSource_JavaSources", "jetbrains.mps.build.structure.BuildString", "jetbrains.mps.build.structure.BuildStringNotEmpty", "jetbrains.mps.build.structure.BuildStringPart", "jetbrains.mps.build.structure.BuildTextStringPart", "jetbrains.mps.build.structure.BuildVarRefStringPart", "jetbrains.mps.build.structure.BuildVariableMacro", "jetbrains.mps.build.structure.BuildVariableMacroInitValue", "jetbrains.mps.build.structure.BuildVariableMacroInitWithDate", "jetbrains.mps.build.structure.BuildVariableMacroInitWithString", "jetbrains.mps.build.structure.BuildVariableMacroInitWithValueFromFile", "jetbrains.mps.build.structure.GeneratorInternal_BuildSource_Folder", "jetbrains.mps.build.structure.GeneratorInternal_BuildSource_JarFolder", "jetbrains.mps.build.structure.GeneratorInternal_BuildSource_JavaJar", "jetbrains.mps.build.structure.GeneratorInternal_BuildSource_JavaLibrary", "jetbrains.mps.build.structure.GeneratorInternal_BuildSource_JavaModule", "jetbrains.mps.build.structure.GeneratorInternal_BuildSource_SingleFile", "jetbrains.mps.build.structure.GeneratorInternal_IWorkflowParticipantReference", "jetbrains.mps.build.structure.GeneratorInternal_IWorkfowParticipants", "jetbrains.mps.build.structure.GeneratorInternal_LibraryArtifacts", "jetbrains.mps.build.structure.GeneratorInternal_ProjectDependency"};
  private static String[] stringSwitchCases_xbvbvu_a0a0c = new String[]{"jetbrains.mps.build.structure.BuildLayout_Container"};
}
