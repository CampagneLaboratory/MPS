package jetbrains.mps.build.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBuildAspect = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildAspect").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildCompositePath = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildCompositePath").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("head").children(new String[]{"tail"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBuildCustomWorkflow = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildCustomWorkflow").super_("jetbrains.mps.build.structure.BuildAspect").parents("jetbrains.mps.build.structure.BuildAspect").children(new String[]{"parts"}, new boolean[]{true}).alias("workflow", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildExternalDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildExternalDependency").interface_().create();
  /*package*/ final ConceptDescriptor myConceptBuildExternalLayout = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildExternalLayout").super_("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").parents("jetbrains.mps.build.structure.BuildLayout_AbstractContainer", "jetbrains.mps.lang.core.structure.INamedConcept").alias("external layout", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildExternalLayoutDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildExternalLayoutDependency").super_("jetbrains.mps.build.structure.BuildDependency").parents("jetbrains.mps.build.structure.BuildDependency", "jetbrains.mps.build.structure.BuildLayout_PathElement").references("layout").children(new String[]{"artifacts"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptBuildFileExcludeSelector = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildFileExcludeSelector").super_("jetbrains.mps.build.structure.BuildFileSelector").parents("jetbrains.mps.build.structure.BuildFileSelector").properties("pattern").alias("exclude", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildFileIncludeSelector = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildFileIncludeSelector").super_("jetbrains.mps.build.structure.BuildFileSelector").parents("jetbrains.mps.build.structure.BuildFileSelector").properties("pattern").alias("include", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildFileIncludesSelector = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildFileIncludesSelector").super_("jetbrains.mps.build.structure.BuildFileSelector").parents("jetbrains.mps.build.structure.BuildFileSelector", "jetbrains.mps.build.structure.BuildFileSelectorInAttribute").properties("pattern").alias("includes", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildFileSelector = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildFileSelector").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.build.structure.BuildLayout_CopyParameter").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildFileSelectorInAttribute = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildFileSelectorInAttribute").interface_().create();
  /*package*/ final ConceptDescriptor myConceptBuildFolderMacro = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildFolderMacro").super_("jetbrains.mps.build.structure.BuildMacro").parents("jetbrains.mps.build.structure.BuildMacro").children(new String[]{"defaultPath"}, new boolean[]{false}).alias("folder", "defines folder macro with default value (for local build)").create();
  /*package*/ final ConceptDescriptor myConceptBuildInputFileSet = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputFileSet").super_("jetbrains.mps.build.structure.BuildInputResourceSet").parents("jetbrains.mps.build.structure.BuildInputResourceSet").abstract_().alias("file set", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildInputFiles = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputFiles").super_("jetbrains.mps.build.structure.BuildInputFileSet").parents("jetbrains.mps.build.structure.BuildInputFileSet", "jetbrains.mps.build.structure.BuildLayout_FileSet").children(new String[]{"dir", "selectors"}, new boolean[]{false, true}).alias("files from", "folder on local filesystem").create();
  /*package*/ final ConceptDescriptor myConceptBuildInputFolderSet = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputFolderSet").super_("jetbrains.mps.build.structure.BuildInputResourceSet").parents("jetbrains.mps.build.structure.BuildInputResourceSet").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildInputFolders = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputFolders").super_("jetbrains.mps.build.structure.BuildInputFolderSet").parents("jetbrains.mps.build.structure.BuildInputFolderSet").children(new String[]{"dir", "selectors"}, new boolean[]{false, true}).alias("folders", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildInputResourceSet = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputResourceSet").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().alias("resource set", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildInputSingleFile = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputSingleFile").super_("jetbrains.mps.build.structure.BuildInputFileSet").parents("jetbrains.mps.build.structure.BuildInputFileSet", "jetbrains.mps.build.structure.BuildLayout_FileSet", "jetbrains.mps.build.structure.BuildSource_SingleFile").children(new String[]{"path"}, new boolean[]{false}).alias("file", "single file on local filesystem").create();
  /*package*/ final ConceptDescriptor myConceptBuildInputSingleFolder = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputSingleFolder").super_("jetbrains.mps.build.structure.BuildInputFolderSet").parents("jetbrains.mps.build.structure.BuildInputFolderSet", "jetbrains.mps.build.structure.BuildSource_SingleFolder").children(new String[]{"path"}, new boolean[]{false}).alias("folder", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildJavaPlugin = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildJavaPlugin").super_("jetbrains.mps.build.structure.BuildPlugin").parents("jetbrains.mps.build.structure.BuildPlugin").alias("java", "adds Java capabilities (compile, test & bundling) to the project").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout").super_("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").parents("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_AbstractContainer = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node", "jetbrains.mps.build.structure.BuildLayout_Container").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_AbstractCopy = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_AbstractCopy").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node").children(new String[]{"fileset"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_Comment = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Comment").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node").properties("text").alias("#", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_CompileOutputOf = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CompileOutputOf").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node", "jetbrains.mps.build.structure.BuildLayout_FileSet").references("module").alias("compile output of", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_Container = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Container").interface_().children(new String[]{"children"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_ContainerAcceptingFileSet = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet").interface_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_Copy = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Copy").super_("jetbrains.mps.build.structure.BuildLayout_AbstractCopy").parents("jetbrains.mps.build.structure.BuildLayout_AbstractCopy", "jetbrains.mps.build.structure.BuildLayout_FileSet", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_CopyFilter = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyFilter").super_("jetbrains.mps.build.structure.BuildLayout_CopyHandler").parents("jetbrains.mps.build.structure.BuildLayout_CopyHandler").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_CopyFilterFixCRLF = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyFilterFixCRLF").super_("jetbrains.mps.build.structure.BuildLayout_CopyFilter").parents("jetbrains.mps.build.structure.BuildLayout_CopyFilter").properties("eol", "removeEOF").alias("fix eol", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_CopyFilterReplaceRegex = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyFilterReplaceRegex").super_("jetbrains.mps.build.structure.BuildLayout_CopyFilter").parents("jetbrains.mps.build.structure.BuildLayout_CopyFilter").properties("pattern", "flags").children(new String[]{"value"}, new boolean[]{false}).alias("replace regex", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_CopyFilterReplaceTokens = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyFilterReplaceTokens").super_("jetbrains.mps.build.structure.BuildLayout_CopyFilter").parents("jetbrains.mps.build.structure.BuildLayout_CopyFilter").properties("key").children(new String[]{"value"}, new boolean[]{false}).alias("replace", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_CopyFlattenMapper = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyFlattenMapper").super_("jetbrains.mps.build.structure.BuildLayout_CopyMapper").parents("jetbrains.mps.build.structure.BuildLayout_CopyMapper").alias("flatten", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_CopyGlobMapper = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyGlobMapper").super_("jetbrains.mps.build.structure.BuildLayout_CopyMapper").parents("jetbrains.mps.build.structure.BuildLayout_CopyMapper").properties("from").children(new String[]{"to"}, new boolean[]{false}).alias("filename glob mapper", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_CopyHandler = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyHandler").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.build.structure.BuildLayout_CopyParameter").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_CopyMapper = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyMapper").super_("jetbrains.mps.build.structure.BuildLayout_CopyHandler").parents("jetbrains.mps.build.structure.BuildLayout_CopyHandler").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_CopyParameter = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyParameter").interface_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_CopyProcessor = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyProcessor").super_("jetbrains.mps.build.structure.BuildLayout_CopyHandler").parents("jetbrains.mps.build.structure.BuildLayout_CopyHandler").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_CopyRegexMapper = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyRegexMapper").super_("jetbrains.mps.build.structure.BuildLayout_CopyMapper").parents("jetbrains.mps.build.structure.BuildLayout_CopyMapper").properties("pattern", "replace").alias("filename regex mapper", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_CustomCopy = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CustomCopy").super_("jetbrains.mps.build.structure.BuildLayout_AbstractCopy").parents("jetbrains.mps.build.structure.BuildLayout_AbstractCopy", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.build.structure.BuildLayout_FileSet").children(new String[]{"handlers"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_EchoProperties = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_EchoProperties").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node", "jetbrains.mps.build.structure.BuildStringContainer").children(new String[]{"fileName", "entries"}, new boolean[]{false, true}).alias("properties file", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_EchoPropertyEntry = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_EchoPropertyEntry").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("key").children(new String[]{"value"}, new boolean[]{false}).alias("entry", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_EchoXml = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_EchoXml").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node", "jetbrains.mps.build.structure.BuildStringContainer").children(new String[]{"fileName", "element"}, new boolean[]{false, false}).alias("xml file", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_ExportAsJavaLibrary = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_ExportAsJavaLibrary").super_("jetbrains.mps.build.structure.BuildLayout_TransparentContainer").parents("jetbrains.mps.build.structure.BuildLayout_TransparentContainer").references("library").alias("export as java library", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_File = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_File").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node", "jetbrains.mps.build.structure.BuildSource_SingleFile").properties("filemode").children(new String[]{"path", "parameters"}, new boolean[]{false, true}).alias("file", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_FileSet = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_FileSet").interface_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_FileStub = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_FileStub").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node", "jetbrains.mps.build.structure.BuildLayout_PureNode", "jetbrains.mps.build.structure.BuildSource_SingleFile").children(new String[]{"fileName"}, new boolean[]{false}).alias("file", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_Filemode = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Filemode").super_("jetbrains.mps.build.structure.BuildLayout_TransparentContainer").parents("jetbrains.mps.build.structure.BuildLayout_TransparentContainer").properties("filemode", "dirmode").alias("filemode", "customize file modes in archive").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_Files = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Files").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node").children(new String[]{"path", "parameters"}, new boolean[]{false, true}).alias("files from", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_FilesOf = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_FilesOf").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node").references("element").alias("files of", "copy files of project element").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_Folder = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Folder").super_("jetbrains.mps.build.structure.BuildLayout_NamedContainer").parents("jetbrains.mps.build.structure.BuildLayout_NamedContainer", "jetbrains.mps.build.structure.BuildLayout_PureNode").alias("folder", "create a folder").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_Import = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Import").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node", "jetbrains.mps.build.structure.BuildExternalDependency", "jetbrains.mps.build.structure.BuildLayout_FileSet").references("target").alias("import", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_ImportContent = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_ImportContent").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node", "jetbrains.mps.build.structure.BuildExternalDependency", "jetbrains.mps.build.structure.BuildLayout_FileSet").references("target").children(new String[]{"selectors"}, new boolean[]{true}).alias("import files from", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_InJarNode = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_InJarNode").interface_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_Jar = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Jar").super_("jetbrains.mps.build.structure.BuildLayout_NamedContainer").parents("jetbrains.mps.build.structure.BuildLayout_NamedContainer", "jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet", "jetbrains.mps.build.structure.BuildLayout_PureNode", "jetbrains.mps.build.structure.BuildSource_SingleFile").alias("jar", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_JarManifest = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_JarManifest").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node").children(new String[]{"parts", "name"}, new boolean[]{true, false}).alias("manifest", "jar manifest file").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_JarManifest_Attribute = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_JarManifest_Attribute").super_("jetbrains.mps.build.structure.BuildLayout_JarManifest_Part").parents("jetbrains.mps.build.structure.BuildLayout_JarManifest_Part", "jetbrains.mps.build.structure.BuildStringContainer").children(new String[]{"name", "value"}, new boolean[]{false, false}).alias("<name>: <value>", "jar manifest attribute").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_JarManifest_Part = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_JarManifest_Part").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_JarManifest_Section = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_JarManifest_Section").super_("jetbrains.mps.build.structure.BuildLayout_JarManifest_Part").parents("jetbrains.mps.build.structure.BuildLayout_JarManifest_Part").children(new String[]{"attribute", "name"}, new boolean[]{true, false}).alias("section", "jar manifest section").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_NamedContainer = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_NamedContainer").super_("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").parents("jetbrains.mps.build.structure.BuildLayout_AbstractContainer", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.build.structure.BuildSource_SingleFolder", "jetbrains.mps.build.structure.BuildStringContainer").children(new String[]{"containerName"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_Node = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Node").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.build.structure.BuildLayout_PathElement").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_PathElement = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_PathElement").interface_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_PureNode = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_PureNode").interface_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_Tar = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Tar").super_("jetbrains.mps.build.structure.BuildLayout_NamedContainer").parents("jetbrains.mps.build.structure.BuildLayout_NamedContainer", "jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet", "jetbrains.mps.build.structure.BuildLayout_PureNode").properties("compression").alias("tar", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_TransparentContainer = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_TransparentContainer").super_("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").parents("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_War = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_War").super_("jetbrains.mps.build.structure.BuildLayout_Jar").parents("jetbrains.mps.build.structure.BuildLayout_Jar").alias("war", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildLayout_Zip = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Zip").super_("jetbrains.mps.build.structure.BuildLayout_NamedContainer").parents("jetbrains.mps.build.structure.BuildLayout_NamedContainer", "jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet", "jetbrains.mps.build.structure.BuildLayout_PureNode").alias("zip", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildMacro = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildMacro").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildNamedLayout = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildNamedLayout").super_("jetbrains.mps.build.structure.BuildAspect").parents("jetbrains.mps.build.structure.BuildAspect", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.build.structure.BuildLayout_Container", "jetbrains.mps.build.structure.BuildLayout_PathElement").alias("layout", "custom named layout").create();
  /*package*/ final ConceptDescriptor myConceptBuildPlugin = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildPlugin").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildProject = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildProject").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.lang.core.structure.INamedConcept").properties("internalBaseDirectory", "fileName").children(new String[]{"plugins", "dependencies", "macros", "parts", "aspects", "layout", "scriptsDir"}, new boolean[]{true, true, true, true, true, false, false}).alias("build project", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildProjectDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildProjectDependency").super_("jetbrains.mps.build.structure.BuildDependency").parents("jetbrains.mps.build.structure.BuildDependency", "jetbrains.mps.build.structure.BuildLayout_PathElement").references("script").children(new String[]{"artifacts"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptBuildProjectPart = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildProjectPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildRelativePath = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildRelativePath").super_("jetbrains.mps.build.structure.BuildSourcePath").parents("jetbrains.mps.build.structure.BuildSourcePath").children(new String[]{"compositePart"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildSourceArchiveRelativePath = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSourceArchiveRelativePath").super_("jetbrains.mps.build.structure.BuildRelativePath").parents("jetbrains.mps.build.structure.BuildRelativePath", "jetbrains.mps.build.structure.BuildExternalDependency", "jetbrains.mps.build.structure.IWorkflowParticipant", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"archivePath"}, new boolean[]{false}).alias("*.zip!/", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSourceMacroRelativePath = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSourceMacroRelativePath").super_("jetbrains.mps.build.structure.BuildRelativePath").parents("jetbrains.mps.build.structure.BuildRelativePath").references("macro").create();
  /*package*/ final ConceptDescriptor myConceptBuildSourcePath = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSourcePath").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildSourceProjectRelativePath = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSourceProjectRelativePath").super_("jetbrains.mps.build.structure.BuildRelativePath").parents("jetbrains.mps.build.structure.BuildRelativePath").alias(".", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSourceSetContainer = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSourceSetContainer").interface_().create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_CompilablePart = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_CompilablePart").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_FilesetProjectPart = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_FilesetProjectPart").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaCP = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaCP").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaClassFolder = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaClassFolder").super_("jetbrains.mps.build.structure.BuildSource_JavaCP").parents("jetbrains.mps.build.structure.BuildSource_JavaCP").children(new String[]{"dir"}, new boolean[]{false}).alias("classes", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaContentFolder = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaContentFolder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("kind", "relativePath").alias("source", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaContentRoot = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaContentRoot").super_("jetbrains.mps.build.structure.BuildSource_JavaSources").parents("jetbrains.mps.build.structure.BuildSource_JavaSources").children(new String[]{"basePath", "folders"}, new boolean[]{false, true}).alias("content root", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaDependencyExternalJar = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependencyExternalJar").super_("jetbrains.mps.build.structure.BuildSource_JavaDependency").parents("jetbrains.mps.build.structure.BuildSource_JavaDependency", "jetbrains.mps.build.structure.BuildExternalDependency").properties("reexport").children(new String[]{"extJar"}, new boolean[]{false}).alias("external jar", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaDependencyExternalJarInFolder = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependencyExternalJarInFolder").super_("jetbrains.mps.build.structure.BuildSource_JavaDependency").parents("jetbrains.mps.build.structure.BuildSource_JavaDependency", "jetbrains.mps.build.structure.BuildExternalDependency").properties("reexport", "suffix").children(new String[]{"extFolder"}, new boolean[]{false}).alias("external jar in folder", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaDependencyFileset = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependencyFileset").super_("jetbrains.mps.build.structure.BuildSource_JavaDependency").parents("jetbrains.mps.build.structure.BuildSource_JavaDependency").children(new String[]{"classpath"}, new boolean[]{false}).alias("classpath", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaDependencyJar = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependencyJar").super_("jetbrains.mps.build.structure.BuildSource_JavaDependency").parents("jetbrains.mps.build.structure.BuildSource_JavaDependency", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("reexport").children(new String[]{"jar"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaDependencyLibrary = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependencyLibrary").super_("jetbrains.mps.build.structure.BuildSource_JavaDependency").parents("jetbrains.mps.build.structure.BuildSource_JavaDependency", "jetbrains.mps.build.structure.BuildExternalDependency").properties("reexport").references("library").alias("library", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaDependencyModule = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependencyModule").super_("jetbrains.mps.build.structure.BuildSource_JavaDependency").parents("jetbrains.mps.build.structure.BuildSource_JavaDependency", "jetbrains.mps.build.structure.BuildExternalDependency").properties("reexport").references("module").alias("module", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaExternalJarFolderRef = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaExternalJarFolderRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("folder").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaExternalJarRef = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaExternalJarRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("jar").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaFiles = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaFiles").super_("jetbrains.mps.build.structure.BuildSource_JavaSources").parents("jetbrains.mps.build.structure.BuildSource_JavaSources", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"resset"}, new boolean[]{false}).alias("java files", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaJar = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaJar").super_("jetbrains.mps.build.structure.BuildSource_JavaCP").parents("jetbrains.mps.build.structure.BuildSource_JavaCP").children(new String[]{"path", "customLocation"}, new boolean[]{false, false}).alias("jar", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaJars = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaJars").super_("jetbrains.mps.build.structure.BuildSource_JavaCP").parents("jetbrains.mps.build.structure.BuildSource_JavaCP", "jetbrains.mps.build.structure.BuildSourceSetContainer").children(new String[]{"jars"}, new boolean[]{false}).alias("jars", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaLibrary = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaLibrary").super_("jetbrains.mps.build.structure.BuildProjectPart").parents("jetbrains.mps.build.structure.BuildProjectPart", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"elements"}, new boolean[]{true}).alias("java library", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaLibraryCP = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaLibraryCP").super_("jetbrains.mps.build.structure.BuildSource_JavaLibraryElement").parents("jetbrains.mps.build.structure.BuildSource_JavaLibraryElement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"classpath"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaLibraryElement = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaLibraryElement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaLibraryExternalJar = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaLibraryExternalJar").super_("jetbrains.mps.build.structure.BuildSource_JavaCP").parents("jetbrains.mps.build.structure.BuildSource_JavaCP", "jetbrains.mps.build.structure.BuildExternalDependency").children(new String[]{"extJar"}, new boolean[]{false}).alias("external jar", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaLibraryExternalJarFolder = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaLibraryExternalJarFolder").super_("jetbrains.mps.build.structure.BuildSource_JavaCP").parents("jetbrains.mps.build.structure.BuildSource_JavaCP", "jetbrains.mps.build.structure.BuildExternalDependency").children(new String[]{"extFolder"}, new boolean[]{false}).alias("external jars", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaModule = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaModule").super_("jetbrains.mps.build.structure.BuildProjectPart").parents("jetbrains.mps.build.structure.BuildProjectPart", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.build.structure.BuildSource_CompilablePart").children(new String[]{"sources", "dependencies", "options"}, new boolean[]{true, true, false}).alias("java module", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaModuleOptions = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaModuleOptions").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("compileOptions").alias("apply compiler options", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaOptions = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaOptions").super_("jetbrains.mps.build.structure.BuildProjectPart").parents("jetbrains.mps.build.structure.BuildProjectPart").properties("optionsName", "generateDebugInfo", "copyResources", "heapSize", "noWarnings", "compiler", "javaLevel", "compilerOptions").children(new String[]{"resourceSelectors"}, new boolean[]{true}).alias("java options", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaResources = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaResources").super_("jetbrains.mps.build.structure.BuildSource_JavaSources").parents("jetbrains.mps.build.structure.BuildSource_JavaSources", "jetbrains.mps.build.structure.BuildSourceSetContainer").children(new String[]{"fileset"}, new boolean[]{false}).alias("resources", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_JavaSources = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaSources").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_SingleFile = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_SingleFile").interface_().create();
  /*package*/ final ConceptDescriptor myConceptBuildSource_SingleFolder = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_SingleFolder").interface_().create();
  /*package*/ final ConceptDescriptor myConceptBuildString = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildString").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"parts"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptBuildStringContainer = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildStringContainer").interface_().create();
  /*package*/ final ConceptDescriptor myConceptBuildStringNotEmpty = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildStringNotEmpty").super_("jetbrains.mps.build.structure.BuildString").parents("jetbrains.mps.build.structure.BuildString").create();
  /*package*/ final ConceptDescriptor myConceptBuildStringPart = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildStringPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildTextStringPart = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildTextStringPart").super_("jetbrains.mps.build.structure.BuildStringPart").parents("jetbrains.mps.build.structure.BuildStringPart", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("text").create();
  /*package*/ final ConceptDescriptor myConceptBuildVarRefStringPart = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildVarRefStringPart").super_("jetbrains.mps.build.structure.BuildStringPart").parents("jetbrains.mps.build.structure.BuildStringPart", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("macro").create();
  /*package*/ final ConceptDescriptor myConceptBuildVariableMacro = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildVariableMacro").super_("jetbrains.mps.build.structure.BuildMacro").parents("jetbrains.mps.build.structure.BuildMacro").children(new String[]{"initialValue"}, new boolean[]{false}).alias("var", "defines variable macro").create();
  /*package*/ final ConceptDescriptor myConceptBuildVariableMacroInitValue = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildVariableMacroInitValue").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuildVariableMacroInitWithDate = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildVariableMacroInitWithDate").super_("jetbrains.mps.build.structure.BuildVariableMacroInitValue").parents("jetbrains.mps.build.structure.BuildVariableMacroInitValue").properties("pattern").alias("date", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildVariableMacroInitWithString = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildVariableMacroInitWithString").super_("jetbrains.mps.build.structure.BuildVariableMacroInitValue").parents("jetbrains.mps.build.structure.BuildVariableMacroInitValue", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"value"}, new boolean[]{false}).alias("string", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildVariableMacroInitWithValueFromFile = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildVariableMacroInitWithValueFromFile").super_("jetbrains.mps.build.structure.BuildVariableMacroInitValue").parents("jetbrains.mps.build.structure.BuildVariableMacroInitValue").properties("propertyName").children(new String[]{"fileName"}, new boolean[]{false}).alias("load from file", "").create();
  /*package*/ final ConceptDescriptor myConceptGeneratorInternal_BuildSource_JavaJar = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_BuildSource_JavaJar").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("targetJar").create();
  /*package*/ final ConceptDescriptor myConceptGeneratorInternal_BuildSource_JavaLibrary = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_BuildSource_JavaLibrary").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("targetLibrary").create();
  /*package*/ final ConceptDescriptor myConceptGeneratorInternal_BuildSource_JavaModule = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_BuildSource_JavaModule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("targetReexport").references("targetModule").create();
  /*package*/ final ConceptDescriptor myConceptGeneratorInternal_BuildSource_SingleFile = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_BuildSource_SingleFile").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("targetFile").create();
  /*package*/ final ConceptDescriptor myConceptGeneratorInternal_IWorkflowParticipantReference = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_IWorkflowParticipantReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("participant").create();
  /*package*/ final ConceptDescriptor myConceptGeneratorInternal_IWorkfowParticipants = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_IWorkfowParticipants").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("for").children(new String[]{"participant"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptGeneratorInternal_ProjectDependency = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_ProjectDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("path").references("project").create();
  /*package*/ final ConceptDescriptor myConceptIWorkflowParticipant = new ConceptDescriptorBuilder("jetbrains.mps.build.structure.IWorkflowParticipant").interface_().create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBuildAspect, myConceptBuildCompositePath, myConceptBuildCustomWorkflow, myConceptBuildDependency, myConceptBuildExternalDependency, myConceptBuildExternalLayout, myConceptBuildExternalLayoutDependency, myConceptBuildFileExcludeSelector, myConceptBuildFileIncludeSelector, myConceptBuildFileIncludesSelector, myConceptBuildFileSelector, myConceptBuildFileSelectorInAttribute, myConceptBuildFolderMacro, myConceptBuildInputFileSet, myConceptBuildInputFiles, myConceptBuildInputFolderSet, myConceptBuildInputFolders, myConceptBuildInputResourceSet, myConceptBuildInputSingleFile, myConceptBuildInputSingleFolder, myConceptBuildJavaPlugin, myConceptBuildLayout, myConceptBuildLayout_AbstractContainer, myConceptBuildLayout_AbstractCopy, myConceptBuildLayout_Comment, myConceptBuildLayout_CompileOutputOf, myConceptBuildLayout_Container, myConceptBuildLayout_ContainerAcceptingFileSet, myConceptBuildLayout_Copy, myConceptBuildLayout_CopyFilter, myConceptBuildLayout_CopyFilterFixCRLF, myConceptBuildLayout_CopyFilterReplaceRegex, myConceptBuildLayout_CopyFilterReplaceTokens, myConceptBuildLayout_CopyFlattenMapper, myConceptBuildLayout_CopyGlobMapper, myConceptBuildLayout_CopyHandler, myConceptBuildLayout_CopyMapper, myConceptBuildLayout_CopyParameter, myConceptBuildLayout_CopyProcessor, myConceptBuildLayout_CopyRegexMapper, myConceptBuildLayout_CustomCopy, myConceptBuildLayout_EchoProperties, myConceptBuildLayout_EchoPropertyEntry, myConceptBuildLayout_EchoXml, myConceptBuildLayout_ExportAsJavaLibrary, myConceptBuildLayout_File, myConceptBuildLayout_FileSet, myConceptBuildLayout_FileStub, myConceptBuildLayout_Filemode, myConceptBuildLayout_Files, myConceptBuildLayout_FilesOf, myConceptBuildLayout_Folder, myConceptBuildLayout_Import, myConceptBuildLayout_ImportContent, myConceptBuildLayout_InJarNode, myConceptBuildLayout_Jar, myConceptBuildLayout_JarManifest, myConceptBuildLayout_JarManifest_Attribute, myConceptBuildLayout_JarManifest_Part, myConceptBuildLayout_JarManifest_Section, myConceptBuildLayout_NamedContainer, myConceptBuildLayout_Node, myConceptBuildLayout_PathElement, myConceptBuildLayout_PureNode, myConceptBuildLayout_Tar, myConceptBuildLayout_TransparentContainer, myConceptBuildLayout_War, myConceptBuildLayout_Zip, myConceptBuildMacro, myConceptBuildNamedLayout, myConceptBuildPlugin, myConceptBuildProject, myConceptBuildProjectDependency, myConceptBuildProjectPart, myConceptBuildRelativePath, myConceptBuildSourceArchiveRelativePath, myConceptBuildSourceMacroRelativePath, myConceptBuildSourcePath, myConceptBuildSourceProjectRelativePath, myConceptBuildSourceSetContainer, myConceptBuildSource_CompilablePart, myConceptBuildSource_FilesetProjectPart, myConceptBuildSource_JavaCP, myConceptBuildSource_JavaClassFolder, myConceptBuildSource_JavaContentFolder, myConceptBuildSource_JavaContentRoot, myConceptBuildSource_JavaDependency, myConceptBuildSource_JavaDependencyExternalJar, myConceptBuildSource_JavaDependencyExternalJarInFolder, myConceptBuildSource_JavaDependencyFileset, myConceptBuildSource_JavaDependencyJar, myConceptBuildSource_JavaDependencyLibrary, myConceptBuildSource_JavaDependencyModule, myConceptBuildSource_JavaExternalJarFolderRef, myConceptBuildSource_JavaExternalJarRef, myConceptBuildSource_JavaFiles, myConceptBuildSource_JavaJar, myConceptBuildSource_JavaJars, myConceptBuildSource_JavaLibrary, myConceptBuildSource_JavaLibraryCP, myConceptBuildSource_JavaLibraryElement, myConceptBuildSource_JavaLibraryExternalJar, myConceptBuildSource_JavaLibraryExternalJarFolder, myConceptBuildSource_JavaModule, myConceptBuildSource_JavaModuleOptions, myConceptBuildSource_JavaOptions, myConceptBuildSource_JavaResources, myConceptBuildSource_JavaSources, myConceptBuildSource_SingleFile, myConceptBuildSource_SingleFolder, myConceptBuildString, myConceptBuildStringContainer, myConceptBuildStringNotEmpty, myConceptBuildStringPart, myConceptBuildTextStringPart, myConceptBuildVarRefStringPart, myConceptBuildVariableMacro, myConceptBuildVariableMacroInitValue, myConceptBuildVariableMacroInitWithDate, myConceptBuildVariableMacroInitWithString, myConceptBuildVariableMacroInitWithValueFromFile, myConceptGeneratorInternal_BuildSource_JavaJar, myConceptGeneratorInternal_BuildSource_JavaLibrary, myConceptGeneratorInternal_BuildSource_JavaModule, myConceptGeneratorInternal_BuildSource_SingleFile, myConceptGeneratorInternal_IWorkflowParticipantReference, myConceptGeneratorInternal_IWorkfowParticipants, myConceptGeneratorInternal_ProjectDependency, myConceptIWorkflowParticipant);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0cf, conceptFqName)) {
      case 0:
        return myConceptBuildAspect;
      case 1:
        return myConceptBuildCompositePath;
      case 2:
        return myConceptBuildCustomWorkflow;
      case 3:
        return myConceptBuildDependency;
      case 4:
        return myConceptBuildExternalDependency;
      case 5:
        return myConceptBuildExternalLayout;
      case 6:
        return myConceptBuildExternalLayoutDependency;
      case 7:
        return myConceptBuildFileExcludeSelector;
      case 8:
        return myConceptBuildFileIncludeSelector;
      case 9:
        return myConceptBuildFileIncludesSelector;
      case 10:
        return myConceptBuildFileSelector;
      case 11:
        return myConceptBuildFileSelectorInAttribute;
      case 12:
        return myConceptBuildFolderMacro;
      case 13:
        return myConceptBuildInputFileSet;
      case 14:
        return myConceptBuildInputFiles;
      case 15:
        return myConceptBuildInputFolderSet;
      case 16:
        return myConceptBuildInputFolders;
      case 17:
        return myConceptBuildInputResourceSet;
      case 18:
        return myConceptBuildInputSingleFile;
      case 19:
        return myConceptBuildInputSingleFolder;
      case 20:
        return myConceptBuildJavaPlugin;
      case 21:
        return myConceptBuildLayout;
      case 22:
        return myConceptBuildLayout_AbstractContainer;
      case 23:
        return myConceptBuildLayout_AbstractCopy;
      case 24:
        return myConceptBuildLayout_Comment;
      case 25:
        return myConceptBuildLayout_CompileOutputOf;
      case 26:
        return myConceptBuildLayout_Container;
      case 27:
        return myConceptBuildLayout_ContainerAcceptingFileSet;
      case 28:
        return myConceptBuildLayout_Copy;
      case 29:
        return myConceptBuildLayout_CopyFilter;
      case 30:
        return myConceptBuildLayout_CopyFilterFixCRLF;
      case 31:
        return myConceptBuildLayout_CopyFilterReplaceRegex;
      case 32:
        return myConceptBuildLayout_CopyFilterReplaceTokens;
      case 33:
        return myConceptBuildLayout_CopyFlattenMapper;
      case 34:
        return myConceptBuildLayout_CopyGlobMapper;
      case 35:
        return myConceptBuildLayout_CopyHandler;
      case 36:
        return myConceptBuildLayout_CopyMapper;
      case 37:
        return myConceptBuildLayout_CopyParameter;
      case 38:
        return myConceptBuildLayout_CopyProcessor;
      case 39:
        return myConceptBuildLayout_CopyRegexMapper;
      case 40:
        return myConceptBuildLayout_CustomCopy;
      case 41:
        return myConceptBuildLayout_EchoProperties;
      case 42:
        return myConceptBuildLayout_EchoPropertyEntry;
      case 43:
        return myConceptBuildLayout_EchoXml;
      case 44:
        return myConceptBuildLayout_ExportAsJavaLibrary;
      case 45:
        return myConceptBuildLayout_File;
      case 46:
        return myConceptBuildLayout_FileSet;
      case 47:
        return myConceptBuildLayout_FileStub;
      case 48:
        return myConceptBuildLayout_Filemode;
      case 49:
        return myConceptBuildLayout_Files;
      case 50:
        return myConceptBuildLayout_FilesOf;
      case 51:
        return myConceptBuildLayout_Folder;
      case 52:
        return myConceptBuildLayout_Import;
      case 53:
        return myConceptBuildLayout_ImportContent;
      case 54:
        return myConceptBuildLayout_InJarNode;
      case 55:
        return myConceptBuildLayout_Jar;
      case 56:
        return myConceptBuildLayout_JarManifest;
      case 57:
        return myConceptBuildLayout_JarManifest_Attribute;
      case 58:
        return myConceptBuildLayout_JarManifest_Part;
      case 59:
        return myConceptBuildLayout_JarManifest_Section;
      case 60:
        return myConceptBuildLayout_NamedContainer;
      case 61:
        return myConceptBuildLayout_Node;
      case 62:
        return myConceptBuildLayout_PathElement;
      case 63:
        return myConceptBuildLayout_PureNode;
      case 64:
        return myConceptBuildLayout_Tar;
      case 65:
        return myConceptBuildLayout_TransparentContainer;
      case 66:
        return myConceptBuildLayout_War;
      case 67:
        return myConceptBuildLayout_Zip;
      case 68:
        return myConceptBuildMacro;
      case 69:
        return myConceptBuildNamedLayout;
      case 70:
        return myConceptBuildPlugin;
      case 71:
        return myConceptBuildProject;
      case 72:
        return myConceptBuildProjectDependency;
      case 73:
        return myConceptBuildProjectPart;
      case 74:
        return myConceptBuildRelativePath;
      case 75:
        return myConceptBuildSourceArchiveRelativePath;
      case 76:
        return myConceptBuildSourceMacroRelativePath;
      case 77:
        return myConceptBuildSourcePath;
      case 78:
        return myConceptBuildSourceProjectRelativePath;
      case 79:
        return myConceptBuildSourceSetContainer;
      case 80:
        return myConceptBuildSource_CompilablePart;
      case 81:
        return myConceptBuildSource_FilesetProjectPart;
      case 82:
        return myConceptBuildSource_JavaCP;
      case 83:
        return myConceptBuildSource_JavaClassFolder;
      case 84:
        return myConceptBuildSource_JavaContentFolder;
      case 85:
        return myConceptBuildSource_JavaContentRoot;
      case 86:
        return myConceptBuildSource_JavaDependency;
      case 87:
        return myConceptBuildSource_JavaDependencyExternalJar;
      case 88:
        return myConceptBuildSource_JavaDependencyExternalJarInFolder;
      case 89:
        return myConceptBuildSource_JavaDependencyFileset;
      case 90:
        return myConceptBuildSource_JavaDependencyJar;
      case 91:
        return myConceptBuildSource_JavaDependencyLibrary;
      case 92:
        return myConceptBuildSource_JavaDependencyModule;
      case 93:
        return myConceptBuildSource_JavaExternalJarFolderRef;
      case 94:
        return myConceptBuildSource_JavaExternalJarRef;
      case 95:
        return myConceptBuildSource_JavaFiles;
      case 96:
        return myConceptBuildSource_JavaJar;
      case 97:
        return myConceptBuildSource_JavaJars;
      case 98:
        return myConceptBuildSource_JavaLibrary;
      case 99:
        return myConceptBuildSource_JavaLibraryCP;
      case 100:
        return myConceptBuildSource_JavaLibraryElement;
      case 101:
        return myConceptBuildSource_JavaLibraryExternalJar;
      case 102:
        return myConceptBuildSource_JavaLibraryExternalJarFolder;
      case 103:
        return myConceptBuildSource_JavaModule;
      case 104:
        return myConceptBuildSource_JavaModuleOptions;
      case 105:
        return myConceptBuildSource_JavaOptions;
      case 106:
        return myConceptBuildSource_JavaResources;
      case 107:
        return myConceptBuildSource_JavaSources;
      case 108:
        return myConceptBuildSource_SingleFile;
      case 109:
        return myConceptBuildSource_SingleFolder;
      case 110:
        return myConceptBuildString;
      case 111:
        return myConceptBuildStringContainer;
      case 112:
        return myConceptBuildStringNotEmpty;
      case 113:
        return myConceptBuildStringPart;
      case 114:
        return myConceptBuildTextStringPart;
      case 115:
        return myConceptBuildVarRefStringPart;
      case 116:
        return myConceptBuildVariableMacro;
      case 117:
        return myConceptBuildVariableMacroInitValue;
      case 118:
        return myConceptBuildVariableMacroInitWithDate;
      case 119:
        return myConceptBuildVariableMacroInitWithString;
      case 120:
        return myConceptBuildVariableMacroInitWithValueFromFile;
      case 121:
        return myConceptGeneratorInternal_BuildSource_JavaJar;
      case 122:
        return myConceptGeneratorInternal_BuildSource_JavaLibrary;
      case 123:
        return myConceptGeneratorInternal_BuildSource_JavaModule;
      case 124:
        return myConceptGeneratorInternal_BuildSource_SingleFile;
      case 125:
        return myConceptGeneratorInternal_IWorkflowParticipantReference;
      case 126:
        return myConceptGeneratorInternal_IWorkfowParticipants;
      case 127:
        return myConceptGeneratorInternal_ProjectDependency;
      case 128:
        return myConceptIWorkflowParticipant;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0cf = new String[]{"jetbrains.mps.build.structure.BuildAspect", "jetbrains.mps.build.structure.BuildCompositePath", "jetbrains.mps.build.structure.BuildCustomWorkflow", "jetbrains.mps.build.structure.BuildDependency", "jetbrains.mps.build.structure.BuildExternalDependency", "jetbrains.mps.build.structure.BuildExternalLayout", "jetbrains.mps.build.structure.BuildExternalLayoutDependency", "jetbrains.mps.build.structure.BuildFileExcludeSelector", "jetbrains.mps.build.structure.BuildFileIncludeSelector", "jetbrains.mps.build.structure.BuildFileIncludesSelector", "jetbrains.mps.build.structure.BuildFileSelector", "jetbrains.mps.build.structure.BuildFileSelectorInAttribute", "jetbrains.mps.build.structure.BuildFolderMacro", "jetbrains.mps.build.structure.BuildInputFileSet", "jetbrains.mps.build.structure.BuildInputFiles", "jetbrains.mps.build.structure.BuildInputFolderSet", "jetbrains.mps.build.structure.BuildInputFolders", "jetbrains.mps.build.structure.BuildInputResourceSet", "jetbrains.mps.build.structure.BuildInputSingleFile", "jetbrains.mps.build.structure.BuildInputSingleFolder", "jetbrains.mps.build.structure.BuildJavaPlugin", "jetbrains.mps.build.structure.BuildLayout", "jetbrains.mps.build.structure.BuildLayout_AbstractContainer", "jetbrains.mps.build.structure.BuildLayout_AbstractCopy", "jetbrains.mps.build.structure.BuildLayout_Comment", "jetbrains.mps.build.structure.BuildLayout_CompileOutputOf", "jetbrains.mps.build.structure.BuildLayout_Container", "jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet", "jetbrains.mps.build.structure.BuildLayout_Copy", "jetbrains.mps.build.structure.BuildLayout_CopyFilter", "jetbrains.mps.build.structure.BuildLayout_CopyFilterFixCRLF", "jetbrains.mps.build.structure.BuildLayout_CopyFilterReplaceRegex", "jetbrains.mps.build.structure.BuildLayout_CopyFilterReplaceTokens", "jetbrains.mps.build.structure.BuildLayout_CopyFlattenMapper", "jetbrains.mps.build.structure.BuildLayout_CopyGlobMapper", "jetbrains.mps.build.structure.BuildLayout_CopyHandler", "jetbrains.mps.build.structure.BuildLayout_CopyMapper", "jetbrains.mps.build.structure.BuildLayout_CopyParameter", "jetbrains.mps.build.structure.BuildLayout_CopyProcessor", "jetbrains.mps.build.structure.BuildLayout_CopyRegexMapper", "jetbrains.mps.build.structure.BuildLayout_CustomCopy", "jetbrains.mps.build.structure.BuildLayout_EchoProperties", "jetbrains.mps.build.structure.BuildLayout_EchoPropertyEntry", "jetbrains.mps.build.structure.BuildLayout_EchoXml", "jetbrains.mps.build.structure.BuildLayout_ExportAsJavaLibrary", "jetbrains.mps.build.structure.BuildLayout_File", "jetbrains.mps.build.structure.BuildLayout_FileSet", "jetbrains.mps.build.structure.BuildLayout_FileStub", "jetbrains.mps.build.structure.BuildLayout_Filemode", "jetbrains.mps.build.structure.BuildLayout_Files", "jetbrains.mps.build.structure.BuildLayout_FilesOf", "jetbrains.mps.build.structure.BuildLayout_Folder", "jetbrains.mps.build.structure.BuildLayout_Import", "jetbrains.mps.build.structure.BuildLayout_ImportContent", "jetbrains.mps.build.structure.BuildLayout_InJarNode", "jetbrains.mps.build.structure.BuildLayout_Jar", "jetbrains.mps.build.structure.BuildLayout_JarManifest", "jetbrains.mps.build.structure.BuildLayout_JarManifest_Attribute", "jetbrains.mps.build.structure.BuildLayout_JarManifest_Part", "jetbrains.mps.build.structure.BuildLayout_JarManifest_Section", "jetbrains.mps.build.structure.BuildLayout_NamedContainer", "jetbrains.mps.build.structure.BuildLayout_Node", "jetbrains.mps.build.structure.BuildLayout_PathElement", "jetbrains.mps.build.structure.BuildLayout_PureNode", "jetbrains.mps.build.structure.BuildLayout_Tar", "jetbrains.mps.build.structure.BuildLayout_TransparentContainer", "jetbrains.mps.build.structure.BuildLayout_War", "jetbrains.mps.build.structure.BuildLayout_Zip", "jetbrains.mps.build.structure.BuildMacro", "jetbrains.mps.build.structure.BuildNamedLayout", "jetbrains.mps.build.structure.BuildPlugin", "jetbrains.mps.build.structure.BuildProject", "jetbrains.mps.build.structure.BuildProjectDependency", "jetbrains.mps.build.structure.BuildProjectPart", "jetbrains.mps.build.structure.BuildRelativePath", "jetbrains.mps.build.structure.BuildSourceArchiveRelativePath", "jetbrains.mps.build.structure.BuildSourceMacroRelativePath", "jetbrains.mps.build.structure.BuildSourcePath", "jetbrains.mps.build.structure.BuildSourceProjectRelativePath", "jetbrains.mps.build.structure.BuildSourceSetContainer", "jetbrains.mps.build.structure.BuildSource_CompilablePart", "jetbrains.mps.build.structure.BuildSource_FilesetProjectPart", "jetbrains.mps.build.structure.BuildSource_JavaCP", "jetbrains.mps.build.structure.BuildSource_JavaClassFolder", "jetbrains.mps.build.structure.BuildSource_JavaContentFolder", "jetbrains.mps.build.structure.BuildSource_JavaContentRoot", "jetbrains.mps.build.structure.BuildSource_JavaDependency", "jetbrains.mps.build.structure.BuildSource_JavaDependencyExternalJar", "jetbrains.mps.build.structure.BuildSource_JavaDependencyExternalJarInFolder", "jetbrains.mps.build.structure.BuildSource_JavaDependencyFileset", "jetbrains.mps.build.structure.BuildSource_JavaDependencyJar", "jetbrains.mps.build.structure.BuildSource_JavaDependencyLibrary", "jetbrains.mps.build.structure.BuildSource_JavaDependencyModule", "jetbrains.mps.build.structure.BuildSource_JavaExternalJarFolderRef", "jetbrains.mps.build.structure.BuildSource_JavaExternalJarRef", "jetbrains.mps.build.structure.BuildSource_JavaFiles", "jetbrains.mps.build.structure.BuildSource_JavaJar", "jetbrains.mps.build.structure.BuildSource_JavaJars", "jetbrains.mps.build.structure.BuildSource_JavaLibrary", "jetbrains.mps.build.structure.BuildSource_JavaLibraryCP", "jetbrains.mps.build.structure.BuildSource_JavaLibraryElement", "jetbrains.mps.build.structure.BuildSource_JavaLibraryExternalJar", "jetbrains.mps.build.structure.BuildSource_JavaLibraryExternalJarFolder", "jetbrains.mps.build.structure.BuildSource_JavaModule", "jetbrains.mps.build.structure.BuildSource_JavaModuleOptions", "jetbrains.mps.build.structure.BuildSource_JavaOptions", "jetbrains.mps.build.structure.BuildSource_JavaResources", "jetbrains.mps.build.structure.BuildSource_JavaSources", "jetbrains.mps.build.structure.BuildSource_SingleFile", "jetbrains.mps.build.structure.BuildSource_SingleFolder", "jetbrains.mps.build.structure.BuildString", "jetbrains.mps.build.structure.BuildStringContainer", "jetbrains.mps.build.structure.BuildStringNotEmpty", "jetbrains.mps.build.structure.BuildStringPart", "jetbrains.mps.build.structure.BuildTextStringPart", "jetbrains.mps.build.structure.BuildVarRefStringPart", "jetbrains.mps.build.structure.BuildVariableMacro", "jetbrains.mps.build.structure.BuildVariableMacroInitValue", "jetbrains.mps.build.structure.BuildVariableMacroInitWithDate", "jetbrains.mps.build.structure.BuildVariableMacroInitWithString", "jetbrains.mps.build.structure.BuildVariableMacroInitWithValueFromFile", "jetbrains.mps.build.structure.GeneratorInternal_BuildSource_JavaJar", "jetbrains.mps.build.structure.GeneratorInternal_BuildSource_JavaLibrary", "jetbrains.mps.build.structure.GeneratorInternal_BuildSource_JavaModule", "jetbrains.mps.build.structure.GeneratorInternal_BuildSource_SingleFile", "jetbrains.mps.build.structure.GeneratorInternal_IWorkflowParticipantReference", "jetbrains.mps.build.structure.GeneratorInternal_IWorkfowParticipants", "jetbrains.mps.build.structure.GeneratorInternal_ProjectDependency", "jetbrains.mps.build.structure.IWorkflowParticipant"};
}
