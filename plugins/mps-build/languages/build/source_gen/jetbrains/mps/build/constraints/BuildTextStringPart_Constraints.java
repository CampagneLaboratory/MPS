package jetbrains.mps.build.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.build.behavior.BuildTextStringPart_Behavior;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class BuildTextStringPart_Constraints extends BaseConstraintsDescriptor {
  public BuildTextStringPart_Constraints() {
    super("jetbrains.mps.build.structure.BuildTextStringPart");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("name", new BasePropertyConstraintsDescriptor("name", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node) {
        String propertyName = "name";
        return SPropertyOperations.getString(node, "text");
      }
    });
    properties.put("text", new BasePropertyConstraintsDescriptor("text", this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "text";
        {
          SNode container = BuildTextStringPart_Behavior.call_getContainer_6083230236994622122(node);
          if (container != null) {
            return BehaviorReflection.invokeVirtual(Boolean.TYPE, container, "virtual_isValidPart_9184644532456897464", new Object[]{(SPropertyOperations.getString(propertyValue)), SNodeOperations.getParent(node).getRoleInParent()});
          }
          return !((SPropertyOperations.getString(propertyValue)).contains("$"));
        }
      }
    });
    return properties;
  }
}
