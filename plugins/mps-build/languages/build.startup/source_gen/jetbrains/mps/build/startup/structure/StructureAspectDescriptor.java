package jetbrains.mps.build.startup.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptClassPathItem = new ConceptDescriptorBuilder("jetbrains.mps.build.startup.structure.ClassPathItem").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("path").create();
  /*package*/ final ConceptDescriptor myConceptMpsStartupScript = new ConceptDescriptorBuilder("jetbrains.mps.build.startup.structure.MpsStartupScript").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("startupFolder", "startupClass").children(new String[]{"bootClasspath", "vmOptions", "vmOptions64"}, new boolean[]{true, true, true}).create();
  /*package*/ final ConceptDescriptor myConceptSimpleVmOptions = new ConceptDescriptorBuilder("jetbrains.mps.build.startup.structure.SimpleVmOptions").super_("jetbrains.mps.build.startup.structure.VmOptions").parents("jetbrains.mps.build.startup.structure.VmOptions").properties("options", "commented").create();
  /*package*/ final ConceptDescriptor myConceptTextFile = new ConceptDescriptorBuilder("jetbrains.mps.build.startup.structure.TextFile").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"lines"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptTextLine = new ConceptDescriptorBuilder("jetbrains.mps.build.startup.structure.TextLine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("text").create();
  /*package*/ final ConceptDescriptor myConceptVmOptions = new ConceptDescriptorBuilder("jetbrains.mps.build.startup.structure.VmOptions").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptClassPathItem, myConceptMpsStartupScript, myConceptSimpleVmOptions, myConceptTextFile, myConceptTextLine, myConceptVmOptions);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0j, conceptFqName)) {
      case 0:
        return myConceptClassPathItem;
      case 1:
        return myConceptMpsStartupScript;
      case 2:
        return myConceptSimpleVmOptions;
      case 3:
        return myConceptTextFile;
      case 4:
        return myConceptTextLine;
      case 5:
        return myConceptVmOptions;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0j = new String[]{"jetbrains.mps.build.startup.structure.ClassPathItem", "jetbrains.mps.build.startup.structure.MpsStartupScript", "jetbrains.mps.build.startup.structure.SimpleVmOptions", "jetbrains.mps.build.startup.structure.TextFile", "jetbrains.mps.build.startup.structure.TextLine", "jetbrains.mps.build.startup.structure.VmOptions"};
}
