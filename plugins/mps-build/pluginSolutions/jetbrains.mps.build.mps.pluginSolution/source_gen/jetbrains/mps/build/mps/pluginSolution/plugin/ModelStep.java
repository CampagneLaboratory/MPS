package jetbrains.mps.build.mps.pluginSolution.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import com.intellij.openapi.project.Project;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.project.Solution;
import java.util.List;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.extapi.model.EditableSModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.annotations.NotNull;

public class ModelStep extends TwoOptionsStep<SModel> {
  public ModelStep(Project project, AbstractBuildGenerator buildGenerator, IErrorHandler handler) {
    super(project, buildGenerator, handler);
  }

  protected void setChecked(boolean checked) {
    this.myGenerator.setCreateModel(checked);
  }

  protected boolean getChecked() {
    return this.myGenerator.getCreateModel();
  }

  protected String getComboBoxName() {
    return "Use existing model:";
  }

  protected String getVariantName(final SModel model) {
    return NameUtil.shortNameFromLongName(model.getModelName());
  }

  protected String getTextFieldText() {
    return this.myGenerator.getNewModelName();
  }

  protected void setTextFieldText(String text) {
    this.myGenerator.setNewModelName(text);
  }

  protected String getCheckBoxName() {
    return "Create new model";
  }

  protected void setVariant(SModel m) {
    this.myGenerator.setModel(m);
  }

  protected String getTextFieldName() {
    return "New model name:";
  }

  protected SModel[] getVariants() {
    final Solution solution = this.myGenerator.getSolution();
    if (solution == null) {
      return new SModel[0];
    } else {
      List<SModel> models = ModelAccess.instance().runReadAction(new Computable<List<SModel>>() {
        public List<SModel> compute() {
          Iterable<SModel> models = Sequence.fromIterable(Collections.<SModel>emptyList());
          for (ModelRoot mr : solution.getModelRoots()) {
            models = Sequence.fromIterable(models).concat(Sequence.fromIterable(mr.getModels()));
          }
          return Sequence.fromIterable(models).where(new IWhereFilter<SModel>() {
            public boolean accept(SModel it) {
              return it instanceof EditableSModel && !(((EditableSModel) it).isReadOnly());
            }
          }).toListSequence();
        }
      });
      return ListSequence.fromList(models).toGenericArray(SModel.class);
    }
  }

  public String getDescription() {
    return "Select a model to create a new build script.";
  }

  protected boolean isCheckBoxEnabled() {
    return !(this.myGenerator.getCreateSolution());
  }

  protected boolean isValid(String text) {
    return this.myGenerator.isValidModelName(text);
  }

  protected String getWarningText(String text) {
    if (text.equals("")) {
      return "Empty model name is not allowed.";
    }
    return "Model " + text + " already exists, choose another name.";
  }

  @NotNull
  @Override
  public String getImageText() {
    return "Script Model";
  }
}
