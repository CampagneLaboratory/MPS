package jetbrains.mps.build.mps.pluginSolution.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.project.Solution;
import java.util.List;
import jetbrains.mps.util.CollectionUtil;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.annotations.NotNull;

public class SolutionStep extends TwoOptionsStep<SModule> {
  private final MPSProject myMpsProject;

  public SolutionStep(Project project, AbstractBuildGenerator generator, IErrorHandler handler) {
    super(project, generator, handler);
    this.myMpsProject = this.myProject.getComponent(MPSProject.class);
  }

  @Override
  public String getDescription() {
    return "Select a solution to create a new build script.";
  }

  @Override
  protected void setChecked(boolean checked) {
    this.myGenerator.setCreateSolution(checked);
  }

  @Override
  protected boolean getChecked() {
    return this.myGenerator.getCreateSolution();
  }

  @Override
  protected String getComboBoxName() {
    return "Use existing solution:";
  }

  @Override
  protected String getVariantName(final SModule module) {
    return ModelAccess.instance().runReadAction(new Computable<String>() {
      @Override
      public String compute() {
        return module.toString();
      }
    });
  }

  @Override
  protected String getTextFieldText() {
    return this.myGenerator.getNewSolutionName();
  }

  @Override
  protected void setTextFieldText(String text) {
    this.myGenerator.setNewSolutionName(text);
  }

  @Override
  protected String getCheckBoxName() {
    return "Create new solution";
  }

  @Override
  protected void setVariant(SModule m) {
    this.myGenerator.setSolution((Solution) m);
  }

  @Override
  protected String getTextFieldName() {
    return "New solution name:";
  }

  @Override
  protected SModule[] getVariants() {
    List<SModule> solutionsList = CollectionUtil.filter(this.myMpsProject.getModules(), new Condition<SModule>() {
      @Override
      public boolean met(SModule module) {
        return module instanceof Solution;
      }
    });
    return ListSequence.fromList(solutionsList).toGenericArray(SModule.class);
  }

  @Override
  protected boolean isCheckBoxEnabled() {
    return true;
  }

  @Override
  protected boolean isValid(String text) {
    return this.myGenerator.isValidSolutionName(text);
  }

  @Override
  protected String getWarningText(String text) {
    if (text.equals("")) {
      return "Empty solution name not allowed.";
    }
    return "Module " + text + " already exists, choose another name.";
  }

  @NotNull
  @Override
  public String getImageText() {
    return "Script Solution";
  }
}
