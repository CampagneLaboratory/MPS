package jetbrains.mps.build.mps.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.execution.lib.ui.FieldWithPathChooseDialog;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import java.awt.GridBagLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.common.LayoutUtil;
import javax.swing.JLabel;
import java.io.File;
import com.intellij.ide.wizard.CommitStepException;

public class IdeaPlugunStep extends AbstractStep {
  private static final String PLUGIN_XML = "plugin.xml";

  private final AbstractBuildGenerator myGenerator;
  private final IErrorHandler myHandler;
  private FieldWithPathChooseDialog myPluginXmlChooser;
  private JCheckBox myPackAsIdeaPlugin;

  public IdeaPlugunStep(AbstractBuildGenerator buildGenerator, IErrorHandler handler) {
    myGenerator = buildGenerator;
    myHandler = handler;
  }

  public JComponent createMainComponent() {
    JPanel panel = new JPanel(new GridBagLayout());

    myPackAsIdeaPlugin = new JCheckBox("Pack modules as IDEA plugin", myGenerator.isPackAsIdeaPlugin());
    myPackAsIdeaPlugin.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        myGenerator.setPackAsIdeaPlugin(myPackAsIdeaPlugin.isSelected());
        updatePluginXmlChooser();
      }
    });
    myPluginXmlChooser = new FieldWithPathChooseDialog(new FileChooserDescriptor(true, false, false, false, false, false) {
      @Override
      public boolean isFileVisible(VirtualFile file, boolean b) {
        if (!(super.isFileVisible(file, b))) {
          return false;
        }
        return file.isDirectory() || eq_h4a1qd_a0a1a0a0a0a0e0a(file.getName(), IdeaPlugunStep.PLUGIN_XML);
      }
    });
    myPluginXmlChooser.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        updatePluginXmlChooser();
      }
    });
    updatePluginXmlChooser();

    panel.add(myPackAsIdeaPlugin, LayoutUtil.createLabelConstraints(0));
    panel.add(new JLabel("Select plugin.xml location:"), LayoutUtil.createLabelConstraints(1));
    panel.add(myPluginXmlChooser, LayoutUtil.createPanelConstraints(2));

    return panel;
  }

  private void updatePluginXmlChooser() {
    myPluginXmlChooser.setEditable(myGenerator.isPackAsIdeaPlugin());
    String pluginXml = myPluginXmlChooser.getText();
    if (myGenerator.isPackAsIdeaPlugin() && (StringUtils.isEmpty(pluginXml) || !(new File(pluginXml).exists()))) {
      myHandler.setErrorText("Path to plugin.xml file required.");
    } else {
      myHandler.setErrorText(null);
    }
  }

  public String getDescription() {
    return "Select which type of package to build: a zip archive or a plugin for IDEA.";
  }

  @Override
  public void _init() {
    super._init();
    String errorText = null;
    if (!(myGenerator.isValid())) {
      errorText = "Invalid input in previous steps.";
    }
    myHandler.setErrorText(errorText);

    myPackAsIdeaPlugin.setSelected(myGenerator.isPackAsIdeaPlugin());
    myPluginXmlChooser.setText(myGenerator.getPathToPluginXml());
    updatePluginXmlChooser();
  }

  @Override
  public void _commit(boolean b) throws CommitStepException {
    super._commit(b);
    myGenerator.setPackAsIdeaPlugin(myPackAsIdeaPlugin.isSelected());
    myGenerator.setPathToPluginXml(myPluginXmlChooser.getText());
  }

  private static boolean eq_h4a1qd_a0a1a0a0a0a0e0a(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
