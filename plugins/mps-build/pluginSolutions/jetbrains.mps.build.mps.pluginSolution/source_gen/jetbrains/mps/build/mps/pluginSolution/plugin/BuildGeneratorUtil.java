package jetbrains.mps.build.mps.pluginSolution.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.project.Solution;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.extapi.model.EditableSModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.project.IModule;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.ModuleFileTracker;
import jetbrains.mps.ide.newSolutionDialog.NewModuleUtil;

public class BuildGeneratorUtil {
  public BuildGeneratorUtil() {
  }

  public static SModel createModel(final String modelName, final Solution solution) {
    List<SModel> ownModelDescriptors = solution.getOwnModelDescriptors();
    final Wrappers._T<SModel> model = new Wrappers._T<SModel>(null);
    for (SModel descriptor : ListSequence.fromList(ownModelDescriptors)) {
      if (descriptor.getReference().getModelName().equals(modelName)) {
        model.value = descriptor;
        break;
      }
    }
    if (model.value == null) {
      ModelAccess.instance().runWriteAction(new Runnable() {
        public void run() {
          model.value = solution.getModelRoots().iterator().next().createModel(modelName);
          ((EditableSModel) model.value).setChanged(true);
          SModelRepository.getInstance().registerModelDescriptor(model.value, solution);
        }
      });
    }
    return model.value;
  }

  public static Solution createSolution(MPSProject mpsProject, String solutionName, IFile solutionBaseDirFile) {
    String solutionBaseDirPath = solutionBaseDirFile.getPath();
    if (!(BuildGeneratorUtil.isValidSolutionDir(solutionBaseDirFile))) {
      int i = 0;
      do {
        solutionBaseDirFile = FileSystem.getInstance().getFileByPath(solutionBaseDirPath + i);
        i++;
      } while (!(BuildGeneratorUtil.isValidSolutionDir(solutionBaseDirFile)));
    }

    if (!(solutionBaseDirFile.exists())) {
      solutionBaseDirFile.mkdirs();
    }

    final IFile solutionFile = solutionBaseDirFile.getDescendant(solutionName + MPSExtentions.DOT_SOLUTION);
    final Solution solution;
    if (solutionFile.exists()) {
      IModule module = ModelAccess.instance().runReadAction(new Computable<IModule>() {
        @Override
        public IModule compute() {
          return ModuleFileTracker.getInstance().getModuleByFile(solutionFile);
        }
      });
      if (module instanceof Solution) {
        solution = (Solution) module;
      } else if (module == null) {
        solution = BuildGeneratorUtil.createSolutionFromFile(mpsProject, solutionName, solutionFile);
      } else {
        return null;
      }
    } else {
      solution = BuildGeneratorUtil.createSolutionFromFile(mpsProject, solutionName, solutionFile);
    }
    return solution;
  }

  private static boolean isValidSolutionDir(IFile baseDirFile) {
    return !(baseDirFile.getDescendant(Solution.SOLUTION_MODELS).exists()) || baseDirFile.getDescendant(Solution.SOLUTION_MODELS).getChildren().isEmpty();
  }

  public static Solution createSolutionFromFile(final MPSProject mpsProject, String solutionName, final IFile solutionDescriptorFile) {
    return NewModuleUtil.createSolution(solutionName, solutionDescriptorFile.getParent().getPath(), mpsProject);
  }
}
