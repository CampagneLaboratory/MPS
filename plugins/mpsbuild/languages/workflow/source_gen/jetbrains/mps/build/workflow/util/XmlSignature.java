package jetbrains.mps.build.workflow.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.build.workflow.behavior.BwfPathDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.core.xml.behavior.XmlValuePart_Behavior;


/**
 * Process only default xml elements (XmlElement) and attributes.
 */
public class XmlSignature {
  private final StringBuilder sb = new StringBuilder();
  private boolean hasErrors;

  public XmlSignature() {
    hasErrors = false;
  }

  public XmlSignature add(SNode element) {
    if (element == null || hasErrors) {
      return this;
    }

    if (SNodeOperations.isInstanceOf(element, "jetbrains.mps.core.xml.structure.XmlElement")) {
      addElement(SNodeOperations.cast(element, "jetbrains.mps.core.xml.structure.XmlElement"));
    } else if (SNodeOperations.isInstanceOf(element, "jetbrains.mps.build.workflow.structure.BwfPathReference")) {
      sb.append("<pathref ");
      sb.append(BwfPathDeclaration_Behavior.call_getPathId_6647099934207210775(SLinkOperations.getTarget(SNodeOperations.cast(element, "jetbrains.mps.build.workflow.structure.BwfPathReference"), "target", false)));
      sb.append("/>");
    } else {
      hasErrors = true;
    }
    return this;
  }

  private XmlSignature addElement(SNode element) {
    sb.append("<");
    sb.append(SPropertyOperations.getString(element, "tagName"));
    if (ListSequence.fromList(SLinkOperations.getTargets(element, "attributes", true)).isNotEmpty()) {
      for (SNode attr : SLinkOperations.getTargets(element, "attributes", true)) {
        if (SNodeOperations.isInstanceOf(attr, "jetbrains.mps.core.xml.structure.XmlAttribute")) {
          sb.append(" ");
          addAttribute(SNodeOperations.cast(attr, "jetbrains.mps.core.xml.structure.XmlAttribute"));
        } else {
          hasErrors = true;
        }
      }
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(element, "content", true)).isEmpty()) {
      sb.append("/>");
      return this;
    }
    sb.append(">");
    for (SNode content : SLinkOperations.getTargets(element, "content", true)) {
      if (SNodeOperations.isInstanceOf(content, "jetbrains.mps.core.xml.structure.XmlBaseElement")) {
        add(SNodeOperations.cast(content, "jetbrains.mps.core.xml.structure.XmlElement"));
      } else if (SNodeOperations.isInstanceOf(content, "jetbrains.mps.core.xml.structure.XmlText") && StringUtils.isEmpty(SPropertyOperations.getString(SNodeOperations.cast(content, "jetbrains.mps.core.xml.structure.XmlText"), "value"))) {
        // ignore 
      } else {
        hasErrors = true;
      }
    }
    sb.append("</");
    sb.append(SPropertyOperations.getString(element, "tagName"));
    sb.append(">");
    return this;
  }

  private void addAttribute(SNode attr) {
    sb.append(SPropertyOperations.getString(attr, "attrName"));
    sb.append("=");
    sb.append('"');
    for (SNode val : SLinkOperations.getTargets(attr, "value", true)) {
      if (SNodeOperations.isInstanceOf(val, "jetbrains.mps.core.xml.structure.XmlCharRefValue")) {
        sb.append("&#");
        sb.append(SPropertyOperations.getString(SNodeOperations.cast(val, "jetbrains.mps.core.xml.structure.XmlCharRefValue"), "charCode"));
        sb.append(";");
      } else if (SNodeOperations.isInstanceOf(val, "jetbrains.mps.core.xml.structure.XmlEntityRefValue")) {
        sb.append("&");
        sb.append(SPropertyOperations.getString(SNodeOperations.cast(val, "jetbrains.mps.core.xml.structure.XmlEntityRefValue"), "entityName"));
        sb.append(";");
      } else if (SNodeOperations.isInstanceOf(val, "jetbrains.mps.core.xml.structure.XmlNoSpaceValue")) {
        // ignore 
      } else if (SNodeOperations.isInstanceOf(val, "jetbrains.mps.core.xml.structure.XmlTextValue")) {
        SNode tv = SNodeOperations.cast(val, "jetbrains.mps.core.xml.structure.XmlTextValue");
        if (XmlValuePart_Behavior.call_onNewLine_3080189811177340422(tv)) {
          sb.append("\n");
        }
        sb.append(SPropertyOperations.getString(tv, "text"));
        if (XmlValuePart_Behavior.call_hasNewLineAfter_3080189811177340429(tv)) {
          if (SNodeOperations.isInstanceOf(SNodeOperations.getNextSibling(tv), "jetbrains.mps.core.xml.structure.XmlValuePart") && XmlValuePart_Behavior.call_onNewLine_3080189811177340422(SNodeOperations.cast(SNodeOperations.getNextSibling(tv), "jetbrains.mps.core.xml.structure.XmlValuePart"))) {
            return;
          }
          sb.append("\n");
        }
      } else {
        hasErrors = true;
      }
    }
    sb.append('"');
  }

  public String getResult() {
    return sb.toString();
  }

  public boolean hasErrors() {
    return hasErrors;
  }
}
