package jetbrains.mps.build.workflow.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.ScopeProvider;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BwfTaskPart extends BwfProjectPart implements ScopeProvider {
  public static final String concept = "jetbrains.mps.build.workflow.structure.BwfTaskPart";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String TASK = "task";
  public static final String SUB_TASKS = "subTasks";
  public static final String ADDITIONAL_DEPENDENCIES = "additionalDependencies";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public BwfTaskPart(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(BwfTaskPart.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BwfTaskPart.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BwfTaskPart.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BwfTaskPart.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BwfTaskPart.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BwfTaskPart.VIRTUAL_PACKAGE, value);
  }

  public BwfTask getTask() {
    return (BwfTask) this.getReferent(BwfTask.class, BwfTaskPart.TASK);
  }

  public void setTask(BwfTask node) {
    super.setReferent(BwfTaskPart.TASK, node);
  }

  public int getSubTasksesCount() {
    return this.getChildCount(BwfTaskPart.SUB_TASKS);
  }

  public Iterator<BwfSubTask> subTaskses() {
    return this.children(BwfSubTask.class, BwfTaskPart.SUB_TASKS);
  }

  public List<BwfSubTask> getSubTaskses() {
    return this.getChildren(BwfSubTask.class, BwfTaskPart.SUB_TASKS);
  }

  public void addSubTasks(BwfSubTask node) {
    this.addChild(BwfTaskPart.SUB_TASKS, node);
  }

  public void insertSubTasks(BwfSubTask prev, BwfSubTask node) {
    this.insertChild(prev, BwfTaskPart.SUB_TASKS, node);
  }

  public int getAdditionalDependenciesesCount() {
    return this.getChildCount(BwfTaskPart.ADDITIONAL_DEPENDENCIES);
  }

  public Iterator<BwfTaskDependency> additionalDependencieses() {
    return this.children(BwfTaskDependency.class, BwfTaskPart.ADDITIONAL_DEPENDENCIES);
  }

  public List<BwfTaskDependency> getAdditionalDependencieses() {
    return this.getChildren(BwfTaskDependency.class, BwfTaskPart.ADDITIONAL_DEPENDENCIES);
  }

  public void addAdditionalDependencies(BwfTaskDependency node) {
    this.addChild(BwfTaskPart.ADDITIONAL_DEPENDENCIES, node);
  }

  public void insertAdditionalDependencies(BwfTaskDependency prev, BwfTaskDependency node) {
    this.insertChild(prev, BwfTaskPart.ADDITIONAL_DEPENDENCIES, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(BwfTaskPart.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, BwfTaskPart.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, BwfTaskPart.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(BwfTaskPart.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, BwfTaskPart.SMODEL_ATTRIBUTE, node);
  }

  public static BwfTaskPart newInstance(SModel sm, boolean init) {
    return (BwfTaskPart) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.workflow.structure.BwfTaskPart", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BwfTaskPart newInstance(SModel sm) {
    return BwfTaskPart.newInstance(sm, false);
  }
}
