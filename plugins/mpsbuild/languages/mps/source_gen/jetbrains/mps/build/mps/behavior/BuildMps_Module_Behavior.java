package jetbrains.mps.build.mps.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.build.util.VisibleArtifacts;
import jetbrains.mps.build.mps.util.MPSModulesClosure;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class BuildMps_Module_Behavior {
  public static void init(SNode thisNode) {
  }

  public static Iterable<SNode> virtual_getDependencyTargets_841011766566205095(SNode thisNode, final VisibleArtifacts artifacts) {
    MPSModulesClosure closure = new MPSModulesClosure(artifacts.getGenContext(), thisNode).closure();

    Iterable<SNode> requiredModules = Sequence.fromIterable(((Iterable<SNode>) closure.getModules())).concat(Sequence.fromIterable(((Iterable<SNode>) closure.getLanguagesWithRuntime()))).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.as(artifacts.toOriginalNode(it), "jetbrains.mps.build.mps.structure.BuildMps_Module");
      }
    });
    List<SNode> result = new ArrayList<SNode>();
    for (SNode m : Sequence.fromIterable(requiredModules)) {
      if (SNodeOperations.getContainingRoot(m) == SNodeOperations.getContainingRoot(thisNode)) {
        continue;
      }

      SNode artifact = SNodeOperations.as(artifacts.findArtifact(m), "jetbrains.mps.build.structure.BuildLayout_Node");
      if (artifact != null) {
        ListSequence.fromList(result).addElement(artifact);
      }
    }
    Iterable<SNode> requiredJava = closure.getRequiredJava(thisNode).getModules();

    for (SNode jm : Sequence.fromIterable(requiredJava)) {
      if (SNodeOperations.getContainingRoot(jm) == SNodeOperations.getContainingRoot(thisNode)) {
        continue;
      }

      SNode artifact = SNodeOperations.as(artifacts.findArtifact(jm), "jetbrains.mps.build.structure.BuildLayout_Node");
      if (artifact != null) {
        ListSequence.fromList(result).addElement(artifact);
      }
    }

    if (ListSequence.fromList(result).isNotEmpty()) {
      artifacts.needsFetch(thisNode);
      return result;
    }
    return null;
  }
}
