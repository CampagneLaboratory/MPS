package jetbrains.mps.build.mps.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.build.util.DependenciesHelper;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.build.behavior.BuildSourcePath_Behavior;
import jetbrains.mps.build.util.Context;
import java.io.File;
import java.io.IOException;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.project.io.DescriptorIO;
import jetbrains.mps.project.io.DescriptorIOFacade;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ModuleLoader {
  private final String workingDirectory;
  private final TemplateQueryContext genContext;
  private final SNode module;
  private SNode originalModule;

  public ModuleLoader(SNode module, String workingDirectory, TemplateQueryContext genContext) {
    this.workingDirectory = workingDirectory;
    this.genContext = genContext;
    this.module = module;
    this.originalModule = SNodeOperations.as(DependenciesHelper.getOriginalNode(module, genContext), "jetbrains.mps.build.mps.structure.BuildMps_Module");
    if (this.originalModule == null) {
      this.originalModule = module;
    }
  }

  public void importModule() {
    ModuleDescriptor md = loadFile();
    if (md != null) {
      SPropertyOperations.set(module, "uuid", md.getModuleReference().getModuleId().toString());
      SPropertyOperations.set(module, "name", md.getModuleReference().getModuleFqName());
    }
  }

  public void load() {
    ModuleDescriptor md = loadFile();
    if (md != null) {
      loadModule(md);
      SLinkOperations.setTarget(module, "path", null, true);
    }
  }

  private ModuleDescriptor loadFile() {
    String moduleFilePath = BuildSourcePath_Behavior.call_getLocalPath_5481553824944787364(SLinkOperations.getTarget(module, "path", true), (genContext != null ?
      Context.defaultContext(genContext) :
      Context.defaultContext()
    ));
    try {
      moduleFilePath = new File(moduleFilePath).getCanonicalPath();
    } catch (IOException ex) {
      // ignore 
    }
    IFile file = FileSystem.getInstance().getFileByPath(moduleFilePath);
    if (!(file.exists()) || file.isDirectory()) {
      report("cannot import module file for " + SPropertyOperations.getString(module, "name") + ": file doesn't exist (" + moduleFilePath + ")", originalModule);
      return null;
    }

    DescriptorIO<? extends ModuleDescriptor> loader = DescriptorIOFacade.getInstance().fromFileType(file);
    if (loader == null) {
      report("cannot import module file for " + SPropertyOperations.getString(module, "name") + ": unknown module type", originalModule);
      return null;
    }

    try {
      ModuleDescriptor md = loader.readFromFile(file);
      if (md.getLoadException() != null) {
        report("cannot import module file for " + SPropertyOperations.getString(module, "name") + ": exception: " + md.getLoadException().getMessage(), originalModule);
        return null;
      }

      return md;
    } catch (Exception ex) {
      report("cannot import module file for " + SPropertyOperations.getString(module, "name") + ": exception: " + ex.getMessage(), originalModule);
    }
    return null;
  }

  private void loadModule(ModuleDescriptor md) {
    if (!(checkModuleReference(md))) {
      return;
    }

    if (SNodeOperations.isInstanceOf(module, "jetbrains.mps.build.mps.structure.BuildMps_Language")) {
      if (!(md instanceof LanguageDescriptor)) {
        report("imported file is not a language file " + SPropertyOperations.getString(module, "name"), originalModule);
        return;
      }
    } else if (SNodeOperations.isInstanceOf(module, "jetbrains.mps.build.mps.structure.BuildMps_Solution")) {
      if (!(md instanceof SolutionDescriptor)) {
        report("imported file is not a solution file " + SPropertyOperations.getString(module, "name"), originalModule);
        return;
      }
    }

    collectDependencies(md);
  }

  private boolean checkModuleReference(ModuleDescriptor md) {
    boolean success = true;
    ModuleReference moduleReference = md.getModuleReference();
    if (neq_a6ewnz_a0c0e(SPropertyOperations.getString(module, "name"), moduleReference.getModuleFqName())) {
      report("name in import doesn't match file content " + SPropertyOperations.getString(module, "name") + ", should be: " + moduleReference.getModuleFqName(), originalModule);
      success = false;
    }
    if (neq_a6ewnz_a0d0e(SPropertyOperations.getString(module, "uuid"), moduleReference.getModuleId().toString())) {
      report("module id in import doesn't match file content " + SPropertyOperations.getString(module, "name") + ", should be: " + moduleReference.getModuleId().toString(), originalModule);
      success = false;
    }
    return success;
  }

  private void collectDependencies(ModuleDescriptor md) {
    for (Dependency dep : md.getDependencies()) {
      boolean reexport = dep.isReexport();
      ModuleReference moduleRef = dep.getModuleRef();
      boolean found = false;

      // TODO 

      if (!(found)) {
        SNode res = SModelOperations.createNewNode(SNodeOperations.getModel(module), "jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModuleById", null);
        SPropertyOperations.set(res, "targetId", moduleRef.getModuleId().toString());
        SPropertyOperations.set(res, "targetName", moduleRef.getModuleFqName());
        SPropertyOperations.set(res, "reexport", "" + reexport);
        if (reexport) {
          reportWarning("reexport dependency should be extracted into build script: " + dep.toString(), originalModule);
        }
        ListSequence.fromList(SLinkOperations.getTargets(module, "dependencies", true)).addElement(res);
      }
    }
  }

  protected void report(String message, SNode node) {
    if (genContext == null) {
      throw new ModuleLoader.ModuleLoaderException(message, node);
    }

    genContext.showErrorMessage(node, message);
  }

  protected void reportWarning(String message, SNode node) {
    if (genContext == null) {
      return;
    }

    genContext.showWarningMessage(node, message);
  }

  private static boolean neq_a6ewnz_a0c0e(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean neq_a6ewnz_a0d0e(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  public static class ModuleLoaderException extends RuntimeException {
    private SNode node;

    public ModuleLoaderException(String message, SNode node) {
      super(message);
      this.node = node;
    }

    public SNode getNode() {
      return node;
    }
  }
}
