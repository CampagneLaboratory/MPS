package jetbrains.mps.build.mps.generator.main.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.build.util.DependenciesHelper;
import jetbrains.mps.build.behavior.BuildSourcePath_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.build.util.Context;
import java.io.File;
import java.io.IOException;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.project.io.DescriptorIO;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.project.io.DescriptorIOFacade;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import jetbrains.mps.project.structure.modules.ModuleReference;

public class ModuleLoader {
  private final String workingDirectory;
  private final TemplateQueryContext genContext;
  private final SNode module;
  private SNode originalModule;

  public ModuleLoader(SNode module, String workingDirectory, TemplateQueryContext genContext) {
    this.workingDirectory = workingDirectory;
    this.genContext = genContext;
    this.module = module;
    this.originalModule = SNodeOperations.as(DependenciesHelper.getOriginalNode(module, genContext), "jetbrains.mps.build.mps.structure.BuildMps_Module");
    if (this.originalModule == null) {
      this.originalModule = module;
    }
  }

  public void load() {
    String moduleFilePath = BuildSourcePath_Behavior.call_getLocalPath_5481553824944787364(SLinkOperations.getTarget(module, "path", true), Context.defaultContext(genContext));
    try {
      moduleFilePath = new File(moduleFilePath).getCanonicalPath();
    } catch (IOException ex) {
      // ignore 
    }
    IFile file = FileSystem.getInstance().getFileByPath(moduleFilePath);
    if (!(file.exists()) || file.isDirectory()) {
      genContext.showErrorMessage(originalModule, "cannot import module file for " + SPropertyOperations.getString(module, "name") + ": file doesn't exist (" + moduleFilePath + ")");
      return;
    }

    DescriptorIO<? extends ModuleDescriptor> loader = DescriptorIOFacade.getInstance().fromFileType(file);
    if (loader == null) {
      genContext.showErrorMessage(originalModule, "cannot import module file for " + SPropertyOperations.getString(module, "name") + ": unknown module type");
      return;
    }

    try {
      ModuleDescriptor md = loader.readFromFile(file);
      if (md.getLoadException() != null) {
        genContext.showErrorMessage(originalModule, "cannot import module file for " + SPropertyOperations.getString(module, "name") + ": exception: " + md.getLoadException().getMessage());
        return;
      }

      if (!(loadModule(md))) {
        return;
      }

      SLinkOperations.setTarget(module, "path", null, true);
    } catch (Exception ex) {
      genContext.showErrorMessage(originalModule, "cannot import module file for " + SPropertyOperations.getString(module, "name") + ": exception: " + ex.getMessage());
      return;
    }
  }

  private boolean loadModule(ModuleDescriptor md) {
    if (!(checkModuleReference(md))) {
      return false;
    }

    if (SNodeOperations.isInstanceOf(module, "jetbrains.mps.build.mps.structure.BuildMps_Language")) {
      if (!(md instanceof LanguageDescriptor)) {
        genContext.showErrorMessage(originalModule, "imported file is not a language file " + SPropertyOperations.getString(module, "name"));
        return false;
      }
    } else if (SNodeOperations.isInstanceOf(module, "jetbrains.mps.build.mps.structure.BuildMps_Solution")) {
      if (!(md instanceof SolutionDescriptor)) {
        genContext.showErrorMessage(originalModule, "imported file is not a solution file " + SPropertyOperations.getString(module, "name"));
        return false;
      }
    }
    return true;
  }

  private boolean checkModuleReference(ModuleDescriptor md) {
    boolean success = true;
    ModuleReference moduleReference = md.getModuleReference();
    if (neq_a6ewnz_a0c0c(SPropertyOperations.getString(module, "name"), moduleReference.getModuleFqName())) {
      genContext.showErrorMessage(originalModule, "name in import doesn't match file content " + SPropertyOperations.getString(module, "name") + ", should be: " + moduleReference.getModuleFqName());
      success = false;
    }
    if (neq_a6ewnz_a0d0c(SPropertyOperations.getString(module, "uuid"), moduleReference.getModuleId().toString())) {
      genContext.showErrorMessage(originalModule, "module id in import doesn't match file content " + SPropertyOperations.getString(module, "name") + ", should be: " + moduleReference.getModuleId().toString());
      success = false;
    }
    return success;
  }

  private static boolean neq_a6ewnz_a0c0c(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean neq_a6ewnz_a0d0c(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }
}
