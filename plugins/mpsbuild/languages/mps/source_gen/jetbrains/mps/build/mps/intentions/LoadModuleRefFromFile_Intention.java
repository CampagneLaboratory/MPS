package jetbrains.mps.build.mps.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.build.behavior.BuildProject_Behavior;
import jetbrains.mps.build.util.Context;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.build.mps.util.VisibleModules;
import jetbrains.mps.build.mps.util.ModuleLoader;

public class LoadModuleRefFromFile_Intention extends BaseIntention implements Intention {
  private static Logger LOG = Logger.getLogger(LoadModuleRefFromFile_Intention.class);

  public LoadModuleRefFromFile_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.build.mps.structure.BuildMps_Module";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Load module information from file";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SLinkOperations.getTarget(node, "path", true) != null) && SNodeOperations.isInstanceOf(SNodeOperations.getContainingRoot(node), "jetbrains.mps.build.structure.BuildProject");
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode project = SNodeOperations.as(SNodeOperations.getContainingRoot(node), "jetbrains.mps.build.structure.BuildProject");
    if ((project == null)) {
      return;
    }

    String workingDir = BuildProject_Behavior.call_getBasePath_4959435991187146924(project, Context.defaultContext());
    if (StringUtils.isEmpty(workingDir)) {
      return;
    }


    try {
      VisibleModules visible = new VisibleModules(project, null);
      visible.collect();
      new ModuleLoader(node, visible, workingDir, null).importModule();
    } catch (ModuleLoader.ModuleLoaderException ex) {
      LOG.error(ex.getMessage(), ex);
      // TODO report? 
    }
  }

  public String getLocationString() {
    return "jetbrains.mps.build.mps.intentions";
  }
}
