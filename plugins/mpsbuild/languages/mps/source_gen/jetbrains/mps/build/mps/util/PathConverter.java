package jetbrains.mps.build.mps.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.build.behavior.BuildProject_Behavior;
import jetbrains.mps.build.util.Context;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.io.File;
import java.io.IOException;

public class PathConverter {
  private String workingDirectory;

  public PathConverter(SNode project) {
    String workingDir = BuildProject_Behavior.call_getBasePath_4959435991187146924(project, Context.defaultContext());
    this.workingDirectory = normalizePath(workingDir, true);
  }

  public SNode convertPath(String path, SModel model) throws PathConverter.PathConvertException {
    path = normalizePath(path, false);
    if (path.length() < workingDirectory.length()) {
      path = normalizePath(path, true);
    }
    if (!(path.startsWith(workingDirectory))) {
      throw new PathConverter.PathConvertException("source path (" + path + ") should be under working directory (" + workingDirectory + ")");
    }
    path = path.substring(workingDirectory.length());
    SNode plp = SModelOperations.createNewNode(model, "jetbrains.mps.build.structure.BuildSourceProjectRelativePath", null);
    SNode last = null;
    for (String fname : path.split("/")) {
      if (StringUtils.isNotEmpty(fname)) {
        SNode npath = SModelOperations.createNewNode(model, "jetbrains.mps.build.structure.BuildCompositePath", null);
        SPropertyOperations.set(npath, "head", fname);
        if (last == null) {
          SLinkOperations.setTarget(plp, "compositePart", npath, true);
        } else {
          SLinkOperations.setTarget(last, "tail", npath, true);
        }
        last = npath;
      }
    }
    return plp;
  }

  private static String normalizePath(String path, boolean addSlash) {
    try {
      path = new File(path).getCanonicalPath();
      path = path.replace("\\", "/");
    } catch (IOException ignore) {
      // ignore 
    }
    if (addSlash && !(path.endsWith("/"))) {
      path = path + "/";
    }
    return path;
  }

  public class PathConvertException extends Exception {
    public PathConvertException(String message) {
      super(message);
    }
  }
}
