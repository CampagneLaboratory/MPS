package jetbrains.mps.build.mps.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.build.mps.util.PathConverter;
import jetbrains.mps.build.mps.util.VisibleModules;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.build.mps.util.ModuleLoader;

public class QueriesGenerated {
  public static void mappingScript_CodeBlock_3189788309732145595(final IOperationContext operationContext, final MappingScriptContext _context) {
    for (SNode project : SModelOperations.getRoots(_context.getModel(), "jetbrains.mps.build.structure.BuildProject")) {
      if (!(_context.isDirty(project))) {
        continue;
      }

      SNode originalProject = SNodeOperations.as(_context.getOriginalCopiedInputNode(project), "jetbrains.mps.build.structure.BuildProject");
      if ((originalProject == null)) {
        _context.showErrorMessage(project, "no original project is found for " + SPropertyOperations.getString(project, "name"));
        continue;
      }
      PathConverter pathConverter = new PathConverter(originalProject);

      VisibleModules visibleModules = new VisibleModules(project, _context);
      visibleModules.collect();

      Iterable<SNode> parts = SLinkOperations.getTargets(project, "parts", true);
      parts = Sequence.fromIterable(parts).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.mps.structure.BuildMps_Group");
        }
      }).translate(new ITranslator2<SNode, SNode>() {
        public Iterable<SNode> translate(SNode it) {
          return SLinkOperations.getTargets(SNodeOperations.cast(it, "jetbrains.mps.build.mps.structure.BuildMps_Group"), "modules", true);
        }
      }).union(Sequence.fromIterable(parts));
      for (SNode part : parts) {
        if (!(SNodeOperations.isInstanceOf(part, "jetbrains.mps.build.mps.structure.BuildMps_Module"))) {
          continue;
        }
        SNode module = SNodeOperations.cast(part, "jetbrains.mps.build.mps.structure.BuildMps_Module");
        if ((SLinkOperations.getTarget(module, "path", true) == null)) {
          continue;
        }

        new ModuleLoader(module, visibleModules, pathConverter, _context).loadAndCheck();
      }
    }
  }
}
