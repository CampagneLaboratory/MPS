package jetbrains.mps.build.mps.pluginSolution.plugin;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.build.mps.util.PathConverter;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import jetbrains.mps.project.structure.modules.DevkitDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.build.mps.util.VisibleModules;
import jetbrains.mps.build.mps.util.ModuleLoader;

public class ImportModuleHelper {
  protected static Log log = LogFactory.getLog(ImportModuleHelper.class);

  private SNode project;
  private IFile moduleFile;
  private ModuleDescriptor moduleDescriptor;
  private PathConverter converter;
  private SNode created;

  public ImportModuleHelper(SNode project, PathConverter converter, IFile moduleFile, ModuleDescriptor moduleDescriptor) {
    this.project = project;
    this.moduleFile = moduleFile;
    this.moduleDescriptor = moduleDescriptor;
    this.converter = converter;
  }

  public void create() {
    try {
      if (moduleDescriptor instanceof LanguageDescriptor) {
        SNode lang = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_Language", null);
        initModule(lang);
        created = lang;
      } else if (moduleDescriptor instanceof SolutionDescriptor) {
        SNode solution = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_Solution", null);
        initModule(solution);
        created = solution;
      } else if (moduleDescriptor instanceof DevkitDescriptor) {
        SNode devkit = SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_DevKit", null);
        initModule(devkit);
        created = devkit;
      }
      ListSequence.fromList(SLinkOperations.getTargets(project, "parts", true)).addElement(created);
    } catch (PathConverter.PathConvertException ex) {
      // ignore 
      if (log.isErrorEnabled()) {
        log.error(ex.getMessage());
      }
    }
  }

  private void initModule(SNode module) throws PathConverter.PathConvertException {
    SPropertyOperations.set(module, "name", moduleDescriptor.getModuleReference().getModuleFqName());
    SPropertyOperations.set(module, "uuid", moduleDescriptor.getModuleReference().getModuleId().toString());
    SLinkOperations.setTarget(module, "path", converter.convertPath(moduleFile.getPath(), SNodeOperations.getModel(project)), true);
  }

  public void update(VisibleModules visible) {
    if ((created == null)) {
      return;
    }

    try {
      new ModuleLoader(created, visible, converter, null).importRequired();
    } catch (ModuleLoader.ModuleLoaderException ex) {
      if (log.isErrorEnabled()) {
        log.error(ex.getMessage());
      }
    }
  }
}
