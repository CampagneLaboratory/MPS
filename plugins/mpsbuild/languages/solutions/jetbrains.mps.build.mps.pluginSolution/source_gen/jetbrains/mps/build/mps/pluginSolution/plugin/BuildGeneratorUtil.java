package jetbrains.mps.build.mps.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.Solution;
import jetbrains.mps.smodel.SModelFqName;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import java.io.File;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.project.IModule;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.ModuleFileTracker;
import jetbrains.mps.ide.newSolutionDialog.NewModuleUtil;

public class BuildGeneratorUtil {
  public BuildGeneratorUtil() {
  }

  public static SModelDescriptor createModel(String modelName, final Solution solution) {
    final SModelFqName newModelFQName = SModelFqName.fromString(modelName);
    List<SModelDescriptor> ownModelDescriptors = solution.getOwnModelDescriptors();
    final Wrappers._T<SModelDescriptor> modelDescriptor = new Wrappers._T<SModelDescriptor>(null);
    for (SModelDescriptor descriptor : ListSequence.fromList(ownModelDescriptors)) {
      if (descriptor.getSModelReference().getSModelFqName().equals(newModelFQName)) {
        modelDescriptor.value = descriptor;
        break;
      }
    }
    if (modelDescriptor.value == null) {
      ModelAccess.instance().runWriteAction(new Runnable() {
        public void run() {
          modelDescriptor.value = solution.createModel(newModelFQName, solution.getSModelRoots().iterator().next(), null);
        }
      });
    }
    return modelDescriptor.value;
  }

  public static Solution createSolution(MPSProject mpsProject, String solutionName, String solutionBaseDir) {
    IFile baseDirFile = FileSystem.getInstance().getFileByPath(solutionBaseDir);
    if (!(baseDirFile.exists())) {
      baseDirFile.mkdirs();
    }
    String solutionFilePath = solutionBaseDir + File.separator + solutionName + MPSExtentions.DOT_SOLUTION;
    final IFile solutionFile = FileSystem.getInstance().getFileByPath(solutionFilePath);
    final Solution solution;
    if (solutionFile.exists()) {
      IModule module = ModelAccess.instance().runReadAction(new Computable<IModule>() {
        public IModule compute() {
          return ModuleFileTracker.getInstance().getModuleByFile(solutionFile);
        }
      });
      if (module instanceof Solution) {
        solution = (Solution) module;
      } else if (module == null) {
        solution = BuildGeneratorUtil.createSolutionFromFile(mpsProject, solutionName, solutionFile);
      } else {
        return null;
      }
    } else {
      solution = BuildGeneratorUtil.createSolutionFromFile(mpsProject, solutionName, solutionFile);
    }
    return solution;
  }

  public static Solution createSolutionFromFile(final MPSProject mpsProject, String solutionName, final IFile solutionDescriptorFile) {
    return NewModuleUtil.createSolution(solutionName, solutionDescriptorFile.getParent().getPath(), mpsProject);
  }
}
