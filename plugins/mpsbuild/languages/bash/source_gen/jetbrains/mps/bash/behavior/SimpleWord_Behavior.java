package jetbrains.mps.bash.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.NameUtil;

public class SimpleWord_Behavior {
  public static void init(SNode thisNode) {
  }

  public static boolean call_splitValue_3147078024759753598(SNode thisNode, String value, IScope scope) {
    if ((value == null || value.length() == 0)) {
      return false;
    }
    SNode refConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.bash.structure.IConcreteWordUnit");
    for (SNode unit : ListSequence.fromList(SConceptOperations.getAllSubConcepts(refConcept, SNodeOperations.getModel(thisNode), scope))) {
      if ((SConceptPropertyOperations.getString(unit, "pattern") != null && SConceptPropertyOperations.getString(unit, "pattern").length() > 0)) {
        int index = value.indexOf(SConceptPropertyOperations.getString(unit, "pattern"));
        if (index != -1) {
          SNode endOfWord = SConceptOperations.createNewNode("jetbrains.mps.bash.structure.SimpleWord", null);
          String dummy = value.substring(index + SConceptPropertyOperations.getString(unit, "pattern").length());
          if ((dummy != null && dummy.length() > 0)) {
            SPropertyOperations.set(endOfWord, "word", dummy);
            SNodeOperations.insertNextSiblingChild(thisNode, endOfWord);
          }
          SNode newUnit = SConceptOperations.createNewNode(NameUtil.nodeFQName(unit), null);
          if (index == 0) {
            SNodeOperations.replaceWithAnother(thisNode, newUnit);
          } else {
            SPropertyOperations.set(thisNode, "word", value.substring(0, index));
            SNodeOperations.insertNextSiblingChild(thisNode, newUnit);
          }
          return true;
        }
      }
    }
    return false;
  }
}
