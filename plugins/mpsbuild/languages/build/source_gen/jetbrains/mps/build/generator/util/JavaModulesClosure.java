package jetbrains.mps.build.generator.util;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.smodel.SNode;
import java.util.Collection;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class JavaModulesClosure {
  private Set<SNode> modules;
  private Set<SNode> libraries;

  public JavaModulesClosure(Set<SNode> modules, Set<SNode> libraries) {
    this.modules = modules;
    this.libraries = libraries;
  }

  public void closure() {
    Collection<SNode> copy = new ArrayList<SNode>(modules);
    for (SNode mod : copy) {
      moduleClosure(mod, false);
    }
  }

  private void moduleClosure(SNode module, boolean reexportOnly) {
    for (SNode dep : SLinkOperations.getTargets(module, "dependencies", true)) {
      if (SNodeOperations.isInstanceOf(dep, "jetbrains.mps.build.structure.BuildSource_JavaDependencyModule")) {
        SNode moduleDep = SNodeOperations.cast(dep, "jetbrains.mps.build.structure.BuildSource_JavaDependencyModule");
        if (reexportOnly && !(SPropertyOperations.getBoolean(moduleDep, "reexport"))) {
          continue;
        }
        SNode depModule = SLinkOperations.getTarget(moduleDep, "module", false);
        if (modules.add(depModule)) {
          moduleClosure(depModule, true);
        }
      } else if (SNodeOperations.isInstanceOf(dep, "jetbrains.mps.build.structure.BuildSource_JavaDependencyLibrary")) {
        SNode libraryDep = SNodeOperations.cast(dep, "jetbrains.mps.build.structure.BuildSource_JavaDependencyLibrary");
        if (reexportOnly && !(SPropertyOperations.getBoolean(libraryDep, "reexport"))) {
          continue;
        }

        libraries.add(SLinkOperations.getTarget(libraryDep, "library", false));
      }
    }
  }
}
