package jetbrains.mps.build.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.build.behavior.BuildLayout_ContainerAcceptingFileSet_Behavior;
import java.util.Stack;
import jetbrains.mps.build.behavior.BuildString_Behavior;

public class FileSetUtil {
  public FileSetUtil() {
  }

  public static Iterable<SNode> getImplicitFilesets(SNode container) {
    Iterable<SNode> result = ListSequence.fromList(SLinkOperations.getTargets(container, "children", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildLayout_FileSet");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildLayout_FileSet");
      }
    });

    for (SNode folder : ListSequence.fromList(SLinkOperations.getTargets(container, "children", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildLayout_Folder");
      }
    })) {
      result = Sequence.fromIterable(result).concat(Sequence.fromIterable(getImplicitFilesets(SNodeOperations.cast(folder, "jetbrains.mps.build.structure.BuildLayout_Folder"))));
    }
    return result;
  }

  public static boolean hasExplicitFilesets(SNode container) {
    return ListSequence.fromList(SLinkOperations.getTargets(container, "children", true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildLayout_FileSet")) && (!(SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildLayout_Folder")) || hasExplicitFilesets(SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildLayout_Folder")));
      }
    });
  }

  public static SNode getFilesetContainer(SNode fileset) {
    SNode parent = SNodeOperations.getParent(fileset);
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet")) {
      return SNodeOperations.cast(parent, "jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet");
    }
    while (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.build.structure.BuildLayout_Folder")) {
      parent = SNodeOperations.getParent(parent);
    }
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet") && BuildLayout_ContainerAcceptingFileSet_Behavior.call_hasPrefixAttribute_6408167411310575232(SNodeOperations.cast(parent, "jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet"))) {
      return SNodeOperations.cast(parent, "jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet");
    }
    return null;
  }

  public static String getPrefix(SNode fileset, MacroHelper helper) {
    SNode parent = SNodeOperations.getParent(fileset);
    Stack<String> stack = new Stack<String>();
    while (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.build.structure.BuildLayout_Folder")) {
      stack.push(BuildString_Behavior.call_getText_4380385936562005550(SLinkOperations.getTarget(SNodeOperations.cast(parent, "jetbrains.mps.build.structure.BuildLayout_Folder"), "containerName", true), helper));
      parent = SNodeOperations.getParent(parent);
    }
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet") && BuildLayout_ContainerAcceptingFileSet_Behavior.call_hasPrefixAttribute_6408167411310575232(SNodeOperations.cast(parent, "jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet"))) {
      StringBuilder sb = new StringBuilder();
      while (!(stack.isEmpty())) {
        String folderName = stack.pop();
        if (sb.length() > 0) {
          sb.append("/");
        }
        sb.append(folderName);
      }
      return sb.toString();
    }
    return null;
  }

  public static boolean isExplicit(SNode fileset) {
    return getFilesetContainer(fileset) == null;
  }
}
