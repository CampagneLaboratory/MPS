package jetbrains.mps.build.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Set;
import java.util.LinkedHashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.List;
import java.util.ArrayList;

public class JavaExportUtil {
  public JavaExportUtil() {
  }

  public static Iterable<SNode> requireLibrary(VisibleArtifacts artifacts, SNode library, SNode contextNode) {
    if (SNodeOperations.getContainingRoot(library) == SNodeOperations.getContainingRoot(contextNode)) {
      return null;
    }

    SNode target = SNodeOperations.as(artifacts.toOriginalNode(library), "jetbrains.mps.build.structure.BuildSource_JavaLibrary");
    SNode artifact = SNodeOperations.as(artifacts.findArtifact(target), "jetbrains.mps.build.structure.BuildLayout_Node");
    if (artifact != null) {
      artifacts.needsFetch(contextNode);
      if (SNodeOperations.isInstanceOf(artifact, "jetbrains.mps.build.structure.BuildLayout_ExportAsJavaLibrary")) {
        return SLinkOperations.getTargets(SNodeOperations.cast(artifact, "jetbrains.mps.build.structure.BuildLayout_ExportAsJavaLibrary"), "children", true);
      } else {
        return Sequence.<SNode>singleton(artifact);
      }
    }
    return null;
  }

  public static Iterable<SNode> requireModule(VisibleArtifacts artifacts, SNode module, SNode contextNode) {
    if (SNodeOperations.getContainingRoot(module) == SNodeOperations.getContainingRoot(contextNode)) {
      return null;
    }

    SNode target = SNodeOperations.as(artifacts.toOriginalNode(module), "jetbrains.mps.build.structure.BuildSource_JavaModule");

    // dependencies closure 
    Set<SNode> modules = new LinkedHashSet<SNode>();
    Set<SNode> libraries = new LinkedHashSet<SNode>();
    modules.add(target);
    libraries.addAll(ListSequence.fromList(SLinkOperations.getTargets(target, "dependencies", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.build.structure.BuildSource_JavaDependencyLibrary");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.build.structure.BuildSource_JavaDependencyLibrary"), "library", false);
      }
    }).toListSequence());
    new JavaModulesClosure(modules, libraries).closure();

    // searh for artifacts 
    Iterable<SNode> required = SetSequence.fromSet(((Set<SNode>) modules)).concat(SetSequence.fromSet(((Set<SNode>) libraries)));
    List<SNode> result = new ArrayList<SNode>();
    for (SNode n : Sequence.fromIterable(required)) {
      if (SNodeOperations.getContainingRoot(n) == SNodeOperations.getContainingRoot(contextNode)) {
        continue;
      }

      SNode artifact = SNodeOperations.as(artifacts.findArtifact(n), "jetbrains.mps.build.structure.BuildLayout_Node");
      if (artifact != null) {
        ListSequence.fromList(result).addElement(artifact);
      }
    }

    if (ListSequence.fromList(result).isNotEmpty()) {
      artifacts.needsFetch(contextNode);
      return result;
    }

    return null;
  }
}
