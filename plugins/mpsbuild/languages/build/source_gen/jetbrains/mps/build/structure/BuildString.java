package jetbrains.mps.build.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BuildString extends BaseConcept {
  public static final String concept = "jetbrains.mps.build.structure.BuildString";
  public static final String PARTS = "parts";

  public BuildString(SNode node) {
    super(node);
  }

  public int getPartsesCount() {
    return this.getChildCount(BuildString.PARTS);
  }

  public Iterator<BuildStringPart> partses() {
    return this.children(BuildStringPart.class, BuildString.PARTS);
  }

  public List<BuildStringPart> getPartses() {
    return this.getChildren(BuildStringPart.class, BuildString.PARTS);
  }

  public void addParts(BuildStringPart node) {
    this.addChild(BuildString.PARTS, node);
  }

  public void insertParts(BuildStringPart prev, BuildStringPart node) {
    this.insertChild(prev, BuildString.PARTS, node);
  }

  public static BuildString newInstance(SModel sm, boolean init) {
    return (BuildString) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildString", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BuildString newInstance(SModel sm) {
    return BuildString.newInstance(sm, false);
  }
}
