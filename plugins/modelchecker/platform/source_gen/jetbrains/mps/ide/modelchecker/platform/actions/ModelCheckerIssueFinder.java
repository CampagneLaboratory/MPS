package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.ide.findusages.model.holders.IHolder;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.ide.findusages.model.holders.ModelsHolder;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.ide.findusages.model.holders.ModulesHolder;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.util.SubProgressKind;

public class ModelCheckerIssueFinder implements IFinder {
  public ModelCheckerIssueFinder() {
  }
  protected List<SpecificChecker> getSpecificCheckers() {
    return null;
  }
  @Override
  public SearchResults find(SearchQuery searchQuery, ProgressMonitor monitor) {
    IHolder objectHolder = searchQuery.getObjectHolder();
    IOperationContext operationContext;
    List<SModel> models;
    List<SModule> modules = null;
    if (objectHolder instanceof ModelsHolder) {
      ModelsHolder modelsHolder = (ModelsHolder) objectHolder;
      operationContext = modelsHolder.getOperationContext();
      models = Sequence.fromIterable(((Iterable<SModelReference>) modelsHolder.getObject())).select(new ISelector<SModelReference, SModel>() {
        public SModel select(SModelReference ref) {
          return SModelRepository.getInstance().getModelDescriptor(ref);
        }
      }).where(new IWhereFilter<SModel>() {
        public boolean accept(SModel it) {
          return it != null;
        }
      }).toListSequence();
    } else if (objectHolder instanceof ModulesHolder) {
      ModulesHolder modulesHolder = (ModulesHolder) objectHolder;
      operationContext = modulesHolder.getOperationContext();
      models = ModelCheckerUtils.getModelDescriptors(modulesHolder.getObject());
      modules = modulesHolder.getObject();
    } else {
      throw new IllegalArgumentException();
    }

    int work = ((modules != null ? ListSequence.fromList(modules).count() : 0)) + ListSequence.fromList(models).count() + 1;
    monitor.start("Checking", work);

    try {
      ModuleChecker moduleChecker = null;
      if (modules != null) {
        moduleChecker = new ModuleChecker();
        for (SModule module : ListSequence.fromList(modules)) {
          moduleChecker.checkModule(module, monitor.subTask(1, SubProgressKind.REPLACING));
          if (monitor.isCanceled()) {
            break;
          }
        }
      }
      monitor.advance(0);
      ModelChecker modelChecker;
      if (moduleChecker != null) {
        modelChecker = new ModelChecker(operationContext, moduleChecker.getSearchResults());
      } else {
        modelChecker = new ModelChecker(operationContext);
      }
      modelChecker.setSpecificCheckers(getSpecificCheckers());
      monitor.advance(1);

      for (SModel modelDescriptor : ListSequence.fromList(models)) {
        modelChecker.checkModel(modelDescriptor, monitor.subTask(1, SubProgressKind.REPLACING));
        if (monitor.isCanceled()) {
          break;
        }
      }
      return modelChecker.getSearchResults();
    } finally {
      monitor.done();
    }
  }
}
