package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.model.SearchResults;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.project.validation.ValidationUtil;
import jetbrains.mps.project.validation.ValidationProblem;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ModuleChecker {
  private SearchResults<ModelCheckerIssue> myResults = new SearchResults<ModelCheckerIssue>();
  public ModuleChecker() {
  }
  public void checkModule(final SModule module, ProgressMonitor monitor) {
    final String moduleName = module.getModuleName();
    monitor.start("Checking " + moduleName + " module properties...", 1);
    try {
      ValidationUtil.validateModule(module, new _Adapters._return_P1_E0_to_Consumer_adapter<ValidationProblem>(new _FunctionTypes._return_P1_E0<Boolean, ValidationProblem>() {
        public Boolean invoke(final ValidationProblem vp) {
          String severity = (vp.getSeverity() == ValidationProblem.Severity.ERROR ? ModelChecker.SEVERITY_ERROR : ModelChecker.SEVERITY_WARNING);
          return myResults.getSearchResults().add(ModelCheckerIssue.getSearchResultForModule(module, moduleName + ": " + vp.getMessage(), new IModelCheckerFix() {
            public boolean doFix() {
              if (!(vp.canFix())) {
                return false;
              }
              vp.fix();
              return true;
            }
          }, severity, "module properties"));
        }
      }));
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Error while " + moduleName + " module checking", t);
      }
    } finally {
      monitor.done();
    }
  }
  public SearchResults<ModelCheckerIssue> getSearchResults() {
    return myResults;
  }
  protected static Logger LOG = LogManager.getLogger(ModuleChecker.class);
}
