package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.persistence.PersistenceVersionAware;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import org.jetbrains.mps.openapi.model.EditableSModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class ModelPersistenceVersionChecker extends SpecificChecker {
  public ModelPersistenceVersionChecker() {
  }
  @Override
  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel m, ProgressMonitor monitor) {
    monitor.start("model persistence version", 1);
    List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());

    if (m instanceof PersistenceVersionAware) {
      final PersistenceVersionAware model = (PersistenceVersionAware) m;
      int currentVersion = model.getPersistenceVersion();
      if (currentVersion < ModelPersistence.LAST_VERSION) {
        IModelCheckerFix fix = (model instanceof EditableSModel ? new IModelCheckerFix() {
          public boolean doFix() {
            model.load();
            model.setPersistenceVersion(9);
            ((EditableSModel) model).setChanged(true);
            ((EditableSModel) model).save();
            return true;
          }
        } : null);
        ListSequence.fromList(results).addElement(ModelCheckerIssue.getSearchResultForModel(m, "Model" + SModelOperations.getModelName(m) + " persistence version: " + currentVersion + ", currently supported version is " + ModelPersistence.LAST_VERSION, fix, ModelChecker.SEVERITY_WARNING, "Model persistence version"));
      }
    }

    monitor.done();
    return results;
  }
}
