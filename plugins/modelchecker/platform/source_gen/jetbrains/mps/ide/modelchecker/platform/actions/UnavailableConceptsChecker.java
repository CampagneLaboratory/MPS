package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class UnavailableConceptsChecker extends SpecificChecker {
  public UnavailableConceptsChecker() {
  }
  @Override
  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel model, ProgressMonitor monitor) {
    List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());

    monitor.start("unavailable concepts", 1);
    for (SNode node : ListSequence.fromList(SModelOperations.nodes(model, null))) {
      if (monitor.isCanceled()) {
        break;
      }
      SAbstractConcept concept = SNodeOperations.getConcept(node);
      if (!(concept.isValid())) {
        SpecificChecker.addIssue(results, node, "Cannot find concept \"" + concept.getQualifiedName() + "\"", ModelChecker.SEVERITY_ERROR, "unavailable concept", null);
      }
    }
    monitor.done();

    return results;
  }
}
