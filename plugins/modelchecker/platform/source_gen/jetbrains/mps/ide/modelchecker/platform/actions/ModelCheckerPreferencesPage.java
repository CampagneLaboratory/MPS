package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import com.intellij.openapi.options.SearchableConfigurable;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JCheckBox;
import java.util.Hashtable;
import javax.swing.JLabel;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import javax.swing.border.EmptyBorder;
import java.awt.GridBagConstraints;
import javax.swing.Icon;
import com.intellij.openapi.options.ConfigurationException;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.Nls;
import javax.swing.JComponent;

public class ModelCheckerPreferencesPage implements SearchableConfigurable {
  private JPanel myPage;
  private JSlider myCheckingLevelSlider = new JSlider(JSlider.HORIZONTAL, 0, ModelCheckerSettings.CheckingLevel.values().length - 1, 0);
  private JCheckBox myCheckStubsCheckBox = new JCheckBox("Check stub models");
  private JCheckBox myCheckSpecificCheckBox = new JCheckBox("Perform other checks");
  private ModelCheckerSettings myModelCheckerSettings;

  public ModelCheckerPreferencesPage(ModelCheckerSettings settings) {
    myModelCheckerSettings = settings;

    Hashtable t = new Hashtable();
    for (ModelCheckerSettings.CheckingLevel level : ModelCheckerSettings.CheckingLevel.values()) {
      t.put(level.ordinal(), new JLabel(level.getPresentation()));
    }
    myCheckingLevelSlider.setLabelTable(t);
    myCheckingLevelSlider.setPaintLabels(true);
    myCheckingLevelSlider.setPaintTicks(true);
    myCheckingLevelSlider.setMajorTickSpacing(1);
    myCheckingLevelSlider.setSnapToTicks(true);
    myCheckingLevelSlider.setPreferredSize(new Dimension(350, 60));

    myPage = new JPanel(new GridBagLayout());
    myPage.setBorder(new EmptyBorder(10, 10, 10, 10));
    GridBagConstraints c = new GridBagConstraints();

    c.gridx = 0;
    c.gridy = 0;
    c.anchor = GridBagConstraints.NORTHWEST;
    c.fill = GridBagConstraints.NONE;
    myPage.add(new JLabel("Model checking level"), c);

    c.gridy = 1;
    myPage.add(myCheckingLevelSlider, c);

    c.gridy = 2;
    myPage.add(myCheckStubsCheckBox, c);

    c.gridy = 3;
    myPage.add(myCheckSpecificCheckBox, c);

    c.gridy = 4;
    c.weightx = 1.0;
    c.weighty = 1.0;
    c.fill = GridBagConstraints.BOTH;
    myPage.add(new JPanel(), c);
  }

  public String getName() {
    return "Model Checker";
  }

  public Icon getIcon() {
    return null;
  }

  public boolean validate() {
    return true;
  }

  public void apply() throws ConfigurationException {
    myModelCheckerSettings.setCheckingLevel(ModelCheckerSettings.CheckingLevel.values()[myCheckingLevelSlider.getValue()]);
    myModelCheckerSettings.setCheckStubs(myCheckStubsCheckBox.isSelected());
    myModelCheckerSettings.setCheckSpecific(myCheckSpecificCheckBox.isSelected());
  }
  public void reset() {
    myCheckingLevelSlider.setValue(Arrays.binarySearch(ModelCheckerSettings.CheckingLevel.values(), myModelCheckerSettings.getCheckingLevel()));
    myCheckStubsCheckBox.setSelected(myModelCheckerSettings.isCheckStubs());
    myCheckSpecificCheckBox.setSelected(myModelCheckerSettings.isCheckSpecific());
  }
  @Override
  public boolean isModified() {
    if (myCheckingLevelSlider.getValue() != Arrays.binarySearch(ModelCheckerSettings.CheckingLevel.values(), myModelCheckerSettings.getCheckingLevel())) {
      return true;
    }
    if (myModelCheckerSettings.isCheckStubs() != myCheckStubsCheckBox.isSelected()) {
      return true;
    }
    if (myModelCheckerSettings.isCheckSpecific() != myCheckSpecificCheckBox.isSelected()) {
      return true;
    }
    return false;
  }
  @NotNull
  @NonNls
  public String getId() {
    return "model.checker";
  }
  @Nullable
  public Runnable enableSearch(String string) {
    return null;
  }
  @Nls
  public String getDisplayName() {
    return "Model Checker";
  }
  @Nullable
  @NonNls
  public String getHelpTopic() {
    return "Model_Checker";
  }
  @Nullable
  public JComponent createComponent() {
    return myPage;
  }
  public void disposeUIResources() {
  }
}
