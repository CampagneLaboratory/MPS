package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import jetbrains.mps.checkers.INodeChecker;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.errors.QuickFix_Runtime;
import jetbrains.mps.errors.QuickFixProvider;

public class INodeCheckerSpecificCheckerAdapter extends SpecificChecker {
  private INodeChecker myChecker;

  public INodeCheckerSpecificCheckerAdapter(INodeChecker checker) {
    myChecker = checker;
  }

  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel model, ProgressMonitor monitor) {
    final List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());

    monitor.start("typesystem", 1);
    for (final SNode rootNode : SModelOperations.roots(model, null)) {
      for (final IErrorReporter errorReporter : SetSequence.fromSet(myChecker.getErrors(rootNode, model.getRepository()))) {
        final QuickFix_Runtime quickFix = check_m7souj_a0a0a0d0e(check_m7souj_a0a0a0a3a4(errorReporter));
        IModelCheckerFix fix = null;
        if (quickFix != null) {
          fix = new IModelCheckerFix() {
            public boolean doFix() {
              quickFix.execute(errorReporter.getSNode());
              return true;
            }
          };
        }
        SpecificChecker.addIssue(results, errorReporter.getSNode(), errorReporter.reportError(), SpecificChecker.getResultCategory(errorReporter.getMessageStatus()), "typesystem", fix);
      }
    }
    monitor.done();
    return results;
  }
  private static QuickFix_Runtime check_m7souj_a0a0a0d0e(QuickFixProvider checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getQuickFix();
    }
    return null;
  }
  private static QuickFixProvider check_m7souj_a0a0a0a3a4(IErrorReporter checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getIntentionProvider();
    }
    return null;
  }
}
