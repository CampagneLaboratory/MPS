package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import jetbrains.mps.typesystem.inference.ITypeContextOwner;
import java.util.List;
import jetbrains.mps.checkers.INodeChecker;
import jetbrains.mps.checkers.CheckersComponent;
import jetbrains.mps.typesystem.inference.util.SubtypingCache;
import jetbrains.mps.typesystem.inference.util.ConcurrentSubtypingCache;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import jetbrains.mps.typesystem.inference.DefaultTypecheckingContextOwner;
import jetbrains.mps.ide.findusages.model.SearchResult;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.util.SubProgressKind;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.typesystem.inference.ITypechecking;
import java.util.Set;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.errors.QuickFix_Runtime;
import jetbrains.mps.errors.QuickFixProvider;

public class SpecificModelChecker extends SpecificChecker implements ITypeContextOwner {
  private List<INodeChecker> myLanguageCheckers;
  public SpecificModelChecker() {
    myLanguageCheckers = CheckersComponent.getInstance().getCheckers();
  }
  @Override
  public boolean reuseTypecheckingContext() {
    return true;
  }
  @Override
  public SubtypingCache createSubtypingCache() {
    return new ConcurrentSubtypingCache();
  }
  @Override
  public TypeCheckingContext createTypecheckingContext(SNode node, TypeContextManager manager) {
    return new DefaultTypecheckingContextOwner().createTypecheckingContext(node, manager);
  }
  @Override
  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel model, ProgressMonitor monitor, final SRepository repository) {
    final List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());

    monitor.start("typesystem", ListSequence.fromList(myLanguageCheckers).count());
    for (final INodeChecker checker : myLanguageCheckers) {
      monitor.subTask(1, SubProgressKind.REPLACING).start(checker.getCategory(), 1);

      if (!(ModelCheckerSettings.getInstance().checkerIsOn(checker.getCategory()))) {
        continue;
      }
      if (monitor.isCanceled()) {
        break;
      }
      for (final SNode rootNode : SModelOperations.roots(model, null)) {
        TypeContextManager.getInstance().runTypeCheckingAction(this, rootNode, new ITypechecking.Action() {
          @Override
          public void run(TypeCheckingContext p0) {
            Set<IErrorReporter> iErrorReporters = checker.getErrors(rootNode, repository);
            for (IErrorReporter errorReporter : SetSequence.fromSet(iErrorReporters)) {
              final IErrorReporter reporter = errorReporter;
              final QuickFix_Runtime quickFix = check_7763bz_a0b0b0a0a2a0a0e0d0f(check_7763bz_a0a1a1a0a0c0a0a4a3a5(errorReporter));
              IModelCheckerFix fix = null;
              if (quickFix != null) {
                fix = new IModelCheckerFix() {
                  @Override
                  public boolean doFix() {
                    quickFix.execute(reporter.getSNode());
                    return true;
                  }
                };
              }
              SpecificChecker.addIssue(results, errorReporter.getSNode(), errorReporter.reportError(), SpecificChecker.getResultCategory(errorReporter.getMessageStatus()), checker.getCategory(), fix);
            }
          }
        });
      }
      monitor.advance(1);
    }
    monitor.done();
    return results;
  }
  private static QuickFix_Runtime check_7763bz_a0b0b0a0a2a0a0e0d0f(QuickFixProvider checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getQuickFix();
    }
    return null;
  }
  private static QuickFixProvider check_7763bz_a0a1a1a0a0c0a0a4a3a5(IErrorReporter checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getIntentionProvider();
    }
    return null;
  }
}
