package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import jetbrains.mps.ide.tools.BaseTabbedProjectTool;
import javax.swing.Icon;
import jetbrains.mps.icons.MPSIcons;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindowAnchor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import javax.swing.JOptionPane;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.ide.icons.IdeIcons;
import jetbrains.mps.ide.project.ProjectHelper;
import com.intellij.openapi.vcs.checkin.CheckinHandler;
import jetbrains.mps.ide.findusages.model.SearchResults;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.plugins.tool.IComponentDisposer;

public class ModelCheckerTool extends BaseTabbedProjectTool {
  private static final Icon ICON = MPSIcons.ToolWindows.ModelChecker;
  private Project myProject;

  public ModelCheckerTool(Project project) {
    super(project, "Model Checker", -1, ICON, ToolWindowAnchor.BOTTOM, true);
    myProject = project;
  }

  private ModelCheckerViewer performCheckingTask(_FunctionTypes._void_P1_E0<? super ModelCheckerViewer> task, boolean showTab) {
    ModelCheckerViewer newViewer = this.createViewer();
    task.invoke(newViewer);
    if (showTab) {
      if (newViewer.getSearchResults().getSearchResults().isEmpty() && !(ModelCheckerSettings.getInstance().getMigrationMode())) {
        JOptionPane.showMessageDialog(this.getComponent(), "There were no problems detected during Model Checker execution", "Model Checker results", JOptionPane.INFORMATION_MESSAGE);
      } else {
        this.showTabWithResults(newViewer);
      }
    }
    return newViewer;
  }
  private ModelCheckerViewer performCheckingTaskForModels(final List<SModel> modelDescriptors, final String taskTargetTitle, final Icon taskIcon, boolean showTab) {
    return this.performCheckingTask(new _FunctionTypes._void_P1_E0<ModelCheckerViewer>() {
      public void invoke(ModelCheckerViewer newViewer) {
        newViewer.prepareAndCheckModels(modelDescriptors, taskTargetTitle, taskIcon);
      }
    }, showTab);
  }
  private ModelCheckerViewer performCheckingTaskForModules(final List<SModule> modules, final String taskTargetTitle, final Icon taskIcon, boolean showTab) {
    return this.performCheckingTask(new _FunctionTypes._void_P1_E0<ModelCheckerViewer>() {
      public void invoke(ModelCheckerViewer newViewer) {
        newViewer.prepareAndCheckModules(modules, taskTargetTitle, taskIcon);
      }
    }, showTab);
  }
  public ModelCheckerViewer checkModel(SModel model, IOperationContext operationContext, boolean showTab) {
    return this.performCheckingTaskForModels(ListSequence.fromListAndArray(new ArrayList<SModel>(), model), model.getModelName(), IconManager.getIconFor(model), showTab);
  }
  public ModelCheckerViewer checkModels(List<SModel> modelDescriptors, IOperationContext operationContext, boolean showTab) {
    return this.performCheckingTaskForModels(modelDescriptors, NameUtil.formatNumericalString(ListSequence.fromList(modelDescriptors).count(), "model"), IdeIcons.MODEL_ICON, showTab);
  }
  public ModelCheckerViewer checkModels(final List<SModel> modelDescriptors, IOperationContext operationContext, boolean showTab, final ModelCheckerIssueFinder finder) {
    return this.performCheckingTask(new _FunctionTypes._void_P1_E0<ModelCheckerViewer>() {
      public void invoke(ModelCheckerViewer newViewer) {
        newViewer.prepareAndCheckModels(modelDescriptors, ListSequence.fromList(modelDescriptors).count() + " models", IdeIcons.MODEL_ICON, finder);
      }
    }, showTab);
  }
  public ModelCheckerViewer checkModule(SModule module, IOperationContext operationContext, boolean showTab) {
    return this.performCheckingTaskForModules(ListSequence.fromListAndArray(new ArrayList<SModule>(), module), module.getModuleName(), IconManager.getIconFor(module), showTab);
  }
  public ModelCheckerViewer checkModules(List<SModule> modules, IOperationContext operationContext, boolean showTab) {
    return this.performCheckingTaskForModules(modules, NameUtil.formatNumericalString(ListSequence.fromList(modules).count(), "module"), IdeIcons.MODULE_GROUP_CLOSED, showTab);
  }
  public ModelCheckerViewer checkProject(boolean showTab) {
    jetbrains.mps.project.Project mpsProject = ProjectHelper.toMPSProject(myProject);
    return this.performCheckingTaskForModules(ListSequence.fromListWithValues(new ArrayList<SModule>(), mpsProject.getModules()), mpsProject.getName(), IdeIcons.PROJECT_ICON, showTab);
  }
  public CheckinHandler.ReturnResult checkModelsBeforeCommit(IOperationContext operationContext, List<SModel> modelDescriptors) {
    ModelCheckerViewer viewer = this.checkModels(modelDescriptors, operationContext, false);
    SearchResults<ModelCheckerIssue> issues = viewer.getSearchResults();

    int warnings = ModelCheckerUtils.getIssueCountForSeverity(issues, ModelChecker.SEVERITY_WARNING);
    int errors = ModelCheckerUtils.getIssueCountForSeverity(issues, ModelChecker.SEVERITY_ERROR);

    if (errors != 0) {
      String dialogMessage = "Model checker found " + errors + " errors and " + warnings + " warnings. Would you like to review them?";
      int dialogAnswer = Messages.showDialog(ProjectHelper.toIdeaProject(operationContext.getProject()), dialogMessage, "Model Checking", new String[]{"Review", "Commit", "Cancel"}, 0, null);
      if (dialogAnswer == 0) {
        // review errors and warnings, don't commit 
        this.showTabWithResults(viewer);
        return CheckinHandler.ReturnResult.CLOSE_WINDOW;
      } else if (dialogAnswer == 1) {
        // ignore errors and warnings 
        return CheckinHandler.ReturnResult.COMMIT;
      } else if (dialogAnswer == 2 || dialogAnswer == -1) {
        // Cancel 
        return CheckinHandler.ReturnResult.CANCEL;
      }
    }
    return CheckinHandler.ReturnResult.COMMIT;
  }
  private ModelCheckerViewer createViewer() {
    return new ModelCheckerViewer(this.myProject) {
      @Override
      protected void close() {
        ModelCheckerTool.this.closeTab(this);
      }
    };
  }
  public void showTabWithResults(ModelCheckerViewer viewer) {
    this.addTab(viewer, viewer.getTabTitle(), viewer.getTabIcon(), new IComponentDisposer<ModelCheckerViewer>() {
      public void disposeComponent(ModelCheckerViewer c) {
        c.dispose();
      }
    }, true);
  }

  public static ModelCheckerTool getInstance(Project p) {
    return p.getComponent(ModelCheckerTool.class);
  }
}
