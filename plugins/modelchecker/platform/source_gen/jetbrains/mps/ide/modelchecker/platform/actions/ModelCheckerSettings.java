package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import com.intellij.openapi.components.State;
import com.intellij.openapi.components.Storage;
import com.intellij.openapi.components.PersistentStateComponent;
import com.intellij.openapi.components.ApplicationComponent;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import javax.swing.Icon;
import java.util.List;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.application.ApplicationManager;

@State(name = "ModelCheckerSettings", storages = {@Storage(id = "other", file = "$APP_CONFIG$/modelCheckerSettings.xml")
})
public class ModelCheckerSettings implements PersistentStateComponent<ModelCheckerSettings.MyState>, ApplicationComponent {
  private ModelCheckerSettings.MyState myState = new ModelCheckerSettings.MyState();
  private ModelCheckerPreferencesPage myPreferences;
  public ModelCheckerSettings() {
  }
  @NonNls
  @NotNull
  @Override
  public String getComponentName() {
    return "Model Checker Settings";
  }
  @Override
  public void initComponent() {
  }
  @Override
  public void disposeComponent() {
  }
  @Override
  public ModelCheckerSettings.MyState getState() {
    return myState;
  }
  @Override
  public void loadState(ModelCheckerSettings.MyState state) {
    myState = state;
  }
  @Nullable
  public Icon getIcon() {
    return null;
  }
  private ModelCheckerPreferencesPage getPreferences() {
    if (myPreferences == null) {
      myPreferences = new ModelCheckerPreferencesPage(this);
    }
    return myPreferences;
  }
  public List<SpecificChecker> getSpecificCheckers(@NotNull Project mpsProject) {
    List<SpecificChecker> specificCheckers = ListSequence.fromList(new ArrayList<SpecificChecker>());

    ListSequence.fromList(specificCheckers).addElement(new StructureChecker());
    if (isCheckModelProperties()) {
      ListSequence.fromList(specificCheckers).addElement(new ModelPropertiesChecker());
    }
    ListSequence.fromList(specificCheckers).addElement(new GeneratorTemplatesChecker());
    if (isCheckUnresolvedReferences()) {
      ListSequence.fromList(specificCheckers).addElement(new UnresolvedReferencesChecker(mpsProject));
    }
    ListSequence.fromList(specificCheckers).addElement(new SpecificModelChecker(mpsProject));
    ListSequence.fromList(specificCheckers).addElement(new ModelPersistenceVersionChecker());
    return specificCheckers;
  }
  public boolean checkerIsOn(String category) {
    if (category.equals("type system")) {
      return isCheckTypesystem();
    }
    if (category.equals("constraints and scopes")) {
      return isCheckConstraints();
    }
    return false;
  }
  public boolean isCheckUnresolvedReferences() {
    return myState.myCheckUnresolvedReferences;
  }
  public void setCheckUnresolvedReferences(boolean checkUnresolvedReferences) {
    myState.myCheckUnresolvedReferences = checkUnresolvedReferences;
  }
  public boolean isCheckConstraints() {
    return myState.myCheckConstraints;
  }
  public void setCheckConstraints(boolean checkConstraints) {
    myState.myCheckConstraints = checkConstraints;
  }
  public boolean isCheckModelProperties() {
    return myState.myCheckModelProperties;
  }
  public void setCheckModelProperties(boolean check) {
    myState.myCheckModelProperties = check;
  }
  public boolean isCheckTypesystem() {
    return myState.myCheckTypesystem;
  }
  public void setCheckTypesystem(boolean checkTypesystem) {
    myState.myCheckTypesystem = checkTypesystem;
  }
  public boolean isCheckStubs() {
    return myState.myCheckStubs;
  }
  public void setCheckStubs(boolean checkStubs) {
    myState.myCheckStubs = checkStubs;
  }
  public boolean isCheckBeforeCommit() {
    return myState.myCheckBeforeCommit;
  }
  public void setCheckBeforeCommit(boolean checkBeforeCommit) {
    myState.myCheckBeforeCommit = checkBeforeCommit;
  }
  public static ModelCheckerSettings getInstance() {
    return ApplicationManager.getApplication().getComponent(ModelCheckerSettings.class);
  }
  public static class MyState {
    public boolean myCheckUnresolvedReferences = true;
    public boolean myCheckConstraints = true;
    public boolean myCheckModelProperties = true;
    public boolean myCheckTypesystem = true;
    public boolean myCheckBeforeCommit = true;
    public boolean myCheckStubs = false;
    public MyState() {
    }
  }
}
