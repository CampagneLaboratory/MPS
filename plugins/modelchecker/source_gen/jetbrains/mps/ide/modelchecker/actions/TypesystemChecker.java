package jetbrains.mps.ide.modelchecker.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import java.util.Set;
import jetbrains.mps.util.Pair;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.SetSequence;

public class TypesystemChecker extends SpecificChecker {
  public TypesystemChecker() {
  }

  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel model, ProgressContext progressContext, IOperationContext operationContext) {
    List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());

    for (SNode rootNode : ListSequence.fromList(SModelOperations.getRoots(model, null))) {
      if (!(progressContext.checkAndUpdateIndicator("Checking " + SModelOperations.getModelName(model) + " for typesystem rules..."))) {
        break;
      }
      TypeCheckingContext typeCheckingContext = TypeContextManager.getInstance().createTypeCheckingContext(rootNode);
      typeCheckingContext.setOperationContext(operationContext);
      Set<Pair<SNode, List<IErrorReporter>>> nodeWithErrors = typeCheckingContext.checkRootAndGetErrors(true);
      for (Pair<SNode, List<IErrorReporter>> nodeErrorReporters : SetSequence.fromSet(nodeWithErrors)) {
        SNode node = nodeErrorReporters.o1;
        for (IErrorReporter errorReporter : ListSequence.fromList(nodeErrorReporters.o2)) {
          addIssue(results, node, errorReporter.reportError(), SpecificChecker.getResultCategory(errorReporter.getMessageStatus()), "type system", null);
        }
      }
      typeCheckingContext.dispose();
    }
    return results;
  }
}
