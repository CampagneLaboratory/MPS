package jetbrains.mps.ide.modelchecker.actions;

/*Generated by MPS */

import jetbrains.mps.typesystem.inference.ITypeContextOwner;
import java.util.List;
import jetbrains.mps.checkers.INodeChecker;
import jetbrains.mps.checkers.CheckersComponent;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import java.util.Set;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.errors.QuickFix_Runtime;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.typesystem.inference.DefaultTypecheckingContextOwner;
import jetbrains.mps.errors.QuickFixProvider;

public class SpecificModelChecker extends SpecificChecker implements ITypeContextOwner {
  private List<INodeChecker> myLanguageCheckers;

  public SpecificModelChecker() {
    myLanguageCheckers = CheckersComponent.getInstance().getCheckers();
  }

  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel model, ProgressMonitor monitor, IOperationContext operationContext) {
    List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());

    monitor.start("Checking " + SModelOperations.getModelName(model), ListSequence.fromList(myLanguageCheckers).count());
    for (INodeChecker checker : ListSequence.fromList(myLanguageCheckers)) {
      monitor.step(checker.getCategory());
      if (!(ModelCheckerSettings.getInstance().checkerIsOn(checker.getCategory()))) {
        continue;
      }
      if (monitor.isCanceled()) {
        break;
      }
      for (SNode rootNode : ListSequence.fromList(SModelOperations.getRoots(model, null))) {
        TypeContextManager.getInstance().acquireTypecheckingContext(rootNode, this);
        try {
          Set<IErrorReporter> iErrorReporters = checker.getErrors(rootNode, operationContext);
          for (IErrorReporter errorReporter : SetSequence.fromSet(iErrorReporters)) {
            final IErrorReporter reporter = errorReporter;
            final QuickFix_Runtime quickFix = check_7763bz_a0b0b0b0d0d0a(check_7763bz_a0a1a1a1a3a3a0(errorReporter));
            IModelCheckerFix fix = null;
            if (quickFix != null) {
              fix = new IModelCheckerFix() {
                public boolean doFix() {
                  quickFix.execute(reporter.getSNode());
                  return true;
                }
              };
            }
            addIssue(results, errorReporter.getSNode(), errorReporter.reportError(), SpecificChecker.getResultCategory(errorReporter.getMessageStatus()), checker.getCategory(), fix);
          }
        } finally {
          TypeContextManager.getInstance().releaseTypecheckingContext(rootNode, this);
        }
      }
      monitor.advance(1);
    }
    monitor.done();
    return results;
  }

  public TypeCheckingContext createTypecheckingContext(SNode node, TypeContextManager manager) {
    return (new DefaultTypecheckingContextOwner()).createTypecheckingContext(node, manager);
  }

  private static QuickFix_Runtime check_7763bz_a0b0b0b0d0d0a(QuickFixProvider checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getQuickFix();
    }
    return null;
  }

  private static QuickFixProvider check_7763bz_a0a1a1a1a3a3a0(IErrorReporter checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getIntentionProvider();
    }
    return null;
  }
}
