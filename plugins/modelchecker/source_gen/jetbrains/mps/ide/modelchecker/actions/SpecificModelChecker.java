package jetbrains.mps.ide.modelchecker.actions;

/*Generated by MPS */

import jetbrains.mps.typesystem.inference.ITypeContextOwner;
import jetbrains.mps.checkers.INodeChecker;
import com.intellij.openapi.extensions.Extensions;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import java.util.Set;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.errors.QuickFix_Runtime;
import jetbrains.mps.errors.QuickFixProvider;

public class SpecificModelChecker extends SpecificChecker implements ITypeContextOwner {
  private INodeChecker[] myLanguageCheckers;

  public SpecificModelChecker() {
    myLanguageCheckers = Extensions.getExtensions(INodeChecker.CHECKERS);
  }

  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel model, ProgressContext progressContext, IOperationContext operationContext) {
    List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());
    for (INodeChecker checker : myLanguageCheckers) {
      if (!(ModelCheckerSettings.getInstance().checkerIsOn(checker.getCategory()))) {
        continue;
      }
      if (!(progressContext.checkAndUpdateIndicator("Checking " + SModelOperations.getModelName(model) + " for " + checker.getCategory() + " errors"))) {
        break;
      }
      for (SNode rootNode : ListSequence.fromList(SModelOperations.getRoots(model, null))) {
        TypeContextManager.getInstance().getOrCreateContext(rootNode, this, true);
        Set<IErrorReporter> iErrorReporters = checker.getErrors(rootNode, operationContext);
        for (IErrorReporter errorReporter : SetSequence.fromSet(iErrorReporters)) {
          final IErrorReporter reporter = errorReporter;
          final QuickFix_Runtime quickFix = check_7763bz_a0b0c0c0b0a(check_7763bz_a0a1a2a2a1a0(errorReporter));
          IModelCheckerFix fix = null;
          if (quickFix != null) {
            fix = new IModelCheckerFix() {
              public boolean doFix() {
                quickFix.execute(reporter.getSNode());
                return true;
              }
            };
          }
          addIssue(results, errorReporter.getSNode(), errorReporter.reportError(), SpecificChecker.getResultCategory(errorReporter.getMessageStatus()), checker.getCategory(), fix);
        }
        TypeContextManager.getInstance().removeOwnerForRootNodeContext(rootNode, this);
      }
    }
    return results;
  }

  private static QuickFix_Runtime check_7763bz_a0b0c0c0b0a(QuickFixProvider checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getQuickFix();
    }
    return null;
  }

  private static QuickFixProvider check_7763bz_a0a1a2a2a1a0(IErrorReporter checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getIntentionProvider();
    }
    return null;
  }
}
