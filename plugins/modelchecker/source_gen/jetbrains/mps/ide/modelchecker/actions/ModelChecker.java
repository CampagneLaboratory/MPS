package jetbrains.mps.ide.modelchecker.actions;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.smodel.IOperationContext;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.ide.findusages.model.SearchResult;

public class ModelChecker {
  public static final String SEVERITY_ERROR = "Errors";
  public static final String SEVERITY_WARNING = "Warnings";
  public static final String SEVERITY_INFO = "Infos";

  private SearchResults<ModelCheckerIssue> myResults;
  private IOperationContext myOperationContext;
  private List<SpecificChecker> mySpecificCheckers;

  public ModelChecker(IOperationContext operationContext) {
    this(operationContext, new SearchResults<ModelCheckerIssue>());
  }

  public ModelChecker(IOperationContext operationContext, SearchResults<ModelCheckerIssue> results) {
    myResults = results;
    myOperationContext = operationContext;
  }

  public void checkModel(final SModelDescriptor modelDescriptor, final ProgressMonitor monitor) {
    final Wrappers._T<List<SpecificChecker>> specificCheckers = new Wrappers._T<List<SpecificChecker>>(mySpecificCheckers);
    if (specificCheckers.value == null) {
      specificCheckers.value = ModelCheckerSettings.getInstance().getSpecificCheckers();
    }

    monitor.start("Checking " + modelDescriptor.getLongName(), ListSequence.fromList(specificCheckers.value).count());
    try {
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          SModel model = modelDescriptor.getSModel();

          for (SpecificChecker specificChecker : ListSequence.fromList(specificCheckers.value)) {
            List<SearchResult<ModelCheckerIssue>> specificCheckerResults = specificChecker.checkModel(model, monitor.subTask(1), myOperationContext);
            myResults.getSearchResults().addAll(specificCheckerResults);
            if (monitor.isCanceled()) {
              break;
            }
          }
        }
      });
    } finally {
      monitor.done();
    }
  }

  public SearchResults<ModelCheckerIssue> getSearchResults() {
    return myResults;
  }

  public IOperationContext getOperationContext() {
    return myOperationContext;
  }

  public void setSpecificCheckers(List<SpecificChecker> specificCheckers) {
    mySpecificCheckers = specificCheckers;
  }
}
