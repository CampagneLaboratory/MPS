package jetbrains.mps.ide.modelchecker.actions;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.smodel.IOperationContext;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.IModule;
import jetbrains.mps.project.Project;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.project.ModuleContext;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.logging.Logger;

public class ModelChecker {
  public static final String SEVERITY_ERROR = "Errors";
  public static final String SEVERITY_WARNING = "Warnings";
  public static final String SEVERITY_INFO = "Infos";
  private SearchResults<ModelCheckerIssue> myResults;
  private IOperationContext myOperationContext;
  private List<SpecificChecker> mySpecificCheckers;

  public ModelChecker(IOperationContext operationContext) {
    this(operationContext, new SearchResults<ModelCheckerIssue>());
  }

  public ModelChecker(IOperationContext operationContext, SearchResults<ModelCheckerIssue> results) {
    myResults = results;
    myOperationContext = operationContext;
  }

  public void checkModel(final SModelDescriptor modelDescriptor, final ProgressMonitor monitor) {
    final Wrappers._T<List<SpecificChecker>> specificCheckers = new Wrappers._T<List<SpecificChecker>>(mySpecificCheckers);
    if (specificCheckers.value == null) {
      specificCheckers.value = ModelCheckerSettings.getInstance().getSpecificCheckers();
    }

    monitor.start("Checking " + modelDescriptor.getLongName(), ListSequence.fromList(specificCheckers.value).count());
    try {
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          IModule module = modelDescriptor.getModule();
          Project project = myOperationContext.getProject();

          if (module == null) {
            LOG.warning("Module is null for " + modelDescriptor.getLongName() + " model");
          }
          if (project == null) {
            LOG.warning("Project is null for IOperationContext in " + modelDescriptor.getLongName() + " model");
          }

          if (module != null && project != null) {
            IOperationContext operationContext = new ModelChecker.ModelCheckerOperationContext(project, module);
            SModel model = modelDescriptor.getSModel();

            for (SpecificChecker specificChecker : ListSequence.fromList(specificCheckers.value)) {
              try {
                List<SearchResult<ModelCheckerIssue>> specificCheckerResults = specificChecker.checkModel(model, monitor.subTask(1), operationContext);
                myResults.getSearchResults().addAll(specificCheckerResults);
              } catch (Throwable t) {
                LOG.error("Error while " + model.getModelDescriptor().getLongName() + " model checking", t);
              }
              if (monitor.isCanceled()) {
                break;
              }
            }
          }
        }
      });
    } finally {
      monitor.done();
    }
  }

  public SearchResults<ModelCheckerIssue> getSearchResults() {
    return myResults;
  }

  public IOperationContext getOperationContext() {
    return myOperationContext;
  }

  public void setSpecificCheckers(List<SpecificChecker> specificCheckers) {
    mySpecificCheckers = specificCheckers;
  }

  public class ModelCheckerOperationContext extends ModuleContext {
    public ModelCheckerOperationContext(@NotNull Project project, @NotNull IModule module) {
      super(module, project);
    }

    @Override
    public Project getProject() {
      LOG.warning("Using getProject() from IOperationContext strictly prohibited");
      return super.getProject();
    }
  }

  private static Logger LOG = Logger.getLogger(ModelChecker.class);
}
