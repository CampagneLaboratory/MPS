package jetbrains.mps.core.template.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.KeyMapImpl;
import jetbrains.mps.openapi.editor.cells.KeyMapAction;
import jetbrains.mps.editor.runtime.cells.KeyMapActionImpl;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;

public class attributes extends KeyMapImpl {
  public attributes() {
    this.setApplicableToEveryModel(true);
    KeyMapAction action;
    action = new attributes.attributes_Action0();
    this.putAction("ctrl+shift", "VK_F", action);
    action = new attributes.attributes_Action1();
    this.putAction("ctrl+shift", "VK_M", action);
    action = new attributes.attributes_Action2();
    this.putAction("ctrl+shift", "VK_M", action);
    action = new attributes.attributes_Action3();
    this.putAction("ctrl+shift", "VK_M", action);
    action = new attributes.attributes_Action4();
    this.putAction("ctrl+shift", "VK_M", action);
  }

  public static class attributes_Action0 extends KeyMapActionImpl {
    public attributes_Action0() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "mark node as template root";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      return this.canExecute_internal(editorContext, contextNode, this.getSelectedNodes(editorContext));
    }

    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (ListSequence.fromList(selectedNodes).count() != 1) {
        return false;
      }
      if (!(MacroQueries.isTemplateNode(node))) {
        return false;
      }

      return true;
    }

    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode applyToNode = ListSequence.fromList(SNodeOperations.getAncestors(node, null, true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(SNodeOperations.isAttribute(it));
        }
      }).first();
      SNodeFactoryOperations.setNewAttribute(applyToNode, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.core.template.structure.MtlTemplateRoot"), "jetbrains.mps.core.template.structure.MtlTemplateRoot");
    }

    public String getKeyStroke() {
      return "ctrl shift F";
    }
  }

  public static class attributes_Action1 extends KeyMapActionImpl {
    public attributes_Action1() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "add node macro";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      return this.canExecute_internal(editorContext, contextNode, this.getSelectedNodes(editorContext));
    }

    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (ListSequence.fromList(selectedNodes).count() != 1) {
        return false;
      }
      if (!(MacroQueries.isTemplateNode(node))) {
        return false;
      }
      return true;
    }

    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      MacroQueries.addNodeMacro(node);
    }

    public String getKeyStroke() {
      return "ctrl shift M";
    }
  }

  public static class attributes_Action2 extends KeyMapActionImpl {
    public attributes_Action2() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "add property macro";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      return this.canExecute_internal(editorContext, contextNode, this.getSelectedNodes(editorContext));
    }

    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (ListSequence.fromList(selectedNodes).count() != 1) {
        return false;
      }
      if (!(MacroQueries.isTemplateNode(node))) {
        return false;
      }
      EditorCell cell = editorContext.getSelectedCell();
      String linkRole = MacroQueries.getEditedLinkRole(cell);
      if (linkRole != null) {
        return false;
      }
      String propertyName = MacroQueries.getEditedPropertyName(cell);
      if (propertyName == null) {
        return false;
      }
      return AttributeOperations.getAttribute(node, new IAttributeDescriptor.PropertyAttribute("jetbrains.mps.core.template.structure.MtlPropertyMacro", propertyName)) == null;

    }

    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      String propertyName = MacroQueries.getEditedPropertyName(editorContext.getSelectedCell());
      SNode propertyMacro = SNodeFactoryOperations.setNewAttribute(node, new IAttributeDescriptor.PropertyAttribute("jetbrains.mps.core.template.structure.MtlPropertyMacro", propertyName), "jetbrains.mps.core.template.structure.MtlPropertyMacro");

      editorContext.selectAndSetCaret(propertyMacro, 0);
    }

    public String getKeyStroke() {
      return "ctrl shift M";
    }
  }

  public static class attributes_Action3 extends KeyMapActionImpl {
    public attributes_Action3() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "add reference macro";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      return this.canExecute_internal(editorContext, contextNode, this.getSelectedNodes(editorContext));
    }

    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (ListSequence.fromList(selectedNodes).count() != 1) {
        return false;
      }
      if (!(MacroQueries.isTemplateNode(node))) {
        return false;
      }
      EditorCell cell = editorContext.getSelectedCell();
      if (cell == null) {
        return false;
      }
      String linkRole = MacroQueries.getEditedLinkRole(cell);
      if (linkRole == null) {
        return false;
      }
      SNode referentNode = MacroQueries.getEditedLinkReferentNode(cell);
      return AttributeOperations.getAttribute(referentNode, new IAttributeDescriptor.LinkAttribute("jetbrains.mps.core.template.structure.MtlReferenceMacro", linkRole)) == null;
    }

    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      EditorCell cell = editorContext.getSelectedCell();
      String linkRole = MacroQueries.getEditedLinkRole(cell);
      SNode referentNode = MacroQueries.getEditedLinkReferentNode(cell);
      SNodeFactoryOperations.setNewAttribute(referentNode, new IAttributeDescriptor.LinkAttribute("jetbrains.mps.core.template.structure.MtlReferenceMacro", linkRole), "jetbrains.mps.core.template.structure.MtlReferenceMacro");
    }

    public String getKeyStroke() {
      return "ctrl shift M";
    }
  }

  public static class attributes_Action4 extends KeyMapActionImpl {
    public attributes_Action4() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "add label";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      return this.canExecute_internal(editorContext, contextNode, this.getSelectedNodes(editorContext));
    }

    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (ListSequence.fromList(selectedNodes).count() != 1) {
        return false;
      }
      if (!(MacroQueries.isTemplateNode(node))) {
        return false;
      }
      return true;
    }

    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      MacroQueries.addNodeLabel(node);
    }

    public String getKeyStroke() {
      return "ctrl shift M";
    }
  }
}
