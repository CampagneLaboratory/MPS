package jetbrains.mps.core.gen.plugin;

/*Generated by MPS */

import jetbrains.mps.generator.ModelGenerationPlan;
import java.util.List;
import jetbrains.mps.generator.runtime.TemplateMappingConfiguration;
import java.util.ArrayList;
import jetbrains.mps.smodel.language.LanguageRuntime;
import jetbrains.mps.smodel.language.LanguageRegistry;
import java.util.Collection;
import jetbrains.mps.generator.runtime.TemplateModule;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.generator.runtime.TemplateModel;

public class TransformGenerationPlan implements ModelGenerationPlan {
  private List<List<TemplateMappingConfiguration>> steps = new ArrayList<List<TemplateMappingConfiguration>>();

  public TransformGenerationPlan() {
  }

  private void addStep(List<TemplateMappingConfiguration> step) {
    steps.add(step);
  }

  private boolean addLanguage(String language) {
    LanguageRuntime runtime = LanguageRegistry.getInstance().getLanguage(language);
    if (runtime == null) {
      return false;
    }

    Collection<TemplateModule> generators = runtime.getGenerators();
    if (generators == null) {
      return false;
    }

    List<TemplateMappingConfiguration> result = new ArrayList<TemplateMappingConfiguration>();
    for (TemplateModule gen : CollectionSequence.fromCollection(generators)) {
      if (gen == null) {
        continue;
      }
      Collection<TemplateModel> models = gen.getModels();
      if (models == null) {
        continue;
      }

      for (TemplateModel m : CollectionSequence.fromCollection(models)) {
        Collection<TemplateMappingConfiguration> configurations = m.getConfigurations();
        if (configurations == null) {
          continue;
        }

        result.addAll(configurations);
      }
    }

    if (result.isEmpty()) {
      return false;
    }
    addStep(result);
    return true;
  }

  public List<List<TemplateMappingConfiguration>> getSteps() {
    return steps;
  }

  public static TransformGenerationPlan forLanguages(String... languages) {
    TransformGenerationPlan plan = new TransformGenerationPlan();
    for (String l : languages) {
      if (!(plan.addLanguage(l))) {
        return null;
      }
    }
    return plan;
  }
}
