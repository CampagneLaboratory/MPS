package jetbrains.mps.core.query.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSetupContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.action.DefaultSimpleSubstituteAction;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import jetbrains.mps.smodel.action.AbstractChildNodeSetter;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.action.ModelActions;
import java.util.regex.Matcher;
import jetbrains.mps.smodel.action.NodeSubstitutePreconditionContext;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.action.ChildSubstituteActionsHelper;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.regex.Pattern;

public class QueriesGenerated {
  public static void nodeFactory_NodeSetup_MqlParentheses_7352592509980950440(final IOperationContext operationContext, final NodeSetupContext _context) {
    if (SNodeOperations.isInstanceOf(_context.getSampleNode(), "jetbrains.mps.core.query.structure.MqlExpression")) {
      SLinkOperations.setTarget(_context.getNewNode(), "expr", SNodeOperations.cast(_context.getSampleNode(), "jetbrains.mps.core.query.structure.MqlExpression"), true);
    }
  }

  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_MqlExpression_228266671027634830(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlIntLiteral");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode intConst = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlIntLiteral", null);
            try {
              SPropertyOperations.set(intConst, "value", "" + (Integer.parseInt(pattern)));
            } catch (NumberFormatException e) {
              SPropertyOperations.set(intConst, "value", "" + (0));
            }
            return intConst;
          }

          public boolean hasSubstitute() {
            return true;
          }

          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            if (strictly) {
              return REGEXP_x583g4_a0a0a0a2a0a0a0a2a0a1a1.matcher(pattern).matches();
            } else {
              return REGEXP_x583g4_a0a0a0a0c0a0a0a0c0a0b0b.matcher(pattern).matches();
            }
          }

          public String getDescriptionText(String pattern) {
            return "integer literal";
          }

          public String getMatchingText(String pattern) {
            return ((pattern == null || pattern.length() == 0) ?
              "0" :
              pattern
            );
          }

          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlBoolLiteral");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode result = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlBoolLiteral", null);
            SPropertyOperations.set(result, "value", "" + (true));
            return result;
          }

          public String getDescriptionText(String pattern) {
            return "true literal";
          }

          public String getMatchingText(String pattern) {
            return "true";
          }

          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlBoolLiteral");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode result = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlBoolLiteral", null);
            SPropertyOperations.set(result, "value", "" + (false));
            return result;
          }

          public String getDescriptionText(String pattern) {
            return "false literal";
          }

          public String getMatchingText(String pattern) {
            return "false";
          }

          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }

  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_MqlParameter_228266671027817939(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlParameter");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        SNode wrappedConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlType");
        IChildNodeSetter setter = new AbstractChildNodeSetter() {
          private SNode wrapNode(SNode nodeToWrap, SModel model, @Nullable EditorContext editorContext) {
            SNode parameter = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlParameter", null);
            SLinkOperations.setTarget(parameter, "type", nodeToWrap, true);
            return parameter;
          }

          public boolean returnSmallPart(SNode nodeToWrap) {
            return false;
          }

          @Override
          public SNode doExecute(SNode pn, SNode oc, SNode nc, IScope sc, @Nullable EditorContext editorContext) {
            SNode wrappedNode = wrapNode(nc, nc.getModel(), editorContext);
            _context.getChildSetter().execute(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedNode, operationContext.getScope(), editorContext);
            return (returnSmallPart(nc) ?
              nc :
              wrappedNode
            );
          }
        };
        ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedConcept, setter, operationContext)));
      }
    }
    return result;
  }

  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_MqlExpression_7352592509980791678(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlUnary");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode mqlUnary = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlUnary", null);
            SPropertyOperations.set(mqlUnary, "kind", "2");
            return mqlUnary;
          }

          public String getDescriptionText(String pattern) {
            return "unary minus";
          }

          public String getMatchingText(String pattern) {
            return "-";
          }

          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlUnary");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode mqlUnary = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlUnary", null);
            SPropertyOperations.set(mqlUnary, "kind", "1");
            return mqlUnary;
          }

          public String getDescriptionText(String pattern) {
            return "logical negation";
          }

          public String getMatchingText(String pattern) {
            return "!";
          }

          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }

  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_MqlExpression_1992172484410604549(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlAssignment");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            Matcher _matcher_x583g4_a1a0a0a0a0a2a0a1a4;
            SNode result = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlAssignment", null);
            if ((_matcher_x583g4_a1a0a0a0a0a2a0a1a4 = REGEXP_x583g4_a0a0a2a0a0a0a0a2a0a1a4.matcher(pattern)).find()) {
              SPropertyOperations.set(SLinkOperations.getTarget(result, "var", true), "name", _matcher_x583g4_a1a0a0a0a0a2a0a1a4.group(1));
            }
            return result;
          }

          public boolean hasSubstitute() {
            return true;
          }

          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            return REGEXP_x583g4_a0a0a2a0a0a0a2a0a1a4.matcher(pattern).matches();
          }

          public String getDescriptionText(String pattern) {
            return "create variable";
          }

          public String getMatchingText(String pattern) {
            return pattern;
          }

          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlAssignment");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode result = SConceptOperations.createNewNode("jetbrains.mps.core.query.structure.MqlAssignment", null);
            return result;
          }

          public String getDescriptionText(String pattern) {
            return "create variable";
          }

          public String getMatchingText(String pattern) {
            return "=";
          }

          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_MqlExpression_2852142168179572874(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    if (!(SNodeOperations.isInstanceOf(_context.getParentNode(), "jetbrains.mps.core.query.structure.MqlExpression"))) {
      return true;
    }
    int parentPrio = BehaviorReflection.invokeVirtual(Integer.TYPE, SNodeOperations.cast(_context.getParentNode(), "jetbrains.mps.core.query.structure.MqlExpression"), "virtual_getPriority_7352592509980890960", new Object[]{});
    return parentPrio > 14 || parentPrio == -1;
  }

  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_MqlSelector_5280308256730689786(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCollectionSelector");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "MqlCollectionSelectorKind"));
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode nn = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlCollectionSelector", null);
                SPropertyOperations.set(nn, "kind", "" + (SEnumOperations.getEnumMemberValue((item))));
                SPropertyOperations.set(SLinkOperations.getTarget(nn, "var", true), "name", "it");
                return nn;
              }

              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "5280308256730467483"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                  }
                }), "externalValue");
              }

              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
            });
          }
        }
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCollectionConcatOp");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "MqlCollectionConcatOpKind"));
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode nn = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlCollectionConcatOp", null);
                SPropertyOperations.set(nn, "kind", "" + (SEnumOperations.getEnumMemberValue((item))));
                return nn;
              }

              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "5272233748012107008"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                  }
                }), "externalValue");
              }

              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
            });
          }
        }
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCollectionElementOp");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "MqlCollectionElementOpKind"));
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode nn = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlCollectionElementOp", null);
                SPropertyOperations.set(nn, "kind", "" + (SEnumOperations.getEnumMemberValue((item))));
                return nn;
              }

              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "5272233748012107398"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                  }
                }), "externalValue");
              }

              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
            });
          }
        }
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCollectionProperty");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "MqlCollectionPropertyKind"));
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode nn = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlCollectionProperty", null);
                SPropertyOperations.set(nn, "kind", "" + (SEnumOperations.getEnumMemberValue((item))));
                return nn;
              }

              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "5280308256730609807"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                  }
                }), "externalValue");
              }

              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
            });
          }
        }
      }
    }
    return result;
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_MqlSelector_5280308256730689787(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return SNodeOperations.isInstanceOf(_context.getParentNode(), "jetbrains.mps.core.query.structure.MqlDotExpression") && SNodeOperations.isInstanceOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(), "jetbrains.mps.core.query.structure.MqlDotExpression"), "left", true), "virtual_getType_228266671027861783", new Object[]{}), "jetbrains.mps.core.query.structure.MqlCollectionType");
  }

  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_MqlSelector_5343139407560197073(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlStringProperty");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "MqlStringPropertyKind"));
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode nn = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlStringProperty", null);
                SPropertyOperations.set(nn, "kind", "" + (SEnumOperations.getEnumMemberValue((item))));
                return nn;
              }

              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "5343139407557944004"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                  }
                }), "externalValue");
              }

              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
            });
          }
        }
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlStringIndexOp");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "MqlStringIndexOpKind"));
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode nn = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlStringIndexOp", null);
                SPropertyOperations.set(nn, "kind", "" + (SEnumOperations.getEnumMemberValue((item))));
                return nn;
              }

              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "5343139407557982970"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                  }
                }), "externalValue");
              }

              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
            });
          }
        }
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlSubstring");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "MqlSubstringKind"));
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode nn = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.core.query.structure.MqlSubstring", null);
                SPropertyOperations.set(nn, "kind", "" + (SEnumOperations.getEnumMemberValue((item))));
                return nn;
              }

              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "2666204899678455912"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                  }
                }), "externalValue");
              }

              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
            });
          }
        }
      }
    }
    return result;
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_MqlSelector_4562783364484636183(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return SNodeOperations.isInstanceOf(_context.getParentNode(), "jetbrains.mps.core.query.structure.MqlDotExpression") && SNodeOperations.isInstanceOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(), "jetbrains.mps.core.query.structure.MqlDotExpression"), "left", true), "virtual_getType_228266671027861783", new Object[]{}), "jetbrains.mps.core.query.structure.MqlStringType");
  }

  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_MqlCollectionType_9087630951855197731(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlOrderedSetType"), _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext)));
    ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlListType"), _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext)));
    return result;
  }

  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_MqlSwitchExpression_8982157191771551341(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    return result;
  }

  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_SwitchBranch_8982157191766920120(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.ExpressionSwitchBranch");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "ExpressionSwitchBranchKind"));
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                return createExpressionSwitchBranch_s5rs0q_a0a0a0b(SEnumOperations.getEnumMemberValue((item)));
              }

              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "8982157191766917597"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                  }
                }), "externalValue");
              }

              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
            });
          }
        }
      }
    }
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_MqlExpression_2059702675525956854(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlTriplex"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode to = SNodeFactoryOperations.createNewNode(_context.getModel(), "jetbrains.mps.core.query.structure.MqlTriplex", null);
        SNode current = _context.getSourceNode();
        current = PrecedenceUtil.getTargetForRightTransform(current, to);
        SNodeOperations.replaceWithAnother(current, to);
        SLinkOperations.setTarget(to, "condition", current, true);
        return PrecedenceUtil.parenthesiseAndRotateIfNecessary(to);
      }

      public String getMatchingText(String pattern) {
        return "?";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      public String getDescriptionText(String pattern) {
        return "triplex operator";
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlTriplex"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlTriplex"), null));
      }
    });
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_MqlExpression_2059702675525956872(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlDotExpression"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode dotexpr = SNodeOperations.replaceWithAnother(_context.getSourceNode(), SNodeFactoryOperations.createNewNode(_context.getModel(), "jetbrains.mps.core.query.structure.MqlDotExpression", null));
        SLinkOperations.setTarget(dotexpr, "left", _context.getSourceNode(), true);
        SNodeFactoryOperations.setNewChild(dotexpr, "right", "jetbrains.mps.core.query.structure.MqlSelector");
        return dotexpr;
      }

      public String getMatchingText(String pattern) {
        return ".";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      public String getDescriptionText(String pattern) {
        return "dot expression";
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlDotExpression"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlDotExpression"), null));
      }
    });
    return result;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_MqlExpression_2059702675525956873(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return (BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), _context.getSourceNode(), "virtual_getType_228266671027861783", new Object[]{}) != null);
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_MqlSelector_1197032086774(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createSideTransformHintSubstituteActions(new Computable<SNode>() {
      public SNode compute() {
        return SNodeOperations.getParent(_context.getSourceNode());
      }
    }.compute(), _context.getSide(), _context.getTransformationTag(), operationContext)));
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_MqlExpression_7352592509980787934(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      Iterable<SNode> parameterObjects = new Computable<Iterable<SNode>>() {
        public Iterable<SNode> compute() {
          return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "MqlArithmeticKind"));
        }
      }.compute();
      if (parameterObjects != null) {
        for (final SNode item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlArithmetic"), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              SNode result = SNodeFactoryOperations.createNewNode(_context.getModel(), "jetbrains.mps.core.query.structure.MqlArithmetic", _context.getSourceNode());
              SPropertyOperations.set(result, "kind", "" + (SEnumOperations.getEnumMemberValue((item))));
              SNode nodeToProcess = PrecedenceUtil.getTargetForRightTransform(_context.getSourceNode(), result);
              SNodeOperations.replaceWithAnother(nodeToProcess, result);
              SLinkOperations.setTarget(result, "left", nodeToProcess, true);
              return PrecedenceUtil.parenthesiseAndRotateIfNecessary(result);
            }

            public String getMatchingText(String pattern) {
              return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "6762883159245048041"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                }
              }), "externalValue");
            }

            public String getVisibleMatchingText(String pattern) {
              return getMatchingText(pattern);
            }

            public String getDescriptionText(String pattern) {
              return SEnumOperations.getEnumMemberName((item)).toLowerCase() + " operator";
            }

            @Override
            protected boolean isEnabled() {
              SNode sourceNode = getSourceNode();
              SNode parent = SNodeOperations.getParent(sourceNode);
              SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
              return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlArithmetic"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlArithmetic"), null));
            }
          });
        }
      }
    }
    {
      Iterable<SNode> parameterObjects = new Computable<Iterable<SNode>>() {
        public Iterable<SNode> compute() {
          return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "MqlConditionKind"));
        }
      }.compute();
      if (parameterObjects != null) {
        for (final SNode item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCondition"), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              SNode result = SNodeFactoryOperations.createNewNode(_context.getModel(), "jetbrains.mps.core.query.structure.MqlCondition", _context.getSourceNode());
              SPropertyOperations.set(result, "kind", "" + (SEnumOperations.getEnumMemberValue((item))));
              SNode nodeToProcess = PrecedenceUtil.getTargetForRightTransform(_context.getSourceNode(), result);
              SNodeOperations.replaceWithAnother(nodeToProcess, result);
              SLinkOperations.setTarget(result, "left", nodeToProcess, true);
              return PrecedenceUtil.parenthesiseAndRotateIfNecessary(result);
            }

            public String getMatchingText(String pattern) {
              return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "6762883159245048026"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                }
              }), "externalValue");
            }

            public String getVisibleMatchingText(String pattern) {
              return getMatchingText(pattern);
            }

            public String getDescriptionText(String pattern) {
              return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "6762883159245048026"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                }
              }), "externalValue") + " operator";
            }

            @Override
            protected boolean isEnabled() {
              SNode sourceNode = getSourceNode();
              SNode parent = SNodeOperations.getParent(sourceNode);
              SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
              return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCondition"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCondition"), null));
            }
          });
        }
      }
    }
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_MqlExpression_8595827001410586465(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      Iterable<SNode> parameterObjects = new Computable<Iterable<SNode>>() {
        public Iterable<SNode> compute() {
          return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "MqlArithmeticKind"));
        }
      }.compute();
      if (parameterObjects != null) {
        for (final SNode item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlArithmetic"), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              SNode result = SNodeFactoryOperations.createNewNode(_context.getModel(), "jetbrains.mps.core.query.structure.MqlArithmetic", _context.getSourceNode());
              SPropertyOperations.set(result, "kind", "" + (SEnumOperations.getEnumMemberValue((item))));
              SNode nodeToProcess = PrecedenceUtil.getTargetForLeftTransform(_context.getSourceNode(), result);
              SNodeOperations.replaceWithAnother(nodeToProcess, result);
              SLinkOperations.setTarget(result, "right", nodeToProcess, true);
              return PrecedenceUtil.parenthesiseAndRotateIfNecessary(result);
            }

            public String getMatchingText(String pattern) {
              return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "6762883159245048041"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                }
              }), "externalValue");
            }

            public String getVisibleMatchingText(String pattern) {
              return getMatchingText(pattern);
            }

            public String getDescriptionText(String pattern) {
              return SEnumOperations.getEnumMemberName((item)).toLowerCase() + " operator";
            }

            @Override
            protected boolean isEnabled() {
              SNode sourceNode = getSourceNode();
              SNode parent = SNodeOperations.getParent(sourceNode);
              SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
              return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlArithmetic"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlArithmetic"), null));
            }
          });
        }
      }
    }
    {
      Iterable<SNode> parameterObjects = new Computable<Iterable<SNode>>() {
        public Iterable<SNode> compute() {
          return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "MqlConditionKind"));
        }
      }.compute();
      if (parameterObjects != null) {
        for (final SNode item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCondition"), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              SNode result = SNodeFactoryOperations.createNewNode(_context.getModel(), "jetbrains.mps.core.query.structure.MqlCondition", _context.getSourceNode());
              SPropertyOperations.set(result, "kind", "" + (SEnumOperations.getEnumMemberValue((item))));
              SNode nodeToProcess = PrecedenceUtil.getTargetForLeftTransform(_context.getSourceNode(), result);
              SNodeOperations.replaceWithAnother(nodeToProcess, result);
              SLinkOperations.setTarget(result, "right", nodeToProcess, true);
              return PrecedenceUtil.parenthesiseAndRotateIfNecessary(result);
            }

            public String getMatchingText(String pattern) {
              return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "6762883159245048026"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                }
              }), "externalValue");
            }

            public String getVisibleMatchingText(String pattern) {
              return getMatchingText(pattern);
            }

            public String getDescriptionText(String pattern) {
              return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)", "6762883159245048026"), "member", true)).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.getString(it, "internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                }
              }), "externalValue") + " operator";
            }

            @Override
            protected boolean isEnabled() {
              SNode sourceNode = getSourceNode();
              SNode parent = SNodeOperations.getParent(sourceNode);
              SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
              return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCondition"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCondition"), null));
            }
          });
        }
      }
    }
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_MqlExpression_7352592509980890728(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlUnary"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode result = SNodeFactoryOperations.createNewNode("jetbrains.mps.core.query.structure.MqlUnary", null);
        SPropertyOperations.set(result, "kind", "2");
        SNode targetExpression = PrecedenceUtil.getTargetForLeftTransform(_context.getSourceNode(), result);
        SNodeOperations.replaceWithAnother(targetExpression, result);
        SLinkOperations.setTarget(result, "expr", targetExpression, true);
        return result;
      }

      public String getMatchingText(String pattern) {
        return "-";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      public String getDescriptionText(String pattern) {
        return "unary minus";
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlUnary"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlUnary"), null));
      }
    });
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_MqlSwitchExpression_8982157191771269066(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlSwitchExpression"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode scrutinee = SConceptOperations.createNewNode("jetbrains.mps.core.query.structure.MqlSwitchScrutinee", null);
        SLinkOperations.setTarget(scrutinee, "expression", SConceptOperations.createNewNode("jetbrains.mps.core.query.structure.MqlExpression", null), true);
        return SLinkOperations.setTarget(_context.getSourceNode(), "scrutinee", scrutinee, true);
      }

      public String getMatchingText(String pattern) {
        return "(";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlSwitchExpression"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlSwitchExpression"), null));
      }
    });
    return result;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_MqlSwitchExpression_8982157191771269069(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return (SLinkOperations.getTarget(_context.getSourceNode(), "scrutinee", true) == null);
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_MqlSwitchScrutinee_7980557257045739745(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlSwitchAliasedScrutinee"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        // Senya's knowledge saved 
        // <node> 
        SNode var = SNodeFactoryOperations.createNewNode("jetbrains.mps.core.query.structure.MqlSwitchAliasVar", null);
        SPropertyOperations.set(var, "name", "it");
        SNode node = SConceptOperations.createNewNode("jetbrains.mps.core.query.structure.MqlSwitchAliasedScrutinee", null);
        SLinkOperations.setTarget(node, "expression", SLinkOperations.getTarget(_context.getSourceNode(), "expression", true), true);
        SLinkOperations.setTarget(node, "aliasVar", var, true);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(), node);
        return node;
      }

      public String getMatchingText(String pattern) {
        return "as";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlSwitchAliasedScrutinee"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlSwitchAliasedScrutinee"), null));
      }
    });
    return result;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_MqlSwitchScrutinee_7980557257045739783(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return !(SNodeOperations.isInstanceOf(_context.getSourceNode(), "jetbrains.mps.core.query.structure.MqlSwitchAliasedScrutinee"));
  }

  private static SNode createExpressionSwitchBranch_s5rs0q_a0a0a0b(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.query.structure.ExpressionSwitchBranch", null, GlobalScope.getInstance(), false);
    n1.setProperty("kind", (String) p0);
    return n1;
  }

  private static Pattern REGEXP_x583g4_a0a0a0a2a0a0a0a2a0a1a1 = Pattern.compile("-?\\d+", 0);
  private static Pattern REGEXP_x583g4_a0a0a0a0c0a0a0a0c0a0b0b = Pattern.compile("-?\\d*", 0);
  private static Pattern REGEXP_x583g4_a0a0a2a0a0a0a0a2a0a1a4 = Pattern.compile("([a-zA-Z_]\\w*)\\s*=?", 0);
  private static Pattern REGEXP_x583g4_a0a0a2a0a0a0a2a0a1a4 = Pattern.compile("(?:[a-zA-Z_]\\w*)\\s*=", 0);
}
