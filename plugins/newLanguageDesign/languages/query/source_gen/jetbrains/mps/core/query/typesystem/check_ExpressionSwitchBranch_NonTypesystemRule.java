package jetbrains.mps.core.query.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.project.GlobalScope;

public class check_ExpressionSwitchBranch_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_ExpressionSwitchBranch_NonTypesystemRule() {
  }

  public void applyRule(final SNode expressionSwitchBranch, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SPropertyOperations.hasValue(expressionSwitchBranch, "kind", "2", null) && !(BehaviorReflection.invokeVirtual(Boolean.TYPE, BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SLinkOperations.getTarget(expressionSwitchBranch, "test", true), "virtual_getType_228266671027861783", new Object[]{}), "virtual_isSubtypeOf_2852142168179579064", new Object[]{createMqlBoolType_q0x0t8_a0a0a0a1()}))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(expressionSwitchBranch, "test", true), "Type of when-expression must be bool", "r:efe0605f-fbe2-49dd-8c71-c87a67c06b2c(jetbrains.mps.core.query.typesystem)", "8982157191774831916", null, errorTarget);
      }
      return;
    }

    // bad: we do all this for every case branch 
    if (SPropertyOperations.hasValue(expressionSwitchBranch, "kind", "1", null)) {
      SNode switchExp = SNodeOperations.as(SNodeOperations.getParent(expressionSwitchBranch), "jetbrains.mps.core.query.structure.SwitchExpression");
      // NOTE: example of going up the tree when typing branches 
      if ((switchExp == null)) {
        return;
      }
      if ((SLinkOperations.getTarget(switchExp, "scrutinee", true) == null)) {
        return;
      }
      SNode scrutineeType = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SLinkOperations.getTarget(switchExp, "scrutinee", true), "virtual_getType_228266671027861783", new Object[]{});
      SNode caseType = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SLinkOperations.getTarget(expressionSwitchBranch, "test", true), "virtual_getType_228266671027861783", new Object[]{});
      if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, caseType, "virtual_isSubtypeOf_2852142168179579064", new Object[]{scrutineeType}))) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(expressionSwitchBranch, "test", true), BehaviorReflection.invokeVirtual(String.class, caseType, "virtual_getText_270269450479797040", new Object[]{}) + " is not subtype of " + BehaviorReflection.invokeVirtual(String.class, scrutineeType, "virtual_getText_270269450479797040", new Object[]{}), "r:efe0605f-fbe2-49dd-8c71-c87a67c06b2c(jetbrains.mps.core.query.typesystem)", "8982157191775784188", null, errorTarget);
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.core.query.structure.ExpressionSwitchBranch";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  private static SNode createMqlBoolType_q0x0t8_a0a0a0a1() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.query.structure.MqlBoolType", null, GlobalScope.getInstance(), false);
    return n1;
  }
}
