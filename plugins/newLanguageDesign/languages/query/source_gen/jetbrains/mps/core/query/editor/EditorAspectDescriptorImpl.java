package jetbrains.mps.core.query.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new ExpressionSwitchBranch_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new MqlArithmetic_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new MqlAssignment_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new MqlBoolLiteral_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new MqlBoolType_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new MqlClosure_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new MqlCollectionOneArgOp_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new MqlCollectionProperty_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new MqlCollectionSelector_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new MqlCollectionSelectorVar_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new MqlCollectionSelectorVarRef_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new MqlCollectionType_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new MqlCondition_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new MqlDotExpression_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new MqlEmptyCollection_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new MqlExpression_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new MqlFunctionType_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new MqlImport_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new MqlIntLiteral_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new MqlIntType_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new MqlLet_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new MqlListLiteral_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new MqlListType_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new MqlNoContextQueryCall_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new MqlNullLiteral_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new MqlNullType_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new MqlPackage_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new MqlParameter_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new MqlParameterReference_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new MqlParentheses_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new MqlQuery_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new MqlSelector_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new MqlSetLiteral_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new MqlStringIndexOp_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new MqlStringLiteral_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new MqlStringProperty_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new MqlStringType_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new MqlSubstring_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new MqlThis_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new MqlTriplex_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new MqlType_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new MqlUnary_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new MqlVariable_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new MqlVariableReference_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new SwitchExpression_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        if ("jetbrains.mps.core.query.editor.OneArgOpName".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new CollectionConcatOpName());
        }
        break;
      case 1:
        if ("jetbrains.mps.core.query.editor.OneArgOpName".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new CollectionElementOpName());
        }
        break;
      case 2:
        if ("jetbrains.mps.core.query.editor.OneArgOpName".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new OneArgOpName());
        }
        break;
      default:
    }
    return Collections.emptyList();
  }



  public Collection<ConceptEditorHint> getHints() {
    return Collections.emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.core.query.structure.ExpressionSwitchBranch", "jetbrains.mps.core.query.structure.MqlArithmetic", "jetbrains.mps.core.query.structure.MqlAssignment", "jetbrains.mps.core.query.structure.MqlBoolLiteral", "jetbrains.mps.core.query.structure.MqlBoolType", "jetbrains.mps.core.query.structure.MqlClosure", "jetbrains.mps.core.query.structure.MqlCollectionOneArgOp", "jetbrains.mps.core.query.structure.MqlCollectionProperty", "jetbrains.mps.core.query.structure.MqlCollectionSelector", "jetbrains.mps.core.query.structure.MqlCollectionSelectorVar", "jetbrains.mps.core.query.structure.MqlCollectionSelectorVarRef", "jetbrains.mps.core.query.structure.MqlCollectionType", "jetbrains.mps.core.query.structure.MqlCondition", "jetbrains.mps.core.query.structure.MqlDotExpression", "jetbrains.mps.core.query.structure.MqlEmptyCollection", "jetbrains.mps.core.query.structure.MqlExpression", "jetbrains.mps.core.query.structure.MqlFunctionType", "jetbrains.mps.core.query.structure.MqlImport", "jetbrains.mps.core.query.structure.MqlIntLiteral", "jetbrains.mps.core.query.structure.MqlIntType", "jetbrains.mps.core.query.structure.MqlLet", "jetbrains.mps.core.query.structure.MqlListLiteral", "jetbrains.mps.core.query.structure.MqlListType", "jetbrains.mps.core.query.structure.MqlNoContextQueryCall", "jetbrains.mps.core.query.structure.MqlNullLiteral", "jetbrains.mps.core.query.structure.MqlNullType", "jetbrains.mps.core.query.structure.MqlPackage", "jetbrains.mps.core.query.structure.MqlParameter", "jetbrains.mps.core.query.structure.MqlParameterReference", "jetbrains.mps.core.query.structure.MqlParentheses", "jetbrains.mps.core.query.structure.MqlQuery", "jetbrains.mps.core.query.structure.MqlSelector", "jetbrains.mps.core.query.structure.MqlSetLiteral", "jetbrains.mps.core.query.structure.MqlStringIndexOp", "jetbrains.mps.core.query.structure.MqlStringLiteral", "jetbrains.mps.core.query.structure.MqlStringProperty", "jetbrains.mps.core.query.structure.MqlStringType", "jetbrains.mps.core.query.structure.MqlSubstring", "jetbrains.mps.core.query.structure.MqlThis", "jetbrains.mps.core.query.structure.MqlTriplex", "jetbrains.mps.core.query.structure.MqlType", "jetbrains.mps.core.query.structure.MqlUnary", "jetbrains.mps.core.query.structure.MqlVariable", "jetbrains.mps.core.query.structure.MqlVariableReference", "jetbrains.mps.core.query.structure.SwitchExpression"};
  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"jetbrains.mps.core.query.structure.MqlCollectionConcatOp", "jetbrains.mps.core.query.structure.MqlCollectionElementOp", "jetbrains.mps.core.query.structure.MqlCollectionOneArgOp"};
}
