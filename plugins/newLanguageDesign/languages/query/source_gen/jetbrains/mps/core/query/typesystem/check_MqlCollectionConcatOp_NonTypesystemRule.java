package jetbrains.mps.core.query.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.query.behavior.MqlSelector_Behavior;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_MqlCollectionConcatOp_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_MqlCollectionConcatOp_NonTypesystemRule() {
  }

  public void applyRule(final SNode mqlConcatOp, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode operandType = SNodeOperations.as(MqlSelector_Behavior.call_getContainerType_228266671027861723(mqlConcatOp), "jetbrains.mps.core.query.structure.MqlCollectionType");
    if ((operandType == null)) {
      return;
    }

    SNode argType = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), SLinkOperations.getTarget(mqlConcatOp, "argument", true), "virtual_getType_228266671027861783", new Object[]{});
    if (!(SNodeOperations.isInstanceOf(argType, "jetbrains.mps.core.query.structure.MqlCollectionType"))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(mqlConcatOp, "argument", true), "Argument must be of collection type", "r:efe0605f-fbe2-49dd-8c71-c87a67c06b2c(jetbrains.mps.core.query.typesystem)", "5272233748014771040", null, errorTarget);
      }
      return;
    }
    if (!(SPropertyOperations.hasValue(mqlConcatOp, "kind", "1", null)) && !(SNodeOperations.isInstanceOf(operandType, "jetbrains.mps.core.query.structure.MqlOrderedSetType"))) {
      // FIXME show kind's presentation 
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent(mqlConcatOp), "jetbrains.mps.core.query.structure.MqlDotExpression"), "left", true), "Operation is applicable only to sets", "r:efe0605f-fbe2-49dd-8c71-c87a67c06b2c(jetbrains.mps.core.query.typesystem)", "5272233748014775565", null, errorTarget);
      }
    }
    if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, SLinkOperations.getTarget(SNodeOperations.cast(argType, "jetbrains.mps.core.query.structure.MqlCollectionType"), "inner", true), "virtual_isSubtypeOf_2852142168179579064", new Object[]{SLinkOperations.getTarget(operandType, "inner", true)}))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(mqlConcatOp, BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(SNodeOperations.cast(argType, "jetbrains.mps.core.query.structure.MqlCollectionType"), "inner", true), "virtual_getText_270269450479797040", new Object[]{}) + " is not subtype of " + BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(operandType, "inner", true), "virtual_getText_270269450479797040", new Object[]{}), "r:efe0605f-fbe2-49dd-8c71-c87a67c06b2c(jetbrains.mps.core.query.typesystem)", "5272233748014798829", null, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.core.query.structure.MqlCollectionConcatOp";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
