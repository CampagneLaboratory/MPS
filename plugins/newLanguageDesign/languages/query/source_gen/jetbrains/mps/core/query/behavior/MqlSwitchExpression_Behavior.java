package jetbrains.mps.core.query.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.core.query.runtime.MultipleElementsScope;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class MqlSwitchExpression_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getType_228266671027861783(SNode thisNode) {
    // TODO compute upper bound of all branch result types 
    return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "branches", true)).first(), "result", true), "virtual_getType_228266671027861783", new Object[]{});
  }

  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, SNode child) {
    if (kind == SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlSwitchAliasVar") && "branches".equals(SNodeOperations.getContainingLinkRole(child))) {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "scrutinee", true), "jetbrains.mps.core.query.structure.MqlSwitchAliasedScrutinee")) {
        List<SNode> oneVarSeq = new ArrayList<SNode>();
        ListSequence.fromList(oneVarSeq).addElement(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(thisNode, "scrutinee", true), "jetbrains.mps.core.query.structure.MqlSwitchAliasedScrutinee"), "aliasVar", true));
        return new MultipleElementsScope(oneVarSeq, new _FunctionTypes._return_P1_E0<String, SNode>() {
          public String invoke(SNode n) {
            return SPropertyOperations.getString(SNodeOperations.cast(n, "jetbrains.mps.core.query.structure.MqlSwitchAliasVar"), "name");
          }
        });
      }
    }
    return null;
  }
}
