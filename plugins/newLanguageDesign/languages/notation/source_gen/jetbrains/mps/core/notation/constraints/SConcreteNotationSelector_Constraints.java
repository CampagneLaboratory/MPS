package jetbrains.mps.core.notation.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class SConcreteNotationSelector_Constraints extends BaseConstraintsDescriptor {
  public SConcreteNotationSelector_Constraints() {
    super("jetbrains.mps.core.notation.structure.SConcreteNotationSelector");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("notation", new BaseReferenceConstraintsDescriptor("notation", this) {
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          }

          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getParameterNode(), "context", true), "jetbrains.mps.core.notation.structure.SNotationConceptContext")) {
              SNode context = SNodeOperations.cast(SLinkOperations.getTarget(_context.getParameterNode(), "context", true), "jetbrains.mps.core.notation.structure.SNotationConceptContext");
              return (isNotEmptyString(SPropertyOperations.getString(context, "id")) ?
                (SPropertyOperations.getString(SLinkOperations.getTarget(context, "element", false), "name") + "." + SPropertyOperations.getString(context, "id")) :
                SPropertyOperations.getString(SLinkOperations.getTarget(context, "element", false), "name")
              );
            } else {
              return "<not concept context in notation>";
            }
          }
        };
      }
    });
    return references;
  }

  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
