package jetbrains.mps.core.notation.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.core.notation.behavior.SNotationParentheses_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_SNotationParentheses_separator_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_SNotationParentheses_separator_NonTypesystemRule() {
  }

  public void applyRule(final SNode sNotationParentheses, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (!(SNotationParentheses_Behavior.call_isList_8294198181869890195(sNotationParentheses)) && (SLinkOperations.getTarget(sNotationParentheses, "separator", true) != null)) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(sNotationParentheses, "separator", true), "separators can be specified for lists only", "r:a890372e-633e-4844-8377-f7d3b4a35a63(jetbrains.mps.core.notation.typesystem)", "8294198181870010465", null, errorTarget);
        {
          BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("jetbrains.mps.lang.typesystem.intentions.removeSeparator_QuickFix", false);
          intentionProvider.putArgument("parens", sNotationParentheses);
          _reporter_2309309498.addIntentionProvider(intentionProvider);
        }
      }
    }

  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.core.notation.structure.SNotationParentheses";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
