package jetbrains.mps.core.notation.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.notation.util.NotationContext;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class SNotationContext_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getContextElement_8632884680339331864(SNode thisNode) {
    return null;
  }

  public static boolean virtual_isApplicable_5566195403253848024(SNode thisNode, NotationContext context) {
    return false;
  }

  @Deprecated
  public static SNode call_getContextElement_8632884680339331864(SNode thisNode) {
    return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), thisNode, "virtual_getContextElement_8632884680339331864", new Object[]{});
  }

  @Deprecated
  public static boolean call_isApplicable_5566195403253848024(SNode thisNode, NotationContext context) {
    return BehaviorReflection.invokeVirtual(Boolean.TYPE, thisNode, "virtual_isApplicable_5566195403253848024", new Object[]{context});
  }

  @Deprecated
  public static SNode callSuper_getContextElement_8632884680339331864(SNode thisNode, String callerConceptFqName) {
    return BehaviorManager.getInstance().invokeSuper((Class<SNode>) ((Class) (Object.class)), SNodeOperations.cast(thisNode, "jetbrains.mps.core.notation.structure.SNotationContext"), callerConceptFqName, "virtual_getContextElement_8632884680339331864", new Class[]{SNode.class}, new Object[]{});
  }

  @Deprecated
  public static boolean callSuper_isApplicable_5566195403253848024(SNode thisNode, String callerConceptFqName, NotationContext context) {
    return BehaviorManager.getInstance().invokeSuper(Boolean.TYPE, SNodeOperations.cast(thisNode, "jetbrains.mps.core.notation.structure.SNotationContext"), callerConceptFqName, "virtual_isApplicable_5566195403253848024", new Class[]{SNode.class, NotationContext.class}, new Object[]{context});
  }
}
