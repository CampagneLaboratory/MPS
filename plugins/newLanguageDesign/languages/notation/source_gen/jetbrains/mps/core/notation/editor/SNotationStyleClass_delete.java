package jetbrains.mps.core.notation.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;

public class SNotationStyleClass_delete {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new SNotationStyleClass_delete.SNotationStyleClass_delete_DELETE(node));
  }

  public static class SNotationStyleClass_delete_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public SNotationStyleClass_delete_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode parent = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationCorePart");
      SNodeOperations.deleteNode(node);
      if (ListSequence.fromList(SLinkOperations.getTargets(parent, "styleClass", true)).isEmpty()) {
        SelectionUtil.selectLabelCellAnSetCaret(editorContext, parent, SelectionManager.LAST_CELL, -1);
      }
    }
  }
}
