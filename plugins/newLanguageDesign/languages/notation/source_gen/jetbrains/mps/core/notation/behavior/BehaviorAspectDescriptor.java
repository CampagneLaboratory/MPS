package jetbrains.mps.core.notation.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;

public class BehaviorAspectDescriptor implements jetbrains.mps.smodel.runtime.BehaviorAspectDescriptor {
  public BehaviorAspectDescriptor() {
  }

  public BehaviorDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0b, fqName)) {
      case 6:
        return new SNotation_BehaviorDescriptor();
      case 11:
        return new SNotationLabel_BehaviorDescriptor();
      case 15:
        return new SNotationParentheses_BehaviorDescriptor();
      case 13:
        return new SNotationNewLine_BehaviorDescriptor();
      case 16:
        return new SNotationPartList_BehaviorDescriptor();
      case 12:
        return new SNotationMapping_BehaviorDescriptor();
      case 18:
        return new SNotationQuantifier_BehaviorDescriptor();
      case 32:
        return new SStructureLinkRef_BehaviorDescriptor();
      case 33:
        return new SStructurePropertyRef_BehaviorDescriptor();
      case 14:
        return new SNotationNospace_BehaviorDescriptor();
      case 24:
        return new SNotationStyleIndent_BehaviorDescriptor();
      case 8:
        return new SNotationCall_BehaviorDescriptor();
      case 27:
        return new SNotationTab_BehaviorDescriptor();
      case 7:
        return new SNotationBreak_BehaviorDescriptor();
      case 31:
        return new SNotationUnorderedGroup_BehaviorDescriptor();
      case 9:
        return new SNotationConceptContext_BehaviorDescriptor();
      case 17:
        return new SNotationPredicate_BehaviorDescriptor();
      case 26:
        return new SNotationStylesImport_BehaviorDescriptor();
      case 19:
        return new SNotationStyle_BehaviorDescriptor();
      case 25:
        return new SNotationStyleSelector_BehaviorDescriptor();
      case 0:
        return new SAllNotationsSelector_BehaviorDescriptor();
      case 1:
        return new SAllTermsSelector_BehaviorDescriptor();
      case 23:
        return new SNotationStyleEmptyLine_BehaviorDescriptor();
      case 2:
        return new SConceptNotationSelector_BehaviorDescriptor();
      case 3:
        return new SConcreteNotationSelector_BehaviorDescriptor();
      case 29:
        return new SNotationTermTextSelector_BehaviorDescriptor();
      case 28:
        return new SNotationTermClassSelector_BehaviorDescriptor();
      case 21:
        return new SNotationStyleColor_BehaviorDescriptor();
      case 22:
        return new SNotationStyleContent_BehaviorDescriptor();
      case 20:
        return new SNotationStyleClass_BehaviorDescriptor();
      case 10:
        return new SNotationEnumContext_BehaviorDescriptor();
      case 4:
        return new SEnumLiteralEntityRef_BehaviorDescriptor();
      case 34:
        return new SToken_BehaviorDescriptor();
      case 36:
        return new STokenDataType_BehaviorDescriptor();
      case 35:
        return new STokenConceptType_BehaviorDescriptor();
      case 5:
        return new SNamedPattern_BehaviorDescriptor();
      case 30:
        return new SNotationTokenRef_BehaviorDescriptor();
      default:
        return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
    }
  }

  private static String[] stringSwitchCases_846f5o_a0a0b = new String[]{"jetbrains.mps.core.notation.structure.SAllNotationsSelector", "jetbrains.mps.core.notation.structure.SAllTermsSelector", "jetbrains.mps.core.notation.structure.SConceptNotationSelector", "jetbrains.mps.core.notation.structure.SConcreteNotationSelector", "jetbrains.mps.core.notation.structure.SEnumLiteralEntityRef", "jetbrains.mps.core.notation.structure.SNamedPattern", "jetbrains.mps.core.notation.structure.SNotation", "jetbrains.mps.core.notation.structure.SNotationBreak", "jetbrains.mps.core.notation.structure.SNotationCall", "jetbrains.mps.core.notation.structure.SNotationConceptContext", "jetbrains.mps.core.notation.structure.SNotationEnumContext", "jetbrains.mps.core.notation.structure.SNotationLabel", "jetbrains.mps.core.notation.structure.SNotationMapping", "jetbrains.mps.core.notation.structure.SNotationNewLine", "jetbrains.mps.core.notation.structure.SNotationNospace", "jetbrains.mps.core.notation.structure.SNotationParentheses", "jetbrains.mps.core.notation.structure.SNotationPartList", "jetbrains.mps.core.notation.structure.SNotationPredicate", "jetbrains.mps.core.notation.structure.SNotationQuantifier", "jetbrains.mps.core.notation.structure.SNotationStyle", "jetbrains.mps.core.notation.structure.SNotationStyleClass", "jetbrains.mps.core.notation.structure.SNotationStyleColor", "jetbrains.mps.core.notation.structure.SNotationStyleContent", "jetbrains.mps.core.notation.structure.SNotationStyleEmptyLine", "jetbrains.mps.core.notation.structure.SNotationStyleIndent", "jetbrains.mps.core.notation.structure.SNotationStyleSelector", "jetbrains.mps.core.notation.structure.SNotationStylesImport", "jetbrains.mps.core.notation.structure.SNotationTab", "jetbrains.mps.core.notation.structure.SNotationTermClassSelector", "jetbrains.mps.core.notation.structure.SNotationTermTextSelector", "jetbrains.mps.core.notation.structure.SNotationTokenRef", "jetbrains.mps.core.notation.structure.SNotationUnorderedGroup", "jetbrains.mps.core.notation.structure.SStructureLinkRef", "jetbrains.mps.core.notation.structure.SStructurePropertyRef", "jetbrains.mps.core.notation.structure.SToken", "jetbrains.mps.core.notation.structure.STokenConceptType", "jetbrains.mps.core.notation.structure.STokenDataType"};
}
