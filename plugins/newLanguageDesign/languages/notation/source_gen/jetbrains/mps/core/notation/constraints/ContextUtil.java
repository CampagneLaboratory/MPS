package jetbrains.mps.core.notation.constraints;

/*Generated by MPS */

import jetbrains.mps.core.notation.util.NotationContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class ContextUtil {
  public ContextUtil() {
  }

  public static NotationContext getContext(SNode node, String role) {
    while (node != null && !(SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.notation.structure.SNotationContextProvider"))) {
      role = SNodeOperations.getContainingLinkRole(node);
      node = SNodeOperations.getParent(node);
    }
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.notation.structure.SNotationMapping") && !("presentation".equals(role))) {
      node = SNodeOperations.getParent(node);
    }
    return (node != null ? BehaviorReflection.invokeVirtual(NotationContext.class, SNodeOperations.cast(node, "jetbrains.mps.core.notation.structure.SNotationContextProvider"), "virtual_getContext_8632884680339357870", new Object[]{}) : null);
  }
}
