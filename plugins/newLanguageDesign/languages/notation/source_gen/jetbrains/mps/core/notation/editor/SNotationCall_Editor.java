package jetbrains.mps.core.notation.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.core.notation.util.NotationContext;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.EmptyCellAction;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.core.notation.behavior.SNotationCall_Behavior;

public class SNotationCall_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_401fjg_a(editorContext, node);
  }

  private EditorCell createCollection_401fjg_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_401fjg_a");
    editorCell.setBig(true);
    if (renderingCondition_401fjg_a0a(node, editorContext)) {
      editorCell.addEditorCell(this.createReadOnlyModelAccessor_401fjg_a0(editorContext, node));
    }
    return editorCell;
  }

  private EditorCell createReadOnlyModelAccessor_401fjg_a0(final EditorContext editorContext, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
      public String getText() {
        NotationContext context = BehaviorReflection.invokeVirtual(NotationContext.class, node, "virtual_getContext_8632884680339357870", new Object[]{});
        SNode cnode = (context != null ? context.getNode() : null);
        String idSuffix = ((node != null) && SPropertyOperations.getString(node, "id") != null ? "." + SPropertyOperations.getString(node, "id") : "");
        return ((SNodeOperations.isInstanceOf(cnode, "jetbrains.mps.lang.core.structure.INamedConcept") ? SPropertyOperations.getString(SNodeOperations.cast(cnode, "jetbrains.mps.lang.core.structure.INamedConcept"), "name") : "<unknown>")) + idSuffix;
      }

      public void setText(String s) {
      }

      public boolean isValidText(String s) {
        return EqualUtil.equals(s, getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
    editorCell.setCellId("ReadOnlyModelAccessor_401fjg_a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.TEXT_COLOR, StyleRegistry.getInstance().getSimpleColor(MPSColors.blue));
    style.set(StyleAttributes.NAVIGATABLE_NODE, SNotationCall_Editor._StyleParameter_QueryFunction_401fjg_a1a0((editorCell == null ? null : editorCell.getContext()), (editorCell == null ? null : editorCell.getSNode())));
    editorCell.getStyle().putAll(style);
    return editorCell;
  }

  private static SNode _StyleParameter_QueryFunction_401fjg_a1a0(EditorContext editorContext, SNode node) {
    return SNotationCall_Behavior.call_resolve_5566195403253919806(node);
  }

  private static boolean renderingCondition_401fjg_a0a(SNode node, EditorContext editorContext) {
    SNotationCall_Behavior.call_resolve_5566195403253919806(node);
    return true;
  }
}
