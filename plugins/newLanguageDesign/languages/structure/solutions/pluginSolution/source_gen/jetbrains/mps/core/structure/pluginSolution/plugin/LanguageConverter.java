package jetbrains.mps.core.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.Language;
import jetbrains.mps.messages.IMessageHandler;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.messages.Message;
import jetbrains.mps.messages.MessageKind;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.core.structure.util.ConceptUtil;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.apache.log4j.Priority;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.structure.behavior.EnumerationMemberDeclaration_Behavior;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.structure.behavior.PrimitiveDataTypeDeclaration_Behavior;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class LanguageConverter {
  private Language language;
  private IMessageHandler handler;
  private List<_FunctionTypes._void_P0_E0> later;
  private Map<SNode, SNode> map;

  public LanguageConverter(Language language, IMessageHandler handler) {
    this.language = language;
    this.handler = handler;
    this.later = ListSequence.fromList(new ArrayList<_FunctionTypes._void_P0_E0>());
    this.map = MapSequence.fromMap(new HashMap<SNode, SNode>());
  }

  public SNode convert() {
    SNode result = convertStructure(LanguageAspect.STRUCTURE.get(language));
    ListSequence.fromList(later).visitAll(new IVisitor<_FunctionTypes._void_P0_E0>() {
      public void visit(_FunctionTypes._void_P0_E0 it) {
        it.invoke();
      }
    });
    return result;
  }

  private void error(String text) {
    handler.handle(new Message(MessageKind.ERROR, text));
  }

  private void later(_FunctionTypes._void_P0_E0 v) {
    ListSequence.fromList(later).addElement(v);
  }

  private SNode resolve(SNode concept, SNode target) {
    if (target == null) {
      return null;
    }

    SNode mapped = MapSequence.fromMap(map).get(target);
    if (mapped != null) {
      if (!(SNodeOperations.isInstanceOf(mapped, NameUtil.nodeFQName(concept)))) {
        error("target element of `" + target.getPresentation() + "' is not sub-concept of " + NameUtil.nodeFQName(concept));
        return null;
      }
      return mapped;
    }

    if (SNodeOperations.getModel(target).getModule() == language) {
      error("broken local reference: " + target.getPresentation());
      return null;
    }

    if (SConceptOperations.isSubConceptOf(concept, "jetbrains.mps.core.structure.structure.SAbstractConcept")) {
      if (!(SNodeOperations.isInstanceOf(target, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))) {
        error("AbstractConceptDeclaration is expected: " + target.getConcept().getQualifiedName());
        return null;
      }

      SNode conceptByQualifiedName = ConceptUtil.getConceptByQualifiedName(NameUtil.nodeFQName(target));
      if ((conceptByQualifiedName == null)) {
        error("cannot resolve concept `" + NameUtil.nodeFQName(target) + "'");
      }
      return conceptByQualifiedName;
    }

    if (SConceptOperations.isSubConceptOf(concept, "jetbrains.mps.core.structure.structure.SEnumeration")) {
      if (!(SNodeOperations.isInstanceOf(target, "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration"))) {
        error("EnumerationDataTypeDeclaration is expected: " + target.getConcept().getQualifiedName());
        return null;
      }

      SNode enumByQualifiedName = ConceptUtil.getEnumByQualifiedName(NameUtil.nodeFQName(target));
      if ((enumByQualifiedName == null)) {
        error("cannot resolve enum `" + NameUtil.nodeFQName(target) + "'");
      }
      return enumByQualifiedName;
    }

    error("cannot resolve: " + NameUtil.nodeFQName(concept));
    return null;
  }

  private SNode convertStructure(SModel structureModel) {
    SNode container = _quotation_createNode_hm9xms_a0a0j(SPropertyOperations.getString(SModelOperations.getModuleStub(structureModel), "name"));

    List<SNode> structureElements = ListSequence.fromList(new ArrayList());
    for (SNode root : ListSequence.fromList(SModelOperations.getRoots(structureModel, null)).sort(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return (SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.core.structure.INamedConcept") ? SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.lang.core.structure.INamedConcept"), "name") : SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(it), "name"));
      }
    }, true)) {
      if (SNodeOperations.isInstanceOf(root, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
        ListSequence.fromList(structureElements).addElement(convertConcreteConcept((SNode) root));
      } else if (SNodeOperations.isInstanceOf(root, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration")) {
        ListSequence.fromList(structureElements).addElement(convertInterfaceConcept((SNode) root));
      } else if (SNodeOperations.isInstanceOf(root, "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration")) {
        ListSequence.fromList(structureElements).addElement(convertEnumeration((SNode) root));
      } else {
        if (LOG.isEnabledFor(Priority.WARN)) {
          LOG.warn("Strange root in structure model with concept " + BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getConceptDeclaration(root), "virtual_getFqName_1213877404258", new Object[]{}));
        }
      }
    }

    ListSequence.fromList(SNodeOperations.getChildren(container, SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SStructureContainer", "structure"))).addSequence(Sequence.fromIterable((Iterable<SNode>) join(structureElements, SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SStructureEmptyLine", null))));

    return container;
  }

  private SNode convertConcreteConcept(final SNode concept) {
    final SNode result = SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SConcept", null);
    MapSequence.fromMap(map).put(concept, result);
    updateAbstractConceptDeclarationFields(concept, result);
    SPropertyOperations.set(result, "isAbstract", "" + (SPropertyOperations.getBoolean(concept, "abstract")));
    SPropertyOperations.set(result, "isFinal", "" + (SPropertyOperations.getBoolean(concept, "final")));
    SPropertyOperations.set(result, "canBeRoot", "" + (SPropertyOperations.getBoolean(concept, "rootable")));
    for (final SNode implementedConcepts : SLinkOperations.getTargets(concept, "implements", true)) {
      final SNode ref = SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SInterfaceReference", null);
      later(new _FunctionTypes._void_P0_E0() {
        public void invoke() {
          SLinkOperations.setTarget(ref, "target", SNodeOperations.as(resolve(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.structure.SInterfaceConcept"), SLinkOperations.getTarget(implementedConcepts, "intfc", false)), "jetbrains.mps.core.structure.structure.SInterfaceConcept"), false);
        }
      });
      SNodeOperations.getChildren(result, SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SConcept", "implements")).add(ref);
    }
    if ((SLinkOperations.getTarget(concept, "extends", false) != null) && !(SLinkOperations.getTarget(concept, "extends", false) == SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "1133920641626"))) {
      later(new _FunctionTypes._void_P0_E0() {
        public void invoke() {
          SLinkOperations.setTarget(result, "extends", SNodeOperations.as(resolve(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.structure.SConcept"), SLinkOperations.getTarget(concept, "extends", false)), "jetbrains.mps.core.structure.structure.SConcept"), false);
        }
      });
    }
    if (isNotEmptyString(SPropertyOperations.getString(concept, "conceptAlias"))) {
      ListSequence.fromList(SLinkOperations.getTargets(result, "annotations", true)).addElement(_quotation_createNode_hm9xms_a0a0a8a01(SPropertyOperations.getString(concept, "conceptAlias")));
    }
    if (isNotEmptyString(SPropertyOperations.getString(concept, "conceptShortDescription"))) {
      ListSequence.fromList(SLinkOperations.getTargets(result, "annotations", true)).addElement(_quotation_createNode_hm9xms_a0a0a9a01(SPropertyOperations.getString(concept, "conceptShortDescription")));
    }
    return result;
  }

  public SNode convertInterfaceConcept(SNode concept) {
    SNode result = SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SInterfaceConcept", null);
    MapSequence.fromMap(map).put(concept, result);
    updateAbstractConceptDeclarationFields(concept, result);
    for (final SNode extendsConcept : SLinkOperations.getTargets(concept, "extends", true)) {
      final SNode ref = SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SInterfaceReference", null);
      later(new _FunctionTypes._void_P0_E0() {
        public void invoke() {
          SLinkOperations.setTarget(ref, "target", SNodeOperations.as(resolve(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.structure.SInterfaceConcept"), SLinkOperations.getTarget(extendsConcept, "intfc", false)), "jetbrains.mps.core.structure.structure.SInterfaceConcept"), false);
        }
      });
      SNodeOperations.getChildren(result, SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SInterfaceConcept", "extends")).add(ref);
    }
    return result;
  }

  public SNode convertEnumeration(SNode enumeration) {
    SNode result = _quotation_createNode_hm9xms_a0a0m(SPropertyOperations.getString(enumeration, "name"));
    MapSequence.fromMap(map).put(enumeration, result);
    for (SNode member : ListSequence.fromList(SLinkOperations.getTargets(enumeration, "member", true))) {
      SNode node = _quotation_createNode_hm9xms_a0a0c0m(EnumerationMemberDeclaration_Behavior.call_getConstantName_1240164579791(member));
      ListSequence.fromList(SLinkOperations.getTargets(result, "members", true)).addElement(node);
      if (SLinkOperations.getTarget(enumeration, "defaultMember", false) == member) {
        SLinkOperations.setTarget(result, "default", node, false);
      }
    }
    return result;
  }

  public SNode convertLinkDeclaration(final SNode linkNode) {
    final Wrappers._T<SNode> link = new Wrappers._T<SNode>(null);
    if (SPropertyOperations.hasValue(linkNode, "metaClass", "reference", "reference")) {
      link.value = SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SReference", null);
    } else if (SPropertyOperations.hasValue(linkNode, "metaClass", "aggregation", "reference")) {
      link.value = SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SChildLink", null);
    }
    MapSequence.fromMap(map).put(linkNode, link.value);
    SPropertyOperations.set(link.value, "name", SPropertyOperations.getString(linkNode, "role"));
    later(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        SLinkOperations.setTarget(link.value, "target", SNodeOperations.as(resolve(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept"), SLinkOperations.getTarget(linkNode, "target", false)), "jetbrains.mps.core.structure.structure.SAbstractConcept"), false);
      }
    });

    SLinkOperations.setTarget(link.value, "cardinality", SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SCardinality", null), true);
    SPropertyOperations.set(SLinkOperations.getTarget(link.value, "cardinality", true), "isRequired", "" + ((SPropertyOperations.hasValue(linkNode, "sourceCardinality", "1", "0..1") || SPropertyOperations.hasValue(linkNode, "sourceCardinality", "1..n", "0..1"))));
    SPropertyOperations.set(SLinkOperations.getTarget(link.value, "cardinality", true), "isMultiple", "" + ((SPropertyOperations.hasValue(linkNode, "sourceCardinality", "0..n", "0..1") || SPropertyOperations.hasValue(linkNode, "sourceCardinality", "1..n", "0..1"))));
    return link.value;
  }

  public void updateAbstractConceptDeclarationFields(SNode source, SNode destination) {
    // name 
    SPropertyOperations.set(destination, "name", SPropertyOperations.getString(source, "name"));

    // properties 
    List<SNode> properties = new ArrayList<SNode>();
    for (SNode property : SLinkOperations.getTargets(source, "propertyDeclaration", true)) {
      properties.add(convertProperty(property));
    }
    if (ListSequence.fromList(properties).isNotEmpty()) {
      ListSequence.fromList(SNodeOperations.getChildren(destination, SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept", "members"))).addSequence(ListSequence.fromList(properties));
      ListSequence.fromList(SNodeOperations.getChildren(destination, SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept", "members"))).addElement(SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SConceptMemberEmptyLine", null));
    }

    // refs and children 
    Iterable<SNode> links = ListSequence.fromList(SLinkOperations.getTargets(source, "linkDeclaration", true)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return convertLinkDeclaration(it);
      }
    });
    if (Sequence.fromIterable(links).isNotEmpty()) {
      ListSequence.fromList(SNodeOperations.getChildren(destination, SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept", "members"))).addSequence(Sequence.fromIterable(links));
      ListSequence.fromList(SNodeOperations.getChildren(destination, SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept", "members"))).addElement(SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SConceptMemberEmptyLine", null));
    }

    removeLastChild(destination);
  }

  public SNode convertEnumerationDataType(final SNode typeDeclaration) {
    final SNode result = createSEnumerationDataType_hm9xms_a0a0p();
    later(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        SLinkOperations.setTarget(result, "enum", SNodeOperations.as(resolve(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.structure.SEnumeration"), typeDeclaration), "jetbrains.mps.core.structure.structure.SEnumeration"), false);
      }
    });
    return result;
  }

  public SNode convertConstrainedDataType(SNode typeDeclaration) {
    // todo 
    return _quotation_createNode_hm9xms_a1a61();
  }

  public SNode convertPrimitivePropertyType(SNode typeDeclaration) {
    if (PrimitiveDataTypeDeclaration_Behavior.call_isString_1220268752134(typeDeclaration)) {
      return _quotation_createNode_hm9xms_a0a0a71();
    } else if (PrimitiveDataTypeDeclaration_Behavior.call_isInteger_1220268780075(typeDeclaration)) {
      return _quotation_createNode_hm9xms_a0a0a0r();
    } else if (PrimitiveDataTypeDeclaration_Behavior.call_isBoolean_1220268791641(typeDeclaration)) {
      return _quotation_createNode_hm9xms_a0a1a0r();
    } else {
      return null;
    }
  }

  public SNode convertPropertyType(SNode typeDeclaration) {
    if (SNodeOperations.isInstanceOf(typeDeclaration, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration")) {
      return convertPrimitivePropertyType((SNode) typeDeclaration);
    } else if (SNodeOperations.isInstanceOf(typeDeclaration, "jetbrains.mps.lang.structure.structure.ConstrainedDataTypeDeclaration")) {
      return convertConstrainedDataType((SNode) typeDeclaration);
    } else if (SNodeOperations.isInstanceOf(typeDeclaration, "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration")) {
      return convertEnumerationDataType((SNode) typeDeclaration);
    }
    return null;
  }

  public SNode convertProperty(SNode property) {
    SNode result = _quotation_createNode_hm9xms_a0a0t(convertPropertyType(SLinkOperations.getTarget(property, "dataType", false)), SPropertyOperations.getString(property, "name"));
    MapSequence.fromMap(map).put(property, result);
    return result;
  }

  public static Iterable<SNode> join(Iterable<SNode> source, SNode separator) {
    if (Sequence.fromIterable(source).isEmpty()) {
      return ListSequence.fromList(new ArrayList<SNode>());
    }
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    boolean isFirst = true;
    for (SNode node : source) {
      if (isFirst) {
        isFirst = false;
      } else {
        ListSequence.fromList(result).addElement(SNodeOperations.copyNode(separator));
      }
      ListSequence.fromList(result).addElement(node);
    }
    return result;
  }

  public static void removeLastChild(SNode node) {
    if (SNodeOperations.getChildren(node).isEmpty()) {
      return;
    }
    SNodeOperations.deleteNode(SNodeOperations.getChildren(node).get(SNodeOperations.getChildren(node).size() - 1));
  }

  protected static Logger LOG = LogManager.getLogger(LanguageConverter.class);

  private static SNode _quotation_createNode_hm9xms_a0a0j(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.structure.structure.SStructureContainer", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "name", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_hm9xms_a0a0a8a01(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.metadata.structure.SConceptAnnotationInstance", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReference("type", SReference.create("type", quotedNode_2, facade.createModelReference("r:7828b85a-5771-4321-a557-44fc5258c152(jetbrains.mps.core.stubs)"), facade.createNodeId("2024350793557759556")));
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.metadata.structure.SConceptAnnotationArgument", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_3, "name", "text");
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.query.structure.MqlStringLiteral", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_4, "value", (String) parameter_1);
    quotedNode_3.addChild("value", quotedNode_4);
    quotedNode_2.addChild("arguments", quotedNode_3);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_hm9xms_a0a0a9a01(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.metadata.structure.SConceptAnnotationInstance", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReference("type", SReference.create("type", quotedNode_2, facade.createModelReference("r:7828b85a-5771-4321-a557-44fc5258c152(jetbrains.mps.core.stubs)"), facade.createNodeId("2024350793557759920")));
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.metadata.structure.SConceptAnnotationArgument", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_3, "name", "text");
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.query.structure.MqlStringLiteral", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_4, "value", (String) parameter_1);
    quotedNode_3.addChild("value", quotedNode_4);
    quotedNode_2.addChild("arguments", quotedNode_3);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_hm9xms_a0a0m(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.structure.structure.SEnumeration", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "name", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_hm9xms_a0a0c0m(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.structure.structure.SEnumerationMember", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "name", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode createSEnumerationDataType_hm9xms_a0a0p() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.structure.structure.SEnumerationDataType", null, GlobalScope.getInstance(), false);
    return n1;
  }

  private static SNode _quotation_createNode_hm9xms_a1a61() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.structure.structure.SPrimitiveDataType", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_1, "kind", "string");
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_hm9xms_a0a0a71() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.structure.structure.SPrimitiveDataType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_hm9xms_a0a0a0r() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.structure.structure.SPrimitiveDataType", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_1, "kind", "int");
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_hm9xms_a0a1a0r() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.structure.structure.SPrimitiveDataType", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_1, "kind", "bool");
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_hm9xms_a0a0t(Object parameter_1, Object parameter_2) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.structure.structure.SProperty", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_3, "name", (String) parameter_2);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_3.addChild("type", HUtil.copyIfNecessary(quotedNode_4));
    }
    return quotedNode_3;
  }

  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
