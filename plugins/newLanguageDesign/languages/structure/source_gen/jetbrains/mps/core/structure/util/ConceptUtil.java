package jetbrains.mps.core.structure.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Set;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import java.util.HashSet;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class ConceptUtil {
  public ConceptUtil() {
  }

  public static SNode getBaseConcept() {
    return ListSequence.fromList(SModelOperations.getNodes(SModelRepository.getInstance().getModelDescriptor(new SModelReference("jetbrains.mps.core.stubs", "")), "jetbrains.mps.core.structure.structure.SConcept")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return "BaseConcept".equals(SPropertyOperations.getString(it, "name"));
      }
    }).first();
  }

  private static SNode getNearestSuperConcept(SNode concept, Set<SNode> superConcepts) {
    Iterable<SNode> interfaces;
    if (SNodeOperations.isInstanceOf(concept, "jetbrains.mps.core.structure.structure.SConcept")) {
      interfaces = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(concept, "jetbrains.mps.core.structure.structure.SConcept"), "implements", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (SLinkOperations.getTarget(it, "target", false) != null);
        }
      }).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SLinkOperations.getTarget(it, "target", false);
        }
      });
      SNode ext = SLinkOperations.getTarget(SNodeOperations.cast(concept, "jetbrains.mps.core.structure.structure.SConcept"), "extends", false);
      while (ext != null) {
        if (SetSequence.fromSet(superConcepts).contains(ext)) {
          return ext;
        }
        interfaces = Sequence.fromIterable(interfaces).concat(ListSequence.fromList(SLinkOperations.getTargets(ext, "implements", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (SLinkOperations.getTarget(it, "target", false) != null);
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, "target", false);
          }
        }));
        ext = SLinkOperations.getTarget(ext, "extends", false);
      }
    } else if (SNodeOperations.isInstanceOf(concept, "jetbrains.mps.core.structure.structure.SInterfaceConcept")) {
      interfaces = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(concept, "jetbrains.mps.core.structure.structure.SInterfaceConcept"), "extends", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (SLinkOperations.getTarget(it, "target", false) != null);
        }
      }).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SLinkOperations.getTarget(it, "target", false);
        }
      });
    } else {
      interfaces = Sequence.fromIterable(Collections.<SNode>emptyList());
    }
    for (SNode i : Sequence.fromIterable(interfaces)) {
      if (SetSequence.fromSet(superConcepts).contains(i)) {
        return i;
      }
    }
    // TODO handle indirect interfaces 
    return SetSequence.fromSet(superConcepts).first();
  }

  public static SNode getNearestConcept(SNode concept, Iterable<SNode> superConcepts) {
    Set<SNode> sset = SetSequence.fromSetWithValues(new HashSet<SNode>(), superConcepts);
    if (SetSequence.fromSet(sset).contains(concept)) {
      return concept;
    }
    return getNearestSuperConcept(concept, sset);
  }

  public static SNode getConceptByQualifiedName(String qualifiedName) {
    if (qualifiedName == null) {
      return null;
    }
    final String language = NameUtil.namespaceFromConceptFQName(qualifiedName);
    final String name = NameUtil.shortNameFromLongName(qualifiedName);
    SModel mdesc = SModelRepository.getInstance().getModelDescriptor(language + ".core");
    if (mdesc == null) {
      // for packaged language, try stubs 
      mdesc = SModelRepository.getInstance().getModelDescriptor("jetbrains.mps.core.stubs");
      if (mdesc == null) {
        return null;
      }

      SNode root = ListSequence.fromList(SModelOperations.getRoots(((SModel) mdesc), "jetbrains.mps.core.structure.structure.SStructureContainer")).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return eq_ensxth_a0a0a0a0a0a4a4a4(SPropertyOperations.getString(it, "name"), language);
        }
      });
      if ((root == null)) {
        return null;
      }

      return SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(root, "structure", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "jetbrains.mps.core.structure.structure.SAbstractConcept") && SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.core.structure.structure.SAbstractConcept"), "name").equals(name);
        }
      }).first(), "jetbrains.mps.core.structure.structure.SAbstractConcept");
    }
    SModel sModel = mdesc;
    return SNodeOperations.as(ListSequence.fromList(SModelOperations.getRoots(sModel, "jetbrains.mps.core.structure.structure.SStructureContainer")).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(it, "structure", true);
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.core.structure.structure.SAbstractConcept") && SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.core.structure.structure.SAbstractConcept"), "name").equals(name);
      }
    }).first(), "jetbrains.mps.core.structure.structure.SAbstractConcept");
  }

  public static SNode getEnumByQualifiedName(String qualifiedName) {
    if (qualifiedName == null) {
      return null;
    }
    final String language = NameUtil.namespaceFromConceptFQName(qualifiedName);
    final String name = NameUtil.shortNameFromLongName(qualifiedName);
    SModel mdesc = SModelRepository.getInstance().getModelDescriptor(language + ".core");
    if (mdesc == null) {
      // for packaged language, try stubs 
      mdesc = SModelRepository.getInstance().getModelDescriptor("jetbrains.mps.core.stubs");
      if (mdesc == null) {
        return null;
      }

      SNode root = ListSequence.fromList(SModelOperations.getRoots(((SModel) mdesc), "jetbrains.mps.core.structure.structure.SStructureContainer")).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return eq_ensxth_a0a0a0a0a0a4a4a5(SPropertyOperations.getString(it, "name"), language);
        }
      });
      if ((root == null)) {
        return null;
      }

      return SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(root, "structure", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "jetbrains.mps.core.structure.structure.SEnumeration") && SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.core.structure.structure.SEnumeration"), "name").equals(name);
        }
      }).first(), "jetbrains.mps.core.structure.structure.SEnumeration");
    }
    SModel sModel = mdesc;
    return SNodeOperations.as(ListSequence.fromList(SModelOperations.getRoots(sModel, "jetbrains.mps.core.structure.structure.SStructureContainer")).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(it, "structure", true);
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.core.structure.structure.SEnumeration") && SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.core.structure.structure.SEnumeration"), "name").equals(name);
      }
    }).first(), "jetbrains.mps.core.structure.structure.SEnumeration");
  }

  public static <T> T traverse(SNode node, final _FunctionTypes._return_P2_E0<? extends T, ? super SNode, ? super Iterable<T>> handler) {
    Iterable<T> inherited = Sequence.fromIterable(Collections.<T>emptyList());
    Iterable<SNode> interfaces;
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.structure.structure.SConcept")) {
      SNode superConcept;
      if ((SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.core.structure.structure.SConcept"), "extends", false) != null)) {
        inherited = Sequence.<T>singleton(traverse(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.core.structure.structure.SConcept"), "extends", false), handler));
      } else {
        inherited = Sequence.<T>singleton(handler.invoke(ConceptUtil.getBaseConcept(), Sequence.fromIterable(Collections.<T>emptyList())));
      }
      interfaces = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.core.structure.structure.SConcept"), "implements", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (SLinkOperations.getTarget(it, "target", false) != null);
        }
      }).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SLinkOperations.getTarget(it, "target", false);
        }
      });

    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.structure.structure.SInterfaceConcept")) {
      interfaces = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(node, "jetbrains.mps.core.structure.structure.SInterfaceConcept"), "extends", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (SLinkOperations.getTarget(it, "target", false) != null);
        }
      }).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SLinkOperations.getTarget(it, "target", false);
        }
      });
      if (Sequence.fromIterable(interfaces).isEmpty()) {
        // leaf: we won't traverse further 
        inherited = Sequence.<T>singleton(handler.invoke(ConceptUtil.getBaseConcept(), Sequence.fromIterable(Collections.<T>emptyList())));
      }

    } else {
      interfaces = Sequence.fromIterable(Collections.<SNode>emptyList());
    }
    inherited = Sequence.fromIterable(inherited).concat(Sequence.fromIterable(interfaces).select(new ISelector<SNode, T>() {
      public T select(SNode it) {
        return traverse(it, handler);
      }
    }));
    return handler.invoke(node, Sequence.fromIterable(inherited).where(new IWhereFilter<T>() {
      public boolean accept(T it) {
        return it != null;
      }
    }));
  }



  public static Iterable<SNode> getAvailableProperties(SNode forConcept) {
    return ConceptUtil.traverse(forConcept, new _FunctionTypes._return_P2_E0<List<SNode>, SNode, Iterable<Iterable<SNode>>>() {
      public List<SNode> invoke(SNode concept, Iterable<Iterable<SNode>> inherited) {
        final List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
        Sequence.fromIterable(inherited).visitAll(new IVisitor<Iterable<SNode>>() {
          public void visit(Iterable<SNode> it) {
            ListSequence.fromList(result).addSequence(Sequence.fromIterable(it));
          }
        });
        ListSequence.fromList(result).addSequence(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(concept, "members", true), "jetbrains.mps.core.structure.structure.SProperty")));
        return result;
      }
    });
  }

  public static Iterable<SNode> getAvailableLinks(SNode forConcept) {
    return ConceptUtil.traverse(forConcept, new _FunctionTypes._return_P2_E0<List<SNode>, SNode, Iterable<Iterable<SNode>>>() {
      public List<SNode> invoke(SNode concept, Iterable<Iterable<SNode>> inherited) {
        final List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
        Sequence.fromIterable(inherited).visitAll(new IVisitor<Iterable<SNode>>() {
          public void visit(Iterable<SNode> it) {
            ListSequence.fromList(result).addSequence(Sequence.fromIterable(it));
          }
        });
        ListSequence.fromList(result).addSequence(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(concept, "members", true), "jetbrains.mps.core.structure.structure.SAbstractLink")));
        return result;
      }
    });
  }



  private static boolean eq_ensxth_a0a0a0a0a0a4a4a4(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_ensxth_a0a0a0a0a0a4a4a5(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
