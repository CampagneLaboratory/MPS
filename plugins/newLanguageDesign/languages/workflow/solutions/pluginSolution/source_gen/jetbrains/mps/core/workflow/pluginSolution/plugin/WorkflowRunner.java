package jetbrains.mps.core.workflow.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.messages.IMessageHandler;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.messages.MessageKind;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.query.runtime.EvaluationEnvironment;
import jetbrains.mps.core.query.runtime.EvaluationContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.core.query.runtime.EvaluationException;
import jetbrains.mps.messages.Message;
import java.lang.reflect.InvocationTargetException;

public class WorkflowRunner {
  private IMessageHandler handler;
  private SModule contextModule;

  public WorkflowRunner(IMessageHandler handler, SModule contextModule) {
    this.handler = handler;
    this.contextModule = contextModule;
    this.handler.clear();
  }

  public void run(SNode executable) {
    report(MessageKind.INFORMATION, "started: " + SPropertyOperations.getString(executable, "name"), null);
    EvaluationEnvironment env = new EvaluationEnvironment() {
      @Override
      public void report(int kind, String message, SNode hintNode) {
        WorkflowRunner.this.report((kind == EvaluationEnvironment.KIND_ERR ? MessageKind.ERROR : MessageKind.WARNING), message, hintNode);
      }
    };
    EvaluationContext rootContext = new EvaluationContext(null, null);
    for (SNode st : SLinkOperations.getTargets(executable, "statements", true)) {
      if (SNodeOperations.isInstanceOf(st, "jetbrains.mps.core.workflow.structure.WflowExpressionStatement")) {
        try {
          SNode exprst = SNodeOperations.cast(st, "jetbrains.mps.core.workflow.structure.WflowExpressionStatement");
          Object result = BehaviorReflection.invokeVirtual(Object.class, SLinkOperations.getTarget(exprst, "expression", true), "virtual_evaluate_1671449901154581105", new Object[]{env, rootContext.subContext()});
          rootContext.setValue(SPropertyOperations.getString(SLinkOperations.getTarget(exprst, "var", true), "name"), result);
          String asString = env.getRuntime().objectDebugText(result);
          report(MessageKind.INFORMATION, SPropertyOperations.getString(SLinkOperations.getTarget(exprst, "var", true), "name") + " = " + asString, null);

        } catch (Exception ex) {
          Throwable thr = unwrap(ex);
          report(MessageKind.ERROR, thr.toString(), (thr instanceof EvaluationException ? ((EvaluationException) thr).getQuery() : null));
        }
      } else if (SNodeOperations.isInstanceOf(st, "jetbrains.mps.core.workflow.structure.WflowAssert")) {
        try {
          SNode exprst = SNodeOperations.cast(st, "jetbrains.mps.core.workflow.structure.WflowAssert");
          Object expected = BehaviorReflection.invokeVirtual(Object.class, SLinkOperations.getTarget(exprst, "expected", true), "virtual_evaluate_1671449901154581105", new Object[]{env, rootContext.subContext()});
          Object actual = BehaviorReflection.invokeVirtual(Object.class, SLinkOperations.getTarget(exprst, "actual", true), "virtual_evaluate_1671449901154581105", new Object[]{env, rootContext.subContext()});
          boolean result = env.getRuntime().objectEquals(expected, actual);

          if (!(result)) {
            report(MessageKind.ERROR, "fail: got " + actual + " instead of " + expected, st);
          }

        } catch (Exception ex) {
          Throwable thr = unwrap(ex);
          report(MessageKind.ERROR, thr.toString(), (thr instanceof EvaluationException ? ((EvaluationException) thr).getQuery() : null));
        }
      }
    }
  }

  public void report(MessageKind kind, String text, SNode hintNode) {
    Message message = new Message(kind, text);
    if ((hintNode != null)) {
      message.setHintObject(hintNode);
    }
    handler.handle(message);
  }

  public Throwable unwrap(Throwable ex) {
    Throwable last = ex;
    Throwable next = unwrap_internal(ex);
    int counter = 0;
    while (next != null && next != last && counter++ < 100) {
      last = next;
      next = unwrap_internal(next);
    }
    return last;
  }

  private Throwable unwrap_internal(Throwable ex) {
    if (ex instanceof InvocationTargetException) {
      return ((InvocationTargetException) ex).getCause();
    } else if (ex instanceof RuntimeException) {
      return ((RuntimeException) ex).getCause();
    }
    return null;
  }
}
