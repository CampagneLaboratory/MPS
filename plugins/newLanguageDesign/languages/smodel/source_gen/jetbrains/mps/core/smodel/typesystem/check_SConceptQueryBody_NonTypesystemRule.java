package jetbrains.mps.core.smodel.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_SConceptQueryBody_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_SConceptQueryBody_NonTypesystemRule() {
  }

  public void applyRule(final SNode sConceptQuery, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if ((SLinkOperations.getTarget(sConceptQuery, "body", true) == null)) {
      return;
    }
    if ((SLinkOperations.getTarget(sConceptQuery, "type", true) == null)) {
      return;
    }
    SNode bodyType = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), SLinkOperations.getTarget(sConceptQuery, "body", true), "virtual_getType_228266671027861783", new Object[]{});
    if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, bodyType, "virtual_isSubtypeOf_2852142168179579064", new Object[]{SLinkOperations.getTarget(sConceptQuery, "type", true)}))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(sConceptQuery, "body", true), "Type of query body " + BehaviorReflection.invokeVirtual(String.class, bodyType, "virtual_getText_270269450479797040", new Object[]{}) + " is not subtype of its return type " + BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(sConceptQuery, "type", true), "virtual_getText_270269450479797040", new Object[]{}), "r:51081164-5cb8-4581-b1a7-d92a2d5fc7da(jetbrains.mps.core.smodel.typesystem)", "4031651930683443650", null, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.core.smodel.structure.SConceptQuery";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
