package jetbrains.mps.core.smodel.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.core.query.behavior.MqlSelector_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.smodel.util.ConceptQueryUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_SConceptQueryCall_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_SConceptQueryCall_NonTypesystemRule() {
  }

  public void applyRule(final SNode queryCall, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode containerType = MqlSelector_Behavior.call_getContainerType_228266671027861723(queryCall);
    if (!(SNodeOperations.isInstanceOf(containerType, "jetbrains.mps.core.smodel.structure.MqlNodeType"))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(queryCall, "cannot apply query call to " + (((containerType != null) ? BehaviorReflection.invokeVirtual(String.class, containerType, "virtual_getText_270269450479797040", new Object[]{}) : "<no type>")), "r:51081164-5cb8-4581-b1a7-d92a2d5fc7da(jetbrains.mps.core.smodel.typesystem)", "4524748913103430548", null, errorTarget);
      }
      return;
    }
    SNode concept = SLinkOperations.getTarget(SNodeOperations.cast(containerType, "jetbrains.mps.core.smodel.structure.MqlNodeType"), "concept", false);
    if ((concept == null) || (SLinkOperations.getTarget(queryCall, "query", false) == null)) {
      return;
    }
    SNode resolved = ConceptQueryUtil.resolveQuery(concept, SPropertyOperations.getString(SLinkOperations.getTarget(queryCall, "query", false), "name"), SLinkOperations.getTargets(queryCall, "arguments", true));
    if (resolved != SLinkOperations.getTarget(queryCall, "query", false)) {
      if (resolved == null) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(queryCall, "cannot find applicable query", "r:51081164-5cb8-4581-b1a7-d92a2d5fc7da(jetbrains.mps.core.smodel.typesystem)", "4524748913103431013", null, errorTarget);
        }
      } else {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(queryCall, "wrong target query", "r:51081164-5cb8-4581-b1a7-d92a2d5fc7da(jetbrains.mps.core.smodel.typesystem)", "4524748913103431020", null, errorTarget);
          {
            BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("jetbrains.mps.core.smodel.typesystem.fixQueryCall_QuickFix", true);
            intentionProvider.putArgument("query", resolved);
            _reporter_2309309498.addIntentionProvider(intentionProvider);
          }
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.core.smodel.structure.SConceptQueryCall";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
