package jetbrains.mps.ide.migration.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class ScriptsFinder {
  public ScriptsFinder() {
  }

  public static List<SNodePointer> find() {
    List<SNodePointer> list = ListSequence.<SNodePointer>fromList(new ArrayList<SNodePointer>());
    for (Language l : ListSequence.<Language>fromList(MPSModuleRepository.getInstance().getAllLanguages())) {
      EditableSModelDescriptor smd = LanguageAspect.SCRIPTS.get(l);
      if (smd == null) {
        continue;
      }
      SModel model = smd.getSModel();
      ListSequence.<SNodePointer>fromList(list).addSequence(ListSequence.<SNode>fromList(SModelOperations.getRoots(model, "jetbrains.mps.lang.script.structure.MigrationScript")).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.hasValue(it, "type", "migration", "enhancement");
        }
      }).<SNodePointer>select(new ISelector<SNode, SNodePointer>() {
        public SNodePointer select(SNode it) {
          return new SNodePointer(it);
        }
      }));
    }
    return list;
  }
}
