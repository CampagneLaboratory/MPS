package jetbrains.mps.ide.migration.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.MPSProject;
import java.util.Set;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.List;
import jetbrains.mps.smodel.SModelId;
import jetbrains.mps.smodel.SModelDescriptor;

public class UpdateLanguageAccessories_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(UpdateLanguageAccessories_Action.class);

  public UpdateLanguageAccessories_Action() {
    super("Update Language Accessories Refs", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "UpdateLanguageAccessories", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("mpsProject", event.getData(MPSDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("mpsProject") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      for (Language l : ((MPSProject) MapSequence.fromMap(_params).get("mpsProject")).getProjectModules(Language.class)) {
        Set<SModelReference> toRemove = SetSequence.fromSet(new HashSet<SModelReference>());
        Set<SModelReference> toAdd = SetSequence.fromSet(new HashSet<SModelReference>());

        List<SModelReference> acc = l.getModuleDescriptor().getAccessoryModels();
        for (SModelReference ref : acc) {
          if (!(ref.getSModelId() instanceof SModelId.ForeignSModelId)) {
            continue;
          }

          SetSequence.fromSet(toRemove).addElement(ref);

          for (SModelDescriptor md : l.getScope().getModelDescriptors()) {
            if (md.getLongName().equals(ref.getLongName())) {
              SetSequence.fromSet(toAdd).addElement(md.getSModelReference());
              break;
            }
          }
        }

        acc.removeAll(toRemove);
        acc.addAll(toAdd);

        l.save();
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "UpdateLanguageAccessories", t);
      }
    }
  }
}
