package jetbrains.mps.core.query.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;

public enum MqlCollectionConcatOpKind {
  CONCAT("concat", 1),
  UNION("union", 2),
  INTERSECTION("intersection", 3),
  DIFFERENCE("difference", 4);

  private String myName;

  public String getName() {
    return this.myName;
  }

  public String getValueAsString() {
    return "" + this.myValue;
  }

  public static List<MqlCollectionConcatOpKind> getConstants() {
    List<MqlCollectionConcatOpKind> list = ListSequence.fromList(new LinkedList<MqlCollectionConcatOpKind>());
    ListSequence.fromList(list).addElement(MqlCollectionConcatOpKind.CONCAT);
    ListSequence.fromList(list).addElement(MqlCollectionConcatOpKind.UNION);
    ListSequence.fromList(list).addElement(MqlCollectionConcatOpKind.INTERSECTION);
    ListSequence.fromList(list).addElement(MqlCollectionConcatOpKind.DIFFERENCE);
    return list;
  }

  public static MqlCollectionConcatOpKind getDefault() {
    return null;
  }

  public static MqlCollectionConcatOpKind parseValue(String value) {
    if (value == null) {
      return MqlCollectionConcatOpKind.getDefault();
    }
    if (value.equals(MqlCollectionConcatOpKind.CONCAT.getValueAsString())) {
      return MqlCollectionConcatOpKind.CONCAT;
    }
    if (value.equals(MqlCollectionConcatOpKind.UNION.getValueAsString())) {
      return MqlCollectionConcatOpKind.UNION;
    }
    if (value.equals(MqlCollectionConcatOpKind.INTERSECTION.getValueAsString())) {
      return MqlCollectionConcatOpKind.INTERSECTION;
    }
    if (value.equals(MqlCollectionConcatOpKind.DIFFERENCE.getValueAsString())) {
      return MqlCollectionConcatOpKind.DIFFERENCE;
    }
    return MqlCollectionConcatOpKind.getDefault();
  }

  private int myValue;

  MqlCollectionConcatOpKind(String name, int value) {
    this.myName = name;
    this.myValue = value;
  }

  public int getValue() {
    return this.myValue;
  }
}
