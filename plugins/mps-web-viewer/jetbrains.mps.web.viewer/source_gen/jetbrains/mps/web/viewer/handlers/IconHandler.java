package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import jetbrains.mps.web.core.server.Handler;
import java.util.Map;
import javax.swing.Icon;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.project.Project;
import com.sun.net.httpserver.HttpExchange;
import jetbrains.mps.web.core.server.HttpUtil;
import java.lang.reflect.Field;
import com.sun.istack.internal.NotNull;
import java.util.Arrays;
import org.apache.log4j.Priority;
import java.awt.image.BufferedImage;
import java.awt.Graphics;
import java.io.ByteArrayOutputStream;
import javax.imageio.ImageIO;
import java.io.IOException;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class IconHandler implements Handler {
  public static final String DEFAULT_ICON = "/img/folder.png";
  private static IconHandler INSTANCE;

  private final Map<Icon, String> iconToIconId = MapSequence.fromMap(new HashMap<Icon, String>());
  private final Map<String, byte[]> iconIdToBytes = MapSequence.fromMap(new HashMap<String, byte[]>());


  public void init() {
    // todo: classes leaks in iconToPath field 
    // todo: need application handler for IconHandler, not ProjectHandler... 
    // iconId == requestUrl for handler like /icons/{hash}.png 
    INSTANCE = this;
  }



  public void dispose() {
    INSTANCE = null;
  }



  public void handle(String requestUrl, Project project, HttpExchange exchange) throws Exception {
    // /rest/p/Project/icons/{icon_hash}.png or /rest/p/Project/icons/{icon_name}.png?icon_hash 
    HttpUtil.doResponse(MapSequence.fromMap(iconIdToBytes).get(requestUrl), "image/png", 200, exchange);
  }



  private static String getIconPath(Icon icon) {
    if (icon == null || !(icon.getClass().getSimpleName().equals("ByClass"))) {
      throw new IllegalArgumentException();
    }

    try {
      Field pathField = icon.getClass().getDeclaredField("myPath");
      pathField.setAccessible(true);
      return "img/icons/" + pathField.get(icon);
    } catch (NoSuchFieldException e) {
      throw new IllegalArgumentException(e);
    } catch (IllegalAccessException e) {
      throw new RuntimeException(e);
    }
  }



  @NotNull
  public static String getPathForIcon(Project project, Icon icon) {
    return "/rest/p/" + project.getName() + INSTANCE.getIconIdForIcon(icon);
  }



  @NotNull
  private String getIconIdForIcon(Icon icon) {
    try {
      if (MapSequence.fromMap(iconToIconId).containsKey(icon)) {
        return MapSequence.fromMap(iconToIconId).get(icon);
      }
      byte[] pngBytes = convertBufferedImageToPng(convertIconToBufferedImage(icon));
      String iconId = "/icons/" + Integer.toHexString(Arrays.hashCode(pngBytes)) + ".png";
      MapSequence.fromMap(iconToIconId).put(icon, iconId);
      MapSequence.fromMap(iconIdToBytes).put(iconId, pngBytes);
      return iconId;
    } catch (Exception e) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("exception while creation url for icon", e);
      }
      return DEFAULT_ICON;
    }
  }



  private static BufferedImage convertIconToBufferedImage(Icon icon) {
    BufferedImage bi = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_RGB);
    Graphics g = bi.createGraphics();
    icon.paintIcon(null, g, 0, 0);
    g.dispose();
    return bi;
  }



  private static byte[] convertBufferedImageToPng(BufferedImage image) {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    try {
      ImageIO.write(image, "png", baos);
      baos.flush();
      byte[] imageBytes = baos.toByteArray();
      baos.close();
      return imageBytes;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  protected static Logger LOG = LogManager.getLogger(IconHandler.class);
}
