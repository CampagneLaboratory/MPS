package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.web.ConceptIdDispatcher;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.language.SLink;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.backports.Deque;
import jetbrains.mps.internal.collections.runtime.DequeSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public class ReflectiveNodeRendererBuilder {
  private SConcept myConcept;
  private ConceptIdDispatcher myConceptIdDispatcher;
  private Iterable<SAbstractConcept> myAllSuperConcepts;


  public ReflectiveNodeRendererBuilder(SConcept concept, ConceptIdDispatcher conceptIdDispatcher) {
    myConcept = concept;
    myConceptIdDispatcher = conceptIdDispatcher;
  }

  public StringBuilder buildRenderer() {
    final StringBuilder builder = new StringBuilder();
    builder.append("render_").append(myConceptIdDispatcher.getConceptId(myConcept)).append(" : function(node) {\n");
    builder.append("// Concept: ").append(myConcept.getQualifiedName()).append("\n");
    builder.append("var r = $('<div/>');\n");
    Sequence.fromIterable(getAllSuperConcepts(myConcept)).translate(new ITranslator2<SAbstractConcept, SProperty>() {
      public Iterable<SProperty> translate(SAbstractConcept it) {
        return it.getProperties();
      }
    }).visitAll(new IVisitor<SProperty>() {
      public void visit(SProperty it) {
        renderProperty(it, builder);
      }
    });
    Sequence.fromIterable(getAllSuperConcepts(myConcept)).translate(new ITranslator2<SAbstractConcept, SLink>() {
      public Iterable<SLink> translate(SAbstractConcept it) {
        return it.getLinks();
      }
    }).where(new IWhereFilter<SLink>() {
      public boolean accept(SLink it) {
        return it.isReference();
      }
    }).visitAll(new IVisitor<SLink>() {
      public void visit(SLink it) {
        renderLink(it, builder);
      }
    });
    Sequence.fromIterable(getAllSuperConcepts(myConcept)).translate(new ITranslator2<SAbstractConcept, SLink>() {
      public Iterable<SLink> translate(SAbstractConcept it) {
        return it.getLinks();
      }
    }).where(new IWhereFilter<SLink>() {
      public boolean accept(SLink it) {
        return !(it.isReference());
      }
    }).visitAll(new IVisitor<SLink>() {
      public void visit(SLink it) {
        renderChildern(it, builder);
      }
    });
    builder.append("return r;\n");
    builder.append("}");
    return builder;
  }

  private void renderProperty(SProperty property, StringBuilder builder) {
    String propertyName = property.getName();
    builder.append("if (typeof node.").append(propertyName).append(" != 'undefined') {\n");
    builder.append("r.append($('<div>").append(propertyName).append(": ' + node.").append(propertyName).append("+ '</div>'));\n");
    builder.append("}\n");
  }

  private void renderLink(SLink link, StringBuilder builder) {
    String role = link.getRole();
    builder.append("if (typeof node.").append(role).append(" != 'undefined') {\n");
    builder.append("r.append($('<div>").append(role).append(": ' + node.").append(role).append(".nodeID + '</div>'));\n");
    builder.append("}\n");
  }

  private void renderChildern(SLink link, StringBuilder builder) {
    String role = link.getRole();
    builder.append("if (typeof node.").append(role).append(" != 'undefined') {\n");
    String varName = "chld_" + role;
    builder.append("var ").append(varName).append(" = r.append($('<div/>'));\n");
    builder.append(varName).append(".append($('<div>").append(role).append(" {</div>'));\n");

    builder.append("$.each(node.").append(role).append(", function (index, value) {\n").append(varName).append(".append(window.registry['render_' + value.conceptID](value))});\n");
    builder.append(varName).append(".append($('<div>}</div>'));\n");
    builder.append("}\n");
  }

  private Iterable<SAbstractConcept> getAllSuperConcepts(SConcept concept) {
    if (myAllSuperConcepts == null) {
      Set<SAbstractConcept> result = SetSequence.fromSet(new HashSet<SAbstractConcept>());
      Deque<SAbstractConcept> queue = DequeSequence.fromDeque(new LinkedList<SAbstractConcept>());
      DequeSequence.fromDeque(queue).addLastElement(concept);
      while (DequeSequence.fromDeque(queue).isNotEmpty()) {
        SAbstractConcept abstractConcept = DequeSequence.fromDeque(queue).removeFirstElement();
        if (!(SetSequence.fromSet(result).contains(abstractConcept))) {
          SetSequence.fromSet(result).addElement(abstractConcept);
          if (abstractConcept instanceof SConcept) {
            SConcept sConcept = (SConcept) abstractConcept;
            if (sConcept.getSuperConcept() != null) {
              DequeSequence.fromDeque(queue).addLastElement(sConcept.getSuperConcept());
            }
            for (SInterfaceConcept superInterface : Sequence.fromIterable(sConcept.getSuperInterfaces())) {
              DequeSequence.fromDeque(queue).addLastElement(superInterface);
            }
          } else if (abstractConcept instanceof SInterfaceConcept) {
            SInterfaceConcept iConcept = (SInterfaceConcept) abstractConcept;
            for (SInterfaceConcept superInterface : Sequence.fromIterable(iConcept.getSuperInterfaces())) {
              DequeSequence.fromDeque(queue).addLastElement(superInterface);
            }
          }
        }
      }
      myAllSuperConcepts = SetSequence.fromSet(result).toListSequence();
    }
    return myAllSuperConcepts;
  }
}
