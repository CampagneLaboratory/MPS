package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.lang.editor.table.runtime.EditorCell_Table;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import java.util.Iterator;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.CellFinderUtil;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.openapi.editor.cells.CellTraversalUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.awt.Color;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.cells.EditorCell_Indent;
import jetbrains.mps.nodeEditor.cells.APICellAdapter;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.openapi.editor.style.StyleAttribute;

public class CellToHtmlGenerator {
  private final EditorCell rootCell;
  private final SNode selectedNode;

  private StringBuilder builder;


  public CellToHtmlGenerator(EditorCell rootCell, SNode selectedNode) {
    this.rootCell = rootCell;
    this.selectedNode = selectedNode;
  }



  public String generate() {
    builder = new StringBuilder();
    generateHtmlForCell(rootCell, 0, true);
    return builder.toString();
  }



  private void generateHtmlForCell(EditorCell cell, int indention, boolean isOnNewLine) {
    if (cell instanceof EditorCell_Collection && isEmptyCollection((EditorCell_Collection) cell)) {
      return;
    }
    if (cell instanceof EditorCell_Collection && ((EditorCell_Collection) cell).getCellLayout() instanceof CellLayout_Indent) {
      generateHtmlForIndent(((EditorCell_Collection) cell), indention, isOnNewLine);
      return;
    }
    appendOpeningDiv(cell, indention, isOnNewLine);

    if (cell instanceof EditorCell_Table) {
      generateHtmlForTable(cell);
    } else if (cell instanceof EditorCell_Collection) {
      for (EditorCell child : Sequence.fromIterable(((EditorCell_Collection) cell))) {
        generateHtmlForCell(child, 0, false);
        builder.append('\n');
      }
    } else if (cell instanceof EditorCell_Label) {
      String text = trim_je17c5_a0a0a1e0j(((EditorCell_Label) cell).getText());
      builder.append(((text == null || text.length() == 0) ?
        "&nbsp;" :
        text.replace("<", "&lt").replace(">", "&gt")
      ));
    }
    appendClosingDiv();
  }



  private void generateHtmlForTable(EditorCell cell) {
    builder.append("<table border=\"1\">");
    for (Iterator<EditorCell> rowsIterator = ((EditorCell_Table) cell).iterator(); rowsIterator.hasNext();) {
      EditorCell nextRow = rowsIterator.next();
      assert nextRow instanceof EditorCell_Collection;
      builder.append("<tr>");

      int index = -1;
      for (Iterator<EditorCell> cellIterator = ((EditorCell_Collection) nextRow).iterator(); cellIterator.hasNext(); index++) {
        EditorCell nextCell = cellIterator.next();
        if (index < 0 || !(cellIterator.hasNext())) {
          //  skipping first cell 
          continue;
        }

        builder.append("<td>");
        generateHtmlForCell(nextCell, 0, true);
        builder.append('\n');
        builder.append("</td>");
      }
      assert index > 0;
      builder.append("</tr>");

    }
    builder.append("</table>");
  }



  private boolean isEmptyCollection(EditorCell_Collection collection) {
    for (EditorCell editorCell : collection) {
      if (!(editorCell instanceof EditorCell_Collection)) {
        return false;
      }
      if (!(isEmptyCollection((EditorCell_Collection) editorCell))) {
        return false;
      }
    }
    return true;
  }



  private void generateHtmlForIndent(EditorCell_Collection collection, int indention, boolean isOnNewLine) {
    boolean needWrapper = (collection.getParent() == null || !(collection.getParent().getCellLayout() instanceof CellLayout_Indent));
    if (needWrapper) {
      appendOpeningDiv(collection, indention, false);
    }
    if (collection.getStyle().get(StyleAttributes.INDENT_LAYOUT_INDENT)) {
      indention++;
    }
    for (EditorCell child : Sequence.fromIterable(collection)) {
      boolean isOnNewLineChild = isOnNewLine(child);
      generateHtmlForCell(child, indention, isOnNewLine || isOnNewLineChild);
      if (CellFinderUtil.findChildByCondition(child, new Condition<EditorCell>() {
        public boolean met(EditorCell cell) {
          return !(cell instanceof EditorCell_Collection);
        }
      }, true, true) != null) {
        isOnNewLine = child.getStyle().get(StyleAttributes.INDENT_LAYOUT_NEW_LINE) || collection.getStyle().get(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE);
      }
    }
    if (needWrapper) {
      appendClosingDiv();
    }
  }

  private boolean isOnNewLine_Old(EditorCell cell) {
    if (cell.getStyle().get(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE)) {
      return true;
    }

    if (cell.getParent() != null && cell.getParent().getStyle().get(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE)) {
      return true;
    }

    EditorCell prevCell = CellTraversalUtil.getPrevSibling(cell);
    if (prevCell != null) {
      return isOnNewLineRightChild(prevCell);
    } else {
      EditorCell parentCell = cell.getParent();
      while (parentCell != null) {
        if (isOnNewLine_Old(parentCell)) {
          return true;
        }
        parentCell = parentCell.getParent();
      }
    }
    return true;
  }

  private boolean isOnNewLineRightChild(EditorCell prevCell) {
    if (prevCell == null) {
      return false;
    }
    if (prevCell.getStyle().get(StyleAttributes.INDENT_LAYOUT_NEW_LINE)) {
      return true;
    }
    if (prevCell instanceof EditorCell_Collection) {
      EditorCell rightChild = ((EditorCell_Collection) prevCell).lastCell();
      return isOnNewLineRightChild(rightChild);
    }
    return false;
  }



  private void appendClosingDiv() {
    builder.append("</div>");
  }



  private void appendOpeningDiv(EditorCell cell, int indention, boolean isOnNewLine) {
    builder.append("<div");
    addClasses(cell, indention, isOnNewLine);
    addTextAttributes(cell, indention, isOnNewLine);
    addTargetNodeId(cell);
    builder.append(">");
  }



  private void addClasses(EditorCell cell, int indention, boolean isOnNewLine) {
    String classes = "";
    if (cell instanceof EditorCell_Collection && !(((EditorCell_Collection) cell).getCellLayout() instanceof CellLayout_Indent)) {
      classes = classes + getClassesForCollection(((EditorCell_Collection) cell));
    }
    classes += getClassesForCell(cell, indention);
    if (cell.getSNode().equals(selectedNode) && SNodeOperations.getContainingRoot(selectedNode) != selectedNode) {
      classes += " selected-cell";
    }
    if (isOnNewLine) {
      classes += "indent-layout-on-new-line ";
    }
    if ((classes != null && classes.length() > 0)) {
      builder.append(" class = \"");
      builder.append(classes);
      builder.append("\"");
    }
  }

  private void addTextAttributes(EditorCell cell, int indention, boolean isOnNewLine) {
    StringBuilder temp = new StringBuilder();
    if (cell instanceof EditorCell_Label) {
      Color fg = cell.getStyle().get(StyleAttributes.TEXT_COLOR);
      Color bg = cell.getStyle().get(StyleAttributes.TEXT_BACKGROUND_COLOR);
      if (fg != null && fg != Color.BLACK) {
        temp.append("color:#" + colorToHEX(fg) + ";");
      }
      if (bg != null && bg != Color.WHITE) {
        temp.append("background:#" + colorToHEX(bg) + ";");
      }
      int font = cell.getStyle().get(StyleAttributes.FONT_STYLE);
      if ((font & MPSFonts.BOLD) > 0) {
        temp.append("font-weight: bold;");
      }
      if ((font & MPSFonts.ITALIC) > 0) {
        temp.append("font-style: italic;");
      }
      if (Boolean.TRUE.equals(cell.getStyle().get(StyleAttributes.DRAW_BORDER))) {
        temp.append("border: solid 1px;");
      }
      if (cell.getStyle().get(StyleAttributes.INDENT_LAYOUT_INDENT)) {
        indention++;
      }
    }
    if (isOnNewLine) {
      temp.append("padding-left:" + (indention * 12) / 10 + "." + (indention * 12) % 10 + "em;");
    }
    if (cell instanceof EditorCell_Indent) {
      temp.append("width: 1.2em;");
    }

    if (isNotEmpty_je17c5_a0f0y(temp.toString())) {
      builder.append(" style=\"" + temp.toString() + "\"");
    }
  }

  private String colorToHEX(Color color) {
    String strColor = Integer.toHexString(color.getRGB());
    return strColor.substring(2, strColor.length());
  }



  private void addTargetNodeId(EditorCell cell) {
    if (cell instanceof EditorCell_Label) {
      SNode targetNode = APICellAdapter.getSNodeWRTReference(cell);
      if (targetNode == null) {
        return;
      }
      if (targetNode == cell.getSNode()) {
        return;
      }
      String targetNodeId = " target-node-id = \"" + targetNode.getNodeId() + "\"";
      String targetModelId = " target-model-id = \"" + targetNode.getModel().getModelId() + "\"";
      String targetModuleId = " target-module-id = \"" + targetNode.getModel().getModule().getModuleId() + "\"";
      builder.append(targetNodeId);
      builder.append(targetModelId);
      builder.append(targetModuleId);
    }
    if (cell.isBig()) {
      builder.append(" data-node = \"" + cell.getSNode().getNodeId() + "\"");
    }
  }



  private String getClassesForCollection(EditorCell_Collection collection) {
    StringBuilder clazz = new StringBuilder();
    if (collection.getCellLayout() instanceof CellLayout_Horizontal) {
      clazz.append("horizontal-layout ");
    } else if (collection.getCellLayout() instanceof CellLayout_Vertical) {
      clazz.append("vertical-layout ");
    }
    clazz.append("n-list ");

    return clazz.toString();
  }



  private boolean isOnNewLine(EditorCell cell) {
    for (EditorCell current = cell; current != null; current = current.getParent()) {
      if (current.getStyle().get(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE)) {
        return true;
      }
      if (current.getParent() == null || current.getParent().firstCell() != current) {
        return false;
      }
      if (!(current.getParent().getCellLayout() instanceof CellLayout_Indent)) {
        return false;
      }
    }
    return false;
  }



  private Boolean getStyleForLast(StyleAttribute<Boolean> style, EditorCell cell) {
    if (cell == null) {
      return false;
    }
    Boolean result = cell.getStyle().get(style);
    if (result) {
      return result;
    }
    if (cell instanceof EditorCell_Collection) {
      return getStyleForLast(style, ((EditorCell_Collection) cell).lastCell());
    } else {
      return false;
    }
  }

  private String getClassesForCell(EditorCell cell, int indention) {
    StringBuilder clazz = new StringBuilder();

    if (isOnNewLine_Old(cell)) {
      clazz.append("");
    }

    if (cell instanceof EditorCell_Label) {
      clazz.append("n-leaf ");
      if (Boolean.TRUE.equals(cell.getStyle().get(StyleAttributes.PUNCTUATION_LEFT))) {
        clazz.append("n-pleft ");
      }
      if (Boolean.TRUE.equals(cell.getStyle().get(StyleAttributes.PUNCTUATION_RIGHT))) {
        clazz.append("n-pright ");
      }
      if (isEmpty_je17c5_a0d0e0ib(((EditorCell_Label) cell).getText())) {
        clazz.append("n-empty ");
      }
    }

    return clazz.toString();
  }

  public static String trim_je17c5_a0a0a1e0j(String str) {
    return (str == null ?
      null :
      str.trim()
    );
  }

  public static boolean isNotEmpty_je17c5_a0f0y(String str) {
    return str != null && str.length() > 0;
  }

  public static boolean isEmpty_je17c5_a0d0e0ib(String str) {
    return str == null || str.length() == 0;
  }
}
