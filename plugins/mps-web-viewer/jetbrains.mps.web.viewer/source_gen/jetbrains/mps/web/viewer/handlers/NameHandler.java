package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import jetbrains.mps.web.core.server.Handler;
import jetbrains.mps.project.Project;
import com.sun.net.httpserver.HttpExchange;
import jetbrains.mps.web.core.server.HttpUtil;
import jetbrains.mps.web.JsonBuilder;
import java.util.Map;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.ModuleId;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelId;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SNodeId;

public class NameHandler implements Handler {
  public void handle(String requestUrl, Project project, HttpExchange exchange) throws Exception {
    // response format: {"module_name" : "name"} 
    // requestUrls: 
    // /name.json -> project name 
    // /name.json?module_id=Q1&model_id=Q2&node_id=Q3 
    // more parameters - more results 
    HttpUtil.doJsonResponse(getNames(HttpUtil.getQueryParameters(exchange), project).toString(), exchange);
  }



  private static JsonBuilder getNames(final Map<String, String> parameters, final Project project) {
    final JsonBuilder result = JsonBuilder.object();
    result.addProperty("project_name", project.getName());

    System.out.println(parameters);

    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        if (!(MapSequence.fromMap(parameters).containsKey("module_id"))) {
          return;
        }
        SModule module = project.getRepository().getModule(ModuleId.fromString(MapSequence.fromMap(parameters).get("module_id")));
        if (module == null) {
          return;
        }
        result.addProperty("module_name", module.getModuleName());

        if (!(MapSequence.fromMap(parameters).containsKey("model_id"))) {
          return;
        }
        SModel model = module.resolveInDependencies(SModelId.fromString(MapSequence.fromMap(parameters).get("model_id")));
        if (model == null) {
          return;
        }
        result.addProperty("model_name", model.getModelName());

        if (!(MapSequence.fromMap(parameters).containsKey("node_id"))) {
          return;
        }
        SNode node = model.getNode(SNodeId.fromString(MapSequence.fromMap(parameters).get("node_id")));
        if (node == null) {
          return;
        }
        result.addProperty("node_name", node.getPresentation());
      }
    });

    return result;
  }
}
