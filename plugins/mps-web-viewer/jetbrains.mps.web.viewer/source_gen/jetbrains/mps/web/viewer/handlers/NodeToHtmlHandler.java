package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import jetbrains.mps.web.core.server.Handler;
import jetbrains.mps.project.Project;
import com.sun.net.httpserver.HttpExchange;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.web.core.server.HttpUtil;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import java.util.List;
import jetbrains.mps.smodel.event.SModelEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Collections;

public class NodeToHtmlHandler implements Handler {
  public void handle(String requestUrl, final Project project, HttpExchange exchange) throws Exception {
    // /view/nodeId 
    final Wrappers._T<String> nodeId = new Wrappers._T<String>(requestUrl.substring("/view/".length()));
    if (nodeId.value.endsWith(".html")) {
      nodeId.value = nodeId.value.substring(0, nodeId.value.length() - ".html".length());
    }
    String html = ModelAccess.instance().runReadAction(new Computable<String>() {
      public String compute() {
        return getHtmlForNode(project, SNodePointer.deserialize(nodeId.value).resolve(MPSModuleRepository.getInstance()));
      }
    });
    HttpUtil.doResponse(html, "text/html", 200, exchange);
  }



  public String getHtmlForNode(Project project, SNode node) {
    EditorComponent component = new EditorComponent(project.getRepository()) {
      protected EditorCell createRootCell(List<SModelEvent> list) {
        return null;
      }
    };
    EditorContext context = new EditorContext(component, node.getModel(), project.getRepository());
    jetbrains.mps.openapi.editor.cells.EditorCell cell = context.createRootCell(SNodeOperations.getContainingRoot(node), Collections.<SModelEvent>emptyList());
    return new CellToHtmlGenerator(cell, node).generate();
  }


}
