package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import jetbrains.mps.web.core.server.Handler;
import jetbrains.mps.project.Project;
import com.sun.net.httpserver.HttpExchange;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.web.core.server.HttpUtil;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import java.util.List;
import jetbrains.mps.smodel.event.SModelEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Collections;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.lang.editor.table.runtime.EditorCell_Table;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import java.util.Iterator;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.openapi.editor.cells.CellTraversalUtil;
import java.awt.Color;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.cells.APICellAdapter;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.openapi.editor.style.StyleAttribute;

public class NodeToHtmlHandler implements Handler {
  public void handle(String requestUrl, final Project project, HttpExchange exchange) throws Exception {
    // /view/nodeId 
    final Wrappers._T<String> nodeId = new Wrappers._T<String>(requestUrl.substring("/view/".length()));
    if (nodeId.value.endsWith(".html")) {
      nodeId.value = nodeId.value.substring(0, nodeId.value.length() - ".html".length());
    }
    String html = ModelAccess.instance().runReadAction(new Computable<String>() {
      public String compute() {
        return getHtmlForNode(project, SNodePointer.deserialize(nodeId.value).resolve(MPSModuleRepository.getInstance()));
      }
    });
    HttpUtil.doResponse(html, "text/html", 200, exchange);
  }



  public String getHtmlForNode(Project project, SNode node) {
    EditorComponent component = new EditorComponent(project.getRepository()) {
      protected EditorCell createRootCell(List<SModelEvent> list) {
        return null;
      }
    };
    EditorContext context = new EditorContext(component, node.getModel(), project.getRepository());
    jetbrains.mps.openapi.editor.cells.EditorCell cell = context.createRootCell(SNodeOperations.getContainingRoot(node), Collections.<SModelEvent>emptyList());
    return getHtmlForCell(cell, node);
  }



  public String getHtmlForCell(jetbrains.mps.openapi.editor.cells.EditorCell cell, SNode selectedNode) {
    StringBuilder builder = new StringBuilder();
    if (cell instanceof EditorCell_Collection && isEmptyCollection((EditorCell_Collection) cell)) {
      return "";
    }
    if (cell instanceof EditorCell_Collection && ((EditorCell_Collection) cell).getCellLayout() instanceof CellLayout_Indent) {
      builder.append(getHtmlForIndent(((EditorCell_Collection) cell), selectedNode));
      return builder.toString();
    }
    appendOpenDiv(builder, cell, selectedNode);

    if (cell instanceof EditorCell_Table) {
      getHtmlForTable(builder, cell, selectedNode);
    } else if (cell instanceof EditorCell_Collection) {
      for (jetbrains.mps.openapi.editor.cells.EditorCell child : Sequence.fromIterable(((EditorCell_Collection) cell))) {
        builder.append(getHtmlForCell(child, selectedNode)).append('\n');
      }
    } else if (cell instanceof EditorCell_Label) {
      String text = ((EditorCell_Label) cell).getText();
      builder.append(((text == null || text.length() == 0) ?
        "&nbsp;" :
        text
      ));
    }
    appendClosingDiv(builder);
    return builder.toString();
  }

  private void getHtmlForTable(StringBuilder builder, jetbrains.mps.openapi.editor.cells.EditorCell cell, SNode selectedNode) {
    builder.append("<table border=\"1\">");
    for (Iterator<jetbrains.mps.openapi.editor.cells.EditorCell> rowsIterator = ((EditorCell_Table) cell).iterator(); rowsIterator.hasNext();) {
      jetbrains.mps.openapi.editor.cells.EditorCell nextRow = rowsIterator.next();
      assert nextRow instanceof EditorCell_Collection;
      builder.append("<tr>");

      int index = -1;
      for (Iterator<jetbrains.mps.openapi.editor.cells.EditorCell> cellIterator = ((EditorCell_Collection) nextRow).iterator(); cellIterator.hasNext(); index++) {
        jetbrains.mps.openapi.editor.cells.EditorCell nextCell = cellIterator.next();
        if (index < 0 || !(cellIterator.hasNext())) {
          //  skipping first cell 
          continue;
        }

        builder.append("<td>");
        builder.append(getHtmlForCell(nextCell, selectedNode)).append('\n');
        builder.append("</td>");
      }
      assert index > 0;
      builder.append("</tr>");

    }
    builder.append("</table>");
  }



  private boolean isEmptyCollection(EditorCell_Collection collection) {
    for (jetbrains.mps.openapi.editor.cells.EditorCell editorCell : collection) {
      if (!(editorCell instanceof EditorCell_Collection)) {
        return false;
      }
      if (!(isEmptyCollection((EditorCell_Collection) editorCell))) {
        return false;
      }
    }
    return true;
  }



  private jetbrains.mps.openapi.editor.cells.EditorCell findFirstNewLine(EditorCell_Collection collection) {
    Iterator<jetbrains.mps.openapi.editor.cells.EditorCell> iterator = collection.iterator();
    while (iterator.hasNext()) {
      jetbrains.mps.openapi.editor.cells.EditorCell cell = iterator.next();
      if (cell.getStyle().get(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE)) {
        return cell;
      }
      if (cell.getStyle().get(StyleAttributes.INDENT_LAYOUT_NEW_LINE)) {
        if (iterator.hasNext()) {
          return iterator.next();
        }
      }
    }
    return collection.firstCell();

  }

  private jetbrains.mps.openapi.editor.cells.EditorCell findLastNewLine(EditorCell_Collection collection) {
    Iterator<jetbrains.mps.openapi.editor.cells.EditorCell> iterator = collection.reverseIterator();
    while (iterator.hasNext()) {
      jetbrains.mps.openapi.editor.cells.EditorCell cell = iterator.next();
      if (cell.getStyle().get(StyleAttributes.INDENT_LAYOUT_NEW_LINE)) {
        return CellTraversalUtil.getNextSibling(cell);
      }
      if (cell.getStyle().get(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE)) {
        if (iterator.hasNext()) {
          return cell;
        }
      }
    }
    return null;
  }



  public String getHtmlForIndent(EditorCell_Collection collection, SNode selectedNode) {
    StringBuilder builder = new StringBuilder();
    jetbrains.mps.openapi.editor.cells.EditorCell startMain;
    jetbrains.mps.openapi.editor.cells.EditorCell startLast;
    if (isOnNewLine(collection)) {
      startMain = collection.firstCell();
    } else {
      startMain = findFirstNewLine(collection);
    }
    startLast = findLastNewLine(collection);
    if (startMain == null) {
      appendOpenDiv(builder, collection, selectedNode);
      appendClosingDiv(builder);
    }
    Iterator<jetbrains.mps.openapi.editor.cells.EditorCell> iterator = collection.iterator();
    if (startMain != collection.firstCell()) {
      builder.append("<div class = \"");
      builder.append("indent-layout ");
      builder.append("n-list ");
      if (collection.getStyle().get(StyleAttributes.INDENT_LAYOUT_INDENT)) {
        builder.append("indent-layout-indent ");
      }
      builder.append("indent-layout-new-line ");
      builder.append("\">");

      while (iterator.hasNext()) {
        jetbrains.mps.openapi.editor.cells.EditorCell currentCell = iterator.next();
        if (currentCell == startMain) {
          break;
        }
        builder.append(getHtmlForCell(currentCell, selectedNode));
      }
      builder.append("</div>");
    }

    jetbrains.mps.openapi.editor.cells.EditorCell current = startMain;
    builder.append("<div class = \"");
    builder.append("indent-layout ");
    if (startMain != collection.firstCell()) {
      builder.append("n-listpart ");
    } else {
      builder.append("n-list ");
    }
    if (collection.getStyle().get(StyleAttributes.INDENT_LAYOUT_INDENT)) {
      builder.append("indent-layout-indent ");
    }
    if (collection.getStyle().get(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE)) {
      builder.append("indent-layout-new-line-children ");
    }
    if (collection.getStyle().get(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE)) {
      builder.append("indent-layout-on-new-line ");
    }
    if (startLast == null) {
      if (getStyleForLast(StyleAttributes.INDENT_LAYOUT_NEW_LINE, collection)) {
        builder.append("indent-layout-new-line ");
      }
    }

    builder.append("\">");
    while (current != null && current != startLast) {
      builder.append(getHtmlForCell(current, selectedNode));
      current = CellTraversalUtil.getNextSibling(current);
    }
    builder.append("</div>");

    if (startLast == null) {
      return builder.toString();
    }
    current = startLast;
    builder.append("<div class = \"");
    builder.append("indent-layout ");
    builder.append("n-listpart ");
    if (collection.getStyle().get(StyleAttributes.INDENT_LAYOUT_INDENT)) {
      builder.append("indent-layout-indent ");
    }
    if (getStyleForLast(StyleAttributes.INDENT_LAYOUT_NEW_LINE, collection)) {
      builder.append("indent-layout-new-line ");
    }
    builder.append("indent-layout-on-new-line ");


    builder.append("\">");
    while (current != null) {
      builder.append(getHtmlForCell(current, selectedNode));
      current = CellTraversalUtil.getNextSibling(current);
    }
    builder.append("</div>");




    return builder.toString();

  }

  private boolean isOnNewLine(jetbrains.mps.openapi.editor.cells.EditorCell cell) {
    if (cell.getStyle().get(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE)) {
      return true;
    }
    jetbrains.mps.openapi.editor.cells.EditorCell prevCell = CellTraversalUtil.getPrevSibling(cell);
    if (prevCell != null) {
      return isOnNewLineRightChild(prevCell);
    } else {
      jetbrains.mps.openapi.editor.cells.EditorCell parentCell = cell.getParent();
      while (parentCell != null) {
        if (isOnNewLine(parentCell)) {
          return true;
        }
        parentCell = parentCell.getParent();
      }
    }
    return true;
  }

  private boolean isOnNewLineRightChild(jetbrains.mps.openapi.editor.cells.EditorCell prevCell) {
    if (prevCell == null) {
      return false;
    }
    if (prevCell.getStyle().get(StyleAttributes.INDENT_LAYOUT_NEW_LINE)) {
      return true;
    }
    if (prevCell instanceof EditorCell_Collection) {
      jetbrains.mps.openapi.editor.cells.EditorCell rightChild = ((EditorCell_Collection) prevCell).lastCell();
      return isOnNewLineRightChild(rightChild);
    }
    return false;
  }



  private void appendClosingDiv(StringBuilder builder) {
    builder.append("</div>");
  }



  private void appendOpenDiv(StringBuilder builder, jetbrains.mps.openapi.editor.cells.EditorCell cell, SNode selectedNode) {
    StringBuilder div = new StringBuilder("<div");
    addClasses(cell, div, selectedNode);
    addTextAttributes(cell, div);
    addTargetNodeId(cell, div);
    div.append(">");
    builder.append(div);
  }





  private void addClasses(jetbrains.mps.openapi.editor.cells.EditorCell cell, StringBuilder div, SNode selectedNode) {
    String classes = "";
    if (cell instanceof EditorCell_Collection) {
      classes = classes + getClassesForCollection(((EditorCell_Collection) cell));
    }
    classes += getClassesForCell(cell);
    if (cell.getSNode().equals(selectedNode) && SNodeOperations.getContainingRoot(selectedNode) != selectedNode) {
      classes += " selected-cell";
    }
    if ((classes != null && classes.length() > 0)) {
      div.append(" class = \"");
      div.append(classes);
      div.append("\"");
    }
  }

  private void addTextAttributes(jetbrains.mps.openapi.editor.cells.EditorCell cell, StringBuilder div) {
    if (cell instanceof EditorCell_Label) {
      Color fg = cell.getStyle().get(StyleAttributes.TEXT_COLOR);
      Color bg = cell.getStyle().get(StyleAttributes.TEXT_BACKGROUND_COLOR);
      StringBuilder builder = new StringBuilder();
      if (fg != null && fg != Color.BLACK) {
        builder.append("color:#" + colorToHEX(fg) + ";");
      }
      if (bg != null && bg != Color.WHITE) {
        builder.append("background:#" + colorToHEX(bg) + ";");
      }
      int font = cell.getStyle().get(StyleAttributes.FONT_STYLE);
      if ((font & MPSFonts.BOLD) > 0) {
        builder.append("font-weight: bold;");
      }
      if ((font & MPSFonts.ITALIC) > 0) {
        builder.append("font-style: italic;");
      }
      if (Boolean.TRUE.equals(cell.getStyle().get(StyleAttributes.DRAW_BORDER))) {
        builder.append("border: solid 1px;");
      }

      if (isNotEmpty_9d126p_a0k0a0w(builder.toString())) {
        div.append(" style=\"" + builder.toString() + "\"");
      }
    }
  }

  private String colorToHEX(Color color) {
    String strColor = Integer.toHexString(color.getRGB());
    return strColor.substring(2, strColor.length());
  }




  private void addTargetNodeId(jetbrains.mps.openapi.editor.cells.EditorCell cell, StringBuilder div) {
    if (cell instanceof EditorCell_Label) {
      SNode targetNode = APICellAdapter.getSNodeWRTReference(cell);
      if (targetNode == null) {
        return;
      }
      if (targetNode == cell.getSNode()) {
        return;
      }
      String targetNodeId = " target-node-id = \"" + targetNode.getNodeId() + "\"";
      String targetModelId = " target-model-id = \"" + targetNode.getModel().getModelId() + "\"";
      String targetModuleId = " target-module-id = \"" + targetNode.getModel().getModule().getModuleId() + "\"";
      div.append(targetNodeId);
      div.append(targetModelId);
      div.append(targetModuleId);
    }
    if (cell.isBig()) {
      div.append(" data-node = \"" + cell.getSNode().getNodeId() + "\"");
    }
  }



  private String getClassesForCollection(EditorCell_Collection collection) {
    StringBuilder clazz = new StringBuilder();
    if (collection.getCellLayout() instanceof CellLayout_Horizontal) {
      clazz.append("horizontal-layout ");
    } else if (collection.getCellLayout() instanceof CellLayout_Vertical) {
      clazz.append("vertical-layout ");
    } else if (collection.getCellLayout() instanceof CellLayout_Indent) {
      clazz.append("indent-layout ");
    }
    if (collection.getStyle().get(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE)) {
      clazz.append("indent-layout-new-line-children ");
    }
    if (getStyleForLast(StyleAttributes.INDENT_LAYOUT_NEW_LINE, collection)) {
      clazz.append("indent-layout-new-line ");
    }
    clazz.append("n-list ");

    return clazz.toString();
  }



  private Boolean getStyleForLast(StyleAttribute<Boolean> style, jetbrains.mps.openapi.editor.cells.EditorCell cell) {
    if (cell == null) {
      return false;
    }
    Boolean result = cell.getStyle().get(style);
    if (result) {
      return result;
    }
    if (cell instanceof jetbrains.mps.nodeEditor.cells.EditorCell_Collection) {
      return getStyleForLast(style, ((EditorCell_Collection) cell).lastCell());
    } else {
      return false;
    }
  }

  private String getClassesForCell(jetbrains.mps.openapi.editor.cells.EditorCell cell) {
    StringBuilder clazz = new StringBuilder();
    if (cell.getStyle().get(StyleAttributes.INDENT_LAYOUT_NEW_LINE)) {
      clazz.append("indent-layout-new-line ");
    }
    if (cell.getStyle().get(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE)) {
      clazz.append("indent-layout-on-new-line ");
    }
    if (cell.getStyle().get(StyleAttributes.INDENT_LAYOUT_INDENT)) {
      clazz.append("indent-layout-indent ");
    }

    if (cell instanceof EditorCell_Label) {
      clazz.append("n-leaf ");
      if (Boolean.TRUE.equals(cell.getStyle().get(StyleAttributes.PUNCTUATION_LEFT))) {
        clazz.append("n-pleft ");
      }
      if (Boolean.TRUE.equals(cell.getStyle().get(StyleAttributes.PUNCTUATION_RIGHT))) {
        clazz.append("n-pright ");
      }
      if (isEmpty_9d126p_a0d0f0fb(((EditorCell_Label) cell).getText())) {
        clazz.append("n-empty");
      }
    }

    return clazz.toString();
  }

  public static boolean isNotEmpty_9d126p_a0k0a0w(String str) {
    return str != null && str.length() > 0;
  }

  public static boolean isEmpty_9d126p_a0d0f0fb(String str) {
    return str == null || str.length() == 0;
  }
}
