package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import jetbrains.mps.web.core.server.Handler;
import jetbrains.mps.project.Project;
import com.sun.net.httpserver.HttpExchange;
import jetbrains.mps.project.StandaloneMPSProject;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.web.JsonBuilder;
import java.util.ArrayList;
import jetbrains.mps.web.core.server.HttpUtil;
import java.util.List;
import java.util.Collection;

public class ProjectStructureHandler implements Handler {
  public void handle(String requestUrl, Project project, HttpExchange exchange) throws Exception {
    StandaloneMPSProject standaloneProject = (StandaloneMPSProject) project;
    VirtualFolder projectRoot = new VirtualFolder(project.getName());
    for (SModule nextModule : ListSequence.fromList(standaloneProject.getModules())) {
      projectRoot.getSubfolder(standaloneProject.getFolderFor(nextModule)).addModule(nextModule);
    }

    JsonBuilder builder = JsonBuilder.object();
    builder.addProperty("elements", ListSequence.fromListAndArray(new ArrayList<JsonBuilder>(), dumpFolder(projectRoot)));

    HttpUtil.doJsonResponse(builder.toString(), exchange);
  }



  private JsonBuilder dumpFolder(VirtualFolder folder) {
    JsonBuilder builder = JsonBuilder.object();
    builder.addProperty("name", folder.getName());
    builder.addProperty("icon", "img/folder.png");
    List<JsonBuilder> children = ListSequence.fromListWithValues(new ArrayList<JsonBuilder>(), dumpSubfolders(folder));
    for (SModule module : folder.getModules()) {
      JsonBuilder child = JsonBuilder.object();
      child.addProperty("name", module.getModuleName());
      child.addProperty("icon", "img/folder.png");
      ListSequence.fromList(children).addElement(child);
    }
    builder.addProperty("children", children);
    return builder;
  }

  private Collection<JsonBuilder> dumpSubfolders(VirtualFolder folder) {
    List<JsonBuilder> children = ListSequence.fromList(new ArrayList<JsonBuilder>());
    for (VirtualFolder subfolder : folder.getSubfolders()) {
      ListSequence.fromList(children).addElement(dumpFolder(subfolder));
    }
    return children;
  }


}
