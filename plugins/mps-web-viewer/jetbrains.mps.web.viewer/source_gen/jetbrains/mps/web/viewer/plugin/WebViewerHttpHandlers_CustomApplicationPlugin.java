package jetbrains.mps.web.viewer.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.custom.BaseCustomApplicationPlugin;
import java.util.List;
import jetbrains.mps.web.core.server.Handler;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.web.viewer.handlers.IconHandler;
import jetbrains.mps.web.core.server.MpsHttpServer;
import jetbrains.mps.web.viewer.handlers.ProjectNameHandler;
import jetbrains.mps.web.viewer.handlers.ProjectStructureHandler;
import jetbrains.mps.web.viewer.handlers.ProjectVcsRevisionHandler;
import jetbrains.mps.web.viewer.handlers.NodeToHtmlHandler;
import jetbrains.mps.web.viewer.handlers.GoToHandler;
import jetbrains.mps.web.viewer.handlers.NodeStructureHandler;
import java.util.Iterator;

public class WebViewerHttpHandlers_CustomApplicationPlugin extends BaseCustomApplicationPlugin {
  private List<Handler> handlers = ListSequence.fromList(new ArrayList<Handler>());
  private IconHandler iconHandler;

  public WebViewerHttpHandlers_CustomApplicationPlugin() {
  }

  public void doInit() {
    // todo: add method Handler#getPrefix 
    // create & register handlers 
    MpsHttpServer.getInstance().registerHandler("/name.json", ListSequence.fromList(WebViewerHttpHandlers_CustomApplicationPlugin.this.handlers).addElement(new ProjectNameHandler()));
    MpsHttpServer.getInstance().registerHandler(ProjectStructureHandler.PREFIX, ListSequence.fromList(WebViewerHttpHandlers_CustomApplicationPlugin.this.handlers).addElement(new ProjectStructureHandler()));
    MpsHttpServer.getInstance().registerHandler("/revision.json", ListSequence.fromList(WebViewerHttpHandlers_CustomApplicationPlugin.this.handlers).addElement(new ProjectVcsRevisionHandler()));
    MpsHttpServer.getInstance().registerHandler("/view/", ListSequence.fromList(WebViewerHttpHandlers_CustomApplicationPlugin.this.handlers).addElement(new NodeToHtmlHandler()));
    MpsHttpServer.getInstance().registerHandler("/goto.json", ListSequence.fromList(WebViewerHttpHandlers_CustomApplicationPlugin.this.handlers).addElement(new GoToHandler()));
    MpsHttpServer.getInstance().registerHandler(NodeStructureHandler.PREFIX, ListSequence.fromList(WebViewerHttpHandlers_CustomApplicationPlugin.this.handlers).addElement(new NodeStructureHandler()));

    IconHandler iconHandler = new IconHandler();
    iconHandler.init();
    MpsHttpServer.getInstance().registerHandler("/icons", iconHandler);
  }

  public void doDispose() {
    {
      Iterator<Handler> nextHandler_it = ListSequence.fromList(WebViewerHttpHandlers_CustomApplicationPlugin.this.handlers).iterator();
      Handler nextHandler_var;
      while (nextHandler_it.hasNext()) {
        nextHandler_var = nextHandler_it.next();
        MpsHttpServer.getInstance().unregisterHandler(nextHandler_var);
      }
    }

    MpsHttpServer.getInstance().unregisterHandler(WebViewerHttpHandlers_CustomApplicationPlugin.this.iconHandler);
    WebViewerHttpHandlers_CustomApplicationPlugin.this.iconHandler.dispose();
  }
}
