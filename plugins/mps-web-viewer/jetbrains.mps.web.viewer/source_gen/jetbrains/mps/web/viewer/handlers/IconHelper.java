package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import jetbrains.mps.icons.MPSIcons;
import java.util.Map;
import javax.swing.Icon;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.apache.log4j.Priority;
import java.lang.reflect.Field;
import com.sun.istack.internal.NotNull;
import com.intellij.util.Base64Converter;
import java.awt.image.BufferedImage;
import java.awt.Graphics;
import java.io.ByteArrayOutputStream;
import javax.imageio.ImageIO;
import java.io.IOException;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class IconHelper {
  public static final String DEFAULT_ICON_BASE_64 = encodeIconAsBase64(MPSIcons.Nodes.Unknown);
  private static IconHelper INSTANCE;

  private final Map<Icon, String> iconToBase64 = MapSequence.fromMap(new HashMap<Icon, String>());


  public void init() {
    // todo: classes leaks in iconToPath field 
    // todo: need application handler for IconHandler, not ProjectHandler... 
    // iconId == requestUrl for handler like /icons/{hash}.png 
    if (INSTANCE != null) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("INSTANCE is not null while init()", new Throwable());
      }
    }
    INSTANCE = this;
  }



  public void dispose() {
    if (INSTANCE == null) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("INSTANCE is null while dispose()", new Throwable());
      }
    }
    INSTANCE = null;
  }



  private static String getIconPath(Icon icon) {
    if (icon == null || !(icon.getClass().getSimpleName().equals("ByClass"))) {
      throw new IllegalArgumentException();
    }

    try {
      Field pathField = icon.getClass().getDeclaredField("myPath");
      pathField.setAccessible(true);
      return "img/icons/" + pathField.get(icon);
    } catch (NoSuchFieldException e) {
      throw new IllegalArgumentException(e);
    } catch (IllegalAccessException e) {
      throw new RuntimeException(e);
    }
  }



  @NotNull
  public static String encodeIconIntoBase64(Icon icon) {
    return INSTANCE.encodeIconAsBase64WithCaching(icon);
  }



  @NotNull
  private synchronized String encodeIconAsBase64WithCaching(Icon icon) {
    try {
      if (!(MapSequence.fromMap(iconToBase64).containsKey(icon))) {
        MapSequence.fromMap(iconToBase64).put(icon, encodeIconAsBase64(icon));
      }
      return MapSequence.fromMap(iconToBase64).get(icon);
    } catch (Exception e) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("exception while creation url for icon", e);
      }
      return DEFAULT_ICON_BASE_64;
    }
  }



  private static String encodeIconAsBase64(Icon icon) {
    byte[] pngBytes = convertBufferedImageToPng(convertIconToBufferedImage(icon));
    // <node> 
    return Base64Converter.encode(pngBytes);
  }



  private static BufferedImage convertIconToBufferedImage(Icon icon) {
    BufferedImage bi = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
    Graphics g = bi.createGraphics();
    icon.paintIcon(null, g, 0, 0);
    g.dispose();
    return bi;
  }



  private static byte[] convertBufferedImageToPng(BufferedImage image) {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    try {
      ImageIO.write(image, "png", baos);
      baos.flush();
      byte[] imageBytes = baos.toByteArray();
      baos.close();
      return imageBytes;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  protected static Logger LOG = LogManager.getLogger(IconHelper.class);
}
