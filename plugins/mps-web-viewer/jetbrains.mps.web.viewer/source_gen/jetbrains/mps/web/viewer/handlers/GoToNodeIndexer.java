package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.persistence.NavigationParticipant;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.apache.log4j.Priority;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.workbench.goTo.navigation.GotoNavigationUtil;
import jetbrains.mps.ide.findusages.model.scopes.ModulesScope;
import java.util.Arrays;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.project.Project;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class GoToNodeIndexer {
  public static GoToNodeIndexer INSTANCE;

  private final Map<SModule, List<Tuples._2<String, NavigationParticipant.NavigationTarget>>> moduleToNodePresentationToNodeReference = MapSequence.fromMap(new HashMap<SModule, List<Tuples._2<String, NavigationParticipant.NavigationTarget>>>());


  public void init() {
    if (GoToNodeIndexer.INSTANCE != null) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("INSTANCE is not null while init()", new Throwable());
      }
    }
    GoToNodeIndexer.INSTANCE = this;
    update();
  }



  public void dispose() {
    if (GoToNodeIndexer.INSTANCE == null) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("INSTANCE is null while dispose()", new Throwable());
      }
    }
    GoToNodeIndexer.INSTANCE = null;
  }



  public void update() {
    long startTime = System.currentTimeMillis();

    for (SModule module : Sequence.fromIterable(MPSModuleRepository.getInstance().getModules())) {
      List<Tuples._2<String, NavigationParticipant.NavigationTarget>> moduleIndex = ListSequence.fromList(new ArrayList<Tuples._2<String, NavigationParticipant.NavigationTarget>>());
      for (NavigationParticipant.NavigationTarget nodeItem : CollectionSequence.fromCollection(GotoNavigationUtil.getNavigationTargets(NavigationParticipant.TargetKind.ROOT, new ModulesScope(Arrays.asList(module)), new EmptyProgressMonitor()))) {
        ListSequence.fromList(moduleIndex).addElement(MultiTuple.<String,NavigationParticipant.NavigationTarget>from(nodeItem.getPresentation(), nodeItem));
      }
      MapSequence.fromMap(moduleToNodePresentationToNodeReference).put(module, moduleIndex);
    }

    if (LOG.isInfoEnabled()) {
      LOG.info("GoToNodeIndexer update made in " + (System.currentTimeMillis() - startTime) / 1000.0 + "s");
    }
  }



  public List<NavigationParticipant.NavigationTarget> getTargets(Project project, String query) {
    List<NavigationParticipant.NavigationTarget> targets = ListSequence.fromList(new ArrayList<NavigationParticipant.NavigationTarget>());
    for (SModule module : Sequence.fromIterable(project.getModules())) {
      for (Tuples._2<String, NavigationParticipant.NavigationTarget> item : ListSequence.fromList(MapSequence.fromMap(moduleToNodePresentationToNodeReference).get(module))) {
        if (item._0().toLowerCase().contains(query.toLowerCase())) {
          ListSequence.fromList(targets).addElement(item._1());
        }
      }
    }
    return targets;
  }

  protected static Logger LOG = LogManager.getLogger(GoToNodeIndexer.class);
}
