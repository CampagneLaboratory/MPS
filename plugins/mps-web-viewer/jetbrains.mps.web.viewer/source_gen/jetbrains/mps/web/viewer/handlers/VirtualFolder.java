package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Collection;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class VirtualFolder {
  private String myName;
  private Map<String, VirtualFolder> mySubfolders = MapSequence.fromMap(new HashMap<String, VirtualFolder>());
  private Collection<SModule> myModules = CollectionSequence.fromCollection(new ArrayList<SModule>());

  public VirtualFolder(String name) {
    myName = name;
  }

  public String getName() {
    return myName;
  }

  public void addModule(SModule module) {
    CollectionSequence.fromCollection(myModules).addElement(module);
  }

  public VirtualFolder getSubfolder(String relativeName) {
    VirtualFolder result = this;
    for (String segment : relativeName.split("\\.\\z")) {
      result = result.primGetSubfolder(segment);
    }
    return result;
  }

  public Iterable<VirtualFolder> getSubfolders() {
    return Sequence.fromIterable(MapSequence.fromMap(mySubfolders).values()).sort(new ISelector<VirtualFolder, String>() {
      public String select(VirtualFolder it) {
        return it.myName;
      }
    }, true);
  }

  public Iterable<SModule> getModules() {
    return CollectionSequence.fromCollection(myModules).sort(new ISelector<SModule, String>() {
      public String select(SModule it) {
        return it.getModuleName();
      }
    }, true);
  }

  private VirtualFolder primGetSubfolder(String shortName) {
    if (!(MapSequence.fromMap(mySubfolders).containsKey(shortName))) {
      MapSequence.fromMap(mySubfolders).put(shortName, new VirtualFolder(shortName));
    }
    return MapSequence.fromMap(mySubfolders).get(shortName);
  }
}
