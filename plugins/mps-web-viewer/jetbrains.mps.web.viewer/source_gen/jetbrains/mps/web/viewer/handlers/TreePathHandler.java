package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import jetbrains.mps.web.core.server.Handler;
import jetbrains.mps.project.Project;
import com.sun.net.httpserver.HttpExchange;
import jetbrains.mps.web.JsonBuilder;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.web.core.server.HttpUtil;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.ModuleId;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.StandaloneMPSProject;

public class TreePathHandler implements Handler {
  public static final String PREFIX = "/treepath.json";


  public void handle(String requestUrl, Project project, HttpExchange exchange) throws Exception {
    String suffix = requestUrl.substring(ProjectStructureHandler.PREFIX.length());
    if ((suffix == null || suffix.length() == 0)) {
      throw new IllegalArgumentException();
    }
    String[] parts = suffix.split("/");
    if (parts.length == 2) {
      String moduleId = parts[0];
      String modelId = parts[1];

      String[] path = path(project, moduleId);
      JsonBuilder json = JsonBuilder.object();
      json.addProperty("options", JsonBuilder.collection(Sequence.fromIterable(Sequence.fromArray(path)).select(new ISelector<String, JsonBuilder>() {
        public JsonBuilder select(String it) {
          return JsonBuilder.stringValue(it);
        }
      }).union(Sequence.fromIterable(Sequence.<JsonBuilder>singleton(JsonBuilder.stringValue(moduleId)))).union(Sequence.fromIterable(Sequence.<JsonBuilder>singleton(JsonBuilder.stringValue(modelId)))).toListSequence()));
      HttpUtil.doJsonResponse(json.toString(), exchange);
    } else if (parts.length == 1) {
      String moduleId = parts[0];

      String[] path = path(project, moduleId);
      JsonBuilder json = JsonBuilder.object();
      json.addProperty("options", JsonBuilder.collection(Sequence.fromIterable(Sequence.fromArray(path)).select(new ISelector<String, JsonBuilder>() {
        public JsonBuilder select(String it) {
          return JsonBuilder.stringValue(it);
        }
      }).union(Sequence.fromIterable(Sequence.<JsonBuilder>singleton(JsonBuilder.stringValue(moduleId)))).toListSequence()));
      HttpUtil.doJsonResponse(json.toString(), exchange);
    } else {
      throw new IllegalArgumentException();
    }
  }



  private final String[] path(final Project project, final String moduleId) {
    final String[][] result = {null};
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ModuleReference reference = new ModuleReference("", ModuleId.fromString(moduleId));
        SModule module = reference.resolve(MPSModuleRepository.getInstance());
        result[0] = path((StandaloneMPSProject) project, module);
      }
    });
    return result[0];
  }

  private String[] path(StandaloneMPSProject project, SModule module) {
    return project.getFolderFor(module).split("\\.");
  }
}
