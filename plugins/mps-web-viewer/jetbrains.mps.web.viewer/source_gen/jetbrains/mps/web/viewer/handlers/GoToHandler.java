package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import jetbrains.mps.web.core.server.Handler;
import jetbrains.mps.project.Project;
import com.sun.net.httpserver.HttpExchange;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.MatchResult;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.web.core.server.HttpUtil;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.persistence.NavigationParticipant;
import jetbrains.mps.workbench.goTo.navigation.RootChooseModel;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.workbench.goTo.index.RootNodeNameIndex;
import jetbrains.mps.workbench.goTo.matcher.HeadlessMPSNodeItemProvider;
import jetbrains.mps.workbench.choose.base.FakePsiContext;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import com.intellij.util.Processor;
import jetbrains.mps.workbench.goTo.navigation.RootNodeElement;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.MPSModuleRepository;

public class GoToHandler implements Handler {
  private static final String QUERY_PARAM_NAME = "?query=";
  private static final int ITEMS_LIMIT = 25;


  public void handle(String requestUrl, final Project project, HttpExchange exchange) throws Exception {
    Pattern pattern = Pattern.compile(".*\\?query=(.+)");
    Matcher matcher = pattern.matcher(requestUrl);
    if (!(matcher.matches())) {
      return;
    }
    MatchResult toMatchResult = matcher.toMatchResult();
    final String query = toMatchResult.group(1);

    final List<String> items = ListSequence.fromList(new ArrayList<String>());
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        Iterable<String> modules = getModulesJson(project, query);
        Iterable<String> models = getModelsJson(project, query);
        Iterable<String> nodes = getNodesJson(project, query);

        ListSequence.fromList(items).addSequence(Sequence.fromIterable(modules));
        ListSequence.fromList(items).addSequence(Sequence.fromIterable(models));
        ListSequence.fromList(items).addSequence(Sequence.fromIterable(nodes));
      }
    });

    HttpUtil.doJsonResponse("{ \"options\": [" + IterableUtils.join(ListSequence.fromList(items), ", ") + "] }", exchange);
  }



  private static Iterable<String> getModulesJson(final Project project, final String query) {
    return Sequence.fromIterable(((Iterable<? extends SModule>) project.getModules())).where(new IWhereFilter<SModule>() {
      public boolean accept(SModule module) {
        return module.getModuleName().toLowerCase().contains(query.toLowerCase());
      }
    }).select(new ISelector<SModule, String>() {
      public String select(SModule module) {
        return MpsJsonUtil.dumpModuleReference(project, module).toString();
      }
    });
  }



  private static Iterable<String> getModelsJson(final Project project, final String query) {
    return Sequence.fromIterable(((Iterable<? extends SModule>) project.getModules())).translate(new ITranslator2<SModule, SModel>() {
      public Iterable<SModel> translate(SModule module) {
        return module.getModels();
      }
    }).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel model) {
        return model.getModelName().toLowerCase().contains(query.toLowerCase());
      }
    }).select(new ISelector<SModel, String>() {
      public String select(SModel model) {
        return MpsJsonUtil.dumpModelReference(project, model).toString();
      }
    });
  }



  private static Iterable<String> getNodesJson(final Project project, String query) {
    final List<NavigationParticipant.NavigationTarget> nodes = ListSequence.fromList(new ArrayList<NavigationParticipant.NavigationTarget>());

    RootChooseModel chooseSNodeResult = new RootChooseModel(((MPSProject) project).getProject(), new RootNodeNameIndex());
    new HeadlessMPSNodeItemProvider(new FakePsiContext()).filterElementsHeadless(chooseSNodeResult, query, false, false, new EmptyProgressIndicator(), new Processor<Object>() {
      public boolean process(Object item) {
        ListSequence.fromList(nodes).addElement(((RootNodeElement) item).getNavigationTarget());
        return ListSequence.fromList(nodes).count() < ITEMS_LIMIT;
      }
    });

    return ListSequence.fromList(nodes).select(new ISelector<NavigationParticipant.NavigationTarget, String>() {
      public String select(NavigationParticipant.NavigationTarget it) {
        SNode node = it.getNodeReference().resolve(MPSModuleRepository.getInstance());
        return MpsJsonUtil.dumpNodeReference(project, node).toString();
      }
    });
  }
}
