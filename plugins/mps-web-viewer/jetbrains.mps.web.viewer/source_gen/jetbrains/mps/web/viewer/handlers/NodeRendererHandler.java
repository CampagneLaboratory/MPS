package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import jetbrains.mps.web.core.server.Handler;
import jetbrains.mps.project.Project;
import com.sun.net.httpserver.HttpExchange;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.web.core.server.HttpUtil;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Collection;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.HashSet;
import jetbrains.mps.web.ConceptIdDispatcher;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class NodeRendererHandler implements Handler {
  public static final String PREFIX = "/renderer/";

  public void handle(String requestUrl, final Project project, HttpExchange exchange) throws Exception {
    final SNodeReference nodeReference = SNodePointer.deserialize(requestUrl.substring(NodeRendererHandler.PREFIX.length()));
    final String[] result = new String[]{null};
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        result[0] = getRenderer(nodeReference.resolve(project.getRepository()));
      }
    });
    HttpUtil.doResponse(result[0], "application/javascript", 200, exchange);
  }

  private String getRenderer(SNode node) {
    Collection<SConcept> allConcepts = CollectionSequence.fromCollection(new HashSet<SConcept>());
    final ConceptIdDispatcher dispatcher = new ConceptIdDispatcher(node);
    collectAllConcepts(node, allConcepts);
    final StringBuilder result = new StringBuilder();
    result.append("window.registry = {\n");
    final Wrappers._boolean isFirst = new Wrappers._boolean(true);
    CollectionSequence.fromCollection(allConcepts).visitAll(new IVisitor<SConcept>() {
      public void visit(SConcept it) {
        if (!(isFirst.value)) {
          result.append(",\n");
        } else {
          isFirst.value = false;
        }
        result.append(new ReflectiveNodeRendererBuilder(it, dispatcher).buildRenderer());
      }
    });
    result.append("\n}");
    return result.toString();
  }

  private void collectAllConcepts(SNode node, Collection<SConcept> concepts) {
    CollectionSequence.fromCollection(concepts).addElement(node.getConcept());
    for (SNode childNode : Sequence.fromIterable(node.getChildren())) {
      collectAllConcepts(childNode, concepts);
    }
  }
}
