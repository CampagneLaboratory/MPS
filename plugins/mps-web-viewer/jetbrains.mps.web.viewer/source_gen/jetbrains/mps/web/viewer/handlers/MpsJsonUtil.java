package jetbrains.mps.web.viewer.handlers;

/*Generated by MPS */

import jetbrains.mps.web.JsonBuilder;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.icons.IconManager;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import com.intellij.icons.AllIcons;
import javax.swing.Icon;

public class MpsJsonUtil {
  public static JsonBuilder dumpNodeReference(Project project, SNode node) {
    JsonBuilder nodeJson = JsonBuilder.object();

    nodeJson.addProperty("type", "node");
    nodeJson.addProperty("icon", createIconJson(project, IconManager.getIconFor(node)));
    nodeJson.addProperty("node-name", node.getPresentation());
    nodeJson.addProperty("node-id", node.getNodeId().toString());
    SModel model = node.getModel();
    nodeJson.addProperty("model-name", model.getModelName());
    nodeJson.addProperty("model-id", model.getModelId().toString());
    nodeJson.addProperty("module-name", model.getModule().getModuleName());
    nodeJson.addProperty("module-id", model.getModule().getModuleId().toString());

    return nodeJson;
  }

  public static JsonBuilder dumpModelReference(Project project, SModel model) {
    JsonBuilder modelJson = JsonBuilder.object();

    modelJson.addProperty("type", "model");
    modelJson.addProperty("icon", createIconJson(project, IconManager.getIconFor(model)));
    modelJson.addProperty("model-name", model.getModelName());
    modelJson.addProperty("model-id", model.getModelId().toString());
    modelJson.addProperty("module-name", model.getModule().getModuleName());
    modelJson.addProperty("module-id", model.getModule().getModuleId().toString());

    return modelJson;
  }

  public static JsonBuilder dumpModuleReference(Project project, SModule module) {
    JsonBuilder moduleJson = JsonBuilder.object();

    moduleJson.addProperty("type", "module");
    moduleJson.addProperty("icon", createIconJson(project, IconManager.getIconFor(module)));
    moduleJson.addProperty("module-name", module.getModuleName());
    moduleJson.addProperty("module-id", module.getModuleId().toString());

    return moduleJson;
  }

  public static JsonBuilder dumpFolderReference(Project project, VirtualFolder folder) {
    JsonBuilder builder = JsonBuilder.object();

    builder.addProperty("type", "folder");
    builder.addProperty("folder-name", folder.getName());
    builder.addProperty("folder-id", folder.getName());
    builder.addProperty("icon", createIconJson(project, AllIcons.Nodes.Folder));

    return builder;
  }



  public static String createIconJson(Project project, Icon icon) {
    JsonBuilder builder = JsonBuilder.object();

    builder.addProperty("base64", IconHelper.encodeIconIntoBase64(icon));
    builder.addProperty("width", JsonBuilder.intValue(icon.getIconWidth()));
    builder.addProperty("height", JsonBuilder.intValue(icon.getIconHeight()));

    return builder.toString();
  }



  public static JsonBuilder dumpFetchMore(String type, int slice) {
    JsonBuilder builder = JsonBuilder.object();

    builder.addProperty("type", "fetch-" + type);
    builder.addProperty("fetch-" + type + "-name", "...");
    builder.addProperty("slice", "" + slice);

    return builder;
  }


}
