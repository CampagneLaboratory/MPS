package jetbrains.mps.plugin;

/*Generated by MPS */

import jetbrains.mps.generator.generationTypes.java.JavaGenerationHandler;
import jetbrains.mps.smodel.IOperationContext;
import java.util.List;
import jetbrains.mps.util.Pair;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.progress.ProgressMonitor;
import java.io.IOException;
import jetbrains.mps.generator.GenerationCanceledException;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.MPSCore;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;

public class IdeaAwareJavaGenerationHandler extends JavaGenerationHandler {
  public IdeaAwareJavaGenerationHandler() {
  }

  @Override
  public boolean compile(IOperationContext operationContext, List<Pair<IModule, List<SModelDescriptor>>> input, boolean generationOK, ProgressMonitor monitor) throws IOException, GenerationCanceledException {
    try {
      int amount = 2;
      if (generationOK) {
        amount += input.size() + 1;
      }
      monitor.start("Compiling in IDEA", amount);

      boolean compiledSuccessfully = generationOK;
      boolean[] ideaIsFresh = new boolean[]{false};
      writeFiles(monitor.subTask(1));
      monitor.advance(0);
      IProjectHandler projectHandler = getProjectHandler(operationContext.getProject());
      if (generationOK) {
        long compilationStart = System.currentTimeMillis();
        boolean needToReload = false;
        for (Pair<IModule, List<SModelDescriptor>> moduleListPair : input) {
          IModule module = moduleListPair.o1;
          if (module != null && module.reloadClassesAfterGeneration()) {
            needToReload = true;
          }
          boolean compilationResult = compileModule(module, projectHandler, ideaIsFresh, monitor.subTask(1));
          monitor.advance(0);
          compiledSuccessfully = compiledSuccessfully && compilationResult;
        }
        if (compiledSuccessfully && needToReload) {
          reloadClasses(monitor.subTask(1));
          monitor.advance(0);
        } else {
          monitor.advance(1);
        }
        info("Compilation finished in " + (System.currentTimeMillis() - compilationStart) + " ms");
      }
      if (isIDEAPresent(projectHandler) && !(ideaIsFresh[0])) {
        projectHandler.refreshFS();
        monitor.advance(1);
      }
      return compiledSuccessfully;
    } finally {
      monitor.done();
    }
  }

  protected boolean compileModule(IModule module, IProjectHandler projectHandler, boolean[] ideaIsFresh, ProgressMonitor monitor) throws IOException, GenerationCanceledException {
    if (module != null) {
      if (module.isCompileInMPS()) {
        return compileModuleInMPS(module, monitor);
      } else {
        return compileModuleInIDEA(module, projectHandler, ideaIsFresh, monitor);
      }
    }
    return true;
  }

  protected boolean compileModuleInIDEA(IModule module, IProjectHandler projectHandler, boolean[] ideaIsFresh, ProgressMonitor monitor) throws IOException, GenerationCanceledException {
    boolean compiledSuccessfully = true;
    if (module != null) {
      if (!(isIDEAPresent(projectHandler))) {
        error("Module is compiled in IntelliJ IDEA but IntelliJ IDEA isn't present.");
        error("Can't compile it.");
        compiledSuccessfully = false;
      } else {
        checkMonitorCanceled(monitor);
        String info = "compiling in IntelliJ IDEA...";
        CompilationResult compilationResult = null;
        try {
          monitor.start(info, 4);
          monitor.step("refreshing filesystem..");
          projectHandler.refreshFS();
          ideaIsFresh[0] = true;
          monitor.advance(1);
          monitor.step("compiling..");
          info(info);
          compilationResult = projectHandler.buildModule(module.getGeneratorOutputPath());

        } finally {
          monitor.done();
        }
        if (compilationResult == null || compilationResult.getErrors() > 0) {
          compiledSuccessfully = false;
        }
        if (compilationResult != null) {
          if (compilationResult.getErrors() > 0) {
            error("" + compilationResult);
          } else
          if (compilationResult.getWarnings() > 0) {
            warning("" + compilationResult);
          } else {
            info("" + compilationResult);
          }
        }
      }
      checkMonitorCanceled(monitor);
    }
    return compiledSuccessfully;
  }

  @Override
  protected void performWritingFilesTask(final Runnable writingTask) {
    ModelAccess.instance().writeFilesInEDT(writingTask);
  }

  protected boolean isIDEAPresent(IProjectHandler handler) {
    return !(MPSCore.getInstance().isTestMode()) && handler != null;
  }

  protected IProjectHandler getProjectHandler(Project p) {
    if (MPSCore.getInstance().isTestMode()) {
      return null;
    }
    return MPSPlugin.getInstance().getProjectHandler(ProjectHelper.toIdeaProject(p));
  }
}
