package jetbrains.mps.plugin;

/*Generated by MPS */

import com.intellij.openapi.components.ProjectComponent;
import jetbrains.mps.internal.make.runtime.java.IdeaJavaCompiler;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.MPSCore;
import jetbrains.mps.make.MPSCompilationResult;
import jetbrains.mps.project.IModule;
import java.rmi.RemoteException;

public class IdeaJavaCompilerImpl implements ProjectComponent, IdeaJavaCompiler {
  private final Project myProject;
  private IProjectHandler myIdeaProjectHandler;

  public IdeaJavaCompilerImpl(Project project) {
    myProject = project;
  }

  public void projectOpened() {
    new Thread(new Runnable() {
      public void run() {
        IdeaJavaCompilerImpl.this.myIdeaProjectHandler = getIdeaProjectHandler();
      }
    }).start();
  }

  public void projectClosed() {
    myIdeaProjectHandler = null;
  }

  @NotNull
  public String getComponentName() {
    return "IDEA Java Compiler";
  }

  public void initComponent() {
  }

  public void disposeComponent() {
  }

  public boolean isValid() {
    return !(MPSCore.getInstance().isTestMode()) && myIdeaProjectHandler != null;
  }

  public MPSCompilationResult compileModules(IModule[] modules) {
    if (!(isValid())) {
      return null;
    }
    String[] modulePaths = new String[modules.length];
    for (int i = 0; i < modules.length; i++) {
      modulePaths[i] = modules[i].getGeneratorOutputPath();
    }
    try {
      CompilationResult cr = myIdeaProjectHandler.buildModules(modulePaths);
      if (cr != null) {
        return new MPSCompilationResult(cr.getErrors(), cr.getWarnings(), cr.isAborted(), cr.isCompiledAnything());
      }
    } catch (RemoteException e) {
      e.printStackTrace();
    }
    return null;
  }

  private IProjectHandler getIdeaProjectHandler() {
    if (MPSCore.getInstance().isTestMode()) {
      return null;
    }
    return MPSPlugin.getInstance().getProjectHandler(myProject);
  }
}
