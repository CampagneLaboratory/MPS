package jetbrains.mps.plugin;

/*Generated by MPS */

import com.intellij.openapi.components.ProjectComponent;
import jetbrains.mps.internal.make.runtime.java.IdeaJavaCompiler;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.MPSCore;
import jetbrains.mps.make.MPSCompilationResult;
import jetbrains.mps.project.IModule;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.SModuleOperations;
import java.util.Arrays;
import java.util.Collections;
import org.jetbrains.mps.openapi.module.SModule;
import java.rmi.RemoteException;

public class IdeaJavaCompilerImpl implements ProjectComponent, IdeaJavaCompiler {
  private final Project myProject;
  private IProjectHandler myIdeaProjectHandler;

  public IdeaJavaCompilerImpl(Project project) {
    myProject = project;
  }

  @Override
  public void projectOpened() {
    new Thread(new Runnable() {
      @Override
      public void run() {
        IdeaJavaCompilerImpl.this.myIdeaProjectHandler = getIdeaProjectHandler();
      }
    }).start();
  }

  @Override
  public void projectClosed() {
    myIdeaProjectHandler = null;
  }

  @NotNull
  @Override
  public String getComponentName() {
    return "IDEA Java Compiler";
  }

  @Override
  public void initComponent() {
  }

  @Override
  public void disposeComponent() {
  }

  @Override
  public boolean isValid() {
    return !(MPSCore.getInstance().isTestMode()) && myIdeaProjectHandler != null;
  }

  @Override
  public MPSCompilationResult compileModules(IModule[] modules) {
    if (!(isValid())) {
      return null;
    }
    Set<String> modulePaths = SetSequence.fromSet(new HashSet<String>());
    for (IModule module : modules) {
      for (SModel model : Sequence.fromIterable(module.getModels())) {
        SetSequence.fromSet(modulePaths).addElement(SModuleOperations.getOutputPathFor(model));
      }
    }
    try {
      CompilationResult cr = myIdeaProjectHandler.buildModules(SetSequence.fromSet(modulePaths).toGenericArray(String.class));
      if (cr != null) {
        return new MPSCompilationResult(cr.getErrors(), cr.getWarnings(), cr.isAborted(), (cr.isCompiledAnything() ?
          Arrays.asList(modules) :
          Collections.<SModule>emptySet()
        ));
      }
    } catch (RemoteException e) {
      e.printStackTrace();
    }
    return null;
  }

  private IProjectHandler getIdeaProjectHandler() {
    if (MPSCore.getInstance().isTestMode()) {
      return null;
    }
    return MPSPlugin.getInstance().getProjectHandler(myProject);
  }
}
