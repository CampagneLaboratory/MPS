package jetbrains.mps.build.packaging.pluginSolution.plugin;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModelDescriptor;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import java.util.List;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.Solution;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.project.StandaloneMPSProject;
import com.intellij.openapi.application.ModalityState;
import java.util.Arrays;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.smodel.Language;
import com.intellij.openapi.vfs.VirtualFile;
import java.io.File;
import jetbrains.mps.smodel.SNode;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import jetbrains.mps.smodel.SModel;
import com.intellij.openapi.application.PathMacros;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.build.mps.util.PathConverter;
import jetbrains.mps.build.mps.util.VisibleModules;
import jetbrains.mps.build.mps.util.ModuleLoader;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.project.IModule;
import jetbrains.mps.build.util.Context;
import jetbrains.mps.build.util.RelativePathHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class BuildGeneratorImpl extends AbstractBuildGenerator {
  protected static Log log = LogFactory.getLog(BuildGeneratorImpl.class);

  private final Project myProject;
  private IOperationContext myOperationContext;

  public BuildGeneratorImpl(Project project, IOperationContext context) {
    this.myProject = project;
    this.myOperationContext = context;
    String projectName = this.myProject.getName();
    if (projectName.endsWith(MPSExtentions.DOT_MPS_PROJECT)) {
      projectName = projectName.substring(0, projectName.length() - MPSExtentions.DOT_MPS_PROJECT.length());
    }
    this.setProjectName(projectName);
    this.setValidDefaultSolutionName(projectName);
  }

  public void generate() {
    ModelAccess.instance().runCommandInEDT(new Runnable() {
      public void run() {
        final SModelDescriptor descriptor = BuildGeneratorImpl.this.getSModelDescriptor(new EmptyProgressIndicator());
        final String projectName = BuildGeneratorImpl.this.getProjectName();
        final String projectBasedirPath = BuildGeneratorImpl.this.myProject.getBaseDir().getPath();
        final List<NodeData> modules = BuildGeneratorImpl.this.getModules();
        final List<ModuleReference> moduleReferencesToAdd = BuildGeneratorImpl.this.getModuleReferencesToAdd();
        Runnable runnable;
        Solution solution = (Solution) descriptor.getModule();
        for (ModuleReference ref : ListSequence.fromList(moduleReferencesToAdd)) {
          (solution).getModuleDescriptor().getUsedLanguages().add(ref);
        }
        for (ModuleReference ref : ListSequence.fromList(moduleReferencesToAdd)) {
          descriptor.getSModel().addLanguage(ref);
        }
        runnable = BuildGeneratorImpl.this.generate(((EditableSModelDescriptor) descriptor), projectName, projectBasedirPath, modules);
        runnable.run();
        final MPSProject project = BuildGeneratorImpl.this.myProject.getComponent(MPSProject.class);
        project.addModule(solution.getModuleReference());
        ApplicationManager.getApplication().invokeLater(new Runnable() {
          public void run() {
            ProgressManager.getInstance().run(new Task.Modal(BuildGeneratorImpl.this.myProject, "Reloading Classes", false) {
              public void run(@NotNull ProgressIndicator progressIndicator) {
                progressIndicator.setIndeterminate(true);
                progressIndicator.setText("Reloading Classes... Please Wait");
                ModelAccess.instance().runWriteAction(new Runnable() {
                  public void run() {
                    ((StandaloneMPSProject) project).update();
                  }
                });
              }
            });
          }
        }, ModalityState.NON_MODAL);
      }
    }, myProject.getComponent(MPSProject.class));
  }

  protected List<ModuleReference> getModuleReferencesToAdd() {
    return Arrays.asList(ModuleRepositoryFacade.getInstance().getModule("jetbrains.mps.build", Language.class).getModuleReference(), ModuleRepositoryFacade.getInstance().getModule("jetbrains.mps.build.mps", Language.class).getModuleReference());
  }

  public SModelDescriptor getSModelDescriptor(ProgressIndicator indicator) {
    if (this.getCreateModel()) {
      Solution solution;
      if (this.getCreateSolution()) {
        VirtualFile projectBaseDir = this.myProject.getBaseDir();
        //  get solution 
        String solutionName = this.getNewSolutionName();
        String solutionBaseDir = projectBaseDir.getPath() + File.separator + "solutions" + File.separator + solutionName;
        MPSProject mpsProject = this.myProject.getComponent(MPSProject.class);
        indicator.setText("Creating Solution...");
        solution = BuildGeneratorUtil.createSolution(mpsProject, solutionName, solutionBaseDir);
      } else {
        solution = this.getSolution();
      }
      indicator.setText("Creating Model...");
      return BuildGeneratorUtil.createModel(this.getNewModelName(), solution);
    } else {
      return this.getModel();
    }
  }

  private void setValidDefaultSolutionName(String projectName) {
    String solutionNamePrefix = projectName + ".build";
    String solutionName = solutionNamePrefix;
    int count = 0;
    while (!(this.isValidSolutionName(solutionName))) {
      solutionName = solutionNamePrefix + count;
      count++;
    }
    this.setNewSolutionName(solutionName);
  }

  public Runnable generate(final EditableSModelDescriptor targetModelDescriptor, String name, String basedir, List<NodeData> selectedData) {
    final SNode buildProject = this.createMPSLayout(targetModelDescriptor, name, basedir, selectedData);
    return new Runnable() {
      public void run() {
        BuildGeneratorImpl.this.finishGeneration(targetModelDescriptor, buildProject);
      }
    };
  }

  protected SNode createMPSLayout(SModelDescriptor targetModelDescriptor, String name, String basedir, List<NodeData> selectedData) {
    Set<SNode> modules = SetSequence.fromSet(new LinkedHashSet<SNode>());
    SNode folder = new BuildGeneratorImpl.QuotationClass_un708i_a0a1a5().createNode(name);

    SModel targetSModel = targetModelDescriptor.getSModel();
    BuildGeneratorImpl.createContent(selectedData, folder, modules, targetSModel);

    Set<String> userMacroNames = PathMacros.getInstance().getUserMacroNames();
    List<SNode> macroses = new ArrayList<SNode>();
    for (String macro : SetSequence.fromSet(userMacroNames)) {
      ListSequence.fromList(macroses).addElement(new BuildGeneratorImpl.QuotationClass_un708i_a0a0a0i0f().createNode(macro));
    }


    SNode buildProject = new BuildGeneratorImpl.QuotationClass_un708i_a0a11a5().createNode(name + ".zip", folder, name, SetSequence.fromSet(modules).toListSequence(), macroses);

    // add mps layout to the target model 
    SModelOperations.addRootNode(targetSModel, buildProject);

    PathConverter pathConverter = new PathConverter(buildProject);

    VisibleModules visible = new VisibleModules(buildProject, null);
    visible.collect();
    for (SNode module : SetSequence.fromSet(modules)) {
      try {
        new ModuleLoader(module, visible, pathConverter, null).importRequired();
      } catch (ModuleLoader.ModuleLoaderException ex) {
        if (log.isErrorEnabled()) {
          log.error(ex.getMessage());
        }
      }
    }

    return buildProject;
  }

  protected void finishGeneration(final EditableSModelDescriptor targetModelDescriptor, SNode mpsLayout) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        targetModelDescriptor.getModule().save();
        targetModelDescriptor.save();
      }
    });
    NavigationSupport.getInstance().openNode(myOperationContext, mpsLayout, true, true);
  }

  @Nullable
  public static SNode createComponent(NodeData data, SModel targetSModel, Set<SNode> modules) {
    if (data instanceof ModuleData) {
      IModule module = ((ModuleData) data).getModule();

      String relativeDescriptorPath;
      try {
        relativeDescriptorPath = Context.defaultContext().getRelativePathHelper(targetSModel).makeRelative(module.getDescriptorFile().getPath());
      } catch (RelativePathHelper.PathException e) {
        if (log.isWarnEnabled()) {
          log.warn("Can't make relative path from build model base directory to module" + module, e);
        }
        return null;
      }
      String[] parts = relativeDescriptorPath.split("/");
      SNode path = new BuildGeneratorImpl.QuotationClass_un708i_a0a5a0a0().createNode();
      SNode compositePart = SLinkOperations.getTarget(path, "compositePart", true);
      for (String part : parts) {
        SPropertyOperations.set(compositePart, "head", part);
        SLinkOperations.setNewChild(compositePart, "tail", "jetbrains.mps.build.structure.BuildCompositePath");
        compositePart = SLinkOperations.getTarget(compositePart, "tail", true);
      }
      SNodeOperations.deleteNode(compositePart);

      SNode moduleNode;
      if (module instanceof Solution) {
        moduleNode = new BuildGeneratorImpl.QuotationClass_un708i_a0a0a11a0a0().createNode(path);
      } else if (module instanceof Language) {
        moduleNode = new BuildGeneratorImpl.QuotationClass_un708i_a0a0a0l0a0a().createNode(path);
      } else {
        moduleNode = new BuildGeneratorImpl.QuotationClass_un708i_a0a0a0l0a0a_0().createNode(path);
      }
      SetSequence.fromSet(modules).addElement(moduleNode);
      return new BuildGeneratorImpl.QuotationClass_un708i_a0n0a0a().createNode(moduleNode);
    } else if (data instanceof NamespaceData) {
      String namespace = ((NamespaceData) data).getText();
      return new BuildGeneratorImpl.QuotationClass_un708i_a0b0a0a0().createNode(namespace);
    }
    return null;
  }

  private static void createContent(List<NodeData> selectedData, SNode folder, Set<SNode> modules, SModel targetSModel) {
    Map<NodeData, SNode> createdComponent = MapSequence.fromMap(new HashMap<NodeData, SNode>());
    Set<SNode> topLevel = SetSequence.fromSet(new LinkedHashSet<SNode>());
    for (NodeData data : ListSequence.fromList(selectedData)) {
      // creating component 
      SNode component = createComponent(data, targetSModel, modules);
      if (component == null) {
        continue;
      }
      MapSequence.fromMap(createdComponent).put(data, component);
      SetSequence.fromSet(topLevel).addElement(component);
      // dealing with children 
      if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.structure.BuildLayout_AbstractContainer")) {
        List<NodeData> children = data.getChildren();
        for (NodeData child : ListSequence.fromList(children)) {
          if (MapSequence.fromMap(createdComponent).containsKey(child)) {
            SNode childComponent = MapSequence.fromMap(createdComponent).get(child);
            ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(component, "jetbrains.mps.build.structure.BuildLayout_AbstractContainer"), "children", true)).addElement(childComponent);
            if (SetSequence.fromSet(topLevel).contains(childComponent)) {
              SetSequence.fromSet(topLevel).removeElement(childComponent);
            }
          }
        }
      }
      // dealing with parent 
      NodeData parent = data.getParent();
      if (parent == null) {
        break;
      }
      if (MapSequence.fromMap(createdComponent).containsKey(parent)) {
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(MapSequence.fromMap(createdComponent).get(parent), "jetbrains.mps.build.structure.BuildLayout_AbstractContainer"), "children", true)).addElement(component);
        SetSequence.fromSet(topLevel).removeElement(component);
      }
    }
    // 
    for (SNode topLevelComponent : SetSequence.fromSet(topLevel)) {
      ListSequence.fromList(SLinkOperations.getTargets(folder, "children", true)).addElement(topLevelComponent);
    }
  }

  public static class QuotationClass_un708i_a0a5a0a0 {
    public QuotationClass_un708i_a0a5a0a0() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildSourceProjectRelativePath", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildCompositePath", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_4 = quotedNode_2;
          quotedNode1_4.setProperty("head", "");
          quotedNode_1.addChild("compositePart", quotedNode1_4);
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_un708i_a0a0a11a0a0 {
    public QuotationClass_un708i_a0a0a11a0a0() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.mps.structure.BuildMps_Solution", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        quotedNode1_3.setProperty("compact", "true");
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("path", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_un708i_a0a0a0l0a0a {
    public QuotationClass_un708i_a0a0a0l0a0a() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.mps.structure.BuildMps_Language", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        quotedNode1_3.setProperty("compact", "true");
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("path", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_un708i_a0a0a0l0a0a_0 {
    public QuotationClass_un708i_a0a0a0l0a0a_0() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.mps.structure.BuildMps_DevKit", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        quotedNode1_3.setProperty("compact", "true");
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("path", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_un708i_a0n0a0a {
    public QuotationClass_un708i_a0n0a0a() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.mps.structure.BuildMpsLayout_ModuleJars", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReferent("module", (SNode) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_un708i_a0b0a0a0 {
    public QuotationClass_un708i_a0b0a0a0() {
    }

    public SNode createNode(Object parameter_7) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildLayout_Folder", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_4 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildStringNotEmpty", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_5 = quotedNode_2;
          {
            quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildTextStringPart", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_6 = quotedNode_3;
            quotedNode1_6.setProperty("text", (String) parameter_7);
            quotedNode_2.addChild("parts", quotedNode1_6);
          }
          quotedNode_1.addChild("containerName", quotedNode1_5);
        }
        result = quotedNode1_4;
      }
      return result;
    }
  }

  public static class QuotationClass_un708i_a0a1a5 {
    public QuotationClass_un708i_a0a1a5() {
    }

    public SNode createNode(Object parameter_7) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildLayout_Folder", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_4 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildStringNotEmpty", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_5 = quotedNode_2;
          {
            quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildTextStringPart", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_6 = quotedNode_3;
            quotedNode1_6.setProperty("text", (String) parameter_7);
            quotedNode_2.addChild("parts", quotedNode1_6);
          }
          quotedNode_1.addChild("containerName", quotedNode1_5);
        }
        result = quotedNode1_4;
      }
      return result;
    }
  }

  public static class QuotationClass_un708i_a0a0a0i0f {
    public QuotationClass_un708i_a0a0a0i0f() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildFolderMacro", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("name", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_un708i_a0a11a5 {
    public QuotationClass_un708i_a0a11a5() {
    }

    public SNode createNode(Object parameter_24, Object parameter_25, Object parameter_26, Object parameter_27, Object parameter_28) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      SNode quotedNode_7 = null;
      SNode quotedNode_8 = null;
      SNode quotedNode_9 = null;
      SNode quotedNode_10 = null;
      SNode quotedNode_11 = null;
      SNode quotedNode_12 = null;
      SNode quotedNode_13 = null;
      SNode quotedNode_14 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildProject", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_15 = quotedNode_1;
        quotedNode1_15.setProperty("internalBaseDirectory", ".");
        quotedNode1_15.setProperty("name", (String) parameter_26);
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildSourceProjectRelativePath", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_16 = quotedNode_2;
          quotedNode_1.addChild("scriptsDir", quotedNode1_16);
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildLayout", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_17 = quotedNode_3;
          {
            quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildLayout_Zip", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_18 = quotedNode_8;
            {
              quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildStringNotEmpty", null, GlobalScope.getInstance(), false);
              SNode quotedNode1_19 = quotedNode_10;
              {
                quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildTextStringPart", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_20 = quotedNode_12;
                quotedNode1_20.setProperty("text", (String) parameter_24);
                quotedNode_10.addChild("parts", quotedNode1_20);
              }
              quotedNode_8.addChild("containerName", quotedNode1_19);
            }
            {
              quotedNode_11 = (SNode) parameter_25;
              SNode quotedNode1_21;
              if (_parameterValues_129834374.contains(quotedNode_11)) {
                quotedNode1_21 = HUtil.copyIfNecessary(quotedNode_11);
              } else {
                _parameterValues_129834374.add(quotedNode_11);
                quotedNode1_21 = quotedNode_11;
              }
              if (quotedNode1_21 != null) {
                quotedNode_8.addChild("children", HUtil.copyIfNecessary(quotedNode1_21));
              }
            }
            quotedNode_3.addChild("children", quotedNode1_18);
          }
          quotedNode_1.addChild("layout", quotedNode1_17);
        }
        {
          quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.structure.BuildJavaPlugin", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_22 = quotedNode_4;
          quotedNode_1.addChild("plugins", quotedNode1_22);
        }
        {
          quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.mps.structure.BuildMPSPlugin", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_23 = quotedNode_5;
          quotedNode_1.addChild("plugins", quotedNode1_23);
        }
        {
          List<SNode> nodes = (List<SNode>) parameter_27;
          for (SNode child : nodes) {
            quotedNode_1.addChild("parts", HUtil.copyIfNecessary(child));
          }
        }
        {
          List<SNode> nodes = (List<SNode>) parameter_28;
          for (SNode child : nodes) {
            quotedNode_1.addChild("macros", HUtil.copyIfNecessary(child));
          }
        }
        result = quotedNode1_15;
      }
      return result;
    }
  }
}
