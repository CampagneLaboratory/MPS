package testPrimitiveType.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptTypeWithProperties = new ConceptDescriptorBuilder("testPrimitiveType.structure.TypeWithProperties", MetaIdFactory.conceptId(0x8a53c70515e44f87L, 0x8796457845605512L, 0x9cc88b154a54d6cL)).super_("jetbrains.mps.baseLanguage.structure.Type").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).parents("jetbrains.mps.baseLanguage.structure.Type").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(706089536801035938L, "str"), new ConceptDescriptorBuilder.Prop(706089536801035944L, "num"), new ConceptDescriptorBuilder.Prop(706089536801035947L, "bool")).properties("str", "num", "bool").alias("type_with_properties", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptTypeWithProperties);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0f, conceptFqName)) {
      case 0:
        return myConceptTypeWithProperties;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0f = new String[]{"testPrimitiveType.structure.TypeWithProperties"};
}
