package jetbrains.mps.transformation.TLBase.generator.baseLanguage.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.PropertyMacro_ParameterObject;
import jetbrains.mps.transformation.TLBase.generator.baseLanguage.template.TemplateFunctionMethodName;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.transformation.TLBase.generator.baseLanguage.template.util.QueriesUtil;
import java.util.List;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;

public class QueriesGenerated {

  public static Object propertyMacro_GetPropertyValue_1167762379110(final IOperationContext operationContext, final PropertyMacro_ParameterObject _parameterObject) {
    return TemplateFunctionMethodName.createRootRule_Condition(_parameterObject.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1167765482559(final IOperationContext operationContext, final PropertyMacro_ParameterObject _parameterObject) {
    return TemplateFunctionMethodName.baseMappingRule_Condition(_parameterObject.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1167764877550(final IOperationContext operationContext, final PropertyMacro_ParameterObject _parameterObject) {
    return TemplateFunctionMethodName.propertyMacro_GetPropertyValue(_parameterObject.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1167770891051(final IOperationContext operationContext, final PropertyMacro_ParameterObject _parameterObject) {
    return TemplateFunctionMethodName.referenceMacro_GetReferent(_parameterObject.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1167946761277(final IOperationContext operationContext, final PropertyMacro_ParameterObject _parameterObject) {
    return TemplateFunctionMethodName.ifMacro_Condition(_parameterObject.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1167952935373(final IOperationContext operationContext, final PropertyMacro_ParameterObject _parameterObject) {
    return TemplateFunctionMethodName.sourceSubstituteMacro_SourceNodesQuery(_parameterObject.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1168025033018(final IOperationContext operationContext, final PropertyMacro_ParameterObject _parameterObject) {
    return TemplateFunctionMethodName.sourceSubstituteMacro_SourceNodeQuery(_parameterObject.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1170727064429(final IOperationContext operationContext, final PropertyMacro_ParameterObject _parameterObject) {
    return TemplateFunctionMethodName.mapSrcMacro_MapperFunction(_parameterObject.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1184374857703(final IOperationContext operationContext, final PropertyMacro_ParameterObject _parameterObject) {
    return TemplateFunctionMethodName.templateFragment_ContextNodeQuery(_parameterObject.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1184617630764(final IOperationContext operationContext, final PropertyMacro_ParameterObject _parameterObject) {
    return TemplateFunctionMethodName.weaving_MappingRule_ContextNodeQuery(_parameterObject.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1195504684817(final IOperationContext operationContext, final PropertyMacro_ParameterObject _parameterObject) {
    return TemplateFunctionMethodName.mappingScript_CodeBlock(_parameterObject.getNode());
  }

  public static SNode sourceNodeQuery_1168025917226(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "body", true);
  }

  public static SNode sourceNodeQuery_1168025905128(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "body", true);
  }

  public static SNode sourceNodeQuery_1168025932423(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "body", true);
  }

  public static SNode sourceNodeQuery_1168025938897(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "body", true);
  }

  public static SNode sourceNodeQuery_1168025925887(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "body", true);
  }

  public static SNode sourceNodeQuery_1168025947268(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "body", true);
  }

  public static SNode sourceNodeQuery_1185220175985(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return QueriesUtil.getInputNodeTypeForTemplateFunction(node);
  }

  public static SNode sourceNodeQuery_1168025330833(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "body", true);
  }

  public static SNode sourceNodeQuery_1185218732312(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return QueriesUtil.getInputNodeTypeForTemplateFunction(node);
  }

  public static SNode sourceNodeQuery_1170727064418(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "body", true);
  }

  public static SNode sourceNodeQuery_1185220115342(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return QueriesUtil.getInputNodeTypeForTemplateFunction(node);
  }

  public static SNode sourceNodeQuery_1184374857693(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "body", true);
  }

  public static SNode sourceNodeQuery_1185220221463(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return QueriesUtil.getInputNodeTypeForTemplateFunction(node);
  }

  public static SNode sourceNodeQuery_1184617630754(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "body", true);
  }

  public static SNode sourceNodeQuery_1185220245753(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return QueriesUtil.getInputNodeTypeForTemplateFunction(node);
  }

  public static SNode sourceNodeQuery_1195504684807(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "body", true);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619599466(SNode node, ITemplateGenerator generator) {
    return QueriesUtil.getQueriesGeneratedClass(generator);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619796790(SNode node, ITemplateGenerator generator) {
    return QueriesUtil.getQueriesGeneratedClass(generator);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619844945(SNode node, ITemplateGenerator generator) {
    return QueriesUtil.getQueriesGeneratedClass(generator);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619847603(SNode node, ITemplateGenerator generator) {
    return QueriesUtil.getQueriesGeneratedClass(generator);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619852561(SNode node, ITemplateGenerator generator) {
    return QueriesUtil.getQueriesGeneratedClass(generator);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619865210(SNode node, ITemplateGenerator generator) {
    return QueriesUtil.getQueriesGeneratedClass(generator);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619868267(SNode node, ITemplateGenerator generator) {
    return QueriesUtil.getQueriesGeneratedClass(generator);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619877062(SNode node, ITemplateGenerator generator) {
    return QueriesUtil.getQueriesGeneratedClass(generator);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619879860(SNode node, ITemplateGenerator generator) {
    return QueriesUtil.getQueriesGeneratedClass(generator);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1184619882833(SNode node, ITemplateGenerator generator) {
    return QueriesUtil.getQueriesGeneratedClass(generator);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1195503404236(SNode node, ITemplateGenerator generator) {
    return QueriesUtil.getQueriesGeneratedClass(generator);
  }

  public static void mappingScript_CodeBlock_1199965771120(SModel model, ITemplateGenerator generator) {
    List<SNode> nodes = SModelOperations.getNodes(model, "jetbrains.mps.transformation.TLBase.structure.TemplateFunctionParameter_sourceNode");
    for(SNode node : nodes) {
      SNode replacement = SConceptOperations.createNewNode("jetbrains.mps.baseLanguageInternal.structure.TypeHintExpression", null);
      SLinkOperations.setTarget(replacement, "typeHint", TypeChecker.getInstance().getTypeOf(node), true);
      SNodeOperations.replaceWithAnother(node, replacement);
      SLinkOperations.setTarget(replacement, "expression", node, true);
    }
  }

}
