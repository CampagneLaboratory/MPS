package jetbrains.mps.bootstrap.smodelLanguage.helgins;

/*Generated by MPS  */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.helgins.structure.ApplicableNodeCondition;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelUID;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_Node_GetAncestorsOperation_InferenceRule implements InferenceRule_Runtime {

  public  typeof_Node_GetAncestorsOperation_InferenceRule() {
  }

  public void applyRule(SNode argument) {
    RulesFunctions.fun_check_isAppliedTo_SLinkAccessOrNode(argument);
    {
      SNode parm;
      Iterator<SNode> parm_iterator = SLinkOperations.getTargets(argument, "parameter", true).iterator();
      while(true) {
        if(!(parm_iterator.hasNext())) {
          break;
        }
        parm = parm_iterator.next();
        if(!((Boolean)Queries.CustomExpression_check_isApplicableOperationParameter(argument, parm))) {
          TypeChecker.getInstance().reportTypeError(parm, "not expected here");
        }
      }
    }
    TypeChecker.getInstance().getRuntimeSupport().givetype((SNode)Queries.CustomExpression_get_SNodeListType_forOperation_withOpeartionParameter_concept(argument), argument);
  }
  public String getApplicableConceptFQName() {
    return "jetbrains.mps.bootstrap.smodelLanguage.structure.Node_GetAncestorsOperation";
  }
  public ApplicableNodeCondition getNodeCondition() {
    SModel model = SModelRepository.getInstance().getModelDescriptor(SModelUID.fromString("jetbrains.mps.bootstrap.smodelLanguage.helgins")).getSModel();
    return (ApplicableNodeCondition)BaseAdapter.fromNode(model.getNodeById("1178287490220"));
  }
  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }
  public boolean overrides() {
    return false;
  }
}
