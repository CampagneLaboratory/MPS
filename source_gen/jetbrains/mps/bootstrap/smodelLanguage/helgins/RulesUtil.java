package jetbrains.mps.bootstrap.smodelLanguage.helgins;

/*Generated by MPS  */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.helgins.inference.TypeChecker;

public class RulesUtil {

  public static SNode typeOf_leftExpression_for_SNodeOperation(SNode op) {
    SNode parent = SNodeOperations.getParent(op, null, false, false);
    if(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression")) {
      SNode leftExpression = SLinkOperations.getTarget(parent, "leftExpression", true);
      if((leftExpression != null)) {
        TypeChecker.getInstance().getRuntimeSupport().check(leftExpression);
        return TypeChecker.getInstance().getRuntimeSupport().typeOf(leftExpression);
      }
    }
    return null;
  }
  public static void check_isAppliedToConcept(SNode op) {
    SNode type = RulesUtil.typeOf_leftExpression_for_SNodeOperation(op);
    if(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(type, new QuotationClass_3().createNode()))) {
      TypeChecker.getInstance().reportTypeError(op, "operation is only applicable to concept");
    }
  }
}
