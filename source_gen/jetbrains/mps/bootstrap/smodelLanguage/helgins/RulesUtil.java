package jetbrains.mps.bootstrap.smodelLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptPropertyOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.DataTypeUtil;
import jetbrains.mps.bootstrap.structureLanguage.structure.DataTypeDeclaration;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.NameUtil;
import java.util.List;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;

public class RulesUtil {

  public static SNode leftExpression(SNode op) {
    SNode parent = SNodeOperations.getParent(op, null, false, false);
    if(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression")) {
      return SLinkOperations.getTarget(parent, "leftExpression", true);
    }
    return null;
  }

  public static void checkAppliedCorrectly_generic(final SNode op) {
    final SNode leftExpression = RulesUtil.leftExpression(op);
    final SNode LeftType_typevar_1186058295229 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);
    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186058295229), TypeChecker.getInstance().getRuntimeSupport().typeOf(leftExpression), leftExpression, null, "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1186058309840");
    TypeChecker.getInstance().getRuntimeSupport().whenConcrete(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186058295229), new Runnable() {

      public void run() {
        String applicableErrorString = "operation is not applicable to expression";
        boolean isGood = false;
        Set<String> applicables = new HashSet<String>();
        if(SConceptPropertyOperations.getBoolean(op, "applicable_to_model")) {
          applicables.add("smodel");
          if(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186058295229), new QuotationClass_40().createNode(), false, false)) {
            isGood = true;
          }
        }
        if(SConceptPropertyOperations.getBoolean(op, "applicable_to_concept")) {
          if(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186058295229), new QuotationClass_41().createNode(), false, false)) {
            isGood = true;
          }
        }
        if(SConceptPropertyOperations.getBoolean(op, "applicable_to_node")) {
          if(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186058295229), new QuotationClass_42().createNode(), false, false)) {
            isGood = true;
          }
        }
        // ===========
        if(SConceptPropertyOperations.getBoolean(op, "applicable_to_link")) {
          SNode leftOp = SLinkOperations.getTarget(leftExpression, "nodeOperation", true);
          if(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOp), "jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccess")) {
            isGood = true;
          }
        }
        if(SConceptPropertyOperations.getBoolean(op, "applicable_to_linkList")) {
          SNode leftOp = SLinkOperations.getTarget(leftExpression, "nodeOperation", true);
          if(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOp), "jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccess")) {
            isGood = true;
          }
        }
        if(SConceptPropertyOperations.getBoolean(op, "applicable_to_simple_property")) {
          SNode leftOp = SLinkOperations.getTarget(leftExpression, "nodeOperation", true);
          if(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOp), "jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess")) {
            SNode propertyDecl = SLinkOperations.getTarget(leftOp, "property", false);
            if(DataTypeUtil.isSimple(((DataTypeDeclaration)SNodeOperations.getAdapter(SLinkOperations.getTarget(propertyDecl, "dataType", false))))) {
              isGood = true;
            }
          }
        }
        if(SConceptPropertyOperations.getBoolean(op, "applicable_to_enum_property")) {
          SNode leftOp = SLinkOperations.getTarget(leftExpression, "nodeOperation", true);
          if(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOp), "jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess")) {
            SNode propertyDecl = SLinkOperations.getTarget(leftOp, "property", false);
            if(DataTypeUtil.isEnum(((DataTypeDeclaration)SNodeOperations.getAdapter(SLinkOperations.getTarget(propertyDecl, "dataType", false))))) {
              isGood = true;
            }
          }
        }
        if(SConceptPropertyOperations.getBoolean(op, "applicable_to_concept_property")) {
          SNode leftOp = SLinkOperations.getTarget(leftExpression, "nodeOperation", true);
          if(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOp), "jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptPropertyAccess")) {
            isGood = true;
          }
        }
        if(!(isGood)) {
          TypeChecker.getInstance().reportTypeError(leftExpression, applicableErrorString, "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1186067417054");
        }
      }

    }, "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1186065634833");
  }

  public static boolean checkAppliedTo_LinkListAccess_aggregation(SNode op) {
    SNode leftExpression = RulesUtil.leftExpression(op);
    if(SNodeOperations.isInstanceOf(leftExpression, "jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression")) {
      SNode leftOp = SLinkOperations.getTarget(leftExpression, "nodeOperation", true);
      if(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOp), "jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccess")) {
        SNode link = SLinkOperations.getTarget(leftOp, "link", false);
        if(SPropertyOperations.hasValue(link, "metaClass", "aggregation", null)) {
          return true;
        }
      }
    }
    TypeChecker.getInstance().reportTypeError(op, "operation is only applicable to aggregation-link-list-access", "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1178287491613");
    return false;
  }

  public static boolean checkAppliedTo_LinkAccess_aggregation(SNode op) {
    SNode leftExpression = RulesUtil.leftExpression(op);
    if(SNodeOperations.isInstanceOf(leftExpression, "jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression")) {
      SNode leftOp = SLinkOperations.getTarget(leftExpression, "nodeOperation", true);
      if(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOp), "jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccess")) {
        SNode link = SLinkOperations.getTarget(leftOp, "link", false);
        if(SPropertyOperations.hasValue(link, "metaClass", "aggregation", null)) {
          return true;
        }
      }
    }
    TypeChecker.getInstance().reportTypeError(op, "operation is only applicable to aggregation-link-access", "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1178287491690");
    return false;
  }

  public static boolean checkAssignableConcept(SNode fromConcept, SNode toConcept, SNode nodeToReportError, String errorTextPrefix) {
    if(SConceptOperations.isSubConceptOf(fromConcept, NameUtil.nodeFQName(toConcept))) {
      return true;
    }
    TypeChecker.getInstance().reportTypeError(nodeToReportError, "" + errorTextPrefix + "\nexpected: " + SPropertyOperations.getString(toConcept, "name") + "\nwas: " + SPropertyOperations.getString(fromConcept, "name"), "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1179506569646");
    return false;
  }

  public static boolean checkOpParameters_generic(SNode op) {
    boolean noProblem = true;
    List<SNode> applicableParmConcepts = SLinkOperations.getConceptLinkTargets(op, "applicableParameter");
    {
      ICursor<SNode> _zCursor3 = CursorFactory.createCursor(SLinkOperations.getTargets(op, "parameter", true));
      try {
        while(_zCursor3.moveToNext()) {
          SNode parm = _zCursor3.getCurrent();
          if(!(SequenceOperations.contains(applicableParmConcepts, SNodeOperations.getConceptDeclaration(parm)))) {
            TypeChecker.getInstance().reportTypeError(parm, "not applicable here", "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1178302007667");
            noProblem = false;
          }
        }
      } finally {
        _zCursor3.release();
      }
    }
    return noProblem;
  }

  public static SNode get_inputNodeConcept(SNode op) {
    SNode leftExpr = RulesUtil.leftExpression(op);
    // todo: just compute type of the expression
    // now: the expression is expected to be SNodeOperationExpression with Link/LinkList access operation
    if(SNodeOperations.isInstanceOf(leftExpr, "jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression")) {
      SNode leftOp = SLinkOperations.getTarget(leftExpr, "nodeOperation", true);
      if(SNodeOperations.isInstanceOf(leftOp, "jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccess")) {
        return SLinkOperations.getTarget(SLinkOperations.getTarget(leftOp, "link", false), "target", false);
      }
      if(SNodeOperations.isInstanceOf(leftOp, "jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccess")) {
        return SLinkOperations.getTarget(SLinkOperations.getTarget(leftOp, "link", false), "target", false);
      }
    }
    final SNode Result_typevar_1186062019004 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);
    final SNode LeftType_typevar_1186062031569 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);
    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(leftExpr), TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186062031569), leftExpr, null, "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1186062045965");
    TypeChecker.getInstance().getRuntimeSupport().whenConcrete(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186062031569), new Runnable() {

      public void run() {
        if(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186062031569), "jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType")) {
          SNode conceptDeclaration = SLinkOperations.getTarget(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186062031569), "concept", false);
          if(conceptDeclaration == null) {
            conceptDeclaration = SLinkOperations.getTarget(new QuotationClass_43().createNode(), "concept", false);
          }
          TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getEquationManager().getRepresentator(Result_typevar_1186062019004), conceptDeclaration, null, null, "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1186062259216");
        } else
        if(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186062031569), "jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptType")) {
          TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getEquationManager().getRepresentator(Result_typevar_1186062019004), SConceptOperations.findConceptDeclaration("jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration"), null, null, "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1186062259230");
        }
      }

    }, "jetbrains.mps.bootstrap.smodelLanguage.helgins", "1186062066737");
    return TypeChecker.getInstance().getEquationManager().getRepresentator(Result_typevar_1186062019004);
  }

  public static SNode get_inputNodeType(SNode op) {
    SNode inputNodeConcept = RulesUtil.get_inputNodeConcept(op);
    SNode inputNodeType = new QuotationClass_44().createNode(inputNodeConcept);
    return inputNodeType;
  }

  public static SNode get_SNodeType_fromOpParameter(SNode op) {
    SNode type = new QuotationClass_45().createNode();
    SNode parm = SequenceOperations.getFirst(SequenceOperations.where(SLinkOperations.getTargets(op, "parameter", true), new zPredicate(null, null)));
    if(parm != null) {
      SLinkOperations.setTarget(type, "concept", SLinkOperations.getTarget(parm, "concept", false), false);
    }
    return type;
  }

  public static SNode get_SNodeListType_fromOpParameter(SNode op) {
    SNode type = new QuotationClass_46().createNode();
    SNode parm = SequenceOperations.getFirst(SequenceOperations.where(SLinkOperations.getTargets(op, "parameter", true), new zPredicate1(null, null)));
    if(parm != null) {
      SLinkOperations.setTarget(type, "elementConcept", SLinkOperations.getTarget(parm, "concept", false), false);
    }
    return type;
  }

}
