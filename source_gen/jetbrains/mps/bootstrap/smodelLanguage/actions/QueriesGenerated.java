package jetbrains.mps.bootstrap.smodelLanguage.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.actions.ActionUtil_smodel;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.helgins.runtime.HUtil;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import java.util.ArrayList;
import jetbrains.mps.smodel.search.IConceptHierarchyScope;
import jetbrains.mps.util.Calculable;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.search.ConceptHierarchyScope;
import jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.bootstrap.structureLanguage.structure.PropertyDeclaration;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptPropertyDeclaration;
import jetbrains.mps.smodel.action.AbstractRTransformHintSubstituteAction;

public class QueriesGenerated {

  public static boolean nodeSubstituteActionsBuilder_Precondition_SNodeOperation_1161715685433(SNode parentNode, IScope scope, IOperationContext operationContext) {
    SNode leftExpression = SLinkOperations.getTarget(parentNode, "leftExpression", true);
    return ActionUtil_smodel.isExpression_appropriateFor_ourOperations(leftExpression);
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_SNodeOperation_1173979326981(SNode parentNode, IScope scope, IOperationContext operationContext) {
    SNode leftExpression = SLinkOperations.getTarget(parentNode, "leftExpression", true);
    SNode nodeType = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(leftExpression), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"), false);
    return nodeType != null;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_SNodeOperation_1173980551143(SNode parentNode, IScope scope, IOperationContext operationContext) {
    SNode leftExpression = SLinkOperations.getTarget(parentNode, "leftExpression", true);
    SNode nodeType = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(leftExpression), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"), false);
    return nodeType != null;
  }
  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1154624855279(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    return ActionUtil_smodel.isExpression_appropriateFor_ourOperations(sourceNode);
  }
  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1154634535241(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    SNode nodeType = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(sourceNode), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"), false);
    return nodeType != null;
  }
  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1154636612745(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    return ActionUtil_smodel.isExpression_appropriateFor_SemanticDowncast(sourceNode);
  }
  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_SNodeOperation_1154637518825(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    boolean alreadyHasParms = SLinkOperations.getCount(sourceNode, "parameter") > 0;
    if(alreadyHasParms) {
      return false;
    }
    List<SNode> applicableParms = sourceNode.getConceptLinkTargets("applicableParameter", true, scope);
    return applicableParms.size() > 0;
  }
  public static void nodeFactory_NodeSetup_Node_GetAncestorOperation_1171415364778(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation")) {
      List<SNode> parms = SLinkOperations.getTargets(sampleNode, "parameter", true);
      {
        ICursor<SNode> _zCursor = CursorFactory.createCursor(parms);
        try {
          while(_zCursor.moveToNext()) {
            SNode parm = _zCursor.getCurrent();
            SLinkOperations.addChild(newNode, "parameter", parm);
          }
        } finally {
          _zCursor.release();
        }
      }
    }
  }
  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_SNodeOperation_1173984362064(final SNode parentNode, final SNode currentTargetNode, final ConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    return result;
  }
  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_SNodeOperation_1173979260328(final SNode parentNode, final SNode currentTargetNode, final ConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    final SNode leftNodeConcept;
    final IConceptHierarchyScope hierarhyScope;
    final List<SNode> leftNodeConceptS;
    final List<IConceptHierarchyScope> hierarchyScopeS;
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          SNode leftExpression = SLinkOperations.getTarget(parentNode, "leftExpression", true);
          SNode leftNodeType = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(leftExpression), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"), false);
          if(SLinkOperations.getTarget(leftNodeType, "concept", false) == null) {
            return SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.BaseConcept");
          }
          return SLinkOperations.getTarget(leftNodeType, "concept", false);
        }
      };
      leftNodeConcept = (SNode)calc.calculate();
    }
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return new ConceptHierarchyScope(((AbstractConceptDeclaration)SNodeOperations.getAdapter(leftNodeConcept)));
        }
      };
      hierarhyScope = (IConceptHierarchyScope)calc.calculate();
    }
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return ListOperations.createList(new SNode[]{});
        }
      };
      leftNodeConceptS = (List<SNode>)calc.calculate();
    }
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return ListOperations.createList(new IConceptHierarchyScope[]{});
        }
      };
      hierarchyScopeS = (List<IConceptHierarchyScope>)calc.calculate();
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          List<PropertyDeclaration> adapters = hierarhyScope.getPropertyDeclarationsExcludingOverridden();
          return (List<SNode>)BaseAdapter.toNodes(adapters);
        }
      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess", null);
            SLinkOperations.setTarget(newNode, "property", ((SNode)this.getParameterObject()), false);
            return newNode;
          }
        });
      }
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptPropertyAccess", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          List<ConceptPropertyDeclaration> adapters = hierarhyScope.getAdapters(ConceptPropertyDeclaration.class);
          return (List<SNode>)BaseAdapter.toNodes(adapters);
        }
      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptPropertyAccess", null);
            SLinkOperations.setTarget(newNode, "conceptProperty", ((SNode)this.getParameterObject()), false);
            return newNode;
          }
        });
      }
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1138079721624(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          // replace expression with snode-operation-expression
          SNode expression = sourceNode;
          SNode opExpression = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression", null);
          SNodeOperations.replaceWithAnother(expression, opExpression);
          SLinkOperations.setTarget(opExpression, "leftExpression", expression, true);
          return opExpression;
        }
        public String getMatchingText(String pattern) {
          return ".";
        }
        public String getDescriptionText(String pattern) {
          return "smodel language operation";
        }
      });
    }
    return result;
  }
}
