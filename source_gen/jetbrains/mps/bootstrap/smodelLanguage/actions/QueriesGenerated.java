package jetbrains.mps.bootstrap.smodelLanguage.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.actions.ActionUtil_smodel;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.helgins.runtime.HUtil;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import java.util.ArrayList;
import jetbrains.mps.util.Calculable;
import jetbrains.mps.smodel.search.ConceptHierarchyScope;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.bootstrap.structureLanguage.structure.PropertyDeclaration;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptPropertyDeclaration;
import jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration;
import jetbrains.mps.bootstrap.smodelLanguage.actions.zPredicate;
import jetbrains.mps.bootstrap.smodelLanguage.actions.zPredicate1;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptLinkDeclaration;
import jetbrains.mps.smodel.action.ModelActions;
import jetbrains.mps.smodel.action.AbstractRTransformHintSubstituteAction;
import jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation;

public class QueriesGenerated {

  public static boolean nodeSubstituteActionsBuilder_Precondition_SNodeOperation_1161715685433(SNode parentNode, IScope scope, IOperationContext operationContext) {
    SNode leftExpression = SLinkOperations.getTarget(parentNode, "leftExpression", true);
    return ActionUtil_smodel.isExpression_appropriateFor_ourOperations(leftExpression);
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_SNodeOperation_1179529852529(SNode parentNode, IScope scope, IOperationContext operationContext) {
    SNode leftExpression = SLinkOperations.getTarget(parentNode, "leftExpression", true);
    SNode nodeType = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(leftExpression), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"), false);
    return nodeType != null;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_SNodeOperation_1179530205324(SNode parentNode, IScope scope, IOperationContext operationContext) {
    SNode leftExpression = SLinkOperations.getTarget(parentNode, "leftExpression", true);
    SNode nodeType = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(leftExpression), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"), false);
    return nodeType != null;
  }
  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_SNodeOperation_1154637518825(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    boolean alreadyHasParms = SLinkOperations.getCount(sourceNode, "parameter") > 0;
    if(alreadyHasParms) {
      return false;
    }
    return SequenceOperations.getSize(SLinkOperations.getConceptLinkTargets(sourceNode, "applicableParameter")) > 0;
  }
  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1179535189083(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    return ActionUtil_smodel.isExpression_appropriateFor_ourOperations(sourceNode);
  }
  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1179535189126(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    SNode nodeType = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(sourceNode), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"), false);
    return nodeType != null;
  }
  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1179535648215(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    return ActionUtil_smodel.isExpression_appropriateFor_SemanticDowncast(sourceNode);
  }
  public static void nodeFactory_NodeSetup_Node_GetAncestorOperation_1171415364778(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation")) {
      List<SNode> parms = SLinkOperations.getTargets(sampleNode, "parameter", true);
      {
        ICursor<SNode> _zCursor = CursorFactory.createCursor(parms);
        try {
          while(_zCursor.moveToNext()) {
            SNode parm = _zCursor.getCurrent();
            SLinkOperations.addChild(newNode, "parameter", parm);
          }
        } finally {
          _zCursor.release();
        }
      }
    }
  }
  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_SNodeOperation_1138413233760(final SNode parentNode, final SNode currentTargetNode, final ConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    final SNode leftExpressionType;
    final Boolean leftIsModel;
    final Boolean leftIsNode;
    final Boolean leftIsConcept;
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(parentNode, "leftExpression", true));
        }
      };
      leftExpressionType = (SNode)calc.calculate();
    }
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return TypeChecker.getInstance().getRuntimeSupport().coerce(leftExpressionType, HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SModelType"), false) != null;
        }
      };
      leftIsModel = (Boolean)calc.calculate();
    }
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return TypeChecker.getInstance().getRuntimeSupport().coerce(leftExpressionType, HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"), false) != null;
        }
      };
      leftIsNode = (Boolean)calc.calculate();
    }
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return TypeChecker.getInstance().getRuntimeSupport().coerce(leftExpressionType, HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptType"), false) != null;
        }
      };
      leftIsConcept = (Boolean)calc.calculate();
    }
    return result;
  }
  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_SNodeOperation_1179529852420(final SNode parentNode, final SNode currentTargetNode, final ConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    final SNode leftNodeConcept;
    final ConceptHierarchyScope hierarhyScope;
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          SNode leftExpression = SLinkOperations.getTarget(parentNode, "leftExpression", true);
          SNode leftNodeType = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(leftExpression), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"), false);
          if(SLinkOperations.getTarget(leftNodeType, "concept", false) == null) {
            return SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.BaseConcept");
          }
          return SLinkOperations.getTarget(leftNodeType, "concept", false);
        }
      };
      leftNodeConcept = (SNode)calc.calculate();
    }
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return new ConceptHierarchyScope(((AbstractConceptDeclaration)SNodeOperations.getAdapter(leftNodeConcept)));
        }
      };
      hierarhyScope = (ConceptHierarchyScope)calc.calculate();
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          List<PropertyDeclaration> adapters = hierarhyScope.getPropertyDeclarationsExcludingOverridden();
          return (List<SNode>)BaseAdapter.toNodes(adapters);
        }
      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess", null);
            SLinkOperations.setTarget(newNode, "property", ((SNode)this.getParameterObject()), false);
            return newNode;
          }
        });
      }
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptPropertyAccess", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          List<ConceptPropertyDeclaration> adapters = hierarhyScope.getAdapters(ConceptPropertyDeclaration.class);
          return (List<SNode>)BaseAdapter.toNodes(adapters);
        }
      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptPropertyAccess", null);
            SLinkOperations.setTarget(newNode, "conceptProperty", ((SNode)this.getParameterObject()), false);
            return newNode;
          }
        });
      }
    }
    return result;
  }
  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_SNodeOperation_1179530205323(final SNode parentNode, final SNode currentTargetNode, final ConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    final SNode leftNodeConcept;
    final ConceptHierarchyScope hierarhyScope;
    final List<SNode> links;
    final List<SNode> singularLinks;
    final List<SNode> pluralLinks;
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          SNode leftExpression = SLinkOperations.getTarget(parentNode, "leftExpression", true);
          SNode leftNodeType = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(leftExpression), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"), false);
          if(SLinkOperations.getTarget(leftNodeType, "concept", false) == null) {
            return SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.BaseConcept");
          }
          return SLinkOperations.getTarget(leftNodeType, "concept", false);
        }
      };
      leftNodeConcept = (SNode)calc.calculate();
    }
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return new ConceptHierarchyScope(((AbstractConceptDeclaration)SNodeOperations.getAdapter(leftNodeConcept)));
        }
      };
      hierarhyScope = (ConceptHierarchyScope)calc.calculate();
    }
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          List<LinkDeclaration> adapters = hierarhyScope.getLinkDeclarationsExcludingOverridden();
          return (List<SNode>)BaseAdapter.toNodes(adapters);
        }
      };
      links = (List<SNode>)calc.calculate();
    }
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return SequenceOperations.toList(SequenceOperations.where(links, new zPredicate(null, null)));
        }
      };
      singularLinks = (List<SNode>)calc.calculate();
    }
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return SequenceOperations.toList(SequenceOperations.where(links, new zPredicate1(null, null)));
        }
      };
      pluralLinks = (List<SNode>)calc.calculate();
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccess", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          return singularLinks;
        }
      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccess", null);
            SLinkOperations.setTarget(newNode, "link", ((SNode)this.getParameterObject()), false);
            return newNode;
          }
        });
      }
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccessAsNode", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          return singularLinks;
        }
      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccessAsNode", null);
            SLinkOperations.setTarget(newNode, "link", ((SNode)this.getParameterObject()), false);
            return newNode;
          }
          public String getMatchingText(String pattern) {
            return SPropertyOperations.getString(((SNode)this.getParameterObject()), "role") + "/node";
          }
        });
      }
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccess", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          return pluralLinks;
        }
      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccess", null);
            SLinkOperations.setTarget(newNode, "link", ((SNode)this.getParameterObject()), false);
            return newNode;
          }
        });
      }
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccessAsList", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          return pluralLinks;
        }
      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccessAsList", null);
            SLinkOperations.setTarget(newNode, "link", ((SNode)this.getParameterObject()), false);
            return newNode;
          }
          public String getMatchingText(String pattern) {
            return SPropertyOperations.getString(((SNode)this.getParameterObject()), "role") + "/list";
          }
        });
      }
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptLinkAccess", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          List<ConceptLinkDeclaration> adapters = hierarhyScope.getAdapters(ConceptLinkDeclaration.class);
          return (List<SNode>)BaseAdapter.toNodes(adapters);
        }
      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptLinkAccess", null);
            SLinkOperations.setTarget(newNode, "conceptLinkDeclaration", ((SNode)this.getParameterObject()), false);
            return newNode;
          }
        });
      }
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_SNodeOperation_1138669164825(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return SNodeOperations.getParent(sourceNode, null, false, false);
        }
      };
      SNode node = (SNode)calc.calculate();
      result.addAll(ModelActions.createRightTransformHintSubstituteActions(node, transformationTag, operationContext));
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_SNodeOperation_1144103719164(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SLinkOperations.addNewChild(sourceNode, "parameter", "jetbrains.mps.bootstrap.smodelLanguage.structure.AbstractOperationParameter");
          return sourceNode;
        }
        public String getMatchingText(String pattern) {
          return "< .. >";
        }
        public String getDescriptionText(String pattern) {
          return "add operation parameters";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1179535189082(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          // replace expression with snode-operation-expression
          SNode expression = sourceNode;
          SNode opExpression = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression", null);
          SNodeOperations.replaceWithAnother(expression, opExpression);
          SLinkOperations.setTarget(opExpression, "leftExpression", expression, true);
          return opExpression;
        }
        public String getMatchingText(String pattern) {
          return ".";
        }
        public String getDescriptionText(String pattern) {
          return "smodel language operation";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1179535189125(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeTypeCastExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SNodeOperations.replaceWithNewChild(sourceNode, "jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeTypeCastExpression");
          SLinkOperations.setTarget(newNode, "leftExpression", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return ":";
        }
        public String getDescriptionText(String pattern) {
          return "node type cast";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1179535648214(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SemanticDowncastExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SNodeOperations.replaceWithNewChild(sourceNode, "jetbrains.mps.bootstrap.smodelLanguage.structure.SemanticDowncastExpression");
          SLinkOperations.setTarget(newNode, "leftExpression", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "/";
        }
        public String getDescriptionText(String pattern) {
          return "downcast to lower semantic level";
        }
      });
    }
    return result;
  }
  public static boolean removeConceptByCondition_1180467401112(SNode concept, SNode parentNode, SNode currentChild, SNode childConcept, IOperationContext operationContext) {
    SNode leftExpression = SLinkOperations.getTarget(parentNode, "leftExpression", true);
    if(SNodeOperations.isInstanceOf(leftExpression, "jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression")) {
      SNode nodeOperation = SLinkOperations.getTarget(leftExpression, "nodeOperation", true);
      if(SNodeOperations.isInstanceOf(nodeOperation, "jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess")) {
        SNode dataType = SLinkOperations.getTarget(SLinkOperations.getTarget(nodeOperation, "property", false), "dataType", false);
        if(SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.bootstrap.structureLanguage.structure.EnumerationDataTypeDeclaration")) {
          return !(concept.hasConceptProperty(SNodeOperation.CPR_Applicable_to_enum_property, operationContext.getScope()));
        } else
        {
          return !(concept.hasConceptProperty(SNodeOperation.CPR_Applicable_to_simple_property, operationContext.getScope()));
        }
      }
      if(SNodeOperations.isInstanceOf(nodeOperation, "jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptPropertyAccess")) {
        return !(concept.hasConceptProperty(SNodeOperation.CPR_Applicable_to_concept_property, operationContext.getScope()));
      }
      if(SNodeOperations.isInstanceOf(nodeOperation, "jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccess")) {
        return !(concept.hasConceptProperty(SNodeOperation.CPR_Applicable_to_link, operationContext.getScope()));
      }
      if(SNodeOperations.isInstanceOf(nodeOperation, "jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccess")) {
        return !(concept.hasConceptProperty(SNodeOperation.CPR_Applicable_to_linkList, operationContext.getScope()));
      }
    }
    // ==========
    SNode leftType = TypeChecker.getInstance().getTypeOf(leftExpression);
    // is concept ?
    if(TypeChecker.getInstance().getRuntimeSupport().coerce(leftType, HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptType"), false) != null) {
      // any op applicable to node is also applicable to concept
      boolean b1 = concept.hasConceptProperty(SNodeOperation.CPR_Applicable_to_node, operationContext.getScope());
      boolean b2 = concept.hasConceptProperty(SNodeOperation.CPR_Applicable_to_concept, operationContext.getScope());
      return !(b1 || b2);
    }
    // is node ?
    if(TypeChecker.getInstance().getRuntimeSupport().coerce(leftType, HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"), false) != null) {
      return !(concept.hasConceptProperty(SNodeOperation.CPR_Applicable_to_node, operationContext.getScope()));
    }
    // is smodel ?
    if(TypeChecker.getInstance().getRuntimeSupport().coerce(leftType, HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SModelType"), false) != null) {
      return !(concept.hasConceptProperty(SNodeOperation.CPR_Applicable_to_model, operationContext.getScope()));
    }
    return true;
  }
}
