package jetbrains.mps.bootstrap.actionsLanguage.structure;

/*Generated by MPS  */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.baseLanguage.structure.Type;

public class ParameterizedMenuPart extends MenuPart {
  public static String TYPE = "type";
  public static String QUERY = "query";
  public static String MATCHING_TEXT = "matchingText";
  public static String DESCRIPTION_TEXT = "descriptionText";
  public static String HANDLER = "handler";

  public ParameterizedMenuPart(SNode node) {
    super(node);
  }

  public static ParameterizedMenuPart newInstance(SModel sm, boolean init) {
    return (ParameterizedMenuPart)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bootstrap.actionsLanguage.ParameterizedItemPart", sm, GlobalScope.getInstance(), init).getAdapter();
  }
  public static ParameterizedMenuPart newInstance(SModel sm) {
    return newInstance(sm, false);
  }

  public Type getType() {
    return (Type)this.getChild(TYPE);
  }
  public void setType(Type node) {
    super.setChild(TYPE, node);
  }
  public QueryFunction_Parameterized_Query getQuery() {
    return (QueryFunction_Parameterized_Query)this.getChild(QUERY);
  }
  public void setQuery(QueryFunction_Parameterized_Query node) {
    super.setChild(QUERY, node);
  }
  public QueryFunction_Parameterized_String getMatchingText() {
    return (QueryFunction_Parameterized_String)this.getChild(MATCHING_TEXT);
  }
  public void setMatchingText(QueryFunction_Parameterized_String node) {
    super.setChild(MATCHING_TEXT, node);
  }
  public QueryFunction_Parameterized_String getDescriptionText() {
    return (QueryFunction_Parameterized_String)this.getChild(DESCRIPTION_TEXT);
  }
  public void setDescriptionText(QueryFunction_Parameterized_String node) {
    super.setChild(DESCRIPTION_TEXT, node);
  }
  public QueryFunction_Parameterized_SubstituteHandler getHandler() {
    return (QueryFunction_Parameterized_SubstituteHandler)this.getChild(HANDLER);
  }
  public void setHandler(QueryFunction_Parameterized_SubstituteHandler node) {
    super.setChild(HANDLER, node);
  }
}
