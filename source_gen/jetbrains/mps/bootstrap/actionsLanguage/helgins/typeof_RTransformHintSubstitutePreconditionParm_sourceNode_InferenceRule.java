package jetbrains.mps.bootstrap.actionsLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_RTransformHintSubstitutePreconditionParm_sourceNode_InferenceRule implements InferenceRule_Runtime {

  public  typeof_RTransformHintSubstitutePreconditionParm_sourceNode_InferenceRule() {
  }

  public void applyRule(final SNode argument) {
    SNode hostBuilder = SNodeOperations.getAncestor(argument, "jetbrains.mps.bootstrap.actionsLanguage.structure.RTransformHintSubstituteActionsBuilder", false, false);
    SNode applicableConcept = SLinkOperations.getTarget(hostBuilder, "applicableConcept", false);
    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_3().createNode(applicableConcept), argument, "jetbrains.mps.bootstrap.actionsLanguage.helgins", "1180046610346");
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.bootstrap.actionsLanguage.structure.ConceptFunctionParameter_sourceNode";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
