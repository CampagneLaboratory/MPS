package jetbrains.mps.bootstrap.helgins.structure;

/*Generated by MPS  */

import jetbrains.mps.baseLanguage.structure.AbstractLoopStatement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.Iterator;
import java.util.List;

public class MultipleForeachLoop extends AbstractLoopStatement {
  public static String LOOP_VARIABLE = "loopVariable";

  public  MultipleForeachLoop(SNode node) {
    super(node);
  }

  public static MultipleForeachLoop newInstance(SModel sm, boolean init) {
    return (MultipleForeachLoop)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bootstrap.helgins.MultipleForeachLoop", sm, GlobalScope.getInstance(), init).getAdapter();
  }
  public static MultipleForeachLoop newInstance(SModel sm) {
    return MultipleForeachLoop.newInstance(sm, false);
  }

  public int getLoopVariablesCount() {
    return this.getChildCount(MultipleForeachLoop.LOOP_VARIABLE);
  }
  public Iterator<MultipleForeachLoopVariable> loopVariables() {
    return this.children(MultipleForeachLoop.LOOP_VARIABLE);
  }
  public List<MultipleForeachLoopVariable> getLoopVariables() {
    return this.getChildren(MultipleForeachLoop.LOOP_VARIABLE);
  }
  public void addLoopVariable(MultipleForeachLoopVariable node) {
    this.addChild(MultipleForeachLoop.LOOP_VARIABLE, node);
  }
  public void insertLoopVariable(MultipleForeachLoopVariable prev, MultipleForeachLoopVariable node) {
    this.insertChild(prev, MultipleForeachLoop.LOOP_VARIABLE, node);
  }
}
