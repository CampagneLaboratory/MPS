package jetbrains.mps.bootstrap.helgins.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSetup_ParameterObject;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactory_ParameterObject;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import jetbrains.mps.smodel.action.AbstractChildNodeSetter;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.action.ModelActions;
import jetbrains.mps.smodel.action.RTActionsBuilder_ParameterObject;
import jetbrains.mps.util.Calculable;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.smodel.action.AbstractRTransformHintSubstituteAction;
import jetbrains.mps.util.NameUtil;

public class QueriesGenerated {

  public static void nodeFactory_NodeSetup_AbstractEquationStatement_1174664649251(final IOperationContext operationContext, final NodeSetup_ParameterObject _parameterObject) {
    if(SNodeOperations.isInstanceOf(_parameterObject.getSampleNode(), "jetbrains.mps.bootstrap.helgins.structure.AbstractEquationStatement")) {
      SLinkOperations.setTarget(_parameterObject.getNewNode(), "leftExpression", SLinkOperations.getTarget(_parameterObject.getSampleNode(), "leftExpression", true), true);
      SLinkOperations.setTarget(_parameterObject.getNewNode(), "rightExpression", SLinkOperations.getTarget(_parameterObject.getSampleNode(), "rightExpression", true), true);
      SLinkOperations.setTarget(_parameterObject.getNewNode(), "nodeToCheck", SLinkOperations.getTarget(_parameterObject.getSampleNode(), "nodeToCheck", true), true);
    }
  }

  public static void nodeFactory_NodeSetup_IsSubtypeExpression_1177408248540(final IOperationContext operationContext, final NodeSetup_ParameterObject _parameterObject) {
    if(SNodeOperations.isInstanceOf(_parameterObject.getSampleNode(), "jetbrains.mps.bootstrap.helgins.structure.IsSubtypeExpression")) {
      SLinkOperations.setTarget(_parameterObject.getNewNode(), "subtypeExpression", SLinkOperations.getTarget(_parameterObject.getSampleNode(), "subtypeExpression", true), true);
      SLinkOperations.setTarget(_parameterObject.getNewNode(), "supertypeExpression", SLinkOperations.getTarget(_parameterObject.getSampleNode(), "supertypeExpression", true), true);
    }
  }

  public static void nodeFactory_NodeSetup_CoerceExpression_1178879020941(final IOperationContext operationContext, final NodeSetup_ParameterObject _parameterObject) {
    if(SNodeOperations.isInstanceOf(_parameterObject.getSampleNode(), "jetbrains.mps.bootstrap.helgins.structure.CoerceExpression")) {
      SLinkOperations.setTarget(_parameterObject.getNewNode(), "nodeToCoerce", SLinkOperations.getTarget(_parameterObject.getSampleNode(), "nodeToCoerce", true), true);
      SLinkOperations.setTarget(_parameterObject.getNewNode(), "pattern", SLinkOperations.getTarget(_parameterObject.getSampleNode(), "pattern", true), true);
    }
  }

  public static void nodeFactory_NodeSetup_TypeOfExpression_1179476271704(final IOperationContext operationContext, final NodeSetup_ParameterObject _parameterObject) {
    if(SNodeOperations.isInstanceOf(_parameterObject.getSampleNode(), "jetbrains.mps.baseLanguage.structure.Expression")) {
      if(!(SNodeOperations.isInstanceOf(_parameterObject.getSampleNode(), "jetbrains.mps.bootstrap.helgins.structure.TypeOfExpression"))) {
        SLinkOperations.setTarget(_parameterObject.getNewNode(), "term", _parameterObject.getSampleNode(), true);
      } else
      {
        SLinkOperations.setTarget(_parameterObject.getNewNode(), "term", SLinkOperations.getTarget(_parameterObject.getSampleNode(), "term", true), true);
      }
    }
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_TypeClause_1185801400389(final IOperationContext operationContext, final NodeSubstituteActionsFactory_ParameterObject _parameterObject) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.helgins.structure.NormalTypeClause", operationContext.getScope());
      ConceptDeclaration wrappedConcept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression", operationContext.getScope());
      IChildNodeSetter setter = new AbstractChildNodeSetter() {

        public SNode wrapNode(SNode nodeToWrap, SModel model) {
          SNode normalTypeClause = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.helgins.structure.NormalTypeClause", null);
          SLinkOperations.setTarget(normalTypeClause, "normalType", nodeToWrap, true);
          return normalTypeClause;
        }

        public SNode doExecute(SNode pn, SNode oc, SNode nc, IScope sc) {
          SNode wrappedNode = this.wrapNode(nc, nc.getModel());
          _parameterObject.getChildSetter().execute(_parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), wrappedNode, operationContext.getScope());
          return wrappedNode;
        }

      };
      result.addAll(ModelActions.createChildSubstituteActions(_parameterObject.getParentNode(), _parameterObject.getCurrentTargetNode(), wrappedConcept, setter, operationContext));
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1175609466956(final IOperationContext operationContext, final RTActionsBuilder_ParameterObject _parameterObject) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("null", operationContext.getScope());
      Calculable calculable = new Calculable() {

        public Object calculate() {
          final zClosureContext _zClosureContext = new zClosureContext();
          List<SNode> subconcepts = SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.bootstrap.helgins.structure.AbstractEquationStatement"), _parameterObject.getModel(), operationContext.getScope());
          _zClosureContext.scope = operationContext.getScope();
          return SequenceOperations.where(subconcepts, new zPredicate(null, _zClosureContext));
        }

      };
      Iterable<SNode> parameterObjects = (Iterable<SNode>)calculable.calculate();
      assert parameterObjects != null;
      for(SNode parameter : parameterObjects) {
        result.add(new AbstractRTransformHintSubstituteAction(parameter, _parameterObject.getSourceNode()) {

          public SNode doSubstitute(String pattern) {
            SNode result = SConceptOperations.createNewNode(NameUtil.nodeFQName(((SNode)this.getParameterObject())), null);
            SNode statement = SNodeOperations.getAncestor(_parameterObject.getSourceNode(), "jetbrains.mps.baseLanguage.structure.Statement", false, false);
            if(statement == null) {
              return null;
            }
            SNodeOperations.replaceWithAnother(statement, result);
            SNode left = SConceptOperations.createNewNode("jetbrains.mps.bootstrap.helgins.structure.NormalTypeClause", null);
            SLinkOperations.setTarget(left, "normalType", _parameterObject.getSourceNode(), true);
            SLinkOperations.setTarget(result, "leftExpression", left, true);
            return SLinkOperations.getTarget(result, "rightExpression", true);
          }

        });
      }
    }
    return result;
  }

}
