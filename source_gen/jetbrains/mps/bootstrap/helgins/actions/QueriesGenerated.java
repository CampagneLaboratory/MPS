package jetbrains.mps.bootstrap.helgins.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import jetbrains.mps.smodel.IOperationContext;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.action.AbstractChildNodeSetter;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.action.ModelActions;

public class QueriesGenerated {

  public static void nodeFactory_NodeSetup_AbstractEquationStatement_1174664649251(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.bootstrap.helgins.structure.AbstractEquationStatement")) {
      SLinkOperations.setTarget(newNode, "leftExpression", SLinkOperations.getTarget(sampleNode, "leftExpression", true), true);
      SLinkOperations.setTarget(newNode, "rightExpression", SLinkOperations.getTarget(sampleNode, "rightExpression", true), true);
      SLinkOperations.setTarget(newNode, "nodeToCheck", SLinkOperations.getTarget(sampleNode, "nodeToCheck", true), true);
    }
  }

  public static void nodeFactory_NodeSetup_IsSubtypeExpression_1177408248540(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.bootstrap.helgins.structure.IsSubtypeExpression")) {
      SLinkOperations.setTarget(newNode, "subtypeExpression", SLinkOperations.getTarget(sampleNode, "subtypeExpression", true), true);
      SLinkOperations.setTarget(newNode, "supertypeExpression", SLinkOperations.getTarget(sampleNode, "supertypeExpression", true), true);
    }
  }

  public static void nodeFactory_NodeSetup_CoerceExpression_1178879020941(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.bootstrap.helgins.structure.CoerceExpression")) {
      SLinkOperations.setTarget(newNode, "nodeToCoerce", SLinkOperations.getTarget(sampleNode, "nodeToCoerce", true), true);
      SLinkOperations.setTarget(newNode, "pattern", SLinkOperations.getTarget(sampleNode, "pattern", true), true);
    }
  }

  public static void nodeFactory_NodeSetup_TypeOfExpression_1179476271704(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.baseLanguage.structure.Expression")) {
      if(!(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.bootstrap.helgins.structure.TypeOfExpression"))) {
        SLinkOperations.setTarget(newNode, "term", sampleNode, true);
      } else
      {
        SLinkOperations.setTarget(newNode, "term", SLinkOperations.getTarget(sampleNode, "term", true), true);
      }
    }
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_TypeClause_1185801400389(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.helgins.structure.NormalTypeClause", operationContext.getScope());
      ConceptDeclaration wrappedConcept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression", operationContext.getScope());
      IChildNodeSetter setter = new AbstractChildNodeSetter() {

        public SNode wrapNode(SNode nodeToWrap, SModel model) {
          SNode normalTypeClause = SModelOperations.createNewNode(model, "jetbrains.mps.bootstrap.helgins.structure.NormalTypeClause", null);
          SLinkOperations.setTarget(normalTypeClause, "normalType", nodeToWrap, true);
          return normalTypeClause;
        }

        public SNode doExecute(SNode pn, SNode oc, SNode nc, IScope sc) {
          SNode wrappedNode = this.wrapNode(nc, nc.getModel());
          childSetter.execute(parentNode, currentTargetNode, wrappedNode, operationContext.getScope());
          return wrappedNode;
        }

      };
      result.addAll(ModelActions.createChildSubstituteActions(parentNode, currentTargetNode, wrappedConcept, setter, operationContext));
    }
    return result;
  }

}
