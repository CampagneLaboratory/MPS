package jetbrains.mps.baseLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.baseLanguage.helgins.QuotationClass_75;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.helgins.RulesFunctions_BaseLanguage;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeOf_ConceptFunction_InferenceRule implements InferenceRule_Runtime {

  public  typeOf_ConceptFunction_InferenceRule() {
  }

  public void applyRule(SNode argument) {
    // generic check
    TypeChecker.getInstance().getRuntimeSupport().check(SLinkOperations.getTarget(argument, "body", true));
    // =============
    SNode expectedRetType = BehaviorManager.getInstance().invoke(SNode.class, argument, "virtual_getExpectedReturnType_1178571276073");
    boolean noReturnExpected = ((expectedRetType == null) || TypeChecker.getInstance().getSubtypingManager().isSubtype(expectedRetType, new QuotationClass_75().createNode()));
    if(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(expectedRetType), "jetbrains.mps.baseLanguage.structure.WildCardType")) {
      // function is expected to return value of any type
      expectedRetType = null;
    }
    SNode leastCommonSupertype = null;
    // =============
    Iterable<SNode> returnStatements = RulesFunctions_BaseLanguage.collectReturnStatements(SLinkOperations.getTarget(argument, "body", true));
    boolean somethingReturned = !(SequenceOperations.isEmpty(returnStatements));
    if(noReturnExpected) {
      // shouldn't return any values
      {
        ICursor<SNode> _zCursor3 = CursorFactory.createCursor(returnStatements);
        try {
          while(_zCursor3.moveToNext()) {
            SNode returnStatement = _zCursor3.getCurrent();
            if((SLinkOperations.getTarget(returnStatement, "expression", true) != null)) {
              TypeChecker.getInstance().reportTypeError(returnStatement, "no return value expected");
            }
          }
        } finally {
          _zCursor3.release();
        }
      }
    } else
    {
      // should return subtypes of the 'expected type'
      // if 'expected type' is null - should still return some value (of any type)
      {
        ICursor<SNode> _zCursor4 = CursorFactory.createCursor(returnStatements);
        try {
          while(_zCursor4.moveToNext()) {
            SNode returnStatement = _zCursor4.getCurrent();
            if((SLinkOperations.getTarget(returnStatement, "expression", true) == null)) {
              TypeChecker.getInstance().reportTypeError(returnStatement, "should return value");
            } else
            {
              leastCommonSupertype = RulesFunctions_BaseLanguage.computeLeastCommonSupertype(SLinkOperations.getTarget(returnStatement, "expression", true), leastCommonSupertype, expectedRetType);
            }
          }
        } finally {
          _zCursor4.release();
        }
      }
    }
    // =============
    if(noReturnExpected) {
      TypeChecker.getInstance().getRuntimeSupport().givetype(null, argument);
    } else
    {
      // last expression statement can serve as return statement
      SNode lastStatement = SequenceOperations.getLast(SLinkOperations.getTargets(SLinkOperations.getTarget(argument, "body", true), "statement", true));
      if(SNodeOperations.isInstanceOf(lastStatement, "jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
        SNode expression = SLinkOperations.getTarget(lastStatement, "expression", true);
        leastCommonSupertype = RulesFunctions_BaseLanguage.computeLeastCommonSupertype(expression, leastCommonSupertype, expectedRetType);
        somethingReturned = true;
      }
      if(!(somethingReturned)) {
        String whatExpected = ((expectedRetType == null) ?
          "some value" :
          "" + expectedRetType
        );
        TypeChecker.getInstance().reportTypeError(argument, "function should return " + whatExpected);
      }
      if(leastCommonSupertype == null) {
        TypeChecker.getInstance().getRuntimeSupport().givetype(expectedRetType, argument);
      } else
      {
        TypeChecker.getInstance().getRuntimeSupport().givetype(leastCommonSupertype, argument);
      }
    }
  }
  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.ConceptFunction";
  }
  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }
  public boolean overrides() {
    return false;
  }
}
