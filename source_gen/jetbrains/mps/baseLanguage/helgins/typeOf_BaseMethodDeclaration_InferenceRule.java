package jetbrains.mps.baseLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.baseLanguage.helgins.QuotationClass_31;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.helgins.RulesFunctions_BaseLanguage;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.bootstrap.helgins.structure.ApplicableNodeCondition;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelUID;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeOf_BaseMethodDeclaration_InferenceRule implements InferenceRule_Runtime {

  public  typeOf_BaseMethodDeclaration_InferenceRule() {
  }

  public void applyRule(SNode argument) {
    for(SNode throwsItem : SLinkOperations.getTargets(argument, "throwsItem", true)) {
      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(throwsItem, new QuotationClass_31().createNode(), argument);
    }
    // ==========
    if(SLinkOperations.getTarget(argument, "body", true) == null) {
      return;
    }
    // generic check
    TypeChecker.getInstance().getRuntimeSupport().check(SLinkOperations.getTarget(argument, "body", true));
    // =============
    SNode expectedRetType = SLinkOperations.getTarget(argument, "returnType", true);
    if(SNodeOperations.isInstanceOf(expectedRetType, "jetbrains.mps.baseLanguage.structure.VoidType")) {
      expectedRetType = null;
    }
    // =============
    Iterable<SNode> returnStatements = RulesFunctions_BaseLanguage.collectReturnStatements(SLinkOperations.getTarget(argument, "body", true));
    boolean somethingReturned = !(SequenceOperations.isEmpty(returnStatements));
    if(expectedRetType == null) {
      // shouldn't return any values
      {
        ICursor<SNode> _zCursor = CursorFactory.createCursor(returnStatements);
        try {
          while(_zCursor.moveToNext()) {
            SNode returnStatement = _zCursor.getCurrent();
            if((SLinkOperations.getTarget(returnStatement, "expression", true) != null)) {
              TypeChecker.getInstance().reportTypeError(returnStatement, "no return value expected");
            }
          }
        } finally {
          _zCursor.release();
        }
      }
    } else 
    {
      // should return subtypes of the 'expected type'
      {
        ICursor<SNode> _zCursor1 = CursorFactory.createCursor(returnStatements);
        try {
          while(_zCursor1.moveToNext()) {
            SNode returnStatement = _zCursor1.getCurrent();
            if((SLinkOperations.getTarget(returnStatement, "expression", true) == null)) {
              TypeChecker.getInstance().reportTypeError(returnStatement, "should return value");
            } else 
            {
              SNode returnType = TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(returnStatement, "expression", true));
              if(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(returnType, expectedRetType))) {
                TypeChecker.getInstance().reportTypeError(SLinkOperations.getTarget(returnStatement, "expression", true), "" + expectedRetType + " is expected");
              }
            }
          }
        } finally {
          _zCursor1.release();
        }
      }
    }
    // =============
    if(expectedRetType != null) {
      // last expression statement can serve as return statement
      SNode lastStatement = SequenceOperations.getLast(SLinkOperations.getTargets(SLinkOperations.getTarget(argument, "body", true), "statement", true));
      if(SNodeOperations.isInstanceOf(lastStatement, "jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
        SNode returnType = TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(lastStatement, "expression", true));
        if(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(returnType, expectedRetType))) {
          TypeChecker.getInstance().reportTypeError(SLinkOperations.getTarget(lastStatement, "expression", true), "" + expectedRetType + " is expected");
        }
        somethingReturned = true;
      }
      if(!(somethingReturned)) {
        TypeChecker.getInstance().reportTypeError(argument, "function should return " + expectedRetType);
      }
    }
  }
  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration";
  }
  public ApplicableNodeCondition getNodeCondition() {
    SModel model = SModelRepository.getInstance().getModelDescriptor(SModelUID.fromString("jetbrains.mps.baseLanguage.helgins")).getSModel();
    return (ApplicableNodeCondition)BaseAdapter.fromNode(model.getNodeById("1176897980059"));
  }
  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }
  public boolean overrides() {
    return false;
  }
}
