package jetbrains.mps.baseLanguage.generator.java.closures;

/*Generated by MPS  */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.VariableDeclaration;

public class QueriesGenerated {

  public static boolean baseMappingRule_Condition_1170198286262(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode parent = SNodeOperations.getParent(node, null, false, false);
    if(ClosuresUtil.isClosureContextOwner(parent)) {
      return ClosuresUtil.hasVariablesUsedInClosure(parent, generator);
    }
    return false;
  }
  public static boolean baseMappingRule_Condition_1170198485461(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.getParent(node, "jetbrains.mps.baseLanguage.structure.Closure", false, false) != null;
  }
  public static boolean baseMappingRule_Condition_1170198665539(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode var = SLinkOperations.getTarget(node, "variableDeclaration", false);
    SNode contextOwner = ClosuresUtil.findEnclosingClosureContextOwner(var);
    if(contextOwner != null) {
      return ClosuresUtil.isVariableUsedInClosure(contextOwner, (VariableDeclaration)var, generator);
    }
    return false;
  }
  public static boolean baseMappingRule_Condition_1170198858690(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode var = SLinkOperations.getTarget(node, "variableDeclaration", false);
    SNode contextOwner = ClosuresUtil.findEnclosingClosureContextOwner(var);
    if(contextOwner != null) {
      return ClosuresUtil.isVariableUsedInClosure(contextOwner, (VariableDeclaration)var, generator);
    }
    return false;
  }
  public static boolean baseMappingRule_Condition_1170199119856(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode var = SLinkOperations.getTarget(node, "localVariableDeclaration", true);
    if(SLinkOperations.getTarget(var, "initializer", true) != null) {
      SNode enclosingMethod = SNodeOperations.getParent(var, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false);
      if(enclosingMethod != null) {
        return ClosuresUtil.isVariableUsedInClosure(enclosingMethod, (VariableDeclaration)var, generator);
      }
    }
    return false;
  }
}
