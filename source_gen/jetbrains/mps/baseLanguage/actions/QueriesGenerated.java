package jetbrains.mps.baseLanguage.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.helgins.runtime.HUtil;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.baseLanguage.structure.ArrayType;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModel;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.action.DefaultSimpleSubstituteAction;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import java.util.regex.Pattern;
import jetbrains.mps.util.Calculable;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import java.util.regex.Matcher;
import jetbrains.mps.baseLanguage.BaseLanguageSearchUtil_new;
import jetbrains.mps.baseLanguage.structure.ClassConcept;
import jetbrains.mps.smodel.INodeAdapter;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.smodel.presentation.NodePresentationUtil;
import jetbrains.mps.smodel.action.ChildSubstituteActionsHelper;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.action.AbstractChildNodeSetter;
import jetbrains.mps.smodel.action.ModelActions;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptPropertyOperations;
import jetbrains.mps.baseLanguage.constraints.QueriesUtil;
import jetbrains.mps.generator.JavaModelUtil_new;
import jetbrains.mps.core.structure.BaseConcept;
import jetbrains.mps.smodel.action.AbstractRTransformHintSubstituteAction;
import jetbrains.mps.baseLanguage.editor.ParenthesisUtil;

public class QueriesGenerated {

  public static boolean nodeSubstituteActionsBuilder_Precondition_Statement_1177400765736(SNode parentNode, IScope scope, IOperationContext operationContext) {
    SNode parent = SNodeOperations.getAncestorWhereConceptInList(parentNode, new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement","jetbrains.mps.baseLanguage.structure.Closure"}, false, false);
    if(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement")) {
      return true;
    }
    parent = SNodeOperations.getAncestorWhereConceptInList(parentNode, new String[]{"jetbrains.mps.baseLanguage.structure.SwitchStatement"}, false, false);
    if(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.SwitchStatement")) {
      return true;
    }
    return false;
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_Visibility_1178549461018(SNode parentNode, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.baseLanguage.structure.Classifier") && SNodeOperations.getParent(parentNode, null, false, false) == null;
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_Statement_1178893978039(SNode parentNode, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.getAncestor(parentNode, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration", true, false) != null;
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1177499026996(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    SNode ct = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(sourceNode), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), false);
    return ct != null;
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1177503884613(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    TypeChecker typeChecker = operationContext.getComponent(TypeChecker.class);
    return BaseAdapter.fromNode(typeChecker.getTypeOf(sourceNode)) instanceof ArrayType;
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1177504604529(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    TypeChecker typeChecker = operationContext.getComponent(TypeChecker.class);
    return BaseAdapter.fromNode(typeChecker.getTypeOf(sourceNode)) instanceof ArrayType;
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_VariableDeclaration_1177505054800(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    if(SLinkOperations.getTarget(sourceNode, "initializer", true) != null) {
      return false;
    }
    if(SNodeOperations.isInstanceOf(sourceNode, "jetbrains.mps.baseLanguage.structure.FieldDeclaration") || SNodeOperations.isInstanceOf(sourceNode, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
      return true;
    }
    if(SNodeOperations.isInstanceOf(sourceNode, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
      SNode parent = SNodeOperations.getParent(sourceNode, null, false, false);
      if(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement") || SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.ForStatement")) {
        return true;
      }
    }
    return false;
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_ClassifierType_1177505734541(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getCount(sourceNode, "parameter") == 0;
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_GenericDeclaration_1177506104970(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getCount(sourceNode, "typeVariableDeclaration") == 0;
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_NewExpression_1177506323526(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getCount(sourceNode, "typeParameter") == 0;
  }

  public static void nodeFactory_NodeSetup_InstanceMethodDeclaration_1158793299786(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    SLinkOperations.setNewChild(newNode, "returnType", "jetbrains.mps.baseLanguage.structure.VoidType");
    SLinkOperations.setNewChild(newNode, "visibility", "jetbrains.mps.baseLanguage.structure.PublicVisibility");
  }

  public static void nodeFactory_NodeSetup_StaticFieldDeclaration_1178291730240(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    SLinkOperations.setNewChild(newNode, "visibility", "jetbrains.mps.baseLanguage.structure.PrivateVisibility");
  }

  public static void nodeFactory_NodeSetup_FieldDeclaration_1178291791625(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    SLinkOperations.setNewChild(newNode, "visibility", "jetbrains.mps.baseLanguage.structure.PrivateVisibility");
  }

  public static void nodeFactory_NodeSetup_StaticMethodDeclaration_1178291583640(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    SLinkOperations.setNewChild(newNode, "returnType", "jetbrains.mps.baseLanguage.structure.VoidType");
    SLinkOperations.setNewChild(newNode, "visibility", "jetbrains.mps.baseLanguage.structure.PublicVisibility");
  }

  public static void nodeFactory_NodeSetup_ConstructorDeclaration_1178291598890(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    SLinkOperations.setNewChild(newNode, "returnType", "jetbrains.mps.baseLanguage.structure.VoidType");
    SLinkOperations.setNewChild(newNode, "visibility", "jetbrains.mps.baseLanguage.structure.PublicVisibility");
  }

  public static void nodeFactory_NodeSetup_BinaryOperation_1158797366355(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      SLinkOperations.setTarget(newNode, "leftExpression", SLinkOperations.getTarget(sampleNode, "leftExpression", true), true);
      SLinkOperations.setTarget(newNode, "rightExpression", SLinkOperations.getTarget(sampleNode, "rightExpression", true), true);
    }
  }

  public static void nodeFactory_NodeSetup_ParenthesizedExpression_1158857529259(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.baseLanguage.structure.Expression")) {
      SLinkOperations.setTarget(newNode, "expression", sampleNode, true);
    }
  }

  public static void nodeFactory_NodeSetup_CastExpression_1158871408598(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.baseLanguage.structure.Expression")) {
      // Looking for the original node is required as sampleNode is just a copy
      SNode originalExpression = CastExpression_FactoryUtil.getOriginalExpression(enclosingNode, sampleNode);
      if((originalExpression != null)) {
        SNode castType = CastExpression_FactoryUtil.computeCastType(originalExpression);
        SLinkOperations.setTarget(newNode, "type", castType, true);
      }
      SLinkOperations.setTarget(newNode, "expression", sampleNode, true);
    }
  }

  public static void nodeFactory_NodeSetup_ReturnStatement_1158938591702(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
      SLinkOperations.setTarget(newNode, "expression", SLinkOperations.getTarget(sampleNode, "expression", true), true);
    }
  }

  public static void nodeFactory_NodeSetup_IfStatement_1178272045314(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.baseLanguage.structure.Statement")) {
      SLinkOperations.addChild(SLinkOperations.setNewChild(newNode, "ifTrue", "jetbrains.mps.baseLanguage.structure.StatementList"), "statement", sampleNode);
    }
  }

  public static void nodeFactory_NodeSetup_TryCatchStatement_1183997671101(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.baseLanguage.structure.Statement")) {
      SLinkOperations.addChild(SLinkOperations.setNewChild(newNode, "body", "jetbrains.mps.baseLanguage.structure.StatementList"), "statement", sampleNode);
    }
  }

  public static void nodeFactory_NodeSetup_TryStatement_1183997675652(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.baseLanguage.structure.Statement")) {
      SLinkOperations.addChild(SLinkOperations.setNewChild(newNode, "body", "jetbrains.mps.baseLanguage.structure.StatementList"), "statement", sampleNode);
    }
  }

  public static void nodeFactory_NodeSetup_NotExpression_1159218040861(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if(SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.baseLanguage.structure.Expression")) {
      SLinkOperations.setTarget(newNode, "expression", sampleNode, true);
    }
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expression_1177334764520(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode intConst = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.IntegerConstant", null);
          SPropertyOperations.set(intConst, "value", "" + (Integer.parseInt(pattern)));
          return intConst;
        }

        public boolean hasSubstitute() {
          return true;
        }

        public boolean canSubstitute_internal(String pattern) {
          return Pattern.compile("(?:\\d)+", 0).matcher(pattern).matches();
        }

        public String getMatchingText(String pattern) {
          return pattern;
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          return ListOperations.createList(new Boolean[]{Boolean.TRUE,Boolean.FALSE});
        }

      };
      Iterable<Boolean> queryResult = (Iterable)calc.calculate();
      for(Boolean item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode integerConst = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.BooleanConstant", null);
            SPropertyOperations.set(integerConst, "value", "" + (((Boolean)this.getParameterObject()).booleanValue()));
            return integerConst;
          }

          public String getMatchingText(String pattern) {
            return ((Boolean)this.getParameterObject()).toString();
          }

        });
      }
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatingPointConstant", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode boolConst = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.FloatingPointConstant", null);
          SPropertyOperations.set(boolConst, "value", pattern);
          return boolConst;
        }

        public boolean hasSubstitute() {
          return true;
        }

        public boolean canSubstitute_internal(String pattern) {
          return Pattern.compile("(?:(?:(?:-)?))(?:(?:(?:\\d)+)(?:(?:\\.)(?:(?:\\d)*)))", 0).matcher(pattern).matches();
        }

        public String getMatchingText(String pattern) {
          return pattern;
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode stringLiteral = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.StringLiteral", null);
          {
            Pattern _pattern_0 = Pattern.compile("(?:(?:\")(?:((?:[^\"])*)))(?:(?:\")?)", 0);
            Matcher _matcher_0 = _pattern_0.matcher(pattern);
            if(_matcher_0.matches()) {
              SPropertyOperations.set(stringLiteral, "value", _matcher_0.group(1));
            }
          }
          return stringLiteral;
        }

        public boolean hasSubstitute() {
          return true;
        }

        public boolean canSubstitute_internal(String pattern) {
          return Pattern.compile("(?:\")(?:(?:(?:[^\"])*)(?:(?:\")?))", 0).matcher(pattern).matches();
        }

        public String getMatchingText(String pattern) {
          return pattern;
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expression_1177361135564(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldReference", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          SNode classConcept = SNodeOperations.getAncestor(parentNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
          return BaseLanguageSearchUtil_new.getVisibleInstanceFields(((ClassConcept)SNodeOperations.getAdapter(classConcept)), ((INodeAdapter)SNodeOperations.getAdapter(parentNode)));
        }

      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode ref = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.FieldReference", null);
            SLinkOperations.setTarget(ref, "variableDeclaration", ((SNode)this.getParameterObject()), false);
            SLinkOperations.setTarget(ref, "instance", SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.ThisExpression", null), true);
            return ref;
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expression_1177362994569(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCall", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          SNode classConcept = SNodeOperations.getAncestor(parentNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
          return BaseLanguageSearchUtil_new.getVisibleInstanceMethods(((ClassConcept)SNodeOperations.getAdapter(classConcept)), ((INodeAdapter)SNodeOperations.getAdapter(parentNode)));
        }

      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode call = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.InstanceMethodCall", null);
            SLinkOperations.setTarget(call, "instance", SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.ThisExpression", null), true);
            SLinkOperations.setTarget(call, "baseMethodDeclaration", ((SNode)this.getParameterObject()), false);
            return call;
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expression_1177396179719(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldReference", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          ISearchScope searchScope = BaseLanguageSearchUtil_new.createVisibleClassifiersScope(SNodeOperations.getModel(parentNode), IClassifiersSearchScope.CLASSIFFIER, operationContext.getScope());
          List<SNode> classifiers = new ArrayList<SNode>();
          for(SNode node : searchScope.getNodes()) {
            if(!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
              continue;
            }
            SNode cls = node;
            if(SequenceOperations.getSize(SLinkOperations.getTargets(cls, "staticField", true)) > 0) {
              ListOperations.addElement(classifiers, cls);
              continue;
            }
            if(SNodeOperations.isInstanceOf(cls, "jetbrains.mps.baseLanguage.structure.ClassConcept") && SequenceOperations.getSize(SLinkOperations.getTargets(cls, "staticMethod", true)) > 0) {
              ListOperations.addElement(classifiers, cls);
              continue;
            }
            if(SNodeOperations.isInstanceOf(cls, "jetbrains.mps.baseLanguage.structure.EnumClass") && SequenceOperations.getSize(SLinkOperations.getTargets(cls, "enumConstant", true)) > 0) {
              ListOperations.addElement(classifiers, cls);
              continue;
            }
          }
          return classifiers;
        }

      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.StaticFieldReference", null);
            SLinkOperations.setTarget(result, "classifier", ((SNode)this.getParameterObject()), false);
            return result;
          }

          public String getMatchingText(String pattern) {
            return SPropertyOperations.getString(((SNode)this.getParameterObject()), "name") + ".";
          }

          public String getDescriptionText(String pattern) {
            return NodePresentationUtil.descriptionText(((SNode)this.getParameterObject())) + " static access";
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expression_1177397791368(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          SNode parentFunction = SNodeOperations.getAncestor(parentNode, "jetbrains.mps.baseLanguage.structure.ConceptFunction", false, false);
          List<SNode> result = new ArrayList<SNode>();
          if(parentFunction == null) {
            return result;
          }
          ListOperations.addAllElements(result, SLinkOperations.getConceptLinkTargets(parentFunction, "conceptFunctionParameter"));
          ListOperations.addAllElements(result, SLinkOperations.getConceptLinkTargets(parentFunction, "applicableConceptFunctionParameter"));
          return result;
        }

      };
      Iterable queryResult = (Iterable)calc.calculate();
      for(Object item : queryResult) {
        List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions((ConceptDeclaration)BaseAdapter.fromNode((SNode)item), parentNode, currentTargetNode, childSetter, operationContext.getScope());
        result.addAll(defaultActions);
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Statement_1177400765735(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Statement", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          List<SNode> concepts = ListOperations.createList(new SNode[]{SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BreakStatement"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ContinueStatement")});
          return concepts;
        }

      };
      Iterable queryResult = (Iterable)calc.calculate();
      for(Object item : queryResult) {
        List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions((ConceptDeclaration)BaseAdapter.fromNode((SNode)item), parentNode, currentTargetNode, childSetter, operationContext.getScope());
        result.addAll(defaultActions);
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Statement_1177403614729(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", operationContext.getScope());
      ConceptDeclaration wrappedConcept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression", operationContext.getScope());
      IChildNodeSetter setter = new AbstractChildNodeSetter() {

        public SNode wrapNode(SNode nodeToWrap, SModel model) {
          SNode result = SModelOperations.createNewNode(SNodeOperations.getModel(nodeToWrap), "jetbrains.mps.baseLanguage.structure.ExpressionStatement", null);
          SLinkOperations.setTarget(result, "expression", nodeToWrap, true);
          return result;
        }

        public void doExecute(SNode pn, SNode oc, SNode nc, IScope sc) {
          childSetter.execute(parentNode, currentTargetNode, this.wrapNode(nc, nc.getModel()), operationContext.getScope());
        }

      };
      result.addAll(ModelActions.createChildSubstituteActions(parentNode, currentTargetNode, wrappedConcept, setter, operationContext));
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Statement_1177406371457(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", operationContext.getScope());
      ConceptDeclaration wrappedConcept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Type", operationContext.getScope());
      IChildNodeSetter setter = new AbstractChildNodeSetter() {

        public SNode wrapNode(SNode nodeToWrap, SModel model) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null);
          SNode var = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null);
          SLinkOperations.setTarget(var, "type", nodeToWrap, true);
          SLinkOperations.setTarget(result, "localVariableDeclaration", var, true);
          return result;
        }

        public void doExecute(SNode pn, SNode oc, SNode nc, IScope sc) {
          childSetter.execute(parentNode, currentTargetNode, this.wrapNode(nc, nc.getModel()), operationContext.getScope());
        }

      };
      result.addAll(ModelActions.createChildSubstituteActions(parentNode, currentTargetNode, wrappedConcept, setter, operationContext));
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Statement_1177406968279(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", operationContext.getScope());
      ConceptDeclaration wrappedConcept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", operationContext.getScope());
      IChildNodeSetter setter = new AbstractChildNodeSetter() {

        public SNode wrapNode(SNode nodeToWrap, SModel model) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null);
          SLinkOperations.setTarget(result, "localVariableDeclaration", nodeToWrap, true);
          return result;
        }

        public void doExecute(SNode pn, SNode oc, SNode nc, IScope sc) {
          childSetter.execute(parentNode, currentTargetNode, this.wrapNode(nc, nc.getModel()), operationContext.getScope());
        }

      };
      result.addAll(ModelActions.createChildSubstituteActions(parentNode, currentTargetNode, wrappedConcept, setter, operationContext));
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ParameterDeclaration_1177408380007(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", operationContext.getScope());
      ConceptDeclaration wrappedConcept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Type", operationContext.getScope());
      IChildNodeSetter setter = new AbstractChildNodeSetter() {

        public SNode wrapNode(SNode nodeToWrap, SModel model) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null);
          SLinkOperations.setTarget(result, "type", nodeToWrap, true);
          return result;
        }

        public void doExecute(SNode pn, SNode oc, SNode nc, IScope sc) {
          childSetter.execute(parentNode, currentTargetNode, this.wrapNode(nc, nc.getModel()), operationContext.getScope());
        }

      };
      result.addAll(ModelActions.createChildSubstituteActions(parentNode, currentTargetNode, wrappedConcept, setter, operationContext));
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Visibility_1178549410741(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Statement_1178893908066(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          SNode classConcept = SNodeOperations.getAncestor(parentNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
          SNode currentConstr = SNodeOperations.getAncestor(parentNode, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration", true, false);
          return SLinkOperations.getTargets(classConcept, "constructor", true);
        }

      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation", currentTargetNode);
            SLinkOperations.setTarget(newNode, "constructorDeclaration", ((SNode)this.getParameterObject()), false);
            if(SNodeOperations.isInstanceOf(currentTargetNode, "jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation")) {
              {
                ICursor<SNode> _zCursor = CursorFactory.createCursor(SLinkOperations.getTargets(currentTargetNode, "actualArgument", true));
                try {
                  while(_zCursor.moveToNext()) {
                    SNode argument = _zCursor.getCurrent();
                    SLinkOperations.addChild(newNode, "actualArgument", argument);
                  }
                } finally {
                  _zCursor.release();
                }
              }
            }
            return newNode;
          }

          public String getMatchingText(String pattern) {
            StringBuilder builder = new StringBuilder(SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation"), "alias"));
            QueriesUtil.appendParameterTypes_BaseMethodDeclaration(((SNode)this.getParameterObject()), builder);
            return builder.toString();
          }

          public String getDescriptionText(String pattern) {
            return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation"), "short_description");
          }

        });
      }
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          SNode classConcept = SNodeOperations.getAncestor(parentNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
          SNode superClass;
          if((SLinkOperations.getTarget(classConcept, "superclass", true) != null) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(classConcept, "superclass", true), "classifier", false), "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
            superClass = SLinkOperations.getTarget(SLinkOperations.getTarget(classConcept, "superclass", true), "classifier", false);
          } else
          {
            SNode node = JavaModelUtil_new.findClassifier(Object.class).getNode();
            superClass = node;
          }
          return SLinkOperations.getTargets(superClass, "constructor", true);
        }

      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation", currentTargetNode);
            SLinkOperations.setTarget(newNode, "constructorDeclaration", ((SNode)this.getParameterObject()), false);
            if(SNodeOperations.isInstanceOf(currentTargetNode, "jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation")) {
              {
                ICursor<SNode> _zCursor1 = CursorFactory.createCursor(SLinkOperations.getTargets(currentTargetNode, "actualArgument", true));
                try {
                  while(_zCursor1.moveToNext()) {
                    SNode argument = _zCursor1.getCurrent();
                    SLinkOperations.addChild(newNode, "actualArgument", argument);
                  }
                } finally {
                  _zCursor1.release();
                }
              }
            }
            return newNode;
          }

          public String getMatchingText(String pattern) {
            StringBuilder builder = new StringBuilder(SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation"), "alias"));
            QueriesUtil.appendParameterTypes_BaseMethodDeclaration(((SNode)this.getParameterObject()), builder);
            return builder.toString();
          }

          public String getDescriptionText(String pattern) {
            return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation"), "short_description");
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1138168906052(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation", operationContext.getScope());
      for(final AbstractConceptDeclaration abstractConcept : SModelUtil_new.getSubconcepts(concept, model, operationContext.getScope())) {
        if(!(abstractConcept instanceof ConceptDeclaration)) {
          continue;
        }
        if(abstractConcept.hasConceptProperty(BaseConcept.CPR_Abstract, operationContext.getScope())) {
          continue;
        }
        final ConceptDeclaration currentConcept = (ConceptDeclaration)abstractConcept;
        result.add(new AbstractRTransformHintSubstituteAction(currentConcept, sourceNode) {

          public SNode doSubstitute(String pattern) {
            SNode result = SModelUtil_new.instantiateConceptDeclaration(currentConcept, model).getNode();
            SNodeOperations.replaceWithAnother(sourceNode, result);
            SLinkOperations.setTarget(result, "leftExpression", sourceNode, true);
            if(SNodeOperations.isInstanceOf(SNodeOperations.getParent(result, null, false, false), "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
              ParenthesisUtil.checkOperationWRTPriority(SNodeOperations.getParent(result, null, false, false));
            } else
            {
              ParenthesisUtil.checkOperationWRTPriority(result);
            }
            return result;
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1177499026995(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldReference", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.FieldReference", null);
          SNodeOperations.replaceWithAnother(sourceNode, result);
          SLinkOperations.setTarget(result, "instance", sourceNode, true);
          return result;
        }

        public String getMatchingText(String pattern) {
          return ".";
        }

        public String getDescriptionText(String pattern) {
          return "instance member access";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1177502380176(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceOfExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceOfExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, result);
          SLinkOperations.setTarget(result, "leftExpression", sourceNode, true);
          return result;
        }

        public String getMatchingText(String pattern) {
          return "instanceof";
        }

        public String getDescriptionText(String pattern) {
          return "";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1177503307237(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode assignment = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.AssignmentExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, assignment);
          SLinkOperations.setTarget(assignment, "lValue", sourceNode, true);
          return assignment;
        }

        public String getMatchingText(String pattern) {
          return "=";
        }

        public String getDescriptionText(String pattern) {
          return "assignment";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1177503884612(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayAccessExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.ArrayAccessExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, result);
          SLinkOperations.setTarget(result, "array", sourceNode, true);
          return result;
        }

        public String getMatchingText(String pattern) {
          return "[";
        }

        public String getDescriptionText(String pattern) {
          return "array access";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1177504604528(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayLengthExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.ArrayLengthExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, result);
          SLinkOperations.setTarget(result, "array", sourceNode, true);
          return result;
        }

        public String getMatchingText(String pattern) {
          return ".length";
        }

        public String getDescriptionText(String pattern) {
          return "array length expression";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_VariableDeclaration_1177505054799(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableDeclaration", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.Expression", null);
          SLinkOperations.setTarget(sourceNode, "initializer", result, true);
          return sourceNode;
        }

        public String getMatchingText(String pattern) {
          return "=";
        }

        public String getDescriptionText(String pattern) {
          return "initializer";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Type_1177505359407(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayType", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.ArrayType", null);
          SNodeOperations.replaceWithAnother(sourceNode, result);
          SLinkOperations.setTarget(result, "componentType", sourceNode, true);
          return result;
        }

        public String getMatchingText(String pattern) {
          return "[]";
        }

        public String getDescriptionText(String pattern) {
          return "to array type";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_ClassifierType_1177505734540(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SLinkOperations.addNewChild(sourceNode, "parameter", "jetbrains.mps.baseLanguage.structure.Type");
          return SequenceOperations.getFirst(SLinkOperations.getTargets(sourceNode, "parameter", true));
        }

        public String getMatchingText(String pattern) {
          return "<";
        }

        public String getDescriptionText(String pattern) {
          return "add type parameter";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_GenericDeclaration_1177506104969(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericDeclaration", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SLinkOperations.addNewChild(sourceNode, "typeVariableDeclaration", "jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration");
          return SequenceOperations.getFirst(SLinkOperations.getTargets(sourceNode, "typeVariableDeclaration", true));
        }

        public String getMatchingText(String pattern) {
          return "<";
        }

        public String getDescriptionText(String pattern) {
          return "add type variable";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_NewExpression_1177506323525(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.NewExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SLinkOperations.addNewChild(sourceNode, "typeParameter", "jetbrains.mps.baseLanguage.structure.Type");
          return SequenceOperations.getFirst(SLinkOperations.getTargets(sourceNode, "typeParameter", true));
        }

        public String getMatchingText(String pattern) {
          return "<";
        }

        public String getDescriptionText(String pattern) {
          return "add type parameter";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_TryCatchStatement_1177507970664(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.TryCatchStatement", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SLinkOperations.addNewChild(sourceNode, "catchClause", "jetbrains.mps.baseLanguage.structure.CatchClause");
          return SequenceOperations.getFirst(SLinkOperations.getTargets(sourceNode, "catchClause", true));
        }

        public String getMatchingText(String pattern) {
          return "catch";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_TryCatchStatement_1177508119482(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.TryCatchStatement", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode tryStatement = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.TryStatement", null);
          SNode body = SLinkOperations.getTarget(sourceNode, "body", true);
          SLinkOperations.deleteChild(sourceNode, "body");
          SLinkOperations.setTarget(tryStatement, "body", body, true);
          for(SNode catchClause : SLinkOperations.getTargets(sourceNode, "catchClause", true)) {
            SNodeOperations.deleteNode(catchClause);
            SLinkOperations.addChild(tryStatement, "catchClause", catchClause);
          }
          SLinkOperations.setNewChild(tryStatement, "finallyBody", "jetbrains.mps.baseLanguage.structure.StatementList");
          SNodeOperations.replaceWithAnother(sourceNode, tryStatement);
          return tryStatement;
        }

        public String getMatchingText(String pattern) {
          return "finally";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1177508524786(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode to = SModelOperations.createNewNode(model, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, to);
          SLinkOperations.setTarget(to, "condition", sourceNode, true);
          return to;
        }

        public String getMatchingText(String pattern) {
          return "?";
        }

        public String getDescriptionText(String pattern) {
          return "ternary operator";
        }

      });
    }
    return result;
  }

}
