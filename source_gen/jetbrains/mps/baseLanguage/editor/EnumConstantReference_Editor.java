package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS*/


import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.semanticModel.SemanticNode;
import jetbrains.mps.nodeEditor.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.EditorCell_Collection;
import jetbrains.mps.nodeEditor.EditorCell_Error;
import jetbrains.mps.nodeEditor.EditorCellAction;
import jetbrains.mps.nodeEditor.CellAction_Empty;
import jetbrains.mps.nodeEditor.EditorCell_Constant;
import jetbrains.mps.bootstrap.structureLanguage.SemanticLinkDeclaration;
import jetbrains.mps.semanticModel.SemanticModelUtil;
import jetbrains.mps.nodeEditor.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.nodeEditor.EditorUtil;

public class EnumConstantReference_Editor extends DefaultNodeEditor {
  public static String MATCHING_TEXT = ". <enum constant>";
  public static String PRESENTATION_NAME = "enum constant";

  public void setSemanticNode(SemanticNode node) {
    super.setSemanticNode(node);
  }
  public EditorCell createEditorCell(EditorContext editorContext, SemanticNode node) {
    return this.createRowCell(editorContext, node);
  }
  public EditorCell createRowCell(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setGridLayout(false);
    editorCell.addEditorCell(this.createJavaClassTypeCell(editorContext, node));
    editorCell.addEditorCell(this.createConstantCell(editorContext, node, "."));
    editorCell.addEditorCell(this.createEnumConstantDeclarationReferenceCell(editorContext, node));
    return editorCell;
  }
  public EditorCell createJavaClassTypeCell(EditorContext editorContext, SemanticNode node) {
    SemanticNode javaClassType = node.getChild("javaClassType");
    EditorCell editorCell = null;
    if(javaClassType != null) {
      editorCell = editorContext.createNodeCell(javaClassType);
      EnumConstantReference_TypeActions.setCellActions(editorCell, node);
    } else 
    {
      editorCell = EditorCell_Error.create(editorContext, node, null);
      editorCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());
      EnumConstantReference_TypeActions.setCellActions(editorCell, node);
    }
    return editorCell;
  }
  public EditorCell createConstantCell(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    return editorCell;
  }
  public EditorCell createEnumConstantDeclarationReferenceCell(EditorContext editorContext, SemanticNode node) {
    SemanticNode effectiveNode = node.getReferent("enumConstantDeclaration");
    SemanticLinkDeclaration linkDeclaration = SemanticModelUtil.getLinkDeclaration(node, "enumConstantDeclaration");
    if(effectiveNode == null) {
      EditorCell_Error errorCell = EditorCell_Error.create(editorContext, node, null);
      errorCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());
      errorCell.setSubstituteInfo(new DefaultReferenceSubstituteInfo(node, linkDeclaration));
      EnumConstantReference_ConstantNameActions.setCellActions(errorCell, node);
      errorCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION, linkDeclaration);
      errorCell.putUserObject(EditorCell.METAINFO_SOURCE_NODE, node);
      return errorCell;
    }
    AbstractCellProvider enumConstantDeclaration_InlineComponent = new EnumConstantReference_Editor_enumConstantDeclaration_InlineComponent(effectiveNode);
    EditorCell editorCell = enumConstantDeclaration_InlineComponent.createEditorCell(editorContext);
    EditorUtil.setSemanticNodeToCells(editorCell, node);
    editorCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());
    editorCell.setSubstituteInfo(new DefaultReferenceSubstituteInfo(node, linkDeclaration));
    EnumConstantReference_ConstantNameActions.setCellActions(editorCell, node);
    editorCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION, linkDeclaration);
    editorCell.putUserObject(EditorCell.METAINFO_SOURCE_NODE, node);
    return editorCell;
  }
}
