package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCellKeyMap;
import jetbrains.mps.nodeEditor.EditorCellKeyMapAction;
import java.awt.event.KeyEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.EditorCell;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.constraints.FieldDeclaration_Behavior;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;

public class FieldDeclaration_keyMap extends EditorCellKeyMap {

  public  FieldDeclaration_keyMap() {
    this.setApplicableToEveryModel(false);
    EditorCellKeyMapAction action;
    this.putAction("alt", "VK_INSERT", new FieldDeclaration_keyMap.FieldDeclaration_keyMap_Action0());
    this.putAction("alt", "VK_INSERT", new FieldDeclaration_keyMap.FieldDeclaration_keyMap_Action1());
  }
  public static class FieldDeclaration_keyMap_Action0 extends EditorCellKeyMapAction {

    public  FieldDeclaration_keyMap_Action0() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "Generate getter";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(KeyEvent keyEvent, EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if(contextNode == null) {
        return false;
      }
      if(contextNode.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.FieldDeclaration", editorContext.getOperationContext().getScope())) {
        return this.canExecute_internal(keyEvent, editorContext, contextNode);
      }
      return false;
    }

    public void execute(KeyEvent keyEvent, EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode());
    }

    public boolean canExecute_internal(KeyEvent keyEvent, EditorContext editorContext, SNode node) {
      SNode classConcept = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
      return (classConcept != null) && !(FieldDeclaration_Behavior.call_hasGetter_1184161255813(node, classConcept));
    }

    public void execute_internal(KeyEvent keyEvent, EditorContext editorContext, SNode node) {
      SNode classConcept = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
      SNode getterMethod = SLinkOperations.addNewChild(classConcept, "method", "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
      SPropertyOperations.set(getterMethod, "name", FieldDeclaration_Behavior.call_getGetterName_1184160785366(node));
      SLinkOperations.setTarget(getterMethod, "returnType", SNodeOperations.copyNode(SLinkOperations.getTarget(node, "type", true)), true);
      SNode rs = SLinkOperations.addNewChild(SLinkOperations.getTarget(getterMethod, "body", true), "statement", "jetbrains.mps.baseLanguage.structure.ReturnStatement");
      SNode fr = SLinkOperations.setNewChild(rs, "expression", "jetbrains.mps.baseLanguage.structure.FieldReference");
      SLinkOperations.setNewChild(fr, "instance", "jetbrains.mps.baseLanguage.structure.ThisExpression");
      SLinkOperations.setTarget(fr, "variableDeclaration", node, false);
    }

    public String getKeyStroke() {
      return "alt INSERT";
    }

}
  public static class FieldDeclaration_keyMap_Action1 extends EditorCellKeyMapAction {

    public  FieldDeclaration_keyMap_Action1() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "Generate setter";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(KeyEvent keyEvent, EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if(contextNode == null) {
        return false;
      }
      if(contextNode.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.FieldDeclaration", editorContext.getOperationContext().getScope())) {
        return this.canExecute_internal(keyEvent, editorContext, contextNode);
      }
      return false;
    }

    public void execute(KeyEvent keyEvent, EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode());
    }

    public boolean canExecute_internal(KeyEvent keyEvent, EditorContext editorContext, SNode node) {
      SNode classConcept = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
      return (classConcept != null) && !(FieldDeclaration_Behavior.call_hasSetter_1184161485385(node, classConcept));
    }

    public void execute_internal(KeyEvent keyEvent, EditorContext editorContext, SNode node) {
      SNode classConcept = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
      SNode setterMethod = SLinkOperations.addNewChild(classConcept, "method", "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
      SPropertyOperations.set(setterMethod, "name", FieldDeclaration_Behavior.call_getSetterName_1184160800181(node));
      SLinkOperations.setNewChild(setterMethod, "returnType", "jetbrains.mps.baseLanguage.structure.VoidType");
      SNode parameter = SLinkOperations.addNewChild(setterMethod, "parameter", "jetbrains.mps.baseLanguage.structure.ParameterDeclaration");
      SPropertyOperations.set(parameter, "name", SPropertyOperations.getString(node, "name"));
      SLinkOperations.setTarget(parameter, "type", SNodeOperations.copyNode(SLinkOperations.getTarget(node, "type", true)), true);
      SNode rs = SLinkOperations.addNewChild(SLinkOperations.getTarget(setterMethod, "body", true), "statement", "jetbrains.mps.baseLanguage.structure.ExpressionStatement");
      SNode assignment = SLinkOperations.setNewChild(rs, "expression", "jetbrains.mps.baseLanguage.structure.AssignmentExpression");
      SNode fr = SLinkOperations.setNewChild(assignment, "lValue", "jetbrains.mps.baseLanguage.structure.FieldReference");
      SLinkOperations.setNewChild(fr, "instance", "jetbrains.mps.baseLanguage.structure.ThisExpression");
      SLinkOperations.setTarget(fr, "variableDeclaration", node, false);
      SLinkOperations.setTarget(SLinkOperations.setNewChild(assignment, "rValue", "jetbrains.mps.baseLanguage.structure.ParameterReference"), "variableDeclaration", parameter, false);
    }

    public String getKeyStroke() {
      return "alt INSERT";
    }

}

}
