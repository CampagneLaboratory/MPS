package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS*/


import jetbrains.mps.nodeEditor.SemanticNodeEditor;
import jetbrains.mps.nodeEditor.EditorCellListHandler;
import jetbrains.mps.semanticModel.SemanticNode;
import jetbrains.mps.nodeEditor.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.EditorCell_Collection;
import jetbrains.mps.nodeEditor.EditorCell_Constant;
import jetbrains.mps.nodeEditor.ModelAccessor;
import jetbrains.mps.nodeEditor.PropertyAccessor;
import jetbrains.mps.nodeEditor.EditorCell_Property;
import jetbrains.mps.nodeEditor.EditorCellAction;
import jetbrains.mps.nodeEditor.CellAction_DeleteProperty;

public class EnumClass_Editor extends SemanticNodeEditor {

  private EditorCellListHandler myEnumConstantListHandler;
  private EditorCellListHandler myFieldListHandler;
  private EditorCellListHandler myConstructorListHandler;
  private EditorCellListHandler myMethodListHandler;
  private EditorCellListHandler myStaticMethodListHandler;

  public void setSemanticNode(SemanticNode node) {
    super.setSemanticNode(node);
    myEnumConstantListHandler = new EnumClass_Editor_EnumConstantListHandler(node, "enumConstant", "aggregation");
    myFieldListHandler = new EnumClass_Editor_FieldListHandler(node, "field", "aggregation");
    myConstructorListHandler = new EnumClass_Editor_ConstructorListHandler(node, "constructor", "aggregation");
    myMethodListHandler = new EnumClass_Editor_MethodListHandler(node, "method", "aggregation");
    myStaticMethodListHandler = new EnumClass_Editor_StaticMethodListHandler(node, "staticMethod", "aggregation");
  }
  public EditorCell createEditorCell(EditorContext editorContext, SemanticNode node) {
    return this.createColumnCell(editorContext, node);
  }
  public EditorCell createColumnCell(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setGridLayout(false);
    EnumClass_NodeBoxActions.setCellActions(editorCell, node);
    editorCell.addEditorCell(this.createRowCell(editorContext, node));
    editorCell.addEditorCell(this.createRowCell1(editorContext, node));
    editorCell.addEditorCell(this.createRowCell2(editorContext, node));
    editorCell.addEditorCell(this.createRowCell3(editorContext, node));
    editorCell.addEditorCell(this.createRowCell4(editorContext, node));
    editorCell.addEditorCell(this.createRowCell5(editorContext, node));
    editorCell.addEditorCell(this.createConstantCell12(editorContext, node, "}"));
    return editorCell;
  }
  public EditorCell createRowCell(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setGridLayout(false);
    editorCell.addEditorCell(this.createConstantCell(editorContext, node, "enum"));
    editorCell.addEditorCell(this.createNameCell(editorContext, node));
    editorCell.addEditorCell(this.createConstantCell1(editorContext, node, "{"));
    return editorCell;
  }
  public EditorCell createConstantCell(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    editorCell.setSelectable(false);
    return editorCell;
  }
  public EditorCell createNameCell(EditorContext editorContext, SemanticNode node) {
    ModelAccessor modelAccessor = new PropertyAccessor(node, "name", false, false);
    EditorCell_Property editorCell = EditorCell_Property.create(editorContext, modelAccessor, node);
    editorCell.setSelectable(true);
    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteProperty(node, "name"));
    return editorCell;
  }
  public EditorCell createConstantCell1(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    editorCell.setSelectable(false);
    return editorCell;
  }
  public EditorCell createRowCell1(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setGridLayout(false);
    editorCell.addEditorCell(this.createConstantCell2(editorContext, node, "    "));
    editorCell.addEditorCell(this.createEnumConstantList(editorContext, node));
    return editorCell;
  }
  public EditorCell createConstantCell2(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    return editorCell;
  }
  public EditorCell createEnumConstantList(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection cellCollection = myEnumConstantListHandler.createCells_Vertical(editorContext);
    cellCollection.setGridLayout(false);
    return cellCollection;
  }
  public EditorCell createRowCell2(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setGridLayout(false);
    editorCell.addEditorCell(this.createConstantCell4(editorContext, node, "    "));
    editorCell.addEditorCell(this.createFieldList(editorContext, node));
    return editorCell;
  }
  public EditorCell createConstantCell4(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    return editorCell;
  }
  public EditorCell createFieldList(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection cellCollection = myFieldListHandler.createCells_Vertical(editorContext);
    cellCollection.setGridLayout(false);
    return cellCollection;
  }
  public EditorCell createRowCell3(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setGridLayout(false);
    editorCell.addEditorCell(this.createConstantCell6(editorContext, node, "    "));
    editorCell.addEditorCell(this.createConstructorList(editorContext, node));
    return editorCell;
  }
  public EditorCell createConstantCell6(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    return editorCell;
  }
  public EditorCell createConstructorList(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection cellCollection = myConstructorListHandler.createCells_Vertical(editorContext);
    cellCollection.setGridLayout(false);
    return cellCollection;
  }
  public EditorCell createRowCell4(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setGridLayout(false);
    editorCell.addEditorCell(this.createConstantCell8(editorContext, node, "    "));
    editorCell.addEditorCell(this.createMethodList(editorContext, node));
    return editorCell;
  }
  public EditorCell createConstantCell8(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    return editorCell;
  }
  public EditorCell createMethodList(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection cellCollection = myMethodListHandler.createCells_Vertical(editorContext);
    cellCollection.setGridLayout(false);
    return cellCollection;
  }
  public EditorCell createRowCell5(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setGridLayout(false);
    editorCell.addEditorCell(this.createConstantCell10(editorContext, node, "    "));
    editorCell.addEditorCell(this.createStaticMethodList(editorContext, node));
    return editorCell;
  }
  public EditorCell createConstantCell10(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    return editorCell;
  }
  public EditorCell createStaticMethodList(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection cellCollection = myStaticMethodListHandler.createCells_Vertical(editorContext);
    cellCollection.setGridLayout(false);
    return cellCollection;
  }
  public EditorCell createConstantCell12(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    editorCell.setSelectable(false);
    return editorCell;
  }
}
