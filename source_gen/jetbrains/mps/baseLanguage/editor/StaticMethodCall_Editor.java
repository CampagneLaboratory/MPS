package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS*/


import jetbrains.mps.nodeEditor.SemanticNodeEditor;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.semanticModel.SemanticNode;
import jetbrains.mps.nodeEditor.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.EditorCell_Collection;
import jetbrains.mps.nodeEditor.EditorCell_Error;
import jetbrains.mps.nodeEditor.EditorCellAction;
import jetbrains.mps.nodeEditor.CellAction_Empty;
import jetbrains.mps.nodeEditor.EditorCell_Constant;

public class StaticMethodCall_Editor extends SemanticNodeEditor {
  public static String MATCHING_TEXT = ". <static method>";
  public static String PRESENTATION_NAME = "static method call";

  private AbstractCellProvider my_BaseMethodCallArgListEditor;

  public void setSemanticNode(SemanticNode node) {
    super.setSemanticNode(node);
  }
  public EditorCell createEditorCell(EditorContext editorContext, SemanticNode node) {
    return this.createRowCell(editorContext, node);
  }
  public EditorCell createRowCell(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setGridLayout(false);
    editorCell.setKeyMap(new _Expression_KeyMap());
    editorCell.addEditorCell(this.createJavaClassTypeCell(editorContext, node));
    editorCell.addEditorCell(this.createConstantCell(editorContext, node, "."));
    editorCell.addEditorCell(this.createBaseMethodDeclarationReferenceCell(editorContext, node));
    editorCell.addEditorCell(this.createConstantCell1(editorContext, node, "("));
    editorCell.addEditorCell(this.create_BaseMethodCallArgListEditorCell(editorContext, node));
    editorCell.addEditorCell(this.createConstantCell2(editorContext, node, ")"));
    return editorCell;
  }
  public EditorCell createJavaClassTypeCell(EditorContext editorContext, SemanticNode node) {
    SemanticNode javaClassType = node.getReferent("javaClassType", (SemanticNode)null);
    EditorCell editorCell = null;
    if(javaClassType != null) {
      editorCell = editorContext.createNodeCell(javaClassType);
      StaticMethodCall_TypeActions.setCellActions(editorCell, node);
    } else {
      editorCell = EditorCell_Error.create(editorContext, node, "<no type>");
      editorCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());
      StaticMethodCall_TypeActions.setCellActions(editorCell, node);
    }
    return editorCell;
  }
  public EditorCell createConstantCell(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    return editorCell;
  }
  public EditorCell createBaseMethodDeclarationReferenceCell(EditorContext editorContext, SemanticNode node) {
    SemanticNode effectiveNode = node.getReferent("baseMethodDeclaration", (SemanticNode)null);
    if(effectiveNode == null) {
      EditorCell_Error errorCell = EditorCell_Error.create(editorContext, node, "<no method>");
      errorCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());
      StaticMethodCall_MethodNameActions.setCellActions(errorCell, node);
      return errorCell;
    }
    AbstractCellProvider baseMethodDeclaration_InlineComponent = new StaticMethodCall_Editor_baseMethodDeclaration_InlineComponent(effectiveNode);
    EditorCell editorCell = baseMethodDeclaration_InlineComponent.createEditorCell(editorContext);
    StaticMethodCall_MethodNameActions.setCellActions(editorCell, node);
    return editorCell;
  }
  public EditorCell createConstantCell1(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    return editorCell;
  }
  public EditorCell create_BaseMethodCallArgListEditorCell(EditorContext editorContext, SemanticNode node) {
    if(my_BaseMethodCallArgListEditor == null) {
      my_BaseMethodCallArgListEditor = new _BaseMethodCallArgListEditor(node);
    }
    EditorCell editorCell = my_BaseMethodCallArgListEditor.createEditorCell(editorContext);
    return editorCell;
  }
  public EditorCell createConstantCell2(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    editorCell.setSelectable(true);
    editorCell.setEditable(false);
    __ExpressionClosingParethesis_ActionSet.setCellActions(editorCell, node);
    return editorCell;
  }
}
