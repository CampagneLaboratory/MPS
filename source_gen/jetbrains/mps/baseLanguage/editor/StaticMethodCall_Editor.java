package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS*/


import jetbrains.mps.nodeEditor.SemanticNodeEditor;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.semanticModel.SemanticNode;
import jetbrains.mps.nodeEditor.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.EditorCell_Collection;
import jetbrains.mps.nodeEditor.EditorCell_Error;
import jetbrains.mps.nodeEditor.EditorCell_Constant;
import jetbrains.mps.nodeEditor.ModelAccessor;
import jetbrains.mps.nodeEditor.EditorCell_Property;

public class StaticMethodCall_Editor extends SemanticNodeEditor {
  public static String MATCHING_TEXT = ". <static method>";
  public static String PRESENTATION_NAME = "static method call";

  private AbstractCellProvider my_BaseMethodCallArgListEditor;

  public void setSemanticNode(SemanticNode node) {
    super.setSemanticNode(node);
    my_BaseMethodCallArgListEditor = new _BaseMethodCallArgListEditor(node);
  }
  public EditorCell createEditorCell(EditorContext editorContext, SemanticNode node) {
    return this.createRowCell(editorContext, node);
  }
  public EditorCell createRowCell(EditorContext editorContext, SemanticNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setGridLayout(false);
    editorCell.addEditorCell(this.createJavaClassTypeCell(editorContext, node));
    editorCell.addEditorCell(this.createConstantCell(editorContext, node, "."));
    editorCell.addEditorCell(this.createMethodCallNameCell(editorContext, node));
    editorCell.addEditorCell(this.createConstantCell1(editorContext, node, "("));
    editorCell.addEditorCell(this.create_BaseMethodCallArgListEditorCell(editorContext, node));
    editorCell.addEditorCell(this.createConstantCell2(editorContext, node, ")"));
    return editorCell;
  }
  public EditorCell createJavaClassTypeCell(EditorContext editorContext, SemanticNode node) {
    SemanticNode javaClassType = node.getReferent("javaClassType", (SemanticNode)null);
    EditorCell editorCell = null;
    if(javaClassType != null) {
      editorCell = this.nodeCell(editorContext, javaClassType);
      StaticMethodCall_StaticMethodCellActions.setCellActions(editorCell, node);
    } else {
      editorCell = EditorCell_Error.create(editorContext, node, null);
      StaticMethodCall_StaticMethodCellActions.setCellActions(editorCell, node);
    }
    return editorCell;
  }
  public EditorCell createConstantCell(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    return editorCell;
  }
  public EditorCell createMethodCallNameCell(EditorContext editorContext, SemanticNode node) {
    ModelAccessor modelAccessor = new StaticMethodCall_Editor_MethodCallName_Query(node);
    EditorCell editorCell = null;
    if(modelAccessor != null) {
      editorCell = EditorCell_Property.create(editorContext, modelAccessor, node);
    } else {
      editorCell = EditorCell_Error.create(editorContext, node, null);
    }
    StaticMethodCall_NameCellActions.setCellActions(editorCell, node);
    return editorCell;
  }
  public EditorCell createConstantCell1(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    return editorCell;
  }
  public EditorCell create_BaseMethodCallArgListEditorCell(EditorContext editorContext, SemanticNode node) {
    EditorCell editorCell = my_BaseMethodCallArgListEditor.createEditorCell(editorContext);
    return editorCell;
  }
  public EditorCell createConstantCell2(EditorContext editorContext, SemanticNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(editorContext, node, text, false);
    editorCell.setSelectable(true);
    editorCell.setEditable(false);
    __ExpressionClosingParethesis_ActionSet.setCellActions(editorCell, node);
    return editorCell;
  }
}
