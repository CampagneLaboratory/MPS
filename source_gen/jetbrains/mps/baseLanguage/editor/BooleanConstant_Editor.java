package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS*/


import jetbrains.mps.nodeEditor.SemanticNodeEditor;
import jetbrains.mps.semanticModel.SemanticNode;
import jetbrains.mps.nodeEditor.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.ModelAccessor;
import jetbrains.mps.nodeEditor.EditorCell_Property;
import jetbrains.mps.nodeEditor.EditorCell_Label;
import jetbrains.mps.nodeEditor.EditorCell_Error;

public class BooleanConstant_Editor extends SemanticNodeEditor {
  public static String PRESENTATION_NAME = "boolean constant";

  public void setSemanticNode(SemanticNode node) {
    super.setSemanticNode(node);
  }
  public EditorCell createEditorCell(EditorContext editorContext, SemanticNode node) {
    return this.createValueCell(editorContext, node);
  }
  public EditorCell createValueCell(EditorContext editorContext, SemanticNode node) {
    ModelAccessor modelAccessor = new BooleanConstant_Editor_BooleanConstantValue_Query(node);
    EditorCell editorCell = null;
    if(modelAccessor != null) {
      editorCell = EditorCell_Property.create(editorContext, modelAccessor, node);
      ((EditorCell_Label)editorCell).setEditable(true);
    } else {
      editorCell = EditorCell_Error.create(editorContext, node, null);
}
    BooleanConstant_NodeBoxActions.setCellActions(editorCell, node);
    editorCell.setKeyMap(new _Expression_KeyMap());
    return editorCell;
  }
}
