package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS*/


import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorCell_Collection;
import java.awt.Color;
import jetbrains.mps.nodeEditor.EditorCell_Constant;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.bootstrap.structureLanguage.LinkDeclaration;
import jetbrains.mps.smodel.SModelUtil;
import jetbrains.mps.nodeEditor.EditorCell_Error;
import jetbrains.mps.resolve.BadReferenceTextProvider;
import jetbrains.mps.nodeEditor.EditorCellAction;
import jetbrains.mps.nodeEditor.CellAction_Empty;
import jetbrains.mps.nodeEditor.DefaultChildSubstituteInfo;
import jetbrains.mps.nodeEditor.CellAction_DeleteSmart;

public class InstanceOfExpression_Editor extends DefaultNodeEditor {

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createExpressionBox(context, node);
  }
  public EditorCell createExpressionBox(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    editorCell.setSelectable(true);
    editorCell.setDrawBorder(false);
    editorCell.setGridLayout(false);
    editorCell.setDrawBrackets(false);
    editorCell.setBracketsColor(Color.black);
    editorCell.addEditorCell(this.createLeftExpressionCell(context, node));
    editorCell.addEditorCell(this.createConstantCell(context, node, "instanceof"));
    editorCell.addEditorCell(this.createClassTypeCell(context, node));
    editorCell.putUserObject(EditorCell.CELL_ID, "1081257073129");
    return editorCell;
  }
  public EditorCell createConstantCell(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);
    editorCell.setSelectable(true);
    editorCell.setDrawBorder(false);
    editorCell.setEditable(false);
    editorCell.setDefaultText("");
    editorCell.setDrawBrackets(false);
    editorCell.setBracketsColor(Color.black);
    editorCell.getTextLine().setTextColor(MPSColors.DARK_BLUE);
    editorCell.putUserObject(EditorCell.CELL_ID, "1081257097747");
    return editorCell;
  }
  public EditorCell createLeftExpressionCell(EditorContext context, SNode node) {
    SNode referencedNode = null;
    SReference reference = null;
    referencedNode = node.getChild("leftExpression");
    LinkDeclaration linkDeclaration = SModelUtil.getLinkDeclaration(node, "leftExpression");
    if(!(reference == null) && !((reference.isResolved()))) {
      EditorCell_Error noRefCell = EditorCell_Error.create(context, node, BadReferenceTextProvider.getBadReferenceText(reference));
      noRefCell.setEditable(true);
      noRefCell.setSelectable(true);
      noRefCell.setDrawBorder(false);
      noRefCell.setDrawBrackets(false);
      noRefCell.setBracketsColor(Color.black);
      noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());
      noRefCell.setSubstituteInfo(new DefaultChildSubstituteInfo(node, linkDeclaration));
      InstanceOfExpression_LeftExpressionsActions.setCellActions(noRefCell, node);
      _DefErrorActions.setCellActions(noRefCell, node);
      noRefCell.putUserObject(EditorCell.CELL_ID, "1081257097746");
      return noRefCell;
    }
    if(referencedNode == null) {
      {
        EditorCell_Error noRefCell = EditorCell_Error.create(context, node, "");
        noRefCell.setEditable(true);
        noRefCell.setSelectable(true);
        noRefCell.setDrawBorder(false);
        noRefCell.setDrawBrackets(false);
        noRefCell.setBracketsColor(Color.black);
        noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());
        noRefCell.setSubstituteInfo(new DefaultChildSubstituteInfo(node, linkDeclaration));
        InstanceOfExpression_LeftExpressionsActions.setCellActions(noRefCell, node);
        _DefErrorActions.setCellActions(noRefCell, node);
        noRefCell.putUserObject(EditorCell.CELL_ID, "1081257097746");
        return noRefCell;
      }
    }
    EditorCell editorCell = context.createNodeCell(referencedNode);
    editorCell.setSelectable(true);
    editorCell.setDrawBorder(false);
    editorCell.setDrawBrackets(false);
    editorCell.setBracketsColor(Color.black);
    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteSmart(node, linkDeclaration, referencedNode));
    editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(node, linkDeclaration));
    InstanceOfExpression_LeftExpressionsActions.setCellActions(editorCell, node);
    return editorCell;
  }
  public EditorCell createClassTypeCell(EditorContext context, SNode node) {
    SNode referencedNode = null;
    SReference reference = null;
    referencedNode = node.getChild("classType");
    LinkDeclaration linkDeclaration = SModelUtil.getLinkDeclaration(node, "classType");
    if(!(reference == null) && !((reference.isResolved()))) {
      EditorCell_Error noRefCell = EditorCell_Error.create(context, node, BadReferenceTextProvider.getBadReferenceText(reference));
      noRefCell.setEditable(true);
      noRefCell.setSelectable(true);
      noRefCell.setDrawBorder(false);
      noRefCell.setDrawBrackets(false);
      noRefCell.setBracketsColor(Color.black);
      noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());
      noRefCell.setSubstituteInfo(new DefaultChildSubstituteInfo(node, linkDeclaration));
      InstanceOfExpression_InstanceOfTypes.setCellActions(noRefCell, node);
      _DefErrorActions.setCellActions(noRefCell, node);
      noRefCell.putUserObject(EditorCell.CELL_ID, "1081257097748");
      return noRefCell;
    }
    if(referencedNode == null) {
      {
        EditorCell_Error noRefCell = EditorCell_Error.create(context, node, "");
        noRefCell.setEditable(true);
        noRefCell.setSelectable(true);
        noRefCell.setDrawBorder(false);
        noRefCell.setDrawBrackets(false);
        noRefCell.setBracketsColor(Color.black);
        noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());
        noRefCell.setSubstituteInfo(new DefaultChildSubstituteInfo(node, linkDeclaration));
        InstanceOfExpression_InstanceOfTypes.setCellActions(noRefCell, node);
        _DefErrorActions.setCellActions(noRefCell, node);
        noRefCell.putUserObject(EditorCell.CELL_ID, "1081257097748");
        return noRefCell;
      }
    }
    EditorCell editorCell = context.createNodeCell(referencedNode);
    editorCell.setSelectable(true);
    editorCell.setDrawBorder(false);
    editorCell.setDrawBrackets(false);
    editorCell.setBracketsColor(Color.black);
    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteSmart(node, linkDeclaration, referencedNode));
    editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(node, linkDeclaration));
    InstanceOfExpression_InstanceOfTypes.setCellActions(editorCell, node);
    return editorCell;
  }
}
