package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS  */

import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.LinkedList;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.baseLanguage.BaseLanguageSearchUtil;
import jetbrains.mps.baseLanguage.Classifier;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.baseLanguage.ClassifierType;
import jetbrains.mps.baseLanguage.types.BaseLanguageTypesUtil;
import jetbrains.mps.baseLanguage.Expression;

public class QueriesUtil {

  public static List<SNode> replaceNodeMenu_StaticFieldReference_getParameterObjects(SNode node) {
    List<SNode> result = new LinkedList<SNode>();
    SNode classifier = SLinkOperations.getTarget(node, "classifier", false);
    if(classifier == null) {
      return result;
    }
    ISearchScope classHierarchy = BaseLanguageSearchUtil.createClassifierHierarchyScope((Classifier)classifier, IClassifiersSearchScope.STATIC_MEMBER);
    List staticMethods = BaseLanguageSearchUtil.getMethodsExcludingOverridden(classHierarchy);
    ListOperations.addAllElements(result, (List<SNode>)staticMethods);
    List<SNode> allStaticMembers = classHierarchy.getNodes();
    ListOperations.addAllElements(result, SequenceOperations.where(allStaticMembers, new zPredicate(null, null)));
    return result;
  }
  public static SNode replaceNodeMenu_StaticFieldReference_createReplacementNode(SNode node, SNode parameterObject) {
    if(SNodeOperations.isInstanceOf(parameterObject, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
      SNode newNode = SModelOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.baseLanguage.structure.StaticMethodCall");
      SLinkOperations.setTarget(newNode, "baseMethodDeclaration", parameterObject, false);
      SLinkOperations.setTarget(newNode, "classConcept", SLinkOperations.getTarget(node, "classifier", false), false);
      return newNode;
    }
    if(SNodeOperations.isInstanceOf(parameterObject, "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration")) {
      SNode newNode = SModelOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.baseLanguage.structure.EnumConstantReference");
      SLinkOperations.setTarget(newNode, "enumConstantDeclaration", parameterObject, false);
      SLinkOperations.setTarget(newNode, "enumClass", SLinkOperations.getTarget(node, "classifier", false), false);
      return newNode;
    }
    return node;
  }
  public static List<SNode> replaceNodeMenu_StaticMethodCall_getParameterObjects(SNode node) {
    List<SNode> result = new LinkedList<SNode>();
    SNode classifier = SLinkOperations.getTarget(node, "classConcept", false);
    if(classifier == null) {
      return result;
    }
    ISearchScope classHierarchy = BaseLanguageSearchUtil.createClassifierHierarchyScope((Classifier)classifier, IClassifiersSearchScope.STATIC_MEMBER);
    List staticFields = BaseLanguageSearchUtil.getFieldsExcludingOverridden(classHierarchy);
    ListOperations.addAllElements(result, (List<SNode>)staticFields);
    List<SNode> allStaticMembers = classHierarchy.getNodes();
    ListOperations.addAllElements(result, SequenceOperations.where(allStaticMembers, new zPredicate1(null, null)));
    return result;
  }
  public static SNode replaceNodeMenu_StaticMethodCall_createReplacementNode(SNode node, SNode parameterObject) {
    if(SNodeOperations.isInstanceOf(parameterObject, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
      SNode newNode = SModelOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.baseLanguage.structure.StaticFieldReference");
      SLinkOperations.setTarget(newNode, "variableDeclaration", parameterObject, false);
      SLinkOperations.setTarget(newNode, "classifier", SLinkOperations.getTarget(node, "classConcept", false), false);
      return newNode;
    }
    if(SNodeOperations.isInstanceOf(parameterObject, "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration")) {
      SNode newNode = SModelOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.baseLanguage.structure.EnumConstantReference");
      SLinkOperations.setTarget(newNode, "enumConstantDeclaration", parameterObject, false);
      SLinkOperations.setTarget(newNode, "enumClass", SLinkOperations.getTarget(node, "classConcept", false), false);
      return newNode;
    }
    return node;
  }
  public static List<SNode> replaceNodeMenu_EnumConstantReference_getParameterObjects(SNode node) {
    List<SNode> result = new LinkedList<SNode>();
    SNode classifier = SLinkOperations.getTarget(node, "enumClass", false);
    if(classifier == null) {
      return result;
    }
    ISearchScope classHierarchy = BaseLanguageSearchUtil.createClassifierHierarchyScope((Classifier)classifier, IClassifiersSearchScope.STATIC_MEMBER);
    List staticFields = BaseLanguageSearchUtil.getFieldsExcludingOverridden(classHierarchy);
    ListOperations.addAllElements(result, (List<SNode>)staticFields);
    List staticMethods = BaseLanguageSearchUtil.getMethodsExcludingOverridden(classHierarchy);
    ListOperations.addAllElements(result, (List<SNode>)staticMethods);
    return result;
  }
  public static SNode replaceNodeMenu_EnumConstantReference_createReplacementNode(SNode node, SNode parameterObject) {
    if(SNodeOperations.isInstanceOf(parameterObject, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
      SNode newNode = SModelOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.baseLanguage.structure.StaticFieldReference");
      SLinkOperations.setTarget(newNode, "variableDeclaration", parameterObject, false);
      SLinkOperations.setTarget(newNode, "classifier", SLinkOperations.getTarget(node, "enumClass", false), false);
      return newNode;
    }
    if(SNodeOperations.isInstanceOf(parameterObject, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
      SNode newNode = SModelOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.baseLanguage.structure.StaticMethodCall");
      SLinkOperations.setTarget(newNode, "baseMethodDeclaration", parameterObject, false);
      SLinkOperations.setTarget(newNode, "classConcept", SLinkOperations.getTarget(node, "enumClass", false), false);
      return newNode;
    }
    return node;
  }
  public static List<SNode> replaceNodeMenu_FieldReference_getParameterObjects(SNode node) {
    List<SNode> result = new LinkedList<SNode>();
    SNode instance = SLinkOperations.getTarget(node, "instance", true);
    if(instance == null) {
      return result;
    }
    ClassifierType instanceType = BaseLanguageTypesUtil.tryObtain_ClassifierType((Expression)instance);
    if(instanceType == null) {
      return result;
    }
    ISearchScope classHierarchy = BaseLanguageSearchUtil.createClassifierHierarchyScope(instanceType, IClassifiersSearchScope.INSTANCE_METHOD);
    result = (List)BaseLanguageSearchUtil.getMethodsExcludingOverridden(classHierarchy);
    return result;
  }
  public static SNode replaceNodeMenu_FieldReference_createReplacementNode(SNode node, SNode parameterObject) {
    if(SNodeOperations.isInstanceOf(parameterObject, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
      SNode newNode = SModelOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.baseLanguage.structure.InstanceMethodCall");
      SLinkOperations.setTarget(newNode, "baseMethodDeclaration", parameterObject, false);
      SLinkOperations.setTarget(newNode, "instance", SLinkOperations.getTarget(node, "instance", true), true);
      return newNode;
    }
    return node;
  }
  public static List<SNode> replaceNodeMenu_InstanceMethodCall_getParameterObjects(SNode referenceNode) {
    List<SNode> result = new LinkedList<SNode>();
    SNode instance = SLinkOperations.getTarget(referenceNode, "instance", true);
    if(instance == null) {
      return result;
    }
    ClassifierType instanceType = BaseLanguageTypesUtil.tryObtain_ClassifierType((Expression)instance);
    if(instanceType == null) {
      return result;
    }
    ISearchScope classHierarchy = BaseLanguageSearchUtil.createClassifierHierarchyScope(instanceType, IClassifiersSearchScope.INSTANCE_FIELD);
    result = (List)BaseLanguageSearchUtil.getFieldsExcludingOverridden(classHierarchy);
    return result;
  }
  public static SNode replaceNodeMenu_InstanceMethodCall_createReplacementNode(SNode node, SNode parameterObject) {
    if(SNodeOperations.isInstanceOf(parameterObject, "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
      SNode newNode = SModelOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.baseLanguage.structure.FieldReference");
      SLinkOperations.setTarget(newNode, "variableDeclaration", parameterObject, false);
      SLinkOperations.setTarget(newNode, "instance", SLinkOperations.getTarget(node, "instance", true), true);
      return newNode;
    }
    return node;
  }
}
