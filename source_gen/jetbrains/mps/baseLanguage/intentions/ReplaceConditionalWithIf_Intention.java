package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;

public class ReplaceConditionalWithIf_Intention extends BaseIntention implements Intention {

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression";
  }

  public boolean isErrorIntention() {
    return false;
  }

  public String getDescription(SNode node, EditorContext editorContext) {
    return "Replace conditional with if";
  }

  public boolean isApplicable(SNode node, EditorContext editorContext) {
    SNode stmtNode = (SNode) SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.Statement", false, false);
    if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(stmtNode, null, false, false), "jetbrains.mps.baseLanguage.structure.StatementList"))) {
      return false;
    }
    return true;
  }

  public void execute(SNode node, EditorContext editorContext) {
    final zClosureContext _zClosureContext = new zClosureContext();
    SNode stmtNode = (SNode) SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.Statement", false, false);
    _zClosureContext.fakeNode = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null);
    SNode nodeCopy = SNodeOperations.copyNode(node);
    SNodeOperations.replaceWithAnother(node, _zClosureContext.fakeNode);
    // --
    SNodeOperations.replaceWithAnother(SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(stmtNode, null, false), new zPredicate(null, _zClosureContext))), SLinkOperations.getTarget(nodeCopy, "ifTrue", true));
    SNode trueStmt = SNodeOperations.copyNode(stmtNode);
    SNode falseStmt = SNodeOperations.copyNode(stmtNode);
    // --
    SNode ifNode = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IfStatement", null);
    SLinkOperations.setTarget(ifNode, "condition", SLinkOperations.getTarget(node, "condition", true), true);
    SLinkOperations.setNewChild(ifNode, "ifTrue", "jetbrains.mps.baseLanguage.structure.StatementList");
    SLinkOperations.insertChildFirst(SLinkOperations.getTarget(ifNode, "ifTrue", true), "statement", trueStmt);
    SLinkOperations.setTarget(ifNode, "ifFalseStatement", falseStmt, true);
    SNodeOperations.replaceWithAnother(stmtNode, ifNode);
  }

}
