package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration;
import jetbrains.mps.baseLanguage.structure.ClassifierMember;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.baseLanguage.structure.Visibility;

public class StaticMethodDeclaration extends BaseMethodDeclaration implements ClassifierMember {
  public static String VISIBILITY = "visibility";

  public  StaticMethodDeclaration(SNode node) {
    super(node);
  }

  public static StaticMethodDeclaration newInstance(SModel sm, boolean init) {
    return (StaticMethodDeclaration)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.StaticMethodDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }
  public static StaticMethodDeclaration newInstance(SModel sm) {
    return StaticMethodDeclaration.newInstance(sm, false);
  }

  public Visibility getVisibility() {
    return (Visibility)this.getChild(StaticMethodDeclaration.VISIBILITY);
  }
  public void setVisibility(Visibility node) {
    super.setChild(StaticMethodDeclaration.VISIBILITY, node);
  }
}
