package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Classifier;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.structure.ClassifierType;
import java.util.List;

public class Interface extends Classifier {
  public static String NAME = "name";
  public static String EXTENDED_INTERFACE = "extendedInterface";

  public  Interface(SNode node) {
    super(node);
  }

  public static Interface newInstance(SModel sm, boolean init) {
    return (Interface)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.Interface", sm, GlobalScope.getInstance(), init).getAdapter();
  }
  public static Interface newInstance(SModel sm) {
    return Interface.newInstance(sm, false);
  }

  public String getName() {
    return this.getProperty(Interface.NAME);
  }
  public void setName(String value) {
    this.setProperty(Interface.NAME, value);
  }
  public int getExtendedInterfacesCount() {
    return this.getChildCount(Interface.EXTENDED_INTERFACE);
  }
  public Iterator<ClassifierType> extendedInterfaces() {
    return this.children(Interface.EXTENDED_INTERFACE);
  }
  public List<ClassifierType> getExtendedInterfaces() {
    return this.getChildren(Interface.EXTENDED_INTERFACE);
  }
  public void addExtendedInterface(ClassifierType node) {
    this.addChild(Interface.EXTENDED_INTERFACE, node);
  }
  public void insertExtendedInterface(ClassifierType prev, ClassifierType node) {
    this.insertChild(prev, Interface.EXTENDED_INTERFACE, node);
  }
}
