package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.Iterator;
import java.util.List;

public class FieldDeclaration extends VariableDeclaration implements ClassifierMember, Annotable {
  public static String VISIBILITY = "visibility";
  public static String ANNOTATION = "annotation";

  public  FieldDeclaration(SNode node) {
    super(node);
  }

  public static FieldDeclaration newInstance(SModel sm, boolean init) {
    return (FieldDeclaration)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static FieldDeclaration newInstance(SModel sm) {
    return FieldDeclaration.newInstance(sm, false);
  }


  public Visibility getVisibility() {
    return (Visibility)this.getChild(FieldDeclaration.VISIBILITY);
  }

  public void setVisibility(Visibility node) {
    super.setChild(FieldDeclaration.VISIBILITY, node);
  }

  public int getAnnotationsCount() {
    return this.getChildCount(FieldDeclaration.ANNOTATION);
  }

  public Iterator<AnnotationInstance> annotations() {
    return this.children(FieldDeclaration.ANNOTATION);
  }

  public List<AnnotationInstance> getAnnotations() {
    return this.getChildren(FieldDeclaration.ANNOTATION);
  }

  public void addAnnotation(AnnotationInstance node) {
    this.addChild(FieldDeclaration.ANNOTATION, node);
  }

  public void insertAnnotation(AnnotationInstance prev, AnnotationInstance node) {
    this.insertChild(prev, FieldDeclaration.ANNOTATION, node);
  }

}
