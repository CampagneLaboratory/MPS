package jetbrains.mps.actions.runtime.impl;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.DefaultChildNodeSetter;
import java.util.ArrayList;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.util.QueryMethodGenerated;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import java.util.Collections;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Iterator;
import jetbrains.mps.smodel.action.RemoveSubstituteActionByConditionContext;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.smodel.action.NodeSubstitutePreconditionContext;

public class ChildSubstituteActionsUtil {
  private static final Logger LOG = LogManager.getLogger(ChildSubstituteActionsUtil.class);

  public ChildSubstituteActionsUtil() {
  }

  public static SNode getRefinedChildConcept(SNode currentChild) {
    SNode childConcept = SNodeOperations.getConceptDeclaration(currentChild);
    SNode baseConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept");
    if (SNodeOperations.isInstanceOf(childConcept, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
      SNode concreteChildConcept = SNodeOperations.cast(((SNode) childConcept), "jetbrains.mps.lang.structure.structure.ConceptDeclaration");
      while ((SLinkOperations.getTarget(concreteChildConcept, "extends", false) != null) && SLinkOperations.getTarget(concreteChildConcept, "extends", false) != baseConcept) {
        concreteChildConcept = SLinkOperations.getTarget(concreteChildConcept, "extends", false);
      }
      childConcept = concreteChildConcept;
    }
    return childConcept;
  }

  public static List<SNode> getActionsBuilders(SNode parentNode, SNode currentChild, SNode childConcept, IChildNodeSetter childSetter, IOperationContext context) {
    SNode link = null;
    if (childSetter instanceof DefaultChildNodeSetter) {
      link = SNodeOperations.cast(((DefaultChildNodeSetter) childSetter).getLinkDeclaration(), "jetbrains.mps.lang.structure.structure.LinkDeclaration");
    }

    List<SNode> allBuilders = new ArrayList<SNode>();
    List<Language> languages = SModelOperations.getLanguages(SNodeOperations.getModel(parentNode), context.getScope());
    boolean wrapped = !(childSetter instanceof DefaultChildNodeSetter);
    for (SNode actionsBuilder : ListSequence.fromList(getAllActionsBuilders(languages))) {
      SNode applicableConcept = SLinkOperations.getTarget(actionsBuilder, "applicableConcept", false);
      if (applicableConcept == null) {
        continue;
      }
      if (SConceptOperations.isSubConceptOf(applicableConcept, NameUtil.nodeFQName(childConcept)) || SConceptOperations.isSubConceptOf(childConcept, NameUtil.nodeFQName(applicableConcept))) {
        if (satisfiesPrecondition(actionsBuilder, parentNode, applicableConcept, link, currentChild, wrapped, context)) {
          ListSequence.fromList(allBuilders).addElement(actionsBuilder);
        }
      }
    }
    return allBuilders;
  }

  public static boolean containsRemoveDefaults(List<SNode> builders) {
    return ListSequence.fromList(builders).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ListSequence.fromList(SLinkOperations.getTargets(it, "part", true)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode part) {
            return SNodeOperations.isInstanceOf(part, "jetbrains.mps.lang.actions.structure.RemoveDefaultsPart");
          }
        });
      }
    });
  }

  public static List<SubstituteAction> invokeActionFactory(SNode builder, SNode parentNode, SNode currentChild, SNode childConcept, IChildNodeSetter childSetter, IOperationContext context) {

    String methodName = BehaviorReflection.invokeNonVirtual(String.class, builder, "jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder", "call_getBuilderQueryMethodName_1220278926652", new Object[]{});
    try {
      return (List<SubstituteAction>) QueryMethodGenerated.invoke(methodName, context, new NodeSubstituteActionsFactoryContext(parentNode, currentChild, childConcept, childSetter), SNodeOperations.getModel(builder));
    } catch (Throwable t) {
      LOG.error(null, t);
      return Collections.emptyList();
    }
  }

  public static List<SubstituteAction> applyActionFilter(SNode builder, List<SubstituteAction> actions, SNode parentNode, SNode currentChild, SNode childConcept, IOperationContext context) {

    // remove banned concepts 
    Set<SNode> conceptsToRemove = SetSequence.fromSetWithValues(new HashSet<SNode>(), ListSequence.fromList(SLinkOperations.getTargets(builder, "part", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.actions.structure.RemovePart") && (SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.lang.actions.structure.RemovePart"), "conceptToRemove", false) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.lang.actions.structure.RemovePart"), "conceptToRemove", false);
      }
    }));
    if (SetSequence.fromSet(conceptsToRemove).isNotEmpty()) {
      for (Iterator<SubstituteAction> it = ListSequence.fromList(actions).iterator(); it.hasNext();) {
        SubstituteAction action = it.next();
        if (SetSequence.fromSet(conceptsToRemove).contains(SNodeOperations.as(action.getOutputConcept(), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))) {
          it.remove();
        }
      }
    }

    // apply custom filters 
    for (SNode removeByCondition : ListSequence.fromList(SLinkOperations.getTargets(builder, "part", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.actions.structure.RemoveByConditionPart");
      }
    })) {
      String methodName = "removeActionsByCondition_" + removeByCondition.getNodeId();
      try {
        QueryMethodGenerated.invoke(methodName, context, new RemoveSubstituteActionByConditionContext(ListSequence.fromList(actions).iterator(), parentNode, currentChild, childConcept), SNodeOperations.getModel(builder));
      } catch (Throwable t) {
        LOG.error(null, t);
      }
    }

    return actions;
  }

  private static List<SNode> getAllActionsBuilders(List<Language> languages) {
    List<SNode> result = new ArrayList<SNode>();
    for (Language language : ListSequence.fromList(languages)) {
      SModel actionsModelDescr = LanguageAspect.ACTIONS.get(language);
      if (actionsModelDescr == null) {
        continue;
      }
      SModel sModel = actionsModelDescr;
      ListSequence.fromList(result).addSequence(ListSequence.fromList(jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.getRoots(sModel, "jetbrains.mps.lang.actions.structure.NodeSubstituteActions")).translate(new ITranslator2<SNode, SNode>() {
        public Iterable<SNode> translate(SNode it) {
          return SLinkOperations.getTargets(it, "actionsBuilder", true);
        }
      }));
    }
    return result;
  }

  private static boolean satisfiesPrecondition(SNode actionsBuilder, SNode parentNode, SNode concept, SNode link, SNode currentTarget, boolean wrapped, IOperationContext context) {

    SNode precondition = SLinkOperations.getTarget(actionsBuilder, "precondition", true);
    if (precondition != null) {
      String methodName = BehaviorReflection.invokeNonVirtual(String.class, actionsBuilder, "jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder", "call_getPreconditionQueryMethodName_1220278671791", new Object[]{});
      try {
        return (Boolean) QueryMethodGenerated.invoke(methodName, context, new NodeSubstitutePreconditionContext(parentNode, concept, currentTarget, link, wrapped), SNodeOperations.getModel(actionsBuilder));
      } catch (Exception e) {
        LOG.error(null, e);
        return false;
      }
    }
    return true;
  }
}
