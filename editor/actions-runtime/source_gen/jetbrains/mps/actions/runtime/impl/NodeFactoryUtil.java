package jetbrains.mps.actions.runtime.impl;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.util.QueryMethodGenerated;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.action.NodeSetupContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class NodeFactoryUtil {
  private static final Logger LOG = LogManager.getLogger(NodeFactoryUtil.class);
  public NodeFactoryUtil() {
  }
  public static List<SNode> getApplicableNodeFactories(final SNode concept, Language language) {
    SModel actionsModelDescriptor = LanguageAspect.ACTIONS.get(language);
    if (actionsModelDescriptor == null) {
      return Collections.emptyList();
    }
    return ListSequence.fromList(SModelOperations.roots(actionsModelDescriptor, MetaAdapterFactory.getConcept(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x10dc7f106b2L, "jetbrains.mps.lang.actions.structure.NodeFactories"))).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getChildren(it, MetaAdapterFactory.getContainmentLink(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x10dc7f106b2L, 0x10dc7f2c629L, "nodeFactory"));
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x10dc7f1f421L, 0x10dc7f54734L, "applicableConcept")) == concept;
      }
    }).toListSequence();
  }
  public static void invokeNodeSetupFunction(SNode factory, SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
    if (SLinkOperations.getTarget(factory, MetaAdapterFactory.getContainmentLink(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x10dc7f1f421L, 0x10dc7fcfd46L, "setupFunction")) == null) {
      return;
    }
    try {
      QueryMethodGenerated.invoke(BehaviorReflection.invokeNonVirtual(String.class, factory, "jetbrains.mps.lang.actions.structure.NodeFactory", "call_getQueryMethodName_1220279061997", new Object[]{}), null, new NodeSetupContext(newNode, sampleNode, enclosingNode, model), SNodeOperations.getModel(factory));
    } catch (Exception e) {
      LOG.error(null, e);
    }
  }
}
