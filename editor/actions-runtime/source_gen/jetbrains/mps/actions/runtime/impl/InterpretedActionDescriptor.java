package jetbrains.mps.actions.runtime.impl;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.ActionAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Collections;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.kernel.model.SModelUtil;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.model.SModel;

/**
 * 
 * @deprecated since MPS 3.2 ActionAspectDescriptor is completely generated, so this class should be removed after MPS 3.2
 */
@Deprecated
public class InterpretedActionDescriptor implements ActionAspectDescriptor {
  public Collection<NodeFactory> getFactories(SAbstractConcept concept) {
    SNode conceptNode = SNodeOperations.asNode(concept);
    if (conceptNode == null) {
      return Collections.<NodeFactory>emptyList();
    }
    Language language = SModelUtil.getDeclaringLanguage(conceptNode);
    if (language == null) {
      return Collections.<NodeFactory>emptyList();
    }

    List<SNode> nodeFactories = NodeFactoryUtil.getApplicableNodeFactories(conceptNode, language);
    Collection<NodeFactory> result = CollectionSequence.fromCollection(new ArrayList<NodeFactory>());
    for (SNode nodeFactoryNode : ListSequence.fromList(nodeFactories)) {
      CollectionSequence.fromCollection(result).addElement(new InterpretedActionDescriptor.InterpretedNodeFactory(nodeFactoryNode));
    }
    return result;
  }
  public class InterpretedNodeFactory implements NodeFactory {
    private SNode myFactoryNode;
    public InterpretedNodeFactory(SNode node) {
      myFactoryNode = node;
    }
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
      NodeFactoryUtil.invokeNodeSetupFunction(myFactoryNode, newNode, sampleNode, enclosingNode, model);
    }
  }
}
