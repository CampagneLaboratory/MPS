package typesystemIntegration.languageChecker;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorComponent;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.cells.SubstituteInfo;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class EditorBasedReferenceResolverUtils {
  public static boolean resolveInEditor(EditorComponent editorComponent, SNode sourceNode, String resolveInfo, String referenceRole) {
    EditorCell cellWithRole = editorComponent.findNodeCellWithRole(sourceNode, referenceRole);
    if (cellWithRole == null) {
      return false;
    }
    SubstituteInfo substituteInfo = cellWithRole.getSubstituteInfo();
    if (substituteInfo == null) {
      return false;
    }
    final SubstituteAction applicableSubstituteAction = getApplicableSubstituteAction(substituteInfo, resolveInfo);
    if (applicableSubstituteAction == null) {
      return false;
    }
    applicableSubstituteAction.substitute(editorComponent.getEditorContext(), resolveInfo);
    return true;
  }



  private static SubstituteAction getApplicableSubstituteAction(SubstituteInfo substituteInfo, String resolveInfo) {
    SubstituteAction result = null;
    substituteInfo.invalidateActions();
    for (SubstituteAction nextAction : ListSequence.fromList(substituteInfo.getMatchingActions(resolveInfo, true))) {
      if (nextAction.canSubstitute(resolveInfo)) {
        if (result != null) {
          return null;
        }
        result = nextAction;
      }
    }
    return result;
  }
}
