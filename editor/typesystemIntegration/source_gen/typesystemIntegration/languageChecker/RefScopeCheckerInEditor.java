package typesystemIntegration.languageChecker;

/*Generated by MPS */

import jetbrains.mps.checkers.RefScopeChecker;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.errors.QuickFixProvider;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.errors.QuickFix_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.resolve.ResolverComponent;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.cells.SubstituteInfo;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.model.SModel;

public class RefScopeCheckerInEditor extends RefScopeChecker {
  private EditorComponent myEditorComponent;

  /*package*/ void setEditorComponent(EditorComponent editorContext) {
    myEditorComponent = editorContext;
  }

  @Override
  protected QuickFixProvider createResolveReferenceQuickfix(SReference reference, SRepository repository, boolean executeImmediately) {
    return new RefScopeCheckerInEditor.ResolveReferenceEditorBasedQuickFix(reference, repository, executeImmediately, myEditorComponent);
  }

  private class ResolveReferenceEditorBasedQuickFix extends RefScopeChecker.ResolveReferenceQuickFix {
    private EditorComponent myEditorComponent;


    public ResolveReferenceEditorBasedQuickFix(SReference reference, SRepository repository, boolean executeImmediately, EditorComponent editorComponent) {
      super(reference, repository, executeImmediately);
      myEditorComponent = editorComponent;
    }

    @Override
    public QuickFix_Runtime getQuickFix() {
      return new QuickFix_Runtime() {
        @Override
        public void execute(SNode node) {
          if (ResolverComponent.getInstance().resolveScopesOnly(myReference, myRepository)) {
            return;
          }
          SNode sourceNode = myReference.getSourceNode();
          if (sourceNode == null) {
            return;
          }
          final String resolveInfo = getResolveInfo(myReference, sourceNode);
          if (resolveInfo == null) {
            return;
          }
          EditorCell cellWithRole = myEditorComponent.findNodeCellWithRole(sourceNode, myReference.getRole());
          if (cellWithRole == null) {
            return;
          }
          SubstituteInfo substituteInfo = cellWithRole.getSubstituteInfo();
          if (substituteInfo == null) {
            return;
          }
          final SubstituteAction applicableSubstituteAction = getApplicableSubstituteAction(substituteInfo, resolveInfo);
          if (applicableSubstituteAction == null) {
            return;
          }
          applicableSubstituteAction.substitute(myEditorComponent.getEditorContext(), resolveInfo);
        }

        @Override
        public String getDescription(SNode node) {
          return "Resolve \"" + myReference.getRole() + "\" reference";
        }
      };
    }

    private String getResolveInfo(SReference reference, SNode sourceNode) {
      String result = ((jetbrains.mps.smodel.SReference) reference).getResolveInfo();
      if (result != null) {
        return result;
      }
      SModule module = check_thufhv_a0c0e3(SNodeOperations.getModel(sourceNode));
      SNode target = jetbrains.mps.util.SNodeOperations.getTargetNodeSilently(reference);
      if (target != null && module != null) {
        Scope scope = ModelConstraints.getScope(reference);
        result = scope.getReferenceText(sourceNode, target);
      }
      return result;
    }

    private SubstituteAction getApplicableSubstituteAction(SubstituteInfo substituteInfo, String resolveInfo) {
      SubstituteAction result = null;
      for (SubstituteAction nextAction : ListSequence.fromList(substituteInfo.getMatchingActions(resolveInfo, true))) {
        if (nextAction.canSubstitute(resolveInfo)) {
          if (result != null) {
            return null;
          }
          result = nextAction;
        }
      }
      return result;
    }
  }

  private static SModule check_thufhv_a0c0e3(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }
}
