package jetbrains.mps.editor.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import javax.swing.JOptionPane;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

/**
 * TODO: most probably move out to mps.ide.editor (plugin)
 * currently canot do that due to the compilation problems of editor.intentions model
 */
public class ExtractComponentUtil {
  public ExtractComponentUtil() {
  }

  public static void extractComponent(final SNode node, EditorContext editorContext) {
    final SNode container = SNodeOperations.getAncestor(node, "jetbrains.mps.lang.editor.structure.BaseEditorComponent", false, false);
    final String componentName = JOptionPane.showInputDialog(ProjectHelper.toMainFrame(editorContext.getOperationContext().getProject()), "Enter a component name:", "");
    if (componentName == null) {
      return;
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SModel model = SNodeOperations.getModel(node);
        SNode component = SModelOperations.createNewRootNode(model, "jetbrains.mps.lang.editor.structure.EditorComponentDeclaration", null);
        SPropertyOperations.set(component, "name", componentName);
        SLinkOperations.setTarget(component, "conceptDeclaration", BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), container, "virtual_getConceptDeclaration_7055725856388417603", new Object[]{}), false);
        SLinkOperations.setTarget(component, "cellModel", SNodeOperations.copyNode(node), true);
        jetbrains.mps.smodel.SNode toReplace = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Component", null);
        SLinkOperations.setTarget(toReplace, "editorComponent", component, false);
        SNodeOperations.replaceWithAnother(node, toReplace);
      }
    });
  }
}
