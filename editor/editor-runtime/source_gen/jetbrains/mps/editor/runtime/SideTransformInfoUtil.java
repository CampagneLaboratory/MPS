package jetbrains.mps.editor.runtime;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;

public class SideTransformInfoUtil {
  public static void addRightTransformInfo(@NotNull SNode node, @NotNull String cellId, @NotNull String anchorTag) {
    addTransformInfo(node, cellId, anchorTag, true);
  }

  public static void addLeftTransformInfo(@NotNull SNode node, @NotNull String cellId, @NotNull String anchorTag) {
    addTransformInfo(node, cellId, anchorTag, false);
  }

  private static void addTransformInfo(@NotNull SNode node, @NotNull String cellId, @NotNull String anchorTag, boolean isRight) {
    SNode info = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(1782411230332735017l, -6324602048325217350l), 779128492853369165l, "jetbrains.mps.lang.editor.structure.SideTransformInfo")));
    SPropertyOperations.set(info, MetaAdapterFactory.getProperty(new UUID(1782411230332735017l, -6324602048325217350l), 779128492853369165l, 779128492853934523l, "cellId"), cellId);
    SPropertyOperations.set(info, MetaAdapterFactory.getProperty(new UUID(1782411230332735017l, -6324602048325217350l), 779128492853369165l, 779128492853935960l, "anchorTag"), anchorTag);
    SPropertyOperations.set(info, MetaAdapterFactory.getProperty(new UUID(1782411230332735017l, -6324602048325217350l), 779128492853369165l, 779128492853699361l, "side"), (isRight ? "right" : "left"));
    AttributeOperations.setAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.editor.structure.SideTransformInfo"), info);
  }

  public static boolean hasRightTransformInfo(SNode node) {
    return SPropertyOperations.hasValue(AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.editor.structure.SideTransformInfo")), MetaAdapterFactory.getProperty(new UUID(1782411230332735017l, -6324602048325217350l), 779128492853369165l, 779128492853699361l, "side"), "right", "right");
  }

  public static boolean hasLeftTransformInfo(SNode node) {
    return SPropertyOperations.hasValue(AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.editor.structure.SideTransformInfo")), MetaAdapterFactory.getProperty(new UUID(1782411230332735017l, -6324602048325217350l), 779128492853369165l, 779128492853699361l, "side"), "left", "right");
  }

  public static void removeTransformInfo(SNode node) {
    AttributeOperations.setAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.editor.structure.SideTransformInfo"), null);
  }

  public static String getCellIdFromTransformInfo(SNode node) {
    return SPropertyOperations.getString(AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.editor.structure.SideTransformInfo")), MetaAdapterFactory.getProperty(new UUID(1782411230332735017l, -6324602048325217350l), 779128492853369165l, 779128492853934523l, "cellId"));
  }

  public static String getAnchorTagFromTransformInfo(SNode node) {
    return SPropertyOperations.getString(AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.editor.structure.SideTransformInfo")), MetaAdapterFactory.getProperty(new UUID(1782411230332735017l, -6324602048325217350l), 779128492853369165l, 779128492853935960l, "anchorTag"));
  }
}
