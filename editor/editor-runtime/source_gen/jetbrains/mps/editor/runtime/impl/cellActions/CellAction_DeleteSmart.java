package jetbrains.mps.editor.runtime.impl.cellActions;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class CellAction_DeleteSmart extends AbstractCellAction {
  private SNode mySource;
  private SNode myLink;
  private SNode myTarget;

  public CellAction_DeleteSmart(SNode source, SNode link, SNode target) {
    mySource = source;
    myLink = link;
    myTarget = target;
  }

  @Override
  public boolean canExecute(EditorContext context) {
    return true;
  }

  @Override
  public void execute(EditorContext context) {
    SNode genuineLinkDeclaration = SModelUtil.getGenuineLinkDeclaration(myLink);
    if (SPropertyOperations.hasValue(genuineLinkDeclaration, "metaClass", "aggregation", "reference")) {
      SNodeOperations.deleteNode(myTarget);
      if (SPropertyOperations.hasValue(genuineLinkDeclaration, "sourceCardinality", "1", "0..1")) {
        SNode defaultTarget = SModelUtil_new.instantiateConceptDeclaration(SLinkOperations.getTarget(myLink, "target", false), SNodeOperations.getModel(mySource));
        SLinkOperations.setTarget(mySource, SPropertyOperations.getString(genuineLinkDeclaration, "role"), defaultTarget, true);
      }
    } else {
      // <node> 
      SNodeAccessUtil.setReferenceTarget(mySource, SPropertyOperations.getString(genuineLinkDeclaration, "role"), null);
    }
  }
}
