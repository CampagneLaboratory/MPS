package jetbrains.mps.editor.runtime.impl.cellMenu;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cellMenu.AbstractNodeSubstituteInfo;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.action.AbstractNodeSubstituteAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;

public class EnumPropertySubstituteInfo extends AbstractNodeSubstituteInfo {
  private SNode myNode;
  private SNode myPropertyDeclaration;

  public EnumPropertySubstituteInfo(SNode node, SNode propertyDeclaration, EditorContext editorContext) {
    super(editorContext);
    myNode = node;
    myPropertyDeclaration = propertyDeclaration;
  }

  @Override
  protected List<INodeSubstituteAction> createActions() {
    SNode enumDataType = (SNode) SLinkOperations.getTarget(myPropertyDeclaration, "dataType", false);
    List<INodeSubstituteAction> actions = ListSequence.fromList(new ArrayList<INodeSubstituteAction>(ListSequence.fromList(SLinkOperations.getTargets(enumDataType, "member", true)).count()));
    for (final SNode enumMemberDeclaration : SLinkOperations.getTargets(enumDataType, "member", true)) {
      ListSequence.fromList(actions).addElement(new AbstractNodeSubstituteAction(null, enumMemberDeclaration, myNode) {
        @Override
        public String getMatchingText(String pattern) {
          return SPropertyOperations.getString(enumMemberDeclaration, "externalValue");
        }

        @Override
        protected SNode doSubstitute(@Nullable EditorContext editorContext, String pattern) {
          String propertyName = SPropertyOperations.getString(myPropertyDeclaration, "name");
          assert propertyName != null;
          SNodeAccessUtil.setProperty(getSourceNode(), propertyName, SPropertyOperations.getString(enumMemberDeclaration, "internalValue"));

          if (editorContext != null) {
            // TODO use editorContext.select(getSourceNode(), propertyName, -1 /* end */); 
            editorContext.flushEvents();
            EditorCell selectedCell = editorContext.getSelectedCell();
            if (selectedCell instanceof EditorCell_Label && ((EditorCell_Label) selectedCell).isEditable()) {
              EditorCell_Label cell = (EditorCell_Label) selectedCell;
              cell.end();
            }
          }
          return null;
        }
      });
    }

    return actions;
  }
}
