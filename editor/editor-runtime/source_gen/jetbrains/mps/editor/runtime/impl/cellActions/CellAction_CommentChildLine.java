package jetbrains.mps.editor.runtime.impl.cellActions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.selection.Selection;
import jetbrains.mps.openapi.editor.selection.SingularSelection;
import jetbrains.mps.nodeEditor.selection.EditorCellLabelSelection;

public class CellAction_CommentChildLine extends AbstractCommentOutAction {
  private final SNode myNode;
  private final SContainmentLink myLink;


  public CellAction_CommentChildLine(@NotNull SNode node, @NotNull SContainmentLink link) {
    myNode = node;
    this.myLink = link;
  }

  @Override
  public boolean canExecute(EditorContext editorContext) {
    SNode childToComment = getNodeToComment(editorContext);
    if (childToComment == null) {
      return false;
    }
    Selection selection = editorContext.getSelectionManager().getSelection();
    if (selection == null || !(selection instanceof SingularSelection)) {
      return false;
    }
    return (selection instanceof EditorCellLabelSelection && !(((EditorCellLabelSelection) selection).hasNonTrivialSelection()));
  }

  protected SNode getNodeToComment(EditorContext editorContext) {
    SNode selectedNode = editorContext.getSelectedCell().getSNode();
    SNode currentNode = selectedNode;
    while (currentNode != null) {
      if (eq_thdavw_a0a0c0i(currentNode.getParent(), myNode)) {
        if (eq_thdavw_a0a0a0c0i(currentNode.getContainmentLink(), myLink)) {
          return currentNode;
        } else {
          return null;
        }
      }
      currentNode = currentNode.getParent();
    }
    return null;
  }
  private static boolean eq_thdavw_a0a0a0c0i(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_thdavw_a0a0c0i(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
