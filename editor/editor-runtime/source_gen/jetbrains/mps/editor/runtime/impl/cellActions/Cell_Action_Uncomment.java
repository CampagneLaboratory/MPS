package jetbrains.mps.editor.runtime.impl.cellActions;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.cells.EditorCell_Label;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;

public class Cell_Action_Uncomment extends AbstractCellAction {
  private final SNode myNode;

  public Cell_Action_Uncomment(@NotNull SNode node) {
    this.myNode = node;
  }

  @Override
  public boolean canExecute(EditorContext context) {
    return SNodeOperations.getParent(myNode) != null;
  }

  public void execute(EditorContext editorContext) {
    EditorCell selectedCell = editorContext.getSelectedCell();
    if (selectedCell == null) {
      return;
    }
    String cellId = selectedCell.getCellId();
    SNode actualSelectedNode = selectedCell.getSNode();
    boolean isLabel = selectedCell instanceof EditorCell_Label;
    int startPosition = (isLabel ? ((EditorCell_Label) selectedCell).getSelectionStart() : -1);
    int endPosition = (isLabel ? ((EditorCell_Label) selectedCell).getSelectionEnd() : -1);
    SNode uncommentedNode = CommentUtil.uncomment(myNode);
    editorContext.flushEvents();
    if (cellId != null) {
      SelectionManager selectionManager = editorContext.getSelectionManager();
      if (isLabel) {
        selectionManager.setSelection(actualSelectedNode, cellId, startPosition, endPosition);
      } else {
        selectionManager.setSelection(actualSelectedNode, cellId);
      }
      if (selectionManager.getSelection() != null) {
        return;
      }
    }
    SelectionUtil.selectCell(editorContext, uncommentedNode, SelectionManager.LAST_EDITABLE_CELL);
  }

}
