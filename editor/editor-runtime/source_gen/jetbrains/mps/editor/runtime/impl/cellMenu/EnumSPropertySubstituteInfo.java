package jetbrains.mps.editor.runtime.impl.cellMenu;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cellMenu.AbstractNodeSubstituteInfo;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.action.AbstractNodeSubstituteAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;

public class EnumSPropertySubstituteInfo extends AbstractNodeSubstituteInfo {
  private SNode myNode;
  private SProperty myProperty;
  public EnumSPropertySubstituteInfo(SNode node, SProperty propertyDeclaration, EditorContext editorContext) {
    super(editorContext);
    myNode = node;
    myProperty = propertyDeclaration;
  }
  @Override
  protected List<SubstituteAction> createActions() {
    // todo use generated code here 
    SNode enumDataType = ((SNode) SLinkOperations.getTarget(((SNode) myProperty.getDeclarationNode()), MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, 0xfc26f42fe5L, "dataType")));
    List<SubstituteAction> actions = ListSequence.fromList(new ArrayList<SubstituteAction>(ListSequence.fromList(SLinkOperations.getChildren(enumDataType, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xfc26875dfbL, 0xfc32151efeL, "member"))).count()));
    for (final SNode enumMemberDeclaration : SLinkOperations.getChildren(enumDataType, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xfc26875dfbL, 0xfc32151efeL, "member"))) {
      ListSequence.fromList(actions).addElement(new AbstractNodeSubstituteAction(null, enumMemberDeclaration, myNode) {
        @Override
        public String getMatchingText(String pattern) {
          return SPropertyOperations.getString(enumMemberDeclaration, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xfc321331b2L, 0xfc5ee06664L, "externalValue"));
        }
        @Override
        protected SNode doSubstitute(@Nullable EditorContext editorContext, String pattern) {
          SNodeAccessUtil.setProperty(getSourceNode(), myProperty, SPropertyOperations.getString(enumMemberDeclaration, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xfc321331b2L, 0xfc5ee06663L, "internalValue")));

          if (editorContext != null) {
            // TODO use editorContext.select(getSourceNode(), propertyName, -1 /* end */); 
            editorContext.flushEvents();
            EditorCell selectedCell = editorContext.getSelectedCell();
            if (selectedCell instanceof EditorCell_Label && ((EditorCell_Label) selectedCell).isEditable()) {
              EditorCell_Label cell = (EditorCell_Label) selectedCell;
              cell.end();
            }
          }
          return null;
        }
      });
    }

    return actions;
  }
}
