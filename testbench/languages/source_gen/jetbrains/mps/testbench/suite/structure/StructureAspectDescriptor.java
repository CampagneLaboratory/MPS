package jetbrains.mps.testbench.suite.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptIModuleRef = new ConceptDescriptorBuilder("jetbrains.mps.testbench.suite.structure.IModuleRef").interface_().parents("jetbrains.mps.lang.core.structure.InterfacePart").create();
  /*package*/ final ConceptDescriptor myConceptITestRef = new ConceptDescriptorBuilder("jetbrains.mps.testbench.suite.structure.ITestRef").interface_().properties("muted").create();
  /*package*/ final ConceptDescriptor myConceptJUnit3TestCaseRef = new ConceptDescriptorBuilder("jetbrains.mps.testbench.suite.structure.JUnit3TestCaseRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.testbench.suite.structure.ITestRef").references("klass").create();
  /*package*/ final ConceptDescriptor myConceptJUnit4TestCaseRef = new ConceptDescriptorBuilder("jetbrains.mps.testbench.suite.structure.JUnit4TestCaseRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.testbench.suite.structure.ITestRef").references("klass").create();
  /*package*/ final ConceptDescriptor myConceptModuleSuite = new ConceptDescriptorBuilder("jetbrains.mps.testbench.suite.structure.ModuleSuite").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"moduleRef", "testRef"}, new boolean[]{false, true}).create();
  /*package*/ final ConceptDescriptor myConceptSolutionRef = new ConceptDescriptorBuilder("jetbrains.mps.testbench.suite.structure.SolutionRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.testbench.suite.structure.IModuleRef").properties("moduleFQName", "moduleID").create();
  /*package*/ final ConceptDescriptor myConceptTestCaseRef = new ConceptDescriptorBuilder("jetbrains.mps.testbench.suite.structure.TestCaseRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.testbench.suite.structure.ITestRef").references("testCase").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptIModuleRef, myConceptITestRef, myConceptJUnit3TestCaseRef, myConceptJUnit4TestCaseRef, myConceptModuleSuite, myConceptSolutionRef, myConceptTestCaseRef);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0k, conceptFqName)) {
      case 0:
        return myConceptIModuleRef;
      case 1:
        return myConceptITestRef;
      case 2:
        return myConceptJUnit3TestCaseRef;
      case 3:
        return myConceptJUnit4TestCaseRef;
      case 4:
        return myConceptModuleSuite;
      case 5:
        return myConceptSolutionRef;
      case 6:
        return myConceptTestCaseRef;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0k = new String[]{"jetbrains.mps.testbench.suite.structure.IModuleRef", "jetbrains.mps.testbench.suite.structure.ITestRef", "jetbrains.mps.testbench.suite.structure.JUnit3TestCaseRef", "jetbrains.mps.testbench.suite.structure.JUnit4TestCaseRef", "jetbrains.mps.testbench.suite.structure.ModuleSuite", "jetbrains.mps.testbench.suite.structure.SolutionRef", "jetbrains.mps.testbench.suite.structure.TestCaseRef"};
}
