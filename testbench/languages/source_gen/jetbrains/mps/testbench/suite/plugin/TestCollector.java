package jetbrains.mps.testbench.suite.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.search.ReachableClassifiersScope;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import jetbrains.mps.util.Condition;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.baseLanguage.search.AllSubclassifiersScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class TestCollector {
  public TestCollector() {
  }

  public boolean collectTests(SModel model, IScope scope, _FunctionTypes._void_P1_E0<? super _FunctionTypes._return_P0_E0<? extends SNode>> into) {
    boolean any = false;
    any |= new TestCollector.TestCaseCollector().collectTests(model, scope, into);
    any |= new TestCollector.JUnit3TestCollector().collectTests(model, scope, into);
    any |= new TestCollector.JUnit4TestCollector().collectTests(model, scope, into);
    return any;
  }

  public static class TestCaseCollector extends TestCollector {
    public TestCaseCollector() {
    }

    @Override
    public boolean collectTests(final SModel model, IScope scope, final _FunctionTypes._void_P1_E0<? super _FunctionTypes._return_P0_E0<? extends SNode>> into) {
      final Wrappers._boolean any = new Wrappers._boolean(false);
      final Wrappers._T<List<SNode>> nodes = new Wrappers._T<List<SNode>>();
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          nodes.value = SModelOperations.getNodes(model, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase");
        }
      });
      ListSequence.fromList(nodes.value).visitAll(new IVisitor<SNode>() {
        public void visit(final SNode itc) {
          into.invoke(new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode tref = SConceptOperations.createNewNode("jetbrains.mps.testbench.suite.structure.TestCaseRef", null);
              SLinkOperations.setTarget(tref, "testCase", itc, false);
              return tref;
            }
          });
          any.value = true;
        }
      });
      return any.value;
    }
  }

  public static class JUnit4TestCollector extends TestCollector {
    public JUnit4TestCollector() {
    }

    @Override
    public boolean collectTests(final SModel model, final IScope scope, final _FunctionTypes._void_P1_E0<? super _FunctionTypes._return_P0_E0<? extends SNode>> into) {
      final Wrappers._boolean any = new Wrappers._boolean(false);
      final Wrappers._T<List<SNode>> nodes = new Wrappers._T<List<SNode>>();
      ModelAccess.instance().runReadAction(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<List<SNode>>() {
        public List<SNode> invoke() {
          final SNode testAnn = SLinkOperations.getTarget(new TestCollector.JUnit4TestCollector.QuotationClass_rpw6il_a0a0a0a0a2a0b().createNode(), "annotation", false);
          return nodes.value = new ReachableClassifiersScope(model, IClassifiersSearchScope.CLASS, scope).getNodes(new Condition<SNode>() {
            public boolean met(SNode cls) {
              return ListSequence.fromList(SLinkOperations.getTargets(cls, "method", true)).<SNode>translate(new ITranslator2<SNode, SNode>() {
                public Iterable<SNode> translate(SNode m) {
                  return SLinkOperations.getTargets(m, "annotation", true);
                }
              }).any(new IWhereFilter<SNode>() {
                public boolean accept(SNode ani) {
                  return SLinkOperations.getTarget(ani, "annotation", false) == testAnn;
                }
              });
            }
          });
        }
      }));
      ListSequence.fromList(nodes.value).visitAll(new IVisitor<SNode>() {
        public void visit(final SNode tc) {
          into.invoke(new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode tref = SConceptOperations.createNewNode("jetbrains.mps.testbench.suite.structure.JUnit4TestCaseRef", null);
              SLinkOperations.setTarget(tref, "klass", SNodeOperations.cast(tc, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false);
              return tref;
            }
          });
          any.value = true;
        }
      });
      return any.value;
    }

    public static class QuotationClass_rpw6il_a0a0a0a0a2a0b {
      public QuotationClass_rpw6il_a0a0a0a0a2a0b() {
      }

      public SNode createNode() {
        SNode result = null;
        Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
        SNode quotedNode_1 = null;
        {
          quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstance", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_2 = quotedNode_1;
          quotedNode1_2.addReference(SReference.create("annotation", quotedNode1_2, SModelReference.fromString("f:java_stub#37a3367b-1fb2-44d8-aa6b-18075e74e003#org.junit(MPS.Classpath/org.junit@java_stub)"), SNodeId.fromString("~Test")));
          result = quotedNode1_2;
        }
        return result;
      }
    }
  }

  public static class JUnit3TestCollector extends TestCollector {
    public JUnit3TestCollector() {
    }

    @Override
    public boolean collectTests(final SModel model, final IScope scope, final _FunctionTypes._void_P1_E0<? super _FunctionTypes._return_P0_E0<? extends SNode>> into) {
      final Wrappers._boolean any = new Wrappers._boolean(false);
      final Wrappers._T<List<SNode>> nodes = new Wrappers._T<List<SNode>>();
      ModelAccess.instance().runReadAction(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<List<SNode>>() {
        public List<SNode> invoke() {
          return nodes.value = new AllSubclassifiersScope(SLinkOperations.getTarget(new TestCollector.JUnit3TestCollector.QuotationClass_rpw6il_a0a0a0a0a0a0c0a2().createNode(), "classifier", false), model, IClassifiersSearchScope.CLASS, scope).getNodes(new Condition<SNode>() {
            public boolean met(SNode cls) {
              return !(SPropertyOperations.getBoolean(cls, "abstractClass"));
            }
          });
        }
      }));
      ListSequence.fromList(nodes.value).visitAll(new IVisitor<SNode>() {
        public void visit(final SNode tc) {
          into.invoke(new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode tref = SConceptOperations.createNewNode("jetbrains.mps.testbench.suite.structure.JUnit3TestCaseRef", null);
              SLinkOperations.setTarget(tref, "klass", SNodeOperations.cast(tc, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false);
              return tref;
            }
          });
          any.value = true;
        }
      });
      return any.value;
    }

    public static class QuotationClass_rpw6il_a0a0a0a0a0a0c0a2 {
      public QuotationClass_rpw6il_a0a0a0a0a0a0c0a2() {
      }

      public SNode createNode() {
        SNode result = null;
        Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
        SNode quotedNode_1 = null;
        {
          quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_2 = quotedNode_1;
          quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#37a3367b-1fb2-44d8-aa6b-18075e74e003#junit.framework(MPS.Classpath/junit.framework@java_stub)"), SNodeId.fromString("~TestCase")));
          result = quotedNode1_2;
        }
        return result;
      }
    }
  }
}
