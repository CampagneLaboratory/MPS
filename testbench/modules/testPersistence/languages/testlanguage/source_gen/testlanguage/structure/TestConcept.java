package testlanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class TestConcept extends BaseConcept implements INamedConcept {
  public static final String concept = "testlanguage.structure.TestConcept";
  public static final String TEST_PROPERTY = "testProperty";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String TEST_REFERENCE = "testReference";
  public static final String TEST_CHILD = "testChild";

  public TestConcept(SNode node) {
    super(node);
  }

  public String getTestProperty() {
    return this.getProperty(TestConcept.TEST_PROPERTY);
  }

  public void setTestProperty(String value) {
    this.setProperty(TestConcept.TEST_PROPERTY, value);
  }

  public String getName() {
    return this.getProperty(TestConcept.NAME);
  }

  public void setName(String value) {
    this.setProperty(TestConcept.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(TestConcept.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(TestConcept.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(TestConcept.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(TestConcept.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(TestConcept.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(TestConcept.VIRTUAL_PACKAGE, value);
  }

  public TestConcept getTestReference() {
    return (TestConcept) this.getReferent(TestConcept.class, TestConcept.TEST_REFERENCE);
  }

  public void setTestReference(TestConcept node) {
    super.setReferent(TestConcept.TEST_REFERENCE, node);
  }

  public int getTestChildsCount() {
    return this.getChildCount(TestConcept.TEST_CHILD);
  }

  public Iterator<TestConcept> testChilds() {
    return this.children(TestConcept.class, TestConcept.TEST_CHILD);
  }

  public List<TestConcept> getTestChilds() {
    return this.getChildren(TestConcept.class, TestConcept.TEST_CHILD);
  }

  public void addTestChild(TestConcept node) {
    this.addChild(TestConcept.TEST_CHILD, node);
  }

  public void insertTestChild(TestConcept prev, TestConcept node) {
    this.insertChild(prev, TestConcept.TEST_CHILD, node);
  }

  public static TestConcept newInstance(SModel sm, boolean init) {
    return (TestConcept) SModelUtil_new.instantiateConceptDeclaration("testlanguage.structure.TestConcept", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static TestConcept newInstance(SModel sm) {
    return TestConcept.newInstance(sm, false);
  }
}
