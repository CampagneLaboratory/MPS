package testDefaultEditor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptCompany = new ConceptDescriptorBuilder("testDefaultEditor.structure.Company").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"team"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptDefaultNodeAttribute = new ConceptDescriptorBuilder("testDefaultEditor.structure.DefaultNodeAttribute").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").create();
  /*package*/ final ConceptDescriptor myConceptDefaultPropertyAttribute = new ConceptDescriptorBuilder("testDefaultEditor.structure.DefaultPropertyAttribute").super_("jetbrains.mps.lang.core.structure.PropertyAttribute").parents("jetbrains.mps.lang.core.structure.PropertyAttribute").create();
  /*package*/ final ConceptDescriptor myConceptDefaultReferenceAttribute = new ConceptDescriptorBuilder("testDefaultEditor.structure.DefaultReferenceAttribute").super_("jetbrains.mps.lang.core.structure.LinkAttribute").parents("jetbrains.mps.lang.core.structure.LinkAttribute").create();
  /*package*/ final ConceptDescriptor myConceptDeveloper = new ConceptDescriptorBuilder("testDefaultEditor.structure.Developer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("age", "sex", "lastName", "politicWing").references("bestFriend", "teamHeWants").children(new String[]{"friend", "someChild"}, new boolean[]{true, false}).create();
  /*package*/ final ConceptDescriptor myConceptDummyMethod = new ConceptDescriptorBuilder("testDefaultEditor.structure.DummyMethod").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"statements"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptFriend = new ConceptDescriptorBuilder("testDefaultEditor.structure.Friend").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("friend").create();
  /*package*/ final ConceptDescriptor myConceptTeam = new ConceptDescriptorBuilder("testDefaultEditor.structure.Team").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("isOpenSource").children(new String[]{"developer"}, new boolean[]{true}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCompany, myConceptDefaultNodeAttribute, myConceptDefaultPropertyAttribute, myConceptDefaultReferenceAttribute, myConceptDeveloper, myConceptDummyMethod, myConceptFriend, myConceptTeam);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0l, conceptFqName)) {
      case 0:
        return myConceptCompany;
      case 1:
        return myConceptDefaultNodeAttribute;
      case 2:
        return myConceptDefaultPropertyAttribute;
      case 3:
        return myConceptDefaultReferenceAttribute;
      case 4:
        return myConceptDeveloper;
      case 5:
        return myConceptDummyMethod;
      case 6:
        return myConceptFriend;
      case 7:
        return myConceptTeam;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0l = new String[]{"testDefaultEditor.structure.Company", "testDefaultEditor.structure.DefaultNodeAttribute", "testDefaultEditor.structure.DefaultPropertyAttribute", "testDefaultEditor.structure.DefaultReferenceAttribute", "testDefaultEditor.structure.Developer", "testDefaultEditor.structure.DummyMethod", "testDefaultEditor.structure.Friend", "testDefaultEditor.structure.Team"};
}
