package jetbrains.mps.refactoring.tests;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.refactoring.framework.IRefactoring;
import jetbrains.mps.refactoring.framework.RefactoringUtil;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.project.ProjectOperationContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.util.IterableUtil;

public class RenameLinkRefactoringTester_Hierarchy implements IRefactoringTester {
  public RenameLinkRefactoringTester_Hierarchy() {
  }
  @Override
  public boolean testRefactoring(final Project project, final SModel sandbox1, final SModel sandbox2, final Language testRefactoringLanguage, final Language testRefactoringTargetLanguage) {
    final ModelAccess modelAccess = project.getRepository().getModelAccess();
    final Wrappers._T<IRefactoring> refactoring = new Wrappers._T<IRefactoring>();
    modelAccess.runReadAction(new Runnable() {
      public void run() {
        refactoring.value = RefactoringUtil.getRefactoringByClassName(BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getNode("r:de5b7214-45ee-4f6d-89bf-acde59cdb050(jetbrains.mps.lang.structure.refactorings)", "1347577327951781638"), "virtual_getFqName_1213877404258", new Object[]{}));
      }
    });
    final RefactoringContext refactoringContext = new RefactoringContext(project, refactoring.value);
    refactoringContext.setCurrentOperationContext(new ProjectOperationContext(project));
    final String newLinkName = "goodConcept";
    modelAccess.runReadAction(new Runnable() {
      public void run() {
        SModel structureModelDescriptor = testRefactoringTargetLanguage.getStructureModelDescriptor();
        SModel model = structureModelDescriptor;
        SNode node = SModelOperations.getRootByName(model, "AbstractGoodConcept");
        SNode link = ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(node, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), MetaAdapterFactory.getContainmentLink(new UUID(-4094437568663370681l, -8968368868337559369l), 1169125787135l, 1071489727083l, "linkDeclaration"))).first();
        refactoringContext.setSelectedNode(link);
        refactoringContext.setSelectedModel(structureModelDescriptor);
        refactoringContext.setParameter("newName", newLinkName);
      }
    });

    new RefactoringTestFacade().doExecuteInTest(refactoringContext);
    final boolean[] result = new boolean[]{false};
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      @Override
      public void run() {
        modelAccess.runReadAction(new Runnable() {
          public void run() {
            try {
              if (sandbox1.isLoaded()) {
                System.err.println("test environment is invalid: model sandbox1 is already initialized, should be not");
                result[0] = false;
                return;
              }
              SModel sModel = sandbox1;
              SNode root = sModel.getRootNodes().iterator().next();
              result[0] = (IterableUtil.asCollection(root.getChildren(newLinkName)).size() == 4);
            } catch (Throwable t) {
              t.printStackTrace();
              result[0] = false;
            }
          }
        });
      }
    });
    return result[0];
  }
}
