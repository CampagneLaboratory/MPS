package testRefactoringTargetLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractGoodConcept = new ConceptDescriptorBuilder("testRefactoringTargetLang.structure.AbstractGoodConcept").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("veryNiceProperty").children(new String[]{"anotherGoodConcept"}, new boolean[]{true}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptAnsotherGoodConcept = new ConceptDescriptorBuilder("testRefactoringTargetLang.structure.AnsotherGoodConcept").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractGoodConcept, myConceptAnsotherGoodConcept);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0f, conceptFqName)) {
      case 0:
        return myConceptAbstractGoodConcept;
      case 1:
        return myConceptAnsotherGoodConcept;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0f = new String[]{"testRefactoringTargetLang.structure.AbstractGoodConcept", "testRefactoringTargetLang.structure.AnsotherGoodConcept"};
}
