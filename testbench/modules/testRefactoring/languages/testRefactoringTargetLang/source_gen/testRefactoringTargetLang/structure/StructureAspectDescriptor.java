package testRefactoringTargetLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptAbstractGoodConcept = new ConceptDescriptorBuilder("testRefactoringTargetLang.structure.AbstractGoodConcept", MetaIdFactory.conceptId(0x7bb4f3057fb7495bL, 0xbe9c5777cd6ab9d6L, 0x1174fe34902L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(1199636171013L, "veryNiceProperty")).properties("veryNiceProperty").childDescriptors(new ConceptDescriptorBuilder.Link(1199636171011L, "anotherGoodConcept", MetaIdFactory.conceptId(0x7bb4f3057fb7495bL, 0xbe9c5777cd6ab9d6L, 0x1171705b055L), true, true, false)).children(new String[]{"anotherGoodConcept"}, new boolean[]{true}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptAnsotherGoodConcept = new ConceptDescriptorBuilder("testRefactoringTargetLang.structure.AnsotherGoodConcept", MetaIdFactory.conceptId(0x7bb4f3057fb7495bL, 0xbe9c5777cd6ab9d6L, 0x1171705b055L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractGoodConcept, myConceptAnsotherGoodConcept);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0g, conceptFqName)) {
      case 0:
        return myConceptAbstractGoodConcept;
      case 1:
        return myConceptAnsotherGoodConcept;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0g = new String[]{"testRefactoringTargetLang.structure.AbstractGoodConcept", "testRefactoringTargetLang.structure.AnsotherGoodConcept"};
}
