package testRefactoring.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptMyVeryGoodConcept1 = new ConceptDescriptorBuilder("testRefactoring.structure.MyVeryGoodConcept1").super_("testRefactoringTargetLang.structure.AbstractGoodConcept").parents("testRefactoringTargetLang.structure.AbstractGoodConcept", "jetbrains.mps.lang.core.structure.INamedConcept").references("brother").create();
  /*package*/ final ConceptDescriptor myConceptYetAnotherGoodConcept = new ConceptDescriptorBuilder("testRefactoring.structure.YetAnotherGoodConcept").super_("testRefactoringTargetLang.structure.AnsotherGoodConcept").parents("testRefactoringTargetLang.structure.AnsotherGoodConcept").properties("niceProperty").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptMyVeryGoodConcept1, myConceptYetAnotherGoodConcept);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0f, conceptFqName)) {
      case 0:
        return myConceptMyVeryGoodConcept1;
      case 1:
        return myConceptYetAnotherGoodConcept;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0f = new String[]{"testRefactoring.structure.MyVeryGoodConcept1", "testRefactoring.structure.YetAnotherGoodConcept"};
}
