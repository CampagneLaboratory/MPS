package testMoveElements.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptDummyBlock = new ConceptDescriptorBuilder("testMoveElements.structure.DummyBlock").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"statement"}, new boolean[]{true}).alias("dummy", "").create();
  /*package*/ final ConceptDescriptor myConceptManyStatements = new ConceptDescriptorBuilder("testMoveElements.structure.ManyStatements").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"list", "list1", "list2", "statement"}, new boolean[]{false, false, false, true}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptDummyBlock, myConceptManyStatements);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0f, conceptFqName)) {
      case 0:
        return myConceptDummyBlock;
      case 1:
        return myConceptManyStatements;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0f = new String[]{"testMoveElements.structure.DummyBlock", "testMoveElements.structure.ManyStatements"};
}
