package tests.testDepViewer.test;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import junit.framework.Assert;
import jetbrains.mps.ide.platform.dependencyViewer.ReferencesFinder;
import jetbrains.mps.ide.platform.dependencyViewer.DependencyViewerScope;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.progress.EmptyProgressMonitor;

public class TestDepViewer_Test extends TestCase {
  public void test_testPrecondition() throws Exception {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SModel testModel1 = SModelRepository.getInstance().getModelDescriptor("tests.testDepViewer.model1");
        SModel testModel2 = SModelRepository.getInstance().getModelDescriptor("tests.testDepViewer.model2");
        Assert.assertNotNull(testModel1);
        Assert.assertNotNull(testModel2);
      }
    });
  }
  public void test_testModel1DependsOnSomething() throws Exception {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ReferencesFinder finder = new ReferencesFinder();
        DependencyViewerScope testScope = new DependencyViewerScope();
        testScope.add(SModelRepository.getInstance().getModelDescriptor("tests.testDepViewer.model1"));

        Iterable<SNode> nodes = finder.getNodes(testScope);
        SearchResults targetSearchResults = finder.findRefsFromScopeToOuter(nodes, testScope, new EmptyProgressMonitor());
        Assert.assertFalse(targetSearchResults.getSearchResults().isEmpty());
      }
    });
  }
  public void test_testModel3DoesntDependOnAnything() throws Exception {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ReferencesFinder finder = new ReferencesFinder();
        DependencyViewerScope testScope = new DependencyViewerScope();
        testScope.add(SModelRepository.getInstance().getModelDescriptor("tests.testDepViewer.model3"));

        Iterable<SNode> nodes = finder.getNodes(testScope);
        SearchResults targetSearchResults = finder.findRefsFromScopeToOuter(nodes, testScope, new EmptyProgressMonitor());
        Assert.assertTrue(targetSearchResults.getSearchResults().isEmpty());
      }
    });
  }
  public void test_testModel1DependsOnModel2() throws Exception {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ReferencesFinder finder = new ReferencesFinder();
        DependencyViewerScope testScope = new DependencyViewerScope();
        testScope.add(SModelRepository.getInstance().getModelDescriptor("tests.testDepViewer.model1"));
        DependencyViewerScope targetScope = new DependencyViewerScope();
        targetScope.add(SModelRepository.getInstance().getModelDescriptor("tests.testDepViewer.model2"));

        Iterable<SNode> nodes = finder.getNodes(testScope);
        SearchResults refSearchResults = finder.getRefsBetweenScopes(nodes, testScope, targetScope, new EmptyProgressMonitor());
        Assert.assertFalse(refSearchResults.getSearchResults().isEmpty());
      }
    });
  }
  public void test_testModel1DoesntDependOnModel3() throws Exception {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ReferencesFinder finder = new ReferencesFinder();
        DependencyViewerScope testScope = new DependencyViewerScope();
        testScope.add(SModelRepository.getInstance().getModelDescriptor("tests.testDepViewer.model1"));
        DependencyViewerScope targetScope = new DependencyViewerScope();
        targetScope.add(SModelRepository.getInstance().getModelDescriptor("tests.testDepViewer.model3"));

        Iterable<SNode> nodes = finder.getNodes(testScope);
        SearchResults refSearchResults = finder.getRefsBetweenScopes(nodes, testScope, targetScope, new EmptyProgressMonitor());
        Assert.assertTrue(refSearchResults.getSearchResults().isEmpty());
      }
    });
  }
}
