package BHL1.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.List;
import org.jetbrains.mps.openapi.language.SMethod;
import java.util.Arrays;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.language.ConceptRegistry;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.core.aspects.behaviour.SMethodImpl;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class A1_BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x43359135f67c4a3dL, 0x9fdda3d7dba50995L, 0x7e5c09dfa07d591eL, "BHL1.structure.A1");


  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList();

  public static Void __init__(SNode __thisNode__) {
    return null;
  }


  /*package*/ A1_BehaviorDescriptor() {
    super(ConceptRegistry.getInstance().getBehaviorRegistry());
  }

  @Override
  protected <T> T invokeOwn(@Nullable SNode node, @NotNull SMethod<T> method, Object... parameters) {
    if (method == SMethodImpl.INIT) {
      return (T) __init__(node);
    }
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(method);
    }
  }

  @NotNull
  @Override
  protected List<SMethod<?>> getOwnMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
