package BHL6.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.adapter.ids.MetaIdHelper;
import jetbrains.mps.smodel.behaviour.SMethod;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import UtilSolution.util.TestResults;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.behaviour.BHDescriptor;

public final class A_BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x424c173aee734dc9L, 0xbc43d0051c9b1e8fL, 0x559729dec04606a7L, "BHL6.structure.A");
  private static final SConceptId CONCEPT_ID = MetaIdHelper.getConcept(CONCEPT);

  public static final SMethod<Integer> foo_METHOD = SMethod.create("foo", SMethod.BHMethodModifiers.create(false, false), Integer.TYPE, CONCEPT_ID);
  public static final SMethod<Integer> bar_METHOD = SMethod.create("bar", SMethod.BHMethodModifiers.create(false, false), Integer.TYPE, CONCEPT_ID);

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(foo_METHOD, bar_METHOD);

  public static Void __init__(SNode __thisNode__) {
    return null;
  }

  public static Integer foo(@Nullable SNode __thisNode__) {
    return A_BehaviorDescriptor.bar(__thisNode__);
  }
  public static Integer bar(@Nullable SNode __thisNode__) {
    return TestResults.DEFAULT_RETURN_VALUE;
  }

  /*package*/ A_BehaviorDescriptor() {
  }

  @Override
  protected <T> T invokeOwn(@Nullable SNode node, @NotNull SMethod<T> method, Object... parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHDescriptor.BHMethodNotFoundException(method);
    }
    switch (methodIndex) {
      case 0:
        return (T) foo(node);
      case 1:
        return (T) bar(node);
      default:
        throw new BHDescriptor.BHMethodNotFoundException(method);
    }
  }

  @NotNull
  @Override
  protected List<SMethod<?>> getOwnMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
