package BHL6.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import org.jetbrains.mps.openapi.language.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import jetbrains.mps.core.aspects.behaviour.SParameterImpl;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import UtilSolution.util.TestResults;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SConstructor;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class B_BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x424c173aee734dc9L, 0xbc43d0051c9b1e8fL, 0x559729dec0460fdaL, "BHL6.structure.B");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Integer> foo_id9768 = new SMethodBuilder(new SJavaCompoundTypeImpl(Integer.TYPE)).name("foo").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6167444251392479222").registry(REGISTRY).build(SParameterImpl.fromList(SJavaCompoundTypeImpl.fromClasses()));
  public static final SMethod<Integer> bar_id14810 = new SMethodBuilder(new SJavaCompoundTypeImpl(Integer.TYPE)).name("bar").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6167444251392479236").registry(REGISTRY).build(SParameterImpl.fromList(SJavaCompoundTypeImpl.fromClasses()));
  public static final SMethod<Integer> bar1_id49425 = new SMethodBuilder(new SJavaCompoundTypeImpl(Integer.TYPE)).name("bar1").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6123852159203117574").registry(REGISTRY).build(SParameterImpl.fromList(SJavaCompoundTypeImpl.fromClasses()));
  public static final SMethod<Integer> foo1_id52919 = new SMethodBuilder(new SJavaCompoundTypeImpl(Integer.TYPE)).name("foo1").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6123852159203116448").registry(REGISTRY).build(SParameterImpl.fromList(SJavaCompoundTypeImpl.fromClasses()));
  public static final SMethod<Integer> foo2_id50168 = new SMethodBuilder(new SJavaCompoundTypeImpl(Integer.TYPE)).name("foo2").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6123852159203117295").registry(REGISTRY).build(SParameterImpl.fromList(SJavaCompoundTypeImpl.fromClasses()));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(foo_id9768, bar_id14810, bar1_id49425, foo1_id52919, foo2_id50168);

  public static void ___init___(SNode __thisNode__) {
  }

  public static Integer foo(@Nullable SNode __thisNode__) {
    return B_BehaviorDescriptor.bar_id14810.invoke(__thisNode__);
  }
  public static Integer bar(@Nullable SNode __thisNode__) {
    return TestResults.DEFAULT_RETURN_VALUE;
  }
  public static Integer bar1(@Nullable SNode __thisNode__) {
    return TestResults.INCORRECT_RETURN_VALUE;
  }
  public static Integer foo1(@Nullable SNode __thisNode__) {
    return TestResults.DEFAULT_RETURN_VALUE;
  }
  public static Integer foo2(@Nullable SNode __thisNode__) {
    return B_BehaviorDescriptor.bar1_id49425.invoke(__thisNode__);
  }

  /*package*/ B_BehaviorDescriptor() {
    super(REGISTRY);
  }

  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, Object... objects) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeOwn(@Nullable SNode node, @NotNull SMethod<T> method, Object... parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(method);
    }
    switch (methodIndex) {
      case 0:
        return (T) foo(node);
      case 1:
        return (T) bar(node);
      case 2:
        return (T) bar1(node);
      case 3:
        return (T) foo1(node);
      case 4:
        return (T) foo2(node);
      default:
        throw new BHMethodNotFoundException(method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
