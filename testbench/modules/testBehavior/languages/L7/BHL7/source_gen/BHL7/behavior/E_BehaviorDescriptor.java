package BHL7.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.behaviour.SMethod;
import jetbrains.mps.smodel.behaviour.SMethodBuilder;
import jetbrains.mps.smodel.behaviour.BHMethodModifiers;
import jetbrains.mps.smodel.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.behaviour.BHDescriptor;

public final class E_BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x4239359f64574d2aL, 0xb1e014d3f948db39L, 0x10b2a2acd7137351L, "BHL7.structure.E");

  public static final SMethod<Integer> foo_id53713 = new SMethodBuilder(Integer.TYPE).name("foo").modifiers(BHMethodModifiers.create(true, false, AccessPrivileges.PUBLIC)).concept(CONCEPT).baseMethod(I3_BehaviorDescriptor.foo_id53737).build();
  public static final SMethod<Integer> foo_id53723 = new SMethodBuilder(Integer.TYPE).name("foo___1").modifiers(BHMethodModifiers.create(true, false, AccessPrivileges.PUBLIC)).concept(CONCEPT).baseMethod(I3_BehaviorDescriptor.foo_id53654).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(foo_id53713, foo_id53723);

  public static Void __init__(SNode __thisNode__) {
    return null;
  }

  public static Integer foo(@Nullable SNode __thisNode__) {
    return 1;
  }
  public static Integer foo___1(@Nullable SNode __thisNode__) {
    return 2;
  }

  /*package*/ E_BehaviorDescriptor() {
  }

  @Override
  protected <T> T invokeOwn(@Nullable SNode node, @NotNull SMethod<T> method, Object... parameters) {
    if (method == SMethod.INIT) {
      return (T) __init__(node);
    }
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHDescriptor.BHMethodNotFoundException(method);
    }
    switch (methodIndex) {
      case 0:
        return (T) foo(node);
      case 1:
        return (T) foo___1(node);
      default:
        throw new BHDescriptor.BHMethodNotFoundException(method);
    }
  }

  @NotNull
  @Override
  protected List<SMethod<?>> getOwnMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
