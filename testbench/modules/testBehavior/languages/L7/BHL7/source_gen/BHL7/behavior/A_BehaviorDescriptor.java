package BHL7.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.behaviour.BaseBHDescriptor;
import jetbrains.mps.smodel.behaviour.SMethod;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import UtilSolution.util.TestResults;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.behaviour.BHVirtualMethodTable;
import jetbrains.mps.smodel.behaviour.BHDescriptor;

public final class A_BehaviorDescriptor extends BaseBHDescriptor {
  public static final SMethod<Integer> nonVirtualMethod_METHOD = SMethod.create("nonVirtualMethod", SMethod.BHMethodModifiers.empty().virtualOn(false).staticOn(false), Integer.TYPE);
  public static final SMethod<Object> virtualMethod_METHOD = SMethod.create("virtualMethod", SMethod.BHMethodModifiers.empty().virtualOn(true).staticOn(false), Object.class);
  public static final SMethod<Integer> staticMethod_METHOD = SMethod.create("staticMethod", SMethod.BHMethodModifiers.empty().virtualOn(false).staticOn(true), Integer.TYPE);
  public static final SMethod<Object> staticVirtualMethod_METHOD = SMethod.create("staticVirtualMethod", SMethod.BHMethodModifiers.empty().virtualOn(true).staticOn(true), Object.class);
  public static final SMethod<Void> justVoidReturnTypeMethod_METHOD = SMethod.create("justVoidReturnTypeMethod", SMethod.BHMethodModifiers.empty().virtualOn(false).staticOn(false), Void.class);

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(nonVirtualMethod_METHOD, virtualMethod_METHOD, staticMethod_METHOD, staticVirtualMethod_METHOD, justVoidReturnTypeMethod_METHOD);

  public static Void __init__(SNode __thisNode__) {
    return null;
  }

  public static Integer nonVirtualMethod(@Nullable SNode __thisNode__) {
    return TestResults.DEFAULT_RETURN_VALUE;
  }
  public static Object virtualMethod(@Nullable SNode __thisNode__) {
    return TestResults.POLYMORPHIC_PARENT;
  }
  public static Integer staticMethod(@Nullable SNode __thisNode__) {
    return TestResults.DEFAULT_RETURN_VALUE;
  }
  public static Object staticVirtualMethod(@Nullable SNode __thisNode__) {
    return TestResults.POLYMORPHIC_PARENT;
  }
  public static Void justVoidReturnTypeMethod(@Nullable SNode __thisNode__) {
    return null;
  }

  public A_BehaviorDescriptor(@NotNull SAbstractConcept concept) {
    super(concept);
  }

  @Override
  protected void fillVTable(@NotNull BHVirtualMethodTable table) {
    table.putAll(BH_METHODS, this);
  }

  @Override
  protected <T> T invokeOwn(@Nullable SNode node, @NotNull SMethod<T> method, Object... parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHDescriptor.BHMethodNotFoundException(method);
    }
    switch (methodIndex) {
      case 0:
        return (T) nonVirtualMethod(node);
      case 1:
        return (T) virtualMethod(node);
      case 2:
        return (T) staticMethod(node);
      case 3:
        return (T) staticVirtualMethod(node);
      case 4:
        return (T) justVoidReturnTypeMethod(node);
      default:
        throw new BHDescriptor.BHMethodNotFoundException(method);
    }
  }

  @Override
  protected <T> boolean hasOwnMethod(@NotNull SMethod<T> method) {
    return BH_METHODS.contains(method);
  }
}
