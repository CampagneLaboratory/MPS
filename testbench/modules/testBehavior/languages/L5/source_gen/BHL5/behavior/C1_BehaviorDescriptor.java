package BHL5.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.adapter.ids.MetaIdHelper;
import java.util.List;
import jetbrains.mps.smodel.behaviour.SMethod;
import java.util.Arrays;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import UtilSolution.util.TestResults;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.behaviour.BHDescriptor;

public final class C1_BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xb4fa1e36714a4c77L, 0x8e953eae9632decbL, 0x355d469f0ba23bc7L, "BHL5.structure.C1");
  private static final SConceptId CONCEPT_ID = MetaIdHelper.getConcept(CONCEPT);


  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList();

  public static Void __init__(SNode __thisNode__) {
    SPropertyOperations.set(__thisNode__, MetaAdapterFactory.getProperty(0xb4fa1e36714a4c77L, 0x8e953eae9632decbL, 0x355d469f0ba114cbL, 0x355d469f0ba114e9L, "a"), TestResults.C1_DEFAULT_VALUE);
    return null;
  }


  /*package*/ C1_BehaviorDescriptor() {
  }

  @Override
  protected <T> T invokeOwn(@Nullable SNode node, @NotNull SMethod<T> method, Object... parameters) {
    if (method == SMethod.INIT) {
      return (T) __init__(node);
    }
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHDescriptor.BHMethodNotFoundException(method);
    }
    switch (methodIndex) {
      default:
        throw new BHDescriptor.BHMethodNotFoundException(method);
    }
  }

  @NotNull
  @Override
  protected List<SMethod<?>> getOwnMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
