package jetbrains.mps;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.Project;
import java.io.File;
import com.intellij.openapi.project.ex.ProjectManagerEx;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.make.ModuleMaker;
import java.util.LinkedHashSet;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.application.PathManager;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import java.util.Arrays;
import com.intellij.openapi.vfs.newvfs.persistent.FSRecords;
import com.intellij.idea.IdeaTestApplication;
import com.intellij.openapi.application.ApplicationManager;
import javax.swing.SwingUtilities;

public class TestMain {
  private static final String[] DEFAULT_ENABLED_PLUGINS = new String[]{"jetbrains.mps.vcs", "jetbrains.mps.ide.editor", "jetbrains.mps.ide.make", "Git4Idea"};
  public static TestMain.ProjectContainer PROJECT_CONTAINER = new TestMain.ProjectContainer();
  private static boolean cachesInvalidated = false;

  public TestMain() {
  }

  @NotNull
  public static Project loadProject(File projectFile) {
    if (!(projectFile.exists())) {
      throw new RuntimeException("Can't find project file " + projectFile.getAbsolutePath());
    }
    final ProjectManagerEx projectManager = ProjectManagerEx.getInstanceEx();
    final String filePath = projectFile.getAbsolutePath();
    // this is a workaround for MPS-8840 
    final com.intellij.openapi.project.Project[] project = new com.intellij.openapi.project.Project[1];
    final Throwable[] exc = new Throwable[]{null};
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        try {
          project[0] = projectManager.loadAndOpenProject(filePath);
        } catch (Throwable e) {
          exc[0] = e;
        }
      }
    });
    if (project[0] == null) {
      // this actually happens 
      throw new RuntimeException("ProjectManager could not load project from " + projectFile.getAbsolutePath(), exc[0]);
    }
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        new ModuleMaker().make(new LinkedHashSet<SModule>(MPSModuleRepository.getInstance().getAllModules()), new EmptyProgressMonitor());
      }
    });
    projectManager.openProject(project[0]);
    return project[0].getComponent(MPSProject.class);
  }

  public static void configureMPS() {
    configureMPS(DEFAULT_ENABLED_PLUGINS);
  }

  public static void configureMPS(String... plugins) {
    String mpsInternal = System.getProperty("mps.internal");
    System.setProperty("idea.is.internal", (mpsInternal == null ?
      "false" :
      mpsInternal
    ));
    System.setProperty("idea.no.jre.check", "true");
    // Not necessary to set this property for loading listed plugins - see PluginManager.loadDescriptors() 
    System.setProperty("idea.platform.prefix", "Idea");
    StringBuffer pluginPath = new StringBuffer();
    File pluginDir = new File(PathManager.getPreinstalledPluginsPath());
    if (pluginDir.listFiles() != null) {
      for (File pluginFolder : pluginDir.listFiles()) {
        if (pluginPath.length() > 0) {
          pluginPath.append(File.pathSeparator);
        }
        pluginPath.append(pluginFolder.getPath());
      }
    }
    System.setProperty("plugin.path", pluginPath.toString());
    // Value of this property is comma-separated list of plugin IDs intended to load by platform 
    if (System.getProperty("idea.load.plugins") == null || System.getProperty("idea.load.plugins").equals("false")) {
      System.setProperty("idea.load.plugins.id", IterableUtils.join(Arrays.asList(plugins), ","));
    }
    if (!(cachesInvalidated)) {
      FSRecords.invalidateCaches();
      cachesInvalidated = true;
    }
    try {
      IdeaTestApplication.getInstance(null);
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  public static void disposeMPS() {
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      @Override
      public void run() {
        ApplicationManager.getApplication().runWriteAction(new Runnable() {
          public void run() {
            IdeaTestApplication.getInstance(null).dispose();
          }
        });
      }
    });
  }

  public static class ProjectContainer {
    protected String projectName;
    protected Project lastProject;

    public ProjectContainer() {
    }

    public void clear() {
      try {
        SwingUtilities.invokeAndWait(new Runnable() {
          public void run() {
            if (ProjectContainer.this.lastProject != null) {
              ProjectContainer.this.lastProject.dispose();
              ProjectContainer.this.lastProject = null;
            }
            ProjectContainer.this.projectName = null;
          }
        });
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

    public Project getProject(String name) {
      if (((name != null ?
        name.equals(this.projectName) :
        name == this.projectName
      ))) {
        return this.lastProject;
      } else {
        Project p = TestMain.loadProject(new File(name));
        if (this.lastProject != null) {
          try {
            SwingUtilities.invokeAndWait(new Runnable() {
              public void run() {
                ProjectContainer.this.lastProject.dispose();
              }
            });
          } catch (Exception e) {
            e.printStackTrace();
          }
        }
        this.lastProject = p;
        this.projectName = name;
        return p;
      }
    }
  }
}
