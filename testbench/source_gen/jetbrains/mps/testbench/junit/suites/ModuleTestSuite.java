package jetbrains.mps.testbench.junit.suites;

/*Generated by MPS */

import org.junit.runner.RunWith;
import jetbrains.mps.testbench.junit.runners.DynamicSuite;
import jetbrains.mps.tool.environment.Environment;
import org.junit.runners.model.TestClass;
import org.junit.runners.model.InitializationError;
import jetbrains.mps.TestMain;
import org.junit.AfterClass;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.io.File;
import jetbrains.mps.library.ModulesMiner;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.BaseMPSModuleOwner;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.cleanup.CleanupManager;
import jetbrains.mps.progress.EmptyProgressMonitor;
import java.util.Map;
import jetbrains.mps.tool.environment.EnvironmentConfig;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.testbench.junit.runners.MpsTestsSupport;
import java.util.LinkedHashMap;
import jetbrains.mps.project.Project;
import jetbrains.mps.tool.environment.ActiveEnvironment;

@RunWith(DynamicSuite.class)
public class ModuleTestSuite {
  private static final String PROPERTY_LIBRARY = "mps.libraries";
  private static final String PROPERTY_TEST_MODULE = "mps.test.modules";

  private static Environment CREATED_ENV;


  @DynamicSuite.Factory
  public static Class<?>[] suiteClasses(TestClass testClass) throws InitializationError {
    createTestEnvironment(loadLibraries());

    // todo: get rid from 
    ModuleTestSuite.DummyProjectContainer container = new ModuleTestSuite.DummyProjectContainer();
    TestMain.PROJECT_CONTAINER = container;
    // all classloading should be finished before test classes collecting 
    container.getDummyProject();

    return getUnitTestClasses();
  }



  @AfterClass
  public static void cleanUp() {
    if (CREATED_ENV != null) {
      CREATED_ENV.disposeEnvironment();
    }
  }



  protected static Class[] getUnitTestClasses() throws InitializationError {
    List<Class> result = ListSequence.fromList(new ArrayList<Class>());
    for (Tuples._2<String, SModule> testClassDescriptor : ListSequence.fromList(getTestClassDescriptorsFromModels(ListSequence.fromList(getTestModules()).translate(new ITranslator2<SModule, SModel>() {
      public Iterable<SModel> translate(SModule it) {
        return it.getModels();
      }
    })))) {
      Class testClass = ClassLoaderManager.getInstance().getClass(testClassDescriptor._1(), testClassDescriptor._0());
      if (testClass != null) {
        ListSequence.fromList(result).addElement(testClass);
      } else {
        throw new InitializationError("Unable to load class for ITestCase by fq name: " + testClassDescriptor._0() + " from module: " + testClassDescriptor._1().getModuleName());
      }
    }
    return ListSequence.fromList(result).toGenericArray(Class.class);
  }

  protected static List<Tuples._2<String, SModule>> getTestClassDescriptorsFromModels(final Iterable<SModel> modelDescriptors) {
    final List<Tuples._2<String, SModule>> testClassDescriptors = ListSequence.fromList(new ArrayList<Tuples._2<String, SModule>>());
    ModelAccess.instance().runReadAction(new Runnable() {
      @Override
      public void run() {
        for (SModel model : Sequence.fromIterable(modelDescriptors)) {
          for (SNode testCase : ListSequence.fromList(SModelOperations.getRoots(((SModel) model), "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))) {
            ListSequence.fromList(testClassDescriptors).addElement(MultiTuple.<String,SModule>from(BehaviorReflection.invokeVirtual(String.class, testCase, "virtual_getClassName_1216136193905", new Object[]{}), model.getModule()));
          }
        }
      }
    });
    return testClassDescriptors;
  }

  private static List<SModule> getTestModules() {
    List<SModule> result = ListSequence.fromList(new ArrayList<SModule>());
    String modulesString = System.getProperty(PROPERTY_TEST_MODULE);
    if ((modulesString == null || modulesString.length() == 0)) {
      return result;
    }
    String[] modules = modulesString.split(File.pathSeparator);
    for (String modulePath : modules) {
      ListSequence.fromList(result).addSequence(Sequence.fromIterable(loadModule(modulePath)));
    }
    return result;
  }

  private static Iterable<SModule> loadModule(String modulePath) {
    final List<ModulesMiner.ModuleHandle> collectModules = ModulesMiner.getInstance().collectModules(FileSystem.getInstance().getFileByPath(modulePath), false);

    if (collectModules.isEmpty()) {
      return ListSequence.fromList(new ArrayList<SModule>());
    }

    return ModelAccess.instance().runWriteAction(new Computable<List<SModule>>() {
      public List<SModule> compute() {
        List<SModule> modules = new ArrayList<SModule>();
        BaseMPSModuleOwner owner = new BaseMPSModuleOwner() {};
        for (ModulesMiner.ModuleHandle moduleHandle : collectModules) {
          SModule module = ModuleRepositoryFacade.createModule(moduleHandle, owner);
          if (module != null) {
            modules.add(module);
          }
        }
        CleanupManager.getInstance().cleanup();
        ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
        return modules;
      }
    });
  }



  private static void createTestEnvironment(Map<String, File> libs) {
    // todo: ask Julia why without plugins? 
    EnvironmentConfig config = EnvironmentConfig.emptyEnvironment();
    for (IMapping<String, File> lib : MapSequence.fromMap(libs)) {
      config = config.addLib(lib.key(), lib.value());
    }
    CREATED_ENV = MpsTestsSupport.initEnv(true, config);
  }

  private static Map<String, File> loadLibraries() {
    Map<String, File> result = MapSequence.fromMap(new LinkedHashMap<String, File>(16, (float) 0.75, false));
    String librariesString = System.getProperty(PROPERTY_LIBRARY);
    if ((librariesString == null || librariesString.length() == 0)) {
      return result;
    }
    String[] libraries = librariesString.split(File.pathSeparator);
    for (String lib : libraries) {
      File libFile = new File(lib);
      if (libFile.exists()) {
        MapSequence.fromMap(result).put(libFile.getName(), libFile);
      }
    }
    return result;
  }

  private static class DummyProjectContainer extends TestMain.ProjectContainer {
    public DummyProjectContainer() {
    }

    @Override
    public Project getProject(String string) {
      if (this.lastProject == null) {
        return getDummyProject();
      }
      return this.lastProject;
    }

    private Project getDummyProject() {
      return ActiveEnvironment.get().createDummyProject();
    }



    @Override
    public void clear() {
      // do nothing 
    }
  }


}
