package jetbrains.mps.testbench.junit.suites;

/*Generated by MPS */

import org.junit.runner.RunWith;
import jetbrains.mps.testbench.junit.runners.ParameterizedSuite;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.testbench.junit.runners.MPSOpenProjectRunner;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

@RunWith(ParameterizedSuite.class)
public class ExecuteProjectTests {
  public ExecuteProjectTests() {
  }

  @ParameterizedSuite.SuiteClasses
  public static List<Class<?>> getUnitTestClasses() {
    final List<Class<?>> result = ListSequence.fromList(new ArrayList<Class<?>>());
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        MPSProject mpsProject = MPSOpenProjectRunner.getCurrentMPSProject();
        List<IModule> projectModules = mpsProject.getModules();
        for (IModule module : ListSequence.fromList(projectModules)) {
          List<SModelDescriptor> modelDescriptors = module.getOwnModelDescriptors();
          for (SModelDescriptor modelDescriptor : ListSequence.fromList(modelDescriptors)) {
            SModel model = modelDescriptor.getSModel();
            for (SNode testCase : ListSequence.fromList(SModelOperations.getRoots(model, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))) {
              String testClassName = ((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"), "virtual_getClassName_1216136193905", new Class[]{SNode.class}));
              Class testClass = module.getClass(testClassName);
              if (testClass != null) {
                ListSequence.fromList(result).addElement(testClass);
              }
            }
          }
        }
      }
    });
    return result;
  }
}
