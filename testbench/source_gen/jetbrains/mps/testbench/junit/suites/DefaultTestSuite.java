package jetbrains.mps.testbench.junit.suites;

/*Generated by MPS */

import org.junit.runner.RunWith;
import jetbrains.mps.testbench.junit.runners.DynamicSuite;
import org.junit.runners.model.InitializationError;
import jetbrains.mps.testbench.junit.runners.MpsTestsSupport;
import jetbrains.mps.ide.IdeMain;
import jetbrains.mps.project.Project;
import jetbrains.mps.TestMain;
import jetbrains.mps.smodel.ModelAccess;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import com.intellij.util.PathUtil;
import java.io.File;
import com.intellij.openapi.application.PathMacros;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.classloading.ClassLoaderManager;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.Collections;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;

@RunWith(DynamicSuite.class)
public class DefaultTestSuite {
  private static String PROPERTY_PROJECT_NAME = "mps.junit.project";
  private static String PROPERTY_PREFIX_PATH_MACRO = "mps.junit.pathmacro.";

  private static String PROPERTY_MODULE_UUID = "mps.junit.projectSuite.moduleUUID";
  private static String PROPERTY_MODEL_NAME = "mps.junit.projectSuite.modelLongName";
  private static String PROPERTY_TESTCLASS_NAME = "mps.junit.projectSuite.testClassName";


  @DynamicSuite.Factory
  public static Class<?>[] suiteClasses(org.junit.runners.model.TestClass testClass) throws InitializationError {
    String projectPath = getProjectPath(testClass.getJavaClass());
    MpsTestsSupport.initEnv(true);
    IdeMain.setTestMode(IdeMain.TestMode.CORE_TEST);
    initPathMacros();
    // todo: check opened mps projects here 
    // <node> 
    Project project = TestMain.PROJECT_CONTAINER.getProject(projectPath);

    // TODO: 
    // 
    // 2. Libraries? 
    // 3. Cache location ? 
    // 4. creste separate suite generating (making) all modules in this project by using ProjectTestHelper? 
    ModelAccess.instance().flushEventQueue();

    return getUnitTestClasses(testClass, project);
  }

  private static void initPathMacros() {
    for (Map.Entry<Object, Object> property : SetSequence.fromSet(System.getProperties().entrySet())) {
      if (!(property.getKey() instanceof String) || !(property.getValue() instanceof String)) {
        continue;
      }
      String propertyKey = (String) property.getKey();
      String propertyValue = (String) property.getValue();
      if ((propertyKey == null || propertyKey.length() == 0) || !(propertyKey.startsWith(PROPERTY_PREFIX_PATH_MACRO))) {
        continue;
      }
      String canonicalPath = PathUtil.getCanonicalPath(propertyValue);
      File file = new File(canonicalPath);
      if (file.exists() && file.isDirectory()) {
        PathMacros.getInstance().setMacro(propertyKey.substring(PROPERTY_PREFIX_PATH_MACRO.length()), canonicalPath);
      }
    }
  }

  private static String getProjectPath(Class<?> testClass) throws InitializationError {
    DefaultTestSuite.MPSProject mpsProject = testClass.getAnnotation(DefaultTestSuite.MPSProject.class);
    if (mpsProject != null) {
      return mpsProject.value();
    }
    String mpsProjectSystemProperty = System.getProperty(PROPERTY_PROJECT_NAME);
    if (mpsProjectSystemProperty == null) {
      throw new InitializationError("Neither @MPSProject annotation nor System property \"" + PROPERTY_PROJECT_NAME + "\" was not specified.");
    }
    return mpsProjectSystemProperty;
  }

  protected static Class[] getUnitTestClasses(org.junit.runners.model.TestClass klass, Project project) throws InitializationError {
    List<Class> result = ListSequence.fromList(new ArrayList<Class>());
    for (Tuples._2<String, SModule> testClassDescriptor : ListSequence.fromList(getTestClassDescriptors(klass, project))) {
      Class testClass = null;
      try {
        testClass = ClassLoaderManager.getInstance().getClassLoader(testClassDescriptor._1()).loadClass(testClassDescriptor._0());
      } catch (ClassNotFoundException e) {
      }
      if (testClass != null) {
        ListSequence.fromList(result).addElement(testClass);
      } else {
        throw new InitializationError("Unable to load class for ITestCase by fq name: " + testClassDescriptor._0() + " from module: " + testClassDescriptor._1().getModuleName());
      }
    }
    return ListSequence.fromList(result).toGenericArray(Class.class);
  }

  protected static List<Tuples._2<String, SModule>> getTestClassDescriptorsFromModels(final Iterable<SModel> modelDescriptors) {
    final List<Tuples._2<String, SModule>> testClassDescriptors = ListSequence.fromList(new ArrayList<Tuples._2<String, SModule>>());
    ModelAccess.instance().runReadAction(new Runnable() {
      @Override
      public void run() {
        for (SModel model : Sequence.fromIterable(modelDescriptors)) {
          for (SNode testCase : ListSequence.fromList(SModelOperations.getRoots(((SModel) model), "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))) {
            ListSequence.fromList(testClassDescriptors).addElement(MultiTuple.<String,SModule>from(BehaviorReflection.invokeVirtual(String.class, testCase, "virtual_getClassName_1216136193905", new Object[]{}), ((SModule) model.getModule())));
          }
        }
      }
    });
    return testClassDescriptors;
  }

  protected static List<Tuples._2<String, SModule>> getTestClassDescriptors(org.junit.runners.model.TestClass klass, Project project) throws InitializationError {
    final Iterable<SModel> modelDescriptors = getModelDescriptors(klass, project);
    String testClassName = getTestClassName(klass);
    if (testClassName != null) {
      if (Sequence.fromIterable(modelDescriptors).isEmpty()) {
        throw new InitializationError("Unable to locate class: " + testClassName + " - no model descriptors found (model or module was not specified)");
      }
      return Collections.singletonList(MultiTuple.<String,SModule>from(testClassName, ((SModule) Sequence.fromIterable(modelDescriptors).first().getModule())));
    }

    return getTestClassDescriptorsFromModels(modelDescriptors);
  }

  private static Iterable<SModel> getModelDescriptors(org.junit.runners.model.TestClass klass, Project project) throws InitializationError {
    String moduleUUID = getModuleUUID(klass);
    if (moduleUUID != null) {
      for (SModule module : Sequence.fromIterable(project.getModules())) {
        if (moduleUUID.equals(module.getModuleId().toString())) {
          return module.getModels();
        }
      }
      throw new InitializationError("Module with specified UUID: " + moduleUUID + " was not found in MPS project: " + project.getProjectFile().getAbsolutePath());
    }

    String modelLongName = getModelLongName(klass);
    if (modelLongName != null) {
      for (SModel modelDescriptor : Sequence.fromIterable(project.getProjectModels())) {
        if (modelLongName.equals(modelDescriptor.getModelName())) {
          return Collections.singletonList(modelDescriptor);
        }
      }
      throw new InitializationError("Model with specified longName: " + modelLongName + " was not found in MPS project: " + project.getProjectFile().getAbsolutePath());
    }

    return project.getProjectModels();
  }

  private static String getModuleUUID(org.junit.runners.model.TestClass klass) {
    DefaultTestSuite.ModuleUUID moduleAnnotation = klass.getJavaClass().getAnnotation(DefaultTestSuite.ModuleUUID.class);
    if (moduleAnnotation != null) {
      return moduleAnnotation.value();
    }
    return System.getProperty(PROPERTY_MODULE_UUID);
  }

  private static String getModelLongName(org.junit.runners.model.TestClass klass) {
    DefaultTestSuite.ModelLongName modelAnnotation = klass.getJavaClass().getAnnotation(DefaultTestSuite.ModelLongName.class);
    if (modelAnnotation != null) {
      return modelAnnotation.value();
    }
    return System.getProperty(PROPERTY_MODEL_NAME);
  }

  private static String getTestClassName(org.junit.runners.model.TestClass klass) {
    DefaultTestSuite.TestClass testClassAnnotation = klass.getJavaClass().getAnnotation(DefaultTestSuite.TestClass.class);
    if (testClassAnnotation != null) {
      return testClassAnnotation.value();
    }
    return System.getProperty(PROPERTY_TESTCLASS_NAME);
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface ModuleUUID {
    /**
     * 
     * 
     * @return path to MPS project
     */
    String value();
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface ModelLongName {
    /**
     * 
     * 
     * @return path to MPS project
     */
    String value();
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface TestClass {
    /**
     * 
     * 
     * @return path to MPS project
     */
    String value();
  }



  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface MPSProject {
    /**
     * 
     * 
     * @return path to MPS project
     */
    String value();
  }
}
