package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runners.model.RunnerBuilder;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.module.SModule;
import org.junit.runners.model.InitializationError;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;

public class MpsProjectTestSuite extends MPSProjectITestsSuite {
  private static String PROPERTY_MODULE_UUID = "mps.junit.projectSuite.moduleUUID";
  private static String PROPERTY_MODEL_NAME = "mps.junit.projectSuite.modelLongName";
  private static String PROPERTY_TESTCLASS_NAME = "mps.junit.projectSuite.testClassName";

  public MpsProjectTestSuite(Class<?> klass, RunnerBuilder builder) throws Throwable {
    super(klass, builder);
  }

  protected List<Tuples._2<String, SModule>> getTestClassDescriptors(org.junit.runners.model.TestClass klass) throws InitializationError {
    final Iterable<SModel> modelDescriptors = getModelDescriptors(klass);
    String testClassName = getTestClassName(klass);
    if (testClassName != null) {
      if (Sequence.fromIterable(modelDescriptors).isEmpty()) {
        throw new InitializationError("Unable to locate class: " + testClassName + " - no model descriptors found (model or module was not specified)");
      }
      return Collections.singletonList(MultiTuple.<String,SModule>from(testClassName, ((SModule) Sequence.fromIterable(modelDescriptors).first().getModule())));
    }

    return getTestClassDescriptorsFromModels(modelDescriptors);
  }

  private Iterable<SModel> getModelDescriptors(org.junit.runners.model.TestClass klass) throws InitializationError {
    String moduleUUID = getModuleUUID(klass);
    if (moduleUUID != null) {
      for (SModule module : Sequence.fromIterable(MPSOpenProjectRunner.getCurrentMPSProject().getModules())) {
        if (moduleUUID.equals(module.getModuleId().toString())) {
          return module.getModels();
        }
      }
      throw new InitializationError("Module with specified UUID: " + moduleUUID + " was not found in MPS project: " + MPSOpenProjectRunner.getCurrentMPSProject().getProjectFile().getAbsolutePath());
    }

    String modelLongName = getModelLongName(klass);
    if (modelLongName != null) {
      for (SModel modelDescriptor : Sequence.fromIterable(MPSOpenProjectRunner.getCurrentMPSProject().getProjectModels())) {
        if (modelLongName.equals(modelDescriptor.getModelName())) {
          return Collections.singletonList(modelDescriptor);
        }
      }
      throw new InitializationError("Model with specified longName: " + modelLongName + " was not found in MPS project: " + MPSOpenProjectRunner.getCurrentMPSProject().getProjectFile().getAbsolutePath());
    }

    return MPSOpenProjectRunner.getCurrentMPSProject().getProjectModels();
  }

  private String getModuleUUID(org.junit.runners.model.TestClass klass) {
    MpsProjectTestSuite.ModuleUUID moduleAnnotation = klass.getJavaClass().getAnnotation(MpsProjectTestSuite.ModuleUUID.class);
    if (moduleAnnotation != null) {
      return moduleAnnotation.value();
    }
    return System.getProperty(MpsProjectTestSuite.PROPERTY_MODULE_UUID);
  }

  private String getModelLongName(org.junit.runners.model.TestClass klass) {
    MpsProjectTestSuite.ModelLongName modelAnnotation = klass.getJavaClass().getAnnotation(MpsProjectTestSuite.ModelLongName.class);
    if (modelAnnotation != null) {
      return modelAnnotation.value();
    }
    return System.getProperty(PROPERTY_MODEL_NAME);
  }

  private String getTestClassName(org.junit.runners.model.TestClass klass) {
    MpsProjectTestSuite.TestClass testClassAnnotation = klass.getJavaClass().getAnnotation(MpsProjectTestSuite.TestClass.class);
    if (testClassAnnotation != null) {
      return testClassAnnotation.value();
    }
    return System.getProperty(PROPERTY_TESTCLASS_NAME);
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface ModuleUUID {
    /**
     * 
     * 
     * @return path to MPS project
     */
    String value();
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface ModelLongName {
    /**
     * 
     * 
     * @return path to MPS project
     */
    String value();
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface TestClass {
    /**
     * 
     * 
     * @return path to MPS project
     */
    String value();
  }
}
