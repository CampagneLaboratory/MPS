package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import java.util.List;
import org.junit.runner.Runner;
import org.junit.runners.model.RunnerBuilder;
import org.junit.runners.model.InitializationError;
import org.junit.runner.notification.RunNotifier;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;

public class MpsTest extends WatchingSuite {
  private final List<Runner> children;


  public MpsTest(Class<?> klass, RunnerBuilder builder) throws InitializationError {
    super(klass, builder);

    MpsTestsSupport.initEnv(klass.getAnnotation(MpsTest.WithIdeaInstance.class) != null);

    if (klass.getAnnotation(MpsTest.PreloadAllModules.class) != null) {
      MpsTestsSupport.loadAllModulesIntoRepository();
    }

    if (klass.getAnnotation(MpsTest.WithMake.class) != null) {
      children = MakeRunner.withMakeRunner(getTestClass(), super.getChildren());
    } else {
      children = super.getChildren();
    }
  }

  @Override
  protected void runChild(Runner runner, RunNotifier notifier) {
    super.runChild(runner, notifier);
    if (runner == children.get(children.size() - 1)) {
      MpsTestsSupport.disposeEnv();
    }
  }

  @Override
  protected List<Runner> getChildren() {
    return children;
  }



  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
public static   @interface WithIdeaInstance {
}

@Retention(RetentionPolicy.RUNTIME)
@Target(value = {ElementType.TYPE})
public /**
 * Preload all modules from {user.dir}, do not use!
 */
static @interface PreloadAllModules {
}

@Retention(RetentionPolicy.RUNTIME)
@Target(value = {ElementType.TYPE})
public static @interface WithMake {
}
}
