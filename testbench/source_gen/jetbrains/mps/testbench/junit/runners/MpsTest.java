package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runners.ParentRunner;
import org.junit.runner.Runner;
import java.util.List;
import jetbrains.mps.tool.environment.Environment;
import org.junit.runners.model.RunnerBuilder;
import org.junit.runner.notification.RunNotifier;
import org.junit.runner.manipulation.Sortable;
import org.junit.runner.manipulation.Sorter;
import jetbrains.mps.testbench.junit.OrderComparator;
import jetbrains.mps.testbench.junit.WatchingRunNotifier;
import jetbrains.mps.testbench.PerformanceMessenger;
import org.junit.runner.Description;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;

public abstract class MpsTest extends ParentRunner<Runner> {
  private List<Runner> children;
  private final boolean withWatching;
  private final boolean withSorting;
  private final Environment createdEnv;


  public MpsTest(Class<?> klass, RunnerBuilder builder) throws Throwable {
    super(klass);

    createdEnv = MpsTestsSupport.initEnv(klass.getAnnotation(MpsTest.WithIdeaInstance.class) != null);

    if (klass.getAnnotation(MpsTest.PreloadAllModules.class) != null) {
      MpsTestsSupport.loadAllModulesIntoRepository();
    }

    children = createChildRunners(klass, builder);
    if (klass.getAnnotation(MpsTest.WithMake.class) != null) {
      children = MakeRunner.withMakeRunner(getTestClass(), children);
    }

    withWatching = klass.getAnnotation(MpsTest.WithoutWatching.class) == null;
    // todo: remove withSorting annotation? 
    withSorting = klass.getAnnotation(MpsTest.WithSorting.class) != null;
  }

  protected abstract List<Runner> createChildRunners(Class<?> klass, RunnerBuilder builder) throws Throwable;

  @Override
  protected void runChild(Runner runner, RunNotifier notifier) {
    if (withSorting) {
      if (runner instanceof Sortable) {
        ((Sortable) runner).sort(new Sorter(new OrderComparator()));
      }
    }

    if (withWatching) {
      WatchingRunNotifier runNotifier = new WatchingRunNotifier(notifier);
      try {
        runner.run(runNotifier);
      } finally {
        PerformanceMessenger.getInstance().generateReport();
        runNotifier.dispose();
      }
    } else {
      runner.run(notifier);
    }

    if (runner == children.get(children.size() - 1) && createdEnv != null) {
      createdEnv.disposeEnvironment();
    }
  }

  protected Description describeChild(Runner child) {
    return child.getDescription();
  }

  @Override
  protected List<Runner> getChildren() {
    return children;
  }



  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface WithIdeaInstance {
  }

  /**
   * Preload all modules from {user.dir}, do not use!
   */
  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface PreloadAllModules {
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface WithMake {
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface WithoutWatching {
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface SuiteClassSymbols {
    String[] value();
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface WithSorting {
  }
}
