package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import jetbrains.mps.tool.environment.ProjectStrategyBase;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.Project;
import java.util.List;
import jetbrains.mps.library.ModulesMiner;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.io.File;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;

/**
 * todo: merge with "modules collected from dir", or specify here paths to msd/mpl files
 */
public class FromModulesListProjectStrategy extends ProjectStrategyBase {
  private static final String MODULES_PATHS_PROPERTY = "mps.test.modules";
  private final String myModulesPath;

  public FromModulesListProjectStrategy(@Nullable String modulesPath) {
    myModulesPath = modulesPath;
  }

  public FromModulesListProjectStrategy() {
    this(System.getProperty(MODULES_PATHS_PROPERTY));
  }

  @NotNull
  @Override
  public Project construct(@NotNull Project emptyProject) {
    List<ModulesMiner.ModuleHandle> handles = ListSequence.fromList(new ArrayList<ModulesMiner.ModuleHandle>());
    final String[] modules = myModulesPath.split(File.pathSeparator);
    for (String modulePath : modules) {
      IFile fileByPath = FileSystem.getInstance().getFileByPath(modulePath);
      ListSequence.fromList(handles).addSequence(ListSequence.fromList(ModulesMiner.getInstance().collectModules(fileByPath, false)));
    }
    return loadProjectFromModuleHandles(emptyProject, handles);
  }

  @Override
  public boolean isApplicable() {
    return myModulesPath != null;
  }
}
