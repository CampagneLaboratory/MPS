package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runners.Suite;
import org.junit.runners.model.RunnerBuilder;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;

/**
 * Suite class must be with public static Class[] factory(Class testClass) method annotated by @Factory
 */
public class DynamicSuite extends Suite {
  public DynamicSuite(Class<?> testClass, RunnerBuilder builder) throws Throwable {
    super(builder, testClass, getSuiteClasses(testClass));
  }



  private static Class<?>[] getSuiteClasses(Class<?> testClass) throws Throwable {
    Class<?> curClass = testClass;
    while (curClass != null) {
      for (Method method : curClass.getMethods()) {
        if (method.getAnnotation(DynamicSuite.Factory.class) != null) {
          int modifiers = method.getModifiers();
          if (Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers)) {
            try {
              return (Class<?>[]) method.invoke(null, testClass);
            } catch (InvocationTargetException e) {
              // re-throw exceptions from reflective call 
              throw e.getTargetException();
            }
          }
        }
      }
      curClass = curClass.getSuperclass();
    }
    throw new Exception("No public static factory method in class or ots superclasses: " + testClass.getName());
  }



  @Retention(RetentionPolicy.RUNTIME)
  @Target(ElementType.METHOD)
public static   @interface Factory {
}
}
