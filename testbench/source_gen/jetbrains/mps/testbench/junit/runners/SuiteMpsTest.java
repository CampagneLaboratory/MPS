package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runners.ParentRunner;
import org.junit.runner.Runner;
import java.util.List;
import jetbrains.mps.tool.environment.Environment;
import org.junit.runners.model.RunnerBuilder;
import org.junit.runners.model.InitializationError;
import java.util.ArrayList;
import org.junit.runner.notification.RunNotifier;
import jetbrains.mps.testbench.junit.WatchingRunNotifier;
import jetbrains.mps.testbench.PerformanceMessenger;
import org.junit.runner.Description;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;

public class SuiteMpsTest extends ParentRunner<Runner> {
  private List<Runner> children;
  private final boolean withWatching;
  private final Environment createdEnv;


  public SuiteMpsTest(Class<?> klass, RunnerBuilder builder) throws Throwable {
    super(klass);

    createdEnv = MpsTestsSupport.initEnv(klass.getAnnotation(SuiteMpsTest.WithIdeaInstance.class) != null);

    if (klass.getAnnotation(SuiteMpsTest.PreloadAllModules.class) != null) {
      MpsTestsSupport.loadAllModulesIntoRepository();
    }

    children = builder.runners(klass, SuiteMpsTest.getAnnotatedClasses(klass));
    if (klass.getAnnotation(SuiteMpsTest.WithMake.class) != null) {
      children = MakeRunner.withMakeRunner(getTestClass(), children);
    }

    withWatching = klass.getAnnotation(SuiteMpsTest.WithoutWatching.class) == null;
  }



  private static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError {
    SuiteMpsTest.SuiteClassSymbols annotation = klass.getAnnotation(SuiteMpsTest.SuiteClassSymbols.class);
    if (annotation == null) {
      throw new InitializationError(String.format("class '%s' must have a SuiteClassSymbols annotation", klass.getName()));
    }
    List<Class<?>> foundClasses = new ArrayList<Class<?>>();
    List<String> notfoundClasses = new ArrayList<String>();
    for (String sym : annotation.value()) {
      try {
        foundClasses.add(Class.forName(sym));
      } catch (ClassNotFoundException e) {
        notfoundClasses.add(sym);
      }
    }
    if (!(notfoundClasses.isEmpty())) {
      throw new InitializationError("Not found classes: " + notfoundClasses);
    }
    return foundClasses.toArray(new Class<?>[foundClasses.size()]);
  }

  @Override
  protected void runChild(Runner runner, RunNotifier notifier) {
    if (withWatching) {
      WatchingRunNotifier runNotifier = new WatchingRunNotifier(notifier);
      try {
        runner.run(runNotifier);
      } finally {
        PerformanceMessenger.getInstance().generateReport();
        runNotifier.dispose();
      }
    } else {
      runner.run(notifier);
    }

    if (runner == children.get(children.size() - 1) && createdEnv != null) {
      createdEnv.disposeEnvironment();
    }
  }

  protected Description describeChild(Runner child) {
    return child.getDescription();
  }

  @Override
  protected List<Runner> getChildren() {
    return children;
  }



  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface WithIdeaInstance {
  }

  /**
   * Preload all modules from {user.dir}, do not use!
   */
  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface PreloadAllModules {
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface WithMake {
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface WithoutWatching {
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  public @interface SuiteClassSymbols {
    String[] value();
  }
}
