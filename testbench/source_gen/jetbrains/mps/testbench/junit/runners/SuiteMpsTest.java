package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runners.model.RunnerBuilder;
import org.junit.runners.model.InitializationError;
import java.util.List;
import org.junit.runner.Runner;
import java.util.ArrayList;

public class SuiteMpsTest extends MpsTest {
  public SuiteMpsTest(Class<?> klass, RunnerBuilder builder) throws InitializationError {
    super(klass, builder);
  }



  protected List<Runner> createChildRunners(Class<?> klass, RunnerBuilder builder) throws InitializationError {
    return builder.runners(klass, SuiteMpsTest.getAnnotatedClasses(klass));
  }

  private static Class<?>[] getAnnotatedClasses(Class<?> klass) throws InitializationError {
    MpsTest.SuiteClassSymbols annotation = klass.getAnnotation(MpsTest.SuiteClassSymbols.class);
    if (annotation == null) {
      throw new InitializationError(String.format("class '%s' must have a SuiteClassSymbols annotation", klass.getName()));
    }
    List<Class<?>> foundClasses = new ArrayList<Class<?>>();
    List<String> notfoundClasses = new ArrayList<String>();
    for (String sym : annotation.value()) {
      try {
        foundClasses.add(Class.forName(sym));
      } catch (ClassNotFoundException e) {
        notfoundClasses.add(sym);
      }
    }
    if (!(notfoundClasses.isEmpty())) {
      throw new InitializationError("Not found classes: " + notfoundClasses);
    }
    return foundClasses.toArray(new Class<?>[foundClasses.size()]);
  }
}
