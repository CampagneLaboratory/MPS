package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import java.util.Set;
import jetbrains.mps.vfs.IFile;
import java.util.HashSet;
import jetbrains.mps.vfs.FileSystem;
import java.io.File;
import jetbrains.mps.tool.environment.EnvironmentBuilder;
import jetbrains.mps.tool.environment.ActiveEnvironment;
import jetbrains.mps.library.ModulesMiner;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.Collection;
import javax.swing.SwingUtilities;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.MPSModuleOwner;
import jetbrains.mps.smodel.BaseMPSModuleOwner;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.progress.EmptyProgressMonitor;

public class MpsTestsSupport {
  public static Project CURRENT_PROJECT = null;

  private static final String[] EXCLUDES = new String[]{"IdeaPlugin"};
  private static final Set<IFile> EXCLUDE_SET = new HashSet<IFile>();
  static {
    String mpsDir = System.getProperty("user.dir");
    for (String e : EXCLUDES) {
      EXCLUDE_SET.add(FileSystem.getInstance().getFileByPath(mpsDir + File.separator + e));
    }
  }


  public static void initEnv(boolean withIdea) {
    EnvironmentBuilder.defaultEnvironment().build(withIdea);
  }

  public static void loadDummyProject() {
    CURRENT_PROJECT = ActiveEnvironment.get().createDummyProject();
  }

  public static void disposeEnv() {
    ActiveEnvironment.get().disposeEnvironment();
  }



  public static void loadAllModulesIntoRepository() {
    loadModules(ModulesMiner.getInstance().collectModules(FileSystem.getInstance().getFileByPath(System.getProperty("user.dir")), SetSequence.fromSetWithValues(new HashSet<IFile>(), EXCLUDE_SET), false));
  }



  private static void loadModules(final Collection<ModulesMiner.ModuleHandle> handles) {
    try {
      SwingUtilities.invokeAndWait(new Runnable() {
        @Override
        public void run() {
          ModelAccess.instance().runWriteAction(new Runnable() {
            public void run() {
              MPSModuleOwner mpsModuleOwner = new BaseMPSModuleOwner() {};
              for (ModulesMiner.ModuleHandle handle : handles) {
                if (handle.getFile().getName().endsWith(".iml")) {
                  // temporary ignore .iml files 
                  continue;
                }
                ModuleRepositoryFacade.createModule(handle, mpsModuleOwner);
              }
              ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
            }
          });
        }
      });
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}
