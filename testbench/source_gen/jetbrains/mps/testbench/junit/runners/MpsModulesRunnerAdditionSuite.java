package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runners.Suite;
import org.junit.runners.model.RunnerBuilder;
import org.junit.runners.model.InitializationError;
import org.junit.runners.model.Statement;
import java.util.List;
import java.util.ArrayList;
import org.junit.runners.model.MultipleFailureException;

public class MpsModulesRunnerAdditionSuite extends Suite {
  private final MpsModulesRunner myRunner;

  public MpsModulesRunnerAdditionSuite(Class<?> klass, RunnerBuilder builder) throws InitializationError {
    this(klass, builder, new MpsModulesRunner(klass));
  }

  private MpsModulesRunnerAdditionSuite(Class<?> klass, RunnerBuilder builder, MpsModulesRunner runner) throws InitializationError {
    super(klass, builder);
    myRunner = runner;
    getChildren().add(0, runner);
  }

  @Override
  protected Statement withAfterClasses(Statement statement) {
    return new MpsModulesRunnerAdditionSuite.DisposeEnvironmentStatement(super.withAfterClasses(statement));
  }

  private class DisposeEnvironmentStatement extends Statement {
    private final Statement myPrev;

    public DisposeEnvironmentStatement(Statement prev) {
      myPrev = prev;
    }

    @Override
    public void evaluate() throws Throwable {
      List<Throwable> errors = new ArrayList<Throwable>();
      try {
        if (myPrev != null) {
          myPrev.evaluate();
        }
      } catch (Throwable th) {
        errors.add(th);
      } finally {
        try {
          myRunner.getEnvironment().disposeEnvironment();
        } catch (Throwable th) {
          errors.add(th);
        }
      }
      MultipleFailureException.assertEmpty(errors);
    }
  }
}
