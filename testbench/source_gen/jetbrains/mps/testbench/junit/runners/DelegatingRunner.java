package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runner.Runner;
import org.junit.runners.model.RunnerBuilder;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.junit.runner.notification.RunNotifier;
import org.junit.runner.Description;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.classloading.ClassLoaderManager;

public class DelegatingRunner extends Runner {
  private RunnerBuilder myBuilder;
  private String myClassName;
  private SModuleReference myModuleReference;

  public DelegatingRunner(RunnerBuilder builder, SModuleReference moduleRef, String className) {
    myBuilder = builder;
    myModuleReference = moduleRef;
    myClassName = className;
  }

  @Override
  public void run(RunNotifier notifier) {
    // todo: runner should be created only twice: in #run and #getDescription 
    myBuilder.safeRunnerForClass(getTestClass()).run(notifier);
  }

  @Override
  public Description getDescription() {
    return myBuilder.safeRunnerForClass(getTestClass()).getDescription();
  }

  private Class getTestClass() {
    return ModelAccess.instance().runReadAction(new Computable<Class>() {
      public Class compute() {
        return getTestClass(myModuleReference.resolve(MPSModuleRepository.getInstance()), myClassName);
      }
    });
  }

  private static Class getTestClass(SModule module, String className) {
    // todo: warning on null class loader and ClassNotFoundException? 
    // todo: execute only MPS tests here. move all unit tests to ant task 
    try {
      ClassLoader classLoader = ClassLoaderManager.getInstance().getClassLoader(module);
      if (classLoader == null) {
        return null;
      }
      return classLoader.loadClass(className);
    } catch (ClassNotFoundException e) {
      return null;
    }
  }
}
