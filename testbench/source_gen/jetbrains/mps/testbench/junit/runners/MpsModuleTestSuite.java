package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runners.model.RunnerBuilder;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.module.SModule;
import org.junit.runners.model.TestClass;
import org.junit.runners.model.InitializationError;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.ArrayList;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.library.ModulesMiner;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.BaseMPSModuleOwner;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.cleanup.CleanupManager;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.progress.EmptyProgressMonitor;

public class MpsModuleTestSuite extends MPSProjectITestsSuite {
  private static final String PROPERTY_TEST_MODULE = "mps.test.modules";

  public MpsModuleTestSuite(Class<?> klass, RunnerBuilder builder) throws Throwable {
    super(klass, builder);
  }

  protected List<Tuples._2<String, SModule>> getTestClassDescriptors(TestClass klass) throws InitializationError {
    return getTestClassDescriptorsFromModels(ListSequence.fromList(getTestModules()).translate(new ITranslator2<SModule, SModel>() {
      public Iterable<SModel> translate(SModule it) {
        return it.getModels();
      }
    }));
  }

  private List<SModule> getTestModules() {
    List<SModule> result = ListSequence.fromList(new ArrayList<SModule>());
    String modulesString = System.getProperty(PROPERTY_TEST_MODULE);
    if ((modulesString == null || modulesString.length() == 0)) {
      return result;
    }
    String[] modules = modulesString.split(File.pathSeparator);
    for (String modulePath : modules) {
      ListSequence.fromList(result).addSequence(Sequence.fromIterable(loadModule(modulePath)));
    }
    return result;
  }

  private Iterable<SModule> loadModule(String modulePath) {
    final List<ModulesMiner.ModuleHandle> collectModules = ModulesMiner.getInstance().collectModules(FileSystem.getInstance().getFileByPath(modulePath), false);

    if (collectModules.isEmpty()) {
      return ListSequence.fromList(new ArrayList<SModule>());
    }

    return ModelAccess.instance().runWriteAction(new Computable<List<SModule>>() {
      public List<SModule> compute() {
        List<SModule> modules = new ArrayList<SModule>();
        BaseMPSModuleOwner owner = new BaseMPSModuleOwner() {};
        for (ModulesMiner.ModuleHandle moduleHandle : collectModules) {
          IModule module = ModuleRepositoryFacade.createModule(moduleHandle, owner);
          if (module != null) {
            modules.add(module);
          }
        }
        CleanupManager.getInstance().cleanup();
        ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
        return modules;
      }
    });
  }
}
