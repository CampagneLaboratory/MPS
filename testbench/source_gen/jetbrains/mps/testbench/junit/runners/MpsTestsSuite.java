package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runners.Suite;
import jetbrains.mps.project.Project;
import java.util.List;
import org.junit.runner.Runner;
import org.junit.runners.model.RunnerBuilder;
import org.junit.runners.model.InitializationError;
import java.util.Collections;
import jetbrains.mps.tool.environment.EnvironmentConfig;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.io.File;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

/**
 * Currently used for ant tests
 * todo: WatchingSuite?
 */
public class MpsTestsSuite extends Suite {
  private static final String PROPERTY_LIBRARY = "mps.libraries";
  private static final String MPS_MACRO_PREFIX = "mps.macro.";
  private final Project contextProject;

  private final List<Runner> children;

  public MpsTestsSuite(Class<?> klass, RunnerBuilder builder) throws InitializationError {
    super(klass, Collections.<Runner>emptyList());
    // todo: read config from annotations before start (project / ?) 
    // todo: dispose env at the end 
    initIdeaEnvironment();
    contextProject = ContextProjectSupport.loadContextProject();
    // <node> 
    children = createChildRunners(builder);
  }

  private static void initIdeaEnvironment() {
    // FIXME: plugins are already loaded into plugin.path property used by idea plugin manager 
    EnvironmentConfig config = EnvironmentConfig.emptyEnvironment();
    for (IMapping<String, String> lib : MapSequence.fromMap(loadLibraries())) {
      config = config.addLib(lib.value());
    }
    for (IMapping<String, File> macro : MapSequence.fromMap(loadMacros())) {
      config = config.addMacro(macro.key(), macro.value());
    }
    MpsTestsSupport.initEnv(true, config);
  }

  private static Map<String, String> loadLibraries() {
    Map<String, String> result = MapSequence.fromMap(new LinkedHashMap<String, String>(16, (float) 0.75, false));
    String librariesString = System.getProperty(PROPERTY_LIBRARY);
    if ((librariesString == null || librariesString.length() == 0)) {
      return result;
    }
    String[] libraries = librariesString.split(File.pathSeparator);
    for (String lib : libraries) {
      File libFile = new File(lib);
      if (libFile.exists()) {
        MapSequence.fromMap(result).put(libFile.getName(), lib);
      }
    }
    return result;
  }

  private static Map<String, File> loadMacros() {
    Map<String, File> result = MapSequence.fromMap(new HashMap<String, File>());
    for (Map.Entry<Object, Object> property : SetSequence.fromSet(System.getProperties().entrySet())) {
      if (property.getKey() instanceof String && property.getValue() instanceof String) {
        String key = (String) property.getKey();
        String value = (String) property.getValue();

        if (key.startsWith(MPS_MACRO_PREFIX) && key.length() > MPS_MACRO_PREFIX.length()) {
          String macroSuffix = key.substring(MPS_MACRO_PREFIX.length());
          MapSequence.fromMap(result).put(macroSuffix, new File(value));
        }
      }
    }
    return result;
  }

  @Override
  protected List<Runner> getChildren() {
    return children;
  }

  private List<Runner> createChildRunners(final RunnerBuilder builder) {
    final List<Runner> result = new ArrayList<Runner>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (SModule module : Sequence.fromIterable(contextProject.getModules())) {
          for (SModel model : Sequence.fromIterable(module.getModels())) {
            for (SNode testCase : ListSequence.fromList(SModelOperations.roots(((SModel) model), MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase")))) {
              result.add(new DelegatingRunner(builder, module.getModuleReference(), BehaviorReflection.invokeVirtual(String.class, testCase, "virtual_getClassName_1216136193905", new Object[]{})));
            }
          }
        }
      }
    });
    return result;
  }


}
