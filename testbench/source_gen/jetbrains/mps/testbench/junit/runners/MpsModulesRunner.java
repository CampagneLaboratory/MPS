package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import jetbrains.mps.tool.environment.Environment;
import org.junit.runners.model.InitializationError;
import java.util.Map;
import java.io.File;
import jetbrains.mps.tool.environment.EnvironmentConfig;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.testbench.IdeaEnvironment;
import jetbrains.mps.TestMain;
import java.util.LinkedHashMap;
import jetbrains.mps.project.Project;
import javax.swing.SwingUtilities;
import jetbrains.mps.util.FileUtil;
import java.io.InputStream;
import java.io.FileOutputStream;
import jetbrains.mps.util.ReadUtil;
import java.io.IOException;

public class MpsModulesRunner extends MPSOpenProjectRunner {
  private static final String PROPERTY_LIBRARY = "mps.libraries";
  private static final String MISC_XML = "misc.xml";
  private Environment myEnvironment;

  private static boolean cachesInvalidated = false;


  public MpsModulesRunner(Class<?> testClass) throws InitializationError {
    super(testClass);
  }



  private static Environment createTestEnvironment(Map<String, File> libs) {
    EnvironmentConfig config = EnvironmentConfig.defaultEnvironment();
    for (IMapping<String, File> lib : MapSequence.fromMap(libs)) {
      config = config.addLib(lib.key(), lib.value());
    }
    return new IdeaEnvironment(config);
  }



  @Override
  protected void init(Class<?> testClass) throws InitializationError {
    myEnvironment = createTestEnvironment(loadLibraries());

    if (ourMPSProject != null) {
      throw new InitializationError("One MPS project was already openned in this java process: " + ourMPSProject.getName());
    }

    MpsModulesRunner.DummyProjectContainer container = new MpsModulesRunner.DummyProjectContainer();
    TestMain.PROJECT_CONTAINER = container;
    ourMPSProject = container.getDummyProject();
  }



  private Map<String, File> loadLibraries() {
    Map<String, File> result = MapSequence.fromMap(new LinkedHashMap<String, File>(16, (float) 0.75, false));
    String librariesString = System.getProperty(PROPERTY_LIBRARY);
    if ((librariesString == null || librariesString.length() == 0)) {
      return result;
    }
    String[] libraries = librariesString.split(File.pathSeparator);
    for (String lib : libraries) {
      File libFile = new File(lib);
      if (libFile.exists()) {
        MapSequence.fromMap(result).put(libFile.getName(), libFile);
      }
    }
    return result;
  }



  public Environment getEnvironment() {
    return myEnvironment;
  }

  private class DummyProjectContainer extends TestMain.ProjectContainer {
    public DummyProjectContainer() {
    }

    @Override
    public Project getProject(String string) {
      if (this.lastProject == null) {
        return getDummyProject();
      }
      return this.lastProject;
    }

    private Project getDummyProject() {
      File dummy = createDummyProjectFile();
      Project p = TestMain.loadProject(dummy);
      if (this.lastProject != null) {
        try {
          SwingUtilities.invokeAndWait(new Runnable() {
            public void run() {
              Project lastProject = DummyProjectContainer.this.lastProject;
              File projectFile = lastProject.getProjectFile();
              lastProject.dispose();
              if (projectFile != null) {
                FileUtil.delete(projectFile);
              }
            }
          });
        } catch (Exception e) {
          e.printStackTrace();
        }
      }
      this.lastProject = p;
      this.projectName = dummy.getName();
      return p;
    }

    private File createDummyProjectFile() {
      File projectDir = FileUtil.createTmpDir();
      File dotMps = new File(projectDir, ".mps");
      dotMps.mkdir();
      File projectFile = new File(dotMps, MISC_XML);
      try {
        projectFile.createNewFile();
        InputStream input = MpsModulesRunner.this.getClass().getResourceAsStream(MISC_XML);
        FileOutputStream stream = new FileOutputStream(projectFile);
        stream.write(ReadUtil.read(input));
        stream.close();
        input.close();
      } catch (IOException e) {
        e.printStackTrace();
        return null;
      }
      return projectDir;
    }
  }
}
