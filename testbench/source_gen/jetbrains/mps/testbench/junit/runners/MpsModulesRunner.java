package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import jetbrains.mps.testbench.GeneratedTestEnvironment;
import org.junit.runners.model.InitializationError;
import jetbrains.mps.TestMain;
import jetbrains.mps.project.Project;
import java.util.Map;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;

public class MpsModulesRunner extends MPSOpenProjectRunner {
  private static final String PROPERTY_LIBRARY = "mps.libraries";
  private GeneratedTestEnvironment myEnvironment;


  public MpsModulesRunner(Class<?> testClass) throws InitializationError {
    super(testClass);
  }



  @Override
  protected void init(Class<?> testClass) throws InitializationError {
    myEnvironment = new GeneratedTestEnvironment();
    myEnvironment.init(loadLibraries());
    myEnvironment.setup();

    if (ourMPSProject != null) {
      throw new InitializationError("One MPS project was already openned in this java process: " + ourMPSProject.getName());
    }

    TestMain.PROJECT_CONTAINER = new TestMain.ProjectContainer() {
      @Override
      public Project getProject(String string) {
        if (this.lastProject == null) {
          return getDummyProject();
        }
        return this.lastProject;
      }
    };
    ourMPSProject = TestMain.PROJECT_CONTAINER.getDummyProject();
  }



  private Map<String, File> loadLibraries() {
    Map<String, File> result = MapSequence.fromMap(new LinkedHashMap<String, File>(16, (float) 0.75, false));
    String librariesString = System.getProperty(PROPERTY_LIBRARY);
    if ((librariesString == null || librariesString.length() == 0)) {
      return result;
    }
    String[] libraries = librariesString.split(File.pathSeparator);
    for (String lib : libraries) {
      File libFile = new File(lib);
      if (libFile.exists()) {
        MapSequence.fromMap(result).put(libFile.getName(), libFile);
      }
    }
    return result;
  }



  public GeneratedTestEnvironment getEnvironment() {
    return myEnvironment;
  }
}
