package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import java.io.File;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.project.Solution;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.Generator;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.util.UnzipUtil;
import java.io.IOException;
import jetbrains.mps.tool.environment.ActiveEnvironment;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import jetbrains.mps.smodel.ModelAccess;

public class ProjectTestsSupport {

  /**
   * Note:
   * @param projectName -- can be null or empty in the case of new format (no .mpr file)
   */
  public static boolean testOnProjectCopy(File source, File destinationDir, String projectName, ProjectTestsSupport.ProjectRunnable runnable) {
    final Project project = startTestOnProjectCopy(source, destinationDir, projectName);
    if (project == null) {
      return false;
    }
    try {
      return runnable.execute(project);
    } catch (Throwable t) {
      t.printStackTrace();
      return false;
    } finally {
      finishTestOnProjectCopy(project, destinationDir);
    }
  }

  private static <T extends SModule> T getModule(String moduleFqName, Class<T> cls) {
    return ModuleRepositoryFacade.getInstance().getModule(moduleFqName, cls);
  }

  public static Solution getSolution(String moduleFqName) {
    return getModule(moduleFqName, Solution.class);
  }

  public static Language getLanguage(String moduleFqName) {
    return getModule(moduleFqName, Language.class);
  }

  public static Generator getGenerator(String moduleFqName) {
    return getModule(moduleFqName, Generator.class);
  }

  public static SModel getModel(Project project, String modelName) {
    return project.getScope().resolve(PersistenceFacade.getInstance().createModelReference(modelName));
  }

  /**
   * todo: make this method private
   */
  public static Project startTestOnProjectCopy(File source, final File destinationDir, final String projectName) {
    if (destinationDir.exists()) {
      FileUtil.delete(destinationDir);
    }
    if (source.isDirectory()) {
      FileUtil.copyDir(source, destinationDir);
    } else {
      // it is allowed to have zipped directory here 
      try {
        destinationDir.mkdir();
        UnzipUtil.unzip(source, destinationDir);
      } catch (IOException e) {
        e.printStackTrace();
        return null;
      }
    }
    File projectFile = ((projectName != null && projectName.length() > 0) ? new File(destinationDir, projectName) : destinationDir);
    return ActiveEnvironment.getInstance().openProject(projectFile);
  }
  /**
   * todo: make this method private
   */
  public static void finishTestOnProjectCopy(final Project project, final File destinationDir) {
    waitUntilAllEventsFlushed();
    ActiveEnvironment.getInstance().disposeProject(project.getProjectFile());
    FileUtil.delete(destinationDir);
  }
  private static void waitUntilAllEventsFlushed() {
    // todo 
    if (ActiveEnvironment.getInstance().hasIdeaInstance()) {
      // Wait until last invokeLater() is executed 
      ApplicationManager.getApplication().invokeAndWait(new Runnable() {
        public void run() {
        }
      }, ModalityState.NON_MODAL);
      ModelAccess.instance().flushEventQueue();
    }
  }

  public static interface ProjectRunnable {
    public boolean execute(Project project);
  }
}
