package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import java.io.File;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.util.UnzipUtil;
import java.io.IOException;
import jetbrains.mps.tool.environment.ActiveEnvironment;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import jetbrains.mps.smodel.ModelAccess;

public class ProjectTestsSupport {
  public static boolean testOnProjectCopy(File source, File destinationDir, String projectName, ProjectTestsSupport.ProjectRunnable runnable) {
    final Project project = startTestOnProjectCopy(source, destinationDir, projectName);
    if (project == null) {
      return false;
    }
    try {
      return runnable.execute(project);
    } catch (Throwable t) {
      t.printStackTrace();
      return false;
    } finally {
      finishTestOnProjectCopy(project, destinationDir);
    }
  }

  public static SModel getModel(Project project, String modelName) {
    return project.getScope().resolve(PersistenceFacade.getInstance().createModelReference(modelName));
  }

  /**
   * todo: make this method private
   */
  public static Project startTestOnProjectCopy(File source, final File destinationDir, final String projectName) {
    if (destinationDir.exists()) {
      FileUtil.delete(destinationDir);
    }
    if (source.isDirectory()) {
      FileUtil.copyDir(source, destinationDir);
    } else {
      // it is allowed to have zipped directory here 
      try {
        destinationDir.mkdir();
        UnzipUtil.unzip(source, destinationDir);
      } catch (IOException e) {
        e.printStackTrace();
        return null;
      }
    }
    return ActiveEnvironment.get().openProject(((projectName != null && projectName.length() > 0) ?
      new File(destinationDir, projectName) :
      destinationDir
    ));
  }

  /**
   * todo: make this method private
   */
  public static void finishTestOnProjectCopy(final Project project, final File destinationDir) {
    waitUntilAllEventsFlushed();
    ActiveEnvironment.get().disposeProject(project);
    FileUtil.delete(destinationDir);
  }

  private static void waitUntilAllEventsFlushed() {
    // todo 
    if (ActiveEnvironment.get().hasIdeaInstance()) {
      // Wait until last invokeLater() is executed 
      ApplicationManager.getApplication().invokeAndWait(new Runnable() {
        public void run() {
        }
      }, ModalityState.NON_MODAL);
      ModelAccess.instance().flushEventQueue();
    }
  }



  public static interface ProjectRunnable {
    public boolean execute(Project project);
  }
}
