package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runners.Suite;
import java.util.List;
import org.junit.runner.Runner;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.junit.runners.model.RunnerBuilder;
import java.util.Collections;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.module.SModule;
import org.junit.runners.model.TestClass;
import org.junit.runners.model.InitializationError;
import jetbrains.mps.classloading.ClassLoaderManager;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public abstract class MPSProjectITestsSuite extends Suite {
  protected List<Runner> myRunners = ListSequence.fromList(new ArrayList<Runner>());

  public MPSProjectITestsSuite(Class<?> klass, RunnerBuilder builder) throws Throwable {
    super(klass, Collections.<Runner>emptyList());
    for (Class<?> parameter : ListSequence.fromList(getUnitTestClasses(getTestClass()))) {
      ListSequence.fromList(myRunners).addElement(builder.runnerForClass(parameter));
    }
  }



  protected abstract List<Tuples._2<String, SModule>> getTestClassDescriptors(TestClass klass) throws InitializationError;



  protected List<Class<?>> getUnitTestClasses(TestClass klass) throws InitializationError {
    List<Class<?>> result = ListSequence.fromList(new ArrayList<Class<?>>());
    for (Tuples._2<String, SModule> testClassDescriptor : ListSequence.fromList(getTestClassDescriptors(klass))) {
      Class testClass = ClassLoaderManager.getInstance().getClass(testClassDescriptor._1(), testClassDescriptor._0());
      if (testClass != null) {
        ListSequence.fromList(result).addElement(testClass);
      } else {
        throw new InitializationError("Unable to load class for ITestCase by fq name: " + testClassDescriptor._0() + " from module: " + testClassDescriptor._1().getModuleName());
      }
    }
    return result;
  }

  protected List<Tuples._2<String, SModule>> getTestClassDescriptorsFromModels(final Iterable<SModel> modelDescriptors) {
    final List<Tuples._2<String, SModule>> testClassDescriptors = ListSequence.fromList(new ArrayList<Tuples._2<String, SModule>>());
    ModelAccess.instance().runReadAction(new Runnable() {
      @Override
      public void run() {
        for (SModel model : Sequence.fromIterable(modelDescriptors)) {
          for (SNode testCase : ListSequence.fromList(SModelOperations.getRoots(((SModel) ((SModelInternal) model)), "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))) {
            ListSequence.fromList(testClassDescriptors).addElement(MultiTuple.<String,SModule>from(BehaviorReflection.invokeVirtual(String.class, testCase, "virtual_getClassName_1216136193905", new Object[]{}), ((SModule) model.getModule())));
          }
        }
      }
    });
    return testClassDescriptors;
  }



  @Override
  protected List<Runner> getChildren() {
    return myRunners;
  }
}
