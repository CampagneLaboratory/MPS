package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runner.Runner;
import org.junit.runner.Description;
import java.util.List;
import org.junit.runners.model.TestClass;
import java.util.ArrayList;
import org.junit.runner.notification.RunNotifier;
import jetbrains.mps.make.MPSCompilationResult;
import org.junit.runner.notification.Failure;
import java.lang.reflect.InvocationTargetException;

public class MakeRunner extends Runner {
  private Description myDescription;

  public static List<Runner> withMakeRunner(TestClass testClass, List<Runner> original) {
    List<Runner> runners = new ArrayList<Runner>();
    runners.add(new MakeRunner(testClass.getJavaClass()));
    runners.addAll(original);
    return runners;
  }

  public MakeRunner(Class<?> class_) {
    myDescription = Description.createTestDescription(class_, "Making");
  }

  @Override
  public void run(final RunNotifier notifier) {
    notifier.fireTestStarted(myDescription);

    MPSCompilationResult compilationResult = MpsTestsSupport.makeAllInCreatedEnvironment();
    if (compilationResult != null && compilationResult.getErrors() > 0) {
      notifier.fireTestFailure(new Failure(myDescription, new Exception("Compilation errors: " + compilationResult)));
    }

    try {
      MpsTestsSupport.reloadAllAfterMake();
    } catch (InterruptedException e) {
      notifier.fireTestFailure(new Failure(myDescription, e));
    } catch (InvocationTargetException e) {
      notifier.fireTestFailure(new Failure(myDescription, e));
    }

    notifier.fireTestFinished(myDescription);
  }

  @Override
  public Description getDescription() {
    return myDescription;
  }
}
