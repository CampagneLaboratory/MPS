package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.Project;
import org.jetbrains.annotations.Nullable;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.tool.environment.ActiveEnvironment;
import java.io.IOException;
import java.util.List;
import jetbrains.mps.library.ModulesMiner;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.vfs.FileSystem;
import java.util.Set;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.ModuleRepositoryFacade;

public class ContextProjextSupport {
  public static final String PROJECT_PATH_PROPERTY = "mps.junit.project";
  public static final String MODULES_PATHS_PROPERTY = "mps.test.modules";
  public static final String MODULES_ROOT_PROPERTY = "mps.junit.modules.root";


  /**
   * 
   * 
   * @return compiled and reloaded context mps project
   */
  @NotNull
  public static Project getContextProject() {
    Project project = getProjectFromProjectPath();
    if (project != null) {
      return project;
    }

    project = getProjectFromModulesList();
    if (project != null) {
      return project;
    }

    project = getProjectFromDirectoryWithModules();
    if (project != null) {
      return project;
    }

    throw new IllegalStateException("can't load context project");
  }



  /**
   * Do not forget set previous context project path after your test!
   * 
   * @return previous context project path
   */
  @Nullable
  public static File setContextProjectPath(@Nullable File projectPath) {
    // todo: create methods like this for modules.root 
    String previous = System.getProperty(PROJECT_PATH_PROPERTY);
    if (projectPath != null) {
      System.setProperty(PROJECT_PATH_PROPERTY, projectPath.getAbsolutePath());
    } else {
      System.clearProperty(PROJECT_PATH_PROPERTY);
    }
    return (previous != null ?
      new File(previous) :
      null
    );
  }

  @Nullable
  private static Project getProjectFromProjectPath() {
    if (System.getProperty(PROJECT_PATH_PROPERTY) == null) {
      return null;
    }

    File projectToOpen = new File(System.getProperty(PROJECT_PATH_PROPERTY));
    try {
      for (Project project : Sequence.fromIterable(ActiveEnvironment.get().openedProjects())) {
        if (project.getProjectFile() != null && project.getProjectFile().getCanonicalPath().equals(projectToOpen.getCanonicalPath())) {
          return project;
        }
      }
    } catch (IOException e) {
      throw new RuntimeException(e);
    }

    return firstTimeOpened(ActiveEnvironment.get().openProject(projectToOpen));
  }



  @Nullable
  private static Project getProjectFromDirectoryWithModules() {
    if (System.getProperty(MODULES_ROOT_PROPERTY) == null) {
      return null;
    }

    List<ModulesMiner.ModuleHandle> modules = collectHandles(new File(System.getProperty(MODULES_ROOT_PROPERTY)));
    return getProjectFromModuleHandles(modules);
  }



  @Nullable
  private static Project getProjectFromModulesList() {
    // todo: merge with "modules collected from dir", or specify here paths to msd/mpl files 
    if (System.getProperty(MODULES_PATHS_PROPERTY) == null) {
      return null;
    }

    List<ModulesMiner.ModuleHandle> handles = ListSequence.fromList(new ArrayList<ModulesMiner.ModuleHandle>());
    String modulesString = System.getProperty(MODULES_PATHS_PROPERTY);
    if ((modulesString == null || modulesString.length() == 0)) {
      return getProjectFromModuleHandles(handles);
    }
    String[] modules = modulesString.split(File.pathSeparator);
    for (String modulePath : modules) {
      ListSequence.fromList(handles).addSequence(ListSequence.fromList(ModulesMiner.getInstance().collectModules(FileSystem.getInstance().getFileByPath(modulePath), false)));
    }
    return getProjectFromModuleHandles(handles);
  }



  private static List<ModulesMiner.ModuleHandle> collectHandles(File rootFolder) {
    // todo: remove 
    Set<IFile> excludes = SetSequence.fromSet(new HashSet<IFile>());
    String mpsDir = System.getProperty("user.dir");
    SetSequence.fromSet(excludes).addElement(FileSystem.getInstance().getFileByPath(mpsDir + File.separator + "IdeaPlugin"));
    // todo: end remove 

    List<ModulesMiner.ModuleHandle> minedHandles = ModulesMiner.getInstance().collectModules(FileSystem.getInstance().getFileByPath(rootFolder.getAbsolutePath()), excludes, false);
    return ListSequence.fromList(minedHandles).where(new IWhereFilter<ModulesMiner.ModuleHandle>() {
      public boolean accept(ModulesMiner.ModuleHandle it) {
        // temporary ignore .iml files 
        return !(it.getFile().getName().endsWith(".iml"));
      }
    }).toListSequence();
  }



  @Nullable
  private static Project getProjectFromModuleHandles(final Iterable<ModulesMiner.ModuleHandle> handles) {
    // todo: check currently opened projects 
    final Project project = ActiveEnvironment.get().createDummyProject();
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        for (ModulesMiner.ModuleHandle moduleHandle : Sequence.fromIterable(handles)) {
          SModule module = ModuleRepositoryFacade.createModule(moduleHandle, project);
          project.addModule(module.getModuleReference());
        }
      }
    });

    return firstTimeOpened(project);
  }



  private static Project firstTimeOpened(Project project) {
    // todo: check result of making, throw checked MakeException 
    MpsTestsSupport.makeAllInCreatedEnvironment();
    try {
      MpsTestsSupport.reloadAllAfterMake();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    return project;
  }
}
