package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import java.util.ArrayList;
import org.junit.runner.Runner;
import java.util.List;
import org.junit.runner.Description;
import org.junit.runner.notification.RunNotifier;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.make.ModuleMaker;
import jetbrains.mps.make.MPSCompilationResult;
import java.util.LinkedHashSet;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import org.junit.runner.notification.Failure;

public class WatchingParametrizedWithMake extends WatchingParameterized {
  private ArrayList<Runner> myRunners;

  public WatchingParametrizedWithMake(Class<?> clazz) throws Throwable {
    super(clazz);
  }

  @Override
  protected List<Runner> getChildren() {
    if (myRunners == null) {
      myRunners = new ArrayList<Runner>();
      myRunners.add(new WatchingParametrizedWithMake.MakeRunner());
      myRunners.addAll(super.getChildren());
    }
    return myRunners;
  }

  public class MakeRunner extends Runner {
    private Description myDescription;

    public MakeRunner() {
      myDescription = Description.createTestDescription(getTestClass().getJavaClass(), "Making ");
    }

    public void run(final RunNotifier notifier) {
      notifier.fireTestStarted(myDescription);
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          ModuleMaker maker = new ModuleMaker();
          MPSCompilationResult compilationResult = maker.make(new LinkedHashSet<IModule>(MPSModuleRepository.getInstance().getAllModules()), new EmptyProgressIndicator());
          if (compilationResult != null && compilationResult.getErrors() > 0) {
            notifier.fireTestFailure(new Failure(myDescription, new Exception("Comilation errors: " + compilationResult)));
          }
        }
      });
      notifier.fireTestFinished(myDescription);
    }

    public Description getDescription() {
      return myDescription;
    }
  }
}
