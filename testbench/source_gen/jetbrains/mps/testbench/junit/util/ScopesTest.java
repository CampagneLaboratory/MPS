package jetbrains.mps.testbench.junit.util;

/*Generated by MPS */

import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import jetbrains.mps.project.Project;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.scope.Scope;
import org.junit.Test;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import jetbrains.mps.util.CollectionUtil;
import junit.framework.Assert;
import jetbrains.mps.project.ProjectManager;
import org.jetbrains.mps.openapi.model.SModel;

@RunWith(Parameterized.class)
public class ScopesTest {
  private static Project ourProject;
  private static List<SNode[]> ourNodesToCheck = new ArrayList<SNode[]>();

  private SNode myNode;

  public ScopesTest(SNode node) {
    myNode = node;
  }

  public List<SNode> getExpectedNodes(SNode forNode) {
    List<SNode> expected = new ArrayList<SNode>();
    for (SNode child : SLinkOperations.getTargets(forNode, "nodes", true)) {
      expected.add(SLinkOperations.getTarget(child, "ref", false));
    }
    return expected;
  }

  public List<SNode> getScopeNodes(Scope scope) {
    List<SNode> scopeSet = new ArrayList<SNode>();
    for (SNode node : scope.getAvailableElements(null)) {
      scopeSet.add(node);
    }
    return scopeSet;
  }

  public StringBuilder getFailMessage(List<SNode> unExpected, List<SNode> notFounded) {
    StringBuilder builder = new StringBuilder(System.getProperty("line.separator"));
    builder.append("\tIn node " + myNode);
    builder.append(System.getProperty("line.separator"));

    if (!(unExpected.isEmpty())) {
      builder.append("\t\tUnexpected scope elements:");
      builder.append(System.getProperty("line.separator"));
      for (SNode node : unExpected) {
        builder.append("\t\t");
        builder.append(node);
        builder.append(System.getProperty("line.separator"));
      }
    }

    if (!(notFounded.isEmpty())) {
      builder.append("\t\tNot founded scope elements:");
      builder.append(System.getProperty("line.separator"));
      for (SNode node : notFounded) {
        builder.append("\t\t");
        builder.append(node);
        builder.append(System.getProperty("line.separator"));
      }
    }
    builder.append(System.getProperty("line.separator"));

    return builder;
  }

  @Test
  public void test() {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SReference reference = SNodeOperations.getReference(SNodeOperations.getParent(ScopesTest.this.myNode), (SNode) SLinkOperations.getTargets(SNodeOperations.getConceptDeclaration(SNodeOperations.getParent(ScopesTest.this.myNode)), "linkDeclaration", true).get(0));
        Scope scope = ModelConstraints.getScope(reference);

        List<SNode> expected = ScopesTest.this.getExpectedNodes(myNode);
        List<SNode> scopeSet = ScopesTest.this.getScopeNodes(scope);

        List<SNode> unExpected = CollectionUtil.subtract(expected, scopeSet);
        List<SNode> notFounded = CollectionUtil.subtract(scopeSet, expected);

        Assert.assertTrue(ScopesTest.this.getFailMessage(unExpected, notFounded).toString(), unExpected.isEmpty() && notFounded.isEmpty());

      }
    });
  }

  @Parameterized.Parameters
  public static List<SNode[]> getNodesToCheck() {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ScopesTest.ourProject = ProjectManager.getInstance().getOpenProjects()[0];
        ScopesTest.ourNodesToCheck.clear();

        for (SModel model : ScopesTest.ourProject.getProjectModels()) {
          for (SNode node : (Iterable<SNode>) model.getRootNodes()) {
            ScopesTest.checkNodes(node);
          }
        }
      }
    });

    return ScopesTest.ourNodesToCheck;
  }

  public static void checkNodes(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.test.structure.ScopesTest")) {
      ScopesTest.ourNodesToCheck.add(new SNode[]{node});
    }
    for (SNode child : SNodeOperations.getChildren(node)) {
      checkNodes(child);
    }
  }
}
