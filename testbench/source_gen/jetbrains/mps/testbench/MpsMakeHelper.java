package jetbrains.mps.testbench;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.testbench.util.FilesCollector;
import jetbrains.mps.tool.builder.Environment;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.project.ProjectManager;
import java.io.File;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.tool.common.Script;
import java.util.Collections;
import org.apache.log4j.Level;
import jetbrains.mps.tool.builder.make.MakeWorker;
import jetbrains.mps.tool.builder.MpsWorker;

/**
 * fyodor, Aug 24, 2010
 */
public class MpsMakeHelper {
  private static List<Object[]> PATTERNS;
  static {
    PATTERNS = ListSequence.fromListAndArray(new ArrayList<Object[]>(), new Object[]{FilesCollector.FilePattern.Type.EXCLUDE, "**/classes_gen/**"}, new Object[]{FilesCollector.FilePattern.Type.EXCLUDE, "**/lib/**"}, new Object[]{FilesCollector.FilePattern.Type.EXCLUDE, "**/testRefactoring/**"}, new Object[]{FilesCollector.FilePattern.Type.EXCLUDE, "**/**transformationTest**/**"}, new Object[]{FilesCollector.FilePattern.Type.EXCLUDE, "**/**testLogger**/**"}, new Object[]{FilesCollector.FilePattern.Type.EXCLUDE, "**/**sandbox**/**"}, new Object[]{FilesCollector.FilePattern.Type.EXCLUDE, "**/**Sandbox**/**"}, new Object[]{FilesCollector.FilePattern.Type.EXCLUDE, "**/IdeaPlugin/**"}, new Object[]{FilesCollector.FilePattern.Type.INCLUDE, "**/**.mpl"}, new Object[]{FilesCollector.FilePattern.Type.INCLUDE, "**/**.msd"}, new Object[]{FilesCollector.FilePattern.Type.EXCLUDE, "**/resolve.msd"}, new Object[]{FilesCollector.FilePattern.Type.EXCLUDE, "**/lib/**"});
  }
  private final Environment myEnvironment;

  public MpsMakeHelper() {
    this.myEnvironment = new IdeaTestEnvironment() {
      @Override
      public MPSProject createDummyProject() {
        Project ideaProject = ProjectManager.getInstance().getDefaultProject();
        File projectFile = FileUtil.createTmpFile();
        final MPSProject project = new MPSProject(ideaProject);
        projectFile.deleteOnExit();
        return project;
      }
    };
  }

  public MpsMakeHelper(Environment environment) {
    myEnvironment = environment;
  }

  public void dispose() {
    myEnvironment.dispose();
  }

  public void make() {
    Script toDo = new Script();
    List<File> path = Collections.singletonList(new File(System.getProperty("user.dir")));
    List<FilesCollector.FilePattern> filePtns = new ArrayList<FilesCollector.FilePattern>();
    for (Object[] ptns : PATTERNS) {
      filePtns.add(FilesCollector.FilePattern.fromTypeAndPattern(ptns));
    }
    for (File f : FilesCollector.fastCollectFiles(filePtns, path)) {
      toDo.addModuleFile(f);
    }
    toDo.updateLogLevel(Level.INFO);
    toDo.putProperty("mps.home", System.getProperty("user.dir"));
    MakeWorker worker = new MakeWorker(toDo, new MpsWorker.LogLogger(), myEnvironment);
    worker.work();
    // spawnWorkerAndWait(toDo); 
  }
}
