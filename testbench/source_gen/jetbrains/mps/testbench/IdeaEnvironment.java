package jetbrains.mps.testbench;

/*Generated by MPS */

import jetbrains.mps.tool.environment.Environment;
import jetbrains.mps.ProjectContainer;
import jetbrains.mps.library.contributor.LibraryContributor;
import com.intellij.idea.IdeaTestApplication;
import jetbrains.mps.tool.environment.EnvironmentConfig;
import jetbrains.mps.tool.environment.ActiveEnvironment;
import jetbrains.mps.tool.environment.EnvironmentUtils;
import com.intellij.openapi.vfs.newvfs.persistent.FSRecords;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.io.File;
import jetbrains.mps.tool.common.util.CanonicalPath;
import com.intellij.openapi.application.PathMacros;
import jetbrains.mps.library.LibraryInitializer;
import javax.swing.SwingUtilities;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.ThreadUtils;
import com.intellij.ide.IdeEventQueue;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.DefaultModelAccess;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.util.FileUtil;
import java.io.InputStream;
import jetbrains.mps.testbench.junit.suites.AntModuleTestSuite;
import java.io.FileOutputStream;
import jetbrains.mps.util.ReadUtil;
import java.io.IOException;
import com.intellij.openapi.project.ex.ProjectManagerEx;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

/**
 * TODO: fix dispose methods
 */
public class IdeaEnvironment implements Environment {
  private static final String MISC_XML_URI = "/jetbrains/mps/testbench/junit/runners/misc.xml";

  private final ProjectContainer myContainer;
  private final LibraryContributor myLibContributor;
  private final IdeaTestApplication myIdeaApplication;


  public IdeaEnvironment(EnvironmentConfig config) {
    if (LOG.isInfoEnabled()) {
      LOG.info("Creating Idea environment");
    }
    this.myContainer = new ProjectContainer();
    ActiveEnvironment.activateEnvironment(this);
    EnvironmentUtils.setSystemProperties(true);
    EnvironmentUtils.setIdeaPluginsToLoad(config);
    // <node> 

    myIdeaApplication = createIdeaTestApp();
    myLibContributor = initLibraries(config);
    initMacros(config);
  }



  private void invalidateIdeaCaches() {
    if (LOG.isInfoEnabled()) {
      LOG.info("Invalidating caches");
    }
    FSRecords.invalidateCaches();
  }



  private void initMacros(EnvironmentConfig config) {
    for (String macro : MapSequence.fromMap(config.macros()).keySet()) {
      setMacro(macro, MapSequence.fromMap(config.macros()).get(macro));
    }
  }



  private void setMacro(String macroName, File file) {
    CanonicalPath path = new CanonicalPath(file.getAbsolutePath());
    if (path.isValidDirectory()) {
      PathMacros.getInstance().setMacro(macroName, path.getValue());
    }
  }



  private LibraryContributor initLibraries(EnvironmentConfig config) {
    if (LOG.isInfoEnabled()) {
      LOG.info("Initializing libraries");
    }

    final LibraryContributor libContributor = EnvironmentUtils.createLibContributor(false, config.libs());
    LibraryInitializer.getInstance().addContributor(libContributor);
    try {
      SwingUtilities.invokeAndWait(new Runnable() {
        @Override
        public void run() {
          ModelAccess.instance().runWriteAction(new Runnable() {
            public void run() {
              LibraryInitializer.getInstance().update();
            }
          });
        }
      });
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    return libContributor;
  }



  private IdeaTestApplication createIdeaTestApp() {
    if (LOG.isInfoEnabled()) {
      LOG.info("Creating IdeaTestApplication");
    }
    return IdeaTestApplication.getInstance(null);
  }



  @Override
  public boolean hasIdeaInstance() {
    return true;
  }



  @Override
  public Project openProject(File projectFile) {
    if (myContainer.containsProject(projectFile)) {
      if (LOG.isInfoEnabled()) {
        LOG.info("Using the last created project");
      }
      Project lastUsedProject = myContainer.getProject(projectFile);
      return lastUsedProject;
    } else {
      if (LOG.isInfoEnabled()) {
        LOG.info("Opening a new project");
      }
      Project project = openProjectInIdeaEnvironment(projectFile);
      myContainer.addProject(project);
      return project;
    }
  }



  @Override
  public Project createDummyProject() {
    File dummyProjectFile = createDummyProjectFile();
    Project dummyProject = IdeaEnvironment.openProjectInIdeaEnvironment(dummyProjectFile);
    myContainer.addProject(dummyProject);
    return dummyProject;
  }



  @Override
  public Iterable<Project> openedProjects() {
    return ListSequence.fromListWithValues(new ArrayList<Project>(), myContainer.getProjects());
  }



  @Override
  public void disposeProject(final Project project) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Disposing the project " + project);
    }
    ((MPSProject) project).projectClosed();

    // part from ProjectTest 
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        myContainer.disposeProject(project);
        IdeEventQueue.getInstance().flushQueue();
        System.gc();
      }
    });

    // comment from ProjectTest: magic 
    // <node> 
  }



  @Override
  public void dispose() {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Disposing environment");
    }

    LibraryInitializer.getInstance().removeContributor(myLibContributor);

    for (Project project : Sequence.fromIterable(openedProjects())) {
      disposeProject(project);
    }

    // todo: fix it in right way 
    ModelAccess.setInstance(new DefaultModelAccess());

    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      @Override
      public void run() {
        ApplicationManager.getApplication().runWriteAction(new Runnable() {
          public void run() {
            myIdeaApplication.dispose();
          }
        });
      }
    });

    ActiveEnvironment.deactivateEnvironment(this);
  }



  private File createDummyProjectFile() {
    File dummyProjDir = FileUtil.createTmpDir();
    File dotMps = new File(dummyProjDir, ".mps");
    dotMps.mkdir();
    File projectFile = new File(dotMps, MISC_XML_URI.substring(MISC_XML_URI.lastIndexOf("/") + 1));
    try {
      projectFile.createNewFile();
      InputStream input = AntModuleTestSuite.class.getResourceAsStream(MISC_XML_URI);
      FileOutputStream stream = new FileOutputStream(projectFile);
      stream.write(ReadUtil.read(input));
      stream.close();
      input.close();
    } catch (IOException e) {
      e.printStackTrace();
      return null;
    }
    dummyProjDir.deleteOnExit();
    return dummyProjDir;
  }



  private static Project openProjectInIdeaEnvironment(File projectFile) {
    if (!(projectFile.exists())) {
      throw new RuntimeException("Can't find project file " + projectFile.getAbsolutePath());
    }
    final ProjectManagerEx projectManager = ProjectManagerEx.getInstanceEx();
    final String filePath = projectFile.getAbsolutePath();
    // this is a workaround for MPS-8840 
    final com.intellij.openapi.project.Project[] project = new com.intellij.openapi.project.Project[1];
    final Throwable[] exc = new Throwable[]{null};
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        try {
          if (LOG.isInfoEnabled()) {
            LOG.info("Load and open the project with path '" + filePath + "'");
          }
          project[0] = projectManager.loadAndOpenProject(filePath);
        } catch (Throwable e) {
          exc[0] = e;
        }
      }
    });
    if (project[0] == null) {
      // this actually happens 
      throw new RuntimeException("ProjectManager could not load project from " + projectFile.getAbsolutePath(), exc[0]);
    }
    // <node> 
    return project[0].getComponent(MPSProject.class);
  }


  protected static Logger LOG = LogManager.getLogger(IdeaEnvironment.class);
}
