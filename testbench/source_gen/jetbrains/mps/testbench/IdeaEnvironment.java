package jetbrains.mps.testbench;

/*Generated by MPS */

import jetbrains.mps.tool.environment.Environment;
import jetbrains.mps.tool.environment.EnvironmentConfig;
import java.util.Set;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.tool.environment.ActiveEnvironment;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.apache.log4j.Level;
import jetbrains.mps.ide.IdeMain;
import jetbrains.mps.tool.environment.EnvironmentUtils;
import jetbrains.mps.TestMain;
import javax.swing.SwingUtilities;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.library.LibraryInitializer;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.io.File;
import com.intellij.openapi.project.ex.ProjectManagerEx;
import com.intellij.openapi.project.ProjectManager;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.ide.ThreadUtils;
import com.intellij.ide.IdeEventQueue;
import jetbrains.mps.smodel.DefaultModelAccess;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.idea.IdeaTestApplication;
import jetbrains.mps.make.ModuleMaker;
import java.util.LinkedHashSet;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.tool.common.util.PathUtil;
import com.intellij.openapi.application.PathMacros;

public class IdeaEnvironment implements Environment {
  private static boolean cachesInvalidated = false;

  private final EnvironmentConfig config;
  private final Set<Project> openedProjects = SetSequence.fromSet(new HashSet<Project>());


  public IdeaEnvironment(EnvironmentConfig config) {
    this.config = config;

    // todo: if creationg of environment fails? is it publication before we need it? 
    ActiveEnvironment.activateEnvironment(this);

    // todo: use plugins and libs 

    // part from ProjectTest 
    BasicConfigurator.configure();
    Logger.getRootLogger().setLevel(Level.ERROR);
    IdeMain.setTestMode(IdeMain.TestMode.CORE_TEST);

    // todo: ? 
    EnvironmentUtils.setSystemProperties(true);

    // todo: inline 
    TestMain.configureMPS(SetSequence.fromSet(config.plugins()).toGenericArray(String.class));
    // todo: IdeaTestEnvironment - default plugins: jetbrains.mps.vcs,jetbrains.mps.ide.editor,jetbrains.mps.ide.make 
    // todo: IdeaTestEnv - setMacro and loadLibraries from Environment 
    try {
      SwingUtilities.invokeAndWait(new Runnable() {
        @Override
        public void run() {
          ModelAccess.instance().runWriteAction(new Runnable() {
            public void run() {
              LibraryInitializer.getInstance().update();
            }
          });
        }
      });
    } catch (Exception e) {
      throw new RuntimeException(e);
    }

    // todo: is it right place? 
    for (String macro : SetSequence.fromSet(MapSequence.fromMap(config.macros()).keySet())) {
      setMacro(macro, MapSequence.fromMap(config.macros()).get(macro));
    }

    // todo: load libs like MpsEnv ? 
  }



  public EnvironmentConfig getConfig() {
    return config;
  }

  public boolean hasIdeaInstance() {
    return true;
  }



  public Project openProject(File projectFile) {
    Project project = openProjectInIdeaEnvironment(projectFile);
    // todo: from TestMain#startTestOnProjectCopy 
    // <node> 
    // <node> 
    // <node> 
    return SetSequence.fromSet(openedProjects).addElement(project);
  }

  public Project createDummyProject() {
    ProjectManagerEx.getInstanceEx();
    // from CheckProjectStructureHelper 
    com.intellij.openapi.project.Project ideaProject = ProjectManager.getInstance().getDefaultProject();
    MPSProject project = new MPSProject(ideaProject);
    File projectFile = FileUtil.createTmpFile();
    project.setProjectFile(projectFile);
    projectFile.deleteOnExit();
    project.projectOpened();

    SetSequence.fromSet(openedProjects).addElement(project);
    return project;
  }

  public void disposeProject(final Project project) {
    ((MPSProject) project).projectClosed();

    // part from ProjectTest 
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        project.dispose();
        IdeEventQueue.getInstance().flushQueue();
        System.gc();
      }
    });
    // comment from ProjectTest: magic 
    ModelAccess.instance().flushEventQueue();
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        IdeEventQueue.getInstance().flushQueue();
      }
    });

    SetSequence.fromSet(openedProjects).removeElement(project);
  }

  public void disposeEnvironment() {
    // from ModuleTestSuite 
    TestMain.PROJECT_CONTAINER.clear();

    for (Project project : SetSequence.fromSetWithValues(new HashSet<Project>(), openedProjects)) {
      disposeProject(project);
    }

    // todo: fix it in right way 
    ModelAccess.setInstance(new DefaultModelAccess());

    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      @Override
      public void run() {
        ApplicationManager.getApplication().runWriteAction(new Runnable() {
          public void run() {
            IdeaTestApplication.getInstance(null).dispose();
          }
        });
      }
    });

    ActiveEnvironment.deactivateEnvironment(this);
  }



  /**
   * todo: should be private access
   */
  public static Project openProjectInIdeaEnvironment(File projectFile) {
    if (!(projectFile.exists())) {
      throw new RuntimeException("Can't find project file " + projectFile.getAbsolutePath());
    }
    final ProjectManagerEx projectManager = ProjectManagerEx.getInstanceEx();
    final String filePath = projectFile.getAbsolutePath();
    // this is a workaround for MPS-8840 
    final com.intellij.openapi.project.Project[] project = new com.intellij.openapi.project.Project[1];
    final Throwable[] exc = new Throwable[]{null};
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        try {
          project[0] = projectManager.loadAndOpenProject(filePath);
        } catch (Throwable e) {
          exc[0] = e;
        }
      }
    });
    if (project[0] == null) {
      // this actually happens 
      throw new RuntimeException("ProjectManager could not load project from " + projectFile.getAbsolutePath(), exc[0]);
    }
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        new ModuleMaker().make(new LinkedHashSet<SModule>(MPSModuleRepository.getInstance().getAllModules()), new EmptyProgressMonitor());
      }
    });
    projectManager.openProject(project[0]);
    return project[0].getComponent(MPSProject.class);
  }



  private void setMacro(String macroName, File file) {
    // todo: move canonicalization logic to EnvironmentBuilder on addMacro, or in utils? 
    String canonicalPath = PathUtil.getCanonicalPath(file.getPath());
    File canonicalFile = new File(canonicalPath);
    if (canonicalFile.exists() && canonicalFile.isDirectory()) {
      PathMacros.getInstance().setMacro(macroName, canonicalPath);
    }
  }
}
