package jetbrains.mps.testbench;

/*Generated by MPS */

import org.apache.log4j.Logger;
import com.intellij.util.PathUtil;
import java.io.File;
import com.intellij.openapi.application.PathMacros;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.make.ModuleMaker;
import java.util.LinkedHashSet;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.classloading.ClassLoaderManager;
import javax.swing.SwingUtilities;
import jetbrains.mps.library.LibraryInitializer;
import jetbrains.mps.logging.Handlers;
import jetbrains.mps.logging.ILoggingHandler;
import jetbrains.mps.logging.LogEntry;

public class Testbench {
  /*package*/ static final Logger LOG = Logger.getLogger(Testbench.class);

  private Testbench() {
  }

  public static void setMacro(String macroName, String path) {
    String canonicalPath = PathUtil.getCanonicalPath(path);
    File file = new File(canonicalPath);
    if (file.exists() && file.isDirectory()) {
      PathMacros.getInstance().setMacro(macroName, canonicalPath);
    }
  }

  public static void makeAll() {
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        ProgressMonitor monitor = new EmptyProgressMonitor();
        ModuleMaker maker = new ModuleMaker();
        maker.make(new LinkedHashSet<IModule>(MPSModuleRepository.getInstance().getAllModules()), monitor);
        ClassLoaderManager.getInstance().reloadAll(monitor);
      }
    });
  }

  public static void reloadAll() {
    ModelAccess.instance().runWriteAction(new Runnable() {
      public void run() {
        ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
      }
    });
  }

  public static void initLibs() {
    try {
      SwingUtilities.invokeAndWait(new Runnable() {
        @Override
        public void run() {
          ModelAccess.instance().runWriteAction(new Runnable() {
            public void run() {
              LibraryInitializer.getInstance().update();
            }
          });
        }
      });
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  public static void initLogging() {
    Handlers.addLoggingHandler(new Testbench.LoggingHandlerAdapter());
  }

  public static class LoggingHandlerAdapter implements ILoggingHandler {
    public LoggingHandlerAdapter() {
    }

    public void info(LogEntry e) {
      LOG.info(e.getMessage());
    }

    public void warning(LogEntry e) {
      LOG.warn(e.getMessage());
    }

    public void debug(LogEntry e) {
      LOG.debug(e.getMessage());
    }

    public void error(LogEntry e) {
      if (e.getThrowable() != null) {
        LOG.error(e.getThrowable());
      } else {
        LOG.error(e.getMessage());
      }
    }

    public void fatal(LogEntry e) {
      if (e.getThrowable() != null) {
        LOG.fatal(e.getThrowable());
      } else {
        LOG.fatal(e.getMessage());
      }
    }
  }
}
