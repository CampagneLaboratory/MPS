package jetbrains.mps.lang.editor.styleTests.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import jetbrains.mps.openapi.editor.descriptor.StyleAttributeProvider;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.style.StyleAttribute;
import jetbrains.mps.editor.runtime.style.InheritableStyleAttribute;
import jetbrains.mps.editor.runtime.style.SimpleStyleAttribute;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase implements StyleAttributeProvider {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new HugePriorityStyle_Editor()));
      case 1:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new LeafNode_Editor()));
      case 2:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new PriorityStyle_Editor()));
      case 3:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new PriorityStyleCopy_Editor()));
      case 4:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new TestConceptWithStyleAttributes_Editor()));
      case 5:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new TestInheritedAttribute_Editor()));
      case 6:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new TestSimpleAttribute_Editor()));
      case 7:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new UnapplyPriorityStyleCopy_Editor()));
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0c, descriptor.getConceptFqName())) {
      case 0:
        switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a2, editorComponentId)) {
          case 0:
            return Collections.<ConceptEditorComponent>singletonList(new StyleTestElement_EditorComponent());
          case 1:
            return Collections.<ConceptEditorComponent>singletonList(new StyleTest_EditorComponent());
          default:
        }
        break;
      case 1:
        if ("jetbrains.mps.lang.editor.styleTests.editor.StyleTestElement_EditorComponent".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new TestInheritedAttibute_EditorComponent());
        }
        break;
      case 2:
        if ("jetbrains.mps.lang.editor.styleTests.editor.StyleTestElement_EditorComponent".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new TestISimpleAttribute_EditorComponent());
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }


  public StyleAttribute getStyleAttribute(String attributeName) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0f, attributeName)) {
      case 0:
        return new InheritableStyleAttribute<String>("test-inherited-attribute");
      case 1:
        return new SimpleStyleAttribute<Boolean>("test-simple-attribute", true);
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.lang.editor.styleTests.structure.HugePriorityStyle", "jetbrains.mps.lang.editor.styleTests.structure.LeafNode", "jetbrains.mps.lang.editor.styleTests.structure.PriorityStyle", "jetbrains.mps.lang.editor.styleTests.structure.PriorityStyleCopy", "jetbrains.mps.lang.editor.styleTests.structure.TestConceptWithStyleAttributes", "jetbrains.mps.lang.editor.styleTests.structure.TestInheritedAttribute", "jetbrains.mps.lang.editor.styleTests.structure.TestSimpleAttribute", "jetbrains.mps.lang.editor.styleTests.structure.UnapplyPriorityStyleCopy"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0a2 = new String[]{"jetbrains.mps.lang.editor.styleTests.editor.StyleTestElement_EditorComponent", "jetbrains.mps.lang.editor.styleTests.editor.StyleTest_EditorComponent"};
  private static String[] stringSwitchCases_xbvbvu_a0a0c = new String[]{"jetbrains.mps.lang.editor.styleTests.structure.NodeContainer", "jetbrains.mps.lang.editor.styleTests.structure.TestInheritedAttribute", "jetbrains.mps.lang.editor.styleTests.structure.TestSimpleAttribute"};
  private static String[] stringSwitchCases_xbvbvu_a0a0f = new String[]{"test-inherited-attribute", "test-simple-attribute"};
}
