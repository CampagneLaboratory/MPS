package jetbrains.mps.lang.editor.formsTests.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.impl.cellActions.CellAction_Comment;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell_Image;

public class UsesImageCheckbox_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_h1lpb1_a(editorContext, node);
  }
  private EditorCell createCollection_h1lpb1_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_h1lpb1_a");
    editorCell.setBig(true);
    editorCell.setAction(CellActionType.COMMENT, new CellAction_Comment(node));
    Checkbox_Actions_a.setCellActions(editorCell, node, editorContext);
    editorCell.addKeyMap(new Checkbox_KeyMap_a());
    editorCell.addEditorCell(this.createAlternation_h1lpb1_a0(editorContext, node));
    return editorCell;
  }
  private EditorCell createAlternation_h1lpb1_a0(EditorContext editorContext, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = UsesImageCheckbox_Editor.renderingCondition_h1lpb1_a0a(node, editorContext);
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createImage_h1lpb1_a0a(editorContext, node);
    } else {
      editorCell = this.createImage_h1lpb1_a0a_0(editorContext, node);
    }
    return editorCell;
  }
  private static boolean renderingCondition_h1lpb1_a0a(SNode node, EditorContext editorContext) {
    return SPropertyOperations.getBoolean(node, MetaAdapterFactory.getProperty(0xafb9a5fdbc5d4169L, 0xa22542d8823d623aL, 0x4a35f271d9f26e85L, 0x4a35f271d9f26e86L, "property"));
  }
  private EditorCell createImage_h1lpb1_a0a(final EditorContext editorContext, final SNode node) {
    SModule imageModule;
    String imagePath;
    imageModule = SNodeOperations.getConcept(node).getLanguage().getSourceModule();
    imagePath = "${module}/icons/dialog-ok-3.png";
    EditorCell_Image editorCell = EditorCell_Image.createImageCell(editorContext, node, imageModule, imagePath);
    editorCell.setCellId("Image_h1lpb1_a0a");
    editorCell.setDescent(0);
    return editorCell;
  }
  private EditorCell createImage_h1lpb1_a0a_0(final EditorContext editorContext, final SNode node) {
    SModule imageModule;
    String imagePath;
    imageModule = SNodeOperations.getConcept(node).getLanguage().getSourceModule();
    imagePath = "${module}/icons/dialog-close.png";
    EditorCell_Image editorCell = EditorCell_Image.createImageCell(editorContext, node, imageModule, imagePath);
    editorCell.setCellId("Image_h1lpb1_a0a_0");
    editorCell.setDescent(0);
    return editorCell;
  }
}
