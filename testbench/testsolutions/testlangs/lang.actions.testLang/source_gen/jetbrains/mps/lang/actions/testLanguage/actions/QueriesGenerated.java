package jetbrains.mps.lang.actions.testLanguage.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.action.ChildSubstituteActionsHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.action.NodeSubstitutePreconditionContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.AbstractNodeSubstituteAction;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.cells.CellTraversalUtil;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.DefaultSimpleSubstituteAction;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import jetbrains.mps.smodel.action.AbstractChildNodeSetter;
import jetbrains.mps.smodel.action.ModelActions;
import jetbrains.mps.smodel.action.NodeSubstituteActionWrapper;
import jetbrains.mps.smodel.action.RemoveSubstituteActionByConditionContext;
import java.util.Iterator;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.smodel.SReference;

public class QueriesGenerated {
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ActionTestAbstractChild_6866660893594527079(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1"), _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter())));
    return result;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_ActionTestAbstractChild_6866660893594532045(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    // compilation test for all passed parameters 
    boolean tmpVar = _context.getParentNode() != null;
    tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
    tmpVar = tmpVar && _context.getChildConcept() != null;
    tmpVar = tmpVar && _context.getLink() != null;
    tmpVar = tmpVar && _context.getWrapped();
    tmpVar = tmpVar && _context.getModel() != null;
    tmpVar = tmpVar && operationContext != null;

    return _context.getLink() == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103395183l, 2550657305103442374l, "conceptSubstitutePart"));
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ActionTestAbstractChild_3213804652571374655(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
        public Iterable<SNode> compute() {
          // compilation test for all passed parameters 
          boolean tmpVar = _context.getParentNode() != null;
          tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
          tmpVar = tmpVar && _context.getChildConcept() != null;
          tmpVar = tmpVar && _context.getModel() != null;
          tmpVar = tmpVar && operationContext != null;

          List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
          ListSequence.fromList(result).addElement(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1SubConcept"));
          return result;
        }
      }.compute();
      if (queryResult != null) {
        for (SNode item : queryResult) {
          ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter())));
        }
      }
    }
    return result;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_ActionTestAbstractChild_3213804652589510715(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return _context.getLink() == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103395183l, 3213804652589512225l, "addMenu_conceptSubstitute"));
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ActionTestChild1SubConcept_3213804652589861815(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addSequence(ListSequence.fromList(new Computable<List<SubstituteAction>>() {
      public List<SubstituteAction> compute() {
        // compilation test for all passed parameters 
        boolean tmpVar = _context.getChildConcept() != null;
        tmpVar = tmpVar && _context.getChildSetter() != null;
        tmpVar = tmpVar && _context.getParentNode() != null;
        tmpVar = tmpVar && operationContext != null;
        tmpVar = tmpVar && _context.getCurrentTargetNode() != null;

        assert SNodeOperations.isInstanceOf(_context.getParentNode(), MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103395183l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestContainer"));
        List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
        ListSequence.fromList(result).addElement(new AbstractNodeSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1"), SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1"), _context.getParentNode()) {
          @Override
          public String getDescriptionText(String string) {
            return "Custom action provided from generic query";
          }
          @Override
          protected SNode doSubstitute(@Nullable EditorContext context, String string) {
            _context.getChildSetter().execute(_context.getParentNode(), _context.getCurrentTargetNode(), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103442169l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1"))), context);
            return _context.getParentNode();
          }
        });
        return result;
      }
    }.compute()));
    return result;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_ActionTestChild1SubConcept_3213804652589913916(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return _context.getLink() == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103395183l, 3213804652591201723l, "addMenu_genericQuery"));
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ActionTestAbstractChild_3286607483604815176(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            // compilation test for all passed parameters 
            boolean tmpVar = _context.getParentNode() != null;
            tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
            tmpVar = tmpVar && _context.getChildConcept() != null;
            tmpVar = tmpVar && _context.getModel() != null;
            tmpVar = tmpVar && operationContext != null;

            return ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild"), _context.getModel())).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return it != SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild");
              }
            });
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                // compilation test for all passed parameters 
                boolean tmpVar = pattern != null;
                tmpVar = tmpVar && (item) != null;
                tmpVar = tmpVar && _context.getParentNode() != null;
                tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
                tmpVar = tmpVar && _context.getChildConcept() != null;
                tmpVar = tmpVar && model != null;
                tmpVar = tmpVar && operationContext != null;

                SNode result = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept((item)));
                if ((item) == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1")) {
                  SLinkOperations.addNewChild(SNodeOperations.cast(result, MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103442169l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1")), MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103442169l, 9187447745748951875l, "child1"), SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 9187447745748949838l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1Child")));
                }
                return result;
              }
              @Override
              protected SNode selectChildNode(SNode createdNode, SModel model, String pattern, EditorContext editorContext) {
                // compilation test for all passed parameters 
                boolean tmpVar = pattern != null;
                tmpVar = tmpVar && (item) != null;
                tmpVar = tmpVar && _context.getParentNode() != null;
                tmpVar = tmpVar && createdNode != null;
                tmpVar = tmpVar && _context.getChildConcept() != null;
                tmpVar = tmpVar && model != null;
                tmpVar = tmpVar && operationContext != null;
                tmpVar = tmpVar && editorContext != null;

                if ((item) == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild2")) {
                  // selecting a custom cell 
                  editorContext.flushEvents();
                  EditorCell createdNodeCell = editorContext.getEditorComponent().findNodeCell(createdNode);
                  if (createdNodeCell != null) {
                    EditorCell firstLeaf = CellTraversalUtil.getFirstLeaf(createdNodeCell);
                    editorContext.getEditorComponent().changeSelection(firstLeaf);
                    if (firstLeaf instanceof EditorCell_Label) {
                      ((EditorCell_Label) firstLeaf).setCaretPosition(3);
                    }
                    return null;
                  }
                }
                if ((item) == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1")) {
                  // returning node to select 
                  return ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(createdNode, MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103442169l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1")), MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103442169l, 9187447745748951875l, "child1"))).first();
                }
                return createdNode;
              }
              public String getMatchingText(String pattern) {
                // compilation test for all passed parameters 
                boolean tmpVar = pattern != null;
                tmpVar = tmpVar && (item) != null;
                tmpVar = tmpVar && _context.getParentNode() != null;
                tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
                tmpVar = tmpVar && _context.getChildConcept() != null;
                tmpVar = tmpVar && _context.getModel() != null;
                tmpVar = tmpVar && operationContext != null;

                return SPropertyOperations.getString((item), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"));
              }
              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
              public String getDescriptionText(String pattern) {
                // compilation test for all passed parameters 
                boolean tmpVar = pattern != null;
                tmpVar = tmpVar && (item) != null;
                tmpVar = tmpVar && _context.getParentNode() != null;
                tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
                tmpVar = tmpVar && _context.getChildConcept() != null;
                tmpVar = tmpVar && _context.getModel() != null;
                tmpVar = tmpVar && operationContext != null;

                return "Create new instance of concept: " + SPropertyOperations.getString((item), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"));
              }
              public SNode getIconNode(String pattern) {
                // compilation test for all passed parameters 
                boolean tmpVar = pattern != null;
                tmpVar = tmpVar && (item) != null;
                tmpVar = tmpVar && _context.getParentNode() != null;
                tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
                tmpVar = tmpVar && _context.getChildConcept() != null;
                tmpVar = tmpVar && _context.getModel() != null;
                tmpVar = tmpVar && operationContext != null;

                return (item);
              }
              public SNode getActionType(String pattern) {
                // compilation test for all passed parameters 
                boolean tmpVar = pattern != null;
                tmpVar = tmpVar && (item) != null;
                tmpVar = tmpVar && _context.getParentNode() != null;
                tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
                tmpVar = tmpVar && _context.getChildConcept() != null;
                tmpVar = tmpVar && _context.getModel() != null;
                tmpVar = tmpVar && operationContext != null;

                boolean useNodeType = (item) == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1SubConcept");
                return (useNodeType ? _quotation_createNode_qp9nsj_a0k0a0a0_0() : _quotation_createNode_qp9nsj_a0k0a0a0((SNode) (item)));
              }
            });
          }
        }
      }
    }
    return result;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_ActionTestAbstractChild_3286607483604919584(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return _context.getLink() == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103395183l, 3286607483605022921l, "addMenu_parameterizedSubstitute"));
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ActionTestAbstractChild_2534942168330113631(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    final StringHolder firstMatchingText = new Computable<StringHolder>() {
      public StringHolder compute() {
        // compilation test for all passed parameters 
        boolean tmpVar = _context.getParentNode() != null;
        tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
        tmpVar = tmpVar && _context.getChildConcept() != null;
        tmpVar = tmpVar && _context.getModel() != null;
        tmpVar = tmpVar && operationContext != null;

        return new StringHolder();
      }
    }.compute();
    {
      // compilation test for all passed parameters 
      boolean tmpVar = _context.getParentNode() != null;
      tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
      tmpVar = tmpVar && _context.getChildConcept() != null;
      tmpVar = tmpVar && _context.getModel() != null;
      tmpVar = tmpVar && operationContext != null;

      firstMatchingText.matchingText = "newChild1";
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            // compilation test for all passed parameters 
            boolean tmpVar = pattern != null;
            tmpVar = tmpVar && _context.getParentNode() != null;
            tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
            tmpVar = tmpVar && _context.getChildConcept() != null;
            tmpVar = tmpVar && model != null;
            tmpVar = tmpVar && operationContext != null;

            SNode result = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103442169l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1")));
            SLinkOperations.addNewChild(result, MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103442169l, 9187447745748951875l, "child1"), SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 9187447745748949838l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1Child")));
            return result;
          }
          @Override
          protected SNode selectChildNode(SNode createdNode, SModel model, String pattern, EditorContext editorContext) {
            // returning node to select 
            return ListSequence.fromList(SLinkOperations.getChildren(createdNode, MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103442169l, 9187447745748951875l, "child1"))).first();
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            // compilation test for all passed parameters 
            boolean tmpVar = pattern != null;
            tmpVar = tmpVar && strictly;
            tmpVar = tmpVar && _context.getParentNode() != null;
            tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
            tmpVar = tmpVar && _context.getChildConcept() != null;
            tmpVar = tmpVar && _context.getModel() != null;
            tmpVar = tmpVar && operationContext != null;

            return (strictly ? firstMatchingText.matchingText.equals(pattern) : firstMatchingText.matchingText.startsWith(pattern));
          }
          public String getDescriptionText(String pattern) {
            // compilation test for all passed parameters 
            boolean tmpVar = pattern != null;
            tmpVar = tmpVar && _context.getParentNode() != null;
            tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
            tmpVar = tmpVar && _context.getChildConcept() != null;
            tmpVar = tmpVar && _context.getModel() != null;
            tmpVar = tmpVar && operationContext != null;

            return "Description of " + firstMatchingText.matchingText;
          }
          public String getMatchingText(String pattern) {
            // compilation test for all passed parameters 
            boolean tmpVar = pattern != null;
            tmpVar = tmpVar && _context.getParentNode() != null;
            tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
            tmpVar = tmpVar && _context.getChildConcept() != null;
            tmpVar = tmpVar && _context.getModel() != null;
            tmpVar = tmpVar && operationContext != null;

            return firstMatchingText.matchingText;
          }
          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
          public SNode getIconNode(String pattern) {
            // compilation test for all passed parameters 
            boolean tmpVar = pattern != null;
            tmpVar = tmpVar && _context.getParentNode() != null;
            tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
            tmpVar = tmpVar && _context.getChildConcept() != null;
            tmpVar = tmpVar && _context.getModel() != null;
            tmpVar = tmpVar && operationContext != null;

            return SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1");
          }
          public SNode getActionType(String pattern) {
            // compilation test for all passed parameters 
            boolean tmpVar = pattern != null;
            tmpVar = tmpVar && _context.getParentNode() != null;
            tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
            tmpVar = tmpVar && _context.getChildConcept() != null;
            tmpVar = tmpVar && _context.getModel() != null;
            tmpVar = tmpVar && operationContext != null;

            return _quotation_createNode_mw8afp_a8a0a0a();
          }
        });
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            return SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 3213804652571075891l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1SubConcept")));
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            return false;
          }
          public String getMatchingText(String pattern) {
            return "newChild2_fake_filtered";
          }
          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild2");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            return SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103442509l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild2")));
          }
          @Override
          protected SNode selectChildNode(SNode createdNode, SModel model, String pattern, EditorContext editorContext) {
            // compilation test for all passed parameters 
            boolean tmpVar = pattern != null;
            tmpVar = tmpVar && _context.getParentNode() != null;
            tmpVar = tmpVar && createdNode != null;
            tmpVar = tmpVar && _context.getChildConcept() != null;
            tmpVar = tmpVar && model != null;
            tmpVar = tmpVar && operationContext != null;
            tmpVar = tmpVar && editorContext != null;

            // selecting a custom cell 
            editorContext.flushEvents();
            EditorCell createdNodeCell = editorContext.getEditorComponent().findNodeCell(createdNode);
            if (createdNodeCell != null) {
              EditorCell firstLeaf = CellTraversalUtil.getFirstLeaf(createdNodeCell);
              editorContext.getEditorComponent().changeSelection(firstLeaf);
              if (firstLeaf instanceof EditorCell_Label) {
                ((EditorCell_Label) firstLeaf).setCaretPosition(3);
              }
              return null;
            }
            return createdNode;
          }
          public String getDescriptionText(String pattern) {
            return "NewChild2 description text";
          }
          public String getMatchingText(String pattern) {
            return "newChild2";
          }
          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
          public SNode getActionType(String pattern) {
            return _quotation_createNode_mw8afp_a0a0a1a();
          }
        });
      }
    }
    return result;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_ActionTestAbstractChild_2534942168331233421(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return _context.getLink() == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103395183l, 2534942168331159850l, "addMenu_simpleItemSubstitute"));
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ActionTestAbstractChildWrapper_5164819300892286056(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildWrapper");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        SNode wrappedConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1");
        final boolean[] returnSmallPartResult = new boolean[]{false};
        IChildNodeSetter setter = new AbstractChildNodeSetter() {
          private SNode wrapNode(SNode nodeToWrap, SModel model, @Nullable EditorContext editorContext) {
            // compilation test for all passed parameters 
            boolean tmpVar = nodeToWrap != null;
            tmpVar = tmpVar && _context.getParentNode() != null;
            tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
            tmpVar = tmpVar && _context.getChildConcept() != null;
            tmpVar = tmpVar && model != null;
            tmpVar = tmpVar && operationContext != null;
            tmpVar = tmpVar && editorContext != null;

            // Check if we have read access here 
            String name = SPropertyOperations.getString(nodeToWrap, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"));

            SNode wrapperNode = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 5164819300892650829l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildWrapper")));
            SLinkOperations.setTarget(wrapperNode, MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 5164819300892650829l, 5164819300892650847l, "childToWrap"), nodeToWrap);
            return wrapperNode;
          }
          public boolean returnSmallPart(SNode nodeToWrap) {
            // compilation test for all passed parameters 
            boolean tmpVar = _context.getParentNode() != null;
            tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
            tmpVar = tmpVar && _context.getModel() != null;
            tmpVar = tmpVar && _context.getChildConcept() != null;
            tmpVar = tmpVar && operationContext != null;
            tmpVar = tmpVar && nodeToWrap != null;

            // Check if we have read access here 
            String name = SPropertyOperations.getString(nodeToWrap, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"));

            return SNodeOperations.isInstanceOf(nodeToWrap, MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 2747974755163525074l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap2"));
          }
          @Override
          public SNode doExecute(SNode pn, SNode oc, SNode nc, @Nullable EditorContext editorContext) {
            SNode wrappedNode = wrapNode(nc, nc.getModel(), editorContext);
            _context.getChildSetter().execute(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedNode, editorContext);
            return ((returnSmallPartResult[0] = returnSmallPart(nc)) ? nc : wrappedNode);
          }
        };
        for (SubstituteAction substituteAction : ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedConcept, setter, operationContext))) {
          ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(substituteAction) {
            @Override
            public SNode substitute(@Nullable EditorContext editorContext, String pattern) {
              SNode substitutionResult = super.substitute(editorContext, pattern);
              if (returnSmallPartResult[0]) {
                return substitutionResult;
              }
              return setupSelection(substitutionResult, substitutionResult.getModel(), pattern, editorContext);
            }
            private SNode setupSelection(SNode createdNode, SModel model, String pattern, EditorContext editorContext) {
              // compilation test for all passed parameters 
              boolean tmpVar = _context.getParentNode() != null;
              tmpVar = tmpVar && createdNode != null;
              tmpVar = tmpVar && _context.getChildConcept() != null;
              tmpVar = tmpVar && model != null;
              tmpVar = tmpVar && operationContext != null;
              tmpVar = tmpVar && editorContext != null;

              // Check if we have read access here 
              String name = SPropertyOperations.getString(SLinkOperations.getTarget(createdNode, MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 5164819300892650829l, 5164819300892650847l, "childToWrap")), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"));

              // selecting a custom cell 
              editorContext.flushEvents();
              EditorCell createdNodeCell = editorContext.getEditorComponent().findNodeCell(createdNode);
              if (createdNodeCell != null) {
                EditorCell firstLeaf = CellTraversalUtil.getFirstLeaf(createdNodeCell);
                editorContext.getEditorComponent().changeSelection(firstLeaf);
                if (firstLeaf instanceof EditorCell_Label) {
                  ((EditorCell_Label) firstLeaf).setCaretPosition(2);
                }
                return null;
              }
              return createdNode;

            }
          });
        }
      }
    }
    return result;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_ActionTestAbstractChildWrapper_2870536390415191470(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return _context.getLink() == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103395183l, 5164819300892346417l, "addMenu_wrapperSubstitute"));
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ActionTestChildToWrap1_8749184937171477954(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            return SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1"), _context.getModel());
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                return SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept((item)));
              }
              @Override
              protected SNode selectChildNode(SNode createdNode, SModel model, String pattern, EditorContext editorContext) {
                // selecting a custom cell 
                editorContext.flushEvents();
                EditorCell createdNodeCell = editorContext.getEditorComponent().findNodeCell(createdNode);
                if (createdNodeCell != null) {
                  EditorCell firstLeaf = CellTraversalUtil.getFirstLeaf(createdNodeCell);
                  editorContext.getEditorComponent().changeSelection(firstLeaf);
                  if (firstLeaf instanceof EditorCell_Label) {
                    ((EditorCell_Label) firstLeaf).setCaretPosition(5);
                  }
                  return null;
                }
                return createdNode;
              }
            });
          }
        }
      }
    }
    return result;
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ActionTestDefaultAbstractChild_8349639607718546820(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    return result;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_ActionTestDefaultAbstractChild_8349639607731233278(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return _context.getLink() == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103395183l, 8349639607730759178l, "removeByConditionPart"));
  }
  public static void removeActionsByCondition_8349639607718546826(final IOperationContext operationContext, final RemoveSubstituteActionByConditionContext _context) {
    Iterator<SubstituteAction> actions = _context.getSubstituteActions();
    while (actions.hasNext()) {
      SubstituteAction current = actions.next();
      SNode outputConcept = (SNode) current.getOutputConcept();
      SNode applicableConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild");
      Condition<SNode> cond = new Condition<SNode>() {
        public boolean met(SNode concept) {
          // compilation test for all passed parameters 
          boolean tmpVar = _context.getParentNode() != null;
          tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
          tmpVar = tmpVar && concept != null;
          tmpVar = tmpVar && _context.getChildConcept() != null;
          tmpVar = tmpVar && _context.getModel() != null;
          tmpVar = tmpVar && operationContext != null;

          return concept == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultChild1");
        }
      };
      if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(applicableConcept), SNodeOperations.asSConcept(outputConcept)) && cond.met(outputConcept)) {
        actions.remove();
      }
    }
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ActionTestDefaultAbstractChild_8349639607733006841(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    return result;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_ActionTestDefaultAbstractChild_8349639607733067495(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return _context.getLink() == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103395183l, 8349639607733071711l, "removePart"));
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ActionTestDefaultAbstractChild_8349639607733412514(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    return result;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_ActionTestDefaultAbstractChild_8349639607733417630(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return _context.getLink() == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103395183l, 8349639607733418666l, "removeDefaultsPart"));
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ActionTestAbstractChildWrapper_2870536390415252135(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildWrapper");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        SNode wrappedConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1");
        IChildNodeSetter setter = new AbstractChildNodeSetter() {
          private SNode wrapNode(SNode nodeToWrap, SModel model, @Nullable EditorContext editorContext) {
            // compilation test for all passed parameters 
            boolean tmpVar = nodeToWrap != null;
            tmpVar = tmpVar && _context.getParentNode() != null;
            tmpVar = tmpVar && _context.getCurrentTargetNode() != null;
            tmpVar = tmpVar && _context.getChildConcept() != null;
            tmpVar = tmpVar && model != null;
            tmpVar = tmpVar && operationContext != null;
            tmpVar = tmpVar && editorContext != null;

            SNode wrapperNode = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 5164819300892650829l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildWrapper")));
            SLinkOperations.setTarget(wrapperNode, MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 5164819300892650829l, 5164819300892650847l, "childToWrap"), nodeToWrap);
            return wrapperNode;
          }
          public boolean returnSmallPart(SNode nodeToWrap) {
            return false;
          }
          @Override
          public SNode doExecute(SNode pn, SNode oc, SNode nc, @Nullable EditorContext editorContext) {
            SNode wrappedNode = wrapNode(nc, nc.getModel(), editorContext);
            _context.getChildSetter().execute(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedNode, editorContext);
            return (returnSmallPart(nc) ? nc : wrappedNode);
          }
        };
        ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedConcept, setter, operationContext)));
      }
    }
    return result;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_ActionTestAbstractChildWrapper_2870536390415252400(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return _context.getLink() == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(new UUID(8322320058774933180l, -6326357545913795484l), 2550657305103395183l, 2870536390414919847l, "addMenu_wrapperSubstituteDefaultSelection"));
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_ActionTestSidetransformAbstractChild_4942308145796905559(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformChild1"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        return SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 4942308145797614619l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformChild1")));
      }
      public String getMatchingText(String pattern) {
        return "child1";
      }
      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }
      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformChild1"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformChild1"), null));
      }
    });
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_ActionTestSidetransformAbstractChild_3185679905989951457(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformChild1"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        return SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(8322320058774933180l, -6326357545913795484l), 4942308145797614619l, "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformChild1")));
      }
      public String getMatchingText(String pattern) {
        return "child1";
      }
      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }
      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformChild1"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformChild1"), null));
      }
    });
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_ActionTestSidetransformAnotherAbstractChild_3185679905992087904(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      Iterable<SNode> parameterObjects = new Computable<Iterable<SNode>>() {
        public Iterable<SNode> compute() {
          return ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept"), _context.getModel())).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return !(SPropertyOperations.getBoolean(it, MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1169125787135l, 4628067390765956802l, "abstract")));
            }
          }).toListSequence();
        }
      }.compute();
      if (parameterObjects != null) {
        for (final SNode item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept"), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              return SNodeOperations.replaceWithAnother(_context.getSourceNode(), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept((item))));
            }
            @Override
            protected boolean isEnabled() {
              SNode sourceNode = getSourceNode();
              SNode parent = SNodeOperations.getParent(sourceNode);
              SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
              return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept"), null));
            }
          });
        }
      }
    }
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_ActionTestSidetransformAnotherAbstractChild_3185679905990459421(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      Iterable<SNode> parameterObjects = new Computable<Iterable<SNode>>() {
        public Iterable<SNode> compute() {
          return ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept"), _context.getModel())).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return !(SPropertyOperations.getBoolean(it, MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1169125787135l, 4628067390765956802l, "abstract")));
            }
          }).toListSequence();
        }
      }.compute();
      if (parameterObjects != null) {
        for (final SNode item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept"), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              return SNodeOperations.replaceWithAnother(_context.getSourceNode(), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept((item))));
            }
            @Override
            protected boolean isEnabled() {
              SNode sourceNode = getSourceNode();
              SNode parent = SNodeOperations.getParent(sourceNode);
              SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
              return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept"), null));
            }
          });
        }
      }
    }
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_ActionTestSidetransformAddConceptAbstractChild_6500338114638885844(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      final String[] lastPattern = new String[1];
      List<SubstituteAction> list = ModelActions.createChildNodeSubstituteActions(_context.getSourceNode(), null, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptChild"), new AbstractChildNodeSetter() {
        public SNode doExecute(SNode parentNode, SNode oldChild, SNode newChild, @Nullable EditorContext editorContext) {
          return substitute(newChild, lastPattern[0], editorContext);
        }
        private SNode substitute(SNode result, String pattern, @Nullable EditorContext editorContext) {
          SNodeOperations.replaceWithAnother(_context.getSourceNode(), result);
          return result;
        }
      }, operationContext);
      for (final SubstituteAction action : list) {
        ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action) {
          @Override
          public SNode substitute(@Nullable EditorContext context, String pattern) {
            lastPattern[0] = pattern;
            return super.substitute(context, pattern);
          }
        });
      }
    }
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_ActionTestSidetransformAddConceptAbstractChild_4886882084760483961(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      final String[] lastPattern = new String[1];
      List<SubstituteAction> list = ModelActions.createChildNodeSubstituteActions(_context.getSourceNode(), null, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptChild"), new AbstractChildNodeSetter() {
        public SNode doExecute(SNode parentNode, SNode oldChild, SNode newChild, @Nullable EditorContext editorContext) {
          return substitute(newChild, lastPattern[0], editorContext);
        }
        private SNode substitute(SNode result, String pattern, @Nullable EditorContext editorContext) {
          SNodeOperations.replaceWithAnother(_context.getSourceNode(), result);
          return result;
        }
      }, operationContext);
      for (final SubstituteAction action : list) {
        ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action) {
          @Override
          public SNode substitute(@Nullable EditorContext context, String pattern) {
            lastPattern[0] = pattern;
            return super.substitute(context, pattern);
          }
        });
      }
    }
    return result;
  }
  private static SNode _quotation_createNode_qp9nsj_a0k0a0a0(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l, -9098312342032910879l), 1138055754698l, 1138405853777l, "concept"), (SNode) parameter_1);
    return quotedNode_2;
  }
  private static SNode _quotation_createNode_qp9nsj_a0k0a0a0_0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, false);
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_mw8afp_a8a0a0a() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, false);
    quotedNode_1.setReference(MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l, -9098312342032910879l), 1138055754698l, 1138405853777l, "concept"), SReference.create(MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l, -9098312342032910879l), 1138055754698l, 1138405853777l, "concept"), quotedNode_1, facade.createModelReference("r:4d38763d-a252-449a-a228-c5edf22068a3(jetbrains.mps.lang.actions.testLanguage.structure)"), facade.createNodeId("2550657305103442169")));
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_mw8afp_a0a0a1a() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, false);
    quotedNode_1.setReference(MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l, -9098312342032910879l), 1138055754698l, 1138405853777l, "concept"), SReference.create(MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l, -9098312342032910879l), 1138055754698l, 1138405853777l, "concept"), quotedNode_1, facade.createModelReference("r:4d38763d-a252-449a-a228-c5edf22068a3(jetbrains.mps.lang.actions.testLanguage.structure)"), facade.createNodeId("2550657305103442509")));
    return quotedNode_1;
  }
}
