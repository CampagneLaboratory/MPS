package jetbrains.mps.testbench;

/*Generated by MPS */

import jetbrains.mps.make.service.AbstractMakeService;
import jetbrains.mps.make.IMakeService;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.messages.IMessageHandler;
import java.util.concurrent.Future;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.script.IScriptController;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.make.runtime.util.FutureValue;
import jetbrains.mps.make.dependencies.MakeSequence;
import jetbrains.mps.make.service.CoreMakeTask;
import jetbrains.mps.make.IMakeNotificationListener;
import jetbrains.mps.messages.Message;
import jetbrains.mps.messages.MessageKind;
import jetbrains.mps.internal.make.cfg.GenerateFacetInitializer;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.make.script.IPropertiesPool;

public class TestMakeService extends AbstractMakeService implements IMakeService {
  private IOperationContext context;
  private IMessageHandler messageHandler;

  @Deprecated
  public TestMakeService(IOperationContext context, IMessageHandler messageHandler) {
    this.context = context;
    this.messageHandler = messageHandler;
  }

  public TestMakeService() {
  }



  @Override
  public Future<IResult> make(MakeSession session, Iterable<? extends IResource> resources, IScript script, IScriptController controller, @NotNull ProgressMonitor monitor) {
    if (session == null) {
      // FIXME compatibility, tolerance to null session will be dropped 
      assert context != null : "Either pass non-null session, or use cons with args";
      assert messageHandler != null;
      session = new MakeSession(context, messageHandler, true);
    }
    String scrName = "Build";
    if (Sequence.fromIterable(resources).isEmpty()) {
      String msg = scrName + " aborted: nothing to do";
      this.showError(msg);
      return new FutureValue<IResult>(new IResult.FAILURE(null));
    }

    MakeSequence makeSeq = new MakeSequence();
    makeSeq.prepareClusters(resources);
    makeSeq.prepareScipts(script, session);

    IScriptController ctl = this.completeController(controller, session);

    CoreMakeTask task = new CoreMakeTask(scrName, makeSeq, ctl, messageHandler);
    task.run(monitor);
    return new FutureValue<IResult>(task.getResult());
  }

  @Override
  public boolean isSessionActive() {
    return false;
  }

  @Override
  public boolean openNewSession(MakeSession session) {
    return false;
  }

  @Override
  public void closeSession(MakeSession session) {
  }

  @Override
  public void addListener(IMakeNotificationListener listener) {
    throw new UnsupportedOperationException();
  }

  @Override
  public void removeListener(IMakeNotificationListener listener) {
    throw new UnsupportedOperationException();
  }

  private void showError(String msg) {
    messageHandler.handle(new Message(MessageKind.ERROR, msg));
  }

  private IScriptController completeController(final IScriptController ctl, MakeSession makeSession) {
    // client is responsible to populate properties of possible facets, don't do anything if 
    // client has supplied a conrtoller. If not, create a default controller that expects Generate facet to 
    // jump in. It's not a nice idea, and we'll drop this soon, as it's MakeService client's responsibility 
    // to configure scripts, not ours 
    if (ctl != null) {
      return ctl;
    }
    final GenerateFacetInitializer initGenFacet = new GenerateFacetInitializer(makeSession);
    IConfigMonitor monitor = new AbstractMakeService.DefaultMonitor(makeSession);
    return new IScriptController.Stub(monitor, monitor) {
      @Override
      public void setup(IPropertiesPool pool) {
        initGenFacet.populate(pool);
      }
    };
  }
}
