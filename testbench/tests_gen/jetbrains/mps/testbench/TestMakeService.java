package jetbrains.mps.testbench;

/*Generated by MPS */

import jetbrains.mps.make.IMakeService;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.messages.IMessageHandler;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.script.IScriptController;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.messages.Message;
import jetbrains.mps.messages.MessageKind;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.make.script.IOption;
import jetbrains.mps.make.script.IQuery;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.script.IFeedback;
import com.intellij.openapi.progress.ProgressIndicator;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.make.script.IParametersPool;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import com.intellij.openapi.project.Project;
import jetbrains.mps.make.facet.ITarget;

public class TestMakeService implements IMakeService {
  private IOperationContext context;
  private IMessageHandler messageHandler;

  public TestMakeService(IOperationContext context, IMessageHandler messageHandler) {
    this.context = context;
    this.messageHandler = messageHandler;
  }

  public IResult make(Iterable<? extends IResource> resources) {
    return doMake(resources, null, null);
  }

  public IResult make(Iterable<? extends IResource> resources, IScript script) {
    return doMake(resources, script, null);
  }

  public IResult make(Iterable<? extends IResource> resources, IScript script, IScriptController controller) {
    return doMake(resources, script, controller);
  }

  private IResult doMake(Iterable<? extends IResource> inputRes, IScript script, IScriptController controller) {
    String scrName = "Build";

    if (Sequence.fromIterable(inputRes).isEmpty()) {
      String msg = scrName + " aborted: nothing to do";
      this.showError(msg);
      return new IResult.FAILURE(null);
    }


    if (!(script.isValid())) {
      String msg = scrName + " failed";
      showError(msg + ". Invalid script.");
      return new IResult.FAILURE(null);
    }

    IScriptController ctl = this.completeController(controller);
    IResult res;
    res = script.execute(ctl, inputRes);

    if (res == null) {
      String msg = scrName + " aborted";
      showError(msg);
    } else if (!(res.isSucessful())) {
      String msg = scrName + " failed";
      showError(msg + ". See previous messages for details.");
    }
    return res;
  }

  private void showError(String msg) {
    messageHandler.handle(new Message(MessageKind.ERROR, msg));
  }

  private IScriptController completeController(final IScriptController ctl) {
    final Wrappers._T<IConfigMonitor> cmon2delegate = new Wrappers._T<IConfigMonitor>(null);
    final IConfigMonitor cmon = new IConfigMonitor.Stub() {
      public <T extends IOption> T relayQuery(IQuery<T> query) {
        T opt = null;
        if (cmon2delegate.value != null) {
          opt = cmon2delegate.value.relayQuery(query);
        }
        return (opt != null ?
          opt :
          query.defaultOption()
        );
      }
    };
    final IJobMonitor jmon = new IJobMonitor.Stub() {
      @Override
      public void reportFeedback(IFeedback fdbk) {
        new MessageFeedbackStrategy(messageHandler).reportFeedback(fdbk);
      }
    };

    final ProgressIndicator pind = new EmptyProgressIndicator();
    return new IScriptController() {
      public void runConfigWithMonitor(final _FunctionTypes._void_P1_E0<? super IConfigMonitor> code) {
        if (ctl != null) {
          ctl.runConfigWithMonitor(new _FunctionTypes._void_P1_E0<IConfigMonitor>() {
            public void invoke(IConfigMonitor c) {
              try {
                cmon2delegate.value = c;
                code.invoke(cmon);
              } finally {
                cmon2delegate.value = null;
              }
            }
          });
        } else {
          code.invoke(cmon);
        }
      }

      public void runJobWithMonitor(_FunctionTypes._void_P1_E0<? super IJobMonitor> code) {
        code.invoke(jmon);
      }

      public void setup(IParametersPool pool) {
        Tuples._4<Project, IOperationContext, Boolean, _FunctionTypes._return_P0_E0<? extends ProgressIndicator>> vars = (Tuples._4<Project, IOperationContext, Boolean, _FunctionTypes._return_P0_E0<? extends ProgressIndicator>>) pool.parameters(new ITarget.Name("checkParameters"), Object.class);
        vars._0(TestMakeService.this.context.getProject());
        vars._1(TestMakeService.this.context);
        vars._2(true);
        vars._3(new _FunctionTypes._return_P0_E0<ProgressIndicator>() {
          public ProgressIndicator invoke() {
            return pind;
          }
        });

        if (ctl != null) {
          ctl.setup(pool);
        }
      }
    };
  }
}
