package jetbrains.mps.testbench;

/*Generated by MPS */

import jetbrains.mps.testbench.junit.suites.BaseCheckModulesTest;
import java.util.List;
import org.junit.runners.model.FrameworkMethod;
import org.junit.runners.model.TestClass;
import org.junit.Test;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.util.SNodeOperations;
import org.junit.Rule;
import org.junit.rules.TestWatchman;
import jetbrains.mps.testbench.junit.Order;
import org.junit.Assert;
import jetbrains.mps.internal.collections.runtime.IterableUtils;

public class ProjectTest extends BaseCheckModulesTest {
  private static List<FrameworkMethod> METHODS = new TestClass(ProjectTest.class).getAnnotatedMethods(Test.class);
  private List<FrameworkMethod> methods = new ArrayList<FrameworkMethod>();
  private ProjectTestHelper.Token token;
  private boolean needGeneration;

  public ProjectTest(final SModule module) {
    super(module);
    this.methods.addAll(METHODS);
    token = ModelAccess.instance().runReadAction(new Computable<ProjectTestHelper.Token>() {
      @Override
      public ProjectTestHelper.Token compute() {
        return ProjectTestHelper.getToken(module, BaseCheckModulesTest.getContextProject());
      }
    });
    needGeneration = ModelAccess.instance().runReadAction(new Computable<Boolean>() {
      @Override
      public Boolean compute() {
        for (SModel descriptor : module.getModels()) {
          if (SNodeOperations.isGeneratable(descriptor)) {
            return true;
          }
        }
        return false;
      }
    });
  }

  @Rule
  public TestWatchman watchman = new TestWatchman() {
    @Override
    public void finished(FrameworkMethod method) {
      methods.remove(method);
      if (methods.size() == 0) {
        ProjectTestHelper.cleanUp(token);
      }
    }
  };

  @Test
  @Order(value = 1)
  public void buildModule() throws Exception {
    if (!(needGeneration)) {
      return;
    }
    if (!(ProjectTestHelper.build(token))) {
      List<String> errors = ProjectTestHelper.buildErrors(token);
      Assert.assertTrue("Build errors:\n" + IterableUtils.join(errors, "\n"), errors.isEmpty());
      List<String> warns = ProjectTestHelper.buildWarns(token);
      Assert.assertTrue("Build warnings:\n" + IterableUtils.join(warns, "\n"), warns.isEmpty());
    }
  }

  @Test
  @Order(value = 2)
  public void diffModule() throws Exception {
    if (!(needGeneration)) {
      return;
    }
    List<String> diffReport = ProjectTestHelper.getDiffReport(token);
    Assert.assertTrue("Difference:\n" + IterableUtils.join(diffReport, "\n"), diffReport.isEmpty());
  }
}
