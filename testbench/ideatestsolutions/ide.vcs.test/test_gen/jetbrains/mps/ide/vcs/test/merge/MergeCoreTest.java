package jetbrains.mps.ide.vcs.test.merge;

/*Generated by MPS */

import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import jetbrains.mps.WorkbenchMpsTest;
import java.io.File;
import org.junit.Test;
import org.junit.Assert;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.junit.BeforeClass;
import jetbrains.mps.RuntimeFlags;
import org.junit.AfterClass;
import java.io.IOException;
import jetbrains.mps.smodel.persistence.def.ModelReadException;

@RunWith(Parameterized.class)
public class MergeCoreTest extends WorkbenchMpsTest {
  private static final File TESTDATA_HOME = new File("testbench/modules/merge");
  private static boolean ourMergeDriverModeWas;
  private String myZipName;
  public MergeCoreTest(String testName, String zipName) {
    myZipName = zipName;
  }
  @Test
  public void testMerge() {
    try {
      Assert.assertTrue(myZipName, new MergeData(new File(MergeCoreTest.TESTDATA_HOME, myZipName)).check());
    } catch (Exception e) {
      e.printStackTrace();
      Assert.fail();
    }
  }
  @Parameterized.Parameters
  public static List<Object[]> params() {
    return Sequence.fromIterable(Sequence.fromArray(MergeCoreTest.TESTDATA_HOME.list())).where(new IWhereFilter<String>() {
      public boolean accept(String n) {
        return n.endsWith(".mps.zip");
      }
    }).sort(new ISelector<String, String>() {
      public String select(String n) {
        return n;
      }
    }, true).select(new ISelector<String, Object[]>() {
      public Object[] select(String n) {
        return new Object[]{n.replaceAll("\\.|-", "_"), n};
      }
    }).toListSequence();
  }
  @BeforeClass
  public static void setUpClass() {
    MergeCoreTest.ourMergeDriverModeWas = RuntimeFlags.isMergeDriverMode();

    RuntimeFlags.setMergeDriverMode(true);
  }
  @AfterClass
  public static void tearDownClass() {
    RuntimeFlags.setMergeDriverMode(MergeCoreTest.ourMergeDriverModeWas);
  }
  public static void main(String[] args) throws IOException, ModelReadException {
    setUpClass();
    for (Object[] p : params()) {
      new MergeData(new File(MergeCoreTest.TESTDATA_HOME, (String) p[1])).generate();
    }
  }
}
