package jetbrains.mps.baseLanguageInternal.structure;

/*Generated by MPS  */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.baseLanguage.structure.Type;
import java.util.Iterator;
import java.util.List;

public class InternalPartialInstanceMethodCall extends Expression {
  public static String METHOD_NAME = "methodName";
  public static String RETURN_TYPE = "returnType";
  public static String INSTANCE = "instance";
  public static String ACTUAL_ARGUMENT = "actualArgument";

  public  InternalPartialInstanceMethodCall(SNode node) {
    super(node);
  }

  public static InternalPartialInstanceMethodCall newInstance(SModel sm, boolean init) {
    return (InternalPartialInstanceMethodCall)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguageInternal.InternalPartialInstanceMethodCall", sm, GlobalScope.getInstance(), init).getAdapter();
  }
  public static InternalPartialInstanceMethodCall newInstance(SModel sm) {
    return InternalPartialInstanceMethodCall.newInstance(sm, false);
  }

  public String getMethodName() {
    return this.getProperty(InternalPartialInstanceMethodCall.METHOD_NAME);
  }
  public void setMethodName(String value) {
    this.setProperty(InternalPartialInstanceMethodCall.METHOD_NAME, value);
  }
  public Type getReturnType() {
    return (Type)this.getChild(InternalPartialInstanceMethodCall.RETURN_TYPE);
  }
  public void setReturnType(Type node) {
    super.setChild(InternalPartialInstanceMethodCall.RETURN_TYPE, node);
  }
  public Expression getInstance() {
    return (Expression)this.getChild(InternalPartialInstanceMethodCall.INSTANCE);
  }
  public void setInstance(Expression node) {
    super.setChild(InternalPartialInstanceMethodCall.INSTANCE, node);
  }
  public int getActualArgumentsCount() {
    return this.getChildCount(InternalPartialInstanceMethodCall.ACTUAL_ARGUMENT);
  }
  public Iterator<Expression> actualArguments() {
    return this.children(InternalPartialInstanceMethodCall.ACTUAL_ARGUMENT);
  }
  public List<Expression> getActualArguments() {
    return this.getChildren(InternalPartialInstanceMethodCall.ACTUAL_ARGUMENT);
  }
  public void addActualArgument(Expression node) {
    this.addChild(InternalPartialInstanceMethodCall.ACTUAL_ARGUMENT, node);
  }
  public void insertActualArgument(Expression prev, Expression node) {
    this.insertChild(prev, InternalPartialInstanceMethodCall.ACTUAL_ARGUMENT, node);
  }
}
