package jetbrains.mps.core.xml.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.core.xml.behavior.XmlElement_Behavior;

public class XmlElement_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    this.indentBuffer();
    this.append("<");
    this.append(SPropertyOperations.getString(node, "tagName"));
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "attributes", true)).isNotEmpty()) {
      this.append(" ");
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "attributes", true)).isNotEmpty()) {
      for (SNode item : SLinkOperations.getTargets(node, "attributes", true)) {
        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, "attributes", true)).last()) {
          this.append(" ");
        }
      }
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "content", true)).isEmpty() && SPropertyOperations.getBoolean(node, "shortEmptyNotation")) {
      this.append(" />");
      this.appendNewLine();
      return;
    }
    this.append(">");
    if (XmlElement_Behavior.call_isMultiline_8886258982030574875(node)) {
      this.appendNewLine();
      this.increaseDepth();
      if (ListSequence.fromList(SLinkOperations.getTargets(node, "content", true)).isNotEmpty()) {
        for (SNode item : SLinkOperations.getTargets(node, "content", true)) {
          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
        }
      }
      this.decreaseDepth();
      this.appendNewLine();
      this.indentBuffer();
    } else {
      this.increaseDepth();
      this.increaseDepth();
      if (ListSequence.fromList(SLinkOperations.getTargets(node, "content", true)).isNotEmpty()) {
        for (SNode item : SLinkOperations.getTargets(node, "content", true)) {
          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
        }
      }
      this.decreaseDepth();
      this.decreaseDepth();
    }
    this.append("</");
    this.append(SPropertyOperations.getString(node, "tagName"));
    this.append(">");
    this.appendNewLine();
  }
}
