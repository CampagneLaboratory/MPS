package TestLang.scripts;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.logging.Logger;
import java.util.Set;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.constraints.ModelConstraintsUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.behavior.IOperation_Behavior;
import jetbrains.mps.baseLanguage.behavior.DotExpression_Behavior;

public class Utils {
  private static final Object watchingLock = new Object();
  private static Map<String, Long> timeSummary = MapSequence.fromMap(new HashMap<String, Long>());
  private static long lastUpdateTime = 0;
  private static boolean isRunning = false;
  private static Logger LOG = Logger.getLogger(Utils.class);

  public Utils() {
  }

  public static void startWatchingIfNeeded() {
    synchronized (watchingLock) {
      if (!(Utils.isRunning)) {
        Utils.isRunning = true;
        LOG.warning("!!! Starting watching");
        new Thread(new Runnable() {
          public void run() {
            while (true) {
              synchronized (Utils.watchingLock) {
                if (System.currentTimeMillis() - Utils.lastUpdateTime > 10000) {
                  if (MapSequence.fromMap(Utils.timeSummary).count() != 0) {
                    LOG.warning("!!! Time summary " + Utils.timeSummary);
                    MapSequence.fromMap(Utils.timeSummary).clear();
                    Utils.isRunning = false;
                    LOG.warning("!!! Stoping watching");
                    break;
                  }
                }
              }
              try {
                Thread.sleep(1000);
              } catch (InterruptedException e) {
                // nothing 
              }
            }
          }
        }).start();
      }
    }
  }

  public static void addDataToProfile(String key, long time) {
    startWatchingIfNeeded();
    synchronized (Utils.watchingLock) {
      MapSequence.fromMap(timeSummary).put(key, time + ((MapSequence.fromMap(timeSummary).containsKey(key) ?
        MapSequence.fromMap(timeSummary).get(key) :
        0
      )));
      Utils.lastUpdateTime = System.currentTimeMillis();
    }
  }

  public static Set<SNode> getNodes(String profilerKey, _FunctionTypes._return_P0_E0<? extends Scope> scopeProvider, SReference ref) {
    Set<SNode> result = SetSequence.fromSet(new HashSet());
    long time = System.currentTimeMillis();
    try {
      Scope scope = scopeProvider.invoke();
      result = (scope == null ?
        SetSequence.fromSet(new HashSet()) :
        SetSequence.fromSetWithValues(new HashSet(), scope.getAvailableElements(null))
      );
    } catch (Exception e) {
      // todo: ? 
    }
    time = System.currentTimeMillis() - time;
    if (time > 2 * 1000) {
      LOG.warning("too long... " + time + "@" + profilerKey + ":" + ref.getSourceNode().getModel().getSModelFqName().getLongName() + "/" + ref.getSourceNode().getId() + "/" + ref.getRole());
    }
    addDataToProfile(profilerKey, time);
    return result;
  }

  public static boolean checkScopes(SNode node, Set<SNode> oldNodes, Set<SNode> newNodes, boolean debugInfo) {
    Set<SNode> intersect = SetSequence.fromSetWithValues(new HashSet(), SetSequence.fromSet(oldNodes).intersect(SetSequence.fromSet(newNodes)));
    SetSequence.fromSet(oldNodes).removeSequence(SetSequence.fromSet(intersect));
    SetSequence.fromSet(newNodes).removeSequence(SetSequence.fromSet(intersect));
    if (SetSequence.fromSet(oldNodes).count() != 0 || SetSequence.fromSet(newNodes).count() != 0) {
      if (debugInfo) {
        LOG.warning("Something wrong with " + node + " with id " + node.getId());
        LOG.warning("in common size " + SetSequence.fromSet(intersect).count());
        LOG.warning("in old but not new " + oldNodes);
        LOG.warning("in new but not old " + newNodes);
      }
      return false;
    } else {
      return true;
    }
  }

  public static Set<SNode> getOldScopeFromRef(final SReference ref) {
    return getNodes("old scope", new _FunctionTypes._return_P0_E0<Scope>() {
      public Scope invoke() {
        ModelConstraintsUtil.ReferenceDescriptor descriptor = ModelConstraintsUtil.getReferenceDescriptor(ref, null);
        return descriptor.getScope();
      }
    }, ref);
  }

  public static Set<SNode> getNewScopeFromRef(final SReference ref, final SNode kind) {
    if (ref.getSourceNode().isInstanceOfConcept(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1081236700937"))) {
      return getNodes("new scope/from ref", new _FunctionTypes._return_P0_E0<Scope>() {
        public Scope invoke() {
          return Classifier_Behavior.call_getVisibleMembers_8083692786967356611(SLinkOperations.getTarget(SNodeOperations.cast(ref.getSourceNode(), "jetbrains.mps.baseLanguage.structure.StaticMethodCall"), "classConcept", false), ref.getSourceNode(), SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
        }
      }, ref);
    }
    return getNodes("new scope/from ref", new _FunctionTypes._return_P0_E0<Scope>() {
      public Scope invoke() {
        return Scope.getScope(ref.getSourceNode(), ref.getSourceNode(), kind);
      }
    }, ref);
  }

  public static Set<SNode> getNewScopeForIOperation(final SReference ref, final SNode kind) {
    return getNodes("new scope/from ioperation", new _FunctionTypes._return_P0_E0<Scope>() {
      public Scope invoke() {
        // ref should be from IOperation 
        SNode dotExpression = IOperation_Behavior.call_getDotExpression_1224687669172(SNodeOperations.cast(ref.getSourceNode(), "jetbrains.mps.baseLanguage.structure.IOperation"));
        return Classifier_Behavior.call_getVisibleMembers_8083692786967356611(DotExpression_Behavior.call_getClassifier_1213877410697(dotExpression), dotExpression, kind);
      }
    }, ref);
  }

  public static boolean isInComment(SNode node) {
    return (SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.SingleLineComment", false, false) != null) || (SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock", false, false) != null);
  }
}
