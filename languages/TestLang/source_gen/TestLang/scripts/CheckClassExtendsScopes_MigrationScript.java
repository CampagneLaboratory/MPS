package TestLang.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.baseLanguage.search.VisibleClassifiersScope;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.baseLanguage.scopes.ClassifierScopes;

public class CheckClassExtendsScopes_MigrationScript extends BaseMigrationScript {
  public CheckClassExtendsScopes_MigrationScript(IOperationContext operationContext) {
    super("Check class extends scopes");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Testing";
      }

      public String getAdditionalInfo() {
        return "Testing";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.baseLanguage.structure.ClassConcept";
      }

      public boolean isApplicableInstanceNode(final SNode node) {
        String excludingPrefix = "123collection";
        String startsFrom = "";

        String name = SPropertyOperations.getString(node, "name");
        if (StringUtils.isEmpty(name)) {
          return false;
        }
        if (name.startsWith(excludingPrefix)) {
          return false;
        }
        if (!(name.startsWith(startsFrom))) {
          return false;
        }

        _FunctionTypes._return_P0_E0<? extends Scope> oldScopeProvider = new _FunctionTypes._return_P0_E0<ISearchScope.Adapter>() {
          public ISearchScope.Adapter invoke() {
            return new ISearchScope.Adapter(new VisibleClassifiersScope(node, IClassifiersSearchScope.NON_FINAL_CLASS, GlobalScope.getInstance()));
          }
        };
        _FunctionTypes._return_P0_E0<? extends Scope> newScopeProvider = new _FunctionTypes._return_P0_E0<Scope>() {
          public Scope invoke() {
            return ClassifierScopes.getClassesForExtends(node, GlobalScope.getInstance());
          }
        };

        return !(Utils.checkScopes(node, Utils.getNodes("old scope", oldScopeProvider), Utils.getNodes("new scope/from ioperation", newScopeProvider), true));
      }

      public void doUpdateInstanceNode(final SNode node) {
        _FunctionTypes._return_P0_E0<? extends Scope> oldScopeProvider = new _FunctionTypes._return_P0_E0<ISearchScope.Adapter>() {
          public ISearchScope.Adapter invoke() {
            return new ISearchScope.Adapter(new VisibleClassifiersScope(node, IClassifiersSearchScope.NON_FINAL_CLASS, GlobalScope.getInstance()));
          }
        };
        _FunctionTypes._return_P0_E0<? extends Scope> newScopeProvider = new _FunctionTypes._return_P0_E0<Scope>() {
          public Scope invoke() {
            return ClassifierScopes.getClassesForExtends(node, GlobalScope.getInstance());
          }
        };

        Utils.checkScopes(node, Utils.getNodes("old scope", oldScopeProvider), Utils.getNodes("new scope/from ioperation", newScopeProvider), true);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
