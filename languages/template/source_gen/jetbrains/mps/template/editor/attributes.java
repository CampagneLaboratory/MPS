package jetbrains.mps.template.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCellKeyMap;
import jetbrains.mps.nodeEditor.EditorCellKeyMapAction;
import java.awt.event.KeyEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class attributes extends EditorCellKeyMap {
  public attributes() {
    this.setApplicableToEveryModel(true);
    EditorCellKeyMapAction action;
    action = new attributes.attributes_Action0();
    this.putAction("ctrl+shift", "VK_F", action);
  }

  public static class attributes_Action0 extends EditorCellKeyMapAction {
    public attributes_Action0() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "mark node as template root";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      return this.canExecute_internal(keyEvent, editorContext, contextNode, this.getSelectedNodes(editorContext));
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (ListSequence.fromList(selectedNodes).count() != 1) {
        return false;
      }
      if (SNodeOperations.getAncestor(node, "jetbrains.mps.template.structure.MtlTemplate", false, false) == null) {
        return false;
      }
      if (ListSequence.fromList(SNodeOperations.getAncestors(node, null, false)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isAttribute(it);
        }
      }).isNotEmpty()) {
        return false;
      }
      SNode outermost = ListSequence.fromList(SNodeOperations.getAncestors(node, "jetbrains.mps.template.structure.MtlTemplate", false)).last();
      if (!(ListSequence.fromList(SNodeOperations.getAncestors(node, null, true)).contains(SLinkOperations.getTarget(outermost, "template", true)))) {
        return false;
      }

      return true;
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode applyToNode = ListSequence.fromList(SNodeOperations.getAncestors(node, null, true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(SNodeOperations.isAttribute(it));
        }
      }).first();
      SNodeFactoryOperations.setNewAttribute(applyToNode, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.template.structure.MtlTemplateRoot")), "jetbrains.mps.template.structure.MtlTemplateRoot");
    }

    public String getKeyStroke() {
      return "ctrl shift F";
    }
  }
}
