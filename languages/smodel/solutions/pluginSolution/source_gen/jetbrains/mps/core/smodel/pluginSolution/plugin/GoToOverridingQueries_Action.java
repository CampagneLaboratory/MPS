package jetbrains.mps.core.smodel.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import com.intellij.openapi.project.Project;

public class GoToOverridingQueries_Action extends BaseAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(GoToOverridingQueries_Action.class);

  public GoToOverridingQueries_Action() {
    super("Go to Overriding Queries", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    final Wrappers._T<ModuleReference> moduleReference = new Wrappers._T<ModuleReference>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        moduleReference.value = MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("41a590b4-0cca-40d1-9a11-d9ef253734cc")).getModuleReference();
      }
    });
    return QueriesGoToUtil.hasApplicableFinder(((SNode) MapSequence.fromMap(_params).get("queryNode")), moduleReference.value, GoToOverridingQueries_Action.this.getFinderName(_params));
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "GoToOverridingQueries", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node != null) {
        if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.smodel.structure.SConceptQuery"))) {
          node = null;
        }
      }
      MapSequence.fromMap(_params).put("queryNode", node);
    }
    if (MapSequence.fromMap(_params).get("queryNode") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("selectedCell", event.getData(MPSEditorDataKeys.EDITOR_CELL));
    if (MapSequence.fromMap(_params).get("selectedCell") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final Wrappers._T<ModuleReference> moduleReference = new Wrappers._T<ModuleReference>();
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          moduleReference.value = MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("41a590b4-0cca-40d1-9a11-d9ef253734cc")).getModuleReference();
        }
      });
      QueriesGoToUtil.executeFinders(((SNode) MapSequence.fromMap(_params).get("queryNode")), ((EditorCell) MapSequence.fromMap(_params).get("selectedCell")), ((Project) MapSequence.fromMap(_params).get("project")), moduleReference.value, GoToOverridingQueries_Action.this.getFinderName(_params));
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "GoToOverridingQueries", t);
      }
    }
  }

  private String getFinderName(final Map<String, Object> _params) {
    return "jetbrains.mps.core.smodel.findUsages.OverridingQueries_Finder";
  }
}
