package jetbrains.mps.core.smodel.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.action.ModelActions;
import jetbrains.mps.nodeEditor.CellSide;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class QueriesGenerated {
  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_SConceptQuery_4366849661834324065(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SPropertyOperations.getBoolean(_context.getSourceNode(), "isAbstract") == false && SPropertyOperations.getBoolean(_context.getSourceNode(), "isFinal") == false && SPropertyOperations.getBoolean(_context.getSourceNode(), "isOverride") == false;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_SConceptQuery_4366849661834324250(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SPropertyOperations.getBoolean(_context.getSourceNode(), "isFinal") == false && SPropertyOperations.getBoolean(_context.getSourceNode(), "isAbstract") == false;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_SConceptQuery_4366849661834324284(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SPropertyOperations.getBoolean(_context.getSourceNode(), "isOverride") == false && SPropertyOperations.getBoolean(_context.getSourceNode(), "isAbstract") == false;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_MqlType_4366849661834346440(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getSourceNode()), "jetbrains.mps.core.smodel.structure.SConceptQuery");
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_SProperty_4366849661834355575(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return (SLinkOperations.getTarget(_context.getSourceNode(), "constraints", true) == null);
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_SChildLink_4366849661834362421(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return (SLinkOperations.getTarget(_context.getSourceNode(), "constraints", true) == null) && (SLinkOperations.getTarget(_context.getSourceNode(), "cardinality", true) == null);
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_SConceptQuery_4366849661834324058(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.smodel.structure.SConceptQuery");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SPropertyOperations.set(_context.getSourceNode(), "isAbstract", "" + true);
          return _context.getSourceNode();
        }

        public String getMatchingText(String pattern) {
          return "abstract";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }
      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_SConceptQuery_4366849661834324236(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.smodel.structure.SConceptQuery");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SPropertyOperations.set(_context.getSourceNode(), "isFinal", "" + true);
          return _context.getSourceNode();
        }

        public String getMatchingText(String pattern) {
          return "final";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }
      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_SConceptQuery_4366849661834324270(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.smodel.structure.SConceptQuery");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SPropertyOperations.set(_context.getSourceNode(), "isOverride", "" + true);
          return _context.getSourceNode();
        }

        public String getMatchingText(String pattern) {
          return "override";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }
      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_MqlType_4366849661834346436(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      Computable computable = new Computable() {
        public Object compute() {
          return SNodeOperations.getParent(_context.getSourceNode());
        }
      };
      SNode node = (SNode) computable.compute();
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createRightTransformHintSubstituteActions(node, CellSide.LEFT, _context.getTransformationTag(), operationContext)));
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_SProperty_4366849661834355570(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.smodel.structure.SConceptQuery");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SNode query = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "jetbrains.mps.core.smodel.structure.SConceptQuery");
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getSourceNode(), "type", true), "jetbrains.mps.core.structure.structure.SEnumerationDataType")) {
            // TODO 
          } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getSourceNode(), "type", true), "jetbrains.mps.core.structure.structure.SPrimitiveDataType")) {
            SNode primitive = SNodeOperations.cast(SLinkOperations.getTarget(_context.getSourceNode(), "type", true), "jetbrains.mps.core.structure.structure.SPrimitiveDataType");
            if (SPropertyOperations.hasValue(primitive, "kind", "bool", "string")) {
              SNodeFactoryOperations.setNewChild(query, "type", "jetbrains.mps.core.query.structure.MqlBoolType");
            } else if (SPropertyOperations.hasValue(primitive, "kind", "string", "string")) {
              SNodeFactoryOperations.setNewChild(query, "type", "jetbrains.mps.core.query.structure.MqlStringType");
            } else if (SPropertyOperations.hasValue(primitive, "kind", "int", "string")) {
              SNodeFactoryOperations.setNewChild(query, "type", "jetbrains.mps.core.query.structure.MqlIntType");
            }
          }
          SPropertyOperations.set(query, "name", SPropertyOperations.getString(_context.getSourceNode(), "name"));
          return query;
        }

        public String getMatchingText(String pattern) {
          return "(";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }
      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_SChildLink_4366849661834362332(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.core.smodel.structure.SConceptQuery");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SNode query = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "jetbrains.mps.core.smodel.structure.SConceptQuery");
          SLinkOperations.setTarget(query, "type", SConceptOperations.createNewNode("jetbrains.mps.core.smodel.structure.MqlNodeType", null), true);
          SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(query, "type", true), "jetbrains.mps.core.smodel.structure.MqlNodeType"), "concept", SLinkOperations.getTarget(_context.getSourceNode(), "target", false), false);
          SPropertyOperations.set(query, "name", SPropertyOperations.getString(_context.getSourceNode(), "name"));
          return query;
        }

        public String getMatchingText(String pattern) {
          return "(";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }
      });
    }
    return result;
  }
}
