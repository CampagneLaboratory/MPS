package jetbrains.mps.core.smodel.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.core.query.behavior.MqlSelector_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.query.behavior.MqlExpression_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.core.query.runtime.MultipleElementsScope;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class SConceptQueryCall_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_j6o8lg_a0a0a0a0a1a0b0a1a0 = new SNodePointer("r:a3118036-be6c-4f13-a069-b1078aa590d5(jetbrains.mps.core.smodel.constraints)", "535637396506608322");

  public SConceptQueryCall_Constraints() {
    super("jetbrains.mps.core.smodel.structure.SConceptQueryCall");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("query", new BaseReferenceConstraintsDescriptor("query", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_j6o8lg_a0a0a0a0a1a0b0a1a0;
          }

          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            {
              List<SNode> result = new ArrayList<SNode>();
              SNode type;
              if ((_context.getReferenceNode() != null)) {
                type = MqlSelector_Behavior.call_getContainerType_228266671027861723(_context.getReferenceNode());
              } else if (SNodeOperations.isInstanceOf(_context.getEnclosingNode(), "jetbrains.mps.core.query.structure.MqlDotExpression")) {
                type = MqlExpression_Behavior.call_getType_228266671027861783(SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(), "jetbrains.mps.core.query.structure.MqlDotExpression"), "left", true));
              } else {
                type = null;
              }
              if (SNodeOperations.isInstanceOf(type, "jetbrains.mps.core.smodel.structure.MqlNodeType")) {
                SNode decl = SLinkOperations.getTarget(SNodeOperations.cast(type, "jetbrains.mps.core.smodel.structure.MqlNodeType"), "concept", false);
                if ((decl != null)) {
                  ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getTargets(decl, "members", true)).where(new IWhereFilter<SNode>() {
                    public boolean accept(SNode it) {
                      return SNodeOperations.isInstanceOf(it, "jetbrains.mps.core.smodel.structure.SConceptQuery");
                    }
                  }).select(new ISelector<SNode, SNode>() {
                    public SNode select(SNode it) {
                      return SNodeOperations.cast(it, "jetbrains.mps.core.smodel.structure.SConceptQuery");
                    }
                  }));
                }
              }
              return new MultipleElementsScope(result, new _FunctionTypes._return_P1_E0<String, SNode>() {
                public String invoke(SNode n) {
                  return SPropertyOperations.getString(SNodeOperations.cast(n, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
                }
              });
            }
          }
        };
      }
    });
    return references;
  }
}
