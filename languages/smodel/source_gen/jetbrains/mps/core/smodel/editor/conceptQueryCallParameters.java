package jetbrains.mps.core.smodel.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.ParametersInformation;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.editor.runtime.StyledTextPrinter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.core.behavior.BaseConcept_Behavior;

public class conceptQueryCallParameters extends ParametersInformation<SNode> {
  public conceptQueryCallParameters() {
  }

  public Iterable<SNode> getMethods(SNode node, EditorContext editorContext) {
    return Sequence.<SNode>singleton(SLinkOperations.getTarget(node, "query", false));
  }

  public void getStyledMethodPresentation(SNode node, EditorContext editorContext, SNode parameterObject, StyledTextPrinter styledText) {
    this.fillPresentation(parameterObject, this.getSelectedActualArgument(editorContext, node), styledText);
  }

  public boolean isMethodCurrent(SNode node, EditorContext editorContext, SNode parameterObject) {
    return true;
  }

  private SNode getSelectedActualArgument(EditorContext editorContext, final SNode queryCall) {
    SNode selectedNode = editorContext.getSelectedNode();
    if (selectedNode == null) {
      return null;
    }
    return ListSequence.fromList(SNodeOperations.getAncestors(selectedNode, "jetbrains.mps.core.query.structure.MqlExpression", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.getParent(it) == queryCall && SNodeOperations.getContainingLinkDeclaration(it) == SLinkOperations.findLinkDeclaration("jetbrains.mps.core.smodel.structure.SConceptQueryCall", "arguments");
      }
    });
  }

  /*package*/ void fillPresentation(SNode query, SNode selectedActualArgument, StyledTextPrinter styledText) {
    if (SPropertyOperations.getString(query, "name") != null) {
      styledText.append(SPropertyOperations.getString(query, "name"));
    } else {
      styledText.append("<no name>");
    }

    int argumentIndex = (selectedActualArgument != null ?
      SNodeOperations.getIndexInParent(selectedActualArgument) :
      -1
    );
    styledText.append("(");
    for (SNode param : SLinkOperations.getTargets(query, "parameters", true)) {
      if (SNodeOperations.getIndexInParent(param) > 0) {
        styledText.append(", ");
      }
      if (SNodeOperations.getIndexInParent(param) == argumentIndex) {
        styledText.setBold(true);
      }
      if (SLinkOperations.getTarget(param, "type", true) != null) {
        styledText.append(BaseConcept_Behavior.call_getPresentation_1213877396640(SLinkOperations.getTarget(param, "type", true)));
      } else {
        styledText.append("???");
      }
      if (SPropertyOperations.getString(param, "name") != null) {
        styledText.append(" " + SPropertyOperations.getString(param, "name"));
      }
      styledText.setBold(false);
    }
    styledText.append(")");
  }
}
