package jetbrains.mps.core.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.Language;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Priority;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.ide.messages.MessagesViewTool;
import com.intellij.openapi.project.Project;
import jetbrains.mps.messages.IMessageHandler;
import jetbrains.mps.messages.IMessage;
import jetbrains.mps.messages.Message;
import jetbrains.mps.messages.MessageKind;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import jetbrains.mps.core.util.merge.MergeSession;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.persistence.DefaultModelRoot;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MigrateStructure_Action extends BaseAction {
  private static final Icon ICON = null;

  public MigrateStructure_Action() {
    super("Migrate structure", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return ((SModule) MapSequence.fromMap(_params).get("module")) instanceof Language;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "MigrateStructure", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(PlatformDataKeys.PROJECT));
    MapSequence.fromMap(_params).put("module", event.getData(MPSCommonDataKeys.MODULE));
    if (MapSequence.fromMap(_params).get("module") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final MessagesViewTool tool = ((Project) MapSequence.fromMap(_params).get("project")).getComponent(MessagesViewTool.class);
      if (tool == null) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("cannot get message view tool");
        }
      }
      IMessageHandler mh = new IMessageHandler() {
        public void handle(IMessage p0) {
          tool.add(p0, "Migrate structure");
        }

        public void clear() {
          tool.clear("Migrate structure");
        }
      };
      Language language = (Language) ((SModule) MapSequence.fromMap(_params).get("module"));
      mh.handle(new Message(MessageKind.INFORMATION, "converting " + language.getModuleFqName()));

      Language newStructureLanguage = (Language) MPSModuleRepository.getInstance().getModuleByFqName("jetbrains.mps.core.structure");
      language.addUsedLanguage(newStructureLanguage.getModuleReference());
      String newModelName = language.getModuleName() + ".core";
      SModel desc = SModelRepository.getInstance().getModelDescriptor(newModelName);
      SModel newStructure;
      SNode converted = new LanguageConverter(language, mh).convert();
      if (desc instanceof DefaultSModelDescriptor) {
        MergeSession session = new MergeSession(mh);
        session.replace((DefaultSModelDescriptor) desc, Sequence.<SNode>singleton(converted));
        session.restoreRefs();
        session.apply();
        mh.handle(new Message(MessageKind.INFORMATION, "merged"));
      } else {
        DefaultModelRoot root = (DefaultModelRoot) Sequence.fromIterable(((Iterable<ModelRoot>) language.getModelRoots())).where(new IWhereFilter<ModelRoot>() {
          public boolean accept(ModelRoot it) {
            return it instanceof DefaultModelRoot;
          }
        }).first();
        newStructure = root.createModel(newModelName);
        if (newStructure == null) {
          mh.handle(new Message(MessageKind.INFORMATION, "cannot create model `" + newModelName + "': ()"));
          return;
        }
        ((jetbrains.mps.smodel.SModel) newStructure).addLanguage(newStructureLanguage.getModuleReference());
        newStructure.addRootNode(converted);
        mh.handle(new Message(MessageKind.INFORMATION, "new model created"));
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "MigrateStructure", t);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(MigrateStructure_Action.class);
}
