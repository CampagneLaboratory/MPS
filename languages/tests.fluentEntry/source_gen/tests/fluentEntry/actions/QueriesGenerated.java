package tests.fluentEntry.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.DefaultSimpleSubstituteAction;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class QueriesGenerated {
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expr_4968757372716348783(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x9e9553a54bc4441aL, 0x992838b86f493795L, 0x44f492813fdc7568L, "tests.fluentEntry.structure.Integer").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode b = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x9e9553a54bc4441aL, 0x992838b86f493795L, 0x44f492813fdc7568L, "tests.fluentEntry.structure.Integer")));
            SPropertyOperations.set(b, MetaAdapterFactory.getProperty(0x9e9553a54bc4441aL, 0x992838b86f493795L, 0x44f492813fdc7568L, 0x44f492813fe0732fL, "number"), "" + (Integer.parseInt(pattern.trim())));
            return b;
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            if (LOG.isInfoEnabled()) {
              LOG.info("pattern='" + pattern + "'");
            }
            {
              Pattern _pattern_0 = REGEXP_x583g4_a0a0b0c0a0a0a0c0a0b0a;
              Matcher _matcher_0 = _pattern_0.matcher(pattern);
              if (_matcher_0.matches()) {
                if (LOG.isInfoEnabled()) {
                  LOG.info("fluent returning true");
                }
                return true;
              }
            }
            return false;
          }
          public String getDescriptionText(String pattern) {
            return "Fluent Entry";
          }
          public String getMatchingText(String pattern) {
            return ((pattern == null ? null : pattern.trim()));
          }
          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
          public boolean isFluentEntry() {
            return true;
          }

        });
      }
    }
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x9e9553a54bc4441aL, 0x992838b86f493795L, 0x44f492813fdc7568L, "tests.fluentEntry.structure.Integer").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode b = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x9e9553a54bc4441aL, 0x992838b86f493795L, 0x44f492813fdc7568L, "tests.fluentEntry.structure.Integer")));
            SPropertyOperations.set(b, MetaAdapterFactory.getProperty(0x9e9553a54bc4441aL, 0x992838b86f493795L, 0x44f492813fdc7568L, 0x44f492813fe0732fL, "number"), "" + (Integer.parseInt(pattern.trim())));
            return SNodeOperations.replaceWithAnother(_context.getCurrentTargetNode(), b);
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            if (LOG.isInfoEnabled()) {
              LOG.info("pattern='" + pattern + "'");
            }
            {
              Pattern _pattern_0 = REGEXP_x583g4_a0a0b0c0a0a0a0c0b0b0a;
              Matcher _matcher_0 = _pattern_0.matcher(pattern);
              if (_matcher_0.matches()) {
                if (LOG.isInfoEnabled()) {
                  LOG.info("fluent returning true");
                }
                return true;
              }
            }
            return false;
          }
          public String getDescriptionText(String pattern) {
            return "Simple Item Substitution";
          }
          public String getMatchingText(String pattern) {
            return ((pattern == null ? null : pattern.trim()));
          }
          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }

        });
      }
    }
    return result;
  }
  protected static Logger LOG = LogManager.getLogger(QueriesGenerated.class);
  private static Pattern REGEXP_x583g4_a0a0b0c0a0a0a0c0a0b0a = Pattern.compile("\\d+[ ]", 0);
  private static Pattern REGEXP_x583g4_a0a0b0c0a0a0a0c0b0b0a = Pattern.compile("\\d+[ ]", 0);
}
