package jetbrains.mps.baseLanguage.classifiers.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myIClassifier__BehaviorDescriptor = new IClassifier__BehaviorDescriptor();
  private final BHDescriptor myIMember__BehaviorDescriptor = new IMember__BehaviorDescriptor();
  private final BHDescriptor myIClassifierPart__BehaviorDescriptor = new IClassifierPart__BehaviorDescriptor();
  private final BHDescriptor myThisClassifierExpression__BehaviorDescriptor = new ThisClassifierExpression__BehaviorDescriptor();
  private final BHDescriptor myBaseClassifierType__BehaviorDescriptor = new BaseClassifierType__BehaviorDescriptor();
  private final BHDescriptor myDefaultClassifierType__BehaviorDescriptor = new DefaultClassifierType__BehaviorDescriptor();
  private final BHDescriptor myIMemberOperation__BehaviorDescriptor = new IMemberOperation__BehaviorDescriptor();
  private final BHDescriptor myDefaultClassifierMethodDeclaration__BehaviorDescriptor = new DefaultClassifierMethodDeclaration__BehaviorDescriptor();
  private final BHDescriptor myDefaultClassifierFieldDeclaration__BehaviorDescriptor = new DefaultClassifierFieldDeclaration__BehaviorDescriptor();
  private final BHDescriptor myDefaultClassifierFieldAccessOperation__BehaviorDescriptor = new DefaultClassifierFieldAccessOperation__BehaviorDescriptor();
  private final BHDescriptor mySuperClassifierExpresson__BehaviorDescriptor = new SuperClassifierExpresson__BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[11];
    myConceptBehaviorIds[0] = 0x118bc6b2af5L;
    myConceptBehaviorIds[1] = 0x118bc6becc0L;
    myConceptBehaviorIds[2] = 0x118bc6e188eL;
    myConceptBehaviorIds[3] = 0x118bc751a81L;
    myConceptBehaviorIds[4] = 0x118bc77d845L;
    myConceptBehaviorIds[5] = 0x118bc7942feL;
    myConceptBehaviorIds[6] = 0x118bca97396L;
    myConceptBehaviorIds[7] = 0x118bd6ee3c3L;
    myConceptBehaviorIds[8] = 0x11aa7fc0293L;
    myConceptBehaviorIds[9] = 0x11aa7fc7570L;
    myConceptBehaviorIds[10] = 0x11b74b0357cL;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myIClassifier__BehaviorDescriptor;
      case 1:
        return myIMember__BehaviorDescriptor;
      case 2:
        return myIClassifierPart__BehaviorDescriptor;
      case 3:
        return myThisClassifierExpression__BehaviorDescriptor;
      case 4:
        return myBaseClassifierType__BehaviorDescriptor;
      case 5:
        return myDefaultClassifierType__BehaviorDescriptor;
      case 6:
        return myIMemberOperation__BehaviorDescriptor;
      case 7:
        return myDefaultClassifierMethodDeclaration__BehaviorDescriptor;
      case 8:
        return myDefaultClassifierFieldDeclaration__BehaviorDescriptor;
      case 9:
        return myDefaultClassifierFieldAccessOperation__BehaviorDescriptor;
      case 10:
        return mySuperClassifierExpresson__BehaviorDescriptor;
      default:
        return null;
    }
  }
}
