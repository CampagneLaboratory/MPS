package jetbrains.mps.baseLanguage.classifiers.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifier", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldAccessOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodCallOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.classifiers.structure.IClassifier", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.classifiers.structure.IMember", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.classifiers.structure.SuperClassifierExpresson", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpression", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier").children(new String[]{"field", "method"}, new boolean[]{true, true}).create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldAccessOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation").references("field").staticScope(StaticScope.NONE).create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldDeclaration").super_("jetbrains.mps.baseLanguage.structure.FieldDeclaration").parents("jetbrains.mps.baseLanguage.structure.FieldDeclaration", "jetbrains.mps.baseLanguage.classifiers.structure.IMember").create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodCallOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation").references("method").children(new String[]{"actualArgument"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.baseLanguage.classifiers.structure.IMember", "jetbrains.mps.baseLanguage.structure.IVisible").create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierType").super_("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").parents("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").references("classifier").staticScope(StaticScope.NONE).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.IClassifier").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable").create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart").interface_().create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.IMember").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation").interface_().parents("jetbrains.mps.baseLanguage.structure.IOperation").references("member").create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.SuperClassifierExpresson").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("super", "super classifier").staticScope(StaticScope.NONE).create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IThisExpression").references("classifier").alias("this", "this classifier").staticScope(StaticScope.NONE).create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifier", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldAccessOperation", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldDeclaration", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodCallOperation", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierType", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart", "jetbrains.mps.baseLanguage.classifiers.structure.IMember", "jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation", "jetbrains.mps.baseLanguage.classifiers.structure.SuperClassifierExpresson", "jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpression"};
}
