package jetbrains.mps.baseLanguage.classifiers.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.StaticScope;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import org.jetbrains.annotations.Nullable;

import java.util.Arrays;
import java.util.Collection;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBaseClassifierType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDefaultClassifier = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier").children(new String[]{"field", "method"}, new boolean[]{true, true}).create();
  /*package*/ final ConceptDescriptor myConceptDefaultClassifierFieldAccessOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldAccessOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation").references("field").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDefaultClassifierFieldDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldDeclaration").super_("jetbrains.mps.baseLanguage.structure.FieldDeclaration").parents("jetbrains.mps.baseLanguage.structure.FieldDeclaration", "jetbrains.mps.baseLanguage.classifiers.structure.IMember").create();
  /*package*/ final ConceptDescriptor myConceptDefaultClassifierMethodCallOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodCallOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation").references("method").children(new String[]{"actualArgument"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDefaultClassifierMethodDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.baseLanguage.classifiers.structure.IMember", "jetbrains.mps.baseLanguage.structure.IVisible").create();
  /*package*/ final ConceptDescriptor myConceptDefaultClassifierType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierType").super_("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").parents("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").references("classifier").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIClassifier = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.IClassifier").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable").create();
  /*package*/ final ConceptDescriptor myConceptIClassifierPart = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIMember = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.IMember").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptIMemberOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation").interface_().parents("jetbrains.mps.baseLanguage.structure.IOperation").references("member").create();
  /*package*/ final ConceptDescriptor myConceptSuperClassifierExpresson = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.SuperClassifierExpresson").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("super", "super classifier").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptThisClassifierExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IThisExpression").references("classifier").alias("this", "this classifier").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBaseClassifierType, myConceptDefaultClassifier, myConceptDefaultClassifierFieldAccessOperation, myConceptDefaultClassifierFieldDeclaration, myConceptDefaultClassifierMethodCallOperation, myConceptDefaultClassifierMethodDeclaration, myConceptDefaultClassifierType, myConceptIClassifier, myConceptIClassifierPart, myConceptIMember, myConceptIMemberOperation, myConceptSuperClassifierExpresson, myConceptThisClassifierExpression);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0q, conceptFqName)) {
      case 0:
        return myConceptBaseClassifierType;
      case 1:
        return myConceptDefaultClassifier;
      case 2:
        return myConceptDefaultClassifierFieldAccessOperation;
      case 3:
        return myConceptDefaultClassifierFieldDeclaration;
      case 4:
        return myConceptDefaultClassifierMethodCallOperation;
      case 5:
        return myConceptDefaultClassifierMethodDeclaration;
      case 6:
        return myConceptDefaultClassifierType;
      case 7:
        return myConceptIClassifier;
      case 8:
        return myConceptIClassifierPart;
      case 9:
        return myConceptIMember;
      case 10:
        return myConceptIMemberOperation;
      case 11:
        return myConceptSuperClassifierExpresson;
      case 12:
        return myConceptThisClassifierExpression;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0q = new String[]{"jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifier", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldAccessOperation", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldDeclaration", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodCallOperation", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration", "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierType", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart", "jetbrains.mps.baseLanguage.classifiers.structure.IMember", "jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation", "jetbrains.mps.baseLanguage.classifiers.structure.SuperClassifierExpresson", "jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpression"};
}
