package jetbrains.mps.baseLanguage.doubleDispatch.typesystem;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

/**
 * This describes a group of related dispatch methods, i.e. which dispatch to each other
 */
public class DispatchGroupDescriptor {
  private String methodName;
  private boolean isStatic;
  private Iterable<SNode> otherParamTypes;
  public DispatchGroupDescriptor(SNode pattern) {
    methodName = SPropertyOperations.getString(pattern, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"));
    isStatic = SNodeOperations.isInstanceOf(pattern, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1081236700938l, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
    otherParamTypes = ListSequence.fromList(SLinkOperations.getChildren(pattern, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123132l, 1068580123134l, "parameter"))).skip(1).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 4972933694980447171l, 5680397130376446158l, "type"));
      }
    });
  }
  @Override
  public boolean equals(Object o) {
    if (!(o instanceof DispatchGroupDescriptor)) {
      return false;
    }

    DispatchGroupDescriptor other = (DispatchGroupDescriptor) o;

    if (isStatic != other.isStatic) {
      return false;
    }
    if (!(methodName.equals(other.methodName))) {
      return false;
    }
    if (Sequence.fromIterable(otherParamTypes).count() != Sequence.fromIterable(other.otherParamTypes).count()) {
      return false;
    }

    {
      Iterator<SNode> ths_it = Sequence.fromIterable(otherParamTypes).iterator();
      Iterator<SNode> oth_it = Sequence.fromIterable(other.otherParamTypes).iterator();
      SNode ths_var;
      SNode oth_var;
      while (ths_it.hasNext() && oth_it.hasNext()) {
        ths_var = ths_it.next();
        oth_var = oth_it.next();
        if (!(typesEqual(ths_var, oth_var))) {
          return false;
        }
      }
    }

    return true;
  }
  @Override
  public int hashCode() {
    return methodName.hashCode() + ((isStatic ? 1 : 0)) + Sequence.fromIterable(otherParamTypes).foldLeft(0, new ILeftCombinator<SNode, Integer>() {
      public Integer combine(Integer s, SNode it) {
        return s + typeHashCode(it);
      }
    });
  }
  private boolean typesEqual(SNode typ1, SNode typ2) {
    {
      SNode cls = typ1;
      if (SNodeOperations.isInstanceOf(cls, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, "jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
        {
          SNode cls2 = typ2;
          if (SNodeOperations.isInstanceOf(cls2, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, "jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
            return SLinkOperations.getTarget(cls, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier")) == SLinkOperations.getTarget(cls2, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier"));
          }
        }
        return false;
      }
    }
    if (SNodeOperations.isInstanceOf(typ2, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, "jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
      return false;
    }
    return BehaviorReflection.invokeVirtual(String.class, typ1, "virtual_getPresentation_1213877396640", new Object[]{}).equals(BehaviorReflection.invokeVirtual(String.class, typ2, "virtual_getPresentation_1213877396640", new Object[]{}));
  }
  private int typeHashCode(SNode typ) {
    {
      SNode cls = typ;
      if (SNodeOperations.isInstanceOf(cls, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, "jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
        return SLinkOperations.getTarget(cls, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier")).hashCode();
      }
    }
    return BehaviorReflection.invokeVirtual(String.class, typ, "virtual_getPresentation_1213877396640", new Object[]{}).hashCode();
  }
}
