package jetbrains.mps.baseLanguage.doubleDispatch.typesystem;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;

public class DispatchUtil {
  public DispatchUtil() {
  }

  public static SNode getParamClass(SNode method) {
    return SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).first(), "type", true), "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false), "jetbrains.mps.baseLanguage.structure.ClassConcept");
  }

  public static boolean isReadyMethod(SNode method) {
    return SPropertyOperations.getString(method, "name") != null && ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "type", true) != null && !(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(it, "type", true)), "jetbrains.mps.baseLanguage.structure.Type"));
      }
    }) && ListSequence.fromList(SLinkOperations.getTargets(method, "modifiers", true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.doubleDispatch.structure.DispatchModifier");
      }
    });
  }

  public static Iterable<SNode> ancestors(final SNode arg, boolean concreteFirst) {
    // true for baseLanguage, 
    // for smodel it would be node<BaseConcept> 
    final SNode rootOfHierarchy = SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_pzuztq_a0a0c0d(), "classifier", false), "jetbrains.mps.baseLanguage.structure.ClassConcept");

    Iterable<SNode> classes = Sequence.fromClosure(new ISequenceClosure<SNode>() {
      public Iterable<SNode> iterable() {
        return new Iterable<SNode>() {
          public Iterator<SNode> iterator() {
            return new YieldingIterator<SNode>() {
              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 7:
                      if (_3_cl == rootOfHierarchy) {
                        this.__CP__ = 8;
                        break;
                      }
                      this.__CP__ = 9;
                      break;
                    case 11:
                      if (_3_cl == null) {
                        this.__CP__ = 12;
                        break;
                      }
                      this.__CP__ = 4;
                      break;
                    case 4:
                      if (_3_cl != null) {
                        this.__CP__ = 5;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 6:
                      this.__CP__ = 7;
                      this.yield(_3_cl);
                      return true;
                    case 0:
                      this._3_cl = arg;

                      this.__CP__ = 4;
                      break;
                    case 5:
                      this.__CP__ = 6;
                      break;
                    case 9:

                      _3_cl = SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(_3_cl, "superclass", true), "classifier", false), "jetbrains.mps.baseLanguage.structure.ClassConcept");
                      this.__CP__ = 11;
                      break;
                    case 8:
                      this.__CP__ = 1;
                      break;
                    case 12:
                      _3_cl = rootOfHierarchy;
                      this.__CP__ = 4;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }

              private SNode _3_cl;
            };
          }
        };
      }
    });

    if (concreteFirst) {
      // lazy seqeunce 
      return classes;
    } else {
      // becomes strict 
      return ListSequence.fromList(Sequence.fromIterable(classes).toListSequence()).reversedList();
    }
  }

  public static boolean isParent(SNode base, SNode clas) {

    if (1 < 0) {
      SNode c = clas;
      while (c != base && (c != null)) {
        c = SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(c, "superclass", true), "classifier", false), "jetbrains.mps.baseLanguage.structure.ClassConcept");
      }
      // either c==base or c is null 
      return (c != null);
    }

    return Sequence.fromIterable(ancestors(clas, true)).contains(base);

  }

  private static SNode _quotation_createNode_pzuztq_a0a0c0d() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    return quotedNode_1;
  }
}
