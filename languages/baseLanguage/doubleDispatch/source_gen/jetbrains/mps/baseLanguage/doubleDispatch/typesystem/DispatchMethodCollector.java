package jetbrains.mps.baseLanguage.doubleDispatch.typesystem;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.baseLanguage.behavior.ClassConcept_Behavior;
import jetbrains.mps.internal.collections.runtime.IMapping;

public class DispatchMethodCollector {
  private Map<DispatchGroupDescriptor, DispatchGroup> groups = MapSequence.fromMap(new HashMap<DispatchGroupDescriptor, DispatchGroup>());
  public DispatchMethodCollector(SNode classToCheck) {
    fill(classToCheck);
  }
  private void fill(SNode classToCheck) {

    // Instance methods 

    SNode clas = classToCheck;

    while ((clas != null)) {
      startNewClass(clas);
      for (SNode m : Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639(clas)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return DispatchUtil.isReadyMethod(it);
        }
      })) {
        addMethod(m);
      }
      clas = SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(clas, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, "jetbrains.mps.baseLanguage.structure.ClassConcept")), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, 1165602531693l, "superclass")), MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier"));
    }

    for (DispatchGroup g : Sequence.fromIterable(MapSequence.fromMap(groups).values())) {
      g.finalize();
    }

    // Now static methods. They're simpler. No need to take superclasses into account 
    for (SNode m : Sequence.fromIterable(ClassConcept_Behavior.call_staticMethods_5292274854859435867(classToCheck)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return DispatchUtil.isReadyMethod(it);
      }
    })) {
      addMethod(m);
    }
  }
  private void startNewClass(SNode cls) {
    for (IMapping<DispatchGroupDescriptor, DispatchGroup> g : MapSequence.fromMap(groups)) {
      g.value().startNewClass(cls);
    }
  }
  private void addMethod(SNode method) {

    DispatchGroupDescriptor desc = new DispatchGroupDescriptor(method);
    DispatchGroup group = MapSequence.fromMap(groups).get(desc);
    if (group == null) {
      group = new DispatchGroup(desc, SNodeOperations.getNodeAncestor(method, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false, false));
      MapSequence.fromMap(groups).put(desc, group);
    }

    group.addMethod(method);
  }
  public Iterable<DispatchGroup> getGroups() {
    return MapSequence.fromMap(groups).values();
  }
}
