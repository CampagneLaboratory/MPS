package jetbrains.mps.baseLanguage.doubleDispatch.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.doubleDispatch.generator.util.DispatchGenUtil;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;

@Generated
public class QueriesGenerated {
  public static boolean baseMappingRule_Condition_2379134940425784781(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean methodHasDispatchModifier = SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.MethodDeclaration") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.MethodDeclaration"), "modifiers", true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.doubleDispatch.structure.DispatchModifier");
      }
    });

    return methodHasDispatchModifier && Sequence.fromIterable(DispatchGenUtil.getMatchingMethods(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.MethodDeclaration"))).isNotEmpty();
  }

  public static Object referenceMacro_GetReferent_2379134940429909478(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return ((SNode) _context.getVariable("var:paramName"));
  }

  public static Object referenceMacro_GetReferent_2379134940430034369(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return ((SNode) _context.getVariable("var:paramName"));
  }

  public static Object referenceMacro_GetReferent_2323553266849458668(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(((SNode) _context.getVariable("methodDecl")), "parameter", true)).first();
  }

  public static Object referenceMacro_GetReferent_2323553266848914933(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return ((SNode) _context.getVariable("targetMethod"));
  }

  public static Object referenceMacro_GetReferent_2323553266848914952(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_2323553266849548486(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(((SNode) _context.getVariable("methodDecl")), "parameter", true)).first();
  }

  public static Object referenceMacro_GetReferent_2323553266848914908(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return ((SNode) _context.getVariable("targetMethod"));
  }

  public static Object referenceMacro_GetReferent_2323553266848914927(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static boolean ifMacro_Condition_2323553266848914890(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(((SNode) _context.getVariable("methodDecl")), "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType");
  }

  public static SNode sourceNodeQuery_2403002034749657032(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    SNode newDecl = SNodeOperations.copyNode(_context.getNode());
    ListSequence.fromList(SLinkOperations.getTargets(newDecl, "modifiers", true)).removeWhere(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.doubleDispatch.structure.DispatchModifier");
      }
    });
    return newDecl;
  }

  public static SNode sourceNodeQuery_2379134940430361177(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SNodeOperations.cast(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(Sequence.fromIterable(((Iterable<SNode>) _context.getVariable("var:methods"))).first(), "parameter", true)).first(), "type", true), "jetbrains.mps.baseLanguage.structure.ClassifierType");
  }

  public static SNode sourceNodeQuery_2379134940430356891(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SNodeOperations.cast(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "parameter", true)).first(), "type", true), "jetbrains.mps.baseLanguage.structure.ClassifierType");
  }

  public static SNode sourceNodeQuery_2323553266849741443(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SNodeOperations.cast(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(((SNode) _context.getVariable("targetMethod")), "parameter", true)).first(), "type", true), "jetbrains.mps.baseLanguage.structure.ClassifierType");
  }

  public static SNode sourceNodeQuery_2323553266849838761(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SNodeOperations.cast(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(((SNode) _context.getVariable("targetMethod")), "parameter", true)).first(), "type", true), "jetbrains.mps.baseLanguage.structure.ClassifierType");
  }

  public static Object templateArgumentQuery_2323553266848892792(final IOperationContext operationContext, final TemplateQueryContext _context) {
    return ((SNode) _context.getVariable("var:methodDecl"));
  }

  public static Object templateArgumentQuery_2323553266848938515(final IOperationContext operationContext, final TemplateQueryContext _context) {
    return Sequence.fromIterable(((Iterable<SNode>) _context.getVariable("var:methods"))).first();
  }

  public static Object templateArgumentQuery_2323553266849248475(final IOperationContext operationContext, final TemplateQueryContext _context) {
    return ((SNode) _context.getVariable("var:methodDecl"));
  }

  public static Object templateArgumentQuery_2323553266849259847(final IOperationContext operationContext, final TemplateQueryContext _context) {
    return _context.getNode();
  }

  public static Iterable sourceNodesQuery_2379134940430025802(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    // first class is already handled in the first if branch 
    return Sequence.fromIterable(((Iterable<SNode>) _context.getVariable("var:methods"))).skip(1);
  }

  public static Iterable sourceNodesQuery_2379134940430020121(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "statement", true);
  }

  public static Iterable sourceNodesQuery_2323553266848914943(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(((SNode) _context.getVariable("methodDecl")), "parameter", true)).skip(1);
  }

  public static Iterable sourceNodesQuery_2323553266848914918(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(((SNode) _context.getVariable("methodDecl")), "parameter", true)).skip(1);
  }

  public static Object insertMacro_varValue_2379134940430813886(final IOperationContext operationContext, final TemplateQueryContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.MethodDeclaration"), "parameter", true)).first();
  }

  public static Object insertMacro_varValue_2379134940431021756(final IOperationContext operationContext, final TemplateQueryContext _context) {
    return DispatchGenUtil.getMatchingMethods(((SNode) _context.getVariable("var:methodDecl")));
  }

  public static Object insertMacro_varValue_2379134940433430092(final IOperationContext operationContext, final TemplateQueryContext _context) {
    return SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.MethodDeclaration");
  }
}
