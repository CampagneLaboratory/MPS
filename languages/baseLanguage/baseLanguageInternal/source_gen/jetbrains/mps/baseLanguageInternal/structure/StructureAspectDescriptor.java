package jetbrains.mps.baseLanguageInternal.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptConstantValue = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ConstantValue").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("className").references("constant").alias("constant value", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtractStatementListExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStatementListExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.ILocalVariableElementList").children(new String[]{"stmts", "innerExpr"}, new boolean[]{false, false}).alias("extract statements", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtractStatementListInnerExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStatementListInnerExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.ILocalVariableElement").children(new String[]{"inner"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtractStaticInnerClassConcept = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassConcept").super_("jetbrains.mps.baseLanguage.structure.ClassConcept").parents("jetbrains.mps.baseLanguage.structure.ClassConcept").create();
  /*package*/ final ConceptDescriptor myConceptExtractStaticInnerClassCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassCreator").super_("jetbrains.mps.baseLanguage.structure.ClassCreator").parents("jetbrains.mps.baseLanguage.structure.ClassCreator").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtractStaticInnerClassExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("makeUnique", "nonStatic").children(new String[]{"innerClass", "inner"}, new boolean[]{false, false}).alias("extract static inner class", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtractStaticMethodExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethodExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("makeUnique").children(new String[]{"method", "inner"}, new boolean[]{false, false}).alias("extract static method", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtractStaticMethod_CallExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethod_CallExpression").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("staticMethodDeclaration").alias("", "extract static method invocation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtractToConstantExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractToConstantExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("fieldName", "makeUnique").children(new String[]{"expression"}, new boolean[]{false}).alias("extract to constant", "").create();
  /*package*/ final ConceptDescriptor myConceptExtractToConstantRefExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractToConstantRefExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("original").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInternalAnonymousClass = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalAnonymousClass").super_("jetbrains.mps.baseLanguage.structure.ClassConcept").parents("jetbrains.mps.baseLanguage.structure.ClassConcept", "jetbrains.mps.baseLanguage.structure.IAnonymousClass", "jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter").properties("fqClassName").children(new String[]{"constructorArgument", "type", "typeParameter"}, new boolean[]{true, false, true}).alias("", "_anonymous class").create();
  /*package*/ final ConceptDescriptor myConceptInternalAnonymousClassCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalAnonymousClassCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"cls"}, new boolean[]{false}).alias("_anonymous class", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInternalClassCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalClassCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").properties("fqClassName").children(new String[]{"type", "parameter", "actualArgument"}, new boolean[]{false, true, true}).alias("_class", "internal class creator").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInternalClassExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"type"}, new boolean[]{false}).alias("_<type>.class", "internal class expression").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInternalClassifierType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalClassifierType").super_("jetbrains.mps.baseLanguage.structure.ClassifierType").parents("jetbrains.mps.baseLanguage.structure.ClassifierType").properties("fqClassName").alias("_classifier type", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInternalNewExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("fqClassName").children(new String[]{"type", "parameter", "actualArgument"}, new boolean[]{false, true, true}).alias("_new", "internal new expression").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInternalPartialFieldReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalPartialFieldReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IOperation").properties("fieldName").children(new String[]{"fieldType", "instanceType", "instance"}, new boolean[]{false, false, false}).alias("_field reference", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInternalPartialInstanceMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalPartialInstanceMethodCall").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IOperation").properties("methodName").children(new String[]{"returnType", "instance", "actualArgument"}, new boolean[]{false, false, true}).alias("_method call", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInternalStaticFieldReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalStaticFieldReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("fqClassName", "fieldName").alias("_static field reference", "internal static field reference").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInternalStaticMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalStaticMethodCall").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("fqClassName", "methodName").children(new String[]{"returnType", "typeParameter", "actualArgument"}, new boolean[]{false, true, true}).alias("_static method call", "internal static method call").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInternalSuperMethodCallOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalSuperMethodCallOperation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("methodName").children(new String[]{"returnType", "actualArgument"}, new boolean[]{false, true}).alias("_super method call", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInternalThisExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalThisExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("_this", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInternalVariableReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("name").children(new String[]{"type"}, new boolean[]{false}).alias("_<variable reference>", "internal variable/parameter reference").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTypeHintExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.TypeHintExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression", "typeHint"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptWeakClassReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.WeakClassReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("classifier").alias("class name", "weak reference to a class").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptConstantValue, myConceptExtractStatementListExpression, myConceptExtractStatementListInnerExpression, myConceptExtractStaticInnerClassConcept, myConceptExtractStaticInnerClassCreator, myConceptExtractStaticInnerClassExpression, myConceptExtractStaticMethodExpression, myConceptExtractStaticMethod_CallExpression, myConceptExtractToConstantExpression, myConceptExtractToConstantRefExpression, myConceptInternalAnonymousClass, myConceptInternalAnonymousClassCreator, myConceptInternalClassCreator, myConceptInternalClassExpression, myConceptInternalClassifierType, myConceptInternalNewExpression, myConceptInternalPartialFieldReference, myConceptInternalPartialInstanceMethodCall, myConceptInternalStaticFieldReference, myConceptInternalStaticMethodCall, myConceptInternalSuperMethodCallOperation, myConceptInternalThisExpression, myConceptInternalVariableReference, myConceptTypeHintExpression, myConceptWeakClassReference);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0cb, conceptFqName)) {
      case 0:
        return myConceptConstantValue;
      case 1:
        return myConceptExtractStatementListExpression;
      case 2:
        return myConceptExtractStatementListInnerExpression;
      case 3:
        return myConceptExtractStaticInnerClassConcept;
      case 4:
        return myConceptExtractStaticInnerClassCreator;
      case 5:
        return myConceptExtractStaticInnerClassExpression;
      case 6:
        return myConceptExtractStaticMethodExpression;
      case 7:
        return myConceptExtractStaticMethod_CallExpression;
      case 8:
        return myConceptExtractToConstantExpression;
      case 9:
        return myConceptExtractToConstantRefExpression;
      case 10:
        return myConceptInternalAnonymousClass;
      case 11:
        return myConceptInternalAnonymousClassCreator;
      case 12:
        return myConceptInternalClassCreator;
      case 13:
        return myConceptInternalClassExpression;
      case 14:
        return myConceptInternalClassifierType;
      case 15:
        return myConceptInternalNewExpression;
      case 16:
        return myConceptInternalPartialFieldReference;
      case 17:
        return myConceptInternalPartialInstanceMethodCall;
      case 18:
        return myConceptInternalStaticFieldReference;
      case 19:
        return myConceptInternalStaticMethodCall;
      case 20:
        return myConceptInternalSuperMethodCallOperation;
      case 21:
        return myConceptInternalThisExpression;
      case 22:
        return myConceptInternalVariableReference;
      case 23:
        return myConceptTypeHintExpression;
      case 24:
        return myConceptWeakClassReference;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0cb = new String[]{"jetbrains.mps.baseLanguageInternal.structure.ConstantValue", "jetbrains.mps.baseLanguageInternal.structure.ExtractStatementListExpression", "jetbrains.mps.baseLanguageInternal.structure.ExtractStatementListInnerExpression", "jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassConcept", "jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassCreator", "jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassExpression", "jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethodExpression", "jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethod_CallExpression", "jetbrains.mps.baseLanguageInternal.structure.ExtractToConstantExpression", "jetbrains.mps.baseLanguageInternal.structure.ExtractToConstantRefExpression", "jetbrains.mps.baseLanguageInternal.structure.InternalAnonymousClass", "jetbrains.mps.baseLanguageInternal.structure.InternalAnonymousClassCreator", "jetbrains.mps.baseLanguageInternal.structure.InternalClassCreator", "jetbrains.mps.baseLanguageInternal.structure.InternalClassExpression", "jetbrains.mps.baseLanguageInternal.structure.InternalClassifierType", "jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression", "jetbrains.mps.baseLanguageInternal.structure.InternalPartialFieldReference", "jetbrains.mps.baseLanguageInternal.structure.InternalPartialInstanceMethodCall", "jetbrains.mps.baseLanguageInternal.structure.InternalStaticFieldReference", "jetbrains.mps.baseLanguageInternal.structure.InternalStaticMethodCall", "jetbrains.mps.baseLanguageInternal.structure.InternalSuperMethodCallOperation", "jetbrains.mps.baseLanguageInternal.structure.InternalThisExpression", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference", "jetbrains.mps.baseLanguageInternal.structure.TypeHintExpression", "jetbrains.mps.baseLanguageInternal.structure.WeakClassReference"};
}
