package jetbrains.mps.baseLanguageInternal.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.ConstantValue", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.ExtractStatementListExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.ExtractStatementListInnerExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassConcept", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethodExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethod_CallExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.ExtractToConstantExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.ExtractToConstantRefExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.InternalAnonymousClass", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.InternalAnonymousClassCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.InternalClassCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.InternalClassExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.InternalClassifierType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.InternalPartialFieldReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.InternalPartialInstanceMethodCall", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.InternalStaticFieldReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.InternalStaticMethodCall", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.InternalSuperMethodCallOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.InternalThisExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.TypeHintExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguageInternal.structure.WeakClassReference", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ConstantValue").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("className").references("constant").alias("constant value", "").staticScope(StaticScope.NONE).create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStatementListExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.ILocalVariableElementList").children(new String[]{"stmts", "innerExpr"}, new boolean[]{false, false}).alias("extract statements", "").staticScope(StaticScope.NONE).create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStatementListInnerExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.ILocalVariableElement").children(new String[]{"inner"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassConcept").super_("jetbrains.mps.baseLanguage.structure.ClassConcept").parents("jetbrains.mps.baseLanguage.structure.ClassConcept").create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassCreator").super_("jetbrains.mps.baseLanguage.structure.ClassCreator").parents("jetbrains.mps.baseLanguage.structure.ClassCreator").staticScope(StaticScope.NONE).create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("makeUnique", "nonStatic").children(new String[]{"innerClass", "inner"}, new boolean[]{false, false}).alias("extract static inner class", "").staticScope(StaticScope.NONE).create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethodExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("makeUnique").children(new String[]{"method", "inner"}, new boolean[]{false, false}).alias("extract static method", "").staticScope(StaticScope.NONE).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethod_CallExpression").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("staticMethodDeclaration").alias("", "extract static method invocation").staticScope(StaticScope.NONE).create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractToConstantExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("fieldName", "makeUnique").children(new String[]{"expression"}, new boolean[]{false}).alias("extract to constant", "").create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.ExtractToConstantRefExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("original").staticScope(StaticScope.NONE).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalAnonymousClass").super_("jetbrains.mps.baseLanguage.structure.ClassConcept").parents("jetbrains.mps.baseLanguage.structure.ClassConcept", "jetbrains.mps.baseLanguage.structure.IAnonymousClass", "jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter").properties("fqClassName").children(new String[]{"constructorArgument", "type", "typeParameter"}, new boolean[]{true, false, true}).alias("", "_anonymous class").create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalAnonymousClassCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"cls"}, new boolean[]{false}).alias("_anonymous class", "").staticScope(StaticScope.NONE).create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalClassCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").properties("fqClassName").children(new String[]{"type", "parameter", "actualArgument"}, new boolean[]{false, true, true}).alias("_class", "internal class creator").staticScope(StaticScope.NONE).create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"type"}, new boolean[]{false}).alias("_<type>.class", "internal class expression").staticScope(StaticScope.NONE).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalClassifierType").super_("jetbrains.mps.baseLanguage.structure.ClassifierType").parents("jetbrains.mps.baseLanguage.structure.ClassifierType").properties("fqClassName").alias("_classifier type", "").staticScope(StaticScope.NONE).create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("fqClassName").children(new String[]{"type", "parameter", "actualArgument"}, new boolean[]{false, true, true}).alias("_new", "internal new expression").staticScope(StaticScope.NONE).create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalPartialFieldReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IOperation").properties("fieldName").children(new String[]{"fieldType", "instanceType", "instance"}, new boolean[]{false, false, false}).alias("_field reference", "").staticScope(StaticScope.NONE).create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalPartialInstanceMethodCall").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IOperation").properties("methodName").children(new String[]{"returnType", "instance", "actualArgument"}, new boolean[]{false, false, true}).alias("_method call", "").staticScope(StaticScope.NONE).create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalStaticFieldReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("fqClassName", "fieldName").alias("_static field reference", "internal static field reference").staticScope(StaticScope.NONE).create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalStaticMethodCall").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("fqClassName", "methodName").children(new String[]{"returnType", "typeParameter", "actualArgument"}, new boolean[]{false, true, true}).alias("_static method call", "internal static method call").staticScope(StaticScope.NONE).create();
        break;
      case 20:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalSuperMethodCallOperation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("methodName").children(new String[]{"returnType", "actualArgument"}, new boolean[]{false, true}).alias("_super method call", "").staticScope(StaticScope.NONE).create();
        break;
      case 21:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalThisExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("_this", "").staticScope(StaticScope.NONE).create();
        break;
      case 22:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("name").children(new String[]{"type"}, new boolean[]{false}).alias("_<variable reference>", "internal variable/parameter reference").staticScope(StaticScope.NONE).create();
        break;
      case 23:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.TypeHintExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression", "typeHint"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
        break;
      case 24:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguageInternal.structure.WeakClassReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("classifier").alias("class name", "weak reference to a class").staticScope(StaticScope.NONE).create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.baseLanguageInternal.structure.ConstantValue", "jetbrains.mps.baseLanguageInternal.structure.ExtractStatementListExpression", "jetbrains.mps.baseLanguageInternal.structure.ExtractStatementListInnerExpression", "jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassConcept", "jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassCreator", "jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassExpression", "jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethodExpression", "jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethod_CallExpression", "jetbrains.mps.baseLanguageInternal.structure.ExtractToConstantExpression", "jetbrains.mps.baseLanguageInternal.structure.ExtractToConstantRefExpression", "jetbrains.mps.baseLanguageInternal.structure.InternalAnonymousClass", "jetbrains.mps.baseLanguageInternal.structure.InternalAnonymousClassCreator", "jetbrains.mps.baseLanguageInternal.structure.InternalClassCreator", "jetbrains.mps.baseLanguageInternal.structure.InternalClassExpression", "jetbrains.mps.baseLanguageInternal.structure.InternalClassifierType", "jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression", "jetbrains.mps.baseLanguageInternal.structure.InternalPartialFieldReference", "jetbrains.mps.baseLanguageInternal.structure.InternalPartialInstanceMethodCall", "jetbrains.mps.baseLanguageInternal.structure.InternalStaticFieldReference", "jetbrains.mps.baseLanguageInternal.structure.InternalStaticMethodCall", "jetbrains.mps.baseLanguageInternal.structure.InternalSuperMethodCallOperation", "jetbrains.mps.baseLanguageInternal.structure.InternalThisExpression", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference", "jetbrains.mps.baseLanguageInternal.structure.TypeHintExpression", "jetbrains.mps.baseLanguageInternal.structure.WeakClassReference"};
}
