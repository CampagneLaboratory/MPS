package jetbrains.mps.baseLanguageInternal.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class add_parameter_to_InternalClassifierType_Intention extends BaseIntention {
  public add_parameter_to_InternalClassifierType_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguageInternal.structure.InternalClassifierType";
  }

  public String getPresentation() {
    return "add_parameter_to_InternalClassifierType";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguageInternal.intentions.add_parameter_to_InternalClassifierType_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:7155f093-1702-456f-be20-2707aa72be68(jetbrains.mps.baseLanguageInternal.intentions@2_0)", "1229871155083");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Add Type Parameters";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (int) ListSequence.fromList(SLinkOperations.getTargets(node, "parameter", true)).count() == 0;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNodeFactoryOperations.addNewChild(node, "parameter", "jetbrains.mps.baseLanguage.structure.Type");
  }
}
