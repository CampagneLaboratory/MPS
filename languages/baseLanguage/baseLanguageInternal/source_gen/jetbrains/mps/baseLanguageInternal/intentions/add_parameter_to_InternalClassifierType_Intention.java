package jetbrains.mps.baseLanguageInternal.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class add_parameter_to_InternalClassifierType_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public add_parameter_to_InternalClassifierType_Intention() {
  }
  public String getConcept() {
    return "jetbrains.mps.baseLanguageInternal.structure.InternalClassifierType";
  }
  public String getPresentation() {
    return "add_parameter_to_InternalClassifierType";
  }
  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguageInternal.intentions.add_parameter_to_InternalClassifierType_Intention";
  }
  public String getLanguageFqName() {
    return "jetbrains.mps.baseLanguageInternal";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return false;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromList(SLinkOperations.getTargets(node, "parameter", true)).isEmpty();
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:f0d79467-678d-44a3-9372-d1b2fb477d99(jetbrains.mps.baseLanguageInternal.intentions)", "1229871155083");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new add_parameter_to_InternalClassifierType_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add Type Parameters";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      SNodeFactoryOperations.addNewChild(node, "parameter", "jetbrains.mps.baseLanguage.structure.Type");
    }
    public IntentionDescriptor getDescriptor() {
      return add_parameter_to_InternalClassifierType_Intention.this;
    }
  }
}
