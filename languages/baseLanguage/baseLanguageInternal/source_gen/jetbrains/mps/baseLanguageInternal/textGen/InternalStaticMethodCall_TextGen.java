package jetbrains.mps.baseLanguageInternal.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class InternalStaticMethodCall_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    BaseLangInternal.className(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(new UUID(-2363163772790029805l, -6024047381933761144l), 1173990517731l, 1173992483054l, "fqClassName")), node, this);
    this.append(".");
    if (ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(new UUID(-2363163772790029805l, -6024047381933761144l), 1173990517731l, 1200499032583l, "typeParameter"))).isNotEmpty()) {
      this.append("<");
      {
        Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(new UUID(-2363163772790029805l, -6024047381933761144l), 1173990517731l, 1200499032583l, "typeParameter"));
        final SNode lastItem = Sequence.fromIterable(collection).last();
        for (SNode item : collection) {
          appendNode(item);
          if (item != lastItem) {
            append(", ");
          }
        }
      }
      this.append(">");
    }
    this.append(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(new UUID(-2363163772790029805l, -6024047381933761144l), 1173990517731l, 1173992444083l, "methodName")));
    this.append("(");
    {
      Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(new UUID(-2363163772790029805l, -6024047381933761144l), 1173990517731l, 319021450862604085l, "actualArgument"));
      final SNode lastItem = Sequence.fromIterable(collection).last();
      for (SNode item : collection) {
        appendNode(item);
        if (item != lastItem) {
          append(", ");
        }
      }
    }
    this.append(")");
  }
}
