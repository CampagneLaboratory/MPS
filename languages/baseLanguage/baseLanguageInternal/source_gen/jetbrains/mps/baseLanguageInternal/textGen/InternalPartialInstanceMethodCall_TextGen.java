package jetbrains.mps.baseLanguageInternal.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class InternalPartialInstanceMethodCall_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    if ((SLinkOperations.getTarget(node, "instance", true) != null)) {
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "instance", true), "jetbrains.mps.baseLanguageInternal.structure.InternalThisExpression"))) {
        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "instance", true), this.getSNode());
        this.append(".");
      }
    }
    this.append(SPropertyOperations.getString(node, "methodName"));
    this.append("(");
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "actualArgument", true)).isNotEmpty()) {
      for (SNode item : SLinkOperations.getTargets(node, "actualArgument", true)) {
        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, "actualArgument", true)).last()) {
          this.append(", ");
        }
      }
    }
    this.append(")");
  }
}
