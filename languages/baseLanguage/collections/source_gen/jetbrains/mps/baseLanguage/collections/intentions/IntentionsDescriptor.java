package jetbrains.mps.baseLanguage.collections.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionAspectBase;
import jetbrains.mps.intentions.IntentionFactory;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;
import jetbrains.mps.intentions.IntentionsManager;

public final class IntentionsDescriptor extends IntentionAspectBase {
  private final long[] myId2Index;
  private IntentionFactory[] myIntentions0;
  private IntentionFactory[] myIntentions1;
  private IntentionFactory[] myIntentions2;
  private IntentionFactory[] myIntentions3;
  private IntentionFactory[] myIntentions4;
  private IntentionFactory[] myIntentions5;
  private IntentionFactory[] myIntentions6;
  private IntentionFactory[] myIntentions7;
  private IntentionFactory[] myIntentions8;
  private IntentionFactory[] myIntentions9;
  private IntentionFactory[] myIntentions10;

  public IntentionsDescriptor() {
    myId2Index = new long[11];
    myId2Index[0] = 0xf8c37f506fL;
    myId2Index[1] = 0x10a6933ce33L;
    myId2Index[2] = 0x10cac65f399L;
    myId2Index[3] = 0x116dbb34f2dL;
    myId2Index[4] = 0x11d14c97b16L;
    myId2Index[5] = 0x11d9514ebd8L;
    myId2Index[6] = 0x11d968cae32L;
    myId2Index[7] = 0x11d969dca87L;
    myId2Index[8] = 0x11d96b14ae4L;
    myId2Index[9] = 0x1202df1ada0L;
    myId2Index[10] = 0x120c4838d33L;
  }

  @Override
  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SConceptId conceptId) {
    final int index = Arrays.binarySearch(myId2Index, conceptId.getIdValue());
    switch (index) {
      case 0:
        // Concept: Expression 
        if (myIntentions0 == null) {
          myIntentions0 = new IntentionFactory[1];
          myIntentions0[0] = new IterateOverSequence_Intention();
        }
        return Arrays.asList(myIntentions0);
      case 1:
        // Concept: ForeachStatement 
        if (myIntentions1 == null) {
          myIntentions1 = new IntentionFactory[1];
          myIntentions1[0] = new ConvertForeachStatementToForEach_Intention();
        }
        return Arrays.asList(myIntentions1);
      case 2:
        // Concept: ForEachStatement 
        if (myIntentions2 == null) {
          myIntentions2 = new IntentionFactory[1];
          myIntentions2[0] = new ConvertForEachStatementToForeachStatement_Intention();
        }
        return Arrays.asList(myIntentions2);
      case 3:
        // Concept: HashMapCreator 
        if (myIntentions3 == null) {
          myIntentions3 = new IntentionFactory[1];
          myIntentions3[0] = new CreateInitializer_Intention();
        }
        return Arrays.asList(myIntentions3);
      case 4:
        // Concept: SequenceCreator 
        if (myIntentions4 == null) {
          myIntentions4 = new IntentionFactory[1];
          myIntentions4[0] = new add_sequence_initializer_Intention();
        }
        return Arrays.asList(myIntentions4);
      case 5:
        // Concept: AddSetElementOperation 
        if (myIntentions5 == null) {
          myIntentions5 = new IntentionFactory[1];
          myIntentions5[0] = new AddSetElementOperation_replace_Intention();
        }
        return Arrays.asList(myIntentions5);
      case 6:
        // Concept: RemoveSetElementOperation 
        if (myIntentions6 == null) {
          myIntentions6 = new IntentionFactory[1];
          myIntentions6[0] = new RemoveSetElementOperation_replace_Intention();
        }
        return Arrays.asList(myIntentions6);
      case 7:
        // Concept: AddAllSetElementsOperation 
        if (myIntentions7 == null) {
          myIntentions7 = new IntentionFactory[1];
          myIntentions7[0] = new AddAllSetElementsOperation_replace_Intention();
        }
        return Arrays.asList(myIntentions7);
      case 8:
        // Concept: RemoveAllSetElementsOperation 
        if (myIntentions8 == null) {
          myIntentions8 = new IntentionFactory[1];
          myIntentions8[0] = new RemoveAllSetElementsOperation_replace_Intention();
        }
        return Arrays.asList(myIntentions8);
      case 9:
        // Concept: AbstractContainerCreator 
        if (myIntentions9 == null) {
          myIntentions9 = new IntentionFactory[2];
          myIntentions9[0] = new add_init_values_Intention();
          myIntentions9[1] = new add_copy_from_Intention();
        }
        return Arrays.asList(myIntentions9);
      case 10:
        // Concept: TreeSetCreator 
        if (myIntentions10 == null) {
          myIntentions10 = new IntentionFactory[1];
          myIntentions10[0] = new Add_Comparator_Intention();
        }
        return Arrays.asList(myIntentions10);
      default:
        return null;
    }
  }

  public void init() {
    IntentionsManager.getInstance().registerIntentionFactory(new AddAllSetElementsOperation_replace_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddSetElementOperation_replace_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new Add_Comparator_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new ConvertForEachStatementToForeachStatement_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new ConvertForeachStatementToForEach_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new CreateInitializer_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new IterateOverSequence_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new RemoveAllSetElementsOperation_replace_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new RemoveSetElementOperation_replace_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new add_copy_from_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new add_init_values_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new add_sequence_initializer_Intention());
  }
}
