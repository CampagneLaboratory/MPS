package jetbrains.mps.baseLanguage.collections.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AddAllSetElementsOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AddElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AddFirstElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AddLastElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AddSetElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AllConstant", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AllOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AlsoSortOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AnyOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AsSequenceOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AsSynchronizedOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.AsUnmodifiableOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ClearAllElementsOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ClearSetOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.CollectionType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ComparatorSortOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ConcatOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ContainerIteratorType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ContainsAllOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ContainsKeyOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ContainsOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ContainsValueOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.CustomContainerCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.CustomContainerDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.CustomContainers", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.CustomMapCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.CutOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.DequeType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.DisjunctOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.DistinctOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.DowncastExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.EnumeratorType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ExcludeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.FindFirstOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.FindLastOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.FoldLeftOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.FoldRightOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ForEachStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ForEachVariable", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.GetCurrentOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.GetElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.GetEnumeratorOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.GetFirstOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.GetIndexOfOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.GetIteratorOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.GetKeysOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.GetLastIndexOfOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.GetLastOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.GetNextOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.GetValuesOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.HasNextOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.HeadListOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.HeadMapOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.HeadSetOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IListOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IStackOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.InsertElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IntersectOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IsEmptyOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IsNotEmptyOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.IteratorType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.JoinOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.KeyAccessOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.LinkedHashMapCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.LinkedHashSetCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.LinkedListCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.LinkedListType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ListType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MapAsSequenceVarRef", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MapClearOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MapElement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MapEntry", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MapInitializer", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MapOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MapOperationExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MapRemoveOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MapType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MappingType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MappingsSetOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MoveNextOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MultiForEachPair", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MultiForEachStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariable", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariableReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.OfTypeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.PageOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.PeekOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.PopOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.PriorityQueueCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.PushOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.PutAllOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.QueueType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ReduceLeftOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ReduceRightOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.RemoveAllElementsOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.RemoveAllSetElementsOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.RemoveAtElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.RemoveElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.RemoveFirstElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.RemoveLastElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.RemoveOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.RemoveSetElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.RemoveWhereOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ReverseOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SelectOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SequenceCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SequenceType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SetElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SetType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SingletonSequenceCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SkipOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SkipStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SmartClosureParameterDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SortDirection", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SortOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SortedMapType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SortedSetType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.StackType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.StopStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SubListOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SubMapOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.SubSetOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.TailListOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.TailMapOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.TailOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.TailSetOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.TakeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.TestAddElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.TestRemoveElementOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ToArrayOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ToIteratorOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ToListOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.TranslateOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.TreeMapCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.TreeSetCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.UnionOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.ValueAccessOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.VisitAllOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.collections.structure.WhereOperation", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"elementType", "initValue", "copyFrom", "initSize"}, new boolean[]{false, true, false, false}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"elementType"}, new boolean[]{false}).abstract_().alias("", "container type").staticScope(StaticScope.NONE).create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").children(new String[]{"argument"}, new boolean[]{false}).alias("addAll", "add all elements").staticScope(StaticScope.NONE).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddAllSetElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("addAll", "add all elements").staticScope(StaticScope.NONE).create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").children(new String[]{"argument"}, new boolean[]{false}).alias("add", "add an element").staticScope(StaticScope.NONE).create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddFirstElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").children(new String[]{"argument"}, new boolean[]{false}).alias("addFirst", "add element as first").staticScope(StaticScope.NONE).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddLastElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue").children(new String[]{"argument"}, new boolean[]{false}).alias("addLast", "add element as last").staticScope(StaticScope.NONE).create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddSetElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("add", "add an element").staticScope(StaticScope.NONE).create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AllConstant").super_("jetbrains.mps.baseLanguage.structure.IntegerLiteral").parents("jetbrains.mps.baseLanguage.structure.IntegerLiteral").alias("ALL", "all elements").staticScope(StaticScope.NONE).create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AllOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"}, new boolean[]{false}).alias("all", "check if all elements match the condition").staticScope(StaticScope.NONE).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AlsoSortOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortOperation").alias("alsoSortBy", "sort by secondary key").staticScope(StaticScope.NONE).create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AnyOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"}, new boolean[]{false}).alias("any", "check if there are any elements matching the condition").staticScope(StaticScope.NONE).create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AsSequenceOperation").super_("jetbrains.mps.baseLanguage.structure.AbstractOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractOperation", "jetbrains.mps.baseLanguage.structure.IOperation").alias("asSequence", "").staticScope(StaticScope.NONE).create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AsSynchronizedOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").alias("asSynchronized", "synchronized collection").staticScope(StaticScope.NONE).create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AsUnmodifiableOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").alias("asUnmodifiable", "unmodifiable collection").staticScope(StaticScope.NONE).create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"rightExpression"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 20:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"length"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 21:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ClearAllElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").alias("clear", "clear all elements").staticScope(StaticScope.NONE).create();
        break;
      case 22:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ClearSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").alias("clear", "clear all elements").staticScope(StaticScope.NONE).create();
        break;
      case 23:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CollectionType").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType", "jetbrains.mps.baseLanguage.structure.IGenericType").alias("collection", "abstract collection type").staticScope(StaticScope.NONE).create();
        break;
      case 24:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ComparatorSortOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comparator", "ascending"}, new boolean[]{false, false}).alias("sort", "sort using comparator").staticScope(StaticScope.NONE).create();
        break;
      case 25:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ConcatOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("concat", "produce a sequence concatenation").staticScope(StaticScope.NONE).create();
        break;
      case 26:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainerIteratorType").super_("jetbrains.mps.baseLanguage.collections.structure.IteratorType").parents("jetbrains.mps.baseLanguage.collections.structure.IteratorType").alias("modifying_iterator", "").staticScope(StaticScope.NONE).create();
        break;
      case 27:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainsAllOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("containsAll", "test if sequence contains all element").staticScope(StaticScope.NONE).create();
        break;
      case 28:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainsKeyOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").children(new String[]{"key"}, new boolean[]{false}).alias("containsKey", "").staticScope(StaticScope.NONE).create();
        break;
      case 29:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("contains", "test if sequence contains an element").staticScope(StaticScope.NONE).create();
        break;
      case 30:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainsValueOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").children(new String[]{"value"}, new boolean[]{false}).alias("containsValue", "").staticScope(StaticScope.NONE).create();
        break;
      case 31:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CustomContainerCreator").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").references("containerDeclaration").staticScope(StaticScope.NONE).create();
        break;
      case 32:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CustomContainerDeclaration").super_("jetbrains.mps.baseLanguage.structure.GenericDeclaration").parents("jetbrains.mps.baseLanguage.structure.GenericDeclaration", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IVisible").children(new String[]{"containerType", "runtimeType", "factory"}, new boolean[]{false, false, false}).create();
        break;
      case 33:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CustomContainers").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"containerDeclaration"}, new boolean[]{true}).create();
        break;
      case 34:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CustomMapCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").references("containerDeclaration").staticScope(StaticScope.NONE).create();
        break;
      case 35:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CutOperation").super_("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").parents("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").alias("cut", "exclude elements from the end").staticScope(StaticScope.NONE).create();
        break;
      case 36:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.DequeType").super_("jetbrains.mps.baseLanguage.collections.structure.QueueType").parents("jetbrains.mps.baseLanguage.collections.structure.QueueType", "jetbrains.mps.baseLanguage.structure.IGenericType").alias("deque", "").staticScope(StaticScope.NONE).create();
        break;
      case 37:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.DisjunctOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("disjunction", "produce an exclusive disjunction").staticScope(StaticScope.NONE).create();
        break;
      case 38:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.DistinctOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("distinct", "produce sequence with unique elements").staticScope(StaticScope.NONE).create();
        break;
      case 39:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.DowncastExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"expression"}, new boolean[]{false}).alias("downcast", "").staticScope(StaticScope.NONE).create();
        break;
      case 40:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.EnumeratorType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"elementType"}, new boolean[]{false}).alias("enumerator", "").staticScope(StaticScope.NONE).create();
        break;
      case 41:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ExcludeOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("except", "subtract a sequence").staticScope(StaticScope.NONE).create();
        break;
      case 42:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.FindFirstOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"}, new boolean[]{false}).alias("findFirst", "find first element that matches").staticScope(StaticScope.NONE).create();
        break;
      case 43:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.FindLastOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"}, new boolean[]{false}).alias("findLast", "find last element that matches").staticScope(StaticScope.NONE).create();
        break;
      case 44:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.FoldLeftOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comb", "seed"}, new boolean[]{false, false}).alias("foldLeft", "perform left folding").staticScope(StaticScope.NONE).create();
        break;
      case 45:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.FoldRightOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comb", "seed"}, new boolean[]{false, false}).alias("foldRight", "perform right folding").staticScope(StaticScope.NONE).create();
        break;
      case 46:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ForEachStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"variable", "inputSequence"}, new boolean[]{false, false}).alias("foreach", "foreach <e> in <sequence>").staticScope(StaticScope.NONE).create();
        break;
      case 47:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ForEachVariable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.baseLanguage.structure.IVariableDeclaration", "jetbrains.mps.lang.core.structure.IResolveInfo").staticScope(StaticScope.ROOT).create();
        break;
      case 48:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IVariableReference").references("variable").staticScope(StaticScope.NONE).create();
        break;
      case 49:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetCurrentOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").alias("current", "").staticScope(StaticScope.NONE).create();
        break;
      case 50:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"argument"}, new boolean[]{false}).alias("get", "get element by index").staticScope(StaticScope.NONE).create();
        break;
      case 51:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetEnumeratorOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("enumerator", "get the enumerator").staticScope(StaticScope.NONE).create();
        break;
      case 52:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetFirstOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("first", "get the first element").staticScope(StaticScope.NONE).create();
        break;
      case 53:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetIndexOfOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("indexOf", "get the index of an element").staticScope(StaticScope.NONE).create();
        break;
      case 54:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetIteratorOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("iterator", "get the iterator").staticScope(StaticScope.NONE).create();
        break;
      case 55:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetKeysOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").alias("keys", "").staticScope(StaticScope.NONE).create();
        break;
      case 56:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetLastIndexOfOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("lastIndexOf", "get the index of an element").staticScope(StaticScope.NONE).create();
        break;
      case 57:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetLastOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("last", "get the last element").staticScope(StaticScope.NONE).create();
        break;
      case 58:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetNextOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").alias("next", "").staticScope(StaticScope.NONE).create();
        break;
      case 59:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("size", "get the sequence size").staticScope(StaticScope.NONE).create();
        break;
      case 60:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetValuesOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").alias("values", "").staticScope(StaticScope.NONE).create();
        break;
      case 61:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HasNextOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").alias("hasNext", "").staticScope(StaticScope.NONE).create();
        break;
      case 62:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"keyType", "valueType", "initializer", "initSize"}, new boolean[]{false, false, false, false}).alias("hashmap", "").staticScope(StaticScope.NONE).create();
        break;
      case 63:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").alias("hashset", "create new hashset").staticScope(StaticScope.NONE).create();
        break;
      case 64:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HeadListOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"upToIndex"}, new boolean[]{false}).alias("headList", "head list").staticScope(StaticScope.NONE).create();
        break;
      case 65:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HeadMapOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").children(new String[]{"toKey"}, new boolean[]{false}).alias("headMap", "").staticScope(StaticScope.NONE).create();
        break;
      case 66:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HeadSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").children(new String[]{"toElement"}, new boolean[]{false}).alias("headSet", "").staticScope(StaticScope.NONE).create();
        break;
      case 67:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").create();
        break;
      case 68:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing").create();
        break;
      case 69:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing").create();
        break;
      case 70:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing").interface_().create();
        break;
      case 71:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque").create();
        break;
      case 72:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque").create();
        break;
      case 73:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation").create();
        break;
      case 74:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation").interface_().parents("jetbrains.mps.baseLanguage.structure.IOperation").create();
        break;
      case 75:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IDequeOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation").create();
        break;
      case 76:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IListOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation").create();
        break;
      case 77:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IQueueOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation").create();
        break;
      case 78:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IStackOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation").create();
        break;
      case 79:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.InsertElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"index", "element"}, new boolean[]{false, false}).alias("insert", "insert element at an index").staticScope(StaticScope.NONE).create();
        break;
      case 80:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"closure"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 81:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IntersectOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("intersect", "produce an intersection").staticScope(StaticScope.NONE).create();
        break;
      case 82:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IsEmptyOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("isEmpty", "test if sequence is empty").staticScope(StaticScope.NONE).create();
        break;
      case 83:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IsNotEmptyOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("isNotEmpty", "test if sequence is not empty").staticScope(StaticScope.NONE).create();
        break;
      case 84:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IteratorType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"elementType"}, new boolean[]{false}).alias("iterator", "").staticScope(StaticScope.NONE).create();
        break;
      case 85:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.JoinOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"delimiter"}, new boolean[]{false}).alias("join", "").staticScope(StaticScope.NONE).create();
        break;
      case 86:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.KeyAccessOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").alias("key", "").staticScope(StaticScope.NONE).create();
        break;
      case 87:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.LinkedHashMapCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").properties("order").alias("linked_hashmap", "").staticScope(StaticScope.NONE).create();
        break;
      case 88:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.LinkedHashSetCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").alias("linked_hashset", "create new linked hashset").staticScope(StaticScope.NONE).create();
        break;
      case 89:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.LinkedListCreator").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").alias("linkedlist", "create new linked list").staticScope(StaticScope.NONE).create();
        break;
      case 90:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.LinkedListType").super_("jetbrains.mps.baseLanguage.collections.structure.ListType").parents("jetbrains.mps.baseLanguage.collections.structure.ListType").alias("linkedlist", "").staticScope(StaticScope.NONE).create();
        break;
      case 91:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").alias("arraylist", "create new array list").staticScope(StaticScope.NONE).create();
        break;
      case 92:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"list", "index"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
        break;
      case 93:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ListType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"elementType"}, new boolean[]{false}).alias("list", "").staticScope(StaticScope.NONE).create();
        break;
      case 94:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapAsSequenceVarRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"original"}, new boolean[]{false}).staticScope(StaticScope.ROOT).create();
        break;
      case 95:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapClearOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").alias("clear", "").staticScope(StaticScope.NONE).create();
        break;
      case 96:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapElement").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"map", "key"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
        break;
      case 97:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapEntry").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"key", "value"}, new boolean[]{false, false}).create();
        break;
      case 98:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapInitializer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"entries"}, new boolean[]{true}).create();
        break;
      case 99:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 100:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapOperationExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"expression", "mapOperation"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
        break;
      case 101:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapRemoveOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").children(new String[]{"key"}, new boolean[]{false}).alias("removeKey", "").staticScope(StaticScope.NONE).create();
        break;
      case 102:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"keyType", "valueType"}, new boolean[]{false, false}).alias("map", "").staticScope(StaticScope.NONE).create();
        break;
      case 103:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MappingType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"keyType", "valueType"}, new boolean[]{false, false}).alias("mapping", "").staticScope(StaticScope.NONE).create();
        break;
      case 104:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MappingsSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").alias("mappings", "").staticScope(StaticScope.NONE).create();
        break;
      case 105:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MoveNextOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").alias("moveNext", "").staticScope(StaticScope.NONE).create();
        break;
      case 106:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MultiForEachPair").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"variable", "input"}, new boolean[]{false, false}).create();
        break;
      case 107:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MultiForEachStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"forEach"}, new boolean[]{true}).alias("foreach", "foreach loop over multiple variables").staticScope(StaticScope.NONE).create();
        break;
      case 108:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.baseLanguage.structure.IVariableDeclaration").create();
        break;
      case 109:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("variable").staticScope(StaticScope.NONE).create();
        break;
      case 110:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 111:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.OfTypeOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"requestedType"}, new boolean[]{false}).alias("ofType", "select elements of the specified type").staticScope(StaticScope.NONE).create();
        break;
      case 112:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PageOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"fromElement", "toElement"}, new boolean[]{false, false}).alias("page", "select a subsequence").staticScope(StaticScope.NONE).create();
        break;
      case 113:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PeekOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").alias("peek", "").staticScope(StaticScope.NONE).create();
        break;
      case 114:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PopOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").alias("pop", "").staticScope(StaticScope.NONE).create();
        break;
      case 115:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PriorityQueueCreator").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").alias("priority_queue", "create new priority queue").staticScope(StaticScope.NONE).create();
        break;
      case 116:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PushOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").children(new String[]{"argument"}, new boolean[]{false}).alias("push", "").staticScope(StaticScope.NONE).create();
        break;
      case 117:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PutAllOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").children(new String[]{"map"}, new boolean[]{false}).alias("putAll", "").staticScope(StaticScope.NONE).create();
        break;
      case 118:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.QueueType").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType", "jetbrains.mps.baseLanguage.structure.IGenericType").alias("queue", "").staticScope(StaticScope.NONE).create();
        break;
      case 119:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ReduceLeftOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comb"}, new boolean[]{false}).alias("reduceLeft", "perform left reduction").staticScope(StaticScope.NONE).create();
        break;
      case 120:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ReduceRightOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comb"}, new boolean[]{false}).alias("reduceRight", "perform right reduction").staticScope(StaticScope.NONE).create();
        break;
      case 121:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveAllElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").children(new String[]{"argument"}, new boolean[]{false}).alias("removeAll", "remove all elements").staticScope(StaticScope.NONE).create();
        break;
      case 122:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveAllSetElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("removeAll", "remove all elements").staticScope(StaticScope.NONE).create();
        break;
      case 123:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveAtElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"index"}, new boolean[]{false}).alias("removeAt", "remove element at an index").staticScope(StaticScope.NONE).create();
        break;
      case 124:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").children(new String[]{"argument"}, new boolean[]{false}).alias("remove", "remove an element").staticScope(StaticScope.NONE).create();
        break;
      case 125:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveFirstElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").alias("removeFirst", "remove first element").staticScope(StaticScope.NONE).create();
        break;
      case 126:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveLastElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque").alias("removeLast", "remove last element").staticScope(StaticScope.NONE).create();
        break;
      case 127:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").alias("remove", "").staticScope(StaticScope.NONE).create();
        break;
      case 128:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveSetElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("remove", "remove an element").staticScope(StaticScope.NONE).create();
        break;
      case 129:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveWhereOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue").children(new String[]{"filter"}, new boolean[]{false}).alias("removeWhere", "filter out the matched elements").staticScope(StaticScope.NONE).create();
        break;
      case 130:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ReverseOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").alias("reverse", "create a list with elements in reverse order").staticScope(StaticScope.NONE).create();
        break;
      case 131:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SelectOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"selector"}, new boolean[]{false}).alias("select", "transform each element to another type").staticScope(StaticScope.NONE).create();
        break;
      case 132:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SequenceCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"elementType", "initializer"}, new boolean[]{false, false}).alias("sequence", "create new sequence").staticScope(StaticScope.NONE).create();
        break;
      case 133:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 134:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SequenceType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"elementType"}, new boolean[]{false}).alias("sequence", "").staticScope(StaticScope.NONE).create();
        break;
      case 135:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SetElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"index", "element"}, new boolean[]{false, false}).alias("set", "set an element at an index").staticScope(StaticScope.NONE).create();
        break;
      case 136:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SetType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"elementType"}, new boolean[]{false}).alias("set", "").staticScope(StaticScope.NONE).create();
        break;
      case 137:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"argument"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 138:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SingletonSequenceCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"elementType", "singletonValue"}, new boolean[]{false, false}).alias("singleton", "create singleton sequence").staticScope(StaticScope.NONE).create();
        break;
      case 139:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SkipOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"elementsToSkip"}, new boolean[]{false}).alias("skip", "exclude elements from the beginning").staticScope(StaticScope.NONE).create();
        break;
      case 140:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SkipStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("skip", "skip to next element in input sequence").staticScope(StaticScope.NONE).create();
        break;
      case 141:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SmartClosureParameterDeclaration").super_("jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration").parents("jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration").alias("~ <name>", "smart closure parameter").create();
        break;
      case 142:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortDirection").super_("jetbrains.mps.baseLanguage.structure.BooleanConstant").parents("jetbrains.mps.baseLanguage.structure.BooleanConstant", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").staticScope(StaticScope.NONE).create();
        break;
      case 143:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"toComparable", "ascending"}, new boolean[]{false, false}).alias("sortBy", "sort by key").staticScope(StaticScope.NONE).create();
        break;
      case 144:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 145:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortedMapType").super_("jetbrains.mps.baseLanguage.collections.structure.MapType").parents("jetbrains.mps.baseLanguage.collections.structure.MapType").alias("sorted_map", "").staticScope(StaticScope.NONE).create();
        break;
      case 146:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 147:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortedSetType").super_("jetbrains.mps.baseLanguage.collections.structure.SetType").parents("jetbrains.mps.baseLanguage.collections.structure.SetType").alias("sorted_set", "").staticScope(StaticScope.NONE).create();
        break;
      case 148:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.StackType").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType", "jetbrains.mps.baseLanguage.structure.IGenericType").alias("stack", "").staticScope(StaticScope.NONE).create();
        break;
      case 149:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.StopStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("stop", "stop iterating input sequence").staticScope(StaticScope.NONE).create();
        break;
      case 150:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SubListOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"fromIndex", "upToIndex"}, new boolean[]{false, false}).alias("subList", "sub list").staticScope(StaticScope.NONE).create();
        break;
      case 151:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SubMapOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").children(new String[]{"fromKey", "toKey"}, new boolean[]{false, false}).alias("subMap", "").staticScope(StaticScope.NONE).create();
        break;
      case 152:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SubSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").children(new String[]{"fromElement", "toElement"}, new boolean[]{false, false}).alias("subSet", "").staticScope(StaticScope.NONE).create();
        break;
      case 153:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TailListOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"fromIndex"}, new boolean[]{false}).alias("tailList", "tail list").staticScope(StaticScope.NONE).create();
        break;
      case 154:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TailMapOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").children(new String[]{"fromKey"}, new boolean[]{false}).alias("tailMap", "").staticScope(StaticScope.NONE).create();
        break;
      case 155:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TailOperation").super_("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").parents("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").alias("tail", "include elements at the end").staticScope(StaticScope.NONE).create();
        break;
      case 156:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TailSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").children(new String[]{"fromElement"}, new boolean[]{false}).alias("tailSet", "").staticScope(StaticScope.NONE).create();
        break;
      case 157:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TakeOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"elementsToTake"}, new boolean[]{false}).alias("take", "include elements at the beginning").staticScope(StaticScope.NONE).create();
        break;
      case 158:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TestAddElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").alias("testAdd", "add an element and test the outcome").staticScope(StaticScope.NONE).create();
        break;
      case 159:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TestRemoveElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").alias("testRemove", "remove an element and test the outcome").staticScope(StaticScope.NONE).create();
        break;
      case 160:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ToArrayOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("toArray", "convert to an array").staticScope(StaticScope.NONE).create();
        break;
      case 161:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ToIteratorOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("iterator", "convert to an iterator").staticScope(StaticScope.NONE).create();
        break;
      case 162:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ToListOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("toList", "convert to a list").staticScope(StaticScope.NONE).create();
        break;
      case 163:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TranslateOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"mapper"}, new boolean[]{false}).alias("selectMany", "transform each element to a sequence").staticScope(StaticScope.NONE).create();
        break;
      case 164:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TreeMapCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").alias("treemap", "").staticScope(StaticScope.NONE).create();
        break;
      case 165:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TreeSetCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").children(new String[]{"comparator"}, new boolean[]{false}).alias("treeset", "create new treeset").staticScope(StaticScope.NONE).create();
        break;
      case 166:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.UnionOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("union", "produce an union").staticScope(StaticScope.NONE).create();
        break;
      case 167:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ValueAccessOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").alias("value", "").staticScope(StaticScope.NONE).create();
        break;
      case 168:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.VisitAllOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"visitor"}, new boolean[]{false}).alias("forEach", "execute for each element").staticScope(StaticScope.NONE).create();
        break;
      case 169:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.WhereOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"}, new boolean[]{false}).alias("where", "include only matched element").staticScope(StaticScope.NONE).create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator", "jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType", "jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation", "jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation", "jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation", "jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation", "jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation", "jetbrains.mps.baseLanguage.collections.structure.AddAllSetElementsOperation", "jetbrains.mps.baseLanguage.collections.structure.AddElementOperation", "jetbrains.mps.baseLanguage.collections.structure.AddFirstElementOperation", "jetbrains.mps.baseLanguage.collections.structure.AddLastElementOperation", "jetbrains.mps.baseLanguage.collections.structure.AddSetElementOperation", "jetbrains.mps.baseLanguage.collections.structure.AllConstant", "jetbrains.mps.baseLanguage.collections.structure.AllOperation", "jetbrains.mps.baseLanguage.collections.structure.AlsoSortOperation", "jetbrains.mps.baseLanguage.collections.structure.AnyOperation", "jetbrains.mps.baseLanguage.collections.structure.AsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.AsSynchronizedOperation", "jetbrains.mps.baseLanguage.collections.structure.AsUnmodifiableOperation", "jetbrains.mps.baseLanguage.collections.structure.BinaryOperation", "jetbrains.mps.baseLanguage.collections.structure.ChunkOperation", "jetbrains.mps.baseLanguage.collections.structure.ClearAllElementsOperation", "jetbrains.mps.baseLanguage.collections.structure.ClearSetOperation", "jetbrains.mps.baseLanguage.collections.structure.CollectionType", "jetbrains.mps.baseLanguage.collections.structure.ComparatorSortOperation", "jetbrains.mps.baseLanguage.collections.structure.ConcatOperation", "jetbrains.mps.baseLanguage.collections.structure.ContainerIteratorType", "jetbrains.mps.baseLanguage.collections.structure.ContainsAllOperation", "jetbrains.mps.baseLanguage.collections.structure.ContainsKeyOperation", "jetbrains.mps.baseLanguage.collections.structure.ContainsOperation", "jetbrains.mps.baseLanguage.collections.structure.ContainsValueOperation", "jetbrains.mps.baseLanguage.collections.structure.CustomContainerCreator", "jetbrains.mps.baseLanguage.collections.structure.CustomContainerDeclaration", "jetbrains.mps.baseLanguage.collections.structure.CustomContainers", "jetbrains.mps.baseLanguage.collections.structure.CustomMapCreator", "jetbrains.mps.baseLanguage.collections.structure.CutOperation", "jetbrains.mps.baseLanguage.collections.structure.DequeType", "jetbrains.mps.baseLanguage.collections.structure.DisjunctOperation", "jetbrains.mps.baseLanguage.collections.structure.DistinctOperation", "jetbrains.mps.baseLanguage.collections.structure.DowncastExpression", "jetbrains.mps.baseLanguage.collections.structure.EnumeratorType", "jetbrains.mps.baseLanguage.collections.structure.ExcludeOperation", "jetbrains.mps.baseLanguage.collections.structure.FindFirstOperation", "jetbrains.mps.baseLanguage.collections.structure.FindLastOperation", "jetbrains.mps.baseLanguage.collections.structure.FoldLeftOperation", "jetbrains.mps.baseLanguage.collections.structure.FoldRightOperation", "jetbrains.mps.baseLanguage.collections.structure.ForEachStatement", "jetbrains.mps.baseLanguage.collections.structure.ForEachVariable", "jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference", "jetbrains.mps.baseLanguage.collections.structure.GetCurrentOperation", "jetbrains.mps.baseLanguage.collections.structure.GetElementOperation", "jetbrains.mps.baseLanguage.collections.structure.GetEnumeratorOperation", "jetbrains.mps.baseLanguage.collections.structure.GetFirstOperation", "jetbrains.mps.baseLanguage.collections.structure.GetIndexOfOperation", "jetbrains.mps.baseLanguage.collections.structure.GetIteratorOperation", "jetbrains.mps.baseLanguage.collections.structure.GetKeysOperation", "jetbrains.mps.baseLanguage.collections.structure.GetLastIndexOfOperation", "jetbrains.mps.baseLanguage.collections.structure.GetLastOperation", "jetbrains.mps.baseLanguage.collections.structure.GetNextOperation", "jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation", "jetbrains.mps.baseLanguage.collections.structure.GetValuesOperation", "jetbrains.mps.baseLanguage.collections.structure.HasNextOperation", "jetbrains.mps.baseLanguage.collections.structure.HashMapCreator", "jetbrains.mps.baseLanguage.collections.structure.HashSetCreator", "jetbrains.mps.baseLanguage.collections.structure.HeadListOperation", "jetbrains.mps.baseLanguage.collections.structure.HeadMapOperation", "jetbrains.mps.baseLanguage.collections.structure.HeadSetOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack", "jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation", "jetbrains.mps.baseLanguage.collections.structure.IContainerOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.InsertElementOperation", "jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IntersectOperation", "jetbrains.mps.baseLanguage.collections.structure.IsEmptyOperation", "jetbrains.mps.baseLanguage.collections.structure.IsNotEmptyOperation", "jetbrains.mps.baseLanguage.collections.structure.IteratorType", "jetbrains.mps.baseLanguage.collections.structure.JoinOperation", "jetbrains.mps.baseLanguage.collections.structure.KeyAccessOperation", "jetbrains.mps.baseLanguage.collections.structure.LinkedHashMapCreator", "jetbrains.mps.baseLanguage.collections.structure.LinkedHashSetCreator", "jetbrains.mps.baseLanguage.collections.structure.LinkedListCreator", "jetbrains.mps.baseLanguage.collections.structure.LinkedListType", "jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit", "jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression", "jetbrains.mps.baseLanguage.collections.structure.ListType", "jetbrains.mps.baseLanguage.collections.structure.MapAsSequenceVarRef", "jetbrains.mps.baseLanguage.collections.structure.MapClearOperation", "jetbrains.mps.baseLanguage.collections.structure.MapElement", "jetbrains.mps.baseLanguage.collections.structure.MapEntry", "jetbrains.mps.baseLanguage.collections.structure.MapInitializer", "jetbrains.mps.baseLanguage.collections.structure.MapOperation", "jetbrains.mps.baseLanguage.collections.structure.MapOperationExpression", "jetbrains.mps.baseLanguage.collections.structure.MapRemoveOperation", "jetbrains.mps.baseLanguage.collections.structure.MapType", "jetbrains.mps.baseLanguage.collections.structure.MappingType", "jetbrains.mps.baseLanguage.collections.structure.MappingsSetOperation", "jetbrains.mps.baseLanguage.collections.structure.MoveNextOperation", "jetbrains.mps.baseLanguage.collections.structure.MultiForEachPair", "jetbrains.mps.baseLanguage.collections.structure.MultiForEachStatement", "jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariable", "jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariableReference", "jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.OfTypeOperation", "jetbrains.mps.baseLanguage.collections.structure.PageOperation", "jetbrains.mps.baseLanguage.collections.structure.PeekOperation", "jetbrains.mps.baseLanguage.collections.structure.PopOperation", "jetbrains.mps.baseLanguage.collections.structure.PriorityQueueCreator", "jetbrains.mps.baseLanguage.collections.structure.PushOperation", "jetbrains.mps.baseLanguage.collections.structure.PutAllOperation", "jetbrains.mps.baseLanguage.collections.structure.QueueType", "jetbrains.mps.baseLanguage.collections.structure.ReduceLeftOperation", "jetbrains.mps.baseLanguage.collections.structure.ReduceRightOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveAllElementsOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveAllSetElementsOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveAtElementOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveElementOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveFirstElementOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveLastElementOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveSetElementOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveWhereOperation", "jetbrains.mps.baseLanguage.collections.structure.ReverseOperation", "jetbrains.mps.baseLanguage.collections.structure.SelectOperation", "jetbrains.mps.baseLanguage.collections.structure.SequenceCreator", "jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.SequenceType", "jetbrains.mps.baseLanguage.collections.structure.SetElementOperation", "jetbrains.mps.baseLanguage.collections.structure.SetType", "jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.SingletonSequenceCreator", "jetbrains.mps.baseLanguage.collections.structure.SkipOperation", "jetbrains.mps.baseLanguage.collections.structure.SkipStatement", "jetbrains.mps.baseLanguage.collections.structure.SmartClosureParameterDeclaration", "jetbrains.mps.baseLanguage.collections.structure.SortDirection", "jetbrains.mps.baseLanguage.collections.structure.SortOperation", "jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation", "jetbrains.mps.baseLanguage.collections.structure.SortedMapType", "jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation", "jetbrains.mps.baseLanguage.collections.structure.SortedSetType", "jetbrains.mps.baseLanguage.collections.structure.StackType", "jetbrains.mps.baseLanguage.collections.structure.StopStatement", "jetbrains.mps.baseLanguage.collections.structure.SubListOperation", "jetbrains.mps.baseLanguage.collections.structure.SubMapOperation", "jetbrains.mps.baseLanguage.collections.structure.SubSetOperation", "jetbrains.mps.baseLanguage.collections.structure.TailListOperation", "jetbrains.mps.baseLanguage.collections.structure.TailMapOperation", "jetbrains.mps.baseLanguage.collections.structure.TailOperation", "jetbrains.mps.baseLanguage.collections.structure.TailSetOperation", "jetbrains.mps.baseLanguage.collections.structure.TakeOperation", "jetbrains.mps.baseLanguage.collections.structure.TestAddElementOperation", "jetbrains.mps.baseLanguage.collections.structure.TestRemoveElementOperation", "jetbrains.mps.baseLanguage.collections.structure.ToArrayOperation", "jetbrains.mps.baseLanguage.collections.structure.ToIteratorOperation", "jetbrains.mps.baseLanguage.collections.structure.ToListOperation", "jetbrains.mps.baseLanguage.collections.structure.TranslateOperation", "jetbrains.mps.baseLanguage.collections.structure.TreeMapCreator", "jetbrains.mps.baseLanguage.collections.structure.TreeSetCreator", "jetbrains.mps.baseLanguage.collections.structure.UnionOperation", "jetbrains.mps.baseLanguage.collections.structure.ValueAccessOperation", "jetbrains.mps.baseLanguage.collections.structure.VisitAllOperation", "jetbrains.mps.baseLanguage.collections.structure.WhereOperation"};
}
