package jetbrains.mps.baseLanguage.collections.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractContainerCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"elementType", "initValue", "copyFrom", "initSize"}, new boolean[]{false, true, false, false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractContainerType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"elementType"}, new boolean[]{false}).abstract_().alias("", "container type").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractEnumeratorOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractIteratorOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractMappingOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractSetOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAddAllElementsOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").children(new String[]{"argument"}, new boolean[]{false}).alias("addAll", "add all elements").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAddAllSetElementsOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddAllSetElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("addAll", "add all elements").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAddElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").children(new String[]{"argument"}, new boolean[]{false}).alias("add", "add an element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAddFirstElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddFirstElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").children(new String[]{"argument"}, new boolean[]{false}).alias("addFirst", "add element as first").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAddLastElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddLastElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue").children(new String[]{"argument"}, new boolean[]{false}).alias("addLast", "add element as last").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAddSetElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddSetElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("add", "add an element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAllConstant = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AllConstant").super_("jetbrains.mps.baseLanguage.structure.IntegerLiteral").parents("jetbrains.mps.baseLanguage.structure.IntegerLiteral").alias("ALL", "all elements").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAllOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AllOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"}, new boolean[]{false}).alias("all", "check if all elements match the condition").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAlsoSortOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AlsoSortOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortOperation").alias("alsoSortBy", "sort by secondary key").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnyOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AnyOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"}, new boolean[]{false}).alias("any", "check if there are any elements matching the condition").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAsSequenceOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AsSequenceOperation").super_("jetbrains.mps.baseLanguage.structure.AbstractOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractOperation", "jetbrains.mps.baseLanguage.structure.IOperation").alias("asSequence", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAsSynchronizedOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AsSynchronizedOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").alias("asSynchronized", "synchronized collection").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAsUnmodifiableOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AsUnmodifiableOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").alias("asUnmodifiable", "unmodifiable collection").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBinaryOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"rightExpression"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptChunkOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"length"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptClearAllElementsOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ClearAllElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").alias("clear", "clear all elements").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptClearSetOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ClearSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").alias("clear", "clear all elements").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCollectionType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CollectionType").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType", "jetbrains.mps.baseLanguage.structure.IGenericType").alias("collection", "abstract collection type").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptComparatorSortOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ComparatorSortOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comparator", "ascending"}, new boolean[]{false, false}).alias("sort", "sort using comparator").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConcatOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ConcatOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("concat", "produce a sequence concatenation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptContainerIteratorType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainerIteratorType").super_("jetbrains.mps.baseLanguage.collections.structure.IteratorType").parents("jetbrains.mps.baseLanguage.collections.structure.IteratorType").alias("modifying_iterator", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptContainsAllOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainsAllOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("containsAll", "test if sequence contains all element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptContainsKeyOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainsKeyOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").children(new String[]{"key"}, new boolean[]{false}).alias("containsKey", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptContainsOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("contains", "test if sequence contains an element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptContainsValueOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainsValueOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").children(new String[]{"value"}, new boolean[]{false}).alias("containsValue", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCustomContainerCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CustomContainerCreator").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").references("containerDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCustomContainerDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CustomContainerDeclaration").super_("jetbrains.mps.baseLanguage.structure.GenericDeclaration").parents("jetbrains.mps.baseLanguage.structure.GenericDeclaration", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IVisible").children(new String[]{"containerType", "runtimeType", "factory"}, new boolean[]{false, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptCustomContainers = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CustomContainers").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"containerDeclaration"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptCustomMapCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CustomMapCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").references("containerDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCutOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CutOperation").super_("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").parents("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").alias("cut", "exclude elements from the end").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDequeType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.DequeType").super_("jetbrains.mps.baseLanguage.collections.structure.QueueType").parents("jetbrains.mps.baseLanguage.collections.structure.QueueType", "jetbrains.mps.baseLanguage.structure.IGenericType").alias("deque", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDisjunctOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.DisjunctOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("disjunction", "produce an exclusive disjunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDistinctOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.DistinctOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("distinct", "produce sequence with unique elements").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDowncastExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.DowncastExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"expression"}, new boolean[]{false}).alias("downcast", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEnumeratorType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.EnumeratorType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"elementType"}, new boolean[]{false}).alias("enumerator", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExcludeOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ExcludeOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("except", "subtract a sequence").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptFindFirstOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.FindFirstOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"}, new boolean[]{false}).alias("findFirst", "find first element that matches").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptFindLastOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.FindLastOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"}, new boolean[]{false}).alias("findLast", "find last element that matches").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptFoldLeftOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.FoldLeftOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comb", "seed"}, new boolean[]{false, false}).alias("foldLeft", "perform left folding").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptFoldRightOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.FoldRightOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comb", "seed"}, new boolean[]{false, false}).alias("foldRight", "perform right folding").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptForEachStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ForEachStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"variable", "inputSequence"}, new boolean[]{false, false}).alias("foreach", "foreach <e> in <sequence>").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptForEachVariable = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ForEachVariable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.baseLanguage.structure.IVariableDeclaration", "jetbrains.mps.lang.core.structure.IResolveInfo").staticScope(StaticScope.ROOT).create();
  /*package*/ final ConceptDescriptor myConceptForEachVariableReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IVariableReference").references("variable").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetCurrentOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetCurrentOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").alias("current", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"argument"}, new boolean[]{false}).alias("get", "get element by index").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetEnumeratorOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetEnumeratorOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("enumerator", "get the enumerator").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetFirstOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetFirstOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("first", "get the first element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetIndexOfOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetIndexOfOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("indexOf", "get the index of an element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetIteratorOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetIteratorOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("iterator", "get the iterator").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetKeysOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetKeysOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").alias("keys", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetLastIndexOfOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetLastIndexOfOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("lastIndexOf", "get the index of an element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetLastOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetLastOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("last", "get the last element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetNextOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetNextOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").alias("next", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetSizeOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("size", "get the sequence size").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetValuesOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetValuesOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").alias("values", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptHasNextOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HasNextOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").alias("hasNext", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptHashMapCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"keyType", "valueType", "initializer", "initSize"}, new boolean[]{false, false, false, false}).alias("hashmap", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptHashSetCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").alias("hashset", "create new hashset").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptHeadListOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HeadListOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"upToIndex"}, new boolean[]{false}).alias("headList", "head list").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptHeadMapOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HeadMapOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").children(new String[]{"toKey"}, new boolean[]{false}).alias("headMap", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptHeadSetOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HeadSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").children(new String[]{"toElement"}, new boolean[]{false}).alias("headSet", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIApplicableToCollection = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").create();
  /*package*/ final ConceptDescriptor myConceptIApplicableToDeque = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing").create();
  /*package*/ final ConceptDescriptor myConceptIApplicableToList = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing").create();
  /*package*/ final ConceptDescriptor myConceptIApplicableToNothing = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIApplicableToQueue = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque").create();
  /*package*/ final ConceptDescriptor myConceptIApplicableToStack = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque").create();
  /*package*/ final ConceptDescriptor myConceptICollectionOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation").create();
  /*package*/ final ConceptDescriptor myConceptIContainerOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation").interface_().parents("jetbrains.mps.baseLanguage.structure.IOperation").create();
  /*package*/ final ConceptDescriptor myConceptIDequeOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IDequeOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation").create();
  /*package*/ final ConceptDescriptor myConceptIListOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IListOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation").create();
  /*package*/ final ConceptDescriptor myConceptIQueueOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IQueueOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation").create();
  /*package*/ final ConceptDescriptor myConceptIStackOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IStackOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation").create();
  /*package*/ final ConceptDescriptor myConceptInsertElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.InsertElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"index", "element"}, new boolean[]{false, false}).alias("insert", "insert element at an index").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInternalSequenceOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"closure"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIntersectOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IntersectOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("intersect", "produce an intersection").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIsEmptyOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IsEmptyOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("isEmpty", "test if sequence is empty").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIsNotEmptyOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IsNotEmptyOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("isNotEmpty", "test if sequence is not empty").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIteratorType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IteratorType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"elementType"}, new boolean[]{false}).alias("iterator", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptJoinOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.JoinOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"delimiter"}, new boolean[]{false}).alias("join", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptKeyAccessOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.KeyAccessOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").alias("key", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLinkedHashMapCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.LinkedHashMapCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").properties("order").alias("linked_hashmap", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLinkedHashSetCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.LinkedHashSetCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").alias("linked_hashset", "create new linked hashset").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLinkedListCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.LinkedListCreator").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").alias("linkedlist", "create new linked list").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLinkedListType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.LinkedListType").super_("jetbrains.mps.baseLanguage.collections.structure.ListType").parents("jetbrains.mps.baseLanguage.collections.structure.ListType").alias("linkedlist", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptListCreatorWithInit = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").alias("arraylist", "create new array list").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptListElementAccessExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"list", "index"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptListType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ListType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"elementType"}, new boolean[]{false}).alias("list", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMapAsSequenceVarRef = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapAsSequenceVarRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"original"}, new boolean[]{false}).staticScope(StaticScope.ROOT).create();
  /*package*/ final ConceptDescriptor myConceptMapClearOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapClearOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").alias("clear", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMapElement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapElement").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"map", "key"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMapEntry = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapEntry").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"key", "value"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptMapInitializer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapInitializer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"entries"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptMapOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMapOperationExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapOperationExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"expression", "mapOperation"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMapRemoveOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapRemoveOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").children(new String[]{"key"}, new boolean[]{false}).alias("removeKey", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMapType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"keyType", "valueType"}, new boolean[]{false, false}).alias("map", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMappingType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MappingType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"keyType", "valueType"}, new boolean[]{false, false}).alias("mapping", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMappingsSetOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MappingsSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").alias("mappings", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMoveNextOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MoveNextOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").alias("moveNext", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMultiForEachPair = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MultiForEachPair").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"variable", "input"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptMultiForEachStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MultiForEachStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"forEach"}, new boolean[]{true}).alias("foreach", "foreach loop over multiple variables").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMultiForEachVariable = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.baseLanguage.structure.IVariableDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptMultiForEachVariableReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("variable").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNoArgumentsSequenceOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptOfTypeOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.OfTypeOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"requestedType"}, new boolean[]{false}).alias("ofType", "select elements of the specified type").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPageOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PageOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"fromElement", "toElement"}, new boolean[]{false, false}).alias("page", "select a subsequence").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPeekOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PeekOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").alias("peek", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPopOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PopOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").alias("pop", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPriorityQueueCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PriorityQueueCreator").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").alias("priority_queue", "create new priority queue").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPushOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PushOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").children(new String[]{"argument"}, new boolean[]{false}).alias("push", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPutAllOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PutAllOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").children(new String[]{"map"}, new boolean[]{false}).alias("putAll", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueueType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.QueueType").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType", "jetbrains.mps.baseLanguage.structure.IGenericType").alias("queue", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptReduceLeftOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ReduceLeftOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comb"}, new boolean[]{false}).alias("reduceLeft", "perform left reduction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptReduceRightOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ReduceRightOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comb"}, new boolean[]{false}).alias("reduceRight", "perform right reduction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemoveAllElementsOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveAllElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").children(new String[]{"argument"}, new boolean[]{false}).alias("removeAll", "remove all elements").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemoveAllSetElementsOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveAllSetElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("removeAll", "remove all elements").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemoveAtElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveAtElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"index"}, new boolean[]{false}).alias("removeAt", "remove element at an index").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemoveElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").children(new String[]{"argument"}, new boolean[]{false}).alias("remove", "remove an element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemoveFirstElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveFirstElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").alias("removeFirst", "remove first element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemoveLastElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveLastElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque").alias("removeLast", "remove last element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemoveOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").alias("remove", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemoveSetElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveSetElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("remove", "remove an element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemoveWhereOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveWhereOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue").children(new String[]{"filter"}, new boolean[]{false}).alias("removeWhere", "filter out the matched elements").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptReverseOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ReverseOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").alias("reverse", "create a list with elements in reverse order").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSelectOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SelectOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"selector"}, new boolean[]{false}).alias("select", "transform each element to another type").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSequenceCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SequenceCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"elementType", "initializer"}, new boolean[]{false, false}).alias("sequence", "create new sequence").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSequenceOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSequenceType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SequenceType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"elementType"}, new boolean[]{false}).alias("sequence", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSetElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SetElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"index", "element"}, new boolean[]{false, false}).alias("set", "set an element at an index").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSetType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SetType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"elementType"}, new boolean[]{false}).alias("set", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSingleArgumentSequenceOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"argument"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSingletonSequenceCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SingletonSequenceCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"elementType", "singletonValue"}, new boolean[]{false, false}).alias("singleton", "create singleton sequence").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSkipOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SkipOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"elementsToSkip"}, new boolean[]{false}).alias("skip", "exclude elements from the beginning").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSkipStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SkipStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("skip", "skip to next element in input sequence").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSmartClosureParameterDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SmartClosureParameterDeclaration").super_("jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration").parents("jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration").alias("~ <name>", "smart closure parameter").create();
  /*package*/ final ConceptDescriptor myConceptSortDirection = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortDirection").super_("jetbrains.mps.baseLanguage.structure.BooleanConstant").parents("jetbrains.mps.baseLanguage.structure.BooleanConstant", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSortOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"toComparable", "ascending"}, new boolean[]{false, false}).alias("sortBy", "sort by key").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSortedMapOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSortedMapType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortedMapType").super_("jetbrains.mps.baseLanguage.collections.structure.MapType").parents("jetbrains.mps.baseLanguage.collections.structure.MapType").alias("sorted_map", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSortedSetOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSortedSetType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortedSetType").super_("jetbrains.mps.baseLanguage.collections.structure.SetType").parents("jetbrains.mps.baseLanguage.collections.structure.SetType").alias("sorted_set", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptStackType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.StackType").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType", "jetbrains.mps.baseLanguage.structure.IGenericType").alias("stack", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptStopStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.StopStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("stop", "stop iterating input sequence").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSubListOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SubListOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"fromIndex", "upToIndex"}, new boolean[]{false, false}).alias("subList", "sub list").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSubMapOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SubMapOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").children(new String[]{"fromKey", "toKey"}, new boolean[]{false, false}).alias("subMap", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSubSetOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SubSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").children(new String[]{"fromElement", "toElement"}, new boolean[]{false, false}).alias("subSet", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTailListOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TailListOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"fromIndex"}, new boolean[]{false}).alias("tailList", "tail list").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTailMapOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TailMapOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").children(new String[]{"fromKey"}, new boolean[]{false}).alias("tailMap", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTailOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TailOperation").super_("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").parents("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").alias("tail", "include elements at the end").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTailSetOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TailSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").children(new String[]{"fromElement"}, new boolean[]{false}).alias("tailSet", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTakeOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TakeOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"elementsToTake"}, new boolean[]{false}).alias("take", "include elements at the beginning").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTestAddElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TestAddElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").alias("testAdd", "add an element and test the outcome").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTestRemoveElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TestRemoveElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").alias("testRemove", "remove an element and test the outcome").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptToArrayOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ToArrayOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("toArray", "convert to an array").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptToIteratorOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ToIteratorOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("iterator", "convert to an iterator").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptToListOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ToListOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("toList", "convert to a list").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTranslateOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TranslateOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"mapper"}, new boolean[]{false}).alias("selectMany", "transform each element to a sequence").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTreeMapCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TreeMapCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").alias("treemap", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTreeSetCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TreeSetCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").children(new String[]{"comparator"}, new boolean[]{false}).alias("treeset", "create new treeset").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUnionOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.UnionOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("union", "produce an union").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptValueAccessOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ValueAccessOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").alias("value", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptVisitAllOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.VisitAllOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"visitor"}, new boolean[]{false}).alias("forEach", "execute for each element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptWhereOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.WhereOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"}, new boolean[]{false}).alias("where", "include only matched element").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractContainerCreator, myConceptAbstractContainerType, myConceptAbstractEnumeratorOperation, myConceptAbstractIteratorOperation, myConceptAbstractMappingOperation, myConceptAbstractSetOperation, myConceptAddAllElementsOperation, myConceptAddAllSetElementsOperation, myConceptAddElementOperation, myConceptAddFirstElementOperation, myConceptAddLastElementOperation, myConceptAddSetElementOperation, myConceptAllConstant, myConceptAllOperation, myConceptAlsoSortOperation, myConceptAnyOperation, myConceptAsSequenceOperation, myConceptAsSynchronizedOperation, myConceptAsUnmodifiableOperation, myConceptBinaryOperation, myConceptChunkOperation, myConceptClearAllElementsOperation, myConceptClearSetOperation, myConceptCollectionType, myConceptComparatorSortOperation, myConceptConcatOperation, myConceptContainerIteratorType, myConceptContainsAllOperation, myConceptContainsKeyOperation, myConceptContainsOperation, myConceptContainsValueOperation, myConceptCustomContainerCreator, myConceptCustomContainerDeclaration, myConceptCustomContainers, myConceptCustomMapCreator, myConceptCutOperation, myConceptDequeType, myConceptDisjunctOperation, myConceptDistinctOperation, myConceptDowncastExpression, myConceptEnumeratorType, myConceptExcludeOperation, myConceptFindFirstOperation, myConceptFindLastOperation, myConceptFoldLeftOperation, myConceptFoldRightOperation, myConceptForEachStatement, myConceptForEachVariable, myConceptForEachVariableReference, myConceptGetCurrentOperation, myConceptGetElementOperation, myConceptGetEnumeratorOperation, myConceptGetFirstOperation, myConceptGetIndexOfOperation, myConceptGetIteratorOperation, myConceptGetKeysOperation, myConceptGetLastIndexOfOperation, myConceptGetLastOperation, myConceptGetNextOperation, myConceptGetSizeOperation, myConceptGetValuesOperation, myConceptHasNextOperation, myConceptHashMapCreator, myConceptHashSetCreator, myConceptHeadListOperation, myConceptHeadMapOperation, myConceptHeadSetOperation, myConceptIApplicableToCollection, myConceptIApplicableToDeque, myConceptIApplicableToList, myConceptIApplicableToNothing, myConceptIApplicableToQueue, myConceptIApplicableToStack, myConceptICollectionOperation, myConceptIContainerOperation, myConceptIDequeOperation, myConceptIListOperation, myConceptIQueueOperation, myConceptIStackOperation, myConceptInsertElementOperation, myConceptInternalSequenceOperation, myConceptIntersectOperation, myConceptIsEmptyOperation, myConceptIsNotEmptyOperation, myConceptIteratorType, myConceptJoinOperation, myConceptKeyAccessOperation, myConceptLinkedHashMapCreator, myConceptLinkedHashSetCreator, myConceptLinkedListCreator, myConceptLinkedListType, myConceptListCreatorWithInit, myConceptListElementAccessExpression, myConceptListType, myConceptMapAsSequenceVarRef, myConceptMapClearOperation, myConceptMapElement, myConceptMapEntry, myConceptMapInitializer, myConceptMapOperation, myConceptMapOperationExpression, myConceptMapRemoveOperation, myConceptMapType, myConceptMappingType, myConceptMappingsSetOperation, myConceptMoveNextOperation, myConceptMultiForEachPair, myConceptMultiForEachStatement, myConceptMultiForEachVariable, myConceptMultiForEachVariableReference, myConceptNoArgumentsSequenceOperation, myConceptOfTypeOperation, myConceptPageOperation, myConceptPeekOperation, myConceptPopOperation, myConceptPriorityQueueCreator, myConceptPushOperation, myConceptPutAllOperation, myConceptQueueType, myConceptReduceLeftOperation, myConceptReduceRightOperation, myConceptRemoveAllElementsOperation, myConceptRemoveAllSetElementsOperation, myConceptRemoveAtElementOperation, myConceptRemoveElementOperation, myConceptRemoveFirstElementOperation, myConceptRemoveLastElementOperation, myConceptRemoveOperation, myConceptRemoveSetElementOperation, myConceptRemoveWhereOperation, myConceptReverseOperation, myConceptSelectOperation, myConceptSequenceCreator, myConceptSequenceOperation, myConceptSequenceType, myConceptSetElementOperation, myConceptSetType, myConceptSingleArgumentSequenceOperation, myConceptSingletonSequenceCreator, myConceptSkipOperation, myConceptSkipStatement, myConceptSmartClosureParameterDeclaration, myConceptSortDirection, myConceptSortOperation, myConceptSortedMapOperation, myConceptSortedMapType, myConceptSortedSetOperation, myConceptSortedSetType, myConceptStackType, myConceptStopStatement, myConceptSubListOperation, myConceptSubMapOperation, myConceptSubSetOperation, myConceptTailListOperation, myConceptTailMapOperation, myConceptTailOperation, myConceptTailSetOperation, myConceptTakeOperation, myConceptTestAddElementOperation, myConceptTestRemoveElementOperation, myConceptToArrayOperation, myConceptToIteratorOperation, myConceptToListOperation, myConceptTranslateOperation, myConceptTreeMapCreator, myConceptTreeSetCreator, myConceptUnionOperation, myConceptValueAccessOperation, myConceptVisitAllOperation, myConceptWhereOperation);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0rg, conceptFqName)) {
      case 0:
        return myConceptAbstractContainerCreator;
      case 1:
        return myConceptAbstractContainerType;
      case 2:
        return myConceptAbstractEnumeratorOperation;
      case 3:
        return myConceptAbstractIteratorOperation;
      case 4:
        return myConceptAbstractMappingOperation;
      case 5:
        return myConceptAbstractSetOperation;
      case 6:
        return myConceptAddAllElementsOperation;
      case 7:
        return myConceptAddAllSetElementsOperation;
      case 8:
        return myConceptAddElementOperation;
      case 9:
        return myConceptAddFirstElementOperation;
      case 10:
        return myConceptAddLastElementOperation;
      case 11:
        return myConceptAddSetElementOperation;
      case 12:
        return myConceptAllConstant;
      case 13:
        return myConceptAllOperation;
      case 14:
        return myConceptAlsoSortOperation;
      case 15:
        return myConceptAnyOperation;
      case 16:
        return myConceptAsSequenceOperation;
      case 17:
        return myConceptAsSynchronizedOperation;
      case 18:
        return myConceptAsUnmodifiableOperation;
      case 19:
        return myConceptBinaryOperation;
      case 20:
        return myConceptChunkOperation;
      case 21:
        return myConceptClearAllElementsOperation;
      case 22:
        return myConceptClearSetOperation;
      case 23:
        return myConceptCollectionType;
      case 24:
        return myConceptComparatorSortOperation;
      case 25:
        return myConceptConcatOperation;
      case 26:
        return myConceptContainerIteratorType;
      case 27:
        return myConceptContainsAllOperation;
      case 28:
        return myConceptContainsKeyOperation;
      case 29:
        return myConceptContainsOperation;
      case 30:
        return myConceptContainsValueOperation;
      case 31:
        return myConceptCustomContainerCreator;
      case 32:
        return myConceptCustomContainerDeclaration;
      case 33:
        return myConceptCustomContainers;
      case 34:
        return myConceptCustomMapCreator;
      case 35:
        return myConceptCutOperation;
      case 36:
        return myConceptDequeType;
      case 37:
        return myConceptDisjunctOperation;
      case 38:
        return myConceptDistinctOperation;
      case 39:
        return myConceptDowncastExpression;
      case 40:
        return myConceptEnumeratorType;
      case 41:
        return myConceptExcludeOperation;
      case 42:
        return myConceptFindFirstOperation;
      case 43:
        return myConceptFindLastOperation;
      case 44:
        return myConceptFoldLeftOperation;
      case 45:
        return myConceptFoldRightOperation;
      case 46:
        return myConceptForEachStatement;
      case 47:
        return myConceptForEachVariable;
      case 48:
        return myConceptForEachVariableReference;
      case 49:
        return myConceptGetCurrentOperation;
      case 50:
        return myConceptGetElementOperation;
      case 51:
        return myConceptGetEnumeratorOperation;
      case 52:
        return myConceptGetFirstOperation;
      case 53:
        return myConceptGetIndexOfOperation;
      case 54:
        return myConceptGetIteratorOperation;
      case 55:
        return myConceptGetKeysOperation;
      case 56:
        return myConceptGetLastIndexOfOperation;
      case 57:
        return myConceptGetLastOperation;
      case 58:
        return myConceptGetNextOperation;
      case 59:
        return myConceptGetSizeOperation;
      case 60:
        return myConceptGetValuesOperation;
      case 61:
        return myConceptHasNextOperation;
      case 62:
        return myConceptHashMapCreator;
      case 63:
        return myConceptHashSetCreator;
      case 64:
        return myConceptHeadListOperation;
      case 65:
        return myConceptHeadMapOperation;
      case 66:
        return myConceptHeadSetOperation;
      case 67:
        return myConceptIApplicableToCollection;
      case 68:
        return myConceptIApplicableToDeque;
      case 69:
        return myConceptIApplicableToList;
      case 70:
        return myConceptIApplicableToNothing;
      case 71:
        return myConceptIApplicableToQueue;
      case 72:
        return myConceptIApplicableToStack;
      case 73:
        return myConceptICollectionOperation;
      case 74:
        return myConceptIContainerOperation;
      case 75:
        return myConceptIDequeOperation;
      case 76:
        return myConceptIListOperation;
      case 77:
        return myConceptIQueueOperation;
      case 78:
        return myConceptIStackOperation;
      case 79:
        return myConceptInsertElementOperation;
      case 80:
        return myConceptInternalSequenceOperation;
      case 81:
        return myConceptIntersectOperation;
      case 82:
        return myConceptIsEmptyOperation;
      case 83:
        return myConceptIsNotEmptyOperation;
      case 84:
        return myConceptIteratorType;
      case 85:
        return myConceptJoinOperation;
      case 86:
        return myConceptKeyAccessOperation;
      case 87:
        return myConceptLinkedHashMapCreator;
      case 88:
        return myConceptLinkedHashSetCreator;
      case 89:
        return myConceptLinkedListCreator;
      case 90:
        return myConceptLinkedListType;
      case 91:
        return myConceptListCreatorWithInit;
      case 92:
        return myConceptListElementAccessExpression;
      case 93:
        return myConceptListType;
      case 94:
        return myConceptMapAsSequenceVarRef;
      case 95:
        return myConceptMapClearOperation;
      case 96:
        return myConceptMapElement;
      case 97:
        return myConceptMapEntry;
      case 98:
        return myConceptMapInitializer;
      case 99:
        return myConceptMapOperation;
      case 100:
        return myConceptMapOperationExpression;
      case 101:
        return myConceptMapRemoveOperation;
      case 102:
        return myConceptMapType;
      case 103:
        return myConceptMappingType;
      case 104:
        return myConceptMappingsSetOperation;
      case 105:
        return myConceptMoveNextOperation;
      case 106:
        return myConceptMultiForEachPair;
      case 107:
        return myConceptMultiForEachStatement;
      case 108:
        return myConceptMultiForEachVariable;
      case 109:
        return myConceptMultiForEachVariableReference;
      case 110:
        return myConceptNoArgumentsSequenceOperation;
      case 111:
        return myConceptOfTypeOperation;
      case 112:
        return myConceptPageOperation;
      case 113:
        return myConceptPeekOperation;
      case 114:
        return myConceptPopOperation;
      case 115:
        return myConceptPriorityQueueCreator;
      case 116:
        return myConceptPushOperation;
      case 117:
        return myConceptPutAllOperation;
      case 118:
        return myConceptQueueType;
      case 119:
        return myConceptReduceLeftOperation;
      case 120:
        return myConceptReduceRightOperation;
      case 121:
        return myConceptRemoveAllElementsOperation;
      case 122:
        return myConceptRemoveAllSetElementsOperation;
      case 123:
        return myConceptRemoveAtElementOperation;
      case 124:
        return myConceptRemoveElementOperation;
      case 125:
        return myConceptRemoveFirstElementOperation;
      case 126:
        return myConceptRemoveLastElementOperation;
      case 127:
        return myConceptRemoveOperation;
      case 128:
        return myConceptRemoveSetElementOperation;
      case 129:
        return myConceptRemoveWhereOperation;
      case 130:
        return myConceptReverseOperation;
      case 131:
        return myConceptSelectOperation;
      case 132:
        return myConceptSequenceCreator;
      case 133:
        return myConceptSequenceOperation;
      case 134:
        return myConceptSequenceType;
      case 135:
        return myConceptSetElementOperation;
      case 136:
        return myConceptSetType;
      case 137:
        return myConceptSingleArgumentSequenceOperation;
      case 138:
        return myConceptSingletonSequenceCreator;
      case 139:
        return myConceptSkipOperation;
      case 140:
        return myConceptSkipStatement;
      case 141:
        return myConceptSmartClosureParameterDeclaration;
      case 142:
        return myConceptSortDirection;
      case 143:
        return myConceptSortOperation;
      case 144:
        return myConceptSortedMapOperation;
      case 145:
        return myConceptSortedMapType;
      case 146:
        return myConceptSortedSetOperation;
      case 147:
        return myConceptSortedSetType;
      case 148:
        return myConceptStackType;
      case 149:
        return myConceptStopStatement;
      case 150:
        return myConceptSubListOperation;
      case 151:
        return myConceptSubMapOperation;
      case 152:
        return myConceptSubSetOperation;
      case 153:
        return myConceptTailListOperation;
      case 154:
        return myConceptTailMapOperation;
      case 155:
        return myConceptTailOperation;
      case 156:
        return myConceptTailSetOperation;
      case 157:
        return myConceptTakeOperation;
      case 158:
        return myConceptTestAddElementOperation;
      case 159:
        return myConceptTestRemoveElementOperation;
      case 160:
        return myConceptToArrayOperation;
      case 161:
        return myConceptToIteratorOperation;
      case 162:
        return myConceptToListOperation;
      case 163:
        return myConceptTranslateOperation;
      case 164:
        return myConceptTreeMapCreator;
      case 165:
        return myConceptTreeSetCreator;
      case 166:
        return myConceptUnionOperation;
      case 167:
        return myConceptValueAccessOperation;
      case 168:
        return myConceptVisitAllOperation;
      case 169:
        return myConceptWhereOperation;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0rg = new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator", "jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType", "jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation", "jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation", "jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation", "jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation", "jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation", "jetbrains.mps.baseLanguage.collections.structure.AddAllSetElementsOperation", "jetbrains.mps.baseLanguage.collections.structure.AddElementOperation", "jetbrains.mps.baseLanguage.collections.structure.AddFirstElementOperation", "jetbrains.mps.baseLanguage.collections.structure.AddLastElementOperation", "jetbrains.mps.baseLanguage.collections.structure.AddSetElementOperation", "jetbrains.mps.baseLanguage.collections.structure.AllConstant", "jetbrains.mps.baseLanguage.collections.structure.AllOperation", "jetbrains.mps.baseLanguage.collections.structure.AlsoSortOperation", "jetbrains.mps.baseLanguage.collections.structure.AnyOperation", "jetbrains.mps.baseLanguage.collections.structure.AsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.AsSynchronizedOperation", "jetbrains.mps.baseLanguage.collections.structure.AsUnmodifiableOperation", "jetbrains.mps.baseLanguage.collections.structure.BinaryOperation", "jetbrains.mps.baseLanguage.collections.structure.ChunkOperation", "jetbrains.mps.baseLanguage.collections.structure.ClearAllElementsOperation", "jetbrains.mps.baseLanguage.collections.structure.ClearSetOperation", "jetbrains.mps.baseLanguage.collections.structure.CollectionType", "jetbrains.mps.baseLanguage.collections.structure.ComparatorSortOperation", "jetbrains.mps.baseLanguage.collections.structure.ConcatOperation", "jetbrains.mps.baseLanguage.collections.structure.ContainerIteratorType", "jetbrains.mps.baseLanguage.collections.structure.ContainsAllOperation", "jetbrains.mps.baseLanguage.collections.structure.ContainsKeyOperation", "jetbrains.mps.baseLanguage.collections.structure.ContainsOperation", "jetbrains.mps.baseLanguage.collections.structure.ContainsValueOperation", "jetbrains.mps.baseLanguage.collections.structure.CustomContainerCreator", "jetbrains.mps.baseLanguage.collections.structure.CustomContainerDeclaration", "jetbrains.mps.baseLanguage.collections.structure.CustomContainers", "jetbrains.mps.baseLanguage.collections.structure.CustomMapCreator", "jetbrains.mps.baseLanguage.collections.structure.CutOperation", "jetbrains.mps.baseLanguage.collections.structure.DequeType", "jetbrains.mps.baseLanguage.collections.structure.DisjunctOperation", "jetbrains.mps.baseLanguage.collections.structure.DistinctOperation", "jetbrains.mps.baseLanguage.collections.structure.DowncastExpression", "jetbrains.mps.baseLanguage.collections.structure.EnumeratorType", "jetbrains.mps.baseLanguage.collections.structure.ExcludeOperation", "jetbrains.mps.baseLanguage.collections.structure.FindFirstOperation", "jetbrains.mps.baseLanguage.collections.structure.FindLastOperation", "jetbrains.mps.baseLanguage.collections.structure.FoldLeftOperation", "jetbrains.mps.baseLanguage.collections.structure.FoldRightOperation", "jetbrains.mps.baseLanguage.collections.structure.ForEachStatement", "jetbrains.mps.baseLanguage.collections.structure.ForEachVariable", "jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference", "jetbrains.mps.baseLanguage.collections.structure.GetCurrentOperation", "jetbrains.mps.baseLanguage.collections.structure.GetElementOperation", "jetbrains.mps.baseLanguage.collections.structure.GetEnumeratorOperation", "jetbrains.mps.baseLanguage.collections.structure.GetFirstOperation", "jetbrains.mps.baseLanguage.collections.structure.GetIndexOfOperation", "jetbrains.mps.baseLanguage.collections.structure.GetIteratorOperation", "jetbrains.mps.baseLanguage.collections.structure.GetKeysOperation", "jetbrains.mps.baseLanguage.collections.structure.GetLastIndexOfOperation", "jetbrains.mps.baseLanguage.collections.structure.GetLastOperation", "jetbrains.mps.baseLanguage.collections.structure.GetNextOperation", "jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation", "jetbrains.mps.baseLanguage.collections.structure.GetValuesOperation", "jetbrains.mps.baseLanguage.collections.structure.HasNextOperation", "jetbrains.mps.baseLanguage.collections.structure.HashMapCreator", "jetbrains.mps.baseLanguage.collections.structure.HashSetCreator", "jetbrains.mps.baseLanguage.collections.structure.HeadListOperation", "jetbrains.mps.baseLanguage.collections.structure.HeadMapOperation", "jetbrains.mps.baseLanguage.collections.structure.HeadSetOperation", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue", "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack", "jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation", "jetbrains.mps.baseLanguage.collections.structure.IContainerOperation", "jetbrains.mps.baseLanguage.collections.structure.IDequeOperation", "jetbrains.mps.baseLanguage.collections.structure.IListOperation", "jetbrains.mps.baseLanguage.collections.structure.IQueueOperation", "jetbrains.mps.baseLanguage.collections.structure.IStackOperation", "jetbrains.mps.baseLanguage.collections.structure.InsertElementOperation", "jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IntersectOperation", "jetbrains.mps.baseLanguage.collections.structure.IsEmptyOperation", "jetbrains.mps.baseLanguage.collections.structure.IsNotEmptyOperation", "jetbrains.mps.baseLanguage.collections.structure.IteratorType", "jetbrains.mps.baseLanguage.collections.structure.JoinOperation", "jetbrains.mps.baseLanguage.collections.structure.KeyAccessOperation", "jetbrains.mps.baseLanguage.collections.structure.LinkedHashMapCreator", "jetbrains.mps.baseLanguage.collections.structure.LinkedHashSetCreator", "jetbrains.mps.baseLanguage.collections.structure.LinkedListCreator", "jetbrains.mps.baseLanguage.collections.structure.LinkedListType", "jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit", "jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression", "jetbrains.mps.baseLanguage.collections.structure.ListType", "jetbrains.mps.baseLanguage.collections.structure.MapAsSequenceVarRef", "jetbrains.mps.baseLanguage.collections.structure.MapClearOperation", "jetbrains.mps.baseLanguage.collections.structure.MapElement", "jetbrains.mps.baseLanguage.collections.structure.MapEntry", "jetbrains.mps.baseLanguage.collections.structure.MapInitializer", "jetbrains.mps.baseLanguage.collections.structure.MapOperation", "jetbrains.mps.baseLanguage.collections.structure.MapOperationExpression", "jetbrains.mps.baseLanguage.collections.structure.MapRemoveOperation", "jetbrains.mps.baseLanguage.collections.structure.MapType", "jetbrains.mps.baseLanguage.collections.structure.MappingType", "jetbrains.mps.baseLanguage.collections.structure.MappingsSetOperation", "jetbrains.mps.baseLanguage.collections.structure.MoveNextOperation", "jetbrains.mps.baseLanguage.collections.structure.MultiForEachPair", "jetbrains.mps.baseLanguage.collections.structure.MultiForEachStatement", "jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariable", "jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariableReference", "jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.OfTypeOperation", "jetbrains.mps.baseLanguage.collections.structure.PageOperation", "jetbrains.mps.baseLanguage.collections.structure.PeekOperation", "jetbrains.mps.baseLanguage.collections.structure.PopOperation", "jetbrains.mps.baseLanguage.collections.structure.PriorityQueueCreator", "jetbrains.mps.baseLanguage.collections.structure.PushOperation", "jetbrains.mps.baseLanguage.collections.structure.PutAllOperation", "jetbrains.mps.baseLanguage.collections.structure.QueueType", "jetbrains.mps.baseLanguage.collections.structure.ReduceLeftOperation", "jetbrains.mps.baseLanguage.collections.structure.ReduceRightOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveAllElementsOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveAllSetElementsOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveAtElementOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveElementOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveFirstElementOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveLastElementOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveSetElementOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveWhereOperation", "jetbrains.mps.baseLanguage.collections.structure.ReverseOperation", "jetbrains.mps.baseLanguage.collections.structure.SelectOperation", "jetbrains.mps.baseLanguage.collections.structure.SequenceCreator", "jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.SequenceType", "jetbrains.mps.baseLanguage.collections.structure.SetElementOperation", "jetbrains.mps.baseLanguage.collections.structure.SetType", "jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.SingletonSequenceCreator", "jetbrains.mps.baseLanguage.collections.structure.SkipOperation", "jetbrains.mps.baseLanguage.collections.structure.SkipStatement", "jetbrains.mps.baseLanguage.collections.structure.SmartClosureParameterDeclaration", "jetbrains.mps.baseLanguage.collections.structure.SortDirection", "jetbrains.mps.baseLanguage.collections.structure.SortOperation", "jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation", "jetbrains.mps.baseLanguage.collections.structure.SortedMapType", "jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation", "jetbrains.mps.baseLanguage.collections.structure.SortedSetType", "jetbrains.mps.baseLanguage.collections.structure.StackType", "jetbrains.mps.baseLanguage.collections.structure.StopStatement", "jetbrains.mps.baseLanguage.collections.structure.SubListOperation", "jetbrains.mps.baseLanguage.collections.structure.SubMapOperation", "jetbrains.mps.baseLanguage.collections.structure.SubSetOperation", "jetbrains.mps.baseLanguage.collections.structure.TailListOperation", "jetbrains.mps.baseLanguage.collections.structure.TailMapOperation", "jetbrains.mps.baseLanguage.collections.structure.TailOperation", "jetbrains.mps.baseLanguage.collections.structure.TailSetOperation", "jetbrains.mps.baseLanguage.collections.structure.TakeOperation", "jetbrains.mps.baseLanguage.collections.structure.TestAddElementOperation", "jetbrains.mps.baseLanguage.collections.structure.TestRemoveElementOperation", "jetbrains.mps.baseLanguage.collections.structure.ToArrayOperation", "jetbrains.mps.baseLanguage.collections.structure.ToIteratorOperation", "jetbrains.mps.baseLanguage.collections.structure.ToListOperation", "jetbrains.mps.baseLanguage.collections.structure.TranslateOperation", "jetbrains.mps.baseLanguage.collections.structure.TreeMapCreator", "jetbrains.mps.baseLanguage.collections.structure.TreeSetCreator", "jetbrains.mps.baseLanguage.collections.structure.UnionOperation", "jetbrains.mps.baseLanguage.collections.structure.ValueAccessOperation", "jetbrains.mps.baseLanguage.collections.structure.VisitAllOperation", "jetbrains.mps.baseLanguage.collections.structure.WhereOperation"};
}
