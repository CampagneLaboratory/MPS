package jetbrains.mps.baseLanguage.collections.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class ConvertForEachStatementToForeachStatement_Intention extends BaseIntention {
  public ConvertForEachStatementToForeachStatement_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.collections.structure.ForEachStatement";
  }

  public String getPresentation() {
    return "ConvertForEachStatementToForeachStatement";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.collections.intentions.ConvertForEachStatementToForeachStatement_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:a30b45e0-eeeb-4289-9a5e-dc943f6cf430(jetbrains.mps.baseLanguage.collections.intentions@3_0)", "1193396656620");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Convert to 'for (Type var: iterable)'";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    final SNode oldVariable = SLinkOperations.getTarget(node, "variable", true);
    SNode variableType = SNodeOperations.cast(SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(oldVariable)), "jetbrains.mps.baseLanguage.structure.Type");
    SNode foreachStatement = SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.structure.ForeachStatement");
    SLinkOperations.setTarget(foreachStatement, "body", SLinkOperations.getTarget(node, "body", true), true);
    SLinkOperations.setTarget(foreachStatement, "iterable", SLinkOperations.getTarget(node, "inputSequence", true), true);
    SPropertyOperations.set(foreachStatement, "label", SPropertyOperations.getString(node, "label"));
    SNode newVariable = SNodeFactoryOperations.setNewChild(foreachStatement, "variable", "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
    SPropertyOperations.set(newVariable, "name", SPropertyOperations.getString(oldVariable, "name"));
    SLinkOperations.setTarget(newVariable, "type", variableType, true);
    for (SNode oldRef : ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(foreachStatement, "body", true), "jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "variable", false) == oldVariable;
      }
    })) {
      SLinkOperations.setTarget(SNodeFactoryOperations.replaceWithNewChild(oldRef, "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", newVariable, false);
    }
  }
}
