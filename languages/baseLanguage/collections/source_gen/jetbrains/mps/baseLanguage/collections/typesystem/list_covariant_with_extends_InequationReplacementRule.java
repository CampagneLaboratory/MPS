package jetbrains.mps.baseLanguage.collections.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInequationReplacementRule_Runtime;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicable2Status;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.pattern.IMatchingPattern;
import jetbrains.mps.lang.pattern.runtime.PatternUtil;
import jetbrains.mps.util.IterableUtil;

public class list_covariant_with_extends_InequationReplacementRule extends AbstractInequationReplacementRule_Runtime {
  /*package*/ GeneratedMatchingPattern myMatchingPattern1;
  /*package*/ GeneratedMatchingPattern myMatchingPattern2;
  public list_covariant_with_extends_InequationReplacementRule() {
  }
  public void processInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, final TypeCheckingContext typeCheckingContext, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    {
      SNode _nodeToCheck_1029348928467 = equationInfo.getNodeWithError();
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c8959032b(jetbrains.mps.baseLanguage.collections.typesystem)", "5562883592575036766", 0, null);
      _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
      typeCheckingContext.createLessThanInequality((SNode) SLinkOperations.getTarget(subtype, MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l, -7182180101671965361l), 1151688443754l, 1151688676805l, "elementType")), (SNode) SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(supertype, MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l, -7182180101671965361l), 1151688443754l, 1151688676805l, "elementType")), "jetbrains.mps.baseLanguage.structure.UpperBoundType"), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1171903916106l, 1171903916107l, "bound")), false, true, _info_12389875345);
    }
  }
  public boolean checkInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    boolean result_14532009 = true;
    result_14532009 = result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode) SLinkOperations.getTarget(subtype, MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l, -7182180101671965361l), 1151688443754l, 1151688676805l, "elementType")), (SNode) SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(supertype, MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l, -7182180101671965361l), 1151688443754l, 1151688676805l, "elementType")), "jetbrains.mps.baseLanguage.structure.UpperBoundType"), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1171903916106l, 1171903916107l, "bound")), true);
    return result_14532009;
  }
  public boolean isWeak() {
    return true;
  }
  public IsApplicableStatus isApplicableSubtypeAndPattern(SNode node) {
    {
      GeneratedMatchingPattern pattern = new list_covariant_with_extends_InequationReplacementRule.Pattern_2juelu_a0a0a0a6();
      this.myMatchingPattern1 = pattern;
      boolean b = pattern.match(node);
      return new IsApplicableStatus(b, pattern);
    }
  }
  public IsApplicableStatus isApplicableSupertypeAndPattern(SNode node) {
    {
      GeneratedMatchingPattern pattern = new list_covariant_with_extends_InequationReplacementRule.Pattern_2juelu_a0a0a0a7();
      this.myMatchingPattern2 = pattern;
      boolean b = pattern.match(node);
      return new IsApplicableStatus(b, pattern);
    }
  }
  public String getApplicableSubtypeConceptFQName() {
    return "jetbrains.mps.baseLanguage.collections.structure.ListType";
  }
  public String getApplicableSupertypeConceptFQName() {
    return "jetbrains.mps.baseLanguage.collections.structure.ListType";
  }
  public static class Pattern_2juelu_a0a0a0a6 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ SNode patternVar_sub;
    public Pattern_2juelu_a0a0a0a6() {
    }
    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_l7cfoj_a0a = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.collections.structure.ListType".equals(nodeToMatch_l7cfoj_a0a.getConcept().getQualifiedName()))) {
          return false;
        }
        {
          String childRole_l7cfoj_ = "elementType";
          if (!(PatternUtil.hasNChildren(nodeToMatch_l7cfoj_a0a, childRole_l7cfoj_, 1))) {
            return false;
          }
          {
            SNode childVar_l7cfoj_a0a0 = IterableUtil.get(nodeToMatch_l7cfoj_a0a.getChildren(childRole_l7cfoj_), 0);
            this.patternVar_sub = childVar_l7cfoj_a0a0;
          }
        }
      }
      return true;
    }
    public boolean hasAntiquotations() {
      return false;
    }
    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_sub = (SNode) pattern.getFieldValue("patternVar_sub");
      }
    }
    public Object getFieldValue(String fieldName) {
      if ("patternVar_sub".equals(fieldName)) {
        return patternVar_sub;
      }
      return null;
    }
    public void performActions(Object o) {
    }
  }
  public static class Pattern_2juelu_a0a0a0a7 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ SNode patternVar_super;
    public Pattern_2juelu_a0a0a0a7() {
    }
    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_l7cfoj_a0a_0 = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.collections.structure.ListType".equals(nodeToMatch_l7cfoj_a0a_0.getConcept().getQualifiedName()))) {
          return false;
        }
        {
          String childRole_l7cfoj__0 = "elementType";
          if (!(PatternUtil.hasNChildren(nodeToMatch_l7cfoj_a0a_0, childRole_l7cfoj__0, 1))) {
            return false;
          }
          {
            SNode childVar_l7cfoj_a0a0_0 = IterableUtil.get(nodeToMatch_l7cfoj_a0a_0.getChildren(childRole_l7cfoj__0), 0);
            {
              SNode nodeToMatch_l7cfoj_a0a0 = childVar_l7cfoj_a0a0_0;
              if (!("jetbrains.mps.baseLanguage.structure.UpperBoundType".equals(nodeToMatch_l7cfoj_a0a0.getConcept().getQualifiedName()))) {
                return false;
              }
              {
                String childRole_l7cfoj__1 = "bound";
                if (!(PatternUtil.hasNChildren(nodeToMatch_l7cfoj_a0a0, childRole_l7cfoj__1, 1))) {
                  return false;
                }
                {
                  SNode childVar_l7cfoj_a0a0a = IterableUtil.get(nodeToMatch_l7cfoj_a0a0.getChildren(childRole_l7cfoj__1), 0);
                  this.patternVar_super = childVar_l7cfoj_a0a0a;
                }
              }
            }
          }
        }
      }
      return true;
    }
    public boolean hasAntiquotations() {
      return false;
    }
    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_super = (SNode) pattern.getFieldValue("patternVar_super");
      }
    }
    public Object getFieldValue(String fieldName) {
      if ("patternVar_super".equals(fieldName)) {
        return patternVar_super;
      }
      return null;
    }
    public void performActions(Object o) {
    }
  }
}
