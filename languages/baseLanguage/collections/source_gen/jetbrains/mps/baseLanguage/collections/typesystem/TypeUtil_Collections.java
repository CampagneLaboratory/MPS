package jetbrains.mps.baseLanguage.collections.typesystem;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelUtil_new;

public class TypeUtil_Collections {
  public TypeUtil_Collections() {
  }

  public static SNode coerceTo_SequenceType(SNode type) {
    SNode sequenceType = TypeChecker.getInstance().getRuntimeSupport().coerce_(type, HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType"), true);
    if (sequenceType != null) {
      return sequenceType;
    }
    if (sequenceType == null) {
      return null;
    }
    // the following code is not reachable  
    if (type == null) {
      return null;
    }
    // ========== 
    // TEMP FIX FOR DNQ 1 
    if ("jetbrains.teamsys.dnq.structure.PListType".equals(type.getConcept().getConceptId())) {
      SNode classifierType = SNodeOperations.cast(jetbrains.mps.util.SNodeOperations.getChild(type, "classifierType"), "jetbrains.mps.baseLanguage.structure.ClassifierType");
      return _quotation_createNode_kv7ms9_a1a7a1(SNodeOperations.copyNode(classifierType));
    }
    // END TEMP FIX 
    // ========== 
    // ========== 
    // TEMP FIX FOR DNQ 
    // TODO: extract generics information 
    GlobalScope scope = GlobalScope.getInstance();
    SNode entity = SNodeOperations.cast(SModelUtil.findNodeByFQName("com.jetbrains.teamsys.database.Entity", SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"), scope), "jetbrains.mps.baseLanguage.structure.Classifier");
    if (entity == null) {
      return null;
    }
    jetbrains.mps.smodel.SNode entityType = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    SLinkOperations.setTarget(entityType, "classifier", entity, false);
    SNode javaIterable = SNodeOperations.cast(SModelUtil.findNodeByFQName("java.lang.Iterable", SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"), scope), "jetbrains.mps.baseLanguage.structure.Classifier");
    jetbrains.mps.smodel.SNode javaIterableType = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    SLinkOperations.setTarget(javaIterableType, "classifier", javaIterable, false);
    ListSequence.fromList(SLinkOperations.getTargets(javaIterableType, "parameter", true)).addElement(entityType);
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(type, javaIterableType)) {
      return _quotation_createNode_kv7ms9_a0a22a1(SNodeOperations.copyNode(entity));
    }
    // ========== 
    SNode entityIterable = SNodeOperations.cast(SModelUtil.findNodeByFQName("com.jetbrains.teamsys.database.EntityIterable", SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"), scope), "jetbrains.mps.baseLanguage.structure.Classifier");
    jetbrains.mps.smodel.SNode entityIterableType = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    SLinkOperations.setTarget(entityIterableType, "classifier", entityIterable, false);
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(type, entityIterableType)) {
      return _quotation_createNode_kv7ms9_a0a72a1(SNodeOperations.copyNode(entity));
    }
    // END FIX 
    // ========== 
    return null;
  }

  private static SNode _quotation_createNode_kv7ms9_a1a7a1(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SequenceType", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("elementType", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_kv7ms9_a0a22a1(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SequenceType", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("elementType", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_kv7ms9_a0a72a1(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SequenceType", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("elementType", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }
}
