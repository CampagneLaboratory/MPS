package jetbrains.mps.baseLanguage.collections.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.EditorAspect;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<EditorAspect> getEditorAspects(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<EditorAspect>singletonList(new AbstractContainerCreator_Editor());
      case 1:
        return Collections.<EditorAspect>singletonList(new AbstractContainerType_Editor());
      case 2:
        return Collections.<EditorAspect>singletonList(new AbstractEnumeratorOperation_Editor());
      case 3:
        return Collections.<EditorAspect>singletonList(new AbstractIteratorOperation_Editor());
      case 4:
        return Collections.<EditorAspect>singletonList(new AbstractMappingOperation_Editor());
      case 5:
        return Collections.<EditorAspect>singletonList(new AddAllSetElementsOperation_Editor());
      case 6:
        return Collections.<EditorAspect>singletonList(new AddSetElementOperation_Editor());
      case 7:
        return Collections.<EditorAspect>singletonList(new AllConstant_Editor());
      case 8:
        return Collections.<EditorAspect>singletonList(new AsSequenceOperation_Editor());
      case 9:
        return Collections.<EditorAspect>singletonList(new BinaryOperation_Editor());
      case 10:
        return Collections.<EditorAspect>singletonList(new ChunkOperation_Editor());
      case 11:
        return Collections.<EditorAspect>singletonList(new ClearSetOperation_Editor());
      case 12:
        return Collections.<EditorAspect>singletonList(new ComparatorSortOperation_Editor());
      case 13:
        return Collections.<EditorAspect>singletonList(new ContainsKeyOperation_Editor());
      case 14:
        return Collections.<EditorAspect>singletonList(new ContainsValueOperation_Editor());
      case 15:
        return Collections.<EditorAspect>singletonList(new CustomContainerCreator_Editor());
      case 16:
        return Collections.<EditorAspect>singletonList(new CustomContainerDeclaration_Editor());
      case 17:
        return Collections.<EditorAspect>singletonList(new CustomContainers_Editor());
      case 18:
        return Collections.<EditorAspect>singletonList(new CustomMapCreator_Editor());
      case 19:
        return Collections.<EditorAspect>singletonList(new DowncastExpression_Editor());
      case 20:
        return Collections.<EditorAspect>singletonList(new EnumeratorType_Editor());
      case 21:
        return Collections.<EditorAspect>singletonList(new FoldLeftOperation_Editor());
      case 22:
        return Collections.<EditorAspect>singletonList(new FoldRightOperation_Editor());
      case 23:
        return Collections.<EditorAspect>singletonList(new ForEachStatement_Editor());
      case 24:
        return Collections.<EditorAspect>singletonList(new ForEachVariable_Editor());
      case 25:
        return Collections.<EditorAspect>singletonList(new ForEachVariableReference_Editor());
      case 26:
        return Collections.<EditorAspect>singletonList(new GetKeysOperation_Editor());
      case 27:
        return Collections.<EditorAspect>singletonList(new GetValuesOperation_Editor());
      case 28:
        return Collections.<EditorAspect>singletonList(new HashMapCreator_Editor());
      case 29:
        return Collections.<EditorAspect>singletonList(new HeadListOperation_Editor());
      case 30:
        return Collections.<EditorAspect>singletonList(new HeadMapOperation_Editor());
      case 31:
        return Collections.<EditorAspect>singletonList(new HeadSetOperation_Editor());
      case 32:
        return Collections.<EditorAspect>singletonList(new InsertElementOperation_Editor());
      case 33:
        return Collections.<EditorAspect>singletonList(new InternalSequenceOperation_Editor());
      case 34:
        return Collections.<EditorAspect>singletonList(new IteratorType_Editor());
      case 35:
        return Collections.<EditorAspect>singletonList(new JoinOperation_Editor());
      case 36:
        return Collections.<EditorAspect>singletonList(new LinkedHashMapCreator_Editor());
      case 37:
        return Collections.<EditorAspect>singletonList(new ListElementAccessExpression_Editor());
      case 38:
        return Collections.<EditorAspect>singletonList(new ListType_Editor());
      case 39:
        return Collections.<EditorAspect>singletonList(new MapClearOperation_Editor());
      case 40:
        return Collections.<EditorAspect>singletonList(new MapElement_Editor());
      case 41:
        return Collections.<EditorAspect>singletonList(new MapEntry_Editor());
      case 42:
        return Collections.<EditorAspect>singletonList(new MapInitializer_Editor());
      case 43:
        return Collections.<EditorAspect>singletonList(new MapOperationExpression_Editor());
      case 44:
        return Collections.<EditorAspect>singletonList(new MapRemoveOperation_Editor());
      case 45:
        return Collections.<EditorAspect>singletonList(new MapType_Editor());
      case 46:
        return Collections.<EditorAspect>singletonList(new MappingType_Editor());
      case 47:
        return Collections.<EditorAspect>singletonList(new MappingsSetOperation_Editor());
      case 48:
        return Collections.<EditorAspect>singletonList(new MultiForEachPair_Editor());
      case 49:
        return Collections.<EditorAspect>singletonList(new MultiForEachStatement_Editor());
      case 50:
        return Collections.<EditorAspect>singletonList(new MultiForEachVariable_Editor());
      case 51:
        return Collections.<EditorAspect>singletonList(new MultiForEachVariableReference_Editor());
      case 52:
        return Collections.<EditorAspect>singletonList(new NoArgumentsSequenceOperation_Editor());
      case 53:
        return Collections.<EditorAspect>singletonList(new OfTypeOperation_Editor());
      case 54:
        return Collections.<EditorAspect>singletonList(new PageOperation_Editor());
      case 55:
        return Collections.<EditorAspect>singletonList(new PutAllOperation_Editor());
      case 56:
        return Collections.<EditorAspect>singletonList(new RemoveAllSetElementsOperation_Editor());
      case 57:
        return Collections.<EditorAspect>singletonList(new RemoveAtElementOperation_Editor());
      case 58:
        return Collections.<EditorAspect>singletonList(new RemoveSetElementOperation_Editor());
      case 59:
        return Collections.<EditorAspect>singletonList(new SequenceCreator_Editor());
      case 60:
        return Collections.<EditorAspect>singletonList(new SequenceOperation_Editor());
      case 61:
        return Collections.<EditorAspect>singletonList(new SequenceType_Editor());
      case 62:
        return Collections.<EditorAspect>singletonList(new SetElementOperation_Editor());
      case 63:
        return Collections.<EditorAspect>singletonList(new SetType_Editor());
      case 64:
        return Collections.<EditorAspect>singletonList(new SingleArgumentSequenceOperation_Editor());
      case 65:
        return Collections.<EditorAspect>singletonList(new SingletonSequenceCreator_Editor());
      case 66:
        return Collections.<EditorAspect>singletonList(new SkipOperation_Editor());
      case 67:
        return Collections.<EditorAspect>singletonList(new SkipStatement_Editor());
      case 68:
        return Collections.<EditorAspect>singletonList(new SmartClosureParameterDeclaration_Editor());
      case 69:
        return Collections.<EditorAspect>singletonList(new SortDirection_Editor());
      case 70:
        return Collections.<EditorAspect>singletonList(new SortOperation_Editor());
      case 71:
        return Collections.<EditorAspect>singletonList(new StopStatement_Editor());
      case 72:
        return Collections.<EditorAspect>singletonList(new SubListOperation_Editor());
      case 73:
        return Collections.<EditorAspect>singletonList(new SubMapOperation_Editor());
      case 74:
        return Collections.<EditorAspect>singletonList(new SubSetOperation_Editor());
      case 75:
        return Collections.<EditorAspect>singletonList(new TailListOperation_Editor());
      case 76:
        return Collections.<EditorAspect>singletonList(new TailMapOperation_Editor());
      case 77:
        return Collections.<EditorAspect>singletonList(new TailSetOperation_Editor());
      case 78:
        return Collections.<EditorAspect>singletonList(new TakeOperation_Editor());
      case 79:
        return Collections.<EditorAspect>singletonList(new ToIteratorOperation_Editor());
      case 80:
        return Collections.<EditorAspect>singletonList(new ToListOperation_Editor());
      case 81:
        return Collections.<EditorAspect>singletonList(new TreeSetCreator_Editor());
      default:
    }
    return Collections.emptyList();
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator", "jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType", "jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation", "jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation", "jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation", "jetbrains.mps.baseLanguage.collections.structure.AddAllSetElementsOperation", "jetbrains.mps.baseLanguage.collections.structure.AddSetElementOperation", "jetbrains.mps.baseLanguage.collections.structure.AllConstant", "jetbrains.mps.baseLanguage.collections.structure.AsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.BinaryOperation", "jetbrains.mps.baseLanguage.collections.structure.ChunkOperation", "jetbrains.mps.baseLanguage.collections.structure.ClearSetOperation", "jetbrains.mps.baseLanguage.collections.structure.ComparatorSortOperation", "jetbrains.mps.baseLanguage.collections.structure.ContainsKeyOperation", "jetbrains.mps.baseLanguage.collections.structure.ContainsValueOperation", "jetbrains.mps.baseLanguage.collections.structure.CustomContainerCreator", "jetbrains.mps.baseLanguage.collections.structure.CustomContainerDeclaration", "jetbrains.mps.baseLanguage.collections.structure.CustomContainers", "jetbrains.mps.baseLanguage.collections.structure.CustomMapCreator", "jetbrains.mps.baseLanguage.collections.structure.DowncastExpression", "jetbrains.mps.baseLanguage.collections.structure.EnumeratorType", "jetbrains.mps.baseLanguage.collections.structure.FoldLeftOperation", "jetbrains.mps.baseLanguage.collections.structure.FoldRightOperation", "jetbrains.mps.baseLanguage.collections.structure.ForEachStatement", "jetbrains.mps.baseLanguage.collections.structure.ForEachVariable", "jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference", "jetbrains.mps.baseLanguage.collections.structure.GetKeysOperation", "jetbrains.mps.baseLanguage.collections.structure.GetValuesOperation", "jetbrains.mps.baseLanguage.collections.structure.HashMapCreator", "jetbrains.mps.baseLanguage.collections.structure.HeadListOperation", "jetbrains.mps.baseLanguage.collections.structure.HeadMapOperation", "jetbrains.mps.baseLanguage.collections.structure.HeadSetOperation", "jetbrains.mps.baseLanguage.collections.structure.InsertElementOperation", "jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.IteratorType", "jetbrains.mps.baseLanguage.collections.structure.JoinOperation", "jetbrains.mps.baseLanguage.collections.structure.LinkedHashMapCreator", "jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression", "jetbrains.mps.baseLanguage.collections.structure.ListType", "jetbrains.mps.baseLanguage.collections.structure.MapClearOperation", "jetbrains.mps.baseLanguage.collections.structure.MapElement", "jetbrains.mps.baseLanguage.collections.structure.MapEntry", "jetbrains.mps.baseLanguage.collections.structure.MapInitializer", "jetbrains.mps.baseLanguage.collections.structure.MapOperationExpression", "jetbrains.mps.baseLanguage.collections.structure.MapRemoveOperation", "jetbrains.mps.baseLanguage.collections.structure.MapType", "jetbrains.mps.baseLanguage.collections.structure.MappingType", "jetbrains.mps.baseLanguage.collections.structure.MappingsSetOperation", "jetbrains.mps.baseLanguage.collections.structure.MultiForEachPair", "jetbrains.mps.baseLanguage.collections.structure.MultiForEachStatement", "jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariable", "jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariableReference", "jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.OfTypeOperation", "jetbrains.mps.baseLanguage.collections.structure.PageOperation", "jetbrains.mps.baseLanguage.collections.structure.PutAllOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveAllSetElementsOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveAtElementOperation", "jetbrains.mps.baseLanguage.collections.structure.RemoveSetElementOperation", "jetbrains.mps.baseLanguage.collections.structure.SequenceCreator", "jetbrains.mps.baseLanguage.collections.structure.SequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.SequenceType", "jetbrains.mps.baseLanguage.collections.structure.SetElementOperation", "jetbrains.mps.baseLanguage.collections.structure.SetType", "jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation", "jetbrains.mps.baseLanguage.collections.structure.SingletonSequenceCreator", "jetbrains.mps.baseLanguage.collections.structure.SkipOperation", "jetbrains.mps.baseLanguage.collections.structure.SkipStatement", "jetbrains.mps.baseLanguage.collections.structure.SmartClosureParameterDeclaration", "jetbrains.mps.baseLanguage.collections.structure.SortDirection", "jetbrains.mps.baseLanguage.collections.structure.SortOperation", "jetbrains.mps.baseLanguage.collections.structure.StopStatement", "jetbrains.mps.baseLanguage.collections.structure.SubListOperation", "jetbrains.mps.baseLanguage.collections.structure.SubMapOperation", "jetbrains.mps.baseLanguage.collections.structure.SubSetOperation", "jetbrains.mps.baseLanguage.collections.structure.TailListOperation", "jetbrains.mps.baseLanguage.collections.structure.TailMapOperation", "jetbrains.mps.baseLanguage.collections.structure.TailSetOperation", "jetbrains.mps.baseLanguage.collections.structure.TakeOperation", "jetbrains.mps.baseLanguage.collections.structure.ToIteratorOperation", "jetbrains.mps.baseLanguage.collections.structure.ToListOperation", "jetbrains.mps.baseLanguage.collections.structure.TreeSetCreator"};
}
