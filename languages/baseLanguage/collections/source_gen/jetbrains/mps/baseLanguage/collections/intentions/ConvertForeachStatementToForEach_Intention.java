package jetbrains.mps.baseLanguage.collections.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ConvertForeachStatementToForEach_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ConvertForeachStatementToForEach_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ForeachStatement";
  }

  public String getPresentation() {
    return "ConvertForeachStatementToForEach";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.collections.intentions.ConvertForeachStatementToForEach_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.baseLanguage.collections";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c8959032c(jetbrains.mps.baseLanguage.collections.intentions)", "2442451895696290638");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ConvertForeachStatementToForEach_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Convert to 'for (var in iterable)'";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      final SNode oldVariable = SLinkOperations.getTarget(node, "variable", true);
      SNode forEachStatement = SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.collections.structure.ForEachStatement");
      SLinkOperations.setTarget(forEachStatement, "body", SLinkOperations.getTarget(node, "body", true), true);
      SLinkOperations.setTarget(forEachStatement, "inputSequence", SLinkOperations.getTarget(node, "iterable", true), true);
      SPropertyOperations.set(forEachStatement, "label", SPropertyOperations.getString(node, "label"));
      SLinkOperations.setTarget(forEachStatement, "loopLabel", SLinkOperations.getTarget(node, "loopLabel", true), true);
      SNode newVariable = SNodeFactoryOperations.setNewChild(forEachStatement, "variable", "jetbrains.mps.baseLanguage.collections.structure.ForEachVariable");
      SPropertyOperations.set(newVariable, "name", SPropertyOperations.getString(oldVariable, "name"));
      for (SNode oldRef : ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(forEachStatement, "body", true), "jetbrains.mps.baseLanguage.structure.VariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SLinkOperations.getTarget(it, "variableDeclaration", false) == oldVariable;
        }
      })) {
        SLinkOperations.setTarget(SNodeFactoryOperations.replaceWithNewChild(oldRef, "jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference"), "variable", newVariable, false);
      }
    }

    public IntentionDescriptor getDescriptor() {
      return ConvertForeachStatementToForEach_Intention.this;
    }
  }
}
