package jetbrains.mps.baseLanguage.collections.generator.baseLanguage.template.pre;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.GeneratorQueryProvider;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import gnu.trove.TObjectIntHashMap;
import jetbrains.mps.generator.impl.query.ReductionRuleCondition;
import jetbrains.mps.generator.template.ReductionRuleQueryContext;
import jetbrains.mps.generator.impl.query.CreateRootCondition;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.template.CreateRootRuleContext;
import jetbrains.mps.generator.impl.query.MapRootRuleCondition;
import jetbrains.mps.generator.template.MapRootRuleContext;
import jetbrains.mps.generator.impl.query.PatternRuleQuery;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import jetbrains.mps.generator.template.PatternRuleContext;
import jetbrains.mps.generator.impl.query.DropRuleCondition;
import jetbrains.mps.generator.template.DropRootRuleContext;
import jetbrains.mps.generator.impl.query.WeaveRuleCondition;
import jetbrains.mps.generator.template.WeavingMappingRuleContext;
import jetbrains.mps.generator.impl.query.WeaveRuleQuery;
import jetbrains.mps.generator.impl.query.ScriptCodeBlock;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.generator.impl.query.MapConfigurationCondition;

@Generated
public class QueriesGenerated implements GeneratorQueryProvider {
  public final boolean NEEDS_OPCONTEXT = false;

  public static boolean baseMappingRule_Condition_5233164016162060882(final BaseMappingRuleContext _context) {
    SNode lt = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "leftExpression", true));
    SNode rt = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "rightExpression", true));
    return (SNodeOperations.isInstanceOf(lt, "jetbrains.mps.baseLanguage.structure.PrimitiveType") || SNodeOperations.isInstanceOf(rt, "jetbrains.mps.baseLanguage.structure.PrimitiveType")) && !(SNodeOperations.isInstanceOf(lt, "jetbrains.mps.baseLanguage.structure.NullType") || SNodeOperations.isInstanceOf(rt, "jetbrains.mps.baseLanguage.structure.NullType"));
  }

  public static boolean baseMappingRule_Condition_5233164016162060952(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(_context.getNode(), "leftExpression", true), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.collections.structure.SequenceOperation") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "leftExpression", true), "jetbrains.mps.baseLanguage.collections.structure.MapElement") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "leftExpression", true), "jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(_context.getNode(), "leftExpression", true), "jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"), "lValue", true), "jetbrains.mps.baseLanguage.collections.structure.MapElement") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(_context.getNode(), "leftExpression", true), "jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"), "lValue", true), "jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression");
  }

  public static boolean baseMappingRule_Condition_5233164016162061001(final BaseMappingRuleContext _context) {
    SNode lt = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "leftExpression", true));
    SNode rt = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "rightExpression", true));
    return (SNodeOperations.isInstanceOf(lt, "jetbrains.mps.baseLanguage.structure.PrimitiveType") || SNodeOperations.isInstanceOf(rt, "jetbrains.mps.baseLanguage.structure.PrimitiveType")) && !(SNodeOperations.isInstanceOf(lt, "jetbrains.mps.baseLanguage.structure.NullType") || SNodeOperations.isInstanceOf(rt, "jetbrains.mps.baseLanguage.structure.NullType"));
  }

  public static boolean baseMappingRule_Condition_5233164016162061071(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(_context.getNode(), "rightExpression", true), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.collections.structure.SequenceOperation") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "rightExpression", true), "jetbrains.mps.baseLanguage.collections.structure.MapElement") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "rightExpression", true), "jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(_context.getNode(), "rightExpression", true), "jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"), "lValue", true), "jetbrains.mps.baseLanguage.collections.structure.MapElement") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(_context.getNode(), "rightExpression", true), "jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"), "lValue", true), "jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression");
  }

  public static SNode sourceNodeQuery_5233164016162060926(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "rightExpression", true);
  }

  public static SNode sourceNodeQuery_5233164016162060935(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "leftExpression", true);
  }

  public static SNode sourceNodeQuery_5233164016162060943(final SourceSubstituteMacroNodeContext _context) {
    return TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "leftExpression", true));
  }

  public static SNode sourceNodeQuery_5233164016162061046(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "rightExpression", true);
  }

  public static SNode sourceNodeQuery_5233164016162061054(final SourceSubstituteMacroNodeContext _context) {
    return TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "rightExpression", true));
  }

  public static SNode sourceNodeQuery_5233164016162061064(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "leftExpression", true);
  }

  public static boolean mappingConfiguration_Condition_6847351214607238415(final TemplateQueryContext _context) {
    for (SNode node : SModelOperations.getNodes(_context.getInputModel(), "jetbrains.mps.baseLanguage.structure.EqualsExpression")) {
      SNode le = SLinkOperations.getTarget(node, "leftExpression", true);
      SNode re = SLinkOperations.getTarget(node, "rightExpression", true);
      if (SNodeOperations.isInstanceOf(le, "jetbrains.mps.baseLanguage.structure.DotExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(le, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.collections.structure.SequenceOperation") && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(le, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation"))) {
        return true;
      }
      if (SNodeOperations.isInstanceOf(re, "jetbrains.mps.baseLanguage.structure.DotExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(re, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.collections.structure.SequenceOperation") && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(re, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation"))) {
        return true;
      }
      if (SNodeOperations.isInstanceOf(le, "jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression") || SNodeOperations.isInstanceOf(re, "jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression")) {
        return true;
      }
      if (SNodeOperations.isInstanceOf(le, "jetbrains.mps.baseLanguage.collections.structure.MapElement") || SNodeOperations.isInstanceOf(re, "jetbrains.mps.baseLanguage.collections.structure.MapElement")) {
        return true;
      }
      if (SNodeOperations.isInstanceOf(le, "jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression") || SNodeOperations.isInstanceOf(re, "jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression")) {
        return true;
      }
    }
    return false;
  }

  private TObjectIntHashMap bmrcMethods = new TObjectIntHashMap();
  private TObjectIntHashMap crcMethods = new TObjectIntHashMap();
  private TObjectIntHashMap prcMethods = new TObjectIntHashMap();
  private TObjectIntHashMap drcMethods = new TObjectIntHashMap();
  private TObjectIntHashMap mccMethods = new TObjectIntHashMap();
  private TObjectIntHashMap mscbMethods = new TObjectIntHashMap();
  private TObjectIntHashMap wrcnMethods = new TObjectIntHashMap();

  {
    int i = 0;
    bmrcMethods.put("baseMappingRule_Condition_5233164016162060882", i++);
    bmrcMethods.put("baseMappingRule_Condition_5233164016162060952", i++);
    bmrcMethods.put("baseMappingRule_Condition_5233164016162061001", i++);
    bmrcMethods.put("baseMappingRule_Condition_5233164016162061071", i++);
    i = 0;
    i = 0;
    i = 0;
    i = 0;
    mccMethods.put("mappingConfiguration_Condition_6847351214607238415", i++);
    i = 0;
    i = 0;
  }

  /*package*/ static boolean baseMappingRuleCondition(int methodKey, BaseMappingRuleContext ctx) {
    switch (methodKey) {
      case 0:
        return baseMappingRule_Condition_5233164016162060882(ctx);
      case 1:
        return baseMappingRule_Condition_5233164016162060952(ctx);
      case 2:
        return baseMappingRule_Condition_5233164016162061001(ctx);
      case 3:
        return baseMappingRule_Condition_5233164016162061071(ctx);
      default:
        return false;
    }
  }

  @Override
  public ReductionRuleCondition getReductionRuleCondition(String methodName) {
    if (!(bmrcMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = bmrcMethods.get(methodName);
    return new ReductionRuleCondition() {
      public boolean check(ReductionRuleQueryContext ctx) {
        return QueriesGenerated.baseMappingRuleCondition(methodKey, ctx);
      }
    };
  }

  @Override
  public CreateRootCondition getCreateRootRuleCondition(@NotNull String methodName) {
    if (!(crcMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = crcMethods.get(methodName);
    return new CreateRootCondition() {
      public boolean check(@NotNull CreateRootRuleContext ctx) {
        switch (methodKey) {
          default:
            return false;
        }
      }
    };
  }

  @Override
  public MapRootRuleCondition getMapRootRuleCondition(@NotNull String methodName) {
    if (!(bmrcMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = bmrcMethods.get(methodName);
    return new MapRootRuleCondition() {
      public boolean check(@NotNull MapRootRuleContext ctx) {
        return QueriesGenerated.baseMappingRuleCondition(methodKey, ctx);
      }
    };
  }

  @Override
  public PatternRuleQuery getPatternRuleCondition(@NotNull String methodName) {
    if (!(prcMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = prcMethods.get(methodName);
    return new PatternRuleQuery() {
      public GeneratedMatchingPattern pattern(@NotNull PatternRuleContext ctx) {
        switch (methodKey) {
          default:
            return null;
        }
      }
    };
  }

  @Override
  public DropRuleCondition getDropRuleCondition(@NotNull String methodName) {
    if (!(drcMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = drcMethods.get(methodName);
    return new DropRuleCondition() {
      public boolean check(@NotNull DropRootRuleContext ctx) {
        switch (methodKey) {
          default:
            // true is default for drop rules 
            return true;
        }
      }
    };
  }

  @Override
  public WeaveRuleCondition getWeaveRuleCondition(@NotNull String methodName) {
    if (!(bmrcMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = bmrcMethods.get(methodName);
    return new WeaveRuleCondition() {
      public boolean check(@NotNull WeavingMappingRuleContext ctx) {
        return QueriesGenerated.baseMappingRuleCondition(methodKey, ctx);
      }
    };
  }

  @Override
  public WeaveRuleQuery getWeaveRuleQuery(@NotNull String methodName) {
    if (!(wrcnMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = wrcnMethods.get(methodName);
    return new WeaveRuleQuery() {
      public SNode contextNode(WeavingMappingRuleContext ctx) {
        switch (methodKey) {
          default:
            return null;
        }
      }
    };
  }

  @Override
  public ScriptCodeBlock getScriptCodeBlock(@NotNull String methodName) {
    if (!(mscbMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = mscbMethods.get(methodName);
    return new ScriptCodeBlock() {
      public void invoke(MappingScriptContext ctx) {
        switch (methodKey) {
          default:
            throw new IllegalStateException(String.format("There's no code block with method index %d ", methodKey));
        }
      }
    };
  }

  @Override
  public MapConfigurationCondition getMapConfigurationCondition(@NotNull String methodName) {
    if (!(mccMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = mccMethods.get(methodName);
    return new MapConfigurationCondition() {
      public boolean check(TemplateQueryContext ctx) {
        switch (methodKey) {
          case 0:
            return QueriesGenerated.mappingConfiguration_Condition_6847351214607238415(ctx);
          default:
            // true is default for map configurations 
            return true;
        }
      }
    };
  }
}
