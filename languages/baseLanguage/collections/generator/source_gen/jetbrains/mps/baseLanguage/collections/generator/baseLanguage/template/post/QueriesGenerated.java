package jetbrains.mps.baseLanguage.collections.generator.baseLanguage.template.post;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.GeneratorQueryProvider;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.pattern.IMatchingPattern;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.baseLanguage.closures.constraints.ClassifierTypeUtil;
import gnu.trove.TObjectIntHashMap;
import jetbrains.mps.generator.impl.query.ReductionRuleCondition;
import jetbrains.mps.generator.template.ReductionRuleQueryContext;
import jetbrains.mps.generator.impl.query.CreateRootCondition;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.template.CreateRootRuleContext;
import jetbrains.mps.generator.impl.query.MapRootRuleCondition;
import jetbrains.mps.generator.template.MapRootRuleContext;
import jetbrains.mps.generator.impl.query.PatternRuleQuery;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import jetbrains.mps.generator.template.PatternRuleContext;
import jetbrains.mps.generator.impl.query.DropRuleCondition;
import jetbrains.mps.generator.template.DropRootRuleContext;
import jetbrains.mps.generator.impl.query.WeaveRuleCondition;
import jetbrains.mps.generator.template.WeavingMappingRuleContext;
import jetbrains.mps.generator.impl.query.WeaveRuleQuery;
import jetbrains.mps.generator.impl.query.ScriptCodeBlock;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.generator.impl.query.MapConfigurationCondition;
import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.SReference;

@Generated
public class QueriesGenerated implements GeneratorQueryProvider {
  public final boolean NEEDS_OPCONTEXT = false;

  public static boolean baseMappingRule_Condition_1269198486696304771(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "inputSequence", true), "jetbrains.mps.baseLanguage.structure.NullLiteral");
  }

  public static boolean baseMappingRule_Condition_1269198486696304833(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "inputSequence", true)), "jetbrains.mps.baseLanguage.structure.ArrayType");
  }

  public static boolean baseMappingRule_Condition_2021770776238986580(final BaseMappingRuleContext _context) {
    {
      IMatchingPattern pattern_x583g4_a0d = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType");
      SNode coercedNode_x583g4_a0d = TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "inputSequence", true)), pattern_x583g4_a0d);
      if (coercedNode_x583g4_a0d != null) {
        SNode elementType = SLinkOperations.getTarget(coercedNode_x583g4_a0d, "elementType", true);
        if (SNodeOperations.isInstanceOf(elementType, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
          SNode classifier = SLinkOperations.getTarget(SNodeOperations.cast(elementType, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false);
          return classifier == SLinkOperations.getTarget(_quotation_createNode_x583g4_a0a0b0b0c0a0d_0(), "classifier", false) || classifier == SLinkOperations.getTarget(_quotation_createNode_x583g4_a0a0b0b0c0a0d(), "classifier", false);
        }
        return SNodeOperations.isInstanceOf(elementType, "jetbrains.mps.baseLanguage.structure.PrimitiveType") || SNodeOperations.isInstanceOf(elementType, "jetbrains.mps.baseLanguage.structure.ArrayType") || SNodeOperations.isInstanceOf(elementType, "jetbrains.mps.baseLanguage.structure.StringType");
      } else {
        return false;
      }
    }
  }

  public static boolean baseMappingRule_Condition_1269198486696304917(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "inputSequence", true), "jetbrains.mps.baseLanguage.structure.GenericNewExpression");
  }

  public static Object propertyMacro_GetPropertyValue_1269198486696304715(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "variable", true), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1269198486696304732(final PropertyMacroContext _context) {
    if ((SLinkOperations.getTarget(_context.getNode(), "loopLabel", true) != null)) {
      return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "loopLabel", true), "name");
    } else if (isNotEmptyString(SPropertyOperations.getString(_context.getNode(), "label"))) {
      return SPropertyOperations.getString(_context.getNode(), "label");
    } else {
      return null;
    }
  }

  public static Object propertyMacro_GetPropertyValue_1269198486696304792(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "variable", true), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1269198486696304802(final PropertyMacroContext _context) {
    if ((SLinkOperations.getTarget(_context.getNode(), "loopLabel", true) != null)) {
      return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "loopLabel", true), "name");
    } else if (isNotEmptyString(SPropertyOperations.getString(_context.getNode(), "label"))) {
      return SPropertyOperations.getString(_context.getNode(), "label");
    } else {
      return null;
    }
  }

  public static Object propertyMacro_GetPropertyValue_1269198486696304869(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "variable", true), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1269198486696304886(final PropertyMacroContext _context) {
    if ((SLinkOperations.getTarget(_context.getNode(), "loopLabel", true) != null)) {
      return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "loopLabel", true), "name");
    } else if (isNotEmptyString(SPropertyOperations.getString(_context.getNode(), "label"))) {
      return SPropertyOperations.getString(_context.getNode(), "label");
    } else {
      return null;
    }
  }

  public static Object propertyMacro_GetPropertyValue_2021770776238986616(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "variable", true), "name");
  }

  public static Object propertyMacro_GetPropertyValue_2021770776238986640(final PropertyMacroContext _context) {
    if ((SLinkOperations.getTarget(_context.getNode(), "loopLabel", true) != null)) {
      return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "loopLabel", true), "name");
    } else if (isNotEmptyString(SPropertyOperations.getString(_context.getNode(), "label"))) {
      return SPropertyOperations.getString(_context.getNode(), "label");
    } else {
      return null;
    }
  }

  public static Object propertyMacro_GetPropertyValue_1269198486696305003(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "variable", true), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1269198486696305020(final PropertyMacroContext _context) {
    if ((SLinkOperations.getTarget(_context.getNode(), "loopLabel", true) != null)) {
      return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "loopLabel", true), "name");
    } else if (isNotEmptyString(SPropertyOperations.getString(_context.getNode(), "label"))) {
      return SPropertyOperations.getString(_context.getNode(), "label");
    } else {
      return null;
    }
  }

  public static Object referenceMacro_GetReferent_1269198486696305062(final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(_context.getNode(), "variable", false)), "jetbrains.mps.baseLanguage.collections.structure.ForEachStatement"), "foreach"), "variable", true);
  }

  public static SNode sourceNodeQuery_1269198486696304632(final SourceSubstituteMacroNodeContext _context) {
    {
      IMatchingPattern pattern_x583g4_a0q = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType");
      SNode coercedNode_x583g4_a0q = TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "inputSequence", true)), pattern_x583g4_a0q);
      if (coercedNode_x583g4_a0q != null) {
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(coercedNode_x583g4_a0q, "elementType", true), "jetbrains.mps.baseLanguage.structure.PrimitiveType") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(coercedNode_x583g4_a0q, "elementType", true), "jetbrains.mps.baseLanguage.structure.ArrayType")) {
          return SLinkOperations.getTarget(coercedNode_x583g4_a0q, "elementType", true);
        }
        SNode ct = ClassifierTypeUtil.getTypeCoercedToClassifierType(SLinkOperations.getTarget(coercedNode_x583g4_a0q, "elementType", true));
        if (SNodeOperations.isInstanceOf(ct, "jetbrains.mps.baseLanguage.structure.UpperBoundType")) {
          return SLinkOperations.getTarget(SNodeOperations.cast(ct, "jetbrains.mps.baseLanguage.structure.UpperBoundType"), "bound", true);
        }
        if (!(SNodeOperations.isInstanceOf(ct, "jetbrains.mps.baseLanguage.structure.ClassifierType") || SNodeOperations.isInstanceOf(ct, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"))) {
          for (SNode supt : TypeChecker.getInstance().getSubtypingManager().collectImmediateSupertypes(ct)) {
            ct = ClassifierTypeUtil.getTypeCoercedToClassifierType((SNode) supt);
            if (SNodeOperations.isInstanceOf(ct, "jetbrains.mps.baseLanguage.structure.ClassifierType") || SNodeOperations.isInstanceOf(ct, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
              break;
            }
          }
        }
        return ct;
      } else {
      }
    }
    return _quotation_createNode_x583g4_a1a61();
  }

  public static SNode sourceNodeQuery_1187962225387685387(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "variable", true);
  }

  public static SNode sourceNodeQuery_1269198486696304725(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1269198486696304764(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "inputSequence", true);
  }

  public static SNode sourceNodeQuery_1269198486696304786(final SourceSubstituteMacroNodeContext _context) {
    return _quotation_createNode_x583g4_a0a02();
  }

  public static SNode sourceNodeQuery_1187962225387685229(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "variable", true);
  }

  public static SNode sourceNodeQuery_1269198486696304848(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "inputSequence", true);
  }

  public static SNode sourceNodeQuery_1269198486696304857(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "inputSequence", true)), "jetbrains.mps.baseLanguage.structure.ArrayType"), "componentType", true);
  }

  public static SNode sourceNodeQuery_1187962225387685262(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "variable", true);
  }

  public static SNode sourceNodeQuery_1269198486696304879(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_2021770776238986595(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "inputSequence", true);
  }

  public static SNode sourceNodeQuery_2021770776238986604(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "inputSequence", true)), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType"), true), "elementType", true);
  }

  public static SNode sourceNodeQuery_2021770776238986625(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "variable", true);
  }

  public static SNode sourceNodeQuery_2021770776238986633(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1269198486696304931(final SourceSubstituteMacroNodeContext _context) {
    {
      IMatchingPattern pattern_x583g4_a0eb = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType");
      SNode coercedNode_x583g4_a0eb = TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "inputSequence", true)), pattern_x583g4_a0eb);
      if (coercedNode_x583g4_a0eb != null) {
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(coercedNode_x583g4_a0eb, "elementType", true), "jetbrains.mps.baseLanguage.structure.PrimitiveType") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(coercedNode_x583g4_a0eb, "elementType", true), "jetbrains.mps.baseLanguage.structure.ArrayType")) {
          return SLinkOperations.getTarget(coercedNode_x583g4_a0eb, "elementType", true);
        }
        SNode ct = ClassifierTypeUtil.getTypeCoercedToClassifierType(SLinkOperations.getTarget(coercedNode_x583g4_a0eb, "elementType", true));
        if (!(SNodeOperations.isInstanceOf(ct, "jetbrains.mps.baseLanguage.structure.ClassifierType") || SNodeOperations.isInstanceOf(ct, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"))) {
          for (SNode supt : TypeChecker.getInstance().getSubtypingManager().collectImmediateSupertypes(ct)) {
            ct = ClassifierTypeUtil.getTypeCoercedToClassifierType((SNode) supt);
            if (SNodeOperations.isInstanceOf(ct, "jetbrains.mps.baseLanguage.structure.ClassifierType") || SNodeOperations.isInstanceOf(ct, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
              break;
            }
          }
        }
        return ct;
      } else {
      }
    }
    return _quotation_createNode_x583g4_a1a03();
  }

  public static SNode sourceNodeQuery_1187962225387685314(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "variable", true);
  }

  public static SNode sourceNodeQuery_1269198486696305013(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1269198486696305052(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "inputSequence", true);
  }

  private TObjectIntHashMap bmrcMethods = new TObjectIntHashMap();
  private TObjectIntHashMap crcMethods = new TObjectIntHashMap();
  private TObjectIntHashMap prcMethods = new TObjectIntHashMap();
  private TObjectIntHashMap drcMethods = new TObjectIntHashMap();
  private TObjectIntHashMap mccMethods = new TObjectIntHashMap();
  private TObjectIntHashMap mscbMethods = new TObjectIntHashMap();
  private TObjectIntHashMap wrcnMethods = new TObjectIntHashMap();

  {
    int i = 0;
    bmrcMethods.put("baseMappingRule_Condition_1269198486696304771", i++);
    bmrcMethods.put("baseMappingRule_Condition_1269198486696304833", i++);
    bmrcMethods.put("baseMappingRule_Condition_2021770776238986580", i++);
    bmrcMethods.put("baseMappingRule_Condition_1269198486696304917", i++);
    i = 0;
    i = 0;
    i = 0;
    i = 0;
    i = 0;
    i = 0;
  }

  /*package*/ static boolean baseMappingRuleCondition(int methodKey, BaseMappingRuleContext ctx) {
    switch (methodKey) {
      case 0:
        return baseMappingRule_Condition_1269198486696304771(ctx);
      case 1:
        return baseMappingRule_Condition_1269198486696304833(ctx);
      case 2:
        return baseMappingRule_Condition_2021770776238986580(ctx);
      case 3:
        return baseMappingRule_Condition_1269198486696304917(ctx);
      default:
        return false;
    }
  }

  @Override
  public ReductionRuleCondition getReductionRuleCondition(String methodName) {
    if (!(bmrcMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = bmrcMethods.get(methodName);
    return new ReductionRuleCondition() {
      public boolean check(ReductionRuleQueryContext ctx) {
        return QueriesGenerated.baseMappingRuleCondition(methodKey, ctx);
      }
    };
  }

  @Override
  public CreateRootCondition getCreateRootRuleCondition(@NotNull String methodName) {
    if (!(crcMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = crcMethods.get(methodName);
    return new CreateRootCondition() {
      public boolean check(@NotNull CreateRootRuleContext ctx) {
        switch (methodKey) {
          default:
            return false;
        }
      }
    };
  }

  @Override
  public MapRootRuleCondition getMapRootRuleCondition(@NotNull String methodName) {
    if (!(bmrcMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = bmrcMethods.get(methodName);
    return new MapRootRuleCondition() {
      public boolean check(@NotNull MapRootRuleContext ctx) {
        return QueriesGenerated.baseMappingRuleCondition(methodKey, ctx);
      }
    };
  }

  @Override
  public PatternRuleQuery getPatternRuleCondition(@NotNull String methodName) {
    if (!(prcMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = prcMethods.get(methodName);
    return new PatternRuleQuery() {
      public GeneratedMatchingPattern pattern(@NotNull PatternRuleContext ctx) {
        switch (methodKey) {
          default:
            return null;
        }
      }
    };
  }

  @Override
  public DropRuleCondition getDropRuleCondition(@NotNull String methodName) {
    if (!(drcMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = drcMethods.get(methodName);
    return new DropRuleCondition() {
      public boolean check(@NotNull DropRootRuleContext ctx) {
        switch (methodKey) {
          default:
            // true is default for drop rules 
            return true;
        }
      }
    };
  }

  @Override
  public WeaveRuleCondition getWeaveRuleCondition(@NotNull String methodName) {
    if (!(bmrcMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = bmrcMethods.get(methodName);
    return new WeaveRuleCondition() {
      public boolean check(@NotNull WeavingMappingRuleContext ctx) {
        return QueriesGenerated.baseMappingRuleCondition(methodKey, ctx);
      }
    };
  }

  @Override
  public WeaveRuleQuery getWeaveRuleQuery(@NotNull String methodName) {
    if (!(wrcnMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = wrcnMethods.get(methodName);
    return new WeaveRuleQuery() {
      public SNode contextNode(WeavingMappingRuleContext ctx) {
        switch (methodKey) {
          default:
            return null;
        }
      }
    };
  }

  @Override
  public ScriptCodeBlock getScriptCodeBlock(@NotNull String methodName) {
    if (!(mscbMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = mscbMethods.get(methodName);
    return new ScriptCodeBlock() {
      public void invoke(MappingScriptContext ctx) {
        switch (methodKey) {
          default:
            throw new IllegalStateException(String.format("There's no code block with method index %d ", methodKey));
        }
      }
    };
  }

  @Override
  public MapConfigurationCondition getMapConfigurationCondition(@NotNull String methodName) {
    if (!(mccMethods.containsKey(methodName))) {
      return null;
    }
    final int methodKey = mccMethods.get(methodName);
    return new MapConfigurationCondition() {
      public boolean check(TemplateQueryContext ctx) {
        switch (methodKey) {
          default:
            // true is default for map configurations 
            return true;
        }
      }
    };
  }

  private static SNode _quotation_createNode_x583g4_a0a0b0b0c0a0d() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~String")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_x583g4_a0a0b0b0c0a0d_0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_x583g4_a1a61() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_x583g4_a0a02() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_x583g4_a1a03() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    return quotedNode_1;
  }

  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
