package jetbrains.mps.baseLanguage.tuples.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class UpdateTuplesRuntime_MigrationScript extends BaseMigrationScript {
  public UpdateTuplesRuntime_MigrationScript(IOperationContext operationContext) {
    super("Create runtime classes in the tuples runtime");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "TupleInterface";
      }

      public String getAdditionalInfo() {
        return "TupleInterface";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.baseLanguage.structure.ClassConcept";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return "jetbrains.mps.baseLanguage.tuples.runtime.Tuples".equals(BehaviorReflection.invokeVirtual(String.class, node, "virtual_getFqName_1213877404258", new Object[]{})) && !(Sequence.fromIterable(Classifier_Behavior.call_nestedClassifiers_5292274854859193142(node)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SPropertyOperations.getString(it, "name").matches("_[0-9]+");
          }
        }));
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode ifc = null;
        for (int i = 0; i < 10; i++) {
          List<SNode> typedecls = new ArrayList<SNode>();
          for (int j = 0; j < i; j++) {
            ListSequence.fromList(typedecls).addElement(_quotation_createNode_yti4yq_a0a0a1a1a0a("T" + j));
          }

          List<SNode> typerefs = new ArrayList<SNode>();
          for (int j = 0; j < i; j++) {
            ListSequence.fromList(typerefs).addElement(_quotation_createNode_yti4yq_a0a0a4a1a0a(ListSequence.fromList(typedecls).getElement(j)));
          }

          List<SNode> methods = new ArrayList<SNode>();
          for (int j = 0; j < i; j++) {
            ListSequence.fromList(methods).addElement(_quotation_createNode_yti4yq_a0a0a7a1a0a(SNodeOperations.copyNode(ListSequence.fromList(typerefs).getElement(j)), "_" + j, SNodeOperations.copyNode(ListSequence.fromList(typerefs).getElement(j))));
          }
          for (int j = 0; j < i; j++) {
            ListSequence.fromList(methods).addElement(_quotation_createNode_yti4yq_a0a0a8a1a0a("_" + j, SNodeOperations.copyNode(ListSequence.fromList(typerefs).getElement(j))));
          }

          SNode extendIfc = null;
          if (ifc != null) {
            extendIfc = _quotation_createNode_yti4yq_a0a0l0b0a0(ListSequence.fromList(typerefs).cut(1).toListSequence(), ifc);
          }

          ifc = _quotation_createNode_yti4yq_a0n0b0a0(extendIfc, typedecls, "_" + i, methods);

          List<SNode> extParams = ListSequence.fromList(typerefs).select(new ISelector<SNode, SNode>() {
            public SNode select(SNode tr) {
              return _quotation_createNode_yti4yq_a0a0a0a0p0b0a0(SNodeOperations.copyNode(tr));
            }
          }).toListSequence();
          ListSequence.fromList(SLinkOperations.getTargets(ifc, "member", true)).addElement(_quotation_createNode_yti4yq_a0a61a1a0a(extParams, ifc, ListSequence.fromList(typerefs).select(new ISelector<SNode, SNode>() {
            public SNode select(SNode it) {
              return SNodeOperations.copyNode(it);
            }
          }).toListSequence(), ifc));

          ListSequence.fromList(SLinkOperations.getTargets(node, "member", true)).addElement(ifc);
        }
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    // whitespace 
  }

  private static SNode _quotation_createNode_yti4yq_a0a0a1a1a0a(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setProperty("name", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_yti4yq_a0a0a4a1a0a(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TypeVariableReference", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReferenceTarget("typeVariableDeclaration", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_yti4yq_a0a0a7a1a0a(Object parameter_1, Object parameter_2, Object parameter_3) {
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null, null, GlobalScope.getInstance(), false);
    quotedNode_4.setProperty("isAbstract", "true");
    quotedNode_4.setProperty("name", (String) parameter_2);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null, null, GlobalScope.getInstance(), false);
    quotedNode_5.setProperty("name", "value");
    quotedNode_9 = (SNode) parameter_1;
    if (quotedNode_9 != null) {
      quotedNode_5.addChild("type", HUtil.copyIfNecessary(quotedNode_9));
    }
    quotedNode_4.addChild("parameter", quotedNode_5);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, GlobalScope.getInstance(), false);
    quotedNode_4.addChild("visibility", quotedNode_6);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
    quotedNode_4.addChild("body", quotedNode_7);
    quotedNode_8 = (SNode) parameter_3;
    if (quotedNode_8 != null) {
      quotedNode_4.addChild("returnType", HUtil.copyIfNecessary(quotedNode_8));
    }
    return quotedNode_4;
  }

  private static SNode _quotation_createNode_yti4yq_a0a0a8a1a0a(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setProperty("isAbstract", "true");
    quotedNode_3.setProperty("name", (String) parameter_1);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.addChild("visibility", quotedNode_4);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.addChild("body", quotedNode_5);
    quotedNode_6 = (SNode) parameter_2;
    if (quotedNode_6 != null) {
      quotedNode_3.addChild("returnType", HUtil.copyIfNecessary(quotedNode_6));
    }
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_yti4yq_a0a0l0b0a0(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReferenceTarget("classifier", (SNode) parameter_2);
    {
      List<SNode> nodes = (List<SNode>) parameter_1;
      for (SNode child : nodes) {
        quotedNode_3.addChild("parameter", HUtil.copyIfNecessary(child));
      }
    }
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_yti4yq_a0n0b0a0(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.Interface", null, null, GlobalScope.getInstance(), false);
    quotedNode_5.setProperty("nonStatic", "true");
    quotedNode_5.setProperty("name", (String) parameter_3);
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_5.addChild("extendedInterface", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, GlobalScope.getInstance(), false);
    quotedNode_5.addChild("visibility", quotedNode_7);
    {
      List<SNode> nodes = (List<SNode>) parameter_2;
      for (SNode child : nodes) {
        quotedNode_5.addChild("typeVariableDeclaration", HUtil.copyIfNecessary(child));
      }
    }
    {
      List<SNode> nodes = (List<SNode>) parameter_4;
      for (SNode child : nodes) {
        quotedNode_5.addChild("member", HUtil.copyIfNecessary(child));
      }
    }
    return quotedNode_5;
  }

  private static SNode _quotation_createNode_yti4yq_a0a0a0a0p0b0a0(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.UpperBoundType", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("bound", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_yti4yq_a0a61a1a0a(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null, null, GlobalScope.getInstance(), false);
    quotedNode_5.setProperty("isAbstract", "true");
    quotedNode_5.setProperty("name", "assign");
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null, null, GlobalScope.getInstance(), false);
    quotedNode_6.setProperty("name", "from");
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_10.setReferenceTarget("classifier", (SNode) parameter_2);
    {
      List<SNode> nodes = (List<SNode>) parameter_1;
      for (SNode child : nodes) {
        quotedNode_10.addChild("parameter", HUtil.copyIfNecessary(child));
      }
    }
    quotedNode_6.addChild("type", quotedNode_10);
    quotedNode_5.addChild("parameter", quotedNode_6);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, GlobalScope.getInstance(), false);
    quotedNode_5.addChild("visibility", quotedNode_7);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
    quotedNode_5.addChild("body", quotedNode_8);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_9.setReferenceTarget("classifier", (SNode) parameter_4);
    {
      List<SNode> nodes = (List<SNode>) parameter_3;
      for (SNode child : nodes) {
        quotedNode_9.addChild("parameter", HUtil.copyIfNecessary(child));
      }
    }
    quotedNode_5.addChild("returnType", quotedNode_9);
    return quotedNode_5;
  }
}
