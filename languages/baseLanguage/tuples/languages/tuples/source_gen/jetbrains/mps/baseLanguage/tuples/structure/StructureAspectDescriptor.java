package jetbrains.mps.baseLanguage.tuples.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptIndexedTupleLiteral = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"component"}, new boolean[]{true}).alias("[", "indexed tuple").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIndexedTupleMemberAccessExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleMemberAccessExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"tuple", "index"}, new boolean[]{false, false}).alias("[", "access tuple member by index").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIndexedTupleType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"componentType"}, new boolean[]{true}).alias("[", "indexed tuple type").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNamedTupleComponentAccessOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleComponentAccessOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").references("component").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNamedTupleComponentDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleComponentDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.baseLanguage.structure.HasAnnotation", "jetbrains.mps.baseLanguage.structure.TypeDerivable", "jetbrains.mps.baseLanguage.structure.TypeAnnotable", "jetbrains.mps.lang.core.structure.IResolveInfo").properties("final").children(new String[]{"type"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptNamedTupleComponentReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleComponentReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("componentDeclaration").children(new String[]{"value"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptNamedTupleDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleDeclaration").super_("jetbrains.mps.baseLanguage.structure.Classifier").parents("jetbrains.mps.baseLanguage.structure.Classifier").children(new String[]{"component", "extended", "implements", "method"}, new boolean[]{true, false, true, true}).alias("Tuple", "Named tuple declaration").create();
  /*package*/ final ConceptDescriptor myConceptNamedTupleLiteral = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("tupleDeclaration").children(new String[]{"componentRef"}, new boolean[]{true}).alias("<{tupleDeclaration}> literal", "tuple literal").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNamedTupleType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleType").super_("jetbrains.mps.baseLanguage.structure.ClassifierType").parents("jetbrains.mps.baseLanguage.structure.ClassifierType", "jetbrains.mps.baseLanguage.structure.IGenericType", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("tupleDeclaration").children(new String[]{"parameterType"}, new boolean[]{true}).alias("<{tupleDeclaration}> type", "reference to named tuple declaration").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptIndexedTupleLiteral, myConceptIndexedTupleMemberAccessExpression, myConceptIndexedTupleType, myConceptNamedTupleComponentAccessOperation, myConceptNamedTupleComponentDeclaration, myConceptNamedTupleComponentReference, myConceptNamedTupleDeclaration, myConceptNamedTupleLiteral, myConceptNamedTupleType);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0m, conceptFqName)) {
      case 0:
        return myConceptIndexedTupleLiteral;
      case 1:
        return myConceptIndexedTupleMemberAccessExpression;
      case 2:
        return myConceptIndexedTupleType;
      case 3:
        return myConceptNamedTupleComponentAccessOperation;
      case 4:
        return myConceptNamedTupleComponentDeclaration;
      case 5:
        return myConceptNamedTupleComponentReference;
      case 6:
        return myConceptNamedTupleDeclaration;
      case 7:
        return myConceptNamedTupleLiteral;
      case 8:
        return myConceptNamedTupleType;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0m = new String[]{"jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleLiteral", "jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleMemberAccessExpression", "jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleType", "jetbrains.mps.baseLanguage.tuples.structure.NamedTupleComponentAccessOperation", "jetbrains.mps.baseLanguage.tuples.structure.NamedTupleComponentDeclaration", "jetbrains.mps.baseLanguage.tuples.structure.NamedTupleComponentReference", "jetbrains.mps.baseLanguage.tuples.structure.NamedTupleDeclaration", "jetbrains.mps.baseLanguage.tuples.structure.NamedTupleLiteral", "jetbrains.mps.baseLanguage.tuples.structure.NamedTupleType"};
}
