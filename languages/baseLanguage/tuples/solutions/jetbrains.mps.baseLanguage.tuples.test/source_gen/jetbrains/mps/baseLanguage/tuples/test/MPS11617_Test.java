package jetbrains.mps.baseLanguage.tuples.test;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.baseLanguage.tuples.util.Tpl;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import junit.framework.Assert;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;

public class MPS11617_Test extends TestCase {
  public void test_seq() throws Exception {
    Iterable<Tpl> tpls = Sequence.fromClosure(new ISequenceClosure<Tpl>() {
      public Iterable<Tpl> iterable() {
        return new Iterable<Tpl>() {
          public Iterator<Tpl> iterator() {
            return new YieldingIterator<Tpl>() {
              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this.__CP__ = 1;
                      this.yield(new Tpl("a", 1));
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    });
    Assert.assertEquals(Sequence.fromIterable(tpls).first(), new Tpl("a", 1));
  }

  public void test_seqGeneric() throws Exception {
    // http://youtrack.jetbrains.net/issue/MPS-15175 
    // <node> 
  }

  public void test_list() throws Exception {
    List<Tpl> tpll = ListSequence.fromListAndArray(new ArrayList<Tpl>(), new Tpl("b", 2));
    Assert.assertEquals(ListSequence.fromList(tpll).last(), new Tpl("b", 2));
    Assert.assertEquals(ListSequence.fromList(tpll).last(), MultiTuple.<String,Integer>from("b", 2));
  }
}
