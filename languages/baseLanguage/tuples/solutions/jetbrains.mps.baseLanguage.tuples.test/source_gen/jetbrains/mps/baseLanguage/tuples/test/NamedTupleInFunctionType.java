package jetbrains.mps.baseLanguage.tuples.test;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;

public class NamedTupleInFunctionType {
  public NamedTupleInFunctionType() {
  }

  public void foo(Map<String, jetbrains.mps.baseLanguage.tuples.test.NamedTupleInFunctionType.TwoStrings> map, _FunctionTypes._void_P1_E0<? super IMapping<String, jetbrains.mps.baseLanguage.tuples.test.NamedTupleInFunctionType.TwoStrings>> mpng) {
    MapSequence.fromMap(map).visitAll(mpng);
  }

  public void m(_FunctionTypes._void_P1_E0<? super NamedTupleInFunctionType.G<jetbrains.mps.baseLanguage.tuples.test.NamedTupleInFunctionType.TwoStrings>> fun) {
    fun.invoke(new NamedTupleInFunctionType.G<jetbrains.mps.baseLanguage.tuples.test.NamedTupleInFunctionType.TwoStrings>());
  }

  public void _void_P1(_FunctionTypes._void_P1_E0<? super Pair<IntPair, jetbrains.mps.baseLanguage.tuples.test.NamedTupleInFunctionType.TwoStrings>> fun) {
    fun.invoke(new Pair<IntPair, jetbrains.mps.baseLanguage.tuples.test.NamedTupleInFunctionType.TwoStrings>(new IntPair(1, 2), new jetbrains.mps.baseLanguage.tuples.test.NamedTupleInFunctionType.TwoStrings("one", "two")));
  }

  public void _void_P2(_FunctionTypes._void_P2_E0<? super IntPair, ? super Pair> fun) {
    _void_P2(fun);
  }

  public void _value_P0(_FunctionTypes._return_P0_E0<? extends Pair<IntPair, jetbrains.mps.baseLanguage.tuples.test.NamedTupleInFunctionType.TwoStrings>> fun) {
    Pair<IntPair, jetbrains.mps.baseLanguage.tuples.test.NamedTupleInFunctionType.TwoStrings> pair = fun.invoke();
  }

  public class G<T> {
    public G() {
    }

    public T get() {
      return null;
    }

    public void set(T t) {
    }
  }

  public static class TwoStrings extends MultiTuple._2<String, String> {
    public TwoStrings() {
      super();
    }

    public TwoStrings(String s1, String s2) {
      super(s1, s2);
    }

    public String s1(String value) {
      return super._0(value);
    }

    public String s2(String value) {
      return super._1(value);
    }

    public String s1() {
      return super._0();
    }

    public String s2() {
      return super._1();
    }

    @SuppressWarnings(value = "unchecked")
    public NamedTupleInFunctionType.TwoStrings assignFrom(Tuples._2<String, String> from) {
      return (NamedTupleInFunctionType.TwoStrings) super.assign(from);
    }
  }
}
