package jetbrains.mps.baseLanguage.methodDispatch.generator.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.methodDispatch.typesystem.DispatchUtil;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.methodDispatch.typesystem.DispatchGroupDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class DispatchGenUtil {
  public DispatchGenUtil() {
  }

  public static Iterable<SNode> getMatchingMethods(SNode dispatchMethod) {

    int paramIndex = 0;
    SNode parentClass = SNodeOperations.getAncestor(dispatchMethod, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
    SNode origParamClass = DispatchUtil.getParamClass(dispatchMethod);

    final Map<SNode, SNode> classesToMethods = MapSequence.fromMap(new HashMap<SNode, SNode>());

    Iterable<SNode> classesToConsider;
    _FunctionTypes._return_P1_E0<? extends Iterable<SNode>, ? super SNode> methods;

    if (SNodeOperations.isInstanceOf(dispatchMethod, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
      // if it's a static method declaration then we don't look into ancestors 
      // otherwise we scan all the way up 
      classesToConsider = Sequence.<SNode>singleton(parentClass);
      methods = new _FunctionTypes._return_P1_E0<List<SNode>, SNode>() {
        public List<SNode> invoke(SNode cls) {
          return SLinkOperations.getTargets(SNodeOperations.cast(cls, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "staticMethod", true);
        }
      };

    } else {
      classesToConsider = DispatchUtil.ancestors(SNodeOperations.cast(parentClass, "jetbrains.mps.baseLanguage.structure.ClassConcept"), true);
      methods = new _FunctionTypes._return_P1_E0<List<SNode>, SNode>() {
        public List<SNode> invoke(SNode cls) {
          return SLinkOperations.getTargets(SNodeOperations.cast(cls, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "method", true);
        }
      };
    }
    final DispatchGroupDescriptor desc = new DispatchGroupDescriptor(dispatchMethod);

    // traversing from the holder to the top of the hierarchy 
    for (SNode h : Sequence.fromIterable(classesToConsider)) {
      // all matching methods in this class 
      Iterable<SNode> matchingLocalMethods = Sequence.fromIterable(methods.invoke(h)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return DispatchUtil.isReadyMethod(it) && desc.equals(new DispatchGroupDescriptor(it));
        }
      });

      for (SNode method : Sequence.fromIterable(matchingLocalMethods)) {
        SNode paramClass = DispatchUtil.getParamClass(method);
        // it's our original method, skip 
        if (method == dispatchMethod) {
          continue;
        }
        // already overridden down the hierarchy 
        if (MapSequence.fromMap(classesToMethods).containsKey(paramClass) || paramClass == origParamClass) {
          continue;
        }
        // not an ancenstor of our param class, (thus, must be a super class) 
        if (!(DispatchUtil.isParent(SNodeOperations.cast(origParamClass, "jetbrains.mps.baseLanguage.structure.ClassConcept"), SNodeOperations.cast(paramClass, "jetbrains.mps.baseLanguage.structure.ClassConcept")))) {
          continue;
        }
        // not overridden in classes down the hierarchy 
        MapSequence.fromMap(classesToMethods).put(paramClass, method);
      }
    }

    // remove those which correspond not to the nearest ancestor of our parameter class 
    Set<SNode> toRemove = SetSequence.fromSet(new HashSet<SNode>());

    for (SNode clas : SetSequence.fromSet(MapSequence.fromMap(classesToMethods).keySet())) {
      SNode cls = clas;
      SNode superCls = SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(cls, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "superclass", true), "classifier", false);
      while (superCls != origParamClass && (superCls != null)) {
        if (MapSequence.fromMap(classesToMethods).containsKey(superCls)) {
          // we only take the nearest ancestors 
          SetSequence.fromSet(toRemove).addElement(cls);
          cls = superCls;
        }
        superCls = SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(superCls, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "superclass", true), "classifier", false);
      }
    }
    SetSequence.fromSet(toRemove).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        MapSequence.fromMap(classesToMethods).removeKey(it);
      }
    });
    return MapSequence.fromMap(classesToMethods).values();
  }
}
