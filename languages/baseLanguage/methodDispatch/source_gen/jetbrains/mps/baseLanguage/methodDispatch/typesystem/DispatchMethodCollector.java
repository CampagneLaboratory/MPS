package jetbrains.mps.baseLanguage.methodDispatch.typesystem;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IMapping;

public class DispatchMethodCollector {
  private Map<DispatchGroupDescriptor, DispatchGroup> groups = MapSequence.fromMap(new HashMap<DispatchGroupDescriptor, DispatchGroup>());

  public DispatchMethodCollector(SNode classToCheck) {
    fill(classToCheck);
  }

  private void fill(SNode classToCheck) {

    // Instance methods 

    SNode clas = classToCheck;

    while ((clas != null)) {
      startNewClass(clas);
      for (SNode m : ListSequence.fromList(SLinkOperations.getTargets(clas, "method", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return DispatchUtil.isReadyMethod(it);
        }
      })) {
        addMethod(m);
      }
      clas = SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(clas, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "superclass", true), "classifier", false);
    }

    for (DispatchGroup g : Sequence.fromIterable(MapSequence.fromMap(groups).values())) {
      g.finalize();
    }

    // Now static methods. They're simpler. No need to take superclasses into account 
    for (SNode m : ListSequence.fromList(SLinkOperations.getTargets(classToCheck, "staticMethod", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return DispatchUtil.isReadyMethod(it);
      }
    })) {
      addMethod(m);
    }
  }

  private void startNewClass(SNode cls) {
    for (IMapping<DispatchGroupDescriptor, DispatchGroup> g : MapSequence.fromMap(groups)) {
      g.value().startNewClass(cls);
    }
  }

  private void addMethod(SNode method) {

    DispatchGroupDescriptor desc = new DispatchGroupDescriptor(method);
    DispatchGroup group = MapSequence.fromMap(groups).get(desc);
    if (group == null) {
      group = new DispatchGroup(desc, SNodeOperations.getAncestor(method, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false));
      MapSequence.fromMap(groups).put(desc, group);
    }

    group.addMethod(method);
  }

  public Iterable<DispatchGroup> getGroups() {
    return MapSequence.fromMap(groups).values();
  }
}
