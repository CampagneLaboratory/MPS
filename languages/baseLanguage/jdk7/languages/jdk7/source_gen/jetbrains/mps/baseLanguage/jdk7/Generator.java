package jetbrains.mps.baseLanguage.jdk7;

/*Generated by MPS */

import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.generator.runtime.TemplateModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.project.structure.modules.ModuleReference;
import java.util.Collection;
import jetbrains.mps.generator.runtime.TemplateModel;
import jetbrains.mps.generator.runtime.TemplateUtil;
import jetbrains.mps.generator.runtime.TemplateMappingPriorityRule;
import jetbrains.mps.smodel.language.LanguageRuntime;

public class Generator implements TemplateModule {
  public static SModuleReference MODULE_REFERENCE = ModuleReference.fromString("2ec34c1e-7442-4656-9a59-44fa731a9286(jetbrains.mps.baseLanguage.jdk7#616711547384942258)");
  private Language sourceLanguage;
  private final Collection<TemplateModel> models;
  private Collection<String> usedLanguages;

  public Generator(Language sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
    models = TemplateUtil.<TemplateModel>asCollection(getTemplateModel("jetbrains.mps.baseLanguage.jdk7.generator.template.main.TemplateModelImpl"));
    usedLanguages = TemplateUtil.<String>asCollection("jetbrains.mps.baseLanguage", "jetbrains.mps.baseLanguageInternal");
  }

  private TemplateModel getTemplateModel(String name) {
    SModule module = MPSModuleRepository.getInstance().getModule(MODULE_REFERENCE.getModuleId());
    Class<TemplateModel> clazz = ClassLoaderManager.getInstance().getClass(module, name);
    try {
      return clazz.getConstructor(TemplateModel.class).newInstance(this);
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }


  public String getAlias() {
    return "jetbrains.mps.baseLanguage.jdk7/baseLanguage";
  }

  public Collection<TemplateModel> getModels() {
    return models;
  }

  public Collection<TemplateMappingPriorityRule> getPriorities() {
    return null;
  }

  public SModuleReference getReference() {
    return MODULE_REFERENCE;
  }

  public Collection<String> getUsedLanguages() {
    return usedLanguages;
  }

  public LanguageRuntime getSourceLanguage() {
    return sourceLanguage;
  }

  public Collection<String> getReferencedModules() {
    return null;
  }
}
