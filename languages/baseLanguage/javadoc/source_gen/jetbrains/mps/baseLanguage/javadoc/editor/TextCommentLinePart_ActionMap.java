package jetbrains.mps.baseLanguage.javadoc.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.javadoc.behavior.CommentLine_Behavior;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;

public class TextCommentLinePart_ActionMap {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.BACKSPACE, new TextCommentLinePart_ActionMap.TextCommentLinePart_ActionMap_BACKSPACE(node));
    editorCell.setAction(CellActionType.DELETE, new TextCommentLinePart_ActionMap.TextCommentLinePart_ActionMap_DELETE(node));
  }

  public static class TextCommentLinePart_ActionMap_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public TextCommentLinePart_ActionMap_BACKSPACE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      System.out.println("Backspace is not yet supported, so all is handled by the delete action handler");
    }
  }

  public static class TextCommentLinePart_ActionMap_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public TextCommentLinePart_ActionMap_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(final EditorContext editorContext, SNode node) {
      System.out.println("Delete action " + (SPropertyOperations.getString(SNodeOperations.as(node, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text")));
      System.out.println("Node: " + node.getReference().toString());
      System.out.println("Selected node: " + editorContext.getSelectedNode().getReference().toString());
      int caretPosition = ((EditorCell_Label) editorContext.getSelectedCell()).getCaretPosition();
      System.out.println("Selection: " + caretPosition);
      // todo: this cannot distinguish backspace and delete when placed on the first position in a part 
      if (caretPosition == 0) {
        //  Caret is at the beginning of part, we're doing backspace 
        boolean isFirstPart;
        boolean isFirstLine;
        SNode nodeToSelect;
        int caret;
        SNode currrentNode = editorContext.getSelectedNode();
        isFirstPart = (SNodeOperations.getPrevSibling(currrentNode) == null);
        isFirstLine = (SNodeOperations.getPrevSibling(SNodeOperations.getParent(currrentNode)) == null);
        if (isFirstPart) {
          if (isFirstLine) {
            //  This is beginning of comment lines container 
            if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(currrentNode)), "jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment")) {
              SNodeOperations.deleteNode(SNodeOperations.getParent(currrentNode));
            } else if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(currrentNode)), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart")) {
              NodeCaretPair nodeCaret = BehaviorReflection.invokeVirtual(NodeCaretPair.class, SNodeOperations.cast(SNodeOperations.getParent(SNodeOperations.getParent(currrentNode)), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"), "virtual_smartDelete_9042833497008205283", new Object[]{true});
              editorContext.selectWRTFocusPolicy(nodeCaret.myNode);
              ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(nodeCaret.myCaret);
            }
            return;
          } else {
            //  This is the beginning of line 
            SNode curLine = SNodeOperations.cast(SNodeOperations.getParent(currrentNode), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
            SNode prevLine = SNodeOperations.cast(SNodeOperations.getPrevSibling(curLine), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
            nodeToSelect = ListSequence.fromList(SLinkOperations.getTargets(prevLine, "part", true)).last();
            int index = ListSequence.fromList(SLinkOperations.getTargets(prevLine, "part", true)).count() - 1;
            ListSequence.fromList(SLinkOperations.getTargets(prevLine, "part", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(curLine, "part", true)));
            if (SNodeOperations.isInstanceOf(nodeToSelect, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart") && isNotEmpty_iqiv00_a0a6a0a0i0g0d2(SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text"))) {
              caret = SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text").length();
            } else {
              caret = 0;
            }
            CommentLine_Behavior.call_tryMergeToRight_439148907936414403(prevLine, index);

            SNodeOperations.deleteNode(curLine);
            editorContext.selectWRTFocusPolicy(nodeToSelect);
            ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(caret);
            return;
          }
        } else {
          //  Caret is at the beginning of text part inside comment line 
          if (SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(currrentNode), "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart")) {
            nodeToSelect = SNodeOperations.getPrevSibling(currrentNode);
            SNode linePart = SNodeOperations.cast(nodeToSelect, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart");
            if (isEmpty_iqiv00_a0c0b0a8a6a3c(SPropertyOperations.getString(linePart, "text"))) {
              SNodeOperations.deleteNode(nodeToSelect);
              nodeToSelect = currrentNode;
            } else {
              SPropertyOperations.set(linePart, "text", SPropertyOperations.getString(linePart, "text").substring(0, SPropertyOperations.getString(linePart, "text").length() - 1));
            }
            editorContext.selectWRTFocusPolicy(nodeToSelect);
          } else if (SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(currrentNode), "jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart") || SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(currrentNode), "jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement")) {
            NodeCaretPair nodeCaret = BehaviorReflection.invokeVirtual(NodeCaretPair.class, SNodeOperations.cast(SNodeOperations.getPrevSibling(currrentNode), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"), "virtual_smartDelete_9042833497008205283", new Object[]{false});
            editorContext.selectWRTFocusPolicy(nodeCaret.myNode);
            ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(nodeCaret.myCaret);
          }
          return;
        }
      } else {
        // We're doing delete 
        final Wrappers._T<SNode> nodeToSelect = new Wrappers._T<SNode>(null);
        final Wrappers._int caret = new Wrappers._int(-1);
        EditorCell_Label selectedCell = ((EditorCell_Label) editorContext.getSelectedCell());
        if (isNotEmpty_iqiv00_a0e0a6a3c(selectedCell.getSelectedText())) {
          selectedCell.deleteSelection();
          if (isEmpty_iqiv00_a0b0e0a6a3c(selectedCell.getText())) {
            if ((SNodeOperations.getNextSibling(node) == null)) {
              CommentLine_Behavior.call_tryMergeToRight_439148907936414403(SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine"), SNodeOperations.getIndexInParent(node));
            } else {
              nodeToSelect.value = SNodeOperations.getNextSibling(node);
              SNodeOperations.deleteNode(node);
            }
          }
          editorContext.selectWRTFocusPolicy(nodeToSelect.value);
          return;
        } else if (selectedCell.getCaretPosition() == selectedCell.getText().length()) {
          //  Caret is at the end of part 
          final Wrappers._boolean isLastPart = new Wrappers._boolean();
          final Wrappers._boolean isLastLine = new Wrappers._boolean();
          final SNode currentNode = editorContext.getSelectedNode();
          ModelAccess.instance().runReadAction(new Runnable() {
            public void run() {
              isLastPart.value = (SNodeOperations.getNextSibling(currentNode) == null);
              isLastLine.value = (SNodeOperations.getNextSibling(SNodeOperations.getParent(currentNode)) == null);
            }
          });
          if (isLastPart.value) {
            if (isLastLine.value) {
              //  This is end of comment lines container 
              if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(currentNode)), "jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment")) {
                //  Shouldn't delete documentation comment 
              } else if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(currentNode)), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart")) {
                NodeCaretPair nodeCaret = BehaviorReflection.invokeVirtual(NodeCaretPair.class, SNodeOperations.cast(SNodeOperations.getParent(SNodeOperations.getParent(currentNode)), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"), "virtual_smartDelete_9042833497008205283", new Object[]{false});
                editorContext.selectWRTFocusPolicy(nodeCaret.myNode);
                ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(nodeCaret.myCaret);
              }
              return;
            } else {
              //  This is the end of line 
              ModelAccess.instance().runWriteActionInCommand(new Runnable() {
                public void run() {
                  SNode curLine = SNodeOperations.cast(SNodeOperations.getParent(currentNode), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
                  SNode nextLine = SNodeOperations.cast(SNodeOperations.getNextSibling(curLine), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
                  nodeToSelect.value = ListSequence.fromList(SLinkOperations.getTargets(curLine, "part", true)).last();
                  int index = SNodeOperations.getIndexInParent(currentNode);
                  ListSequence.fromList(SLinkOperations.getTargets(curLine, "part", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(nextLine, "part", true)));
                  if (SNodeOperations.isInstanceOf(nodeToSelect.value, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart") && isNotEmpty_iqiv00_a0a5a0a0a0a1a0a0f0a4a0g0d2(SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect.value, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text"))) {
                    caret.value = SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect.value, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text").length();
                  } else {
                    caret.value = 0;
                  }
                  CommentLine_Behavior.call_tryMergeToRight_439148907936414403(curLine, index);

                  SNodeOperations.deleteNode(nextLine);
                  editorContext.selectWRTFocusPolicy(nodeToSelect.value);
                  ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(caret.value);
                }
              });
              return;
            }
          } else {
            System.out.println("BBBBBBBB " + currentNode);
            //  Caret is at the end of text part inside comment line 
            if (SNodeOperations.isInstanceOf(SNodeOperations.getNextSibling(currentNode), "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart")) {
              nodeToSelect.value = SNodeOperations.getNextSibling(currentNode);
              if (isEmpty_iqiv00_a0b0c0a5a0e0a6a3c(SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect.value, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text"))) {
                SNodeOperations.deleteNode(nodeToSelect.value);
                nodeToSelect.value = node;
              } else {
                SPropertyOperations.set(SNodeOperations.cast(nodeToSelect.value, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text", SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect.value, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text").substring(1));
              }
              editorContext.selectWRTFocusPolicy(nodeToSelect.value);
              ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(caret.value);
            } else if (SNodeOperations.isInstanceOf(SNodeOperations.getNextSibling(currentNode), "jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart") || SNodeOperations.isInstanceOf(SNodeOperations.getNextSibling(currentNode), "jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement")) {
              System.out.println("AAAAAAAAAAAAA");
              NodeCaretPair nodeCaret = BehaviorReflection.invokeVirtual(NodeCaretPair.class, SNodeOperations.cast(SNodeOperations.getNextSibling(currentNode), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"), "virtual_smartDelete_9042833497008205283", new Object[]{true});
              editorContext.selectWRTFocusPolicy(nodeCaret.myNode);
              ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(nodeCaret.myCaret);
            }
            return;
          }
        } else {
          SPropertyOperations.set(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text", SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text").substring(0, selectedCell.getCaretPosition()) + SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text").substring(selectedCell.getCaretPosition() + 1));
          return;
        }

      }
    }

    public static boolean isNotEmpty_iqiv00_a0a6a0a0i0g0d2(String str) {
      return str != null && str.length() > 0;
    }

    public static boolean isEmpty_iqiv00_a0c0b0a8a6a3c(String str) {
      return str == null || str.length() == 0;
    }

    public static boolean isEmpty_iqiv00_a0b0e0a6a3c(String str) {
      return str == null || str.length() == 0;
    }

    public static boolean isNotEmpty_iqiv00_a0a5a0a0a0a1a0a0f0a4a0g0d2(String str) {
      return str != null && str.length() > 0;
    }

    public static boolean isEmpty_iqiv00_a0b0c0a5a0e0a6a3c(String str) {
      return str == null || str.length() == 0;
    }

    public static boolean isNotEmpty_iqiv00_a0e0a6a3c(String str) {
      return str != null && str.length() > 0;
    }
  }
}
