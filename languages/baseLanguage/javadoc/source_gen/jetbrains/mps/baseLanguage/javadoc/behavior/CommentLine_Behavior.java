package jetbrains.mps.baseLanguage.javadoc.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.javadoc.editor.NodeCaretPair;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class CommentLine_Behavior {
  public static void init(SNode thisNode) {
    SLinkOperations.addNewChild(thisNode, "part", "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart");
  }

  public static NodeCaretPair call_tryMergeToRight_439148907936414403(SNode thisNode, int index) {
    if (index >= 0 && index + 1 < ListSequence.fromList(SLinkOperations.getTargets(thisNode, "part", true)).count() && SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "part", true)).getElement(index), "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart") && SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "part", true)).getElement(index + 1), "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart")) {
      SNode leftPart = SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "part", true)).getElement(index), "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart");
      int offset = SPropertyOperations.getString(leftPart, "text").length();
      SNode rightPart = SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "part", true)).getElement(index + 1), "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart");

      String text = ((isEmpty_hntxdb_a0a0a0e0a0b(SPropertyOperations.getString(leftPart, "text")) ?
        "" :
        SPropertyOperations.getString(leftPart, "text")
      )) + ((isEmpty_hntxdb_a0a0a0e0a0b_0(SPropertyOperations.getString(rightPart, "text")) ?
        "" :
        SPropertyOperations.getString(rightPart, "text")
      ));
      SPropertyOperations.set(leftPart, "text", text);
      SNodeOperations.deleteNode(rightPart);
      return new NodeCaretPair(leftPart, offset);
    }
    return null;
  }

  public static boolean isEmpty_hntxdb_a0a0a0e0a0b(String str) {
    return str == null || str.length() == 0;
  }

  public static boolean isEmpty_hntxdb_a0a0a0e0a0b_0(String str) {
    return str == null || str.length() == 0;
  }
}
