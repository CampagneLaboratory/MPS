package jetbrains.mps.baseLanguage.javadoc.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionAspectBase;
import jetbrains.mps.intentions.IntentionFactory;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;
import jetbrains.mps.intentions.IntentionsManager;

public final class IntentionsDescriptor extends IntentionAspectBase {
  private final long[] myId2Index;
  private IntentionFactory[] myIntentions0;
  private IntentionFactory[] myIntentions1;
  private IntentionFactory[] myIntentions2;
  private IntentionFactory[] myIntentions3;
  private IntentionFactory[] myIntentions4;
  private IntentionFactory[] myIntentions5;
  private IntentionFactory[] myIntentions6;

  public IntentionsDescriptor() {
    myId2Index = new long[7];
    myId2Index[0] = 0xf8c108ca68L;
    myId2Index[1] = 0xf8cc56b1fcL;
    myId2Index[2] = 0xf93c84351fL;
    myId2Index[3] = 0x101d9d3ca30L;
    myId2Index[4] = 0x4a3c146b7fae70d3L;
    myId2Index[5] = 0x4a3c146b7faeeb34L;
    myId2Index[6] = 0x5bc4aa08e154b399L;
  }

  @Override
  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SConceptId conceptId) {
    final int index = Arrays.binarySearch(myId2Index, conceptId.getIdValue());
    switch (index) {
      case 0:
        // Concept: FieldDeclaration 
        if (myIntentions0 == null) {
          myIntentions0 = new IntentionFactory[1];
          myIntentions0[0] = new AddFieldDocComment_Intention();
        }
        return Arrays.asList(myIntentions0);
      case 1:
        // Concept: BaseMethodDeclaration 
        if (myIntentions1 == null) {
          myIntentions1 = new IntentionFactory[1];
          myIntentions1[0] = new AddMethodDocComment_Intention();
        }
        return Arrays.asList(myIntentions1);
      case 2:
        // Concept: StaticFieldDeclaration 
        if (myIntentions2 == null) {
          myIntentions2 = new IntentionFactory[1];
          myIntentions2[0] = new AddStaticFieldDocComment_Intention();
        }
        return Arrays.asList(myIntentions2);
      case 3:
        // Concept: Classifier 
        if (myIntentions3 == null) {
          myIntentions3 = new IntentionFactory[1];
          myIntentions3[0] = new AddClassifierDocComment_Intention();
        }
        return Arrays.asList(myIntentions3);
      case 4:
        // Concept: BaseDocComment 
        if (myIntentions4 == null) {
          myIntentions4 = new IntentionFactory[6];
          myIntentions4[0] = new AddAuthorBlockDocTag_Intention();
          myIntentions4[1] = new AddSinceBlockDocTag_Intention();
          myIntentions4[2] = new AddVersionBlockTagDoc_Intention();
          myIntentions4[3] = new AddSeeBlockTag_Intention();
          myIntentions4[4] = new AddDeprecatedBlockDocTag_Intention();
          myIntentions4[5] = new OrganizeTags_Intention();
        }
        return Arrays.asList(myIntentions4);
      case 5:
        // Concept: MethodDocComment 
        if (myIntentions5 == null) {
          myIntentions5 = new IntentionFactory[3];
          myIntentions5[0] = new AddParameterBlockDocTag_Intention();
          myIntentions5[1] = new AddReturnBlockTag_Intention();
          myIntentions5[2] = new AddThrowBlockDocTag_Intention();
        }
        return Arrays.asList(myIntentions5);
      case 6:
        // Concept: HTMLElement 
        if (myIntentions6 == null) {
          myIntentions6 = new IntentionFactory[1];
          myIntentions6[0] = new FoldHTMLElement_Intention();
        }
        return Arrays.asList(myIntentions6);
      default:
        return null;
    }
  }

  public void init() {
    IntentionsManager.getInstance().registerIntentionFactory(new AddAuthorBlockDocTag_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddClassifierDocComment_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddDeprecatedBlockDocTag_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddFieldDocComment_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddMethodDocComment_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddParameterBlockDocTag_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddReturnBlockTag_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddSeeBlockTag_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddSinceBlockDocTag_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddStaticFieldDocComment_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddThrowBlockDocTag_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new AddVersionBlockTagDoc_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new FoldHTMLElement_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new OrganizeTags_Intention());
  }
}
