package jetbrains.mps.baseLanguage.javadoc.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public abstract class DocCommentTextGen {
  public static void javadocIndent(final SNodeTextGen textGen) {
    textGen.indentBuffer();
    textGen.append(" * ");
  }

  public static void docCommentStart(SNode node, final SNodeTextGen textGen) {
    textGen.indentBuffer();
    textGen.append("/**");

    textGen.appendNewLine();
    DocCommentTextGen.javadocIndent(textGen);
    {
      Iterable<SNode> collection = SLinkOperations.getTargets(node, "body", true);
      for (SNode item : collection) {
        textGen.appendNode(item);
      }
    }

    if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, node, "virtual_isTagSectionEmpty_8465538089690623795", new Object[]{}))) {
      textGen.appendNewLine();
      DocCommentTextGen.javadocIndent(textGen);
    }

    {
      Iterable<SNode> collection = SLinkOperations.getTargets(node, "author", true);
      for (SNode item : collection) {
        textGen.appendNode(item);
      }
    }
    {
      Iterable<SNode> collection = SLinkOperations.getTargets(node, "since", true);
      for (SNode item : collection) {
        textGen.appendNode(item);
      }
    }
    {
      Iterable<SNode> collection = SLinkOperations.getTargets(node, "version", true);
      for (SNode item : collection) {
        textGen.appendNode(item);
      }
    }
    {
      Iterable<SNode> collection = SLinkOperations.getTargets(node, "see", true);
      for (SNode item : collection) {
        textGen.appendNode(item);
      }
    }
    if ((SLinkOperations.getTarget(node, "deprecated", true) != null) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.IBLDeprecatable") && SPropertyOperations.getBoolean(SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.IBLDeprecatable"), "isDeprecated")) {
      textGen.appendNewLine();
      textGen.appendNode(SLinkOperations.getTarget(node, "deprecated", true));
    }
  }

  public static void docCommentEnd(SNode node, final SNodeTextGen textGen) {
    textGen.appendNewLine();
    textGen.indentBuffer();
    textGen.append(" */");
    textGen.appendNewLine();
  }
}
