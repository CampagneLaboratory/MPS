package jetbrains.mps.baseLanguage.javadoc.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.baseLanguage.javadoc.behavior.BaseDocComment_Behavior;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.baseLanguage.javadoc.editor.DocTagHelper;
import jetbrains.mps.intentions.IntentionDescriptor;

public class OrganizeTags_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public OrganizeTags_Intention() {
  }
  public String getConcept() {
    return "jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment";
  }
  public String getPresentation() {
    return "OrganizeTags";
  }
  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.javadoc.intentions.OrganizeTags_Intention";
  }
  public String getLanguageFqName() {
    return "jetbrains.mps.baseLanguage.javadoc";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return true;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return BaseDocComment_Behavior.call_hasTags_4948473272651019109(node);
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:17a5547b-be2d-47de-9fc3-8304c9f5de67(jetbrains.mps.baseLanguage.javadoc.intentions)", "7427066632718011033");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new OrganizeTags_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Organize Tags";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      DocTagHelper.organizeTags(node);
    }
    public IntentionDescriptor getDescriptor() {
      return OrganizeTags_Intention.this;
    }
  }
}
