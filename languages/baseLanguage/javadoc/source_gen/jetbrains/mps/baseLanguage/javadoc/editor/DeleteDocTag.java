package jetbrains.mps.baseLanguage.javadoc.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;

public class DeleteDocTag {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new DeleteDocTag.DeleteDocTag_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new DeleteDocTag.DeleteDocTag_BACKSPACE(node));
  }
  public static class DeleteDocTag_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public DeleteDocTag_DELETE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode candidate = ((SNodeOperations.getNextSibling(node) != null) ? SNodeOperations.getNextSibling(node) : ((SNodeOperations.getPrevSibling(node) != null) ? SNodeOperations.getPrevSibling(node) : SNodeOperations.getParent(node)));
      SNodeOperations.deleteNode(node);
      if (candidate != null) {
        SelectionUtil.selectCell(editorContext, candidate, SelectionManager.FIRST_EDITABLE_CELL);
      }
    }
  }
  public static class DeleteDocTag_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public DeleteDocTag_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode candidate = ((SNodeOperations.getPrevSibling(node) != null) ? SNodeOperations.getPrevSibling(node) : ((SNodeOperations.getNextSibling(node) != null) ? SNodeOperations.getNextSibling(node) : SNodeOperations.getParent(node)));
      SNodeOperations.deleteNode(node);
      if (candidate != null) {
        SelectionUtil.selectCell(editorContext, candidate, SelectionManager.FIRST_EDITABLE_CELL);
      }
    }
  }
}
