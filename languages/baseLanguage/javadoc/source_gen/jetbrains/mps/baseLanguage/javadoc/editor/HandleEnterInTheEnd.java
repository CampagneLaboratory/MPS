package jetbrains.mps.baseLanguage.javadoc.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;

public class HandleEnterInTheEnd {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.INSERT, new HandleEnterInTheEnd.HandleEnterInTheEnd_INSERT(node));
  }

  public static class HandleEnterInTheEnd_INSERT extends AbstractCellAction {
    /*package*/ SNode myNode;

    public HandleEnterInTheEnd_INSERT(SNode node) {
      this.myNode = node;
    }

    public String getDescriptionText() {
      return "insertNewLine";
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode selectedNode = editorContext.getSelectedNode();
      SNode commentLinePart = SNodeOperations.as(selectedNode, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart");
      if (commentLinePart == null) {
        return;
      }
      SNode nextLine;
      EditorCell_Label editorCell = ((EditorCell_Label) editorContext.getSelectedCell());
      int caretPosition = editorCell.getCaretPosition();
      nextLine = TextCommentPartUtil.divideLineBetweenCaretAndInsertNewLine(commentLinePart, caretPosition, caretPosition, editorCell.getText());
      editorContext.selectWRTFocusPolicy(nextLine);
      ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(0);
    }
  }
}
