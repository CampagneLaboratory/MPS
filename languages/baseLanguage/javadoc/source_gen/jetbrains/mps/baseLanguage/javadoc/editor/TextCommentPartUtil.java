package jetbrains.mps.baseLanguage.javadoc.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class TextCommentPartUtil {
  public TextCommentPartUtil() {
  }
  public static void processCellText(EditorContext editorContext, final SNode node, final String newText) {
    final Wrappers._int index = new Wrappers._int(newText.indexOf("{@"));
    if (index.value != -1) {
      SNode tagPart;
      divideLineBetweenCaret(node, index.value, index.value + 2, newText);
      tagPart = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart", null);
      SNodeOperations.insertNextSiblingChild(node, tagPart);
      editorContext.selectWRTFocusPolicy(tagPart);
      return;
    }
    index.value = newText.indexOf("{{");
    if (index.value != -1) {
      SNode codeSnippet;
      SNode nextLine = divideLineBetweenCaretAndInsertNewLine(node, index.value, index.value + 2, newText);
      codeSnippet = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.javadoc.structure.CodeSnippet", null);
      SNodeOperations.insertPrevSiblingChild(nextLine, codeSnippet);
      editorContext.selectWRTFocusPolicy(codeSnippet);
      return;
    }
    index.value = newText.indexOf("<");
    if (index.value != -1) {
      final Wrappers._T<SNode> htmlElement = new Wrappers._T<SNode>();
      editorContext.getRepository().getModelAccess().executeCommand(new Runnable() {
        public void run() {
          divideLineBetweenCaret(node, index.value, index.value + 1, newText);

          htmlElement.value = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement", null);
          SNodeOperations.insertNextSiblingChild(node, htmlElement.value);
        }
      });
      editorContext.selectWRTFocusPolicy(htmlElement.value);
      return;
    }
  }
  public static void divideLineBetweenCaret(SNode node, int index1, int index2, String text) {
    String leftPart = text.substring(0, index1);
    String rightPart = text.substring(index2);

    SPropertyOperations.set(node, MetaAdapterFactory.getProperty(new UUID(-972752984950357426l, -4964296947050367098l), 8970989240999019143l, 8970989240999019144l, "text"), leftPart);

    SNode newTextPart = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart", null);
    SPropertyOperations.set(newTextPart, MetaAdapterFactory.getProperty(new UUID(-972752984950357426l, -4964296947050367098l), 8970989240999019143l, 8970989240999019144l, "text"), rightPart);
    SNodeOperations.insertNextSiblingChild(node, newTextPart);
  }
  public static SNode divideLineBetweenCaretAndInsertNewLine(SNode node, int index1, int index2, String text) {
    String leftPart = text.substring(0, index1);
    String rightPart = text.substring(index2);

    SNode thisLine = SNodeOperations.cast(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(new UUID(-972752984950357426l, -4964296947050367098l), 8465538089690331500l, "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine"));
    SNode nextLine = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.javadoc.structure.CommentLine", null);
    SNodeFactoryOperations.addNewChild(nextLine, MetaAdapterFactory.getContainmentLink(new UUID(-972752984950357426l, -4964296947050367098l), 8465538089690331500l, 8970989240999019149l, "part"), "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart");
    SPropertyOperations.set(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getChildren(nextLine, MetaAdapterFactory.getContainmentLink(new UUID(-972752984950357426l, -4964296947050367098l), 8465538089690331500l, 8970989240999019149l, "part"))).getElement(0), MetaAdapterFactory.getConcept(new UUID(-972752984950357426l, -4964296947050367098l), 8970989240999019143l, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart")), MetaAdapterFactory.getProperty(new UUID(-972752984950357426l, -4964296947050367098l), 8970989240999019143l, 8970989240999019144l, "text"), rightPart);
    SNodeOperations.insertNextSiblingChild(thisLine, nextLine);

    int indexInParent = SNodeOperations.getIndexInParent(node);
    SPropertyOperations.set(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getChildren(thisLine, MetaAdapterFactory.getContainmentLink(new UUID(-972752984950357426l, -4964296947050367098l), 8465538089690331500l, 8970989240999019149l, "part"))).getElement(indexInParent), MetaAdapterFactory.getConcept(new UUID(-972752984950357426l, -4964296947050367098l), 8970989240999019143l, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart")), MetaAdapterFactory.getProperty(new UUID(-972752984950357426l, -4964296947050367098l), 8970989240999019143l, 8970989240999019144l, "text"), leftPart);

    while (ListSequence.fromList(SLinkOperations.getChildren(thisLine, MetaAdapterFactory.getContainmentLink(new UUID(-972752984950357426l, -4964296947050367098l), 8465538089690331500l, 8970989240999019149l, "part"))).count() > indexInParent + 1) {
      SNode linePart = ListSequence.fromList(SLinkOperations.getChildren(thisLine, MetaAdapterFactory.getContainmentLink(new UUID(-972752984950357426l, -4964296947050367098l), 8465538089690331500l, 8970989240999019149l, "part"))).getElement(indexInParent + 1);
      SNodeOperations.detachNode(linePart);
      ListSequence.fromList(SLinkOperations.getChildren(nextLine, MetaAdapterFactory.getContainmentLink(new UUID(-972752984950357426l, -4964296947050367098l), 8465538089690331500l, 8970989240999019149l, "part"))).addElement(linePart);
    }

    return nextLine;
  }
}
