package jetbrains.mps.baseLanguage.javadoc.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.intentions.IntentionDescriptor;

public class AddAuthorBlockDocTag_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public AddAuthorBlockDocTag_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment";
  }

  public String getPresentation() {
    return "AddAuthorBlockDocTag";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.javadoc.intentions.AddAuthorBlockDocTag_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromList(SLinkOperations.getTargets(node, "author", true)).isEmpty();
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:17a5547b-be2d-47de-9fc3-8304c9f5de67(jetbrains.mps.baseLanguage.javadoc.intentions)", "8465538089690783660");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AddAuthorBlockDocTag_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add @author Tag";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode authorTag = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.javadoc.structure.AuthorBlockDocTag", null);
      ListSequence.fromList(SLinkOperations.getTargets(node, "author", true)).addElement(authorTag);
      editorContext.flushEvents();
      EditorCell authorEditorCell = editorContext.getEditorComponent().findNodeCell(authorTag);
      jetbrains.mps.nodeEditor.cells.EditorCell cellToSelect = null;
      if (authorEditorCell instanceof EditorCell_Collection) {
        for (jetbrains.mps.nodeEditor.cells.EditorCell childCell : Sequence.fromIterable((EditorCell_Collection) authorEditorCell)) {
          String cellId = childCell.getCellId();
          if (cellId != null && cellId.contains("text")) {
            cellToSelect = childCell;
            break;
          }
        }
      }
      editorContext.getEditorComponent().changeSelection((cellToSelect != null ?
        cellToSelect :
        authorEditorCell
      ));
    }

    public IntentionDescriptor getDescriptor() {
      return AddAuthorBlockDocTag_Intention.this;
    }
  }
}
