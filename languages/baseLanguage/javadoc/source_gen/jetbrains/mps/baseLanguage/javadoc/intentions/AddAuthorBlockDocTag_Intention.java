package jetbrains.mps.baseLanguage.javadoc.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.openapi.editor.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class AddAuthorBlockDocTag_Intention extends BaseIntention {
  public AddAuthorBlockDocTag_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment";
  }

  public String getPresentation() {
    return "AddAuthorBlockDocTag";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.javadoc.intentions.AddAuthorBlockDocTag_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:2167abe7-3634-479b-a698-2bff67ab958a(jetbrains.mps.baseLanguage.javadoc.intentions@2_0)", "8465538089690783660");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Add @author Tag";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromList(SLinkOperations.getTargets(node, "author", true)).isEmpty();
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode authorTag = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.javadoc.structure.AuthorBlockDocTag", null);
    ListSequence.fromList(SLinkOperations.getTargets(node, "author", true)).addElement(authorTag);
    editorContext.flushEvents();
    EditorCell authorEditorCell = editorContext.getEditorComponent().findNodeCell(authorTag);
    jetbrains.mps.nodeEditor.cells.EditorCell cellToSelect = null;
    if (authorEditorCell instanceof EditorCell_Collection) {
      for (jetbrains.mps.nodeEditor.cells.EditorCell childCell : Sequence.fromIterable((EditorCell_Collection) authorEditorCell)) {
        String cellId = childCell.getCellId();
        if (cellId != null && cellId.contains("text")) {
          cellToSelect = childCell;
          break;
        }
      }
    }
    editorContext.getEditorComponent().changeSelection((cellToSelect != null ?
      cellToSelect :
      authorEditorCell
    ));
  }
}
