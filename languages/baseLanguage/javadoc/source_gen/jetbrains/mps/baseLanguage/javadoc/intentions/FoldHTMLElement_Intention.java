package jetbrains.mps.baseLanguage.javadoc.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Locale;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class FoldHTMLElement_Intention extends BaseIntention {
  public FoldHTMLElement_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement";
  }

  public String getPresentation() {
    return "FoldHTMLElement";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.javadoc.intentions.FoldHTMLElement_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:2167abe7-3634-479b-a698-2bff67ab958a(jetbrains.mps.baseLanguage.javadoc.intentions@2_0)", "6612597108004799966");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    String name = (isEmpty_ngv5m6_a0a0a0g(SPropertyOperations.getString(node, "name")) ?
      "..." :
      SPropertyOperations.getString(node, "name")
    );
    return (ListSequence.fromList(SLinkOperations.getTargets(node, "line", true)).isEmpty() ?
      String.format(Locale.getDefault(), "Convert to <%s></%s>", name, name) :
      String.format(Locale.getDefault(), "Convert to <%s />", name)
    );
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "line", true)).isEmpty()) {
      SNodeFactoryOperations.addNewChild(node, "line", "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
    } else {
      ListSequence.fromList(SLinkOperations.getTargets(node, "line", true)).clear();
    }
  }

  public static boolean isEmpty_ngv5m6_a0a0a0g(String str) {
    return str == null || str.length() == 0;
  }
}
